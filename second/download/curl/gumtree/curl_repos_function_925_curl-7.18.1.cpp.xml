<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_925_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">sec_send<pos:position pos:line="2" pos:column="9"/></name><parameter_list pos:line="2" pos:column="9">(<parameter><decl><type><name><name pos:line="2" pos:column="10">struct<pos:position pos:line="2" pos:column="16"/></name> <name pos:line="2" pos:column="17">connectdata<pos:position pos:line="2" pos:column="28"/></name></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">conn<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">int<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">fd<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="44">char<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">from<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">int<pos:position pos:line="2" pos:column="59"/></name></type> <name pos:line="2" pos:column="60">length<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="67"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">bytes<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">void<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">buf<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">enum<pos:position pos:line="6" pos:column="7"/></name> <name pos:line="6" pos:column="8">protection_level<pos:position pos:line="6" pos:column="24"/></name></name></type> <name pos:line="6" pos:column="25">protlevel<pos:position pos:line="6" pos:column="34"/></name> <init pos:line="6" pos:column="35">= <expr><name><name pos:line="6" pos:column="37">conn<pos:position pos:line="6" pos:column="41"/></name><operator pos:line="6" pos:column="41">-&gt;<pos:position pos:line="6" pos:column="46"/></operator><name pos:line="6" pos:column="43">data_prot<pos:position pos:line="6" pos:column="52"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="53"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">iscmd<pos:position pos:line="7" pos:column="12"/></name> <init pos:line="7" pos:column="13">= <expr><name pos:line="7" pos:column="15">protlevel<pos:position pos:line="7" pos:column="24"/></name> <operator pos:line="7" pos:column="25">==<pos:position pos:line="7" pos:column="27"/></operator> <name pos:line="7" pos:column="28">prot_cmd<pos:position pos:line="7" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>

  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><name pos:line="9" pos:column="6">iscmd<pos:position pos:line="9" pos:column="11"/></name></expr>)<pos:position pos:line="9" pos:column="12"/></condition><then pos:line="9" pos:column="12"> <block pos:line="9" pos:column="13">{
    <if pos:line="10" pos:column="5">if<condition pos:line="10" pos:column="7">(<expr><operator pos:line="10" pos:column="8">!<pos:position pos:line="10" pos:column="9"/></operator><call><name pos:line="10" pos:column="9">strncmp<pos:position pos:line="10" pos:column="16"/></name><argument_list pos:line="10" pos:column="16">(<argument><expr><name pos:line="10" pos:column="17">from<pos:position pos:line="10" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="23">"PASS "<pos:position pos:line="10" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="32">5<pos:position pos:line="10" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="34"/></argument_list></call> <operator pos:line="10" pos:column="35">||<pos:position pos:line="10" pos:column="37"/></operator> <operator pos:line="10" pos:column="38">!<pos:position pos:line="10" pos:column="39"/></operator><call><name pos:line="10" pos:column="39">strncmp<pos:position pos:line="10" pos:column="46"/></name><argument_list pos:line="10" pos:column="46">(<argument><expr><name pos:line="10" pos:column="47">from<pos:position pos:line="10" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="53">"ACCT "<pos:position pos:line="10" pos:column="60"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="62">5<pos:position pos:line="10" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="65"/></condition><then pos:line="10" pos:column="65">
      <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="7">protlevel<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">=<pos:position pos:line="11" pos:column="18"/></operator> <name pos:line="11" pos:column="19">prot_private<pos:position pos:line="11" pos:column="31"/></name></expr>;<pos:position pos:line="11" pos:column="32"/></expr_stmt></block></then>
    <else pos:line="12" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="7">protlevel<pos:position pos:line="13" pos:column="16"/></name> <operator pos:line="13" pos:column="17">=<pos:position pos:line="13" pos:column="18"/></operator> <name><name pos:line="13" pos:column="19">conn<pos:position pos:line="13" pos:column="23"/></name><operator pos:line="13" pos:column="23">-&gt;<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="25">command_prot<pos:position pos:line="13" pos:column="37"/></name></name></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt></block></else></if>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="15" pos:column="3">bytes<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <call pos:line="15" pos:column="11">(<name><name pos:line="15" pos:column="12">conn<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">-&gt;<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="18">mech<pos:position pos:line="15" pos:column="22"/></name><operator pos:line="15" pos:column="22">-&gt;<pos:position pos:line="15" pos:column="27"/></operator><name pos:line="15" pos:column="24">encode<pos:position pos:line="15" pos:column="30"/></name></name>)<argument_list pos:line="15" pos:column="31">(<argument><expr><name><name pos:line="15" pos:column="32">conn<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">-&gt;<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="38">app_data<pos:position pos:line="15" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="48">from<pos:position pos:line="15" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="54">length<pos:position pos:line="15" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="62">protlevel<pos:position pos:line="15" pos:column="71"/></name></expr></argument>,
                               <argument><expr><operator pos:line="16" pos:column="32">&amp;<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="33">buf<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="38">conn<pos:position pos:line="16" pos:column="42"/></name></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><name pos:line="17" pos:column="6">iscmd<pos:position pos:line="17" pos:column="11"/></name></expr>)<pos:position pos:line="17" pos:column="12"/></condition><then pos:line="17" pos:column="12"> <block pos:line="17" pos:column="13">{
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">char<pos:position pos:line="18" pos:column="9"/></name> <modifier pos:line="18" pos:column="10">*<pos:position pos:line="18" pos:column="11"/></modifier></type><name pos:line="18" pos:column="11">cmdbuf<pos:position pos:line="18" pos:column="17"/></name></decl>;<pos:position pos:line="18" pos:column="18"/></decl_stmt>

    <expr_stmt><expr><name pos:line="20" pos:column="5">bytes<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <call><name pos:line="20" pos:column="13">Curl_base64_encode<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name><name pos:line="20" pos:column="32">conn<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">-&gt;<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="38">data<pos:position pos:line="20" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="44">(<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="45">char<pos:position pos:line="20" pos:column="49"/></name> <operator pos:line="20" pos:column="50">*<pos:position pos:line="20" pos:column="51"/></operator><operator pos:line="20" pos:column="51">)<pos:position pos:line="20" pos:column="52"/></operator><name pos:line="20" pos:column="52">buf<pos:position pos:line="20" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="57">bytes<pos:position pos:line="20" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="64">&amp;<pos:position pos:line="20" pos:column="69"/></operator><name pos:line="20" pos:column="65">cmdbuf<pos:position pos:line="20" pos:column="71"/></name></expr></argument>)<pos:position pos:line="20" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="73"/></expr_stmt>
    <if pos:line="21" pos:column="5">if<condition pos:line="21" pos:column="7">(<expr><name pos:line="21" pos:column="8">bytes<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">&gt;<pos:position pos:line="21" pos:column="18"/></operator> <literal type="number" pos:line="21" pos:column="16">0<pos:position pos:line="21" pos:column="17"/></literal></expr>)<pos:position pos:line="21" pos:column="18"/></condition><then pos:line="21" pos:column="18"> <block pos:line="21" pos:column="19">{
      <if pos:line="22" pos:column="7">if<condition pos:line="22" pos:column="9">(<expr><name pos:line="22" pos:column="10">protlevel<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">==<pos:position pos:line="22" pos:column="22"/></operator> <name pos:line="22" pos:column="23">prot_private<pos:position pos:line="22" pos:column="35"/></name></expr>)<pos:position pos:line="22" pos:column="36"/></condition><then pos:line="22" pos:column="36">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="9">block_write<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name pos:line="23" pos:column="21">fd<pos:position pos:line="23" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="25">"ENC "<pos:position pos:line="23" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="33">4<pos:position pos:line="23" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="36"/></expr_stmt></block></then>
      <else pos:line="24" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="9">block_write<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><name pos:line="25" pos:column="21">fd<pos:position pos:line="25" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="25">"MIC "<pos:position pos:line="25" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="33">4<pos:position pos:line="25" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt></block></else></if>
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">block_write<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">(<argument><expr><name pos:line="26" pos:column="19">fd<pos:position pos:line="26" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="23">cmdbuf<pos:position pos:line="26" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="31">bytes<pos:position pos:line="26" pos:column="36"/></name></expr></argument>)<pos:position pos:line="26" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="27" pos:column="7">block_write<pos:position pos:line="27" pos:column="18"/></name><argument_list pos:line="27" pos:column="18">(<argument><expr><name pos:line="27" pos:column="19">fd<pos:position pos:line="27" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="23">"\r\n"<pos:position pos:line="27" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="31">2<pos:position pos:line="27" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">Curl_infof<pos:position pos:line="28" pos:column="17"/></name><argument_list pos:line="28" pos:column="17">(<argument><expr><name><name pos:line="28" pos:column="18">conn<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">-&gt;<pos:position pos:line="28" pos:column="27"/></operator><name pos:line="28" pos:column="24">data<pos:position pos:line="28" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="30">"%s %s\n"<pos:position pos:line="28" pos:column="39"/></literal></expr></argument>,
                 <argument><expr><ternary><condition><expr><name pos:line="29" pos:column="18">protlevel<pos:position pos:line="29" pos:column="27"/></name> <operator pos:line="29" pos:column="28">==<pos:position pos:line="29" pos:column="30"/></operator> <name pos:line="29" pos:column="31">prot_private<pos:position pos:line="29" pos:column="43"/></name></expr> ?<pos:position pos:line="29" pos:column="45"/></condition><then pos:line="29" pos:column="45"> <expr><literal type="string" pos:line="29" pos:column="46">"ENC"<pos:position pos:line="29" pos:column="51"/></literal></expr> <pos:position pos:line="29" pos:column="52"/></then><else pos:line="29" pos:column="52">: <expr><literal type="string" pos:line="29" pos:column="54">"MIC"<pos:position pos:line="29" pos:column="59"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="29" pos:column="61">cmdbuf<pos:position pos:line="29" pos:column="67"/></name></expr></argument>)<pos:position pos:line="29" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="69"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">free<pos:position pos:line="30" pos:column="11"/></name><argument_list pos:line="30" pos:column="11">(<argument><expr><name pos:line="30" pos:column="12">cmdbuf<pos:position pos:line="30" pos:column="18"/></name></expr></argument>)<pos:position pos:line="30" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
  }<pos:position pos:line="32" pos:column="4"/></block></then>
  <else pos:line="33" pos:column="3">else <block pos:line="33" pos:column="8">{
    <expr_stmt><expr><name pos:line="34" pos:column="5">bytes<pos:position pos:line="34" pos:column="10"/></name> <operator pos:line="34" pos:column="11">=<pos:position pos:line="34" pos:column="12"/></operator> <call><name pos:line="34" pos:column="13">htonl<pos:position pos:line="34" pos:column="18"/></name><argument_list pos:line="34" pos:column="18">(<argument><expr><name pos:line="34" pos:column="19">bytes<pos:position pos:line="34" pos:column="24"/></name></expr></argument>)<pos:position pos:line="34" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">block_write<pos:position pos:line="35" pos:column="16"/></name><argument_list pos:line="35" pos:column="16">(<argument><expr><name pos:line="35" pos:column="17">fd<pos:position pos:line="35" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="21">&amp;<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="22">bytes<pos:position pos:line="35" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="29">sizeof<argument_list pos:line="35" pos:column="35">(<argument><expr><name pos:line="35" pos:column="36">bytes<pos:position pos:line="35" pos:column="41"/></name></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">block_write<pos:position pos:line="36" pos:column="16"/></name><argument_list pos:line="36" pos:column="16">(<argument><expr><name pos:line="36" pos:column="17">fd<pos:position pos:line="36" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="21">buf<pos:position pos:line="36" pos:column="24"/></name></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="26">ntohl<pos:position pos:line="36" pos:column="31"/></name><argument_list pos:line="36" pos:column="31">(<argument><expr><name pos:line="36" pos:column="32">bytes<pos:position pos:line="36" pos:column="37"/></name></expr></argument>)<pos:position pos:line="36" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="40"/></expr_stmt>
  }<pos:position pos:line="37" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="38" pos:column="3">free<pos:position pos:line="38" pos:column="7"/></name><argument_list pos:line="38" pos:column="7">(<argument><expr><name pos:line="38" pos:column="8">buf<pos:position pos:line="38" pos:column="11"/></name></expr></argument>)<pos:position pos:line="38" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="13"/></expr_stmt>
  <return pos:line="39" pos:column="3">return <expr><name pos:line="39" pos:column="10">length<pos:position pos:line="39" pos:column="16"/></name></expr>;<pos:position pos:line="39" pos:column="17"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
