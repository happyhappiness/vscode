<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1647_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">Curl_multi_dump<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name><name pos:line="1" pos:column="22">struct<pos:position pos:line="1" pos:column="28"/></name> <name pos:line="1" pos:column="29">Curl_multi<pos:position pos:line="1" pos:column="39"/></name></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">multi<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="47"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">Curl_easy<pos:position pos:line="3" pos:column="19"/></name></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">data<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">i<pos:position pos:line="4" pos:column="8"/></name></decl>;<pos:position pos:line="4" pos:column="9"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="5" pos:column="3">fprintf<pos:position pos:line="5" pos:column="10"/></name><argument_list pos:line="5" pos:column="10">(<argument><expr><name pos:line="5" pos:column="11">stderr<pos:position pos:line="5" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="19">"* Multi status: %d handles, %d alive\n"<pos:position pos:line="5" pos:column="59"/></literal></expr></argument>,
          <argument><expr><name><name pos:line="6" pos:column="11">multi<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">-&gt;<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="18">num_easy<pos:position pos:line="6" pos:column="26"/></name></name></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="28">multi<pos:position pos:line="6" pos:column="33"/></name><operator pos:line="6" pos:column="33">-&gt;<pos:position pos:line="6" pos:column="38"/></operator><name pos:line="6" pos:column="35">num_alive<pos:position pos:line="6" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="46"/></expr_stmt>
  <for pos:line="7" pos:column="3">for<control pos:line="7" pos:column="6">(<init><expr><name pos:line="7" pos:column="7">data<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <name><name pos:line="7" pos:column="14">multi<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">-&gt;<pos:position pos:line="7" pos:column="24"/></operator><name pos:line="7" pos:column="21">easyp<pos:position pos:line="7" pos:column="26"/></name></name></expr>;<pos:position pos:line="7" pos:column="27"/></init> <condition><expr><name pos:line="7" pos:column="28">data<pos:position pos:line="7" pos:column="32"/></name></expr>;<pos:position pos:line="7" pos:column="33"/></condition> <incr><expr><name pos:line="7" pos:column="34">data<pos:position pos:line="7" pos:column="38"/></name> <operator pos:line="7" pos:column="39">=<pos:position pos:line="7" pos:column="40"/></operator> <name><name pos:line="7" pos:column="41">data<pos:position pos:line="7" pos:column="45"/></name><operator pos:line="7" pos:column="45">-&gt;<pos:position pos:line="7" pos:column="50"/></operator><name pos:line="7" pos:column="47">next<pos:position pos:line="7" pos:column="51"/></name></name></expr></incr>)<pos:position pos:line="7" pos:column="52"/></control> <block pos:line="7" pos:column="53">{
    <if pos:line="8" pos:column="5">if<condition pos:line="8" pos:column="7">(<expr><name><name pos:line="8" pos:column="8">data<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">-&gt;<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="14">mstate<pos:position pos:line="8" pos:column="20"/></name></name> <operator pos:line="8" pos:column="21">&lt;<pos:position pos:line="8" pos:column="25"/></operator> <name pos:line="8" pos:column="23">CURLM_STATE_COMPLETED<pos:position pos:line="8" pos:column="44"/></name></expr>)<pos:position pos:line="8" pos:column="45"/></condition><then pos:line="8" pos:column="45"> <block pos:line="8" pos:column="46">{
      <comment type="block" pos:line="9" pos:column="7">/* only display handles that are not completed */</comment>
      <expr_stmt><expr><call><name pos:line="10" pos:column="7">fprintf<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><name pos:line="10" pos:column="15">stderr<pos:position pos:line="10" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="23">"handle %p, state %s, %d sockets\n"<pos:position pos:line="10" pos:column="58"/></literal></expr></argument>,
              <argument><expr><operator pos:line="11" pos:column="15">(<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="16">void<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">*<pos:position pos:line="11" pos:column="22"/></operator><operator pos:line="11" pos:column="22">)<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="23">data<pos:position pos:line="11" pos:column="27"/></name></expr></argument>,
              <argument><expr><name><name pos:line="12" pos:column="15">statename<pos:position pos:line="12" pos:column="24"/></name><index pos:line="12" pos:column="24">[<expr><name><name pos:line="12" pos:column="25">data<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">-&gt;<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="31">mstate<pos:position pos:line="12" pos:column="37"/></name></name></expr>]<pos:position pos:line="12" pos:column="38"/></index></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="40">data<pos:position pos:line="12" pos:column="44"/></name><operator pos:line="12" pos:column="44">-&gt;<pos:position pos:line="12" pos:column="49"/></operator><name pos:line="12" pos:column="46">numsocks<pos:position pos:line="12" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="56"/></expr_stmt>
      <for pos:line="13" pos:column="7">for<control pos:line="13" pos:column="10">(<init><expr><name pos:line="13" pos:column="11">i<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <literal type="number" pos:line="13" pos:column="15">0<pos:position pos:line="13" pos:column="16"/></literal></expr>;<pos:position pos:line="13" pos:column="17"/></init> <condition><expr><name pos:line="13" pos:column="18">i<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">&lt;<pos:position pos:line="13" pos:column="24"/></operator> <name><name pos:line="13" pos:column="22">data<pos:position pos:line="13" pos:column="26"/></name><operator pos:line="13" pos:column="26">-&gt;<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="28">numsocks<pos:position pos:line="13" pos:column="36"/></name></name></expr>;<pos:position pos:line="13" pos:column="37"/></condition> <incr><expr><name pos:line="13" pos:column="38">i<pos:position pos:line="13" pos:column="39"/></name><operator pos:line="13" pos:column="39">++<pos:position pos:line="13" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="13" pos:column="42"/></control> <block pos:line="13" pos:column="43">{
        <decl_stmt><decl><type><name pos:line="14" pos:column="9">curl_socket_t<pos:position pos:line="14" pos:column="22"/></name></type> <name pos:line="14" pos:column="23">s<pos:position pos:line="14" pos:column="24"/></name> <init pos:line="14" pos:column="25">= <expr><name><name pos:line="14" pos:column="27">data<pos:position pos:line="14" pos:column="31"/></name><operator pos:line="14" pos:column="31">-&gt;<pos:position pos:line="14" pos:column="36"/></operator><name pos:line="14" pos:column="33">sockets<pos:position pos:line="14" pos:column="40"/></name><index pos:line="14" pos:column="40">[<expr><name pos:line="14" pos:column="41">i<pos:position pos:line="14" pos:column="42"/></name></expr>]<pos:position pos:line="14" pos:column="43"/></index></name></expr></init></decl>;<pos:position pos:line="14" pos:column="44"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="15" pos:column="9">struct<pos:position pos:line="15" pos:column="15"/></name> <name pos:line="15" pos:column="16">Curl_sh_entry<pos:position pos:line="15" pos:column="29"/></name></name> <modifier pos:line="15" pos:column="30">*<pos:position pos:line="15" pos:column="31"/></modifier></type><name pos:line="15" pos:column="31">entry<pos:position pos:line="15" pos:column="36"/></name> <init pos:line="15" pos:column="37">= <expr><call><name pos:line="15" pos:column="39">sh_getentry<pos:position pos:line="15" pos:column="50"/></name><argument_list pos:line="15" pos:column="50">(<argument><expr><operator pos:line="15" pos:column="51">&amp;<pos:position pos:line="15" pos:column="56"/></operator><name><name pos:line="15" pos:column="52">multi<pos:position pos:line="15" pos:column="57"/></name><operator pos:line="15" pos:column="57">-&gt;<pos:position pos:line="15" pos:column="62"/></operator><name pos:line="15" pos:column="59">sockhash<pos:position pos:line="15" pos:column="67"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="69">s<pos:position pos:line="15" pos:column="70"/></name></expr></argument>)<pos:position pos:line="15" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="72"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="17" pos:column="9">fprintf<pos:position pos:line="17" pos:column="16"/></name><argument_list pos:line="17" pos:column="16">(<argument><expr><name pos:line="17" pos:column="17">stderr<pos:position pos:line="17" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="25">"%d "<pos:position pos:line="17" pos:column="30"/></literal></expr></argument>, <argument><expr><operator pos:line="17" pos:column="32">(<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="33">int<pos:position pos:line="17" pos:column="36"/></name><operator pos:line="17" pos:column="36">)<pos:position pos:line="17" pos:column="37"/></operator><name pos:line="17" pos:column="37">s<pos:position pos:line="17" pos:column="38"/></name></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="40"/></expr_stmt>
        <if pos:line="18" pos:column="9">if<condition pos:line="18" pos:column="11">(<expr><operator pos:line="18" pos:column="12">!<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">entry<pos:position pos:line="18" pos:column="18"/></name></expr>)<pos:position pos:line="18" pos:column="19"/></condition><then pos:line="18" pos:column="19"> <block pos:line="18" pos:column="20">{
          <expr_stmt><expr><call><name pos:line="19" pos:column="11">fprintf<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><name pos:line="19" pos:column="19">stderr<pos:position pos:line="19" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="27">"INTERNAL CONFUSION\n"<pos:position pos:line="19" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="51"/></expr_stmt>
          <continue pos:line="20" pos:column="11">continue;<pos:position pos:line="20" pos:column="20"/></continue>
        }<pos:position pos:line="21" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">fprintf<pos:position pos:line="22" pos:column="16"/></name><argument_list pos:line="22" pos:column="16">(<argument><expr><name pos:line="22" pos:column="17">stderr<pos:position pos:line="22" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="25">"[%s %s] "<pos:position pos:line="22" pos:column="35"/></literal></expr></argument>,
                <argument><expr><ternary><condition><expr><name><name pos:line="23" pos:column="17">entry<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">-&gt;<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="24">action<pos:position pos:line="23" pos:column="30"/></name></name><operator pos:line="23" pos:column="30">&amp;<pos:position pos:line="23" pos:column="35"/></operator><name pos:line="23" pos:column="31">CURL_POLL_IN<pos:position pos:line="23" pos:column="43"/></name></expr>?<pos:position pos:line="23" pos:column="44"/></condition><then><expr><literal type="string" pos:line="23" pos:column="44">"RECVING"<pos:position pos:line="23" pos:column="53"/></literal></expr></then><else pos:line="23" pos:column="53">:<expr><literal type="string" pos:line="23" pos:column="54">""<pos:position pos:line="23" pos:column="56"/></literal></expr></else></ternary></expr></argument>,
                <argument><expr><ternary><condition><expr><name><name pos:line="24" pos:column="17">entry<pos:position pos:line="24" pos:column="22"/></name><operator pos:line="24" pos:column="22">-&gt;<pos:position pos:line="24" pos:column="27"/></operator><name pos:line="24" pos:column="24">action<pos:position pos:line="24" pos:column="30"/></name></name><operator pos:line="24" pos:column="30">&amp;<pos:position pos:line="24" pos:column="35"/></operator><name pos:line="24" pos:column="31">CURL_POLL_OUT<pos:position pos:line="24" pos:column="44"/></name></expr>?<pos:position pos:line="24" pos:column="45"/></condition><then><expr><literal type="string" pos:line="24" pos:column="45">"SENDING"<pos:position pos:line="24" pos:column="54"/></literal></expr></then><else pos:line="24" pos:column="54">:<expr><literal type="string" pos:line="24" pos:column="55">""<pos:position pos:line="24" pos:column="57"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="24" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="59"/></expr_stmt>
      }<pos:position pos:line="25" pos:column="8"/></block></for>
      <if pos:line="26" pos:column="7">if<condition pos:line="26" pos:column="9">(<expr><name><name pos:line="26" pos:column="10">data<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">-&gt;<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="16">numsocks<pos:position pos:line="26" pos:column="24"/></name></name></expr>)<pos:position pos:line="26" pos:column="25"/></condition><then pos:line="26" pos:column="25">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="9">fprintf<pos:position pos:line="27" pos:column="16"/></name><argument_list pos:line="27" pos:column="16">(<argument><expr><name pos:line="27" pos:column="17">stderr<pos:position pos:line="27" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="25">"\n"<pos:position pos:line="27" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="31"/></expr_stmt></block></then></if>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>
  }<pos:position pos:line="29" pos:column="4"/></block></for>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
