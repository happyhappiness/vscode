<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_356_curl-7.14.0.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">Curl_strerror<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">connectdata<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">int<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">err<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">buf<pos:position pos:line="3" pos:column="12"/></name></decl>, <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="15">p<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">max<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="6" pos:column="3">curlassert<pos:position pos:line="6" pos:column="13"/></name><argument_list pos:line="6" pos:column="13">(<argument><expr><name pos:line="6" pos:column="14">conn<pos:position pos:line="6" pos:column="18"/></name></expr></argument>)<pos:position pos:line="6" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="7" pos:column="3">curlassert<pos:position pos:line="7" pos:column="13"/></name><argument_list pos:line="7" pos:column="13">(<argument><expr><name pos:line="7" pos:column="14">err<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">&gt;=<pos:position pos:line="7" pos:column="23"/></operator> <literal type="number" pos:line="7" pos:column="21">0<pos:position pos:line="7" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="24"/></expr_stmt>

  <expr_stmt><expr><name pos:line="9" pos:column="3">buf<pos:position pos:line="9" pos:column="6"/></name> <operator pos:line="9" pos:column="7">=<pos:position pos:line="9" pos:column="8"/></operator> <name><name pos:line="9" pos:column="9">conn<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">-&gt;<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="15">syserr_buf<pos:position pos:line="9" pos:column="25"/></name></name></expr>;<pos:position pos:line="9" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">max<pos:position pos:line="10" pos:column="6"/></name> <operator pos:line="10" pos:column="7">=<pos:position pos:line="10" pos:column="8"/></operator> <sizeof pos:line="10" pos:column="9">sizeof<argument_list pos:line="10" pos:column="15">(<argument><expr><name><name pos:line="10" pos:column="16">conn<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">-&gt;<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="22">syserr_buf<pos:position pos:line="10" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="33"/></argument_list></sizeof><operator pos:line="10" pos:column="33">-<pos:position pos:line="10" pos:column="34"/></operator><literal type="number" pos:line="10" pos:column="34">1<pos:position pos:line="10" pos:column="35"/></literal></expr>;<pos:position pos:line="10" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="11" pos:column="3">*<pos:position pos:line="11" pos:column="4"/></operator><name pos:line="11" pos:column="4">buf<pos:position pos:line="11" pos:column="7"/></name> <operator pos:line="11" pos:column="8">=<pos:position pos:line="11" pos:column="9"/></operator> <literal type="char" pos:line="11" pos:column="10">'\0'<pos:position pos:line="11" pos:column="14"/></literal></expr>;<pos:position pos:line="11" pos:column="15"/></expr_stmt>

<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><call><name pos:line="13" pos:column="5">defined<pos:position pos:line="13" pos:column="12"/></name><argument_list pos:line="13" pos:column="12">(<argument><expr><name pos:line="13" pos:column="13">WIN32<pos:position pos:line="13" pos:column="18"/></name></expr></argument>)<pos:position pos:line="13" pos:column="19"/></argument_list></call> <operator pos:line="13" pos:column="20">&amp;&amp;<pos:position pos:line="13" pos:column="30"/></operator> <operator pos:line="13" pos:column="23">!<pos:position pos:line="13" pos:column="24"/></operator><call><name pos:line="13" pos:column="24">defined<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">__CYGWIN__<pos:position pos:line="13" pos:column="42"/></name></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr></cpp:if>

<cpp:ifdef pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">ifdef<pos:position pos:line="15" pos:column="7"/></cpp:directive> <name pos:line="15" pos:column="8">_WIN32_WCE<pos:position pos:line="15" pos:column="18"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="16" pos:column="3">buf<pos:position pos:line="16" pos:column="6"/></name><index pos:line="16" pos:column="6">[<expr><literal type="number" pos:line="16" pos:column="7">0<pos:position pos:line="16" pos:column="8"/></literal></expr>]<pos:position pos:line="16" pos:column="9"/></index></name><operator pos:line="16" pos:column="9">=<pos:position pos:line="16" pos:column="10"/></operator><literal type="number" pos:line="16" pos:column="10">0<pos:position pos:line="16" pos:column="11"/></literal></expr>;<pos:position pos:line="16" pos:column="12"/></expr_stmt>
  <block pos:line="17" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">wchar_t<pos:position pos:line="18" pos:column="12"/></name></type> <name><name pos:line="18" pos:column="13">wbuf<pos:position pos:line="18" pos:column="17"/></name><index pos:line="18" pos:column="17">[<expr><literal type="number" pos:line="18" pos:column="18">256<pos:position pos:line="18" pos:column="21"/></literal></expr>]<pos:position pos:line="18" pos:column="22"/></index></name></decl>;<pos:position pos:line="18" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">FormatMessage<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">FORMAT_MESSAGE_FROM_SYSTEM<pos:position pos:line="20" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="47">NULL<pos:position pos:line="20" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="53">err<pos:position pos:line="20" pos:column="56"/></name></expr></argument>,
                  <argument><expr><name pos:line="21" pos:column="19">LANG_NEUTRAL<pos:position pos:line="21" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="33">wbuf<pos:position pos:line="21" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="39">sizeof<argument_list pos:line="21" pos:column="45">(<argument><expr><name pos:line="21" pos:column="46">wbuf<pos:position pos:line="21" pos:column="50"/></name></expr></argument>)<pos:position pos:line="21" pos:column="51"/></argument_list></sizeof><operator pos:line="21" pos:column="51">/<pos:position pos:line="21" pos:column="52"/></operator><sizeof pos:line="21" pos:column="52">sizeof<argument_list pos:line="21" pos:column="58">(<argument><expr><name pos:line="21" pos:column="59">wchar_t<pos:position pos:line="21" pos:column="66"/></name></expr></argument>)<pos:position pos:line="21" pos:column="67"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="21" pos:column="69">NULL<pos:position pos:line="21" pos:column="73"/></name></expr></argument>)<pos:position pos:line="21" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">wcstombs<pos:position pos:line="22" pos:column="13"/></name><argument_list pos:line="22" pos:column="13">(<argument><expr><name pos:line="22" pos:column="14">buf<pos:position pos:line="22" pos:column="17"/></name></expr></argument>,<argument><expr><name pos:line="22" pos:column="18">wbuf<pos:position pos:line="22" pos:column="22"/></name></expr></argument>,<argument><expr><name pos:line="22" pos:column="23">max<pos:position pos:line="22" pos:column="26"/></name></expr></argument>)<pos:position pos:line="22" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="23" pos:column="4"/></block>

<cpp:else pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">else<pos:position pos:line="25" pos:column="6"/></cpp:directive></cpp:else>

  <comment type="block" pos:line="27" pos:column="3">/* 'sys_nerr' is the maximum errno number, it is not widely portable */</comment>
  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><name pos:line="28" pos:column="7">err<pos:position pos:line="28" pos:column="10"/></name> <operator pos:line="28" pos:column="11">&gt;=<pos:position pos:line="28" pos:column="16"/></operator> <literal type="number" pos:line="28" pos:column="14">0<pos:position pos:line="28" pos:column="15"/></literal> <operator pos:line="28" pos:column="16">&amp;&amp;<pos:position pos:line="28" pos:column="26"/></operator> <name pos:line="28" pos:column="19">err<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">&lt;<pos:position pos:line="28" pos:column="27"/></operator> <name pos:line="28" pos:column="25">sys_nerr<pos:position pos:line="28" pos:column="33"/></name></expr>)<pos:position pos:line="28" pos:column="34"/></condition><then pos:line="28" pos:column="34">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="5">strncpy<pos:position pos:line="29" pos:column="12"/></name><argument_list pos:line="29" pos:column="12">(<argument><expr><name pos:line="29" pos:column="13">buf<pos:position pos:line="29" pos:column="16"/></name></expr></argument>, <argument><expr><call><name pos:line="29" pos:column="18">strerror<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><name pos:line="29" pos:column="27">err<pos:position pos:line="29" pos:column="30"/></name></expr></argument>)<pos:position pos:line="29" pos:column="31"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="29" pos:column="33">max<pos:position pos:line="29" pos:column="36"/></name></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="38"/></expr_stmt></block></then>
  <else pos:line="30" pos:column="3">else <block pos:line="30" pos:column="8">{
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><operator pos:line="31" pos:column="9">!<pos:position pos:line="31" pos:column="10"/></operator><call><name pos:line="31" pos:column="10">get_winsock_error<pos:position pos:line="31" pos:column="27"/></name><argument_list pos:line="31" pos:column="27">(<argument><expr><name pos:line="31" pos:column="28">err<pos:position pos:line="31" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="33">buf<pos:position pos:line="31" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="38">max<pos:position pos:line="31" pos:column="41"/></name></expr></argument>)<pos:position pos:line="31" pos:column="42"/></argument_list></call> <operator pos:line="31" pos:column="43">&amp;&amp;<pos:position pos:line="31" pos:column="53"/></operator>
        <operator pos:line="32" pos:column="9">!<pos:position pos:line="32" pos:column="10"/></operator><call><name pos:line="32" pos:column="10">FormatMessage<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><name pos:line="32" pos:column="24">FORMAT_MESSAGE_FROM_SYSTEM<pos:position pos:line="32" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="52">NULL<pos:position pos:line="32" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="58">err<pos:position pos:line="32" pos:column="61"/></name></expr></argument>,
                       <argument><expr><name pos:line="33" pos:column="24">LANG_NEUTRAL<pos:position pos:line="33" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="38">buf<pos:position pos:line="33" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="43">(<pos:position pos:line="33" pos:column="44"/></operator><name pos:line="33" pos:column="44">DWORD<pos:position pos:line="33" pos:column="49"/></name><operator pos:line="33" pos:column="49">)<pos:position pos:line="33" pos:column="50"/></operator><name pos:line="33" pos:column="50">max<pos:position pos:line="33" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="55">NULL<pos:position pos:line="33" pos:column="59"/></name></expr></argument>)<pos:position pos:line="33" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="61"/></condition><then pos:line="33" pos:column="61">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="7">snprintf<pos:position pos:line="34" pos:column="15"/></name><argument_list pos:line="34" pos:column="15">(<argument><expr><name pos:line="34" pos:column="16">buf<pos:position pos:line="34" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="21">max<pos:position pos:line="34" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="26">"Unknown error %d (%#x)"<pos:position pos:line="34" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="52">err<pos:position pos:line="34" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="57">err<pos:position pos:line="34" pos:column="60"/></name></expr></argument>)<pos:position pos:line="34" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="62"/></expr_stmt></block></then></if>
  }<pos:position pos:line="35" pos:column="4"/></block></else></if>
<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif<pos:position pos:line="36" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:else pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">else<pos:position pos:line="37" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="37" pos:column="7">/* not native Windows coming up */</comment>

  <comment type="block" pos:line="39" pos:column="3">/* These should be atomic and hopefully thread-safe */</comment>
<cpp:ifdef pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">ifdef<pos:position pos:line="40" pos:column="7"/></cpp:directive> <name pos:line="40" pos:column="8">HAVE_STRERROR_R<pos:position pos:line="40" pos:column="23"/></name></cpp:ifdef>
  <comment type="block" pos:line="41" pos:column="3">/* There are two different APIs for strerror_r(). The POSIX and the GLIBC
     versions. */</comment>
<cpp:ifdef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">ifdef<pos:position pos:line="43" pos:column="7"/></cpp:directive> <name pos:line="43" pos:column="8">HAVE_POSIX_STRERROR_R<pos:position pos:line="43" pos:column="29"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="44" pos:column="3">strerror_r<pos:position pos:line="44" pos:column="13"/></name><argument_list pos:line="44" pos:column="13">(<argument><expr><name pos:line="44" pos:column="14">err<pos:position pos:line="44" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="19">buf<pos:position pos:line="44" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="24">max<pos:position pos:line="44" pos:column="27"/></name></expr></argument>)<pos:position pos:line="44" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="29"/></expr_stmt>
  <comment type="block" pos:line="45" pos:column="3">/* this may set errno to ERANGE if insufficient storage was supplied via
     'strerrbuf' and 'buflen' to contain the generated message string, or
     EINVAL if the value of 'errnum' is not a valid error number.*/</comment>
<cpp:else pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">else<pos:position pos:line="48" pos:column="6"/></cpp:directive></cpp:else>
  <block pos:line="49" pos:column="3">{
    <comment type="block" pos:line="50" pos:column="5">/* HAVE_GLIBC_STRERROR_R */</comment>
    <decl_stmt><decl><type><name pos:line="51" pos:column="5">char<pos:position pos:line="51" pos:column="9"/></name></type> <name><name pos:line="51" pos:column="10">buffer<pos:position pos:line="51" pos:column="16"/></name><index pos:line="51" pos:column="16">[<expr><literal type="number" pos:line="51" pos:column="17">256<pos:position pos:line="51" pos:column="20"/></literal></expr>]<pos:position pos:line="51" pos:column="21"/></index></name></decl>;<pos:position pos:line="51" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="52" pos:column="5">char<pos:position pos:line="52" pos:column="9"/></name> <modifier pos:line="52" pos:column="10">*<pos:position pos:line="52" pos:column="11"/></modifier></type><name pos:line="52" pos:column="11">msg<pos:position pos:line="52" pos:column="14"/></name> <init pos:line="52" pos:column="15">= <expr><call><name pos:line="52" pos:column="17">strerror_r<pos:position pos:line="52" pos:column="27"/></name><argument_list pos:line="52" pos:column="27">(<argument><expr><name pos:line="52" pos:column="28">err<pos:position pos:line="52" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="33">buffer<pos:position pos:line="52" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="52" pos:column="41">sizeof<argument_list pos:line="52" pos:column="47">(<argument><expr><name pos:line="52" pos:column="48">buffer<pos:position pos:line="52" pos:column="54"/></name></expr></argument>)<pos:position pos:line="52" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="52" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="52" pos:column="57"/></decl_stmt>
    <comment type="block" pos:line="53" pos:column="5">/* this version of strerror_r() only *might* use the buffer we pass to
       the function, but it always returns the error message as a pointer,
       so we must copy that string unconditionally */</comment>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">strncpy<pos:position pos:line="56" pos:column="12"/></name><argument_list pos:line="56" pos:column="12">(<argument><expr><name pos:line="56" pos:column="13">buf<pos:position pos:line="56" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="18">msg<pos:position pos:line="56" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="23">max<pos:position pos:line="56" pos:column="26"/></name></expr></argument>)<pos:position pos:line="56" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="57" pos:column="4"/></block>
<cpp:endif pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">endif<pos:position pos:line="58" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="58" pos:column="8">/* end of HAVE_GLIBC_STRERROR_R */</comment>
<cpp:else pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">else<pos:position pos:line="59" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="59" pos:column="7">/* HAVE_STRERROR_R */</comment>
  <expr_stmt><expr><call><name pos:line="60" pos:column="3">strncpy<pos:position pos:line="60" pos:column="10"/></name><argument_list pos:line="60" pos:column="10">(<argument><expr><name pos:line="60" pos:column="11">buf<pos:position pos:line="60" pos:column="14"/></name></expr></argument>, <argument><expr><call><name pos:line="60" pos:column="16">strerror<pos:position pos:line="60" pos:column="24"/></name><argument_list pos:line="60" pos:column="24">(<argument><expr><name pos:line="60" pos:column="25">err<pos:position pos:line="60" pos:column="28"/></name></expr></argument>)<pos:position pos:line="60" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="60" pos:column="31">max<pos:position pos:line="60" pos:column="34"/></name></expr></argument>)<pos:position pos:line="60" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">endif<pos:position pos:line="61" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="61" pos:column="8">/* end of HAVE_STRERROR_R */</comment>
<cpp:endif pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">endif<pos:position pos:line="62" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="62" pos:column="8">/* end of ! Windows */</comment>

  <expr_stmt><expr><name><name pos:line="64" pos:column="3">buf<pos:position pos:line="64" pos:column="6"/></name><index pos:line="64" pos:column="6">[<expr><name pos:line="64" pos:column="7">max<pos:position pos:line="64" pos:column="10"/></name></expr>]<pos:position pos:line="64" pos:column="11"/></index></name> <operator pos:line="64" pos:column="12">=<pos:position pos:line="64" pos:column="13"/></operator> <literal type="char" pos:line="64" pos:column="14">'\0'<pos:position pos:line="64" pos:column="18"/></literal></expr>;<pos:position pos:line="64" pos:column="19"/></expr_stmt> <comment type="block" pos:line="64" pos:column="20">/* make sure the string is zero terminated */</comment>

  <comment type="block" pos:line="66" pos:column="3">/* strip trailing '\r\n' or '\n'. */</comment>
  <if pos:line="67" pos:column="3">if <condition pos:line="67" pos:column="6">(<expr><operator pos:line="67" pos:column="7">(<pos:position pos:line="67" pos:column="8"/></operator><name pos:line="67" pos:column="8">p<pos:position pos:line="67" pos:column="9"/></name> <operator pos:line="67" pos:column="10">=<pos:position pos:line="67" pos:column="11"/></operator> <call><name pos:line="67" pos:column="12">strrchr<pos:position pos:line="67" pos:column="19"/></name><argument_list pos:line="67" pos:column="19">(<argument><expr><name pos:line="67" pos:column="20">buf<pos:position pos:line="67" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="67" pos:column="24">'\n'<pos:position pos:line="67" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="29"/></argument_list></call><operator pos:line="67" pos:column="29">)<pos:position pos:line="67" pos:column="30"/></operator> <operator pos:line="67" pos:column="31">!=<pos:position pos:line="67" pos:column="33"/></operator> <name pos:line="67" pos:column="34">NULL<pos:position pos:line="67" pos:column="38"/></name> <operator pos:line="67" pos:column="39">&amp;&amp;<pos:position pos:line="67" pos:column="49"/></operator> <operator pos:line="67" pos:column="42">(<pos:position pos:line="67" pos:column="43"/></operator><name pos:line="67" pos:column="43">p<pos:position pos:line="67" pos:column="44"/></name> <operator pos:line="67" pos:column="45">-<pos:position pos:line="67" pos:column="46"/></operator> <name pos:line="67" pos:column="47">buf<pos:position pos:line="67" pos:column="50"/></name><operator pos:line="67" pos:column="50">)<pos:position pos:line="67" pos:column="51"/></operator> <operator pos:line="67" pos:column="52">&gt;=<pos:position pos:line="67" pos:column="57"/></operator> <literal type="number" pos:line="67" pos:column="55">2<pos:position pos:line="67" pos:column="56"/></literal></expr>)<pos:position pos:line="67" pos:column="57"/></condition><then pos:line="67" pos:column="57">
     <block type="pseudo"><expr_stmt><expr><operator pos:line="68" pos:column="6">*<pos:position pos:line="68" pos:column="7"/></operator><name pos:line="68" pos:column="7">p<pos:position pos:line="68" pos:column="8"/></name> <operator pos:line="68" pos:column="9">=<pos:position pos:line="68" pos:column="10"/></operator> <literal type="char" pos:line="68" pos:column="11">'\0'<pos:position pos:line="68" pos:column="15"/></literal></expr>;<pos:position pos:line="68" pos:column="16"/></expr_stmt></block></then></if>
  <if pos:line="69" pos:column="3">if <condition pos:line="69" pos:column="6">(<expr><operator pos:line="69" pos:column="7">(<pos:position pos:line="69" pos:column="8"/></operator><name pos:line="69" pos:column="8">p<pos:position pos:line="69" pos:column="9"/></name> <operator pos:line="69" pos:column="10">=<pos:position pos:line="69" pos:column="11"/></operator> <call><name pos:line="69" pos:column="12">strrchr<pos:position pos:line="69" pos:column="19"/></name><argument_list pos:line="69" pos:column="19">(<argument><expr><name pos:line="69" pos:column="20">buf<pos:position pos:line="69" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="69" pos:column="24">'\r'<pos:position pos:line="69" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="29"/></argument_list></call><operator pos:line="69" pos:column="29">)<pos:position pos:line="69" pos:column="30"/></operator> <operator pos:line="69" pos:column="31">!=<pos:position pos:line="69" pos:column="33"/></operator> <name pos:line="69" pos:column="34">NULL<pos:position pos:line="69" pos:column="38"/></name> <operator pos:line="69" pos:column="39">&amp;&amp;<pos:position pos:line="69" pos:column="49"/></operator> <operator pos:line="69" pos:column="42">(<pos:position pos:line="69" pos:column="43"/></operator><name pos:line="69" pos:column="43">p<pos:position pos:line="69" pos:column="44"/></name> <operator pos:line="69" pos:column="45">-<pos:position pos:line="69" pos:column="46"/></operator> <name pos:line="69" pos:column="47">buf<pos:position pos:line="69" pos:column="50"/></name><operator pos:line="69" pos:column="50">)<pos:position pos:line="69" pos:column="51"/></operator> <operator pos:line="69" pos:column="52">&gt;=<pos:position pos:line="69" pos:column="57"/></operator> <literal type="number" pos:line="69" pos:column="55">1<pos:position pos:line="69" pos:column="56"/></literal></expr>)<pos:position pos:line="69" pos:column="57"/></condition><then pos:line="69" pos:column="57">
     <block type="pseudo"><expr_stmt><expr><operator pos:line="70" pos:column="6">*<pos:position pos:line="70" pos:column="7"/></operator><name pos:line="70" pos:column="7">p<pos:position pos:line="70" pos:column="8"/></name> <operator pos:line="70" pos:column="9">=<pos:position pos:line="70" pos:column="10"/></operator> <literal type="char" pos:line="70" pos:column="11">'\0'<pos:position pos:line="70" pos:column="15"/></literal></expr>;<pos:position pos:line="70" pos:column="16"/></expr_stmt></block></then></if>
  <return pos:line="71" pos:column="3">return <expr><name pos:line="71" pos:column="10">buf<pos:position pos:line="71" pos:column="13"/></name></expr>;<pos:position pos:line="71" pos:column="14"/></return>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
