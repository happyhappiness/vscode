<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_74_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">sock_cb<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">CURL<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">e<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="29">curl_socket_t<pos:position pos:line="1" pos:column="42"/></name></type> <name pos:line="1" pos:column="43">s<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">int<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">what<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">void<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">cbp<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">void<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">sockp<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <expr_stmt><expr><call><name pos:line="3" pos:column="3">DPRINT<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><literal type="string" pos:line="3" pos:column="10">"%s e %p s %i what %i cbp %p sockp %p\n"<pos:position pos:line="3" pos:column="50"/></literal></expr></argument>,
         <argument><expr><name pos:line="4" pos:column="10">__PRETTY_FUNCTION__<pos:position pos:line="4" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="31">e<pos:position pos:line="4" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="34">s<pos:position pos:line="4" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="37">what<pos:position pos:line="4" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="43">cbp<pos:position pos:line="4" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="48">sockp<pos:position pos:line="4" pos:column="53"/></name></expr></argument>)<pos:position pos:line="4" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="55"/></expr_stmt>

  <decl_stmt><decl><type><name pos:line="6" pos:column="3">GlobalInfo<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">g<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><operator pos:line="6" pos:column="19">(<pos:position pos:line="6" pos:column="20"/></operator><name pos:line="6" pos:column="20">GlobalInfo<pos:position pos:line="6" pos:column="30"/></name><operator pos:line="6" pos:column="30">*<pos:position pos:line="6" pos:column="31"/></operator><operator pos:line="6" pos:column="31">)<pos:position pos:line="6" pos:column="32"/></operator> <name pos:line="6" pos:column="33">cbp<pos:position pos:line="6" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">SockInfo<pos:position pos:line="7" pos:column="11"/></name> <modifier pos:line="7" pos:column="12">*<pos:position pos:line="7" pos:column="13"/></modifier></type><name pos:line="7" pos:column="13">fdp<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><operator pos:line="7" pos:column="19">(<pos:position pos:line="7" pos:column="20"/></operator><name pos:line="7" pos:column="20">SockInfo<pos:position pos:line="7" pos:column="28"/></name><operator pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></operator><operator pos:line="7" pos:column="29">)<pos:position pos:line="7" pos:column="30"/></operator> <name pos:line="7" pos:column="31">sockp<pos:position pos:line="7" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name><name pos:line="8" pos:column="15">whatstr<pos:position pos:line="8" pos:column="22"/></name><index pos:line="8" pos:column="22">[]<pos:position pos:line="8" pos:column="24"/></index></name><init pos:line="8" pos:column="24">=<expr><block pos:line="8" pos:column="25">{ <expr><literal type="string" pos:line="8" pos:column="27">"none"<pos:position pos:line="8" pos:column="33"/></literal></expr>, <expr><literal type="string" pos:line="8" pos:column="35">"IN"<pos:position pos:line="8" pos:column="39"/></literal></expr>, <expr><literal type="string" pos:line="8" pos:column="41">"OUT"<pos:position pos:line="8" pos:column="46"/></literal></expr>, <expr><literal type="string" pos:line="8" pos:column="48">"INOUT"<pos:position pos:line="8" pos:column="55"/></literal></expr>, <expr><literal type="string" pos:line="8" pos:column="57">"REMOVE"<pos:position pos:line="8" pos:column="65"/></literal></expr>}<pos:position pos:line="8" pos:column="66"/></block></expr></init></decl>;<pos:position pos:line="8" pos:column="67"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">fprintf<pos:position pos:line="10" pos:column="10"/></name><argument_list pos:line="10" pos:column="10">(<argument><expr><name pos:line="10" pos:column="11">MSG_OUT<pos:position pos:line="10" pos:column="18"/></name></expr></argument>,
          <argument><expr><literal type="string" pos:line="11" pos:column="11">"socket callback: s=%d e=%p what=%s "<pos:position pos:line="11" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="50">s<pos:position pos:line="11" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="53">e<pos:position pos:line="11" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="56">whatstr<pos:position pos:line="11" pos:column="63"/></name><index pos:line="11" pos:column="63">[<expr><name pos:line="11" pos:column="64">what<pos:position pos:line="11" pos:column="68"/></name></expr>]<pos:position pos:line="11" pos:column="69"/></index></name></expr></argument>)<pos:position pos:line="11" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="71"/></expr_stmt>
  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><name pos:line="12" pos:column="6">what<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">==<pos:position pos:line="12" pos:column="13"/></operator> <name pos:line="12" pos:column="14">CURL_POLL_REMOVE<pos:position pos:line="12" pos:column="30"/></name></expr>)<pos:position pos:line="12" pos:column="31"/></condition><then pos:line="12" pos:column="31"> <block pos:line="12" pos:column="32">{
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">fprintf<pos:position pos:line="13" pos:column="12"/></name><argument_list pos:line="13" pos:column="12">(<argument><expr><name pos:line="13" pos:column="13">MSG_OUT<pos:position pos:line="13" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="22">"\n"<pos:position pos:line="13" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">remsock<pos:position pos:line="14" pos:column="12"/></name><argument_list pos:line="14" pos:column="12">(<argument><expr><name pos:line="14" pos:column="13">fdp<pos:position pos:line="14" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="18">g<pos:position pos:line="14" pos:column="19"/></name></expr></argument>)<pos:position pos:line="14" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="15" pos:column="4"/></block></then>
  <else pos:line="16" pos:column="3">else <block pos:line="16" pos:column="8">{
    <if pos:line="17" pos:column="5">if<condition pos:line="17" pos:column="7">(<expr><operator pos:line="17" pos:column="8">!<pos:position pos:line="17" pos:column="9"/></operator><name pos:line="17" pos:column="9">fdp<pos:position pos:line="17" pos:column="12"/></name></expr>)<pos:position pos:line="17" pos:column="13"/></condition><then pos:line="17" pos:column="13"> <block pos:line="17" pos:column="14">{
      <expr_stmt><expr><call><name pos:line="18" pos:column="7">fprintf<pos:position pos:line="18" pos:column="14"/></name><argument_list pos:line="18" pos:column="14">(<argument><expr><name pos:line="18" pos:column="15">MSG_OUT<pos:position pos:line="18" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="24">"Adding data: %s\n"<pos:position pos:line="18" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="45">whatstr<pos:position pos:line="18" pos:column="52"/></name><index pos:line="18" pos:column="52">[<expr><name pos:line="18" pos:column="53">what<pos:position pos:line="18" pos:column="57"/></name></expr>]<pos:position pos:line="18" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="60"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="19" pos:column="7">addsock<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><name pos:line="19" pos:column="15">s<pos:position pos:line="19" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="18">e<pos:position pos:line="19" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="21">what<pos:position pos:line="19" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="27">g<pos:position pos:line="19" pos:column="28"/></name></expr></argument>)<pos:position pos:line="19" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then>
    <else pos:line="21" pos:column="5">else <block pos:line="21" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="22" pos:column="7">fprintf<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">(<argument><expr><name pos:line="22" pos:column="15">MSG_OUT<pos:position pos:line="22" pos:column="22"/></name></expr></argument>,
              <argument><expr><literal type="string" pos:line="23" pos:column="15">"Changing action from %s to %s\n"<pos:position pos:line="23" pos:column="48"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="24" pos:column="15">whatstr<pos:position pos:line="24" pos:column="22"/></name><index pos:line="24" pos:column="22">[<expr><name><name pos:line="24" pos:column="23">fdp<pos:position pos:line="24" pos:column="26"/></name><operator pos:line="24" pos:column="26">-&gt;<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="28">action<pos:position pos:line="24" pos:column="34"/></name></name></expr>]<pos:position pos:line="24" pos:column="35"/></index></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="37">whatstr<pos:position pos:line="24" pos:column="44"/></name><index pos:line="24" pos:column="44">[<expr><name pos:line="24" pos:column="45">what<pos:position pos:line="24" pos:column="49"/></name></expr>]<pos:position pos:line="24" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="24" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="25" pos:column="7">setsock<pos:position pos:line="25" pos:column="14"/></name><argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">fdp<pos:position pos:line="25" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="20">s<pos:position pos:line="25" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="23">e<pos:position pos:line="25" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="26">what<pos:position pos:line="25" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="32">g<pos:position pos:line="25" pos:column="33"/></name></expr></argument>)<pos:position pos:line="25" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></else></if>
  }<pos:position pos:line="27" pos:column="4"/></block></else></if>
  <return pos:line="28" pos:column="3">return <expr><literal type="number" pos:line="28" pos:column="10">0<pos:position pos:line="28" pos:column="11"/></literal></expr>;<pos:position pos:line="28" pos:column="12"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
