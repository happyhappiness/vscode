<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1987_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">Curl_amiga_init<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">()<pos:position pos:line="1" pos:column="23"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if<condition pos:line="3" pos:column="5">(<expr><operator pos:line="3" pos:column="6">!<pos:position pos:line="3" pos:column="7"/></operator><name pos:line="3" pos:column="7">SocketBase<pos:position pos:line="3" pos:column="17"/></name></expr>)<pos:position pos:line="3" pos:column="18"/></condition><then pos:line="3" pos:column="18">
    <block type="pseudo"><expr_stmt><expr><name pos:line="4" pos:column="5">SocketBase<pos:position pos:line="4" pos:column="15"/></name> <operator pos:line="4" pos:column="16">=<pos:position pos:line="4" pos:column="17"/></operator> <call><name pos:line="4" pos:column="18">OpenLibrary<pos:position pos:line="4" pos:column="29"/></name><argument_list pos:line="4" pos:column="29">(<argument><expr><literal type="string" pos:line="4" pos:column="30">"bsdsocket.library"<pos:position pos:line="4" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="51">4<pos:position pos:line="4" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="54"/></expr_stmt></block></then></if>

  <if pos:line="6" pos:column="3">if<condition pos:line="6" pos:column="5">(<expr><operator pos:line="6" pos:column="6">!<pos:position pos:line="6" pos:column="7"/></operator><name pos:line="6" pos:column="7">SocketBase<pos:position pos:line="6" pos:column="17"/></name></expr>)<pos:position pos:line="6" pos:column="18"/></condition><then pos:line="6" pos:column="18"> <block pos:line="6" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">__request<pos:position pos:line="7" pos:column="14"/></name><argument_list pos:line="7" pos:column="14">(<argument><expr><literal type="string" pos:line="7" pos:column="15">"No TCP/IP Stack running!"<pos:position pos:line="7" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="43"/></expr_stmt>
    <return pos:line="8" pos:column="5">return <expr><name pos:line="8" pos:column="12">FALSE<pos:position pos:line="8" pos:column="17"/></name></expr>;<pos:position pos:line="8" pos:column="18"/></return>
  }<pos:position pos:line="9" pos:column="4"/></block></then></if>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><call><name pos:line="11" pos:column="6">SocketBaseTags<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><call><name pos:line="11" pos:column="21">SBTM_SETVAL<pos:position pos:line="11" pos:column="32"/></name><argument_list pos:line="11" pos:column="32">(<argument><expr><call><name pos:line="11" pos:column="33">SBTC_ERRNOPTR<pos:position pos:line="11" pos:column="46"/></name><argument_list pos:line="11" pos:column="46">(<argument><expr><sizeof pos:line="11" pos:column="47">sizeof<argument_list pos:line="11" pos:column="53">(<argument><expr><name pos:line="11" pos:column="54">errno<pos:position pos:line="11" pos:column="59"/></name></expr></argument>)<pos:position pos:line="11" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="11" pos:column="64">(<pos:position pos:line="11" pos:column="65"/></operator><name pos:line="11" pos:column="65">ULONG<pos:position pos:line="11" pos:column="70"/></name><operator pos:line="11" pos:column="70">)<pos:position pos:line="11" pos:column="71"/></operator> <operator pos:line="11" pos:column="72">&amp;<pos:position pos:line="11" pos:column="77"/></operator><name pos:line="11" pos:column="73">errno<pos:position pos:line="11" pos:column="78"/></name></expr></argument>,
                    <argument><expr><call><name pos:line="12" pos:column="21">SBTM_SETVAL<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><name pos:line="12" pos:column="33">SBTC_LOGTAGPTR<pos:position pos:line="12" pos:column="47"/></name></expr></argument>)<pos:position pos:line="12" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="12" pos:column="50">(<pos:position pos:line="12" pos:column="51"/></operator><name pos:line="12" pos:column="51">ULONG<pos:position pos:line="12" pos:column="56"/></name><operator pos:line="12" pos:column="56">)<pos:position pos:line="12" pos:column="57"/></operator> <literal type="string" pos:line="12" pos:column="58">"curl"<pos:position pos:line="12" pos:column="64"/></literal></expr></argument>,
                    <argument><expr><name pos:line="13" pos:column="21">TAG_DONE<pos:position pos:line="13" pos:column="29"/></name></expr></argument>)<pos:position pos:line="13" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="31"/></condition><then pos:line="13" pos:column="31"> <block pos:line="13" pos:column="32">{
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">__request<pos:position pos:line="14" pos:column="14"/></name><argument_list pos:line="14" pos:column="14">(<argument><expr><literal type="string" pos:line="14" pos:column="15">"SocketBaseTags ERROR"<pos:position pos:line="14" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt>
    <return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">FALSE<pos:position pos:line="15" pos:column="17"/></name></expr>;<pos:position pos:line="15" pos:column="18"/></return>
  }<pos:position pos:line="16" pos:column="4"/></block></then></if>

<cpp:ifndef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifndef<pos:position pos:line="18" pos:column="8"/></cpp:directive> <name pos:line="18" pos:column="9">__libnix__<pos:position pos:line="18" pos:column="19"/></name></cpp:ifndef>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">atexit<pos:position pos:line="19" pos:column="9"/></name><argument_list pos:line="19" pos:column="9">(<argument><expr><name pos:line="19" pos:column="10">Curl_amiga_cleanup<pos:position pos:line="19" pos:column="28"/></name></expr></argument>)<pos:position pos:line="19" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="22" pos:column="3">return <expr><name pos:line="22" pos:column="10">TRUE<pos:position pos:line="22" pos:column="14"/></name></expr>;<pos:position pos:line="22" pos:column="15"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
