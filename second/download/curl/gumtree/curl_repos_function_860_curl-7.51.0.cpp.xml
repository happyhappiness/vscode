<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_860_curl-7.51.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">tool_setopt_flags<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">CURL<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">curl<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="40">struct<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">GlobalConfig<pos:position pos:line="1" pos:column="59"/></name></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">config<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
                           <parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">char<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">name<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">CURLoption<pos:position pos:line="2" pos:column="56"/></name></type> <name pos:line="2" pos:column="57">tag<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>,
                           <parameter><decl><type><specifier pos:line="3" pos:column="28">const<pos:position pos:line="3" pos:column="33"/></specifier> <name pos:line="3" pos:column="34">NameValue<pos:position pos:line="3" pos:column="43"/></name> <modifier pos:line="3" pos:column="44">*<pos:position pos:line="3" pos:column="45"/></modifier></type><name pos:line="3" pos:column="45">nvlist<pos:position pos:line="3" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="53">long<pos:position pos:line="3" pos:column="57"/></name></type> <name pos:line="3" pos:column="58">lval<pos:position pos:line="3" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="63"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">CURLcode<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">ret<pos:position pos:line="5" pos:column="15"/></name> <init pos:line="5" pos:column="16">= <expr><name pos:line="5" pos:column="18">CURLE_OK<pos:position pos:line="5" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">bool<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">skip<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><name pos:line="6" pos:column="15">FALSE<pos:position pos:line="6" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><name pos:line="8" pos:column="3">ret<pos:position pos:line="8" pos:column="6"/></name> <operator pos:line="8" pos:column="7">=<pos:position pos:line="8" pos:column="8"/></operator> <call><name pos:line="8" pos:column="9">curl_easy_setopt<pos:position pos:line="8" pos:column="25"/></name><argument_list pos:line="8" pos:column="25">(<argument><expr><name pos:line="8" pos:column="26">curl<pos:position pos:line="8" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="32">tag<pos:position pos:line="8" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="37">lval<pos:position pos:line="8" pos:column="41"/></name></expr></argument>)<pos:position pos:line="8" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="43"/></expr_stmt>
  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><operator pos:line="9" pos:column="6">!<pos:position pos:line="9" pos:column="7"/></operator><name pos:line="9" pos:column="7">lval<pos:position pos:line="9" pos:column="11"/></name></expr>)<pos:position pos:line="9" pos:column="12"/></condition><then pos:line="9" pos:column="12">
    <block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="5">skip<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <name pos:line="10" pos:column="12">TRUE<pos:position pos:line="10" pos:column="16"/></name></expr>;<pos:position pos:line="10" pos:column="17"/></expr_stmt></block></then></if>

  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><name><name pos:line="12" pos:column="6">config<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">-&gt;<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="14">libcurl<pos:position pos:line="12" pos:column="21"/></name></name> <operator pos:line="12" pos:column="22">&amp;&amp;<pos:position pos:line="12" pos:column="32"/></operator> <operator pos:line="12" pos:column="25">!<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="26">skip<pos:position pos:line="12" pos:column="30"/></name> <operator pos:line="12" pos:column="31">&amp;&amp;<pos:position pos:line="12" pos:column="41"/></operator> <operator pos:line="12" pos:column="34">!<pos:position pos:line="12" pos:column="35"/></operator><name pos:line="12" pos:column="35">ret<pos:position pos:line="12" pos:column="38"/></name></expr>)<pos:position pos:line="12" pos:column="39"/></condition><then pos:line="12" pos:column="39"> <block pos:line="12" pos:column="40">{
    <comment type="block" pos:line="13" pos:column="5">/* we only use this for real if --libcurl was used */</comment>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">char<pos:position pos:line="14" pos:column="9"/></name></type> <name><name pos:line="14" pos:column="10">preamble<pos:position pos:line="14" pos:column="18"/></name><index pos:line="14" pos:column="18">[<expr><literal type="number" pos:line="14" pos:column="19">80<pos:position pos:line="14" pos:column="21"/></literal></expr>]<pos:position pos:line="14" pos:column="22"/></index></name></decl>;<pos:position pos:line="14" pos:column="23"/></decl_stmt>          <comment type="block" pos:line="14" pos:column="33">/* should accommodate any symbol name */</comment>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">long<pos:position pos:line="15" pos:column="9"/></name></type> <name pos:line="15" pos:column="10">rest<pos:position pos:line="15" pos:column="14"/></name> <init pos:line="15" pos:column="15">= <expr><name pos:line="15" pos:column="17">lval<pos:position pos:line="15" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="22"/></decl_stmt>           <comment type="block" pos:line="15" pos:column="33">/* bits not handled yet */</comment>
    <decl_stmt><decl><type><specifier pos:line="16" pos:column="5">const<pos:position pos:line="16" pos:column="10"/></specifier> <name pos:line="16" pos:column="11">NameValue<pos:position pos:line="16" pos:column="20"/></name> <modifier pos:line="16" pos:column="21">*<pos:position pos:line="16" pos:column="22"/></modifier></type><name pos:line="16" pos:column="22">nv<pos:position pos:line="16" pos:column="24"/></name> <init pos:line="16" pos:column="25">= <expr><name pos:line="16" pos:column="27">NULL<pos:position pos:line="16" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="32"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">snprintf<pos:position pos:line="17" pos:column="13"/></name><argument_list pos:line="17" pos:column="13">(<argument><expr><name pos:line="17" pos:column="14">preamble<pos:position pos:line="17" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="24">sizeof<argument_list pos:line="17" pos:column="30">(<argument><expr><name pos:line="17" pos:column="31">preamble<pos:position pos:line="17" pos:column="39"/></name></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></sizeof></expr></argument>,
             <argument><expr><literal type="string" pos:line="18" pos:column="14">"curl_easy_setopt(hnd, %s, "<pos:position pos:line="18" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="44">name<pos:position pos:line="18" pos:column="48"/></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="50"/></expr_stmt>
    <for pos:line="19" pos:column="5">for<control pos:line="19" pos:column="8">(<init><expr><name pos:line="19" pos:column="9">nv<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="12">nvlist<pos:position pos:line="19" pos:column="18"/></name></expr>;<pos:position pos:line="19" pos:column="19"/></init> <condition><expr><name><name pos:line="19" pos:column="20">nv<pos:position pos:line="19" pos:column="22"/></name><operator pos:line="19" pos:column="22">-&gt;<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="24">name<pos:position pos:line="19" pos:column="28"/></name></name></expr>;<pos:position pos:line="19" pos:column="29"/></condition> <incr><expr><name pos:line="19" pos:column="30">nv<pos:position pos:line="19" pos:column="32"/></name><operator pos:line="19" pos:column="32">++<pos:position pos:line="19" pos:column="34"/></operator></expr></incr>)<pos:position pos:line="19" pos:column="35"/></control> <block pos:line="19" pos:column="36">{
      <if pos:line="20" pos:column="7">if<condition pos:line="20" pos:column="9">(<expr><operator pos:line="20" pos:column="10">(<pos:position pos:line="20" pos:column="11"/></operator><name><name pos:line="20" pos:column="11">nv<pos:position pos:line="20" pos:column="13"/></name><operator pos:line="20" pos:column="13">-&gt;<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="15">value<pos:position pos:line="20" pos:column="20"/></name></name> <operator pos:line="20" pos:column="21">&amp;<pos:position pos:line="20" pos:column="26"/></operator> <operator pos:line="20" pos:column="23">~<pos:position pos:line="20" pos:column="24"/></operator> <name pos:line="20" pos:column="25">rest<pos:position pos:line="20" pos:column="29"/></name><operator pos:line="20" pos:column="29">)<pos:position pos:line="20" pos:column="30"/></operator> <operator pos:line="20" pos:column="31">==<pos:position pos:line="20" pos:column="33"/></operator> <literal type="number" pos:line="20" pos:column="34">0<pos:position pos:line="20" pos:column="35"/></literal></expr>)<pos:position pos:line="20" pos:column="36"/></condition><then pos:line="20" pos:column="36"> <block pos:line="20" pos:column="37">{
        <comment type="block" pos:line="21" pos:column="9">/* all value flags contained in rest */</comment>
        <expr_stmt><expr><name pos:line="22" pos:column="9">rest<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">&amp;=<pos:position pos:line="22" pos:column="20"/></operator> <operator pos:line="22" pos:column="17">~<pos:position pos:line="22" pos:column="18"/></operator> <name><name pos:line="22" pos:column="19">nv<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">-&gt;<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="23">value<pos:position pos:line="22" pos:column="28"/></name></name></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>    <comment type="block" pos:line="22" pos:column="33">/* remove bits handled here */</comment>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">CODE3<pos:position pos:line="23" pos:column="14"/></name><argument_list pos:line="23" pos:column="14">(<argument><expr><literal type="string" pos:line="23" pos:column="15">"%s(long)%s%s"<pos:position pos:line="23" pos:column="29"/></literal></expr></argument>,
              <argument><expr><name pos:line="24" pos:column="15">preamble<pos:position pos:line="24" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="25">nv<pos:position pos:line="24" pos:column="27"/></name><operator pos:line="24" pos:column="27">-&gt;<pos:position pos:line="24" pos:column="32"/></operator><name pos:line="24" pos:column="29">name<pos:position pos:line="24" pos:column="33"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="24" pos:column="35">rest<pos:position pos:line="24" pos:column="39"/></name></expr> ?<pos:position pos:line="24" pos:column="41"/></condition><then pos:line="24" pos:column="41"> <expr><literal type="string" pos:line="24" pos:column="42">" |"<pos:position pos:line="24" pos:column="46"/></literal></expr> <pos:position pos:line="24" pos:column="47"/></then><else pos:line="24" pos:column="47">: <expr><literal type="string" pos:line="24" pos:column="49">");"<pos:position pos:line="24" pos:column="53"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="24" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="55"/></expr_stmt>
        <if pos:line="25" pos:column="9">if<condition pos:line="25" pos:column="11">(<expr><operator pos:line="25" pos:column="12">!<pos:position pos:line="25" pos:column="13"/></operator><name pos:line="25" pos:column="13">rest<pos:position pos:line="25" pos:column="17"/></name></expr>)<pos:position pos:line="25" pos:column="18"/></condition><then pos:line="25" pos:column="18">
          <block type="pseudo"><break pos:line="26" pos:column="11">break;<pos:position pos:line="26" pos:column="17"/></break></block></then></if>                <comment type="block" pos:line="26" pos:column="33">/* handled them all */</comment>
        <comment type="block" pos:line="27" pos:column="9">/* replace with all spaces for continuation line */</comment>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">snprintf<pos:position pos:line="28" pos:column="17"/></name><argument_list pos:line="28" pos:column="17">(<argument><expr><name pos:line="28" pos:column="18">preamble<pos:position pos:line="28" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="28">sizeof<argument_list pos:line="28" pos:column="34">(<argument><expr><name pos:line="28" pos:column="35">preamble<pos:position pos:line="28" pos:column="43"/></name></expr></argument>)<pos:position pos:line="28" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="46">"%*s"<pos:position pos:line="28" pos:column="51"/></literal></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="53">strlen<pos:position pos:line="28" pos:column="59"/></name><argument_list pos:line="28" pos:column="59">(<argument><expr><name pos:line="28" pos:column="60">preamble<pos:position pos:line="28" pos:column="68"/></name></expr></argument>)<pos:position pos:line="28" pos:column="69"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="71">""<pos:position pos:line="28" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="75"/></expr_stmt>
      }<pos:position pos:line="29" pos:column="8"/></block></then></if>
    }<pos:position pos:line="30" pos:column="6"/></block></for>
    <comment type="block" pos:line="31" pos:column="5">/* If any bits have no definition, output an explicit value.
     * This could happen if new bits are defined and used
     * but the NameValue list is not updated. */</comment>
    <if pos:line="34" pos:column="5">if<condition pos:line="34" pos:column="7">(<expr><name pos:line="34" pos:column="8">rest<pos:position pos:line="34" pos:column="12"/></name></expr>)<pos:position pos:line="34" pos:column="13"/></condition><then pos:line="34" pos:column="13">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="7">CODE2<pos:position pos:line="35" pos:column="12"/></name><argument_list pos:line="35" pos:column="12">(<argument><expr><literal type="string" pos:line="35" pos:column="13">"%s%ldL);"<pos:position pos:line="35" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="25">preamble<pos:position pos:line="35" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="35">rest<pos:position pos:line="35" pos:column="39"/></name></expr></argument>)<pos:position pos:line="35" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="41"/></expr_stmt></block></then></if>
  }<pos:position pos:line="36" pos:column="4"/></block></then></if>

 <label><name pos:line="38" pos:column="2">nomem<pos:position pos:line="38" pos:column="7"/></name>:<pos:position pos:line="38" pos:column="8"/></label>
  <return pos:line="39" pos:column="3">return <expr><name pos:line="39" pos:column="10">ret<pos:position pos:line="39" pos:column="13"/></name></expr>;<pos:position pos:line="39" pos:column="14"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
