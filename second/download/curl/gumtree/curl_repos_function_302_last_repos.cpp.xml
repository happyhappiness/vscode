<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_302_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type>
<name pos:line="2" pos:column="1">buffer_threaded<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">localkey_t<pos:position pos:line="2" pos:column="27"/></name></type> <name pos:line="2" pos:column="28">key<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">long<pos:position pos:line="2" pos:column="37"/></name></type> <name pos:line="2" pos:column="38">size<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list>

<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">buffer_t<pos:position pos:line="5" pos:column="11"/></name> <modifier pos:line="5" pos:column="12">*<pos:position pos:line="5" pos:column="13"/></modifier></type> <name pos:line="5" pos:column="14">bufs<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>

  <comment type="block" pos:line="7" pos:column="3">/* Get the buffer for the given local key in the current thread, and
     make sure it is at least `size'-byte long. Set `size' to &lt; 0 to get
     its address only. */</comment>

  <expr_stmt><expr><name pos:line="11" pos:column="3">bufs<pos:position pos:line="11" pos:column="7"/></name> <operator pos:line="11" pos:column="8">=<pos:position pos:line="11" pos:column="9"/></operator> <operator pos:line="11" pos:column="10">(<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">buffer_t<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></operator><operator pos:line="11" pos:column="21">)<pos:position pos:line="11" pos:column="22"/></operator> <call><name pos:line="11" pos:column="23">pthread_getspecific<pos:position pos:line="11" pos:column="42"/></name><argument_list pos:line="11" pos:column="42">(<argument><expr><name pos:line="11" pos:column="43">thdkey<pos:position pos:line="11" pos:column="49"/></name></expr></argument>)<pos:position pos:line="11" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="51"/></expr_stmt>

  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><operator pos:line="13" pos:column="6">!<pos:position pos:line="13" pos:column="7"/></operator><name pos:line="13" pos:column="7">bufs<pos:position pos:line="13" pos:column="11"/></name></expr>)<pos:position pos:line="13" pos:column="12"/></condition><then pos:line="13" pos:column="12"> <block pos:line="13" pos:column="13">{
    <if pos:line="14" pos:column="5">if<condition pos:line="14" pos:column="7">(<expr><name pos:line="14" pos:column="8">size<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">&lt;<pos:position pos:line="14" pos:column="17"/></operator> <literal type="number" pos:line="14" pos:column="15">0<pos:position pos:line="14" pos:column="16"/></literal></expr>)<pos:position pos:line="14" pos:column="17"/></condition><then pos:line="14" pos:column="17">
      <block type="pseudo"><return pos:line="15" pos:column="7">return <expr><operator pos:line="15" pos:column="14">(<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="15">char<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">*<pos:position pos:line="15" pos:column="21"/></operator><operator pos:line="15" pos:column="21">)<pos:position pos:line="15" pos:column="22"/></operator> <name pos:line="15" pos:column="23">NULL<pos:position pos:line="15" pos:column="27"/></name></expr>;<pos:position pos:line="15" pos:column="28"/></return></block></then></if>             <comment type="block" pos:line="15" pos:column="41">/* No buffer yet. */</comment>

    <comment type="block" pos:line="17" pos:column="5">/* Allocate buffer descriptors for the current thread. */</comment>

    <if pos:line="19" pos:column="5">if<condition pos:line="19" pos:column="7">(<expr><operator pos:line="19" pos:column="8">!<pos:position pos:line="19" pos:column="9"/></operator><operator pos:line="19" pos:column="9">(<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">bufs<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <call><name pos:line="19" pos:column="17">calloc<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><operator pos:line="19" pos:column="24">(<pos:position pos:line="19" pos:column="25"/></operator><name pos:line="19" pos:column="25">size_t<pos:position pos:line="19" pos:column="31"/></name><operator pos:line="19" pos:column="31">)<pos:position pos:line="19" pos:column="32"/></operator> <name pos:line="19" pos:column="33">LK_LAST<pos:position pos:line="19" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="42">sizeof <name><pos:position pos:line="19" pos:column="49"/></name></sizeof>*<name pos:line="19" pos:column="50">bufs<pos:position pos:line="19" pos:column="54"/></name></expr></argument>)<pos:position pos:line="19" pos:column="55"/></argument_list></call><operator pos:line="19" pos:column="55">)<pos:position pos:line="19" pos:column="56"/></operator></expr>)<pos:position pos:line="19" pos:column="57"/></condition><then pos:line="19" pos:column="57">
      <block type="pseudo"><return pos:line="20" pos:column="7">return <expr><operator pos:line="20" pos:column="14">(<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="15">char<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">*<pos:position pos:line="20" pos:column="21"/></operator><operator pos:line="20" pos:column="21">)<pos:position pos:line="20" pos:column="22"/></operator> <name pos:line="20" pos:column="23">NULL<pos:position pos:line="20" pos:column="27"/></name></expr>;<pos:position pos:line="20" pos:column="28"/></return></block></then></if>

    <if pos:line="22" pos:column="5">if<condition pos:line="22" pos:column="7">(<expr><call><name pos:line="22" pos:column="8">pthread_setspecific<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><name pos:line="22" pos:column="28">thdkey<pos:position pos:line="22" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="36">(<pos:position pos:line="22" pos:column="37"/></operator><name pos:line="22" pos:column="37">void<pos:position pos:line="22" pos:column="41"/></name> <operator pos:line="22" pos:column="42">*<pos:position pos:line="22" pos:column="43"/></operator><operator pos:line="22" pos:column="43">)<pos:position pos:line="22" pos:column="44"/></operator> <name pos:line="22" pos:column="45">bufs<pos:position pos:line="22" pos:column="49"/></name></expr></argument>)<pos:position pos:line="22" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="51"/></condition><then pos:line="22" pos:column="51"> <block pos:line="22" pos:column="52">{
      <expr_stmt><expr><call><name pos:line="23" pos:column="7">free<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><name pos:line="23" pos:column="12">bufs<pos:position pos:line="23" pos:column="16"/></name></expr></argument>)<pos:position pos:line="23" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="18"/></expr_stmt>
      <return pos:line="24" pos:column="7">return <expr><operator pos:line="24" pos:column="14">(<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="15">char<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">*<pos:position pos:line="24" pos:column="21"/></operator><operator pos:line="24" pos:column="21">)<pos:position pos:line="24" pos:column="22"/></operator> <name pos:line="24" pos:column="23">NULL<pos:position pos:line="24" pos:column="27"/></name></expr>;<pos:position pos:line="24" pos:column="28"/></return>
      }<pos:position pos:line="25" pos:column="8"/></block></then></if>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

  <return pos:line="28" pos:column="3">return <expr><call><name pos:line="28" pos:column="10">get_buffer<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><name pos:line="28" pos:column="21">bufs<pos:position pos:line="28" pos:column="25"/></name> <operator pos:line="28" pos:column="26">+<pos:position pos:line="28" pos:column="27"/></operator> <name pos:line="28" pos:column="28">key<pos:position pos:line="28" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="33">size<pos:position pos:line="28" pos:column="37"/></name></expr></argument>)<pos:position pos:line="28" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="39"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
