<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2191_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">telnet_do<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">connectdata<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">bool<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">done<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURLcode<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">result<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">Curl_easy<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">data<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name><name pos:line="4" pos:column="28">conn<pos:position pos:line="4" pos:column="32"/></name><operator pos:line="4" pos:column="32">-&gt;<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="34">data<pos:position pos:line="4" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">curl_socket_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">sockfd<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><name><name pos:line="5" pos:column="26">conn<pos:position pos:line="5" pos:column="30"/></name><operator pos:line="5" pos:column="30">-&gt;<pos:position pos:line="5" pos:column="35"/></operator><name pos:line="5" pos:column="32">sock<pos:position pos:line="5" pos:column="36"/></name><index pos:line="5" pos:column="36">[<expr><name pos:line="5" pos:column="37">FIRSTSOCKET<pos:position pos:line="5" pos:column="48"/></name></expr>]<pos:position pos:line="5" pos:column="49"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="50"/></decl_stmt>
<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">USE_WINSOCK<pos:position pos:line="6" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">HMODULE<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">wsock2<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">WSOCK2_FUNC<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">close_event_func<pos:position pos:line="8" pos:column="31"/></name></decl>;<pos:position pos:line="8" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">WSOCK2_FUNC<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">create_event_func<pos:position pos:line="9" pos:column="32"/></name></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">WSOCK2_FUNC<pos:position pos:line="10" pos:column="14"/></name></type> <name pos:line="10" pos:column="15">event_select_func<pos:position pos:line="10" pos:column="32"/></name></decl>;<pos:position pos:line="10" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">WSOCK2_FUNC<pos:position pos:line="11" pos:column="14"/></name></type> <name pos:line="11" pos:column="15">enum_netevents_func<pos:position pos:line="11" pos:column="34"/></name></decl>;<pos:position pos:line="11" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">WSAEVENT<pos:position pos:line="12" pos:column="11"/></name></type> <name pos:line="12" pos:column="12">event_handle<pos:position pos:line="12" pos:column="24"/></name></decl>;<pos:position pos:line="12" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">WSANETWORKEVENTS<pos:position pos:line="13" pos:column="19"/></name></type> <name pos:line="13" pos:column="20">events<pos:position pos:line="13" pos:column="26"/></name></decl>;<pos:position pos:line="13" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">HANDLE<pos:position pos:line="14" pos:column="9"/></name></type> <name pos:line="14" pos:column="10">stdin_handle<pos:position pos:line="14" pos:column="22"/></name></decl>;<pos:position pos:line="14" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">HANDLE<pos:position pos:line="15" pos:column="9"/></name></type> <name><name pos:line="15" pos:column="10">objs<pos:position pos:line="15" pos:column="14"/></name><index pos:line="15" pos:column="14">[<expr><literal type="number" pos:line="15" pos:column="15">2<pos:position pos:line="15" pos:column="16"/></literal></expr>]<pos:position pos:line="15" pos:column="17"/></index></name></decl>;<pos:position pos:line="15" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">DWORD<pos:position pos:line="16" pos:column="8"/></name></type>  <name pos:line="16" pos:column="10">obj_count<pos:position pos:line="16" pos:column="19"/></name></decl>;<pos:position pos:line="16" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">DWORD<pos:position pos:line="17" pos:column="8"/></name></type>  <name pos:line="17" pos:column="10">wait_timeout<pos:position pos:line="17" pos:column="22"/></name></decl>;<pos:position pos:line="17" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">DWORD<pos:position pos:line="18" pos:column="8"/></name></type> <name pos:line="18" pos:column="9">waitret<pos:position pos:line="18" pos:column="16"/></name></decl>;<pos:position pos:line="18" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">DWORD<pos:position pos:line="19" pos:column="8"/></name></type> <name pos:line="19" pos:column="9">readfile_read<pos:position pos:line="19" pos:column="22"/></name></decl>;<pos:position pos:line="19" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">int<pos:position pos:line="20" pos:column="6"/></name></type> <name pos:line="20" pos:column="7">err<pos:position pos:line="20" pos:column="10"/></name></decl>;<pos:position pos:line="20" pos:column="11"/></decl_stmt>
<cpp:else pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">else<pos:position pos:line="21" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name pos:line="22" pos:column="3">int<pos:position pos:line="22" pos:column="6"/></name></type> <name pos:line="22" pos:column="7">interval_ms<pos:position pos:line="22" pos:column="18"/></name></decl>;<pos:position pos:line="22" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="23" pos:column="3">struct<pos:position pos:line="23" pos:column="9"/></name> <name pos:line="23" pos:column="10">pollfd<pos:position pos:line="23" pos:column="16"/></name></name></type> <name><name pos:line="23" pos:column="17">pfd<pos:position pos:line="23" pos:column="20"/></name><index pos:line="23" pos:column="20">[<expr><literal type="number" pos:line="23" pos:column="21">2<pos:position pos:line="23" pos:column="22"/></literal></expr>]<pos:position pos:line="23" pos:column="23"/></index></name></decl>;<pos:position pos:line="23" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="24" pos:column="3">int<pos:position pos:line="24" pos:column="6"/></name></type> <name pos:line="24" pos:column="7">poll_cnt<pos:position pos:line="24" pos:column="15"/></name></decl>;<pos:position pos:line="24" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="25" pos:column="3">curl_off_t<pos:position pos:line="25" pos:column="13"/></name></type> <name pos:line="25" pos:column="14">total_dl<pos:position pos:line="25" pos:column="22"/></name> <init pos:line="25" pos:column="23">= <expr><literal type="number" pos:line="25" pos:column="25">0<pos:position pos:line="25" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="25" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="26" pos:column="3">curl_off_t<pos:position pos:line="26" pos:column="13"/></name></type> <name pos:line="26" pos:column="14">total_ul<pos:position pos:line="26" pos:column="22"/></name> <init pos:line="26" pos:column="23">= <expr><literal type="number" pos:line="26" pos:column="25">0<pos:position pos:line="26" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="26" pos:column="27"/></decl_stmt>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="28" pos:column="3">ssize_t<pos:position pos:line="28" pos:column="10"/></name></type> <name pos:line="28" pos:column="11">nread<pos:position pos:line="28" pos:column="16"/></name></decl>;<pos:position pos:line="28" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="29" pos:column="3">struct<pos:position pos:line="29" pos:column="9"/></name> <name pos:line="29" pos:column="10">curltime<pos:position pos:line="29" pos:column="18"/></name></name></type> <name pos:line="29" pos:column="19">now<pos:position pos:line="29" pos:column="22"/></name></decl>;<pos:position pos:line="29" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="30" pos:column="3">bool<pos:position pos:line="30" pos:column="7"/></name></type> <name pos:line="30" pos:column="8">keepon<pos:position pos:line="30" pos:column="14"/></name> <init pos:line="30" pos:column="15">= <expr><name pos:line="30" pos:column="17">TRUE<pos:position pos:line="30" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="30" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="31" pos:column="3">char<pos:position pos:line="31" pos:column="7"/></name> <modifier pos:line="31" pos:column="8">*<pos:position pos:line="31" pos:column="9"/></modifier></type><name pos:line="31" pos:column="9">buf<pos:position pos:line="31" pos:column="12"/></name> <init pos:line="31" pos:column="13">= <expr><name><name pos:line="31" pos:column="15">data<pos:position pos:line="31" pos:column="19"/></name><operator pos:line="31" pos:column="19">-&gt;<pos:position pos:line="31" pos:column="24"/></operator><name pos:line="31" pos:column="21">state<pos:position pos:line="31" pos:column="26"/></name><operator pos:line="31" pos:column="26">.<pos:position pos:line="31" pos:column="27"/></operator><name pos:line="31" pos:column="27">buffer<pos:position pos:line="31" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="31" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="32" pos:column="3">struct<pos:position pos:line="32" pos:column="9"/></name> <name pos:line="32" pos:column="10">TELNET<pos:position pos:line="32" pos:column="16"/></name></name> <modifier pos:line="32" pos:column="17">*<pos:position pos:line="32" pos:column="18"/></modifier></type><name pos:line="32" pos:column="18">tn<pos:position pos:line="32" pos:column="20"/></name></decl>;<pos:position pos:line="32" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="34" pos:column="3">*<pos:position pos:line="34" pos:column="4"/></operator><name pos:line="34" pos:column="4">done<pos:position pos:line="34" pos:column="8"/></name> <operator pos:line="34" pos:column="9">=<pos:position pos:line="34" pos:column="10"/></operator> <name pos:line="34" pos:column="11">TRUE<pos:position pos:line="34" pos:column="15"/></name></expr>;<pos:position pos:line="34" pos:column="16"/></expr_stmt> <comment type="block" pos:line="34" pos:column="17">/* unconditionally */</comment>

  <expr_stmt><expr><name pos:line="36" pos:column="3">result<pos:position pos:line="36" pos:column="9"/></name> <operator pos:line="36" pos:column="10">=<pos:position pos:line="36" pos:column="11"/></operator> <call><name pos:line="36" pos:column="12">init_telnet<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">(<argument><expr><name pos:line="36" pos:column="24">conn<pos:position pos:line="36" pos:column="28"/></name></expr></argument>)<pos:position pos:line="36" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="30"/></expr_stmt>
  <if pos:line="37" pos:column="3">if<condition pos:line="37" pos:column="5">(<expr><name pos:line="37" pos:column="6">result<pos:position pos:line="37" pos:column="12"/></name></expr>)<pos:position pos:line="37" pos:column="13"/></condition><then pos:line="37" pos:column="13">
    <block type="pseudo"><return pos:line="38" pos:column="5">return <expr><name pos:line="38" pos:column="12">result<pos:position pos:line="38" pos:column="18"/></name></expr>;<pos:position pos:line="38" pos:column="19"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="40" pos:column="3">tn<pos:position pos:line="40" pos:column="5"/></name> <operator pos:line="40" pos:column="6">=<pos:position pos:line="40" pos:column="7"/></operator> <operator pos:line="40" pos:column="8">(<pos:position pos:line="40" pos:column="9"/></operator>struct <name pos:line="40" pos:column="16">TELNET<pos:position pos:line="40" pos:column="22"/></name> <operator pos:line="40" pos:column="23">*<pos:position pos:line="40" pos:column="24"/></operator><operator pos:line="40" pos:column="24">)<pos:position pos:line="40" pos:column="25"/></operator><name><name pos:line="40" pos:column="25">data<pos:position pos:line="40" pos:column="29"/></name><operator pos:line="40" pos:column="29">-&gt;<pos:position pos:line="40" pos:column="34"/></operator><name pos:line="40" pos:column="31">req<pos:position pos:line="40" pos:column="34"/></name><operator pos:line="40" pos:column="34">.<pos:position pos:line="40" pos:column="35"/></operator><name pos:line="40" pos:column="35">protop<pos:position pos:line="40" pos:column="41"/></name></name></expr>;<pos:position pos:line="40" pos:column="42"/></expr_stmt>

  <expr_stmt><expr><name pos:line="42" pos:column="3">result<pos:position pos:line="42" pos:column="9"/></name> <operator pos:line="42" pos:column="10">=<pos:position pos:line="42" pos:column="11"/></operator> <call><name pos:line="42" pos:column="12">check_telnet_options<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><name pos:line="42" pos:column="33">conn<pos:position pos:line="42" pos:column="37"/></name></expr></argument>)<pos:position pos:line="42" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="39"/></expr_stmt>
  <if pos:line="43" pos:column="3">if<condition pos:line="43" pos:column="5">(<expr><name pos:line="43" pos:column="6">result<pos:position pos:line="43" pos:column="12"/></name></expr>)<pos:position pos:line="43" pos:column="13"/></condition><then pos:line="43" pos:column="13">
    <block type="pseudo"><return pos:line="44" pos:column="5">return <expr><name pos:line="44" pos:column="12">result<pos:position pos:line="44" pos:column="18"/></name></expr>;<pos:position pos:line="44" pos:column="19"/></return></block></then></if>

<cpp:ifdef pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">ifdef<pos:position pos:line="46" pos:column="7"/></cpp:directive> <name pos:line="46" pos:column="8">USE_WINSOCK<pos:position pos:line="46" pos:column="19"/></name></cpp:ifdef>
  <comment type="block" pos:line="47" pos:column="3">/*
  ** This functionality only works with WinSock &gt;= 2.0.  So,
  ** make sure we have it.
  */</comment>
  <expr_stmt><expr><name pos:line="51" pos:column="3">result<pos:position pos:line="51" pos:column="9"/></name> <operator pos:line="51" pos:column="10">=<pos:position pos:line="51" pos:column="11"/></operator> <call><name pos:line="51" pos:column="12">check_wsock2<pos:position pos:line="51" pos:column="24"/></name><argument_list pos:line="51" pos:column="24">(<argument><expr><name pos:line="51" pos:column="25">data<pos:position pos:line="51" pos:column="29"/></name></expr></argument>)<pos:position pos:line="51" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="31"/></expr_stmt>
  <if pos:line="52" pos:column="3">if<condition pos:line="52" pos:column="5">(<expr><name pos:line="52" pos:column="6">result<pos:position pos:line="52" pos:column="12"/></name></expr>)<pos:position pos:line="52" pos:column="13"/></condition><then pos:line="52" pos:column="13">
    <block type="pseudo"><return pos:line="53" pos:column="5">return <expr><name pos:line="53" pos:column="12">result<pos:position pos:line="53" pos:column="18"/></name></expr>;<pos:position pos:line="53" pos:column="19"/></return></block></then></if>

  <comment type="block" pos:line="55" pos:column="3">/* OK, so we have WinSock 2.0.  We need to dynamically */</comment>
  <comment type="block" pos:line="56" pos:column="3">/* load ws2_32.dll and get the function pointers we need. */</comment>
  <expr_stmt><expr><name pos:line="57" pos:column="3">wsock2<pos:position pos:line="57" pos:column="9"/></name> <operator pos:line="57" pos:column="10">=<pos:position pos:line="57" pos:column="11"/></operator> <call><name pos:line="57" pos:column="12">Curl_load_library<pos:position pos:line="57" pos:column="29"/></name><argument_list pos:line="57" pos:column="29">(<argument><expr><call><name pos:line="57" pos:column="30">TEXT<pos:position pos:line="57" pos:column="34"/></name><argument_list pos:line="57" pos:column="34">(<argument><expr><literal type="string" pos:line="57" pos:column="35">"WS2_32.DLL"<pos:position pos:line="57" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="57" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="50"/></expr_stmt>
  <if pos:line="58" pos:column="3">if<condition pos:line="58" pos:column="5">(<expr><name pos:line="58" pos:column="6">wsock2<pos:position pos:line="58" pos:column="12"/></name> <operator pos:line="58" pos:column="13">==<pos:position pos:line="58" pos:column="15"/></operator> <name pos:line="58" pos:column="16">NULL<pos:position pos:line="58" pos:column="20"/></name></expr>)<pos:position pos:line="58" pos:column="21"/></condition><then pos:line="58" pos:column="21"> <block pos:line="58" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">failf<pos:position pos:line="59" pos:column="10"/></name><argument_list pos:line="59" pos:column="10">(<argument><expr><name pos:line="59" pos:column="11">data<pos:position pos:line="59" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="17">"failed to load WS2_32.DLL (%u)"<pos:position pos:line="59" pos:column="49"/></literal></expr></argument>, <argument><expr><call><name pos:line="59" pos:column="51">GetLastError<pos:position pos:line="59" pos:column="63"/></name><argument_list pos:line="59" pos:column="63">()<pos:position pos:line="59" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="59" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="67"/></expr_stmt>
    <return pos:line="60" pos:column="5">return <expr><name pos:line="60" pos:column="12">CURLE_FAILED_INIT<pos:position pos:line="60" pos:column="29"/></name></expr>;<pos:position pos:line="60" pos:column="30"/></return>
  }<pos:position pos:line="61" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="63" pos:column="3">/* Grab a pointer to WSACreateEvent */</comment>
  <expr_stmt><expr><name pos:line="64" pos:column="3">create_event_func<pos:position pos:line="64" pos:column="20"/></name> <operator pos:line="64" pos:column="21">=<pos:position pos:line="64" pos:column="22"/></operator> <call><name pos:line="64" pos:column="23">GetProcAddress<pos:position pos:line="64" pos:column="37"/></name><argument_list pos:line="64" pos:column="37">(<argument><expr><name pos:line="64" pos:column="38">wsock2<pos:position pos:line="64" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="46">"WSACreateEvent"<pos:position pos:line="64" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="64"/></expr_stmt>
  <if pos:line="65" pos:column="3">if<condition pos:line="65" pos:column="5">(<expr><name pos:line="65" pos:column="6">create_event_func<pos:position pos:line="65" pos:column="23"/></name> <operator pos:line="65" pos:column="24">==<pos:position pos:line="65" pos:column="26"/></operator> <name pos:line="65" pos:column="27">NULL<pos:position pos:line="65" pos:column="31"/></name></expr>)<pos:position pos:line="65" pos:column="32"/></condition><then pos:line="65" pos:column="32"> <block pos:line="65" pos:column="33">{
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">failf<pos:position pos:line="66" pos:column="10"/></name><argument_list pos:line="66" pos:column="10">(<argument><expr><name pos:line="66" pos:column="11">data<pos:position pos:line="66" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="17">"failed to find WSACreateEvent function (%u)"<pos:position pos:line="66" pos:column="62"/></literal></expr></argument>, <argument><expr><call><name pos:line="66" pos:column="64">GetLastError<pos:position pos:line="66" pos:column="76"/></name><argument_list pos:line="66" pos:column="76">()<pos:position pos:line="66" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="66" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">FreeLibrary<pos:position pos:line="67" pos:column="16"/></name><argument_list pos:line="67" pos:column="16">(<argument><expr><name pos:line="67" pos:column="17">wsock2<pos:position pos:line="67" pos:column="23"/></name></expr></argument>)<pos:position pos:line="67" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="25"/></expr_stmt>
    <return pos:line="68" pos:column="5">return <expr><name pos:line="68" pos:column="12">CURLE_FAILED_INIT<pos:position pos:line="68" pos:column="29"/></name></expr>;<pos:position pos:line="68" pos:column="30"/></return>
  }<pos:position pos:line="69" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="71" pos:column="3">/* And WSACloseEvent */</comment>
  <expr_stmt><expr><name pos:line="72" pos:column="3">close_event_func<pos:position pos:line="72" pos:column="19"/></name> <operator pos:line="72" pos:column="20">=<pos:position pos:line="72" pos:column="21"/></operator> <call><name pos:line="72" pos:column="22">GetProcAddress<pos:position pos:line="72" pos:column="36"/></name><argument_list pos:line="72" pos:column="36">(<argument><expr><name pos:line="72" pos:column="37">wsock2<pos:position pos:line="72" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="45">"WSACloseEvent"<pos:position pos:line="72" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="62"/></expr_stmt>
  <if pos:line="73" pos:column="3">if<condition pos:line="73" pos:column="5">(<expr><name pos:line="73" pos:column="6">close_event_func<pos:position pos:line="73" pos:column="22"/></name> <operator pos:line="73" pos:column="23">==<pos:position pos:line="73" pos:column="25"/></operator> <name pos:line="73" pos:column="26">NULL<pos:position pos:line="73" pos:column="30"/></name></expr>)<pos:position pos:line="73" pos:column="31"/></condition><then pos:line="73" pos:column="31"> <block pos:line="73" pos:column="32">{
    <expr_stmt><expr><call><name pos:line="74" pos:column="5">failf<pos:position pos:line="74" pos:column="10"/></name><argument_list pos:line="74" pos:column="10">(<argument><expr><name pos:line="74" pos:column="11">data<pos:position pos:line="74" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="17">"failed to find WSACloseEvent function (%u)"<pos:position pos:line="74" pos:column="61"/></literal></expr></argument>, <argument><expr><call><name pos:line="74" pos:column="63">GetLastError<pos:position pos:line="74" pos:column="75"/></name><argument_list pos:line="74" pos:column="75">()<pos:position pos:line="74" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="79"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">FreeLibrary<pos:position pos:line="75" pos:column="16"/></name><argument_list pos:line="75" pos:column="16">(<argument><expr><name pos:line="75" pos:column="17">wsock2<pos:position pos:line="75" pos:column="23"/></name></expr></argument>)<pos:position pos:line="75" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="25"/></expr_stmt>
    <return pos:line="76" pos:column="5">return <expr><name pos:line="76" pos:column="12">CURLE_FAILED_INIT<pos:position pos:line="76" pos:column="29"/></name></expr>;<pos:position pos:line="76" pos:column="30"/></return>
  }<pos:position pos:line="77" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="79" pos:column="3">/* And WSAEventSelect */</comment>
  <expr_stmt><expr><name pos:line="80" pos:column="3">event_select_func<pos:position pos:line="80" pos:column="20"/></name> <operator pos:line="80" pos:column="21">=<pos:position pos:line="80" pos:column="22"/></operator> <call><name pos:line="80" pos:column="23">GetProcAddress<pos:position pos:line="80" pos:column="37"/></name><argument_list pos:line="80" pos:column="37">(<argument><expr><name pos:line="80" pos:column="38">wsock2<pos:position pos:line="80" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="46">"WSAEventSelect"<pos:position pos:line="80" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="64"/></expr_stmt>
  <if pos:line="81" pos:column="3">if<condition pos:line="81" pos:column="5">(<expr><name pos:line="81" pos:column="6">event_select_func<pos:position pos:line="81" pos:column="23"/></name> <operator pos:line="81" pos:column="24">==<pos:position pos:line="81" pos:column="26"/></operator> <name pos:line="81" pos:column="27">NULL<pos:position pos:line="81" pos:column="31"/></name></expr>)<pos:position pos:line="81" pos:column="32"/></condition><then pos:line="81" pos:column="32"> <block pos:line="81" pos:column="33">{
    <expr_stmt><expr><call><name pos:line="82" pos:column="5">failf<pos:position pos:line="82" pos:column="10"/></name><argument_list pos:line="82" pos:column="10">(<argument><expr><name pos:line="82" pos:column="11">data<pos:position pos:line="82" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="17">"failed to find WSAEventSelect function (%u)"<pos:position pos:line="82" pos:column="62"/></literal></expr></argument>, <argument><expr><call><name pos:line="82" pos:column="64">GetLastError<pos:position pos:line="82" pos:column="76"/></name><argument_list pos:line="82" pos:column="76">()<pos:position pos:line="82" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="82" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="83" pos:column="5">FreeLibrary<pos:position pos:line="83" pos:column="16"/></name><argument_list pos:line="83" pos:column="16">(<argument><expr><name pos:line="83" pos:column="17">wsock2<pos:position pos:line="83" pos:column="23"/></name></expr></argument>)<pos:position pos:line="83" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="25"/></expr_stmt>
    <return pos:line="84" pos:column="5">return <expr><name pos:line="84" pos:column="12">CURLE_FAILED_INIT<pos:position pos:line="84" pos:column="29"/></name></expr>;<pos:position pos:line="84" pos:column="30"/></return>
  }<pos:position pos:line="85" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="87" pos:column="3">/* And WSAEnumNetworkEvents */</comment>
  <expr_stmt><expr><name pos:line="88" pos:column="3">enum_netevents_func<pos:position pos:line="88" pos:column="22"/></name> <operator pos:line="88" pos:column="23">=<pos:position pos:line="88" pos:column="24"/></operator> <call><name pos:line="88" pos:column="25">GetProcAddress<pos:position pos:line="88" pos:column="39"/></name><argument_list pos:line="88" pos:column="39">(<argument><expr><name pos:line="88" pos:column="40">wsock2<pos:position pos:line="88" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="48">"WSAEnumNetworkEvents"<pos:position pos:line="88" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="72"/></expr_stmt>
  <if pos:line="89" pos:column="3">if<condition pos:line="89" pos:column="5">(<expr><name pos:line="89" pos:column="6">enum_netevents_func<pos:position pos:line="89" pos:column="25"/></name> <operator pos:line="89" pos:column="26">==<pos:position pos:line="89" pos:column="28"/></operator> <name pos:line="89" pos:column="29">NULL<pos:position pos:line="89" pos:column="33"/></name></expr>)<pos:position pos:line="89" pos:column="34"/></condition><then pos:line="89" pos:column="34"> <block pos:line="89" pos:column="35">{
    <expr_stmt><expr><call><name pos:line="90" pos:column="5">failf<pos:position pos:line="90" pos:column="10"/></name><argument_list pos:line="90" pos:column="10">(<argument><expr><name pos:line="90" pos:column="11">data<pos:position pos:line="90" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="17">"failed to find WSAEnumNetworkEvents function (%u)"<pos:position pos:line="90" pos:column="68"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="91" pos:column="11">GetLastError<pos:position pos:line="91" pos:column="23"/></name><argument_list pos:line="91" pos:column="23">()<pos:position pos:line="91" pos:column="25"/></argument_list></call></expr></argument>)<pos:position pos:line="91" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="92" pos:column="5">FreeLibrary<pos:position pos:line="92" pos:column="16"/></name><argument_list pos:line="92" pos:column="16">(<argument><expr><name pos:line="92" pos:column="17">wsock2<pos:position pos:line="92" pos:column="23"/></name></expr></argument>)<pos:position pos:line="92" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="25"/></expr_stmt>
    <return pos:line="93" pos:column="5">return <expr><name pos:line="93" pos:column="12">CURLE_FAILED_INIT<pos:position pos:line="93" pos:column="29"/></name></expr>;<pos:position pos:line="93" pos:column="30"/></return>
  }<pos:position pos:line="94" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="96" pos:column="3">/* We want to wait for both stdin and the socket. Since
  ** the select() function in winsock only works on sockets
  ** we have to use the WaitForMultipleObjects() call.
  */</comment>

  <comment type="block" pos:line="101" pos:column="3">/* First, create a sockets event object */</comment>
  <expr_stmt><expr><name pos:line="102" pos:column="3">event_handle<pos:position pos:line="102" pos:column="15"/></name> <operator pos:line="102" pos:column="16">=<pos:position pos:line="102" pos:column="17"/></operator> <operator pos:line="102" pos:column="18">(<pos:position pos:line="102" pos:column="19"/></operator><name pos:line="102" pos:column="19">WSAEVENT<pos:position pos:line="102" pos:column="27"/></name><operator pos:line="102" pos:column="27">)<pos:position pos:line="102" pos:column="28"/></operator><call><name pos:line="102" pos:column="28">create_event_func<pos:position pos:line="102" pos:column="45"/></name><argument_list pos:line="102" pos:column="45">()<pos:position pos:line="102" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="48"/></expr_stmt>
  <if pos:line="103" pos:column="3">if<condition pos:line="103" pos:column="5">(<expr><name pos:line="103" pos:column="6">event_handle<pos:position pos:line="103" pos:column="18"/></name> <operator pos:line="103" pos:column="19">==<pos:position pos:line="103" pos:column="21"/></operator> <name pos:line="103" pos:column="22">WSA_INVALID_EVENT<pos:position pos:line="103" pos:column="39"/></name></expr>)<pos:position pos:line="103" pos:column="40"/></condition><then pos:line="103" pos:column="40"> <block pos:line="103" pos:column="41">{
    <expr_stmt><expr><call><name pos:line="104" pos:column="5">failf<pos:position pos:line="104" pos:column="10"/></name><argument_list pos:line="104" pos:column="10">(<argument><expr><name pos:line="104" pos:column="11">data<pos:position pos:line="104" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="104" pos:column="17">"WSACreateEvent failed (%d)"<pos:position pos:line="104" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="104" pos:column="47">SOCKERRNO<pos:position pos:line="104" pos:column="56"/></name></expr></argument>)<pos:position pos:line="104" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="105" pos:column="5">FreeLibrary<pos:position pos:line="105" pos:column="16"/></name><argument_list pos:line="105" pos:column="16">(<argument><expr><name pos:line="105" pos:column="17">wsock2<pos:position pos:line="105" pos:column="23"/></name></expr></argument>)<pos:position pos:line="105" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="25"/></expr_stmt>
    <return pos:line="106" pos:column="5">return <expr><name pos:line="106" pos:column="12">CURLE_FAILED_INIT<pos:position pos:line="106" pos:column="29"/></name></expr>;<pos:position pos:line="106" pos:column="30"/></return>
  }<pos:position pos:line="107" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="109" pos:column="3">/* Tell winsock what events we want to listen to */</comment>
  <if pos:line="110" pos:column="3">if<condition pos:line="110" pos:column="5">(<expr><call><name pos:line="110" pos:column="6">event_select_func<pos:position pos:line="110" pos:column="23"/></name><argument_list pos:line="110" pos:column="23">(<argument><expr><name pos:line="110" pos:column="24">sockfd<pos:position pos:line="110" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="32">event_handle<pos:position pos:line="110" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="46">FD_READ<pos:position pos:line="110" pos:column="53"/></name><operator pos:line="110" pos:column="53">|<pos:position pos:line="110" pos:column="54"/></operator><name pos:line="110" pos:column="54">FD_CLOSE<pos:position pos:line="110" pos:column="62"/></name></expr></argument>)<pos:position pos:line="110" pos:column="63"/></argument_list></call> <operator pos:line="110" pos:column="64">==<pos:position pos:line="110" pos:column="66"/></operator>
     <name pos:line="111" pos:column="6">SOCKET_ERROR<pos:position pos:line="111" pos:column="18"/></name></expr>)<pos:position pos:line="111" pos:column="19"/></condition><then pos:line="111" pos:column="19"> <block pos:line="111" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="112" pos:column="5">close_event_func<pos:position pos:line="112" pos:column="21"/></name><argument_list pos:line="112" pos:column="21">(<argument><expr><name pos:line="112" pos:column="22">event_handle<pos:position pos:line="112" pos:column="34"/></name></expr></argument>)<pos:position pos:line="112" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="113" pos:column="5">FreeLibrary<pos:position pos:line="113" pos:column="16"/></name><argument_list pos:line="113" pos:column="16">(<argument><expr><name pos:line="113" pos:column="17">wsock2<pos:position pos:line="113" pos:column="23"/></name></expr></argument>)<pos:position pos:line="113" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="25"/></expr_stmt>
    <return pos:line="114" pos:column="5">return <expr><name pos:line="114" pos:column="12">CURLE_OK<pos:position pos:line="114" pos:column="20"/></name></expr>;<pos:position pos:line="114" pos:column="21"/></return>
  }<pos:position pos:line="115" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="117" pos:column="3">/* The get the Windows file handle for stdin */</comment>
  <expr_stmt><expr><name pos:line="118" pos:column="3">stdin_handle<pos:position pos:line="118" pos:column="15"/></name> <operator pos:line="118" pos:column="16">=<pos:position pos:line="118" pos:column="17"/></operator> <call><name pos:line="118" pos:column="18">GetStdHandle<pos:position pos:line="118" pos:column="30"/></name><argument_list pos:line="118" pos:column="30">(<argument><expr><name pos:line="118" pos:column="31">STD_INPUT_HANDLE<pos:position pos:line="118" pos:column="47"/></name></expr></argument>)<pos:position pos:line="118" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="49"/></expr_stmt>

  <comment type="block" pos:line="120" pos:column="3">/* Create the list of objects to wait for */</comment>
  <expr_stmt><expr><name><name pos:line="121" pos:column="3">objs<pos:position pos:line="121" pos:column="7"/></name><index pos:line="121" pos:column="7">[<expr><literal type="number" pos:line="121" pos:column="8">0<pos:position pos:line="121" pos:column="9"/></literal></expr>]<pos:position pos:line="121" pos:column="10"/></index></name> <operator pos:line="121" pos:column="11">=<pos:position pos:line="121" pos:column="12"/></operator> <name pos:line="121" pos:column="13">event_handle<pos:position pos:line="121" pos:column="25"/></name></expr>;<pos:position pos:line="121" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="122" pos:column="3">objs<pos:position pos:line="122" pos:column="7"/></name><index pos:line="122" pos:column="7">[<expr><literal type="number" pos:line="122" pos:column="8">1<pos:position pos:line="122" pos:column="9"/></literal></expr>]<pos:position pos:line="122" pos:column="10"/></index></name> <operator pos:line="122" pos:column="11">=<pos:position pos:line="122" pos:column="12"/></operator> <name pos:line="122" pos:column="13">stdin_handle<pos:position pos:line="122" pos:column="25"/></name></expr>;<pos:position pos:line="122" pos:column="26"/></expr_stmt>

  <comment type="block" pos:line="124" pos:column="3">/* If stdin_handle is a pipe, use PeekNamedPipe() method to check it,
     else use the old WaitForMultipleObjects() way */</comment>
  <if pos:line="126" pos:column="3">if<condition pos:line="126" pos:column="5">(<expr><call><name pos:line="126" pos:column="6">GetFileType<pos:position pos:line="126" pos:column="17"/></name><argument_list pos:line="126" pos:column="17">(<argument><expr><name pos:line="126" pos:column="18">stdin_handle<pos:position pos:line="126" pos:column="30"/></name></expr></argument>)<pos:position pos:line="126" pos:column="31"/></argument_list></call> <operator pos:line="126" pos:column="32">==<pos:position pos:line="126" pos:column="34"/></operator> <name pos:line="126" pos:column="35">FILE_TYPE_PIPE<pos:position pos:line="126" pos:column="49"/></name> <operator pos:line="126" pos:column="50">||<pos:position pos:line="126" pos:column="52"/></operator>
     <name><name pos:line="127" pos:column="6">data<pos:position pos:line="127" pos:column="10"/></name><operator pos:line="127" pos:column="10">-&gt;<pos:position pos:line="127" pos:column="15"/></operator><name pos:line="127" pos:column="12">set<pos:position pos:line="127" pos:column="15"/></name><operator pos:line="127" pos:column="15">.<pos:position pos:line="127" pos:column="16"/></operator><name pos:line="127" pos:column="16">is_fread_set<pos:position pos:line="127" pos:column="28"/></name></name></expr>)<pos:position pos:line="127" pos:column="29"/></condition><then pos:line="127" pos:column="29"> <block pos:line="127" pos:column="30">{
    <comment type="block" pos:line="128" pos:column="5">/* Don't wait for stdin_handle, just wait for event_handle */</comment>
    <expr_stmt><expr><name pos:line="129" pos:column="5">obj_count<pos:position pos:line="129" pos:column="14"/></name> <operator pos:line="129" pos:column="15">=<pos:position pos:line="129" pos:column="16"/></operator> <literal type="number" pos:line="129" pos:column="17">1<pos:position pos:line="129" pos:column="18"/></literal></expr>;<pos:position pos:line="129" pos:column="19"/></expr_stmt>
    <comment type="block" pos:line="130" pos:column="5">/* Check stdin_handle per 100 milliseconds */</comment>
    <expr_stmt><expr><name pos:line="131" pos:column="5">wait_timeout<pos:position pos:line="131" pos:column="17"/></name> <operator pos:line="131" pos:column="18">=<pos:position pos:line="131" pos:column="19"/></operator> <literal type="number" pos:line="131" pos:column="20">100<pos:position pos:line="131" pos:column="23"/></literal></expr>;<pos:position pos:line="131" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="132" pos:column="4"/></block></then>
  <else pos:line="133" pos:column="3">else <block pos:line="133" pos:column="8">{
    <expr_stmt><expr><name pos:line="134" pos:column="5">obj_count<pos:position pos:line="134" pos:column="14"/></name> <operator pos:line="134" pos:column="15">=<pos:position pos:line="134" pos:column="16"/></operator> <literal type="number" pos:line="134" pos:column="17">2<pos:position pos:line="134" pos:column="18"/></literal></expr>;<pos:position pos:line="134" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="135" pos:column="5">wait_timeout<pos:position pos:line="135" pos:column="17"/></name> <operator pos:line="135" pos:column="18">=<pos:position pos:line="135" pos:column="19"/></operator> <literal type="number" pos:line="135" pos:column="20">1000<pos:position pos:line="135" pos:column="24"/></literal></expr>;<pos:position pos:line="135" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="136" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="138" pos:column="3">/* Keep on listening and act on events */</comment>
  <while pos:line="139" pos:column="3">while<condition pos:line="139" pos:column="8">(<expr><name pos:line="139" pos:column="9">keepon<pos:position pos:line="139" pos:column="15"/></name></expr>)<pos:position pos:line="139" pos:column="16"/></condition> <block pos:line="139" pos:column="17">{
    <decl_stmt><decl><type><specifier pos:line="140" pos:column="5">const<pos:position pos:line="140" pos:column="10"/></specifier> <name pos:line="140" pos:column="11">DWORD<pos:position pos:line="140" pos:column="16"/></name></type> <name pos:line="140" pos:column="17">buf_size<pos:position pos:line="140" pos:column="25"/></name> <init pos:line="140" pos:column="26">= <expr><operator pos:line="140" pos:column="28">(<pos:position pos:line="140" pos:column="29"/></operator><name pos:line="140" pos:column="29">DWORD<pos:position pos:line="140" pos:column="34"/></name><operator pos:line="140" pos:column="34">)<pos:position pos:line="140" pos:column="35"/></operator><name><name pos:line="140" pos:column="35">data<pos:position pos:line="140" pos:column="39"/></name><operator pos:line="140" pos:column="39">-&gt;<pos:position pos:line="140" pos:column="44"/></operator><name pos:line="140" pos:column="41">set<pos:position pos:line="140" pos:column="44"/></name><operator pos:line="140" pos:column="44">.<pos:position pos:line="140" pos:column="45"/></operator><name pos:line="140" pos:column="45">buffer_size<pos:position pos:line="140" pos:column="56"/></name></name></expr></init></decl>;<pos:position pos:line="140" pos:column="57"/></decl_stmt>
    <expr_stmt><expr><name pos:line="141" pos:column="5">waitret<pos:position pos:line="141" pos:column="12"/></name> <operator pos:line="141" pos:column="13">=<pos:position pos:line="141" pos:column="14"/></operator> <call><name pos:line="141" pos:column="15">WaitForMultipleObjects<pos:position pos:line="141" pos:column="37"/></name><argument_list pos:line="141" pos:column="37">(<argument><expr><name pos:line="141" pos:column="38">obj_count<pos:position pos:line="141" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="49">objs<pos:position pos:line="141" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="55">FALSE<pos:position pos:line="141" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="62">wait_timeout<pos:position pos:line="141" pos:column="74"/></name></expr></argument>)<pos:position pos:line="141" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="76"/></expr_stmt>
    <switch pos:line="142" pos:column="5">switch<condition pos:line="142" pos:column="11">(<expr><name pos:line="142" pos:column="12">waitret<pos:position pos:line="142" pos:column="19"/></name></expr>)<pos:position pos:line="142" pos:column="20"/></condition> <block pos:line="142" pos:column="21">{
    <case pos:line="143" pos:column="5">case <expr><name pos:line="143" pos:column="10">WAIT_TIMEOUT<pos:position pos:line="143" pos:column="22"/></name></expr>:<pos:position pos:line="143" pos:column="23"/></case>
    <block pos:line="144" pos:column="5">{
      <for pos:line="145" pos:column="7">for<control pos:line="145" pos:column="10">(<init pos:line="145" pos:column="11">;<pos:position pos:line="145" pos:column="12"/></init><condition pos:line="145" pos:column="12">;<pos:position pos:line="145" pos:column="13"/></condition><incr/>)<pos:position pos:line="145" pos:column="14"/></control> <block pos:line="145" pos:column="15">{
        <if pos:line="146" pos:column="9">if<condition pos:line="146" pos:column="11">(<expr><name><name pos:line="146" pos:column="12">data<pos:position pos:line="146" pos:column="16"/></name><operator pos:line="146" pos:column="16">-&gt;<pos:position pos:line="146" pos:column="21"/></operator><name pos:line="146" pos:column="18">set<pos:position pos:line="146" pos:column="21"/></name><operator pos:line="146" pos:column="21">.<pos:position pos:line="146" pos:column="22"/></operator><name pos:line="146" pos:column="22">is_fread_set<pos:position pos:line="146" pos:column="34"/></name></name></expr>)<pos:position pos:line="146" pos:column="35"/></condition><then pos:line="146" pos:column="35"> <block pos:line="146" pos:column="36">{
          <decl_stmt><decl><type><name pos:line="147" pos:column="11">size_t<pos:position pos:line="147" pos:column="17"/></name></type> <name pos:line="147" pos:column="18">n<pos:position pos:line="147" pos:column="19"/></name></decl>;<pos:position pos:line="147" pos:column="20"/></decl_stmt>
          <comment type="block" pos:line="148" pos:column="11">/* read from user-supplied method */</comment>
          <expr_stmt><expr><name pos:line="149" pos:column="11">n<pos:position pos:line="149" pos:column="12"/></name> <operator pos:line="149" pos:column="13">=<pos:position pos:line="149" pos:column="14"/></operator> <call><name><name pos:line="149" pos:column="15">data<pos:position pos:line="149" pos:column="19"/></name><operator pos:line="149" pos:column="19">-&gt;<pos:position pos:line="149" pos:column="24"/></operator><name pos:line="149" pos:column="21">state<pos:position pos:line="149" pos:column="26"/></name><operator pos:line="149" pos:column="26">.<pos:position pos:line="149" pos:column="27"/></operator><name pos:line="149" pos:column="27">fread_func<pos:position pos:line="149" pos:column="37"/></name></name><argument_list pos:line="149" pos:column="37">(<argument><expr><name pos:line="149" pos:column="38">buf<pos:position pos:line="149" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="149" pos:column="43">1<pos:position pos:line="149" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="149" pos:column="46">buf_size<pos:position pos:line="149" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="149" pos:column="56">data<pos:position pos:line="149" pos:column="60"/></name><operator pos:line="149" pos:column="60">-&gt;<pos:position pos:line="149" pos:column="65"/></operator><name pos:line="149" pos:column="62">state<pos:position pos:line="149" pos:column="67"/></name><operator pos:line="149" pos:column="67">.<pos:position pos:line="149" pos:column="68"/></operator><name pos:line="149" pos:column="68">in<pos:position pos:line="149" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="149" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="72"/></expr_stmt>
          <if pos:line="150" pos:column="11">if<condition pos:line="150" pos:column="13">(<expr><name pos:line="150" pos:column="14">n<pos:position pos:line="150" pos:column="15"/></name> <operator pos:line="150" pos:column="16">==<pos:position pos:line="150" pos:column="18"/></operator> <name pos:line="150" pos:column="19">CURL_READFUNC_ABORT<pos:position pos:line="150" pos:column="38"/></name></expr>)<pos:position pos:line="150" pos:column="39"/></condition><then pos:line="150" pos:column="39"> <block pos:line="150" pos:column="40">{
            <expr_stmt><expr><name pos:line="151" pos:column="13">keepon<pos:position pos:line="151" pos:column="19"/></name> <operator pos:line="151" pos:column="20">=<pos:position pos:line="151" pos:column="21"/></operator> <name pos:line="151" pos:column="22">FALSE<pos:position pos:line="151" pos:column="27"/></name></expr>;<pos:position pos:line="151" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><name pos:line="152" pos:column="13">result<pos:position pos:line="152" pos:column="19"/></name> <operator pos:line="152" pos:column="20">=<pos:position pos:line="152" pos:column="21"/></operator> <name pos:line="152" pos:column="22">CURLE_READ_ERROR<pos:position pos:line="152" pos:column="38"/></name></expr>;<pos:position pos:line="152" pos:column="39"/></expr_stmt>
            <break pos:line="153" pos:column="13">break;<pos:position pos:line="153" pos:column="19"/></break>
          }<pos:position pos:line="154" pos:column="12"/></block></then></if>

          <if pos:line="156" pos:column="11">if<condition pos:line="156" pos:column="13">(<expr><name pos:line="156" pos:column="14">n<pos:position pos:line="156" pos:column="15"/></name> <operator pos:line="156" pos:column="16">==<pos:position pos:line="156" pos:column="18"/></operator> <name pos:line="156" pos:column="19">CURL_READFUNC_PAUSE<pos:position pos:line="156" pos:column="38"/></name></expr>)<pos:position pos:line="156" pos:column="39"/></condition><then pos:line="156" pos:column="39">
            <block type="pseudo"><break pos:line="157" pos:column="13">break;<pos:position pos:line="157" pos:column="19"/></break></block></then></if>

          <if pos:line="159" pos:column="11">if<condition pos:line="159" pos:column="13">(<expr><name pos:line="159" pos:column="14">n<pos:position pos:line="159" pos:column="15"/></name> <operator pos:line="159" pos:column="16">==<pos:position pos:line="159" pos:column="18"/></operator> <literal type="number" pos:line="159" pos:column="19">0<pos:position pos:line="159" pos:column="20"/></literal></expr>)<pos:position pos:line="159" pos:column="21"/></condition><then pos:line="159" pos:column="21">                        <comment type="block" pos:line="159" pos:column="45">/* no bytes */</comment>
            <block type="pseudo"><break pos:line="160" pos:column="13">break;<pos:position pos:line="160" pos:column="19"/></break></block></then></if>

          <expr_stmt><expr><name pos:line="162" pos:column="11">readfile_read<pos:position pos:line="162" pos:column="24"/></name> <operator pos:line="162" pos:column="25">=<pos:position pos:line="162" pos:column="26"/></operator> <operator pos:line="162" pos:column="27">(<pos:position pos:line="162" pos:column="28"/></operator><name pos:line="162" pos:column="28">DWORD<pos:position pos:line="162" pos:column="33"/></name><operator pos:line="162" pos:column="33">)<pos:position pos:line="162" pos:column="34"/></operator><name pos:line="162" pos:column="34">n<pos:position pos:line="162" pos:column="35"/></name></expr>;<pos:position pos:line="162" pos:column="36"/></expr_stmt> <comment type="block" pos:line="162" pos:column="37">/* fall thru with number of bytes read */</comment>
        }<pos:position pos:line="163" pos:column="10"/></block></then>
        <else pos:line="164" pos:column="9">else <block pos:line="164" pos:column="14">{
          <comment type="block" pos:line="165" pos:column="11">/* read from stdin */</comment>
          <if pos:line="166" pos:column="11">if<condition pos:line="166" pos:column="13">(<expr><operator pos:line="166" pos:column="14">!<pos:position pos:line="166" pos:column="15"/></operator><call><name pos:line="166" pos:column="15">PeekNamedPipe<pos:position pos:line="166" pos:column="28"/></name><argument_list pos:line="166" pos:column="28">(<argument><expr><name pos:line="166" pos:column="29">stdin_handle<pos:position pos:line="166" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="166" pos:column="43">NULL<pos:position pos:line="166" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="166" pos:column="49">0<pos:position pos:line="166" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="166" pos:column="52">NULL<pos:position pos:line="166" pos:column="56"/></name></expr></argument>,
                            <argument><expr><operator pos:line="167" pos:column="29">&amp;<pos:position pos:line="167" pos:column="34"/></operator><name pos:line="167" pos:column="30">readfile_read<pos:position pos:line="167" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="167" pos:column="45">NULL<pos:position pos:line="167" pos:column="49"/></name></expr></argument>)<pos:position pos:line="167" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="167" pos:column="51"/></condition><then pos:line="167" pos:column="51"> <block pos:line="167" pos:column="52">{
            <expr_stmt><expr><name pos:line="168" pos:column="13">keepon<pos:position pos:line="168" pos:column="19"/></name> <operator pos:line="168" pos:column="20">=<pos:position pos:line="168" pos:column="21"/></operator> <name pos:line="168" pos:column="22">FALSE<pos:position pos:line="168" pos:column="27"/></name></expr>;<pos:position pos:line="168" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><name pos:line="169" pos:column="13">result<pos:position pos:line="169" pos:column="19"/></name> <operator pos:line="169" pos:column="20">=<pos:position pos:line="169" pos:column="21"/></operator> <name pos:line="169" pos:column="22">CURLE_READ_ERROR<pos:position pos:line="169" pos:column="38"/></name></expr>;<pos:position pos:line="169" pos:column="39"/></expr_stmt>
            <break pos:line="170" pos:column="13">break;<pos:position pos:line="170" pos:column="19"/></break>
          }<pos:position pos:line="171" pos:column="12"/></block></then></if>

          <if pos:line="173" pos:column="11">if<condition pos:line="173" pos:column="13">(<expr><operator pos:line="173" pos:column="14">!<pos:position pos:line="173" pos:column="15"/></operator><name pos:line="173" pos:column="15">readfile_read<pos:position pos:line="173" pos:column="28"/></name></expr>)<pos:position pos:line="173" pos:column="29"/></condition><then pos:line="173" pos:column="29">
            <block type="pseudo"><break pos:line="174" pos:column="13">break;<pos:position pos:line="174" pos:column="19"/></break></block></then></if>

          <if pos:line="176" pos:column="11">if<condition pos:line="176" pos:column="13">(<expr><operator pos:line="176" pos:column="14">!<pos:position pos:line="176" pos:column="15"/></operator><call><name pos:line="176" pos:column="15">ReadFile<pos:position pos:line="176" pos:column="23"/></name><argument_list pos:line="176" pos:column="23">(<argument><expr><name pos:line="176" pos:column="24">stdin_handle<pos:position pos:line="176" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="176" pos:column="38">buf<pos:position pos:line="176" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="176" pos:column="43">buf_size<pos:position pos:line="176" pos:column="51"/></name></expr></argument>,
                       <argument><expr><operator pos:line="177" pos:column="24">&amp;<pos:position pos:line="177" pos:column="29"/></operator><name pos:line="177" pos:column="25">readfile_read<pos:position pos:line="177" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="177" pos:column="40">NULL<pos:position pos:line="177" pos:column="44"/></name></expr></argument>)<pos:position pos:line="177" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="177" pos:column="46"/></condition><then pos:line="177" pos:column="46"> <block pos:line="177" pos:column="47">{
            <expr_stmt><expr><name pos:line="178" pos:column="13">keepon<pos:position pos:line="178" pos:column="19"/></name> <operator pos:line="178" pos:column="20">=<pos:position pos:line="178" pos:column="21"/></operator> <name pos:line="178" pos:column="22">FALSE<pos:position pos:line="178" pos:column="27"/></name></expr>;<pos:position pos:line="178" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><name pos:line="179" pos:column="13">result<pos:position pos:line="179" pos:column="19"/></name> <operator pos:line="179" pos:column="20">=<pos:position pos:line="179" pos:column="21"/></operator> <name pos:line="179" pos:column="22">CURLE_READ_ERROR<pos:position pos:line="179" pos:column="38"/></name></expr>;<pos:position pos:line="179" pos:column="39"/></expr_stmt>
            <break pos:line="180" pos:column="13">break;<pos:position pos:line="180" pos:column="19"/></break>
          }<pos:position pos:line="181" pos:column="12"/></block></then></if>
        }<pos:position pos:line="182" pos:column="10"/></block></else></if>

        <expr_stmt><expr><name pos:line="184" pos:column="9">result<pos:position pos:line="184" pos:column="15"/></name> <operator pos:line="184" pos:column="16">=<pos:position pos:line="184" pos:column="17"/></operator> <call><name pos:line="184" pos:column="18">send_telnet_data<pos:position pos:line="184" pos:column="34"/></name><argument_list pos:line="184" pos:column="34">(<argument><expr><name pos:line="184" pos:column="35">conn<pos:position pos:line="184" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="184" pos:column="41">buf<pos:position pos:line="184" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="184" pos:column="46">readfile_read<pos:position pos:line="184" pos:column="59"/></name></expr></argument>)<pos:position pos:line="184" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="61"/></expr_stmt>
        <if pos:line="185" pos:column="9">if<condition pos:line="185" pos:column="11">(<expr><name pos:line="185" pos:column="12">result<pos:position pos:line="185" pos:column="18"/></name></expr>)<pos:position pos:line="185" pos:column="19"/></condition><then pos:line="185" pos:column="19"> <block pos:line="185" pos:column="20">{
          <expr_stmt><expr><name pos:line="186" pos:column="11">keepon<pos:position pos:line="186" pos:column="17"/></name> <operator pos:line="186" pos:column="18">=<pos:position pos:line="186" pos:column="19"/></operator> <name pos:line="186" pos:column="20">FALSE<pos:position pos:line="186" pos:column="25"/></name></expr>;<pos:position pos:line="186" pos:column="26"/></expr_stmt>
          <break pos:line="187" pos:column="11">break;<pos:position pos:line="187" pos:column="17"/></break>
        }<pos:position pos:line="188" pos:column="10"/></block></then></if>
      }<pos:position pos:line="189" pos:column="8"/></block></for>
    }<pos:position pos:line="190" pos:column="6"/></block>
    <break pos:line="191" pos:column="5">break;<pos:position pos:line="191" pos:column="11"/></break>

    <case pos:line="193" pos:column="5">case <expr><name pos:line="193" pos:column="10">WAIT_OBJECT_0<pos:position pos:line="193" pos:column="23"/></name> <operator pos:line="193" pos:column="24">+<pos:position pos:line="193" pos:column="25"/></operator> <literal type="number" pos:line="193" pos:column="26">1<pos:position pos:line="193" pos:column="27"/></literal></expr>:<pos:position pos:line="193" pos:column="28"/></case>
    <block pos:line="194" pos:column="5">{
      <if pos:line="195" pos:column="7">if<condition pos:line="195" pos:column="9">(<expr><operator pos:line="195" pos:column="10">!<pos:position pos:line="195" pos:column="11"/></operator><call><name pos:line="195" pos:column="11">ReadFile<pos:position pos:line="195" pos:column="19"/></name><argument_list pos:line="195" pos:column="19">(<argument><expr><name pos:line="195" pos:column="20">stdin_handle<pos:position pos:line="195" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="195" pos:column="34">buf<pos:position pos:line="195" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="195" pos:column="39">buf_size<pos:position pos:line="195" pos:column="47"/></name></expr></argument>,
                   <argument><expr><operator pos:line="196" pos:column="20">&amp;<pos:position pos:line="196" pos:column="25"/></operator><name pos:line="196" pos:column="21">readfile_read<pos:position pos:line="196" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="196" pos:column="36">NULL<pos:position pos:line="196" pos:column="40"/></name></expr></argument>)<pos:position pos:line="196" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="196" pos:column="42"/></condition><then pos:line="196" pos:column="42"> <block pos:line="196" pos:column="43">{
        <expr_stmt><expr><name pos:line="197" pos:column="9">keepon<pos:position pos:line="197" pos:column="15"/></name> <operator pos:line="197" pos:column="16">=<pos:position pos:line="197" pos:column="17"/></operator> <name pos:line="197" pos:column="18">FALSE<pos:position pos:line="197" pos:column="23"/></name></expr>;<pos:position pos:line="197" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="198" pos:column="9">result<pos:position pos:line="198" pos:column="15"/></name> <operator pos:line="198" pos:column="16">=<pos:position pos:line="198" pos:column="17"/></operator> <name pos:line="198" pos:column="18">CURLE_READ_ERROR<pos:position pos:line="198" pos:column="34"/></name></expr>;<pos:position pos:line="198" pos:column="35"/></expr_stmt>
        <break pos:line="199" pos:column="9">break;<pos:position pos:line="199" pos:column="15"/></break>
      }<pos:position pos:line="200" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="202" pos:column="7">result<pos:position pos:line="202" pos:column="13"/></name> <operator pos:line="202" pos:column="14">=<pos:position pos:line="202" pos:column="15"/></operator> <call><name pos:line="202" pos:column="16">send_telnet_data<pos:position pos:line="202" pos:column="32"/></name><argument_list pos:line="202" pos:column="32">(<argument><expr><name pos:line="202" pos:column="33">conn<pos:position pos:line="202" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="202" pos:column="39">buf<pos:position pos:line="202" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="202" pos:column="44">readfile_read<pos:position pos:line="202" pos:column="57"/></name></expr></argument>)<pos:position pos:line="202" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="59"/></expr_stmt>
      <if pos:line="203" pos:column="7">if<condition pos:line="203" pos:column="9">(<expr><name pos:line="203" pos:column="10">result<pos:position pos:line="203" pos:column="16"/></name></expr>)<pos:position pos:line="203" pos:column="17"/></condition><then pos:line="203" pos:column="17"> <block pos:line="203" pos:column="18">{
        <expr_stmt><expr><name pos:line="204" pos:column="9">keepon<pos:position pos:line="204" pos:column="15"/></name> <operator pos:line="204" pos:column="16">=<pos:position pos:line="204" pos:column="17"/></operator> <name pos:line="204" pos:column="18">FALSE<pos:position pos:line="204" pos:column="23"/></name></expr>;<pos:position pos:line="204" pos:column="24"/></expr_stmt>
        <break pos:line="205" pos:column="9">break;<pos:position pos:line="205" pos:column="15"/></break>
      }<pos:position pos:line="206" pos:column="8"/></block></then></if>
    }<pos:position pos:line="207" pos:column="6"/></block>
    <break pos:line="208" pos:column="5">break;<pos:position pos:line="208" pos:column="11"/></break>

    <case pos:line="210" pos:column="5">case <expr><name pos:line="210" pos:column="10">WAIT_OBJECT_0<pos:position pos:line="210" pos:column="23"/></name></expr>:<pos:position pos:line="210" pos:column="24"/></case>

      <expr_stmt><expr><name><name pos:line="212" pos:column="7">events<pos:position pos:line="212" pos:column="13"/></name><operator pos:line="212" pos:column="13">.<pos:position pos:line="212" pos:column="14"/></operator><name pos:line="212" pos:column="14">lNetworkEvents<pos:position pos:line="212" pos:column="28"/></name></name> <operator pos:line="212" pos:column="29">=<pos:position pos:line="212" pos:column="30"/></operator> <literal type="number" pos:line="212" pos:column="31">0<pos:position pos:line="212" pos:column="32"/></literal></expr>;<pos:position pos:line="212" pos:column="33"/></expr_stmt>
      <if pos:line="213" pos:column="7">if<condition pos:line="213" pos:column="9">(<expr><name pos:line="213" pos:column="10">SOCKET_ERROR<pos:position pos:line="213" pos:column="22"/></name> <operator pos:line="213" pos:column="23">==<pos:position pos:line="213" pos:column="25"/></operator> <call><name pos:line="213" pos:column="26">enum_netevents_func<pos:position pos:line="213" pos:column="45"/></name><argument_list pos:line="213" pos:column="45">(<argument><expr><name pos:line="213" pos:column="46">sockfd<pos:position pos:line="213" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="213" pos:column="54">event_handle<pos:position pos:line="213" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="213" pos:column="68">&amp;<pos:position pos:line="213" pos:column="73"/></operator><name pos:line="213" pos:column="69">events<pos:position pos:line="213" pos:column="75"/></name></expr></argument>)<pos:position pos:line="213" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="213" pos:column="77"/></condition><then pos:line="213" pos:column="77"> <block pos:line="213" pos:column="78">{
        <expr_stmt><expr><name pos:line="214" pos:column="9">err<pos:position pos:line="214" pos:column="12"/></name> <operator pos:line="214" pos:column="13">=<pos:position pos:line="214" pos:column="14"/></operator> <name pos:line="214" pos:column="15">SOCKERRNO<pos:position pos:line="214" pos:column="24"/></name></expr>;<pos:position pos:line="214" pos:column="25"/></expr_stmt>
        <if pos:line="215" pos:column="9">if<condition pos:line="215" pos:column="11">(<expr><name pos:line="215" pos:column="12">err<pos:position pos:line="215" pos:column="15"/></name> <operator pos:line="215" pos:column="16">!=<pos:position pos:line="215" pos:column="18"/></operator> <name pos:line="215" pos:column="19">EINPROGRESS<pos:position pos:line="215" pos:column="30"/></name></expr>)<pos:position pos:line="215" pos:column="31"/></condition><then pos:line="215" pos:column="31"> <block pos:line="215" pos:column="32">{
          <expr_stmt><expr><call><name pos:line="216" pos:column="11">infof<pos:position pos:line="216" pos:column="16"/></name><argument_list pos:line="216" pos:column="16">(<argument><expr><name pos:line="216" pos:column="17">data<pos:position pos:line="216" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="216" pos:column="23">"WSAEnumNetworkEvents failed (%d)"<pos:position pos:line="216" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="216" pos:column="59">err<pos:position pos:line="216" pos:column="62"/></name></expr></argument>)<pos:position pos:line="216" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="64"/></expr_stmt>
          <expr_stmt><expr><name pos:line="217" pos:column="11">keepon<pos:position pos:line="217" pos:column="17"/></name> <operator pos:line="217" pos:column="18">=<pos:position pos:line="217" pos:column="19"/></operator> <name pos:line="217" pos:column="20">FALSE<pos:position pos:line="217" pos:column="25"/></name></expr>;<pos:position pos:line="217" pos:column="26"/></expr_stmt>
          <expr_stmt><expr><name pos:line="218" pos:column="11">result<pos:position pos:line="218" pos:column="17"/></name> <operator pos:line="218" pos:column="18">=<pos:position pos:line="218" pos:column="19"/></operator> <name pos:line="218" pos:column="20">CURLE_READ_ERROR<pos:position pos:line="218" pos:column="36"/></name></expr>;<pos:position pos:line="218" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="219" pos:column="10"/></block></then></if>
        <break pos:line="220" pos:column="9">break;<pos:position pos:line="220" pos:column="15"/></break>
      }<pos:position pos:line="221" pos:column="8"/></block></then></if>
      <if pos:line="222" pos:column="7">if<condition pos:line="222" pos:column="9">(<expr><name><name pos:line="222" pos:column="10">events<pos:position pos:line="222" pos:column="16"/></name><operator pos:line="222" pos:column="16">.<pos:position pos:line="222" pos:column="17"/></operator><name pos:line="222" pos:column="17">lNetworkEvents<pos:position pos:line="222" pos:column="31"/></name></name> <operator pos:line="222" pos:column="32">&amp;<pos:position pos:line="222" pos:column="37"/></operator> <name pos:line="222" pos:column="34">FD_READ<pos:position pos:line="222" pos:column="41"/></name></expr>)<pos:position pos:line="222" pos:column="42"/></condition><then pos:line="222" pos:column="42"> <block pos:line="222" pos:column="43">{
        <comment type="block" pos:line="223" pos:column="9">/* read data from network */</comment>
        <expr_stmt><expr><name pos:line="224" pos:column="9">result<pos:position pos:line="224" pos:column="15"/></name> <operator pos:line="224" pos:column="16">=<pos:position pos:line="224" pos:column="17"/></operator> <call><name pos:line="224" pos:column="18">Curl_read<pos:position pos:line="224" pos:column="27"/></name><argument_list pos:line="224" pos:column="27">(<argument><expr><name pos:line="224" pos:column="28">conn<pos:position pos:line="224" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="224" pos:column="34">sockfd<pos:position pos:line="224" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="224" pos:column="42">buf<pos:position pos:line="224" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="224" pos:column="47">data<pos:position pos:line="224" pos:column="51"/></name><operator pos:line="224" pos:column="51">-&gt;<pos:position pos:line="224" pos:column="56"/></operator><name pos:line="224" pos:column="53">set<pos:position pos:line="224" pos:column="56"/></name><operator pos:line="224" pos:column="56">.<pos:position pos:line="224" pos:column="57"/></operator><name pos:line="224" pos:column="57">buffer_size<pos:position pos:line="224" pos:column="68"/></name></name></expr></argument>, <argument><expr><operator pos:line="224" pos:column="70">&amp;<pos:position pos:line="224" pos:column="75"/></operator><name pos:line="224" pos:column="71">nread<pos:position pos:line="224" pos:column="76"/></name></expr></argument>)<pos:position pos:line="224" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="78"/></expr_stmt>
        <comment type="block" pos:line="225" pos:column="9">/* read would've blocked. Loop again */</comment>
        <if pos:line="226" pos:column="9">if<condition pos:line="226" pos:column="11">(<expr><name pos:line="226" pos:column="12">result<pos:position pos:line="226" pos:column="18"/></name> <operator pos:line="226" pos:column="19">==<pos:position pos:line="226" pos:column="21"/></operator> <name pos:line="226" pos:column="22">CURLE_AGAIN<pos:position pos:line="226" pos:column="33"/></name></expr>)<pos:position pos:line="226" pos:column="34"/></condition><then pos:line="226" pos:column="34">
          <block type="pseudo"><break pos:line="227" pos:column="11">break;<pos:position pos:line="227" pos:column="17"/></break></block></then>
        <comment type="block" pos:line="228" pos:column="9">/* returned not-zero, this an error */</comment>
        <elseif pos:line="229" pos:column="9">else <if pos:line="229" pos:column="14">if<condition pos:line="229" pos:column="16">(<expr><name pos:line="229" pos:column="17">result<pos:position pos:line="229" pos:column="23"/></name></expr>)<pos:position pos:line="229" pos:column="24"/></condition><then pos:line="229" pos:column="24"> <block pos:line="229" pos:column="25">{
          <expr_stmt><expr><name pos:line="230" pos:column="11">keepon<pos:position pos:line="230" pos:column="17"/></name> <operator pos:line="230" pos:column="18">=<pos:position pos:line="230" pos:column="19"/></operator> <name pos:line="230" pos:column="20">FALSE<pos:position pos:line="230" pos:column="25"/></name></expr>;<pos:position pos:line="230" pos:column="26"/></expr_stmt>
          <break pos:line="231" pos:column="11">break;<pos:position pos:line="231" pos:column="17"/></break>
        }<pos:position pos:line="232" pos:column="10"/></block></then></if></elseif>
        <comment type="block" pos:line="233" pos:column="9">/* returned zero but actually received 0 or less here,
           the server closed the connection and we bail out */</comment>
        <elseif pos:line="235" pos:column="9">else <if pos:line="235" pos:column="14">if<condition pos:line="235" pos:column="16">(<expr><name pos:line="235" pos:column="17">nread<pos:position pos:line="235" pos:column="22"/></name> <operator pos:line="235" pos:column="23">&lt;=<pos:position pos:line="235" pos:column="28"/></operator> <literal type="number" pos:line="235" pos:column="26">0<pos:position pos:line="235" pos:column="27"/></literal></expr>)<pos:position pos:line="235" pos:column="28"/></condition><then pos:line="235" pos:column="28"> <block pos:line="235" pos:column="29">{
          <expr_stmt><expr><name pos:line="236" pos:column="11">keepon<pos:position pos:line="236" pos:column="17"/></name> <operator pos:line="236" pos:column="18">=<pos:position pos:line="236" pos:column="19"/></operator> <name pos:line="236" pos:column="20">FALSE<pos:position pos:line="236" pos:column="25"/></name></expr>;<pos:position pos:line="236" pos:column="26"/></expr_stmt>
          <break pos:line="237" pos:column="11">break;<pos:position pos:line="237" pos:column="17"/></break>
        }<pos:position pos:line="238" pos:column="10"/></block></then></if></elseif></if>

        <expr_stmt><expr><name pos:line="240" pos:column="9">result<pos:position pos:line="240" pos:column="15"/></name> <operator pos:line="240" pos:column="16">=<pos:position pos:line="240" pos:column="17"/></operator> <call><name pos:line="240" pos:column="18">telrcv<pos:position pos:line="240" pos:column="24"/></name><argument_list pos:line="240" pos:column="24">(<argument><expr><name pos:line="240" pos:column="25">conn<pos:position pos:line="240" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="240" pos:column="31">(<pos:position pos:line="240" pos:column="32"/></operator><name pos:line="240" pos:column="32">unsigned<pos:position pos:line="240" pos:column="40"/></name> <name pos:line="240" pos:column="41">char<pos:position pos:line="240" pos:column="45"/></name> <operator pos:line="240" pos:column="46">*<pos:position pos:line="240" pos:column="47"/></operator><operator pos:line="240" pos:column="47">)<pos:position pos:line="240" pos:column="48"/></operator> <name pos:line="240" pos:column="49">buf<pos:position pos:line="240" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="240" pos:column="54">nread<pos:position pos:line="240" pos:column="59"/></name></expr></argument>)<pos:position pos:line="240" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="240" pos:column="61"/></expr_stmt>
        <if pos:line="241" pos:column="9">if<condition pos:line="241" pos:column="11">(<expr><name pos:line="241" pos:column="12">result<pos:position pos:line="241" pos:column="18"/></name></expr>)<pos:position pos:line="241" pos:column="19"/></condition><then pos:line="241" pos:column="19"> <block pos:line="241" pos:column="20">{
          <expr_stmt><expr><name pos:line="242" pos:column="11">keepon<pos:position pos:line="242" pos:column="17"/></name> <operator pos:line="242" pos:column="18">=<pos:position pos:line="242" pos:column="19"/></operator> <name pos:line="242" pos:column="20">FALSE<pos:position pos:line="242" pos:column="25"/></name></expr>;<pos:position pos:line="242" pos:column="26"/></expr_stmt>
          <break pos:line="243" pos:column="11">break;<pos:position pos:line="243" pos:column="17"/></break>
        }<pos:position pos:line="244" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="246" pos:column="9">/* Negotiate if the peer has started negotiating,
           otherwise don't. We don't want to speak telnet with
           non-telnet servers, like POP or SMTP. */</comment>
        <if pos:line="249" pos:column="9">if<condition pos:line="249" pos:column="11">(<expr><name><name pos:line="249" pos:column="12">tn<pos:position pos:line="249" pos:column="14"/></name><operator pos:line="249" pos:column="14">-&gt;<pos:position pos:line="249" pos:column="19"/></operator><name pos:line="249" pos:column="16">please_negotiate<pos:position pos:line="249" pos:column="32"/></name></name> <operator pos:line="249" pos:column="33">&amp;&amp;<pos:position pos:line="249" pos:column="43"/></operator> <operator pos:line="249" pos:column="36">!<pos:position pos:line="249" pos:column="37"/></operator><name><name pos:line="249" pos:column="37">tn<pos:position pos:line="249" pos:column="39"/></name><operator pos:line="249" pos:column="39">-&gt;<pos:position pos:line="249" pos:column="44"/></operator><name pos:line="249" pos:column="41">already_negotiated<pos:position pos:line="249" pos:column="59"/></name></name></expr>)<pos:position pos:line="249" pos:column="60"/></condition><then pos:line="249" pos:column="60"> <block pos:line="249" pos:column="61">{
          <expr_stmt><expr><call><name pos:line="250" pos:column="11">negotiate<pos:position pos:line="250" pos:column="20"/></name><argument_list pos:line="250" pos:column="20">(<argument><expr><name pos:line="250" pos:column="21">conn<pos:position pos:line="250" pos:column="25"/></name></expr></argument>)<pos:position pos:line="250" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="250" pos:column="27"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="251" pos:column="11">tn<pos:position pos:line="251" pos:column="13"/></name><operator pos:line="251" pos:column="13">-&gt;<pos:position pos:line="251" pos:column="18"/></operator><name pos:line="251" pos:column="15">already_negotiated<pos:position pos:line="251" pos:column="33"/></name></name> <operator pos:line="251" pos:column="34">=<pos:position pos:line="251" pos:column="35"/></operator> <literal type="number" pos:line="251" pos:column="36">1<pos:position pos:line="251" pos:column="37"/></literal></expr>;<pos:position pos:line="251" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="252" pos:column="10"/></block></then></if>
      }<pos:position pos:line="253" pos:column="8"/></block></then></if>
      <if pos:line="254" pos:column="7">if<condition pos:line="254" pos:column="9">(<expr><name><name pos:line="254" pos:column="10">events<pos:position pos:line="254" pos:column="16"/></name><operator pos:line="254" pos:column="16">.<pos:position pos:line="254" pos:column="17"/></operator><name pos:line="254" pos:column="17">lNetworkEvents<pos:position pos:line="254" pos:column="31"/></name></name> <operator pos:line="254" pos:column="32">&amp;<pos:position pos:line="254" pos:column="37"/></operator> <name pos:line="254" pos:column="34">FD_CLOSE<pos:position pos:line="254" pos:column="42"/></name></expr>)<pos:position pos:line="254" pos:column="43"/></condition><then pos:line="254" pos:column="43"> <block pos:line="254" pos:column="44">{
        <expr_stmt><expr><name pos:line="255" pos:column="9">keepon<pos:position pos:line="255" pos:column="15"/></name> <operator pos:line="255" pos:column="16">=<pos:position pos:line="255" pos:column="17"/></operator> <name pos:line="255" pos:column="18">FALSE<pos:position pos:line="255" pos:column="23"/></name></expr>;<pos:position pos:line="255" pos:column="24"/></expr_stmt>
      }<pos:position pos:line="256" pos:column="8"/></block></then></if>
      <break pos:line="257" pos:column="7">break;<pos:position pos:line="257" pos:column="13"/></break>

    }<pos:position pos:line="259" pos:column="6"/></block></switch>

    <if pos:line="261" pos:column="5">if<condition pos:line="261" pos:column="7">(<expr><name><name pos:line="261" pos:column="8">data<pos:position pos:line="261" pos:column="12"/></name><operator pos:line="261" pos:column="12">-&gt;<pos:position pos:line="261" pos:column="17"/></operator><name pos:line="261" pos:column="14">set<pos:position pos:line="261" pos:column="17"/></name><operator pos:line="261" pos:column="17">.<pos:position pos:line="261" pos:column="18"/></operator><name pos:line="261" pos:column="18">timeout<pos:position pos:line="261" pos:column="25"/></name></name></expr>)<pos:position pos:line="261" pos:column="26"/></condition><then pos:line="261" pos:column="26"> <block pos:line="261" pos:column="27">{
      <expr_stmt><expr><name pos:line="262" pos:column="7">now<pos:position pos:line="262" pos:column="10"/></name> <operator pos:line="262" pos:column="11">=<pos:position pos:line="262" pos:column="12"/></operator> <call><name pos:line="262" pos:column="13">Curl_tvnow<pos:position pos:line="262" pos:column="23"/></name><argument_list pos:line="262" pos:column="23">()<pos:position pos:line="262" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="262" pos:column="26"/></expr_stmt>
      <if pos:line="263" pos:column="7">if<condition pos:line="263" pos:column="9">(<expr><call><name pos:line="263" pos:column="10">Curl_tvdiff<pos:position pos:line="263" pos:column="21"/></name><argument_list pos:line="263" pos:column="21">(<argument><expr><name pos:line="263" pos:column="22">now<pos:position pos:line="263" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="263" pos:column="27">conn<pos:position pos:line="263" pos:column="31"/></name><operator pos:line="263" pos:column="31">-&gt;<pos:position pos:line="263" pos:column="36"/></operator><name pos:line="263" pos:column="33">created<pos:position pos:line="263" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="263" pos:column="41"/></argument_list></call> <operator pos:line="263" pos:column="42">&gt;=<pos:position pos:line="263" pos:column="47"/></operator> <name><name pos:line="263" pos:column="45">data<pos:position pos:line="263" pos:column="49"/></name><operator pos:line="263" pos:column="49">-&gt;<pos:position pos:line="263" pos:column="54"/></operator><name pos:line="263" pos:column="51">set<pos:position pos:line="263" pos:column="54"/></name><operator pos:line="263" pos:column="54">.<pos:position pos:line="263" pos:column="55"/></operator><name pos:line="263" pos:column="55">timeout<pos:position pos:line="263" pos:column="62"/></name></name></expr>)<pos:position pos:line="263" pos:column="63"/></condition><then pos:line="263" pos:column="63"> <block pos:line="263" pos:column="64">{
        <expr_stmt><expr><call><name pos:line="264" pos:column="9">failf<pos:position pos:line="264" pos:column="14"/></name><argument_list pos:line="264" pos:column="14">(<argument><expr><name pos:line="264" pos:column="15">data<pos:position pos:line="264" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="264" pos:column="21">"Time-out"<pos:position pos:line="264" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="264" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="264" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="265" pos:column="9">result<pos:position pos:line="265" pos:column="15"/></name> <operator pos:line="265" pos:column="16">=<pos:position pos:line="265" pos:column="17"/></operator> <name pos:line="265" pos:column="18">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="265" pos:column="42"/></name></expr>;<pos:position pos:line="265" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="266" pos:column="9">keepon<pos:position pos:line="266" pos:column="15"/></name> <operator pos:line="266" pos:column="16">=<pos:position pos:line="266" pos:column="17"/></operator> <name pos:line="266" pos:column="18">FALSE<pos:position pos:line="266" pos:column="23"/></name></expr>;<pos:position pos:line="266" pos:column="24"/></expr_stmt>
      }<pos:position pos:line="267" pos:column="8"/></block></then></if>
    }<pos:position pos:line="268" pos:column="6"/></block></then></if>
  }<pos:position pos:line="269" pos:column="4"/></block></while>

  <comment type="block" pos:line="271" pos:column="3">/* We called WSACreateEvent, so call WSACloseEvent */</comment>
  <if pos:line="272" pos:column="3">if<condition pos:line="272" pos:column="5">(<expr><operator pos:line="272" pos:column="6">!<pos:position pos:line="272" pos:column="7"/></operator><call><name pos:line="272" pos:column="7">close_event_func<pos:position pos:line="272" pos:column="23"/></name><argument_list pos:line="272" pos:column="23">(<argument><expr><name pos:line="272" pos:column="24">event_handle<pos:position pos:line="272" pos:column="36"/></name></expr></argument>)<pos:position pos:line="272" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="272" pos:column="38"/></condition><then pos:line="272" pos:column="38"> <block pos:line="272" pos:column="39">{
    <expr_stmt><expr><call><name pos:line="273" pos:column="5">infof<pos:position pos:line="273" pos:column="10"/></name><argument_list pos:line="273" pos:column="10">(<argument><expr><name pos:line="273" pos:column="11">data<pos:position pos:line="273" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="273" pos:column="17">"WSACloseEvent failed (%d)"<pos:position pos:line="273" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="273" pos:column="46">SOCKERRNO<pos:position pos:line="273" pos:column="55"/></name></expr></argument>)<pos:position pos:line="273" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="273" pos:column="57"/></expr_stmt>
  }<pos:position pos:line="274" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="276" pos:column="3">/* "Forget" pointers into the library we're about to free */</comment>
  <expr_stmt><expr><name pos:line="277" pos:column="3">create_event_func<pos:position pos:line="277" pos:column="20"/></name> <operator pos:line="277" pos:column="21">=<pos:position pos:line="277" pos:column="22"/></operator> <name pos:line="277" pos:column="23">NULL<pos:position pos:line="277" pos:column="27"/></name></expr>;<pos:position pos:line="277" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="278" pos:column="3">close_event_func<pos:position pos:line="278" pos:column="19"/></name> <operator pos:line="278" pos:column="20">=<pos:position pos:line="278" pos:column="21"/></operator> <name pos:line="278" pos:column="22">NULL<pos:position pos:line="278" pos:column="26"/></name></expr>;<pos:position pos:line="278" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="279" pos:column="3">event_select_func<pos:position pos:line="279" pos:column="20"/></name> <operator pos:line="279" pos:column="21">=<pos:position pos:line="279" pos:column="22"/></operator> <name pos:line="279" pos:column="23">NULL<pos:position pos:line="279" pos:column="27"/></name></expr>;<pos:position pos:line="279" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="280" pos:column="3">enum_netevents_func<pos:position pos:line="280" pos:column="22"/></name> <operator pos:line="280" pos:column="23">=<pos:position pos:line="280" pos:column="24"/></operator> <name pos:line="280" pos:column="25">NULL<pos:position pos:line="280" pos:column="29"/></name></expr>;<pos:position pos:line="280" pos:column="30"/></expr_stmt>

  <comment type="block" pos:line="282" pos:column="3">/* We called LoadLibrary, so call FreeLibrary */</comment>
  <if pos:line="283" pos:column="3">if<condition pos:line="283" pos:column="5">(<expr><operator pos:line="283" pos:column="6">!<pos:position pos:line="283" pos:column="7"/></operator><call><name pos:line="283" pos:column="7">FreeLibrary<pos:position pos:line="283" pos:column="18"/></name><argument_list pos:line="283" pos:column="18">(<argument><expr><name pos:line="283" pos:column="19">wsock2<pos:position pos:line="283" pos:column="25"/></name></expr></argument>)<pos:position pos:line="283" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="283" pos:column="27"/></condition><then pos:line="283" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="284" pos:column="5">infof<pos:position pos:line="284" pos:column="10"/></name><argument_list pos:line="284" pos:column="10">(<argument><expr><name pos:line="284" pos:column="11">data<pos:position pos:line="284" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="284" pos:column="17">"FreeLibrary(wsock2) failed (%u)"<pos:position pos:line="284" pos:column="50"/></literal></expr></argument>, <argument><expr><call><name pos:line="284" pos:column="52">GetLastError<pos:position pos:line="284" pos:column="64"/></name><argument_list pos:line="284" pos:column="64">()<pos:position pos:line="284" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="284" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="284" pos:column="68"/></expr_stmt></block></then></if>
<cpp:else pos:line="285" pos:column="1">#<cpp:directive pos:line="285" pos:column="2">else<pos:position pos:line="285" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><name><name pos:line="286" pos:column="3">pfd<pos:position pos:line="286" pos:column="6"/></name><index pos:line="286" pos:column="6">[<expr><literal type="number" pos:line="286" pos:column="7">0<pos:position pos:line="286" pos:column="8"/></literal></expr>]<pos:position pos:line="286" pos:column="9"/></index></name><operator pos:line="286" pos:column="9">.<pos:position pos:line="286" pos:column="10"/></operator><name pos:line="286" pos:column="10">fd<pos:position pos:line="286" pos:column="12"/></name> <operator pos:line="286" pos:column="13">=<pos:position pos:line="286" pos:column="14"/></operator> <name pos:line="286" pos:column="15">sockfd<pos:position pos:line="286" pos:column="21"/></name></expr>;<pos:position pos:line="286" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="287" pos:column="3">pfd<pos:position pos:line="287" pos:column="6"/></name><index pos:line="287" pos:column="6">[<expr><literal type="number" pos:line="287" pos:column="7">0<pos:position pos:line="287" pos:column="8"/></literal></expr>]<pos:position pos:line="287" pos:column="9"/></index></name><operator pos:line="287" pos:column="9">.<pos:position pos:line="287" pos:column="10"/></operator><name pos:line="287" pos:column="10">events<pos:position pos:line="287" pos:column="16"/></name> <operator pos:line="287" pos:column="17">=<pos:position pos:line="287" pos:column="18"/></operator> <name pos:line="287" pos:column="19">POLLIN<pos:position pos:line="287" pos:column="25"/></name></expr>;<pos:position pos:line="287" pos:column="26"/></expr_stmt>

  <if pos:line="289" pos:column="3">if<condition pos:line="289" pos:column="5">(<expr><name><name pos:line="289" pos:column="6">data<pos:position pos:line="289" pos:column="10"/></name><operator pos:line="289" pos:column="10">-&gt;<pos:position pos:line="289" pos:column="15"/></operator><name pos:line="289" pos:column="12">set<pos:position pos:line="289" pos:column="15"/></name><operator pos:line="289" pos:column="15">.<pos:position pos:line="289" pos:column="16"/></operator><name pos:line="289" pos:column="16">is_fread_set<pos:position pos:line="289" pos:column="28"/></name></name></expr>)<pos:position pos:line="289" pos:column="29"/></condition><then pos:line="289" pos:column="29"> <block pos:line="289" pos:column="30">{
    <expr_stmt><expr><name pos:line="290" pos:column="5">poll_cnt<pos:position pos:line="290" pos:column="13"/></name> <operator pos:line="290" pos:column="14">=<pos:position pos:line="290" pos:column="15"/></operator> <literal type="number" pos:line="290" pos:column="16">1<pos:position pos:line="290" pos:column="17"/></literal></expr>;<pos:position pos:line="290" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="291" pos:column="5">interval_ms<pos:position pos:line="291" pos:column="16"/></name> <operator pos:line="291" pos:column="17">=<pos:position pos:line="291" pos:column="18"/></operator> <literal type="number" pos:line="291" pos:column="19">100<pos:position pos:line="291" pos:column="22"/></literal></expr>;<pos:position pos:line="291" pos:column="23"/></expr_stmt> <comment type="block" pos:line="291" pos:column="24">/* poll user-supplied read function */</comment>
  }<pos:position pos:line="292" pos:column="4"/></block></then>
  <else pos:line="293" pos:column="3">else <block pos:line="293" pos:column="8">{
    <comment type="block" pos:line="294" pos:column="5">/* really using fread, so infile is a FILE* */</comment>
    <expr_stmt><expr><name><name pos:line="295" pos:column="5">pfd<pos:position pos:line="295" pos:column="8"/></name><index pos:line="295" pos:column="8">[<expr><literal type="number" pos:line="295" pos:column="9">1<pos:position pos:line="295" pos:column="10"/></literal></expr>]<pos:position pos:line="295" pos:column="11"/></index></name><operator pos:line="295" pos:column="11">.<pos:position pos:line="295" pos:column="12"/></operator><name pos:line="295" pos:column="12">fd<pos:position pos:line="295" pos:column="14"/></name> <operator pos:line="295" pos:column="15">=<pos:position pos:line="295" pos:column="16"/></operator> <call><name pos:line="295" pos:column="17">fileno<pos:position pos:line="295" pos:column="23"/></name><argument_list pos:line="295" pos:column="23">(<argument><expr><operator pos:line="295" pos:column="24">(<pos:position pos:line="295" pos:column="25"/></operator><name pos:line="295" pos:column="25">FILE<pos:position pos:line="295" pos:column="29"/></name> <operator pos:line="295" pos:column="30">*<pos:position pos:line="295" pos:column="31"/></operator><operator pos:line="295" pos:column="31">)<pos:position pos:line="295" pos:column="32"/></operator><name><name pos:line="295" pos:column="32">data<pos:position pos:line="295" pos:column="36"/></name><operator pos:line="295" pos:column="36">-&gt;<pos:position pos:line="295" pos:column="41"/></operator><name pos:line="295" pos:column="38">state<pos:position pos:line="295" pos:column="43"/></name><operator pos:line="295" pos:column="43">.<pos:position pos:line="295" pos:column="44"/></operator><name pos:line="295" pos:column="44">in<pos:position pos:line="295" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="295" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="295" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="296" pos:column="5">pfd<pos:position pos:line="296" pos:column="8"/></name><index pos:line="296" pos:column="8">[<expr><literal type="number" pos:line="296" pos:column="9">1<pos:position pos:line="296" pos:column="10"/></literal></expr>]<pos:position pos:line="296" pos:column="11"/></index></name><operator pos:line="296" pos:column="11">.<pos:position pos:line="296" pos:column="12"/></operator><name pos:line="296" pos:column="12">events<pos:position pos:line="296" pos:column="18"/></name> <operator pos:line="296" pos:column="19">=<pos:position pos:line="296" pos:column="20"/></operator> <name pos:line="296" pos:column="21">POLLIN<pos:position pos:line="296" pos:column="27"/></name></expr>;<pos:position pos:line="296" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="297" pos:column="5">poll_cnt<pos:position pos:line="297" pos:column="13"/></name> <operator pos:line="297" pos:column="14">=<pos:position pos:line="297" pos:column="15"/></operator> <literal type="number" pos:line="297" pos:column="16">2<pos:position pos:line="297" pos:column="17"/></literal></expr>;<pos:position pos:line="297" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="298" pos:column="5">interval_ms<pos:position pos:line="298" pos:column="16"/></name> <operator pos:line="298" pos:column="17">=<pos:position pos:line="298" pos:column="18"/></operator> <literal type="number" pos:line="298" pos:column="19">1<pos:position pos:line="298" pos:column="20"/></literal> <operator pos:line="298" pos:column="21">*<pos:position pos:line="298" pos:column="22"/></operator> <literal type="number" pos:line="298" pos:column="23">1000<pos:position pos:line="298" pos:column="27"/></literal></expr>;<pos:position pos:line="298" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="299" pos:column="4"/></block></else></if>

  <while pos:line="301" pos:column="3">while<condition pos:line="301" pos:column="8">(<expr><name pos:line="301" pos:column="9">keepon<pos:position pos:line="301" pos:column="15"/></name></expr>)<pos:position pos:line="301" pos:column="16"/></condition> <block pos:line="301" pos:column="17">{
    <switch pos:line="302" pos:column="5">switch<condition pos:line="302" pos:column="11">(<expr><call><name pos:line="302" pos:column="12">Curl_poll<pos:position pos:line="302" pos:column="21"/></name><argument_list pos:line="302" pos:column="21">(<argument><expr><name pos:line="302" pos:column="22">pfd<pos:position pos:line="302" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="302" pos:column="27">poll_cnt<pos:position pos:line="302" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="302" pos:column="37">interval_ms<pos:position pos:line="302" pos:column="48"/></name></expr></argument>)<pos:position pos:line="302" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="302" pos:column="50"/></condition> <block pos:line="302" pos:column="51">{
    <case pos:line="303" pos:column="5">case <expr><operator pos:line="303" pos:column="10">-<pos:position pos:line="303" pos:column="11"/></operator><literal type="number" pos:line="303" pos:column="11">1<pos:position pos:line="303" pos:column="12"/></literal></expr>:<pos:position pos:line="303" pos:column="13"/></case>                    <comment type="block" pos:line="303" pos:column="33">/* error, stop reading */</comment>
      <expr_stmt><expr><name pos:line="304" pos:column="7">keepon<pos:position pos:line="304" pos:column="13"/></name> <operator pos:line="304" pos:column="14">=<pos:position pos:line="304" pos:column="15"/></operator> <name pos:line="304" pos:column="16">FALSE<pos:position pos:line="304" pos:column="21"/></name></expr>;<pos:position pos:line="304" pos:column="22"/></expr_stmt>
      <continue pos:line="305" pos:column="7">continue;<pos:position pos:line="305" pos:column="16"/></continue>
    <case pos:line="306" pos:column="5">case <expr><literal type="number" pos:line="306" pos:column="10">0<pos:position pos:line="306" pos:column="11"/></literal></expr>:<pos:position pos:line="306" pos:column="12"/></case>                     <comment type="block" pos:line="306" pos:column="33">/* timeout */</comment>
      <expr_stmt><expr><name><name pos:line="307" pos:column="7">pfd<pos:position pos:line="307" pos:column="10"/></name><index pos:line="307" pos:column="10">[<expr><literal type="number" pos:line="307" pos:column="11">0<pos:position pos:line="307" pos:column="12"/></literal></expr>]<pos:position pos:line="307" pos:column="13"/></index></name><operator pos:line="307" pos:column="13">.<pos:position pos:line="307" pos:column="14"/></operator><name pos:line="307" pos:column="14">revents<pos:position pos:line="307" pos:column="21"/></name> <operator pos:line="307" pos:column="22">=<pos:position pos:line="307" pos:column="23"/></operator> <literal type="number" pos:line="307" pos:column="24">0<pos:position pos:line="307" pos:column="25"/></literal></expr>;<pos:position pos:line="307" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="308" pos:column="7">pfd<pos:position pos:line="308" pos:column="10"/></name><index pos:line="308" pos:column="10">[<expr><literal type="number" pos:line="308" pos:column="11">1<pos:position pos:line="308" pos:column="12"/></literal></expr>]<pos:position pos:line="308" pos:column="13"/></index></name><operator pos:line="308" pos:column="13">.<pos:position pos:line="308" pos:column="14"/></operator><name pos:line="308" pos:column="14">revents<pos:position pos:line="308" pos:column="21"/></name> <operator pos:line="308" pos:column="22">=<pos:position pos:line="308" pos:column="23"/></operator> <literal type="number" pos:line="308" pos:column="24">0<pos:position pos:line="308" pos:column="25"/></literal></expr>;<pos:position pos:line="308" pos:column="26"/></expr_stmt>
      <comment type="block" pos:line="309" pos:column="7">/* fall through */</comment>
    <default pos:line="310" pos:column="5">default:<pos:position pos:line="310" pos:column="13"/></default>                    <comment type="block" pos:line="310" pos:column="33">/* read! */</comment>
      <if pos:line="311" pos:column="7">if<condition pos:line="311" pos:column="9">(<expr><name><name pos:line="311" pos:column="10">pfd<pos:position pos:line="311" pos:column="13"/></name><index pos:line="311" pos:column="13">[<expr><literal type="number" pos:line="311" pos:column="14">0<pos:position pos:line="311" pos:column="15"/></literal></expr>]<pos:position pos:line="311" pos:column="16"/></index></name><operator pos:line="311" pos:column="16">.<pos:position pos:line="311" pos:column="17"/></operator><name pos:line="311" pos:column="17">revents<pos:position pos:line="311" pos:column="24"/></name> <operator pos:line="311" pos:column="25">&amp;<pos:position pos:line="311" pos:column="30"/></operator> <name pos:line="311" pos:column="27">POLLIN<pos:position pos:line="311" pos:column="33"/></name></expr>)<pos:position pos:line="311" pos:column="34"/></condition><then pos:line="311" pos:column="34"> <block pos:line="311" pos:column="35">{
        <comment type="block" pos:line="312" pos:column="9">/* read data from network */</comment>
        <expr_stmt><expr><name pos:line="313" pos:column="9">result<pos:position pos:line="313" pos:column="15"/></name> <operator pos:line="313" pos:column="16">=<pos:position pos:line="313" pos:column="17"/></operator> <call><name pos:line="313" pos:column="18">Curl_read<pos:position pos:line="313" pos:column="27"/></name><argument_list pos:line="313" pos:column="27">(<argument><expr><name pos:line="313" pos:column="28">conn<pos:position pos:line="313" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="313" pos:column="34">sockfd<pos:position pos:line="313" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="313" pos:column="42">buf<pos:position pos:line="313" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="313" pos:column="47">data<pos:position pos:line="313" pos:column="51"/></name><operator pos:line="313" pos:column="51">-&gt;<pos:position pos:line="313" pos:column="56"/></operator><name pos:line="313" pos:column="53">set<pos:position pos:line="313" pos:column="56"/></name><operator pos:line="313" pos:column="56">.<pos:position pos:line="313" pos:column="57"/></operator><name pos:line="313" pos:column="57">buffer_size<pos:position pos:line="313" pos:column="68"/></name></name></expr></argument>, <argument><expr><operator pos:line="313" pos:column="70">&amp;<pos:position pos:line="313" pos:column="75"/></operator><name pos:line="313" pos:column="71">nread<pos:position pos:line="313" pos:column="76"/></name></expr></argument>)<pos:position pos:line="313" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="313" pos:column="78"/></expr_stmt>
        <comment type="block" pos:line="314" pos:column="9">/* read would've blocked. Loop again */</comment>
        <if pos:line="315" pos:column="9">if<condition pos:line="315" pos:column="11">(<expr><name pos:line="315" pos:column="12">result<pos:position pos:line="315" pos:column="18"/></name> <operator pos:line="315" pos:column="19">==<pos:position pos:line="315" pos:column="21"/></operator> <name pos:line="315" pos:column="22">CURLE_AGAIN<pos:position pos:line="315" pos:column="33"/></name></expr>)<pos:position pos:line="315" pos:column="34"/></condition><then pos:line="315" pos:column="34">
          <block type="pseudo"><break pos:line="316" pos:column="11">break;<pos:position pos:line="316" pos:column="17"/></break></block></then></if>
        <comment type="block" pos:line="317" pos:column="9">/* returned not-zero, this an error */</comment>
        <if pos:line="318" pos:column="9">if<condition pos:line="318" pos:column="11">(<expr><name pos:line="318" pos:column="12">result<pos:position pos:line="318" pos:column="18"/></name></expr>)<pos:position pos:line="318" pos:column="19"/></condition><then pos:line="318" pos:column="19"> <block pos:line="318" pos:column="20">{
          <expr_stmt><expr><name pos:line="319" pos:column="11">keepon<pos:position pos:line="319" pos:column="17"/></name> <operator pos:line="319" pos:column="18">=<pos:position pos:line="319" pos:column="19"/></operator> <name pos:line="319" pos:column="20">FALSE<pos:position pos:line="319" pos:column="25"/></name></expr>;<pos:position pos:line="319" pos:column="26"/></expr_stmt>
          <break pos:line="320" pos:column="11">break;<pos:position pos:line="320" pos:column="17"/></break>
        }<pos:position pos:line="321" pos:column="10"/></block></then>
        <comment type="block" pos:line="322" pos:column="9">/* returned zero but actually received 0 or less here,
           the server closed the connection and we bail out */</comment>
        <elseif pos:line="324" pos:column="9">else <if pos:line="324" pos:column="14">if<condition pos:line="324" pos:column="16">(<expr><name pos:line="324" pos:column="17">nread<pos:position pos:line="324" pos:column="22"/></name> <operator pos:line="324" pos:column="23">&lt;=<pos:position pos:line="324" pos:column="28"/></operator> <literal type="number" pos:line="324" pos:column="26">0<pos:position pos:line="324" pos:column="27"/></literal></expr>)<pos:position pos:line="324" pos:column="28"/></condition><then pos:line="324" pos:column="28"> <block pos:line="324" pos:column="29">{
          <expr_stmt><expr><name pos:line="325" pos:column="11">keepon<pos:position pos:line="325" pos:column="17"/></name> <operator pos:line="325" pos:column="18">=<pos:position pos:line="325" pos:column="19"/></operator> <name pos:line="325" pos:column="20">FALSE<pos:position pos:line="325" pos:column="25"/></name></expr>;<pos:position pos:line="325" pos:column="26"/></expr_stmt>
          <break pos:line="326" pos:column="11">break;<pos:position pos:line="326" pos:column="17"/></break>
        }<pos:position pos:line="327" pos:column="10"/></block></then></if></elseif></if>

        <expr_stmt><expr><name pos:line="329" pos:column="9">total_dl<pos:position pos:line="329" pos:column="17"/></name> <operator pos:line="329" pos:column="18">+=<pos:position pos:line="329" pos:column="20"/></operator> <name pos:line="329" pos:column="21">nread<pos:position pos:line="329" pos:column="26"/></name></expr>;<pos:position pos:line="329" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="330" pos:column="9">Curl_pgrsSetDownloadCounter<pos:position pos:line="330" pos:column="36"/></name><argument_list pos:line="330" pos:column="36">(<argument><expr><name pos:line="330" pos:column="37">data<pos:position pos:line="330" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="330" pos:column="43">total_dl<pos:position pos:line="330" pos:column="51"/></name></expr></argument>)<pos:position pos:line="330" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="330" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name pos:line="331" pos:column="9">result<pos:position pos:line="331" pos:column="15"/></name> <operator pos:line="331" pos:column="16">=<pos:position pos:line="331" pos:column="17"/></operator> <call><name pos:line="331" pos:column="18">telrcv<pos:position pos:line="331" pos:column="24"/></name><argument_list pos:line="331" pos:column="24">(<argument><expr><name pos:line="331" pos:column="25">conn<pos:position pos:line="331" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="331" pos:column="31">(<pos:position pos:line="331" pos:column="32"/></operator><name pos:line="331" pos:column="32">unsigned<pos:position pos:line="331" pos:column="40"/></name> <name pos:line="331" pos:column="41">char<pos:position pos:line="331" pos:column="45"/></name> <operator pos:line="331" pos:column="46">*<pos:position pos:line="331" pos:column="47"/></operator><operator pos:line="331" pos:column="47">)<pos:position pos:line="331" pos:column="48"/></operator><name pos:line="331" pos:column="48">buf<pos:position pos:line="331" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="331" pos:column="53">nread<pos:position pos:line="331" pos:column="58"/></name></expr></argument>)<pos:position pos:line="331" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="331" pos:column="60"/></expr_stmt>
        <if pos:line="332" pos:column="9">if<condition pos:line="332" pos:column="11">(<expr><name pos:line="332" pos:column="12">result<pos:position pos:line="332" pos:column="18"/></name></expr>)<pos:position pos:line="332" pos:column="19"/></condition><then pos:line="332" pos:column="19"> <block pos:line="332" pos:column="20">{
          <expr_stmt><expr><name pos:line="333" pos:column="11">keepon<pos:position pos:line="333" pos:column="17"/></name> <operator pos:line="333" pos:column="18">=<pos:position pos:line="333" pos:column="19"/></operator> <name pos:line="333" pos:column="20">FALSE<pos:position pos:line="333" pos:column="25"/></name></expr>;<pos:position pos:line="333" pos:column="26"/></expr_stmt>
          <break pos:line="334" pos:column="11">break;<pos:position pos:line="334" pos:column="17"/></break>
        }<pos:position pos:line="335" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="337" pos:column="9">/* Negotiate if the peer has started negotiating,
           otherwise don't. We don't want to speak telnet with
           non-telnet servers, like POP or SMTP. */</comment>
        <if pos:line="340" pos:column="9">if<condition pos:line="340" pos:column="11">(<expr><name><name pos:line="340" pos:column="12">tn<pos:position pos:line="340" pos:column="14"/></name><operator pos:line="340" pos:column="14">-&gt;<pos:position pos:line="340" pos:column="19"/></operator><name pos:line="340" pos:column="16">please_negotiate<pos:position pos:line="340" pos:column="32"/></name></name> <operator pos:line="340" pos:column="33">&amp;&amp;<pos:position pos:line="340" pos:column="43"/></operator> <operator pos:line="340" pos:column="36">!<pos:position pos:line="340" pos:column="37"/></operator><name><name pos:line="340" pos:column="37">tn<pos:position pos:line="340" pos:column="39"/></name><operator pos:line="340" pos:column="39">-&gt;<pos:position pos:line="340" pos:column="44"/></operator><name pos:line="340" pos:column="41">already_negotiated<pos:position pos:line="340" pos:column="59"/></name></name></expr>)<pos:position pos:line="340" pos:column="60"/></condition><then pos:line="340" pos:column="60"> <block pos:line="340" pos:column="61">{
          <expr_stmt><expr><call><name pos:line="341" pos:column="11">negotiate<pos:position pos:line="341" pos:column="20"/></name><argument_list pos:line="341" pos:column="20">(<argument><expr><name pos:line="341" pos:column="21">conn<pos:position pos:line="341" pos:column="25"/></name></expr></argument>)<pos:position pos:line="341" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="341" pos:column="27"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="342" pos:column="11">tn<pos:position pos:line="342" pos:column="13"/></name><operator pos:line="342" pos:column="13">-&gt;<pos:position pos:line="342" pos:column="18"/></operator><name pos:line="342" pos:column="15">already_negotiated<pos:position pos:line="342" pos:column="33"/></name></name> <operator pos:line="342" pos:column="34">=<pos:position pos:line="342" pos:column="35"/></operator> <literal type="number" pos:line="342" pos:column="36">1<pos:position pos:line="342" pos:column="37"/></literal></expr>;<pos:position pos:line="342" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="343" pos:column="10"/></block></then></if>
      }<pos:position pos:line="344" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="346" pos:column="7">nread<pos:position pos:line="346" pos:column="12"/></name> <operator pos:line="346" pos:column="13">=<pos:position pos:line="346" pos:column="14"/></operator> <literal type="number" pos:line="346" pos:column="15">0<pos:position pos:line="346" pos:column="16"/></literal></expr>;<pos:position pos:line="346" pos:column="17"/></expr_stmt>
      <if pos:line="347" pos:column="7">if<condition pos:line="347" pos:column="9">(<expr><name pos:line="347" pos:column="10">poll_cnt<pos:position pos:line="347" pos:column="18"/></name> <operator pos:line="347" pos:column="19">==<pos:position pos:line="347" pos:column="21"/></operator> <literal type="number" pos:line="347" pos:column="22">2<pos:position pos:line="347" pos:column="23"/></literal></expr>)<pos:position pos:line="347" pos:column="24"/></condition><then pos:line="347" pos:column="24"> <block pos:line="347" pos:column="25">{
        <if pos:line="348" pos:column="9">if<condition pos:line="348" pos:column="11">(<expr><name><name pos:line="348" pos:column="12">pfd<pos:position pos:line="348" pos:column="15"/></name><index pos:line="348" pos:column="15">[<expr><literal type="number" pos:line="348" pos:column="16">1<pos:position pos:line="348" pos:column="17"/></literal></expr>]<pos:position pos:line="348" pos:column="18"/></index></name><operator pos:line="348" pos:column="18">.<pos:position pos:line="348" pos:column="19"/></operator><name pos:line="348" pos:column="19">revents<pos:position pos:line="348" pos:column="26"/></name> <operator pos:line="348" pos:column="27">&amp;<pos:position pos:line="348" pos:column="32"/></operator> <name pos:line="348" pos:column="29">POLLIN<pos:position pos:line="348" pos:column="35"/></name></expr>)<pos:position pos:line="348" pos:column="36"/></condition><then pos:line="348" pos:column="36"> <block pos:line="348" pos:column="37">{ <comment type="block" pos:line="348" pos:column="39">/* read from in file */</comment>
          <expr_stmt><expr><name pos:line="349" pos:column="11">nread<pos:position pos:line="349" pos:column="16"/></name> <operator pos:line="349" pos:column="17">=<pos:position pos:line="349" pos:column="18"/></operator> <call><name pos:line="349" pos:column="19">read<pos:position pos:line="349" pos:column="23"/></name><argument_list pos:line="349" pos:column="23">(<argument><expr><name><name pos:line="349" pos:column="24">pfd<pos:position pos:line="349" pos:column="27"/></name><index pos:line="349" pos:column="27">[<expr><literal type="number" pos:line="349" pos:column="28">1<pos:position pos:line="349" pos:column="29"/></literal></expr>]<pos:position pos:line="349" pos:column="30"/></index></name><operator pos:line="349" pos:column="30">.<pos:position pos:line="349" pos:column="31"/></operator><name pos:line="349" pos:column="31">fd<pos:position pos:line="349" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="349" pos:column="35">buf<pos:position pos:line="349" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="349" pos:column="40">data<pos:position pos:line="349" pos:column="44"/></name><operator pos:line="349" pos:column="44">-&gt;<pos:position pos:line="349" pos:column="49"/></operator><name pos:line="349" pos:column="46">set<pos:position pos:line="349" pos:column="49"/></name><operator pos:line="349" pos:column="49">.<pos:position pos:line="349" pos:column="50"/></operator><name pos:line="349" pos:column="50">buffer_size<pos:position pos:line="349" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="349" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="349" pos:column="63"/></expr_stmt>
        }<pos:position pos:line="350" pos:column="10"/></block></then></if>
      }<pos:position pos:line="351" pos:column="8"/></block></then>
      <else pos:line="352" pos:column="7">else <block pos:line="352" pos:column="12">{
        <comment type="block" pos:line="353" pos:column="9">/* read from user-supplied method */</comment>
        <expr_stmt><expr><name pos:line="354" pos:column="9">nread<pos:position pos:line="354" pos:column="14"/></name> <operator pos:line="354" pos:column="15">=<pos:position pos:line="354" pos:column="16"/></operator> <operator pos:line="354" pos:column="17">(<pos:position pos:line="354" pos:column="18"/></operator><name pos:line="354" pos:column="18">int<pos:position pos:line="354" pos:column="21"/></name><operator pos:line="354" pos:column="21">)<pos:position pos:line="354" pos:column="22"/></operator><call><name><name pos:line="354" pos:column="22">data<pos:position pos:line="354" pos:column="26"/></name><operator pos:line="354" pos:column="26">-&gt;<pos:position pos:line="354" pos:column="31"/></operator><name pos:line="354" pos:column="28">state<pos:position pos:line="354" pos:column="33"/></name><operator pos:line="354" pos:column="33">.<pos:position pos:line="354" pos:column="34"/></operator><name pos:line="354" pos:column="34">fread_func<pos:position pos:line="354" pos:column="44"/></name></name><argument_list pos:line="354" pos:column="44">(<argument><expr><name pos:line="354" pos:column="45">buf<pos:position pos:line="354" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="354" pos:column="50">1<pos:position pos:line="354" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="354" pos:column="53">data<pos:position pos:line="354" pos:column="57"/></name><operator pos:line="354" pos:column="57">-&gt;<pos:position pos:line="354" pos:column="62"/></operator><name pos:line="354" pos:column="59">set<pos:position pos:line="354" pos:column="62"/></name><operator pos:line="354" pos:column="62">.<pos:position pos:line="354" pos:column="63"/></operator><name pos:line="354" pos:column="63">buffer_size<pos:position pos:line="354" pos:column="74"/></name></name></expr></argument>,
                                            <argument><expr><name><name pos:line="355" pos:column="45">data<pos:position pos:line="355" pos:column="49"/></name><operator pos:line="355" pos:column="49">-&gt;<pos:position pos:line="355" pos:column="54"/></operator><name pos:line="355" pos:column="51">state<pos:position pos:line="355" pos:column="56"/></name><operator pos:line="355" pos:column="56">.<pos:position pos:line="355" pos:column="57"/></operator><name pos:line="355" pos:column="57">in<pos:position pos:line="355" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="355" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="355" pos:column="61"/></expr_stmt>
        <if pos:line="356" pos:column="9">if<condition pos:line="356" pos:column="11">(<expr><name pos:line="356" pos:column="12">nread<pos:position pos:line="356" pos:column="17"/></name> <operator pos:line="356" pos:column="18">==<pos:position pos:line="356" pos:column="20"/></operator> <name pos:line="356" pos:column="21">CURL_READFUNC_ABORT<pos:position pos:line="356" pos:column="40"/></name></expr>)<pos:position pos:line="356" pos:column="41"/></condition><then pos:line="356" pos:column="41"> <block pos:line="356" pos:column="42">{
          <expr_stmt><expr><name pos:line="357" pos:column="11">keepon<pos:position pos:line="357" pos:column="17"/></name> <operator pos:line="357" pos:column="18">=<pos:position pos:line="357" pos:column="19"/></operator> <name pos:line="357" pos:column="20">FALSE<pos:position pos:line="357" pos:column="25"/></name></expr>;<pos:position pos:line="357" pos:column="26"/></expr_stmt>
          <break pos:line="358" pos:column="11">break;<pos:position pos:line="358" pos:column="17"/></break>
        }<pos:position pos:line="359" pos:column="10"/></block></then></if>
        <if pos:line="360" pos:column="9">if<condition pos:line="360" pos:column="11">(<expr><name pos:line="360" pos:column="12">nread<pos:position pos:line="360" pos:column="17"/></name> <operator pos:line="360" pos:column="18">==<pos:position pos:line="360" pos:column="20"/></operator> <name pos:line="360" pos:column="21">CURL_READFUNC_PAUSE<pos:position pos:line="360" pos:column="40"/></name></expr>)<pos:position pos:line="360" pos:column="41"/></condition><then pos:line="360" pos:column="41">
          <block type="pseudo"><break pos:line="361" pos:column="11">break;<pos:position pos:line="361" pos:column="17"/></break></block></then></if>
      }<pos:position pos:line="362" pos:column="8"/></block></else></if>

      <if pos:line="364" pos:column="7">if<condition pos:line="364" pos:column="9">(<expr><name pos:line="364" pos:column="10">nread<pos:position pos:line="364" pos:column="15"/></name> <operator pos:line="364" pos:column="16">&gt;<pos:position pos:line="364" pos:column="20"/></operator> <literal type="number" pos:line="364" pos:column="18">0<pos:position pos:line="364" pos:column="19"/></literal></expr>)<pos:position pos:line="364" pos:column="20"/></condition><then pos:line="364" pos:column="20"> <block pos:line="364" pos:column="21">{
        <expr_stmt><expr><name pos:line="365" pos:column="9">result<pos:position pos:line="365" pos:column="15"/></name> <operator pos:line="365" pos:column="16">=<pos:position pos:line="365" pos:column="17"/></operator> <call><name pos:line="365" pos:column="18">send_telnet_data<pos:position pos:line="365" pos:column="34"/></name><argument_list pos:line="365" pos:column="34">(<argument><expr><name pos:line="365" pos:column="35">conn<pos:position pos:line="365" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="365" pos:column="41">buf<pos:position pos:line="365" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="365" pos:column="46">nread<pos:position pos:line="365" pos:column="51"/></name></expr></argument>)<pos:position pos:line="365" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="365" pos:column="53"/></expr_stmt>
        <if pos:line="366" pos:column="9">if<condition pos:line="366" pos:column="11">(<expr><name pos:line="366" pos:column="12">result<pos:position pos:line="366" pos:column="18"/></name></expr>)<pos:position pos:line="366" pos:column="19"/></condition><then pos:line="366" pos:column="19"> <block pos:line="366" pos:column="20">{
          <expr_stmt><expr><name pos:line="367" pos:column="11">keepon<pos:position pos:line="367" pos:column="17"/></name> <operator pos:line="367" pos:column="18">=<pos:position pos:line="367" pos:column="19"/></operator> <name pos:line="367" pos:column="20">FALSE<pos:position pos:line="367" pos:column="25"/></name></expr>;<pos:position pos:line="367" pos:column="26"/></expr_stmt>
          <break pos:line="368" pos:column="11">break;<pos:position pos:line="368" pos:column="17"/></break>
        }<pos:position pos:line="369" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="370" pos:column="9">total_ul<pos:position pos:line="370" pos:column="17"/></name> <operator pos:line="370" pos:column="18">+=<pos:position pos:line="370" pos:column="20"/></operator> <name pos:line="370" pos:column="21">nread<pos:position pos:line="370" pos:column="26"/></name></expr>;<pos:position pos:line="370" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="371" pos:column="9">Curl_pgrsSetUploadCounter<pos:position pos:line="371" pos:column="34"/></name><argument_list pos:line="371" pos:column="34">(<argument><expr><name pos:line="371" pos:column="35">data<pos:position pos:line="371" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="371" pos:column="41">total_ul<pos:position pos:line="371" pos:column="49"/></name></expr></argument>)<pos:position pos:line="371" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="371" pos:column="51"/></expr_stmt>
      }<pos:position pos:line="372" pos:column="8"/></block></then>
      <elseif pos:line="373" pos:column="7">else <if pos:line="373" pos:column="12">if<condition pos:line="373" pos:column="14">(<expr><name pos:line="373" pos:column="15">nread<pos:position pos:line="373" pos:column="20"/></name> <operator pos:line="373" pos:column="21">&lt;<pos:position pos:line="373" pos:column="25"/></operator> <literal type="number" pos:line="373" pos:column="23">0<pos:position pos:line="373" pos:column="24"/></literal></expr>)<pos:position pos:line="373" pos:column="25"/></condition><then pos:line="373" pos:column="25">
        <block type="pseudo"><expr_stmt><expr><name pos:line="374" pos:column="9">keepon<pos:position pos:line="374" pos:column="15"/></name> <operator pos:line="374" pos:column="16">=<pos:position pos:line="374" pos:column="17"/></operator> <name pos:line="374" pos:column="18">FALSE<pos:position pos:line="374" pos:column="23"/></name></expr>;<pos:position pos:line="374" pos:column="24"/></expr_stmt></block></then></if></elseif></if>

      <break pos:line="376" pos:column="7">break;<pos:position pos:line="376" pos:column="13"/></break>
    }<pos:position pos:line="377" pos:column="6"/></block></switch> <comment type="block" pos:line="377" pos:column="7">/* poll switch statement */</comment>

    <if pos:line="379" pos:column="5">if<condition pos:line="379" pos:column="7">(<expr><name><name pos:line="379" pos:column="8">data<pos:position pos:line="379" pos:column="12"/></name><operator pos:line="379" pos:column="12">-&gt;<pos:position pos:line="379" pos:column="17"/></operator><name pos:line="379" pos:column="14">set<pos:position pos:line="379" pos:column="17"/></name><operator pos:line="379" pos:column="17">.<pos:position pos:line="379" pos:column="18"/></operator><name pos:line="379" pos:column="18">timeout<pos:position pos:line="379" pos:column="25"/></name></name></expr>)<pos:position pos:line="379" pos:column="26"/></condition><then pos:line="379" pos:column="26"> <block pos:line="379" pos:column="27">{
      <expr_stmt><expr><name pos:line="380" pos:column="7">now<pos:position pos:line="380" pos:column="10"/></name> <operator pos:line="380" pos:column="11">=<pos:position pos:line="380" pos:column="12"/></operator> <call><name pos:line="380" pos:column="13">Curl_tvnow<pos:position pos:line="380" pos:column="23"/></name><argument_list pos:line="380" pos:column="23">()<pos:position pos:line="380" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="380" pos:column="26"/></expr_stmt>
      <if pos:line="381" pos:column="7">if<condition pos:line="381" pos:column="9">(<expr><call><name pos:line="381" pos:column="10">Curl_tvdiff<pos:position pos:line="381" pos:column="21"/></name><argument_list pos:line="381" pos:column="21">(<argument><expr><name pos:line="381" pos:column="22">now<pos:position pos:line="381" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="381" pos:column="27">conn<pos:position pos:line="381" pos:column="31"/></name><operator pos:line="381" pos:column="31">-&gt;<pos:position pos:line="381" pos:column="36"/></operator><name pos:line="381" pos:column="33">created<pos:position pos:line="381" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="381" pos:column="41"/></argument_list></call> <operator pos:line="381" pos:column="42">&gt;=<pos:position pos:line="381" pos:column="47"/></operator> <name><name pos:line="381" pos:column="45">data<pos:position pos:line="381" pos:column="49"/></name><operator pos:line="381" pos:column="49">-&gt;<pos:position pos:line="381" pos:column="54"/></operator><name pos:line="381" pos:column="51">set<pos:position pos:line="381" pos:column="54"/></name><operator pos:line="381" pos:column="54">.<pos:position pos:line="381" pos:column="55"/></operator><name pos:line="381" pos:column="55">timeout<pos:position pos:line="381" pos:column="62"/></name></name></expr>)<pos:position pos:line="381" pos:column="63"/></condition><then pos:line="381" pos:column="63"> <block pos:line="381" pos:column="64">{
        <expr_stmt><expr><call><name pos:line="382" pos:column="9">failf<pos:position pos:line="382" pos:column="14"/></name><argument_list pos:line="382" pos:column="14">(<argument><expr><name pos:line="382" pos:column="15">data<pos:position pos:line="382" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="382" pos:column="21">"Time-out"<pos:position pos:line="382" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="382" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="382" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="383" pos:column="9">result<pos:position pos:line="383" pos:column="15"/></name> <operator pos:line="383" pos:column="16">=<pos:position pos:line="383" pos:column="17"/></operator> <name pos:line="383" pos:column="18">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="383" pos:column="42"/></name></expr>;<pos:position pos:line="383" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="384" pos:column="9">keepon<pos:position pos:line="384" pos:column="15"/></name> <operator pos:line="384" pos:column="16">=<pos:position pos:line="384" pos:column="17"/></operator> <name pos:line="384" pos:column="18">FALSE<pos:position pos:line="384" pos:column="23"/></name></expr>;<pos:position pos:line="384" pos:column="24"/></expr_stmt>
      }<pos:position pos:line="385" pos:column="8"/></block></then></if>
    }<pos:position pos:line="386" pos:column="6"/></block></then></if>

    <if pos:line="388" pos:column="5">if<condition pos:line="388" pos:column="7">(<expr><call><name pos:line="388" pos:column="8">Curl_pgrsUpdate<pos:position pos:line="388" pos:column="23"/></name><argument_list pos:line="388" pos:column="23">(<argument><expr><name pos:line="388" pos:column="24">conn<pos:position pos:line="388" pos:column="28"/></name></expr></argument>)<pos:position pos:line="388" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="388" pos:column="30"/></condition><then pos:line="388" pos:column="30"> <block pos:line="388" pos:column="31">{
      <expr_stmt><expr><name pos:line="389" pos:column="7">result<pos:position pos:line="389" pos:column="13"/></name> <operator pos:line="389" pos:column="14">=<pos:position pos:line="389" pos:column="15"/></operator> <name pos:line="389" pos:column="16">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="389" pos:column="41"/></name></expr>;<pos:position pos:line="389" pos:column="42"/></expr_stmt>
      <break pos:line="390" pos:column="7">break;<pos:position pos:line="390" pos:column="13"/></break>
    }<pos:position pos:line="391" pos:column="6"/></block></then></if>
  }<pos:position pos:line="392" pos:column="4"/></block></while>
<cpp:endif pos:line="393" pos:column="1">#<cpp:directive pos:line="393" pos:column="2">endif<pos:position pos:line="393" pos:column="7"/></cpp:directive></cpp:endif>
  <comment type="block" pos:line="394" pos:column="3">/* mark this as "no further transfer wanted" */</comment>
  <expr_stmt><expr><call><name pos:line="395" pos:column="3">Curl_setup_transfer<pos:position pos:line="395" pos:column="22"/></name><argument_list pos:line="395" pos:column="22">(<argument><expr><name pos:line="395" pos:column="23">conn<pos:position pos:line="395" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="395" pos:column="29">-<pos:position pos:line="395" pos:column="30"/></operator><literal type="number" pos:line="395" pos:column="30">1<pos:position pos:line="395" pos:column="31"/></literal></expr></argument>, <argument><expr><operator pos:line="395" pos:column="33">-<pos:position pos:line="395" pos:column="34"/></operator><literal type="number" pos:line="395" pos:column="34">1<pos:position pos:line="395" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="395" pos:column="37">FALSE<pos:position pos:line="395" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="395" pos:column="44">NULL<pos:position pos:line="395" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="395" pos:column="50">-<pos:position pos:line="395" pos:column="51"/></operator><literal type="number" pos:line="395" pos:column="51">1<pos:position pos:line="395" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="395" pos:column="54">NULL<pos:position pos:line="395" pos:column="58"/></name></expr></argument>)<pos:position pos:line="395" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="395" pos:column="60"/></expr_stmt>

  <return pos:line="397" pos:column="3">return <expr><name pos:line="397" pos:column="10">result<pos:position pos:line="397" pos:column="16"/></name></expr>;<pos:position pos:line="397" pos:column="17"/></return>
}<pos:position pos:line="398" pos:column="2"/></block></function></unit>
