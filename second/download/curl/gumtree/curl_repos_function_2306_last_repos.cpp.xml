<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2306_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_auth_decode_ntlm_type2_message<pos:position pos:line="1" pos:column="45"/></name><parameter_list pos:line="1" pos:column="45">(<parameter><decl><type><name><name pos:line="1" pos:column="46">struct<pos:position pos:line="1" pos:column="52"/></name> <name pos:line="1" pos:column="53">Curl_easy<pos:position pos:line="1" pos:column="62"/></name></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">data<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,
                                             <parameter><decl><type><specifier pos:line="2" pos:column="46">const<pos:position pos:line="2" pos:column="51"/></specifier> <name pos:line="2" pos:column="52">char<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">type2msg<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>,
                                             <parameter><decl><type><name><name pos:line="3" pos:column="46">struct<pos:position pos:line="3" pos:column="52"/></name> <name pos:line="3" pos:column="53">ntlmdata<pos:position pos:line="3" pos:column="61"/></name></name> <modifier pos:line="3" pos:column="62">*<pos:position pos:line="3" pos:column="63"/></modifier></type><name pos:line="3" pos:column="63">ntlm<pos:position pos:line="3" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="68"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><specifier pos:line="5" pos:column="3">static<pos:position pos:line="5" pos:column="9"/></specifier> <type><specifier pos:line="5" pos:column="10">const<pos:position pos:line="5" pos:column="15"/></specifier> <name pos:line="5" pos:column="16">char<pos:position pos:line="5" pos:column="20"/></name></type> <name><name pos:line="5" pos:column="21">type2_marker<pos:position pos:line="5" pos:column="33"/></name><index pos:line="5" pos:column="33">[]<pos:position pos:line="5" pos:column="35"/></index></name> <init pos:line="5" pos:column="36">= <expr><block pos:line="5" pos:column="38">{ <expr><literal type="number" pos:line="5" pos:column="40">0x02<pos:position pos:line="5" pos:column="44"/></literal></expr>, <expr><literal type="number" pos:line="5" pos:column="46">0x00<pos:position pos:line="5" pos:column="50"/></literal></expr>, <expr><literal type="number" pos:line="5" pos:column="52">0x00<pos:position pos:line="5" pos:column="56"/></literal></expr>, <expr><literal type="number" pos:line="5" pos:column="58">0x00<pos:position pos:line="5" pos:column="62"/></literal></expr> }<pos:position pos:line="5" pos:column="64"/></block></expr></init></decl>;<pos:position pos:line="5" pos:column="65"/></decl_stmt>

  <comment type="block" pos:line="7" pos:column="3">/* NTLM type-2 message structure:

          Index  Description            Content
            0    NTLMSSP Signature      Null-terminated ASCII "NTLMSSP"
                                        (0x4e544c4d53535000)
            8    NTLM Message Type      long (0x02000000)
           12    Target Name            security buffer
           20    Flags                  long
           24    Challenge              8 bytes
          (32)   Context                8 bytes (two consecutive longs) (*)
          (40)   Target Information     security buffer (*)
          (48)   OS Version Structure   8 bytes (*)
  32 (48) (56)   Start of data block    (*)
                                        (*) -&gt; Optional
  */</comment>

  <decl_stmt><decl><type><name pos:line="23" pos:column="3">CURLcode<pos:position pos:line="23" pos:column="11"/></name></type> <name pos:line="23" pos:column="12">result<pos:position pos:line="23" pos:column="18"/></name> <init pos:line="23" pos:column="19">= <expr><name pos:line="23" pos:column="21">CURLE_OK<pos:position pos:line="23" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="23" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="24" pos:column="3">unsigned<pos:position pos:line="24" pos:column="11"/></name> <name pos:line="24" pos:column="12">char<pos:position pos:line="24" pos:column="16"/></name> <modifier pos:line="24" pos:column="17">*<pos:position pos:line="24" pos:column="18"/></modifier></type><name pos:line="24" pos:column="18">type2<pos:position pos:line="24" pos:column="23"/></name> <init pos:line="24" pos:column="24">= <expr><name pos:line="24" pos:column="26">NULL<pos:position pos:line="24" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="25" pos:column="3">size_t<pos:position pos:line="25" pos:column="9"/></name></type> <name pos:line="25" pos:column="10">type2_len<pos:position pos:line="25" pos:column="19"/></name> <init pos:line="25" pos:column="20">= <expr><literal type="number" pos:line="25" pos:column="22">0<pos:position pos:line="25" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="25" pos:column="24"/></decl_stmt>

<cpp:if pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">if<pos:position pos:line="27" pos:column="4"/></cpp:directive> <expr><call><name pos:line="27" pos:column="5">defined<pos:position pos:line="27" pos:column="12"/></name><argument_list pos:line="27" pos:column="12">(<argument><expr><name pos:line="27" pos:column="13">NTLM_NEEDS_NSS_INIT<pos:position pos:line="27" pos:column="32"/></name></expr></argument>)<pos:position pos:line="27" pos:column="33"/></argument_list></call></expr></cpp:if>
  <comment type="block" pos:line="28" pos:column="3">/* Make sure the crypto backend is initialized */</comment>
  <expr_stmt><expr><name pos:line="29" pos:column="3">result<pos:position pos:line="29" pos:column="9"/></name> <operator pos:line="29" pos:column="10">=<pos:position pos:line="29" pos:column="11"/></operator> <call><name pos:line="29" pos:column="12">Curl_nss_force_init<pos:position pos:line="29" pos:column="31"/></name><argument_list pos:line="29" pos:column="31">(<argument><expr><name pos:line="29" pos:column="32">data<pos:position pos:line="29" pos:column="36"/></name></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="38"/></expr_stmt>
  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><name pos:line="30" pos:column="6">result<pos:position pos:line="30" pos:column="12"/></name></expr>)<pos:position pos:line="30" pos:column="13"/></condition><then pos:line="30" pos:column="13">
    <block type="pseudo"><return pos:line="31" pos:column="5">return <expr><name pos:line="31" pos:column="12">result<pos:position pos:line="31" pos:column="18"/></name></expr>;<pos:position pos:line="31" pos:column="19"/></return></block></then></if>
<cpp:elif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">elif<pos:position pos:line="32" pos:column="6"/></cpp:directive> <expr><call><name pos:line="32" pos:column="7">defined<pos:position pos:line="32" pos:column="14"/></name><argument_list pos:line="32" pos:column="14">(<argument><expr><name pos:line="32" pos:column="15">CURL_DISABLE_VERBOSE_STRINGS<pos:position pos:line="32" pos:column="43"/></name></expr></argument>)<pos:position pos:line="32" pos:column="44"/></argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><operator pos:line="33" pos:column="3">(<pos:position pos:line="33" pos:column="4"/></operator><name pos:line="33" pos:column="4">void<pos:position pos:line="33" pos:column="8"/></name><operator pos:line="33" pos:column="8">)<pos:position pos:line="33" pos:column="9"/></operator><name pos:line="33" pos:column="9">data<pos:position pos:line="33" pos:column="13"/></name></expr>;<pos:position pos:line="33" pos:column="14"/></expr_stmt>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="36" pos:column="3">/* Decode the base-64 encoded type-2 message */</comment>
  <if pos:line="37" pos:column="3">if<condition pos:line="37" pos:column="5">(<expr><call><name pos:line="37" pos:column="6">strlen<pos:position pos:line="37" pos:column="12"/></name><argument_list pos:line="37" pos:column="12">(<argument><expr><name pos:line="37" pos:column="13">type2msg<pos:position pos:line="37" pos:column="21"/></name></expr></argument>)<pos:position pos:line="37" pos:column="22"/></argument_list></call> <operator pos:line="37" pos:column="23">&amp;&amp;<pos:position pos:line="37" pos:column="33"/></operator> <operator pos:line="37" pos:column="26">*<pos:position pos:line="37" pos:column="27"/></operator><name pos:line="37" pos:column="27">type2msg<pos:position pos:line="37" pos:column="35"/></name> <operator pos:line="37" pos:column="36">!=<pos:position pos:line="37" pos:column="38"/></operator> <literal type="char" pos:line="37" pos:column="39">'='<pos:position pos:line="37" pos:column="42"/></literal></expr>)<pos:position pos:line="37" pos:column="43"/></condition><then pos:line="37" pos:column="43"> <block pos:line="37" pos:column="44">{
    <expr_stmt><expr><name pos:line="38" pos:column="5">result<pos:position pos:line="38" pos:column="11"/></name> <operator pos:line="38" pos:column="12">=<pos:position pos:line="38" pos:column="13"/></operator> <call><name pos:line="38" pos:column="14">Curl_base64_decode<pos:position pos:line="38" pos:column="32"/></name><argument_list pos:line="38" pos:column="32">(<argument><expr><name pos:line="38" pos:column="33">type2msg<pos:position pos:line="38" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="43">&amp;<pos:position pos:line="38" pos:column="48"/></operator><name pos:line="38" pos:column="44">type2<pos:position pos:line="38" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="51">&amp;<pos:position pos:line="38" pos:column="56"/></operator><name pos:line="38" pos:column="52">type2_len<pos:position pos:line="38" pos:column="61"/></name></expr></argument>)<pos:position pos:line="38" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="63"/></expr_stmt>
    <if pos:line="39" pos:column="5">if<condition pos:line="39" pos:column="7">(<expr><name pos:line="39" pos:column="8">result<pos:position pos:line="39" pos:column="14"/></name></expr>)<pos:position pos:line="39" pos:column="15"/></condition><then pos:line="39" pos:column="15">
      <block type="pseudo"><return pos:line="40" pos:column="7">return <expr><name pos:line="40" pos:column="14">result<pos:position pos:line="40" pos:column="20"/></name></expr>;<pos:position pos:line="40" pos:column="21"/></return></block></then></if>
  }<pos:position pos:line="41" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="43" pos:column="3">/* Ensure we have a valid type-2 message */</comment>
  <if pos:line="44" pos:column="3">if<condition pos:line="44" pos:column="5">(<expr><operator pos:line="44" pos:column="6">!<pos:position pos:line="44" pos:column="7"/></operator><name pos:line="44" pos:column="7">type2<pos:position pos:line="44" pos:column="12"/></name></expr>)<pos:position pos:line="44" pos:column="13"/></condition><then pos:line="44" pos:column="13"> <block pos:line="44" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">infof<pos:position pos:line="45" pos:column="10"/></name><argument_list pos:line="45" pos:column="10">(<argument><expr><name pos:line="45" pos:column="11">data<pos:position pos:line="45" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="17">"NTLM handshake failure (empty type-2 message)\n"<pos:position pos:line="45" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="68"/></expr_stmt>
    <return pos:line="46" pos:column="5">return <expr><name pos:line="46" pos:column="12">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="46" pos:column="38"/></name></expr>;<pos:position pos:line="46" pos:column="39"/></return>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="49" pos:column="3">ntlm<pos:position pos:line="49" pos:column="7"/></name><operator pos:line="49" pos:column="7">-&gt;<pos:position pos:line="49" pos:column="12"/></operator><name pos:line="49" pos:column="9">flags<pos:position pos:line="49" pos:column="14"/></name></name> <operator pos:line="49" pos:column="15">=<pos:position pos:line="49" pos:column="16"/></operator> <literal type="number" pos:line="49" pos:column="17">0<pos:position pos:line="49" pos:column="18"/></literal></expr>;<pos:position pos:line="49" pos:column="19"/></expr_stmt>

  <if pos:line="51" pos:column="3">if<condition pos:line="51" pos:column="5">(<expr><operator pos:line="51" pos:column="6">(<pos:position pos:line="51" pos:column="7"/></operator><name pos:line="51" pos:column="7">type2_len<pos:position pos:line="51" pos:column="16"/></name> <operator pos:line="51" pos:column="17">&lt;<pos:position pos:line="51" pos:column="21"/></operator> <literal type="number" pos:line="51" pos:column="19">32<pos:position pos:line="51" pos:column="21"/></literal><operator pos:line="51" pos:column="21">)<pos:position pos:line="51" pos:column="22"/></operator> <operator pos:line="51" pos:column="23">||<pos:position pos:line="51" pos:column="25"/></operator>
     <operator pos:line="52" pos:column="6">(<pos:position pos:line="52" pos:column="7"/></operator><call><name pos:line="52" pos:column="7">memcmp<pos:position pos:line="52" pos:column="13"/></name><argument_list pos:line="52" pos:column="13">(<argument><expr><name pos:line="52" pos:column="14">type2<pos:position pos:line="52" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="21">NTLMSSP_SIGNATURE<pos:position pos:line="52" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="40">8<pos:position pos:line="52" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="42"/></argument_list></call> <operator pos:line="52" pos:column="43">!=<pos:position pos:line="52" pos:column="45"/></operator> <literal type="number" pos:line="52" pos:column="46">0<pos:position pos:line="52" pos:column="47"/></literal><operator pos:line="52" pos:column="47">)<pos:position pos:line="52" pos:column="48"/></operator> <operator pos:line="52" pos:column="49">||<pos:position pos:line="52" pos:column="51"/></operator>
     <operator pos:line="53" pos:column="6">(<pos:position pos:line="53" pos:column="7"/></operator><call><name pos:line="53" pos:column="7">memcmp<pos:position pos:line="53" pos:column="13"/></name><argument_list pos:line="53" pos:column="13">(<argument><expr><name pos:line="53" pos:column="14">type2<pos:position pos:line="53" pos:column="19"/></name> <operator pos:line="53" pos:column="20">+<pos:position pos:line="53" pos:column="21"/></operator> <literal type="number" pos:line="53" pos:column="22">8<pos:position pos:line="53" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="25">type2_marker<pos:position pos:line="53" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="53" pos:column="39">sizeof<argument_list pos:line="53" pos:column="45">(<argument><expr><name pos:line="53" pos:column="46">type2_marker<pos:position pos:line="53" pos:column="58"/></name></expr></argument>)<pos:position pos:line="53" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="53" pos:column="60"/></argument_list></call> <operator pos:line="53" pos:column="61">!=<pos:position pos:line="53" pos:column="63"/></operator> <literal type="number" pos:line="53" pos:column="64">0<pos:position pos:line="53" pos:column="65"/></literal><operator pos:line="53" pos:column="65">)<pos:position pos:line="53" pos:column="66"/></operator></expr>)<pos:position pos:line="53" pos:column="67"/></condition><then pos:line="53" pos:column="67"> <block pos:line="53" pos:column="68">{
    <comment type="block" pos:line="54" pos:column="5">/* This was not a good enough type-2 message */</comment>
    <expr_stmt><expr><call><name pos:line="55" pos:column="5">free<pos:position pos:line="55" pos:column="9"/></name><argument_list pos:line="55" pos:column="9">(<argument><expr><name pos:line="55" pos:column="10">type2<pos:position pos:line="55" pos:column="15"/></name></expr></argument>)<pos:position pos:line="55" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">infof<pos:position pos:line="56" pos:column="10"/></name><argument_list pos:line="56" pos:column="10">(<argument><expr><name pos:line="56" pos:column="11">data<pos:position pos:line="56" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="17">"NTLM handshake failure (bad type-2 message)\n"<pos:position pos:line="56" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="66"/></expr_stmt>
    <return pos:line="57" pos:column="5">return <expr><name pos:line="57" pos:column="12">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="57" pos:column="38"/></name></expr>;<pos:position pos:line="57" pos:column="39"/></return>
  }<pos:position pos:line="58" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="60" pos:column="3">ntlm<pos:position pos:line="60" pos:column="7"/></name><operator pos:line="60" pos:column="7">-&gt;<pos:position pos:line="60" pos:column="12"/></operator><name pos:line="60" pos:column="9">flags<pos:position pos:line="60" pos:column="14"/></name></name> <operator pos:line="60" pos:column="15">=<pos:position pos:line="60" pos:column="16"/></operator> <call><name pos:line="60" pos:column="17">Curl_read32_le<pos:position pos:line="60" pos:column="31"/></name><argument_list pos:line="60" pos:column="31">(<argument><expr><operator pos:line="60" pos:column="32">&amp;<pos:position pos:line="60" pos:column="37"/></operator><name><name pos:line="60" pos:column="33">type2<pos:position pos:line="60" pos:column="38"/></name><index pos:line="60" pos:column="38">[<expr><literal type="number" pos:line="60" pos:column="39">20<pos:position pos:line="60" pos:column="41"/></literal></expr>]<pos:position pos:line="60" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="60" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="61" pos:column="3">memcpy<pos:position pos:line="61" pos:column="9"/></name><argument_list pos:line="61" pos:column="9">(<argument><expr><name><name pos:line="61" pos:column="10">ntlm<pos:position pos:line="61" pos:column="14"/></name><operator pos:line="61" pos:column="14">-&gt;<pos:position pos:line="61" pos:column="19"/></operator><name pos:line="61" pos:column="16">nonce<pos:position pos:line="61" pos:column="21"/></name></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="23">&amp;<pos:position pos:line="61" pos:column="28"/></operator><name><name pos:line="61" pos:column="24">type2<pos:position pos:line="61" pos:column="29"/></name><index pos:line="61" pos:column="29">[<expr><literal type="number" pos:line="61" pos:column="30">24<pos:position pos:line="61" pos:column="32"/></literal></expr>]<pos:position pos:line="61" pos:column="33"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="35">8<pos:position pos:line="61" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="38"/></expr_stmt>

  <if pos:line="63" pos:column="3">if<condition pos:line="63" pos:column="5">(<expr><name><name pos:line="63" pos:column="6">ntlm<pos:position pos:line="63" pos:column="10"/></name><operator pos:line="63" pos:column="10">-&gt;<pos:position pos:line="63" pos:column="15"/></operator><name pos:line="63" pos:column="12">flags<pos:position pos:line="63" pos:column="17"/></name></name> <operator pos:line="63" pos:column="18">&amp;<pos:position pos:line="63" pos:column="23"/></operator> <name pos:line="63" pos:column="20">NTLMFLAG_NEGOTIATE_TARGET_INFO<pos:position pos:line="63" pos:column="50"/></name></expr>)<pos:position pos:line="63" pos:column="51"/></condition><then pos:line="63" pos:column="51"> <block pos:line="63" pos:column="52">{
    <expr_stmt><expr><name pos:line="64" pos:column="5">result<pos:position pos:line="64" pos:column="11"/></name> <operator pos:line="64" pos:column="12">=<pos:position pos:line="64" pos:column="13"/></operator> <call><name pos:line="64" pos:column="14">ntlm_decode_type2_target<pos:position pos:line="64" pos:column="38"/></name><argument_list pos:line="64" pos:column="38">(<argument><expr><name pos:line="64" pos:column="39">data<pos:position pos:line="64" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="45">type2<pos:position pos:line="64" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="52">type2_len<pos:position pos:line="64" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="63">ntlm<pos:position pos:line="64" pos:column="67"/></name></expr></argument>)<pos:position pos:line="64" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="69"/></expr_stmt>
    <if pos:line="65" pos:column="5">if<condition pos:line="65" pos:column="7">(<expr><name pos:line="65" pos:column="8">result<pos:position pos:line="65" pos:column="14"/></name></expr>)<pos:position pos:line="65" pos:column="15"/></condition><then pos:line="65" pos:column="15"> <block pos:line="65" pos:column="16">{
      <expr_stmt><expr><call><name pos:line="66" pos:column="7">free<pos:position pos:line="66" pos:column="11"/></name><argument_list pos:line="66" pos:column="11">(<argument><expr><name pos:line="66" pos:column="12">type2<pos:position pos:line="66" pos:column="17"/></name></expr></argument>)<pos:position pos:line="66" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="19"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="67" pos:column="7">infof<pos:position pos:line="67" pos:column="12"/></name><argument_list pos:line="67" pos:column="12">(<argument><expr><name pos:line="67" pos:column="13">data<pos:position pos:line="67" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="19">"NTLM handshake failure (bad type-2 message)\n"<pos:position pos:line="67" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="68"/></expr_stmt>
      <return pos:line="68" pos:column="7">return <expr><name pos:line="68" pos:column="14">result<pos:position pos:line="68" pos:column="20"/></name></expr>;<pos:position pos:line="68" pos:column="21"/></return>
    }<pos:position pos:line="69" pos:column="6"/></block></then></if>
  }<pos:position pos:line="70" pos:column="4"/></block></then></if>

  <macro><name pos:line="72" pos:column="3">DEBUG_OUT<pos:position pos:line="72" pos:column="12"/></name><argument_list pos:line="72" pos:column="12">(<argument pos:line="72" pos:column="13">{
    fprintf(stderr, <literal type="string" pos:line="73" pos:column="21">"**** TYPE2 header flags=0x%08.8lx "<pos:position pos:line="73" pos:column="57"/></literal>, ntlm-&gt;flags);
    ntlm_print_flags(stderr, ntlm-&gt;flags);
    fprintf(stderr, <literal type="string" pos:line="75" pos:column="21">"\n                  nonce="<pos:position pos:line="75" pos:column="49"/></literal>);
    ntlm_print_hex(stderr, (char *)ntlm-&gt;nonce, <literal type="number" pos:line="76" pos:column="49">8<pos:position pos:line="76" pos:column="50"/></literal>);
    fprintf(stderr, <literal type="string" pos:line="77" pos:column="21">"\n****\n"<pos:position pos:line="77" pos:column="31"/></literal>);
    fprintf(stderr, <literal type="string" pos:line="78" pos:column="21">"**** Header %s\n "<pos:position pos:line="78" pos:column="40"/></literal>, header);
  }<pos:position pos:line="79" pos:column="4"/></argument>)<pos:position pos:line="79" pos:column="5"/></argument_list></macro><empty_stmt pos:line="79" pos:column="5">;<pos:position pos:line="79" pos:column="6"/></empty_stmt>

  <expr_stmt><expr><call><name pos:line="81" pos:column="3">free<pos:position pos:line="81" pos:column="7"/></name><argument_list pos:line="81" pos:column="7">(<argument><expr><name pos:line="81" pos:column="8">type2<pos:position pos:line="81" pos:column="13"/></name></expr></argument>)<pos:position pos:line="81" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="15"/></expr_stmt>

  <return pos:line="83" pos:column="3">return <expr><name pos:line="83" pos:column="10">result<pos:position pos:line="83" pos:column="16"/></name></expr>;<pos:position pos:line="83" pos:column="17"/></return>
}<pos:position pos:line="84" pos:column="2"/></block></function></unit>
