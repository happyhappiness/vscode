<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1100_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">curl_easy_perform<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">CURL<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">easy<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURLM<pos:position pos:line="3" pos:column="8"/></name> <modifier pos:line="3" pos:column="9">*<pos:position pos:line="3" pos:column="10"/></modifier></type><name pos:line="3" pos:column="10">multi<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLMcode<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">mcode<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">CURLcode<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">code<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><name pos:line="5" pos:column="19">CURLE_OK<pos:position pos:line="5" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">still_running<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">timeval<pos:position pos:line="7" pos:column="17"/></name></name></type> <name pos:line="7" pos:column="18">timeout<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">rc<pos:position pos:line="8" pos:column="9"/></name></decl>;<pos:position pos:line="8" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">CURLMsg<pos:position pos:line="9" pos:column="10"/></name> <modifier pos:line="9" pos:column="11">*<pos:position pos:line="9" pos:column="12"/></modifier></type><name pos:line="9" pos:column="12">msg<pos:position pos:line="9" pos:column="15"/></name></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">fd_set<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">fdread<pos:position pos:line="10" pos:column="16"/></name></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">fd_set<pos:position pos:line="11" pos:column="9"/></name></type> <name pos:line="11" pos:column="10">fdwrite<pos:position pos:line="11" pos:column="17"/></name></decl>;<pos:position pos:line="11" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">fd_set<pos:position pos:line="12" pos:column="9"/></name></type> <name pos:line="12" pos:column="10">fdexcep<pos:position pos:line="12" pos:column="17"/></name></decl>;<pos:position pos:line="12" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">maxfd<pos:position pos:line="13" pos:column="12"/></name></decl>;<pos:position pos:line="13" pos:column="13"/></decl_stmt>

  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><operator pos:line="15" pos:column="6">!<pos:position pos:line="15" pos:column="7"/></operator><name pos:line="15" pos:column="7">easy<pos:position pos:line="15" pos:column="11"/></name></expr>)<pos:position pos:line="15" pos:column="12"/></condition><then pos:line="15" pos:column="12">
    <block type="pseudo"><return pos:line="16" pos:column="5">return <expr><name pos:line="16" pos:column="12">CURLE_BAD_FUNCTION_ARGUMENT<pos:position pos:line="16" pos:column="39"/></name></expr>;<pos:position pos:line="16" pos:column="40"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="18" pos:column="3">multi<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">=<pos:position pos:line="18" pos:column="10"/></operator> <call><name pos:line="18" pos:column="11">curl_multi_init<pos:position pos:line="18" pos:column="26"/></name><argument_list pos:line="18" pos:column="26">()<pos:position pos:line="18" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>
  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><operator pos:line="19" pos:column="6">!<pos:position pos:line="19" pos:column="7"/></operator><name pos:line="19" pos:column="7">multi<pos:position pos:line="19" pos:column="12"/></name></expr>)<pos:position pos:line="19" pos:column="13"/></condition><then pos:line="19" pos:column="13">
    <block type="pseudo"><return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="20" pos:column="31"/></name></expr>;<pos:position pos:line="20" pos:column="32"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="22" pos:column="3">mcode<pos:position pos:line="22" pos:column="8"/></name> <operator pos:line="22" pos:column="9">=<pos:position pos:line="22" pos:column="10"/></operator> <call><name pos:line="22" pos:column="11">curl_multi_add_handle<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><name pos:line="22" pos:column="33">multi<pos:position pos:line="22" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="40">easy<pos:position pos:line="22" pos:column="44"/></name></expr></argument>)<pos:position pos:line="22" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="46"/></expr_stmt>
  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><name pos:line="23" pos:column="6">mcode<pos:position pos:line="23" pos:column="11"/></name></expr>)<pos:position pos:line="23" pos:column="12"/></condition><then pos:line="23" pos:column="12"> <block pos:line="23" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">curl_multi_cleanup<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><name pos:line="24" pos:column="24">multi<pos:position pos:line="24" pos:column="29"/></name></expr></argument>)<pos:position pos:line="24" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="31"/></expr_stmt>
    <if pos:line="25" pos:column="5">if<condition pos:line="25" pos:column="7">(<expr><name pos:line="25" pos:column="8">mcode<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">==<pos:position pos:line="25" pos:column="16"/></operator> <name pos:line="25" pos:column="17">CURLM_OUT_OF_MEMORY<pos:position pos:line="25" pos:column="36"/></name></expr>)<pos:position pos:line="25" pos:column="37"/></condition><then pos:line="25" pos:column="37">
      <block type="pseudo"><return pos:line="26" pos:column="7">return <expr><name pos:line="26" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="26" pos:column="33"/></name></expr>;<pos:position pos:line="26" pos:column="34"/></return></block></then>
    <else pos:line="27" pos:column="5">else
      <block type="pseudo"><return pos:line="28" pos:column="7">return <expr><name pos:line="28" pos:column="14">CURLE_FAILED_INIT<pos:position pos:line="28" pos:column="31"/></name></expr>;<pos:position pos:line="28" pos:column="32"/></return></block></else></if>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="31" pos:column="3">/* we start some action by calling perform right away */</comment>

  <do pos:line="33" pos:column="3">do <block pos:line="33" pos:column="6">{
    <while pos:line="34" pos:column="5">while<condition pos:line="34" pos:column="10">(<expr><name pos:line="34" pos:column="11">CURLM_CALL_MULTI_PERFORM<pos:position pos:line="34" pos:column="35"/></name> <operator pos:line="34" pos:column="36">==<pos:position pos:line="34" pos:column="38"/></operator>
          <call><name pos:line="35" pos:column="11">curl_multi_perform<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><name pos:line="35" pos:column="30">multi<pos:position pos:line="35" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="37">&amp;<pos:position pos:line="35" pos:column="42"/></operator><name pos:line="35" pos:column="38">still_running<pos:position pos:line="35" pos:column="51"/></name></expr></argument>)<pos:position pos:line="35" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="53"/></condition><block type="pseudo"><empty_stmt pos:line="35" pos:column="53">;<pos:position pos:line="35" pos:column="54"/></empty_stmt></block></while>

    <if pos:line="37" pos:column="5">if<condition pos:line="37" pos:column="7">(<expr><operator pos:line="37" pos:column="8">!<pos:position pos:line="37" pos:column="9"/></operator><name pos:line="37" pos:column="9">still_running<pos:position pos:line="37" pos:column="22"/></name></expr>)<pos:position pos:line="37" pos:column="23"/></condition><then pos:line="37" pos:column="23">
      <block type="pseudo"><break pos:line="38" pos:column="7">break;<pos:position pos:line="38" pos:column="13"/></break></block></then></if>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">FD_ZERO<pos:position pos:line="40" pos:column="12"/></name><argument_list pos:line="40" pos:column="12">(<argument><expr><operator pos:line="40" pos:column="13">&amp;<pos:position pos:line="40" pos:column="18"/></operator><name pos:line="40" pos:column="14">fdread<pos:position pos:line="40" pos:column="20"/></name></expr></argument>)<pos:position pos:line="40" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">FD_ZERO<pos:position pos:line="41" pos:column="12"/></name><argument_list pos:line="41" pos:column="12">(<argument><expr><operator pos:line="41" pos:column="13">&amp;<pos:position pos:line="41" pos:column="18"/></operator><name pos:line="41" pos:column="14">fdwrite<pos:position pos:line="41" pos:column="21"/></name></expr></argument>)<pos:position pos:line="41" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">FD_ZERO<pos:position pos:line="42" pos:column="12"/></name><argument_list pos:line="42" pos:column="12">(<argument><expr><operator pos:line="42" pos:column="13">&amp;<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="14">fdexcep<pos:position pos:line="42" pos:column="21"/></name></expr></argument>)<pos:position pos:line="42" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="23"/></expr_stmt>

    <comment type="block" pos:line="44" pos:column="5">/* timeout once per second */</comment>
    <expr_stmt><expr><name><name pos:line="45" pos:column="5">timeout<pos:position pos:line="45" pos:column="12"/></name><operator pos:line="45" pos:column="12">.<pos:position pos:line="45" pos:column="13"/></operator><name pos:line="45" pos:column="13">tv_sec<pos:position pos:line="45" pos:column="19"/></name></name> <operator pos:line="45" pos:column="20">=<pos:position pos:line="45" pos:column="21"/></operator> <literal type="number" pos:line="45" pos:column="22">1<pos:position pos:line="45" pos:column="23"/></literal></expr>;<pos:position pos:line="45" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="46" pos:column="5">timeout<pos:position pos:line="46" pos:column="12"/></name><operator pos:line="46" pos:column="12">.<pos:position pos:line="46" pos:column="13"/></operator><name pos:line="46" pos:column="13">tv_usec<pos:position pos:line="46" pos:column="20"/></name></name> <operator pos:line="46" pos:column="21">=<pos:position pos:line="46" pos:column="22"/></operator> <literal type="number" pos:line="46" pos:column="23">0<pos:position pos:line="46" pos:column="24"/></literal></expr>;<pos:position pos:line="46" pos:column="25"/></expr_stmt>

    <comment type="block" pos:line="48" pos:column="5">/* Old deprecated style: get file descriptors from the transfers */</comment>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">curl_multi_fdset<pos:position pos:line="49" pos:column="21"/></name><argument_list pos:line="49" pos:column="21">(<argument><expr><name pos:line="49" pos:column="22">multi<pos:position pos:line="49" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="29">&amp;<pos:position pos:line="49" pos:column="34"/></operator><name pos:line="49" pos:column="30">fdread<pos:position pos:line="49" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="38">&amp;<pos:position pos:line="49" pos:column="43"/></operator><name pos:line="49" pos:column="39">fdwrite<pos:position pos:line="49" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="48">&amp;<pos:position pos:line="49" pos:column="53"/></operator><name pos:line="49" pos:column="49">fdexcep<pos:position pos:line="49" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="58">&amp;<pos:position pos:line="49" pos:column="63"/></operator><name pos:line="49" pos:column="59">maxfd<pos:position pos:line="49" pos:column="64"/></name></expr></argument>)<pos:position pos:line="49" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><name pos:line="50" pos:column="5">rc<pos:position pos:line="50" pos:column="7"/></name> <operator pos:line="50" pos:column="8">=<pos:position pos:line="50" pos:column="9"/></operator> <call><name pos:line="50" pos:column="10">Curl_select<pos:position pos:line="50" pos:column="21"/></name><argument_list pos:line="50" pos:column="21">(<argument><expr><name pos:line="50" pos:column="22">maxfd<pos:position pos:line="50" pos:column="27"/></name><operator pos:line="50" pos:column="27">+<pos:position pos:line="50" pos:column="28"/></operator><literal type="number" pos:line="50" pos:column="28">1<pos:position pos:line="50" pos:column="29"/></literal></expr></argument>, <argument><expr><operator pos:line="50" pos:column="31">&amp;<pos:position pos:line="50" pos:column="36"/></operator><name pos:line="50" pos:column="32">fdread<pos:position pos:line="50" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="40">&amp;<pos:position pos:line="50" pos:column="45"/></operator><name pos:line="50" pos:column="41">fdwrite<pos:position pos:line="50" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="50">&amp;<pos:position pos:line="50" pos:column="55"/></operator><name pos:line="50" pos:column="51">fdexcep<pos:position pos:line="50" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="60">&amp;<pos:position pos:line="50" pos:column="65"/></operator><name pos:line="50" pos:column="61">timeout<pos:position pos:line="50" pos:column="68"/></name></expr></argument>)<pos:position pos:line="50" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="70"/></expr_stmt>

    <comment type="block" pos:line="52" pos:column="5">/* The way is to extract the sockets and wait for them without using
       select. This whole alternative version should probably rather use the
       curl_multi_socket() approach. */</comment>

    <if pos:line="56" pos:column="5">if<condition pos:line="56" pos:column="7">(<expr><name pos:line="56" pos:column="8">rc<pos:position pos:line="56" pos:column="10"/></name> <operator pos:line="56" pos:column="11">==<pos:position pos:line="56" pos:column="13"/></operator> <operator pos:line="56" pos:column="14">-<pos:position pos:line="56" pos:column="15"/></operator><literal type="number" pos:line="56" pos:column="15">1<pos:position pos:line="56" pos:column="16"/></literal></expr>)<pos:position pos:line="56" pos:column="17"/></condition><then pos:line="56" pos:column="17">
      <comment type="block" pos:line="57" pos:column="7">/* select error */</comment>
      <block type="pseudo"><break pos:line="58" pos:column="7">break;<pos:position pos:line="58" pos:column="13"/></break></block></then></if>

    <comment type="block" pos:line="60" pos:column="5">/* timeout or data to send/receive =&gt; loop! */</comment>
  }<pos:position pos:line="61" pos:column="4"/></block> while<condition pos:line="61" pos:column="10">(<expr><name pos:line="61" pos:column="11">still_running<pos:position pos:line="61" pos:column="24"/></name></expr>)<pos:position pos:line="61" pos:column="25"/></condition>;<pos:position pos:line="61" pos:column="26"/></do>

  <expr_stmt><expr><name pos:line="63" pos:column="3">msg<pos:position pos:line="63" pos:column="6"/></name> <operator pos:line="63" pos:column="7">=<pos:position pos:line="63" pos:column="8"/></operator> <call><name pos:line="63" pos:column="9">curl_multi_info_read<pos:position pos:line="63" pos:column="29"/></name><argument_list pos:line="63" pos:column="29">(<argument><expr><name pos:line="63" pos:column="30">multi<pos:position pos:line="63" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="37">&amp;<pos:position pos:line="63" pos:column="42"/></operator><name pos:line="63" pos:column="38">rc<pos:position pos:line="63" pos:column="40"/></name></expr></argument>)<pos:position pos:line="63" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="42"/></expr_stmt>
  <if pos:line="64" pos:column="3">if<condition pos:line="64" pos:column="5">(<expr><name pos:line="64" pos:column="6">msg<pos:position pos:line="64" pos:column="9"/></name></expr>)<pos:position pos:line="64" pos:column="10"/></condition><then pos:line="64" pos:column="10">
    <block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="5">code<pos:position pos:line="65" pos:column="9"/></name> <operator pos:line="65" pos:column="10">=<pos:position pos:line="65" pos:column="11"/></operator> <name><name pos:line="65" pos:column="12">msg<pos:position pos:line="65" pos:column="15"/></name><operator pos:line="65" pos:column="15">-&gt;<pos:position pos:line="65" pos:column="20"/></operator><name pos:line="65" pos:column="17">data<pos:position pos:line="65" pos:column="21"/></name><operator pos:line="65" pos:column="21">.<pos:position pos:line="65" pos:column="22"/></operator><name pos:line="65" pos:column="22">result<pos:position pos:line="65" pos:column="28"/></name></name></expr>;<pos:position pos:line="65" pos:column="29"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="67" pos:column="3">mcode<pos:position pos:line="67" pos:column="8"/></name> <operator pos:line="67" pos:column="9">=<pos:position pos:line="67" pos:column="10"/></operator> <call><name pos:line="67" pos:column="11">curl_multi_remove_handle<pos:position pos:line="67" pos:column="35"/></name><argument_list pos:line="67" pos:column="35">(<argument><expr><name pos:line="67" pos:column="36">multi<pos:position pos:line="67" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="43">easy<pos:position pos:line="67" pos:column="47"/></name></expr></argument>)<pos:position pos:line="67" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="49"/></expr_stmt>
  <comment type="block" pos:line="68" pos:column="3">/* what to do if it fails? */</comment>

  <expr_stmt><expr><name pos:line="70" pos:column="3">mcode<pos:position pos:line="70" pos:column="8"/></name> <operator pos:line="70" pos:column="9">=<pos:position pos:line="70" pos:column="10"/></operator> <call><name pos:line="70" pos:column="11">curl_multi_cleanup<pos:position pos:line="70" pos:column="29"/></name><argument_list pos:line="70" pos:column="29">(<argument><expr><name pos:line="70" pos:column="30">multi<pos:position pos:line="70" pos:column="35"/></name></expr></argument>)<pos:position pos:line="70" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="37"/></expr_stmt>
  <comment type="block" pos:line="71" pos:column="3">/* what to do if it fails? */</comment>

  <return pos:line="73" pos:column="3">return <expr><name pos:line="73" pos:column="10">code<pos:position pos:line="73" pos:column="14"/></name></expr>;<pos:position pos:line="73" pos:column="15"/></return>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
