<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_function_13676.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">void<pos:position pos:line="1" pos:column="14"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="15"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURL<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">curl<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">res<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
  <comment type="block" pos:line="5" pos:column="3">/* Minimalistic http request */</comment>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">request<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><literal type="string" pos:line="6" pos:column="25">"GET / HTTP/1.0\r\nHost: example.com\r\n\r\n"<pos:position pos:line="6" pos:column="70"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="71"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">curl_socket_t<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">sockfd<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt> <comment type="block" pos:line="7" pos:column="25">/* socket */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">long<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">sockextr<pos:position pos:line="8" pos:column="16"/></name></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">iolen<pos:position pos:line="9" pos:column="15"/></name></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">curl_off_t<pos:position pos:line="10" pos:column="13"/></name></type> <name pos:line="10" pos:column="14">nread<pos:position pos:line="10" pos:column="19"/></name></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt>

  <comment type="block" pos:line="12" pos:column="3">/* A general note of caution here: if you're using curl_easy_recv() or
     curl_easy_send() to implement HTTP or _any_ other protocol libcurl
     supports "natively", you're doing it wrong and you should stop.

     This example uses HTTP only to show how to use this API, it does not
     suggest that writing an application doing this is sensible.
  */</comment>

  <expr_stmt><expr><name pos:line="20" pos:column="3">curl<pos:position pos:line="20" pos:column="7"/></name> <operator pos:line="20" pos:column="8">=<pos:position pos:line="20" pos:column="9"/></operator> <call><name pos:line="20" pos:column="10">curl_easy_init<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">()<pos:position pos:line="20" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt>
  <if pos:line="21" pos:column="3">if<condition pos:line="21" pos:column="5">(<expr><name pos:line="21" pos:column="6">curl<pos:position pos:line="21" pos:column="10"/></name></expr>)<pos:position pos:line="21" pos:column="11"/></condition><then pos:line="21" pos:column="11"> <block pos:line="21" pos:column="12">{
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">curl_easy_setopt<pos:position pos:line="22" pos:column="21"/></name><argument_list pos:line="22" pos:column="21">(<argument><expr><name pos:line="22" pos:column="22">curl<pos:position pos:line="22" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="28">CURLOPT_URL<pos:position pos:line="22" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="41">"http://example.com"<pos:position pos:line="22" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="63"/></expr_stmt>
    <comment type="block" pos:line="23" pos:column="5">/* Do not do the transfer - only connect to host */</comment>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">curl_easy_setopt<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">curl<pos:position pos:line="24" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="28">CURLOPT_CONNECT_ONLY<pos:position pos:line="24" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="50">1L<pos:position pos:line="24" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><name pos:line="25" pos:column="5">res<pos:position pos:line="25" pos:column="8"/></name> <operator pos:line="25" pos:column="9">=<pos:position pos:line="25" pos:column="10"/></operator> <call><name pos:line="25" pos:column="11">curl_easy_perform<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><name pos:line="25" pos:column="29">curl<pos:position pos:line="25" pos:column="33"/></name></expr></argument>)<pos:position pos:line="25" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt>

    <if pos:line="27" pos:column="5">if<condition pos:line="27" pos:column="7">(<expr><name pos:line="27" pos:column="8">CURLE_OK<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">!=<pos:position pos:line="27" pos:column="19"/></operator> <name pos:line="27" pos:column="20">res<pos:position pos:line="27" pos:column="23"/></name></expr>)<pos:position pos:line="27" pos:column="24"/></condition><then pos:line="27" pos:column="24"> <block pos:line="27" pos:column="25">{
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">printf<pos:position pos:line="28" pos:column="13"/></name><argument_list pos:line="28" pos:column="13">(<argument><expr><literal type="string" pos:line="28" pos:column="14">"Error: %s\n"<pos:position pos:line="28" pos:column="27"/></literal></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="29">strerror<pos:position pos:line="28" pos:column="37"/></name><argument_list pos:line="28" pos:column="37">(<argument><expr><name pos:line="28" pos:column="38">res<pos:position pos:line="28" pos:column="41"/></name></expr></argument>)<pos:position pos:line="28" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="44"/></expr_stmt>
      <return pos:line="29" pos:column="7">return <expr><literal type="number" pos:line="29" pos:column="14">1<pos:position pos:line="29" pos:column="15"/></literal></expr>;<pos:position pos:line="29" pos:column="16"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="32" pos:column="5">/* Extract the socket from the curl handle - we'll need it for waiting.
     * Note that this API takes a pointer to a 'long' while we use
     * curl_socket_t for sockets otherwise.
     */</comment>
    <expr_stmt><expr><name pos:line="36" pos:column="5">res<pos:position pos:line="36" pos:column="8"/></name> <operator pos:line="36" pos:column="9">=<pos:position pos:line="36" pos:column="10"/></operator> <call><name pos:line="36" pos:column="11">curl_easy_getinfo<pos:position pos:line="36" pos:column="28"/></name><argument_list pos:line="36" pos:column="28">(<argument><expr><name pos:line="36" pos:column="29">curl<pos:position pos:line="36" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="35">CURLINFO_LASTSOCKET<pos:position pos:line="36" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="56">&amp;<pos:position pos:line="36" pos:column="61"/></operator><name pos:line="36" pos:column="57">sockextr<pos:position pos:line="36" pos:column="65"/></name></expr></argument>)<pos:position pos:line="36" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="67"/></expr_stmt>

    <if pos:line="38" pos:column="5">if<condition pos:line="38" pos:column="7">(<expr><name pos:line="38" pos:column="8">CURLE_OK<pos:position pos:line="38" pos:column="16"/></name> <operator pos:line="38" pos:column="17">!=<pos:position pos:line="38" pos:column="19"/></operator> <name pos:line="38" pos:column="20">res<pos:position pos:line="38" pos:column="23"/></name></expr>)<pos:position pos:line="38" pos:column="24"/></condition><then pos:line="38" pos:column="24"> <block pos:line="38" pos:column="25">{
      <expr_stmt><expr><call><name pos:line="39" pos:column="7">printf<pos:position pos:line="39" pos:column="13"/></name><argument_list pos:line="39" pos:column="13">(<argument><expr><literal type="string" pos:line="39" pos:column="14">"Error: %s\n"<pos:position pos:line="39" pos:column="27"/></literal></expr></argument>, <argument><expr><call><name pos:line="39" pos:column="29">curl_easy_strerror<pos:position pos:line="39" pos:column="47"/></name><argument_list pos:line="39" pos:column="47">(<argument><expr><name pos:line="39" pos:column="48">res<pos:position pos:line="39" pos:column="51"/></name></expr></argument>)<pos:position pos:line="39" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="54"/></expr_stmt>
      <return pos:line="40" pos:column="7">return <expr><literal type="number" pos:line="40" pos:column="14">1<pos:position pos:line="40" pos:column="15"/></literal></expr>;<pos:position pos:line="40" pos:column="16"/></return>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="43" pos:column="5">sockfd<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <operator pos:line="43" pos:column="14">(<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="15">curl_socket_t<pos:position pos:line="43" pos:column="28"/></name><operator pos:line="43" pos:column="28">)<pos:position pos:line="43" pos:column="29"/></operator><name pos:line="43" pos:column="29">sockextr<pos:position pos:line="43" pos:column="37"/></name></expr>;<pos:position pos:line="43" pos:column="38"/></expr_stmt>

    <comment type="block" pos:line="45" pos:column="5">/* wait for the socket to become ready for sending */</comment>
    <if pos:line="46" pos:column="5">if<condition pos:line="46" pos:column="7">(<expr><operator pos:line="46" pos:column="8">!<pos:position pos:line="46" pos:column="9"/></operator><call><name pos:line="46" pos:column="9">wait_on_socket<pos:position pos:line="46" pos:column="23"/></name><argument_list pos:line="46" pos:column="23">(<argument><expr><name pos:line="46" pos:column="24">sockfd<pos:position pos:line="46" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="32">0<pos:position pos:line="46" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="35">60000L<pos:position pos:line="46" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="43"/></condition><then pos:line="46" pos:column="43"> <block pos:line="46" pos:column="44">{
      <expr_stmt><expr><call><name pos:line="47" pos:column="7">printf<pos:position pos:line="47" pos:column="13"/></name><argument_list pos:line="47" pos:column="13">(<argument><expr><literal type="string" pos:line="47" pos:column="14">"Error: timeout.\n"<pos:position pos:line="47" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="35"/></expr_stmt>
      <return pos:line="48" pos:column="7">return <expr><literal type="number" pos:line="48" pos:column="14">1<pos:position pos:line="48" pos:column="15"/></literal></expr>;<pos:position pos:line="48" pos:column="16"/></return>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="51" pos:column="5">puts<pos:position pos:line="51" pos:column="9"/></name><argument_list pos:line="51" pos:column="9">(<argument><expr><literal type="string" pos:line="51" pos:column="10">"Sending request."<pos:position pos:line="51" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="30"/></expr_stmt>
    <comment type="block" pos:line="52" pos:column="5">/* Send the request. Real applications should check the iolen
     * to see if all the request has been sent */</comment>
    <expr_stmt><expr><name pos:line="54" pos:column="5">res<pos:position pos:line="54" pos:column="8"/></name> <operator pos:line="54" pos:column="9">=<pos:position pos:line="54" pos:column="10"/></operator> <call><name pos:line="54" pos:column="11">curl_easy_send<pos:position pos:line="54" pos:column="25"/></name><argument_list pos:line="54" pos:column="25">(<argument><expr><name pos:line="54" pos:column="26">curl<pos:position pos:line="54" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="32">request<pos:position pos:line="54" pos:column="39"/></name></expr></argument>, <argument><expr><call><name pos:line="54" pos:column="41">strlen<pos:position pos:line="54" pos:column="47"/></name><argument_list pos:line="54" pos:column="47">(<argument><expr><name pos:line="54" pos:column="48">request<pos:position pos:line="54" pos:column="55"/></name></expr></argument>)<pos:position pos:line="54" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="54" pos:column="58">&amp;<pos:position pos:line="54" pos:column="63"/></operator><name pos:line="54" pos:column="59">iolen<pos:position pos:line="54" pos:column="64"/></name></expr></argument>)<pos:position pos:line="54" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="66"/></expr_stmt>

    <if pos:line="56" pos:column="5">if<condition pos:line="56" pos:column="7">(<expr><name pos:line="56" pos:column="8">CURLE_OK<pos:position pos:line="56" pos:column="16"/></name> <operator pos:line="56" pos:column="17">!=<pos:position pos:line="56" pos:column="19"/></operator> <name pos:line="56" pos:column="20">res<pos:position pos:line="56" pos:column="23"/></name></expr>)<pos:position pos:line="56" pos:column="24"/></condition><then pos:line="56" pos:column="24"> <block pos:line="56" pos:column="25">{
      <expr_stmt><expr><call><name pos:line="57" pos:column="7">printf<pos:position pos:line="57" pos:column="13"/></name><argument_list pos:line="57" pos:column="13">(<argument><expr><literal type="string" pos:line="57" pos:column="14">"Error: %s\n"<pos:position pos:line="57" pos:column="27"/></literal></expr></argument>, <argument><expr><call><name pos:line="57" pos:column="29">curl_easy_strerror<pos:position pos:line="57" pos:column="47"/></name><argument_list pos:line="57" pos:column="47">(<argument><expr><name pos:line="57" pos:column="48">res<pos:position pos:line="57" pos:column="51"/></name></expr></argument>)<pos:position pos:line="57" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="57" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="54"/></expr_stmt>
      <return pos:line="58" pos:column="7">return <expr><literal type="number" pos:line="58" pos:column="14">1<pos:position pos:line="58" pos:column="15"/></literal></expr>;<pos:position pos:line="58" pos:column="16"/></return>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="60" pos:column="5">puts<pos:position pos:line="60" pos:column="9"/></name><argument_list pos:line="60" pos:column="9">(<argument><expr><literal type="string" pos:line="60" pos:column="10">"Reading response."<pos:position pos:line="60" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="31"/></expr_stmt>

    <comment type="block" pos:line="62" pos:column="5">/* read the response */</comment>
    <for pos:line="63" pos:column="5">for<control pos:line="63" pos:column="8">(<init pos:line="63" pos:column="9">;<pos:position pos:line="63" pos:column="10"/></init><condition pos:line="63" pos:column="10">;<pos:position pos:line="63" pos:column="11"/></condition><incr/>)<pos:position pos:line="63" pos:column="12"/></control> <block pos:line="63" pos:column="13">{
      <decl_stmt><decl><type><name pos:line="64" pos:column="7">char<pos:position pos:line="64" pos:column="11"/></name></type> <name><name pos:line="64" pos:column="12">buf<pos:position pos:line="64" pos:column="15"/></name><index pos:line="64" pos:column="15">[<expr><literal type="number" pos:line="64" pos:column="16">1024<pos:position pos:line="64" pos:column="20"/></literal></expr>]<pos:position pos:line="64" pos:column="21"/></index></name></decl>;<pos:position pos:line="64" pos:column="22"/></decl_stmt>

      <expr_stmt><expr><call><name pos:line="66" pos:column="7">wait_on_socket<pos:position pos:line="66" pos:column="21"/></name><argument_list pos:line="66" pos:column="21">(<argument><expr><name pos:line="66" pos:column="22">sockfd<pos:position pos:line="66" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="30">1<pos:position pos:line="66" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="33">60000L<pos:position pos:line="66" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><name pos:line="67" pos:column="7">res<pos:position pos:line="67" pos:column="10"/></name> <operator pos:line="67" pos:column="11">=<pos:position pos:line="67" pos:column="12"/></operator> <call><name pos:line="67" pos:column="13">curl_easy_recv<pos:position pos:line="67" pos:column="27"/></name><argument_list pos:line="67" pos:column="27">(<argument><expr><name pos:line="67" pos:column="28">curl<pos:position pos:line="67" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="34">buf<pos:position pos:line="67" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="39">1024<pos:position pos:line="67" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="67" pos:column="45">&amp;<pos:position pos:line="67" pos:column="50"/></operator><name pos:line="67" pos:column="46">iolen<pos:position pos:line="67" pos:column="51"/></name></expr></argument>)<pos:position pos:line="67" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="53"/></expr_stmt>

      <if pos:line="69" pos:column="7">if<condition pos:line="69" pos:column="9">(<expr><name pos:line="69" pos:column="10">CURLE_OK<pos:position pos:line="69" pos:column="18"/></name> <operator pos:line="69" pos:column="19">!=<pos:position pos:line="69" pos:column="21"/></operator> <name pos:line="69" pos:column="22">res<pos:position pos:line="69" pos:column="25"/></name></expr>)<pos:position pos:line="69" pos:column="26"/></condition><then pos:line="69" pos:column="26">
        <block type="pseudo"><break pos:line="70" pos:column="9">break;<pos:position pos:line="70" pos:column="15"/></break></block></then></if>

      <expr_stmt><expr><name pos:line="72" pos:column="7">nread<pos:position pos:line="72" pos:column="12"/></name> <operator pos:line="72" pos:column="13">=<pos:position pos:line="72" pos:column="14"/></operator> <operator pos:line="72" pos:column="15">(<pos:position pos:line="72" pos:column="16"/></operator><name pos:line="72" pos:column="16">curl_off_t<pos:position pos:line="72" pos:column="26"/></name><operator pos:line="72" pos:column="26">)<pos:position pos:line="72" pos:column="27"/></operator><name pos:line="72" pos:column="27">iolen<pos:position pos:line="72" pos:column="32"/></name></expr>;<pos:position pos:line="72" pos:column="33"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="74" pos:column="7">printf<pos:position pos:line="74" pos:column="13"/></name><argument_list pos:line="74" pos:column="13">(<argument><expr><literal type="string" pos:line="74" pos:column="14">"Received %"<pos:position pos:line="74" pos:column="26"/></literal> <name pos:line="74" pos:column="27">CURL_FORMAT_CURL_OFF_T<pos:position pos:line="74" pos:column="49"/></name> <literal type="string" pos:line="74" pos:column="50">" bytes.\n"<pos:position pos:line="74" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="63">nread<pos:position pos:line="74" pos:column="68"/></name></expr></argument>)<pos:position pos:line="74" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="70"/></expr_stmt>
    }<pos:position pos:line="75" pos:column="6"/></block></for>

    <comment type="block" pos:line="77" pos:column="5">/* always cleanup */</comment>
    <expr_stmt><expr><call><name pos:line="78" pos:column="5">curl_easy_cleanup<pos:position pos:line="78" pos:column="22"/></name><argument_list pos:line="78" pos:column="22">(<argument><expr><name pos:line="78" pos:column="23">curl<pos:position pos:line="78" pos:column="27"/></name></expr></argument>)<pos:position pos:line="78" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="79" pos:column="4"/></block></then></if>
  <return pos:line="80" pos:column="3">return <expr><literal type="number" pos:line="80" pos:column="10">0<pos:position pos:line="80" pos:column="11"/></literal></expr>;<pos:position pos:line="80" pos:column="12"/></return>
}<pos:position pos:line="81" pos:column="2"/></block></function></unit>
