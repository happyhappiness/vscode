<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_585_curl-7.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">Curl_sec_read<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name><name pos:line="2" pos:column="15">struct<pos:position pos:line="2" pos:column="21"/></name> <name pos:line="2" pos:column="22">connectdata<pos:position pos:line="2" pos:column="33"/></name></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">conn<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">int<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">fd<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">void<pos:position pos:line="2" pos:column="53"/></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">buffer<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="63">int<pos:position pos:line="2" pos:column="66"/></name></type> <name pos:line="2" pos:column="67">length<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="74"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">size_t<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">len<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">rx<pos:position pos:line="5" pos:column="11"/></name> <init pos:line="5" pos:column="12">= <expr><literal type="number" pos:line="5" pos:column="14">0<pos:position pos:line="5" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>

    <if pos:line="7" pos:column="5">if<condition pos:line="7" pos:column="7">(<expr><name><name pos:line="7" pos:column="8">conn<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">-&gt;<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="14">sec_complete<pos:position pos:line="7" pos:column="26"/></name></name> <operator pos:line="7" pos:column="27">==<pos:position pos:line="7" pos:column="29"/></operator> <literal type="number" pos:line="7" pos:column="30">0<pos:position pos:line="7" pos:column="31"/></literal> <operator pos:line="7" pos:column="32">||<pos:position pos:line="7" pos:column="34"/></operator> <name><name pos:line="7" pos:column="35">conn<pos:position pos:line="7" pos:column="39"/></name><operator pos:line="7" pos:column="39">-&gt;<pos:position pos:line="7" pos:column="44"/></operator><name pos:line="7" pos:column="41">data_prot<pos:position pos:line="7" pos:column="50"/></name></name> <operator pos:line="7" pos:column="51">==<pos:position pos:line="7" pos:column="53"/></operator> <literal type="number" pos:line="7" pos:column="54">0<pos:position pos:line="7" pos:column="55"/></literal></expr>)<pos:position pos:line="7" pos:column="56"/></condition><then pos:line="7" pos:column="56">
      <block type="pseudo"><return pos:line="8" pos:column="7">return <expr><call><name pos:line="8" pos:column="14">read<pos:position pos:line="8" pos:column="18"/></name><argument_list pos:line="8" pos:column="18">(<argument><expr><name pos:line="8" pos:column="19">fd<pos:position pos:line="8" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="23">buffer<pos:position pos:line="8" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="31">length<pos:position pos:line="8" pos:column="37"/></name></expr></argument>)<pos:position pos:line="8" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="39"/></return></block></then></if>

    <if pos:line="10" pos:column="5">if<condition pos:line="10" pos:column="7">(<expr><name><name pos:line="10" pos:column="8">conn<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">-&gt;<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="14">in_buffer<pos:position pos:line="10" pos:column="23"/></name><operator pos:line="10" pos:column="23">.<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="24">eof_flag<pos:position pos:line="10" pos:column="32"/></name></name></expr>)<pos:position pos:line="10" pos:column="33"/></condition><then><block pos:line="10" pos:column="33">{
      <expr_stmt><expr><name><name pos:line="11" pos:column="7">conn<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">-&gt;<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="13">in_buffer<pos:position pos:line="11" pos:column="22"/></name><operator pos:line="11" pos:column="22">.<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="23">eof_flag<pos:position pos:line="11" pos:column="31"/></name></name> <operator pos:line="11" pos:column="32">=<pos:position pos:line="11" pos:column="33"/></operator> <literal type="number" pos:line="11" pos:column="34">0<pos:position pos:line="11" pos:column="35"/></literal></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>
      <return pos:line="12" pos:column="7">return <expr><literal type="number" pos:line="12" pos:column="14">0<pos:position pos:line="12" pos:column="15"/></literal></expr>;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="15" pos:column="5">len<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <call><name pos:line="15" pos:column="11">buffer_read<pos:position pos:line="15" pos:column="22"/></name><argument_list pos:line="15" pos:column="22">(<argument><expr><operator pos:line="15" pos:column="23">&amp;<pos:position pos:line="15" pos:column="28"/></operator><name><name pos:line="15" pos:column="24">conn<pos:position pos:line="15" pos:column="28"/></name><operator pos:line="15" pos:column="28">-&gt;<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="30">in_buffer<pos:position pos:line="15" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="41">buffer<pos:position pos:line="15" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="49">length<pos:position pos:line="15" pos:column="55"/></name></expr></argument>)<pos:position pos:line="15" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">length<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">-=<pos:position pos:line="16" pos:column="14"/></operator> <name pos:line="16" pos:column="15">len<pos:position pos:line="16" pos:column="18"/></name></expr>;<pos:position pos:line="16" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">rx<pos:position pos:line="17" pos:column="7"/></name> <operator pos:line="17" pos:column="8">+=<pos:position pos:line="17" pos:column="10"/></operator> <name pos:line="17" pos:column="11">len<pos:position pos:line="17" pos:column="14"/></name></expr>;<pos:position pos:line="17" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">buffer<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <operator pos:line="18" pos:column="14">(<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">char<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">*<pos:position pos:line="18" pos:column="20"/></operator><operator pos:line="18" pos:column="20">)<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="21">buffer<pos:position pos:line="18" pos:column="27"/></name> <operator pos:line="18" pos:column="28">+<pos:position pos:line="18" pos:column="29"/></operator> <name pos:line="18" pos:column="30">len<pos:position pos:line="18" pos:column="33"/></name></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt>

    <while pos:line="20" pos:column="5">while<condition pos:line="20" pos:column="10">(<expr><name pos:line="20" pos:column="11">length<pos:position pos:line="20" pos:column="17"/></name></expr>)<pos:position pos:line="20" pos:column="18"/></condition> <block pos:line="20" pos:column="19">{
      <if pos:line="21" pos:column="7">if<condition pos:line="21" pos:column="9">(<expr><call><name pos:line="21" pos:column="10">sec_get_data<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">conn<pos:position pos:line="21" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="29">fd<pos:position pos:line="21" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="33">&amp;<pos:position pos:line="21" pos:column="38"/></operator><name><name pos:line="21" pos:column="34">conn<pos:position pos:line="21" pos:column="38"/></name><operator pos:line="21" pos:column="38">-&gt;<pos:position pos:line="21" pos:column="43"/></operator><name pos:line="21" pos:column="40">in_buffer<pos:position pos:line="21" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call> <operator pos:line="21" pos:column="51">&lt;<pos:position pos:line="21" pos:column="55"/></operator> <literal type="number" pos:line="21" pos:column="53">0<pos:position pos:line="21" pos:column="54"/></literal></expr>)<pos:position pos:line="21" pos:column="55"/></condition><then pos:line="21" pos:column="55">
        <block type="pseudo"><return pos:line="22" pos:column="9">return <expr><operator pos:line="22" pos:column="16">-<pos:position pos:line="22" pos:column="17"/></operator><literal type="number" pos:line="22" pos:column="17">1<pos:position pos:line="22" pos:column="18"/></literal></expr>;<pos:position pos:line="22" pos:column="19"/></return></block></then></if>
      <if pos:line="23" pos:column="7">if<condition pos:line="23" pos:column="9">(<expr><name><name pos:line="23" pos:column="10">conn<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">-&gt;<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="16">in_buffer<pos:position pos:line="23" pos:column="25"/></name><operator pos:line="23" pos:column="25">.<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="26">size<pos:position pos:line="23" pos:column="30"/></name></name> <operator pos:line="23" pos:column="31">==<pos:position pos:line="23" pos:column="33"/></operator> <literal type="number" pos:line="23" pos:column="34">0<pos:position pos:line="23" pos:column="35"/></literal></expr>)<pos:position pos:line="23" pos:column="36"/></condition><then pos:line="23" pos:column="36"> <block pos:line="23" pos:column="37">{
        <if pos:line="24" pos:column="9">if<condition pos:line="24" pos:column="11">(<expr><name pos:line="24" pos:column="12">rx<pos:position pos:line="24" pos:column="14"/></name></expr>)<pos:position pos:line="24" pos:column="15"/></condition><then pos:line="24" pos:column="15">
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="25" pos:column="11">conn<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">-&gt;<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="17">in_buffer<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">.<pos:position pos:line="25" pos:column="27"/></operator><name pos:line="25" pos:column="27">eof_flag<pos:position pos:line="25" pos:column="35"/></name></name> <operator pos:line="25" pos:column="36">=<pos:position pos:line="25" pos:column="37"/></operator> <literal type="number" pos:line="25" pos:column="38">1<pos:position pos:line="25" pos:column="39"/></literal></expr>;<pos:position pos:line="25" pos:column="40"/></expr_stmt></block></then></if>
        <return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">rx<pos:position pos:line="26" pos:column="18"/></name></expr>;<pos:position pos:line="26" pos:column="19"/></return>
      }<pos:position pos:line="27" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="28" pos:column="7">len<pos:position pos:line="28" pos:column="10"/></name> <operator pos:line="28" pos:column="11">=<pos:position pos:line="28" pos:column="12"/></operator> <call><name pos:line="28" pos:column="13">buffer_read<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><operator pos:line="28" pos:column="25">&amp;<pos:position pos:line="28" pos:column="30"/></operator><name><name pos:line="28" pos:column="26">conn<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">-&gt;<pos:position pos:line="28" pos:column="35"/></operator><name pos:line="28" pos:column="32">in_buffer<pos:position pos:line="28" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="43">buffer<pos:position pos:line="28" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="51">length<pos:position pos:line="28" pos:column="57"/></name></expr></argument>)<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="59"/></expr_stmt>
      <expr_stmt><expr><name pos:line="29" pos:column="7">length<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">-=<pos:position pos:line="29" pos:column="16"/></operator> <name pos:line="29" pos:column="17">len<pos:position pos:line="29" pos:column="20"/></name></expr>;<pos:position pos:line="29" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><name pos:line="30" pos:column="7">rx<pos:position pos:line="30" pos:column="9"/></name> <operator pos:line="30" pos:column="10">+=<pos:position pos:line="30" pos:column="12"/></operator> <name pos:line="30" pos:column="13">len<pos:position pos:line="30" pos:column="16"/></name></expr>;<pos:position pos:line="30" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><name pos:line="31" pos:column="7">buffer<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">=<pos:position pos:line="31" pos:column="15"/></operator> <operator pos:line="31" pos:column="16">(<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="17">char<pos:position pos:line="31" pos:column="21"/></name><operator pos:line="31" pos:column="21">*<pos:position pos:line="31" pos:column="22"/></operator><operator pos:line="31" pos:column="22">)<pos:position pos:line="31" pos:column="23"/></operator><name pos:line="31" pos:column="23">buffer<pos:position pos:line="31" pos:column="29"/></name> <operator pos:line="31" pos:column="30">+<pos:position pos:line="31" pos:column="31"/></operator> <name pos:line="31" pos:column="32">len<pos:position pos:line="31" pos:column="35"/></name></expr>;<pos:position pos:line="31" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></while>
    <return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">rx<pos:position pos:line="33" pos:column="14"/></name></expr>;<pos:position pos:line="33" pos:column="15"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
