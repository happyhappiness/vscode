<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_989_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">getpass_r<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><specifier pos:line="1" pos:column="17">const<pos:position pos:line="1" pos:column="22"/></specifier> <name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">prompt<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">buffer<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">size_t<pos:position pos:line="1" pos:column="57"/></name></type> <name pos:line="1" pos:column="58">buflen<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">i<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="4" pos:column="3">fputs<pos:position pos:line="4" pos:column="8"/></name><argument_list pos:line="4" pos:column="8">(<argument><expr><name pos:line="4" pos:column="9">prompt<pos:position pos:line="4" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="17">stderr<pos:position pos:line="4" pos:column="23"/></name></expr></argument>)<pos:position pos:line="4" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="25"/></expr_stmt>

  <for pos:line="6" pos:column="3">for<control pos:line="6" pos:column="6">(<init><expr><name pos:line="6" pos:column="7">i<pos:position pos:line="6" pos:column="8"/></name> <operator pos:line="6" pos:column="9">=<pos:position pos:line="6" pos:column="10"/></operator> <literal type="number" pos:line="6" pos:column="11">0<pos:position pos:line="6" pos:column="12"/></literal></expr>;<pos:position pos:line="6" pos:column="13"/></init> <condition><expr><name pos:line="6" pos:column="14">i<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">&lt;<pos:position pos:line="6" pos:column="20"/></operator> <name pos:line="6" pos:column="18">buflen<pos:position pos:line="6" pos:column="24"/></name></expr>;<pos:position pos:line="6" pos:column="25"/></condition> <incr><expr><name pos:line="6" pos:column="26">i<pos:position pos:line="6" pos:column="27"/></name><operator pos:line="6" pos:column="27">++<pos:position pos:line="6" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="6" pos:column="30"/></control> <block pos:line="6" pos:column="31">{
    <expr_stmt><expr><name><name pos:line="7" pos:column="5">buffer<pos:position pos:line="7" pos:column="11"/></name><index pos:line="7" pos:column="11">[<expr><name pos:line="7" pos:column="12">i<pos:position pos:line="7" pos:column="13"/></name></expr>]<pos:position pos:line="7" pos:column="14"/></index></name> <operator pos:line="7" pos:column="15">=<pos:position pos:line="7" pos:column="16"/></operator> <operator pos:line="7" pos:column="17">(<pos:position pos:line="7" pos:column="18"/></operator><name pos:line="7" pos:column="18">char<pos:position pos:line="7" pos:column="22"/></name><operator pos:line="7" pos:column="22">)<pos:position pos:line="7" pos:column="23"/></operator><call><name pos:line="7" pos:column="23">getch<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">()<pos:position pos:line="7" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="31"/></expr_stmt>
    <if pos:line="8" pos:column="5">if<condition pos:line="8" pos:column="7">(<expr><name><name pos:line="8" pos:column="8">buffer<pos:position pos:line="8" pos:column="14"/></name><index pos:line="8" pos:column="14">[<expr><name pos:line="8" pos:column="15">i<pos:position pos:line="8" pos:column="16"/></name></expr>]<pos:position pos:line="8" pos:column="17"/></index></name> <operator pos:line="8" pos:column="18">==<pos:position pos:line="8" pos:column="20"/></operator> <literal type="char" pos:line="8" pos:column="21">'\r'<pos:position pos:line="8" pos:column="25"/></literal> <operator pos:line="8" pos:column="26">||<pos:position pos:line="8" pos:column="28"/></operator> <name><name pos:line="8" pos:column="29">buffer<pos:position pos:line="8" pos:column="35"/></name><index pos:line="8" pos:column="35">[<expr><name pos:line="8" pos:column="36">i<pos:position pos:line="8" pos:column="37"/></name></expr>]<pos:position pos:line="8" pos:column="38"/></index></name> <operator pos:line="8" pos:column="39">==<pos:position pos:line="8" pos:column="41"/></operator> <literal type="char" pos:line="8" pos:column="42">'\n'<pos:position pos:line="8" pos:column="46"/></literal></expr>)<pos:position pos:line="8" pos:column="47"/></condition><then pos:line="8" pos:column="47"> <block pos:line="8" pos:column="48">{
      <expr_stmt><expr><name><name pos:line="9" pos:column="7">buffer<pos:position pos:line="9" pos:column="13"/></name><index pos:line="9" pos:column="13">[<expr><name pos:line="9" pos:column="14">i<pos:position pos:line="9" pos:column="15"/></name></expr>]<pos:position pos:line="9" pos:column="16"/></index></name> <operator pos:line="9" pos:column="17">=<pos:position pos:line="9" pos:column="18"/></operator> <literal type="char" pos:line="9" pos:column="19">'\0'<pos:position pos:line="9" pos:column="23"/></literal></expr>;<pos:position pos:line="9" pos:column="24"/></expr_stmt>
      <break pos:line="10" pos:column="7">break;<pos:position pos:line="10" pos:column="13"/></break>
    }<pos:position pos:line="11" pos:column="6"/></block></then>
    <elseif pos:line="12" pos:column="5">else
      <if pos:line="13" pos:column="7">if<condition pos:line="13" pos:column="9">(<expr><name><name pos:line="13" pos:column="10">buffer<pos:position pos:line="13" pos:column="16"/></name><index pos:line="13" pos:column="16">[<expr><name pos:line="13" pos:column="17">i<pos:position pos:line="13" pos:column="18"/></name></expr>]<pos:position pos:line="13" pos:column="19"/></index></name> <operator pos:line="13" pos:column="20">==<pos:position pos:line="13" pos:column="22"/></operator> <literal type="char" pos:line="13" pos:column="23">'\b'<pos:position pos:line="13" pos:column="27"/></literal></expr>)<pos:position pos:line="13" pos:column="28"/></condition><then pos:line="13" pos:column="28">
        <comment type="block" pos:line="14" pos:column="9">/* remove this letter and if this is not the first key, remove the
           previous one as well */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="9">i<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">=<pos:position pos:line="16" pos:column="12"/></operator> <name pos:line="16" pos:column="13">i<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">-<pos:position pos:line="16" pos:column="16"/></operator> <operator pos:line="16" pos:column="17">(<pos:position pos:line="16" pos:column="18"/></operator><ternary><condition><expr><name pos:line="16" pos:column="18">i<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">&gt;=<pos:position pos:line="16" pos:column="25"/></operator> <literal type="number" pos:line="16" pos:column="23">1<pos:position pos:line="16" pos:column="24"/></literal></expr> ?<pos:position pos:line="16" pos:column="26"/></condition><then pos:line="16" pos:column="26"> <expr><literal type="number" pos:line="16" pos:column="27">2<pos:position pos:line="16" pos:column="28"/></literal></expr> <pos:position pos:line="16" pos:column="29"/></then><else pos:line="16" pos:column="29">: <expr><literal type="number" pos:line="16" pos:column="31">1<pos:position pos:line="16" pos:column="32"/></literal></expr></else></ternary><operator pos:line="16" pos:column="32">)<pos:position pos:line="16" pos:column="33"/></operator></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt></block></then></if></elseif></if>
  }<pos:position pos:line="17" pos:column="4"/></block></for>
<cpp:ifndef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifndef<pos:position pos:line="18" pos:column="8"/></cpp:directive> <name pos:line="18" pos:column="9">__SYMBIAN32__<pos:position pos:line="18" pos:column="22"/></name></cpp:ifndef>
  <comment type="block" pos:line="19" pos:column="3">/* since echo is disabled, print a newline */</comment>
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">fputs<pos:position pos:line="20" pos:column="8"/></name><argument_list pos:line="20" pos:column="8">(<argument><expr><literal type="string" pos:line="20" pos:column="9">"\n"<pos:position pos:line="20" pos:column="13"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="15">stderr<pos:position pos:line="20" pos:column="21"/></name></expr></argument>)<pos:position pos:line="20" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="23"/></expr_stmt>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>
  <comment type="block" pos:line="22" pos:column="3">/* if user didn't hit ENTER, terminate buffer */</comment>
  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><name pos:line="23" pos:column="6">i<pos:position pos:line="23" pos:column="7"/></name> <operator pos:line="23" pos:column="8">==<pos:position pos:line="23" pos:column="10"/></operator> <name pos:line="23" pos:column="11">buflen<pos:position pos:line="23" pos:column="17"/></name></expr>)<pos:position pos:line="23" pos:column="18"/></condition><then pos:line="23" pos:column="18">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="24" pos:column="5">buffer<pos:position pos:line="24" pos:column="11"/></name><index pos:line="24" pos:column="11">[<expr><name pos:line="24" pos:column="12">buflen<pos:position pos:line="24" pos:column="18"/></name><operator pos:line="24" pos:column="18">-<pos:position pos:line="24" pos:column="19"/></operator><literal type="number" pos:line="24" pos:column="19">1<pos:position pos:line="24" pos:column="20"/></literal></expr>]<pos:position pos:line="24" pos:column="21"/></index></name> <operator pos:line="24" pos:column="22">=<pos:position pos:line="24" pos:column="23"/></operator> <literal type="char" pos:line="24" pos:column="24">'\0'<pos:position pos:line="24" pos:column="28"/></literal></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt></block></then></if>

  <return pos:line="26" pos:column="3">return <expr><name pos:line="26" pos:column="10">buffer<pos:position pos:line="26" pos:column="16"/></name></expr>;<pos:position pos:line="26" pos:column="17"/></return> <comment type="block" pos:line="26" pos:column="18">/* we always return success */</comment>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
