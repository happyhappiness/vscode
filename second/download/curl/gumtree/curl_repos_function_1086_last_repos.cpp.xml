<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1086_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">curl_pushheader_byname<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">curl_pushheaders<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">h<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="58">const<pos:position pos:line="1" pos:column="63"/></specifier> <name pos:line="1" pos:column="64">char<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">header<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <comment type="block" pos:line="3" pos:column="3">/* Verify that we got a good easy handle in the push header struct,
     mostly to detect rubbish input fast(er). Also empty header name
     is just a rubbish too. We have to allow ":" at the beginning of
     the header, but header == ":" must be rejected. If we have ':' in
     the middle of header, it could be matched in middle of the value,
     this is because we do prefix match.*/</comment>
  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><operator pos:line="9" pos:column="6">!<pos:position pos:line="9" pos:column="7"/></operator><name pos:line="9" pos:column="7">h<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">||<pos:position pos:line="9" pos:column="11"/></operator> <operator pos:line="9" pos:column="12">!<pos:position pos:line="9" pos:column="13"/></operator><call><name pos:line="9" pos:column="13">GOOD_EASY_HANDLE<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><name><name pos:line="9" pos:column="30">h<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">-&gt;<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="33">data<pos:position pos:line="9" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call> <operator pos:line="9" pos:column="39">||<pos:position pos:line="9" pos:column="41"/></operator> <operator pos:line="9" pos:column="42">!<pos:position pos:line="9" pos:column="43"/></operator><name pos:line="9" pos:column="43">header<pos:position pos:line="9" pos:column="49"/></name> <operator pos:line="9" pos:column="50">||<pos:position pos:line="9" pos:column="52"/></operator> <operator pos:line="9" pos:column="53">!<pos:position pos:line="9" pos:column="54"/></operator><name><name pos:line="9" pos:column="54">header<pos:position pos:line="9" pos:column="60"/></name><index pos:line="9" pos:column="60">[<expr><literal type="number" pos:line="9" pos:column="61">0<pos:position pos:line="9" pos:column="62"/></literal></expr>]<pos:position pos:line="9" pos:column="63"/></index></name> <operator pos:line="9" pos:column="64">||<pos:position pos:line="9" pos:column="66"/></operator>
     <operator pos:line="10" pos:column="6">!<pos:position pos:line="10" pos:column="7"/></operator><call><name pos:line="10" pos:column="7">strcmp<pos:position pos:line="10" pos:column="13"/></name><argument_list pos:line="10" pos:column="13">(<argument><expr><name pos:line="10" pos:column="14">header<pos:position pos:line="10" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="22">":"<pos:position pos:line="10" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="26"/></argument_list></call> <operator pos:line="10" pos:column="27">||<pos:position pos:line="10" pos:column="29"/></operator> <call><name pos:line="10" pos:column="30">strchr<pos:position pos:line="10" pos:column="36"/></name><argument_list pos:line="10" pos:column="36">(<argument><expr><name pos:line="10" pos:column="37">header<pos:position pos:line="10" pos:column="43"/></name> <operator pos:line="10" pos:column="44">+<pos:position pos:line="10" pos:column="45"/></operator> <literal type="number" pos:line="10" pos:column="46">1<pos:position pos:line="10" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="10" pos:column="49">':'<pos:position pos:line="10" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="54"/></condition><then pos:line="10" pos:column="54">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">NULL<pos:position pos:line="11" pos:column="16"/></name></expr>;<pos:position pos:line="11" pos:column="17"/></return></block></then>
  <else pos:line="12" pos:column="3">else <block pos:line="12" pos:column="8">{
    <decl_stmt><decl><type><name><name pos:line="13" pos:column="5">struct<pos:position pos:line="13" pos:column="11"/></name> <name pos:line="13" pos:column="12">HTTP<pos:position pos:line="13" pos:column="16"/></name></name> <modifier pos:line="13" pos:column="17">*<pos:position pos:line="13" pos:column="18"/></modifier></type><name pos:line="13" pos:column="18">stream<pos:position pos:line="13" pos:column="24"/></name> <init pos:line="13" pos:column="25">= <expr><name><name pos:line="13" pos:column="27">h<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">-&gt;<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="30">data<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">-&gt;<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="36">req<pos:position pos:line="13" pos:column="39"/></name><operator pos:line="13" pos:column="39">.<pos:position pos:line="13" pos:column="40"/></operator><name pos:line="13" pos:column="40">protop<pos:position pos:line="13" pos:column="46"/></name></name></expr></init></decl>;<pos:position pos:line="13" pos:column="47"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">size_t<pos:position pos:line="14" pos:column="11"/></name></type> <name pos:line="14" pos:column="12">len<pos:position pos:line="14" pos:column="15"/></name> <init pos:line="14" pos:column="16">= <expr><call><name pos:line="14" pos:column="18">strlen<pos:position pos:line="14" pos:column="24"/></name><argument_list pos:line="14" pos:column="24">(<argument><expr><name pos:line="14" pos:column="25">header<pos:position pos:line="14" pos:column="31"/></name></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">size_t<pos:position pos:line="15" pos:column="11"/></name></type> <name pos:line="15" pos:column="12">i<pos:position pos:line="15" pos:column="13"/></name></decl>;<pos:position pos:line="15" pos:column="14"/></decl_stmt>
    <for pos:line="16" pos:column="5">for<control pos:line="16" pos:column="8">(<init><expr><name pos:line="16" pos:column="9">i<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">=<pos:position pos:line="16" pos:column="12"/></operator> <literal type="number" pos:line="16" pos:column="13">0<pos:position pos:line="16" pos:column="14"/></literal></expr>;<pos:position pos:line="16" pos:column="15"/></init> <condition><expr><name pos:line="16" pos:column="16">i<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">&lt;<pos:position pos:line="16" pos:column="21"/></operator><name><name pos:line="16" pos:column="18">stream<pos:position pos:line="16" pos:column="24"/></name><operator pos:line="16" pos:column="24">-&gt;<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="26">push_headers_used<pos:position pos:line="16" pos:column="43"/></name></name></expr>;<pos:position pos:line="16" pos:column="44"/></condition> <incr><expr><name pos:line="16" pos:column="45">i<pos:position pos:line="16" pos:column="46"/></name><operator pos:line="16" pos:column="46">++<pos:position pos:line="16" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="16" pos:column="49"/></control> <block pos:line="16" pos:column="50">{
      <if pos:line="17" pos:column="7">if<condition pos:line="17" pos:column="9">(<expr><operator pos:line="17" pos:column="10">!<pos:position pos:line="17" pos:column="11"/></operator><call><name pos:line="17" pos:column="11">strncmp<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(<argument><expr><name pos:line="17" pos:column="19">header<pos:position pos:line="17" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="27">stream<pos:position pos:line="17" pos:column="33"/></name><operator pos:line="17" pos:column="33">-&gt;<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="35">push_headers<pos:position pos:line="17" pos:column="47"/></name><index pos:line="17" pos:column="47">[<expr><name pos:line="17" pos:column="48">i<pos:position pos:line="17" pos:column="49"/></name></expr>]<pos:position pos:line="17" pos:column="50"/></index></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="52">len<pos:position pos:line="17" pos:column="55"/></name></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="57"/></condition><then pos:line="17" pos:column="57"> <block pos:line="17" pos:column="58">{
        <comment type="block" pos:line="18" pos:column="9">/* sub-match, make sure that it is followed by a colon */</comment>
        <if pos:line="19" pos:column="9">if<condition pos:line="19" pos:column="11">(<expr><name><name pos:line="19" pos:column="12">stream<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">-&gt;<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="20">push_headers<pos:position pos:line="19" pos:column="32"/></name><index pos:line="19" pos:column="32">[<expr><name pos:line="19" pos:column="33">i<pos:position pos:line="19" pos:column="34"/></name></expr>]<pos:position pos:line="19" pos:column="35"/></index><index pos:line="19" pos:column="35">[<expr><name pos:line="19" pos:column="36">len<pos:position pos:line="19" pos:column="39"/></name></expr>]<pos:position pos:line="19" pos:column="40"/></index></name> <operator pos:line="19" pos:column="41">!=<pos:position pos:line="19" pos:column="43"/></operator> <literal type="char" pos:line="19" pos:column="44">':'<pos:position pos:line="19" pos:column="47"/></literal></expr>)<pos:position pos:line="19" pos:column="48"/></condition><then pos:line="19" pos:column="48">
          <block type="pseudo"><continue pos:line="20" pos:column="11">continue;<pos:position pos:line="20" pos:column="20"/></continue></block></then></if>
        <return pos:line="21" pos:column="9">return <expr><operator pos:line="21" pos:column="16">&amp;<pos:position pos:line="21" pos:column="21"/></operator><name><name pos:line="21" pos:column="17">stream<pos:position pos:line="21" pos:column="23"/></name><operator pos:line="21" pos:column="23">-&gt;<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="25">push_headers<pos:position pos:line="21" pos:column="37"/></name><index pos:line="21" pos:column="37">[<expr><name pos:line="21" pos:column="38">i<pos:position pos:line="21" pos:column="39"/></name></expr>]<pos:position pos:line="21" pos:column="40"/></index><index pos:line="21" pos:column="40">[<expr><name pos:line="21" pos:column="41">len<pos:position pos:line="21" pos:column="44"/></name> <operator pos:line="21" pos:column="45">+<pos:position pos:line="21" pos:column="46"/></operator> <literal type="number" pos:line="21" pos:column="47">1<pos:position pos:line="21" pos:column="48"/></literal></expr>]<pos:position pos:line="21" pos:column="49"/></index></name></expr>;<pos:position pos:line="21" pos:column="50"/></return>
      }<pos:position pos:line="22" pos:column="8"/></block></then></if>
    }<pos:position pos:line="23" pos:column="6"/></block></for>
  }<pos:position pos:line="24" pos:column="4"/></block></else></if>
  <return pos:line="25" pos:column="3">return <expr><name pos:line="25" pos:column="10">NULL<pos:position pos:line="25" pos:column="14"/></name></expr>;<pos:position pos:line="25" pos:column="15"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
