<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_286_curl-7.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">ssize_t<pos:position pos:line="1" pos:column="8"/></name></type> <name pos:line="1" pos:column="9">Curl_ossl_recv<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">connectdata<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">conn<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="50">/* connection data */</comment>
                       <parameter><decl><type><name pos:line="2" pos:column="24">int<pos:position pos:line="2" pos:column="27"/></name></type> <name pos:line="2" pos:column="28">num<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>,                  <comment type="block" pos:line="2" pos:column="50">/* socketindex */</comment>
                       <parameter><decl><type><name pos:line="3" pos:column="24">char<pos:position pos:line="3" pos:column="28"/></name> <modifier pos:line="3" pos:column="29">*<pos:position pos:line="3" pos:column="30"/></modifier></type><name pos:line="3" pos:column="30">buf<pos:position pos:line="3" pos:column="33"/></name></decl></parameter>,                <comment type="block" pos:line="3" pos:column="50">/* store read data here */</comment>
                       <parameter><decl><type><name pos:line="4" pos:column="24">size_t<pos:position pos:line="4" pos:column="30"/></name></type> <name pos:line="4" pos:column="31">buffersize<pos:position pos:line="4" pos:column="41"/></name></decl></parameter>,        <comment type="block" pos:line="4" pos:column="50">/* max amount to read */</comment>
                       <parameter><decl><type><name pos:line="5" pos:column="24">bool<pos:position pos:line="5" pos:column="28"/></name> <modifier pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="30">wouldblock<pos:position pos:line="5" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="41"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">error_buffer<pos:position pos:line="7" pos:column="20"/></name><index pos:line="7" pos:column="20">[<expr><literal type="number" pos:line="7" pos:column="21">120<pos:position pos:line="7" pos:column="24"/></literal></expr>]<pos:position pos:line="7" pos:column="25"/></index></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt> <comment type="block" pos:line="7" pos:column="27">/* OpenSSL documents that this must be at
                             least 120 bytes long. */</comment>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">unsigned<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">long<pos:position pos:line="9" pos:column="16"/></name></type> <name pos:line="9" pos:column="17">sslerror<pos:position pos:line="9" pos:column="25"/></name></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">ssize_t<pos:position pos:line="10" pos:column="10"/></name></type> <name pos:line="10" pos:column="11">nread<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><operator pos:line="10" pos:column="19">(<pos:position pos:line="10" pos:column="20"/></operator><name pos:line="10" pos:column="20">ssize_t<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">)<pos:position pos:line="10" pos:column="28"/></operator><call><name pos:line="10" pos:column="28">SSL_read<pos:position pos:line="10" pos:column="36"/></name><argument_list pos:line="10" pos:column="36">(<argument><expr><name><name pos:line="10" pos:column="37">conn<pos:position pos:line="10" pos:column="41"/></name><operator pos:line="10" pos:column="41">-&gt;<pos:position pos:line="10" pos:column="46"/></operator><name pos:line="10" pos:column="43">ssl<pos:position pos:line="10" pos:column="46"/></name><index pos:line="10" pos:column="46">[<expr><name pos:line="10" pos:column="47">num<pos:position pos:line="10" pos:column="50"/></name></expr>]<pos:position pos:line="10" pos:column="51"/></index></name><operator pos:line="10" pos:column="51">.<pos:position pos:line="10" pos:column="52"/></operator><name pos:line="10" pos:column="52">handle<pos:position pos:line="10" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="60">buf<pos:position pos:line="10" pos:column="63"/></name></expr></argument>,
                                    <argument><expr><operator pos:line="11" pos:column="37">(<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="38">int<pos:position pos:line="11" pos:column="41"/></name><operator pos:line="11" pos:column="41">)<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="42">buffersize<pos:position pos:line="11" pos:column="52"/></name></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="54"/></decl_stmt>
  <expr_stmt><expr><operator pos:line="12" pos:column="3">*<pos:position pos:line="12" pos:column="4"/></operator><name pos:line="12" pos:column="4">wouldblock<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">=<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">FALSE<pos:position pos:line="12" pos:column="22"/></name></expr>;<pos:position pos:line="12" pos:column="23"/></expr_stmt>
  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><name pos:line="13" pos:column="6">nread<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">&lt;<pos:position pos:line="13" pos:column="16"/></operator> <literal type="number" pos:line="13" pos:column="14">0<pos:position pos:line="13" pos:column="15"/></literal></expr>)<pos:position pos:line="13" pos:column="16"/></condition><then pos:line="13" pos:column="16"> <block pos:line="13" pos:column="17">{
    <comment type="block" pos:line="14" pos:column="5">/* failed SSL_read */</comment>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">int<pos:position pos:line="15" pos:column="8"/></name></type> <name pos:line="15" pos:column="9">err<pos:position pos:line="15" pos:column="12"/></name> <init pos:line="15" pos:column="13">= <expr><call><name pos:line="15" pos:column="15">SSL_get_error<pos:position pos:line="15" pos:column="28"/></name><argument_list pos:line="15" pos:column="28">(<argument><expr><name><name pos:line="15" pos:column="29">conn<pos:position pos:line="15" pos:column="33"/></name><operator pos:line="15" pos:column="33">-&gt;<pos:position pos:line="15" pos:column="38"/></operator><name pos:line="15" pos:column="35">ssl<pos:position pos:line="15" pos:column="38"/></name><index pos:line="15" pos:column="38">[<expr><name pos:line="15" pos:column="39">num<pos:position pos:line="15" pos:column="42"/></name></expr>]<pos:position pos:line="15" pos:column="43"/></index></name><operator pos:line="15" pos:column="43">.<pos:position pos:line="15" pos:column="44"/></operator><name pos:line="15" pos:column="44">handle<pos:position pos:line="15" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="52">(<pos:position pos:line="15" pos:column="53"/></operator><name pos:line="15" pos:column="53">int<pos:position pos:line="15" pos:column="56"/></name><operator pos:line="15" pos:column="56">)<pos:position pos:line="15" pos:column="57"/></operator><name pos:line="15" pos:column="57">nread<pos:position pos:line="15" pos:column="62"/></name></expr></argument>)<pos:position pos:line="15" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="64"/></decl_stmt>

    <switch pos:line="17" pos:column="5">switch<condition pos:line="17" pos:column="11">(<expr><name pos:line="17" pos:column="12">err<pos:position pos:line="17" pos:column="15"/></name></expr>)<pos:position pos:line="17" pos:column="16"/></condition> <block pos:line="17" pos:column="17">{
    <case pos:line="18" pos:column="5">case <expr><name pos:line="18" pos:column="10">SSL_ERROR_NONE<pos:position pos:line="18" pos:column="24"/></name></expr>:<pos:position pos:line="18" pos:column="25"/></case> <comment type="block" pos:line="18" pos:column="26">/* this is not an error */</comment>
    <case pos:line="19" pos:column="5">case <expr><name pos:line="19" pos:column="10">SSL_ERROR_ZERO_RETURN<pos:position pos:line="19" pos:column="31"/></name></expr>:<pos:position pos:line="19" pos:column="32"/></case> <comment type="block" pos:line="19" pos:column="33">/* no more data */</comment>
      <break pos:line="20" pos:column="7">break;<pos:position pos:line="20" pos:column="13"/></break>
    <case pos:line="21" pos:column="5">case <expr><name pos:line="21" pos:column="10">SSL_ERROR_WANT_READ<pos:position pos:line="21" pos:column="29"/></name></expr>:<pos:position pos:line="21" pos:column="30"/></case>
    <case pos:line="22" pos:column="5">case <expr><name pos:line="22" pos:column="10">SSL_ERROR_WANT_WRITE<pos:position pos:line="22" pos:column="30"/></name></expr>:<pos:position pos:line="22" pos:column="31"/></case>
      <comment type="block" pos:line="23" pos:column="7">/* there's data pending, re-invoke SSL_read() */</comment>
      <expr_stmt><expr><operator pos:line="24" pos:column="7">*<pos:position pos:line="24" pos:column="8"/></operator><name pos:line="24" pos:column="8">wouldblock<pos:position pos:line="24" pos:column="18"/></name> <operator pos:line="24" pos:column="19">=<pos:position pos:line="24" pos:column="20"/></operator> <name pos:line="24" pos:column="21">TRUE<pos:position pos:line="24" pos:column="25"/></name></expr>;<pos:position pos:line="24" pos:column="26"/></expr_stmt>
      <return pos:line="25" pos:column="7">return <expr><operator pos:line="25" pos:column="14">-<pos:position pos:line="25" pos:column="15"/></operator><literal type="number" pos:line="25" pos:column="15">1<pos:position pos:line="25" pos:column="16"/></literal></expr>;<pos:position pos:line="25" pos:column="17"/></return> <comment type="block" pos:line="25" pos:column="18">/* basically EWOULDBLOCK */</comment>
    <default pos:line="26" pos:column="5">default:<pos:position pos:line="26" pos:column="13"/></default>
      <comment type="block" pos:line="27" pos:column="7">/* openssl/ssl.h says "look at error stack/return value/errno" */</comment>
      <expr_stmt><expr><name pos:line="28" pos:column="7">sslerror<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <call><name pos:line="28" pos:column="18">ERR_get_error<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">()<pos:position pos:line="28" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">failf<pos:position pos:line="29" pos:column="12"/></name><argument_list pos:line="29" pos:column="12">(<argument><expr><name><name pos:line="29" pos:column="13">conn<pos:position pos:line="29" pos:column="17"/></name><operator pos:line="29" pos:column="17">-&gt;<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="19">data<pos:position pos:line="29" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="25">"SSL read: %s, errno %d"<pos:position pos:line="29" pos:column="49"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="30" pos:column="13">ERR_error_string<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">sslerror<pos:position pos:line="30" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="40">error_buffer<pos:position pos:line="30" pos:column="52"/></name></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr></argument>,
            <argument><expr><call><name pos:line="31" pos:column="13">Curl_ourerrno<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">()<pos:position pos:line="31" pos:column="28"/></argument_list></call></expr></argument> )<pos:position pos:line="31" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt>
      <return pos:line="32" pos:column="7">return <expr><operator pos:line="32" pos:column="14">-<pos:position pos:line="32" pos:column="15"/></operator><literal type="number" pos:line="32" pos:column="15">1<pos:position pos:line="32" pos:column="16"/></literal></expr>;<pos:position pos:line="32" pos:column="17"/></return>
    }<pos:position pos:line="33" pos:column="6"/></block></switch>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>
  <return pos:line="35" pos:column="3">return <expr><name pos:line="35" pos:column="10">nread<pos:position pos:line="35" pos:column="15"/></name></expr>;<pos:position pos:line="35" pos:column="16"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
