<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_127.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">logmsg<pos:position pos:line="1" pos:column="12"/></name><parameter_list pos:line="1" pos:column="12">(<parameter><decl><type><specifier pos:line="1" pos:column="13">const<pos:position pos:line="1" pos:column="18"/></specifier> <name pos:line="1" pos:column="19">char<pos:position pos:line="1" pos:column="23"/></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier></type><name pos:line="1" pos:column="25">msg<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="1" pos:column="30">...<pos:position pos:line="1" pos:column="33"/></modifier></type></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">va_list<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">ap<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name></type> <name><name pos:line="4" pos:column="8">buffer<pos:position pos:line="4" pos:column="14"/></name><index pos:line="4" pos:column="14">[<expr><literal type="number" pos:line="4" pos:column="15">256<pos:position pos:line="4" pos:column="18"/></literal></expr>]<pos:position pos:line="4" pos:column="19"/></index></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt> <comment type="block" pos:line="4" pos:column="21">/* possible overflow if you pass in a huge string */</comment>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">FILE<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">logfp<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">timeval<pos:position pos:line="7" pos:column="17"/></name></name></type> <name pos:line="7" pos:column="18">tv<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><call><name pos:line="7" pos:column="23">curlx_tvnow<pos:position pos:line="7" pos:column="34"/></name><argument_list pos:line="7" pos:column="34">()<pos:position pos:line="7" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">tm<pos:position pos:line="8" pos:column="12"/></name></name> <modifier pos:line="8" pos:column="13">*<pos:position pos:line="8" pos:column="14"/></modifier></type><name pos:line="8" pos:column="14">now<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">=
    <expr><call><name pos:line="9" pos:column="5">localtime<pos:position pos:line="9" pos:column="14"/></name><argument_list pos:line="9" pos:column="14">(<argument><expr><operator pos:line="9" pos:column="15">&amp;<pos:position pos:line="9" pos:column="20"/></operator><name><name pos:line="9" pos:column="16">tv<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">.<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">tv_sec<pos:position pos:line="9" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="26"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt> <comment type="block" pos:line="9" pos:column="28">/* not multithread safe but we don't care */</comment>

  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name></type> <name><name pos:line="11" pos:column="8">timebuf<pos:position pos:line="11" pos:column="15"/></name><index pos:line="11" pos:column="15">[<expr><literal type="number" pos:line="11" pos:column="16">12<pos:position pos:line="11" pos:column="18"/></literal></expr>]<pos:position pos:line="11" pos:column="19"/></index></name></decl>;<pos:position pos:line="11" pos:column="20"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">snprintf<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name pos:line="12" pos:column="12">timebuf<pos:position pos:line="12" pos:column="19"/></name></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="21">sizeof<argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">timebuf<pos:position pos:line="12" pos:column="35"/></name></expr></argument>)<pos:position pos:line="12" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="38">"%02d:%02d:%02d.%02ld"<pos:position pos:line="12" pos:column="60"/></literal></expr></argument>,
           <argument><expr><name><name pos:line="13" pos:column="12">now<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">-&gt;<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="17">tm_hour<pos:position pos:line="13" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="26">now<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">-&gt;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="31">tm_min<pos:position pos:line="13" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="39">now<pos:position pos:line="13" pos:column="42"/></name><operator pos:line="13" pos:column="42">-&gt;<pos:position pos:line="13" pos:column="47"/></operator><name pos:line="13" pos:column="44">tm_sec<pos:position pos:line="13" pos:column="50"/></name></name></expr></argument>,
           <argument><expr><name><name pos:line="14" pos:column="12">tv<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">.<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="15">tv_usec<pos:position pos:line="14" pos:column="22"/></name></name><operator pos:line="14" pos:column="22">/<pos:position pos:line="14" pos:column="23"/></operator><literal type="number" pos:line="14" pos:column="23">10000<pos:position pos:line="14" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="30"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="16" pos:column="3">va_start<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><name pos:line="16" pos:column="12">ap<pos:position pos:line="16" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="16">msg<pos:position pos:line="16" pos:column="19"/></name></expr></argument>)<pos:position pos:line="16" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">vsprintf<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name pos:line="17" pos:column="12">buffer<pos:position pos:line="17" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="20">msg<pos:position pos:line="17" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="25">ap<pos:position pos:line="17" pos:column="27"/></name></expr></argument>)<pos:position pos:line="17" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">va_end<pos:position pos:line="18" pos:column="9"/></name><argument_list pos:line="18" pos:column="9">(<argument><expr><name pos:line="18" pos:column="10">ap<pos:position pos:line="18" pos:column="12"/></name></expr></argument>)<pos:position pos:line="18" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="14"/></expr_stmt>

  <expr_stmt><expr><name pos:line="20" pos:column="3">logfp<pos:position pos:line="20" pos:column="8"/></name> <operator pos:line="20" pos:column="9">=<pos:position pos:line="20" pos:column="10"/></operator> <call><name pos:line="20" pos:column="11">fopen<pos:position pos:line="20" pos:column="16"/></name><argument_list pos:line="20" pos:column="16">(<argument><expr><name pos:line="20" pos:column="17">serverlogfile<pos:position pos:line="20" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="32">"a"<pos:position pos:line="20" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">fprintf<pos:position pos:line="21" pos:column="10"/></name><argument_list pos:line="21" pos:column="10">(<argument><expr><ternary><condition><expr><name pos:line="21" pos:column="11">logfp<pos:position pos:line="21" pos:column="16"/></name></expr>?<pos:position pos:line="21" pos:column="17"/></condition><then><expr><name pos:line="21" pos:column="17">logfp<pos:position pos:line="21" pos:column="22"/></name></expr></then><else pos:line="21" pos:column="22">:<expr><name pos:line="21" pos:column="23">stderr<pos:position pos:line="21" pos:column="29"/></name></expr></else></ternary></expr></argument>, <comment type="block" pos:line="21" pos:column="31">/* write to stderr if the logfile doesn't open */</comment>
          <argument><expr><literal type="string" pos:line="22" pos:column="11">"%s %s\n"<pos:position pos:line="22" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="22">timebuf<pos:position pos:line="22" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="31">buffer<pos:position pos:line="22" pos:column="37"/></name></expr></argument>)<pos:position pos:line="22" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt>
  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><name pos:line="23" pos:column="6">logfp<pos:position pos:line="23" pos:column="11"/></name></expr>)<pos:position pos:line="23" pos:column="12"/></condition><then pos:line="23" pos:column="12">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="5">fclose<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><name pos:line="24" pos:column="12">logfp<pos:position pos:line="24" pos:column="17"/></name></expr></argument>)<pos:position pos:line="24" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="19"/></expr_stmt></block></then></if>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
