<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1862_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_ntlm_core_mk_nt_hash<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">Curl_easy<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">data<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
                                   <parameter><decl><type><specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier> <name pos:line="2" pos:column="42">char<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">password<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>,
                                   <parameter><decl><type><name pos:line="3" pos:column="36">unsigned<pos:position pos:line="3" pos:column="44"/></name> <name pos:line="3" pos:column="45">char<pos:position pos:line="3" pos:column="49"/></name> <modifier pos:line="3" pos:column="50">*<pos:position pos:line="3" pos:column="51"/></modifier></type><name pos:line="3" pos:column="51">ntbuffer<pos:position pos:line="3" pos:column="59"/></name></decl></parameter> <comment type="block" pos:line="3" pos:column="60">/* 21 bytes */</comment>)<pos:position pos:line="3" pos:column="75"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">len<pos:position pos:line="5" pos:column="13"/></name> <init pos:line="5" pos:column="14">= <expr><call><name pos:line="5" pos:column="16">strlen<pos:position pos:line="5" pos:column="22"/></name><argument_list pos:line="5" pos:column="22">(<argument><expr><name pos:line="5" pos:column="23">password<pos:position pos:line="5" pos:column="31"/></name></expr></argument>)<pos:position pos:line="5" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">unsigned<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">char<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">pw<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><call><name pos:line="6" pos:column="23">malloc<pos:position pos:line="6" pos:column="29"/></name><argument_list pos:line="6" pos:column="29">(<argument><expr><name pos:line="6" pos:column="30">len<pos:position pos:line="6" pos:column="33"/></name> <operator pos:line="6" pos:column="34">*<pos:position pos:line="6" pos:column="35"/></operator> <literal type="number" pos:line="6" pos:column="36">2<pos:position pos:line="6" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">CURLcode<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">result<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><operator pos:line="8" pos:column="6">!<pos:position pos:line="8" pos:column="7"/></operator><name pos:line="8" pos:column="7">pw<pos:position pos:line="8" pos:column="9"/></name></expr>)<pos:position pos:line="8" pos:column="10"/></condition><then pos:line="8" pos:column="10">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="9" pos:column="31"/></name></expr>;<pos:position pos:line="9" pos:column="32"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="11" pos:column="3">ascii_to_unicode_le<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">pw<pos:position pos:line="11" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="27">password<pos:position pos:line="11" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="37">len<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>

  <comment type="block" pos:line="13" pos:column="3">/*
   * The NT hashed password needs to be created using the password in the
   * network encoding not the host encoding.
   */</comment>
  <expr_stmt><expr><name pos:line="17" pos:column="3">result<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator> <call><name pos:line="17" pos:column="12">Curl_convert_to_network<pos:position pos:line="17" pos:column="35"/></name><argument_list pos:line="17" pos:column="35">(<argument><expr><name pos:line="17" pos:column="36">data<pos:position pos:line="17" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="42">(<pos:position pos:line="17" pos:column="43"/></operator><name pos:line="17" pos:column="43">char<pos:position pos:line="17" pos:column="47"/></name> <operator pos:line="17" pos:column="48">*<pos:position pos:line="17" pos:column="49"/></operator><operator pos:line="17" pos:column="49">)<pos:position pos:line="17" pos:column="50"/></operator><name pos:line="17" pos:column="50">pw<pos:position pos:line="17" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="54">len<pos:position pos:line="17" pos:column="57"/></name> <operator pos:line="17" pos:column="58">*<pos:position pos:line="17" pos:column="59"/></operator> <literal type="number" pos:line="17" pos:column="60">2<pos:position pos:line="17" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="63"/></expr_stmt>
  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><name pos:line="18" pos:column="6">result<pos:position pos:line="18" pos:column="12"/></name></expr>)<pos:position pos:line="18" pos:column="13"/></condition><then pos:line="18" pos:column="13">
    <block type="pseudo"><return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">result<pos:position pos:line="19" pos:column="18"/></name></expr>;<pos:position pos:line="19" pos:column="19"/></return></block></then></if>

  <block pos:line="21" pos:column="3">{
    <comment type="block" pos:line="22" pos:column="5">/* Create NT hashed password. */</comment>
<cpp:ifdef pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">ifdef<pos:position pos:line="23" pos:column="7"/></cpp:directive> <name pos:line="23" pos:column="8">USE_OPENSSL<pos:position pos:line="23" pos:column="19"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">MD4_CTX<pos:position pos:line="24" pos:column="12"/></name></type> <name pos:line="24" pos:column="13">MD4pw<pos:position pos:line="24" pos:column="18"/></name></decl>;<pos:position pos:line="24" pos:column="19"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">MD4_Init<pos:position pos:line="25" pos:column="13"/></name><argument_list pos:line="25" pos:column="13">(<argument><expr><operator pos:line="25" pos:column="14">&amp;<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="15">MD4pw<pos:position pos:line="25" pos:column="20"/></name></expr></argument>)<pos:position pos:line="25" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">MD4_Update<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><operator pos:line="26" pos:column="16">&amp;<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="17">MD4pw<pos:position pos:line="26" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="24">pw<pos:position pos:line="26" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="28">2<pos:position pos:line="26" pos:column="29"/></literal> <operator pos:line="26" pos:column="30">*<pos:position pos:line="26" pos:column="31"/></operator> <name pos:line="26" pos:column="32">len<pos:position pos:line="26" pos:column="35"/></name></expr></argument>)<pos:position pos:line="26" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">MD4_Final<pos:position pos:line="27" pos:column="14"/></name><argument_list pos:line="27" pos:column="14">(<argument><expr><name pos:line="27" pos:column="15">ntbuffer<pos:position pos:line="27" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="25">&amp;<pos:position pos:line="27" pos:column="30"/></operator><name pos:line="27" pos:column="26">MD4pw<pos:position pos:line="27" pos:column="31"/></name></expr></argument>)<pos:position pos:line="27" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="33"/></expr_stmt>
<cpp:elif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">elif<pos:position pos:line="28" pos:column="6"/></cpp:directive> <expr><call><name pos:line="28" pos:column="7">defined<pos:position pos:line="28" pos:column="14"/></name><argument_list pos:line="28" pos:column="14">(<argument><expr><name pos:line="28" pos:column="15">USE_GNUTLS_NETTLE<pos:position pos:line="28" pos:column="32"/></name></expr></argument>)<pos:position pos:line="28" pos:column="33"/></argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><name><name pos:line="29" pos:column="5">struct<pos:position pos:line="29" pos:column="11"/></name> <name pos:line="29" pos:column="12">md4_ctx<pos:position pos:line="29" pos:column="19"/></name></name></type> <name pos:line="29" pos:column="20">MD4pw<pos:position pos:line="29" pos:column="25"/></name></decl>;<pos:position pos:line="29" pos:column="26"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">md4_init<pos:position pos:line="30" pos:column="13"/></name><argument_list pos:line="30" pos:column="13">(<argument><expr><operator pos:line="30" pos:column="14">&amp;<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="15">MD4pw<pos:position pos:line="30" pos:column="20"/></name></expr></argument>)<pos:position pos:line="30" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">md4_update<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><operator pos:line="31" pos:column="16">&amp;<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="17">MD4pw<pos:position pos:line="31" pos:column="22"/></name></expr></argument>, <argument><expr><call pos:line="31" pos:column="24">(<name pos:line="31" pos:column="25">unsigned<pos:position pos:line="31" pos:column="33"/></name> <name pos:line="31" pos:column="34">int<pos:position pos:line="31" pos:column="37"/></name>)<argument_list pos:line="31" pos:column="38">(<argument><expr><literal type="number" pos:line="31" pos:column="39">2<pos:position pos:line="31" pos:column="40"/></literal> <operator pos:line="31" pos:column="41">*<pos:position pos:line="31" pos:column="42"/></operator> <name pos:line="31" pos:column="43">len<pos:position pos:line="31" pos:column="46"/></name></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="31" pos:column="49">pw<pos:position pos:line="31" pos:column="51"/></name></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">md4_digest<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><operator pos:line="32" pos:column="16">&amp;<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="17">MD4pw<pos:position pos:line="32" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="24">MD4_DIGEST_SIZE<pos:position pos:line="32" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="41">ntbuffer<pos:position pos:line="32" pos:column="49"/></name></expr></argument>)<pos:position pos:line="32" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="51"/></expr_stmt>
<cpp:elif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">elif<pos:position pos:line="33" pos:column="6"/></cpp:directive> <expr><call><name pos:line="33" pos:column="7">defined<pos:position pos:line="33" pos:column="14"/></name><argument_list pos:line="33" pos:column="14">(<argument><expr><name pos:line="33" pos:column="15">USE_GNUTLS<pos:position pos:line="33" pos:column="25"/></name></expr></argument>)<pos:position pos:line="33" pos:column="26"/></argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">gcry_md_hd_t<pos:position pos:line="34" pos:column="17"/></name></type> <name pos:line="34" pos:column="18">MD4pw<pos:position pos:line="34" pos:column="23"/></name></decl>;<pos:position pos:line="34" pos:column="24"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">gcry_md_open<pos:position pos:line="35" pos:column="17"/></name><argument_list pos:line="35" pos:column="17">(<argument><expr><operator pos:line="35" pos:column="18">&amp;<pos:position pos:line="35" pos:column="23"/></operator><name pos:line="35" pos:column="19">MD4pw<pos:position pos:line="35" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="26">GCRY_MD_MD4<pos:position pos:line="35" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="39">0<pos:position pos:line="35" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">gcry_md_write<pos:position pos:line="36" pos:column="18"/></name><argument_list pos:line="36" pos:column="18">(<argument><expr><name pos:line="36" pos:column="19">MD4pw<pos:position pos:line="36" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="26">pw<pos:position pos:line="36" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="30">2<pos:position pos:line="36" pos:column="31"/></literal> <operator pos:line="36" pos:column="32">*<pos:position pos:line="36" pos:column="33"/></operator> <name pos:line="36" pos:column="34">len<pos:position pos:line="36" pos:column="37"/></name></expr></argument>)<pos:position pos:line="36" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">memcpy<pos:position pos:line="37" pos:column="11"/></name><argument_list pos:line="37" pos:column="11">(<argument><expr><name pos:line="37" pos:column="12">ntbuffer<pos:position pos:line="37" pos:column="20"/></name></expr></argument>, <argument><expr><call><name pos:line="37" pos:column="22">gcry_md_read<pos:position pos:line="37" pos:column="34"/></name><argument_list pos:line="37" pos:column="34">(<argument><expr><name pos:line="37" pos:column="35">MD4pw<pos:position pos:line="37" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="42">0<pos:position pos:line="37" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="37" pos:column="46">MD4_DIGEST_LENGTH<pos:position pos:line="37" pos:column="63"/></name></expr></argument>)<pos:position pos:line="37" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">gcry_md_close<pos:position pos:line="38" pos:column="18"/></name><argument_list pos:line="38" pos:column="18">(<argument><expr><name pos:line="38" pos:column="19">MD4pw<pos:position pos:line="38" pos:column="24"/></name></expr></argument>)<pos:position pos:line="38" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="26"/></expr_stmt>
<cpp:elif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">elif<pos:position pos:line="39" pos:column="6"/></cpp:directive> <expr><call><name pos:line="39" pos:column="7">defined<pos:position pos:line="39" pos:column="14"/></name><argument_list pos:line="39" pos:column="14">(<argument><expr><name pos:line="39" pos:column="15">USE_NSS<pos:position pos:line="39" pos:column="22"/></name></expr></argument>)<pos:position pos:line="39" pos:column="23"/></argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">Curl_md4it<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><name pos:line="40" pos:column="16">ntbuffer<pos:position pos:line="40" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="26">pw<pos:position pos:line="40" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="30">2<pos:position pos:line="40" pos:column="31"/></literal> <operator pos:line="40" pos:column="32">*<pos:position pos:line="40" pos:column="33"/></operator> <name pos:line="40" pos:column="34">len<pos:position pos:line="40" pos:column="37"/></name></expr></argument>)<pos:position pos:line="40" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="39"/></expr_stmt>
<cpp:elif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">elif<pos:position pos:line="41" pos:column="6"/></cpp:directive> <expr><call><name pos:line="41" pos:column="7">defined<pos:position pos:line="41" pos:column="14"/></name><argument_list pos:line="41" pos:column="14">(<argument><expr><name pos:line="41" pos:column="15">USE_MBEDTLS<pos:position pos:line="41" pos:column="26"/></name></expr></argument>)<pos:position pos:line="41" pos:column="27"/></argument_list></call></expr></cpp:elif>
<cpp:if pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">if<pos:position pos:line="42" pos:column="4"/></cpp:directive> <expr><call><name pos:line="42" pos:column="5">defined<pos:position pos:line="42" pos:column="12"/></name><argument_list pos:line="42" pos:column="12">(<argument><expr><name pos:line="42" pos:column="13">MBEDTLS_MD4_C<pos:position pos:line="42" pos:column="26"/></name></expr></argument>)<pos:position pos:line="42" pos:column="27"/></argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">mbedtls_md4<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">(<argument><expr><name pos:line="43" pos:column="17">pw<pos:position pos:line="43" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="21">2<pos:position pos:line="43" pos:column="22"/></literal> <operator pos:line="43" pos:column="23">*<pos:position pos:line="43" pos:column="24"/></operator> <name pos:line="43" pos:column="25">len<pos:position pos:line="43" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="30">ntbuffer<pos:position pos:line="43" pos:column="38"/></name></expr></argument>)<pos:position pos:line="43" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="40"/></expr_stmt>
<cpp:else pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">else<pos:position pos:line="44" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">Curl_md4it<pos:position pos:line="45" pos:column="15"/></name><argument_list pos:line="45" pos:column="15">(<argument><expr><name pos:line="45" pos:column="16">ntbuffer<pos:position pos:line="45" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="26">pw<pos:position pos:line="45" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="30">2<pos:position pos:line="45" pos:column="31"/></literal> <operator pos:line="45" pos:column="32">*<pos:position pos:line="45" pos:column="33"/></operator> <name pos:line="45" pos:column="34">len<pos:position pos:line="45" pos:column="37"/></name></expr></argument>)<pos:position pos:line="45" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="39"/></expr_stmt>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:elif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">elif<pos:position pos:line="47" pos:column="6"/></cpp:directive> <expr><call><name pos:line="47" pos:column="7">defined<pos:position pos:line="47" pos:column="14"/></name><argument_list pos:line="47" pos:column="14">(<argument><expr><name pos:line="47" pos:column="15">USE_DARWINSSL<pos:position pos:line="47" pos:column="28"/></name></expr></argument>)<pos:position pos:line="47" pos:column="29"/></argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><operator pos:line="48" pos:column="5">(<pos:position pos:line="48" pos:column="6"/></operator><name pos:line="48" pos:column="6">void<pos:position pos:line="48" pos:column="10"/></name><operator pos:line="48" pos:column="10">)<pos:position pos:line="48" pos:column="11"/></operator><call><name pos:line="48" pos:column="11">CC_MD4<pos:position pos:line="48" pos:column="17"/></name><argument_list pos:line="48" pos:column="17">(<argument><expr><name pos:line="48" pos:column="18">pw<pos:position pos:line="48" pos:column="20"/></name></expr></argument>, <argument><expr><call pos:line="48" pos:column="22">(<name pos:line="48" pos:column="23">CC_LONG<pos:position pos:line="48" pos:column="30"/></name>)<argument_list pos:line="48" pos:column="31">(<argument><expr><literal type="number" pos:line="48" pos:column="32">2<pos:position pos:line="48" pos:column="33"/></literal> <operator pos:line="48" pos:column="34">*<pos:position pos:line="48" pos:column="35"/></operator> <name pos:line="48" pos:column="36">len<pos:position pos:line="48" pos:column="39"/></name></expr></argument>)<pos:position pos:line="48" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="48" pos:column="42">ntbuffer<pos:position pos:line="48" pos:column="50"/></name></expr></argument>)<pos:position pos:line="48" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="52"/></expr_stmt>
<cpp:elif pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">elif<pos:position pos:line="49" pos:column="6"/></cpp:directive> <expr><call><name pos:line="49" pos:column="7">defined<pos:position pos:line="49" pos:column="14"/></name><argument_list pos:line="49" pos:column="14">(<argument><expr><name pos:line="49" pos:column="15">USE_OS400CRYPTO<pos:position pos:line="49" pos:column="30"/></name></expr></argument>)<pos:position pos:line="49" pos:column="31"/></argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">Curl_md4it<pos:position pos:line="50" pos:column="15"/></name><argument_list pos:line="50" pos:column="15">(<argument><expr><name pos:line="50" pos:column="16">ntbuffer<pos:position pos:line="50" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="26">pw<pos:position pos:line="50" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="30">2<pos:position pos:line="50" pos:column="31"/></literal> <operator pos:line="50" pos:column="32">*<pos:position pos:line="50" pos:column="33"/></operator> <name pos:line="50" pos:column="34">len<pos:position pos:line="50" pos:column="37"/></name></expr></argument>)<pos:position pos:line="50" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="39"/></expr_stmt>
<cpp:elif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">elif<pos:position pos:line="51" pos:column="6"/></cpp:directive> <expr><call><name pos:line="51" pos:column="7">defined<pos:position pos:line="51" pos:column="14"/></name><argument_list pos:line="51" pos:column="14">(<argument><expr><name pos:line="51" pos:column="15">USE_WIN32_CRYPTO<pos:position pos:line="51" pos:column="31"/></name></expr></argument>)<pos:position pos:line="51" pos:column="32"/></argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><name pos:line="52" pos:column="5">HCRYPTPROV<pos:position pos:line="52" pos:column="15"/></name></type> <name pos:line="52" pos:column="16">hprov<pos:position pos:line="52" pos:column="21"/></name></decl>;<pos:position pos:line="52" pos:column="22"/></decl_stmt>
    <if pos:line="53" pos:column="5">if<condition pos:line="53" pos:column="7">(<expr><call><name pos:line="53" pos:column="8">CryptAcquireContext<pos:position pos:line="53" pos:column="27"/></name><argument_list pos:line="53" pos:column="27">(<argument><expr><operator pos:line="53" pos:column="28">&amp;<pos:position pos:line="53" pos:column="33"/></operator><name pos:line="53" pos:column="29">hprov<pos:position pos:line="53" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="36">NULL<pos:position pos:line="53" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="42">NULL<pos:position pos:line="53" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="48">PROV_RSA_FULL<pos:position pos:line="53" pos:column="61"/></name></expr></argument>,
                           <argument><expr><name pos:line="54" pos:column="28">CRYPT_VERIFYCONTEXT<pos:position pos:line="54" pos:column="47"/></name></expr></argument>)<pos:position pos:line="54" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="49"/></condition><then pos:line="54" pos:column="49"> <block pos:line="54" pos:column="50">{
      <decl_stmt><decl><type><name pos:line="55" pos:column="7">HCRYPTHASH<pos:position pos:line="55" pos:column="17"/></name></type> <name pos:line="55" pos:column="18">hhash<pos:position pos:line="55" pos:column="23"/></name></decl>;<pos:position pos:line="55" pos:column="24"/></decl_stmt>
      <if pos:line="56" pos:column="7">if<condition pos:line="56" pos:column="9">(<expr><call><name pos:line="56" pos:column="10">CryptCreateHash<pos:position pos:line="56" pos:column="25"/></name><argument_list pos:line="56" pos:column="25">(<argument><expr><name pos:line="56" pos:column="26">hprov<pos:position pos:line="56" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="33">CALG_MD4<pos:position pos:line="56" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="43">0<pos:position pos:line="56" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="46">0<pos:position pos:line="56" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="56" pos:column="49">&amp;<pos:position pos:line="56" pos:column="54"/></operator><name pos:line="56" pos:column="50">hhash<pos:position pos:line="56" pos:column="55"/></name></expr></argument>)<pos:position pos:line="56" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="57"/></condition><then pos:line="56" pos:column="57"> <block pos:line="56" pos:column="58">{
        <decl_stmt><decl><type><name pos:line="57" pos:column="9">DWORD<pos:position pos:line="57" pos:column="14"/></name></type> <name pos:line="57" pos:column="15">length<pos:position pos:line="57" pos:column="21"/></name> <init pos:line="57" pos:column="22">= <expr><literal type="number" pos:line="57" pos:column="24">16<pos:position pos:line="57" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="57" pos:column="27"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">CryptHashData<pos:position pos:line="58" pos:column="22"/></name><argument_list pos:line="58" pos:column="22">(<argument><expr><name pos:line="58" pos:column="23">hhash<pos:position pos:line="58" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="30">pw<pos:position pos:line="58" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="34">(<pos:position pos:line="58" pos:column="35"/></operator><name pos:line="58" pos:column="35">unsigned<pos:position pos:line="58" pos:column="43"/></name> <name pos:line="58" pos:column="44">int<pos:position pos:line="58" pos:column="47"/></name><operator pos:line="58" pos:column="47">)<pos:position pos:line="58" pos:column="48"/></operator><name pos:line="58" pos:column="48">len<pos:position pos:line="58" pos:column="51"/></name> <operator pos:line="58" pos:column="52">*<pos:position pos:line="58" pos:column="53"/></operator> <literal type="number" pos:line="58" pos:column="54">2<pos:position pos:line="58" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="58" pos:column="57">0<pos:position pos:line="58" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">CryptGetHashParam<pos:position pos:line="59" pos:column="26"/></name><argument_list pos:line="59" pos:column="26">(<argument><expr><name pos:line="59" pos:column="27">hhash<pos:position pos:line="59" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="34">HP_HASHVAL<pos:position pos:line="59" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="46">ntbuffer<pos:position pos:line="59" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="56">&amp;<pos:position pos:line="59" pos:column="61"/></operator><name pos:line="59" pos:column="57">length<pos:position pos:line="59" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="65">0<pos:position pos:line="59" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">CryptDestroyHash<pos:position pos:line="60" pos:column="25"/></name><argument_list pos:line="60" pos:column="25">(<argument><expr><name pos:line="60" pos:column="26">hhash<pos:position pos:line="60" pos:column="31"/></name></expr></argument>)<pos:position pos:line="60" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="33"/></expr_stmt>
      }<pos:position pos:line="61" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="62" pos:column="7">CryptReleaseContext<pos:position pos:line="62" pos:column="26"/></name><argument_list pos:line="62" pos:column="26">(<argument><expr><name pos:line="62" pos:column="27">hprov<pos:position pos:line="62" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="34">0<pos:position pos:line="62" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="63" pos:column="6"/></block></then></if>
<cpp:endif pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">endif<pos:position pos:line="64" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="66" pos:column="5">memset<pos:position pos:line="66" pos:column="11"/></name><argument_list pos:line="66" pos:column="11">(<argument><expr><name pos:line="66" pos:column="12">ntbuffer<pos:position pos:line="66" pos:column="20"/></name> <operator pos:line="66" pos:column="21">+<pos:position pos:line="66" pos:column="22"/></operator> <literal type="number" pos:line="66" pos:column="23">16<pos:position pos:line="66" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="27">0<pos:position pos:line="66" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="30">21<pos:position pos:line="66" pos:column="32"/></literal> <operator pos:line="66" pos:column="33">-<pos:position pos:line="66" pos:column="34"/></operator> <literal type="number" pos:line="66" pos:column="35">16<pos:position pos:line="66" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="67" pos:column="4"/></block>

  <expr_stmt><expr><call><name pos:line="69" pos:column="3">free<pos:position pos:line="69" pos:column="7"/></name><argument_list pos:line="69" pos:column="7">(<argument><expr><name pos:line="69" pos:column="8">pw<pos:position pos:line="69" pos:column="10"/></name></expr></argument>)<pos:position pos:line="69" pos:column="11"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="12"/></expr_stmt>

  <return pos:line="71" pos:column="3">return <expr><name pos:line="71" pos:column="10">CURLE_OK<pos:position pos:line="71" pos:column="18"/></name></expr>;<pos:position pos:line="71" pos:column="19"/></return>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
