<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_119_curl-7.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">int<pos:position pos:line="2" pos:column="4"/></name></type> <name pos:line="2" pos:column="5">FormParse<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">char<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">input<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>,
	      <parameter><decl><type><name><name pos:line="3" pos:column="15">struct<pos:position pos:line="3" pos:column="21"/></name> <name pos:line="3" pos:column="22">HttpPost<pos:position pos:line="3" pos:column="30"/></name></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier><modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">httppost<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>,
	      <parameter><decl><type><name><name pos:line="4" pos:column="15">struct<pos:position pos:line="4" pos:column="21"/></name> <name pos:line="4" pos:column="22">HttpPost<pos:position pos:line="4" pos:column="30"/></name></name> <modifier pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></modifier><modifier pos:line="4" pos:column="32">*<pos:position pos:line="4" pos:column="33"/></modifier></type><name pos:line="4" pos:column="33">last_post<pos:position pos:line="4" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="43"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <comment type="block" pos:line="6" pos:column="3">/* nextarg MUST be a string in the format 'name=contents' and we'll
     build a linked list with the info */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name><name pos:line="8" pos:column="8">name<pos:position pos:line="8" pos:column="12"/></name><index pos:line="8" pos:column="12">[<expr><literal type="number" pos:line="8" pos:column="13">256<pos:position pos:line="8" pos:column="16"/></literal></expr>]<pos:position pos:line="8" pos:column="17"/></index></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">contents<pos:position pos:line="9" pos:column="17"/></name></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name></type> <name><name pos:line="10" pos:column="8">major<pos:position pos:line="10" pos:column="13"/></name><index pos:line="10" pos:column="13">[<expr><literal type="number" pos:line="10" pos:column="14">128<pos:position pos:line="10" pos:column="17"/></literal></expr>]<pos:position pos:line="10" pos:column="18"/></index></name></decl>;<pos:position pos:line="10" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name></type> <name><name pos:line="11" pos:column="8">minor<pos:position pos:line="11" pos:column="13"/></name><index pos:line="11" pos:column="13">[<expr><literal type="number" pos:line="11" pos:column="14">128<pos:position pos:line="11" pos:column="17"/></literal></expr>]<pos:position pos:line="11" pos:column="18"/></index></name></decl>;<pos:position pos:line="11" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">long<pos:position pos:line="12" pos:column="7"/></name></type> <name pos:line="12" pos:column="8">flags<pos:position pos:line="12" pos:column="13"/></name> <init pos:line="12" pos:column="14">= <expr><literal type="number" pos:line="12" pos:column="16">0<pos:position pos:line="12" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">char<pos:position pos:line="13" pos:column="7"/></name> <modifier pos:line="13" pos:column="8">*<pos:position pos:line="13" pos:column="9"/></modifier></type><name pos:line="13" pos:column="9">contp<pos:position pos:line="13" pos:column="14"/></name></decl>;<pos:position pos:line="13" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="14" pos:column="3">const<pos:position pos:line="14" pos:column="8"/></specifier> <name pos:line="14" pos:column="9">char<pos:position pos:line="14" pos:column="13"/></name> <modifier pos:line="14" pos:column="14">*<pos:position pos:line="14" pos:column="15"/></modifier></type><name pos:line="14" pos:column="15">type<pos:position pos:line="14" pos:column="19"/></name> <init pos:line="14" pos:column="20">= <expr><name pos:line="14" pos:column="22">NULL<pos:position pos:line="14" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">char<pos:position pos:line="15" pos:column="7"/></name> <modifier pos:line="15" pos:column="8">*<pos:position pos:line="15" pos:column="9"/></modifier></type><name pos:line="15" pos:column="9">prevtype<pos:position pos:line="15" pos:column="17"/></name> <init pos:line="15" pos:column="18">= <expr><name pos:line="15" pos:column="20">NULL<pos:position pos:line="15" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">char<pos:position pos:line="16" pos:column="7"/></name> <modifier pos:line="16" pos:column="8">*<pos:position pos:line="16" pos:column="9"/></modifier></type><name pos:line="16" pos:column="9">sep<pos:position pos:line="16" pos:column="12"/></name></decl>;<pos:position pos:line="16" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">char<pos:position pos:line="17" pos:column="7"/></name> <modifier pos:line="17" pos:column="8">*<pos:position pos:line="17" pos:column="9"/></modifier></type><name pos:line="17" pos:column="9">sep2<pos:position pos:line="17" pos:column="13"/></name></decl>;<pos:position pos:line="17" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="18" pos:column="3">struct<pos:position pos:line="18" pos:column="9"/></name> <name pos:line="18" pos:column="10">HttpPost<pos:position pos:line="18" pos:column="18"/></name></name> <modifier pos:line="18" pos:column="19">*<pos:position pos:line="18" pos:column="20"/></modifier></type><name pos:line="18" pos:column="20">post<pos:position pos:line="18" pos:column="24"/></name></decl>;<pos:position pos:line="18" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="19" pos:column="3">struct<pos:position pos:line="19" pos:column="9"/></name> <name pos:line="19" pos:column="10">HttpPost<pos:position pos:line="19" pos:column="18"/></name></name> <modifier pos:line="19" pos:column="19">*<pos:position pos:line="19" pos:column="20"/></modifier></type><name pos:line="19" pos:column="20">subpost<pos:position pos:line="19" pos:column="27"/></name></decl>;<pos:position pos:line="19" pos:column="28"/></decl_stmt> <comment type="block" pos:line="19" pos:column="29">/* a sub-node */</comment>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">unsigned<pos:position pos:line="20" pos:column="11"/></name> <name pos:line="20" pos:column="12">int<pos:position pos:line="20" pos:column="15"/></name></type> <name pos:line="20" pos:column="16">i<pos:position pos:line="20" pos:column="17"/></name></decl>;<pos:position pos:line="20" pos:column="18"/></decl_stmt>

  <comment type="block" pos:line="22" pos:column="3">/* Preallocate contents to the length of input to make sure we don't
     overwrite anything. */</comment>
  <expr_stmt><expr><name pos:line="24" pos:column="3">contents<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <call><name pos:line="24" pos:column="14">malloc<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><call><name pos:line="24" pos:column="21">strlen<pos:position pos:line="24" pos:column="27"/></name><argument_list pos:line="24" pos:column="27">(<argument><expr><name pos:line="24" pos:column="28">input<pos:position pos:line="24" pos:column="33"/></name></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="25" pos:column="3">contents<pos:position pos:line="25" pos:column="11"/></name><index pos:line="25" pos:column="11">[<expr><literal type="number" pos:line="25" pos:column="12">0<pos:position pos:line="25" pos:column="13"/></literal></expr>]<pos:position pos:line="25" pos:column="14"/></index></name> <operator pos:line="25" pos:column="15">=<pos:position pos:line="25" pos:column="16"/></operator> <literal type="char" pos:line="25" pos:column="17">'\000'<pos:position pos:line="25" pos:column="23"/></literal></expr>;<pos:position pos:line="25" pos:column="24"/></expr_stmt>
 
  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">(<expr><literal type="number" pos:line="27" pos:column="6">1<pos:position pos:line="27" pos:column="7"/></literal> <operator pos:line="27" pos:column="8">&lt;=<pos:position pos:line="27" pos:column="13"/></operator> <call><name pos:line="27" pos:column="11">sscanf<pos:position pos:line="27" pos:column="17"/></name><argument_list pos:line="27" pos:column="17">(<argument><expr><name pos:line="27" pos:column="18">input<pos:position pos:line="27" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="25">"%255[^=]=%[^\n]"<pos:position pos:line="27" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="44">name<pos:position pos:line="27" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="50">contents<pos:position pos:line="27" pos:column="58"/></name></expr></argument>)<pos:position pos:line="27" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="60"/></condition><then pos:line="27" pos:column="60"> <block pos:line="27" pos:column="61">{
    <comment type="block" pos:line="28" pos:column="5">/* the input was using the correct format */</comment>
    <expr_stmt><expr><name pos:line="29" pos:column="5">contp<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">=<pos:position pos:line="29" pos:column="12"/></operator> <name pos:line="29" pos:column="13">contents<pos:position pos:line="29" pos:column="21"/></name></expr>;<pos:position pos:line="29" pos:column="22"/></expr_stmt>

    <if pos:line="31" pos:column="5">if<condition pos:line="31" pos:column="7">(<expr><literal type="char" pos:line="31" pos:column="8">'@'<pos:position pos:line="31" pos:column="11"/></literal> <operator pos:line="31" pos:column="12">==<pos:position pos:line="31" pos:column="14"/></operator> <name><name pos:line="31" pos:column="15">contp<pos:position pos:line="31" pos:column="20"/></name><index pos:line="31" pos:column="20">[<expr><literal type="number" pos:line="31" pos:column="21">0<pos:position pos:line="31" pos:column="22"/></literal></expr>]<pos:position pos:line="31" pos:column="23"/></index></name></expr>)<pos:position pos:line="31" pos:column="24"/></condition><then pos:line="31" pos:column="24"> <block pos:line="31" pos:column="25">{
      <comment type="block" pos:line="32" pos:column="7">/* we use the @-letter to indicate file name(s) */</comment>
      
      <expr_stmt><expr><name pos:line="34" pos:column="7">flags<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">=<pos:position pos:line="34" pos:column="14"/></operator> <name pos:line="34" pos:column="15">HTTPPOST_FILENAME<pos:position pos:line="34" pos:column="32"/></name></expr>;<pos:position pos:line="34" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name pos:line="35" pos:column="7">contp<pos:position pos:line="35" pos:column="12"/></name><operator pos:line="35" pos:column="12">++<pos:position pos:line="35" pos:column="14"/></operator></expr>;<pos:position pos:line="35" pos:column="15"/></expr_stmt>

      <expr_stmt><expr><name pos:line="37" pos:column="7">post<pos:position pos:line="37" pos:column="11"/></name><operator pos:line="37" pos:column="11">=<pos:position pos:line="37" pos:column="12"/></operator><name pos:line="37" pos:column="12">NULL<pos:position pos:line="37" pos:column="16"/></name></expr>;<pos:position pos:line="37" pos:column="17"/></expr_stmt>

      <do pos:line="39" pos:column="7">do <block pos:line="39" pos:column="10">{
	<comment type="block" pos:line="40" pos:column="9">/* since this was a file, it may have a content-type specifier
	   at the end too */</comment>

	<expr_stmt><expr><name pos:line="43" pos:column="9">sep<pos:position pos:line="43" pos:column="12"/></name><operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator><call><name pos:line="43" pos:column="13">strchr<pos:position pos:line="43" pos:column="19"/></name><argument_list pos:line="43" pos:column="19">(<argument><expr><name pos:line="43" pos:column="20">contp<pos:position pos:line="43" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="27">FORM_TYPE_SEPARATOR<pos:position pos:line="43" pos:column="46"/></name></expr></argument>)<pos:position pos:line="43" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><name pos:line="44" pos:column="9">sep2<pos:position pos:line="44" pos:column="13"/></name><operator pos:line="44" pos:column="13">=<pos:position pos:line="44" pos:column="14"/></operator><call><name pos:line="44" pos:column="14">strchr<pos:position pos:line="44" pos:column="20"/></name><argument_list pos:line="44" pos:column="20">(<argument><expr><name pos:line="44" pos:column="21">contp<pos:position pos:line="44" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="28">FORM_FILE_SEPARATOR<pos:position pos:line="44" pos:column="47"/></name></expr></argument>)<pos:position pos:line="44" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="49"/></expr_stmt>

	<comment type="block" pos:line="46" pos:column="9">/* pick the closest */</comment>
	<if pos:line="47" pos:column="9">if<condition pos:line="47" pos:column="11">(<expr><name pos:line="47" pos:column="12">sep2<pos:position pos:line="47" pos:column="16"/></name> <operator pos:line="47" pos:column="17">&amp;&amp;<pos:position pos:line="47" pos:column="27"/></operator> <operator pos:line="47" pos:column="20">(<pos:position pos:line="47" pos:column="21"/></operator><name pos:line="47" pos:column="21">sep2<pos:position pos:line="47" pos:column="25"/></name> <operator pos:line="47" pos:column="26">&lt;<pos:position pos:line="47" pos:column="30"/></operator> <name pos:line="47" pos:column="28">sep<pos:position pos:line="47" pos:column="31"/></name><operator pos:line="47" pos:column="31">)<pos:position pos:line="47" pos:column="32"/></operator></expr>)<pos:position pos:line="47" pos:column="33"/></condition><then pos:line="47" pos:column="33"> <block pos:line="47" pos:column="34">{
	  <expr_stmt><expr><name pos:line="48" pos:column="11">sep<pos:position pos:line="48" pos:column="14"/></name> <operator pos:line="48" pos:column="15">=<pos:position pos:line="48" pos:column="16"/></operator> <name pos:line="48" pos:column="17">sep2<pos:position pos:line="48" pos:column="21"/></name></expr>;<pos:position pos:line="48" pos:column="22"/></expr_stmt>

	  <comment type="block" pos:line="50" pos:column="11">/* no type was specified! */</comment>
	}<pos:position pos:line="51" pos:column="10"/></block></then></if>
	<if pos:line="52" pos:column="9">if<condition pos:line="52" pos:column="11">(<expr><name pos:line="52" pos:column="12">sep<pos:position pos:line="52" pos:column="15"/></name></expr>)<pos:position pos:line="52" pos:column="16"/></condition><then pos:line="52" pos:column="16"> <block pos:line="52" pos:column="17">{

	  <comment type="block" pos:line="54" pos:column="11">/* if we got here on a comma, don't do much */</comment>
	  <if pos:line="55" pos:column="11">if<condition pos:line="55" pos:column="13">(<expr><name pos:line="55" pos:column="14">FORM_FILE_SEPARATOR<pos:position pos:line="55" pos:column="33"/></name> <operator pos:line="55" pos:column="34">!=<pos:position pos:line="55" pos:column="36"/></operator> <operator pos:line="55" pos:column="37">*<pos:position pos:line="55" pos:column="38"/></operator><name pos:line="55" pos:column="38">sep<pos:position pos:line="55" pos:column="41"/></name></expr>)<pos:position pos:line="55" pos:column="42"/></condition><then pos:line="55" pos:column="42">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="13">type<pos:position pos:line="56" pos:column="17"/></name> <operator pos:line="56" pos:column="18">=<pos:position pos:line="56" pos:column="19"/></operator> <call><name pos:line="56" pos:column="20">strstr<pos:position pos:line="56" pos:column="26"/></name><argument_list pos:line="56" pos:column="26">(<argument><expr><name pos:line="56" pos:column="27">sep<pos:position pos:line="56" pos:column="30"/></name><operator pos:line="56" pos:column="30">+<pos:position pos:line="56" pos:column="31"/></operator><literal type="number" pos:line="56" pos:column="31">1<pos:position pos:line="56" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="34">"type="<pos:position pos:line="56" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="43"/></expr_stmt></block></then>
	  <else pos:line="57" pos:column="11">else
	    <block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="13">type<pos:position pos:line="58" pos:column="17"/></name><operator pos:line="58" pos:column="17">=<pos:position pos:line="58" pos:column="18"/></operator><name pos:line="58" pos:column="18">NULL<pos:position pos:line="58" pos:column="22"/></name></expr>;<pos:position pos:line="58" pos:column="23"/></expr_stmt></block></else></if>

	  <expr_stmt><expr><operator pos:line="60" pos:column="11">*<pos:position pos:line="60" pos:column="12"/></operator><name pos:line="60" pos:column="12">sep<pos:position pos:line="60" pos:column="15"/></name><operator pos:line="60" pos:column="15">=<pos:position pos:line="60" pos:column="16"/></operator><literal type="number" pos:line="60" pos:column="16">0<pos:position pos:line="60" pos:column="17"/></literal></expr>;<pos:position pos:line="60" pos:column="18"/></expr_stmt> <comment type="block" pos:line="60" pos:column="19">/* terminate file name at separator */</comment>

	  <if pos:line="62" pos:column="11">if<condition pos:line="62" pos:column="13">(<expr><name pos:line="62" pos:column="14">type<pos:position pos:line="62" pos:column="18"/></name></expr>)<pos:position pos:line="62" pos:column="19"/></condition><then pos:line="62" pos:column="19"> <block pos:line="62" pos:column="20">{
	    <expr_stmt><expr><name pos:line="63" pos:column="13">type<pos:position pos:line="63" pos:column="17"/></name> <operator pos:line="63" pos:column="18">+=<pos:position pos:line="63" pos:column="20"/></operator> <call><name pos:line="63" pos:column="21">strlen<pos:position pos:line="63" pos:column="27"/></name><argument_list pos:line="63" pos:column="27">(<argument><expr><literal type="string" pos:line="63" pos:column="28">"type="<pos:position pos:line="63" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="37"/></expr_stmt>
	    
	    <if pos:line="65" pos:column="13">if<condition pos:line="65" pos:column="15">(<expr><literal type="number" pos:line="65" pos:column="16">2<pos:position pos:line="65" pos:column="17"/></literal> <operator pos:line="65" pos:column="18">!=<pos:position pos:line="65" pos:column="20"/></operator> <call><name pos:line="65" pos:column="21">sscanf<pos:position pos:line="65" pos:column="27"/></name><argument_list pos:line="65" pos:column="27">(<argument><expr><name pos:line="65" pos:column="28">type<pos:position pos:line="65" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="34">"%127[^/]/%127[^,\n]"<pos:position pos:line="65" pos:column="55"/></literal></expr></argument>,
			   <argument><expr><name pos:line="66" pos:column="28">major<pos:position pos:line="66" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="35">minor<pos:position pos:line="66" pos:column="40"/></name></expr></argument>)<pos:position pos:line="66" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="42"/></condition><then pos:line="66" pos:column="42"> <block pos:line="66" pos:column="43">{
	      <expr_stmt><expr><call><name pos:line="67" pos:column="15">fprintf<pos:position pos:line="67" pos:column="22"/></name><argument_list pos:line="67" pos:column="22">(<argument><expr><name pos:line="67" pos:column="23">stderr<pos:position pos:line="67" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="31">"Illegally formatted content-type field!\n"<pos:position pos:line="67" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="76"/></expr_stmt>
              <expr_stmt><expr><call><name pos:line="68" pos:column="15">free<pos:position pos:line="68" pos:column="19"/></name><argument_list pos:line="68" pos:column="19">(<argument><expr><name pos:line="68" pos:column="20">contents<pos:position pos:line="68" pos:column="28"/></name></expr></argument>)<pos:position pos:line="68" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="30"/></expr_stmt>
	      <return pos:line="69" pos:column="15">return <expr><literal type="number" pos:line="69" pos:column="22">2<pos:position pos:line="69" pos:column="23"/></literal></expr>;<pos:position pos:line="69" pos:column="24"/></return> <comment type="block" pos:line="69" pos:column="25">/* illegal content-type syntax! */</comment>
	    }<pos:position pos:line="70" pos:column="14"/></block></then></if>
	    <comment type="block" pos:line="71" pos:column="13">/* now point beyond the content-type specifier */</comment>
	    <expr_stmt><expr><name pos:line="72" pos:column="13">sep<pos:position pos:line="72" pos:column="16"/></name> <operator pos:line="72" pos:column="17">=<pos:position pos:line="72" pos:column="18"/></operator> <operator pos:line="72" pos:column="19">(<pos:position pos:line="72" pos:column="20"/></operator><name pos:line="72" pos:column="20">char<pos:position pos:line="72" pos:column="24"/></name> <operator pos:line="72" pos:column="25">*<pos:position pos:line="72" pos:column="26"/></operator><operator pos:line="72" pos:column="26">)<pos:position pos:line="72" pos:column="27"/></operator><name pos:line="72" pos:column="27">type<pos:position pos:line="72" pos:column="31"/></name> <operator pos:line="72" pos:column="32">+<pos:position pos:line="72" pos:column="33"/></operator> <call><name pos:line="72" pos:column="34">strlen<pos:position pos:line="72" pos:column="40"/></name><argument_list pos:line="72" pos:column="40">(<argument><expr><name pos:line="72" pos:column="41">major<pos:position pos:line="72" pos:column="46"/></name></expr></argument>)<pos:position pos:line="72" pos:column="47"/></argument_list></call><operator pos:line="72" pos:column="47">+<pos:position pos:line="72" pos:column="48"/></operator><call><name pos:line="72" pos:column="48">strlen<pos:position pos:line="72" pos:column="54"/></name><argument_list pos:line="72" pos:column="54">(<argument><expr><name pos:line="72" pos:column="55">minor<pos:position pos:line="72" pos:column="60"/></name></expr></argument>)<pos:position pos:line="72" pos:column="61"/></argument_list></call><operator pos:line="72" pos:column="61">+<pos:position pos:line="72" pos:column="62"/></operator><literal type="number" pos:line="72" pos:column="62">1<pos:position pos:line="72" pos:column="63"/></literal></expr>;<pos:position pos:line="72" pos:column="64"/></expr_stmt>

	    <comment type="block" pos:line="74" pos:column="13">/* find the following comma */</comment>
	    <expr_stmt><expr><name pos:line="75" pos:column="13">sep<pos:position pos:line="75" pos:column="16"/></name><operator pos:line="75" pos:column="16">=<pos:position pos:line="75" pos:column="17"/></operator><call><name pos:line="75" pos:column="17">strchr<pos:position pos:line="75" pos:column="23"/></name><argument_list pos:line="75" pos:column="23">(<argument><expr><name pos:line="75" pos:column="24">sep<pos:position pos:line="75" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="29">FORM_FILE_SEPARATOR<pos:position pos:line="75" pos:column="48"/></name></expr></argument>)<pos:position pos:line="75" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="50"/></expr_stmt>
	  }<pos:position pos:line="76" pos:column="12"/></block></then></if>
	}<pos:position pos:line="77" pos:column="10"/></block></then>
	<else pos:line="78" pos:column="9">else <block pos:line="78" pos:column="14">{
	  <expr_stmt><expr><name pos:line="79" pos:column="11">type<pos:position pos:line="79" pos:column="15"/></name><operator pos:line="79" pos:column="15">=<pos:position pos:line="79" pos:column="16"/></operator><name pos:line="79" pos:column="16">NULL<pos:position pos:line="79" pos:column="20"/></name></expr>;<pos:position pos:line="79" pos:column="21"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="80" pos:column="11">sep<pos:position pos:line="80" pos:column="14"/></name><operator pos:line="80" pos:column="14">=<pos:position pos:line="80" pos:column="15"/></operator><call><name pos:line="80" pos:column="15">strchr<pos:position pos:line="80" pos:column="21"/></name><argument_list pos:line="80" pos:column="21">(<argument><expr><name pos:line="80" pos:column="22">contp<pos:position pos:line="80" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="29">FORM_FILE_SEPARATOR<pos:position pos:line="80" pos:column="48"/></name></expr></argument>)<pos:position pos:line="80" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="81" pos:column="10"/></block></else></if>
	<if pos:line="82" pos:column="9">if<condition pos:line="82" pos:column="11">(<expr><name pos:line="82" pos:column="12">sep<pos:position pos:line="82" pos:column="15"/></name></expr>)<pos:position pos:line="82" pos:column="16"/></condition><then pos:line="82" pos:column="16"> <block pos:line="82" pos:column="17">{
	  <comment type="block" pos:line="83" pos:column="11">/* the next file name starts here */</comment>
	  <expr_stmt><expr><operator pos:line="84" pos:column="11">*<pos:position pos:line="84" pos:column="12"/></operator><name pos:line="84" pos:column="12">sep<pos:position pos:line="84" pos:column="15"/></name> <operator pos:line="84" pos:column="16">=<pos:position pos:line="84" pos:column="17"/></operator><literal type="number" pos:line="84" pos:column="17">0<pos:position pos:line="84" pos:column="18"/></literal></expr>;<pos:position pos:line="84" pos:column="19"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="85" pos:column="11">sep<pos:position pos:line="85" pos:column="14"/></name><operator pos:line="85" pos:column="14">++<pos:position pos:line="85" pos:column="16"/></operator></expr>;<pos:position pos:line="85" pos:column="17"/></expr_stmt>
	}<pos:position pos:line="86" pos:column="10"/></block></then></if>
	<if pos:line="87" pos:column="9">if<condition pos:line="87" pos:column="11">(<expr><operator pos:line="87" pos:column="12">!<pos:position pos:line="87" pos:column="13"/></operator><name pos:line="87" pos:column="13">type<pos:position pos:line="87" pos:column="17"/></name></expr>)<pos:position pos:line="87" pos:column="18"/></condition><then pos:line="87" pos:column="18"> <block pos:line="87" pos:column="19">{
	  <comment type="block" pos:line="88" pos:column="11">/*
	   * No type was specified, we scan through a few well-known
	   * extensions and pick the first we match!
	   */</comment>
	  <struct pos:line="92" pos:column="11">struct <name pos:line="92" pos:column="18">ContentType<pos:position pos:line="92" pos:column="29"/></name> <block pos:line="92" pos:column="30">{<public type="default" pos:line="92" pos:column="31">
	    <decl_stmt><decl><type><specifier pos:line="93" pos:column="13">const<pos:position pos:line="93" pos:column="18"/></specifier> <name pos:line="93" pos:column="19">char<pos:position pos:line="93" pos:column="23"/></name> <modifier pos:line="93" pos:column="24">*<pos:position pos:line="93" pos:column="25"/></modifier></type><name pos:line="93" pos:column="25">extension<pos:position pos:line="93" pos:column="34"/></name></decl>;<pos:position pos:line="93" pos:column="35"/></decl_stmt>
	    <decl_stmt><decl><type><specifier pos:line="94" pos:column="13">const<pos:position pos:line="94" pos:column="18"/></specifier> <name pos:line="94" pos:column="19">char<pos:position pos:line="94" pos:column="23"/></name> <modifier pos:line="94" pos:column="24">*<pos:position pos:line="94" pos:column="25"/></modifier></type><name pos:line="94" pos:column="25">type<pos:position pos:line="94" pos:column="29"/></name></decl>;<pos:position pos:line="94" pos:column="30"/></decl_stmt>
	  <pos:position pos:line="95" pos:column="4"/></public>}<pos:position pos:line="95" pos:column="12"/></block>;<pos:position pos:line="95" pos:column="13"/></struct>
          <decl_stmt><decl><specifier pos:line="96" pos:column="11">static<pos:position pos:line="96" pos:column="17"/></specifier> <type><name><name pos:line="96" pos:column="18">struct<pos:position pos:line="96" pos:column="24"/></name> <name pos:line="96" pos:column="25">ContentType<pos:position pos:line="96" pos:column="36"/></name></name></type> <name><name pos:line="96" pos:column="37">ctts<pos:position pos:line="96" pos:column="41"/></name><index pos:line="96" pos:column="41">[]<pos:position pos:line="96" pos:column="43"/></index></name><init pos:line="96" pos:column="43">=<expr><block pos:line="96" pos:column="44">{
	    <expr><block pos:line="97" pos:column="13">{<expr><literal type="string" pos:line="97" pos:column="14">".gif"<pos:position pos:line="97" pos:column="20"/></literal></expr>,  <expr><literal type="string" pos:line="97" pos:column="23">"image/gif"<pos:position pos:line="97" pos:column="34"/></literal></expr>}<pos:position pos:line="97" pos:column="35"/></block></expr>,
	    <expr><block pos:line="98" pos:column="13">{<expr><literal type="string" pos:line="98" pos:column="14">".jpg"<pos:position pos:line="98" pos:column="20"/></literal></expr>,  <expr><literal type="string" pos:line="98" pos:column="23">"image/jpeg"<pos:position pos:line="98" pos:column="35"/></literal></expr>}<pos:position pos:line="98" pos:column="36"/></block></expr>,
	    <expr><block pos:line="99" pos:column="13">{<expr><literal type="string" pos:line="99" pos:column="14">".jpeg"<pos:position pos:line="99" pos:column="21"/></literal></expr>, <expr><literal type="string" pos:line="99" pos:column="23">"image/jpeg"<pos:position pos:line="99" pos:column="35"/></literal></expr>}<pos:position pos:line="99" pos:column="36"/></block></expr>,
	    <expr><block pos:line="100" pos:column="13">{<expr><literal type="string" pos:line="100" pos:column="14">".txt"<pos:position pos:line="100" pos:column="20"/></literal></expr>,  <expr><literal type="string" pos:line="100" pos:column="23">"text/plain"<pos:position pos:line="100" pos:column="35"/></literal></expr>}<pos:position pos:line="100" pos:column="36"/></block></expr>,
	    <expr><block pos:line="101" pos:column="13">{<expr><literal type="string" pos:line="101" pos:column="14">".html"<pos:position pos:line="101" pos:column="21"/></literal></expr>, <expr><literal type="string" pos:line="101" pos:column="23">"text/plain"<pos:position pos:line="101" pos:column="35"/></literal></expr>}<pos:position pos:line="101" pos:column="36"/></block></expr>
	  }<pos:position pos:line="102" pos:column="12"/></block></expr></init></decl>;<pos:position pos:line="102" pos:column="13"/></decl_stmt>

	  <if pos:line="104" pos:column="11">if<condition pos:line="104" pos:column="13">(<expr><name pos:line="104" pos:column="14">prevtype<pos:position pos:line="104" pos:column="22"/></name></expr>)<pos:position pos:line="104" pos:column="23"/></condition><then pos:line="104" pos:column="23">
	    <comment type="block" pos:line="105" pos:column="13">/* default to the previously set/used! */</comment>
	    <block type="pseudo"><expr_stmt><expr><name pos:line="106" pos:column="13">type<pos:position pos:line="106" pos:column="17"/></name> <operator pos:line="106" pos:column="18">=<pos:position pos:line="106" pos:column="19"/></operator> <name pos:line="106" pos:column="20">prevtype<pos:position pos:line="106" pos:column="28"/></name></expr>;<pos:position pos:line="106" pos:column="29"/></expr_stmt></block></then>
	  <else pos:line="107" pos:column="11">else
	    <comment type="block" pos:line="108" pos:column="13">/* It seems RFC1867 defines no Content-Type to default to
	       text/plain so we don't actually need to set this: */</comment>
	    <block type="pseudo"><expr_stmt><expr><name pos:line="110" pos:column="13">type<pos:position pos:line="110" pos:column="17"/></name> <operator pos:line="110" pos:column="18">=<pos:position pos:line="110" pos:column="19"/></operator> <name pos:line="110" pos:column="20">HTTPPOST_CONTENTTYPE_DEFAULT<pos:position pos:line="110" pos:column="48"/></name></expr>;<pos:position pos:line="110" pos:column="49"/></expr_stmt></block></else></if>

	  <for pos:line="112" pos:column="11">for<control pos:line="112" pos:column="14">(<init><expr><name pos:line="112" pos:column="15">i<pos:position pos:line="112" pos:column="16"/></name><operator pos:line="112" pos:column="16">=<pos:position pos:line="112" pos:column="17"/></operator><literal type="number" pos:line="112" pos:column="17">0<pos:position pos:line="112" pos:column="18"/></literal></expr>;<pos:position pos:line="112" pos:column="19"/></init> <condition><expr><name pos:line="112" pos:column="20">i<pos:position pos:line="112" pos:column="21"/></name><operator pos:line="112" pos:column="21">&lt;<pos:position pos:line="112" pos:column="25"/></operator><sizeof pos:line="112" pos:column="22">sizeof<argument_list pos:line="112" pos:column="28">(<argument><expr><name pos:line="112" pos:column="29">ctts<pos:position pos:line="112" pos:column="33"/></name></expr></argument>)<pos:position pos:line="112" pos:column="34"/></argument_list></sizeof><operator pos:line="112" pos:column="34">/<pos:position pos:line="112" pos:column="35"/></operator><sizeof pos:line="112" pos:column="35">sizeof<argument_list pos:line="112" pos:column="41">(<argument><expr><name><name pos:line="112" pos:column="42">ctts<pos:position pos:line="112" pos:column="46"/></name><index pos:line="112" pos:column="46">[<expr><literal type="number" pos:line="112" pos:column="47">0<pos:position pos:line="112" pos:column="48"/></literal></expr>]<pos:position pos:line="112" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="112" pos:column="50"/></argument_list></sizeof></expr>;<pos:position pos:line="112" pos:column="51"/></condition> <incr><expr><name pos:line="112" pos:column="52">i<pos:position pos:line="112" pos:column="53"/></name><operator pos:line="112" pos:column="53">++<pos:position pos:line="112" pos:column="55"/></operator></expr></incr>)<pos:position pos:line="112" pos:column="56"/></control> <block pos:line="112" pos:column="57">{
	    <if pos:line="113" pos:column="13">if<condition pos:line="113" pos:column="15">(<expr><call><name pos:line="113" pos:column="16">strlen<pos:position pos:line="113" pos:column="22"/></name><argument_list pos:line="113" pos:column="22">(<argument><expr><name pos:line="113" pos:column="23">contp<pos:position pos:line="113" pos:column="28"/></name></expr></argument>)<pos:position pos:line="113" pos:column="29"/></argument_list></call> <operator pos:line="113" pos:column="30">&gt;=<pos:position pos:line="113" pos:column="35"/></operator> <call><name pos:line="113" pos:column="33">strlen<pos:position pos:line="113" pos:column="39"/></name><argument_list pos:line="113" pos:column="39">(<argument><expr><name><name pos:line="113" pos:column="40">ctts<pos:position pos:line="113" pos:column="44"/></name><index pos:line="113" pos:column="44">[<expr><name pos:line="113" pos:column="45">i<pos:position pos:line="113" pos:column="46"/></name></expr>]<pos:position pos:line="113" pos:column="47"/></index></name><operator pos:line="113" pos:column="47">.<pos:position pos:line="113" pos:column="48"/></operator><name pos:line="113" pos:column="48">extension<pos:position pos:line="113" pos:column="57"/></name></expr></argument>)<pos:position pos:line="113" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="113" pos:column="59"/></condition><then pos:line="113" pos:column="59"> <block pos:line="113" pos:column="60">{
	      <if pos:line="114" pos:column="15">if<condition pos:line="114" pos:column="17">(<expr><call><name pos:line="114" pos:column="18">strequal<pos:position pos:line="114" pos:column="26"/></name><argument_list pos:line="114" pos:column="26">(<argument><expr><name pos:line="114" pos:column="27">contp<pos:position pos:line="114" pos:column="32"/></name> <operator pos:line="114" pos:column="33">+<pos:position pos:line="114" pos:column="34"/></operator>
			  <call><name pos:line="115" pos:column="27">strlen<pos:position pos:line="115" pos:column="33"/></name><argument_list pos:line="115" pos:column="33">(<argument><expr><name pos:line="115" pos:column="34">contp<pos:position pos:line="115" pos:column="39"/></name></expr></argument>)<pos:position pos:line="115" pos:column="40"/></argument_list></call> <operator pos:line="115" pos:column="41">-<pos:position pos:line="115" pos:column="42"/></operator> <call><name pos:line="115" pos:column="43">strlen<pos:position pos:line="115" pos:column="49"/></name><argument_list pos:line="115" pos:column="49">(<argument><expr><name><name pos:line="115" pos:column="50">ctts<pos:position pos:line="115" pos:column="54"/></name><index pos:line="115" pos:column="54">[<expr><name pos:line="115" pos:column="55">i<pos:position pos:line="115" pos:column="56"/></name></expr>]<pos:position pos:line="115" pos:column="57"/></index></name><operator pos:line="115" pos:column="57">.<pos:position pos:line="115" pos:column="58"/></operator><name pos:line="115" pos:column="58">extension<pos:position pos:line="115" pos:column="67"/></name></expr></argument>)<pos:position pos:line="115" pos:column="68"/></argument_list></call></expr></argument>,
			  <argument><expr><name><name pos:line="116" pos:column="27">ctts<pos:position pos:line="116" pos:column="31"/></name><index pos:line="116" pos:column="31">[<expr><name pos:line="116" pos:column="32">i<pos:position pos:line="116" pos:column="33"/></name></expr>]<pos:position pos:line="116" pos:column="34"/></index></name><operator pos:line="116" pos:column="34">.<pos:position pos:line="116" pos:column="35"/></operator><name pos:line="116" pos:column="35">extension<pos:position pos:line="116" pos:column="44"/></name></expr></argument>)<pos:position pos:line="116" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="116" pos:column="46"/></condition><then pos:line="116" pos:column="46"> <block pos:line="116" pos:column="47">{
		<expr_stmt><expr><name pos:line="117" pos:column="17">type<pos:position pos:line="117" pos:column="21"/></name> <operator pos:line="117" pos:column="22">=<pos:position pos:line="117" pos:column="23"/></operator> <name><name pos:line="117" pos:column="24">ctts<pos:position pos:line="117" pos:column="28"/></name><index pos:line="117" pos:column="28">[<expr><name pos:line="117" pos:column="29">i<pos:position pos:line="117" pos:column="30"/></name></expr>]<pos:position pos:line="117" pos:column="31"/></index></name><operator pos:line="117" pos:column="31">.<pos:position pos:line="117" pos:column="32"/></operator><name pos:line="117" pos:column="32">type<pos:position pos:line="117" pos:column="36"/></name></expr>;<pos:position pos:line="117" pos:column="37"/></expr_stmt>
		<break pos:line="118" pos:column="17">break;<pos:position pos:line="118" pos:column="23"/></break>
	      }<pos:position pos:line="119" pos:column="16"/></block></then></if>	      
	    }<pos:position pos:line="120" pos:column="14"/></block></then></if>
	  }<pos:position pos:line="121" pos:column="12"/></block></for>
	  <comment type="block" pos:line="122" pos:column="11">/* we have a type by now */</comment>
	}<pos:position pos:line="123" pos:column="10"/></block></then></if>

	<if pos:line="125" pos:column="9">if<condition pos:line="125" pos:column="11">(<expr><name pos:line="125" pos:column="12">NULL<pos:position pos:line="125" pos:column="16"/></name> <operator pos:line="125" pos:column="17">==<pos:position pos:line="125" pos:column="19"/></operator> <name pos:line="125" pos:column="20">post<pos:position pos:line="125" pos:column="24"/></name></expr>)<pos:position pos:line="125" pos:column="25"/></condition><then pos:line="125" pos:column="25"> <block pos:line="125" pos:column="26">{
	  <comment type="block" pos:line="126" pos:column="11">/* For the first file name, we allocate and initiate the main list
	     node */</comment>

	  <expr_stmt><expr><name pos:line="129" pos:column="11">post<pos:position pos:line="129" pos:column="15"/></name> <operator pos:line="129" pos:column="16">=<pos:position pos:line="129" pos:column="17"/></operator> <operator pos:line="129" pos:column="18">(<pos:position pos:line="129" pos:column="19"/></operator>struct <name pos:line="129" pos:column="26">HttpPost<pos:position pos:line="129" pos:column="34"/></name> <operator pos:line="129" pos:column="35">*<pos:position pos:line="129" pos:column="36"/></operator><operator pos:line="129" pos:column="36">)<pos:position pos:line="129" pos:column="37"/></operator><call><name pos:line="129" pos:column="37">malloc<pos:position pos:line="129" pos:column="43"/></name><argument_list pos:line="129" pos:column="43">(<argument><expr><sizeof pos:line="129" pos:column="44">sizeof<argument_list pos:line="129" pos:column="50">(<argument><expr pos:line="129" pos:column="51">struct <name pos:line="129" pos:column="58">HttpPost<pos:position pos:line="129" pos:column="66"/></name></expr></argument>)<pos:position pos:line="129" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="129" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="69"/></expr_stmt>
	  <if pos:line="130" pos:column="11">if<condition pos:line="130" pos:column="13">(<expr><name pos:line="130" pos:column="14">post<pos:position pos:line="130" pos:column="18"/></name></expr>)<pos:position pos:line="130" pos:column="19"/></condition><then pos:line="130" pos:column="19"> <block pos:line="130" pos:column="20">{
	    <expr_stmt><expr><call><name pos:line="131" pos:column="13">memset<pos:position pos:line="131" pos:column="19"/></name><argument_list pos:line="131" pos:column="19">(<argument><expr><name pos:line="131" pos:column="20">post<pos:position pos:line="131" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="131" pos:column="26">0<pos:position pos:line="131" pos:column="27"/></literal></expr></argument>, <argument><expr><sizeof pos:line="131" pos:column="29">sizeof<argument_list pos:line="131" pos:column="35">(<argument><expr pos:line="131" pos:column="36">struct <name pos:line="131" pos:column="43">HttpPost<pos:position pos:line="131" pos:column="51"/></name></expr></argument>)<pos:position pos:line="131" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="131" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="54"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="132" pos:column="13">GetStr<pos:position pos:line="132" pos:column="19"/></name><argument_list pos:line="132" pos:column="19">(<argument><expr><operator pos:line="132" pos:column="20">&amp;<pos:position pos:line="132" pos:column="25"/></operator><name><name pos:line="132" pos:column="21">post<pos:position pos:line="132" pos:column="25"/></name><operator pos:line="132" pos:column="25">-&gt;<pos:position pos:line="132" pos:column="30"/></operator><name pos:line="132" pos:column="27">name<pos:position pos:line="132" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="33">name<pos:position pos:line="132" pos:column="37"/></name></expr></argument>)<pos:position pos:line="132" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="39"/></expr_stmt>      <comment type="block" pos:line="132" pos:column="45">/* get the name */</comment>
	    <expr_stmt><expr><call><name pos:line="133" pos:column="13">GetStr<pos:position pos:line="133" pos:column="19"/></name><argument_list pos:line="133" pos:column="19">(<argument><expr><operator pos:line="133" pos:column="20">&amp;<pos:position pos:line="133" pos:column="25"/></operator><name><name pos:line="133" pos:column="21">post<pos:position pos:line="133" pos:column="25"/></name><operator pos:line="133" pos:column="25">-&gt;<pos:position pos:line="133" pos:column="30"/></operator><name pos:line="133" pos:column="27">contents<pos:position pos:line="133" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="37">contp<pos:position pos:line="133" pos:column="42"/></name></expr></argument>)<pos:position pos:line="133" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="44"/></expr_stmt> <comment type="block" pos:line="133" pos:column="45">/* get the contents */</comment>
            <expr_stmt><expr><name><name pos:line="134" pos:column="13">post<pos:position pos:line="134" pos:column="17"/></name><operator pos:line="134" pos:column="17">-&gt;<pos:position pos:line="134" pos:column="22"/></operator><name pos:line="134" pos:column="19">contentslength<pos:position pos:line="134" pos:column="33"/></name></name> <operator pos:line="134" pos:column="34">=<pos:position pos:line="134" pos:column="35"/></operator> <literal type="number" pos:line="134" pos:column="36">0<pos:position pos:line="134" pos:column="37"/></literal></expr>;<pos:position pos:line="134" pos:column="38"/></expr_stmt>
	    <expr_stmt><expr><name><name pos:line="135" pos:column="13">post<pos:position pos:line="135" pos:column="17"/></name><operator pos:line="135" pos:column="17">-&gt;<pos:position pos:line="135" pos:column="22"/></operator><name pos:line="135" pos:column="19">flags<pos:position pos:line="135" pos:column="24"/></name></name> <operator pos:line="135" pos:column="25">=<pos:position pos:line="135" pos:column="26"/></operator> <name pos:line="135" pos:column="27">flags<pos:position pos:line="135" pos:column="32"/></name></expr>;<pos:position pos:line="135" pos:column="33"/></expr_stmt>
	    <if pos:line="136" pos:column="13">if<condition pos:line="136" pos:column="15">(<expr><name pos:line="136" pos:column="16">type<pos:position pos:line="136" pos:column="20"/></name></expr>)<pos:position pos:line="136" pos:column="21"/></condition><then pos:line="136" pos:column="21"> <block pos:line="136" pos:column="22">{
	      <expr_stmt><expr><call><name pos:line="137" pos:column="15">GetStr<pos:position pos:line="137" pos:column="21"/></name><argument_list pos:line="137" pos:column="21">(<argument><expr><operator pos:line="137" pos:column="22">&amp;<pos:position pos:line="137" pos:column="27"/></operator><name><name pos:line="137" pos:column="23">post<pos:position pos:line="137" pos:column="27"/></name><operator pos:line="137" pos:column="27">-&gt;<pos:position pos:line="137" pos:column="32"/></operator><name pos:line="137" pos:column="29">contenttype<pos:position pos:line="137" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="137" pos:column="42">(<pos:position pos:line="137" pos:column="43"/></operator><name pos:line="137" pos:column="43">char<pos:position pos:line="137" pos:column="47"/></name> <operator pos:line="137" pos:column="48">*<pos:position pos:line="137" pos:column="49"/></operator><operator pos:line="137" pos:column="49">)<pos:position pos:line="137" pos:column="50"/></operator><name pos:line="137" pos:column="50">type<pos:position pos:line="137" pos:column="54"/></name></expr></argument>)<pos:position pos:line="137" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="56"/></expr_stmt> <comment type="block" pos:line="137" pos:column="57">/* get type */</comment>
	      <expr_stmt><expr><name pos:line="138" pos:column="15">prevtype<pos:position pos:line="138" pos:column="23"/></name><operator pos:line="138" pos:column="23">=<pos:position pos:line="138" pos:column="24"/></operator><name><name pos:line="138" pos:column="24">post<pos:position pos:line="138" pos:column="28"/></name><operator pos:line="138" pos:column="28">-&gt;<pos:position pos:line="138" pos:column="33"/></operator><name pos:line="138" pos:column="30">contenttype<pos:position pos:line="138" pos:column="41"/></name></name></expr>;<pos:position pos:line="138" pos:column="42"/></expr_stmt> <comment type="block" pos:line="138" pos:column="43">/* point to the allocated string! */</comment>
	    }<pos:position pos:line="139" pos:column="14"/></block></then></if>
	    <comment type="block" pos:line="140" pos:column="13">/* make the previous point to this */</comment>
	    <if pos:line="141" pos:column="13">if<condition pos:line="141" pos:column="15">(<expr><operator pos:line="141" pos:column="16">*<pos:position pos:line="141" pos:column="17"/></operator><name pos:line="141" pos:column="17">last_post<pos:position pos:line="141" pos:column="26"/></name></expr>)<pos:position pos:line="141" pos:column="27"/></condition><then pos:line="141" pos:column="27">
	      <block type="pseudo"><expr_stmt><expr><name><operator pos:line="142" pos:column="15">(<pos:position pos:line="142" pos:column="16"/></operator><operator pos:line="142" pos:column="16">*<pos:position pos:line="142" pos:column="17"/></operator><name pos:line="142" pos:column="17">last_post<pos:position pos:line="142" pos:column="26"/></name><operator pos:line="142" pos:column="26">)<pos:position pos:line="142" pos:column="27"/></operator><operator pos:line="142" pos:column="27">-&gt;<pos:position pos:line="142" pos:column="32"/></operator><name pos:line="142" pos:column="29">next<pos:position pos:line="142" pos:column="33"/></name></name> <operator pos:line="142" pos:column="34">=<pos:position pos:line="142" pos:column="35"/></operator> <name pos:line="142" pos:column="36">post<pos:position pos:line="142" pos:column="40"/></name></expr>;<pos:position pos:line="142" pos:column="41"/></expr_stmt></block></then>
	    <else pos:line="143" pos:column="13">else
	      <block type="pseudo"><expr_stmt><expr><operator pos:line="144" pos:column="15">(<pos:position pos:line="144" pos:column="16"/></operator><operator pos:line="144" pos:column="16">*<pos:position pos:line="144" pos:column="17"/></operator><name pos:line="144" pos:column="17">httppost<pos:position pos:line="144" pos:column="25"/></name><operator pos:line="144" pos:column="25">)<pos:position pos:line="144" pos:column="26"/></operator> <operator pos:line="144" pos:column="27">=<pos:position pos:line="144" pos:column="28"/></operator> <name pos:line="144" pos:column="29">post<pos:position pos:line="144" pos:column="33"/></name></expr>;<pos:position pos:line="144" pos:column="34"/></expr_stmt></block></else></if>

	    <expr_stmt><expr><operator pos:line="146" pos:column="13">(<pos:position pos:line="146" pos:column="14"/></operator><operator pos:line="146" pos:column="14">*<pos:position pos:line="146" pos:column="15"/></operator><name pos:line="146" pos:column="15">last_post<pos:position pos:line="146" pos:column="24"/></name><operator pos:line="146" pos:column="24">)<pos:position pos:line="146" pos:column="25"/></operator> <operator pos:line="146" pos:column="26">=<pos:position pos:line="146" pos:column="27"/></operator> <name pos:line="146" pos:column="28">post<pos:position pos:line="146" pos:column="32"/></name></expr>;<pos:position pos:line="146" pos:column="33"/></expr_stmt>	  
	  }<pos:position pos:line="147" pos:column="12"/></block></then></if>

	}<pos:position pos:line="149" pos:column="10"/></block></then>
	<else pos:line="150" pos:column="9">else <block pos:line="150" pos:column="14">{
	  <comment type="block" pos:line="151" pos:column="11">/* we add a file name to the previously allocated node, known as
             'post' now */</comment>
	  <expr_stmt><expr><name pos:line="153" pos:column="11">subpost<pos:position pos:line="153" pos:column="18"/></name> <operator pos:line="153" pos:column="19">=<pos:position pos:line="153" pos:column="20"/></operator><operator pos:line="153" pos:column="20">(<pos:position pos:line="153" pos:column="21"/></operator>struct <name pos:line="153" pos:column="28">HttpPost<pos:position pos:line="153" pos:column="36"/></name> <operator pos:line="153" pos:column="37">*<pos:position pos:line="153" pos:column="38"/></operator><operator pos:line="153" pos:column="38">)<pos:position pos:line="153" pos:column="39"/></operator><call><name pos:line="153" pos:column="39">malloc<pos:position pos:line="153" pos:column="45"/></name><argument_list pos:line="153" pos:column="45">(<argument><expr><sizeof pos:line="153" pos:column="46">sizeof<argument_list pos:line="153" pos:column="52">(<argument><expr pos:line="153" pos:column="53">struct <name pos:line="153" pos:column="60">HttpPost<pos:position pos:line="153" pos:column="68"/></name></expr></argument>)<pos:position pos:line="153" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="153" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="71"/></expr_stmt>
	  <if pos:line="154" pos:column="11">if<condition pos:line="154" pos:column="13">(<expr><name pos:line="154" pos:column="14">subpost<pos:position pos:line="154" pos:column="21"/></name></expr>)<pos:position pos:line="154" pos:column="22"/></condition><then pos:line="154" pos:column="22"> <block pos:line="154" pos:column="23">{
	     <expr_stmt><expr><call><name pos:line="155" pos:column="14">memset<pos:position pos:line="155" pos:column="20"/></name><argument_list pos:line="155" pos:column="20">(<argument><expr><name pos:line="155" pos:column="21">subpost<pos:position pos:line="155" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="155" pos:column="30">0<pos:position pos:line="155" pos:column="31"/></literal></expr></argument>, <argument><expr><sizeof pos:line="155" pos:column="33">sizeof<argument_list pos:line="155" pos:column="39">(<argument><expr pos:line="155" pos:column="40">struct <name pos:line="155" pos:column="47">HttpPost<pos:position pos:line="155" pos:column="55"/></name></expr></argument>)<pos:position pos:line="155" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="155" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="58"/></expr_stmt>
	     <expr_stmt><expr><call><name pos:line="156" pos:column="14">GetStr<pos:position pos:line="156" pos:column="20"/></name><argument_list pos:line="156" pos:column="20">(<argument><expr><operator pos:line="156" pos:column="21">&amp;<pos:position pos:line="156" pos:column="26"/></operator><name><name pos:line="156" pos:column="22">subpost<pos:position pos:line="156" pos:column="29"/></name><operator pos:line="156" pos:column="29">-&gt;<pos:position pos:line="156" pos:column="34"/></operator><name pos:line="156" pos:column="31">name<pos:position pos:line="156" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="156" pos:column="37">name<pos:position pos:line="156" pos:column="41"/></name></expr></argument>)<pos:position pos:line="156" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="43"/></expr_stmt>      <comment type="block" pos:line="156" pos:column="49">/* get the name */</comment>
	     <expr_stmt><expr><call><name pos:line="157" pos:column="14">GetStr<pos:position pos:line="157" pos:column="20"/></name><argument_list pos:line="157" pos:column="20">(<argument><expr><operator pos:line="157" pos:column="21">&amp;<pos:position pos:line="157" pos:column="26"/></operator><name><name pos:line="157" pos:column="22">subpost<pos:position pos:line="157" pos:column="29"/></name><operator pos:line="157" pos:column="29">-&gt;<pos:position pos:line="157" pos:column="34"/></operator><name pos:line="157" pos:column="31">contents<pos:position pos:line="157" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="157" pos:column="41">contp<pos:position pos:line="157" pos:column="46"/></name></expr></argument>)<pos:position pos:line="157" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="48"/></expr_stmt> <comment type="block" pos:line="157" pos:column="49">/* get the contents */</comment>
             <expr_stmt><expr><name><name pos:line="158" pos:column="14">subpost<pos:position pos:line="158" pos:column="21"/></name><operator pos:line="158" pos:column="21">-&gt;<pos:position pos:line="158" pos:column="26"/></operator><name pos:line="158" pos:column="23">contentslength<pos:position pos:line="158" pos:column="37"/></name></name> <operator pos:line="158" pos:column="38">=<pos:position pos:line="158" pos:column="39"/></operator> <literal type="number" pos:line="158" pos:column="40">0<pos:position pos:line="158" pos:column="41"/></literal></expr>;<pos:position pos:line="158" pos:column="42"/></expr_stmt>
	     <expr_stmt><expr><name><name pos:line="159" pos:column="14">subpost<pos:position pos:line="159" pos:column="21"/></name><operator pos:line="159" pos:column="21">-&gt;<pos:position pos:line="159" pos:column="26"/></operator><name pos:line="159" pos:column="23">flags<pos:position pos:line="159" pos:column="28"/></name></name> <operator pos:line="159" pos:column="29">=<pos:position pos:line="159" pos:column="30"/></operator> <name pos:line="159" pos:column="31">flags<pos:position pos:line="159" pos:column="36"/></name></expr>;<pos:position pos:line="159" pos:column="37"/></expr_stmt>
	     <if pos:line="160" pos:column="14">if<condition pos:line="160" pos:column="16">(<expr><name pos:line="160" pos:column="17">type<pos:position pos:line="160" pos:column="21"/></name></expr>)<pos:position pos:line="160" pos:column="22"/></condition><then pos:line="160" pos:column="22"> <block pos:line="160" pos:column="23">{
	       <expr_stmt><expr><call><name pos:line="161" pos:column="16">GetStr<pos:position pos:line="161" pos:column="22"/></name><argument_list pos:line="161" pos:column="22">(<argument><expr><operator pos:line="161" pos:column="23">&amp;<pos:position pos:line="161" pos:column="28"/></operator><name><name pos:line="161" pos:column="24">subpost<pos:position pos:line="161" pos:column="31"/></name><operator pos:line="161" pos:column="31">-&gt;<pos:position pos:line="161" pos:column="36"/></operator><name pos:line="161" pos:column="33">contenttype<pos:position pos:line="161" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="161" pos:column="46">(<pos:position pos:line="161" pos:column="47"/></operator><name pos:line="161" pos:column="47">char<pos:position pos:line="161" pos:column="51"/></name> <operator pos:line="161" pos:column="52">*<pos:position pos:line="161" pos:column="53"/></operator><operator pos:line="161" pos:column="53">)<pos:position pos:line="161" pos:column="54"/></operator><name pos:line="161" pos:column="54">type<pos:position pos:line="161" pos:column="58"/></name></expr></argument>)<pos:position pos:line="161" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="60"/></expr_stmt> <comment type="block" pos:line="161" pos:column="61">/* get type */</comment>
	       <expr_stmt><expr><name pos:line="162" pos:column="16">prevtype<pos:position pos:line="162" pos:column="24"/></name><operator pos:line="162" pos:column="24">=<pos:position pos:line="162" pos:column="25"/></operator><name><name pos:line="162" pos:column="25">subpost<pos:position pos:line="162" pos:column="32"/></name><operator pos:line="162" pos:column="32">-&gt;<pos:position pos:line="162" pos:column="37"/></operator><name pos:line="162" pos:column="34">contenttype<pos:position pos:line="162" pos:column="45"/></name></name></expr>;<pos:position pos:line="162" pos:column="46"/></expr_stmt> <comment type="block" pos:line="162" pos:column="47">/* point to allocated string! */</comment>
	     }<pos:position pos:line="163" pos:column="15"/></block></then></if>
	     <comment type="block" pos:line="164" pos:column="14">/* now, point our 'more' to the original 'more' */</comment>
	     <expr_stmt><expr><name><name pos:line="165" pos:column="14">subpost<pos:position pos:line="165" pos:column="21"/></name><operator pos:line="165" pos:column="21">-&gt;<pos:position pos:line="165" pos:column="26"/></operator><name pos:line="165" pos:column="23">more<pos:position pos:line="165" pos:column="27"/></name></name> <operator pos:line="165" pos:column="28">=<pos:position pos:line="165" pos:column="29"/></operator> <name><name pos:line="165" pos:column="30">post<pos:position pos:line="165" pos:column="34"/></name><operator pos:line="165" pos:column="34">-&gt;<pos:position pos:line="165" pos:column="39"/></operator><name pos:line="165" pos:column="36">more<pos:position pos:line="165" pos:column="40"/></name></name></expr>;<pos:position pos:line="165" pos:column="41"/></expr_stmt>

	     <comment type="block" pos:line="167" pos:column="14">/* then move the original 'more' to point to ourselves */</comment>
	     <expr_stmt><expr><name><name pos:line="168" pos:column="14">post<pos:position pos:line="168" pos:column="18"/></name><operator pos:line="168" pos:column="18">-&gt;<pos:position pos:line="168" pos:column="23"/></operator><name pos:line="168" pos:column="20">more<pos:position pos:line="168" pos:column="24"/></name></name> <operator pos:line="168" pos:column="25">=<pos:position pos:line="168" pos:column="26"/></operator> <name pos:line="168" pos:column="27">subpost<pos:position pos:line="168" pos:column="34"/></name></expr>;<pos:position pos:line="168" pos:column="35"/></expr_stmt>	     
	  }<pos:position pos:line="169" pos:column="12"/></block></then></if>
	}<pos:position pos:line="170" pos:column="10"/></block></else></if>
	<expr_stmt><expr><name pos:line="171" pos:column="9">contp<pos:position pos:line="171" pos:column="14"/></name> <operator pos:line="171" pos:column="15">=<pos:position pos:line="171" pos:column="16"/></operator> <name pos:line="171" pos:column="17">sep<pos:position pos:line="171" pos:column="20"/></name></expr>;<pos:position pos:line="171" pos:column="21"/></expr_stmt> <comment type="block" pos:line="171" pos:column="22">/* move the contents pointer to after the separator */</comment>
      }<pos:position pos:line="172" pos:column="8"/></block> while<condition pos:line="172" pos:column="14">(<expr><name pos:line="172" pos:column="15">sep<pos:position pos:line="172" pos:column="18"/></name> <operator pos:line="172" pos:column="19">&amp;&amp;<pos:position pos:line="172" pos:column="29"/></operator> <operator pos:line="172" pos:column="22">*<pos:position pos:line="172" pos:column="23"/></operator><name pos:line="172" pos:column="23">sep<pos:position pos:line="172" pos:column="26"/></name></expr>)<pos:position pos:line="172" pos:column="27"/></condition>;<pos:position pos:line="172" pos:column="28"/></do> <comment type="block" pos:line="172" pos:column="29">/* loop if there's another file name */</comment>
    }<pos:position pos:line="173" pos:column="6"/></block></then>
    <else pos:line="174" pos:column="5">else <block pos:line="174" pos:column="10">{
      <expr_stmt><expr><name pos:line="175" pos:column="7">post<pos:position pos:line="175" pos:column="11"/></name> <operator pos:line="175" pos:column="12">=<pos:position pos:line="175" pos:column="13"/></operator> <operator pos:line="175" pos:column="14">(<pos:position pos:line="175" pos:column="15"/></operator>struct <name pos:line="175" pos:column="22">HttpPost<pos:position pos:line="175" pos:column="30"/></name> <operator pos:line="175" pos:column="31">*<pos:position pos:line="175" pos:column="32"/></operator><operator pos:line="175" pos:column="32">)<pos:position pos:line="175" pos:column="33"/></operator><call><name pos:line="175" pos:column="33">malloc<pos:position pos:line="175" pos:column="39"/></name><argument_list pos:line="175" pos:column="39">(<argument><expr><sizeof pos:line="175" pos:column="40">sizeof<argument_list pos:line="175" pos:column="46">(<argument><expr pos:line="175" pos:column="47">struct <name pos:line="175" pos:column="54">HttpPost<pos:position pos:line="175" pos:column="62"/></name></expr></argument>)<pos:position pos:line="175" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="175" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="65"/></expr_stmt>
      <if pos:line="176" pos:column="7">if<condition pos:line="176" pos:column="9">(<expr><name pos:line="176" pos:column="10">post<pos:position pos:line="176" pos:column="14"/></name></expr>)<pos:position pos:line="176" pos:column="15"/></condition><then pos:line="176" pos:column="15"> <block pos:line="176" pos:column="16">{
	<expr_stmt><expr><call><name pos:line="177" pos:column="9">memset<pos:position pos:line="177" pos:column="15"/></name><argument_list pos:line="177" pos:column="15">(<argument><expr><name pos:line="177" pos:column="16">post<pos:position pos:line="177" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="177" pos:column="22">0<pos:position pos:line="177" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="177" pos:column="25">sizeof<argument_list pos:line="177" pos:column="31">(<argument><expr pos:line="177" pos:column="32">struct <name pos:line="177" pos:column="39">HttpPost<pos:position pos:line="177" pos:column="47"/></name></expr></argument>)<pos:position pos:line="177" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="177" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="178" pos:column="9">GetStr<pos:position pos:line="178" pos:column="15"/></name><argument_list pos:line="178" pos:column="15">(<argument><expr><operator pos:line="178" pos:column="16">&amp;<pos:position pos:line="178" pos:column="21"/></operator><name><name pos:line="178" pos:column="17">post<pos:position pos:line="178" pos:column="21"/></name><operator pos:line="178" pos:column="21">-&gt;<pos:position pos:line="178" pos:column="26"/></operator><name pos:line="178" pos:column="23">name<pos:position pos:line="178" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="29">name<pos:position pos:line="178" pos:column="33"/></name></expr></argument>)<pos:position pos:line="178" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="35"/></expr_stmt>      <comment type="block" pos:line="178" pos:column="41">/* get the name */</comment>
	<if pos:line="179" pos:column="9">if<condition pos:line="179" pos:column="11">( <expr><name><name pos:line="179" pos:column="13">contp<pos:position pos:line="179" pos:column="18"/></name><index pos:line="179" pos:column="18">[<expr><literal type="number" pos:line="179" pos:column="19">0<pos:position pos:line="179" pos:column="20"/></literal></expr>]<pos:position pos:line="179" pos:column="21"/></index></name><operator pos:line="179" pos:column="21">==<pos:position pos:line="179" pos:column="23"/></operator><literal type="char" pos:line="179" pos:column="23">'&lt;'<pos:position pos:line="179" pos:column="29"/></literal></expr> )<pos:position pos:line="179" pos:column="28"/></condition><then pos:line="179" pos:column="28"> <block pos:line="179" pos:column="29">{
	  <expr_stmt><expr><call><name pos:line="180" pos:column="11">GetStr<pos:position pos:line="180" pos:column="17"/></name><argument_list pos:line="180" pos:column="17">(<argument><expr><operator pos:line="180" pos:column="18">&amp;<pos:position pos:line="180" pos:column="23"/></operator><name><name pos:line="180" pos:column="19">post<pos:position pos:line="180" pos:column="23"/></name><operator pos:line="180" pos:column="23">-&gt;<pos:position pos:line="180" pos:column="28"/></operator><name pos:line="180" pos:column="25">contents<pos:position pos:line="180" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="35">contp<pos:position pos:line="180" pos:column="40"/></name><operator pos:line="180" pos:column="40">+<pos:position pos:line="180" pos:column="41"/></operator><literal type="number" pos:line="180" pos:column="41">1<pos:position pos:line="180" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="180" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="44"/></expr_stmt> <comment type="block" pos:line="180" pos:column="45">/* get the contents */</comment>
          <expr_stmt><expr><name><name pos:line="181" pos:column="11">post<pos:position pos:line="181" pos:column="15"/></name><operator pos:line="181" pos:column="15">-&gt;<pos:position pos:line="181" pos:column="20"/></operator><name pos:line="181" pos:column="17">contentslength<pos:position pos:line="181" pos:column="31"/></name></name> <operator pos:line="181" pos:column="32">=<pos:position pos:line="181" pos:column="33"/></operator> <literal type="number" pos:line="181" pos:column="34">0<pos:position pos:line="181" pos:column="35"/></literal></expr>;<pos:position pos:line="181" pos:column="36"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="182" pos:column="11">post<pos:position pos:line="182" pos:column="15"/></name><operator pos:line="182" pos:column="15">-&gt;<pos:position pos:line="182" pos:column="20"/></operator><name pos:line="182" pos:column="17">flags<pos:position pos:line="182" pos:column="22"/></name></name> <operator pos:line="182" pos:column="23">=<pos:position pos:line="182" pos:column="24"/></operator> <name pos:line="182" pos:column="25">HTTPPOST_READFILE<pos:position pos:line="182" pos:column="42"/></name></expr>;<pos:position pos:line="182" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="183" pos:column="10"/></block></then>
	<else pos:line="184" pos:column="9">else <block pos:line="184" pos:column="14">{
	  <expr_stmt><expr><call><name pos:line="185" pos:column="11">GetStr<pos:position pos:line="185" pos:column="17"/></name><argument_list pos:line="185" pos:column="17">(<argument><expr><operator pos:line="185" pos:column="18">&amp;<pos:position pos:line="185" pos:column="23"/></operator><name><name pos:line="185" pos:column="19">post<pos:position pos:line="185" pos:column="23"/></name><operator pos:line="185" pos:column="23">-&gt;<pos:position pos:line="185" pos:column="28"/></operator><name pos:line="185" pos:column="25">contents<pos:position pos:line="185" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="185" pos:column="35">contp<pos:position pos:line="185" pos:column="40"/></name></expr></argument>)<pos:position pos:line="185" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="185" pos:column="42"/></expr_stmt> <comment type="block" pos:line="185" pos:column="43">/* get the contents */</comment>
          <expr_stmt><expr><name><name pos:line="186" pos:column="11">post<pos:position pos:line="186" pos:column="15"/></name><operator pos:line="186" pos:column="15">-&gt;<pos:position pos:line="186" pos:column="20"/></operator><name pos:line="186" pos:column="17">contentslength<pos:position pos:line="186" pos:column="31"/></name></name> <operator pos:line="186" pos:column="32">=<pos:position pos:line="186" pos:column="33"/></operator> <literal type="number" pos:line="186" pos:column="34">0<pos:position pos:line="186" pos:column="35"/></literal></expr>;<pos:position pos:line="186" pos:column="36"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="187" pos:column="11">post<pos:position pos:line="187" pos:column="15"/></name><operator pos:line="187" pos:column="15">-&gt;<pos:position pos:line="187" pos:column="20"/></operator><name pos:line="187" pos:column="17">flags<pos:position pos:line="187" pos:column="22"/></name></name> <operator pos:line="187" pos:column="23">=<pos:position pos:line="187" pos:column="24"/></operator> <literal type="number" pos:line="187" pos:column="25">0<pos:position pos:line="187" pos:column="26"/></literal></expr>;<pos:position pos:line="187" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="188" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="190" pos:column="9">/* make the previous point to this */</comment>
	<if pos:line="191" pos:column="9">if<condition pos:line="191" pos:column="11">(<expr><operator pos:line="191" pos:column="12">*<pos:position pos:line="191" pos:column="13"/></operator><name pos:line="191" pos:column="13">last_post<pos:position pos:line="191" pos:column="22"/></name></expr>)<pos:position pos:line="191" pos:column="23"/></condition><then pos:line="191" pos:column="23">
	  <block type="pseudo"><expr_stmt><expr><name><operator pos:line="192" pos:column="11">(<pos:position pos:line="192" pos:column="12"/></operator><operator pos:line="192" pos:column="12">*<pos:position pos:line="192" pos:column="13"/></operator><name pos:line="192" pos:column="13">last_post<pos:position pos:line="192" pos:column="22"/></name><operator pos:line="192" pos:column="22">)<pos:position pos:line="192" pos:column="23"/></operator><operator pos:line="192" pos:column="23">-&gt;<pos:position pos:line="192" pos:column="28"/></operator><name pos:line="192" pos:column="25">next<pos:position pos:line="192" pos:column="29"/></name></name> <operator pos:line="192" pos:column="30">=<pos:position pos:line="192" pos:column="31"/></operator> <name pos:line="192" pos:column="32">post<pos:position pos:line="192" pos:column="36"/></name></expr>;<pos:position pos:line="192" pos:column="37"/></expr_stmt></block></then>
	<else pos:line="193" pos:column="9">else
	  <block type="pseudo"><expr_stmt><expr><operator pos:line="194" pos:column="11">(<pos:position pos:line="194" pos:column="12"/></operator><operator pos:line="194" pos:column="12">*<pos:position pos:line="194" pos:column="13"/></operator><name pos:line="194" pos:column="13">httppost<pos:position pos:line="194" pos:column="21"/></name><operator pos:line="194" pos:column="21">)<pos:position pos:line="194" pos:column="22"/></operator> <operator pos:line="194" pos:column="23">=<pos:position pos:line="194" pos:column="24"/></operator> <name pos:line="194" pos:column="25">post<pos:position pos:line="194" pos:column="29"/></name></expr>;<pos:position pos:line="194" pos:column="30"/></expr_stmt></block></else></if>

	<expr_stmt><expr><operator pos:line="196" pos:column="9">(<pos:position pos:line="196" pos:column="10"/></operator><operator pos:line="196" pos:column="10">*<pos:position pos:line="196" pos:column="11"/></operator><name pos:line="196" pos:column="11">last_post<pos:position pos:line="196" pos:column="20"/></name><operator pos:line="196" pos:column="20">)<pos:position pos:line="196" pos:column="21"/></operator> <operator pos:line="196" pos:column="22">=<pos:position pos:line="196" pos:column="23"/></operator> <name pos:line="196" pos:column="24">post<pos:position pos:line="196" pos:column="28"/></name></expr>;<pos:position pos:line="196" pos:column="29"/></expr_stmt>	  
      }<pos:position pos:line="197" pos:column="8"/></block></then></if>

    }<pos:position pos:line="199" pos:column="6"/></block></else></if>

  }<pos:position pos:line="201" pos:column="4"/></block></then>
  <else pos:line="202" pos:column="3">else <block pos:line="202" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="203" pos:column="5">fprintf<pos:position pos:line="203" pos:column="12"/></name><argument_list pos:line="203" pos:column="12">(<argument><expr><name pos:line="203" pos:column="13">stderr<pos:position pos:line="203" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="203" pos:column="21">"Illegally formatted input field!\n"<pos:position pos:line="203" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="203" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="204" pos:column="5">free<pos:position pos:line="204" pos:column="9"/></name><argument_list pos:line="204" pos:column="9">(<argument><expr><name pos:line="204" pos:column="10">contents<pos:position pos:line="204" pos:column="18"/></name></expr></argument>)<pos:position pos:line="204" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="204" pos:column="20"/></expr_stmt>
    <return pos:line="205" pos:column="5">return <expr><literal type="number" pos:line="205" pos:column="12">1<pos:position pos:line="205" pos:column="13"/></literal></expr>;<pos:position pos:line="205" pos:column="14"/></return>
  }<pos:position pos:line="206" pos:column="4"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="207" pos:column="3">free<pos:position pos:line="207" pos:column="7"/></name><argument_list pos:line="207" pos:column="7">(<argument><expr><name pos:line="207" pos:column="8">contents<pos:position pos:line="207" pos:column="16"/></name></expr></argument>)<pos:position pos:line="207" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="18"/></expr_stmt>
  <return pos:line="208" pos:column="3">return <expr><literal type="number" pos:line="208" pos:column="10">0<pos:position pos:line="208" pos:column="11"/></literal></expr>;<pos:position pos:line="208" pos:column="12"/></return>
}<pos:position pos:line="209" pos:column="2"/></block></function></unit>
