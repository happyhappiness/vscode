<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1071_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">Curl_setup_transfer<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(
  <parameter><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">connectdata<pos:position pos:line="3" pos:column="21"/></name></name> <modifier pos:line="3" pos:column="22">*<pos:position pos:line="3" pos:column="23"/></modifier></type><name pos:line="3" pos:column="23">conn<pos:position pos:line="3" pos:column="27"/></name></decl></parameter>, <comment type="block" pos:line="3" pos:column="29">/* connection data */</comment>
  <parameter><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">sockindex<pos:position pos:line="4" pos:column="16"/></name></decl></parameter>,            <comment type="block" pos:line="4" pos:column="29">/* socket index to read from or -1 */</comment>
  <parameter><decl><type><name pos:line="5" pos:column="3">curl_off_t<pos:position pos:line="5" pos:column="13"/></name></type> <name pos:line="5" pos:column="14">size<pos:position pos:line="5" pos:column="18"/></name></decl></parameter>,          <comment type="block" pos:line="5" pos:column="29">/* -1 if unknown at this point */</comment>
  <parameter><decl><type><name pos:line="6" pos:column="3">bool<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">getheader<pos:position pos:line="6" pos:column="17"/></name></decl></parameter>,           <comment type="block" pos:line="6" pos:column="29">/* TRUE if header parsing is wanted */</comment>
  <parameter><decl><type><name pos:line="7" pos:column="3">curl_off_t<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">bytecountp<pos:position pos:line="7" pos:column="25"/></name></decl></parameter>,   <comment type="block" pos:line="7" pos:column="29">/* return number of bytes read or NULL */</comment>
  <parameter><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">writesockindex<pos:position pos:line="8" pos:column="21"/></name></decl></parameter>,       <comment type="block" pos:line="8" pos:column="29">/* socket index to write to, it may very well be
                               the same we read from. -1 disables */</comment>
  <parameter><decl><type><name pos:line="10" pos:column="3">curl_off_t<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier></type><name pos:line="10" pos:column="15">writecountp<pos:position pos:line="10" pos:column="26"/></name></decl></parameter>   <comment type="block" pos:line="10" pos:column="29">/* return number of bytes written or NULL */</comment>
  )<pos:position pos:line="11" pos:column="4"/></parameter_list>
<block pos:line="12" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="13" pos:column="3">struct<pos:position pos:line="13" pos:column="9"/></name> <name pos:line="13" pos:column="10">Curl_easy<pos:position pos:line="13" pos:column="19"/></name></name> <modifier pos:line="13" pos:column="20">*<pos:position pos:line="13" pos:column="21"/></modifier></type><name pos:line="13" pos:column="21">data<pos:position pos:line="13" pos:column="25"/></name></decl>;<pos:position pos:line="13" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="14" pos:column="3">struct<pos:position pos:line="14" pos:column="9"/></name> <name pos:line="14" pos:column="10">SingleRequest<pos:position pos:line="14" pos:column="23"/></name></name> <modifier pos:line="14" pos:column="24">*<pos:position pos:line="14" pos:column="25"/></modifier></type><name pos:line="14" pos:column="25">k<pos:position pos:line="14" pos:column="26"/></name></decl>;<pos:position pos:line="14" pos:column="27"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="16" pos:column="3">DEBUGASSERT<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">(<argument><expr><name pos:line="16" pos:column="15">conn<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">!=<pos:position pos:line="16" pos:column="22"/></operator> <name pos:line="16" pos:column="23">NULL<pos:position pos:line="16" pos:column="27"/></name></expr></argument>)<pos:position pos:line="16" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>

  <expr_stmt><expr><name pos:line="18" pos:column="3">data<pos:position pos:line="18" pos:column="7"/></name> <operator pos:line="18" pos:column="8">=<pos:position pos:line="18" pos:column="9"/></operator> <name><name pos:line="18" pos:column="10">conn<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">-&gt;<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="16">data<pos:position pos:line="18" pos:column="20"/></name></name></expr>;<pos:position pos:line="18" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="19" pos:column="3">k<pos:position pos:line="19" pos:column="4"/></name> <operator pos:line="19" pos:column="5">=<pos:position pos:line="19" pos:column="6"/></operator> <operator pos:line="19" pos:column="7">&amp;<pos:position pos:line="19" pos:column="12"/></operator><name><name pos:line="19" pos:column="8">data<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">req<pos:position pos:line="19" pos:column="17"/></name></name></expr>;<pos:position pos:line="19" pos:column="18"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="21" pos:column="3">DEBUGASSERT<pos:position pos:line="21" pos:column="14"/></name><argument_list pos:line="21" pos:column="14">(<argument><expr><operator pos:line="21" pos:column="15">(<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="16">sockindex<pos:position pos:line="21" pos:column="25"/></name> <operator pos:line="21" pos:column="26">&lt;=<pos:position pos:line="21" pos:column="31"/></operator> <literal type="number" pos:line="21" pos:column="29">1<pos:position pos:line="21" pos:column="30"/></literal><operator pos:line="21" pos:column="30">)<pos:position pos:line="21" pos:column="31"/></operator> <operator pos:line="21" pos:column="32">&amp;&amp;<pos:position pos:line="21" pos:column="42"/></operator> <operator pos:line="21" pos:column="35">(<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="36">sockindex<pos:position pos:line="21" pos:column="45"/></name> <operator pos:line="21" pos:column="46">&gt;=<pos:position pos:line="21" pos:column="51"/></operator> <operator pos:line="21" pos:column="49">-<pos:position pos:line="21" pos:column="50"/></operator><literal type="number" pos:line="21" pos:column="50">1<pos:position pos:line="21" pos:column="51"/></literal><operator pos:line="21" pos:column="51">)<pos:position pos:line="21" pos:column="52"/></operator></expr></argument>)<pos:position pos:line="21" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="54"/></expr_stmt>

  <comment type="block" pos:line="23" pos:column="3">/* now copy all input parameters */</comment>
  <expr_stmt><expr><name><name pos:line="24" pos:column="3">conn<pos:position pos:line="24" pos:column="7"/></name><operator pos:line="24" pos:column="7">-&gt;<pos:position pos:line="24" pos:column="12"/></operator><name pos:line="24" pos:column="9">sockfd<pos:position pos:line="24" pos:column="15"/></name></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <ternary><condition><expr><name pos:line="24" pos:column="18">sockindex<pos:position pos:line="24" pos:column="27"/></name> <operator pos:line="24" pos:column="28">==<pos:position pos:line="24" pos:column="30"/></operator> <operator pos:line="24" pos:column="31">-<pos:position pos:line="24" pos:column="32"/></operator><literal type="number" pos:line="24" pos:column="32">1<pos:position pos:line="24" pos:column="33"/></literal></expr> ?<pos:position pos:line="24" pos:column="35"/></condition><then pos:line="24" pos:column="35">
      <expr><name pos:line="25" pos:column="7">CURL_SOCKET_BAD<pos:position pos:line="25" pos:column="22"/></name></expr> <pos:position pos:line="25" pos:column="23"/></then><else pos:line="25" pos:column="23">: <expr><name><name pos:line="25" pos:column="25">conn<pos:position pos:line="25" pos:column="29"/></name><operator pos:line="25" pos:column="29">-&gt;<pos:position pos:line="25" pos:column="34"/></operator><name pos:line="25" pos:column="31">sock<pos:position pos:line="25" pos:column="35"/></name><index pos:line="25" pos:column="35">[<expr><name pos:line="25" pos:column="36">sockindex<pos:position pos:line="25" pos:column="45"/></name></expr>]<pos:position pos:line="25" pos:column="46"/></index></name></expr></else></ternary></expr>;<pos:position pos:line="25" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="26" pos:column="3">conn<pos:position pos:line="26" pos:column="7"/></name><operator pos:line="26" pos:column="7">-&gt;<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="9">writesockfd<pos:position pos:line="26" pos:column="20"/></name></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <ternary><condition><expr><name pos:line="26" pos:column="23">writesockindex<pos:position pos:line="26" pos:column="37"/></name> <operator pos:line="26" pos:column="38">==<pos:position pos:line="26" pos:column="40"/></operator> <operator pos:line="26" pos:column="41">-<pos:position pos:line="26" pos:column="42"/></operator><literal type="number" pos:line="26" pos:column="42">1<pos:position pos:line="26" pos:column="43"/></literal></expr> ?<pos:position pos:line="26" pos:column="45"/></condition><then pos:line="26" pos:column="45">
      <expr><name pos:line="27" pos:column="7">CURL_SOCKET_BAD<pos:position pos:line="27" pos:column="22"/></name></expr></then><else pos:line="27" pos:column="22">:<expr><name><name pos:line="27" pos:column="23">conn<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">-&gt;<pos:position pos:line="27" pos:column="32"/></operator><name pos:line="27" pos:column="29">sock<pos:position pos:line="27" pos:column="33"/></name><index pos:line="27" pos:column="33">[<expr><name pos:line="27" pos:column="34">writesockindex<pos:position pos:line="27" pos:column="48"/></name></expr>]<pos:position pos:line="27" pos:column="49"/></index></name></expr></else></ternary></expr>;<pos:position pos:line="27" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="28" pos:column="3">k<pos:position pos:line="28" pos:column="4"/></name><operator pos:line="28" pos:column="4">-&gt;<pos:position pos:line="28" pos:column="9"/></operator><name pos:line="28" pos:column="6">getheader<pos:position pos:line="28" pos:column="15"/></name></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <name pos:line="28" pos:column="18">getheader<pos:position pos:line="28" pos:column="27"/></name></expr>;<pos:position pos:line="28" pos:column="28"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="30" pos:column="3">k<pos:position pos:line="30" pos:column="4"/></name><operator pos:line="30" pos:column="4">-&gt;<pos:position pos:line="30" pos:column="9"/></operator><name pos:line="30" pos:column="6">size<pos:position pos:line="30" pos:column="10"/></name></name> <operator pos:line="30" pos:column="11">=<pos:position pos:line="30" pos:column="12"/></operator> <name pos:line="30" pos:column="13">size<pos:position pos:line="30" pos:column="17"/></name></expr>;<pos:position pos:line="30" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="31" pos:column="3">k<pos:position pos:line="31" pos:column="4"/></name><operator pos:line="31" pos:column="4">-&gt;<pos:position pos:line="31" pos:column="9"/></operator><name pos:line="31" pos:column="6">bytecountp<pos:position pos:line="31" pos:column="16"/></name></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <name pos:line="31" pos:column="19">bytecountp<pos:position pos:line="31" pos:column="29"/></name></expr>;<pos:position pos:line="31" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="32" pos:column="3">k<pos:position pos:line="32" pos:column="4"/></name><operator pos:line="32" pos:column="4">-&gt;<pos:position pos:line="32" pos:column="9"/></operator><name pos:line="32" pos:column="6">writebytecountp<pos:position pos:line="32" pos:column="21"/></name></name> <operator pos:line="32" pos:column="22">=<pos:position pos:line="32" pos:column="23"/></operator> <name pos:line="32" pos:column="24">writecountp<pos:position pos:line="32" pos:column="35"/></name></expr>;<pos:position pos:line="32" pos:column="36"/></expr_stmt>

  <comment type="block" pos:line="34" pos:column="3">/* The code sequence below is placed in this function just because all
     necessary input is not always known in do_complete() as this function may
     be called after that */</comment>

  <if pos:line="38" pos:column="3">if<condition pos:line="38" pos:column="5">(<expr><operator pos:line="38" pos:column="6">!<pos:position pos:line="38" pos:column="7"/></operator><name><name pos:line="38" pos:column="7">k<pos:position pos:line="38" pos:column="8"/></name><operator pos:line="38" pos:column="8">-&gt;<pos:position pos:line="38" pos:column="13"/></operator><name pos:line="38" pos:column="10">getheader<pos:position pos:line="38" pos:column="19"/></name></name></expr>)<pos:position pos:line="38" pos:column="20"/></condition><then pos:line="38" pos:column="20"> <block pos:line="38" pos:column="21">{
    <expr_stmt><expr><name><name pos:line="39" pos:column="5">k<pos:position pos:line="39" pos:column="6"/></name><operator pos:line="39" pos:column="6">-&gt;<pos:position pos:line="39" pos:column="11"/></operator><name pos:line="39" pos:column="8">header<pos:position pos:line="39" pos:column="14"/></name></name> <operator pos:line="39" pos:column="15">=<pos:position pos:line="39" pos:column="16"/></operator> <name pos:line="39" pos:column="17">FALSE<pos:position pos:line="39" pos:column="22"/></name></expr>;<pos:position pos:line="39" pos:column="23"/></expr_stmt>
    <if pos:line="40" pos:column="5">if<condition pos:line="40" pos:column="7">(<expr><name pos:line="40" pos:column="8">size<pos:position pos:line="40" pos:column="12"/></name> <operator pos:line="40" pos:column="13">&gt;<pos:position pos:line="40" pos:column="17"/></operator> <literal type="number" pos:line="40" pos:column="15">0<pos:position pos:line="40" pos:column="16"/></literal></expr>)<pos:position pos:line="40" pos:column="17"/></condition><then pos:line="40" pos:column="17">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="7">Curl_pgrsSetDownloadSize<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">(<argument><expr><name pos:line="41" pos:column="32">data<pos:position pos:line="41" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="38">size<pos:position pos:line="41" pos:column="42"/></name></expr></argument>)<pos:position pos:line="41" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="44"/></expr_stmt></block></then></if>
  }<pos:position pos:line="42" pos:column="4"/></block></then></if>
  <comment type="block" pos:line="43" pos:column="3">/* we want header and/or body, if neither then don't do this! */</comment>
  <if pos:line="44" pos:column="3">if<condition pos:line="44" pos:column="5">(<expr><name><name pos:line="44" pos:column="6">k<pos:position pos:line="44" pos:column="7"/></name><operator pos:line="44" pos:column="7">-&gt;<pos:position pos:line="44" pos:column="12"/></operator><name pos:line="44" pos:column="9">getheader<pos:position pos:line="44" pos:column="18"/></name></name> <operator pos:line="44" pos:column="19">||<pos:position pos:line="44" pos:column="21"/></operator> <operator pos:line="44" pos:column="22">!<pos:position pos:line="44" pos:column="23"/></operator><name><name pos:line="44" pos:column="23">data<pos:position pos:line="44" pos:column="27"/></name><operator pos:line="44" pos:column="27">-&gt;<pos:position pos:line="44" pos:column="32"/></operator><name pos:line="44" pos:column="29">set<pos:position pos:line="44" pos:column="32"/></name><operator pos:line="44" pos:column="32">.<pos:position pos:line="44" pos:column="33"/></operator><name pos:line="44" pos:column="33">opt_no_body<pos:position pos:line="44" pos:column="44"/></name></name></expr>)<pos:position pos:line="44" pos:column="45"/></condition><then pos:line="44" pos:column="45"> <block pos:line="44" pos:column="46">{

    <if pos:line="46" pos:column="5">if<condition pos:line="46" pos:column="7">(<expr><name><name pos:line="46" pos:column="8">conn<pos:position pos:line="46" pos:column="12"/></name><operator pos:line="46" pos:column="12">-&gt;<pos:position pos:line="46" pos:column="17"/></operator><name pos:line="46" pos:column="14">sockfd<pos:position pos:line="46" pos:column="20"/></name></name> <operator pos:line="46" pos:column="21">!=<pos:position pos:line="46" pos:column="23"/></operator> <name pos:line="46" pos:column="24">CURL_SOCKET_BAD<pos:position pos:line="46" pos:column="39"/></name></expr>)<pos:position pos:line="46" pos:column="40"/></condition><then pos:line="46" pos:column="40">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="47" pos:column="7">k<pos:position pos:line="47" pos:column="8"/></name><operator pos:line="47" pos:column="8">-&gt;<pos:position pos:line="47" pos:column="13"/></operator><name pos:line="47" pos:column="10">keepon<pos:position pos:line="47" pos:column="16"/></name></name> <operator pos:line="47" pos:column="17">|=<pos:position pos:line="47" pos:column="19"/></operator> <name pos:line="47" pos:column="20">KEEP_RECV<pos:position pos:line="47" pos:column="29"/></name></expr>;<pos:position pos:line="47" pos:column="30"/></expr_stmt></block></then></if>

    <if pos:line="49" pos:column="5">if<condition pos:line="49" pos:column="7">(<expr><name><name pos:line="49" pos:column="8">conn<pos:position pos:line="49" pos:column="12"/></name><operator pos:line="49" pos:column="12">-&gt;<pos:position pos:line="49" pos:column="17"/></operator><name pos:line="49" pos:column="14">writesockfd<pos:position pos:line="49" pos:column="25"/></name></name> <operator pos:line="49" pos:column="26">!=<pos:position pos:line="49" pos:column="28"/></operator> <name pos:line="49" pos:column="29">CURL_SOCKET_BAD<pos:position pos:line="49" pos:column="44"/></name></expr>)<pos:position pos:line="49" pos:column="45"/></condition><then pos:line="49" pos:column="45"> <block pos:line="49" pos:column="46">{
      <decl_stmt><decl><type><name><name pos:line="50" pos:column="7">struct<pos:position pos:line="50" pos:column="13"/></name> <name pos:line="50" pos:column="14">HTTP<pos:position pos:line="50" pos:column="18"/></name></name> <modifier pos:line="50" pos:column="19">*<pos:position pos:line="50" pos:column="20"/></modifier></type><name pos:line="50" pos:column="20">http<pos:position pos:line="50" pos:column="24"/></name> <init pos:line="50" pos:column="25">= <expr><name><name pos:line="50" pos:column="27">data<pos:position pos:line="50" pos:column="31"/></name><operator pos:line="50" pos:column="31">-&gt;<pos:position pos:line="50" pos:column="36"/></operator><name pos:line="50" pos:column="33">req<pos:position pos:line="50" pos:column="36"/></name><operator pos:line="50" pos:column="36">.<pos:position pos:line="50" pos:column="37"/></operator><name pos:line="50" pos:column="37">protop<pos:position pos:line="50" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="50" pos:column="44"/></decl_stmt>
      <comment type="block" pos:line="51" pos:column="7">/* HTTP 1.1 magic:

         Even if we require a 100-return code before uploading data, we might
         need to write data before that since the REQUEST may not have been
         finished sent off just yet.

         Thus, we must check if the request has been sent before we set the
         state info where we wait for the 100-return code
      */</comment>
      <if pos:line="60" pos:column="7">if<condition pos:line="60" pos:column="9">(<expr><operator pos:line="60" pos:column="10">(<pos:position pos:line="60" pos:column="11"/></operator><name><name pos:line="60" pos:column="11">data<pos:position pos:line="60" pos:column="15"/></name><operator pos:line="60" pos:column="15">-&gt;<pos:position pos:line="60" pos:column="20"/></operator><name pos:line="60" pos:column="17">state<pos:position pos:line="60" pos:column="22"/></name><operator pos:line="60" pos:column="22">.<pos:position pos:line="60" pos:column="23"/></operator><name pos:line="60" pos:column="23">expect100header<pos:position pos:line="60" pos:column="38"/></name></name><operator pos:line="60" pos:column="38">)<pos:position pos:line="60" pos:column="39"/></operator> <operator pos:line="60" pos:column="40">&amp;&amp;<pos:position pos:line="60" pos:column="50"/></operator>
         <operator pos:line="61" pos:column="10">(<pos:position pos:line="61" pos:column="11"/></operator><name><name pos:line="61" pos:column="11">conn<pos:position pos:line="61" pos:column="15"/></name><operator pos:line="61" pos:column="15">-&gt;<pos:position pos:line="61" pos:column="20"/></operator><name pos:line="61" pos:column="17">handler<pos:position pos:line="61" pos:column="24"/></name><operator pos:line="61" pos:column="24">-&gt;<pos:position pos:line="61" pos:column="29"/></operator><name pos:line="61" pos:column="26">protocol<pos:position pos:line="61" pos:column="34"/></name></name><operator pos:line="61" pos:column="34">&amp;<pos:position pos:line="61" pos:column="39"/></operator><name pos:line="61" pos:column="35">PROTO_FAMILY_HTTP<pos:position pos:line="61" pos:column="52"/></name><operator pos:line="61" pos:column="52">)<pos:position pos:line="61" pos:column="53"/></operator> <operator pos:line="61" pos:column="54">&amp;&amp;<pos:position pos:line="61" pos:column="64"/></operator>
         <operator pos:line="62" pos:column="10">(<pos:position pos:line="62" pos:column="11"/></operator><name><name pos:line="62" pos:column="11">http<pos:position pos:line="62" pos:column="15"/></name><operator pos:line="62" pos:column="15">-&gt;<pos:position pos:line="62" pos:column="20"/></operator><name pos:line="62" pos:column="17">sending<pos:position pos:line="62" pos:column="24"/></name></name> <operator pos:line="62" pos:column="25">==<pos:position pos:line="62" pos:column="27"/></operator> <name pos:line="62" pos:column="28">HTTPSEND_BODY<pos:position pos:line="62" pos:column="41"/></name><operator pos:line="62" pos:column="41">)<pos:position pos:line="62" pos:column="42"/></operator></expr>)<pos:position pos:line="62" pos:column="43"/></condition><then pos:line="62" pos:column="43"> <block pos:line="62" pos:column="44">{
        <comment type="block" pos:line="63" pos:column="9">/* wait with write until we either got 100-continue or a timeout */</comment>
        <expr_stmt><expr><name><name pos:line="64" pos:column="9">k<pos:position pos:line="64" pos:column="10"/></name><operator pos:line="64" pos:column="10">-&gt;<pos:position pos:line="64" pos:column="15"/></operator><name pos:line="64" pos:column="12">exp100<pos:position pos:line="64" pos:column="18"/></name></name> <operator pos:line="64" pos:column="19">=<pos:position pos:line="64" pos:column="20"/></operator> <name pos:line="64" pos:column="21">EXP100_AWAITING_CONTINUE<pos:position pos:line="64" pos:column="45"/></name></expr>;<pos:position pos:line="64" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="65" pos:column="9">k<pos:position pos:line="65" pos:column="10"/></name><operator pos:line="65" pos:column="10">-&gt;<pos:position pos:line="65" pos:column="15"/></operator><name pos:line="65" pos:column="12">start100<pos:position pos:line="65" pos:column="20"/></name></name> <operator pos:line="65" pos:column="21">=<pos:position pos:line="65" pos:column="22"/></operator> <call><name pos:line="65" pos:column="23">Curl_tvnow<pos:position pos:line="65" pos:column="33"/></name><argument_list pos:line="65" pos:column="33">()<pos:position pos:line="65" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="36"/></expr_stmt>

        <comment type="block" pos:line="67" pos:column="9">/* Set a timeout for the multi interface. Add the inaccuracy margin so
           that we don't fire slightly too early and get denied to run. */</comment>
        <expr_stmt><expr><call><name pos:line="69" pos:column="9">Curl_expire<pos:position pos:line="69" pos:column="20"/></name><argument_list pos:line="69" pos:column="20">(<argument><expr><name pos:line="69" pos:column="21">data<pos:position pos:line="69" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="27">data<pos:position pos:line="69" pos:column="31"/></name><operator pos:line="69" pos:column="31">-&gt;<pos:position pos:line="69" pos:column="36"/></operator><name pos:line="69" pos:column="33">set<pos:position pos:line="69" pos:column="36"/></name><operator pos:line="69" pos:column="36">.<pos:position pos:line="69" pos:column="37"/></operator><name pos:line="69" pos:column="37">expect_100_timeout<pos:position pos:line="69" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="57">EXPIRE_100_TIMEOUT<pos:position pos:line="69" pos:column="75"/></name></expr></argument>)<pos:position pos:line="69" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="77"/></expr_stmt>
      }<pos:position pos:line="70" pos:column="8"/></block></then>
      <else pos:line="71" pos:column="7">else <block pos:line="71" pos:column="12">{
        <if pos:line="72" pos:column="9">if<condition pos:line="72" pos:column="11">(<expr><name><name pos:line="72" pos:column="12">data<pos:position pos:line="72" pos:column="16"/></name><operator pos:line="72" pos:column="16">-&gt;<pos:position pos:line="72" pos:column="21"/></operator><name pos:line="72" pos:column="18">state<pos:position pos:line="72" pos:column="23"/></name><operator pos:line="72" pos:column="23">.<pos:position pos:line="72" pos:column="24"/></operator><name pos:line="72" pos:column="24">expect100header<pos:position pos:line="72" pos:column="39"/></name></name></expr>)<pos:position pos:line="72" pos:column="40"/></condition><then pos:line="72" pos:column="40">
          <comment type="block" pos:line="73" pos:column="11">/* when we've sent off the rest of the headers, we must await a
             100-continue but first finish sending the request */</comment>
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="75" pos:column="11">k<pos:position pos:line="75" pos:column="12"/></name><operator pos:line="75" pos:column="12">-&gt;<pos:position pos:line="75" pos:column="17"/></operator><name pos:line="75" pos:column="14">exp100<pos:position pos:line="75" pos:column="20"/></name></name> <operator pos:line="75" pos:column="21">=<pos:position pos:line="75" pos:column="22"/></operator> <name pos:line="75" pos:column="23">EXP100_SENDING_REQUEST<pos:position pos:line="75" pos:column="45"/></name></expr>;<pos:position pos:line="75" pos:column="46"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="77" pos:column="9">/* enable the write bit when we're not waiting for continue */</comment>
        <expr_stmt><expr><name><name pos:line="78" pos:column="9">k<pos:position pos:line="78" pos:column="10"/></name><operator pos:line="78" pos:column="10">-&gt;<pos:position pos:line="78" pos:column="15"/></operator><name pos:line="78" pos:column="12">keepon<pos:position pos:line="78" pos:column="18"/></name></name> <operator pos:line="78" pos:column="19">|=<pos:position pos:line="78" pos:column="21"/></operator> <name pos:line="78" pos:column="22">KEEP_SEND<pos:position pos:line="78" pos:column="31"/></name></expr>;<pos:position pos:line="78" pos:column="32"/></expr_stmt>
      }<pos:position pos:line="79" pos:column="8"/></block></else></if>
    }<pos:position pos:line="80" pos:column="6"/></block></then></if> <comment type="block" pos:line="80" pos:column="7">/* if(conn-&gt;writesockfd != CURL_SOCKET_BAD) */</comment>
  }<pos:position pos:line="81" pos:column="4"/></block></then></if> <comment type="block" pos:line="81" pos:column="5">/* if(k-&gt;getheader || !data-&gt;set.opt_no_body) */</comment>

}<pos:position pos:line="83" pos:column="2"/></block></function></unit>
