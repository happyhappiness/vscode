<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2112.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">ossl_connect_step2<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">connectdata<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">conn<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">int<pos:position pos:line="1" pos:column="65"/></name></type> <name pos:line="1" pos:column="66">sockindex<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">SessionHandle<pos:position pos:line="3" pos:column="23"/></name></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">data<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><name><name pos:line="3" pos:column="32">conn<pos:position pos:line="3" pos:column="36"/></name><operator pos:line="3" pos:column="36">-&gt;<pos:position pos:line="3" pos:column="41"/></operator><name pos:line="3" pos:column="38">data<pos:position pos:line="3" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">err<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">ssl_connect_data<pos:position pos:line="5" pos:column="26"/></name></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name pos:line="5" pos:column="28">connssl<pos:position pos:line="5" pos:column="35"/></name> <init pos:line="5" pos:column="36">= <expr><operator pos:line="5" pos:column="38">&amp;<pos:position pos:line="5" pos:column="43"/></operator><name><name pos:line="5" pos:column="39">conn<pos:position pos:line="5" pos:column="43"/></name><operator pos:line="5" pos:column="43">-&gt;<pos:position pos:line="5" pos:column="48"/></operator><name pos:line="5" pos:column="45">ssl<pos:position pos:line="5" pos:column="48"/></name><index pos:line="5" pos:column="48">[<expr><name pos:line="5" pos:column="49">sockindex<pos:position pos:line="5" pos:column="58"/></name></expr>]<pos:position pos:line="5" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="60"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="6" pos:column="3">DEBUGASSERT<pos:position pos:line="6" pos:column="14"/></name><argument_list pos:line="6" pos:column="14">(<argument><expr><name pos:line="6" pos:column="15">ssl_connect_2<pos:position pos:line="6" pos:column="28"/></name> <operator pos:line="6" pos:column="29">==<pos:position pos:line="6" pos:column="31"/></operator> <name><name pos:line="6" pos:column="32">connssl<pos:position pos:line="6" pos:column="39"/></name><operator pos:line="6" pos:column="39">-&gt;<pos:position pos:line="6" pos:column="44"/></operator><name pos:line="6" pos:column="41">connecting_state<pos:position pos:line="6" pos:column="57"/></name></name>
             <operator pos:line="7" pos:column="14">||<pos:position pos:line="7" pos:column="16"/></operator> <name pos:line="7" pos:column="17">ssl_connect_2_reading<pos:position pos:line="7" pos:column="38"/></name> <operator pos:line="7" pos:column="39">==<pos:position pos:line="7" pos:column="41"/></operator> <name><name pos:line="7" pos:column="42">connssl<pos:position pos:line="7" pos:column="49"/></name><operator pos:line="7" pos:column="49">-&gt;<pos:position pos:line="7" pos:column="54"/></operator><name pos:line="7" pos:column="51">connecting_state<pos:position pos:line="7" pos:column="67"/></name></name>
             <operator pos:line="8" pos:column="14">||<pos:position pos:line="8" pos:column="16"/></operator> <name pos:line="8" pos:column="17">ssl_connect_2_writing<pos:position pos:line="8" pos:column="38"/></name> <operator pos:line="8" pos:column="39">==<pos:position pos:line="8" pos:column="41"/></operator> <name><name pos:line="8" pos:column="42">connssl<pos:position pos:line="8" pos:column="49"/></name><operator pos:line="8" pos:column="49">-&gt;<pos:position pos:line="8" pos:column="54"/></operator><name pos:line="8" pos:column="51">connecting_state<pos:position pos:line="8" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="69"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="10" pos:column="3">ERR_clear_error<pos:position pos:line="10" pos:column="18"/></name><argument_list pos:line="10" pos:column="18">()<pos:position pos:line="10" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="21"/></expr_stmt>

  <expr_stmt><expr><name pos:line="12" pos:column="3">err<pos:position pos:line="12" pos:column="6"/></name> <operator pos:line="12" pos:column="7">=<pos:position pos:line="12" pos:column="8"/></operator> <call><name pos:line="12" pos:column="9">SSL_connect<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name><name pos:line="12" pos:column="21">connssl<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">-&gt;<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="30">handle<pos:position pos:line="12" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt>

  <comment type="block" pos:line="14" pos:column="3">/* 1  is fine
     0  is "not successful but was shut down controlled"
     &lt;0 is "handshake was not successful, because a fatal error occurred" */</comment>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><literal type="number" pos:line="17" pos:column="6">1<pos:position pos:line="17" pos:column="7"/></literal> <operator pos:line="17" pos:column="8">!=<pos:position pos:line="17" pos:column="10"/></operator> <name pos:line="17" pos:column="11">err<pos:position pos:line="17" pos:column="14"/></name></expr>)<pos:position pos:line="17" pos:column="15"/></condition><then pos:line="17" pos:column="15"> <block pos:line="17" pos:column="16">{
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">int<pos:position pos:line="18" pos:column="8"/></name></type> <name pos:line="18" pos:column="9">detail<pos:position pos:line="18" pos:column="15"/></name> <init pos:line="18" pos:column="16">= <expr><call><name pos:line="18" pos:column="18">SSL_get_error<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><name><name pos:line="18" pos:column="32">connssl<pos:position pos:line="18" pos:column="39"/></name><operator pos:line="18" pos:column="39">-&gt;<pos:position pos:line="18" pos:column="44"/></operator><name pos:line="18" pos:column="41">handle<pos:position pos:line="18" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="49">err<pos:position pos:line="18" pos:column="52"/></name></expr></argument>)<pos:position pos:line="18" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="54"/></decl_stmt>

    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><name pos:line="20" pos:column="8">SSL_ERROR_WANT_READ<pos:position pos:line="20" pos:column="27"/></name> <operator pos:line="20" pos:column="28">==<pos:position pos:line="20" pos:column="30"/></operator> <name pos:line="20" pos:column="31">detail<pos:position pos:line="20" pos:column="37"/></name></expr>)<pos:position pos:line="20" pos:column="38"/></condition><then pos:line="20" pos:column="38"> <block pos:line="20" pos:column="39">{
      <expr_stmt><expr><name><name pos:line="21" pos:column="7">connssl<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-&gt;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="16">connecting_state<pos:position pos:line="21" pos:column="32"/></name></name> <operator pos:line="21" pos:column="33">=<pos:position pos:line="21" pos:column="34"/></operator> <name pos:line="21" pos:column="35">ssl_connect_2_reading<pos:position pos:line="21" pos:column="56"/></name></expr>;<pos:position pos:line="21" pos:column="57"/></expr_stmt>
      <return pos:line="22" pos:column="7">return <expr><name pos:line="22" pos:column="14">CURLE_OK<pos:position pos:line="22" pos:column="22"/></name></expr>;<pos:position pos:line="22" pos:column="23"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then>
    <elseif pos:line="24" pos:column="5">else <if pos:line="24" pos:column="10">if<condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">SSL_ERROR_WANT_WRITE<pos:position pos:line="24" pos:column="33"/></name> <operator pos:line="24" pos:column="34">==<pos:position pos:line="24" pos:column="36"/></operator> <name pos:line="24" pos:column="37">detail<pos:position pos:line="24" pos:column="43"/></name></expr>)<pos:position pos:line="24" pos:column="44"/></condition><then pos:line="24" pos:column="44"> <block pos:line="24" pos:column="45">{
      <expr_stmt><expr><name><name pos:line="25" pos:column="7">connssl<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">-&gt;<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="16">connecting_state<pos:position pos:line="25" pos:column="32"/></name></name> <operator pos:line="25" pos:column="33">=<pos:position pos:line="25" pos:column="34"/></operator> <name pos:line="25" pos:column="35">ssl_connect_2_writing<pos:position pos:line="25" pos:column="56"/></name></expr>;<pos:position pos:line="25" pos:column="57"/></expr_stmt>
      <return pos:line="26" pos:column="7">return <expr><name pos:line="26" pos:column="14">CURLE_OK<pos:position pos:line="26" pos:column="22"/></name></expr>;<pos:position pos:line="26" pos:column="23"/></return>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if></elseif>
    <else pos:line="28" pos:column="5">else <block pos:line="28" pos:column="10">{
      <comment type="block" pos:line="29" pos:column="7">/* untreated error */</comment>
      <decl_stmt><decl><type><name pos:line="30" pos:column="7">unsigned<pos:position pos:line="30" pos:column="15"/></name> <name pos:line="30" pos:column="16">long<pos:position pos:line="30" pos:column="20"/></name></type> <name pos:line="30" pos:column="21">errdetail<pos:position pos:line="30" pos:column="30"/></name></decl>;<pos:position pos:line="30" pos:column="31"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="31" pos:column="7">char<pos:position pos:line="31" pos:column="11"/></name></type> <name><name pos:line="31" pos:column="12">error_buffer<pos:position pos:line="31" pos:column="24"/></name><index pos:line="31" pos:column="24">[<expr><literal type="number" pos:line="31" pos:column="25">256<pos:position pos:line="31" pos:column="28"/></literal></expr>]<pos:position pos:line="31" pos:column="29"/></index></name></decl>;<pos:position pos:line="31" pos:column="30"/></decl_stmt> <comment type="block" pos:line="31" pos:column="31">/* OpenSSL documents that this must be at least
                                 256 bytes long. */</comment>
      <decl_stmt><decl><type><name pos:line="33" pos:column="7">CURLcode<pos:position pos:line="33" pos:column="15"/></name></type> <name pos:line="33" pos:column="16">result<pos:position pos:line="33" pos:column="22"/></name></decl>;<pos:position pos:line="33" pos:column="23"/></decl_stmt>
      <decl_stmt><decl><type><specifier pos:line="34" pos:column="7">const<pos:position pos:line="34" pos:column="12"/></specifier> <name pos:line="34" pos:column="13">char<pos:position pos:line="34" pos:column="17"/></name> <modifier pos:line="34" pos:column="18">*<pos:position pos:line="34" pos:column="19"/></modifier></type><name pos:line="34" pos:column="19">cert_problem<pos:position pos:line="34" pos:column="31"/></name> <init pos:line="34" pos:column="32">= <expr><name pos:line="34" pos:column="34">NULL<pos:position pos:line="34" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="34" pos:column="39"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="35" pos:column="7">long<pos:position pos:line="35" pos:column="11"/></name></type> <name pos:line="35" pos:column="12">lerr<pos:position pos:line="35" pos:column="16"/></name></decl>;<pos:position pos:line="35" pos:column="17"/></decl_stmt>

      <expr_stmt><expr><name><name pos:line="37" pos:column="7">connssl<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">-&gt;<pos:position pos:line="37" pos:column="19"/></operator><name pos:line="37" pos:column="16">connecting_state<pos:position pos:line="37" pos:column="32"/></name></name> <operator pos:line="37" pos:column="33">=<pos:position pos:line="37" pos:column="34"/></operator> <name pos:line="37" pos:column="35">ssl_connect_2<pos:position pos:line="37" pos:column="48"/></name></expr>;<pos:position pos:line="37" pos:column="49"/></expr_stmt> <comment type="block" pos:line="37" pos:column="50">/* the connection failed,
                                                    we're not waiting for
                                                    anything else. */</comment>

      <expr_stmt><expr><name pos:line="41" pos:column="7">errdetail<pos:position pos:line="41" pos:column="16"/></name> <operator pos:line="41" pos:column="17">=<pos:position pos:line="41" pos:column="18"/></operator> <call><name pos:line="41" pos:column="19">ERR_get_error<pos:position pos:line="41" pos:column="32"/></name><argument_list pos:line="41" pos:column="32">()<pos:position pos:line="41" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="35"/></expr_stmt> <comment type="block" pos:line="41" pos:column="36">/* Gets the earliest error code from the
                                      thread's error queue and removes the
                                      entry. */</comment>

      <switch pos:line="45" pos:column="7">switch<condition pos:line="45" pos:column="13">(<expr><name pos:line="45" pos:column="14">errdetail<pos:position pos:line="45" pos:column="23"/></name></expr>)<pos:position pos:line="45" pos:column="24"/></condition> <block pos:line="45" pos:column="25">{
      <case pos:line="46" pos:column="7">case <expr><literal type="number" pos:line="46" pos:column="12">0x1407E086<pos:position pos:line="46" pos:column="22"/></literal></expr>:<pos:position pos:line="46" pos:column="23"/></case>
        <comment type="block" pos:line="47" pos:column="9">/* 1407E086:
           SSL routines:
           SSL2_SET_CERTIFICATE:
           certificate verify failed */</comment>
        <comment type="block" pos:line="51" pos:column="9">/* fall-through */</comment>
      <case pos:line="52" pos:column="7">case <expr><literal type="number" pos:line="52" pos:column="12">0x14090086<pos:position pos:line="52" pos:column="22"/></literal></expr>:<pos:position pos:line="52" pos:column="23"/></case>
        <comment type="block" pos:line="53" pos:column="9">/* 14090086:
           SSL routines:
           SSL3_GET_SERVER_CERTIFICATE:
           certificate verify failed */</comment>
        <expr_stmt><expr><name pos:line="57" pos:column="9">result<pos:position pos:line="57" pos:column="15"/></name> <operator pos:line="57" pos:column="16">=<pos:position pos:line="57" pos:column="17"/></operator> <name pos:line="57" pos:column="18">CURLE_SSL_CACERT<pos:position pos:line="57" pos:column="34"/></name></expr>;<pos:position pos:line="57" pos:column="35"/></expr_stmt>

        <expr_stmt><expr><name pos:line="59" pos:column="9">lerr<pos:position pos:line="59" pos:column="13"/></name> <operator pos:line="59" pos:column="14">=<pos:position pos:line="59" pos:column="15"/></operator> <call><name pos:line="59" pos:column="16">SSL_get_verify_result<pos:position pos:line="59" pos:column="37"/></name><argument_list pos:line="59" pos:column="37">(<argument><expr><name><name pos:line="59" pos:column="38">connssl<pos:position pos:line="59" pos:column="45"/></name><operator pos:line="59" pos:column="45">-&gt;<pos:position pos:line="59" pos:column="50"/></operator><name pos:line="59" pos:column="47">handle<pos:position pos:line="59" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="55"/></expr_stmt>
        <if pos:line="60" pos:column="9">if<condition pos:line="60" pos:column="11">(<expr><name pos:line="60" pos:column="12">lerr<pos:position pos:line="60" pos:column="16"/></name> <operator pos:line="60" pos:column="17">!=<pos:position pos:line="60" pos:column="19"/></operator> <name pos:line="60" pos:column="20">X509_V_OK<pos:position pos:line="60" pos:column="29"/></name></expr>)<pos:position pos:line="60" pos:column="30"/></condition><then pos:line="60" pos:column="30"> <block pos:line="60" pos:column="31">{
          <expr_stmt><expr><call><name pos:line="61" pos:column="11">snprintf<pos:position pos:line="61" pos:column="19"/></name><argument_list pos:line="61" pos:column="19">(<argument><expr><name pos:line="61" pos:column="20">error_buffer<pos:position pos:line="61" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="61" pos:column="34">sizeof<argument_list pos:line="61" pos:column="40">(<argument><expr><name pos:line="61" pos:column="41">error_buffer<pos:position pos:line="61" pos:column="53"/></name></expr></argument>)<pos:position pos:line="61" pos:column="54"/></argument_list></sizeof></expr></argument>,
                   <argument><expr><literal type="string" pos:line="62" pos:column="20">"SSL certificate problem: %s"<pos:position pos:line="62" pos:column="49"/></literal></expr></argument>,
                   <argument><expr><call><name pos:line="63" pos:column="20">X509_verify_cert_error_string<pos:position pos:line="63" pos:column="49"/></name><argument_list pos:line="63" pos:column="49">(<argument><expr><name pos:line="63" pos:column="50">lerr<pos:position pos:line="63" pos:column="54"/></name></expr></argument>)<pos:position pos:line="63" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="57"/></expr_stmt>
        }<pos:position pos:line="64" pos:column="10"/></block></then>
        <else pos:line="65" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name pos:line="66" pos:column="11">cert_problem<pos:position pos:line="66" pos:column="23"/></name> <operator pos:line="66" pos:column="24">=<pos:position pos:line="66" pos:column="25"/></operator> <literal type="string" pos:line="66" pos:column="26">"SSL certificate problem, verify that the CA cert is"<pos:position pos:line="66" pos:column="79"/></literal>
            <literal type="string" pos:line="67" pos:column="13">" OK."<pos:position pos:line="67" pos:column="19"/></literal></expr>;<pos:position pos:line="67" pos:column="20"/></expr_stmt></block></else></if>

        <break pos:line="69" pos:column="9">break;<pos:position pos:line="69" pos:column="15"/></break>
      <default pos:line="70" pos:column="7">default:<pos:position pos:line="70" pos:column="15"/></default>
        <expr_stmt><expr><name pos:line="71" pos:column="9">result<pos:position pos:line="71" pos:column="15"/></name> <operator pos:line="71" pos:column="16">=<pos:position pos:line="71" pos:column="17"/></operator> <name pos:line="71" pos:column="18">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="71" pos:column="41"/></name></expr>;<pos:position pos:line="71" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="72" pos:column="9">SSL_strerror<pos:position pos:line="72" pos:column="21"/></name><argument_list pos:line="72" pos:column="21">(<argument><expr><name pos:line="72" pos:column="22">errdetail<pos:position pos:line="72" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="33">error_buffer<pos:position pos:line="72" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="72" pos:column="47">sizeof<argument_list pos:line="72" pos:column="53">(<argument><expr><name pos:line="72" pos:column="54">error_buffer<pos:position pos:line="72" pos:column="66"/></name></expr></argument>)<pos:position pos:line="72" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="72" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="69"/></expr_stmt>
        <break pos:line="73" pos:column="9">break;<pos:position pos:line="73" pos:column="15"/></break>
      }<pos:position pos:line="74" pos:column="8"/></block></switch>

      <comment type="block" pos:line="76" pos:column="7">/* detail is already set to the SSL error above */</comment>

      <comment type="block" pos:line="78" pos:column="7">/* If we e.g. use SSLv2 request-method and the server doesn't like us
       * (RST connection etc.), OpenSSL gives no explanation whatsoever and
       * the SO_ERROR is also lost.
       */</comment>
      <if pos:line="82" pos:column="7">if<condition pos:line="82" pos:column="9">(<expr><name pos:line="82" pos:column="10">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="82" pos:column="33"/></name> <operator pos:line="82" pos:column="34">==<pos:position pos:line="82" pos:column="36"/></operator> <name pos:line="82" pos:column="37">result<pos:position pos:line="82" pos:column="43"/></name> <operator pos:line="82" pos:column="44">&amp;&amp;<pos:position pos:line="82" pos:column="54"/></operator> <name pos:line="82" pos:column="47">errdetail<pos:position pos:line="82" pos:column="56"/></name> <operator pos:line="82" pos:column="57">==<pos:position pos:line="82" pos:column="59"/></operator> <literal type="number" pos:line="82" pos:column="60">0<pos:position pos:line="82" pos:column="61"/></literal></expr>)<pos:position pos:line="82" pos:column="62"/></condition><then pos:line="82" pos:column="62"> <block pos:line="82" pos:column="63">{
        <expr_stmt><expr><call><name pos:line="83" pos:column="9">failf<pos:position pos:line="83" pos:column="14"/></name><argument_list pos:line="83" pos:column="14">(<argument><expr><name pos:line="83" pos:column="15">data<pos:position pos:line="83" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="21">"Unknown SSL protocol error in connection to %s:%ld "<pos:position pos:line="83" pos:column="74"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="84" pos:column="15">conn<pos:position pos:line="84" pos:column="19"/></name><operator pos:line="84" pos:column="19">-&gt;<pos:position pos:line="84" pos:column="24"/></operator><name pos:line="84" pos:column="21">host<pos:position pos:line="84" pos:column="25"/></name><operator pos:line="84" pos:column="25">.<pos:position pos:line="84" pos:column="26"/></operator><name pos:line="84" pos:column="26">name<pos:position pos:line="84" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="32">conn<pos:position pos:line="84" pos:column="36"/></name><operator pos:line="84" pos:column="36">-&gt;<pos:position pos:line="84" pos:column="41"/></operator><name pos:line="84" pos:column="38">remote_port<pos:position pos:line="84" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="51"/></expr_stmt>
        <return pos:line="85" pos:column="9">return <expr><name pos:line="85" pos:column="16">result<pos:position pos:line="85" pos:column="22"/></name></expr>;<pos:position pos:line="85" pos:column="23"/></return>
      }<pos:position pos:line="86" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="88" pos:column="7">/* Could be a CERT problem */</comment>
      <expr_stmt><expr><call><name pos:line="89" pos:column="7">failf<pos:position pos:line="89" pos:column="12"/></name><argument_list pos:line="89" pos:column="12">(<argument><expr><name pos:line="89" pos:column="13">data<pos:position pos:line="89" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="19">"%s%s"<pos:position pos:line="89" pos:column="25"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="89" pos:column="27">cert_problem<pos:position pos:line="89" pos:column="39"/></name></expr> ?<pos:position pos:line="89" pos:column="41"/></condition><then pos:line="89" pos:column="41"> <expr><name pos:line="89" pos:column="42">cert_problem<pos:position pos:line="89" pos:column="54"/></name></expr> <pos:position pos:line="89" pos:column="55"/></then><else pos:line="89" pos:column="55">: <expr><literal type="string" pos:line="89" pos:column="57">""<pos:position pos:line="89" pos:column="59"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="89" pos:column="61">error_buffer<pos:position pos:line="89" pos:column="73"/></name></expr></argument>)<pos:position pos:line="89" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="75"/></expr_stmt>

      <return pos:line="91" pos:column="7">return <expr><name pos:line="91" pos:column="14">result<pos:position pos:line="91" pos:column="20"/></name></expr>;<pos:position pos:line="91" pos:column="21"/></return>
    }<pos:position pos:line="92" pos:column="6"/></block></else></if>
  }<pos:position pos:line="93" pos:column="4"/></block></then>
  <else pos:line="94" pos:column="3">else <block pos:line="94" pos:column="8">{
    <comment type="block" pos:line="95" pos:column="5">/* we have been connected fine, we're not waiting for anything else. */</comment>
    <expr_stmt><expr><name><name pos:line="96" pos:column="5">connssl<pos:position pos:line="96" pos:column="12"/></name><operator pos:line="96" pos:column="12">-&gt;<pos:position pos:line="96" pos:column="17"/></operator><name pos:line="96" pos:column="14">connecting_state<pos:position pos:line="96" pos:column="30"/></name></name> <operator pos:line="96" pos:column="31">=<pos:position pos:line="96" pos:column="32"/></operator> <name pos:line="96" pos:column="33">ssl_connect_3<pos:position pos:line="96" pos:column="46"/></name></expr>;<pos:position pos:line="96" pos:column="47"/></expr_stmt>

    <comment type="block" pos:line="98" pos:column="5">/* Informational message */</comment>
    <expr_stmt><expr><call><name pos:line="99" pos:column="5">infof<pos:position pos:line="99" pos:column="10"/></name><argument_list pos:line="99" pos:column="10">(<argument><expr><name pos:line="99" pos:column="11">data<pos:position pos:line="99" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="17">"SSL connection using %s / %s\n"<pos:position pos:line="99" pos:column="49"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="100" pos:column="11">get_ssl_version_txt<pos:position pos:line="100" pos:column="30"/></name><argument_list pos:line="100" pos:column="30">(<argument><expr><name><name pos:line="100" pos:column="31">connssl<pos:position pos:line="100" pos:column="38"/></name><operator pos:line="100" pos:column="38">-&gt;<pos:position pos:line="100" pos:column="43"/></operator><name pos:line="100" pos:column="40">handle<pos:position pos:line="100" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="100" pos:column="47"/></argument_list></call></expr></argument>,
          <argument><expr><call><name pos:line="101" pos:column="11">SSL_get_cipher<pos:position pos:line="101" pos:column="25"/></name><argument_list pos:line="101" pos:column="25">(<argument><expr><name><name pos:line="101" pos:column="26">connssl<pos:position pos:line="101" pos:column="33"/></name><operator pos:line="101" pos:column="33">-&gt;<pos:position pos:line="101" pos:column="38"/></operator><name pos:line="101" pos:column="35">handle<pos:position pos:line="101" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="101" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="101" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="44"/></expr_stmt>

<cpp:ifdef pos:line="103" pos:column="1">#<cpp:directive pos:line="103" pos:column="2">ifdef<pos:position pos:line="103" pos:column="7"/></cpp:directive> <name pos:line="103" pos:column="8">HAS_ALPN<pos:position pos:line="103" pos:column="16"/></name></cpp:ifdef>
    <comment type="block" pos:line="104" pos:column="5">/* Sets data and len to negotiated protocol, len is 0 if no protocol was
     * negotiated
     */</comment>
    <if pos:line="107" pos:column="5">if<condition pos:line="107" pos:column="7">(<expr><name><name pos:line="107" pos:column="8">data<pos:position pos:line="107" pos:column="12"/></name><operator pos:line="107" pos:column="12">-&gt;<pos:position pos:line="107" pos:column="17"/></operator><name pos:line="107" pos:column="14">set<pos:position pos:line="107" pos:column="17"/></name><operator pos:line="107" pos:column="17">.<pos:position pos:line="107" pos:column="18"/></operator><name pos:line="107" pos:column="18">ssl_enable_alpn<pos:position pos:line="107" pos:column="33"/></name></name></expr>)<pos:position pos:line="107" pos:column="34"/></condition><then pos:line="107" pos:column="34"> <block pos:line="107" pos:column="35">{
      <decl_stmt><decl><type><specifier pos:line="108" pos:column="7">const<pos:position pos:line="108" pos:column="12"/></specifier> <name pos:line="108" pos:column="13">unsigned<pos:position pos:line="108" pos:column="21"/></name> <name pos:line="108" pos:column="22">char<pos:position pos:line="108" pos:column="26"/></name><modifier pos:line="108" pos:column="26">*<pos:position pos:line="108" pos:column="27"/></modifier></type> <name pos:line="108" pos:column="28">neg_protocol<pos:position pos:line="108" pos:column="40"/></name></decl>;<pos:position pos:line="108" pos:column="41"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="109" pos:column="7">unsigned<pos:position pos:line="109" pos:column="15"/></name> <name pos:line="109" pos:column="16">int<pos:position pos:line="109" pos:column="19"/></name></type> <name pos:line="109" pos:column="20">len<pos:position pos:line="109" pos:column="23"/></name></decl>;<pos:position pos:line="109" pos:column="24"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="110" pos:column="7">SSL_get0_alpn_selected<pos:position pos:line="110" pos:column="29"/></name><argument_list pos:line="110" pos:column="29">(<argument><expr><name><name pos:line="110" pos:column="30">connssl<pos:position pos:line="110" pos:column="37"/></name><operator pos:line="110" pos:column="37">-&gt;<pos:position pos:line="110" pos:column="42"/></operator><name pos:line="110" pos:column="39">handle<pos:position pos:line="110" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="110" pos:column="47">&amp;<pos:position pos:line="110" pos:column="52"/></operator><name pos:line="110" pos:column="48">neg_protocol<pos:position pos:line="110" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="110" pos:column="62">&amp;<pos:position pos:line="110" pos:column="67"/></operator><name pos:line="110" pos:column="63">len<pos:position pos:line="110" pos:column="66"/></name></expr></argument>)<pos:position pos:line="110" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="68"/></expr_stmt>
      <if pos:line="111" pos:column="7">if<condition pos:line="111" pos:column="9">(<expr><name pos:line="111" pos:column="10">len<pos:position pos:line="111" pos:column="13"/></name> <operator pos:line="111" pos:column="14">!=<pos:position pos:line="111" pos:column="16"/></operator> <literal type="number" pos:line="111" pos:column="17">0<pos:position pos:line="111" pos:column="18"/></literal></expr>)<pos:position pos:line="111" pos:column="19"/></condition><then pos:line="111" pos:column="19"> <block pos:line="111" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="112" pos:column="9">infof<pos:position pos:line="112" pos:column="14"/></name><argument_list pos:line="112" pos:column="14">(<argument><expr><name pos:line="112" pos:column="15">data<pos:position pos:line="112" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="112" pos:column="21">"ALPN, server accepted to use %.*s\n"<pos:position pos:line="112" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="112" pos:column="60">len<pos:position pos:line="112" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="65">neg_protocol<pos:position pos:line="112" pos:column="77"/></name></expr></argument>)<pos:position pos:line="112" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="79"/></expr_stmt>

        <if pos:line="114" pos:column="9">if<condition pos:line="114" pos:column="11">(<expr><name pos:line="114" pos:column="12">len<pos:position pos:line="114" pos:column="15"/></name> <operator pos:line="114" pos:column="16">==<pos:position pos:line="114" pos:column="18"/></operator> <name pos:line="114" pos:column="19">NGHTTP2_PROTO_VERSION_ID_LEN<pos:position pos:line="114" pos:column="47"/></name> <operator pos:line="114" pos:column="48">&amp;&amp;<pos:position pos:line="114" pos:column="58"/></operator>
           <call><name pos:line="115" pos:column="12">memcmp<pos:position pos:line="115" pos:column="18"/></name><argument_list pos:line="115" pos:column="18">(<argument><expr><name pos:line="115" pos:column="19">NGHTTP2_PROTO_VERSION_ID<pos:position pos:line="115" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="45">neg_protocol<pos:position pos:line="115" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="59">len<pos:position pos:line="115" pos:column="62"/></name></expr></argument>)<pos:position pos:line="115" pos:column="63"/></argument_list></call> <operator pos:line="115" pos:column="64">==<pos:position pos:line="115" pos:column="66"/></operator> <literal type="number" pos:line="115" pos:column="67">0<pos:position pos:line="115" pos:column="68"/></literal></expr>)<pos:position pos:line="115" pos:column="69"/></condition><then pos:line="115" pos:column="69"> <block pos:line="115" pos:column="70">{
          <expr_stmt><expr><name><name pos:line="116" pos:column="11">conn<pos:position pos:line="116" pos:column="15"/></name><operator pos:line="116" pos:column="15">-&gt;<pos:position pos:line="116" pos:column="20"/></operator><name pos:line="116" pos:column="17">negnpn<pos:position pos:line="116" pos:column="23"/></name></name> <operator pos:line="116" pos:column="24">=<pos:position pos:line="116" pos:column="25"/></operator> <name pos:line="116" pos:column="26">NPN_HTTP2<pos:position pos:line="116" pos:column="35"/></name></expr>;<pos:position pos:line="116" pos:column="36"/></expr_stmt>
        }<pos:position pos:line="117" pos:column="10"/></block></then>
        <elseif pos:line="118" pos:column="9">else <if pos:line="118" pos:column="14">if<condition pos:line="118" pos:column="16">(<expr><name pos:line="118" pos:column="17">len<pos:position pos:line="118" pos:column="20"/></name> <operator pos:line="118" pos:column="21">==<pos:position pos:line="118" pos:column="23"/></operator>
                <name pos:line="119" pos:column="17">ALPN_HTTP_1_1_LENGTH<pos:position pos:line="119" pos:column="37"/></name> <operator pos:line="119" pos:column="38">&amp;&amp;<pos:position pos:line="119" pos:column="48"/></operator> <call><name pos:line="119" pos:column="41">memcmp<pos:position pos:line="119" pos:column="47"/></name><argument_list pos:line="119" pos:column="47">(<argument><expr><name pos:line="119" pos:column="48">ALPN_HTTP_1_1<pos:position pos:line="119" pos:column="61"/></name></expr></argument>,
                                               <argument><expr><name pos:line="120" pos:column="48">neg_protocol<pos:position pos:line="120" pos:column="60"/></name></expr></argument>,
                                               <argument><expr><name pos:line="121" pos:column="48">ALPN_HTTP_1_1_LENGTH<pos:position pos:line="121" pos:column="68"/></name></expr></argument>)<pos:position pos:line="121" pos:column="69"/></argument_list></call> <operator pos:line="121" pos:column="70">==<pos:position pos:line="121" pos:column="72"/></operator> <literal type="number" pos:line="121" pos:column="73">0<pos:position pos:line="121" pos:column="74"/></literal></expr>)<pos:position pos:line="121" pos:column="75"/></condition><then pos:line="121" pos:column="75"> <block pos:line="121" pos:column="76">{
          <expr_stmt><expr><name><name pos:line="122" pos:column="11">conn<pos:position pos:line="122" pos:column="15"/></name><operator pos:line="122" pos:column="15">-&gt;<pos:position pos:line="122" pos:column="20"/></operator><name pos:line="122" pos:column="17">negnpn<pos:position pos:line="122" pos:column="23"/></name></name> <operator pos:line="122" pos:column="24">=<pos:position pos:line="122" pos:column="25"/></operator> <name pos:line="122" pos:column="26">NPN_HTTP1_1<pos:position pos:line="122" pos:column="37"/></name></expr>;<pos:position pos:line="122" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="123" pos:column="10"/></block></then></if></elseif></if>
      }<pos:position pos:line="124" pos:column="8"/></block></then>
      <elseif pos:line="125" pos:column="7">else <if pos:line="125" pos:column="12">if<condition pos:line="125" pos:column="14">(<expr><name><name pos:line="125" pos:column="15">connssl<pos:position pos:line="125" pos:column="22"/></name><operator pos:line="125" pos:column="22">-&gt;<pos:position pos:line="125" pos:column="27"/></operator><name pos:line="125" pos:column="24">asked_for_h2<pos:position pos:line="125" pos:column="36"/></name></name></expr>)<pos:position pos:line="125" pos:column="37"/></condition><then pos:line="125" pos:column="37">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="126" pos:column="9">infof<pos:position pos:line="126" pos:column="14"/></name><argument_list pos:line="126" pos:column="14">(<argument><expr><name pos:line="126" pos:column="15">data<pos:position pos:line="126" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="126" pos:column="21">"ALPN, server did not agree to a protocol\n"<pos:position pos:line="126" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="67"/></expr_stmt></block></then></if></elseif></if>
    }<pos:position pos:line="127" pos:column="6"/></block></then></if>
<cpp:endif pos:line="128" pos:column="1">#<cpp:directive pos:line="128" pos:column="2">endif<pos:position pos:line="128" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="130" pos:column="5">return <expr><name pos:line="130" pos:column="12">CURLE_OK<pos:position pos:line="130" pos:column="20"/></name></expr>;<pos:position pos:line="130" pos:column="21"/></return>
  }<pos:position pos:line="131" pos:column="4"/></block></else></if>
}<pos:position pos:line="132" pos:column="2"/></block></function></unit>
