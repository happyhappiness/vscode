<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_202_curl-7.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">bindlocal<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">connectdata<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="2" pos:column="27">curl_socket_t<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">sockfd<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">HAVE_INET_NTOA<pos:position pos:line="4" pos:column="22"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">bool<pos:position pos:line="5" pos:column="7"/></name></type> <name pos:line="5" pos:column="8">bindworked<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">FALSE<pos:position pos:line="5" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">SessionHandle<pos:position pos:line="6" pos:column="23"/></name></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">data<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><name><name pos:line="6" pos:column="32">conn<pos:position pos:line="6" pos:column="36"/></name><operator pos:line="6" pos:column="36">-&gt;<pos:position pos:line="6" pos:column="41"/></operator><name pos:line="6" pos:column="38">data<pos:position pos:line="6" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>

  <comment type="block" format="doxygen" pos:line="8" pos:column="3">/*************************************************************
   * Select device to bind socket to
   *************************************************************/</comment>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><call><name pos:line="11" pos:column="7">strlen<pos:position pos:line="11" pos:column="13"/></name><argument_list pos:line="11" pos:column="13">(<argument><expr><name><name pos:line="11" pos:column="14">data<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">-&gt;<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="20">set<pos:position pos:line="11" pos:column="23"/></name><operator pos:line="11" pos:column="23">.<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="24">device<pos:position pos:line="11" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call><operator pos:line="11" pos:column="31">&lt;<pos:position pos:line="11" pos:column="35"/></operator><literal type="number" pos:line="11" pos:column="32">255<pos:position pos:line="11" pos:column="35"/></literal></expr>)<pos:position pos:line="11" pos:column="36"/></condition><then pos:line="11" pos:column="36"> <block pos:line="11" pos:column="37">{
    <decl_stmt><decl><type><name><name pos:line="12" pos:column="5">struct<pos:position pos:line="12" pos:column="11"/></name> <name pos:line="12" pos:column="12">Curl_dns_entry<pos:position pos:line="12" pos:column="26"/></name></name> <modifier pos:line="12" pos:column="27">*<pos:position pos:line="12" pos:column="28"/></modifier></type><name pos:line="12" pos:column="28">h<pos:position pos:line="12" pos:column="29"/></name><init pos:line="12" pos:column="29">=<expr><name pos:line="12" pos:column="30">NULL<pos:position pos:line="12" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">size_t<pos:position pos:line="13" pos:column="11"/></name></type> <name pos:line="13" pos:column="12">size<pos:position pos:line="13" pos:column="16"/></name></decl>;<pos:position pos:line="13" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">char<pos:position pos:line="14" pos:column="9"/></name></type> <name><name pos:line="14" pos:column="10">myhost<pos:position pos:line="14" pos:column="16"/></name><index pos:line="14" pos:column="16">[<expr><literal type="number" pos:line="14" pos:column="17">256<pos:position pos:line="14" pos:column="20"/></literal></expr>]<pos:position pos:line="14" pos:column="21"/></index></name> <init pos:line="14" pos:column="22">= <expr><literal type="string" pos:line="14" pos:column="24">""<pos:position pos:line="14" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">in_addr_t<pos:position pos:line="15" pos:column="14"/></name></type> <name pos:line="15" pos:column="15">in<pos:position pos:line="15" pos:column="17"/></name></decl>;<pos:position pos:line="15" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">int<pos:position pos:line="16" pos:column="8"/></name></type> <name pos:line="16" pos:column="9">rc<pos:position pos:line="16" pos:column="11"/></name></decl>;<pos:position pos:line="16" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">bool<pos:position pos:line="17" pos:column="9"/></name></type> <name pos:line="17" pos:column="10">was_iface<pos:position pos:line="17" pos:column="19"/></name> <init pos:line="17" pos:column="20">= <expr><name pos:line="17" pos:column="22">FALSE<pos:position pos:line="17" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="28"/></decl_stmt>

    <comment type="block" pos:line="19" pos:column="5">/* First check if the given name is an IP address */</comment>
    <expr_stmt><expr><name pos:line="20" pos:column="5">in<pos:position pos:line="20" pos:column="7"/></name><operator pos:line="20" pos:column="7">=<pos:position pos:line="20" pos:column="8"/></operator><call><name pos:line="20" pos:column="8">inet_addr<pos:position pos:line="20" pos:column="17"/></name><argument_list pos:line="20" pos:column="17">(<argument><expr><name><name pos:line="20" pos:column="18">data<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">-&gt;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="24">set<pos:position pos:line="20" pos:column="27"/></name><operator pos:line="20" pos:column="27">.<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="28">device<pos:position pos:line="20" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="36"/></expr_stmt>

    <if pos:line="22" pos:column="5">if<condition pos:line="22" pos:column="7">(<expr><operator pos:line="22" pos:column="8">(<pos:position pos:line="22" pos:column="9"/></operator><name pos:line="22" pos:column="9">in<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">==<pos:position pos:line="22" pos:column="14"/></operator> <name pos:line="22" pos:column="15">CURL_INADDR_NONE<pos:position pos:line="22" pos:column="31"/></name><operator pos:line="22" pos:column="31">)<pos:position pos:line="22" pos:column="32"/></operator> <operator pos:line="22" pos:column="33">&amp;&amp;<pos:position pos:line="22" pos:column="43"/></operator>
       <call><name pos:line="23" pos:column="8">Curl_if2ip<pos:position pos:line="23" pos:column="18"/></name><argument_list pos:line="23" pos:column="18">(<argument><expr><name><name pos:line="23" pos:column="19">data<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">-&gt;<pos:position pos:line="23" pos:column="28"/></operator><name pos:line="23" pos:column="25">set<pos:position pos:line="23" pos:column="28"/></name><operator pos:line="23" pos:column="28">.<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="29">device<pos:position pos:line="23" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="37">myhost<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="45">sizeof<argument_list pos:line="23" pos:column="51">(<argument><expr><name pos:line="23" pos:column="52">myhost<pos:position pos:line="23" pos:column="58"/></name></expr></argument>)<pos:position pos:line="23" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="61"/></condition><then pos:line="23" pos:column="61"> <block pos:line="23" pos:column="62">{
      <comment type="block" pos:line="24" pos:column="7">/*
       * We now have the numerical IPv4-style x.y.z.w in the 'myhost' buffer
       */</comment>
      <expr_stmt><expr><name pos:line="27" pos:column="7">rc<pos:position pos:line="27" pos:column="9"/></name> <operator pos:line="27" pos:column="10">=<pos:position pos:line="27" pos:column="11"/></operator> <call><name pos:line="27" pos:column="12">Curl_resolv<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><name pos:line="27" pos:column="24">conn<pos:position pos:line="27" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="30">myhost<pos:position pos:line="27" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="38">0<pos:position pos:line="27" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="27" pos:column="41">&amp;<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="42">h<pos:position pos:line="27" pos:column="43"/></name></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt>
      <if pos:line="28" pos:column="7">if<condition pos:line="28" pos:column="9">(<expr><name pos:line="28" pos:column="10">rc<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">==<pos:position pos:line="28" pos:column="15"/></operator> <name pos:line="28" pos:column="16">CURLRESOLV_PENDING<pos:position pos:line="28" pos:column="34"/></name></expr>)<pos:position pos:line="28" pos:column="35"/></condition><then pos:line="28" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">void<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">)<pos:position pos:line="29" pos:column="15"/></operator><call><name pos:line="29" pos:column="15">Curl_wait_for_resolv<pos:position pos:line="29" pos:column="35"/></name><argument_list pos:line="29" pos:column="35">(<argument><expr><name pos:line="29" pos:column="36">conn<pos:position pos:line="29" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="42">&amp;<pos:position pos:line="29" pos:column="47"/></operator><name pos:line="29" pos:column="43">h<pos:position pos:line="29" pos:column="44"/></name></expr></argument>)<pos:position pos:line="29" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="46"/></expr_stmt></block></then></if>

      <if pos:line="31" pos:column="7">if<condition pos:line="31" pos:column="9">(<expr><name pos:line="31" pos:column="10">h<pos:position pos:line="31" pos:column="11"/></name></expr>)<pos:position pos:line="31" pos:column="12"/></condition><then pos:line="31" pos:column="12">
        <block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="9">was_iface<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">=<pos:position pos:line="32" pos:column="20"/></operator> <name pos:line="32" pos:column="21">TRUE<pos:position pos:line="32" pos:column="25"/></name></expr>;<pos:position pos:line="32" pos:column="26"/></expr_stmt></block></then></if>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>

    <if pos:line="35" pos:column="5">if<condition pos:line="35" pos:column="7">(<expr><operator pos:line="35" pos:column="8">!<pos:position pos:line="35" pos:column="9"/></operator><name pos:line="35" pos:column="9">was_iface<pos:position pos:line="35" pos:column="18"/></name></expr>)<pos:position pos:line="35" pos:column="19"/></condition><then pos:line="35" pos:column="19"> <block pos:line="35" pos:column="20">{
      <comment type="block" pos:line="36" pos:column="7">/*
       * This was not an interface, resolve the name as a host name
       * or IP number
       */</comment>
      <expr_stmt><expr><name pos:line="40" pos:column="7">rc<pos:position pos:line="40" pos:column="9"/></name> <operator pos:line="40" pos:column="10">=<pos:position pos:line="40" pos:column="11"/></operator> <call><name pos:line="40" pos:column="12">Curl_resolv<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><name pos:line="40" pos:column="24">conn<pos:position pos:line="40" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="30">data<pos:position pos:line="40" pos:column="34"/></name><operator pos:line="40" pos:column="34">-&gt;<pos:position pos:line="40" pos:column="39"/></operator><name pos:line="40" pos:column="36">set<pos:position pos:line="40" pos:column="39"/></name><operator pos:line="40" pos:column="39">.<pos:position pos:line="40" pos:column="40"/></operator><name pos:line="40" pos:column="40">device<pos:position pos:line="40" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="48">0<pos:position pos:line="40" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="40" pos:column="51">&amp;<pos:position pos:line="40" pos:column="56"/></operator><name pos:line="40" pos:column="52">h<pos:position pos:line="40" pos:column="53"/></name></expr></argument>)<pos:position pos:line="40" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="55"/></expr_stmt>
      <if pos:line="41" pos:column="7">if<condition pos:line="41" pos:column="9">(<expr><name pos:line="41" pos:column="10">rc<pos:position pos:line="41" pos:column="12"/></name> <operator pos:line="41" pos:column="13">==<pos:position pos:line="41" pos:column="15"/></operator> <name pos:line="41" pos:column="16">CURLRESOLV_PENDING<pos:position pos:line="41" pos:column="34"/></name></expr>)<pos:position pos:line="41" pos:column="35"/></condition><then pos:line="41" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="42" pos:column="9">(<pos:position pos:line="42" pos:column="10"/></operator><name pos:line="42" pos:column="10">void<pos:position pos:line="42" pos:column="14"/></name><operator pos:line="42" pos:column="14">)<pos:position pos:line="42" pos:column="15"/></operator><call><name pos:line="42" pos:column="15">Curl_wait_for_resolv<pos:position pos:line="42" pos:column="35"/></name><argument_list pos:line="42" pos:column="35">(<argument><expr><name pos:line="42" pos:column="36">conn<pos:position pos:line="42" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="42">&amp;<pos:position pos:line="42" pos:column="47"/></operator><name pos:line="42" pos:column="43">h<pos:position pos:line="42" pos:column="44"/></name></expr></argument>)<pos:position pos:line="42" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="46"/></expr_stmt></block></then></if>

      <if pos:line="44" pos:column="7">if<condition pos:line="44" pos:column="9">(<expr><name pos:line="44" pos:column="10">h<pos:position pos:line="44" pos:column="11"/></name></expr>)<pos:position pos:line="44" pos:column="12"/></condition><then pos:line="44" pos:column="12">
        <comment type="block" pos:line="45" pos:column="9">/* we know data-&gt;set.device is shorter than the myhost array */</comment>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="9">strcpy<pos:position pos:line="46" pos:column="15"/></name><argument_list pos:line="46" pos:column="15">(<argument><expr><name pos:line="46" pos:column="16">myhost<pos:position pos:line="46" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="24">data<pos:position pos:line="46" pos:column="28"/></name><operator pos:line="46" pos:column="28">-&gt;<pos:position pos:line="46" pos:column="33"/></operator><name pos:line="46" pos:column="30">set<pos:position pos:line="46" pos:column="33"/></name><operator pos:line="46" pos:column="33">.<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="34">device<pos:position pos:line="46" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="42"/></expr_stmt></block></then></if>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>

    <if pos:line="49" pos:column="5">if<condition pos:line="49" pos:column="7">(<expr><operator pos:line="49" pos:column="8">!<pos:position pos:line="49" pos:column="9"/></operator> <operator pos:line="49" pos:column="10">*<pos:position pos:line="49" pos:column="11"/></operator><name pos:line="49" pos:column="11">myhost<pos:position pos:line="49" pos:column="17"/></name></expr>)<pos:position pos:line="49" pos:column="18"/></condition><then pos:line="49" pos:column="18"> <block pos:line="49" pos:column="19">{
      <comment type="block" pos:line="50" pos:column="7">/* need to fix this
         h=Curl_gethost(data,
         getmyhost(*myhost,sizeof(myhost)),
         hostent_buf,
         sizeof(hostent_buf));
      */</comment>
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">failf<pos:position pos:line="56" pos:column="12"/></name><argument_list pos:line="56" pos:column="12">(<argument><expr><name pos:line="56" pos:column="13">data<pos:position pos:line="56" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="19">"Couldn't bind to '%s'"<pos:position pos:line="56" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="44">data<pos:position pos:line="56" pos:column="48"/></name><operator pos:line="56" pos:column="48">-&gt;<pos:position pos:line="56" pos:column="53"/></operator><name pos:line="56" pos:column="50">set<pos:position pos:line="56" pos:column="53"/></name><operator pos:line="56" pos:column="53">.<pos:position pos:line="56" pos:column="54"/></operator><name pos:line="56" pos:column="54">device<pos:position pos:line="56" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="62"/></expr_stmt>
      <return pos:line="57" pos:column="7">return <expr><name pos:line="57" pos:column="14">CURLE_HTTP_PORT_FAILED<pos:position pos:line="57" pos:column="36"/></name></expr>;<pos:position pos:line="57" pos:column="37"/></return>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="60" pos:column="5">infof<pos:position pos:line="60" pos:column="10"/></name><argument_list pos:line="60" pos:column="10">(<argument><expr><name pos:line="60" pos:column="11">data<pos:position pos:line="60" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="17">"We bind local end to %s\n"<pos:position pos:line="60" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="46">myhost<pos:position pos:line="60" pos:column="52"/></name></expr></argument>)<pos:position pos:line="60" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="54"/></expr_stmt>

<cpp:ifdef pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">ifdef<pos:position pos:line="62" pos:column="7"/></cpp:directive> <name pos:line="62" pos:column="8">SO_BINDTODEVICE<pos:position pos:line="62" pos:column="23"/></name></cpp:ifdef>
    <comment type="block" pos:line="63" pos:column="5">/* I am not sure any other OSs than Linux that provide this feature, and
     * at the least I cannot test. --Ben
     *
     * This feature allows one to tightly bind the local socket to a
     * particular interface.  This will force even requests to other local
     * interfaces to go out the external interface.
     *
     */</comment>
    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><name pos:line="71" pos:column="9">was_iface<pos:position pos:line="71" pos:column="18"/></name></expr>)<pos:position pos:line="71" pos:column="19"/></condition><then pos:line="71" pos:column="19"> <block pos:line="71" pos:column="20">{
      <comment type="block" pos:line="72" pos:column="7">/* Only bind to the interface when specified as interface, not just as a
       * hostname or ip address.
       */</comment>
      <if pos:line="75" pos:column="7">if <condition pos:line="75" pos:column="10">(<expr><call><name pos:line="75" pos:column="11">setsockopt<pos:position pos:line="75" pos:column="21"/></name><argument_list pos:line="75" pos:column="21">(<argument><expr><name pos:line="75" pos:column="22">sockfd<pos:position pos:line="75" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="30">SOL_SOCKET<pos:position pos:line="75" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="42">SO_BINDTODEVICE<pos:position pos:line="75" pos:column="57"/></name></expr></argument>,
                     <argument><expr><name><name pos:line="76" pos:column="22">data<pos:position pos:line="76" pos:column="26"/></name><operator pos:line="76" pos:column="26">-&gt;<pos:position pos:line="76" pos:column="31"/></operator><name pos:line="76" pos:column="28">set<pos:position pos:line="76" pos:column="31"/></name><operator pos:line="76" pos:column="31">.<pos:position pos:line="76" pos:column="32"/></operator><name pos:line="76" pos:column="32">device<pos:position pos:line="76" pos:column="38"/></name></name></expr></argument>, <argument><expr><call><name pos:line="76" pos:column="40">strlen<pos:position pos:line="76" pos:column="46"/></name><argument_list pos:line="76" pos:column="46">(<argument><expr><name><name pos:line="76" pos:column="47">data<pos:position pos:line="76" pos:column="51"/></name><operator pos:line="76" pos:column="51">-&gt;<pos:position pos:line="76" pos:column="56"/></operator><name pos:line="76" pos:column="53">set<pos:position pos:line="76" pos:column="56"/></name><operator pos:line="76" pos:column="56">.<pos:position pos:line="76" pos:column="57"/></operator><name pos:line="76" pos:column="57">device<pos:position pos:line="76" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="64"/></argument_list></call><operator pos:line="76" pos:column="64">+<pos:position pos:line="76" pos:column="65"/></operator><literal type="number" pos:line="76" pos:column="65">1<pos:position pos:line="76" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="67"/></argument_list></call> <operator pos:line="76" pos:column="68">!=<pos:position pos:line="76" pos:column="70"/></operator> <literal type="number" pos:line="76" pos:column="71">0<pos:position pos:line="76" pos:column="72"/></literal></expr>)<pos:position pos:line="76" pos:column="73"/></condition><then pos:line="76" pos:column="73"> <block pos:line="76" pos:column="74">{
        <comment type="block" pos:line="77" pos:column="9">/* printf("Failed to BINDTODEVICE, socket: %d  device: %s error: %s\n",
           sockfd, data-&gt;set.device, Curl_strerror(Curl_ourerrno())); */</comment>
        <expr_stmt><expr><call><name pos:line="79" pos:column="9">infof<pos:position pos:line="79" pos:column="14"/></name><argument_list pos:line="79" pos:column="14">(<argument><expr><name pos:line="79" pos:column="15">data<pos:position pos:line="79" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="21">"SO_BINDTODEVICE %s failed\n"<pos:position pos:line="79" pos:column="50"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="80" pos:column="15">data<pos:position pos:line="80" pos:column="19"/></name><operator pos:line="80" pos:column="19">-&gt;<pos:position pos:line="80" pos:column="24"/></operator><name pos:line="80" pos:column="21">set<pos:position pos:line="80" pos:column="24"/></name><operator pos:line="80" pos:column="24">.<pos:position pos:line="80" pos:column="25"/></operator><name pos:line="80" pos:column="25">device<pos:position pos:line="80" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="33"/></expr_stmt>
        <comment type="block" pos:line="81" pos:column="9">/* This is typically "errno 1, error: Operation not permitted" if
           you're not running as root or another suitable privileged user */</comment>
      }<pos:position pos:line="83" pos:column="8"/></block></then></if>
    }<pos:position pos:line="84" pos:column="6"/></block></then></if>
<cpp:endif pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">endif<pos:position pos:line="85" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="87" pos:column="5">in<pos:position pos:line="87" pos:column="7"/></name><operator pos:line="87" pos:column="7">=<pos:position pos:line="87" pos:column="8"/></operator><call><name pos:line="87" pos:column="8">inet_addr<pos:position pos:line="87" pos:column="17"/></name><argument_list pos:line="87" pos:column="17">(<argument><expr><name pos:line="87" pos:column="18">myhost<pos:position pos:line="87" pos:column="24"/></name></expr></argument>)<pos:position pos:line="87" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="26"/></expr_stmt>
    <if pos:line="88" pos:column="5">if <condition pos:line="88" pos:column="8">(<expr><name pos:line="88" pos:column="9">CURL_INADDR_NONE<pos:position pos:line="88" pos:column="25"/></name> <operator pos:line="88" pos:column="26">!=<pos:position pos:line="88" pos:column="28"/></operator> <name pos:line="88" pos:column="29">in<pos:position pos:line="88" pos:column="31"/></name></expr>)<pos:position pos:line="88" pos:column="32"/></condition><then pos:line="88" pos:column="32"> <block pos:line="88" pos:column="33">{

      <if pos:line="90" pos:column="7">if <condition pos:line="90" pos:column="10">( <expr><name pos:line="90" pos:column="12">h<pos:position pos:line="90" pos:column="13"/></name></expr> )<pos:position pos:line="90" pos:column="15"/></condition><then pos:line="90" pos:column="15"> <block pos:line="90" pos:column="16">{
        <decl_stmt><decl><type><name pos:line="91" pos:column="9">Curl_addrinfo<pos:position pos:line="91" pos:column="22"/></name> <modifier pos:line="91" pos:column="23">*<pos:position pos:line="91" pos:column="24"/></modifier></type><name pos:line="91" pos:column="24">addr<pos:position pos:line="91" pos:column="28"/></name> <init pos:line="91" pos:column="29">= <expr><name><name pos:line="91" pos:column="31">h<pos:position pos:line="91" pos:column="32"/></name><operator pos:line="91" pos:column="32">-&gt;<pos:position pos:line="91" pos:column="37"/></operator><name pos:line="91" pos:column="34">addr<pos:position pos:line="91" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="91" pos:column="39"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="93" pos:column="9">Curl_resolv_unlock<pos:position pos:line="93" pos:column="27"/></name><argument_list pos:line="93" pos:column="27">(<argument><expr><name pos:line="93" pos:column="28">data<pos:position pos:line="93" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="34">h<pos:position pos:line="93" pos:column="35"/></name></expr></argument>)<pos:position pos:line="93" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="37"/></expr_stmt>
        <comment type="block" pos:line="94" pos:column="9">/* we don't need it anymore after this function has returned */</comment>

        <if pos:line="96" pos:column="9">if<condition pos:line="96" pos:column="11">( <expr><call><name pos:line="96" pos:column="13">bind<pos:position pos:line="96" pos:column="17"/></name><argument_list pos:line="96" pos:column="17">(<argument><expr><name pos:line="96" pos:column="18">sockfd<pos:position pos:line="96" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="96" pos:column="26">addr<pos:position pos:line="96" pos:column="30"/></name><operator pos:line="96" pos:column="30">-&gt;<pos:position pos:line="96" pos:column="35"/></operator><name pos:line="96" pos:column="32">ai_addr<pos:position pos:line="96" pos:column="39"/></name></name></expr></argument>, <argument><expr><operator pos:line="96" pos:column="41">(<pos:position pos:line="96" pos:column="42"/></operator><name pos:line="96" pos:column="42">socklen_t<pos:position pos:line="96" pos:column="51"/></name><operator pos:line="96" pos:column="51">)<pos:position pos:line="96" pos:column="52"/></operator><name><name pos:line="96" pos:column="52">addr<pos:position pos:line="96" pos:column="56"/></name><operator pos:line="96" pos:column="56">-&gt;<pos:position pos:line="96" pos:column="61"/></operator><name pos:line="96" pos:column="58">ai_addrlen<pos:position pos:line="96" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="96" pos:column="69"/></argument_list></call> <operator pos:line="96" pos:column="70">&gt;=<pos:position pos:line="96" pos:column="75"/></operator> <literal type="number" pos:line="96" pos:column="73">0<pos:position pos:line="96" pos:column="74"/></literal></expr>)<pos:position pos:line="96" pos:column="75"/></condition><then pos:line="96" pos:column="75"> <block pos:line="96" pos:column="76">{
          <comment type="block" pos:line="97" pos:column="11">/* we succeeded to bind */</comment>
<cpp:ifdef pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">ifdef<pos:position pos:line="98" pos:column="7"/></cpp:directive> <name pos:line="98" pos:column="8">ENABLE_IPV6<pos:position pos:line="98" pos:column="19"/></name></cpp:ifdef>
          <decl_stmt><decl><type><name><name pos:line="99" pos:column="11">struct<pos:position pos:line="99" pos:column="17"/></name> <name pos:line="99" pos:column="18">sockaddr_in6<pos:position pos:line="99" pos:column="30"/></name></name></type> <name pos:line="99" pos:column="31">add<pos:position pos:line="99" pos:column="34"/></name></decl>;<pos:position pos:line="99" pos:column="35"/></decl_stmt>
<cpp:else pos:line="100" pos:column="1">#<cpp:directive pos:line="100" pos:column="2">else<pos:position pos:line="100" pos:column="6"/></cpp:directive></cpp:else>
          <decl_stmt><decl><type><name><name pos:line="101" pos:column="11">struct<pos:position pos:line="101" pos:column="17"/></name> <name pos:line="101" pos:column="18">sockaddr_in<pos:position pos:line="101" pos:column="29"/></name></name></type> <name pos:line="101" pos:column="30">add<pos:position pos:line="101" pos:column="33"/></name></decl>;<pos:position pos:line="101" pos:column="34"/></decl_stmt>
<cpp:endif pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">endif<pos:position pos:line="102" pos:column="7"/></cpp:directive></cpp:endif>

          <expr_stmt><expr><name pos:line="104" pos:column="11">bindworked<pos:position pos:line="104" pos:column="21"/></name> <operator pos:line="104" pos:column="22">=<pos:position pos:line="104" pos:column="23"/></operator> <name pos:line="104" pos:column="24">TRUE<pos:position pos:line="104" pos:column="28"/></name></expr>;<pos:position pos:line="104" pos:column="29"/></expr_stmt>

          <expr_stmt><expr><name pos:line="106" pos:column="11">size<pos:position pos:line="106" pos:column="15"/></name> <operator pos:line="106" pos:column="16">=<pos:position pos:line="106" pos:column="17"/></operator> <sizeof pos:line="106" pos:column="18">sizeof<argument_list pos:line="106" pos:column="24">(<argument><expr><name pos:line="106" pos:column="25">add<pos:position pos:line="106" pos:column="28"/></name></expr></argument>)<pos:position pos:line="106" pos:column="29"/></argument_list></sizeof></expr>;<pos:position pos:line="106" pos:column="30"/></expr_stmt>
          <if pos:line="107" pos:column="11">if<condition pos:line="107" pos:column="13">(<expr><call><name pos:line="107" pos:column="14">getsockname<pos:position pos:line="107" pos:column="25"/></name><argument_list pos:line="107" pos:column="25">(<argument><expr><name pos:line="107" pos:column="26">sockfd<pos:position pos:line="107" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="107" pos:column="34">(<pos:position pos:line="107" pos:column="35"/></operator>struct <name pos:line="107" pos:column="42">sockaddr<pos:position pos:line="107" pos:column="50"/></name> <operator pos:line="107" pos:column="51">*<pos:position pos:line="107" pos:column="52"/></operator><operator pos:line="107" pos:column="52">)<pos:position pos:line="107" pos:column="53"/></operator> <operator pos:line="107" pos:column="54">&amp;<pos:position pos:line="107" pos:column="59"/></operator><name pos:line="107" pos:column="55">add<pos:position pos:line="107" pos:column="58"/></name></expr></argument>,
                         <argument><expr><operator pos:line="108" pos:column="26">(<pos:position pos:line="108" pos:column="27"/></operator><name pos:line="108" pos:column="27">socklen_t<pos:position pos:line="108" pos:column="36"/></name> <operator pos:line="108" pos:column="37">*<pos:position pos:line="108" pos:column="38"/></operator><operator pos:line="108" pos:column="38">)<pos:position pos:line="108" pos:column="39"/></operator><operator pos:line="108" pos:column="39">&amp;<pos:position pos:line="108" pos:column="44"/></operator><name pos:line="108" pos:column="40">size<pos:position pos:line="108" pos:column="44"/></name></expr></argument>)<pos:position pos:line="108" pos:column="45"/></argument_list></call><operator pos:line="108" pos:column="45">&lt;<pos:position pos:line="108" pos:column="49"/></operator><literal type="number" pos:line="108" pos:column="46">0<pos:position pos:line="108" pos:column="47"/></literal></expr>)<pos:position pos:line="108" pos:column="48"/></condition><then pos:line="108" pos:column="48"> <block pos:line="108" pos:column="49">{
            <expr_stmt><expr><call><name pos:line="109" pos:column="13">failf<pos:position pos:line="109" pos:column="18"/></name><argument_list pos:line="109" pos:column="18">(<argument><expr><name pos:line="109" pos:column="19">data<pos:position pos:line="109" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="109" pos:column="25">"getsockname() failed"<pos:position pos:line="109" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="49"/></expr_stmt>
            <return pos:line="110" pos:column="13">return <expr><name pos:line="110" pos:column="20">CURLE_HTTP_PORT_FAILED<pos:position pos:line="110" pos:column="42"/></name></expr>;<pos:position pos:line="110" pos:column="43"/></return>
          }<pos:position pos:line="111" pos:column="12"/></block></then></if>
        }<pos:position pos:line="112" pos:column="10"/></block></then></if>

        <if pos:line="114" pos:column="9">if<condition pos:line="114" pos:column="11">(<expr><operator pos:line="114" pos:column="12">!<pos:position pos:line="114" pos:column="13"/></operator><name pos:line="114" pos:column="13">bindworked<pos:position pos:line="114" pos:column="23"/></name></expr>)<pos:position pos:line="114" pos:column="24"/></condition><then pos:line="114" pos:column="24"> <block pos:line="114" pos:column="25">{
          <expr_stmt><expr><name><name pos:line="115" pos:column="11">data<pos:position pos:line="115" pos:column="15"/></name><operator pos:line="115" pos:column="15">-&gt;<pos:position pos:line="115" pos:column="20"/></operator><name pos:line="115" pos:column="17">state<pos:position pos:line="115" pos:column="22"/></name><operator pos:line="115" pos:column="22">.<pos:position pos:line="115" pos:column="23"/></operator><name pos:line="115" pos:column="23">os_errno<pos:position pos:line="115" pos:column="31"/></name></name> <operator pos:line="115" pos:column="32">=<pos:position pos:line="115" pos:column="33"/></operator> <call><name pos:line="115" pos:column="34">Curl_ourerrno<pos:position pos:line="115" pos:column="47"/></name><argument_list pos:line="115" pos:column="47">()<pos:position pos:line="115" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="50"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="116" pos:column="11">failf<pos:position pos:line="116" pos:column="16"/></name><argument_list pos:line="116" pos:column="16">(<argument><expr><name pos:line="116" pos:column="17">data<pos:position pos:line="116" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="116" pos:column="23">"bind failure: %s"<pos:position pos:line="116" pos:column="41"/></literal></expr></argument>,
                <argument><expr><call><name pos:line="117" pos:column="17">Curl_strerror<pos:position pos:line="117" pos:column="30"/></name><argument_list pos:line="117" pos:column="30">(<argument><expr><name pos:line="117" pos:column="31">conn<pos:position pos:line="117" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="117" pos:column="37">data<pos:position pos:line="117" pos:column="41"/></name><operator pos:line="117" pos:column="41">-&gt;<pos:position pos:line="117" pos:column="46"/></operator><name pos:line="117" pos:column="43">state<pos:position pos:line="117" pos:column="48"/></name><operator pos:line="117" pos:column="48">.<pos:position pos:line="117" pos:column="49"/></operator><name pos:line="117" pos:column="49">os_errno<pos:position pos:line="117" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="117" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="117" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="60"/></expr_stmt>
          <return pos:line="118" pos:column="11">return <expr><name pos:line="118" pos:column="18">CURLE_HTTP_PORT_FAILED<pos:position pos:line="118" pos:column="40"/></name></expr>;<pos:position pos:line="118" pos:column="41"/></return>
        }<pos:position pos:line="119" pos:column="10"/></block></then></if>

      }<pos:position pos:line="121" pos:column="8"/></block></then> <comment type="block" pos:line="121" pos:column="9">/* end of if  h */</comment>
      <else pos:line="122" pos:column="7">else <block pos:line="122" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="123" pos:column="9">failf<pos:position pos:line="123" pos:column="14"/></name><argument_list pos:line="123" pos:column="14">(<argument><expr><name pos:line="123" pos:column="15">data<pos:position pos:line="123" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="123" pos:column="20">"could't find my own IP address (%s)"<pos:position pos:line="123" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="123" pos:column="59">myhost<pos:position pos:line="123" pos:column="65"/></name></expr></argument>)<pos:position pos:line="123" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="67"/></expr_stmt>
        <return pos:line="124" pos:column="9">return <expr><name pos:line="124" pos:column="16">CURLE_HTTP_PORT_FAILED<pos:position pos:line="124" pos:column="38"/></name></expr>;<pos:position pos:line="124" pos:column="39"/></return>
      }<pos:position pos:line="125" pos:column="8"/></block></else></if>
    }<pos:position pos:line="126" pos:column="6"/></block></then> <comment type="block" pos:line="126" pos:column="7">/* end of inet_addr */</comment>

    <else pos:line="128" pos:column="5">else <block pos:line="128" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="129" pos:column="7">failf<pos:position pos:line="129" pos:column="12"/></name><argument_list pos:line="129" pos:column="12">(<argument><expr><name pos:line="129" pos:column="13">data<pos:position pos:line="129" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="129" pos:column="19">"could't find my own IP address (%s)"<pos:position pos:line="129" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="129" pos:column="58">myhost<pos:position pos:line="129" pos:column="64"/></name></expr></argument>)<pos:position pos:line="129" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="66"/></expr_stmt>
      <return pos:line="130" pos:column="7">return <expr><name pos:line="130" pos:column="14">CURLE_HTTP_PORT_FAILED<pos:position pos:line="130" pos:column="36"/></name></expr>;<pos:position pos:line="130" pos:column="37"/></return>
    }<pos:position pos:line="131" pos:column="6"/></block></else></if>

    <return pos:line="133" pos:column="5">return <expr><name pos:line="133" pos:column="12">CURLE_OK<pos:position pos:line="133" pos:column="20"/></name></expr>;<pos:position pos:line="133" pos:column="21"/></return>

  }<pos:position pos:line="135" pos:column="4"/></block></then></if> <comment type="block" pos:line="135" pos:column="5">/* end of device selection support */</comment>
<cpp:else pos:line="136" pos:column="1">#<cpp:directive pos:line="136" pos:column="2">else<pos:position pos:line="136" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><operator pos:line="137" pos:column="3">(<pos:position pos:line="137" pos:column="4"/></operator><name pos:line="137" pos:column="4">void<pos:position pos:line="137" pos:column="8"/></name><operator pos:line="137" pos:column="8">)<pos:position pos:line="137" pos:column="9"/></operator><name pos:line="137" pos:column="9">conn<pos:position pos:line="137" pos:column="13"/></name></expr>;<pos:position pos:line="137" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="138" pos:column="3">(<pos:position pos:line="138" pos:column="4"/></operator><name pos:line="138" pos:column="4">void<pos:position pos:line="138" pos:column="8"/></name><operator pos:line="138" pos:column="8">)<pos:position pos:line="138" pos:column="9"/></operator><name pos:line="138" pos:column="9">sockfd<pos:position pos:line="138" pos:column="15"/></name></expr>;<pos:position pos:line="138" pos:column="16"/></expr_stmt>
<cpp:endif pos:line="139" pos:column="1">#<cpp:directive pos:line="139" pos:column="2">endif<pos:position pos:line="139" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="139" pos:column="8">/* end of HAVE_INET_NTOA */</comment>

  <return pos:line="141" pos:column="3">return <expr><name pos:line="141" pos:column="10">CURLE_HTTP_PORT_FAILED<pos:position pos:line="141" pos:column="32"/></name></expr>;<pos:position pos:line="141" pos:column="33"/></return>
}<pos:position pos:line="142" pos:column="2"/></block></function></unit>
