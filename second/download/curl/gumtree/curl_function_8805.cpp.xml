<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_function_8805.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">dumpeasysrc<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name><name pos:line="1" pos:column="18">struct<pos:position pos:line="1" pos:column="24"/></name> <name pos:line="1" pos:column="25">Configurable<pos:position pos:line="1" pos:column="37"/></name></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">config<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">curl_slist<pos:position pos:line="3" pos:column="20"/></name></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">ptr<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">o<pos:position pos:line="4" pos:column="10"/></name> <init pos:line="4" pos:column="11">= <expr><name><name pos:line="4" pos:column="13">config<pos:position pos:line="4" pos:column="19"/></name><operator pos:line="4" pos:column="19">-&gt;<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="21">libcurl<pos:position pos:line="4" pos:column="28"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

  <if pos:line="6" pos:column="3">if<condition pos:line="6" pos:column="5">(<expr><name pos:line="6" pos:column="6">o<pos:position pos:line="6" pos:column="7"/></name></expr>)<pos:position pos:line="6" pos:column="8"/></condition><then pos:line="6" pos:column="8"> <block pos:line="6" pos:column="9">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">FILE<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">out<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">bool<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">fopened<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">= <expr><name pos:line="8" pos:column="20">FALSE<pos:position pos:line="8" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>
    <if pos:line="9" pos:column="5">if<condition pos:line="9" pos:column="7">(<expr><call><name pos:line="9" pos:column="8">strcmp<pos:position pos:line="9" pos:column="14"/></name><argument_list pos:line="9" pos:column="14">(<argument><expr><name pos:line="9" pos:column="15">o<pos:position pos:line="9" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="18">"-"<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="23"/></condition><then pos:line="9" pos:column="23"> <block pos:line="9" pos:column="24">{
      <expr_stmt><expr><name pos:line="10" pos:column="7">out<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <call><name pos:line="10" pos:column="13">fopen<pos:position pos:line="10" pos:column="18"/></name><argument_list pos:line="10" pos:column="18">(<argument><expr><name pos:line="10" pos:column="19">o<pos:position pos:line="10" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="22">"w"<pos:position pos:line="10" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><name pos:line="11" pos:column="7">fopened<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <name pos:line="11" pos:column="17">TRUE<pos:position pos:line="11" pos:column="21"/></name></expr>;<pos:position pos:line="11" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then>
    <else pos:line="13" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="7">out<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <name pos:line="14" pos:column="13">stdout<pos:position pos:line="14" pos:column="19"/></name></expr>;<pos:position pos:line="14" pos:column="20"/></expr_stmt></block></else></if>
    <if pos:line="15" pos:column="5">if<condition pos:line="15" pos:column="7">(<expr><operator pos:line="15" pos:column="8">!<pos:position pos:line="15" pos:column="9"/></operator><name pos:line="15" pos:column="9">out<pos:position pos:line="15" pos:column="12"/></name></expr>)<pos:position pos:line="15" pos:column="13"/></condition><then pos:line="15" pos:column="13">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="7">warnf<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">config<pos:position pos:line="16" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="21">"Failed to open %s to write libcurl code!\n"<pos:position pos:line="16" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="67">o<pos:position pos:line="16" pos:column="68"/></name></expr></argument>)<pos:position pos:line="16" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="70"/></expr_stmt></block></then>
    <else pos:line="17" pos:column="5">else <block pos:line="17" pos:column="10">{
      <decl_stmt><decl><type><name pos:line="18" pos:column="7">int<pos:position pos:line="18" pos:column="10"/></name></type> <name pos:line="18" pos:column="11">i<pos:position pos:line="18" pos:column="12"/></name></decl>;<pos:position pos:line="18" pos:column="13"/></decl_stmt>
      <decl_stmt><decl><type><specifier pos:line="19" pos:column="7">const<pos:position pos:line="19" pos:column="12"/></specifier> <name pos:line="19" pos:column="13">char<pos:position pos:line="19" pos:column="17"/></name> <modifier pos:line="19" pos:column="18">*<pos:position pos:line="19" pos:column="19"/></modifier></type><name pos:line="19" pos:column="19">c<pos:position pos:line="19" pos:column="20"/></name></decl>;<pos:position pos:line="19" pos:column="21"/></decl_stmt>

      <for pos:line="21" pos:column="7">for<control pos:line="21" pos:column="10">(<init><expr><name pos:line="21" pos:column="11">i<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator><literal type="number" pos:line="21" pos:column="13">0<pos:position pos:line="21" pos:column="14"/></literal></expr>;<pos:position pos:line="21" pos:column="15"/></init> <condition><expr><operator pos:line="21" pos:column="16">(<pos:position pos:line="21" pos:column="17"/></operator><operator pos:line="21" pos:column="17">(<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="18">c<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <name><name pos:line="21" pos:column="22">srchead<pos:position pos:line="21" pos:column="29"/></name><index pos:line="21" pos:column="29">[<expr><name pos:line="21" pos:column="30">i<pos:position pos:line="21" pos:column="31"/></name></expr>]<pos:position pos:line="21" pos:column="32"/></index></name><operator pos:line="21" pos:column="32">)<pos:position pos:line="21" pos:column="33"/></operator> <operator pos:line="21" pos:column="34">!=<pos:position pos:line="21" pos:column="36"/></operator> <name pos:line="21" pos:column="37">NULL<pos:position pos:line="21" pos:column="41"/></name><operator pos:line="21" pos:column="41">)<pos:position pos:line="21" pos:column="42"/></operator></expr>;<pos:position pos:line="21" pos:column="43"/></condition> <incr><expr><name pos:line="21" pos:column="44">i<pos:position pos:line="21" pos:column="45"/></name><operator pos:line="21" pos:column="45">++<pos:position pos:line="21" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="21" pos:column="48"/></control>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="9">fprintf<pos:position pos:line="22" pos:column="16"/></name><argument_list pos:line="22" pos:column="16">(<argument><expr><name pos:line="22" pos:column="17">out<pos:position pos:line="22" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="22">"%s\n"<pos:position pos:line="22" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="30">c<pos:position pos:line="22" pos:column="31"/></name></expr></argument>)<pos:position pos:line="22" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="33"/></expr_stmt></block></for>

      <comment type="block" pos:line="24" pos:column="7">/* Declare variables used for complex setopt values */</comment>
      <for pos:line="25" pos:column="7">for<control pos:line="25" pos:column="10">(<init><expr><name pos:line="25" pos:column="11">ptr<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="15">easysrc_decl<pos:position pos:line="25" pos:column="27"/></name></expr>;<pos:position pos:line="25" pos:column="28"/></init> <condition><expr><name pos:line="25" pos:column="29">ptr<pos:position pos:line="25" pos:column="32"/></name></expr>;<pos:position pos:line="25" pos:column="33"/></condition> <incr><expr><name pos:line="25" pos:column="34">ptr<pos:position pos:line="25" pos:column="37"/></name> <operator pos:line="25" pos:column="38">=<pos:position pos:line="25" pos:column="39"/></operator> <name><name pos:line="25" pos:column="40">ptr<pos:position pos:line="25" pos:column="43"/></name><operator pos:line="25" pos:column="43">-&gt;<pos:position pos:line="25" pos:column="48"/></operator><name pos:line="25" pos:column="45">next<pos:position pos:line="25" pos:column="49"/></name></name></expr></incr>)<pos:position pos:line="25" pos:column="50"/></control>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="9">fprintf<pos:position pos:line="26" pos:column="16"/></name><argument_list pos:line="26" pos:column="16">(<argument><expr><name pos:line="26" pos:column="17">out<pos:position pos:line="26" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="22">"  %s\n"<pos:position pos:line="26" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="32">ptr<pos:position pos:line="26" pos:column="35"/></name><operator pos:line="26" pos:column="35">-&gt;<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="37">data<pos:position pos:line="26" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="43"/></expr_stmt></block></for>

      <comment type="block" pos:line="28" pos:column="7">/* Set up complex values for setopt calls */</comment>
      <if pos:line="29" pos:column="7">if<condition pos:line="29" pos:column="9">(<expr><name pos:line="29" pos:column="10">easysrc_data<pos:position pos:line="29" pos:column="22"/></name></expr>)<pos:position pos:line="29" pos:column="23"/></condition><then pos:line="29" pos:column="23"> <block pos:line="29" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">fprintf<pos:position pos:line="30" pos:column="16"/></name><argument_list pos:line="30" pos:column="16">(<argument><expr><name pos:line="30" pos:column="17">out<pos:position pos:line="30" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="22">"\n"<pos:position pos:line="30" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="28"/></expr_stmt>

        <for pos:line="32" pos:column="9">for<control pos:line="32" pos:column="12">(<init><expr><name pos:line="32" pos:column="13">ptr<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">=<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="17">easysrc_data<pos:position pos:line="32" pos:column="29"/></name></expr>;<pos:position pos:line="32" pos:column="30"/></init> <condition><expr><name pos:line="32" pos:column="31">ptr<pos:position pos:line="32" pos:column="34"/></name></expr>;<pos:position pos:line="32" pos:column="35"/></condition> <incr><expr><name pos:line="32" pos:column="36">ptr<pos:position pos:line="32" pos:column="39"/></name> <operator pos:line="32" pos:column="40">=<pos:position pos:line="32" pos:column="41"/></operator> <name><name pos:line="32" pos:column="42">ptr<pos:position pos:line="32" pos:column="45"/></name><operator pos:line="32" pos:column="45">-&gt;<pos:position pos:line="32" pos:column="50"/></operator><name pos:line="32" pos:column="47">next<pos:position pos:line="32" pos:column="51"/></name></name></expr></incr>)<pos:position pos:line="32" pos:column="52"/></control>
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="11">fprintf<pos:position pos:line="33" pos:column="18"/></name><argument_list pos:line="33" pos:column="18">(<argument><expr><name pos:line="33" pos:column="19">out<pos:position pos:line="33" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="24">"  %s\n"<pos:position pos:line="33" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="34">ptr<pos:position pos:line="33" pos:column="37"/></name><operator pos:line="33" pos:column="37">-&gt;<pos:position pos:line="33" pos:column="42"/></operator><name pos:line="33" pos:column="39">data<pos:position pos:line="33" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="45"/></expr_stmt></block></for>
      }<pos:position pos:line="34" pos:column="8"/></block></then></if>

      <expr_stmt><expr><call><name pos:line="36" pos:column="7">fprintf<pos:position pos:line="36" pos:column="14"/></name><argument_list pos:line="36" pos:column="14">(<argument><expr><name pos:line="36" pos:column="15">out<pos:position pos:line="36" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="20">"\n"<pos:position pos:line="36" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="26"/></expr_stmt>
      <for pos:line="37" pos:column="7">for<control pos:line="37" pos:column="10">(<init><expr><name pos:line="37" pos:column="11">ptr<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="15">easysrc_code<pos:position pos:line="37" pos:column="27"/></name></expr>;<pos:position pos:line="37" pos:column="28"/></init> <condition><expr><name pos:line="37" pos:column="29">ptr<pos:position pos:line="37" pos:column="32"/></name></expr>;<pos:position pos:line="37" pos:column="33"/></condition> <incr><expr><name pos:line="37" pos:column="34">ptr<pos:position pos:line="37" pos:column="37"/></name> <operator pos:line="37" pos:column="38">=<pos:position pos:line="37" pos:column="39"/></operator> <name><name pos:line="37" pos:column="40">ptr<pos:position pos:line="37" pos:column="43"/></name><operator pos:line="37" pos:column="43">-&gt;<pos:position pos:line="37" pos:column="48"/></operator><name pos:line="37" pos:column="45">next<pos:position pos:line="37" pos:column="49"/></name></name></expr></incr>)<pos:position pos:line="37" pos:column="50"/></control> <block pos:line="37" pos:column="51">{
        <if pos:line="38" pos:column="9">if<condition pos:line="38" pos:column="11">(<expr><name><name pos:line="38" pos:column="12">ptr<pos:position pos:line="38" pos:column="15"/></name><operator pos:line="38" pos:column="15">-&gt;<pos:position pos:line="38" pos:column="20"/></operator><name pos:line="38" pos:column="17">data<pos:position pos:line="38" pos:column="21"/></name><index pos:line="38" pos:column="21">[<expr><literal type="number" pos:line="38" pos:column="22">0<pos:position pos:line="38" pos:column="23"/></literal></expr>]<pos:position pos:line="38" pos:column="24"/></index></name></expr>)<pos:position pos:line="38" pos:column="25"/></condition><then pos:line="38" pos:column="25"> <block pos:line="38" pos:column="26">{
          <expr_stmt><expr><call><name pos:line="39" pos:column="11">fprintf<pos:position pos:line="39" pos:column="18"/></name><argument_list pos:line="39" pos:column="18">(<argument><expr><name pos:line="39" pos:column="19">out<pos:position pos:line="39" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="24">"  %s\n"<pos:position pos:line="39" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="34">ptr<pos:position pos:line="39" pos:column="37"/></name><operator pos:line="39" pos:column="37">-&gt;<pos:position pos:line="39" pos:column="42"/></operator><name pos:line="39" pos:column="39">data<pos:position pos:line="39" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="40" pos:column="10"/></block></then>
        <else pos:line="41" pos:column="9">else <block pos:line="41" pos:column="14">{
          <expr_stmt><expr><call><name pos:line="42" pos:column="11">fprintf<pos:position pos:line="42" pos:column="18"/></name><argument_list pos:line="42" pos:column="18">(<argument><expr><name pos:line="42" pos:column="19">out<pos:position pos:line="42" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="24">"\n"<pos:position pos:line="42" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="43" pos:column="10"/></block></else></if>
      }<pos:position pos:line="44" pos:column="8"/></block></for>

      <for pos:line="46" pos:column="7">for<control pos:line="46" pos:column="10">(<init><expr><name pos:line="46" pos:column="11">ptr<pos:position pos:line="46" pos:column="14"/></name><operator pos:line="46" pos:column="14">=<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="15">easysrc_clean<pos:position pos:line="46" pos:column="28"/></name></expr>;<pos:position pos:line="46" pos:column="29"/></init> <condition><expr><name pos:line="46" pos:column="30">ptr<pos:position pos:line="46" pos:column="33"/></name></expr>;<pos:position pos:line="46" pos:column="34"/></condition> <incr><expr><name pos:line="46" pos:column="35">ptr<pos:position pos:line="46" pos:column="38"/></name> <operator pos:line="46" pos:column="39">=<pos:position pos:line="46" pos:column="40"/></operator> <name><name pos:line="46" pos:column="41">ptr<pos:position pos:line="46" pos:column="44"/></name><operator pos:line="46" pos:column="44">-&gt;<pos:position pos:line="46" pos:column="49"/></operator><name pos:line="46" pos:column="46">next<pos:position pos:line="46" pos:column="50"/></name></name></expr></incr>)<pos:position pos:line="46" pos:column="51"/></control>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="9">fprintf<pos:position pos:line="47" pos:column="16"/></name><argument_list pos:line="47" pos:column="16">(<argument><expr><name pos:line="47" pos:column="17">out<pos:position pos:line="47" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="22">"  %s\n"<pos:position pos:line="47" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="32">ptr<pos:position pos:line="47" pos:column="35"/></name><operator pos:line="47" pos:column="35">-&gt;<pos:position pos:line="47" pos:column="40"/></operator><name pos:line="47" pos:column="37">data<pos:position pos:line="47" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="43"/></expr_stmt></block></for>

      <for pos:line="49" pos:column="7">for<control pos:line="49" pos:column="10">(<init><expr><name pos:line="49" pos:column="11">i<pos:position pos:line="49" pos:column="12"/></name><operator pos:line="49" pos:column="12">=<pos:position pos:line="49" pos:column="13"/></operator><literal type="number" pos:line="49" pos:column="13">0<pos:position pos:line="49" pos:column="14"/></literal></expr>;<pos:position pos:line="49" pos:column="15"/></init> <condition><expr><operator pos:line="49" pos:column="16">(<pos:position pos:line="49" pos:column="17"/></operator><operator pos:line="49" pos:column="17">(<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="18">c<pos:position pos:line="49" pos:column="19"/></name> <operator pos:line="49" pos:column="20">=<pos:position pos:line="49" pos:column="21"/></operator> <name><name pos:line="49" pos:column="22">srcend<pos:position pos:line="49" pos:column="28"/></name><index pos:line="49" pos:column="28">[<expr><name pos:line="49" pos:column="29">i<pos:position pos:line="49" pos:column="30"/></name></expr>]<pos:position pos:line="49" pos:column="31"/></index></name><operator pos:line="49" pos:column="31">)<pos:position pos:line="49" pos:column="32"/></operator> <operator pos:line="49" pos:column="33">!=<pos:position pos:line="49" pos:column="35"/></operator> <name pos:line="49" pos:column="36">NULL<pos:position pos:line="49" pos:column="40"/></name><operator pos:line="49" pos:column="40">)<pos:position pos:line="49" pos:column="41"/></operator></expr>;<pos:position pos:line="49" pos:column="42"/></condition> <incr><expr><name pos:line="49" pos:column="43">i<pos:position pos:line="49" pos:column="44"/></name><operator pos:line="49" pos:column="44">++<pos:position pos:line="49" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="49" pos:column="47"/></control>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="9">fprintf<pos:position pos:line="50" pos:column="16"/></name><argument_list pos:line="50" pos:column="16">(<argument><expr><name pos:line="50" pos:column="17">out<pos:position pos:line="50" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="22">"%s\n"<pos:position pos:line="50" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="30">c<pos:position pos:line="50" pos:column="31"/></name></expr></argument>)<pos:position pos:line="50" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="33"/></expr_stmt></block></for>

      <if pos:line="52" pos:column="7">if<condition pos:line="52" pos:column="9">(<expr><name pos:line="52" pos:column="10">fopened<pos:position pos:line="52" pos:column="17"/></name></expr>)<pos:position pos:line="52" pos:column="18"/></condition><then pos:line="52" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="9">fclose<pos:position pos:line="53" pos:column="15"/></name><argument_list pos:line="53" pos:column="15">(<argument><expr><name pos:line="53" pos:column="16">out<pos:position pos:line="53" pos:column="19"/></name></expr></argument>)<pos:position pos:line="53" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="21"/></expr_stmt></block></then></if>
    }<pos:position pos:line="54" pos:column="6"/></block></else></if>
  }<pos:position pos:line="55" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="57" pos:column="3">easysrc_free<pos:position pos:line="57" pos:column="15"/></name><argument_list pos:line="57" pos:column="15">()<pos:position pos:line="57" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="18"/></expr_stmt>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
