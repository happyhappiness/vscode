<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_function_10215.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">size_t<pos:position pos:line="1" pos:column="7"/></name></type> <name pos:line="1" pos:column="8">add_buffer_send<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">sockfd<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">connectdata<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">conn<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">send_buffer<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">in<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">amount<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
  <if pos:line="4" pos:column="3">if<condition pos:line="4" pos:column="5">(<expr><name><name pos:line="4" pos:column="6">conn<pos:position pos:line="4" pos:column="10"/></name><operator pos:line="4" pos:column="10">-&gt;<pos:position pos:line="4" pos:column="15"/></operator><name pos:line="4" pos:column="12">data<pos:position pos:line="4" pos:column="16"/></name><operator pos:line="4" pos:column="16">-&gt;<pos:position pos:line="4" pos:column="21"/></operator><name pos:line="4" pos:column="18">bits<pos:position pos:line="4" pos:column="22"/></name><operator pos:line="4" pos:column="22">.<pos:position pos:line="4" pos:column="23"/></operator><name pos:line="4" pos:column="23">verbose<pos:position pos:line="4" pos:column="30"/></name></name></expr>)<pos:position pos:line="4" pos:column="31"/></condition><then pos:line="4" pos:column="31"> <block pos:line="4" pos:column="32">{
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">fputs<pos:position pos:line="5" pos:column="10"/></name><argument_list pos:line="5" pos:column="10">(<argument><expr><literal type="string" pos:line="5" pos:column="11">"&gt; "<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><name><name pos:line="5" pos:column="17">conn<pos:position pos:line="5" pos:column="21"/></name><operator pos:line="5" pos:column="21">-&gt;<pos:position pos:line="5" pos:column="26"/></operator><name pos:line="5" pos:column="23">data<pos:position pos:line="5" pos:column="27"/></name><operator pos:line="5" pos:column="27">-&gt;<pos:position pos:line="5" pos:column="32"/></operator><name pos:line="5" pos:column="29">err<pos:position pos:line="5" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="34"/></expr_stmt>
    <comment type="block" pos:line="6" pos:column="5">/* this data _may_ contain binary stuff */</comment>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">fwrite<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name><name pos:line="7" pos:column="12">in<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">-&gt;<pos:position pos:line="7" pos:column="19"/></operator><name pos:line="7" pos:column="16">buffer<pos:position pos:line="7" pos:column="22"/></name></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="24">in<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">-&gt;<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="28">size_used<pos:position pos:line="7" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="39">1<pos:position pos:line="7" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="42">conn<pos:position pos:line="7" pos:column="46"/></name><operator pos:line="7" pos:column="46">-&gt;<pos:position pos:line="7" pos:column="51"/></operator><name pos:line="7" pos:column="48">data<pos:position pos:line="7" pos:column="52"/></name><operator pos:line="7" pos:column="52">-&gt;<pos:position pos:line="7" pos:column="57"/></operator><name pos:line="7" pos:column="54">err<pos:position pos:line="7" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="59"/></expr_stmt>
  }<pos:position pos:line="8" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="10" pos:column="3">amount<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <call><name pos:line="10" pos:column="12">ssend<pos:position pos:line="10" pos:column="17"/></name><argument_list pos:line="10" pos:column="17">(<argument><expr><name pos:line="10" pos:column="18">sockfd<pos:position pos:line="10" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="26">conn<pos:position pos:line="10" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="32">in<pos:position pos:line="10" pos:column="34"/></name><operator pos:line="10" pos:column="34">-&gt;<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="36">buffer<pos:position pos:line="10" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="44">in<pos:position pos:line="10" pos:column="46"/></name><operator pos:line="10" pos:column="46">-&gt;<pos:position pos:line="10" pos:column="51"/></operator><name pos:line="10" pos:column="48">size_used<pos:position pos:line="10" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="59"/></expr_stmt>

  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><name><name pos:line="12" pos:column="6">in<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">-&gt;<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="10">buffer<pos:position pos:line="12" pos:column="16"/></name></name></expr>)<pos:position pos:line="12" pos:column="17"/></condition><then pos:line="12" pos:column="17">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="5">free<pos:position pos:line="13" pos:column="9"/></name><argument_list pos:line="13" pos:column="9">(<argument><expr><name><name pos:line="13" pos:column="10">in<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">-&gt;<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="14">buffer<pos:position pos:line="13" pos:column="20"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="22"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">free<pos:position pos:line="14" pos:column="7"/></name><argument_list pos:line="14" pos:column="7">(<argument><expr><name pos:line="14" pos:column="8">in<pos:position pos:line="14" pos:column="10"/></name></expr></argument>)<pos:position pos:line="14" pos:column="11"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="12"/></expr_stmt>

  <return pos:line="16" pos:column="3">return <expr><name pos:line="16" pos:column="10">amount<pos:position pos:line="16" pos:column="16"/></name></expr>;<pos:position pos:line="16" pos:column="17"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
