<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_717_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">parse_proxy<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">SessionHandle<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">data<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
                            <parameter><decl><type><name><name pos:line="2" pos:column="29">struct<pos:position pos:line="2" pos:column="35"/></name> <name pos:line="2" pos:column="36">connectdata<pos:position pos:line="2" pos:column="47"/></name></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">conn<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="55">char<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">proxy<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="67"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">prox_portno<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">endofprot<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>

  <comment type="block" pos:line="7" pos:column="3">/* We use 'proxyptr' to point to the proxy name from now on... */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">proxyptr<pos:position pos:line="8" pos:column="17"/></name><init pos:line="8" pos:column="17">=<expr><name pos:line="8" pos:column="18">proxy<pos:position pos:line="8" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">portptr<pos:position pos:line="9" pos:column="16"/></name></decl>;<pos:position pos:line="9" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">atsign<pos:position pos:line="10" pos:column="15"/></name></decl>;<pos:position pos:line="10" pos:column="16"/></decl_stmt>

  <comment type="block" pos:line="12" pos:column="3">/* We do the proxy host string parsing here. We want the host name and the
   * port name. Accept a protocol:// prefix, even though it should just be
   * ignored.
   */</comment>

  <comment type="block" pos:line="17" pos:column="3">/* Skip the protocol part if present */</comment>
  <expr_stmt><expr><name pos:line="18" pos:column="3">endofprot<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator><call><name pos:line="18" pos:column="13">strstr<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><name pos:line="18" pos:column="20">proxyptr<pos:position pos:line="18" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="30">"://"<pos:position pos:line="18" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="37"/></expr_stmt>
  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><name pos:line="19" pos:column="6">endofprot<pos:position pos:line="19" pos:column="15"/></name></expr>)<pos:position pos:line="19" pos:column="16"/></condition><then pos:line="19" pos:column="16">
    <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="5">proxyptr<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <name pos:line="20" pos:column="16">endofprot<pos:position pos:line="20" pos:column="25"/></name><operator pos:line="20" pos:column="25">+<pos:position pos:line="20" pos:column="26"/></operator><literal type="number" pos:line="20" pos:column="26">3<pos:position pos:line="20" pos:column="27"/></literal></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="22" pos:column="3">/* Is there a username and password given in this proxy url? */</comment>
  <expr_stmt><expr><name pos:line="23" pos:column="3">atsign<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">=<pos:position pos:line="23" pos:column="11"/></operator> <call><name pos:line="23" pos:column="12">strchr<pos:position pos:line="23" pos:column="18"/></name><argument_list pos:line="23" pos:column="18">(<argument><expr><name pos:line="23" pos:column="19">proxyptr<pos:position pos:line="23" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="29">'@'<pos:position pos:line="23" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="34"/></expr_stmt>
  <if pos:line="24" pos:column="3">if<condition pos:line="24" pos:column="5">(<expr><name pos:line="24" pos:column="6">atsign<pos:position pos:line="24" pos:column="12"/></name></expr>)<pos:position pos:line="24" pos:column="13"/></condition><then pos:line="24" pos:column="13"> <block pos:line="24" pos:column="14">{
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">char<pos:position pos:line="25" pos:column="9"/></name></type> <name><name pos:line="25" pos:column="10">proxyuser<pos:position pos:line="25" pos:column="19"/></name><index pos:line="25" pos:column="19">[<expr><name pos:line="25" pos:column="20">MAX_CURL_USER_LENGTH<pos:position pos:line="25" pos:column="40"/></name></expr>]<pos:position pos:line="25" pos:column="41"/></index></name></decl>;<pos:position pos:line="25" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">char<pos:position pos:line="26" pos:column="9"/></name></type> <name><name pos:line="26" pos:column="10">proxypasswd<pos:position pos:line="26" pos:column="21"/></name><index pos:line="26" pos:column="21">[<expr><name pos:line="26" pos:column="22">MAX_CURL_PASSWORD_LENGTH<pos:position pos:line="26" pos:column="46"/></name></expr>]<pos:position pos:line="26" pos:column="47"/></index></name></decl>;<pos:position pos:line="26" pos:column="48"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">proxypasswd<pos:position pos:line="27" pos:column="16"/></name><index pos:line="27" pos:column="16">[<expr><literal type="number" pos:line="27" pos:column="17">0<pos:position pos:line="27" pos:column="18"/></literal></expr>]<pos:position pos:line="27" pos:column="19"/></index></name> <operator pos:line="27" pos:column="20">=<pos:position pos:line="27" pos:column="21"/></operator> <literal type="number" pos:line="27" pos:column="22">0<pos:position pos:line="27" pos:column="23"/></literal></expr>;<pos:position pos:line="27" pos:column="24"/></expr_stmt>

    <if pos:line="29" pos:column="5">if<condition pos:line="29" pos:column="7">(<expr><literal type="number" pos:line="29" pos:column="8">1<pos:position pos:line="29" pos:column="9"/></literal> <operator pos:line="29" pos:column="10">&lt;=<pos:position pos:line="29" pos:column="15"/></operator> <call><name pos:line="29" pos:column="13">sscanf<pos:position pos:line="29" pos:column="19"/></name><argument_list pos:line="29" pos:column="19">(<argument><expr><name pos:line="29" pos:column="20">proxyptr<pos:position pos:line="29" pos:column="28"/></name></expr></argument>,
                   <argument><expr><literal type="string" pos:line="30" pos:column="20">"%"<pos:position pos:line="30" pos:column="23"/></literal> <name pos:line="30" pos:column="24">MAX_CURL_USER_LENGTH_TXT<pos:position pos:line="30" pos:column="48"/></name><literal type="string" pos:line="30" pos:column="48">"[^:]:"<pos:position pos:line="30" pos:column="55"/></literal>
                   <literal type="string" pos:line="31" pos:column="20">"%"<pos:position pos:line="31" pos:column="23"/></literal> <name pos:line="31" pos:column="24">MAX_CURL_PASSWORD_LENGTH_TXT<pos:position pos:line="31" pos:column="52"/></name> <literal type="string" pos:line="31" pos:column="53">"[^@]"<pos:position pos:line="31" pos:column="59"/></literal></expr></argument>,
                   <argument><expr><name pos:line="32" pos:column="20">proxyuser<pos:position pos:line="32" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="31">proxypasswd<pos:position pos:line="32" pos:column="42"/></name></expr></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="44"/></condition><then pos:line="32" pos:column="44"> <block pos:line="32" pos:column="45">{
      <decl_stmt><decl><type><name pos:line="33" pos:column="7">CURLcode<pos:position pos:line="33" pos:column="15"/></name></type> <name pos:line="33" pos:column="16">res<pos:position pos:line="33" pos:column="19"/></name> <init pos:line="33" pos:column="20">= <expr><name pos:line="33" pos:column="22">CURLE_OK<pos:position pos:line="33" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="33" pos:column="31"/></decl_stmt>

      <comment type="block" pos:line="35" pos:column="7">/* found user and password, rip them out.  note that we are
         unescaping them, as there is otherwise no way to have a
         username or password with reserved characters like ':' in
         them. */</comment>
      <expr_stmt><expr><call><name pos:line="39" pos:column="7">Curl_safefree<pos:position pos:line="39" pos:column="20"/></name><argument_list pos:line="39" pos:column="20">(<argument><expr><name><name pos:line="39" pos:column="21">conn<pos:position pos:line="39" pos:column="25"/></name><operator pos:line="39" pos:column="25">-&gt;<pos:position pos:line="39" pos:column="30"/></operator><name pos:line="39" pos:column="27">proxyuser<pos:position pos:line="39" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="40" pos:column="7">conn<pos:position pos:line="40" pos:column="11"/></name><operator pos:line="40" pos:column="11">-&gt;<pos:position pos:line="40" pos:column="16"/></operator><name pos:line="40" pos:column="13">proxyuser<pos:position pos:line="40" pos:column="22"/></name></name> <operator pos:line="40" pos:column="23">=<pos:position pos:line="40" pos:column="24"/></operator> <call><name pos:line="40" pos:column="25">curl_easy_unescape<pos:position pos:line="40" pos:column="43"/></name><argument_list pos:line="40" pos:column="43">(<argument><expr><name pos:line="40" pos:column="44">data<pos:position pos:line="40" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="50">proxyuser<pos:position pos:line="40" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="61">0<pos:position pos:line="40" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="64">NULL<pos:position pos:line="40" pos:column="68"/></name></expr></argument>)<pos:position pos:line="40" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="70"/></expr_stmt>

      <if pos:line="42" pos:column="7">if<condition pos:line="42" pos:column="9">(<expr><operator pos:line="42" pos:column="10">!<pos:position pos:line="42" pos:column="11"/></operator><name><name pos:line="42" pos:column="11">conn<pos:position pos:line="42" pos:column="15"/></name><operator pos:line="42" pos:column="15">-&gt;<pos:position pos:line="42" pos:column="20"/></operator><name pos:line="42" pos:column="17">proxyuser<pos:position pos:line="42" pos:column="26"/></name></name></expr>)<pos:position pos:line="42" pos:column="27"/></condition><then pos:line="42" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="9">res<pos:position pos:line="43" pos:column="12"/></name> <operator pos:line="43" pos:column="13">=<pos:position pos:line="43" pos:column="14"/></operator> <name pos:line="43" pos:column="15">CURLE_OUT_OF_MEMORY<pos:position pos:line="43" pos:column="34"/></name></expr>;<pos:position pos:line="43" pos:column="35"/></expr_stmt></block></then>
      <else pos:line="44" pos:column="7">else <block pos:line="44" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">Curl_safefree<pos:position pos:line="45" pos:column="22"/></name><argument_list pos:line="45" pos:column="22">(<argument><expr><name><name pos:line="45" pos:column="23">conn<pos:position pos:line="45" pos:column="27"/></name><operator pos:line="45" pos:column="27">-&gt;<pos:position pos:line="45" pos:column="32"/></operator><name pos:line="45" pos:column="29">proxypasswd<pos:position pos:line="45" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="46" pos:column="9">conn<pos:position pos:line="46" pos:column="13"/></name><operator pos:line="46" pos:column="13">-&gt;<pos:position pos:line="46" pos:column="18"/></operator><name pos:line="46" pos:column="15">proxypasswd<pos:position pos:line="46" pos:column="26"/></name></name> <operator pos:line="46" pos:column="27">=<pos:position pos:line="46" pos:column="28"/></operator> <call><name pos:line="46" pos:column="29">curl_easy_unescape<pos:position pos:line="46" pos:column="47"/></name><argument_list pos:line="46" pos:column="47">(<argument><expr><name pos:line="46" pos:column="48">data<pos:position pos:line="46" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="54">proxypasswd<pos:position pos:line="46" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="67">0<pos:position pos:line="46" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="70">NULL<pos:position pos:line="46" pos:column="74"/></name></expr></argument>)<pos:position pos:line="46" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="76"/></expr_stmt>

        <if pos:line="48" pos:column="9">if<condition pos:line="48" pos:column="11">(<expr><operator pos:line="48" pos:column="12">!<pos:position pos:line="48" pos:column="13"/></operator><name><name pos:line="48" pos:column="13">conn<pos:position pos:line="48" pos:column="17"/></name><operator pos:line="48" pos:column="17">-&gt;<pos:position pos:line="48" pos:column="22"/></operator><name pos:line="48" pos:column="19">proxypasswd<pos:position pos:line="48" pos:column="30"/></name></name></expr>)<pos:position pos:line="48" pos:column="31"/></condition><then pos:line="48" pos:column="31">
          <block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="11">res<pos:position pos:line="49" pos:column="14"/></name> <operator pos:line="49" pos:column="15">=<pos:position pos:line="49" pos:column="16"/></operator> <name pos:line="49" pos:column="17">CURLE_OUT_OF_MEMORY<pos:position pos:line="49" pos:column="36"/></name></expr>;<pos:position pos:line="49" pos:column="37"/></expr_stmt></block></then></if>
      }<pos:position pos:line="50" pos:column="8"/></block></else></if>

      <if pos:line="52" pos:column="7">if<condition pos:line="52" pos:column="9">(<expr><name pos:line="52" pos:column="10">CURLE_OK<pos:position pos:line="52" pos:column="18"/></name> <operator pos:line="52" pos:column="19">==<pos:position pos:line="52" pos:column="21"/></operator> <name pos:line="52" pos:column="22">res<pos:position pos:line="52" pos:column="25"/></name></expr>)<pos:position pos:line="52" pos:column="26"/></condition><then pos:line="52" pos:column="26"> <block pos:line="52" pos:column="27">{
        <expr_stmt><expr><name><name pos:line="53" pos:column="9">conn<pos:position pos:line="53" pos:column="13"/></name><operator pos:line="53" pos:column="13">-&gt;<pos:position pos:line="53" pos:column="18"/></operator><name pos:line="53" pos:column="15">bits<pos:position pos:line="53" pos:column="19"/></name><operator pos:line="53" pos:column="19">.<pos:position pos:line="53" pos:column="20"/></operator><name pos:line="53" pos:column="20">proxy_user_passwd<pos:position pos:line="53" pos:column="37"/></name></name> <operator pos:line="53" pos:column="38">=<pos:position pos:line="53" pos:column="39"/></operator> <name pos:line="53" pos:column="40">TRUE<pos:position pos:line="53" pos:column="44"/></name></expr>;<pos:position pos:line="53" pos:column="45"/></expr_stmt> <comment type="block" pos:line="53" pos:column="46">/* enable it */</comment>
        <expr_stmt><expr><name pos:line="54" pos:column="9">atsign<pos:position pos:line="54" pos:column="15"/></name> <operator pos:line="54" pos:column="16">=<pos:position pos:line="54" pos:column="17"/></operator> <call><name pos:line="54" pos:column="18">strdup<pos:position pos:line="54" pos:column="24"/></name><argument_list pos:line="54" pos:column="24">(<argument><expr><name pos:line="54" pos:column="25">atsign<pos:position pos:line="54" pos:column="31"/></name><operator pos:line="54" pos:column="31">+<pos:position pos:line="54" pos:column="32"/></operator><literal type="number" pos:line="54" pos:column="32">1<pos:position pos:line="54" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="35"/></expr_stmt> <comment type="block" pos:line="54" pos:column="36">/* the right side of the @-letter */</comment>

        <if pos:line="56" pos:column="9">if<condition pos:line="56" pos:column="11">(<expr><name pos:line="56" pos:column="12">atsign<pos:position pos:line="56" pos:column="18"/></name></expr>)<pos:position pos:line="56" pos:column="19"/></condition><then pos:line="56" pos:column="19"> <block pos:line="56" pos:column="20">{
          <expr_stmt><expr><call><name pos:line="57" pos:column="11">free<pos:position pos:line="57" pos:column="15"/></name><argument_list pos:line="57" pos:column="15">(<argument><expr><name pos:line="57" pos:column="16">proxy<pos:position pos:line="57" pos:column="21"/></name></expr></argument>)<pos:position pos:line="57" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="23"/></expr_stmt> <comment type="block" pos:line="57" pos:column="24">/* free the former proxy string */</comment>
          <expr_stmt><expr><name pos:line="58" pos:column="11">proxy<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">=<pos:position pos:line="58" pos:column="18"/></operator> <name pos:line="58" pos:column="19">proxyptr<pos:position pos:line="58" pos:column="27"/></name> <operator pos:line="58" pos:column="28">=<pos:position pos:line="58" pos:column="29"/></operator> <name pos:line="58" pos:column="30">atsign<pos:position pos:line="58" pos:column="36"/></name></expr>;<pos:position pos:line="58" pos:column="37"/></expr_stmt> <comment type="block" pos:line="58" pos:column="38">/* now use this instead */</comment>
        }<pos:position pos:line="59" pos:column="10"/></block></then>
        <else pos:line="60" pos:column="9">else
          <block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="11">res<pos:position pos:line="61" pos:column="14"/></name> <operator pos:line="61" pos:column="15">=<pos:position pos:line="61" pos:column="16"/></operator> <name pos:line="61" pos:column="17">CURLE_OUT_OF_MEMORY<pos:position pos:line="61" pos:column="36"/></name></expr>;<pos:position pos:line="61" pos:column="37"/></expr_stmt></block></else></if>
      }<pos:position pos:line="62" pos:column="8"/></block></then></if>

      <if pos:line="64" pos:column="7">if<condition pos:line="64" pos:column="9">(<expr><name pos:line="64" pos:column="10">res<pos:position pos:line="64" pos:column="13"/></name></expr>)<pos:position pos:line="64" pos:column="14"/></condition><then pos:line="64" pos:column="14"> <block pos:line="64" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">free<pos:position pos:line="65" pos:column="13"/></name><argument_list pos:line="65" pos:column="13">(<argument><expr><name pos:line="65" pos:column="14">proxy<pos:position pos:line="65" pos:column="19"/></name></expr></argument>)<pos:position pos:line="65" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="21"/></expr_stmt> <comment type="block" pos:line="65" pos:column="22">/* free the allocated proxy string */</comment>
        <return pos:line="66" pos:column="9">return <expr><name pos:line="66" pos:column="16">res<pos:position pos:line="66" pos:column="19"/></name></expr>;<pos:position pos:line="66" pos:column="20"/></return>
      }<pos:position pos:line="67" pos:column="8"/></block></then></if>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if>
  }<pos:position pos:line="69" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="71" pos:column="3">/* start scanning for port number at this point */</comment>
  <expr_stmt><expr><name pos:line="72" pos:column="3">portptr<pos:position pos:line="72" pos:column="10"/></name> <operator pos:line="72" pos:column="11">=<pos:position pos:line="72" pos:column="12"/></operator> <name pos:line="72" pos:column="13">proxyptr<pos:position pos:line="72" pos:column="21"/></name></expr>;<pos:position pos:line="72" pos:column="22"/></expr_stmt>

  <comment type="block" pos:line="74" pos:column="3">/* detect and extract RFC2732-style IPv6-addresses */</comment>
  <if pos:line="75" pos:column="3">if<condition pos:line="75" pos:column="5">(<expr><operator pos:line="75" pos:column="6">*<pos:position pos:line="75" pos:column="7"/></operator><name pos:line="75" pos:column="7">proxyptr<pos:position pos:line="75" pos:column="15"/></name> <operator pos:line="75" pos:column="16">==<pos:position pos:line="75" pos:column="18"/></operator> <literal type="char" pos:line="75" pos:column="19">'['<pos:position pos:line="75" pos:column="22"/></literal></expr>)<pos:position pos:line="75" pos:column="23"/></condition><then pos:line="75" pos:column="23"> <block pos:line="75" pos:column="24">{
    <decl_stmt><decl><type><name pos:line="76" pos:column="5">char<pos:position pos:line="76" pos:column="9"/></name> <modifier pos:line="76" pos:column="10">*<pos:position pos:line="76" pos:column="11"/></modifier></type><name pos:line="76" pos:column="11">ptr<pos:position pos:line="76" pos:column="14"/></name> <init pos:line="76" pos:column="15">= <expr><operator pos:line="76" pos:column="17">++<pos:position pos:line="76" pos:column="19"/></operator><name pos:line="76" pos:column="19">proxyptr<pos:position pos:line="76" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="76" pos:column="28"/></decl_stmt> <comment type="block" pos:line="76" pos:column="29">/* advance beyond the initial bracket */</comment>
    <while pos:line="77" pos:column="5">while<condition pos:line="77" pos:column="10">(<expr><operator pos:line="77" pos:column="11">*<pos:position pos:line="77" pos:column="12"/></operator><name pos:line="77" pos:column="12">ptr<pos:position pos:line="77" pos:column="15"/></name> <operator pos:line="77" pos:column="16">&amp;&amp;<pos:position pos:line="77" pos:column="26"/></operator> <operator pos:line="77" pos:column="19">(<pos:position pos:line="77" pos:column="20"/></operator><call><name pos:line="77" pos:column="20">ISXDIGIT<pos:position pos:line="77" pos:column="28"/></name><argument_list pos:line="77" pos:column="28">(<argument><expr><operator pos:line="77" pos:column="29">*<pos:position pos:line="77" pos:column="30"/></operator><name pos:line="77" pos:column="30">ptr<pos:position pos:line="77" pos:column="33"/></name></expr></argument>)<pos:position pos:line="77" pos:column="34"/></argument_list></call> <operator pos:line="77" pos:column="35">||<pos:position pos:line="77" pos:column="37"/></operator> <operator pos:line="77" pos:column="38">(<pos:position pos:line="77" pos:column="39"/></operator><operator pos:line="77" pos:column="39">*<pos:position pos:line="77" pos:column="40"/></operator><name pos:line="77" pos:column="40">ptr<pos:position pos:line="77" pos:column="43"/></name> <operator pos:line="77" pos:column="44">==<pos:position pos:line="77" pos:column="46"/></operator> <literal type="char" pos:line="77" pos:column="47">':'<pos:position pos:line="77" pos:column="50"/></literal><operator pos:line="77" pos:column="50">)<pos:position pos:line="77" pos:column="51"/></operator><operator pos:line="77" pos:column="51">)<pos:position pos:line="77" pos:column="52"/></operator></expr>)<pos:position pos:line="77" pos:column="53"/></condition>
      <block type="pseudo"><expr_stmt><expr><name pos:line="78" pos:column="7">ptr<pos:position pos:line="78" pos:column="10"/></name><operator pos:line="78" pos:column="10">++<pos:position pos:line="78" pos:column="12"/></operator></expr>;<pos:position pos:line="78" pos:column="13"/></expr_stmt></block></while>
    <if pos:line="79" pos:column="5">if<condition pos:line="79" pos:column="7">(<expr><operator pos:line="79" pos:column="8">*<pos:position pos:line="79" pos:column="9"/></operator><name pos:line="79" pos:column="9">ptr<pos:position pos:line="79" pos:column="12"/></name> <operator pos:line="79" pos:column="13">==<pos:position pos:line="79" pos:column="15"/></operator> <literal type="char" pos:line="79" pos:column="16">']'<pos:position pos:line="79" pos:column="19"/></literal></expr>)<pos:position pos:line="79" pos:column="20"/></condition><then pos:line="79" pos:column="20"> <block pos:line="79" pos:column="21">{
      <comment type="block" pos:line="80" pos:column="7">/* yeps, it ended nicely with a bracket as well */</comment>
      <expr_stmt><expr><operator pos:line="81" pos:column="7">*<pos:position pos:line="81" pos:column="8"/></operator><name pos:line="81" pos:column="8">ptr<pos:position pos:line="81" pos:column="11"/></name> <operator pos:line="81" pos:column="12">=<pos:position pos:line="81" pos:column="13"/></operator> <literal type="number" pos:line="81" pos:column="14">0<pos:position pos:line="81" pos:column="15"/></literal></expr>;<pos:position pos:line="81" pos:column="16"/></expr_stmt>
      <expr_stmt><expr><name pos:line="82" pos:column="7">portptr<pos:position pos:line="82" pos:column="14"/></name> <operator pos:line="82" pos:column="15">=<pos:position pos:line="82" pos:column="16"/></operator> <name pos:line="82" pos:column="17">ptr<pos:position pos:line="82" pos:column="20"/></name><operator pos:line="82" pos:column="20">+<pos:position pos:line="82" pos:column="21"/></operator><literal type="number" pos:line="82" pos:column="21">1<pos:position pos:line="82" pos:column="22"/></literal></expr>;<pos:position pos:line="82" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="83" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="84" pos:column="5">/* Note that if this didn't end with a bracket, we still advanced the
     * proxyptr first, but I can't see anything wrong with that as no host
     * name nor a numeric can legally start with a bracket.
     */</comment>
  }<pos:position pos:line="88" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="90" pos:column="3">/* Get port number off proxy.server.com:1080 */</comment>
  <expr_stmt><expr><name pos:line="91" pos:column="3">prox_portno<pos:position pos:line="91" pos:column="14"/></name> <operator pos:line="91" pos:column="15">=<pos:position pos:line="91" pos:column="16"/></operator> <call><name pos:line="91" pos:column="17">strchr<pos:position pos:line="91" pos:column="23"/></name><argument_list pos:line="91" pos:column="23">(<argument><expr><name pos:line="91" pos:column="24">portptr<pos:position pos:line="91" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="91" pos:column="33">':'<pos:position pos:line="91" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="38"/></expr_stmt>
  <if pos:line="92" pos:column="3">if<condition pos:line="92" pos:column="5">(<expr><name pos:line="92" pos:column="6">prox_portno<pos:position pos:line="92" pos:column="17"/></name></expr>)<pos:position pos:line="92" pos:column="18"/></condition><then pos:line="92" pos:column="18"> <block pos:line="92" pos:column="19">{
    <expr_stmt><expr><operator pos:line="93" pos:column="5">*<pos:position pos:line="93" pos:column="6"/></operator><name pos:line="93" pos:column="6">prox_portno<pos:position pos:line="93" pos:column="17"/></name> <operator pos:line="93" pos:column="18">=<pos:position pos:line="93" pos:column="19"/></operator> <literal type="number" pos:line="93" pos:column="20">0x0<pos:position pos:line="93" pos:column="23"/></literal></expr>;<pos:position pos:line="93" pos:column="24"/></expr_stmt> <comment type="block" pos:line="93" pos:column="25">/* cut off number from host name */</comment>
    <expr_stmt><expr><name pos:line="94" pos:column="5">prox_portno<pos:position pos:line="94" pos:column="16"/></name> <operator pos:line="94" pos:column="17">++<pos:position pos:line="94" pos:column="19"/></operator></expr>;<pos:position pos:line="94" pos:column="20"/></expr_stmt>
    <comment type="block" pos:line="95" pos:column="5">/* now set the local port number */</comment>
    <expr_stmt><expr><name><name pos:line="96" pos:column="5">conn<pos:position pos:line="96" pos:column="9"/></name><operator pos:line="96" pos:column="9">-&gt;<pos:position pos:line="96" pos:column="14"/></operator><name pos:line="96" pos:column="11">port<pos:position pos:line="96" pos:column="15"/></name></name> <operator pos:line="96" pos:column="16">=<pos:position pos:line="96" pos:column="17"/></operator> <call><name pos:line="96" pos:column="18">atoi<pos:position pos:line="96" pos:column="22"/></name><argument_list pos:line="96" pos:column="22">(<argument><expr><name pos:line="96" pos:column="23">prox_portno<pos:position pos:line="96" pos:column="34"/></name></expr></argument>)<pos:position pos:line="96" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="97" pos:column="4"/></block></then>
  <else pos:line="98" pos:column="3">else <block pos:line="98" pos:column="8">{
    <comment type="block" pos:line="99" pos:column="5">/* without a port number after the host name, some people seem to use
       a slash so we strip everything from the first slash */</comment>
    <expr_stmt><expr><name pos:line="101" pos:column="5">atsign<pos:position pos:line="101" pos:column="11"/></name> <operator pos:line="101" pos:column="12">=<pos:position pos:line="101" pos:column="13"/></operator> <call><name pos:line="101" pos:column="14">strchr<pos:position pos:line="101" pos:column="20"/></name><argument_list pos:line="101" pos:column="20">(<argument><expr><name pos:line="101" pos:column="21">proxyptr<pos:position pos:line="101" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="101" pos:column="31">'/'<pos:position pos:line="101" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="36"/></expr_stmt>
    <if pos:line="102" pos:column="5">if<condition pos:line="102" pos:column="7">(<expr><name pos:line="102" pos:column="8">atsign<pos:position pos:line="102" pos:column="14"/></name></expr>)<pos:position pos:line="102" pos:column="15"/></condition><then pos:line="102" pos:column="15">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="103" pos:column="7">*<pos:position pos:line="103" pos:column="8"/></operator><name pos:line="103" pos:column="8">atsign<pos:position pos:line="103" pos:column="14"/></name> <operator pos:line="103" pos:column="15">=<pos:position pos:line="103" pos:column="16"/></operator> <literal type="number" pos:line="103" pos:column="17">0x0<pos:position pos:line="103" pos:column="20"/></literal></expr>;<pos:position pos:line="103" pos:column="21"/></expr_stmt></block></then></if> <comment type="block" pos:line="103" pos:column="22">/* cut off path part from host name */</comment>

    <if pos:line="105" pos:column="5">if<condition pos:line="105" pos:column="7">(<expr><name><name pos:line="105" pos:column="8">data<pos:position pos:line="105" pos:column="12"/></name><operator pos:line="105" pos:column="12">-&gt;<pos:position pos:line="105" pos:column="17"/></operator><name pos:line="105" pos:column="14">set<pos:position pos:line="105" pos:column="17"/></name><operator pos:line="105" pos:column="17">.<pos:position pos:line="105" pos:column="18"/></operator><name pos:line="105" pos:column="18">proxyport<pos:position pos:line="105" pos:column="27"/></name></name></expr>)<pos:position pos:line="105" pos:column="28"/></condition><then pos:line="105" pos:column="28">
      <comment type="block" pos:line="106" pos:column="7">/* None given in the proxy string, then get the default one if it is
         given */</comment>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="108" pos:column="7">conn<pos:position pos:line="108" pos:column="11"/></name><operator pos:line="108" pos:column="11">-&gt;<pos:position pos:line="108" pos:column="16"/></operator><name pos:line="108" pos:column="13">port<pos:position pos:line="108" pos:column="17"/></name></name> <operator pos:line="108" pos:column="18">=<pos:position pos:line="108" pos:column="19"/></operator> <name><name pos:line="108" pos:column="20">data<pos:position pos:line="108" pos:column="24"/></name><operator pos:line="108" pos:column="24">-&gt;<pos:position pos:line="108" pos:column="29"/></operator><name pos:line="108" pos:column="26">set<pos:position pos:line="108" pos:column="29"/></name><operator pos:line="108" pos:column="29">.<pos:position pos:line="108" pos:column="30"/></operator><name pos:line="108" pos:column="30">proxyport<pos:position pos:line="108" pos:column="39"/></name></name></expr>;<pos:position pos:line="108" pos:column="40"/></expr_stmt></block></then></if>
  }<pos:position pos:line="109" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="111" pos:column="3">/* now, clone the cleaned proxy host name */</comment>
  <expr_stmt><expr><name><name pos:line="112" pos:column="3">conn<pos:position pos:line="112" pos:column="7"/></name><operator pos:line="112" pos:column="7">-&gt;<pos:position pos:line="112" pos:column="12"/></operator><name pos:line="112" pos:column="9">proxy<pos:position pos:line="112" pos:column="14"/></name><operator pos:line="112" pos:column="14">.<pos:position pos:line="112" pos:column="15"/></operator><name pos:line="112" pos:column="15">rawalloc<pos:position pos:line="112" pos:column="23"/></name></name> <operator pos:line="112" pos:column="24">=<pos:position pos:line="112" pos:column="25"/></operator> <call><name pos:line="112" pos:column="26">strdup<pos:position pos:line="112" pos:column="32"/></name><argument_list pos:line="112" pos:column="32">(<argument><expr><name pos:line="112" pos:column="33">proxyptr<pos:position pos:line="112" pos:column="41"/></name></expr></argument>)<pos:position pos:line="112" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="113" pos:column="3">conn<pos:position pos:line="113" pos:column="7"/></name><operator pos:line="113" pos:column="7">-&gt;<pos:position pos:line="113" pos:column="12"/></operator><name pos:line="113" pos:column="9">proxy<pos:position pos:line="113" pos:column="14"/></name><operator pos:line="113" pos:column="14">.<pos:position pos:line="113" pos:column="15"/></operator><name pos:line="113" pos:column="15">name<pos:position pos:line="113" pos:column="19"/></name></name> <operator pos:line="113" pos:column="20">=<pos:position pos:line="113" pos:column="21"/></operator> <name><name pos:line="113" pos:column="22">conn<pos:position pos:line="113" pos:column="26"/></name><operator pos:line="113" pos:column="26">-&gt;<pos:position pos:line="113" pos:column="31"/></operator><name pos:line="113" pos:column="28">proxy<pos:position pos:line="113" pos:column="33"/></name><operator pos:line="113" pos:column="33">.<pos:position pos:line="113" pos:column="34"/></operator><name pos:line="113" pos:column="34">rawalloc<pos:position pos:line="113" pos:column="42"/></name></name></expr>;<pos:position pos:line="113" pos:column="43"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="115" pos:column="3">free<pos:position pos:line="115" pos:column="7"/></name><argument_list pos:line="115" pos:column="7">(<argument><expr><name pos:line="115" pos:column="8">proxy<pos:position pos:line="115" pos:column="13"/></name></expr></argument>)<pos:position pos:line="115" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="15"/></expr_stmt>
  <if pos:line="116" pos:column="3">if<condition pos:line="116" pos:column="5">(<expr><operator pos:line="116" pos:column="6">!<pos:position pos:line="116" pos:column="7"/></operator><name><name pos:line="116" pos:column="7">conn<pos:position pos:line="116" pos:column="11"/></name><operator pos:line="116" pos:column="11">-&gt;<pos:position pos:line="116" pos:column="16"/></operator><name pos:line="116" pos:column="13">proxy<pos:position pos:line="116" pos:column="18"/></name><operator pos:line="116" pos:column="18">.<pos:position pos:line="116" pos:column="19"/></operator><name pos:line="116" pos:column="19">rawalloc<pos:position pos:line="116" pos:column="27"/></name></name></expr>)<pos:position pos:line="116" pos:column="28"/></condition><then pos:line="116" pos:column="28">
    <block type="pseudo"><return pos:line="117" pos:column="5">return <expr><name pos:line="117" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="117" pos:column="31"/></name></expr>;<pos:position pos:line="117" pos:column="32"/></return></block></then></if>

  <return pos:line="119" pos:column="3">return <expr><name pos:line="119" pos:column="10">CURLE_OK<pos:position pos:line="119" pos:column="18"/></name></expr>;<pos:position pos:line="119" pos:column="19"/></return>
}<pos:position pos:line="120" pos:column="2"/></block></function></unit>
