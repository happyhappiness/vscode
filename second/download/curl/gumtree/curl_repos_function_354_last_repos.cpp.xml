<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_354_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type>
<name pos:line="2" pos:column="1">dynconvert<pos:position pos:line="2" pos:column="11"/></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><name pos:line="2" pos:column="12">int<pos:position pos:line="2" pos:column="15"/></name></type> <name pos:line="2" pos:column="16">dccsid<pos:position pos:line="2" pos:column="22"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="24">const<pos:position pos:line="2" pos:column="29"/></specifier> <name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type> <name pos:line="2" pos:column="37">s<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">int<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">slen<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">int<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">sccsid<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list>

<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type> <name pos:line="5" pos:column="10">d<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type> <name pos:line="6" pos:column="10">cp<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">size_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">dlen<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">l<pos:position pos:line="8" pos:column="8"/></name></decl>;<pos:position pos:line="8" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><specifier pos:line="9" pos:column="3">static<pos:position pos:line="9" pos:column="9"/></specifier> <type><specifier pos:line="9" pos:column="10">const<pos:position pos:line="9" pos:column="15"/></specifier> <name pos:line="9" pos:column="16">char<pos:position pos:line="9" pos:column="20"/></name></type> <name pos:line="9" pos:column="21">nullbyte<pos:position pos:line="9" pos:column="29"/></name> <init pos:line="9" pos:column="30">= <expr><literal type="number" pos:line="9" pos:column="32">0<pos:position pos:line="9" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* Like convert, but the destination is allocated and returned. */</comment>

  <expr_stmt><expr><name pos:line="13" pos:column="3">dlen<pos:position pos:line="13" pos:column="7"/></name> <operator pos:line="13" pos:column="8">=<pos:position pos:line="13" pos:column="9"/></operator> <call pos:line="13" pos:column="10">(<name pos:line="13" pos:column="11">size_t<pos:position pos:line="13" pos:column="17"/></name>) <argument_list pos:line="13" pos:column="19">(<argument><expr><ternary><condition><expr><name pos:line="13" pos:column="20">slen<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">&lt;<pos:position pos:line="13" pos:column="29"/></operator> <literal type="number" pos:line="13" pos:column="27">0<pos:position pos:line="13" pos:column="28"/></literal></expr>?<pos:position pos:line="13" pos:column="29"/></condition><then pos:line="13" pos:column="29"> <expr><call><name pos:line="13" pos:column="30">strlen<pos:position pos:line="13" pos:column="36"/></name><argument_list pos:line="13" pos:column="36">(<argument><expr><name pos:line="13" pos:column="37">s<pos:position pos:line="13" pos:column="38"/></name></expr></argument>)<pos:position pos:line="13" pos:column="39"/></argument_list></call></expr></then><else pos:line="13" pos:column="39">: <expr><name pos:line="13" pos:column="41">slen<pos:position pos:line="13" pos:column="45"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call> <operator pos:line="13" pos:column="47">+<pos:position pos:line="13" pos:column="48"/></operator> <literal type="number" pos:line="13" pos:column="49">1<pos:position pos:line="13" pos:column="50"/></literal></expr>;<pos:position pos:line="13" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><name pos:line="14" pos:column="3">dlen<pos:position pos:line="14" pos:column="7"/></name> <operator pos:line="14" pos:column="8">*=<pos:position pos:line="14" pos:column="10"/></operator> <name pos:line="14" pos:column="11">MAX_CONV_EXPANSION<pos:position pos:line="14" pos:column="29"/></name></expr>;<pos:position pos:line="14" pos:column="30"/></expr_stmt>           <comment type="block" pos:line="14" pos:column="41">/* Allow some expansion. */</comment>
  <expr_stmt><expr><name pos:line="15" pos:column="3">d<pos:position pos:line="15" pos:column="4"/></name> <operator pos:line="15" pos:column="5">=<pos:position pos:line="15" pos:column="6"/></operator> <call><name pos:line="15" pos:column="7">malloc<pos:position pos:line="15" pos:column="13"/></name><argument_list pos:line="15" pos:column="13">(<argument><expr><name pos:line="15" pos:column="14">dlen<pos:position pos:line="15" pos:column="18"/></name></expr></argument>)<pos:position pos:line="15" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="20"/></expr_stmt>

  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><operator pos:line="17" pos:column="6">!<pos:position pos:line="17" pos:column="7"/></operator><name pos:line="17" pos:column="7">d<pos:position pos:line="17" pos:column="8"/></name></expr>)<pos:position pos:line="17" pos:column="9"/></condition><then pos:line="17" pos:column="9">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">char<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">*<pos:position pos:line="18" pos:column="19"/></operator><operator pos:line="18" pos:column="19">)<pos:position pos:line="18" pos:column="20"/></operator> <name pos:line="18" pos:column="21">NULL<pos:position pos:line="18" pos:column="25"/></name></expr>;<pos:position pos:line="18" pos:column="26"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="20" pos:column="3">l<pos:position pos:line="20" pos:column="4"/></name> <operator pos:line="20" pos:column="5">=<pos:position pos:line="20" pos:column="6"/></operator> <call><name pos:line="20" pos:column="7">convert<pos:position pos:line="20" pos:column="14"/></name><argument_list pos:line="20" pos:column="14">(<argument><expr><name pos:line="20" pos:column="15">d<pos:position pos:line="20" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="18">dlen<pos:position pos:line="20" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="24">dccsid<pos:position pos:line="20" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="32">s<pos:position pos:line="20" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="35">slen<pos:position pos:line="20" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="41">sccsid<pos:position pos:line="20" pos:column="47"/></name></expr></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="49"/></expr_stmt>

  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><name pos:line="22" pos:column="6">l<pos:position pos:line="22" pos:column="7"/></name> <operator pos:line="22" pos:column="8">&lt;<pos:position pos:line="22" pos:column="12"/></operator> <literal type="number" pos:line="22" pos:column="10">0<pos:position pos:line="22" pos:column="11"/></literal></expr>)<pos:position pos:line="22" pos:column="12"/></condition><then pos:line="22" pos:column="12"> <block pos:line="22" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">free<pos:position pos:line="23" pos:column="9"/></name><argument_list pos:line="23" pos:column="9">(<argument><expr><name pos:line="23" pos:column="10">d<pos:position pos:line="23" pos:column="11"/></name></expr></argument>)<pos:position pos:line="23" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="13"/></expr_stmt>
    <return pos:line="24" pos:column="5">return <expr><operator pos:line="24" pos:column="12">(<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="13">char<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">*<pos:position pos:line="24" pos:column="19"/></operator><operator pos:line="24" pos:column="19">)<pos:position pos:line="24" pos:column="20"/></operator> <name pos:line="24" pos:column="21">NULL<pos:position pos:line="24" pos:column="25"/></name></expr>;<pos:position pos:line="24" pos:column="26"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">(<expr><name pos:line="27" pos:column="6">slen<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">&lt;<pos:position pos:line="27" pos:column="15"/></operator> <literal type="number" pos:line="27" pos:column="13">0<pos:position pos:line="27" pos:column="14"/></literal></expr>)<pos:position pos:line="27" pos:column="15"/></condition><then pos:line="27" pos:column="15"> <block pos:line="27" pos:column="16">{
    <comment type="block" pos:line="28" pos:column="5">/* Need to null-terminate even when source length is given.
       Since destination code size is unknown, use a conversion to generate
       terminator. */</comment>

    <decl_stmt><decl><type><name pos:line="32" pos:column="5">int<pos:position pos:line="32" pos:column="8"/></name></type> <name pos:line="32" pos:column="9">l2<pos:position pos:line="32" pos:column="11"/></name> <init pos:line="32" pos:column="12">= <expr><call><name pos:line="32" pos:column="14">convert<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">(<argument><expr><name pos:line="32" pos:column="22">d<pos:position pos:line="32" pos:column="23"/></name> <operator pos:line="32" pos:column="24">+<pos:position pos:line="32" pos:column="25"/></operator> <name pos:line="32" pos:column="26">l<pos:position pos:line="32" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="29">dlen<pos:position pos:line="32" pos:column="33"/></name> <operator pos:line="32" pos:column="34">-<pos:position pos:line="32" pos:column="35"/></operator> <name pos:line="32" pos:column="36">l<pos:position pos:line="32" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="39">dccsid<pos:position pos:line="32" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="47">&amp;<pos:position pos:line="32" pos:column="52"/></operator><name pos:line="32" pos:column="48">nullbyte<pos:position pos:line="32" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="58">-<pos:position pos:line="32" pos:column="59"/></operator><literal type="number" pos:line="32" pos:column="59">1<pos:position pos:line="32" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="62">ASCII_CCSID<pos:position pos:line="32" pos:column="73"/></name></expr></argument>)<pos:position pos:line="32" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="32" pos:column="75"/></decl_stmt>

    <if pos:line="34" pos:column="5">if<condition pos:line="34" pos:column="7">(<expr><name pos:line="34" pos:column="8">l2<pos:position pos:line="34" pos:column="10"/></name> <operator pos:line="34" pos:column="11">&lt;<pos:position pos:line="34" pos:column="15"/></operator> <literal type="number" pos:line="34" pos:column="13">0<pos:position pos:line="34" pos:column="14"/></literal></expr>)<pos:position pos:line="34" pos:column="15"/></condition><then pos:line="34" pos:column="15"> <block pos:line="34" pos:column="16">{
      <expr_stmt><expr><call><name pos:line="35" pos:column="7">free<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><name pos:line="35" pos:column="12">d<pos:position pos:line="35" pos:column="13"/></name></expr></argument>)<pos:position pos:line="35" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="15"/></expr_stmt>
      <return pos:line="36" pos:column="7">return <expr><operator pos:line="36" pos:column="14">(<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="15">char<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">*<pos:position pos:line="36" pos:column="21"/></operator><operator pos:line="36" pos:column="21">)<pos:position pos:line="36" pos:column="22"/></operator> <name pos:line="36" pos:column="23">NULL<pos:position pos:line="36" pos:column="27"/></name></expr>;<pos:position pos:line="36" pos:column="28"/></return>
      }<pos:position pos:line="37" pos:column="8"/></block></then></if>

    <expr_stmt><expr><name pos:line="39" pos:column="5">l<pos:position pos:line="39" pos:column="6"/></name> <operator pos:line="39" pos:column="7">+=<pos:position pos:line="39" pos:column="9"/></operator> <name pos:line="39" pos:column="10">l2<pos:position pos:line="39" pos:column="12"/></name></expr>;<pos:position pos:line="39" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

  <if pos:line="42" pos:column="3">if<condition pos:line="42" pos:column="5">(<expr><operator pos:line="42" pos:column="6">(<pos:position pos:line="42" pos:column="7"/></operator><name pos:line="42" pos:column="7">size_t<pos:position pos:line="42" pos:column="13"/></name><operator pos:line="42" pos:column="13">)<pos:position pos:line="42" pos:column="14"/></operator> <name pos:line="42" pos:column="15">l<pos:position pos:line="42" pos:column="16"/></name> <operator pos:line="42" pos:column="17">&lt;<pos:position pos:line="42" pos:column="21"/></operator> <name pos:line="42" pos:column="19">dlen<pos:position pos:line="42" pos:column="23"/></name></expr>)<pos:position pos:line="42" pos:column="24"/></condition><then pos:line="42" pos:column="24"> <block pos:line="42" pos:column="25">{
    <expr_stmt><expr><name pos:line="43" pos:column="5">cp<pos:position pos:line="43" pos:column="7"/></name> <operator pos:line="43" pos:column="8">=<pos:position pos:line="43" pos:column="9"/></operator> <call><name pos:line="43" pos:column="10">realloc<pos:position pos:line="43" pos:column="17"/></name><argument_list pos:line="43" pos:column="17">(<argument><expr><name pos:line="43" pos:column="18">d<pos:position pos:line="43" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="21">l<pos:position pos:line="43" pos:column="22"/></name></expr></argument>)<pos:position pos:line="43" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="24"/></expr_stmt>         <comment type="block" pos:line="43" pos:column="33">/* Shorten to minimum needed. */</comment>

    <if pos:line="45" pos:column="5">if<condition pos:line="45" pos:column="7">(<expr><name pos:line="45" pos:column="8">cp<pos:position pos:line="45" pos:column="10"/></name></expr>)<pos:position pos:line="45" pos:column="11"/></condition><then pos:line="45" pos:column="11">
      <block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="7">d<pos:position pos:line="46" pos:column="8"/></name> <operator pos:line="46" pos:column="9">=<pos:position pos:line="46" pos:column="10"/></operator> <name pos:line="46" pos:column="11">cp<pos:position pos:line="46" pos:column="13"/></name></expr>;<pos:position pos:line="46" pos:column="14"/></expr_stmt></block></then></if>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>

  <return pos:line="49" pos:column="3">return <expr><name pos:line="49" pos:column="10">d<pos:position pos:line="49" pos:column="11"/></name></expr>;<pos:position pos:line="49" pos:column="12"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
