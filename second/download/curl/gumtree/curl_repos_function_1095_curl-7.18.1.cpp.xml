<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1095_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">curl_global_init<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">long<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">flags<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="38"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if<condition pos:line="3" pos:column="5">(<expr><name pos:line="3" pos:column="6">initialized<pos:position pos:line="3" pos:column="17"/></name><operator pos:line="3" pos:column="17">++<pos:position pos:line="3" pos:column="19"/></operator></expr>)<pos:position pos:line="3" pos:column="20"/></condition><then pos:line="3" pos:column="20">
    <block type="pseudo"><return pos:line="4" pos:column="5">return <expr><name pos:line="4" pos:column="12">CURLE_OK<pos:position pos:line="4" pos:column="20"/></name></expr>;<pos:position pos:line="4" pos:column="21"/></return></block></then></if>

  <comment type="block" pos:line="6" pos:column="3">/* Setup the default memory functions here (again) */</comment>
  <expr_stmt><expr><name pos:line="7" pos:column="3">Curl_cmalloc<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <operator pos:line="7" pos:column="18">(<pos:position pos:line="7" pos:column="19"/></operator><name pos:line="7" pos:column="19">curl_malloc_callback<pos:position pos:line="7" pos:column="39"/></name><operator pos:line="7" pos:column="39">)<pos:position pos:line="7" pos:column="40"/></operator><name pos:line="7" pos:column="40">malloc<pos:position pos:line="7" pos:column="46"/></name></expr>;<pos:position pos:line="7" pos:column="47"/></expr_stmt>
  <expr_stmt><expr><name pos:line="8" pos:column="3">Curl_cfree<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <operator pos:line="8" pos:column="16">(<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">curl_free_callback<pos:position pos:line="8" pos:column="35"/></name><operator pos:line="8" pos:column="35">)<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="36">free<pos:position pos:line="8" pos:column="40"/></name></expr>;<pos:position pos:line="8" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><name pos:line="9" pos:column="3">Curl_crealloc<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">=<pos:position pos:line="9" pos:column="18"/></operator> <operator pos:line="9" pos:column="19">(<pos:position pos:line="9" pos:column="20"/></operator><name pos:line="9" pos:column="20">curl_realloc_callback<pos:position pos:line="9" pos:column="41"/></name><operator pos:line="9" pos:column="41">)<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="42">realloc<pos:position pos:line="9" pos:column="49"/></name></expr>;<pos:position pos:line="9" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">Curl_cstrdup<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <operator pos:line="10" pos:column="18">(<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">curl_strdup_callback<pos:position pos:line="10" pos:column="39"/></name><operator pos:line="10" pos:column="39">)<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="40">system_strdup<pos:position pos:line="10" pos:column="53"/></name></expr>;<pos:position pos:line="10" pos:column="54"/></expr_stmt>
  <expr_stmt><expr><name pos:line="11" pos:column="3">Curl_ccalloc<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <operator pos:line="11" pos:column="18">(<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="19">curl_calloc_callback<pos:position pos:line="11" pos:column="39"/></name><operator pos:line="11" pos:column="39">)<pos:position pos:line="11" pos:column="40"/></operator><name pos:line="11" pos:column="40">calloc<pos:position pos:line="11" pos:column="46"/></name></expr>;<pos:position pos:line="11" pos:column="47"/></expr_stmt>

  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><name pos:line="13" pos:column="6">flags<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">&amp;<pos:position pos:line="13" pos:column="17"/></operator> <name pos:line="13" pos:column="14">CURL_GLOBAL_SSL<pos:position pos:line="13" pos:column="29"/></name></expr>)<pos:position pos:line="13" pos:column="30"/></condition><then pos:line="13" pos:column="30">
    <block type="pseudo"><if pos:line="14" pos:column="5">if<condition pos:line="14" pos:column="7">(<expr><operator pos:line="14" pos:column="8">!<pos:position pos:line="14" pos:column="9"/></operator><call><name pos:line="14" pos:column="9">Curl_ssl_init<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">()<pos:position pos:line="14" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="25"/></condition><then pos:line="14" pos:column="25"> <block pos:line="14" pos:column="26">{
      <expr_stmt><expr><call><name pos:line="15" pos:column="7">DEBUGF<pos:position pos:line="15" pos:column="13"/></name><argument_list pos:line="15" pos:column="13">(<argument><expr><call><name pos:line="15" pos:column="14">fprintf<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><expr><name pos:line="15" pos:column="22">stderr<pos:position pos:line="15" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="30">"Error: Curl_ssl_init failed\n"<pos:position pos:line="15" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="64"/></expr_stmt>
      <return pos:line="16" pos:column="7">return <expr><name pos:line="16" pos:column="14">CURLE_FAILED_INIT<pos:position pos:line="16" pos:column="31"/></name></expr>;<pos:position pos:line="16" pos:column="32"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if></block></then></if>

  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><name pos:line="19" pos:column="6">flags<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">&amp;<pos:position pos:line="19" pos:column="17"/></operator> <name pos:line="19" pos:column="14">CURL_GLOBAL_WIN32<pos:position pos:line="19" pos:column="31"/></name></expr>)<pos:position pos:line="19" pos:column="32"/></condition><then pos:line="19" pos:column="32">
    <block type="pseudo"><if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><call><name pos:line="20" pos:column="8">win32_init<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">()<pos:position pos:line="20" pos:column="20"/></argument_list></call> <operator pos:line="20" pos:column="21">!=<pos:position pos:line="20" pos:column="23"/></operator> <name pos:line="20" pos:column="24">CURLE_OK<pos:position pos:line="20" pos:column="32"/></name></expr>)<pos:position pos:line="20" pos:column="33"/></condition><then pos:line="20" pos:column="33"> <block pos:line="20" pos:column="34">{
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">DEBUGF<pos:position pos:line="21" pos:column="13"/></name><argument_list pos:line="21" pos:column="13">(<argument><expr><call><name pos:line="21" pos:column="14">fprintf<pos:position pos:line="21" pos:column="21"/></name><argument_list pos:line="21" pos:column="21">(<argument><expr><name pos:line="21" pos:column="22">stderr<pos:position pos:line="21" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="30">"Error: win32_init failed\n"<pos:position pos:line="21" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="61"/></expr_stmt>
      <return pos:line="22" pos:column="7">return <expr><name pos:line="22" pos:column="14">CURLE_FAILED_INIT<pos:position pos:line="22" pos:column="31"/></name></expr>;<pos:position pos:line="22" pos:column="32"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if></block></then></if>

<cpp:ifdef pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">ifdef<pos:position pos:line="25" pos:column="7"/></cpp:directive> <name pos:line="25" pos:column="8">__AMIGA__<pos:position pos:line="25" pos:column="17"/></name></cpp:ifdef>
  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><operator pos:line="26" pos:column="6">!<pos:position pos:line="26" pos:column="7"/></operator><call><name pos:line="26" pos:column="7">amiga_init<pos:position pos:line="26" pos:column="17"/></name><argument_list pos:line="26" pos:column="17">()<pos:position pos:line="26" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="20"/></condition><then pos:line="26" pos:column="20"> <block pos:line="26" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">DEBUGF<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><call><name pos:line="27" pos:column="12">fprintf<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">(<argument><expr><name pos:line="27" pos:column="20">stderr<pos:position pos:line="27" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="28">"Error: amiga_init failed\n"<pos:position pos:line="27" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="59"/></expr_stmt>
    <return pos:line="28" pos:column="5">return <expr><name pos:line="28" pos:column="12">CURLE_FAILED_INIT<pos:position pos:line="28" pos:column="29"/></name></expr>;<pos:position pos:line="28" pos:column="30"/></return>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif<pos:position pos:line="30" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifdef<pos:position pos:line="32" pos:column="7"/></cpp:directive> <name pos:line="32" pos:column="8">NETWARE<pos:position pos:line="32" pos:column="15"/></name></cpp:ifdef>
  <if pos:line="33" pos:column="3">if<condition pos:line="33" pos:column="5">(<expr><call><name pos:line="33" pos:column="6">netware_init<pos:position pos:line="33" pos:column="18"/></name><argument_list pos:line="33" pos:column="18">()<pos:position pos:line="33" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="21"/></condition><then pos:line="33" pos:column="21"> <block pos:line="33" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">DEBUGF<pos:position pos:line="34" pos:column="11"/></name><argument_list pos:line="34" pos:column="11">(<argument><expr><call><name pos:line="34" pos:column="12">fprintf<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">(<argument><expr><name pos:line="34" pos:column="20">stderr<pos:position pos:line="34" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="28">"Warning: LONG namespace not available\n"<pos:position pos:line="34" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="72"/></expr_stmt>
  }<pos:position pos:line="35" pos:column="4"/></block></then></if>
<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif<pos:position pos:line="36" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">ifdef<pos:position pos:line="38" pos:column="7"/></cpp:directive> <name pos:line="38" pos:column="8">USE_LIBIDN<pos:position pos:line="38" pos:column="18"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="39" pos:column="3">idna_init<pos:position pos:line="39" pos:column="12"/></name><argument_list pos:line="39" pos:column="12">()<pos:position pos:line="39" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="15"/></expr_stmt>
<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif<pos:position pos:line="40" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="42" pos:column="3">init_flags<pos:position pos:line="42" pos:column="13"/></name>  <operator pos:line="42" pos:column="15">=<pos:position pos:line="42" pos:column="16"/></operator> <name pos:line="42" pos:column="17">flags<pos:position pos:line="42" pos:column="22"/></name></expr>;<pos:position pos:line="42" pos:column="23"/></expr_stmt>

  <return pos:line="44" pos:column="3">return <expr><name pos:line="44" pos:column="10">CURLE_OK<pos:position pos:line="44" pos:column="18"/></name></expr>;<pos:position pos:line="44" pos:column="19"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
