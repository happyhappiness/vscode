<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_706_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">curl_socket_t<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">accept_connection<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name pos:line="1" pos:column="40">curl_socket_t<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">sock<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">curl_socket_t<pos:position pos:line="3" pos:column="16"/></name></type> <name pos:line="3" pos:column="17">msgsock<pos:position pos:line="3" pos:column="24"/></name> <init pos:line="3" pos:column="25">= <expr><name pos:line="3" pos:column="27">CURL_SOCKET_BAD<pos:position pos:line="3" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">error<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">flag<pos:position pos:line="5" pos:column="11"/></name> <init pos:line="5" pos:column="12">= <expr><literal type="number" pos:line="5" pos:column="14">1<pos:position pos:line="5" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>

  <if pos:line="7" pos:column="3">if<condition pos:line="7" pos:column="5">(<expr><name pos:line="7" pos:column="6">MAX_SOCKETS<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">==<pos:position pos:line="7" pos:column="20"/></operator> <name pos:line="7" pos:column="21">num_sockets<pos:position pos:line="7" pos:column="32"/></name></expr>)<pos:position pos:line="7" pos:column="33"/></condition><then pos:line="7" pos:column="33"> <block pos:line="7" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">logmsg<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><literal type="string" pos:line="8" pos:column="12">"Too many open sockets!"<pos:position pos:line="8" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="38"/></expr_stmt>
    <return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="9" pos:column="27"/></name></expr>;<pos:position pos:line="9" pos:column="28"/></return>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="12" pos:column="3">msgsock<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <call><name pos:line="12" pos:column="13">accept<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">(<argument><expr><name pos:line="12" pos:column="20">sock<pos:position pos:line="12" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="26">NULL<pos:position pos:line="12" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="32">NULL<pos:position pos:line="12" pos:column="36"/></name></expr></argument>)<pos:position pos:line="12" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt>

  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name pos:line="14" pos:column="6">got_exit_signal<pos:position pos:line="14" pos:column="21"/></name></expr>)<pos:position pos:line="14" pos:column="22"/></condition><then pos:line="14" pos:column="22"> <block pos:line="14" pos:column="23">{
    <if pos:line="15" pos:column="5">if<condition pos:line="15" pos:column="7">(<expr><name pos:line="15" pos:column="8">CURL_SOCKET_BAD<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">!=<pos:position pos:line="15" pos:column="26"/></operator> <name pos:line="15" pos:column="27">msgsock<pos:position pos:line="15" pos:column="34"/></name></expr>)<pos:position pos:line="15" pos:column="35"/></condition><then pos:line="15" pos:column="35">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="7">sclose<pos:position pos:line="16" pos:column="13"/></name><argument_list pos:line="16" pos:column="13">(<argument><expr><name pos:line="16" pos:column="14">msgsock<pos:position pos:line="16" pos:column="21"/></name></expr></argument>)<pos:position pos:line="16" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt></block></then></if>
    <return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="17" pos:column="27"/></name></expr>;<pos:position pos:line="17" pos:column="28"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><name pos:line="20" pos:column="6">CURL_SOCKET_BAD<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">==<pos:position pos:line="20" pos:column="24"/></operator> <name pos:line="20" pos:column="25">msgsock<pos:position pos:line="20" pos:column="32"/></name></expr>)<pos:position pos:line="20" pos:column="33"/></condition><then pos:line="20" pos:column="33"> <block pos:line="20" pos:column="34">{
    <expr_stmt><expr><name pos:line="21" pos:column="5">error<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator> <name pos:line="21" pos:column="13">SOCKERRNO<pos:position pos:line="21" pos:column="22"/></name></expr>;<pos:position pos:line="21" pos:column="23"/></expr_stmt>
    <if pos:line="22" pos:column="5">if<condition pos:line="22" pos:column="7">(<expr><name pos:line="22" pos:column="8">EAGAIN<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">==<pos:position pos:line="22" pos:column="17"/></operator> <name pos:line="22" pos:column="18">error<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">||<pos:position pos:line="22" pos:column="26"/></operator> <name pos:line="22" pos:column="27">EWOULDBLOCK<pos:position pos:line="22" pos:column="38"/></name> <operator pos:line="22" pos:column="39">==<pos:position pos:line="22" pos:column="41"/></operator> <name pos:line="22" pos:column="42">error<pos:position pos:line="22" pos:column="47"/></name></expr>)<pos:position pos:line="22" pos:column="48"/></condition><then pos:line="22" pos:column="48"> <block pos:line="22" pos:column="49">{
      <comment type="block" pos:line="23" pos:column="7">/* nothing to accept */</comment>
      <return pos:line="24" pos:column="7">return <expr><literal type="number" pos:line="24" pos:column="14">0<pos:position pos:line="24" pos:column="15"/></literal></expr>;<pos:position pos:line="24" pos:column="16"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">logmsg<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><literal type="string" pos:line="26" pos:column="12">"MAJOR ERROR: accept() failed with error: (%d) %s"<pos:position pos:line="26" pos:column="62"/></literal></expr></argument>,
           <argument><expr><name pos:line="27" pos:column="12">error<pos:position pos:line="27" pos:column="17"/></name></expr></argument>, <argument><expr><call><name pos:line="27" pos:column="19">strerror<pos:position pos:line="27" pos:column="27"/></name><argument_list pos:line="27" pos:column="27">(<argument><expr><name pos:line="27" pos:column="28">error<pos:position pos:line="27" pos:column="33"/></name></expr></argument>)<pos:position pos:line="27" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>
    <return pos:line="28" pos:column="5">return <expr><name pos:line="28" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="28" pos:column="27"/></name></expr>;<pos:position pos:line="28" pos:column="28"/></return>
  }<pos:position pos:line="29" pos:column="4"/></block></then></if>

  <if pos:line="31" pos:column="3">if<condition pos:line="31" pos:column="5">(<expr><literal type="number" pos:line="31" pos:column="6">0<pos:position pos:line="31" pos:column="7"/></literal> <operator pos:line="31" pos:column="8">!=<pos:position pos:line="31" pos:column="10"/></operator> <call><name pos:line="31" pos:column="11">curlx_nonblock<pos:position pos:line="31" pos:column="25"/></name><argument_list pos:line="31" pos:column="25">(<argument><expr><name pos:line="31" pos:column="26">msgsock<pos:position pos:line="31" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="35">TRUE<pos:position pos:line="31" pos:column="39"/></name></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="41"/></condition><then pos:line="31" pos:column="41"> <block pos:line="31" pos:column="42">{
    <expr_stmt><expr><name pos:line="32" pos:column="5">error<pos:position pos:line="32" pos:column="10"/></name> <operator pos:line="32" pos:column="11">=<pos:position pos:line="32" pos:column="12"/></operator> <name pos:line="32" pos:column="13">SOCKERRNO<pos:position pos:line="32" pos:column="22"/></name></expr>;<pos:position pos:line="32" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">logmsg<pos:position pos:line="33" pos:column="11"/></name><argument_list pos:line="33" pos:column="11">(<argument><expr><literal type="string" pos:line="33" pos:column="12">"curlx_nonblock failed with error: (%d) %s"<pos:position pos:line="33" pos:column="55"/></literal></expr></argument>,
           <argument><expr><name pos:line="34" pos:column="12">error<pos:position pos:line="34" pos:column="17"/></name></expr></argument>, <argument><expr><call><name pos:line="34" pos:column="19">strerror<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><name pos:line="34" pos:column="28">error<pos:position pos:line="34" pos:column="33"/></name></expr></argument>)<pos:position pos:line="34" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">sclose<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><name pos:line="35" pos:column="12">msgsock<pos:position pos:line="35" pos:column="19"/></name></expr></argument>)<pos:position pos:line="35" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="21"/></expr_stmt>
    <return pos:line="36" pos:column="5">return <expr><name pos:line="36" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="36" pos:column="27"/></name></expr>;<pos:position pos:line="36" pos:column="28"/></return>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if>

  <if pos:line="39" pos:column="3">if<condition pos:line="39" pos:column="5">(<expr><literal type="number" pos:line="39" pos:column="6">0<pos:position pos:line="39" pos:column="7"/></literal> <operator pos:line="39" pos:column="8">!=<pos:position pos:line="39" pos:column="10"/></operator> <call><name pos:line="39" pos:column="11">setsockopt<pos:position pos:line="39" pos:column="21"/></name><argument_list pos:line="39" pos:column="21">(<argument><expr><name pos:line="39" pos:column="22">msgsock<pos:position pos:line="39" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="31">SOL_SOCKET<pos:position pos:line="39" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="43">SO_KEEPALIVE<pos:position pos:line="39" pos:column="55"/></name></expr></argument>,
                     <argument><expr><operator pos:line="40" pos:column="22">(<pos:position pos:line="40" pos:column="23"/></operator><name pos:line="40" pos:column="23">void<pos:position pos:line="40" pos:column="27"/></name> <operator pos:line="40" pos:column="28">*<pos:position pos:line="40" pos:column="29"/></operator><operator pos:line="40" pos:column="29">)<pos:position pos:line="40" pos:column="30"/></operator><operator pos:line="40" pos:column="30">&amp;<pos:position pos:line="40" pos:column="35"/></operator><name pos:line="40" pos:column="31">flag<pos:position pos:line="40" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="37">sizeof<argument_list pos:line="40" pos:column="43">(<argument><expr><name pos:line="40" pos:column="44">flag<pos:position pos:line="40" pos:column="48"/></name></expr></argument>)<pos:position pos:line="40" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="51"/></condition><then pos:line="40" pos:column="51"> <block pos:line="40" pos:column="52">{
    <expr_stmt><expr><name pos:line="41" pos:column="5">error<pos:position pos:line="41" pos:column="10"/></name> <operator pos:line="41" pos:column="11">=<pos:position pos:line="41" pos:column="12"/></operator> <name pos:line="41" pos:column="13">SOCKERRNO<pos:position pos:line="41" pos:column="22"/></name></expr>;<pos:position pos:line="41" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">logmsg<pos:position pos:line="42" pos:column="11"/></name><argument_list pos:line="42" pos:column="11">(<argument><expr><literal type="string" pos:line="42" pos:column="12">"setsockopt(SO_KEEPALIVE) failed with error: (%d) %s"<pos:position pos:line="42" pos:column="65"/></literal></expr></argument>,
           <argument><expr><name pos:line="43" pos:column="12">error<pos:position pos:line="43" pos:column="17"/></name></expr></argument>, <argument><expr><call><name pos:line="43" pos:column="19">strerror<pos:position pos:line="43" pos:column="27"/></name><argument_list pos:line="43" pos:column="27">(<argument><expr><name pos:line="43" pos:column="28">error<pos:position pos:line="43" pos:column="33"/></name></expr></argument>)<pos:position pos:line="43" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">sclose<pos:position pos:line="44" pos:column="11"/></name><argument_list pos:line="44" pos:column="11">(<argument><expr><name pos:line="44" pos:column="12">msgsock<pos:position pos:line="44" pos:column="19"/></name></expr></argument>)<pos:position pos:line="44" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="21"/></expr_stmt>
    <return pos:line="45" pos:column="5">return <expr><name pos:line="45" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="45" pos:column="27"/></name></expr>;<pos:position pos:line="45" pos:column="28"/></return>
  }<pos:position pos:line="46" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="48" pos:column="3">/*
  ** As soon as this server accepts a connection from the test harness it
  ** must set the server logs advisor read lock to indicate that server
  ** logs should not be read until this lock is removed by this server.
  */</comment>

  <if pos:line="54" pos:column="3">if<condition pos:line="54" pos:column="5">(<expr><operator pos:line="54" pos:column="6">!<pos:position pos:line="54" pos:column="7"/></operator><name pos:line="54" pos:column="7">serverlogslocked<pos:position pos:line="54" pos:column="23"/></name></expr>)<pos:position pos:line="54" pos:column="24"/></condition><then pos:line="54" pos:column="24">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="5">set_advisor_read_lock<pos:position pos:line="55" pos:column="26"/></name><argument_list pos:line="55" pos:column="26">(<argument><expr><name pos:line="55" pos:column="27">SERVERLOGS_LOCK<pos:position pos:line="55" pos:column="42"/></name></expr></argument>)<pos:position pos:line="55" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="44"/></expr_stmt></block></then></if>
  <expr_stmt><expr><name pos:line="56" pos:column="3">serverlogslocked<pos:position pos:line="56" pos:column="19"/></name> <operator pos:line="56" pos:column="20">+=<pos:position pos:line="56" pos:column="22"/></operator> <literal type="number" pos:line="56" pos:column="23">1<pos:position pos:line="56" pos:column="24"/></literal></expr>;<pos:position pos:line="56" pos:column="25"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="58" pos:column="3">logmsg<pos:position pos:line="58" pos:column="9"/></name><argument_list pos:line="58" pos:column="9">(<argument><expr><literal type="string" pos:line="58" pos:column="10">"====&gt; Client connect"<pos:position pos:line="58" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="60" pos:column="3">all_sockets<pos:position pos:line="60" pos:column="14"/></name><index pos:line="60" pos:column="14">[<expr><name pos:line="60" pos:column="15">num_sockets<pos:position pos:line="60" pos:column="26"/></name></expr>]<pos:position pos:line="60" pos:column="27"/></index></name> <operator pos:line="60" pos:column="28">=<pos:position pos:line="60" pos:column="29"/></operator> <name pos:line="60" pos:column="30">msgsock<pos:position pos:line="60" pos:column="37"/></name></expr>;<pos:position pos:line="60" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><name pos:line="61" pos:column="3">num_sockets<pos:position pos:line="61" pos:column="14"/></name> <operator pos:line="61" pos:column="15">+=<pos:position pos:line="61" pos:column="17"/></operator> <literal type="number" pos:line="61" pos:column="18">1<pos:position pos:line="61" pos:column="19"/></literal></expr>;<pos:position pos:line="61" pos:column="20"/></expr_stmt>

<cpp:ifdef pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">ifdef<pos:position pos:line="63" pos:column="7"/></cpp:directive> <name pos:line="63" pos:column="8">TCP_NODELAY<pos:position pos:line="63" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="64" pos:column="3">if<condition pos:line="64" pos:column="5">(<expr><call><name pos:line="64" pos:column="6">socket_domain_is_ip<pos:position pos:line="64" pos:column="25"/></name><argument_list pos:line="64" pos:column="25">()<pos:position pos:line="64" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="28"/></condition><then pos:line="64" pos:column="28"> <block pos:line="64" pos:column="29">{
    <comment type="block" pos:line="65" pos:column="5">/*
     * Disable the Nagle algorithm to make it easier to send out a large
     * response in many small segments to torture the clients more.
     */</comment>
    <if pos:line="69" pos:column="5">if<condition pos:line="69" pos:column="7">(<expr><literal type="number" pos:line="69" pos:column="8">0<pos:position pos:line="69" pos:column="9"/></literal> <operator pos:line="69" pos:column="10">!=<pos:position pos:line="69" pos:column="12"/></operator> <call><name pos:line="69" pos:column="13">setsockopt<pos:position pos:line="69" pos:column="23"/></name><argument_list pos:line="69" pos:column="23">(<argument><expr><name pos:line="69" pos:column="24">msgsock<pos:position pos:line="69" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="33">IPPROTO_TCP<pos:position pos:line="69" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="46">TCP_NODELAY<pos:position pos:line="69" pos:column="57"/></name></expr></argument>,
                       <argument><expr><operator pos:line="70" pos:column="24">(<pos:position pos:line="70" pos:column="25"/></operator><name pos:line="70" pos:column="25">void<pos:position pos:line="70" pos:column="29"/></name> <operator pos:line="70" pos:column="30">*<pos:position pos:line="70" pos:column="31"/></operator><operator pos:line="70" pos:column="31">)<pos:position pos:line="70" pos:column="32"/></operator><operator pos:line="70" pos:column="32">&amp;<pos:position pos:line="70" pos:column="37"/></operator><name pos:line="70" pos:column="33">flag<pos:position pos:line="70" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="70" pos:column="39">sizeof<argument_list pos:line="70" pos:column="45">(<argument><expr><name pos:line="70" pos:column="46">flag<pos:position pos:line="70" pos:column="50"/></name></expr></argument>)<pos:position pos:line="70" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="70" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="53"/></condition><then pos:line="70" pos:column="53">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="7">logmsg<pos:position pos:line="71" pos:column="13"/></name><argument_list pos:line="71" pos:column="13">(<argument><expr><literal type="string" pos:line="71" pos:column="14">"====&gt; TCP_NODELAY failed"<pos:position pos:line="71" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="42"/></expr_stmt></block></then></if>
  }<pos:position pos:line="72" pos:column="4"/></block></then></if>
<cpp:endif pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">endif<pos:position pos:line="73" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="75" pos:column="3">return <expr><name pos:line="75" pos:column="10">msgsock<pos:position pos:line="75" pos:column="17"/></name></expr>;<pos:position pos:line="75" pos:column="18"/></return>
}<pos:position pos:line="76" pos:column="2"/></block></function></unit>
