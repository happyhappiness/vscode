<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1599_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLMcode<pos:position pos:line="1" pos:column="10"/></name></type> <name pos:line="1" pos:column="11">curl_multi_add_handle<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">Curl_multi<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">multi<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
                                <parameter><decl><type><name><name pos:line="2" pos:column="33">struct<pos:position pos:line="2" pos:column="39"/></name> <name pos:line="2" pos:column="40">Curl_easy<pos:position pos:line="2" pos:column="49"/></name></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">data<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <comment type="block" pos:line="4" pos:column="3">/* First, make some basic checks that the CURLM handle is a good handle */</comment>
  <if pos:line="5" pos:column="3">if<condition pos:line="5" pos:column="5">(<expr><operator pos:line="5" pos:column="6">!<pos:position pos:line="5" pos:column="7"/></operator><call><name pos:line="5" pos:column="7">GOOD_MULTI_HANDLE<pos:position pos:line="5" pos:column="24"/></name><argument_list pos:line="5" pos:column="24">(<argument><expr><name pos:line="5" pos:column="25">multi<pos:position pos:line="5" pos:column="30"/></name></expr></argument>)<pos:position pos:line="5" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="32"/></condition><then pos:line="5" pos:column="32">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><name pos:line="6" pos:column="12">CURLM_BAD_HANDLE<pos:position pos:line="6" pos:column="28"/></name></expr>;<pos:position pos:line="6" pos:column="29"/></return></block></then></if>

  <comment type="block" pos:line="8" pos:column="3">/* Verify that we got a somewhat good easy handle too */</comment>
  <if pos:line="9" pos:column="3">if<condition pos:line="9" pos:column="5">(<expr><operator pos:line="9" pos:column="6">!<pos:position pos:line="9" pos:column="7"/></operator><call><name pos:line="9" pos:column="7">GOOD_EASY_HANDLE<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><name pos:line="9" pos:column="24">data<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="30"/></condition><then pos:line="9" pos:column="30">
    <block type="pseudo"><return pos:line="10" pos:column="5">return <expr><name pos:line="10" pos:column="12">CURLM_BAD_EASY_HANDLE<pos:position pos:line="10" pos:column="33"/></name></expr>;<pos:position pos:line="10" pos:column="34"/></return></block></then></if>

  <comment type="block" pos:line="12" pos:column="3">/* Prevent users from adding same easy handle more than once and prevent
     adding to more than one multi stack */</comment>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name><name pos:line="14" pos:column="6">data<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">-&gt;<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="12">multi<pos:position pos:line="14" pos:column="17"/></name></name></expr>)<pos:position pos:line="14" pos:column="18"/></condition><then pos:line="14" pos:column="18">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">CURLM_ADDED_ALREADY<pos:position pos:line="15" pos:column="31"/></name></expr>;<pos:position pos:line="15" pos:column="32"/></return></block></then></if>

  <comment type="block" pos:line="17" pos:column="3">/* Initialize timeout list for this handle */</comment>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">Curl_llist_init<pos:position pos:line="18" pos:column="18"/></name><argument_list pos:line="18" pos:column="18">(<argument><expr><operator pos:line="18" pos:column="19">&amp;<pos:position pos:line="18" pos:column="24"/></operator><name><name pos:line="18" pos:column="20">data<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">-&gt;<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="26">state<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">.<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="32">timeoutlist<pos:position pos:line="18" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="45">NULL<pos:position pos:line="18" pos:column="49"/></name></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="51"/></expr_stmt>

  <comment type="block" pos:line="20" pos:column="3">/*
   * No failure allowed in this function beyond this point. And no
   * modification of easy nor multi handle allowed before this except for
   * potential multi's connection cache growing which won't be undone in this
   * function no matter what.
   */</comment>

  <comment type="block" pos:line="27" pos:column="3">/* set the easy handle */</comment>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">multistate<pos:position pos:line="28" pos:column="13"/></name><argument_list pos:line="28" pos:column="13">(<argument><expr><name pos:line="28" pos:column="14">data<pos:position pos:line="28" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="20">CURLM_STATE_INIT<pos:position pos:line="28" pos:column="36"/></name></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>

  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><operator pos:line="30" pos:column="6">(<pos:position pos:line="30" pos:column="7"/></operator><name><name pos:line="30" pos:column="7">data<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">-&gt;<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="13">set<pos:position pos:line="30" pos:column="16"/></name><operator pos:line="30" pos:column="16">.<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="17">global_dns_cache<pos:position pos:line="30" pos:column="33"/></name></name><operator pos:line="30" pos:column="33">)<pos:position pos:line="30" pos:column="34"/></operator> <operator pos:line="30" pos:column="35">&amp;&amp;<pos:position pos:line="30" pos:column="45"/></operator>
     <operator pos:line="31" pos:column="6">(<pos:position pos:line="31" pos:column="7"/></operator><name><name pos:line="31" pos:column="7">data<pos:position pos:line="31" pos:column="11"/></name><operator pos:line="31" pos:column="11">-&gt;<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="13">dns<pos:position pos:line="31" pos:column="16"/></name><operator pos:line="31" pos:column="16">.<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="17">hostcachetype<pos:position pos:line="31" pos:column="30"/></name></name> <operator pos:line="31" pos:column="31">!=<pos:position pos:line="31" pos:column="33"/></operator> <name pos:line="31" pos:column="34">HCACHE_GLOBAL<pos:position pos:line="31" pos:column="47"/></name><operator pos:line="31" pos:column="47">)<pos:position pos:line="31" pos:column="48"/></operator></expr>)<pos:position pos:line="31" pos:column="49"/></condition><then pos:line="31" pos:column="49"> <block pos:line="31" pos:column="50">{
    <comment type="block" pos:line="32" pos:column="5">/* global dns cache was requested but still isn't */</comment>
    <decl_stmt><decl><type><name><name pos:line="33" pos:column="5">struct<pos:position pos:line="33" pos:column="11"/></name> <name pos:line="33" pos:column="12">curl_hash<pos:position pos:line="33" pos:column="21"/></name></name> <modifier pos:line="33" pos:column="22">*<pos:position pos:line="33" pos:column="23"/></modifier></type><name pos:line="33" pos:column="23">global<pos:position pos:line="33" pos:column="29"/></name> <init pos:line="33" pos:column="30">= <expr><call><name pos:line="33" pos:column="32">Curl_global_host_cache_init<pos:position pos:line="33" pos:column="59"/></name><argument_list pos:line="33" pos:column="59">()<pos:position pos:line="33" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="62"/></decl_stmt>
    <if pos:line="34" pos:column="5">if<condition pos:line="34" pos:column="7">(<expr><name pos:line="34" pos:column="8">global<pos:position pos:line="34" pos:column="14"/></name></expr>)<pos:position pos:line="34" pos:column="15"/></condition><then pos:line="34" pos:column="15"> <block pos:line="34" pos:column="16">{
      <comment type="block" pos:line="35" pos:column="7">/* only do this if the global cache init works */</comment>
      <expr_stmt><expr><name><name pos:line="36" pos:column="7">data<pos:position pos:line="36" pos:column="11"/></name><operator pos:line="36" pos:column="11">-&gt;<pos:position pos:line="36" pos:column="16"/></operator><name pos:line="36" pos:column="13">dns<pos:position pos:line="36" pos:column="16"/></name><operator pos:line="36" pos:column="16">.<pos:position pos:line="36" pos:column="17"/></operator><name pos:line="36" pos:column="17">hostcache<pos:position pos:line="36" pos:column="26"/></name></name> <operator pos:line="36" pos:column="27">=<pos:position pos:line="36" pos:column="28"/></operator> <name pos:line="36" pos:column="29">global<pos:position pos:line="36" pos:column="35"/></name></expr>;<pos:position pos:line="36" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="37" pos:column="7">data<pos:position pos:line="37" pos:column="11"/></name><operator pos:line="37" pos:column="11">-&gt;<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="13">dns<pos:position pos:line="37" pos:column="16"/></name><operator pos:line="37" pos:column="16">.<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="17">hostcachetype<pos:position pos:line="37" pos:column="30"/></name></name> <operator pos:line="37" pos:column="31">=<pos:position pos:line="37" pos:column="32"/></operator> <name pos:line="37" pos:column="33">HCACHE_GLOBAL<pos:position pos:line="37" pos:column="46"/></name></expr>;<pos:position pos:line="37" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>
  }<pos:position pos:line="39" pos:column="4"/></block></then>
  <comment type="block" pos:line="40" pos:column="3">/* for multi interface connections, we share DNS cache automatically if the
     easy handle's one is currently not set. */</comment>
  <elseif pos:line="42" pos:column="3">else <if pos:line="42" pos:column="8">if<condition pos:line="42" pos:column="10">(<expr><operator pos:line="42" pos:column="11">!<pos:position pos:line="42" pos:column="12"/></operator><name><name pos:line="42" pos:column="12">data<pos:position pos:line="42" pos:column="16"/></name><operator pos:line="42" pos:column="16">-&gt;<pos:position pos:line="42" pos:column="21"/></operator><name pos:line="42" pos:column="18">dns<pos:position pos:line="42" pos:column="21"/></name><operator pos:line="42" pos:column="21">.<pos:position pos:line="42" pos:column="22"/></operator><name pos:line="42" pos:column="22">hostcache<pos:position pos:line="42" pos:column="31"/></name></name> <operator pos:line="42" pos:column="32">||<pos:position pos:line="42" pos:column="34"/></operator>
     <operator pos:line="43" pos:column="6">(<pos:position pos:line="43" pos:column="7"/></operator><name><name pos:line="43" pos:column="7">data<pos:position pos:line="43" pos:column="11"/></name><operator pos:line="43" pos:column="11">-&gt;<pos:position pos:line="43" pos:column="16"/></operator><name pos:line="43" pos:column="13">dns<pos:position pos:line="43" pos:column="16"/></name><operator pos:line="43" pos:column="16">.<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="17">hostcachetype<pos:position pos:line="43" pos:column="30"/></name></name> <operator pos:line="43" pos:column="31">==<pos:position pos:line="43" pos:column="33"/></operator> <name pos:line="43" pos:column="34">HCACHE_NONE<pos:position pos:line="43" pos:column="45"/></name><operator pos:line="43" pos:column="45">)<pos:position pos:line="43" pos:column="46"/></operator></expr>)<pos:position pos:line="43" pos:column="47"/></condition><then pos:line="43" pos:column="47"> <block pos:line="43" pos:column="48">{
    <expr_stmt><expr><name><name pos:line="44" pos:column="5">data<pos:position pos:line="44" pos:column="9"/></name><operator pos:line="44" pos:column="9">-&gt;<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="11">dns<pos:position pos:line="44" pos:column="14"/></name><operator pos:line="44" pos:column="14">.<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="15">hostcache<pos:position pos:line="44" pos:column="24"/></name></name> <operator pos:line="44" pos:column="25">=<pos:position pos:line="44" pos:column="26"/></operator> <operator pos:line="44" pos:column="27">&amp;<pos:position pos:line="44" pos:column="32"/></operator><name><name pos:line="44" pos:column="28">multi<pos:position pos:line="44" pos:column="33"/></name><operator pos:line="44" pos:column="33">-&gt;<pos:position pos:line="44" pos:column="38"/></operator><name pos:line="44" pos:column="35">hostcache<pos:position pos:line="44" pos:column="44"/></name></name></expr>;<pos:position pos:line="44" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="45" pos:column="5">data<pos:position pos:line="45" pos:column="9"/></name><operator pos:line="45" pos:column="9">-&gt;<pos:position pos:line="45" pos:column="14"/></operator><name pos:line="45" pos:column="11">dns<pos:position pos:line="45" pos:column="14"/></name><operator pos:line="45" pos:column="14">.<pos:position pos:line="45" pos:column="15"/></operator><name pos:line="45" pos:column="15">hostcachetype<pos:position pos:line="45" pos:column="28"/></name></name> <operator pos:line="45" pos:column="29">=<pos:position pos:line="45" pos:column="30"/></operator> <name pos:line="45" pos:column="31">HCACHE_MULTI<pos:position pos:line="45" pos:column="43"/></name></expr>;<pos:position pos:line="45" pos:column="44"/></expr_stmt>
  }<pos:position pos:line="46" pos:column="4"/></block></then></if></elseif></if>

  <comment type="block" pos:line="48" pos:column="3">/* Point to the multi's connection cache */</comment>
  <expr_stmt><expr><name><name pos:line="49" pos:column="3">data<pos:position pos:line="49" pos:column="7"/></name><operator pos:line="49" pos:column="7">-&gt;<pos:position pos:line="49" pos:column="12"/></operator><name pos:line="49" pos:column="9">state<pos:position pos:line="49" pos:column="14"/></name><operator pos:line="49" pos:column="14">.<pos:position pos:line="49" pos:column="15"/></operator><name pos:line="49" pos:column="15">conn_cache<pos:position pos:line="49" pos:column="25"/></name></name> <operator pos:line="49" pos:column="26">=<pos:position pos:line="49" pos:column="27"/></operator> <operator pos:line="49" pos:column="28">&amp;<pos:position pos:line="49" pos:column="33"/></operator><name><name pos:line="49" pos:column="29">multi<pos:position pos:line="49" pos:column="34"/></name><operator pos:line="49" pos:column="34">-&gt;<pos:position pos:line="49" pos:column="39"/></operator><name pos:line="49" pos:column="36">conn_cache<pos:position pos:line="49" pos:column="46"/></name></name></expr>;<pos:position pos:line="49" pos:column="47"/></expr_stmt>

  <comment type="block" pos:line="51" pos:column="3">/* This adds the new entry at the 'end' of the doubly-linked circular
     list of Curl_easy structs to try and maintain a FIFO queue so
     the pipelined requests are in order. */</comment>

  <comment type="block" pos:line="55" pos:column="3">/* We add this new entry last in the list. */</comment>

  <expr_stmt><expr><name><name pos:line="57" pos:column="3">data<pos:position pos:line="57" pos:column="7"/></name><operator pos:line="57" pos:column="7">-&gt;<pos:position pos:line="57" pos:column="12"/></operator><name pos:line="57" pos:column="9">next<pos:position pos:line="57" pos:column="13"/></name></name> <operator pos:line="57" pos:column="14">=<pos:position pos:line="57" pos:column="15"/></operator> <name pos:line="57" pos:column="16">NULL<pos:position pos:line="57" pos:column="20"/></name></expr>;<pos:position pos:line="57" pos:column="21"/></expr_stmt> <comment type="block" pos:line="57" pos:column="22">/* end of the line */</comment>
  <if pos:line="58" pos:column="3">if<condition pos:line="58" pos:column="5">(<expr><name><name pos:line="58" pos:column="6">multi<pos:position pos:line="58" pos:column="11"/></name><operator pos:line="58" pos:column="11">-&gt;<pos:position pos:line="58" pos:column="16"/></operator><name pos:line="58" pos:column="13">easyp<pos:position pos:line="58" pos:column="18"/></name></name></expr>)<pos:position pos:line="58" pos:column="19"/></condition><then pos:line="58" pos:column="19"> <block pos:line="58" pos:column="20">{
    <decl_stmt><decl><type><name><name pos:line="59" pos:column="5">struct<pos:position pos:line="59" pos:column="11"/></name> <name pos:line="59" pos:column="12">Curl_easy<pos:position pos:line="59" pos:column="21"/></name></name> <modifier pos:line="59" pos:column="22">*<pos:position pos:line="59" pos:column="23"/></modifier></type><name pos:line="59" pos:column="23">last<pos:position pos:line="59" pos:column="27"/></name> <init pos:line="59" pos:column="28">= <expr><name><name pos:line="59" pos:column="30">multi<pos:position pos:line="59" pos:column="35"/></name><operator pos:line="59" pos:column="35">-&gt;<pos:position pos:line="59" pos:column="40"/></operator><name pos:line="59" pos:column="37">easylp<pos:position pos:line="59" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="59" pos:column="44"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="60" pos:column="5">last<pos:position pos:line="60" pos:column="9"/></name><operator pos:line="60" pos:column="9">-&gt;<pos:position pos:line="60" pos:column="14"/></operator><name pos:line="60" pos:column="11">next<pos:position pos:line="60" pos:column="15"/></name></name> <operator pos:line="60" pos:column="16">=<pos:position pos:line="60" pos:column="17"/></operator> <name pos:line="60" pos:column="18">data<pos:position pos:line="60" pos:column="22"/></name></expr>;<pos:position pos:line="60" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="61" pos:column="5">data<pos:position pos:line="61" pos:column="9"/></name><operator pos:line="61" pos:column="9">-&gt;<pos:position pos:line="61" pos:column="14"/></operator><name pos:line="61" pos:column="11">prev<pos:position pos:line="61" pos:column="15"/></name></name> <operator pos:line="61" pos:column="16">=<pos:position pos:line="61" pos:column="17"/></operator> <name pos:line="61" pos:column="18">last<pos:position pos:line="61" pos:column="22"/></name></expr>;<pos:position pos:line="61" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="62" pos:column="5">multi<pos:position pos:line="62" pos:column="10"/></name><operator pos:line="62" pos:column="10">-&gt;<pos:position pos:line="62" pos:column="15"/></operator><name pos:line="62" pos:column="12">easylp<pos:position pos:line="62" pos:column="18"/></name></name> <operator pos:line="62" pos:column="19">=<pos:position pos:line="62" pos:column="20"/></operator> <name pos:line="62" pos:column="21">data<pos:position pos:line="62" pos:column="25"/></name></expr>;<pos:position pos:line="62" pos:column="26"/></expr_stmt> <comment type="block" pos:line="62" pos:column="27">/* the new last node */</comment>
  }<pos:position pos:line="63" pos:column="4"/></block></then>
  <else pos:line="64" pos:column="3">else <block pos:line="64" pos:column="8">{
    <comment type="block" pos:line="65" pos:column="5">/* first node, make prev NULL! */</comment>
    <expr_stmt><expr><name><name pos:line="66" pos:column="5">data<pos:position pos:line="66" pos:column="9"/></name><operator pos:line="66" pos:column="9">-&gt;<pos:position pos:line="66" pos:column="14"/></operator><name pos:line="66" pos:column="11">prev<pos:position pos:line="66" pos:column="15"/></name></name> <operator pos:line="66" pos:column="16">=<pos:position pos:line="66" pos:column="17"/></operator> <name pos:line="66" pos:column="18">NULL<pos:position pos:line="66" pos:column="22"/></name></expr>;<pos:position pos:line="66" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="67" pos:column="5">multi<pos:position pos:line="67" pos:column="10"/></name><operator pos:line="67" pos:column="10">-&gt;<pos:position pos:line="67" pos:column="15"/></operator><name pos:line="67" pos:column="12">easylp<pos:position pos:line="67" pos:column="18"/></name></name> <operator pos:line="67" pos:column="19">=<pos:position pos:line="67" pos:column="20"/></operator> <name><name pos:line="67" pos:column="21">multi<pos:position pos:line="67" pos:column="26"/></name><operator pos:line="67" pos:column="26">-&gt;<pos:position pos:line="67" pos:column="31"/></operator><name pos:line="67" pos:column="28">easyp<pos:position pos:line="67" pos:column="33"/></name></name> <operator pos:line="67" pos:column="34">=<pos:position pos:line="67" pos:column="35"/></operator> <name pos:line="67" pos:column="36">data<pos:position pos:line="67" pos:column="40"/></name></expr>;<pos:position pos:line="67" pos:column="41"/></expr_stmt> <comment type="block" pos:line="67" pos:column="42">/* both first and last */</comment>
  }<pos:position pos:line="68" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="70" pos:column="3">/* make the Curl_easy refer back to this multi handle */</comment>
  <expr_stmt><expr><name><name pos:line="71" pos:column="3">data<pos:position pos:line="71" pos:column="7"/></name><operator pos:line="71" pos:column="7">-&gt;<pos:position pos:line="71" pos:column="12"/></operator><name pos:line="71" pos:column="9">multi<pos:position pos:line="71" pos:column="14"/></name></name> <operator pos:line="71" pos:column="15">=<pos:position pos:line="71" pos:column="16"/></operator> <name pos:line="71" pos:column="17">multi<pos:position pos:line="71" pos:column="22"/></name></expr>;<pos:position pos:line="71" pos:column="23"/></expr_stmt>

  <comment type="block" pos:line="73" pos:column="3">/* Set the timeout for this handle to expire really soon so that it will
     be taken care of even when this handle is added in the midst of operation
     when only the curl_multi_socket() API is used. During that flow, only
     sockets that time-out or have actions will be dealt with. Since this
     handle has no action yet, we make sure it times out to get things to
     happen. */</comment>
  <expr_stmt><expr><call><name pos:line="79" pos:column="3">Curl_expire<pos:position pos:line="79" pos:column="14"/></name><argument_list pos:line="79" pos:column="14">(<argument><expr><name pos:line="79" pos:column="15">data<pos:position pos:line="79" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="79" pos:column="21">0<pos:position pos:line="79" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="24">EXPIRE_RUN_NOW<pos:position pos:line="79" pos:column="38"/></name></expr></argument>)<pos:position pos:line="79" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="40"/></expr_stmt>

  <comment type="block" pos:line="81" pos:column="3">/* increase the node-counter */</comment>
  <expr_stmt><expr><name><name pos:line="82" pos:column="3">multi<pos:position pos:line="82" pos:column="8"/></name><operator pos:line="82" pos:column="8">-&gt;<pos:position pos:line="82" pos:column="13"/></operator><name pos:line="82" pos:column="10">num_easy<pos:position pos:line="82" pos:column="18"/></name></name><operator pos:line="82" pos:column="18">++<pos:position pos:line="82" pos:column="20"/></operator></expr>;<pos:position pos:line="82" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="84" pos:column="3">/* increase the alive-counter */</comment>
  <expr_stmt><expr><name><name pos:line="85" pos:column="3">multi<pos:position pos:line="85" pos:column="8"/></name><operator pos:line="85" pos:column="8">-&gt;<pos:position pos:line="85" pos:column="13"/></operator><name pos:line="85" pos:column="10">num_alive<pos:position pos:line="85" pos:column="19"/></name></name><operator pos:line="85" pos:column="19">++<pos:position pos:line="85" pos:column="21"/></operator></expr>;<pos:position pos:line="85" pos:column="22"/></expr_stmt>

  <comment type="block" pos:line="87" pos:column="3">/* A somewhat crude work-around for a little glitch in update_timer() that
     happens if the lastcall time is set to the same time when the handle is
     removed as when the next handle is added, as then the check in
     update_timer() that prevents calling the application multiple times with
     the same timer infor will not trigger and then the new handle's timeout
     will not be notified to the app.

     The work-around is thus simply to clear the 'lastcall' variable to force
     update_timer() to always trigger a callback to the app when a new easy
     handle is added */</comment>
  <expr_stmt><expr><call><name pos:line="97" pos:column="3">memset<pos:position pos:line="97" pos:column="9"/></name><argument_list pos:line="97" pos:column="9">(<argument><expr><operator pos:line="97" pos:column="10">&amp;<pos:position pos:line="97" pos:column="15"/></operator><name><name pos:line="97" pos:column="11">multi<pos:position pos:line="97" pos:column="16"/></name><operator pos:line="97" pos:column="16">-&gt;<pos:position pos:line="97" pos:column="21"/></operator><name pos:line="97" pos:column="18">timer_lastcall<pos:position pos:line="97" pos:column="32"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="97" pos:column="34">0<pos:position pos:line="97" pos:column="35"/></literal></expr></argument>, <argument><expr><sizeof pos:line="97" pos:column="37">sizeof<argument_list pos:line="97" pos:column="43">(<argument><expr><name><name pos:line="97" pos:column="44">multi<pos:position pos:line="97" pos:column="49"/></name><operator pos:line="97" pos:column="49">-&gt;<pos:position pos:line="97" pos:column="54"/></operator><name pos:line="97" pos:column="51">timer_lastcall<pos:position pos:line="97" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="97" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="97" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="68"/></expr_stmt>

  <comment type="block" pos:line="99" pos:column="3">/* The closure handle only ever has default timeouts set. To improve the
     state somewhat we clone the timeouts from each added handle so that the
     closure handle always has the same timeouts as the most recently added
     easy handle. */</comment>
  <expr_stmt><expr><name><name pos:line="103" pos:column="3">multi<pos:position pos:line="103" pos:column="8"/></name><operator pos:line="103" pos:column="8">-&gt;<pos:position pos:line="103" pos:column="13"/></operator><name pos:line="103" pos:column="10">closure_handle<pos:position pos:line="103" pos:column="24"/></name><operator pos:line="103" pos:column="24">-&gt;<pos:position pos:line="103" pos:column="29"/></operator><name pos:line="103" pos:column="26">set<pos:position pos:line="103" pos:column="29"/></name><operator pos:line="103" pos:column="29">.<pos:position pos:line="103" pos:column="30"/></operator><name pos:line="103" pos:column="30">timeout<pos:position pos:line="103" pos:column="37"/></name></name> <operator pos:line="103" pos:column="38">=<pos:position pos:line="103" pos:column="39"/></operator> <name><name pos:line="103" pos:column="40">data<pos:position pos:line="103" pos:column="44"/></name><operator pos:line="103" pos:column="44">-&gt;<pos:position pos:line="103" pos:column="49"/></operator><name pos:line="103" pos:column="46">set<pos:position pos:line="103" pos:column="49"/></name><operator pos:line="103" pos:column="49">.<pos:position pos:line="103" pos:column="50"/></operator><name pos:line="103" pos:column="50">timeout<pos:position pos:line="103" pos:column="57"/></name></name></expr>;<pos:position pos:line="103" pos:column="58"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="104" pos:column="3">multi<pos:position pos:line="104" pos:column="8"/></name><operator pos:line="104" pos:column="8">-&gt;<pos:position pos:line="104" pos:column="13"/></operator><name pos:line="104" pos:column="10">closure_handle<pos:position pos:line="104" pos:column="24"/></name><operator pos:line="104" pos:column="24">-&gt;<pos:position pos:line="104" pos:column="29"/></operator><name pos:line="104" pos:column="26">set<pos:position pos:line="104" pos:column="29"/></name><operator pos:line="104" pos:column="29">.<pos:position pos:line="104" pos:column="30"/></operator><name pos:line="104" pos:column="30">server_response_timeout<pos:position pos:line="104" pos:column="53"/></name></name> <operator pos:line="104" pos:column="54">=<pos:position pos:line="104" pos:column="55"/></operator>
    <name><name pos:line="105" pos:column="5">data<pos:position pos:line="105" pos:column="9"/></name><operator pos:line="105" pos:column="9">-&gt;<pos:position pos:line="105" pos:column="14"/></operator><name pos:line="105" pos:column="11">set<pos:position pos:line="105" pos:column="14"/></name><operator pos:line="105" pos:column="14">.<pos:position pos:line="105" pos:column="15"/></operator><name pos:line="105" pos:column="15">server_response_timeout<pos:position pos:line="105" pos:column="38"/></name></name></expr>;<pos:position pos:line="105" pos:column="39"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="107" pos:column="3">update_timer<pos:position pos:line="107" pos:column="15"/></name><argument_list pos:line="107" pos:column="15">(<argument><expr><name pos:line="107" pos:column="16">multi<pos:position pos:line="107" pos:column="21"/></name></expr></argument>)<pos:position pos:line="107" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="23"/></expr_stmt>
  <return pos:line="108" pos:column="3">return <expr><name pos:line="108" pos:column="10">CURLM_OK<pos:position pos:line="108" pos:column="18"/></name></expr>;<pos:position pos:line="108" pos:column="19"/></return>
}<pos:position pos:line="109" pos:column="2"/></block></function></unit>
