<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1473_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">free_fixed_hostname<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">hostname<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">host<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><call><name pos:line="3" pos:column="5">defined<pos:position pos:line="3" pos:column="12"/></name><argument_list pos:line="3" pos:column="12">(<argument><expr><name pos:line="3" pos:column="13">USE_LIBIDN2<pos:position pos:line="3" pos:column="24"/></name></expr></argument>)<pos:position pos:line="3" pos:column="25"/></argument_list></call></expr></cpp:if>
  <if pos:line="4" pos:column="3">if<condition pos:line="4" pos:column="5">(<expr><name><name pos:line="4" pos:column="6">host<pos:position pos:line="4" pos:column="10"/></name><operator pos:line="4" pos:column="10">-&gt;<pos:position pos:line="4" pos:column="15"/></operator><name pos:line="4" pos:column="12">encalloc<pos:position pos:line="4" pos:column="20"/></name></name></expr>)<pos:position pos:line="4" pos:column="21"/></condition><then pos:line="4" pos:column="21"> <block pos:line="4" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">idn2_free<pos:position pos:line="5" pos:column="14"/></name><argument_list pos:line="5" pos:column="14">(<argument><expr><name><name pos:line="5" pos:column="15">host<pos:position pos:line="5" pos:column="19"/></name><operator pos:line="5" pos:column="19">-&gt;<pos:position pos:line="5" pos:column="24"/></operator><name pos:line="5" pos:column="21">encalloc<pos:position pos:line="5" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="31"/></expr_stmt> <comment type="block" pos:line="5" pos:column="32">/* must be freed with idn2_free() since this was
                                 allocated by libidn */</comment>
    <expr_stmt><expr><name><name pos:line="7" pos:column="5">host<pos:position pos:line="7" pos:column="9"/></name><operator pos:line="7" pos:column="9">-&gt;<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="11">encalloc<pos:position pos:line="7" pos:column="19"/></name></name> <operator pos:line="7" pos:column="20">=<pos:position pos:line="7" pos:column="21"/></operator> <name pos:line="7" pos:column="22">NULL<pos:position pos:line="7" pos:column="26"/></name></expr>;<pos:position pos:line="7" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="8" pos:column="4"/></block></then></if>
<cpp:elif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">elif<pos:position pos:line="9" pos:column="6"/></cpp:directive> <expr><call><name pos:line="9" pos:column="7">defined<pos:position pos:line="9" pos:column="14"/></name><argument_list pos:line="9" pos:column="14">(<argument><expr><name pos:line="9" pos:column="15">USE_WIN32_IDN<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><call><name pos:line="10" pos:column="3">free<pos:position pos:line="10" pos:column="7"/></name><argument_list pos:line="10" pos:column="7">(<argument><expr><name><name pos:line="10" pos:column="8">host<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">-&gt;<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="14">encalloc<pos:position pos:line="10" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="24"/></expr_stmt> <comment type="block" pos:line="10" pos:column="25">/* must be freed with free() since this was
                           allocated by curl_win32_idn_to_ascii */</comment>
  <expr_stmt><expr><name><name pos:line="12" pos:column="3">host<pos:position pos:line="12" pos:column="7"/></name><operator pos:line="12" pos:column="7">-&gt;<pos:position pos:line="12" pos:column="12"/></operator><name pos:line="12" pos:column="9">encalloc<pos:position pos:line="12" pos:column="17"/></name></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <name pos:line="12" pos:column="20">NULL<pos:position pos:line="12" pos:column="24"/></name></expr>;<pos:position pos:line="12" pos:column="25"/></expr_stmt>
<cpp:else pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">else<pos:position pos:line="13" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><operator pos:line="14" pos:column="3">(<pos:position pos:line="14" pos:column="4"/></operator><name pos:line="14" pos:column="4">void<pos:position pos:line="14" pos:column="8"/></name><operator pos:line="14" pos:column="8">)<pos:position pos:line="14" pos:column="9"/></operator><name pos:line="14" pos:column="9">host<pos:position pos:line="14" pos:column="13"/></name></expr>;<pos:position pos:line="14" pos:column="14"/></expr_stmt>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
