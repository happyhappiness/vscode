<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2061_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">Curl_dedotdotify<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">input<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">inlen<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><call><name pos:line="3" pos:column="18">strlen<pos:position pos:line="3" pos:column="24"/></name><argument_list pos:line="3" pos:column="24">(<argument><expr><name pos:line="3" pos:column="25">input<pos:position pos:line="3" pos:column="30"/></name></expr></argument>)<pos:position pos:line="3" pos:column="31"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">clone<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">size_t<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">clen<pos:position pos:line="5" pos:column="14"/></name> <init pos:line="5" pos:column="15">= <expr><name pos:line="5" pos:column="17">inlen<pos:position pos:line="5" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt> <comment type="block" pos:line="5" pos:column="24">/* the length of the cloned input */</comment>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">out<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><call><name pos:line="6" pos:column="15">malloc<pos:position pos:line="6" pos:column="21"/></name><argument_list pos:line="6" pos:column="21">(<argument><expr><name pos:line="6" pos:column="22">inlen<pos:position pos:line="6" pos:column="27"/></name> <operator pos:line="6" pos:column="28">+<pos:position pos:line="6" pos:column="29"/></operator> <literal type="number" pos:line="6" pos:column="30">1<pos:position pos:line="6" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">outptr<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">orgclone<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">queryp<pos:position pos:line="9" pos:column="15"/></name></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><operator pos:line="10" pos:column="6">!<pos:position pos:line="10" pos:column="7"/></operator><name pos:line="10" pos:column="7">out<pos:position pos:line="10" pos:column="10"/></name></expr>)<pos:position pos:line="10" pos:column="11"/></condition><then pos:line="10" pos:column="11">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">NULL<pos:position pos:line="11" pos:column="16"/></name></expr>;<pos:position pos:line="11" pos:column="17"/></return></block></then></if> <comment type="block" pos:line="11" pos:column="18">/* out of memory */</comment>

  <comment type="block" pos:line="13" pos:column="3">/* get a cloned copy of the input */</comment>
  <expr_stmt><expr><name pos:line="14" pos:column="3">clone<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator> <call><name pos:line="14" pos:column="11">strdup<pos:position pos:line="14" pos:column="17"/></name><argument_list pos:line="14" pos:column="17">(<argument><expr><name pos:line="14" pos:column="18">input<pos:position pos:line="14" pos:column="23"/></name></expr></argument>)<pos:position pos:line="14" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="25"/></expr_stmt>
  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><operator pos:line="15" pos:column="6">!<pos:position pos:line="15" pos:column="7"/></operator><name pos:line="15" pos:column="7">clone<pos:position pos:line="15" pos:column="12"/></name></expr>)<pos:position pos:line="15" pos:column="13"/></condition><then pos:line="15" pos:column="13"> <block pos:line="15" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">free<pos:position pos:line="16" pos:column="9"/></name><argument_list pos:line="16" pos:column="9">(<argument><expr><name pos:line="16" pos:column="10">out<pos:position pos:line="16" pos:column="13"/></name></expr></argument>)<pos:position pos:line="16" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="15"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">NULL<pos:position pos:line="17" pos:column="16"/></name></expr>;<pos:position pos:line="17" pos:column="17"/></return>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="19" pos:column="3">orgclone<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <name pos:line="19" pos:column="14">clone<pos:position pos:line="19" pos:column="19"/></name></expr>;<pos:position pos:line="19" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name pos:line="20" pos:column="3">outptr<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator> <name pos:line="20" pos:column="12">out<pos:position pos:line="20" pos:column="15"/></name></expr>;<pos:position pos:line="20" pos:column="16"/></expr_stmt>

  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><operator pos:line="22" pos:column="6">!<pos:position pos:line="22" pos:column="7"/></operator><operator pos:line="22" pos:column="7">*<pos:position pos:line="22" pos:column="8"/></operator><name pos:line="22" pos:column="8">clone<pos:position pos:line="22" pos:column="13"/></name></expr>)<pos:position pos:line="22" pos:column="14"/></condition><then pos:line="22" pos:column="14"> <block pos:line="22" pos:column="15">{
    <comment type="block" pos:line="23" pos:column="5">/* zero length string, return that */</comment>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">free<pos:position pos:line="24" pos:column="9"/></name><argument_list pos:line="24" pos:column="9">(<argument><expr><name pos:line="24" pos:column="10">out<pos:position pos:line="24" pos:column="13"/></name></expr></argument>)<pos:position pos:line="24" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="15"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">clone<pos:position pos:line="25" pos:column="17"/></name></expr>;<pos:position pos:line="25" pos:column="18"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="28" pos:column="3">/*
   * To handle query-parts properly, we must find it and remove it during the
   * dotdot-operation and then append it again at the end to the output
   * string.
   */</comment>
  <expr_stmt><expr><name pos:line="33" pos:column="3">queryp<pos:position pos:line="33" pos:column="9"/></name> <operator pos:line="33" pos:column="10">=<pos:position pos:line="33" pos:column="11"/></operator> <call><name pos:line="33" pos:column="12">strchr<pos:position pos:line="33" pos:column="18"/></name><argument_list pos:line="33" pos:column="18">(<argument><expr><name pos:line="33" pos:column="19">clone<pos:position pos:line="33" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="33" pos:column="26">'?'<pos:position pos:line="33" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="31"/></expr_stmt>
  <if pos:line="34" pos:column="3">if<condition pos:line="34" pos:column="5">(<expr><name pos:line="34" pos:column="6">queryp<pos:position pos:line="34" pos:column="12"/></name></expr>)<pos:position pos:line="34" pos:column="13"/></condition><then pos:line="34" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="35" pos:column="5">*<pos:position pos:line="35" pos:column="6"/></operator><name pos:line="35" pos:column="6">queryp<pos:position pos:line="35" pos:column="12"/></name> <operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator> <literal type="number" pos:line="35" pos:column="15">0<pos:position pos:line="35" pos:column="16"/></literal></expr>;<pos:position pos:line="35" pos:column="17"/></expr_stmt></block></then></if>

  <do pos:line="37" pos:column="3">do <block pos:line="37" pos:column="6">{

    <comment type="block" pos:line="39" pos:column="5">/*  A.  If the input buffer begins with a prefix of "../" or "./", then
        remove that prefix from the input buffer; otherwise, */</comment>

    <if pos:line="42" pos:column="5">if<condition pos:line="42" pos:column="7">(<expr><operator pos:line="42" pos:column="8">!<pos:position pos:line="42" pos:column="9"/></operator><call><name pos:line="42" pos:column="9">strncmp<pos:position pos:line="42" pos:column="16"/></name><argument_list pos:line="42" pos:column="16">(<argument><expr><literal type="string" pos:line="42" pos:column="17">"./"<pos:position pos:line="42" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="23">clone<pos:position pos:line="42" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="30">2<pos:position pos:line="42" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="33"/></condition><then pos:line="42" pos:column="33"> <block pos:line="42" pos:column="34">{
      <expr_stmt><expr><name pos:line="43" pos:column="7">clone<pos:position pos:line="43" pos:column="12"/></name> <operator pos:line="43" pos:column="13">+=<pos:position pos:line="43" pos:column="15"/></operator> <literal type="number" pos:line="43" pos:column="16">2<pos:position pos:line="43" pos:column="17"/></literal></expr>;<pos:position pos:line="43" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name pos:line="44" pos:column="7">clen<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">-=<pos:position pos:line="44" pos:column="14"/></operator> <literal type="number" pos:line="44" pos:column="15">2<pos:position pos:line="44" pos:column="16"/></literal></expr>;<pos:position pos:line="44" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></then>
    <elseif pos:line="46" pos:column="5">else <if pos:line="46" pos:column="10">if<condition pos:line="46" pos:column="12">(<expr><operator pos:line="46" pos:column="13">!<pos:position pos:line="46" pos:column="14"/></operator><call><name pos:line="46" pos:column="14">strncmp<pos:position pos:line="46" pos:column="21"/></name><argument_list pos:line="46" pos:column="21">(<argument><expr><literal type="string" pos:line="46" pos:column="22">"../"<pos:position pos:line="46" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="29">clone<pos:position pos:line="46" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="36">3<pos:position pos:line="46" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="39"/></condition><then pos:line="46" pos:column="39"> <block pos:line="46" pos:column="40">{
      <expr_stmt><expr><name pos:line="47" pos:column="7">clone<pos:position pos:line="47" pos:column="12"/></name> <operator pos:line="47" pos:column="13">+=<pos:position pos:line="47" pos:column="15"/></operator> <literal type="number" pos:line="47" pos:column="16">3<pos:position pos:line="47" pos:column="17"/></literal></expr>;<pos:position pos:line="47" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name pos:line="48" pos:column="7">clen<pos:position pos:line="48" pos:column="11"/></name> <operator pos:line="48" pos:column="12">-=<pos:position pos:line="48" pos:column="14"/></operator> <literal type="number" pos:line="48" pos:column="15">3<pos:position pos:line="48" pos:column="16"/></literal></expr>;<pos:position pos:line="48" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if></elseif>

    <comment type="block" pos:line="51" pos:column="5">/*  B.  if the input buffer begins with a prefix of "/./" or "/.", where
        "."  is a complete path segment, then replace that prefix with "/" in
        the input buffer; otherwise, */</comment>
    <elseif pos:line="54" pos:column="5">else <if pos:line="54" pos:column="10">if<condition pos:line="54" pos:column="12">(<expr><operator pos:line="54" pos:column="13">!<pos:position pos:line="54" pos:column="14"/></operator><call><name pos:line="54" pos:column="14">strncmp<pos:position pos:line="54" pos:column="21"/></name><argument_list pos:line="54" pos:column="21">(<argument><expr><literal type="string" pos:line="54" pos:column="22">"/./"<pos:position pos:line="54" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="29">clone<pos:position pos:line="54" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="36">3<pos:position pos:line="54" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="39"/></condition><then pos:line="54" pos:column="39"> <block pos:line="54" pos:column="40">{
      <expr_stmt><expr><name pos:line="55" pos:column="7">clone<pos:position pos:line="55" pos:column="12"/></name> <operator pos:line="55" pos:column="13">+=<pos:position pos:line="55" pos:column="15"/></operator> <literal type="number" pos:line="55" pos:column="16">2<pos:position pos:line="55" pos:column="17"/></literal></expr>;<pos:position pos:line="55" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name pos:line="56" pos:column="7">clen<pos:position pos:line="56" pos:column="11"/></name> <operator pos:line="56" pos:column="12">-=<pos:position pos:line="56" pos:column="14"/></operator> <literal type="number" pos:line="56" pos:column="15">2<pos:position pos:line="56" pos:column="16"/></literal></expr>;<pos:position pos:line="56" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="57" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="58" pos:column="5">else <if pos:line="58" pos:column="10">if<condition pos:line="58" pos:column="12">(<expr><operator pos:line="58" pos:column="13">!<pos:position pos:line="58" pos:column="14"/></operator><call><name pos:line="58" pos:column="14">strcmp<pos:position pos:line="58" pos:column="20"/></name><argument_list pos:line="58" pos:column="20">(<argument><expr><literal type="string" pos:line="58" pos:column="21">"/."<pos:position pos:line="58" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="27">clone<pos:position pos:line="58" pos:column="32"/></name></expr></argument>)<pos:position pos:line="58" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="34"/></condition><then pos:line="58" pos:column="34"> <block pos:line="58" pos:column="35">{
      <expr_stmt><expr><name><name pos:line="59" pos:column="7">clone<pos:position pos:line="59" pos:column="12"/></name><index pos:line="59" pos:column="12">[<expr><literal type="number" pos:line="59" pos:column="13">1<pos:position pos:line="59" pos:column="14"/></literal></expr>]<pos:position pos:line="59" pos:column="15"/></index></name><operator pos:line="59" pos:column="15">=<pos:position pos:line="59" pos:column="16"/></operator><literal type="char" pos:line="59" pos:column="16">'/'<pos:position pos:line="59" pos:column="19"/></literal></expr>;<pos:position pos:line="59" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><name pos:line="60" pos:column="7">clone<pos:position pos:line="60" pos:column="12"/></name><operator pos:line="60" pos:column="12">++<pos:position pos:line="60" pos:column="14"/></operator></expr>;<pos:position pos:line="60" pos:column="15"/></expr_stmt>
      <expr_stmt><expr><name pos:line="61" pos:column="7">clen<pos:position pos:line="61" pos:column="11"/></name> <operator pos:line="61" pos:column="12">-=<pos:position pos:line="61" pos:column="14"/></operator> <literal type="number" pos:line="61" pos:column="15">1<pos:position pos:line="61" pos:column="16"/></literal></expr>;<pos:position pos:line="61" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if></elseif>

    <comment type="block" pos:line="64" pos:column="5">/*  C.  if the input buffer begins with a prefix of "/../" or "/..", where
        ".." is a complete path segment, then replace that prefix with "/" in
        the input buffer and remove the last segment and its preceding "/" (if
        any) from the output buffer; otherwise, */</comment>

    <elseif pos:line="69" pos:column="5">else <if pos:line="69" pos:column="10">if<condition pos:line="69" pos:column="12">(<expr><operator pos:line="69" pos:column="13">!<pos:position pos:line="69" pos:column="14"/></operator><call><name pos:line="69" pos:column="14">strncmp<pos:position pos:line="69" pos:column="21"/></name><argument_list pos:line="69" pos:column="21">(<argument><expr><literal type="string" pos:line="69" pos:column="22">"/../"<pos:position pos:line="69" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="30">clone<pos:position pos:line="69" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="37">4<pos:position pos:line="69" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="40"/></condition><then pos:line="69" pos:column="40"> <block pos:line="69" pos:column="41">{
      <expr_stmt><expr><name pos:line="70" pos:column="7">clone<pos:position pos:line="70" pos:column="12"/></name> <operator pos:line="70" pos:column="13">+=<pos:position pos:line="70" pos:column="15"/></operator> <literal type="number" pos:line="70" pos:column="16">3<pos:position pos:line="70" pos:column="17"/></literal></expr>;<pos:position pos:line="70" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name pos:line="71" pos:column="7">clen<pos:position pos:line="71" pos:column="11"/></name> <operator pos:line="71" pos:column="12">-=<pos:position pos:line="71" pos:column="14"/></operator> <literal type="number" pos:line="71" pos:column="15">3<pos:position pos:line="71" pos:column="16"/></literal></expr>;<pos:position pos:line="71" pos:column="17"/></expr_stmt>
      <comment type="block" pos:line="72" pos:column="7">/* remove the last segment from the output buffer */</comment>
      <while pos:line="73" pos:column="7">while<condition pos:line="73" pos:column="12">(<expr><name pos:line="73" pos:column="13">outptr<pos:position pos:line="73" pos:column="19"/></name> <operator pos:line="73" pos:column="20">&gt;<pos:position pos:line="73" pos:column="24"/></operator> <name pos:line="73" pos:column="22">out<pos:position pos:line="73" pos:column="25"/></name></expr>)<pos:position pos:line="73" pos:column="26"/></condition> <block pos:line="73" pos:column="27">{
        <expr_stmt><expr><name pos:line="74" pos:column="9">outptr<pos:position pos:line="74" pos:column="15"/></name><operator pos:line="74" pos:column="15">--<pos:position pos:line="74" pos:column="17"/></operator></expr>;<pos:position pos:line="74" pos:column="18"/></expr_stmt>
        <if pos:line="75" pos:column="9">if<condition pos:line="75" pos:column="11">(<expr><operator pos:line="75" pos:column="12">*<pos:position pos:line="75" pos:column="13"/></operator><name pos:line="75" pos:column="13">outptr<pos:position pos:line="75" pos:column="19"/></name> <operator pos:line="75" pos:column="20">==<pos:position pos:line="75" pos:column="22"/></operator> <literal type="char" pos:line="75" pos:column="23">'/'<pos:position pos:line="75" pos:column="26"/></literal></expr>)<pos:position pos:line="75" pos:column="27"/></condition><then pos:line="75" pos:column="27">
          <block type="pseudo"><break pos:line="76" pos:column="11">break;<pos:position pos:line="76" pos:column="17"/></break></block></then></if>
      }<pos:position pos:line="77" pos:column="8"/></block></while>
      <expr_stmt><expr><operator pos:line="78" pos:column="7">*<pos:position pos:line="78" pos:column="8"/></operator><name pos:line="78" pos:column="8">outptr<pos:position pos:line="78" pos:column="14"/></name> <operator pos:line="78" pos:column="15">=<pos:position pos:line="78" pos:column="16"/></operator> <literal type="number" pos:line="78" pos:column="17">0<pos:position pos:line="78" pos:column="18"/></literal></expr>;<pos:position pos:line="78" pos:column="19"/></expr_stmt> <comment type="block" pos:line="78" pos:column="20">/* zero-terminate where it stops */</comment>
    }<pos:position pos:line="79" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="80" pos:column="5">else <if pos:line="80" pos:column="10">if<condition pos:line="80" pos:column="12">(<expr><operator pos:line="80" pos:column="13">!<pos:position pos:line="80" pos:column="14"/></operator><call><name pos:line="80" pos:column="14">strcmp<pos:position pos:line="80" pos:column="20"/></name><argument_list pos:line="80" pos:column="20">(<argument><expr><literal type="string" pos:line="80" pos:column="21">"/.."<pos:position pos:line="80" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="80" pos:column="28">clone<pos:position pos:line="80" pos:column="33"/></name></expr></argument>)<pos:position pos:line="80" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="35"/></condition><then pos:line="80" pos:column="35"> <block pos:line="80" pos:column="36">{
      <expr_stmt><expr><name><name pos:line="81" pos:column="7">clone<pos:position pos:line="81" pos:column="12"/></name><index pos:line="81" pos:column="12">[<expr><literal type="number" pos:line="81" pos:column="13">2<pos:position pos:line="81" pos:column="14"/></literal></expr>]<pos:position pos:line="81" pos:column="15"/></index></name><operator pos:line="81" pos:column="15">=<pos:position pos:line="81" pos:column="16"/></operator><literal type="char" pos:line="81" pos:column="16">'/'<pos:position pos:line="81" pos:column="19"/></literal></expr>;<pos:position pos:line="81" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><name pos:line="82" pos:column="7">clone<pos:position pos:line="82" pos:column="12"/></name> <operator pos:line="82" pos:column="13">+=<pos:position pos:line="82" pos:column="15"/></operator> <literal type="number" pos:line="82" pos:column="16">2<pos:position pos:line="82" pos:column="17"/></literal></expr>;<pos:position pos:line="82" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><name pos:line="83" pos:column="7">clen<pos:position pos:line="83" pos:column="11"/></name> <operator pos:line="83" pos:column="12">-=<pos:position pos:line="83" pos:column="14"/></operator> <literal type="number" pos:line="83" pos:column="15">2<pos:position pos:line="83" pos:column="16"/></literal></expr>;<pos:position pos:line="83" pos:column="17"/></expr_stmt>
      <comment type="block" pos:line="84" pos:column="7">/* remove the last segment from the output buffer */</comment>
      <while pos:line="85" pos:column="7">while<condition pos:line="85" pos:column="12">(<expr><name pos:line="85" pos:column="13">outptr<pos:position pos:line="85" pos:column="19"/></name> <operator pos:line="85" pos:column="20">&gt;<pos:position pos:line="85" pos:column="24"/></operator> <name pos:line="85" pos:column="22">out<pos:position pos:line="85" pos:column="25"/></name></expr>)<pos:position pos:line="85" pos:column="26"/></condition> <block pos:line="85" pos:column="27">{
        <expr_stmt><expr><name pos:line="86" pos:column="9">outptr<pos:position pos:line="86" pos:column="15"/></name><operator pos:line="86" pos:column="15">--<pos:position pos:line="86" pos:column="17"/></operator></expr>;<pos:position pos:line="86" pos:column="18"/></expr_stmt>
        <if pos:line="87" pos:column="9">if<condition pos:line="87" pos:column="11">(<expr><operator pos:line="87" pos:column="12">*<pos:position pos:line="87" pos:column="13"/></operator><name pos:line="87" pos:column="13">outptr<pos:position pos:line="87" pos:column="19"/></name> <operator pos:line="87" pos:column="20">==<pos:position pos:line="87" pos:column="22"/></operator> <literal type="char" pos:line="87" pos:column="23">'/'<pos:position pos:line="87" pos:column="26"/></literal></expr>)<pos:position pos:line="87" pos:column="27"/></condition><then pos:line="87" pos:column="27">
          <block type="pseudo"><break pos:line="88" pos:column="11">break;<pos:position pos:line="88" pos:column="17"/></break></block></then></if>
      }<pos:position pos:line="89" pos:column="8"/></block></while>
      <expr_stmt><expr><operator pos:line="90" pos:column="7">*<pos:position pos:line="90" pos:column="8"/></operator><name pos:line="90" pos:column="8">outptr<pos:position pos:line="90" pos:column="14"/></name> <operator pos:line="90" pos:column="15">=<pos:position pos:line="90" pos:column="16"/></operator> <literal type="number" pos:line="90" pos:column="17">0<pos:position pos:line="90" pos:column="18"/></literal></expr>;<pos:position pos:line="90" pos:column="19"/></expr_stmt> <comment type="block" pos:line="90" pos:column="20">/* zero-terminate where it stops */</comment>
    }<pos:position pos:line="91" pos:column="6"/></block></then></if></elseif>

    <comment type="block" pos:line="93" pos:column="5">/*  D.  if the input buffer consists only of "." or "..", then remove
        that from the input buffer; otherwise, */</comment>

    <elseif pos:line="96" pos:column="5">else <if pos:line="96" pos:column="10">if<condition pos:line="96" pos:column="12">(<expr><operator pos:line="96" pos:column="13">!<pos:position pos:line="96" pos:column="14"/></operator><call><name pos:line="96" pos:column="14">strcmp<pos:position pos:line="96" pos:column="20"/></name><argument_list pos:line="96" pos:column="20">(<argument><expr><literal type="string" pos:line="96" pos:column="21">"."<pos:position pos:line="96" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="96" pos:column="26">clone<pos:position pos:line="96" pos:column="31"/></name></expr></argument>)<pos:position pos:line="96" pos:column="32"/></argument_list></call> <operator pos:line="96" pos:column="33">||<pos:position pos:line="96" pos:column="35"/></operator> <operator pos:line="96" pos:column="36">!<pos:position pos:line="96" pos:column="37"/></operator><call><name pos:line="96" pos:column="37">strcmp<pos:position pos:line="96" pos:column="43"/></name><argument_list pos:line="96" pos:column="43">(<argument><expr><literal type="string" pos:line="96" pos:column="44">".."<pos:position pos:line="96" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="96" pos:column="50">clone<pos:position pos:line="96" pos:column="55"/></name></expr></argument>)<pos:position pos:line="96" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="96" pos:column="57"/></condition><then pos:line="96" pos:column="57"> <block pos:line="96" pos:column="58">{
      <expr_stmt><expr><operator pos:line="97" pos:column="7">*<pos:position pos:line="97" pos:column="8"/></operator><name pos:line="97" pos:column="8">clone<pos:position pos:line="97" pos:column="13"/></name> <operator pos:line="97" pos:column="14">=<pos:position pos:line="97" pos:column="15"/></operator> <literal type="number" pos:line="97" pos:column="16">0<pos:position pos:line="97" pos:column="17"/></literal></expr>;<pos:position pos:line="97" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="98" pos:column="7">*<pos:position pos:line="98" pos:column="8"/></operator><name pos:line="98" pos:column="8">out<pos:position pos:line="98" pos:column="11"/></name> <operator pos:line="98" pos:column="12">=<pos:position pos:line="98" pos:column="13"/></operator> <literal type="number" pos:line="98" pos:column="14">0<pos:position pos:line="98" pos:column="15"/></literal></expr>;<pos:position pos:line="98" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="99" pos:column="6"/></block></then></if></elseif>

    <else pos:line="101" pos:column="5">else <block pos:line="101" pos:column="10">{
      <comment type="block" pos:line="102" pos:column="7">/*  E.  move the first path segment in the input buffer to the end of
          the output buffer, including the initial "/" character (if any) and
          any subsequent characters up to, but not including, the next "/"
          character or the end of the input buffer. */</comment>

      <do pos:line="107" pos:column="7">do <block pos:line="107" pos:column="10">{
        <expr_stmt><expr><operator pos:line="108" pos:column="9">*<pos:position pos:line="108" pos:column="10"/></operator><name pos:line="108" pos:column="10">outptr<pos:position pos:line="108" pos:column="16"/></name><operator pos:line="108" pos:column="16">++<pos:position pos:line="108" pos:column="18"/></operator> <operator pos:line="108" pos:column="19">=<pos:position pos:line="108" pos:column="20"/></operator> <operator pos:line="108" pos:column="21">*<pos:position pos:line="108" pos:column="22"/></operator><name pos:line="108" pos:column="22">clone<pos:position pos:line="108" pos:column="27"/></name><operator pos:line="108" pos:column="27">++<pos:position pos:line="108" pos:column="29"/></operator></expr>;<pos:position pos:line="108" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name pos:line="109" pos:column="9">clen<pos:position pos:line="109" pos:column="13"/></name><operator pos:line="109" pos:column="13">--<pos:position pos:line="109" pos:column="15"/></operator></expr>;<pos:position pos:line="109" pos:column="16"/></expr_stmt>
      }<pos:position pos:line="110" pos:column="8"/></block> while<condition pos:line="110" pos:column="14">(<expr><operator pos:line="110" pos:column="15">*<pos:position pos:line="110" pos:column="16"/></operator><name pos:line="110" pos:column="16">clone<pos:position pos:line="110" pos:column="21"/></name> <operator pos:line="110" pos:column="22">&amp;&amp;<pos:position pos:line="110" pos:column="32"/></operator> <operator pos:line="110" pos:column="25">(<pos:position pos:line="110" pos:column="26"/></operator><operator pos:line="110" pos:column="26">*<pos:position pos:line="110" pos:column="27"/></operator><name pos:line="110" pos:column="27">clone<pos:position pos:line="110" pos:column="32"/></name> <operator pos:line="110" pos:column="33">!=<pos:position pos:line="110" pos:column="35"/></operator> <literal type="char" pos:line="110" pos:column="36">'/'<pos:position pos:line="110" pos:column="39"/></literal><operator pos:line="110" pos:column="39">)<pos:position pos:line="110" pos:column="40"/></operator></expr>)<pos:position pos:line="110" pos:column="41"/></condition>;<pos:position pos:line="110" pos:column="42"/></do>
      <expr_stmt><expr><operator pos:line="111" pos:column="7">*<pos:position pos:line="111" pos:column="8"/></operator><name pos:line="111" pos:column="8">outptr<pos:position pos:line="111" pos:column="14"/></name> <operator pos:line="111" pos:column="15">=<pos:position pos:line="111" pos:column="16"/></operator> <literal type="number" pos:line="111" pos:column="17">0<pos:position pos:line="111" pos:column="18"/></literal></expr>;<pos:position pos:line="111" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="112" pos:column="6"/></block></else></if>

  }<pos:position pos:line="114" pos:column="4"/></block> while<condition pos:line="114" pos:column="10">(<expr><operator pos:line="114" pos:column="11">*<pos:position pos:line="114" pos:column="12"/></operator><name pos:line="114" pos:column="12">clone<pos:position pos:line="114" pos:column="17"/></name></expr>)<pos:position pos:line="114" pos:column="18"/></condition>;<pos:position pos:line="114" pos:column="19"/></do>

  <if pos:line="116" pos:column="3">if<condition pos:line="116" pos:column="5">(<expr><name pos:line="116" pos:column="6">queryp<pos:position pos:line="116" pos:column="12"/></name></expr>)<pos:position pos:line="116" pos:column="13"/></condition><then pos:line="116" pos:column="13"> <block pos:line="116" pos:column="14">{
    <decl_stmt><decl><type><name pos:line="117" pos:column="5">size_t<pos:position pos:line="117" pos:column="11"/></name></type> <name pos:line="117" pos:column="12">qlen<pos:position pos:line="117" pos:column="16"/></name></decl>;<pos:position pos:line="117" pos:column="17"/></decl_stmt>
    <comment type="block" pos:line="118" pos:column="5">/* There was a query part, append that to the output. The 'clone' string
       may now have been altered so we copy from the original input string
       from the correct index. */</comment>
    <decl_stmt><decl><type><name pos:line="121" pos:column="5">size_t<pos:position pos:line="121" pos:column="11"/></name></type> <name pos:line="121" pos:column="12">oindex<pos:position pos:line="121" pos:column="18"/></name> <init pos:line="121" pos:column="19">= <expr><name pos:line="121" pos:column="21">queryp<pos:position pos:line="121" pos:column="27"/></name> <operator pos:line="121" pos:column="28">-<pos:position pos:line="121" pos:column="29"/></operator> <name pos:line="121" pos:column="30">orgclone<pos:position pos:line="121" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="121" pos:column="39"/></decl_stmt>
    <expr_stmt><expr><name pos:line="122" pos:column="5">qlen<pos:position pos:line="122" pos:column="9"/></name> <operator pos:line="122" pos:column="10">=<pos:position pos:line="122" pos:column="11"/></operator> <call><name pos:line="122" pos:column="12">strlen<pos:position pos:line="122" pos:column="18"/></name><argument_list pos:line="122" pos:column="18">(<argument><expr><operator pos:line="122" pos:column="19">&amp;<pos:position pos:line="122" pos:column="24"/></operator><name><name pos:line="122" pos:column="20">input<pos:position pos:line="122" pos:column="25"/></name><index pos:line="122" pos:column="25">[<expr><name pos:line="122" pos:column="26">oindex<pos:position pos:line="122" pos:column="32"/></name></expr>]<pos:position pos:line="122" pos:column="33"/></index></name></expr></argument>)<pos:position pos:line="122" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="123" pos:column="5">memcpy<pos:position pos:line="123" pos:column="11"/></name><argument_list pos:line="123" pos:column="11">(<argument><expr><name pos:line="123" pos:column="12">outptr<pos:position pos:line="123" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="123" pos:column="20">&amp;<pos:position pos:line="123" pos:column="25"/></operator><name><name pos:line="123" pos:column="21">input<pos:position pos:line="123" pos:column="26"/></name><index pos:line="123" pos:column="26">[<expr><name pos:line="123" pos:column="27">oindex<pos:position pos:line="123" pos:column="33"/></name></expr>]<pos:position pos:line="123" pos:column="34"/></index></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="36">qlen<pos:position pos:line="123" pos:column="40"/></name> <operator pos:line="123" pos:column="41">+<pos:position pos:line="123" pos:column="42"/></operator> <literal type="number" pos:line="123" pos:column="43">1<pos:position pos:line="123" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="46"/></expr_stmt> <comment type="block" pos:line="123" pos:column="47">/* include the end zero byte */</comment>
  }<pos:position pos:line="124" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="126" pos:column="3">free<pos:position pos:line="126" pos:column="7"/></name><argument_list pos:line="126" pos:column="7">(<argument><expr><name pos:line="126" pos:column="8">orgclone<pos:position pos:line="126" pos:column="16"/></name></expr></argument>)<pos:position pos:line="126" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="18"/></expr_stmt>
  <return pos:line="127" pos:column="3">return <expr><name pos:line="127" pos:column="10">out<pos:position pos:line="127" pos:column="13"/></name></expr>;<pos:position pos:line="127" pos:column="14"/></return>
}<pos:position pos:line="128" pos:column="2"/></block></function></unit>
