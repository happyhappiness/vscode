<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1026_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">curl_easy_escape<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">Curl_easy<pos:position pos:line="1" pos:column="40"/></name></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">data<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">string<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>,
                       <parameter><decl><type><name pos:line="2" pos:column="24">int<pos:position pos:line="2" pos:column="27"/></name></type> <name pos:line="2" pos:column="28">inlength<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">alloc<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">ns<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">testing_ptr<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">NULL<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">unsigned<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">char<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">in<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt> <comment type="block" pos:line="7" pos:column="21">/* we need to treat the characters unsigned */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">newlen<pos:position pos:line="8" pos:column="16"/></name></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">strindex<pos:position pos:line="9" pos:column="18"/></name> <init pos:line="9" pos:column="19">= <expr><literal type="number" pos:line="9" pos:column="21">0<pos:position pos:line="9" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">size_t<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">length<pos:position pos:line="10" pos:column="16"/></name></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">CURLcode<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">result<pos:position pos:line="11" pos:column="18"/></name></decl>;<pos:position pos:line="11" pos:column="19"/></decl_stmt>

  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><name pos:line="13" pos:column="6">inlength<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">&lt;<pos:position pos:line="13" pos:column="19"/></operator> <literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal></expr>)<pos:position pos:line="13" pos:column="19"/></condition><then pos:line="13" pos:column="19">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><name pos:line="14" pos:column="12">NULL<pos:position pos:line="14" pos:column="16"/></name></expr>;<pos:position pos:line="14" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="16" pos:column="3">alloc<pos:position pos:line="16" pos:column="8"/></name> <operator pos:line="16" pos:column="9">=<pos:position pos:line="16" pos:column="10"/></operator> <operator pos:line="16" pos:column="11">(<pos:position pos:line="16" pos:column="12"/></operator><ternary><condition><expr><name pos:line="16" pos:column="12">inlength<pos:position pos:line="16" pos:column="20"/></name></expr>?<pos:position pos:line="16" pos:column="21"/></condition><then><expr><operator pos:line="16" pos:column="21">(<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">size_t<pos:position pos:line="16" pos:column="28"/></name><operator pos:line="16" pos:column="28">)<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="29">inlength<pos:position pos:line="16" pos:column="37"/></name></expr></then><else pos:line="16" pos:column="37">:<expr><call><name pos:line="16" pos:column="38">strlen<pos:position pos:line="16" pos:column="44"/></name><argument_list pos:line="16" pos:column="44">(<argument><expr><name pos:line="16" pos:column="45">string<pos:position pos:line="16" pos:column="51"/></name></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call></expr></else></ternary><operator pos:line="16" pos:column="52">)<pos:position pos:line="16" pos:column="53"/></operator> <operator pos:line="16" pos:column="54">+<pos:position pos:line="16" pos:column="55"/></operator> <literal type="number" pos:line="16" pos:column="56">1<pos:position pos:line="16" pos:column="57"/></literal></expr>;<pos:position pos:line="16" pos:column="58"/></expr_stmt>
  <expr_stmt><expr><name pos:line="17" pos:column="3">newlen<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator> <name pos:line="17" pos:column="12">alloc<pos:position pos:line="17" pos:column="17"/></name></expr>;<pos:position pos:line="17" pos:column="18"/></expr_stmt>

  <expr_stmt><expr><name pos:line="19" pos:column="3">ns<pos:position pos:line="19" pos:column="5"/></name> <operator pos:line="19" pos:column="6">=<pos:position pos:line="19" pos:column="7"/></operator> <call><name pos:line="19" pos:column="8">malloc<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><name pos:line="19" pos:column="15">alloc<pos:position pos:line="19" pos:column="20"/></name></expr></argument>)<pos:position pos:line="19" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="22"/></expr_stmt>
  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><operator pos:line="20" pos:column="6">!<pos:position pos:line="20" pos:column="7"/></operator><name pos:line="20" pos:column="7">ns<pos:position pos:line="20" pos:column="9"/></name></expr>)<pos:position pos:line="20" pos:column="10"/></condition><then pos:line="20" pos:column="10">
    <block type="pseudo"><return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">NULL<pos:position pos:line="21" pos:column="16"/></name></expr>;<pos:position pos:line="21" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="23" pos:column="3">length<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">=<pos:position pos:line="23" pos:column="11"/></operator> <name pos:line="23" pos:column="12">alloc<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">-<pos:position pos:line="23" pos:column="18"/></operator><literal type="number" pos:line="23" pos:column="18">1<pos:position pos:line="23" pos:column="19"/></literal></expr>;<pos:position pos:line="23" pos:column="20"/></expr_stmt>
  <while pos:line="24" pos:column="3">while<condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">length<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">--<pos:position pos:line="24" pos:column="17"/></operator></expr>)<pos:position pos:line="24" pos:column="18"/></condition> <block pos:line="24" pos:column="19">{
    <expr_stmt><expr><name pos:line="25" pos:column="5">in<pos:position pos:line="25" pos:column="7"/></name> <operator pos:line="25" pos:column="8">=<pos:position pos:line="25" pos:column="9"/></operator> <operator pos:line="25" pos:column="10">*<pos:position pos:line="25" pos:column="11"/></operator><name pos:line="25" pos:column="11">string<pos:position pos:line="25" pos:column="17"/></name></expr>;<pos:position pos:line="25" pos:column="18"/></expr_stmt>

    <if pos:line="27" pos:column="5">if<condition pos:line="27" pos:column="7">(<expr><call><name pos:line="27" pos:column="8">Curl_isunreserved<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name pos:line="27" pos:column="26">in<pos:position pos:line="27" pos:column="28"/></name></expr></argument>)<pos:position pos:line="27" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="30"/></condition><then pos:line="27" pos:column="30">
      <comment type="block" pos:line="28" pos:column="7">/* just copy this */</comment>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="29" pos:column="7">ns<pos:position pos:line="29" pos:column="9"/></name><index pos:line="29" pos:column="9">[<expr><name pos:line="29" pos:column="10">strindex<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">++<pos:position pos:line="29" pos:column="20"/></operator></expr>]<pos:position pos:line="29" pos:column="21"/></index></name> <operator pos:line="29" pos:column="22">=<pos:position pos:line="29" pos:column="23"/></operator> <name pos:line="29" pos:column="24">in<pos:position pos:line="29" pos:column="26"/></name></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt></block></then>
    <else pos:line="30" pos:column="5">else <block pos:line="30" pos:column="10">{
      <comment type="block" pos:line="31" pos:column="7">/* encode it */</comment>
      <expr_stmt><expr><name pos:line="32" pos:column="7">newlen<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">+=<pos:position pos:line="32" pos:column="16"/></operator> <literal type="number" pos:line="32" pos:column="17">2<pos:position pos:line="32" pos:column="18"/></literal></expr>;<pos:position pos:line="32" pos:column="19"/></expr_stmt> <comment type="block" pos:line="32" pos:column="20">/* the size grows with two, since this'll become a %XX */</comment>
      <if pos:line="33" pos:column="7">if<condition pos:line="33" pos:column="9">(<expr><name pos:line="33" pos:column="10">newlen<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">&gt;<pos:position pos:line="33" pos:column="21"/></operator> <name pos:line="33" pos:column="19">alloc<pos:position pos:line="33" pos:column="24"/></name></expr>)<pos:position pos:line="33" pos:column="25"/></condition><then pos:line="33" pos:column="25"> <block pos:line="33" pos:column="26">{
        <expr_stmt><expr><name pos:line="34" pos:column="9">alloc<pos:position pos:line="34" pos:column="14"/></name> <operator pos:line="34" pos:column="15">*=<pos:position pos:line="34" pos:column="17"/></operator> <literal type="number" pos:line="34" pos:column="18">2<pos:position pos:line="34" pos:column="19"/></literal></expr>;<pos:position pos:line="34" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><name pos:line="35" pos:column="9">testing_ptr<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">=<pos:position pos:line="35" pos:column="22"/></operator> <call><name pos:line="35" pos:column="23">Curl_saferealloc<pos:position pos:line="35" pos:column="39"/></name><argument_list pos:line="35" pos:column="39">(<argument><expr><name pos:line="35" pos:column="40">ns<pos:position pos:line="35" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="44">alloc<pos:position pos:line="35" pos:column="49"/></name></expr></argument>)<pos:position pos:line="35" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="51"/></expr_stmt>
        <if pos:line="36" pos:column="9">if<condition pos:line="36" pos:column="11">(<expr><operator pos:line="36" pos:column="12">!<pos:position pos:line="36" pos:column="13"/></operator><name pos:line="36" pos:column="13">testing_ptr<pos:position pos:line="36" pos:column="24"/></name></expr>)<pos:position pos:line="36" pos:column="25"/></condition><then pos:line="36" pos:column="25">
          <block type="pseudo"><return pos:line="37" pos:column="11">return <expr><name pos:line="37" pos:column="18">NULL<pos:position pos:line="37" pos:column="22"/></name></expr>;<pos:position pos:line="37" pos:column="23"/></return></block></then></if>
        <expr_stmt><expr><name pos:line="38" pos:column="9">ns<pos:position pos:line="38" pos:column="11"/></name> <operator pos:line="38" pos:column="12">=<pos:position pos:line="38" pos:column="13"/></operator> <name pos:line="38" pos:column="14">testing_ptr<pos:position pos:line="38" pos:column="25"/></name></expr>;<pos:position pos:line="38" pos:column="26"/></expr_stmt>
      }<pos:position pos:line="39" pos:column="8"/></block></then></if>

      <expr_stmt><expr><name pos:line="41" pos:column="7">result<pos:position pos:line="41" pos:column="13"/></name> <operator pos:line="41" pos:column="14">=<pos:position pos:line="41" pos:column="15"/></operator> <call><name pos:line="41" pos:column="16">Curl_convert_to_network<pos:position pos:line="41" pos:column="39"/></name><argument_list pos:line="41" pos:column="39">(<argument><expr><name pos:line="41" pos:column="40">data<pos:position pos:line="41" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="46">(<pos:position pos:line="41" pos:column="47"/></operator><name pos:line="41" pos:column="47">char<pos:position pos:line="41" pos:column="51"/></name> <operator pos:line="41" pos:column="52">*<pos:position pos:line="41" pos:column="53"/></operator><operator pos:line="41" pos:column="53">)<pos:position pos:line="41" pos:column="54"/></operator><operator pos:line="41" pos:column="54">&amp;<pos:position pos:line="41" pos:column="59"/></operator><name pos:line="41" pos:column="55">in<pos:position pos:line="41" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="59">1<pos:position pos:line="41" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="62"/></expr_stmt>
      <if pos:line="42" pos:column="7">if<condition pos:line="42" pos:column="9">(<expr><name pos:line="42" pos:column="10">result<pos:position pos:line="42" pos:column="16"/></name></expr>)<pos:position pos:line="42" pos:column="17"/></condition><then pos:line="42" pos:column="17"> <block pos:line="42" pos:column="18">{
        <comment type="block" pos:line="43" pos:column="9">/* Curl_convert_to_network calls failf if unsuccessful */</comment>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">free<pos:position pos:line="44" pos:column="13"/></name><argument_list pos:line="44" pos:column="13">(<argument><expr><name pos:line="44" pos:column="14">ns<pos:position pos:line="44" pos:column="16"/></name></expr></argument>)<pos:position pos:line="44" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="18"/></expr_stmt>
        <return pos:line="45" pos:column="9">return <expr><name pos:line="45" pos:column="16">NULL<pos:position pos:line="45" pos:column="20"/></name></expr>;<pos:position pos:line="45" pos:column="21"/></return>
      }<pos:position pos:line="46" pos:column="8"/></block></then></if>

      <expr_stmt><expr><call><name pos:line="48" pos:column="7">snprintf<pos:position pos:line="48" pos:column="15"/></name><argument_list pos:line="48" pos:column="15">(<argument><expr><operator pos:line="48" pos:column="16">&amp;<pos:position pos:line="48" pos:column="21"/></operator><name><name pos:line="48" pos:column="17">ns<pos:position pos:line="48" pos:column="19"/></name><index pos:line="48" pos:column="19">[<expr><name pos:line="48" pos:column="20">strindex<pos:position pos:line="48" pos:column="28"/></name></expr>]<pos:position pos:line="48" pos:column="29"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="31">4<pos:position pos:line="48" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="34">"%%%02X"<pos:position pos:line="48" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="44">in<pos:position pos:line="48" pos:column="46"/></name></expr></argument>)<pos:position pos:line="48" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="48"/></expr_stmt>

      <expr_stmt><expr><name pos:line="50" pos:column="7">strindex<pos:position pos:line="50" pos:column="15"/></name> <operator pos:line="50" pos:column="16">+=<pos:position pos:line="50" pos:column="18"/></operator> <literal type="number" pos:line="50" pos:column="19">3<pos:position pos:line="50" pos:column="20"/></literal></expr>;<pos:position pos:line="50" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name pos:line="52" pos:column="5">string<pos:position pos:line="52" pos:column="11"/></name><operator pos:line="52" pos:column="11">++<pos:position pos:line="52" pos:column="13"/></operator></expr>;<pos:position pos:line="52" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="53" pos:column="4"/></block></while>
  <expr_stmt><expr><name><name pos:line="54" pos:column="3">ns<pos:position pos:line="54" pos:column="5"/></name><index pos:line="54" pos:column="5">[<expr><name pos:line="54" pos:column="6">strindex<pos:position pos:line="54" pos:column="14"/></name></expr>]<pos:position pos:line="54" pos:column="15"/></index></name> <operator pos:line="54" pos:column="16">=<pos:position pos:line="54" pos:column="17"/></operator> <literal type="number" pos:line="54" pos:column="18">0<pos:position pos:line="54" pos:column="19"/></literal></expr>;<pos:position pos:line="54" pos:column="20"/></expr_stmt> <comment type="block" pos:line="54" pos:column="21">/* terminate it */</comment>
  <return pos:line="55" pos:column="3">return <expr><name pos:line="55" pos:column="10">ns<pos:position pos:line="55" pos:column="12"/></name></expr>;<pos:position pos:line="55" pos:column="13"/></return>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
