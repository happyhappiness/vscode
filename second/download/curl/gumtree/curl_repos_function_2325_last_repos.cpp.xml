<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2325_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_auth_decode_digest_http_message<pos:position pos:line="1" pos:column="46"/></name><parameter_list pos:line="1" pos:column="46">(<parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">chlg<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>,
                                              <parameter><decl><type><name><name pos:line="2" pos:column="47">struct<pos:position pos:line="2" pos:column="53"/></name> <name pos:line="2" pos:column="54">digestdata<pos:position pos:line="2" pos:column="64"/></name></name> <modifier pos:line="2" pos:column="65">*<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="66">digest<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">bool<pos:position pos:line="4" pos:column="7"/></name></type> <name pos:line="4" pos:column="8">before<pos:position pos:line="4" pos:column="14"/></name> <init pos:line="4" pos:column="15">= <expr><name pos:line="4" pos:column="17">FALSE<pos:position pos:line="4" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt> <comment type="block" pos:line="4" pos:column="24">/* got a nonce before */</comment>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">bool<pos:position pos:line="5" pos:column="7"/></name></type> <name pos:line="5" pos:column="8">foundAuth<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><name pos:line="5" pos:column="20">FALSE<pos:position pos:line="5" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">bool<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">foundAuthInt<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">FALSE<pos:position pos:line="6" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">token<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><name pos:line="7" pos:column="17">NULL<pos:position pos:line="7" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">tmp<pos:position pos:line="8" pos:column="12"/></name> <init pos:line="8" pos:column="13">= <expr><name pos:line="8" pos:column="15">NULL<pos:position pos:line="8" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>

  <comment type="block" pos:line="10" pos:column="3">/* If we already have received a nonce, keep that in mind */</comment>
  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name><name pos:line="11" pos:column="6">digest<pos:position pos:line="11" pos:column="12"/></name><operator pos:line="11" pos:column="12">-&gt;<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="14">nonce<pos:position pos:line="11" pos:column="19"/></name></name></expr>)<pos:position pos:line="11" pos:column="20"/></condition><then pos:line="11" pos:column="20">
    <block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="5">before<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <name pos:line="12" pos:column="14">TRUE<pos:position pos:line="12" pos:column="18"/></name></expr>;<pos:position pos:line="12" pos:column="19"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="14" pos:column="3">/* Clean up any former leftovers and initialise to defaults */</comment>
  <expr_stmt><expr><call><name pos:line="15" pos:column="3">Curl_auth_digest_cleanup<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">(<argument><expr><name pos:line="15" pos:column="28">digest<pos:position pos:line="15" pos:column="34"/></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>

  <for pos:line="17" pos:column="3">for<control pos:line="17" pos:column="6">(<init pos:line="17" pos:column="7">;<pos:position pos:line="17" pos:column="8"/></init><condition pos:line="17" pos:column="8">;<pos:position pos:line="17" pos:column="9"/></condition><incr/>)<pos:position pos:line="17" pos:column="10"/></control> <block pos:line="17" pos:column="11">{
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">char<pos:position pos:line="18" pos:column="9"/></name></type> <name><name pos:line="18" pos:column="10">value<pos:position pos:line="18" pos:column="15"/></name><index pos:line="18" pos:column="15">[<expr><name pos:line="18" pos:column="16">DIGEST_MAX_VALUE_LENGTH<pos:position pos:line="18" pos:column="39"/></name></expr>]<pos:position pos:line="18" pos:column="40"/></index></name></decl>;<pos:position pos:line="18" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">char<pos:position pos:line="19" pos:column="9"/></name></type> <name><name pos:line="19" pos:column="10">content<pos:position pos:line="19" pos:column="17"/></name><index pos:line="19" pos:column="17">[<expr><name pos:line="19" pos:column="18">DIGEST_MAX_CONTENT_LENGTH<pos:position pos:line="19" pos:column="43"/></name></expr>]<pos:position pos:line="19" pos:column="44"/></index></name></decl>;<pos:position pos:line="19" pos:column="45"/></decl_stmt>

    <comment type="block" pos:line="21" pos:column="5">/* Pass all additional spaces here */</comment>
    <while pos:line="22" pos:column="5">while<condition pos:line="22" pos:column="10">(<expr><operator pos:line="22" pos:column="11">*<pos:position pos:line="22" pos:column="12"/></operator><name pos:line="22" pos:column="12">chlg<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">&amp;&amp;<pos:position pos:line="22" pos:column="27"/></operator> <call><name pos:line="22" pos:column="20">ISSPACE<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><operator pos:line="22" pos:column="28">*<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="29">chlg<pos:position pos:line="22" pos:column="33"/></name></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="35"/></condition>
      <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="7">chlg<pos:position pos:line="23" pos:column="11"/></name><operator pos:line="23" pos:column="11">++<pos:position pos:line="23" pos:column="13"/></operator></expr>;<pos:position pos:line="23" pos:column="14"/></expr_stmt></block></while>

    <comment type="block" pos:line="25" pos:column="5">/* Extract a value=content pair */</comment>
    <if pos:line="26" pos:column="5">if<condition pos:line="26" pos:column="7">(<expr><call><name pos:line="26" pos:column="8">Curl_auth_digest_get_pair<pos:position pos:line="26" pos:column="33"/></name><argument_list pos:line="26" pos:column="33">(<argument><expr><name pos:line="26" pos:column="34">chlg<pos:position pos:line="26" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="40">value<pos:position pos:line="26" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="47">content<pos:position pos:line="26" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="56">&amp;<pos:position pos:line="26" pos:column="61"/></operator><name pos:line="26" pos:column="57">chlg<pos:position pos:line="26" pos:column="61"/></name></expr></argument>)<pos:position pos:line="26" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="63"/></condition><then pos:line="26" pos:column="63"> <block pos:line="26" pos:column="64">{
      <if pos:line="27" pos:column="7">if<condition pos:line="27" pos:column="9">(<expr><call><name pos:line="27" pos:column="10">strcasecompare<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><name pos:line="27" pos:column="25">value<pos:position pos:line="27" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="32">"nonce"<pos:position pos:line="27" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="41"/></condition><then pos:line="27" pos:column="41"> <block pos:line="27" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">free<pos:position pos:line="28" pos:column="13"/></name><argument_list pos:line="28" pos:column="13">(<argument><expr><name><name pos:line="28" pos:column="14">digest<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">-&gt;<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="22">nonce<pos:position pos:line="28" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="29" pos:column="9">digest<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">-&gt;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="17">nonce<pos:position pos:line="29" pos:column="22"/></name></name> <operator pos:line="29" pos:column="23">=<pos:position pos:line="29" pos:column="24"/></operator> <call><name pos:line="29" pos:column="25">strdup<pos:position pos:line="29" pos:column="31"/></name><argument_list pos:line="29" pos:column="31">(<argument><expr><name pos:line="29" pos:column="32">content<pos:position pos:line="29" pos:column="39"/></name></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>
        <if pos:line="30" pos:column="9">if<condition pos:line="30" pos:column="11">(<expr><operator pos:line="30" pos:column="12">!<pos:position pos:line="30" pos:column="13"/></operator><name><name pos:line="30" pos:column="13">digest<pos:position pos:line="30" pos:column="19"/></name><operator pos:line="30" pos:column="19">-&gt;<pos:position pos:line="30" pos:column="24"/></operator><name pos:line="30" pos:column="21">nonce<pos:position pos:line="30" pos:column="26"/></name></name></expr>)<pos:position pos:line="30" pos:column="27"/></condition><then pos:line="30" pos:column="27">
          <block type="pseudo"><return pos:line="31" pos:column="11">return <expr><name pos:line="31" pos:column="18">CURLE_OUT_OF_MEMORY<pos:position pos:line="31" pos:column="37"/></name></expr>;<pos:position pos:line="31" pos:column="38"/></return></block></then></if>
      }<pos:position pos:line="32" pos:column="8"/></block></then>
      <elseif pos:line="33" pos:column="7">else <if pos:line="33" pos:column="12">if<condition pos:line="33" pos:column="14">(<expr><call><name pos:line="33" pos:column="15">strcasecompare<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><name pos:line="33" pos:column="30">value<pos:position pos:line="33" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="37">"stale"<pos:position pos:line="33" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="46"/></condition><then pos:line="33" pos:column="46"> <block pos:line="33" pos:column="47">{
        <if pos:line="34" pos:column="9">if<condition pos:line="34" pos:column="11">(<expr><call><name pos:line="34" pos:column="12">strcasecompare<pos:position pos:line="34" pos:column="26"/></name><argument_list pos:line="34" pos:column="26">(<argument><expr><name pos:line="34" pos:column="27">content<pos:position pos:line="34" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="36">"true"<pos:position pos:line="34" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="44"/></condition><then pos:line="34" pos:column="44"> <block pos:line="34" pos:column="45">{
          <expr_stmt><expr><name><name pos:line="35" pos:column="11">digest<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">-&gt;<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="19">stale<pos:position pos:line="35" pos:column="24"/></name></name> <operator pos:line="35" pos:column="25">=<pos:position pos:line="35" pos:column="26"/></operator> <name pos:line="35" pos:column="27">TRUE<pos:position pos:line="35" pos:column="31"/></name></expr>;<pos:position pos:line="35" pos:column="32"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="36" pos:column="11">digest<pos:position pos:line="36" pos:column="17"/></name><operator pos:line="36" pos:column="17">-&gt;<pos:position pos:line="36" pos:column="22"/></operator><name pos:line="36" pos:column="19">nc<pos:position pos:line="36" pos:column="21"/></name></name> <operator pos:line="36" pos:column="22">=<pos:position pos:line="36" pos:column="23"/></operator> <literal type="number" pos:line="36" pos:column="24">1<pos:position pos:line="36" pos:column="25"/></literal></expr>;<pos:position pos:line="36" pos:column="26"/></expr_stmt> <comment type="block" pos:line="36" pos:column="27">/* we make a new nonce now */</comment>
        }<pos:position pos:line="37" pos:column="10"/></block></then></if>
      }<pos:position pos:line="38" pos:column="8"/></block></then></if></elseif>
      <elseif pos:line="39" pos:column="7">else <if pos:line="39" pos:column="12">if<condition pos:line="39" pos:column="14">(<expr><call><name pos:line="39" pos:column="15">strcasecompare<pos:position pos:line="39" pos:column="29"/></name><argument_list pos:line="39" pos:column="29">(<argument><expr><name pos:line="39" pos:column="30">value<pos:position pos:line="39" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="37">"realm"<pos:position pos:line="39" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="46"/></condition><then pos:line="39" pos:column="46"> <block pos:line="39" pos:column="47">{
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">free<pos:position pos:line="40" pos:column="13"/></name><argument_list pos:line="40" pos:column="13">(<argument><expr><name><name pos:line="40" pos:column="14">digest<pos:position pos:line="40" pos:column="20"/></name><operator pos:line="40" pos:column="20">-&gt;<pos:position pos:line="40" pos:column="25"/></operator><name pos:line="40" pos:column="22">realm<pos:position pos:line="40" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="41" pos:column="9">digest<pos:position pos:line="41" pos:column="15"/></name><operator pos:line="41" pos:column="15">-&gt;<pos:position pos:line="41" pos:column="20"/></operator><name pos:line="41" pos:column="17">realm<pos:position pos:line="41" pos:column="22"/></name></name> <operator pos:line="41" pos:column="23">=<pos:position pos:line="41" pos:column="24"/></operator> <call><name pos:line="41" pos:column="25">strdup<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">(<argument><expr><name pos:line="41" pos:column="32">content<pos:position pos:line="41" pos:column="39"/></name></expr></argument>)<pos:position pos:line="41" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="41"/></expr_stmt>
        <if pos:line="42" pos:column="9">if<condition pos:line="42" pos:column="11">(<expr><operator pos:line="42" pos:column="12">!<pos:position pos:line="42" pos:column="13"/></operator><name><name pos:line="42" pos:column="13">digest<pos:position pos:line="42" pos:column="19"/></name><operator pos:line="42" pos:column="19">-&gt;<pos:position pos:line="42" pos:column="24"/></operator><name pos:line="42" pos:column="21">realm<pos:position pos:line="42" pos:column="26"/></name></name></expr>)<pos:position pos:line="42" pos:column="27"/></condition><then pos:line="42" pos:column="27">
          <block type="pseudo"><return pos:line="43" pos:column="11">return <expr><name pos:line="43" pos:column="18">CURLE_OUT_OF_MEMORY<pos:position pos:line="43" pos:column="37"/></name></expr>;<pos:position pos:line="43" pos:column="38"/></return></block></then></if>
      }<pos:position pos:line="44" pos:column="8"/></block></then></if></elseif>
      <elseif pos:line="45" pos:column="7">else <if pos:line="45" pos:column="12">if<condition pos:line="45" pos:column="14">(<expr><call><name pos:line="45" pos:column="15">strcasecompare<pos:position pos:line="45" pos:column="29"/></name><argument_list pos:line="45" pos:column="29">(<argument><expr><name pos:line="45" pos:column="30">value<pos:position pos:line="45" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="37">"opaque"<pos:position pos:line="45" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="47"/></condition><then pos:line="45" pos:column="47"> <block pos:line="45" pos:column="48">{
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">free<pos:position pos:line="46" pos:column="13"/></name><argument_list pos:line="46" pos:column="13">(<argument><expr><name><name pos:line="46" pos:column="14">digest<pos:position pos:line="46" pos:column="20"/></name><operator pos:line="46" pos:column="20">-&gt;<pos:position pos:line="46" pos:column="25"/></operator><name pos:line="46" pos:column="22">opaque<pos:position pos:line="46" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="47" pos:column="9">digest<pos:position pos:line="47" pos:column="15"/></name><operator pos:line="47" pos:column="15">-&gt;<pos:position pos:line="47" pos:column="20"/></operator><name pos:line="47" pos:column="17">opaque<pos:position pos:line="47" pos:column="23"/></name></name> <operator pos:line="47" pos:column="24">=<pos:position pos:line="47" pos:column="25"/></operator> <call><name pos:line="47" pos:column="26">strdup<pos:position pos:line="47" pos:column="32"/></name><argument_list pos:line="47" pos:column="32">(<argument><expr><name pos:line="47" pos:column="33">content<pos:position pos:line="47" pos:column="40"/></name></expr></argument>)<pos:position pos:line="47" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="42"/></expr_stmt>
        <if pos:line="48" pos:column="9">if<condition pos:line="48" pos:column="11">(<expr><operator pos:line="48" pos:column="12">!<pos:position pos:line="48" pos:column="13"/></operator><name><name pos:line="48" pos:column="13">digest<pos:position pos:line="48" pos:column="19"/></name><operator pos:line="48" pos:column="19">-&gt;<pos:position pos:line="48" pos:column="24"/></operator><name pos:line="48" pos:column="21">opaque<pos:position pos:line="48" pos:column="27"/></name></name></expr>)<pos:position pos:line="48" pos:column="28"/></condition><then pos:line="48" pos:column="28">
          <block type="pseudo"><return pos:line="49" pos:column="11">return <expr><name pos:line="49" pos:column="18">CURLE_OUT_OF_MEMORY<pos:position pos:line="49" pos:column="37"/></name></expr>;<pos:position pos:line="49" pos:column="38"/></return></block></then></if>
      }<pos:position pos:line="50" pos:column="8"/></block></then></if></elseif>
      <elseif pos:line="51" pos:column="7">else <if pos:line="51" pos:column="12">if<condition pos:line="51" pos:column="14">(<expr><call><name pos:line="51" pos:column="15">strcasecompare<pos:position pos:line="51" pos:column="29"/></name><argument_list pos:line="51" pos:column="29">(<argument><expr><name pos:line="51" pos:column="30">value<pos:position pos:line="51" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="37">"qop"<pos:position pos:line="51" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="44"/></condition><then pos:line="51" pos:column="44"> <block pos:line="51" pos:column="45">{
        <decl_stmt><decl><type><name pos:line="52" pos:column="9">char<pos:position pos:line="52" pos:column="13"/></name> <modifier pos:line="52" pos:column="14">*<pos:position pos:line="52" pos:column="15"/></modifier></type><name pos:line="52" pos:column="15">tok_buf<pos:position pos:line="52" pos:column="22"/></name> <init pos:line="52" pos:column="23">= <expr><name pos:line="52" pos:column="25">NULL<pos:position pos:line="52" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="52" pos:column="30"/></decl_stmt>
        <comment type="block" pos:line="53" pos:column="9">/* Tokenize the list and choose auth if possible, use a temporary
           clone of the buffer since strtok_r() ruins it */</comment>
        <expr_stmt><expr><name pos:line="55" pos:column="9">tmp<pos:position pos:line="55" pos:column="12"/></name> <operator pos:line="55" pos:column="13">=<pos:position pos:line="55" pos:column="14"/></operator> <call><name pos:line="55" pos:column="15">strdup<pos:position pos:line="55" pos:column="21"/></name><argument_list pos:line="55" pos:column="21">(<argument><expr><name pos:line="55" pos:column="22">content<pos:position pos:line="55" pos:column="29"/></name></expr></argument>)<pos:position pos:line="55" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="31"/></expr_stmt>
        <if pos:line="56" pos:column="9">if<condition pos:line="56" pos:column="11">(<expr><operator pos:line="56" pos:column="12">!<pos:position pos:line="56" pos:column="13"/></operator><name pos:line="56" pos:column="13">tmp<pos:position pos:line="56" pos:column="16"/></name></expr>)<pos:position pos:line="56" pos:column="17"/></condition><then pos:line="56" pos:column="17">
          <block type="pseudo"><return pos:line="57" pos:column="11">return <expr><name pos:line="57" pos:column="18">CURLE_OUT_OF_MEMORY<pos:position pos:line="57" pos:column="37"/></name></expr>;<pos:position pos:line="57" pos:column="38"/></return></block></then></if>

        <expr_stmt><expr><name pos:line="59" pos:column="9">token<pos:position pos:line="59" pos:column="14"/></name> <operator pos:line="59" pos:column="15">=<pos:position pos:line="59" pos:column="16"/></operator> <call><name pos:line="59" pos:column="17">strtok_r<pos:position pos:line="59" pos:column="25"/></name><argument_list pos:line="59" pos:column="25">(<argument><expr><name pos:line="59" pos:column="26">tmp<pos:position pos:line="59" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="31">","<pos:position pos:line="59" pos:column="34"/></literal></expr></argument>, <argument><expr><operator pos:line="59" pos:column="36">&amp;<pos:position pos:line="59" pos:column="41"/></operator><name pos:line="59" pos:column="37">tok_buf<pos:position pos:line="59" pos:column="44"/></name></expr></argument>)<pos:position pos:line="59" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="46"/></expr_stmt>
        <while pos:line="60" pos:column="9">while<condition pos:line="60" pos:column="14">(<expr><name pos:line="60" pos:column="15">token<pos:position pos:line="60" pos:column="20"/></name> <operator pos:line="60" pos:column="21">!=<pos:position pos:line="60" pos:column="23"/></operator> <name pos:line="60" pos:column="24">NULL<pos:position pos:line="60" pos:column="28"/></name></expr>)<pos:position pos:line="60" pos:column="29"/></condition> <block pos:line="60" pos:column="30">{
          <if pos:line="61" pos:column="11">if<condition pos:line="61" pos:column="13">(<expr><call><name pos:line="61" pos:column="14">strcasecompare<pos:position pos:line="61" pos:column="28"/></name><argument_list pos:line="61" pos:column="28">(<argument><expr><name pos:line="61" pos:column="29">token<pos:position pos:line="61" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="36">DIGEST_QOP_VALUE_STRING_AUTH<pos:position pos:line="61" pos:column="64"/></name></expr></argument>)<pos:position pos:line="61" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="66"/></condition><then pos:line="61" pos:column="66"> <block pos:line="61" pos:column="67">{
            <expr_stmt><expr><name pos:line="62" pos:column="13">foundAuth<pos:position pos:line="62" pos:column="22"/></name> <operator pos:line="62" pos:column="23">=<pos:position pos:line="62" pos:column="24"/></operator> <name pos:line="62" pos:column="25">TRUE<pos:position pos:line="62" pos:column="29"/></name></expr>;<pos:position pos:line="62" pos:column="30"/></expr_stmt>
          }<pos:position pos:line="63" pos:column="12"/></block></then>
          <elseif pos:line="64" pos:column="11">else <if pos:line="64" pos:column="16">if<condition pos:line="64" pos:column="18">(<expr><call><name pos:line="64" pos:column="19">strcasecompare<pos:position pos:line="64" pos:column="33"/></name><argument_list pos:line="64" pos:column="33">(<argument><expr><name pos:line="64" pos:column="34">token<pos:position pos:line="64" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="41">DIGEST_QOP_VALUE_STRING_AUTH_INT<pos:position pos:line="64" pos:column="73"/></name></expr></argument>)<pos:position pos:line="64" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="75"/></condition><then pos:line="64" pos:column="75"> <block pos:line="64" pos:column="76">{
            <expr_stmt><expr><name pos:line="65" pos:column="13">foundAuthInt<pos:position pos:line="65" pos:column="25"/></name> <operator pos:line="65" pos:column="26">=<pos:position pos:line="65" pos:column="27"/></operator> <name pos:line="65" pos:column="28">TRUE<pos:position pos:line="65" pos:column="32"/></name></expr>;<pos:position pos:line="65" pos:column="33"/></expr_stmt>
          }<pos:position pos:line="66" pos:column="12"/></block></then></if></elseif></if>
          <expr_stmt><expr><name pos:line="67" pos:column="11">token<pos:position pos:line="67" pos:column="16"/></name> <operator pos:line="67" pos:column="17">=<pos:position pos:line="67" pos:column="18"/></operator> <call><name pos:line="67" pos:column="19">strtok_r<pos:position pos:line="67" pos:column="27"/></name><argument_list pos:line="67" pos:column="27">(<argument><expr><name pos:line="67" pos:column="28">NULL<pos:position pos:line="67" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="34">","<pos:position pos:line="67" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="67" pos:column="39">&amp;<pos:position pos:line="67" pos:column="44"/></operator><name pos:line="67" pos:column="40">tok_buf<pos:position pos:line="67" pos:column="47"/></name></expr></argument>)<pos:position pos:line="67" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="49"/></expr_stmt>
        }<pos:position pos:line="68" pos:column="10"/></block></while>

        <expr_stmt><expr><call><name pos:line="70" pos:column="9">free<pos:position pos:line="70" pos:column="13"/></name><argument_list pos:line="70" pos:column="13">(<argument><expr><name pos:line="70" pos:column="14">tmp<pos:position pos:line="70" pos:column="17"/></name></expr></argument>)<pos:position pos:line="70" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="19"/></expr_stmt>

        <comment type="block" pos:line="72" pos:column="9">/* Select only auth or auth-int. Otherwise, ignore */</comment>
        <if pos:line="73" pos:column="9">if<condition pos:line="73" pos:column="11">(<expr><name pos:line="73" pos:column="12">foundAuth<pos:position pos:line="73" pos:column="21"/></name></expr>)<pos:position pos:line="73" pos:column="22"/></condition><then pos:line="73" pos:column="22"> <block pos:line="73" pos:column="23">{
          <expr_stmt><expr><call><name pos:line="74" pos:column="11">free<pos:position pos:line="74" pos:column="15"/></name><argument_list pos:line="74" pos:column="15">(<argument><expr><name><name pos:line="74" pos:column="16">digest<pos:position pos:line="74" pos:column="22"/></name><operator pos:line="74" pos:column="22">-&gt;<pos:position pos:line="74" pos:column="27"/></operator><name pos:line="74" pos:column="24">qop<pos:position pos:line="74" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="29"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="75" pos:column="11">digest<pos:position pos:line="75" pos:column="17"/></name><operator pos:line="75" pos:column="17">-&gt;<pos:position pos:line="75" pos:column="22"/></operator><name pos:line="75" pos:column="19">qop<pos:position pos:line="75" pos:column="22"/></name></name> <operator pos:line="75" pos:column="23">=<pos:position pos:line="75" pos:column="24"/></operator> <call><name pos:line="75" pos:column="25">strdup<pos:position pos:line="75" pos:column="31"/></name><argument_list pos:line="75" pos:column="31">(<argument><expr><name pos:line="75" pos:column="32">DIGEST_QOP_VALUE_STRING_AUTH<pos:position pos:line="75" pos:column="60"/></name></expr></argument>)<pos:position pos:line="75" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="62"/></expr_stmt>
          <if pos:line="76" pos:column="11">if<condition pos:line="76" pos:column="13">(<expr><operator pos:line="76" pos:column="14">!<pos:position pos:line="76" pos:column="15"/></operator><name><name pos:line="76" pos:column="15">digest<pos:position pos:line="76" pos:column="21"/></name><operator pos:line="76" pos:column="21">-&gt;<pos:position pos:line="76" pos:column="26"/></operator><name pos:line="76" pos:column="23">qop<pos:position pos:line="76" pos:column="26"/></name></name></expr>)<pos:position pos:line="76" pos:column="27"/></condition><then pos:line="76" pos:column="27">
            <block type="pseudo"><return pos:line="77" pos:column="13">return <expr><name pos:line="77" pos:column="20">CURLE_OUT_OF_MEMORY<pos:position pos:line="77" pos:column="39"/></name></expr>;<pos:position pos:line="77" pos:column="40"/></return></block></then></if>
        }<pos:position pos:line="78" pos:column="10"/></block></then>
        <elseif pos:line="79" pos:column="9">else <if pos:line="79" pos:column="14">if<condition pos:line="79" pos:column="16">(<expr><name pos:line="79" pos:column="17">foundAuthInt<pos:position pos:line="79" pos:column="29"/></name></expr>)<pos:position pos:line="79" pos:column="30"/></condition><then pos:line="79" pos:column="30"> <block pos:line="79" pos:column="31">{
          <expr_stmt><expr><call><name pos:line="80" pos:column="11">free<pos:position pos:line="80" pos:column="15"/></name><argument_list pos:line="80" pos:column="15">(<argument><expr><name><name pos:line="80" pos:column="16">digest<pos:position pos:line="80" pos:column="22"/></name><operator pos:line="80" pos:column="22">-&gt;<pos:position pos:line="80" pos:column="27"/></operator><name pos:line="80" pos:column="24">qop<pos:position pos:line="80" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="29"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="81" pos:column="11">digest<pos:position pos:line="81" pos:column="17"/></name><operator pos:line="81" pos:column="17">-&gt;<pos:position pos:line="81" pos:column="22"/></operator><name pos:line="81" pos:column="19">qop<pos:position pos:line="81" pos:column="22"/></name></name> <operator pos:line="81" pos:column="23">=<pos:position pos:line="81" pos:column="24"/></operator> <call><name pos:line="81" pos:column="25">strdup<pos:position pos:line="81" pos:column="31"/></name><argument_list pos:line="81" pos:column="31">(<argument><expr><name pos:line="81" pos:column="32">DIGEST_QOP_VALUE_STRING_AUTH_INT<pos:position pos:line="81" pos:column="64"/></name></expr></argument>)<pos:position pos:line="81" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="66"/></expr_stmt>
          <if pos:line="82" pos:column="11">if<condition pos:line="82" pos:column="13">(<expr><operator pos:line="82" pos:column="14">!<pos:position pos:line="82" pos:column="15"/></operator><name><name pos:line="82" pos:column="15">digest<pos:position pos:line="82" pos:column="21"/></name><operator pos:line="82" pos:column="21">-&gt;<pos:position pos:line="82" pos:column="26"/></operator><name pos:line="82" pos:column="23">qop<pos:position pos:line="82" pos:column="26"/></name></name></expr>)<pos:position pos:line="82" pos:column="27"/></condition><then pos:line="82" pos:column="27">
            <block type="pseudo"><return pos:line="83" pos:column="13">return <expr><name pos:line="83" pos:column="20">CURLE_OUT_OF_MEMORY<pos:position pos:line="83" pos:column="39"/></name></expr>;<pos:position pos:line="83" pos:column="40"/></return></block></then></if>
        }<pos:position pos:line="84" pos:column="10"/></block></then></if></elseif></if>
      }<pos:position pos:line="85" pos:column="8"/></block></then></if></elseif>
      <elseif pos:line="86" pos:column="7">else <if pos:line="86" pos:column="12">if<condition pos:line="86" pos:column="14">(<expr><call><name pos:line="86" pos:column="15">strcasecompare<pos:position pos:line="86" pos:column="29"/></name><argument_list pos:line="86" pos:column="29">(<argument><expr><name pos:line="86" pos:column="30">value<pos:position pos:line="86" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="37">"algorithm"<pos:position pos:line="86" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="50"/></condition><then pos:line="86" pos:column="50"> <block pos:line="86" pos:column="51">{
        <expr_stmt><expr><call><name pos:line="87" pos:column="9">free<pos:position pos:line="87" pos:column="13"/></name><argument_list pos:line="87" pos:column="13">(<argument><expr><name><name pos:line="87" pos:column="14">digest<pos:position pos:line="87" pos:column="20"/></name><operator pos:line="87" pos:column="20">-&gt;<pos:position pos:line="87" pos:column="25"/></operator><name pos:line="87" pos:column="22">algorithm<pos:position pos:line="87" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="88" pos:column="9">digest<pos:position pos:line="88" pos:column="15"/></name><operator pos:line="88" pos:column="15">-&gt;<pos:position pos:line="88" pos:column="20"/></operator><name pos:line="88" pos:column="17">algorithm<pos:position pos:line="88" pos:column="26"/></name></name> <operator pos:line="88" pos:column="27">=<pos:position pos:line="88" pos:column="28"/></operator> <call><name pos:line="88" pos:column="29">strdup<pos:position pos:line="88" pos:column="35"/></name><argument_list pos:line="88" pos:column="35">(<argument><expr><name pos:line="88" pos:column="36">content<pos:position pos:line="88" pos:column="43"/></name></expr></argument>)<pos:position pos:line="88" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="45"/></expr_stmt>
        <if pos:line="89" pos:column="9">if<condition pos:line="89" pos:column="11">(<expr><operator pos:line="89" pos:column="12">!<pos:position pos:line="89" pos:column="13"/></operator><name><name pos:line="89" pos:column="13">digest<pos:position pos:line="89" pos:column="19"/></name><operator pos:line="89" pos:column="19">-&gt;<pos:position pos:line="89" pos:column="24"/></operator><name pos:line="89" pos:column="21">algorithm<pos:position pos:line="89" pos:column="30"/></name></name></expr>)<pos:position pos:line="89" pos:column="31"/></condition><then pos:line="89" pos:column="31">
          <block type="pseudo"><return pos:line="90" pos:column="11">return <expr><name pos:line="90" pos:column="18">CURLE_OUT_OF_MEMORY<pos:position pos:line="90" pos:column="37"/></name></expr>;<pos:position pos:line="90" pos:column="38"/></return></block></then></if>

        <if pos:line="92" pos:column="9">if<condition pos:line="92" pos:column="11">(<expr><call><name pos:line="92" pos:column="12">strcasecompare<pos:position pos:line="92" pos:column="26"/></name><argument_list pos:line="92" pos:column="26">(<argument><expr><name pos:line="92" pos:column="27">content<pos:position pos:line="92" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="36">"MD5-sess"<pos:position pos:line="92" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="92" pos:column="48"/></condition><then pos:line="92" pos:column="48">
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="93" pos:column="11">digest<pos:position pos:line="93" pos:column="17"/></name><operator pos:line="93" pos:column="17">-&gt;<pos:position pos:line="93" pos:column="22"/></operator><name pos:line="93" pos:column="19">algo<pos:position pos:line="93" pos:column="23"/></name></name> <operator pos:line="93" pos:column="24">=<pos:position pos:line="93" pos:column="25"/></operator> <name pos:line="93" pos:column="26">CURLDIGESTALGO_MD5SESS<pos:position pos:line="93" pos:column="48"/></name></expr>;<pos:position pos:line="93" pos:column="49"/></expr_stmt></block></then>
        <elseif pos:line="94" pos:column="9">else <if pos:line="94" pos:column="14">if<condition pos:line="94" pos:column="16">(<expr><call><name pos:line="94" pos:column="17">strcasecompare<pos:position pos:line="94" pos:column="31"/></name><argument_list pos:line="94" pos:column="31">(<argument><expr><name pos:line="94" pos:column="32">content<pos:position pos:line="94" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="94" pos:column="41">"MD5"<pos:position pos:line="94" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="94" pos:column="48"/></condition><then pos:line="94" pos:column="48">
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="95" pos:column="11">digest<pos:position pos:line="95" pos:column="17"/></name><operator pos:line="95" pos:column="17">-&gt;<pos:position pos:line="95" pos:column="22"/></operator><name pos:line="95" pos:column="19">algo<pos:position pos:line="95" pos:column="23"/></name></name> <operator pos:line="95" pos:column="24">=<pos:position pos:line="95" pos:column="25"/></operator> <name pos:line="95" pos:column="26">CURLDIGESTALGO_MD5<pos:position pos:line="95" pos:column="44"/></name></expr>;<pos:position pos:line="95" pos:column="45"/></expr_stmt></block></then></if></elseif>
        <else pos:line="96" pos:column="9">else
          <block type="pseudo"><return pos:line="97" pos:column="11">return <expr><name pos:line="97" pos:column="18">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="97" pos:column="44"/></name></expr>;<pos:position pos:line="97" pos:column="45"/></return></block></else></if>
      }<pos:position pos:line="98" pos:column="8"/></block></then></if></elseif>
      <else pos:line="99" pos:column="7">else <block pos:line="99" pos:column="12">{
        <comment type="block" pos:line="100" pos:column="9">/* Unknown specifier, ignore it! */</comment>
      }<pos:position pos:line="101" pos:column="8"/></block></else></if>
    }<pos:position pos:line="102" pos:column="6"/></block></then>
    <else pos:line="103" pos:column="5">else
      <block type="pseudo"><break pos:line="104" pos:column="7">break;<pos:position pos:line="104" pos:column="13"/></break></block></else></if> <comment type="block" pos:line="104" pos:column="14">/* We're done here */</comment>

    <comment type="block" pos:line="106" pos:column="5">/* Pass all additional spaces here */</comment>
    <while pos:line="107" pos:column="5">while<condition pos:line="107" pos:column="10">(<expr><operator pos:line="107" pos:column="11">*<pos:position pos:line="107" pos:column="12"/></operator><name pos:line="107" pos:column="12">chlg<pos:position pos:line="107" pos:column="16"/></name> <operator pos:line="107" pos:column="17">&amp;&amp;<pos:position pos:line="107" pos:column="27"/></operator> <call><name pos:line="107" pos:column="20">ISSPACE<pos:position pos:line="107" pos:column="27"/></name><argument_list pos:line="107" pos:column="27">(<argument><expr><operator pos:line="107" pos:column="28">*<pos:position pos:line="107" pos:column="29"/></operator><name pos:line="107" pos:column="29">chlg<pos:position pos:line="107" pos:column="33"/></name></expr></argument>)<pos:position pos:line="107" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="107" pos:column="35"/></condition>
      <block type="pseudo"><expr_stmt><expr><name pos:line="108" pos:column="7">chlg<pos:position pos:line="108" pos:column="11"/></name><operator pos:line="108" pos:column="11">++<pos:position pos:line="108" pos:column="13"/></operator></expr>;<pos:position pos:line="108" pos:column="14"/></expr_stmt></block></while>

    <comment type="block" pos:line="110" pos:column="5">/* Allow the list to be comma-separated */</comment>
    <if pos:line="111" pos:column="5">if<condition pos:line="111" pos:column="7">(<expr><literal type="char" pos:line="111" pos:column="8">','<pos:position pos:line="111" pos:column="11"/></literal> <operator pos:line="111" pos:column="12">==<pos:position pos:line="111" pos:column="14"/></operator> <operator pos:line="111" pos:column="15">*<pos:position pos:line="111" pos:column="16"/></operator><name pos:line="111" pos:column="16">chlg<pos:position pos:line="111" pos:column="20"/></name></expr>)<pos:position pos:line="111" pos:column="21"/></condition><then pos:line="111" pos:column="21">
      <block type="pseudo"><expr_stmt><expr><name pos:line="112" pos:column="7">chlg<pos:position pos:line="112" pos:column="11"/></name><operator pos:line="112" pos:column="11">++<pos:position pos:line="112" pos:column="13"/></operator></expr>;<pos:position pos:line="112" pos:column="14"/></expr_stmt></block></then></if>
  }<pos:position pos:line="113" pos:column="4"/></block></for>

  <comment type="block" pos:line="115" pos:column="3">/* We had a nonce since before, and we got another one now without
     'stale=true'. This means we provided bad credentials in the previous
     request */</comment>
  <if pos:line="118" pos:column="3">if<condition pos:line="118" pos:column="5">(<expr><name pos:line="118" pos:column="6">before<pos:position pos:line="118" pos:column="12"/></name> <operator pos:line="118" pos:column="13">&amp;&amp;<pos:position pos:line="118" pos:column="23"/></operator> <operator pos:line="118" pos:column="16">!<pos:position pos:line="118" pos:column="17"/></operator><name><name pos:line="118" pos:column="17">digest<pos:position pos:line="118" pos:column="23"/></name><operator pos:line="118" pos:column="23">-&gt;<pos:position pos:line="118" pos:column="28"/></operator><name pos:line="118" pos:column="25">stale<pos:position pos:line="118" pos:column="30"/></name></name></expr>)<pos:position pos:line="118" pos:column="31"/></condition><then pos:line="118" pos:column="31">
    <block type="pseudo"><return pos:line="119" pos:column="5">return <expr><name pos:line="119" pos:column="12">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="119" pos:column="38"/></name></expr>;<pos:position pos:line="119" pos:column="39"/></return></block></then></if>

  <comment type="block" pos:line="121" pos:column="3">/* We got this header without a nonce, that's a bad Digest line! */</comment>
  <if pos:line="122" pos:column="3">if<condition pos:line="122" pos:column="5">(<expr><operator pos:line="122" pos:column="6">!<pos:position pos:line="122" pos:column="7"/></operator><name><name pos:line="122" pos:column="7">digest<pos:position pos:line="122" pos:column="13"/></name><operator pos:line="122" pos:column="13">-&gt;<pos:position pos:line="122" pos:column="18"/></operator><name pos:line="122" pos:column="15">nonce<pos:position pos:line="122" pos:column="20"/></name></name></expr>)<pos:position pos:line="122" pos:column="21"/></condition><then pos:line="122" pos:column="21">
    <block type="pseudo"><return pos:line="123" pos:column="5">return <expr><name pos:line="123" pos:column="12">CURLE_BAD_CONTENT_ENCODING<pos:position pos:line="123" pos:column="38"/></name></expr>;<pos:position pos:line="123" pos:column="39"/></return></block></then></if>

  <return pos:line="125" pos:column="3">return <expr><name pos:line="125" pos:column="10">CURLE_OK<pos:position pos:line="125" pos:column="18"/></name></expr>;<pos:position pos:line="125" pos:column="19"/></return>
}<pos:position pos:line="126" pos:column="2"/></block></function></unit>
