<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1052_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_readrewind<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">connectdata<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">conn<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">Curl_easy<pos:position pos:line="3" pos:column="19"/></name></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">data<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><name><name pos:line="3" pos:column="28">conn<pos:position pos:line="3" pos:column="32"/></name><operator pos:line="3" pos:column="32">-&gt;<pos:position pos:line="3" pos:column="37"/></operator><name pos:line="3" pos:column="34">data<pos:position pos:line="3" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">curl_mimepart<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">mimepart<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><operator pos:line="4" pos:column="29">&amp;<pos:position pos:line="4" pos:column="34"/></operator><name><name pos:line="4" pos:column="30">data<pos:position pos:line="4" pos:column="34"/></name><operator pos:line="4" pos:column="34">-&gt;<pos:position pos:line="4" pos:column="39"/></operator><name pos:line="4" pos:column="36">set<pos:position pos:line="4" pos:column="39"/></name><operator pos:line="4" pos:column="39">.<pos:position pos:line="4" pos:column="40"/></operator><name pos:line="4" pos:column="40">mimepost<pos:position pos:line="4" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="49"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="6" pos:column="3">conn<pos:position pos:line="6" pos:column="7"/></name><operator pos:line="6" pos:column="7">-&gt;<pos:position pos:line="6" pos:column="12"/></operator><name pos:line="6" pos:column="9">bits<pos:position pos:line="6" pos:column="13"/></name><operator pos:line="6" pos:column="13">.<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">rewindaftersend<pos:position pos:line="6" pos:column="29"/></name></name> <operator pos:line="6" pos:column="30">=<pos:position pos:line="6" pos:column="31"/></operator> <name pos:line="6" pos:column="32">FALSE<pos:position pos:line="6" pos:column="37"/></name></expr>;<pos:position pos:line="6" pos:column="38"/></expr_stmt> <comment type="block" pos:line="6" pos:column="39">/* we rewind now */</comment>

  <comment type="block" pos:line="8" pos:column="3">/* explicitly switch off sending data on this connection now since we are
     about to restart a new transfer and thus we want to avoid inadvertently
     sending more data on the existing connection until the next transfer
     starts */</comment>
  <expr_stmt><expr><name><name pos:line="12" pos:column="3">data<pos:position pos:line="12" pos:column="7"/></name><operator pos:line="12" pos:column="7">-&gt;<pos:position pos:line="12" pos:column="12"/></operator><name pos:line="12" pos:column="9">req<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">.<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="13">keepon<pos:position pos:line="12" pos:column="19"/></name></name> <operator pos:line="12" pos:column="20">&amp;=<pos:position pos:line="12" pos:column="26"/></operator> <operator pos:line="12" pos:column="23">~<pos:position pos:line="12" pos:column="24"/></operator><name pos:line="12" pos:column="24">KEEP_SEND<pos:position pos:line="12" pos:column="33"/></name></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>

  <comment type="block" pos:line="14" pos:column="3">/* We have sent away data. If not using CURLOPT_POSTFIELDS or
     CURLOPT_HTTPPOST, call app to rewind
  */</comment>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><name><name pos:line="17" pos:column="6">conn<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">-&gt;<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="12">handler<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">-&gt;<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="21">protocol<pos:position pos:line="17" pos:column="29"/></name></name> <operator pos:line="17" pos:column="30">&amp;<pos:position pos:line="17" pos:column="35"/></operator> <name pos:line="17" pos:column="32">PROTO_FAMILY_HTTP<pos:position pos:line="17" pos:column="49"/></name></expr>)<pos:position pos:line="17" pos:column="50"/></condition><then pos:line="17" pos:column="50"> <block pos:line="17" pos:column="51">{
    <decl_stmt><decl><type><name><name pos:line="18" pos:column="5">struct<pos:position pos:line="18" pos:column="11"/></name> <name pos:line="18" pos:column="12">HTTP<pos:position pos:line="18" pos:column="16"/></name></name> <modifier pos:line="18" pos:column="17">*<pos:position pos:line="18" pos:column="18"/></modifier></type><name pos:line="18" pos:column="18">http<pos:position pos:line="18" pos:column="22"/></name> <init pos:line="18" pos:column="23">= <expr><name><name pos:line="18" pos:column="25">data<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">-&gt;<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="31">req<pos:position pos:line="18" pos:column="34"/></name><operator pos:line="18" pos:column="34">.<pos:position pos:line="18" pos:column="35"/></operator><name pos:line="18" pos:column="35">protop<pos:position pos:line="18" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="18" pos:column="42"/></decl_stmt>

    <if pos:line="20" pos:column="5">if<condition pos:line="20" pos:column="7">(<expr><name><name pos:line="20" pos:column="8">http<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">-&gt;<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="14">sendit<pos:position pos:line="20" pos:column="20"/></name></name></expr>)<pos:position pos:line="20" pos:column="21"/></condition><then pos:line="20" pos:column="21">
      <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="7">mimepart<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <name><name pos:line="21" pos:column="18">http<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">-&gt;<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="24">sendit<pos:position pos:line="21" pos:column="30"/></name></name></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt></block></then></if>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>
  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><name><name pos:line="23" pos:column="6">data<pos:position pos:line="23" pos:column="10"/></name><operator pos:line="23" pos:column="10">-&gt;<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="12">set<pos:position pos:line="23" pos:column="15"/></name><operator pos:line="23" pos:column="15">.<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="16">postfields<pos:position pos:line="23" pos:column="26"/></name></name></expr>)<pos:position pos:line="23" pos:column="27"/></condition><then pos:line="23" pos:column="27">
    <block type="pseudo"><empty_stmt pos:line="24" pos:column="5">;<pos:position pos:line="24" pos:column="6"/></empty_stmt></block></then> <comment type="block" pos:line="24" pos:column="7">/* do nothing */</comment>
  <elseif pos:line="25" pos:column="3">else <if pos:line="25" pos:column="8">if<condition pos:line="25" pos:column="10">(<expr><name><name pos:line="25" pos:column="11">data<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">-&gt;<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="17">set<pos:position pos:line="25" pos:column="20"/></name><operator pos:line="25" pos:column="20">.<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="21">httpreq<pos:position pos:line="25" pos:column="28"/></name></name> <operator pos:line="25" pos:column="29">==<pos:position pos:line="25" pos:column="31"/></operator> <name pos:line="25" pos:column="32">HTTPREQ_POST_MIME<pos:position pos:line="25" pos:column="49"/></name> <operator pos:line="25" pos:column="50">||<pos:position pos:line="25" pos:column="52"/></operator>
          <name><name pos:line="26" pos:column="11">data<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">-&gt;<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="17">set<pos:position pos:line="26" pos:column="20"/></name><operator pos:line="26" pos:column="20">.<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="21">httpreq<pos:position pos:line="26" pos:column="28"/></name></name> <operator pos:line="26" pos:column="29">==<pos:position pos:line="26" pos:column="31"/></operator> <name pos:line="26" pos:column="32">HTTPREQ_POST_FORM<pos:position pos:line="26" pos:column="49"/></name></expr>)<pos:position pos:line="26" pos:column="50"/></condition><then pos:line="26" pos:column="50"> <block pos:line="26" pos:column="51">{
    <if pos:line="27" pos:column="5">if<condition pos:line="27" pos:column="7">(<expr><call><name pos:line="27" pos:column="8">Curl_mime_rewind<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><name pos:line="27" pos:column="25">mimepart<pos:position pos:line="27" pos:column="33"/></name></expr></argument>)<pos:position pos:line="27" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="35"/></condition><then pos:line="27" pos:column="35"> <block pos:line="27" pos:column="36">{
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">failf<pos:position pos:line="28" pos:column="12"/></name><argument_list pos:line="28" pos:column="12">(<argument><expr><name pos:line="28" pos:column="13">data<pos:position pos:line="28" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="19">"Cannot rewind mime/post data"<pos:position pos:line="28" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt>
      <return pos:line="29" pos:column="7">return <expr><name pos:line="29" pos:column="14">CURLE_SEND_FAIL_REWIND<pos:position pos:line="29" pos:column="36"/></name></expr>;<pos:position pos:line="29" pos:column="37"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if></elseif>
  <else pos:line="32" pos:column="3">else <block pos:line="32" pos:column="8">{
    <if pos:line="33" pos:column="5">if<condition pos:line="33" pos:column="7">(<expr><name><name pos:line="33" pos:column="8">data<pos:position pos:line="33" pos:column="12"/></name><operator pos:line="33" pos:column="12">-&gt;<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="14">set<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">.<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="18">seek_func<pos:position pos:line="33" pos:column="27"/></name></name></expr>)<pos:position pos:line="33" pos:column="28"/></condition><then pos:line="33" pos:column="28"> <block pos:line="33" pos:column="29">{
      <decl_stmt><decl><type><name pos:line="34" pos:column="7">int<pos:position pos:line="34" pos:column="10"/></name></type> <name pos:line="34" pos:column="11">err<pos:position pos:line="34" pos:column="14"/></name></decl>;<pos:position pos:line="34" pos:column="15"/></decl_stmt>

      <expr_stmt><expr><name pos:line="36" pos:column="7">err<pos:position pos:line="36" pos:column="10"/></name> <operator pos:line="36" pos:column="11">=<pos:position pos:line="36" pos:column="12"/></operator> <call pos:line="36" pos:column="13">(<name><name pos:line="36" pos:column="14">data<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">-&gt;<pos:position pos:line="36" pos:column="23"/></operator><name pos:line="36" pos:column="20">set<pos:position pos:line="36" pos:column="23"/></name><operator pos:line="36" pos:column="23">.<pos:position pos:line="36" pos:column="24"/></operator><name pos:line="36" pos:column="24">seek_func<pos:position pos:line="36" pos:column="33"/></name></name>)<argument_list pos:line="36" pos:column="34">(<argument><expr><name><name pos:line="36" pos:column="35">data<pos:position pos:line="36" pos:column="39"/></name><operator pos:line="36" pos:column="39">-&gt;<pos:position pos:line="36" pos:column="44"/></operator><name pos:line="36" pos:column="41">set<pos:position pos:line="36" pos:column="44"/></name><operator pos:line="36" pos:column="44">.<pos:position pos:line="36" pos:column="45"/></operator><name pos:line="36" pos:column="45">seek_client<pos:position pos:line="36" pos:column="56"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="58">0<pos:position pos:line="36" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="61">SEEK_SET<pos:position pos:line="36" pos:column="69"/></name></expr></argument>)<pos:position pos:line="36" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="71"/></expr_stmt>
      <if pos:line="37" pos:column="7">if<condition pos:line="37" pos:column="9">(<expr><name pos:line="37" pos:column="10">err<pos:position pos:line="37" pos:column="13"/></name></expr>)<pos:position pos:line="37" pos:column="14"/></condition><then pos:line="37" pos:column="14"> <block pos:line="37" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">failf<pos:position pos:line="38" pos:column="14"/></name><argument_list pos:line="38" pos:column="14">(<argument><expr><name pos:line="38" pos:column="15">data<pos:position pos:line="38" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="21">"seek callback returned error %d"<pos:position pos:line="38" pos:column="54"/></literal></expr></argument>, <argument><expr><operator pos:line="38" pos:column="56">(<pos:position pos:line="38" pos:column="57"/></operator><name pos:line="38" pos:column="57">int<pos:position pos:line="38" pos:column="60"/></name><operator pos:line="38" pos:column="60">)<pos:position pos:line="38" pos:column="61"/></operator><name pos:line="38" pos:column="61">err<pos:position pos:line="38" pos:column="64"/></name></expr></argument>)<pos:position pos:line="38" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="66"/></expr_stmt>
        <return pos:line="39" pos:column="9">return <expr><name pos:line="39" pos:column="16">CURLE_SEND_FAIL_REWIND<pos:position pos:line="39" pos:column="38"/></name></expr>;<pos:position pos:line="39" pos:column="39"/></return>
      }<pos:position pos:line="40" pos:column="8"/></block></then></if>
    }<pos:position pos:line="41" pos:column="6"/></block></then>
    <elseif pos:line="42" pos:column="5">else <if pos:line="42" pos:column="10">if<condition pos:line="42" pos:column="12">(<expr><name><name pos:line="42" pos:column="13">data<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">-&gt;<pos:position pos:line="42" pos:column="22"/></operator><name pos:line="42" pos:column="19">set<pos:position pos:line="42" pos:column="22"/></name><operator pos:line="42" pos:column="22">.<pos:position pos:line="42" pos:column="23"/></operator><name pos:line="42" pos:column="23">ioctl_func<pos:position pos:line="42" pos:column="33"/></name></name></expr>)<pos:position pos:line="42" pos:column="34"/></condition><then pos:line="42" pos:column="34"> <block pos:line="42" pos:column="35">{
      <decl_stmt><decl><type><name pos:line="43" pos:column="7">curlioerr<pos:position pos:line="43" pos:column="16"/></name></type> <name pos:line="43" pos:column="17">err<pos:position pos:line="43" pos:column="20"/></name></decl>;<pos:position pos:line="43" pos:column="21"/></decl_stmt>

      <expr_stmt><expr><name pos:line="45" pos:column="7">err<pos:position pos:line="45" pos:column="10"/></name> <operator pos:line="45" pos:column="11">=<pos:position pos:line="45" pos:column="12"/></operator> <call pos:line="45" pos:column="13">(<name><name pos:line="45" pos:column="14">data<pos:position pos:line="45" pos:column="18"/></name><operator pos:line="45" pos:column="18">-&gt;<pos:position pos:line="45" pos:column="23"/></operator><name pos:line="45" pos:column="20">set<pos:position pos:line="45" pos:column="23"/></name><operator pos:line="45" pos:column="23">.<pos:position pos:line="45" pos:column="24"/></operator><name pos:line="45" pos:column="24">ioctl_func<pos:position pos:line="45" pos:column="34"/></name></name>)<argument_list pos:line="45" pos:column="35">(<argument><expr><name pos:line="45" pos:column="36">data<pos:position pos:line="45" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="42">CURLIOCMD_RESTARTREAD<pos:position pos:line="45" pos:column="63"/></name></expr></argument>,
                                   <argument><expr><name><name pos:line="46" pos:column="36">data<pos:position pos:line="46" pos:column="40"/></name><operator pos:line="46" pos:column="40">-&gt;<pos:position pos:line="46" pos:column="45"/></operator><name pos:line="46" pos:column="42">set<pos:position pos:line="46" pos:column="45"/></name><operator pos:line="46" pos:column="45">.<pos:position pos:line="46" pos:column="46"/></operator><name pos:line="46" pos:column="46">ioctl_client<pos:position pos:line="46" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="60"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="47" pos:column="7">infof<pos:position pos:line="47" pos:column="12"/></name><argument_list pos:line="47" pos:column="12">(<argument><expr><name pos:line="47" pos:column="13">data<pos:position pos:line="47" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="19">"the ioctl callback returned %d\n"<pos:position pos:line="47" pos:column="53"/></literal></expr></argument>, <argument><expr><operator pos:line="47" pos:column="55">(<pos:position pos:line="47" pos:column="56"/></operator><name pos:line="47" pos:column="56">int<pos:position pos:line="47" pos:column="59"/></name><operator pos:line="47" pos:column="59">)<pos:position pos:line="47" pos:column="60"/></operator><name pos:line="47" pos:column="60">err<pos:position pos:line="47" pos:column="63"/></name></expr></argument>)<pos:position pos:line="47" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="65"/></expr_stmt>

      <if pos:line="49" pos:column="7">if<condition pos:line="49" pos:column="9">(<expr><name pos:line="49" pos:column="10">err<pos:position pos:line="49" pos:column="13"/></name></expr>)<pos:position pos:line="49" pos:column="14"/></condition><then pos:line="49" pos:column="14"> <block pos:line="49" pos:column="15">{
        <comment type="block" pos:line="50" pos:column="9">/* FIXME: convert to a human readable error message */</comment>
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">failf<pos:position pos:line="51" pos:column="14"/></name><argument_list pos:line="51" pos:column="14">(<argument><expr><name pos:line="51" pos:column="15">data<pos:position pos:line="51" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="21">"ioctl callback returned error %d"<pos:position pos:line="51" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="51" pos:column="57">(<pos:position pos:line="51" pos:column="58"/></operator><name pos:line="51" pos:column="58">int<pos:position pos:line="51" pos:column="61"/></name><operator pos:line="51" pos:column="61">)<pos:position pos:line="51" pos:column="62"/></operator><name pos:line="51" pos:column="62">err<pos:position pos:line="51" pos:column="65"/></name></expr></argument>)<pos:position pos:line="51" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="67"/></expr_stmt>
        <return pos:line="52" pos:column="9">return <expr><name pos:line="52" pos:column="16">CURLE_SEND_FAIL_REWIND<pos:position pos:line="52" pos:column="38"/></name></expr>;<pos:position pos:line="52" pos:column="39"/></return>
      }<pos:position pos:line="53" pos:column="8"/></block></then></if>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if></elseif>
    <else pos:line="55" pos:column="5">else <block pos:line="55" pos:column="10">{
      <comment type="block" pos:line="56" pos:column="7">/* If no CURLOPT_READFUNCTION is used, we know that we operate on a
         given FILE * stream and we can actually attempt to rewind that
         ourselves with fseek() */</comment>
      <if pos:line="59" pos:column="7">if<condition pos:line="59" pos:column="9">(<expr><name><name pos:line="59" pos:column="10">data<pos:position pos:line="59" pos:column="14"/></name><operator pos:line="59" pos:column="14">-&gt;<pos:position pos:line="59" pos:column="19"/></operator><name pos:line="59" pos:column="16">state<pos:position pos:line="59" pos:column="21"/></name><operator pos:line="59" pos:column="21">.<pos:position pos:line="59" pos:column="22"/></operator><name pos:line="59" pos:column="22">fread_func<pos:position pos:line="59" pos:column="32"/></name></name> <operator pos:line="59" pos:column="33">==<pos:position pos:line="59" pos:column="35"/></operator> <operator pos:line="59" pos:column="36">(<pos:position pos:line="59" pos:column="37"/></operator><name pos:line="59" pos:column="37">curl_read_callback<pos:position pos:line="59" pos:column="55"/></name><operator pos:line="59" pos:column="55">)<pos:position pos:line="59" pos:column="56"/></operator><name pos:line="59" pos:column="56">fread<pos:position pos:line="59" pos:column="61"/></name></expr>)<pos:position pos:line="59" pos:column="62"/></condition><then pos:line="59" pos:column="62"> <block pos:line="59" pos:column="63">{
        <if pos:line="60" pos:column="9">if<condition pos:line="60" pos:column="11">(<expr><operator pos:line="60" pos:column="12">-<pos:position pos:line="60" pos:column="13"/></operator><literal type="number" pos:line="60" pos:column="13">1<pos:position pos:line="60" pos:column="14"/></literal> <operator pos:line="60" pos:column="15">!=<pos:position pos:line="60" pos:column="17"/></operator> <call><name pos:line="60" pos:column="18">fseek<pos:position pos:line="60" pos:column="23"/></name><argument_list pos:line="60" pos:column="23">(<argument><expr><name><name pos:line="60" pos:column="24">data<pos:position pos:line="60" pos:column="28"/></name><operator pos:line="60" pos:column="28">-&gt;<pos:position pos:line="60" pos:column="33"/></operator><name pos:line="60" pos:column="30">state<pos:position pos:line="60" pos:column="35"/></name><operator pos:line="60" pos:column="35">.<pos:position pos:line="60" pos:column="36"/></operator><name pos:line="60" pos:column="36">in<pos:position pos:line="60" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="40">0<pos:position pos:line="60" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="43">SEEK_SET<pos:position pos:line="60" pos:column="51"/></name></expr></argument>)<pos:position pos:line="60" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="53"/></condition><then pos:line="60" pos:column="53">
          <comment type="block" pos:line="61" pos:column="11">/* successful rewind */</comment>
          <block type="pseudo"><return pos:line="62" pos:column="11">return <expr><name pos:line="62" pos:column="18">CURLE_OK<pos:position pos:line="62" pos:column="26"/></name></expr>;<pos:position pos:line="62" pos:column="27"/></return></block></then></if>
      }<pos:position pos:line="63" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="65" pos:column="7">/* no callback set or failure above, makes us fail at once */</comment>
      <expr_stmt><expr><call><name pos:line="66" pos:column="7">failf<pos:position pos:line="66" pos:column="12"/></name><argument_list pos:line="66" pos:column="12">(<argument><expr><name pos:line="66" pos:column="13">data<pos:position pos:line="66" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="19">"necessary data rewind wasn't possible"<pos:position pos:line="66" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="60"/></expr_stmt>
      <return pos:line="67" pos:column="7">return <expr><name pos:line="67" pos:column="14">CURLE_SEND_FAIL_REWIND<pos:position pos:line="67" pos:column="36"/></name></expr>;<pos:position pos:line="67" pos:column="37"/></return>
    }<pos:position pos:line="68" pos:column="6"/></block></else></if>
  }<pos:position pos:line="69" pos:column="4"/></block></else></if>
  <return pos:line="70" pos:column="3">return <expr><name pos:line="70" pos:column="10">CURLE_OK<pos:position pos:line="70" pos:column="18"/></name></expr>;<pos:position pos:line="70" pos:column="19"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
