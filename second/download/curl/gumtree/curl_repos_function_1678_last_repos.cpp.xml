<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1678_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">pop3_endofresp<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">connectdata<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">conn<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">line<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="66">size_t<pos:position pos:line="1" pos:column="72"/></name></type> <name pos:line="1" pos:column="73">len<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">resp<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">pop3_conn<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">pop3c<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><operator pos:line="4" pos:column="29">&amp;<pos:position pos:line="4" pos:column="34"/></operator><name><name pos:line="4" pos:column="30">conn<pos:position pos:line="4" pos:column="34"/></name><operator pos:line="4" pos:column="34">-&gt;<pos:position pos:line="4" pos:column="39"/></operator><name pos:line="4" pos:column="36">proto<pos:position pos:line="4" pos:column="41"/></name><operator pos:line="4" pos:column="41">.<pos:position pos:line="4" pos:column="42"/></operator><name pos:line="4" pos:column="42">pop3c<pos:position pos:line="4" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="48"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* Do we have an error response? */</comment>
  <if pos:line="7" pos:column="3">if<condition pos:line="7" pos:column="5">(<expr><name pos:line="7" pos:column="6">len<pos:position pos:line="7" pos:column="9"/></name> <operator pos:line="7" pos:column="10">&gt;=<pos:position pos:line="7" pos:column="15"/></operator> <literal type="number" pos:line="7" pos:column="13">4<pos:position pos:line="7" pos:column="14"/></literal> <operator pos:line="7" pos:column="15">&amp;&amp;<pos:position pos:line="7" pos:column="25"/></operator> <operator pos:line="7" pos:column="18">!<pos:position pos:line="7" pos:column="19"/></operator><call><name pos:line="7" pos:column="19">memcmp<pos:position pos:line="7" pos:column="25"/></name><argument_list pos:line="7" pos:column="25">(<argument><expr><literal type="string" pos:line="7" pos:column="26">"-ERR"<pos:position pos:line="7" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="34">line<pos:position pos:line="7" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="40">4<pos:position pos:line="7" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="43"/></condition><then pos:line="7" pos:column="43"> <block pos:line="7" pos:column="44">{
    <expr_stmt><expr><operator pos:line="8" pos:column="5">*<pos:position pos:line="8" pos:column="6"/></operator><name pos:line="8" pos:column="6">resp<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">=<pos:position pos:line="8" pos:column="12"/></operator> <literal type="char" pos:line="8" pos:column="13">'-'<pos:position pos:line="8" pos:column="16"/></literal></expr>;<pos:position pos:line="8" pos:column="17"/></expr_stmt>

    <return pos:line="10" pos:column="5">return <expr><name pos:line="10" pos:column="12">TRUE<pos:position pos:line="10" pos:column="16"/></name></expr>;<pos:position pos:line="10" pos:column="17"/></return>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="13" pos:column="3">/* Are we processing CAPA command responses? */</comment>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name><name pos:line="14" pos:column="6">pop3c<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">-&gt;<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="13">state<pos:position pos:line="14" pos:column="18"/></name></name> <operator pos:line="14" pos:column="19">==<pos:position pos:line="14" pos:column="21"/></operator> <name pos:line="14" pos:column="22">POP3_CAPA<pos:position pos:line="14" pos:column="31"/></name></expr>)<pos:position pos:line="14" pos:column="32"/></condition><then pos:line="14" pos:column="32"> <block pos:line="14" pos:column="33">{
    <comment type="block" pos:line="15" pos:column="5">/* Do we have the terminating line? */</comment>
    <if pos:line="16" pos:column="5">if<condition pos:line="16" pos:column="7">(<expr><name pos:line="16" pos:column="8">len<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">&gt;=<pos:position pos:line="16" pos:column="17"/></operator> <literal type="number" pos:line="16" pos:column="15">1<pos:position pos:line="16" pos:column="16"/></literal> <operator pos:line="16" pos:column="17">&amp;&amp;<pos:position pos:line="16" pos:column="27"/></operator> <operator pos:line="16" pos:column="20">!<pos:position pos:line="16" pos:column="21"/></operator><call><name pos:line="16" pos:column="21">memcmp<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">line<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="34">"."<pos:position pos:line="16" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="39">1<pos:position pos:line="16" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="42"/></condition><then pos:line="16" pos:column="42">
      <comment type="block" pos:line="17" pos:column="7">/* Treat the response as a success */</comment>
      <block type="pseudo"><expr_stmt><expr><operator pos:line="18" pos:column="7">*<pos:position pos:line="18" pos:column="8"/></operator><name pos:line="18" pos:column="8">resp<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <literal type="char" pos:line="18" pos:column="15">'+'<pos:position pos:line="18" pos:column="18"/></literal></expr>;<pos:position pos:line="18" pos:column="19"/></expr_stmt></block></then>
    <else pos:line="19" pos:column="5">else
      <comment type="block" pos:line="20" pos:column="7">/* Treat the response as an untagged continuation */</comment>
      <block type="pseudo"><expr_stmt><expr><operator pos:line="21" pos:column="7">*<pos:position pos:line="21" pos:column="8"/></operator><name pos:line="21" pos:column="8">resp<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <literal type="char" pos:line="21" pos:column="15">'*'<pos:position pos:line="21" pos:column="18"/></literal></expr>;<pos:position pos:line="21" pos:column="19"/></expr_stmt></block></else></if>

    <return pos:line="23" pos:column="5">return <expr><name pos:line="23" pos:column="12">TRUE<pos:position pos:line="23" pos:column="16"/></name></expr>;<pos:position pos:line="23" pos:column="17"/></return>
  }<pos:position pos:line="24" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="26" pos:column="3">/* Do we have a success response? */</comment>
  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">(<expr><name pos:line="27" pos:column="6">len<pos:position pos:line="27" pos:column="9"/></name> <operator pos:line="27" pos:column="10">&gt;=<pos:position pos:line="27" pos:column="15"/></operator> <literal type="number" pos:line="27" pos:column="13">3<pos:position pos:line="27" pos:column="14"/></literal> <operator pos:line="27" pos:column="15">&amp;&amp;<pos:position pos:line="27" pos:column="25"/></operator> <operator pos:line="27" pos:column="18">!<pos:position pos:line="27" pos:column="19"/></operator><call><name pos:line="27" pos:column="19">memcmp<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><literal type="string" pos:line="27" pos:column="26">"+OK"<pos:position pos:line="27" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="33">line<pos:position pos:line="27" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="39">3<pos:position pos:line="27" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="42"/></condition><then pos:line="27" pos:column="42"> <block pos:line="27" pos:column="43">{
    <expr_stmt><expr><operator pos:line="28" pos:column="5">*<pos:position pos:line="28" pos:column="6"/></operator><name pos:line="28" pos:column="6">resp<pos:position pos:line="28" pos:column="10"/></name> <operator pos:line="28" pos:column="11">=<pos:position pos:line="28" pos:column="12"/></operator> <literal type="char" pos:line="28" pos:column="13">'+'<pos:position pos:line="28" pos:column="16"/></literal></expr>;<pos:position pos:line="28" pos:column="17"/></expr_stmt>

    <return pos:line="30" pos:column="5">return <expr><name pos:line="30" pos:column="12">TRUE<pos:position pos:line="30" pos:column="16"/></name></expr>;<pos:position pos:line="30" pos:column="17"/></return>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="33" pos:column="3">/* Do we have a continuation response? */</comment>
  <if pos:line="34" pos:column="3">if<condition pos:line="34" pos:column="5">(<expr><name pos:line="34" pos:column="6">len<pos:position pos:line="34" pos:column="9"/></name> <operator pos:line="34" pos:column="10">&gt;=<pos:position pos:line="34" pos:column="15"/></operator> <literal type="number" pos:line="34" pos:column="13">1<pos:position pos:line="34" pos:column="14"/></literal> <operator pos:line="34" pos:column="15">&amp;&amp;<pos:position pos:line="34" pos:column="25"/></operator> <operator pos:line="34" pos:column="18">!<pos:position pos:line="34" pos:column="19"/></operator><call><name pos:line="34" pos:column="19">memcmp<pos:position pos:line="34" pos:column="25"/></name><argument_list pos:line="34" pos:column="25">(<argument><expr><literal type="string" pos:line="34" pos:column="26">"+"<pos:position pos:line="34" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="31">line<pos:position pos:line="34" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="37">1<pos:position pos:line="34" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="40"/></condition><then pos:line="34" pos:column="40"> <block pos:line="34" pos:column="41">{
    <expr_stmt><expr><operator pos:line="35" pos:column="5">*<pos:position pos:line="35" pos:column="6"/></operator><name pos:line="35" pos:column="6">resp<pos:position pos:line="35" pos:column="10"/></name> <operator pos:line="35" pos:column="11">=<pos:position pos:line="35" pos:column="12"/></operator> <literal type="char" pos:line="35" pos:column="13">'*'<pos:position pos:line="35" pos:column="16"/></literal></expr>;<pos:position pos:line="35" pos:column="17"/></expr_stmt>

    <return pos:line="37" pos:column="5">return <expr><name pos:line="37" pos:column="12">TRUE<pos:position pos:line="37" pos:column="16"/></name></expr>;<pos:position pos:line="37" pos:column="17"/></return>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if>

  <return pos:line="40" pos:column="3">return <expr><name pos:line="40" pos:column="10">FALSE<pos:position pos:line="40" pos:column="15"/></name></expr>;<pos:position pos:line="40" pos:column="16"/></return> <comment type="block" pos:line="40" pos:column="17">/* Nothing for us */</comment>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
