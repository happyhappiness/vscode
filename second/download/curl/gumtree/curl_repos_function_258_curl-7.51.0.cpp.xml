<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_258_curl-7.51.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">init_locks<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">void<pos:position pos:line="1" pos:column="28"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">i<pos:position pos:line="3" pos:column="8"/></name></decl>;<pos:position pos:line="3" pos:column="9"/></decl_stmt>

  <expr_stmt><expr><name pos:line="5" pos:column="3">lockarray<pos:position pos:line="5" pos:column="12"/></name><operator pos:line="5" pos:column="12">=<pos:position pos:line="5" pos:column="13"/></operator><operator pos:line="5" pos:column="13">(<pos:position pos:line="5" pos:column="14"/></operator><name pos:line="5" pos:column="14">pthread_mutex_t<pos:position pos:line="5" pos:column="29"/></name> <operator pos:line="5" pos:column="30">*<pos:position pos:line="5" pos:column="31"/></operator><operator pos:line="5" pos:column="31">)<pos:position pos:line="5" pos:column="32"/></operator><call><name pos:line="5" pos:column="32">OPENSSL_malloc<pos:position pos:line="5" pos:column="46"/></name><argument_list pos:line="5" pos:column="46">(<argument><expr><call><name pos:line="5" pos:column="47">CRYPTO_num_locks<pos:position pos:line="5" pos:column="63"/></name><argument_list pos:line="5" pos:column="63">()<pos:position pos:line="5" pos:column="65"/></argument_list></call> <operator pos:line="5" pos:column="66">*<pos:position pos:line="5" pos:column="67"/></operator>
                                            <sizeof pos:line="6" pos:column="45">sizeof<argument_list pos:line="6" pos:column="51">(<argument><expr><name pos:line="6" pos:column="52">pthread_mutex_t<pos:position pos:line="6" pos:column="67"/></name></expr></argument>)<pos:position pos:line="6" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="70"/></expr_stmt>
  <for pos:line="7" pos:column="3">for<control pos:line="7" pos:column="6">(<init><expr><name pos:line="7" pos:column="7">i<pos:position pos:line="7" pos:column="8"/></name><operator pos:line="7" pos:column="8">=<pos:position pos:line="7" pos:column="9"/></operator><literal type="number" pos:line="7" pos:column="9">0<pos:position pos:line="7" pos:column="10"/></literal></expr>;<pos:position pos:line="7" pos:column="11"/></init> <condition><expr><name pos:line="7" pos:column="12">i<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">&lt;<pos:position pos:line="7" pos:column="17"/></operator><call><name pos:line="7" pos:column="14">CRYPTO_num_locks<pos:position pos:line="7" pos:column="30"/></name><argument_list pos:line="7" pos:column="30">()<pos:position pos:line="7" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="33"/></condition> <incr><expr><name pos:line="7" pos:column="34">i<pos:position pos:line="7" pos:column="35"/></name><operator pos:line="7" pos:column="35">++<pos:position pos:line="7" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="7" pos:column="38"/></control> <block pos:line="7" pos:column="39">{
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">pthread_mutex_init<pos:position pos:line="8" pos:column="23"/></name><argument_list pos:line="8" pos:column="23">(<argument><expr><operator pos:line="8" pos:column="24">&amp;<pos:position pos:line="8" pos:column="29"/></operator><operator pos:line="8" pos:column="25">(<pos:position pos:line="8" pos:column="26"/></operator><name><name pos:line="8" pos:column="26">lockarray<pos:position pos:line="8" pos:column="35"/></name><index pos:line="8" pos:column="35">[<expr><name pos:line="8" pos:column="36">i<pos:position pos:line="8" pos:column="37"/></name></expr>]<pos:position pos:line="8" pos:column="38"/></index></name><operator pos:line="8" pos:column="38">)<pos:position pos:line="8" pos:column="39"/></operator></expr></argument>, <argument><expr><name pos:line="8" pos:column="41">NULL<pos:position pos:line="8" pos:column="45"/></name></expr></argument>)<pos:position pos:line="8" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="47"/></expr_stmt>
  }<pos:position pos:line="9" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="11" pos:column="3">CRYPTO_set_id_callback<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><operator pos:line="11" pos:column="26">(<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="27">unsigned<pos:position pos:line="11" pos:column="35"/></name> <call><call><name pos:line="11" pos:column="36">long<pos:position pos:line="11" pos:column="40"/></name> <argument_list pos:line="11" pos:column="41">(<argument><expr><operator pos:line="11" pos:column="42">*<pos:position pos:line="11" pos:column="43"/></operator></expr></argument>)<pos:position pos:line="11" pos:column="44"/></argument_list></call><argument_list pos:line="11" pos:column="44">()<pos:position pos:line="11" pos:column="46"/></argument_list></call><operator pos:line="11" pos:column="46">)<pos:position pos:line="11" pos:column="47"/></operator><name pos:line="11" pos:column="47">thread_id<pos:position pos:line="11" pos:column="56"/></name></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="58"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">CRYPTO_set_locking_callback<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><operator pos:line="12" pos:column="31">(<pos:position pos:line="12" pos:column="32"/></operator><call><call><name pos:line="12" pos:column="32">void<pos:position pos:line="12" pos:column="36"/></name> <argument_list pos:line="12" pos:column="37">(<argument><expr><operator pos:line="12" pos:column="38">*<pos:position pos:line="12" pos:column="39"/></operator></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call><argument_list pos:line="12" pos:column="40">()<pos:position pos:line="12" pos:column="42"/></argument_list></call><operator pos:line="12" pos:column="42">)<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="43">lock_callback<pos:position pos:line="12" pos:column="56"/></name></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="58"/></expr_stmt>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
