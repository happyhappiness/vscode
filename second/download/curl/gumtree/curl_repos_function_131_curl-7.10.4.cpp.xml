<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_131_curl-7.10.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">int<pos:position pos:line="2" pos:column="4"/></name></type> <name pos:line="2" pos:column="5">cert_stuff<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name><name pos:line="2" pos:column="16">struct<pos:position pos:line="2" pos:column="22"/></name> <name pos:line="2" pos:column="23">connectdata<pos:position pos:line="2" pos:column="34"/></name></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">conn<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>,
               <parameter><decl><type><name pos:line="3" pos:column="16">char<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">cert_file<pos:position pos:line="3" pos:column="31"/></name></decl></parameter>,
               <parameter><decl><type><specifier pos:line="4" pos:column="16">const<pos:position pos:line="4" pos:column="21"/></specifier> <name pos:line="4" pos:column="22">char<pos:position pos:line="4" pos:column="26"/></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="28">cert_type<pos:position pos:line="4" pos:column="37"/></name></decl></parameter>,
               <parameter><decl><type><name pos:line="5" pos:column="16">char<pos:position pos:line="5" pos:column="20"/></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">key_file<pos:position pos:line="5" pos:column="30"/></name></decl></parameter>,
               <parameter><decl><type><specifier pos:line="6" pos:column="16">const<pos:position pos:line="6" pos:column="21"/></specifier> <name pos:line="6" pos:column="22">char<pos:position pos:line="6" pos:column="26"/></name> <modifier pos:line="6" pos:column="27">*<pos:position pos:line="6" pos:column="28"/></modifier></type><name pos:line="6" pos:column="28">key_type<pos:position pos:line="6" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="37"/></parameter_list>
<block pos:line="7" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">SessionHandle<pos:position pos:line="8" pos:column="23"/></name></name> <modifier pos:line="8" pos:column="24">*<pos:position pos:line="8" pos:column="25"/></modifier></type><name pos:line="8" pos:column="25">data<pos:position pos:line="8" pos:column="29"/></name> <init pos:line="8" pos:column="30">= <expr><name><name pos:line="8" pos:column="32">conn<pos:position pos:line="8" pos:column="36"/></name><operator pos:line="8" pos:column="36">-&gt;<pos:position pos:line="8" pos:column="41"/></operator><name pos:line="8" pos:column="38">data<pos:position pos:line="8" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">file_type<pos:position pos:line="9" pos:column="16"/></name></decl>;<pos:position pos:line="9" pos:column="17"/></decl_stmt>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">cert_file<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">!=<pos:position pos:line="11" pos:column="19"/></operator> <name pos:line="11" pos:column="20">NULL<pos:position pos:line="11" pos:column="24"/></name></expr>)<pos:position pos:line="11" pos:column="25"/></condition><then pos:line="11" pos:column="25"> <block pos:line="11" pos:column="26">{
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">SSL<pos:position pos:line="12" pos:column="8"/></name> <modifier pos:line="12" pos:column="9">*<pos:position pos:line="12" pos:column="10"/></modifier></type><name pos:line="12" pos:column="10">ssl<pos:position pos:line="12" pos:column="13"/></name></decl>;<pos:position pos:line="12" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">X509<pos:position pos:line="13" pos:column="9"/></name> <modifier pos:line="13" pos:column="10">*<pos:position pos:line="13" pos:column="11"/></modifier></type><name pos:line="13" pos:column="11">x509<pos:position pos:line="13" pos:column="15"/></name></decl>;<pos:position pos:line="13" pos:column="16"/></decl_stmt>

    <if pos:line="15" pos:column="5">if<condition pos:line="15" pos:column="7">(<expr><name><name pos:line="15" pos:column="8">data<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">-&gt;<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="14">set<pos:position pos:line="15" pos:column="17"/></name><operator pos:line="15" pos:column="17">.<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="18">key_passwd<pos:position pos:line="15" pos:column="28"/></name></name></expr>)<pos:position pos:line="15" pos:column="29"/></condition><then pos:line="15" pos:column="29"> <block pos:line="15" pos:column="30">{
<cpp:ifndef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifndef<pos:position pos:line="16" pos:column="8"/></cpp:directive> <name pos:line="16" pos:column="9">HAVE_USERDATA_IN_PWD_CALLBACK<pos:position pos:line="16" pos:column="38"/></name></cpp:ifndef>
      <comment type="block" pos:line="17" pos:column="7">/*
       * If password has been given, we store that in the global
       * area (*shudder*) for a while:
       */</comment>
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">strcpy<pos:position pos:line="21" pos:column="13"/></name><argument_list pos:line="21" pos:column="13">(<argument><expr><name pos:line="21" pos:column="14">global_passwd<pos:position pos:line="21" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="29">data<pos:position pos:line="21" pos:column="33"/></name><operator pos:line="21" pos:column="33">-&gt;<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="35">set<pos:position pos:line="21" pos:column="38"/></name><operator pos:line="21" pos:column="38">.<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="39">key_passwd<pos:position pos:line="21" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="51"/></expr_stmt>
<cpp:else pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">else<pos:position pos:line="22" pos:column="6"/></cpp:directive></cpp:else>
      <comment type="block" pos:line="23" pos:column="7">/*
       * We set the password in the callback userdata
       */</comment>
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">SSL_CTX_set_default_passwd_cb_userdata<pos:position pos:line="26" pos:column="45"/></name><argument_list pos:line="26" pos:column="45">(<argument><expr><name><name pos:line="26" pos:column="46">conn<pos:position pos:line="26" pos:column="50"/></name><operator pos:line="26" pos:column="50">-&gt;<pos:position pos:line="26" pos:column="55"/></operator><name pos:line="26" pos:column="52">ssl<pos:position pos:line="26" pos:column="55"/></name><operator pos:line="26" pos:column="55">.<pos:position pos:line="26" pos:column="56"/></operator><name pos:line="26" pos:column="56">ctx<pos:position pos:line="26" pos:column="59"/></name></name></expr></argument>,
                                             <argument><expr><name><name pos:line="27" pos:column="46">data<pos:position pos:line="27" pos:column="50"/></name><operator pos:line="27" pos:column="50">-&gt;<pos:position pos:line="27" pos:column="55"/></operator><name pos:line="27" pos:column="52">set<pos:position pos:line="27" pos:column="55"/></name><operator pos:line="27" pos:column="55">.<pos:position pos:line="27" pos:column="56"/></operator><name pos:line="27" pos:column="56">key_passwd<pos:position pos:line="27" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="68"/></expr_stmt>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>
      <comment type="block" pos:line="29" pos:column="7">/* Set passwd callback: */</comment>
      <expr_stmt><expr><call><name pos:line="30" pos:column="7">SSL_CTX_set_default_passwd_cb<pos:position pos:line="30" pos:column="36"/></name><argument_list pos:line="30" pos:column="36">(<argument><expr><name><name pos:line="30" pos:column="37">conn<pos:position pos:line="30" pos:column="41"/></name><operator pos:line="30" pos:column="41">-&gt;<pos:position pos:line="30" pos:column="46"/></operator><name pos:line="30" pos:column="43">ssl<pos:position pos:line="30" pos:column="46"/></name><operator pos:line="30" pos:column="46">.<pos:position pos:line="30" pos:column="47"/></operator><name pos:line="30" pos:column="47">ctx<pos:position pos:line="30" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="52">passwd_callback<pos:position pos:line="30" pos:column="67"/></name></expr></argument>)<pos:position pos:line="30" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="69"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="33" pos:column="5">file_type<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">=<pos:position pos:line="33" pos:column="16"/></operator> <call><name pos:line="33" pos:column="17">do_file_type<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><name pos:line="33" pos:column="30">cert_type<pos:position pos:line="33" pos:column="39"/></name></expr></argument>)<pos:position pos:line="33" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="41"/></expr_stmt>

    <switch pos:line="35" pos:column="5">switch<condition pos:line="35" pos:column="11">(<expr><name pos:line="35" pos:column="12">file_type<pos:position pos:line="35" pos:column="21"/></name></expr>)<pos:position pos:line="35" pos:column="22"/></condition> <block pos:line="35" pos:column="23">{
    <case pos:line="36" pos:column="5">case <expr><name pos:line="36" pos:column="10">SSL_FILETYPE_PEM<pos:position pos:line="36" pos:column="26"/></name></expr>:<pos:position pos:line="36" pos:column="27"/></case>
      <comment type="block" pos:line="37" pos:column="7">/* SSL_CTX_use_certificate_chain_file() only works on PEM files */</comment>
      <if pos:line="38" pos:column="7">if <condition pos:line="38" pos:column="10">(<expr><call><name pos:line="38" pos:column="11">SSL_CTX_use_certificate_chain_file<pos:position pos:line="38" pos:column="45"/></name><argument_list pos:line="38" pos:column="45">(<argument><expr><name><name pos:line="38" pos:column="46">conn<pos:position pos:line="38" pos:column="50"/></name><operator pos:line="38" pos:column="50">-&gt;<pos:position pos:line="38" pos:column="55"/></operator><name pos:line="38" pos:column="52">ssl<pos:position pos:line="38" pos:column="55"/></name><operator pos:line="38" pos:column="55">.<pos:position pos:line="38" pos:column="56"/></operator><name pos:line="38" pos:column="56">ctx<pos:position pos:line="38" pos:column="59"/></name></name></expr></argument>,
                                             <argument><expr><name pos:line="39" pos:column="46">cert_file<pos:position pos:line="39" pos:column="55"/></name></expr></argument>)<pos:position pos:line="39" pos:column="56"/></argument_list></call> <operator pos:line="39" pos:column="57">!=<pos:position pos:line="39" pos:column="59"/></operator> <literal type="number" pos:line="39" pos:column="60">1<pos:position pos:line="39" pos:column="61"/></literal></expr>)<pos:position pos:line="39" pos:column="62"/></condition><then pos:line="39" pos:column="62"> <block pos:line="39" pos:column="63">{
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">failf<pos:position pos:line="40" pos:column="14"/></name><argument_list pos:line="40" pos:column="14">(<argument><expr><name pos:line="40" pos:column="15">data<pos:position pos:line="40" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="21">"unable to set certificate file (wrong password?)"<pos:position pos:line="40" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="73"/></expr_stmt>
        <return pos:line="41" pos:column="9">return <expr><literal type="number" pos:line="41" pos:column="16">0<pos:position pos:line="41" pos:column="17"/></literal></expr>;<pos:position pos:line="41" pos:column="18"/></return>
      }<pos:position pos:line="42" pos:column="8"/></block></then></if>
      <break pos:line="43" pos:column="7">break;<pos:position pos:line="43" pos:column="13"/></break>

    <case pos:line="45" pos:column="5">case <expr><name pos:line="45" pos:column="10">SSL_FILETYPE_ASN1<pos:position pos:line="45" pos:column="27"/></name></expr>:<pos:position pos:line="45" pos:column="28"/></case>
      <comment type="block" pos:line="46" pos:column="7">/* SSL_CTX_use_certificate_file() works with either PEM or ASN1, but
         we use the case above for PEM so this can only be performed with
         ASN1 files. */</comment>
      <if pos:line="49" pos:column="7">if <condition pos:line="49" pos:column="10">(<expr><call><name pos:line="49" pos:column="11">SSL_CTX_use_certificate_file<pos:position pos:line="49" pos:column="39"/></name><argument_list pos:line="49" pos:column="39">(<argument><expr><name><name pos:line="49" pos:column="40">conn<pos:position pos:line="49" pos:column="44"/></name><operator pos:line="49" pos:column="44">-&gt;<pos:position pos:line="49" pos:column="49"/></operator><name pos:line="49" pos:column="46">ssl<pos:position pos:line="49" pos:column="49"/></name><operator pos:line="49" pos:column="49">.<pos:position pos:line="49" pos:column="50"/></operator><name pos:line="49" pos:column="50">ctx<pos:position pos:line="49" pos:column="53"/></name></name></expr></argument>,
                                       <argument><expr><name pos:line="50" pos:column="40">cert_file<pos:position pos:line="50" pos:column="49"/></name></expr></argument>,
                                       <argument><expr><name pos:line="51" pos:column="40">file_type<pos:position pos:line="51" pos:column="49"/></name></expr></argument>)<pos:position pos:line="51" pos:column="50"/></argument_list></call> <operator pos:line="51" pos:column="51">!=<pos:position pos:line="51" pos:column="53"/></operator> <literal type="number" pos:line="51" pos:column="54">1<pos:position pos:line="51" pos:column="55"/></literal></expr>)<pos:position pos:line="51" pos:column="56"/></condition><then pos:line="51" pos:column="56"> <block pos:line="51" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">failf<pos:position pos:line="52" pos:column="14"/></name><argument_list pos:line="52" pos:column="14">(<argument><expr><name pos:line="52" pos:column="15">data<pos:position pos:line="52" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="21">"unable to set certificate file (wrong password?)"<pos:position pos:line="52" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="73"/></expr_stmt>
        <return pos:line="53" pos:column="9">return <expr><literal type="number" pos:line="53" pos:column="16">0<pos:position pos:line="53" pos:column="17"/></literal></expr>;<pos:position pos:line="53" pos:column="18"/></return>
      }<pos:position pos:line="54" pos:column="8"/></block></then></if>
      <break pos:line="55" pos:column="7">break;<pos:position pos:line="55" pos:column="13"/></break>
    <case pos:line="56" pos:column="5">case <expr><name pos:line="56" pos:column="10">SSL_FILETYPE_ENGINE<pos:position pos:line="56" pos:column="29"/></name></expr>:<pos:position pos:line="56" pos:column="30"/></case>
      <expr_stmt><expr><call><name pos:line="57" pos:column="7">failf<pos:position pos:line="57" pos:column="12"/></name><argument_list pos:line="57" pos:column="12">(<argument><expr><name pos:line="57" pos:column="13">data<pos:position pos:line="57" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="19">"file type ENG for certificate not implemented"<pos:position pos:line="57" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="68"/></expr_stmt>
      <return pos:line="58" pos:column="7">return <expr><literal type="number" pos:line="58" pos:column="14">0<pos:position pos:line="58" pos:column="15"/></literal></expr>;<pos:position pos:line="58" pos:column="16"/></return>

    <default pos:line="60" pos:column="5">default:<pos:position pos:line="60" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="61" pos:column="7">failf<pos:position pos:line="61" pos:column="12"/></name><argument_list pos:line="61" pos:column="12">(<argument><expr><name pos:line="61" pos:column="13">data<pos:position pos:line="61" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="19">"not supported file type '%s' for certificate"<pos:position pos:line="61" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="67">cert_type<pos:position pos:line="61" pos:column="76"/></name></expr></argument>)<pos:position pos:line="61" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="78"/></expr_stmt>
      <return pos:line="62" pos:column="7">return <expr><literal type="number" pos:line="62" pos:column="14">0<pos:position pos:line="62" pos:column="15"/></literal></expr>;<pos:position pos:line="62" pos:column="16"/></return>
    }<pos:position pos:line="63" pos:column="6"/></block></switch>

    <expr_stmt><expr><name pos:line="65" pos:column="5">file_type<pos:position pos:line="65" pos:column="14"/></name> <operator pos:line="65" pos:column="15">=<pos:position pos:line="65" pos:column="16"/></operator> <call><name pos:line="65" pos:column="17">do_file_type<pos:position pos:line="65" pos:column="29"/></name><argument_list pos:line="65" pos:column="29">(<argument><expr><name pos:line="65" pos:column="30">key_type<pos:position pos:line="65" pos:column="38"/></name></expr></argument>)<pos:position pos:line="65" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="40"/></expr_stmt>

    <switch pos:line="67" pos:column="5">switch<condition pos:line="67" pos:column="11">(<expr><name pos:line="67" pos:column="12">file_type<pos:position pos:line="67" pos:column="21"/></name></expr>)<pos:position pos:line="67" pos:column="22"/></condition> <block pos:line="67" pos:column="23">{
    <case pos:line="68" pos:column="5">case <expr><name pos:line="68" pos:column="10">SSL_FILETYPE_PEM<pos:position pos:line="68" pos:column="26"/></name></expr>:<pos:position pos:line="68" pos:column="27"/></case>
      <if pos:line="69" pos:column="7">if <condition pos:line="69" pos:column="10">(<expr><name pos:line="69" pos:column="11">key_file<pos:position pos:line="69" pos:column="19"/></name> <operator pos:line="69" pos:column="20">==<pos:position pos:line="69" pos:column="22"/></operator> <name pos:line="69" pos:column="23">NULL<pos:position pos:line="69" pos:column="27"/></name></expr>)<pos:position pos:line="69" pos:column="28"/></condition><then pos:line="69" pos:column="28">
        <comment type="block" pos:line="70" pos:column="9">/* cert &amp; key can only be in PEM case in the same file */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="71" pos:column="9">key_file<pos:position pos:line="71" pos:column="17"/></name><operator pos:line="71" pos:column="17">=<pos:position pos:line="71" pos:column="18"/></operator><name pos:line="71" pos:column="18">cert_file<pos:position pos:line="71" pos:column="27"/></name></expr>;<pos:position pos:line="71" pos:column="28"/></expr_stmt></block></then></if>
    <case pos:line="72" pos:column="5">case <expr><name pos:line="72" pos:column="10">SSL_FILETYPE_ASN1<pos:position pos:line="72" pos:column="27"/></name></expr>:<pos:position pos:line="72" pos:column="28"/></case>
      <if pos:line="73" pos:column="7">if <condition pos:line="73" pos:column="10">(<expr><call><name pos:line="73" pos:column="11">SSL_CTX_use_PrivateKey_file<pos:position pos:line="73" pos:column="38"/></name><argument_list pos:line="73" pos:column="38">(<argument><expr><name><name pos:line="73" pos:column="39">conn<pos:position pos:line="73" pos:column="43"/></name><operator pos:line="73" pos:column="43">-&gt;<pos:position pos:line="73" pos:column="48"/></operator><name pos:line="73" pos:column="45">ssl<pos:position pos:line="73" pos:column="48"/></name><operator pos:line="73" pos:column="48">.<pos:position pos:line="73" pos:column="49"/></operator><name pos:line="73" pos:column="49">ctx<pos:position pos:line="73" pos:column="52"/></name></name></expr></argument>,
                                      <argument><expr><name pos:line="74" pos:column="39">key_file<pos:position pos:line="74" pos:column="47"/></name></expr></argument>,
                                      <argument><expr><name pos:line="75" pos:column="39">file_type<pos:position pos:line="75" pos:column="48"/></name></expr></argument>)<pos:position pos:line="75" pos:column="49"/></argument_list></call> <operator pos:line="75" pos:column="50">!=<pos:position pos:line="75" pos:column="52"/></operator> <literal type="number" pos:line="75" pos:column="53">1<pos:position pos:line="75" pos:column="54"/></literal></expr>)<pos:position pos:line="75" pos:column="55"/></condition><then pos:line="75" pos:column="55"> <block pos:line="75" pos:column="56">{
        <expr_stmt><expr><call><name pos:line="76" pos:column="9">failf<pos:position pos:line="76" pos:column="14"/></name><argument_list pos:line="76" pos:column="14">(<argument><expr><name pos:line="76" pos:column="15">data<pos:position pos:line="76" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="21">"unable to set private key file: '%s' type %s\n"<pos:position pos:line="76" pos:column="69"/></literal></expr></argument>,
              <argument><expr><name pos:line="77" pos:column="15">key_file<pos:position pos:line="77" pos:column="23"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="77" pos:column="25">key_type<pos:position pos:line="77" pos:column="33"/></name></expr>?<pos:position pos:line="77" pos:column="34"/></condition><then><expr><name pos:line="77" pos:column="34">key_type<pos:position pos:line="77" pos:column="42"/></name></expr></then><else pos:line="77" pos:column="42">:<expr><literal type="string" pos:line="77" pos:column="43">"PEM"<pos:position pos:line="77" pos:column="48"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="77" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="50"/></expr_stmt>
        <return pos:line="78" pos:column="9">return <expr><literal type="number" pos:line="78" pos:column="16">0<pos:position pos:line="78" pos:column="17"/></literal></expr>;<pos:position pos:line="78" pos:column="18"/></return>
      }<pos:position pos:line="79" pos:column="8"/></block></then></if>
      <break pos:line="80" pos:column="7">break;<pos:position pos:line="80" pos:column="13"/></break>
    <case pos:line="81" pos:column="5">case <expr><name pos:line="81" pos:column="10">SSL_FILETYPE_ENGINE<pos:position pos:line="81" pos:column="29"/></name></expr>:<pos:position pos:line="81" pos:column="30"/></case>
<cpp:ifdef pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">ifdef<pos:position pos:line="82" pos:column="7"/></cpp:directive> <name pos:line="82" pos:column="8">HAVE_OPENSSL_ENGINE_H<pos:position pos:line="82" pos:column="29"/></name></cpp:ifdef>
      <block pos:line="83" pos:column="7">{                         <comment type="block" pos:line="83" pos:column="33">/* XXXX still needs some work */</comment>
        <decl_stmt><decl><type><name pos:line="84" pos:column="9">EVP_PKEY<pos:position pos:line="84" pos:column="17"/></name> <modifier pos:line="84" pos:column="18">*<pos:position pos:line="84" pos:column="19"/></modifier></type><name pos:line="84" pos:column="19">priv_key<pos:position pos:line="84" pos:column="27"/></name> <init pos:line="84" pos:column="28">= <expr><name pos:line="84" pos:column="30">NULL<pos:position pos:line="84" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="84" pos:column="35"/></decl_stmt>
        <if pos:line="85" pos:column="9">if <condition pos:line="85" pos:column="12">(<expr><name pos:line="85" pos:column="13">conn<pos:position pos:line="85" pos:column="17"/></name> <operator pos:line="85" pos:column="18">&amp;&amp;<pos:position pos:line="85" pos:column="28"/></operator> <name><name pos:line="85" pos:column="21">conn<pos:position pos:line="85" pos:column="25"/></name><operator pos:line="85" pos:column="25">-&gt;<pos:position pos:line="85" pos:column="30"/></operator><name pos:line="85" pos:column="27">data<pos:position pos:line="85" pos:column="31"/></name></name> <operator pos:line="85" pos:column="32">&amp;&amp;<pos:position pos:line="85" pos:column="42"/></operator> <name><name pos:line="85" pos:column="35">conn<pos:position pos:line="85" pos:column="39"/></name><operator pos:line="85" pos:column="39">-&gt;<pos:position pos:line="85" pos:column="44"/></operator><name pos:line="85" pos:column="41">data<pos:position pos:line="85" pos:column="45"/></name><operator pos:line="85" pos:column="45">-&gt;<pos:position pos:line="85" pos:column="50"/></operator><name pos:line="85" pos:column="47">engine<pos:position pos:line="85" pos:column="53"/></name></name></expr>)<pos:position pos:line="85" pos:column="54"/></condition><then pos:line="85" pos:column="54"> <block pos:line="85" pos:column="55">{
<cpp:ifdef pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">ifdef<pos:position pos:line="86" pos:column="7"/></cpp:directive> <name pos:line="86" pos:column="8">HAVE_ENGINE_LOAD_FOUR_ARGS<pos:position pos:line="86" pos:column="34"/></name></cpp:ifdef>
          <decl_stmt><decl><type><name pos:line="87" pos:column="11">UI_METHOD<pos:position pos:line="87" pos:column="20"/></name> <modifier pos:line="87" pos:column="21">*<pos:position pos:line="87" pos:column="22"/></modifier></type><name pos:line="87" pos:column="22">ui_method<pos:position pos:line="87" pos:column="31"/></name> <init pos:line="87" pos:column="32">= <expr><call><name pos:line="87" pos:column="34">UI_OpenSSL<pos:position pos:line="87" pos:column="44"/></name><argument_list pos:line="87" pos:column="44">()<pos:position pos:line="87" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="87" pos:column="47"/></decl_stmt>
<cpp:endif pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">endif<pos:position pos:line="88" pos:column="7"/></cpp:directive></cpp:endif>
          <if pos:line="89" pos:column="11">if <condition pos:line="89" pos:column="14">(<expr><operator pos:line="89" pos:column="15">!<pos:position pos:line="89" pos:column="16"/></operator><name pos:line="89" pos:column="16">key_file<pos:position pos:line="89" pos:column="24"/></name> <operator pos:line="89" pos:column="25">||<pos:position pos:line="89" pos:column="27"/></operator> <operator pos:line="89" pos:column="28">!<pos:position pos:line="89" pos:column="29"/></operator><name><name pos:line="89" pos:column="29">key_file<pos:position pos:line="89" pos:column="37"/></name><index pos:line="89" pos:column="37">[<expr><literal type="number" pos:line="89" pos:column="38">0<pos:position pos:line="89" pos:column="39"/></literal></expr>]<pos:position pos:line="89" pos:column="40"/></index></name></expr>)<pos:position pos:line="89" pos:column="41"/></condition><then pos:line="89" pos:column="41"> <block pos:line="89" pos:column="42">{
            <expr_stmt><expr><call><name pos:line="90" pos:column="13">failf<pos:position pos:line="90" pos:column="18"/></name><argument_list pos:line="90" pos:column="18">(<argument><expr><name pos:line="90" pos:column="19">data<pos:position pos:line="90" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="25">"no key set to load from crypto engine\n"<pos:position pos:line="90" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="68"/></expr_stmt>
            <return pos:line="91" pos:column="13">return <expr><literal type="number" pos:line="91" pos:column="20">0<pos:position pos:line="91" pos:column="21"/></literal></expr>;<pos:position pos:line="91" pos:column="22"/></return>
          }<pos:position pos:line="92" pos:column="12"/></block></then></if>
          <expr_stmt><expr><name pos:line="93" pos:column="11">priv_key<pos:position pos:line="93" pos:column="19"/></name> <operator pos:line="93" pos:column="20">=<pos:position pos:line="93" pos:column="21"/></operator> <call><name pos:line="93" pos:column="22">ENGINE_load_private_key<pos:position pos:line="93" pos:column="45"/></name><argument_list pos:line="93" pos:column="45">(<argument><expr><name><name pos:line="93" pos:column="46">conn<pos:position pos:line="93" pos:column="50"/></name><operator pos:line="93" pos:column="50">-&gt;<pos:position pos:line="93" pos:column="55"/></operator><name pos:line="93" pos:column="52">data<pos:position pos:line="93" pos:column="56"/></name><operator pos:line="93" pos:column="56">-&gt;<pos:position pos:line="93" pos:column="61"/></operator><name pos:line="93" pos:column="58">engine<pos:position pos:line="93" pos:column="64"/></name></name></expr></argument>,<argument><expr><name pos:line="93" pos:column="65">key_file<pos:position pos:line="93" pos:column="73"/></name></expr></argument>,
<cpp:ifdef pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">ifdef<pos:position pos:line="94" pos:column="7"/></cpp:directive> <name pos:line="94" pos:column="8">HAVE_ENGINE_LOAD_FOUR_ARGS<pos:position pos:line="94" pos:column="34"/></name></cpp:ifdef>
                                             <argument><expr><name pos:line="95" pos:column="46">ui_method<pos:position pos:line="95" pos:column="55"/></name></expr></argument>,
<cpp:endif pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">endif<pos:position pos:line="96" pos:column="7"/></cpp:directive></cpp:endif>
                                             <argument><expr><name><name pos:line="97" pos:column="46">data<pos:position pos:line="97" pos:column="50"/></name><operator pos:line="97" pos:column="50">-&gt;<pos:position pos:line="97" pos:column="55"/></operator><name pos:line="97" pos:column="52">set<pos:position pos:line="97" pos:column="55"/></name><operator pos:line="97" pos:column="55">.<pos:position pos:line="97" pos:column="56"/></operator><name pos:line="97" pos:column="56">key_passwd<pos:position pos:line="97" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="97" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="68"/></expr_stmt>
          <if pos:line="98" pos:column="11">if <condition pos:line="98" pos:column="14">(<expr><operator pos:line="98" pos:column="15">!<pos:position pos:line="98" pos:column="16"/></operator><name pos:line="98" pos:column="16">priv_key<pos:position pos:line="98" pos:column="24"/></name></expr>)<pos:position pos:line="98" pos:column="25"/></condition><then pos:line="98" pos:column="25"> <block pos:line="98" pos:column="26">{
            <expr_stmt><expr><call><name pos:line="99" pos:column="13">failf<pos:position pos:line="99" pos:column="18"/></name><argument_list pos:line="99" pos:column="18">(<argument><expr><name pos:line="99" pos:column="19">data<pos:position pos:line="99" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="25">"failed to load private key from crypto engine\n"<pos:position pos:line="99" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="76"/></expr_stmt>
            <return pos:line="100" pos:column="13">return <expr><literal type="number" pos:line="100" pos:column="20">0<pos:position pos:line="100" pos:column="21"/></literal></expr>;<pos:position pos:line="100" pos:column="22"/></return>
          }<pos:position pos:line="101" pos:column="12"/></block></then></if>
          <if pos:line="102" pos:column="11">if <condition pos:line="102" pos:column="14">(<expr><call><name pos:line="102" pos:column="15">SSL_CTX_use_PrivateKey<pos:position pos:line="102" pos:column="37"/></name><argument_list pos:line="102" pos:column="37">(<argument><expr><name><name pos:line="102" pos:column="38">conn<pos:position pos:line="102" pos:column="42"/></name><operator pos:line="102" pos:column="42">-&gt;<pos:position pos:line="102" pos:column="47"/></operator><name pos:line="102" pos:column="44">ssl<pos:position pos:line="102" pos:column="47"/></name><operator pos:line="102" pos:column="47">.<pos:position pos:line="102" pos:column="48"/></operator><name pos:line="102" pos:column="48">ctx<pos:position pos:line="102" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="53">priv_key<pos:position pos:line="102" pos:column="61"/></name></expr></argument>)<pos:position pos:line="102" pos:column="62"/></argument_list></call> <operator pos:line="102" pos:column="63">!=<pos:position pos:line="102" pos:column="65"/></operator> <literal type="number" pos:line="102" pos:column="66">1<pos:position pos:line="102" pos:column="67"/></literal></expr>)<pos:position pos:line="102" pos:column="68"/></condition><then pos:line="102" pos:column="68"> <block pos:line="102" pos:column="69">{
            <expr_stmt><expr><call><name pos:line="103" pos:column="13">failf<pos:position pos:line="103" pos:column="18"/></name><argument_list pos:line="103" pos:column="18">(<argument><expr><name pos:line="103" pos:column="19">data<pos:position pos:line="103" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="103" pos:column="25">"unable to set private key\n"<pos:position pos:line="103" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="104" pos:column="13">EVP_PKEY_free<pos:position pos:line="104" pos:column="26"/></name><argument_list pos:line="104" pos:column="26">(<argument><expr><name pos:line="104" pos:column="27">priv_key<pos:position pos:line="104" pos:column="35"/></name></expr></argument>)<pos:position pos:line="104" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="37"/></expr_stmt>
            <return pos:line="105" pos:column="13">return <expr><literal type="number" pos:line="105" pos:column="20">0<pos:position pos:line="105" pos:column="21"/></literal></expr>;<pos:position pos:line="105" pos:column="22"/></return>
          }<pos:position pos:line="106" pos:column="12"/></block></then></if>
          <expr_stmt><expr><call><name pos:line="107" pos:column="11">EVP_PKEY_free<pos:position pos:line="107" pos:column="24"/></name><argument_list pos:line="107" pos:column="24">(<argument><expr><name pos:line="107" pos:column="25">priv_key<pos:position pos:line="107" pos:column="33"/></name></expr></argument>)<pos:position pos:line="107" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="35"/></expr_stmt>  <comment type="block" pos:line="107" pos:column="37">/* we don't need the handle any more... */</comment>
        }<pos:position pos:line="108" pos:column="10"/></block></then>
        <else pos:line="109" pos:column="9">else <block pos:line="109" pos:column="14">{
          <expr_stmt><expr><call><name pos:line="110" pos:column="11">failf<pos:position pos:line="110" pos:column="16"/></name><argument_list pos:line="110" pos:column="16">(<argument><expr><name pos:line="110" pos:column="17">data<pos:position pos:line="110" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="110" pos:column="23">"crypto engine not set, can't load private key\n"<pos:position pos:line="110" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="74"/></expr_stmt>
          <return pos:line="111" pos:column="11">return <expr><literal type="number" pos:line="111" pos:column="18">0<pos:position pos:line="111" pos:column="19"/></literal></expr>;<pos:position pos:line="111" pos:column="20"/></return>
        }<pos:position pos:line="112" pos:column="10"/></block></else></if>
      }<pos:position pos:line="113" pos:column="8"/></block>
<cpp:else pos:line="114" pos:column="1">#<cpp:directive pos:line="114" pos:column="2">else<pos:position pos:line="114" pos:column="6"/></cpp:directive></cpp:else>
      <expr_stmt><expr><call><name pos:line="115" pos:column="7">failf<pos:position pos:line="115" pos:column="12"/></name><argument_list pos:line="115" pos:column="12">(<argument><expr><name pos:line="115" pos:column="13">data<pos:position pos:line="115" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="19">"file type ENG for private key not supported\n"<pos:position pos:line="115" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="68"/></expr_stmt>
      <return pos:line="116" pos:column="7">return <expr><literal type="number" pos:line="116" pos:column="14">0<pos:position pos:line="116" pos:column="15"/></literal></expr>;<pos:position pos:line="116" pos:column="16"/></return>
<cpp:endif pos:line="117" pos:column="1">#<cpp:directive pos:line="117" pos:column="2">endif<pos:position pos:line="117" pos:column="7"/></cpp:directive></cpp:endif>
      <break pos:line="118" pos:column="7">break;<pos:position pos:line="118" pos:column="13"/></break>
    <default pos:line="119" pos:column="5">default:<pos:position pos:line="119" pos:column="13"/></default>
      <expr_stmt><expr><call><name pos:line="120" pos:column="7">failf<pos:position pos:line="120" pos:column="12"/></name><argument_list pos:line="120" pos:column="12">(<argument><expr><name pos:line="120" pos:column="13">data<pos:position pos:line="120" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="120" pos:column="19">"not supported file type for private key\n"<pos:position pos:line="120" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="64"/></expr_stmt>
      <return pos:line="121" pos:column="7">return <expr><literal type="number" pos:line="121" pos:column="14">0<pos:position pos:line="121" pos:column="15"/></literal></expr>;<pos:position pos:line="121" pos:column="16"/></return>
    }<pos:position pos:line="122" pos:column="6"/></block></switch>

    <expr_stmt><expr><name pos:line="124" pos:column="5">ssl<pos:position pos:line="124" pos:column="8"/></name><operator pos:line="124" pos:column="8">=<pos:position pos:line="124" pos:column="9"/></operator><call><name pos:line="124" pos:column="9">SSL_new<pos:position pos:line="124" pos:column="16"/></name><argument_list pos:line="124" pos:column="16">(<argument><expr><name><name pos:line="124" pos:column="17">conn<pos:position pos:line="124" pos:column="21"/></name><operator pos:line="124" pos:column="21">-&gt;<pos:position pos:line="124" pos:column="26"/></operator><name pos:line="124" pos:column="23">ssl<pos:position pos:line="124" pos:column="26"/></name><operator pos:line="124" pos:column="26">.<pos:position pos:line="124" pos:column="27"/></operator><name pos:line="124" pos:column="27">ctx<pos:position pos:line="124" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="124" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="125" pos:column="5">x509<pos:position pos:line="125" pos:column="9"/></name><operator pos:line="125" pos:column="9">=<pos:position pos:line="125" pos:column="10"/></operator><call><name pos:line="125" pos:column="10">SSL_get_certificate<pos:position pos:line="125" pos:column="29"/></name><argument_list pos:line="125" pos:column="29">(<argument><expr><name pos:line="125" pos:column="30">ssl<pos:position pos:line="125" pos:column="33"/></name></expr></argument>)<pos:position pos:line="125" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="35"/></expr_stmt>

    <comment type="block" pos:line="127" pos:column="5">/* This version was provided by Evan Jordan and is supposed to not
       leak memory as the previous version: */</comment>
    <if pos:line="129" pos:column="5">if <condition pos:line="129" pos:column="8">(<expr><name pos:line="129" pos:column="9">x509<pos:position pos:line="129" pos:column="13"/></name> <operator pos:line="129" pos:column="14">!=<pos:position pos:line="129" pos:column="16"/></operator> <name pos:line="129" pos:column="17">NULL<pos:position pos:line="129" pos:column="21"/></name></expr>)<pos:position pos:line="129" pos:column="22"/></condition><then pos:line="129" pos:column="22"> <block pos:line="129" pos:column="23">{
      <decl_stmt><decl><type><name pos:line="130" pos:column="7">EVP_PKEY<pos:position pos:line="130" pos:column="15"/></name> <modifier pos:line="130" pos:column="16">*<pos:position pos:line="130" pos:column="17"/></modifier></type><name pos:line="130" pos:column="17">pktmp<pos:position pos:line="130" pos:column="22"/></name> <init pos:line="130" pos:column="23">= <expr><call><name pos:line="130" pos:column="25">X509_get_pubkey<pos:position pos:line="130" pos:column="40"/></name><argument_list pos:line="130" pos:column="40">(<argument><expr><name pos:line="130" pos:column="41">x509<pos:position pos:line="130" pos:column="45"/></name></expr></argument>)<pos:position pos:line="130" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="130" pos:column="47"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="131" pos:column="7">EVP_PKEY_copy_parameters<pos:position pos:line="131" pos:column="31"/></name><argument_list pos:line="131" pos:column="31">(<argument><expr><name pos:line="131" pos:column="32">pktmp<pos:position pos:line="131" pos:column="37"/></name></expr></argument>,<argument><expr><call><name pos:line="131" pos:column="38">SSL_get_privatekey<pos:position pos:line="131" pos:column="56"/></name><argument_list pos:line="131" pos:column="56">(<argument><expr><name pos:line="131" pos:column="57">ssl<pos:position pos:line="131" pos:column="60"/></name></expr></argument>)<pos:position pos:line="131" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="131" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="63"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="132" pos:column="7">EVP_PKEY_free<pos:position pos:line="132" pos:column="20"/></name><argument_list pos:line="132" pos:column="20">(<argument><expr><name pos:line="132" pos:column="21">pktmp<pos:position pos:line="132" pos:column="26"/></name></expr></argument>)<pos:position pos:line="132" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="133" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="135" pos:column="5">SSL_free<pos:position pos:line="135" pos:column="13"/></name><argument_list pos:line="135" pos:column="13">(<argument><expr><name pos:line="135" pos:column="14">ssl<pos:position pos:line="135" pos:column="17"/></name></expr></argument>)<pos:position pos:line="135" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="19"/></expr_stmt>

    <comment type="block" pos:line="137" pos:column="5">/* If we are using DSA, we can copy the parameters from
     * the private key */</comment>
		
    
    <comment type="block" pos:line="141" pos:column="5">/* Now we know that a key and cert have been set against
     * the SSL context */</comment>
    <if pos:line="143" pos:column="5">if <condition pos:line="143" pos:column="8">(<expr><operator pos:line="143" pos:column="9">!<pos:position pos:line="143" pos:column="10"/></operator><call><name pos:line="143" pos:column="10">SSL_CTX_check_private_key<pos:position pos:line="143" pos:column="35"/></name><argument_list pos:line="143" pos:column="35">(<argument><expr><name><name pos:line="143" pos:column="36">conn<pos:position pos:line="143" pos:column="40"/></name><operator pos:line="143" pos:column="40">-&gt;<pos:position pos:line="143" pos:column="45"/></operator><name pos:line="143" pos:column="42">ssl<pos:position pos:line="143" pos:column="45"/></name><operator pos:line="143" pos:column="45">.<pos:position pos:line="143" pos:column="46"/></operator><name pos:line="143" pos:column="46">ctx<pos:position pos:line="143" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="143" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="143" pos:column="51"/></condition><then pos:line="143" pos:column="51"> <block pos:line="143" pos:column="52">{
      <expr_stmt><expr><call><name pos:line="144" pos:column="7">failf<pos:position pos:line="144" pos:column="12"/></name><argument_list pos:line="144" pos:column="12">(<argument><expr><name pos:line="144" pos:column="13">data<pos:position pos:line="144" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="144" pos:column="19">"Private key does not match the certificate public key"<pos:position pos:line="144" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="144" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="76"/></expr_stmt>
      <return pos:line="145" pos:column="7">return<expr><operator pos:line="145" pos:column="13">(<pos:position pos:line="145" pos:column="14"/></operator><literal type="number" pos:line="145" pos:column="14">0<pos:position pos:line="145" pos:column="15"/></literal><operator pos:line="145" pos:column="15">)<pos:position pos:line="145" pos:column="16"/></operator></expr>;<pos:position pos:line="145" pos:column="17"/></return>
    }<pos:position pos:line="146" pos:column="6"/></block></then></if>
<cpp:ifndef pos:line="147" pos:column="1">#<cpp:directive pos:line="147" pos:column="2">ifndef<pos:position pos:line="147" pos:column="8"/></cpp:directive> <name pos:line="147" pos:column="9">HAVE_USERDATA_IN_PWD_CALLBACK<pos:position pos:line="147" pos:column="38"/></name></cpp:ifndef>    
    <comment type="block" pos:line="148" pos:column="5">/* erase it now */</comment>
    <expr_stmt><expr><call><name pos:line="149" pos:column="5">memset<pos:position pos:line="149" pos:column="11"/></name><argument_list pos:line="149" pos:column="11">(<argument><expr><name pos:line="149" pos:column="12">global_passwd<pos:position pos:line="149" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="149" pos:column="27">0<pos:position pos:line="149" pos:column="28"/></literal></expr></argument>, <argument><expr><sizeof pos:line="149" pos:column="30">sizeof<argument_list pos:line="149" pos:column="36">(<argument><expr><name pos:line="149" pos:column="37">global_passwd<pos:position pos:line="149" pos:column="50"/></name></expr></argument>)<pos:position pos:line="149" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="149" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="53"/></expr_stmt>
<cpp:endif pos:line="150" pos:column="1">#<cpp:directive pos:line="150" pos:column="2">endif<pos:position pos:line="150" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="151" pos:column="4"/></block></then></if>
  <return pos:line="152" pos:column="3">return<expr><operator pos:line="152" pos:column="9">(<pos:position pos:line="152" pos:column="10"/></operator><literal type="number" pos:line="152" pos:column="10">1<pos:position pos:line="152" pos:column="11"/></literal><operator pos:line="152" pos:column="11">)<pos:position pos:line="152" pos:column="12"/></operator></expr>;<pos:position pos:line="152" pos:column="13"/></return>
}<pos:position pos:line="153" pos:column="2"/></block></function></unit>
