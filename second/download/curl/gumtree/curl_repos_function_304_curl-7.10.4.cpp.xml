<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_304_curl-7.10.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">hostent<pos:position pos:line="1" pos:column="22"/></name></name><modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type> <name pos:line="1" pos:column="24">pack_hostent<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name><modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier><modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type> <name pos:line="1" pos:column="44">buf<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="49">struct<pos:position pos:line="1" pos:column="55"/></name> <name pos:line="1" pos:column="56">hostent<pos:position pos:line="1" pos:column="63"/></name></name><modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type> <name pos:line="1" pos:column="65">orig<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">bufptr<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">newbuf<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">hostent<pos:position pos:line="5" pos:column="17"/></name></name><modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type> <name pos:line="5" pos:column="19">copy<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">i<pos:position pos:line="7" pos:column="8"/></name></decl>;<pos:position pos:line="7" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">str<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">len<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><name pos:line="11" pos:column="3">bufptr<pos:position pos:line="11" pos:column="9"/></name> <operator pos:line="11" pos:column="10">=<pos:position pos:line="11" pos:column="11"/></operator> <operator pos:line="11" pos:column="12">*<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="13">buf<pos:position pos:line="11" pos:column="16"/></name></expr>;<pos:position pos:line="11" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name pos:line="12" pos:column="3">copy<pos:position pos:line="12" pos:column="7"/></name> <operator pos:line="12" pos:column="8">=<pos:position pos:line="12" pos:column="9"/></operator> <operator pos:line="12" pos:column="10">(<pos:position pos:line="12" pos:column="11"/></operator>struct <name pos:line="12" pos:column="18">hostent<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">*<pos:position pos:line="12" pos:column="26"/></operator><operator pos:line="12" pos:column="26">)<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="27">bufptr<pos:position pos:line="12" pos:column="33"/></name></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>

  <expr_stmt><expr><name pos:line="14" pos:column="3">bufptr<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">+=<pos:position pos:line="14" pos:column="12"/></operator> <sizeof pos:line="14" pos:column="13">sizeof<argument_list pos:line="14" pos:column="19">(<argument><expr pos:line="14" pos:column="20">struct <name pos:line="14" pos:column="27">hostent<pos:position pos:line="14" pos:column="34"/></name></expr></argument>)<pos:position pos:line="14" pos:column="35"/></argument_list></sizeof></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="15" pos:column="3">copy<pos:position pos:line="15" pos:column="7"/></name><operator pos:line="15" pos:column="7">-&gt;<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="9">h_name<pos:position pos:line="15" pos:column="15"/></name></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <name pos:line="15" pos:column="18">bufptr<pos:position pos:line="15" pos:column="24"/></name></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="16" pos:column="3">len<pos:position pos:line="16" pos:column="6"/></name> <operator pos:line="16" pos:column="7">=<pos:position pos:line="16" pos:column="8"/></operator> <call><name pos:line="16" pos:column="9">strlen<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><name><name pos:line="16" pos:column="16">orig<pos:position pos:line="16" pos:column="20"/></name><operator pos:line="16" pos:column="20">-&gt;<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="22">h_name<pos:position pos:line="16" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="29"/></argument_list></call> <operator pos:line="16" pos:column="30">+<pos:position pos:line="16" pos:column="31"/></operator> <literal type="number" pos:line="16" pos:column="32">1<pos:position pos:line="16" pos:column="33"/></literal></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">strncpy<pos:position pos:line="17" pos:column="10"/></name><argument_list pos:line="17" pos:column="10">(<argument><expr><name pos:line="17" pos:column="11">bufptr<pos:position pos:line="17" pos:column="17"/></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="19">orig<pos:position pos:line="17" pos:column="23"/></name><operator pos:line="17" pos:column="23">-&gt;<pos:position pos:line="17" pos:column="28"/></operator><name pos:line="17" pos:column="25">h_name<pos:position pos:line="17" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="33">len<pos:position pos:line="17" pos:column="36"/></name></expr></argument>)<pos:position pos:line="17" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="38"/></expr_stmt>
  <expr_stmt><expr><name pos:line="18" pos:column="3">bufptr<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">+=<pos:position pos:line="18" pos:column="12"/></operator> <name pos:line="18" pos:column="13">len<pos:position pos:line="18" pos:column="16"/></name></expr>;<pos:position pos:line="18" pos:column="17"/></expr_stmt>

  <comment type="block" pos:line="20" pos:column="3">/* we align on even 64bit boundaries for safety */</comment>
<cpp:define pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">define<pos:position pos:line="21" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="21" pos:column="9">MEMALIGN<pos:position pos:line="21" pos:column="17"/></name><parameter_list pos:line="21" pos:column="17">(<parameter><type><name pos:line="21" pos:column="18">x<pos:position pos:line="21" pos:column="19"/></name></type></parameter>)<pos:position pos:line="21" pos:column="20"/></parameter_list></cpp:macro> <cpp:value pos:line="21" pos:column="21">((x)+(8-(((unsigned long)(x))&amp;0x7)))<pos:position pos:line="21" pos:column="57"/></cpp:value></cpp:define>

  <comment type="block" pos:line="23" pos:column="3">/* This must be aligned properly to work on many CPU architectures! */</comment>
  <expr_stmt><expr><name pos:line="24" pos:column="3">bufptr<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">=<pos:position pos:line="24" pos:column="11"/></operator> <call><name pos:line="24" pos:column="12">MEMALIGN<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><name pos:line="24" pos:column="21">bufptr<pos:position pos:line="24" pos:column="27"/></name></expr></argument>)<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>
  
  <expr_stmt><expr><name><name pos:line="26" pos:column="3">copy<pos:position pos:line="26" pos:column="7"/></name><operator pos:line="26" pos:column="7">-&gt;<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="9">h_aliases<pos:position pos:line="26" pos:column="18"/></name></name> <operator pos:line="26" pos:column="19">=<pos:position pos:line="26" pos:column="20"/></operator> <operator pos:line="26" pos:column="21">(<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="22">char<pos:position pos:line="26" pos:column="26"/></name><operator pos:line="26" pos:column="26">*<pos:position pos:line="26" pos:column="27"/></operator><operator pos:line="26" pos:column="27">*<pos:position pos:line="26" pos:column="28"/></operator><operator pos:line="26" pos:column="28">)<pos:position pos:line="26" pos:column="29"/></operator><name pos:line="26" pos:column="29">bufptr<pos:position pos:line="26" pos:column="35"/></name></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>

  <comment type="block" pos:line="28" pos:column="3">/* Figure out how many aliases there are */</comment>
  <for pos:line="29" pos:column="3">for <control pos:line="29" pos:column="7">(<init><expr><name pos:line="29" pos:column="8">i<pos:position pos:line="29" pos:column="9"/></name> <operator pos:line="29" pos:column="10">=<pos:position pos:line="29" pos:column="11"/></operator> <literal type="number" pos:line="29" pos:column="12">0<pos:position pos:line="29" pos:column="13"/></literal></expr>;<pos:position pos:line="29" pos:column="14"/></init> <condition><expr><name><name pos:line="29" pos:column="15">orig<pos:position pos:line="29" pos:column="19"/></name><operator pos:line="29" pos:column="19">-&gt;<pos:position pos:line="29" pos:column="24"/></operator><name pos:line="29" pos:column="21">h_aliases<pos:position pos:line="29" pos:column="30"/></name><index pos:line="29" pos:column="30">[<expr><name pos:line="29" pos:column="31">i<pos:position pos:line="29" pos:column="32"/></name></expr>]<pos:position pos:line="29" pos:column="33"/></index></name> <operator pos:line="29" pos:column="34">!=<pos:position pos:line="29" pos:column="36"/></operator> <name pos:line="29" pos:column="37">NULL<pos:position pos:line="29" pos:column="41"/></name></expr>;<pos:position pos:line="29" pos:column="42"/></condition> <incr><expr><operator pos:line="29" pos:column="43">++<pos:position pos:line="29" pos:column="45"/></operator><name pos:line="29" pos:column="45">i<pos:position pos:line="29" pos:column="46"/></name></expr></incr>)<pos:position pos:line="29" pos:column="47"/></control><block type="pseudo"><empty_stmt pos:line="29" pos:column="47">;<pos:position pos:line="29" pos:column="48"/></empty_stmt></block></for>

  <comment type="block" pos:line="31" pos:column="3">/* Reserve room for the array */</comment>
  <expr_stmt><expr><name pos:line="32" pos:column="3">bufptr<pos:position pos:line="32" pos:column="9"/></name> <operator pos:line="32" pos:column="10">+=<pos:position pos:line="32" pos:column="12"/></operator> <operator pos:line="32" pos:column="13">(<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">i<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">+<pos:position pos:line="32" pos:column="17"/></operator> <literal type="number" pos:line="32" pos:column="18">1<pos:position pos:line="32" pos:column="19"/></literal><operator pos:line="32" pos:column="19">)<pos:position pos:line="32" pos:column="20"/></operator> <operator pos:line="32" pos:column="21">*<pos:position pos:line="32" pos:column="22"/></operator> <sizeof pos:line="32" pos:column="23">sizeof<argument_list pos:line="32" pos:column="29">(<argument><expr><name pos:line="32" pos:column="30">char<pos:position pos:line="32" pos:column="34"/></name><operator pos:line="32" pos:column="34">*<pos:position pos:line="32" pos:column="35"/></operator></expr></argument>)<pos:position pos:line="32" pos:column="36"/></argument_list></sizeof></expr>;<pos:position pos:line="32" pos:column="37"/></expr_stmt>

  <comment type="block" pos:line="34" pos:column="3">/* Clone all known aliases */</comment>
  <for pos:line="35" pos:column="3">for<control pos:line="35" pos:column="6">(<init><expr><name pos:line="35" pos:column="7">i<pos:position pos:line="35" pos:column="8"/></name> <operator pos:line="35" pos:column="9">=<pos:position pos:line="35" pos:column="10"/></operator> <literal type="number" pos:line="35" pos:column="11">0<pos:position pos:line="35" pos:column="12"/></literal></expr>;<pos:position pos:line="35" pos:column="13"/></init> <condition><expr><operator pos:line="35" pos:column="14">(<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="15">str<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">=<pos:position pos:line="35" pos:column="20"/></operator> <name><name pos:line="35" pos:column="21">orig<pos:position pos:line="35" pos:column="25"/></name><operator pos:line="35" pos:column="25">-&gt;<pos:position pos:line="35" pos:column="30"/></operator><name pos:line="35" pos:column="27">h_aliases<pos:position pos:line="35" pos:column="36"/></name><index pos:line="35" pos:column="36">[<expr><name pos:line="35" pos:column="37">i<pos:position pos:line="35" pos:column="38"/></name></expr>]<pos:position pos:line="35" pos:column="39"/></index></name><operator pos:line="35" pos:column="39">)<pos:position pos:line="35" pos:column="40"/></operator></expr>;<pos:position pos:line="35" pos:column="41"/></condition> <incr><expr><name pos:line="35" pos:column="42">i<pos:position pos:line="35" pos:column="43"/></name><operator pos:line="35" pos:column="43">++<pos:position pos:line="35" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="35" pos:column="46"/></control> <block pos:line="35" pos:column="47">{
    <expr_stmt><expr><name pos:line="36" pos:column="5">len<pos:position pos:line="36" pos:column="8"/></name> <operator pos:line="36" pos:column="9">=<pos:position pos:line="36" pos:column="10"/></operator> <call><name pos:line="36" pos:column="11">strlen<pos:position pos:line="36" pos:column="17"/></name><argument_list pos:line="36" pos:column="17">(<argument><expr><name pos:line="36" pos:column="18">str<pos:position pos:line="36" pos:column="21"/></name></expr></argument>)<pos:position pos:line="36" pos:column="22"/></argument_list></call> <operator pos:line="36" pos:column="23">+<pos:position pos:line="36" pos:column="24"/></operator> <literal type="number" pos:line="36" pos:column="25">1<pos:position pos:line="36" pos:column="26"/></literal></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">strncpy<pos:position pos:line="37" pos:column="12"/></name><argument_list pos:line="37" pos:column="12">(<argument><expr><name pos:line="37" pos:column="13">bufptr<pos:position pos:line="37" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="21">str<pos:position pos:line="37" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="26">len<pos:position pos:line="37" pos:column="29"/></name></expr></argument>)<pos:position pos:line="37" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="38" pos:column="5">copy<pos:position pos:line="38" pos:column="9"/></name><operator pos:line="38" pos:column="9">-&gt;<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="11">h_aliases<pos:position pos:line="38" pos:column="20"/></name><index pos:line="38" pos:column="20">[<expr><name pos:line="38" pos:column="21">i<pos:position pos:line="38" pos:column="22"/></name></expr>]<pos:position pos:line="38" pos:column="23"/></index></name> <operator pos:line="38" pos:column="24">=<pos:position pos:line="38" pos:column="25"/></operator> <name pos:line="38" pos:column="26">bufptr<pos:position pos:line="38" pos:column="32"/></name></expr>;<pos:position pos:line="38" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="39" pos:column="5">bufptr<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">+=<pos:position pos:line="39" pos:column="14"/></operator> <name pos:line="39" pos:column="15">len<pos:position pos:line="39" pos:column="18"/></name></expr>;<pos:position pos:line="39" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="40" pos:column="4"/></block></for>
  <comment type="block" pos:line="41" pos:column="3">/* Terminate the alias list with a NULL */</comment>
  <expr_stmt><expr><name><name pos:line="42" pos:column="3">copy<pos:position pos:line="42" pos:column="7"/></name><operator pos:line="42" pos:column="7">-&gt;<pos:position pos:line="42" pos:column="12"/></operator><name pos:line="42" pos:column="9">h_aliases<pos:position pos:line="42" pos:column="18"/></name><index pos:line="42" pos:column="18">[<expr><name pos:line="42" pos:column="19">i<pos:position pos:line="42" pos:column="20"/></name></expr>]<pos:position pos:line="42" pos:column="21"/></index></name> <operator pos:line="42" pos:column="22">=<pos:position pos:line="42" pos:column="23"/></operator> <name pos:line="42" pos:column="24">NULL<pos:position pos:line="42" pos:column="28"/></name></expr>;<pos:position pos:line="42" pos:column="29"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="44" pos:column="3">copy<pos:position pos:line="44" pos:column="7"/></name><operator pos:line="44" pos:column="7">-&gt;<pos:position pos:line="44" pos:column="12"/></operator><name pos:line="44" pos:column="9">h_addrtype<pos:position pos:line="44" pos:column="19"/></name></name> <operator pos:line="44" pos:column="20">=<pos:position pos:line="44" pos:column="21"/></operator> <name><name pos:line="44" pos:column="22">orig<pos:position pos:line="44" pos:column="26"/></name><operator pos:line="44" pos:column="26">-&gt;<pos:position pos:line="44" pos:column="31"/></operator><name pos:line="44" pos:column="28">h_addrtype<pos:position pos:line="44" pos:column="38"/></name></name></expr>;<pos:position pos:line="44" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="45" pos:column="3">copy<pos:position pos:line="45" pos:column="7"/></name><operator pos:line="45" pos:column="7">-&gt;<pos:position pos:line="45" pos:column="12"/></operator><name pos:line="45" pos:column="9">h_length<pos:position pos:line="45" pos:column="17"/></name></name> <operator pos:line="45" pos:column="18">=<pos:position pos:line="45" pos:column="19"/></operator> <name><name pos:line="45" pos:column="20">orig<pos:position pos:line="45" pos:column="24"/></name><operator pos:line="45" pos:column="24">-&gt;<pos:position pos:line="45" pos:column="29"/></operator><name pos:line="45" pos:column="26">h_length<pos:position pos:line="45" pos:column="34"/></name></name></expr>;<pos:position pos:line="45" pos:column="35"/></expr_stmt>
    
  <comment type="block" pos:line="47" pos:column="3">/* align it for (at least) 32bit accesses */</comment>
  <expr_stmt><expr><name pos:line="48" pos:column="3">bufptr<pos:position pos:line="48" pos:column="9"/></name> <operator pos:line="48" pos:column="10">=<pos:position pos:line="48" pos:column="11"/></operator> <call><name pos:line="48" pos:column="12">MEMALIGN<pos:position pos:line="48" pos:column="20"/></name><argument_list pos:line="48" pos:column="20">(<argument><expr><name pos:line="48" pos:column="21">bufptr<pos:position pos:line="48" pos:column="27"/></name></expr></argument>)<pos:position pos:line="48" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="29"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="50" pos:column="3">copy<pos:position pos:line="50" pos:column="7"/></name><operator pos:line="50" pos:column="7">-&gt;<pos:position pos:line="50" pos:column="12"/></operator><name pos:line="50" pos:column="9">h_addr_list<pos:position pos:line="50" pos:column="20"/></name></name> <operator pos:line="50" pos:column="21">=<pos:position pos:line="50" pos:column="22"/></operator> <operator pos:line="50" pos:column="23">(<pos:position pos:line="50" pos:column="24"/></operator><name pos:line="50" pos:column="24">char<pos:position pos:line="50" pos:column="28"/></name><operator pos:line="50" pos:column="28">*<pos:position pos:line="50" pos:column="29"/></operator><operator pos:line="50" pos:column="29">*<pos:position pos:line="50" pos:column="30"/></operator><operator pos:line="50" pos:column="30">)<pos:position pos:line="50" pos:column="31"/></operator><name pos:line="50" pos:column="31">bufptr<pos:position pos:line="50" pos:column="37"/></name></expr>;<pos:position pos:line="50" pos:column="38"/></expr_stmt>

  <comment type="block" pos:line="52" pos:column="3">/* Figure out how many addresses there are */</comment>
  <for pos:line="53" pos:column="3">for <control pos:line="53" pos:column="7">(<init><expr><name pos:line="53" pos:column="8">i<pos:position pos:line="53" pos:column="9"/></name> <operator pos:line="53" pos:column="10">=<pos:position pos:line="53" pos:column="11"/></operator> <literal type="number" pos:line="53" pos:column="12">0<pos:position pos:line="53" pos:column="13"/></literal></expr>;<pos:position pos:line="53" pos:column="14"/></init> <condition><expr><name><name pos:line="53" pos:column="15">orig<pos:position pos:line="53" pos:column="19"/></name><operator pos:line="53" pos:column="19">-&gt;<pos:position pos:line="53" pos:column="24"/></operator><name pos:line="53" pos:column="21">h_addr_list<pos:position pos:line="53" pos:column="32"/></name><index pos:line="53" pos:column="32">[<expr><name pos:line="53" pos:column="33">i<pos:position pos:line="53" pos:column="34"/></name></expr>]<pos:position pos:line="53" pos:column="35"/></index></name> <operator pos:line="53" pos:column="36">!=<pos:position pos:line="53" pos:column="38"/></operator> <name pos:line="53" pos:column="39">NULL<pos:position pos:line="53" pos:column="43"/></name></expr>;<pos:position pos:line="53" pos:column="44"/></condition> <incr><expr><operator pos:line="53" pos:column="45">++<pos:position pos:line="53" pos:column="47"/></operator><name pos:line="53" pos:column="47">i<pos:position pos:line="53" pos:column="48"/></name></expr></incr>)<pos:position pos:line="53" pos:column="49"/></control><block type="pseudo"><empty_stmt pos:line="53" pos:column="49">;<pos:position pos:line="53" pos:column="50"/></empty_stmt></block></for>

  <comment type="block" pos:line="55" pos:column="3">/* Reserve room for the array */</comment>
  <expr_stmt><expr><name pos:line="56" pos:column="3">bufptr<pos:position pos:line="56" pos:column="9"/></name> <operator pos:line="56" pos:column="10">+=<pos:position pos:line="56" pos:column="12"/></operator> <operator pos:line="56" pos:column="13">(<pos:position pos:line="56" pos:column="14"/></operator><name pos:line="56" pos:column="14">i<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">+<pos:position pos:line="56" pos:column="17"/></operator> <literal type="number" pos:line="56" pos:column="18">1<pos:position pos:line="56" pos:column="19"/></literal><operator pos:line="56" pos:column="19">)<pos:position pos:line="56" pos:column="20"/></operator> <operator pos:line="56" pos:column="21">*<pos:position pos:line="56" pos:column="22"/></operator> <sizeof pos:line="56" pos:column="23">sizeof<argument_list pos:line="56" pos:column="29">(<argument><expr><name pos:line="56" pos:column="30">char<pos:position pos:line="56" pos:column="34"/></name><operator pos:line="56" pos:column="34">*<pos:position pos:line="56" pos:column="35"/></operator></expr></argument>)<pos:position pos:line="56" pos:column="36"/></argument_list></sizeof></expr>;<pos:position pos:line="56" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><name pos:line="58" pos:column="3">i<pos:position pos:line="58" pos:column="4"/></name> <operator pos:line="58" pos:column="5">=<pos:position pos:line="58" pos:column="6"/></operator> <literal type="number" pos:line="58" pos:column="7">0<pos:position pos:line="58" pos:column="8"/></literal></expr>;<pos:position pos:line="58" pos:column="9"/></expr_stmt>
  <expr_stmt><expr><name pos:line="59" pos:column="3">len<pos:position pos:line="59" pos:column="6"/></name> <operator pos:line="59" pos:column="7">=<pos:position pos:line="59" pos:column="8"/></operator> <name><name pos:line="59" pos:column="9">orig<pos:position pos:line="59" pos:column="13"/></name><operator pos:line="59" pos:column="13">-&gt;<pos:position pos:line="59" pos:column="18"/></operator><name pos:line="59" pos:column="15">h_length<pos:position pos:line="59" pos:column="23"/></name></name></expr>;<pos:position pos:line="59" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name pos:line="60" pos:column="3">str<pos:position pos:line="60" pos:column="6"/></name> <operator pos:line="60" pos:column="7">=<pos:position pos:line="60" pos:column="8"/></operator> <name><name pos:line="60" pos:column="9">orig<pos:position pos:line="60" pos:column="13"/></name><operator pos:line="60" pos:column="13">-&gt;<pos:position pos:line="60" pos:column="18"/></operator><name pos:line="60" pos:column="15">h_addr_list<pos:position pos:line="60" pos:column="26"/></name><index pos:line="60" pos:column="26">[<expr><name pos:line="60" pos:column="27">i<pos:position pos:line="60" pos:column="28"/></name></expr>]<pos:position pos:line="60" pos:column="29"/></index></name></expr>;<pos:position pos:line="60" pos:column="30"/></expr_stmt>
  <while pos:line="61" pos:column="3">while <condition pos:line="61" pos:column="9">(<expr><name pos:line="61" pos:column="10">str<pos:position pos:line="61" pos:column="13"/></name> <operator pos:line="61" pos:column="14">!=<pos:position pos:line="61" pos:column="16"/></operator> <name pos:line="61" pos:column="17">NULL<pos:position pos:line="61" pos:column="21"/></name></expr>)<pos:position pos:line="61" pos:column="22"/></condition> <block pos:line="61" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="62" pos:column="5">memcpy<pos:position pos:line="62" pos:column="11"/></name><argument_list pos:line="62" pos:column="11">(<argument><expr><name pos:line="62" pos:column="12">bufptr<pos:position pos:line="62" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="20">str<pos:position pos:line="62" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="25">len<pos:position pos:line="62" pos:column="28"/></name></expr></argument>)<pos:position pos:line="62" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="63" pos:column="5">copy<pos:position pos:line="63" pos:column="9"/></name><operator pos:line="63" pos:column="9">-&gt;<pos:position pos:line="63" pos:column="14"/></operator><name pos:line="63" pos:column="11">h_addr_list<pos:position pos:line="63" pos:column="22"/></name><index pos:line="63" pos:column="22">[<expr><name pos:line="63" pos:column="23">i<pos:position pos:line="63" pos:column="24"/></name></expr>]<pos:position pos:line="63" pos:column="25"/></index></name> <operator pos:line="63" pos:column="26">=<pos:position pos:line="63" pos:column="27"/></operator> <name pos:line="63" pos:column="28">bufptr<pos:position pos:line="63" pos:column="34"/></name></expr>;<pos:position pos:line="63" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name pos:line="64" pos:column="5">bufptr<pos:position pos:line="64" pos:column="11"/></name> <operator pos:line="64" pos:column="12">+=<pos:position pos:line="64" pos:column="14"/></operator> <name pos:line="64" pos:column="15">len<pos:position pos:line="64" pos:column="18"/></name></expr>;<pos:position pos:line="64" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="65" pos:column="5">str<pos:position pos:line="65" pos:column="8"/></name> <operator pos:line="65" pos:column="9">=<pos:position pos:line="65" pos:column="10"/></operator> <name><name pos:line="65" pos:column="11">orig<pos:position pos:line="65" pos:column="15"/></name><operator pos:line="65" pos:column="15">-&gt;<pos:position pos:line="65" pos:column="20"/></operator><name pos:line="65" pos:column="17">h_addr_list<pos:position pos:line="65" pos:column="28"/></name><index pos:line="65" pos:column="28">[<expr><operator pos:line="65" pos:column="29">++<pos:position pos:line="65" pos:column="31"/></operator><name pos:line="65" pos:column="31">i<pos:position pos:line="65" pos:column="32"/></name></expr>]<pos:position pos:line="65" pos:column="33"/></index></name></expr>;<pos:position pos:line="65" pos:column="34"/></expr_stmt>
  }<pos:position pos:line="66" pos:column="4"/></block></while>
  <expr_stmt><expr><name><name pos:line="67" pos:column="3">copy<pos:position pos:line="67" pos:column="7"/></name><operator pos:line="67" pos:column="7">-&gt;<pos:position pos:line="67" pos:column="12"/></operator><name pos:line="67" pos:column="9">h_addr_list<pos:position pos:line="67" pos:column="20"/></name><index pos:line="67" pos:column="20">[<expr><name pos:line="67" pos:column="21">i<pos:position pos:line="67" pos:column="22"/></name></expr>]<pos:position pos:line="67" pos:column="23"/></index></name> <operator pos:line="67" pos:column="24">=<pos:position pos:line="67" pos:column="25"/></operator> <name pos:line="67" pos:column="26">NULL<pos:position pos:line="67" pos:column="30"/></name></expr>;<pos:position pos:line="67" pos:column="31"/></expr_stmt>

  <comment type="block" pos:line="69" pos:column="3">/* now, shrink the allocated buffer to the size we actually need, which
     most often is only a fraction of the original alloc */</comment>
  <expr_stmt><expr><name pos:line="71" pos:column="3">newbuf<pos:position pos:line="71" pos:column="9"/></name><operator pos:line="71" pos:column="9">=<pos:position pos:line="71" pos:column="10"/></operator><operator pos:line="71" pos:column="10">(<pos:position pos:line="71" pos:column="11"/></operator><name pos:line="71" pos:column="11">char<pos:position pos:line="71" pos:column="15"/></name> <operator pos:line="71" pos:column="16">*<pos:position pos:line="71" pos:column="17"/></operator><operator pos:line="71" pos:column="17">)<pos:position pos:line="71" pos:column="18"/></operator><call><name pos:line="71" pos:column="18">realloc<pos:position pos:line="71" pos:column="25"/></name><argument_list pos:line="71" pos:column="25">(<argument><expr><operator pos:line="71" pos:column="26">*<pos:position pos:line="71" pos:column="27"/></operator><name pos:line="71" pos:column="27">buf<pos:position pos:line="71" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="32">(<pos:position pos:line="71" pos:column="33"/></operator><name pos:line="71" pos:column="33">int<pos:position pos:line="71" pos:column="36"/></name><operator pos:line="71" pos:column="36">)<pos:position pos:line="71" pos:column="37"/></operator><name pos:line="71" pos:column="37">bufptr<pos:position pos:line="71" pos:column="43"/></name><operator pos:line="71" pos:column="43">-<pos:position pos:line="71" pos:column="44"/></operator><call pos:line="71" pos:column="44">(<name pos:line="71" pos:column="45">int<pos:position pos:line="71" pos:column="48"/></name>)<argument_list pos:line="71" pos:column="49">(<argument><expr><operator pos:line="71" pos:column="50">*<pos:position pos:line="71" pos:column="51"/></operator><name pos:line="71" pos:column="51">buf<pos:position pos:line="71" pos:column="54"/></name></expr></argument>)<pos:position pos:line="71" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="71" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="57"/></expr_stmt>

  <comment type="block" pos:line="73" pos:column="3">/* if the alloc moved, we need to adjust things again */</comment>
  <if pos:line="74" pos:column="3">if<condition pos:line="74" pos:column="5">(<expr><name pos:line="74" pos:column="6">newbuf<pos:position pos:line="74" pos:column="12"/></name> <operator pos:line="74" pos:column="13">!=<pos:position pos:line="74" pos:column="15"/></operator> <operator pos:line="74" pos:column="16">*<pos:position pos:line="74" pos:column="17"/></operator><name pos:line="74" pos:column="17">buf<pos:position pos:line="74" pos:column="20"/></name></expr>)<pos:position pos:line="74" pos:column="21"/></condition><then pos:line="74" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="5">hostcache_fixoffset<pos:position pos:line="75" pos:column="24"/></name><argument_list pos:line="75" pos:column="24">(<argument><expr><operator pos:line="75" pos:column="25">(<pos:position pos:line="75" pos:column="26"/></operator>struct <name pos:line="75" pos:column="33">hostent<pos:position pos:line="75" pos:column="40"/></name><operator pos:line="75" pos:column="40">*<pos:position pos:line="75" pos:column="41"/></operator><operator pos:line="75" pos:column="41">)<pos:position pos:line="75" pos:column="42"/></operator><name pos:line="75" pos:column="42">newbuf<pos:position pos:line="75" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="50">(<pos:position pos:line="75" pos:column="51"/></operator><name pos:line="75" pos:column="51">int<pos:position pos:line="75" pos:column="54"/></name><operator pos:line="75" pos:column="54">)<pos:position pos:line="75" pos:column="55"/></operator><name pos:line="75" pos:column="55">newbuf<pos:position pos:line="75" pos:column="61"/></name><operator pos:line="75" pos:column="61">-<pos:position pos:line="75" pos:column="62"/></operator><operator pos:line="75" pos:column="62">(<pos:position pos:line="75" pos:column="63"/></operator><name pos:line="75" pos:column="63">int<pos:position pos:line="75" pos:column="66"/></name><operator pos:line="75" pos:column="66">)<pos:position pos:line="75" pos:column="67"/></operator><operator pos:line="75" pos:column="67">*<pos:position pos:line="75" pos:column="68"/></operator><name pos:line="75" pos:column="68">buf<pos:position pos:line="75" pos:column="71"/></name></expr></argument>)<pos:position pos:line="75" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="73"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="77" pos:column="3">/* setup the return */</comment>
  <expr_stmt><expr><operator pos:line="78" pos:column="3">*<pos:position pos:line="78" pos:column="4"/></operator><name pos:line="78" pos:column="4">buf<pos:position pos:line="78" pos:column="7"/></name> <operator pos:line="78" pos:column="8">=<pos:position pos:line="78" pos:column="9"/></operator> <name pos:line="78" pos:column="10">newbuf<pos:position pos:line="78" pos:column="16"/></name></expr>;<pos:position pos:line="78" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name pos:line="79" pos:column="3">copy<pos:position pos:line="79" pos:column="7"/></name> <operator pos:line="79" pos:column="8">=<pos:position pos:line="79" pos:column="9"/></operator> <operator pos:line="79" pos:column="10">(<pos:position pos:line="79" pos:column="11"/></operator>struct <name pos:line="79" pos:column="18">hostent<pos:position pos:line="79" pos:column="25"/></name><operator pos:line="79" pos:column="25">*<pos:position pos:line="79" pos:column="26"/></operator><operator pos:line="79" pos:column="26">)<pos:position pos:line="79" pos:column="27"/></operator><name pos:line="79" pos:column="27">newbuf<pos:position pos:line="79" pos:column="33"/></name></expr>;<pos:position pos:line="79" pos:column="34"/></expr_stmt>

  <return pos:line="81" pos:column="3">return <expr><name pos:line="81" pos:column="10">copy<pos:position pos:line="81" pos:column="14"/></name></expr>;<pos:position pos:line="81" pos:column="15"/></return>
}<pos:position pos:line="82" pos:column="2"/></block></function></unit>
