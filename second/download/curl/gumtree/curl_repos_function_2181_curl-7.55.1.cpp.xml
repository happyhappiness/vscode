<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2181_curl-7.55.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">Curl_addrinfo<pos:position pos:line="1" pos:column="14"/></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type>
<name pos:line="2" pos:column="1">Curl_he2ai<pos:position pos:line="2" pos:column="11"/></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><specifier pos:line="2" pos:column="12">const<pos:position pos:line="2" pos:column="17"/></specifier> <name><name pos:line="2" pos:column="18">struct<pos:position pos:line="2" pos:column="24"/></name> <name pos:line="2" pos:column="25">hostent<pos:position pos:line="2" pos:column="32"/></name></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">he<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="38">int<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">port<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">Curl_addrinfo<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">ai<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">Curl_addrinfo<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">prevai<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><name pos:line="5" pos:column="27">NULL<pos:position pos:line="5" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">Curl_addrinfo<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">firstai<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name pos:line="6" pos:column="28">NULL<pos:position pos:line="6" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">sockaddr_in<pos:position pos:line="7" pos:column="21"/></name></name> <modifier pos:line="7" pos:column="22">*<pos:position pos:line="7" pos:column="23"/></modifier></type><name pos:line="7" pos:column="23">addr<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef<pos:position pos:line="8" pos:column="7"/></cpp:directive> <name pos:line="8" pos:column="8">ENABLE_IPV6<pos:position pos:line="8" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">sockaddr_in6<pos:position pos:line="9" pos:column="22"/></name></name> <modifier pos:line="9" pos:column="23">*<pos:position pos:line="9" pos:column="24"/></modifier></type><name pos:line="9" pos:column="24">addr6<pos:position pos:line="9" pos:column="29"/></name></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif<pos:position pos:line="10" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">CURLcode<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">result<pos:position pos:line="11" pos:column="18"/></name> <init pos:line="11" pos:column="19">= <expr><name pos:line="11" pos:column="21">CURLE_OK<pos:position pos:line="11" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">i<pos:position pos:line="12" pos:column="8"/></name></decl>;<pos:position pos:line="12" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">char<pos:position pos:line="13" pos:column="7"/></name> <modifier pos:line="13" pos:column="8">*<pos:position pos:line="13" pos:column="9"/></modifier></type><name pos:line="13" pos:column="9">curr<pos:position pos:line="13" pos:column="13"/></name></decl>;<pos:position pos:line="13" pos:column="14"/></decl_stmt>

  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><operator pos:line="15" pos:column="6">!<pos:position pos:line="15" pos:column="7"/></operator><name pos:line="15" pos:column="7">he<pos:position pos:line="15" pos:column="9"/></name></expr>)<pos:position pos:line="15" pos:column="10"/></condition><then pos:line="15" pos:column="10">
    <comment type="block" pos:line="16" pos:column="5">/* no input == no output! */</comment>
    <block type="pseudo"><return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">NULL<pos:position pos:line="17" pos:column="16"/></name></expr>;<pos:position pos:line="17" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="19" pos:column="3">DEBUGASSERT<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><operator pos:line="19" pos:column="15">(<pos:position pos:line="19" pos:column="16"/></operator><name><name pos:line="19" pos:column="16">he<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">-&gt;<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="20">h_name<pos:position pos:line="19" pos:column="26"/></name></name> <operator pos:line="19" pos:column="27">!=<pos:position pos:line="19" pos:column="29"/></operator> <name pos:line="19" pos:column="30">NULL<pos:position pos:line="19" pos:column="34"/></name><operator pos:line="19" pos:column="34">)<pos:position pos:line="19" pos:column="35"/></operator> <operator pos:line="19" pos:column="36">&amp;&amp;<pos:position pos:line="19" pos:column="46"/></operator> <operator pos:line="19" pos:column="39">(<pos:position pos:line="19" pos:column="40"/></operator><name><name pos:line="19" pos:column="40">he<pos:position pos:line="19" pos:column="42"/></name><operator pos:line="19" pos:column="42">-&gt;<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="44">h_addr_list<pos:position pos:line="19" pos:column="55"/></name></name> <operator pos:line="19" pos:column="56">!=<pos:position pos:line="19" pos:column="58"/></operator> <name pos:line="19" pos:column="59">NULL<pos:position pos:line="19" pos:column="63"/></name><operator pos:line="19" pos:column="63">)<pos:position pos:line="19" pos:column="64"/></operator></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="66"/></expr_stmt>

  <for pos:line="21" pos:column="3">for<control pos:line="21" pos:column="6">(<init><expr><name pos:line="21" pos:column="7">i<pos:position pos:line="21" pos:column="8"/></name><operator pos:line="21" pos:column="8">=<pos:position pos:line="21" pos:column="9"/></operator><literal type="number" pos:line="21" pos:column="9">0<pos:position pos:line="21" pos:column="10"/></literal></expr>;<pos:position pos:line="21" pos:column="11"/></init> <condition><expr><operator pos:line="21" pos:column="12">(<pos:position pos:line="21" pos:column="13"/></operator><name pos:line="21" pos:column="13">curr<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">=<pos:position pos:line="21" pos:column="19"/></operator> <name><name pos:line="21" pos:column="20">he<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">-&gt;<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="24">h_addr_list<pos:position pos:line="21" pos:column="35"/></name><index pos:line="21" pos:column="35">[<expr><name pos:line="21" pos:column="36">i<pos:position pos:line="21" pos:column="37"/></name></expr>]<pos:position pos:line="21" pos:column="38"/></index></name><operator pos:line="21" pos:column="38">)<pos:position pos:line="21" pos:column="39"/></operator> <operator pos:line="21" pos:column="40">!=<pos:position pos:line="21" pos:column="42"/></operator> <name pos:line="21" pos:column="43">NULL<pos:position pos:line="21" pos:column="47"/></name></expr>;<pos:position pos:line="21" pos:column="48"/></condition> <incr><expr><name pos:line="21" pos:column="49">i<pos:position pos:line="21" pos:column="50"/></name><operator pos:line="21" pos:column="50">++<pos:position pos:line="21" pos:column="52"/></operator></expr></incr>)<pos:position pos:line="21" pos:column="53"/></control> <block pos:line="21" pos:column="54">{

    <decl_stmt><decl><type><name pos:line="23" pos:column="5">size_t<pos:position pos:line="23" pos:column="11"/></name></type> <name pos:line="23" pos:column="12">ss_size<pos:position pos:line="23" pos:column="19"/></name></decl>;<pos:position pos:line="23" pos:column="20"/></decl_stmt>
<cpp:ifdef pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">ifdef<pos:position pos:line="24" pos:column="7"/></cpp:directive> <name pos:line="24" pos:column="8">ENABLE_IPV6<pos:position pos:line="24" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="25" pos:column="5">if<condition pos:line="25" pos:column="7">(<expr><name><name pos:line="25" pos:column="8">he<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">-&gt;<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="12">h_addrtype<pos:position pos:line="25" pos:column="22"/></name></name> <operator pos:line="25" pos:column="23">==<pos:position pos:line="25" pos:column="25"/></operator> <name pos:line="25" pos:column="26">AF_INET6<pos:position pos:line="25" pos:column="34"/></name></expr>)<pos:position pos:line="25" pos:column="35"/></condition><then pos:line="25" pos:column="35">
      <block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="7">ss_size<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <sizeof pos:line="26" pos:column="17">sizeof<argument_list pos:line="26" pos:column="23">(<argument><expr pos:line="26" pos:column="24">struct <name pos:line="26" pos:column="31">sockaddr_in6<pos:position pos:line="26" pos:column="43"/></name></expr></argument>)<pos:position pos:line="26" pos:column="44"/></argument_list></sizeof></expr>;<pos:position pos:line="26" pos:column="45"/></expr_stmt></block></then>
    <else pos:line="27" pos:column="5">else
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>
      <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="7">ss_size<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">=<pos:position pos:line="29" pos:column="16"/></operator> <sizeof pos:line="29" pos:column="17">sizeof<argument_list pos:line="29" pos:column="23">(<argument><expr pos:line="29" pos:column="24">struct <name pos:line="29" pos:column="31">sockaddr_in<pos:position pos:line="29" pos:column="42"/></name></expr></argument>)<pos:position pos:line="29" pos:column="43"/></argument_list></sizeof></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt></block></else></if>

    <expr_stmt><expr><name pos:line="31" pos:column="5">ai<pos:position pos:line="31" pos:column="7"/></name> <operator pos:line="31" pos:column="8">=<pos:position pos:line="31" pos:column="9"/></operator> <call><name pos:line="31" pos:column="10">calloc<pos:position pos:line="31" pos:column="16"/></name><argument_list pos:line="31" pos:column="16">(<argument><expr><literal type="number" pos:line="31" pos:column="17">1<pos:position pos:line="31" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="20">sizeof<argument_list pos:line="31" pos:column="26">(<argument><expr><name pos:line="31" pos:column="27">Curl_addrinfo<pos:position pos:line="31" pos:column="40"/></name></expr></argument>)<pos:position pos:line="31" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="43"/></expr_stmt>
    <if pos:line="32" pos:column="5">if<condition pos:line="32" pos:column="7">(<expr><operator pos:line="32" pos:column="8">!<pos:position pos:line="32" pos:column="9"/></operator><name pos:line="32" pos:column="9">ai<pos:position pos:line="32" pos:column="11"/></name></expr>)<pos:position pos:line="32" pos:column="12"/></condition><then pos:line="32" pos:column="12"> <block pos:line="32" pos:column="13">{
      <expr_stmt><expr><name pos:line="33" pos:column="7">result<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">=<pos:position pos:line="33" pos:column="15"/></operator> <name pos:line="33" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="33" pos:column="35"/></name></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt>
      <break pos:line="34" pos:column="7">break;<pos:position pos:line="34" pos:column="13"/></break>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="36" pos:column="5">ai<pos:position pos:line="36" pos:column="7"/></name><operator pos:line="36" pos:column="7">-&gt;<pos:position pos:line="36" pos:column="12"/></operator><name pos:line="36" pos:column="9">ai_canonname<pos:position pos:line="36" pos:column="21"/></name></name> <operator pos:line="36" pos:column="22">=<pos:position pos:line="36" pos:column="23"/></operator> <call><name pos:line="36" pos:column="24">strdup<pos:position pos:line="36" pos:column="30"/></name><argument_list pos:line="36" pos:column="30">(<argument><expr><name><name pos:line="36" pos:column="31">he<pos:position pos:line="36" pos:column="33"/></name><operator pos:line="36" pos:column="33">-&gt;<pos:position pos:line="36" pos:column="38"/></operator><name pos:line="36" pos:column="35">h_name<pos:position pos:line="36" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="43"/></expr_stmt>
    <if pos:line="37" pos:column="5">if<condition pos:line="37" pos:column="7">(<expr><operator pos:line="37" pos:column="8">!<pos:position pos:line="37" pos:column="9"/></operator><name><name pos:line="37" pos:column="9">ai<pos:position pos:line="37" pos:column="11"/></name><operator pos:line="37" pos:column="11">-&gt;<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="13">ai_canonname<pos:position pos:line="37" pos:column="25"/></name></name></expr>)<pos:position pos:line="37" pos:column="26"/></condition><then pos:line="37" pos:column="26"> <block pos:line="37" pos:column="27">{
      <expr_stmt><expr><name pos:line="38" pos:column="7">result<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">=<pos:position pos:line="38" pos:column="15"/></operator> <name pos:line="38" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="38" pos:column="35"/></name></expr>;<pos:position pos:line="38" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="39" pos:column="7">free<pos:position pos:line="39" pos:column="11"/></name><argument_list pos:line="39" pos:column="11">(<argument><expr><name pos:line="39" pos:column="12">ai<pos:position pos:line="39" pos:column="14"/></name></expr></argument>)<pos:position pos:line="39" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="16"/></expr_stmt>
      <break pos:line="40" pos:column="7">break;<pos:position pos:line="40" pos:column="13"/></break>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="42" pos:column="5">ai<pos:position pos:line="42" pos:column="7"/></name><operator pos:line="42" pos:column="7">-&gt;<pos:position pos:line="42" pos:column="12"/></operator><name pos:line="42" pos:column="9">ai_addr<pos:position pos:line="42" pos:column="16"/></name></name> <operator pos:line="42" pos:column="17">=<pos:position pos:line="42" pos:column="18"/></operator> <call><name pos:line="42" pos:column="19">calloc<pos:position pos:line="42" pos:column="25"/></name><argument_list pos:line="42" pos:column="25">(<argument><expr><literal type="number" pos:line="42" pos:column="26">1<pos:position pos:line="42" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="29">ss_size<pos:position pos:line="42" pos:column="36"/></name></expr></argument>)<pos:position pos:line="42" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="38"/></expr_stmt>
    <if pos:line="43" pos:column="5">if<condition pos:line="43" pos:column="7">(<expr><operator pos:line="43" pos:column="8">!<pos:position pos:line="43" pos:column="9"/></operator><name><name pos:line="43" pos:column="9">ai<pos:position pos:line="43" pos:column="11"/></name><operator pos:line="43" pos:column="11">-&gt;<pos:position pos:line="43" pos:column="16"/></operator><name pos:line="43" pos:column="13">ai_addr<pos:position pos:line="43" pos:column="20"/></name></name></expr>)<pos:position pos:line="43" pos:column="21"/></condition><then pos:line="43" pos:column="21"> <block pos:line="43" pos:column="22">{
      <expr_stmt><expr><name pos:line="44" pos:column="7">result<pos:position pos:line="44" pos:column="13"/></name> <operator pos:line="44" pos:column="14">=<pos:position pos:line="44" pos:column="15"/></operator> <name pos:line="44" pos:column="16">CURLE_OUT_OF_MEMORY<pos:position pos:line="44" pos:column="35"/></name></expr>;<pos:position pos:line="44" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="45" pos:column="7">free<pos:position pos:line="45" pos:column="11"/></name><argument_list pos:line="45" pos:column="11">(<argument><expr><name><name pos:line="45" pos:column="12">ai<pos:position pos:line="45" pos:column="14"/></name><operator pos:line="45" pos:column="14">-&gt;<pos:position pos:line="45" pos:column="19"/></operator><name pos:line="45" pos:column="16">ai_canonname<pos:position pos:line="45" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">free<pos:position pos:line="46" pos:column="11"/></name><argument_list pos:line="46" pos:column="11">(<argument><expr><name pos:line="46" pos:column="12">ai<pos:position pos:line="46" pos:column="14"/></name></expr></argument>)<pos:position pos:line="46" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="16"/></expr_stmt>
      <break pos:line="47" pos:column="7">break;<pos:position pos:line="47" pos:column="13"/></break>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>

    <if pos:line="50" pos:column="5">if<condition pos:line="50" pos:column="7">(<expr><operator pos:line="50" pos:column="8">!<pos:position pos:line="50" pos:column="9"/></operator><name pos:line="50" pos:column="9">firstai<pos:position pos:line="50" pos:column="16"/></name></expr>)<pos:position pos:line="50" pos:column="17"/></condition><then pos:line="50" pos:column="17">
      <comment type="block" pos:line="51" pos:column="7">/* store the pointer we want to return from this function */</comment>
      <block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="7">firstai<pos:position pos:line="52" pos:column="14"/></name> <operator pos:line="52" pos:column="15">=<pos:position pos:line="52" pos:column="16"/></operator> <name pos:line="52" pos:column="17">ai<pos:position pos:line="52" pos:column="19"/></name></expr>;<pos:position pos:line="52" pos:column="20"/></expr_stmt></block></then></if>

    <if pos:line="54" pos:column="5">if<condition pos:line="54" pos:column="7">(<expr><name pos:line="54" pos:column="8">prevai<pos:position pos:line="54" pos:column="14"/></name></expr>)<pos:position pos:line="54" pos:column="15"/></condition><then pos:line="54" pos:column="15">
      <comment type="block" pos:line="55" pos:column="7">/* make the previous entry point to this */</comment>
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="56" pos:column="7">prevai<pos:position pos:line="56" pos:column="13"/></name><operator pos:line="56" pos:column="13">-&gt;<pos:position pos:line="56" pos:column="18"/></operator><name pos:line="56" pos:column="15">ai_next<pos:position pos:line="56" pos:column="22"/></name></name> <operator pos:line="56" pos:column="23">=<pos:position pos:line="56" pos:column="24"/></operator> <name pos:line="56" pos:column="25">ai<pos:position pos:line="56" pos:column="27"/></name></expr>;<pos:position pos:line="56" pos:column="28"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="58" pos:column="5">ai<pos:position pos:line="58" pos:column="7"/></name><operator pos:line="58" pos:column="7">-&gt;<pos:position pos:line="58" pos:column="12"/></operator><name pos:line="58" pos:column="9">ai_family<pos:position pos:line="58" pos:column="18"/></name></name> <operator pos:line="58" pos:column="19">=<pos:position pos:line="58" pos:column="20"/></operator> <name><name pos:line="58" pos:column="21">he<pos:position pos:line="58" pos:column="23"/></name><operator pos:line="58" pos:column="23">-&gt;<pos:position pos:line="58" pos:column="28"/></operator><name pos:line="58" pos:column="25">h_addrtype<pos:position pos:line="58" pos:column="35"/></name></name></expr>;<pos:position pos:line="58" pos:column="36"/></expr_stmt>

    <comment type="block" pos:line="60" pos:column="5">/* we return all names as STREAM, so when using this address for TFTP
       the type must be ignored and conn-&gt;socktype be used instead! */</comment>
    <expr_stmt><expr><name><name pos:line="62" pos:column="5">ai<pos:position pos:line="62" pos:column="7"/></name><operator pos:line="62" pos:column="7">-&gt;<pos:position pos:line="62" pos:column="12"/></operator><name pos:line="62" pos:column="9">ai_socktype<pos:position pos:line="62" pos:column="20"/></name></name> <operator pos:line="62" pos:column="21">=<pos:position pos:line="62" pos:column="22"/></operator> <name pos:line="62" pos:column="23">SOCK_STREAM<pos:position pos:line="62" pos:column="34"/></name></expr>;<pos:position pos:line="62" pos:column="35"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="64" pos:column="5">ai<pos:position pos:line="64" pos:column="7"/></name><operator pos:line="64" pos:column="7">-&gt;<pos:position pos:line="64" pos:column="12"/></operator><name pos:line="64" pos:column="9">ai_addrlen<pos:position pos:line="64" pos:column="19"/></name></name> <operator pos:line="64" pos:column="20">=<pos:position pos:line="64" pos:column="21"/></operator> <operator pos:line="64" pos:column="22">(<pos:position pos:line="64" pos:column="23"/></operator><name pos:line="64" pos:column="23">curl_socklen_t<pos:position pos:line="64" pos:column="37"/></name><operator pos:line="64" pos:column="37">)<pos:position pos:line="64" pos:column="38"/></operator><name pos:line="64" pos:column="38">ss_size<pos:position pos:line="64" pos:column="45"/></name></expr>;<pos:position pos:line="64" pos:column="46"/></expr_stmt>

    <comment type="block" pos:line="66" pos:column="5">/* leave the rest of the struct filled with zero */</comment>

    <switch pos:line="68" pos:column="5">switch<condition pos:line="68" pos:column="11">(<expr><name><name pos:line="68" pos:column="12">ai<pos:position pos:line="68" pos:column="14"/></name><operator pos:line="68" pos:column="14">-&gt;<pos:position pos:line="68" pos:column="19"/></operator><name pos:line="68" pos:column="16">ai_family<pos:position pos:line="68" pos:column="25"/></name></name></expr>)<pos:position pos:line="68" pos:column="26"/></condition> <block pos:line="68" pos:column="27">{
    <case pos:line="69" pos:column="5">case <expr><name pos:line="69" pos:column="10">AF_INET<pos:position pos:line="69" pos:column="17"/></name></expr>:<pos:position pos:line="69" pos:column="18"/></case>
      <expr_stmt><expr><name pos:line="70" pos:column="7">addr<pos:position pos:line="70" pos:column="11"/></name> <operator pos:line="70" pos:column="12">=<pos:position pos:line="70" pos:column="13"/></operator> <operator pos:line="70" pos:column="14">(<pos:position pos:line="70" pos:column="15"/></operator><name pos:line="70" pos:column="15">void<pos:position pos:line="70" pos:column="19"/></name> <operator pos:line="70" pos:column="20">*<pos:position pos:line="70" pos:column="21"/></operator><operator pos:line="70" pos:column="21">)<pos:position pos:line="70" pos:column="22"/></operator><name><name pos:line="70" pos:column="22">ai<pos:position pos:line="70" pos:column="24"/></name><operator pos:line="70" pos:column="24">-&gt;<pos:position pos:line="70" pos:column="29"/></operator><name pos:line="70" pos:column="26">ai_addr<pos:position pos:line="70" pos:column="33"/></name></name></expr>;<pos:position pos:line="70" pos:column="34"/></expr_stmt> <comment type="block" pos:line="70" pos:column="35">/* storage area for this info */</comment>

      <expr_stmt><expr><call><name pos:line="72" pos:column="7">memcpy<pos:position pos:line="72" pos:column="13"/></name><argument_list pos:line="72" pos:column="13">(<argument><expr><operator pos:line="72" pos:column="14">&amp;<pos:position pos:line="72" pos:column="19"/></operator><name><name pos:line="72" pos:column="15">addr<pos:position pos:line="72" pos:column="19"/></name><operator pos:line="72" pos:column="19">-&gt;<pos:position pos:line="72" pos:column="24"/></operator><name pos:line="72" pos:column="21">sin_addr<pos:position pos:line="72" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="31">curr<pos:position pos:line="72" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="72" pos:column="37">sizeof<argument_list pos:line="72" pos:column="43">(<argument><expr pos:line="72" pos:column="44">struct <name pos:line="72" pos:column="51">in_addr<pos:position pos:line="72" pos:column="58"/></name></expr></argument>)<pos:position pos:line="72" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="72" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="61"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="73" pos:column="7">addr<pos:position pos:line="73" pos:column="11"/></name><operator pos:line="73" pos:column="11">-&gt;<pos:position pos:line="73" pos:column="16"/></operator><name pos:line="73" pos:column="13">sin_family<pos:position pos:line="73" pos:column="23"/></name></name> <operator pos:line="73" pos:column="24">=<pos:position pos:line="73" pos:column="25"/></operator> <call pos:line="73" pos:column="26">(<name pos:line="73" pos:column="27">unsigned<pos:position pos:line="73" pos:column="35"/></name> <name pos:line="73" pos:column="36">short<pos:position pos:line="73" pos:column="41"/></name>)<argument_list pos:line="73" pos:column="42">(<argument><expr><name><name pos:line="73" pos:column="43">he<pos:position pos:line="73" pos:column="45"/></name><operator pos:line="73" pos:column="45">-&gt;<pos:position pos:line="73" pos:column="50"/></operator><name pos:line="73" pos:column="47">h_addrtype<pos:position pos:line="73" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="73" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="59"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="74" pos:column="7">addr<pos:position pos:line="74" pos:column="11"/></name><operator pos:line="74" pos:column="11">-&gt;<pos:position pos:line="74" pos:column="16"/></operator><name pos:line="74" pos:column="13">sin_port<pos:position pos:line="74" pos:column="21"/></name></name> <operator pos:line="74" pos:column="22">=<pos:position pos:line="74" pos:column="23"/></operator> <call><name pos:line="74" pos:column="24">htons<pos:position pos:line="74" pos:column="29"/></name><argument_list pos:line="74" pos:column="29">(<argument><expr><operator pos:line="74" pos:column="30">(<pos:position pos:line="74" pos:column="31"/></operator><name pos:line="74" pos:column="31">unsigned<pos:position pos:line="74" pos:column="39"/></name> <name pos:line="74" pos:column="40">short<pos:position pos:line="74" pos:column="45"/></name><operator pos:line="74" pos:column="45">)<pos:position pos:line="74" pos:column="46"/></operator><name pos:line="74" pos:column="46">port<pos:position pos:line="74" pos:column="50"/></name></expr></argument>)<pos:position pos:line="74" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="52"/></expr_stmt>
      <break pos:line="75" pos:column="7">break;<pos:position pos:line="75" pos:column="13"/></break>

<cpp:ifdef pos:line="77" pos:column="1">#<cpp:directive pos:line="77" pos:column="2">ifdef<pos:position pos:line="77" pos:column="7"/></cpp:directive> <name pos:line="77" pos:column="8">ENABLE_IPV6<pos:position pos:line="77" pos:column="19"/></name></cpp:ifdef>
    <case pos:line="78" pos:column="5">case <expr><name pos:line="78" pos:column="10">AF_INET6<pos:position pos:line="78" pos:column="18"/></name></expr>:<pos:position pos:line="78" pos:column="19"/></case>
      <expr_stmt><expr><name pos:line="79" pos:column="7">addr6<pos:position pos:line="79" pos:column="12"/></name> <operator pos:line="79" pos:column="13">=<pos:position pos:line="79" pos:column="14"/></operator> <operator pos:line="79" pos:column="15">(<pos:position pos:line="79" pos:column="16"/></operator><name pos:line="79" pos:column="16">void<pos:position pos:line="79" pos:column="20"/></name> <operator pos:line="79" pos:column="21">*<pos:position pos:line="79" pos:column="22"/></operator><operator pos:line="79" pos:column="22">)<pos:position pos:line="79" pos:column="23"/></operator><name><name pos:line="79" pos:column="23">ai<pos:position pos:line="79" pos:column="25"/></name><operator pos:line="79" pos:column="25">-&gt;<pos:position pos:line="79" pos:column="30"/></operator><name pos:line="79" pos:column="27">ai_addr<pos:position pos:line="79" pos:column="34"/></name></name></expr>;<pos:position pos:line="79" pos:column="35"/></expr_stmt> <comment type="block" pos:line="79" pos:column="36">/* storage area for this info */</comment>

      <expr_stmt><expr><call><name pos:line="81" pos:column="7">memcpy<pos:position pos:line="81" pos:column="13"/></name><argument_list pos:line="81" pos:column="13">(<argument><expr><operator pos:line="81" pos:column="14">&amp;<pos:position pos:line="81" pos:column="19"/></operator><name><name pos:line="81" pos:column="15">addr6<pos:position pos:line="81" pos:column="20"/></name><operator pos:line="81" pos:column="20">-&gt;<pos:position pos:line="81" pos:column="25"/></operator><name pos:line="81" pos:column="22">sin6_addr<pos:position pos:line="81" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="33">curr<pos:position pos:line="81" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="81" pos:column="39">sizeof<argument_list pos:line="81" pos:column="45">(<argument><expr pos:line="81" pos:column="46">struct <name pos:line="81" pos:column="53">in6_addr<pos:position pos:line="81" pos:column="61"/></name></expr></argument>)<pos:position pos:line="81" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="81" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="64"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="82" pos:column="7">addr6<pos:position pos:line="82" pos:column="12"/></name><operator pos:line="82" pos:column="12">-&gt;<pos:position pos:line="82" pos:column="17"/></operator><name pos:line="82" pos:column="14">sin6_family<pos:position pos:line="82" pos:column="25"/></name></name> <operator pos:line="82" pos:column="26">=<pos:position pos:line="82" pos:column="27"/></operator> <call pos:line="82" pos:column="28">(<name pos:line="82" pos:column="29">unsigned<pos:position pos:line="82" pos:column="37"/></name> <name pos:line="82" pos:column="38">short<pos:position pos:line="82" pos:column="43"/></name>)<argument_list pos:line="82" pos:column="44">(<argument><expr><name><name pos:line="82" pos:column="45">he<pos:position pos:line="82" pos:column="47"/></name><operator pos:line="82" pos:column="47">-&gt;<pos:position pos:line="82" pos:column="52"/></operator><name pos:line="82" pos:column="49">h_addrtype<pos:position pos:line="82" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="61"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="83" pos:column="7">addr6<pos:position pos:line="83" pos:column="12"/></name><operator pos:line="83" pos:column="12">-&gt;<pos:position pos:line="83" pos:column="17"/></operator><name pos:line="83" pos:column="14">sin6_port<pos:position pos:line="83" pos:column="23"/></name></name> <operator pos:line="83" pos:column="24">=<pos:position pos:line="83" pos:column="25"/></operator> <call><name pos:line="83" pos:column="26">htons<pos:position pos:line="83" pos:column="31"/></name><argument_list pos:line="83" pos:column="31">(<argument><expr><operator pos:line="83" pos:column="32">(<pos:position pos:line="83" pos:column="33"/></operator><name pos:line="83" pos:column="33">unsigned<pos:position pos:line="83" pos:column="41"/></name> <name pos:line="83" pos:column="42">short<pos:position pos:line="83" pos:column="47"/></name><operator pos:line="83" pos:column="47">)<pos:position pos:line="83" pos:column="48"/></operator><name pos:line="83" pos:column="48">port<pos:position pos:line="83" pos:column="52"/></name></expr></argument>)<pos:position pos:line="83" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="54"/></expr_stmt>
      <break pos:line="84" pos:column="7">break;<pos:position pos:line="84" pos:column="13"/></break>
<cpp:endif pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">endif<pos:position pos:line="85" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="86" pos:column="6"/></block></switch>

    <expr_stmt><expr><name pos:line="88" pos:column="5">prevai<pos:position pos:line="88" pos:column="11"/></name> <operator pos:line="88" pos:column="12">=<pos:position pos:line="88" pos:column="13"/></operator> <name pos:line="88" pos:column="14">ai<pos:position pos:line="88" pos:column="16"/></name></expr>;<pos:position pos:line="88" pos:column="17"/></expr_stmt>
  }<pos:position pos:line="89" pos:column="4"/></block></for>

  <if pos:line="91" pos:column="3">if<condition pos:line="91" pos:column="5">(<expr><name pos:line="91" pos:column="6">result<pos:position pos:line="91" pos:column="12"/></name></expr>)<pos:position pos:line="91" pos:column="13"/></condition><then pos:line="91" pos:column="13"> <block pos:line="91" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="92" pos:column="5">Curl_freeaddrinfo<pos:position pos:line="92" pos:column="22"/></name><argument_list pos:line="92" pos:column="22">(<argument><expr><name pos:line="92" pos:column="23">firstai<pos:position pos:line="92" pos:column="30"/></name></expr></argument>)<pos:position pos:line="92" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="93" pos:column="5">firstai<pos:position pos:line="93" pos:column="12"/></name> <operator pos:line="93" pos:column="13">=<pos:position pos:line="93" pos:column="14"/></operator> <name pos:line="93" pos:column="15">NULL<pos:position pos:line="93" pos:column="19"/></name></expr>;<pos:position pos:line="93" pos:column="20"/></expr_stmt>
  }<pos:position pos:line="94" pos:column="4"/></block></then></if>

  <return pos:line="96" pos:column="3">return <expr><name pos:line="96" pos:column="10">firstai<pos:position pos:line="96" pos:column="17"/></name></expr>;<pos:position pos:line="96" pos:column="18"/></return>
}<pos:position pos:line="97" pos:column="2"/></block></function></unit>
