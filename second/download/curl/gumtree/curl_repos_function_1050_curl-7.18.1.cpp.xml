<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1050_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">telnet_do<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">connectdata<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">bool<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">done<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURLcode<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">code<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">SessionHandle<pos:position pos:line="4" pos:column="23"/></name></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">data<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><name><name pos:line="4" pos:column="32">conn<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">-&gt;<pos:position pos:line="4" pos:column="41"/></operator><name pos:line="4" pos:column="38">data<pos:position pos:line="4" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">curl_socket_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">sockfd<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><name><name pos:line="5" pos:column="26">conn<pos:position pos:line="5" pos:column="30"/></name><operator pos:line="5" pos:column="30">-&gt;<pos:position pos:line="5" pos:column="35"/></operator><name pos:line="5" pos:column="32">sock<pos:position pos:line="5" pos:column="36"/></name><index pos:line="5" pos:column="36">[<expr><name pos:line="5" pos:column="37">FIRSTSOCKET<pos:position pos:line="5" pos:column="48"/></name></expr>]<pos:position pos:line="5" pos:column="49"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="50"/></decl_stmt>
<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">USE_WINSOCK<pos:position pos:line="6" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">HMODULE<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">wsock2<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">WSOCK2_FUNC<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">close_event_func<pos:position pos:line="8" pos:column="31"/></name></decl>;<pos:position pos:line="8" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">WSOCK2_FUNC<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">create_event_func<pos:position pos:line="9" pos:column="32"/></name></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">WSOCK2_FUNC<pos:position pos:line="10" pos:column="14"/></name></type> <name pos:line="10" pos:column="15">event_select_func<pos:position pos:line="10" pos:column="32"/></name></decl>;<pos:position pos:line="10" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">WSOCK2_FUNC<pos:position pos:line="11" pos:column="14"/></name></type> <name pos:line="11" pos:column="15">enum_netevents_func<pos:position pos:line="11" pos:column="34"/></name></decl>;<pos:position pos:line="11" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">WSAEVENT<pos:position pos:line="12" pos:column="11"/></name></type> <name pos:line="12" pos:column="12">event_handle<pos:position pos:line="12" pos:column="24"/></name></decl>;<pos:position pos:line="12" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">WSANETWORKEVENTS<pos:position pos:line="13" pos:column="19"/></name></type> <name pos:line="13" pos:column="20">events<pos:position pos:line="13" pos:column="26"/></name></decl>;<pos:position pos:line="13" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">HANDLE<pos:position pos:line="14" pos:column="9"/></name></type> <name pos:line="14" pos:column="10">stdin_handle<pos:position pos:line="14" pos:column="22"/></name></decl>;<pos:position pos:line="14" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">HANDLE<pos:position pos:line="15" pos:column="9"/></name></type> <name><name pos:line="15" pos:column="10">objs<pos:position pos:line="15" pos:column="14"/></name><index pos:line="15" pos:column="14">[<expr><literal type="number" pos:line="15" pos:column="15">2<pos:position pos:line="15" pos:column="16"/></literal></expr>]<pos:position pos:line="15" pos:column="17"/></index></name></decl>;<pos:position pos:line="15" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="16" pos:column="3">DWORD<pos:position pos:line="16" pos:column="8"/></name></type>  <name pos:line="16" pos:column="10">obj_count<pos:position pos:line="16" pos:column="19"/></name></decl>;<pos:position pos:line="16" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">DWORD<pos:position pos:line="17" pos:column="8"/></name></type>  <name pos:line="17" pos:column="10">wait_timeout<pos:position pos:line="17" pos:column="22"/></name></decl>;<pos:position pos:line="17" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">DWORD<pos:position pos:line="18" pos:column="8"/></name></type> <name pos:line="18" pos:column="9">waitret<pos:position pos:line="18" pos:column="16"/></name></decl>;<pos:position pos:line="18" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">DWORD<pos:position pos:line="19" pos:column="8"/></name></type> <name pos:line="19" pos:column="9">readfile_read<pos:position pos:line="19" pos:column="22"/></name></decl>;<pos:position pos:line="19" pos:column="23"/></decl_stmt>
<cpp:else pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">else<pos:position pos:line="20" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">int<pos:position pos:line="21" pos:column="6"/></name></type> <name pos:line="21" pos:column="7">interval_ms<pos:position pos:line="21" pos:column="18"/></name></decl>;<pos:position pos:line="21" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="22" pos:column="3">struct<pos:position pos:line="22" pos:column="9"/></name> <name pos:line="22" pos:column="10">pollfd<pos:position pos:line="22" pos:column="16"/></name></name></type> <name><name pos:line="22" pos:column="17">pfd<pos:position pos:line="22" pos:column="20"/></name><index pos:line="22" pos:column="20">[<expr><literal type="number" pos:line="22" pos:column="21">2<pos:position pos:line="22" pos:column="22"/></literal></expr>]<pos:position pos:line="22" pos:column="23"/></index></name></decl>;<pos:position pos:line="22" pos:column="24"/></decl_stmt>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="24" pos:column="3">ssize_t<pos:position pos:line="24" pos:column="10"/></name></type> <name pos:line="24" pos:column="11">nread<pos:position pos:line="24" pos:column="16"/></name></decl>;<pos:position pos:line="24" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="25" pos:column="3">bool<pos:position pos:line="25" pos:column="7"/></name></type> <name pos:line="25" pos:column="8">keepon<pos:position pos:line="25" pos:column="14"/></name> <init pos:line="25" pos:column="15">= <expr><name pos:line="25" pos:column="17">TRUE<pos:position pos:line="25" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="25" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="26" pos:column="3">char<pos:position pos:line="26" pos:column="7"/></name> <modifier pos:line="26" pos:column="8">*<pos:position pos:line="26" pos:column="9"/></modifier></type><name pos:line="26" pos:column="9">buf<pos:position pos:line="26" pos:column="12"/></name> <init pos:line="26" pos:column="13">= <expr><name><name pos:line="26" pos:column="15">data<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">-&gt;<pos:position pos:line="26" pos:column="24"/></operator><name pos:line="26" pos:column="21">state<pos:position pos:line="26" pos:column="26"/></name><operator pos:line="26" pos:column="26">.<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="27">buffer<pos:position pos:line="26" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="26" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="27" pos:column="3">struct<pos:position pos:line="27" pos:column="9"/></name> <name pos:line="27" pos:column="10">TELNET<pos:position pos:line="27" pos:column="16"/></name></name> <modifier pos:line="27" pos:column="17">*<pos:position pos:line="27" pos:column="18"/></modifier></type><name pos:line="27" pos:column="18">tn<pos:position pos:line="27" pos:column="20"/></name></decl>;<pos:position pos:line="27" pos:column="21"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="29" pos:column="3">*<pos:position pos:line="29" pos:column="4"/></operator><name pos:line="29" pos:column="4">done<pos:position pos:line="29" pos:column="8"/></name> <operator pos:line="29" pos:column="9">=<pos:position pos:line="29" pos:column="10"/></operator> <name pos:line="29" pos:column="11">TRUE<pos:position pos:line="29" pos:column="15"/></name></expr>;<pos:position pos:line="29" pos:column="16"/></expr_stmt> <comment type="block" pos:line="29" pos:column="17">/* unconditionally */</comment>

  <expr_stmt><expr><name pos:line="31" pos:column="3">code<pos:position pos:line="31" pos:column="7"/></name> <operator pos:line="31" pos:column="8">=<pos:position pos:line="31" pos:column="9"/></operator> <call><name pos:line="31" pos:column="10">init_telnet<pos:position pos:line="31" pos:column="21"/></name><argument_list pos:line="31" pos:column="21">(<argument><expr><name pos:line="31" pos:column="22">conn<pos:position pos:line="31" pos:column="26"/></name></expr></argument>)<pos:position pos:line="31" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="28"/></expr_stmt>
  <if pos:line="32" pos:column="3">if<condition pos:line="32" pos:column="5">(<expr><name pos:line="32" pos:column="6">code<pos:position pos:line="32" pos:column="10"/></name></expr>)<pos:position pos:line="32" pos:column="11"/></condition><then pos:line="32" pos:column="11">
    <block type="pseudo"><return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">code<pos:position pos:line="33" pos:column="16"/></name></expr>;<pos:position pos:line="33" pos:column="17"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="35" pos:column="3">tn<pos:position pos:line="35" pos:column="5"/></name> <operator pos:line="35" pos:column="6">=<pos:position pos:line="35" pos:column="7"/></operator> <operator pos:line="35" pos:column="8">(<pos:position pos:line="35" pos:column="9"/></operator>struct <name pos:line="35" pos:column="16">TELNET<pos:position pos:line="35" pos:column="22"/></name> <operator pos:line="35" pos:column="23">*<pos:position pos:line="35" pos:column="24"/></operator><operator pos:line="35" pos:column="24">)<pos:position pos:line="35" pos:column="25"/></operator><name><name pos:line="35" pos:column="25">data<pos:position pos:line="35" pos:column="29"/></name><operator pos:line="35" pos:column="29">-&gt;<pos:position pos:line="35" pos:column="34"/></operator><name pos:line="35" pos:column="31">state<pos:position pos:line="35" pos:column="36"/></name><operator pos:line="35" pos:column="36">.<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="37">proto<pos:position pos:line="35" pos:column="42"/></name><operator pos:line="35" pos:column="42">.<pos:position pos:line="35" pos:column="43"/></operator><name pos:line="35" pos:column="43">telnet<pos:position pos:line="35" pos:column="49"/></name></name></expr>;<pos:position pos:line="35" pos:column="50"/></expr_stmt>

  <expr_stmt><expr><name pos:line="37" pos:column="3">code<pos:position pos:line="37" pos:column="7"/></name> <operator pos:line="37" pos:column="8">=<pos:position pos:line="37" pos:column="9"/></operator> <call><name pos:line="37" pos:column="10">check_telnet_options<pos:position pos:line="37" pos:column="30"/></name><argument_list pos:line="37" pos:column="30">(<argument><expr><name pos:line="37" pos:column="31">conn<pos:position pos:line="37" pos:column="35"/></name></expr></argument>)<pos:position pos:line="37" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt>
  <if pos:line="38" pos:column="3">if<condition pos:line="38" pos:column="5">(<expr><name pos:line="38" pos:column="6">code<pos:position pos:line="38" pos:column="10"/></name></expr>)<pos:position pos:line="38" pos:column="11"/></condition><then pos:line="38" pos:column="11">
    <block type="pseudo"><return pos:line="39" pos:column="5">return <expr><name pos:line="39" pos:column="12">code<pos:position pos:line="39" pos:column="16"/></name></expr>;<pos:position pos:line="39" pos:column="17"/></return></block></then></if>

<cpp:ifdef pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">ifdef<pos:position pos:line="41" pos:column="7"/></cpp:directive> <name pos:line="41" pos:column="8">USE_WINSOCK<pos:position pos:line="41" pos:column="19"/></name></cpp:ifdef>
  <comment type="block" pos:line="42" pos:column="3">/*
  ** This functionality only works with WinSock &gt;= 2.0.  So,
  ** make sure have it.
  */</comment>
  <expr_stmt><expr><name pos:line="46" pos:column="3">code<pos:position pos:line="46" pos:column="7"/></name> <operator pos:line="46" pos:column="8">=<pos:position pos:line="46" pos:column="9"/></operator> <call><name pos:line="46" pos:column="10">check_wsock2<pos:position pos:line="46" pos:column="22"/></name><argument_list pos:line="46" pos:column="22">(<argument><expr><name pos:line="46" pos:column="23">data<pos:position pos:line="46" pos:column="27"/></name></expr></argument>)<pos:position pos:line="46" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt>
  <if pos:line="47" pos:column="3">if<condition pos:line="47" pos:column="5">(<expr><name pos:line="47" pos:column="6">code<pos:position pos:line="47" pos:column="10"/></name></expr>)<pos:position pos:line="47" pos:column="11"/></condition><then pos:line="47" pos:column="11">
    <block type="pseudo"><return pos:line="48" pos:column="5">return <expr><name pos:line="48" pos:column="12">code<pos:position pos:line="48" pos:column="16"/></name></expr>;<pos:position pos:line="48" pos:column="17"/></return></block></then></if>

  <comment type="block" pos:line="50" pos:column="3">/* OK, so we have WinSock 2.0.  We need to dynamically */</comment>
  <comment type="block" pos:line="51" pos:column="3">/* load ws2_32.dll and get the function pointers we need. */</comment>
  <expr_stmt><expr><name pos:line="52" pos:column="3">wsock2<pos:position pos:line="52" pos:column="9"/></name> <operator pos:line="52" pos:column="10">=<pos:position pos:line="52" pos:column="11"/></operator> <call><name pos:line="52" pos:column="12">LoadLibrary<pos:position pos:line="52" pos:column="23"/></name><argument_list pos:line="52" pos:column="23">(<argument><expr><literal type="string" pos:line="52" pos:column="24">"WS2_32.DLL"<pos:position pos:line="52" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="38"/></expr_stmt>
  <if pos:line="53" pos:column="3">if<condition pos:line="53" pos:column="5">(<expr><name pos:line="53" pos:column="6">wsock2<pos:position pos:line="53" pos:column="12"/></name> <operator pos:line="53" pos:column="13">==<pos:position pos:line="53" pos:column="15"/></operator> <name pos:line="53" pos:column="16">NULL<pos:position pos:line="53" pos:column="20"/></name></expr>)<pos:position pos:line="53" pos:column="21"/></condition><then pos:line="53" pos:column="21"> <block pos:line="53" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">failf<pos:position pos:line="54" pos:column="10"/></name><argument_list pos:line="54" pos:column="10">(<argument><expr><name pos:line="54" pos:column="11">data<pos:position pos:line="54" pos:column="15"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="54" pos:column="16">"failed to load WS2_32.DLL (%d)"<pos:position pos:line="54" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="50">ERRNO<pos:position pos:line="54" pos:column="55"/></name></expr></argument>)<pos:position pos:line="54" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="57"/></expr_stmt>
    <return pos:line="55" pos:column="5">return <expr><name pos:line="55" pos:column="12">CURLE_FAILED_INIT<pos:position pos:line="55" pos:column="29"/></name></expr>;<pos:position pos:line="55" pos:column="30"/></return>
  }<pos:position pos:line="56" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="58" pos:column="3">/* Grab a pointer to WSACreateEvent */</comment>
  <expr_stmt><expr><name pos:line="59" pos:column="3">create_event_func<pos:position pos:line="59" pos:column="20"/></name> <operator pos:line="59" pos:column="21">=<pos:position pos:line="59" pos:column="22"/></operator> <call><name pos:line="59" pos:column="23">GetProcAddress<pos:position pos:line="59" pos:column="37"/></name><argument_list pos:line="59" pos:column="37">(<argument><expr><name pos:line="59" pos:column="38">wsock2<pos:position pos:line="59" pos:column="44"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="59" pos:column="45">"WSACreateEvent"<pos:position pos:line="59" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="63"/></expr_stmt>
  <if pos:line="60" pos:column="3">if<condition pos:line="60" pos:column="5">(<expr><name pos:line="60" pos:column="6">create_event_func<pos:position pos:line="60" pos:column="23"/></name> <operator pos:line="60" pos:column="24">==<pos:position pos:line="60" pos:column="26"/></operator> <name pos:line="60" pos:column="27">NULL<pos:position pos:line="60" pos:column="31"/></name></expr>)<pos:position pos:line="60" pos:column="32"/></condition><then pos:line="60" pos:column="32"> <block pos:line="60" pos:column="33">{
    <expr_stmt><expr><call><name pos:line="61" pos:column="5">failf<pos:position pos:line="61" pos:column="10"/></name><argument_list pos:line="61" pos:column="10">(<argument><expr><name pos:line="61" pos:column="11">data<pos:position pos:line="61" pos:column="15"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="61" pos:column="16">"failed to find WSACreateEvent function (%d)"<pos:position pos:line="61" pos:column="61"/></literal></expr></argument>,
          <argument><expr><name pos:line="62" pos:column="11">ERRNO<pos:position pos:line="62" pos:column="16"/></name></expr></argument>)<pos:position pos:line="62" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="63" pos:column="5">FreeLibrary<pos:position pos:line="63" pos:column="16"/></name><argument_list pos:line="63" pos:column="16">(<argument><expr><name pos:line="63" pos:column="17">wsock2<pos:position pos:line="63" pos:column="23"/></name></expr></argument>)<pos:position pos:line="63" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="25"/></expr_stmt>
    <return pos:line="64" pos:column="5">return <expr><name pos:line="64" pos:column="12">CURLE_FAILED_INIT<pos:position pos:line="64" pos:column="29"/></name></expr>;<pos:position pos:line="64" pos:column="30"/></return>
  }<pos:position pos:line="65" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="67" pos:column="3">/* And WSACloseEvent */</comment>
  <expr_stmt><expr><name pos:line="68" pos:column="3">close_event_func<pos:position pos:line="68" pos:column="19"/></name> <operator pos:line="68" pos:column="20">=<pos:position pos:line="68" pos:column="21"/></operator> <call><name pos:line="68" pos:column="22">GetProcAddress<pos:position pos:line="68" pos:column="36"/></name><argument_list pos:line="68" pos:column="36">(<argument><expr><name pos:line="68" pos:column="37">wsock2<pos:position pos:line="68" pos:column="43"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="68" pos:column="44">"WSACloseEvent"<pos:position pos:line="68" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="61"/></expr_stmt>
  <if pos:line="69" pos:column="3">if<condition pos:line="69" pos:column="5">(<expr><name pos:line="69" pos:column="6">close_event_func<pos:position pos:line="69" pos:column="22"/></name> <operator pos:line="69" pos:column="23">==<pos:position pos:line="69" pos:column="25"/></operator> <name pos:line="69" pos:column="26">NULL<pos:position pos:line="69" pos:column="30"/></name></expr>)<pos:position pos:line="69" pos:column="31"/></condition><then pos:line="69" pos:column="31"> <block pos:line="69" pos:column="32">{
    <expr_stmt><expr><call><name pos:line="70" pos:column="5">failf<pos:position pos:line="70" pos:column="10"/></name><argument_list pos:line="70" pos:column="10">(<argument><expr><name pos:line="70" pos:column="11">data<pos:position pos:line="70" pos:column="15"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="70" pos:column="16">"failed to find WSACloseEvent function (%d)"<pos:position pos:line="70" pos:column="60"/></literal></expr></argument>,
          <argument><expr><name pos:line="71" pos:column="11">ERRNO<pos:position pos:line="71" pos:column="16"/></name></expr></argument>)<pos:position pos:line="71" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="72" pos:column="5">FreeLibrary<pos:position pos:line="72" pos:column="16"/></name><argument_list pos:line="72" pos:column="16">(<argument><expr><name pos:line="72" pos:column="17">wsock2<pos:position pos:line="72" pos:column="23"/></name></expr></argument>)<pos:position pos:line="72" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="25"/></expr_stmt>
    <return pos:line="73" pos:column="5">return <expr><name pos:line="73" pos:column="12">CURLE_FAILED_INIT<pos:position pos:line="73" pos:column="29"/></name></expr>;<pos:position pos:line="73" pos:column="30"/></return>
  }<pos:position pos:line="74" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="76" pos:column="3">/* And WSAEventSelect */</comment>
  <expr_stmt><expr><name pos:line="77" pos:column="3">event_select_func<pos:position pos:line="77" pos:column="20"/></name> <operator pos:line="77" pos:column="21">=<pos:position pos:line="77" pos:column="22"/></operator> <call><name pos:line="77" pos:column="23">GetProcAddress<pos:position pos:line="77" pos:column="37"/></name><argument_list pos:line="77" pos:column="37">(<argument><expr><name pos:line="77" pos:column="38">wsock2<pos:position pos:line="77" pos:column="44"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="77" pos:column="45">"WSAEventSelect"<pos:position pos:line="77" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="63"/></expr_stmt>
  <if pos:line="78" pos:column="3">if<condition pos:line="78" pos:column="5">(<expr><name pos:line="78" pos:column="6">event_select_func<pos:position pos:line="78" pos:column="23"/></name> <operator pos:line="78" pos:column="24">==<pos:position pos:line="78" pos:column="26"/></operator> <name pos:line="78" pos:column="27">NULL<pos:position pos:line="78" pos:column="31"/></name></expr>)<pos:position pos:line="78" pos:column="32"/></condition><then pos:line="78" pos:column="32"> <block pos:line="78" pos:column="33">{
    <expr_stmt><expr><call><name pos:line="79" pos:column="5">failf<pos:position pos:line="79" pos:column="10"/></name><argument_list pos:line="79" pos:column="10">(<argument><expr><name pos:line="79" pos:column="11">data<pos:position pos:line="79" pos:column="15"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="79" pos:column="16">"failed to find WSAEventSelect function (%d)"<pos:position pos:line="79" pos:column="61"/></literal></expr></argument>,
          <argument><expr><name pos:line="80" pos:column="11">ERRNO<pos:position pos:line="80" pos:column="16"/></name></expr></argument>)<pos:position pos:line="80" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="81" pos:column="5">FreeLibrary<pos:position pos:line="81" pos:column="16"/></name><argument_list pos:line="81" pos:column="16">(<argument><expr><name pos:line="81" pos:column="17">wsock2<pos:position pos:line="81" pos:column="23"/></name></expr></argument>)<pos:position pos:line="81" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="25"/></expr_stmt>
    <return pos:line="82" pos:column="5">return <expr><name pos:line="82" pos:column="12">CURLE_FAILED_INIT<pos:position pos:line="82" pos:column="29"/></name></expr>;<pos:position pos:line="82" pos:column="30"/></return>
  }<pos:position pos:line="83" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="85" pos:column="3">/* And WSAEnumNetworkEvents */</comment>
  <expr_stmt><expr><name pos:line="86" pos:column="3">enum_netevents_func<pos:position pos:line="86" pos:column="22"/></name> <operator pos:line="86" pos:column="23">=<pos:position pos:line="86" pos:column="24"/></operator> <call><name pos:line="86" pos:column="25">GetProcAddress<pos:position pos:line="86" pos:column="39"/></name><argument_list pos:line="86" pos:column="39">(<argument><expr><name pos:line="86" pos:column="40">wsock2<pos:position pos:line="86" pos:column="46"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="86" pos:column="47">"WSAEnumNetworkEvents"<pos:position pos:line="86" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="71"/></expr_stmt>
  <if pos:line="87" pos:column="3">if<condition pos:line="87" pos:column="5">(<expr><name pos:line="87" pos:column="6">enum_netevents_func<pos:position pos:line="87" pos:column="25"/></name> <operator pos:line="87" pos:column="26">==<pos:position pos:line="87" pos:column="28"/></operator> <name pos:line="87" pos:column="29">NULL<pos:position pos:line="87" pos:column="33"/></name></expr>)<pos:position pos:line="87" pos:column="34"/></condition><then pos:line="87" pos:column="34"> <block pos:line="87" pos:column="35">{
    <expr_stmt><expr><call><name pos:line="88" pos:column="5">failf<pos:position pos:line="88" pos:column="10"/></name><argument_list pos:line="88" pos:column="10">(<argument><expr><name pos:line="88" pos:column="11">data<pos:position pos:line="88" pos:column="15"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="88" pos:column="16">"failed to find WSAEnumNetworkEvents function (%d)"<pos:position pos:line="88" pos:column="67"/></literal></expr></argument>,
          <argument><expr><name pos:line="89" pos:column="11">ERRNO<pos:position pos:line="89" pos:column="16"/></name></expr></argument>)<pos:position pos:line="89" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="90" pos:column="5">FreeLibrary<pos:position pos:line="90" pos:column="16"/></name><argument_list pos:line="90" pos:column="16">(<argument><expr><name pos:line="90" pos:column="17">wsock2<pos:position pos:line="90" pos:column="23"/></name></expr></argument>)<pos:position pos:line="90" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="25"/></expr_stmt>
    <return pos:line="91" pos:column="5">return <expr><name pos:line="91" pos:column="12">CURLE_FAILED_INIT<pos:position pos:line="91" pos:column="29"/></name></expr>;<pos:position pos:line="91" pos:column="30"/></return>
  }<pos:position pos:line="92" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="94" pos:column="3">/* We want to wait for both stdin and the socket. Since
  ** the select() function in winsock only works on sockets
  ** we have to use the WaitForMultipleObjects() call.
  */</comment>

  <comment type="block" pos:line="99" pos:column="3">/* First, create a sockets event object */</comment>
  <expr_stmt><expr><name pos:line="100" pos:column="3">event_handle<pos:position pos:line="100" pos:column="15"/></name> <operator pos:line="100" pos:column="16">=<pos:position pos:line="100" pos:column="17"/></operator> <operator pos:line="100" pos:column="18">(<pos:position pos:line="100" pos:column="19"/></operator><name pos:line="100" pos:column="19">WSAEVENT<pos:position pos:line="100" pos:column="27"/></name><operator pos:line="100" pos:column="27">)<pos:position pos:line="100" pos:column="28"/></operator><call><name pos:line="100" pos:column="28">create_event_func<pos:position pos:line="100" pos:column="45"/></name><argument_list pos:line="100" pos:column="45">()<pos:position pos:line="100" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="48"/></expr_stmt>
  <if pos:line="101" pos:column="3">if<condition pos:line="101" pos:column="5">(<expr><name pos:line="101" pos:column="6">event_handle<pos:position pos:line="101" pos:column="18"/></name> <operator pos:line="101" pos:column="19">==<pos:position pos:line="101" pos:column="21"/></operator> <name pos:line="101" pos:column="22">WSA_INVALID_EVENT<pos:position pos:line="101" pos:column="39"/></name></expr>)<pos:position pos:line="101" pos:column="40"/></condition><then pos:line="101" pos:column="40"> <block pos:line="101" pos:column="41">{
    <expr_stmt><expr><call><name pos:line="102" pos:column="5">failf<pos:position pos:line="102" pos:column="10"/></name><argument_list pos:line="102" pos:column="10">(<argument><expr><name pos:line="102" pos:column="11">data<pos:position pos:line="102" pos:column="15"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="102" pos:column="16">"WSACreateEvent failed (%d)"<pos:position pos:line="102" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="102" pos:column="46">SOCKERRNO<pos:position pos:line="102" pos:column="55"/></name></expr></argument>)<pos:position pos:line="102" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="103" pos:column="5">FreeLibrary<pos:position pos:line="103" pos:column="16"/></name><argument_list pos:line="103" pos:column="16">(<argument><expr><name pos:line="103" pos:column="17">wsock2<pos:position pos:line="103" pos:column="23"/></name></expr></argument>)<pos:position pos:line="103" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="25"/></expr_stmt>
    <return pos:line="104" pos:column="5">return <expr><name pos:line="104" pos:column="12">CURLE_FAILED_INIT<pos:position pos:line="104" pos:column="29"/></name></expr>;<pos:position pos:line="104" pos:column="30"/></return>
  }<pos:position pos:line="105" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="107" pos:column="3">/* The get the Windows file handle for stdin */</comment>
  <expr_stmt><expr><name pos:line="108" pos:column="3">stdin_handle<pos:position pos:line="108" pos:column="15"/></name> <operator pos:line="108" pos:column="16">=<pos:position pos:line="108" pos:column="17"/></operator> <call><name pos:line="108" pos:column="18">GetStdHandle<pos:position pos:line="108" pos:column="30"/></name><argument_list pos:line="108" pos:column="30">(<argument><expr><name pos:line="108" pos:column="31">STD_INPUT_HANDLE<pos:position pos:line="108" pos:column="47"/></name></expr></argument>)<pos:position pos:line="108" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="49"/></expr_stmt>

  <comment type="block" pos:line="110" pos:column="3">/* Create the list of objects to wait for */</comment>
  <expr_stmt><expr><name><name pos:line="111" pos:column="3">objs<pos:position pos:line="111" pos:column="7"/></name><index pos:line="111" pos:column="7">[<expr><literal type="number" pos:line="111" pos:column="8">0<pos:position pos:line="111" pos:column="9"/></literal></expr>]<pos:position pos:line="111" pos:column="10"/></index></name> <operator pos:line="111" pos:column="11">=<pos:position pos:line="111" pos:column="12"/></operator> <name pos:line="111" pos:column="13">event_handle<pos:position pos:line="111" pos:column="25"/></name></expr>;<pos:position pos:line="111" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="112" pos:column="3">objs<pos:position pos:line="112" pos:column="7"/></name><index pos:line="112" pos:column="7">[<expr><literal type="number" pos:line="112" pos:column="8">1<pos:position pos:line="112" pos:column="9"/></literal></expr>]<pos:position pos:line="112" pos:column="10"/></index></name> <operator pos:line="112" pos:column="11">=<pos:position pos:line="112" pos:column="12"/></operator> <name pos:line="112" pos:column="13">stdin_handle<pos:position pos:line="112" pos:column="25"/></name></expr>;<pos:position pos:line="112" pos:column="26"/></expr_stmt>

  <comment type="block" pos:line="114" pos:column="3">/* Tell winsock what events we want to listen to */</comment>
  <if pos:line="115" pos:column="3">if<condition pos:line="115" pos:column="5">(<expr><call><name pos:line="115" pos:column="6">event_select_func<pos:position pos:line="115" pos:column="23"/></name><argument_list pos:line="115" pos:column="23">(<argument><expr><name pos:line="115" pos:column="24">sockfd<pos:position pos:line="115" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="32">event_handle<pos:position pos:line="115" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="46">FD_READ<pos:position pos:line="115" pos:column="53"/></name><operator pos:line="115" pos:column="53">|<pos:position pos:line="115" pos:column="54"/></operator><name pos:line="115" pos:column="54">FD_CLOSE<pos:position pos:line="115" pos:column="62"/></name></expr></argument>)<pos:position pos:line="115" pos:column="63"/></argument_list></call> <operator pos:line="115" pos:column="64">==<pos:position pos:line="115" pos:column="66"/></operator> <name pos:line="115" pos:column="67">SOCKET_ERROR<pos:position pos:line="115" pos:column="79"/></name></expr>)<pos:position pos:line="115" pos:column="80"/></condition><then pos:line="115" pos:column="80"> <block pos:line="115" pos:column="81">{
    <expr_stmt><expr><call><name pos:line="116" pos:column="5">close_event_func<pos:position pos:line="116" pos:column="21"/></name><argument_list pos:line="116" pos:column="21">(<argument><expr><name pos:line="116" pos:column="22">event_handle<pos:position pos:line="116" pos:column="34"/></name></expr></argument>)<pos:position pos:line="116" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="117" pos:column="5">FreeLibrary<pos:position pos:line="117" pos:column="16"/></name><argument_list pos:line="117" pos:column="16">(<argument><expr><name pos:line="117" pos:column="17">wsock2<pos:position pos:line="117" pos:column="23"/></name></expr></argument>)<pos:position pos:line="117" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="25"/></expr_stmt>
    <return pos:line="118" pos:column="5">return <expr><literal type="number" pos:line="118" pos:column="12">0<pos:position pos:line="118" pos:column="13"/></literal></expr>;<pos:position pos:line="118" pos:column="14"/></return>
  }<pos:position pos:line="119" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="121" pos:column="3">/* If stdin_handle is a pipe, use PeekNamedPipe() method to check it,
     else use the old WaitForMultipleObjects() way */</comment>
  <if pos:line="123" pos:column="3">if<condition pos:line="123" pos:column="5">(<expr><call><name pos:line="123" pos:column="6">GetFileType<pos:position pos:line="123" pos:column="17"/></name><argument_list pos:line="123" pos:column="17">(<argument><expr><name pos:line="123" pos:column="18">stdin_handle<pos:position pos:line="123" pos:column="30"/></name></expr></argument>)<pos:position pos:line="123" pos:column="31"/></argument_list></call> <operator pos:line="123" pos:column="32">==<pos:position pos:line="123" pos:column="34"/></operator> <name pos:line="123" pos:column="35">FILE_TYPE_PIPE<pos:position pos:line="123" pos:column="49"/></name></expr>)<pos:position pos:line="123" pos:column="50"/></condition><then pos:line="123" pos:column="50"> <block pos:line="123" pos:column="51">{
    <comment type="block" pos:line="124" pos:column="5">/* Don't wait for stdin_handle, just wait for event_handle */</comment>
    <expr_stmt><expr><name pos:line="125" pos:column="5">obj_count<pos:position pos:line="125" pos:column="14"/></name> <operator pos:line="125" pos:column="15">=<pos:position pos:line="125" pos:column="16"/></operator> <literal type="number" pos:line="125" pos:column="17">1<pos:position pos:line="125" pos:column="18"/></literal></expr>;<pos:position pos:line="125" pos:column="19"/></expr_stmt>
    <comment type="block" pos:line="126" pos:column="5">/* Check stdin_handle per 100 milliseconds */</comment>
    <expr_stmt><expr><name pos:line="127" pos:column="5">wait_timeout<pos:position pos:line="127" pos:column="17"/></name> <operator pos:line="127" pos:column="18">=<pos:position pos:line="127" pos:column="19"/></operator> <literal type="number" pos:line="127" pos:column="20">100<pos:position pos:line="127" pos:column="23"/></literal></expr>;<pos:position pos:line="127" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="128" pos:column="4"/></block></then> <else pos:line="128" pos:column="5">else <block pos:line="128" pos:column="10">{
    <expr_stmt><expr><name pos:line="129" pos:column="5">obj_count<pos:position pos:line="129" pos:column="14"/></name> <operator pos:line="129" pos:column="15">=<pos:position pos:line="129" pos:column="16"/></operator> <literal type="number" pos:line="129" pos:column="17">2<pos:position pos:line="129" pos:column="18"/></literal></expr>;<pos:position pos:line="129" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="130" pos:column="5">wait_timeout<pos:position pos:line="130" pos:column="17"/></name> <operator pos:line="130" pos:column="18">=<pos:position pos:line="130" pos:column="19"/></operator> <name pos:line="130" pos:column="20">INFINITE<pos:position pos:line="130" pos:column="28"/></name></expr>;<pos:position pos:line="130" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="131" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="133" pos:column="3">/* Keep on listening and act on events */</comment>
  <while pos:line="134" pos:column="3">while<condition pos:line="134" pos:column="8">(<expr><name pos:line="134" pos:column="9">keepon<pos:position pos:line="134" pos:column="15"/></name></expr>)<pos:position pos:line="134" pos:column="16"/></condition> <block pos:line="134" pos:column="17">{
    <expr_stmt><expr><name pos:line="135" pos:column="5">waitret<pos:position pos:line="135" pos:column="12"/></name> <operator pos:line="135" pos:column="13">=<pos:position pos:line="135" pos:column="14"/></operator> <call><name pos:line="135" pos:column="15">WaitForMultipleObjects<pos:position pos:line="135" pos:column="37"/></name><argument_list pos:line="135" pos:column="37">(<argument><expr><name pos:line="135" pos:column="38">obj_count<pos:position pos:line="135" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="49">objs<pos:position pos:line="135" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="55">FALSE<pos:position pos:line="135" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="62">wait_timeout<pos:position pos:line="135" pos:column="74"/></name></expr></argument>)<pos:position pos:line="135" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="76"/></expr_stmt>
    <switch pos:line="136" pos:column="5">switch<condition pos:line="136" pos:column="11">(<expr><name pos:line="136" pos:column="12">waitret<pos:position pos:line="136" pos:column="19"/></name></expr>)<pos:position pos:line="136" pos:column="20"/></condition> <block pos:line="136" pos:column="21">{
    <case pos:line="137" pos:column="5">case <expr><name pos:line="137" pos:column="10">WAIT_TIMEOUT<pos:position pos:line="137" pos:column="22"/></name></expr>:<pos:position pos:line="137" pos:column="23"/></case>
    <block pos:line="138" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="139" pos:column="7">unsigned<pos:position pos:line="139" pos:column="15"/></name> <name pos:line="139" pos:column="16">char<pos:position pos:line="139" pos:column="20"/></name></type> <name><name pos:line="139" pos:column="21">outbuf<pos:position pos:line="139" pos:column="27"/></name><index pos:line="139" pos:column="27">[<expr><literal type="number" pos:line="139" pos:column="28">2<pos:position pos:line="139" pos:column="29"/></literal></expr>]<pos:position pos:line="139" pos:column="30"/></index></name></decl>;<pos:position pos:line="139" pos:column="31"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="140" pos:column="7">int<pos:position pos:line="140" pos:column="10"/></name></type> <name pos:line="140" pos:column="11">out_count<pos:position pos:line="140" pos:column="20"/></name> <init pos:line="140" pos:column="21">= <expr><literal type="number" pos:line="140" pos:column="23">0<pos:position pos:line="140" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="140" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="141" pos:column="7">ssize_t<pos:position pos:line="141" pos:column="14"/></name></type> <name pos:line="141" pos:column="15">bytes_written<pos:position pos:line="141" pos:column="28"/></name></decl>;<pos:position pos:line="141" pos:column="29"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="142" pos:column="7">char<pos:position pos:line="142" pos:column="11"/></name> <modifier pos:line="142" pos:column="12">*<pos:position pos:line="142" pos:column="13"/></modifier></type><name pos:line="142" pos:column="13">buffer<pos:position pos:line="142" pos:column="19"/></name> <init pos:line="142" pos:column="20">= <expr><name pos:line="142" pos:column="22">buf<pos:position pos:line="142" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="142" pos:column="26"/></decl_stmt>

      <while pos:line="144" pos:column="7">while<condition pos:line="144" pos:column="12">(<expr><literal type="number" pos:line="144" pos:column="13">1<pos:position pos:line="144" pos:column="14"/></literal></expr>)<pos:position pos:line="144" pos:column="15"/></condition> <block pos:line="144" pos:column="16">{
        <if pos:line="145" pos:column="9">if<condition pos:line="145" pos:column="11">(<expr><operator pos:line="145" pos:column="12">!<pos:position pos:line="145" pos:column="13"/></operator><call><name pos:line="145" pos:column="13">PeekNamedPipe<pos:position pos:line="145" pos:column="26"/></name><argument_list pos:line="145" pos:column="26">(<argument><expr><name pos:line="145" pos:column="27">stdin_handle<pos:position pos:line="145" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="41">NULL<pos:position pos:line="145" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="145" pos:column="47">0<pos:position pos:line="145" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="145" pos:column="50">NULL<pos:position pos:line="145" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="145" pos:column="56">&amp;<pos:position pos:line="145" pos:column="61"/></operator><name pos:line="145" pos:column="57">readfile_read<pos:position pos:line="145" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="72">NULL<pos:position pos:line="145" pos:column="76"/></name></expr></argument>)<pos:position pos:line="145" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="145" pos:column="78"/></condition><then pos:line="145" pos:column="78"> <block pos:line="145" pos:column="79">{
          <expr_stmt><expr><name pos:line="146" pos:column="11">keepon<pos:position pos:line="146" pos:column="17"/></name> <operator pos:line="146" pos:column="18">=<pos:position pos:line="146" pos:column="19"/></operator> <name pos:line="146" pos:column="20">FALSE<pos:position pos:line="146" pos:column="25"/></name></expr>;<pos:position pos:line="146" pos:column="26"/></expr_stmt>
          <break pos:line="147" pos:column="11">break;<pos:position pos:line="147" pos:column="17"/></break>
        }<pos:position pos:line="148" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="149" pos:column="9">nread<pos:position pos:line="149" pos:column="14"/></name> <operator pos:line="149" pos:column="15">=<pos:position pos:line="149" pos:column="16"/></operator> <name pos:line="149" pos:column="17">readfile_read<pos:position pos:line="149" pos:column="30"/></name></expr>;<pos:position pos:line="149" pos:column="31"/></expr_stmt>

        <if pos:line="151" pos:column="9">if<condition pos:line="151" pos:column="11">(<expr><operator pos:line="151" pos:column="12">!<pos:position pos:line="151" pos:column="13"/></operator><name pos:line="151" pos:column="13">nread<pos:position pos:line="151" pos:column="18"/></name></expr>)<pos:position pos:line="151" pos:column="19"/></condition><then pos:line="151" pos:column="19">
          <block type="pseudo"><break pos:line="152" pos:column="11">break;<pos:position pos:line="152" pos:column="17"/></break></block></then></if>

        <if pos:line="154" pos:column="9">if<condition pos:line="154" pos:column="11">(<expr><operator pos:line="154" pos:column="12">!<pos:position pos:line="154" pos:column="13"/></operator><call><name pos:line="154" pos:column="13">ReadFile<pos:position pos:line="154" pos:column="21"/></name><argument_list pos:line="154" pos:column="21">(<argument><expr><name pos:line="154" pos:column="22">stdin_handle<pos:position pos:line="154" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="36">buf<pos:position pos:line="154" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="154" pos:column="41">sizeof<argument_list pos:line="154" pos:column="47">(<argument><expr><name><name pos:line="154" pos:column="48">data<pos:position pos:line="154" pos:column="52"/></name><operator pos:line="154" pos:column="52">-&gt;<pos:position pos:line="154" pos:column="57"/></operator><name pos:line="154" pos:column="54">state<pos:position pos:line="154" pos:column="59"/></name><operator pos:line="154" pos:column="59">.<pos:position pos:line="154" pos:column="60"/></operator><name pos:line="154" pos:column="60">buffer<pos:position pos:line="154" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="154" pos:column="67"/></argument_list></sizeof></expr></argument>,
                     <argument><expr><operator pos:line="155" pos:column="22">&amp;<pos:position pos:line="155" pos:column="27"/></operator><name pos:line="155" pos:column="23">readfile_read<pos:position pos:line="155" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="38">NULL<pos:position pos:line="155" pos:column="42"/></name></expr></argument>)<pos:position pos:line="155" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="155" pos:column="44"/></condition><then pos:line="155" pos:column="44"> <block pos:line="155" pos:column="45">{
          <expr_stmt><expr><name pos:line="156" pos:column="11">keepon<pos:position pos:line="156" pos:column="17"/></name> <operator pos:line="156" pos:column="18">=<pos:position pos:line="156" pos:column="19"/></operator> <name pos:line="156" pos:column="20">FALSE<pos:position pos:line="156" pos:column="25"/></name></expr>;<pos:position pos:line="156" pos:column="26"/></expr_stmt>
          <break pos:line="157" pos:column="11">break;<pos:position pos:line="157" pos:column="17"/></break>
        }<pos:position pos:line="158" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="159" pos:column="9">nread<pos:position pos:line="159" pos:column="14"/></name> <operator pos:line="159" pos:column="15">=<pos:position pos:line="159" pos:column="16"/></operator> <name pos:line="159" pos:column="17">readfile_read<pos:position pos:line="159" pos:column="30"/></name></expr>;<pos:position pos:line="159" pos:column="31"/></expr_stmt>

        <while pos:line="161" pos:column="9">while<condition pos:line="161" pos:column="14">(<expr><name pos:line="161" pos:column="15">nread<pos:position pos:line="161" pos:column="20"/></name><operator pos:line="161" pos:column="20">--<pos:position pos:line="161" pos:column="22"/></operator></expr>)<pos:position pos:line="161" pos:column="23"/></condition> <block pos:line="161" pos:column="24">{
          <expr_stmt><expr><name><name pos:line="162" pos:column="11">outbuf<pos:position pos:line="162" pos:column="17"/></name><index pos:line="162" pos:column="17">[<expr><literal type="number" pos:line="162" pos:column="18">0<pos:position pos:line="162" pos:column="19"/></literal></expr>]<pos:position pos:line="162" pos:column="20"/></index></name> <operator pos:line="162" pos:column="21">=<pos:position pos:line="162" pos:column="22"/></operator> <operator pos:line="162" pos:column="23">*<pos:position pos:line="162" pos:column="24"/></operator><name pos:line="162" pos:column="24">buffer<pos:position pos:line="162" pos:column="30"/></name><operator pos:line="162" pos:column="30">++<pos:position pos:line="162" pos:column="32"/></operator></expr>;<pos:position pos:line="162" pos:column="33"/></expr_stmt>
          <expr_stmt><expr><name pos:line="163" pos:column="11">out_count<pos:position pos:line="163" pos:column="20"/></name> <operator pos:line="163" pos:column="21">=<pos:position pos:line="163" pos:column="22"/></operator> <literal type="number" pos:line="163" pos:column="23">1<pos:position pos:line="163" pos:column="24"/></literal></expr>;<pos:position pos:line="163" pos:column="25"/></expr_stmt>
          <if pos:line="164" pos:column="11">if<condition pos:line="164" pos:column="13">(<expr><name><name pos:line="164" pos:column="14">outbuf<pos:position pos:line="164" pos:column="20"/></name><index pos:line="164" pos:column="20">[<expr><literal type="number" pos:line="164" pos:column="21">0<pos:position pos:line="164" pos:column="22"/></literal></expr>]<pos:position pos:line="164" pos:column="23"/></index></name> <operator pos:line="164" pos:column="24">==<pos:position pos:line="164" pos:column="26"/></operator> <name pos:line="164" pos:column="27">CURL_IAC<pos:position pos:line="164" pos:column="35"/></name></expr>)<pos:position pos:line="164" pos:column="36"/></condition><then pos:line="164" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="165" pos:column="13">outbuf<pos:position pos:line="165" pos:column="19"/></name><index pos:line="165" pos:column="19">[<expr><name pos:line="165" pos:column="20">out_count<pos:position pos:line="165" pos:column="29"/></name><operator pos:line="165" pos:column="29">++<pos:position pos:line="165" pos:column="31"/></operator></expr>]<pos:position pos:line="165" pos:column="32"/></index></name> <operator pos:line="165" pos:column="33">=<pos:position pos:line="165" pos:column="34"/></operator> <name pos:line="165" pos:column="35">CURL_IAC<pos:position pos:line="165" pos:column="43"/></name></expr>;<pos:position pos:line="165" pos:column="44"/></expr_stmt></block></then></if>

          <expr_stmt><expr><call><name pos:line="167" pos:column="11">Curl_write<pos:position pos:line="167" pos:column="21"/></name><argument_list pos:line="167" pos:column="21">(<argument><expr><name pos:line="167" pos:column="22">conn<pos:position pos:line="167" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="167" pos:column="28">conn<pos:position pos:line="167" pos:column="32"/></name><operator pos:line="167" pos:column="32">-&gt;<pos:position pos:line="167" pos:column="37"/></operator><name pos:line="167" pos:column="34">sock<pos:position pos:line="167" pos:column="38"/></name><index pos:line="167" pos:column="38">[<expr><name pos:line="167" pos:column="39">FIRSTSOCKET<pos:position pos:line="167" pos:column="50"/></name></expr>]<pos:position pos:line="167" pos:column="51"/></index></name></expr></argument>, <argument><expr><name pos:line="167" pos:column="53">outbuf<pos:position pos:line="167" pos:column="59"/></name></expr></argument>,
                     <argument><expr><name pos:line="168" pos:column="22">out_count<pos:position pos:line="168" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="168" pos:column="33">&amp;<pos:position pos:line="168" pos:column="38"/></operator><name pos:line="168" pos:column="34">bytes_written<pos:position pos:line="168" pos:column="47"/></name></expr></argument>)<pos:position pos:line="168" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="49"/></expr_stmt>
        }<pos:position pos:line="169" pos:column="10"/></block></while>
      }<pos:position pos:line="170" pos:column="8"/></block></while>
    }<pos:position pos:line="171" pos:column="6"/></block>
    <break pos:line="172" pos:column="5">break;<pos:position pos:line="172" pos:column="11"/></break>

    <case pos:line="174" pos:column="5">case <expr><name pos:line="174" pos:column="10">WAIT_OBJECT_0<pos:position pos:line="174" pos:column="23"/></name> <operator pos:line="174" pos:column="24">+<pos:position pos:line="174" pos:column="25"/></operator> <literal type="number" pos:line="174" pos:column="26">1<pos:position pos:line="174" pos:column="27"/></literal></expr>:<pos:position pos:line="174" pos:column="28"/></case>
    <block pos:line="175" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="176" pos:column="7">unsigned<pos:position pos:line="176" pos:column="15"/></name> <name pos:line="176" pos:column="16">char<pos:position pos:line="176" pos:column="20"/></name></type> <name><name pos:line="176" pos:column="21">outbuf<pos:position pos:line="176" pos:column="27"/></name><index pos:line="176" pos:column="27">[<expr><literal type="number" pos:line="176" pos:column="28">2<pos:position pos:line="176" pos:column="29"/></literal></expr>]<pos:position pos:line="176" pos:column="30"/></index></name></decl>;<pos:position pos:line="176" pos:column="31"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="177" pos:column="7">int<pos:position pos:line="177" pos:column="10"/></name></type> <name pos:line="177" pos:column="11">out_count<pos:position pos:line="177" pos:column="20"/></name> <init pos:line="177" pos:column="21">= <expr><literal type="number" pos:line="177" pos:column="23">0<pos:position pos:line="177" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="177" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="178" pos:column="7">ssize_t<pos:position pos:line="178" pos:column="14"/></name></type> <name pos:line="178" pos:column="15">bytes_written<pos:position pos:line="178" pos:column="28"/></name></decl>;<pos:position pos:line="178" pos:column="29"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="179" pos:column="7">char<pos:position pos:line="179" pos:column="11"/></name> <modifier pos:line="179" pos:column="12">*<pos:position pos:line="179" pos:column="13"/></modifier></type><name pos:line="179" pos:column="13">buffer<pos:position pos:line="179" pos:column="19"/></name> <init pos:line="179" pos:column="20">= <expr><name pos:line="179" pos:column="22">buf<pos:position pos:line="179" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="179" pos:column="26"/></decl_stmt>

      <if pos:line="181" pos:column="7">if<condition pos:line="181" pos:column="9">(<expr><operator pos:line="181" pos:column="10">!<pos:position pos:line="181" pos:column="11"/></operator><call><name pos:line="181" pos:column="11">ReadFile<pos:position pos:line="181" pos:column="19"/></name><argument_list pos:line="181" pos:column="19">(<argument><expr><name pos:line="181" pos:column="20">stdin_handle<pos:position pos:line="181" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="181" pos:column="34">buf<pos:position pos:line="181" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="181" pos:column="39">sizeof<argument_list pos:line="181" pos:column="45">(<argument><expr><name><name pos:line="181" pos:column="46">data<pos:position pos:line="181" pos:column="50"/></name><operator pos:line="181" pos:column="50">-&gt;<pos:position pos:line="181" pos:column="55"/></operator><name pos:line="181" pos:column="52">state<pos:position pos:line="181" pos:column="57"/></name><operator pos:line="181" pos:column="57">.<pos:position pos:line="181" pos:column="58"/></operator><name pos:line="181" pos:column="58">buffer<pos:position pos:line="181" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="181" pos:column="65"/></argument_list></sizeof></expr></argument>,
                   <argument><expr><operator pos:line="182" pos:column="20">&amp;<pos:position pos:line="182" pos:column="25"/></operator><name pos:line="182" pos:column="21">readfile_read<pos:position pos:line="182" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="182" pos:column="36">NULL<pos:position pos:line="182" pos:column="40"/></name></expr></argument>)<pos:position pos:line="182" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="182" pos:column="42"/></condition><then pos:line="182" pos:column="42"> <block pos:line="182" pos:column="43">{
        <expr_stmt><expr><name pos:line="183" pos:column="9">keepon<pos:position pos:line="183" pos:column="15"/></name> <operator pos:line="183" pos:column="16">=<pos:position pos:line="183" pos:column="17"/></operator> <name pos:line="183" pos:column="18">FALSE<pos:position pos:line="183" pos:column="23"/></name></expr>;<pos:position pos:line="183" pos:column="24"/></expr_stmt>
        <break pos:line="184" pos:column="9">break;<pos:position pos:line="184" pos:column="15"/></break>
      }<pos:position pos:line="185" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="186" pos:column="7">nread<pos:position pos:line="186" pos:column="12"/></name> <operator pos:line="186" pos:column="13">=<pos:position pos:line="186" pos:column="14"/></operator> <name pos:line="186" pos:column="15">readfile_read<pos:position pos:line="186" pos:column="28"/></name></expr>;<pos:position pos:line="186" pos:column="29"/></expr_stmt>

      <while pos:line="188" pos:column="7">while<condition pos:line="188" pos:column="12">(<expr><name pos:line="188" pos:column="13">nread<pos:position pos:line="188" pos:column="18"/></name><operator pos:line="188" pos:column="18">--<pos:position pos:line="188" pos:column="20"/></operator></expr>)<pos:position pos:line="188" pos:column="21"/></condition> <block pos:line="188" pos:column="22">{
        <expr_stmt><expr><name><name pos:line="189" pos:column="9">outbuf<pos:position pos:line="189" pos:column="15"/></name><index pos:line="189" pos:column="15">[<expr><literal type="number" pos:line="189" pos:column="16">0<pos:position pos:line="189" pos:column="17"/></literal></expr>]<pos:position pos:line="189" pos:column="18"/></index></name> <operator pos:line="189" pos:column="19">=<pos:position pos:line="189" pos:column="20"/></operator> <operator pos:line="189" pos:column="21">*<pos:position pos:line="189" pos:column="22"/></operator><name pos:line="189" pos:column="22">buffer<pos:position pos:line="189" pos:column="28"/></name><operator pos:line="189" pos:column="28">++<pos:position pos:line="189" pos:column="30"/></operator></expr>;<pos:position pos:line="189" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name pos:line="190" pos:column="9">out_count<pos:position pos:line="190" pos:column="18"/></name> <operator pos:line="190" pos:column="19">=<pos:position pos:line="190" pos:column="20"/></operator> <literal type="number" pos:line="190" pos:column="21">1<pos:position pos:line="190" pos:column="22"/></literal></expr>;<pos:position pos:line="190" pos:column="23"/></expr_stmt>
        <if pos:line="191" pos:column="9">if<condition pos:line="191" pos:column="11">(<expr><name><name pos:line="191" pos:column="12">outbuf<pos:position pos:line="191" pos:column="18"/></name><index pos:line="191" pos:column="18">[<expr><literal type="number" pos:line="191" pos:column="19">0<pos:position pos:line="191" pos:column="20"/></literal></expr>]<pos:position pos:line="191" pos:column="21"/></index></name> <operator pos:line="191" pos:column="22">==<pos:position pos:line="191" pos:column="24"/></operator> <name pos:line="191" pos:column="25">CURL_IAC<pos:position pos:line="191" pos:column="33"/></name></expr>)<pos:position pos:line="191" pos:column="34"/></condition><then pos:line="191" pos:column="34">
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="192" pos:column="11">outbuf<pos:position pos:line="192" pos:column="17"/></name><index pos:line="192" pos:column="17">[<expr><name pos:line="192" pos:column="18">out_count<pos:position pos:line="192" pos:column="27"/></name><operator pos:line="192" pos:column="27">++<pos:position pos:line="192" pos:column="29"/></operator></expr>]<pos:position pos:line="192" pos:column="30"/></index></name> <operator pos:line="192" pos:column="31">=<pos:position pos:line="192" pos:column="32"/></operator> <name pos:line="192" pos:column="33">CURL_IAC<pos:position pos:line="192" pos:column="41"/></name></expr>;<pos:position pos:line="192" pos:column="42"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="194" pos:column="9">Curl_write<pos:position pos:line="194" pos:column="19"/></name><argument_list pos:line="194" pos:column="19">(<argument><expr><name pos:line="194" pos:column="20">conn<pos:position pos:line="194" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="194" pos:column="26">conn<pos:position pos:line="194" pos:column="30"/></name><operator pos:line="194" pos:column="30">-&gt;<pos:position pos:line="194" pos:column="35"/></operator><name pos:line="194" pos:column="32">sock<pos:position pos:line="194" pos:column="36"/></name><index pos:line="194" pos:column="36">[<expr><name pos:line="194" pos:column="37">FIRSTSOCKET<pos:position pos:line="194" pos:column="48"/></name></expr>]<pos:position pos:line="194" pos:column="49"/></index></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="51">outbuf<pos:position pos:line="194" pos:column="57"/></name></expr></argument>,
                   <argument><expr><name pos:line="195" pos:column="20">out_count<pos:position pos:line="195" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="195" pos:column="31">&amp;<pos:position pos:line="195" pos:column="36"/></operator><name pos:line="195" pos:column="32">bytes_written<pos:position pos:line="195" pos:column="45"/></name></expr></argument>)<pos:position pos:line="195" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="47"/></expr_stmt>
      }<pos:position pos:line="196" pos:column="8"/></block></while>
    }<pos:position pos:line="197" pos:column="6"/></block>
    <break pos:line="198" pos:column="5">break;<pos:position pos:line="198" pos:column="11"/></break>

    <case pos:line="200" pos:column="5">case <expr><name pos:line="200" pos:column="10">WAIT_OBJECT_0<pos:position pos:line="200" pos:column="23"/></name></expr>:<pos:position pos:line="200" pos:column="24"/></case>
      <if pos:line="201" pos:column="7">if<condition pos:line="201" pos:column="9">(<expr><call><name pos:line="201" pos:column="10">enum_netevents_func<pos:position pos:line="201" pos:column="29"/></name><argument_list pos:line="201" pos:column="29">(<argument><expr><name pos:line="201" pos:column="30">sockfd<pos:position pos:line="201" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="201" pos:column="38">event_handle<pos:position pos:line="201" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="201" pos:column="52">&amp;<pos:position pos:line="201" pos:column="57"/></operator><name pos:line="201" pos:column="53">events<pos:position pos:line="201" pos:column="59"/></name></expr></argument>)<pos:position pos:line="201" pos:column="60"/></argument_list></call>
         <operator pos:line="202" pos:column="10">!=<pos:position pos:line="202" pos:column="12"/></operator> <name pos:line="202" pos:column="13">SOCKET_ERROR<pos:position pos:line="202" pos:column="25"/></name></expr>)<pos:position pos:line="202" pos:column="26"/></condition><then pos:line="202" pos:column="26"> <block pos:line="202" pos:column="27">{
        <if pos:line="203" pos:column="9">if<condition pos:line="203" pos:column="11">(<expr><name><name pos:line="203" pos:column="12">events<pos:position pos:line="203" pos:column="18"/></name><operator pos:line="203" pos:column="18">.<pos:position pos:line="203" pos:column="19"/></operator><name pos:line="203" pos:column="19">lNetworkEvents<pos:position pos:line="203" pos:column="33"/></name></name> <operator pos:line="203" pos:column="34">&amp;<pos:position pos:line="203" pos:column="39"/></operator> <name pos:line="203" pos:column="36">FD_READ<pos:position pos:line="203" pos:column="43"/></name></expr>)<pos:position pos:line="203" pos:column="44"/></condition><then pos:line="203" pos:column="44"> <block pos:line="203" pos:column="45">{
          <comment type="block" pos:line="204" pos:column="11">/* This reallu OUGHT to check its return code. */</comment>
          <expr_stmt><expr><operator pos:line="205" pos:column="11">(<pos:position pos:line="205" pos:column="12"/></operator><name pos:line="205" pos:column="12">void<pos:position pos:line="205" pos:column="16"/></name><operator pos:line="205" pos:column="16">)<pos:position pos:line="205" pos:column="17"/></operator><call><name pos:line="205" pos:column="17">Curl_read<pos:position pos:line="205" pos:column="26"/></name><argument_list pos:line="205" pos:column="26">(<argument><expr><name pos:line="205" pos:column="27">conn<pos:position pos:line="205" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="205" pos:column="33">sockfd<pos:position pos:line="205" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="205" pos:column="41">buf<pos:position pos:line="205" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="205" pos:column="46">BUFSIZE<pos:position pos:line="205" pos:column="53"/></name> <operator pos:line="205" pos:column="54">-<pos:position pos:line="205" pos:column="55"/></operator> <literal type="number" pos:line="205" pos:column="56">1<pos:position pos:line="205" pos:column="57"/></literal></expr></argument>, <argument><expr><operator pos:line="205" pos:column="59">&amp;<pos:position pos:line="205" pos:column="64"/></operator><name pos:line="205" pos:column="60">nread<pos:position pos:line="205" pos:column="65"/></name></expr></argument>)<pos:position pos:line="205" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="205" pos:column="67"/></expr_stmt>

          <expr_stmt><expr><call><name pos:line="207" pos:column="11">telrcv<pos:position pos:line="207" pos:column="17"/></name><argument_list pos:line="207" pos:column="17">(<argument><expr><name pos:line="207" pos:column="18">conn<pos:position pos:line="207" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="207" pos:column="24">(<pos:position pos:line="207" pos:column="25"/></operator><name pos:line="207" pos:column="25">unsigned<pos:position pos:line="207" pos:column="33"/></name> <name pos:line="207" pos:column="34">char<pos:position pos:line="207" pos:column="38"/></name> <operator pos:line="207" pos:column="39">*<pos:position pos:line="207" pos:column="40"/></operator><operator pos:line="207" pos:column="40">)<pos:position pos:line="207" pos:column="41"/></operator><name pos:line="207" pos:column="41">buf<pos:position pos:line="207" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="207" pos:column="46">nread<pos:position pos:line="207" pos:column="51"/></name></expr></argument>)<pos:position pos:line="207" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="53"/></expr_stmt>

          <expr_stmt><expr><call><name pos:line="209" pos:column="11">fflush<pos:position pos:line="209" pos:column="17"/></name><argument_list pos:line="209" pos:column="17">(<argument><expr><name pos:line="209" pos:column="18">stdout<pos:position pos:line="209" pos:column="24"/></name></expr></argument>)<pos:position pos:line="209" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="209" pos:column="26"/></expr_stmt>

          <comment type="block" pos:line="211" pos:column="11">/* Negotiate if the peer has started negotiating,
             otherwise don't. We don't want to speak telnet with
             non-telnet servers, like POP or SMTP. */</comment>
          <if pos:line="214" pos:column="11">if<condition pos:line="214" pos:column="13">(<expr><name><name pos:line="214" pos:column="14">tn<pos:position pos:line="214" pos:column="16"/></name><operator pos:line="214" pos:column="16">-&gt;<pos:position pos:line="214" pos:column="21"/></operator><name pos:line="214" pos:column="18">please_negotiate<pos:position pos:line="214" pos:column="34"/></name></name> <operator pos:line="214" pos:column="35">&amp;&amp;<pos:position pos:line="214" pos:column="45"/></operator> <operator pos:line="214" pos:column="38">!<pos:position pos:line="214" pos:column="39"/></operator><name><name pos:line="214" pos:column="39">tn<pos:position pos:line="214" pos:column="41"/></name><operator pos:line="214" pos:column="41">-&gt;<pos:position pos:line="214" pos:column="46"/></operator><name pos:line="214" pos:column="43">already_negotiated<pos:position pos:line="214" pos:column="61"/></name></name></expr>)<pos:position pos:line="214" pos:column="62"/></condition><then pos:line="214" pos:column="62"> <block pos:line="214" pos:column="63">{
            <expr_stmt><expr><call><name pos:line="215" pos:column="13">negotiate<pos:position pos:line="215" pos:column="22"/></name><argument_list pos:line="215" pos:column="22">(<argument><expr><name pos:line="215" pos:column="23">conn<pos:position pos:line="215" pos:column="27"/></name></expr></argument>)<pos:position pos:line="215" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="216" pos:column="13">tn<pos:position pos:line="216" pos:column="15"/></name><operator pos:line="216" pos:column="15">-&gt;<pos:position pos:line="216" pos:column="20"/></operator><name pos:line="216" pos:column="17">already_negotiated<pos:position pos:line="216" pos:column="35"/></name></name> <operator pos:line="216" pos:column="36">=<pos:position pos:line="216" pos:column="37"/></operator> <literal type="number" pos:line="216" pos:column="38">1<pos:position pos:line="216" pos:column="39"/></literal></expr>;<pos:position pos:line="216" pos:column="40"/></expr_stmt>
          }<pos:position pos:line="217" pos:column="12"/></block></then></if>
        }<pos:position pos:line="218" pos:column="10"/></block></then></if>

        <if pos:line="220" pos:column="9">if<condition pos:line="220" pos:column="11">(<expr><name><name pos:line="220" pos:column="12">events<pos:position pos:line="220" pos:column="18"/></name><operator pos:line="220" pos:column="18">.<pos:position pos:line="220" pos:column="19"/></operator><name pos:line="220" pos:column="19">lNetworkEvents<pos:position pos:line="220" pos:column="33"/></name></name> <operator pos:line="220" pos:column="34">&amp;<pos:position pos:line="220" pos:column="39"/></operator> <name pos:line="220" pos:column="36">FD_CLOSE<pos:position pos:line="220" pos:column="44"/></name></expr>)<pos:position pos:line="220" pos:column="45"/></condition><then pos:line="220" pos:column="45"> <block pos:line="220" pos:column="46">{
          <expr_stmt><expr><name pos:line="221" pos:column="11">keepon<pos:position pos:line="221" pos:column="17"/></name> <operator pos:line="221" pos:column="18">=<pos:position pos:line="221" pos:column="19"/></operator> <name pos:line="221" pos:column="20">FALSE<pos:position pos:line="221" pos:column="25"/></name></expr>;<pos:position pos:line="221" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="222" pos:column="10"/></block></then></if>
      }<pos:position pos:line="223" pos:column="8"/></block></then></if>
      <break pos:line="224" pos:column="7">break;<pos:position pos:line="224" pos:column="13"/></break>
    }<pos:position pos:line="225" pos:column="6"/></block></switch>
  }<pos:position pos:line="226" pos:column="4"/></block></while>

  <comment type="block" pos:line="228" pos:column="3">/* We called WSACreateEvent, so call WSACloseEvent */</comment>
  <if pos:line="229" pos:column="3">if<condition pos:line="229" pos:column="5">(<expr><call><name pos:line="229" pos:column="6">close_event_func<pos:position pos:line="229" pos:column="22"/></name><argument_list pos:line="229" pos:column="22">(<argument><expr><name pos:line="229" pos:column="23">event_handle<pos:position pos:line="229" pos:column="35"/></name></expr></argument>)<pos:position pos:line="229" pos:column="36"/></argument_list></call> <operator pos:line="229" pos:column="37">==<pos:position pos:line="229" pos:column="39"/></operator> <name pos:line="229" pos:column="40">FALSE<pos:position pos:line="229" pos:column="45"/></name></expr>)<pos:position pos:line="229" pos:column="46"/></condition><then pos:line="229" pos:column="46"> <block pos:line="229" pos:column="47">{
    <expr_stmt><expr><call><name pos:line="230" pos:column="5">infof<pos:position pos:line="230" pos:column="10"/></name><argument_list pos:line="230" pos:column="10">(<argument><expr><name pos:line="230" pos:column="11">data<pos:position pos:line="230" pos:column="15"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="230" pos:column="16">"WSACloseEvent failed (%d)"<pos:position pos:line="230" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="230" pos:column="45">SOCKERRNO<pos:position pos:line="230" pos:column="54"/></name></expr></argument>)<pos:position pos:line="230" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="230" pos:column="56"/></expr_stmt>
  }<pos:position pos:line="231" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="233" pos:column="3">/* "Forget" pointers into the library we're about to free */</comment>
  <expr_stmt><expr><name pos:line="234" pos:column="3">create_event_func<pos:position pos:line="234" pos:column="20"/></name> <operator pos:line="234" pos:column="21">=<pos:position pos:line="234" pos:column="22"/></operator> <name pos:line="234" pos:column="23">NULL<pos:position pos:line="234" pos:column="27"/></name></expr>;<pos:position pos:line="234" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="235" pos:column="3">close_event_func<pos:position pos:line="235" pos:column="19"/></name> <operator pos:line="235" pos:column="20">=<pos:position pos:line="235" pos:column="21"/></operator> <name pos:line="235" pos:column="22">NULL<pos:position pos:line="235" pos:column="26"/></name></expr>;<pos:position pos:line="235" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="236" pos:column="3">event_select_func<pos:position pos:line="236" pos:column="20"/></name> <operator pos:line="236" pos:column="21">=<pos:position pos:line="236" pos:column="22"/></operator> <name pos:line="236" pos:column="23">NULL<pos:position pos:line="236" pos:column="27"/></name></expr>;<pos:position pos:line="236" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="237" pos:column="3">enum_netevents_func<pos:position pos:line="237" pos:column="22"/></name> <operator pos:line="237" pos:column="23">=<pos:position pos:line="237" pos:column="24"/></operator> <name pos:line="237" pos:column="25">NULL<pos:position pos:line="237" pos:column="29"/></name></expr>;<pos:position pos:line="237" pos:column="30"/></expr_stmt>

  <comment type="block" pos:line="239" pos:column="3">/* We called LoadLibrary, so call FreeLibrary */</comment>
  <if pos:line="240" pos:column="3">if<condition pos:line="240" pos:column="5">(<expr><operator pos:line="240" pos:column="6">!<pos:position pos:line="240" pos:column="7"/></operator><call><name pos:line="240" pos:column="7">FreeLibrary<pos:position pos:line="240" pos:column="18"/></name><argument_list pos:line="240" pos:column="18">(<argument><expr><name pos:line="240" pos:column="19">wsock2<pos:position pos:line="240" pos:column="25"/></name></expr></argument>)<pos:position pos:line="240" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="240" pos:column="27"/></condition><then pos:line="240" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="241" pos:column="5">infof<pos:position pos:line="241" pos:column="10"/></name><argument_list pos:line="241" pos:column="10">(<argument><expr><name pos:line="241" pos:column="11">data<pos:position pos:line="241" pos:column="15"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="241" pos:column="16">"FreeLibrary(wsock2) failed (%d)"<pos:position pos:line="241" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="241" pos:column="51">ERRNO<pos:position pos:line="241" pos:column="56"/></name></expr></argument>)<pos:position pos:line="241" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="241" pos:column="58"/></expr_stmt></block></then></if>
<cpp:else pos:line="242" pos:column="1">#<cpp:directive pos:line="242" pos:column="2">else<pos:position pos:line="242" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><name><name pos:line="243" pos:column="3">pfd<pos:position pos:line="243" pos:column="6"/></name><index pos:line="243" pos:column="6">[<expr><literal type="number" pos:line="243" pos:column="7">0<pos:position pos:line="243" pos:column="8"/></literal></expr>]<pos:position pos:line="243" pos:column="9"/></index></name><operator pos:line="243" pos:column="9">.<pos:position pos:line="243" pos:column="10"/></operator><name pos:line="243" pos:column="10">fd<pos:position pos:line="243" pos:column="12"/></name> <operator pos:line="243" pos:column="13">=<pos:position pos:line="243" pos:column="14"/></operator> <name pos:line="243" pos:column="15">sockfd<pos:position pos:line="243" pos:column="21"/></name></expr>;<pos:position pos:line="243" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="244" pos:column="3">pfd<pos:position pos:line="244" pos:column="6"/></name><index pos:line="244" pos:column="6">[<expr><literal type="number" pos:line="244" pos:column="7">0<pos:position pos:line="244" pos:column="8"/></literal></expr>]<pos:position pos:line="244" pos:column="9"/></index></name><operator pos:line="244" pos:column="9">.<pos:position pos:line="244" pos:column="10"/></operator><name pos:line="244" pos:column="10">events<pos:position pos:line="244" pos:column="16"/></name> <operator pos:line="244" pos:column="17">=<pos:position pos:line="244" pos:column="18"/></operator> <name pos:line="244" pos:column="19">POLLIN<pos:position pos:line="244" pos:column="25"/></name></expr>;<pos:position pos:line="244" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="245" pos:column="3">pfd<pos:position pos:line="245" pos:column="6"/></name><index pos:line="245" pos:column="6">[<expr><literal type="number" pos:line="245" pos:column="7">1<pos:position pos:line="245" pos:column="8"/></literal></expr>]<pos:position pos:line="245" pos:column="9"/></index></name><operator pos:line="245" pos:column="9">.<pos:position pos:line="245" pos:column="10"/></operator><name pos:line="245" pos:column="10">fd<pos:position pos:line="245" pos:column="12"/></name> <operator pos:line="245" pos:column="13">=<pos:position pos:line="245" pos:column="14"/></operator> <literal type="number" pos:line="245" pos:column="15">0<pos:position pos:line="245" pos:column="16"/></literal></expr>;<pos:position pos:line="245" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="246" pos:column="3">pfd<pos:position pos:line="246" pos:column="6"/></name><index pos:line="246" pos:column="6">[<expr><literal type="number" pos:line="246" pos:column="7">1<pos:position pos:line="246" pos:column="8"/></literal></expr>]<pos:position pos:line="246" pos:column="9"/></index></name><operator pos:line="246" pos:column="9">.<pos:position pos:line="246" pos:column="10"/></operator><name pos:line="246" pos:column="10">events<pos:position pos:line="246" pos:column="16"/></name> <operator pos:line="246" pos:column="17">=<pos:position pos:line="246" pos:column="18"/></operator> <name pos:line="246" pos:column="19">POLLIN<pos:position pos:line="246" pos:column="25"/></name></expr>;<pos:position pos:line="246" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="247" pos:column="3">interval_ms<pos:position pos:line="247" pos:column="14"/></name> <operator pos:line="247" pos:column="15">=<pos:position pos:line="247" pos:column="16"/></operator> <literal type="number" pos:line="247" pos:column="17">1<pos:position pos:line="247" pos:column="18"/></literal> <operator pos:line="247" pos:column="19">*<pos:position pos:line="247" pos:column="20"/></operator> <literal type="number" pos:line="247" pos:column="21">1000<pos:position pos:line="247" pos:column="25"/></literal></expr>;<pos:position pos:line="247" pos:column="26"/></expr_stmt>

  <while pos:line="249" pos:column="3">while<condition pos:line="249" pos:column="8">(<expr><name pos:line="249" pos:column="9">keepon<pos:position pos:line="249" pos:column="15"/></name></expr>)<pos:position pos:line="249" pos:column="16"/></condition> <block pos:line="249" pos:column="17">{
    <switch pos:line="250" pos:column="5">switch <condition pos:line="250" pos:column="12">(<expr><call><name pos:line="250" pos:column="13">Curl_poll<pos:position pos:line="250" pos:column="22"/></name><argument_list pos:line="250" pos:column="22">(<argument><expr><name pos:line="250" pos:column="23">pfd<pos:position pos:line="250" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="250" pos:column="28">2<pos:position pos:line="250" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="250" pos:column="31">interval_ms<pos:position pos:line="250" pos:column="42"/></name></expr></argument>)<pos:position pos:line="250" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="250" pos:column="44"/></condition> <block pos:line="250" pos:column="45">{
    <case pos:line="251" pos:column="5">case <expr><operator pos:line="251" pos:column="10">-<pos:position pos:line="251" pos:column="11"/></operator><literal type="number" pos:line="251" pos:column="11">1<pos:position pos:line="251" pos:column="12"/></literal></expr>:<pos:position pos:line="251" pos:column="13"/></case>                    <comment type="block" pos:line="251" pos:column="33">/* error, stop reading */</comment>
      <expr_stmt><expr><name pos:line="252" pos:column="7">keepon<pos:position pos:line="252" pos:column="13"/></name> <operator pos:line="252" pos:column="14">=<pos:position pos:line="252" pos:column="15"/></operator> <name pos:line="252" pos:column="16">FALSE<pos:position pos:line="252" pos:column="21"/></name></expr>;<pos:position pos:line="252" pos:column="22"/></expr_stmt>
      <continue pos:line="253" pos:column="7">continue;<pos:position pos:line="253" pos:column="16"/></continue>
    <case pos:line="254" pos:column="5">case <expr><literal type="number" pos:line="254" pos:column="10">0<pos:position pos:line="254" pos:column="11"/></literal></expr>:<pos:position pos:line="254" pos:column="12"/></case>                     <comment type="block" pos:line="254" pos:column="33">/* timeout */</comment>
      <break pos:line="255" pos:column="7">break;<pos:position pos:line="255" pos:column="13"/></break>
    <default pos:line="256" pos:column="5">default:<pos:position pos:line="256" pos:column="13"/></default>                    <comment type="block" pos:line="256" pos:column="33">/* read! */</comment>
      <if pos:line="257" pos:column="7">if<condition pos:line="257" pos:column="9">(<expr><name><name pos:line="257" pos:column="10">pfd<pos:position pos:line="257" pos:column="13"/></name><index pos:line="257" pos:column="13">[<expr><literal type="number" pos:line="257" pos:column="14">1<pos:position pos:line="257" pos:column="15"/></literal></expr>]<pos:position pos:line="257" pos:column="16"/></index></name><operator pos:line="257" pos:column="16">.<pos:position pos:line="257" pos:column="17"/></operator><name pos:line="257" pos:column="17">revents<pos:position pos:line="257" pos:column="24"/></name> <operator pos:line="257" pos:column="25">&amp;<pos:position pos:line="257" pos:column="30"/></operator> <name pos:line="257" pos:column="27">POLLIN<pos:position pos:line="257" pos:column="33"/></name></expr>)<pos:position pos:line="257" pos:column="34"/></condition><then pos:line="257" pos:column="34"> <block pos:line="257" pos:column="35">{ <comment type="block" pos:line="257" pos:column="37">/* read from stdin */</comment>
        <decl_stmt><decl><type><name pos:line="258" pos:column="9">unsigned<pos:position pos:line="258" pos:column="17"/></name> <name pos:line="258" pos:column="18">char<pos:position pos:line="258" pos:column="22"/></name></type> <name><name pos:line="258" pos:column="23">outbuf<pos:position pos:line="258" pos:column="29"/></name><index pos:line="258" pos:column="29">[<expr><literal type="number" pos:line="258" pos:column="30">2<pos:position pos:line="258" pos:column="31"/></literal></expr>]<pos:position pos:line="258" pos:column="32"/></index></name></decl>;<pos:position pos:line="258" pos:column="33"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="259" pos:column="9">int<pos:position pos:line="259" pos:column="12"/></name></type> <name pos:line="259" pos:column="13">out_count<pos:position pos:line="259" pos:column="22"/></name> <init pos:line="259" pos:column="23">= <expr><literal type="number" pos:line="259" pos:column="25">0<pos:position pos:line="259" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="259" pos:column="27"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="260" pos:column="9">ssize_t<pos:position pos:line="260" pos:column="16"/></name></type> <name pos:line="260" pos:column="17">bytes_written<pos:position pos:line="260" pos:column="30"/></name></decl>;<pos:position pos:line="260" pos:column="31"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="261" pos:column="9">char<pos:position pos:line="261" pos:column="13"/></name> <modifier pos:line="261" pos:column="14">*<pos:position pos:line="261" pos:column="15"/></modifier></type><name pos:line="261" pos:column="15">buffer<pos:position pos:line="261" pos:column="21"/></name> <init pos:line="261" pos:column="22">= <expr><name pos:line="261" pos:column="24">buf<pos:position pos:line="261" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="261" pos:column="28"/></decl_stmt>

        <expr_stmt><expr><name pos:line="263" pos:column="9">nread<pos:position pos:line="263" pos:column="14"/></name> <operator pos:line="263" pos:column="15">=<pos:position pos:line="263" pos:column="16"/></operator> <call><name pos:line="263" pos:column="17">read<pos:position pos:line="263" pos:column="21"/></name><argument_list pos:line="263" pos:column="21">(<argument><expr><literal type="number" pos:line="263" pos:column="22">0<pos:position pos:line="263" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="263" pos:column="25">buf<pos:position pos:line="263" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="263" pos:column="30">255<pos:position pos:line="263" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="263" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="263" pos:column="35"/></expr_stmt>

        <while pos:line="265" pos:column="9">while<condition pos:line="265" pos:column="14">(<expr><name pos:line="265" pos:column="15">nread<pos:position pos:line="265" pos:column="20"/></name><operator pos:line="265" pos:column="20">--<pos:position pos:line="265" pos:column="22"/></operator></expr>)<pos:position pos:line="265" pos:column="23"/></condition> <block pos:line="265" pos:column="24">{
          <expr_stmt><expr><name><name pos:line="266" pos:column="11">outbuf<pos:position pos:line="266" pos:column="17"/></name><index pos:line="266" pos:column="17">[<expr><literal type="number" pos:line="266" pos:column="18">0<pos:position pos:line="266" pos:column="19"/></literal></expr>]<pos:position pos:line="266" pos:column="20"/></index></name> <operator pos:line="266" pos:column="21">=<pos:position pos:line="266" pos:column="22"/></operator> <operator pos:line="266" pos:column="23">*<pos:position pos:line="266" pos:column="24"/></operator><name pos:line="266" pos:column="24">buffer<pos:position pos:line="266" pos:column="30"/></name><operator pos:line="266" pos:column="30">++<pos:position pos:line="266" pos:column="32"/></operator></expr>;<pos:position pos:line="266" pos:column="33"/></expr_stmt>
          <expr_stmt><expr><name pos:line="267" pos:column="11">out_count<pos:position pos:line="267" pos:column="20"/></name> <operator pos:line="267" pos:column="21">=<pos:position pos:line="267" pos:column="22"/></operator> <literal type="number" pos:line="267" pos:column="23">1<pos:position pos:line="267" pos:column="24"/></literal></expr>;<pos:position pos:line="267" pos:column="25"/></expr_stmt>
          <if pos:line="268" pos:column="11">if<condition pos:line="268" pos:column="13">(<expr><name><name pos:line="268" pos:column="14">outbuf<pos:position pos:line="268" pos:column="20"/></name><index pos:line="268" pos:column="20">[<expr><literal type="number" pos:line="268" pos:column="21">0<pos:position pos:line="268" pos:column="22"/></literal></expr>]<pos:position pos:line="268" pos:column="23"/></index></name> <operator pos:line="268" pos:column="24">==<pos:position pos:line="268" pos:column="26"/></operator> <name pos:line="268" pos:column="27">CURL_IAC<pos:position pos:line="268" pos:column="35"/></name></expr>)<pos:position pos:line="268" pos:column="36"/></condition><then pos:line="268" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="269" pos:column="13">outbuf<pos:position pos:line="269" pos:column="19"/></name><index pos:line="269" pos:column="19">[<expr><name pos:line="269" pos:column="20">out_count<pos:position pos:line="269" pos:column="29"/></name><operator pos:line="269" pos:column="29">++<pos:position pos:line="269" pos:column="31"/></operator></expr>]<pos:position pos:line="269" pos:column="32"/></index></name> <operator pos:line="269" pos:column="33">=<pos:position pos:line="269" pos:column="34"/></operator> <name pos:line="269" pos:column="35">CURL_IAC<pos:position pos:line="269" pos:column="43"/></name></expr>;<pos:position pos:line="269" pos:column="44"/></expr_stmt></block></then></if>

          <expr_stmt><expr><call><name pos:line="271" pos:column="11">Curl_write<pos:position pos:line="271" pos:column="21"/></name><argument_list pos:line="271" pos:column="21">(<argument><expr><name pos:line="271" pos:column="22">conn<pos:position pos:line="271" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="271" pos:column="28">conn<pos:position pos:line="271" pos:column="32"/></name><operator pos:line="271" pos:column="32">-&gt;<pos:position pos:line="271" pos:column="37"/></operator><name pos:line="271" pos:column="34">sock<pos:position pos:line="271" pos:column="38"/></name><index pos:line="271" pos:column="38">[<expr><name pos:line="271" pos:column="39">FIRSTSOCKET<pos:position pos:line="271" pos:column="50"/></name></expr>]<pos:position pos:line="271" pos:column="51"/></index></name></expr></argument>, <argument><expr><name pos:line="271" pos:column="53">outbuf<pos:position pos:line="271" pos:column="59"/></name></expr></argument>,
                     <argument><expr><name pos:line="272" pos:column="22">out_count<pos:position pos:line="272" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="272" pos:column="33">&amp;<pos:position pos:line="272" pos:column="38"/></operator><name pos:line="272" pos:column="34">bytes_written<pos:position pos:line="272" pos:column="47"/></name></expr></argument>)<pos:position pos:line="272" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="272" pos:column="49"/></expr_stmt>
        }<pos:position pos:line="273" pos:column="10"/></block></while>
      }<pos:position pos:line="274" pos:column="8"/></block></then></if>

      <if pos:line="276" pos:column="7">if<condition pos:line="276" pos:column="9">(<expr><name><name pos:line="276" pos:column="10">pfd<pos:position pos:line="276" pos:column="13"/></name><index pos:line="276" pos:column="13">[<expr><literal type="number" pos:line="276" pos:column="14">0<pos:position pos:line="276" pos:column="15"/></literal></expr>]<pos:position pos:line="276" pos:column="16"/></index></name><operator pos:line="276" pos:column="16">.<pos:position pos:line="276" pos:column="17"/></operator><name pos:line="276" pos:column="17">revents<pos:position pos:line="276" pos:column="24"/></name> <operator pos:line="276" pos:column="25">&amp;<pos:position pos:line="276" pos:column="30"/></operator> <name pos:line="276" pos:column="27">POLLIN<pos:position pos:line="276" pos:column="33"/></name></expr>)<pos:position pos:line="276" pos:column="34"/></condition><then pos:line="276" pos:column="34"> <block pos:line="276" pos:column="35">{
        <comment type="block" pos:line="277" pos:column="9">/* This OUGHT to check the return code... */</comment>
        <expr_stmt><expr><operator pos:line="278" pos:column="9">(<pos:position pos:line="278" pos:column="10"/></operator><name pos:line="278" pos:column="10">void<pos:position pos:line="278" pos:column="14"/></name><operator pos:line="278" pos:column="14">)<pos:position pos:line="278" pos:column="15"/></operator><call><name pos:line="278" pos:column="15">Curl_read<pos:position pos:line="278" pos:column="24"/></name><argument_list pos:line="278" pos:column="24">(<argument><expr><name pos:line="278" pos:column="25">conn<pos:position pos:line="278" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="278" pos:column="31">sockfd<pos:position pos:line="278" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="278" pos:column="39">buf<pos:position pos:line="278" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="278" pos:column="44">BUFSIZE<pos:position pos:line="278" pos:column="51"/></name> <operator pos:line="278" pos:column="52">-<pos:position pos:line="278" pos:column="53"/></operator> <literal type="number" pos:line="278" pos:column="54">1<pos:position pos:line="278" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="278" pos:column="57">&amp;<pos:position pos:line="278" pos:column="62"/></operator><name pos:line="278" pos:column="58">nread<pos:position pos:line="278" pos:column="63"/></name></expr></argument>)<pos:position pos:line="278" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="278" pos:column="65"/></expr_stmt>

        <comment type="block" pos:line="280" pos:column="9">/* if we receive 0 or less here, the server closed the connection and
           we bail out from this! */</comment>
        <if pos:line="282" pos:column="9">if<condition pos:line="282" pos:column="11">(<expr><name pos:line="282" pos:column="12">nread<pos:position pos:line="282" pos:column="17"/></name> <operator pos:line="282" pos:column="18">&lt;=<pos:position pos:line="282" pos:column="23"/></operator> <literal type="number" pos:line="282" pos:column="21">0<pos:position pos:line="282" pos:column="22"/></literal></expr>)<pos:position pos:line="282" pos:column="23"/></condition><then pos:line="282" pos:column="23"> <block pos:line="282" pos:column="24">{
          <expr_stmt><expr><name pos:line="283" pos:column="11">keepon<pos:position pos:line="283" pos:column="17"/></name> <operator pos:line="283" pos:column="18">=<pos:position pos:line="283" pos:column="19"/></operator> <name pos:line="283" pos:column="20">FALSE<pos:position pos:line="283" pos:column="25"/></name></expr>;<pos:position pos:line="283" pos:column="26"/></expr_stmt>
          <break pos:line="284" pos:column="11">break;<pos:position pos:line="284" pos:column="17"/></break>
        }<pos:position pos:line="285" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="287" pos:column="9">telrcv<pos:position pos:line="287" pos:column="15"/></name><argument_list pos:line="287" pos:column="15">(<argument><expr><name pos:line="287" pos:column="16">conn<pos:position pos:line="287" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="287" pos:column="22">(<pos:position pos:line="287" pos:column="23"/></operator><name pos:line="287" pos:column="23">unsigned<pos:position pos:line="287" pos:column="31"/></name> <name pos:line="287" pos:column="32">char<pos:position pos:line="287" pos:column="36"/></name> <operator pos:line="287" pos:column="37">*<pos:position pos:line="287" pos:column="38"/></operator><operator pos:line="287" pos:column="38">)<pos:position pos:line="287" pos:column="39"/></operator><name pos:line="287" pos:column="39">buf<pos:position pos:line="287" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="287" pos:column="44">nread<pos:position pos:line="287" pos:column="49"/></name></expr></argument>)<pos:position pos:line="287" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="287" pos:column="51"/></expr_stmt>

        <comment type="block" pos:line="289" pos:column="9">/* Negotiate if the peer has started negotiating,
           otherwise don't. We don't want to speak telnet with
           non-telnet servers, like POP or SMTP. */</comment>
        <if pos:line="292" pos:column="9">if<condition pos:line="292" pos:column="11">(<expr><name><name pos:line="292" pos:column="12">tn<pos:position pos:line="292" pos:column="14"/></name><operator pos:line="292" pos:column="14">-&gt;<pos:position pos:line="292" pos:column="19"/></operator><name pos:line="292" pos:column="16">please_negotiate<pos:position pos:line="292" pos:column="32"/></name></name> <operator pos:line="292" pos:column="33">&amp;&amp;<pos:position pos:line="292" pos:column="43"/></operator> <operator pos:line="292" pos:column="36">!<pos:position pos:line="292" pos:column="37"/></operator><name><name pos:line="292" pos:column="37">tn<pos:position pos:line="292" pos:column="39"/></name><operator pos:line="292" pos:column="39">-&gt;<pos:position pos:line="292" pos:column="44"/></operator><name pos:line="292" pos:column="41">already_negotiated<pos:position pos:line="292" pos:column="59"/></name></name></expr>)<pos:position pos:line="292" pos:column="60"/></condition><then pos:line="292" pos:column="60"> <block pos:line="292" pos:column="61">{
          <expr_stmt><expr><call><name pos:line="293" pos:column="11">negotiate<pos:position pos:line="293" pos:column="20"/></name><argument_list pos:line="293" pos:column="20">(<argument><expr><name pos:line="293" pos:column="21">conn<pos:position pos:line="293" pos:column="25"/></name></expr></argument>)<pos:position pos:line="293" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="293" pos:column="27"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="294" pos:column="11">tn<pos:position pos:line="294" pos:column="13"/></name><operator pos:line="294" pos:column="13">-&gt;<pos:position pos:line="294" pos:column="18"/></operator><name pos:line="294" pos:column="15">already_negotiated<pos:position pos:line="294" pos:column="33"/></name></name> <operator pos:line="294" pos:column="34">=<pos:position pos:line="294" pos:column="35"/></operator> <literal type="number" pos:line="294" pos:column="36">1<pos:position pos:line="294" pos:column="37"/></literal></expr>;<pos:position pos:line="294" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="295" pos:column="10"/></block></then></if>
      }<pos:position pos:line="296" pos:column="8"/></block></then></if>
    }<pos:position pos:line="297" pos:column="6"/></block></switch>
    <if pos:line="298" pos:column="5">if<condition pos:line="298" pos:column="7">(<expr><name><name pos:line="298" pos:column="8">data<pos:position pos:line="298" pos:column="12"/></name><operator pos:line="298" pos:column="12">-&gt;<pos:position pos:line="298" pos:column="17"/></operator><name pos:line="298" pos:column="14">set<pos:position pos:line="298" pos:column="17"/></name><operator pos:line="298" pos:column="17">.<pos:position pos:line="298" pos:column="18"/></operator><name pos:line="298" pos:column="18">timeout<pos:position pos:line="298" pos:column="25"/></name></name></expr>)<pos:position pos:line="298" pos:column="26"/></condition><then pos:line="298" pos:column="26"> <block pos:line="298" pos:column="27">{
      <decl_stmt><decl><type><name><name pos:line="299" pos:column="7">struct<pos:position pos:line="299" pos:column="13"/></name> <name pos:line="299" pos:column="14">timeval<pos:position pos:line="299" pos:column="21"/></name></name></type> <name pos:line="299" pos:column="22">now<pos:position pos:line="299" pos:column="25"/></name></decl>;<pos:position pos:line="299" pos:column="26"/></decl_stmt>           <comment type="block" pos:line="299" pos:column="37">/* current time */</comment>
      <expr_stmt><expr><name pos:line="300" pos:column="7">now<pos:position pos:line="300" pos:column="10"/></name> <operator pos:line="300" pos:column="11">=<pos:position pos:line="300" pos:column="12"/></operator> <call><name pos:line="300" pos:column="13">Curl_tvnow<pos:position pos:line="300" pos:column="23"/></name><argument_list pos:line="300" pos:column="23">()<pos:position pos:line="300" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="300" pos:column="26"/></expr_stmt>
      <if pos:line="301" pos:column="7">if<condition pos:line="301" pos:column="9">(<expr><call><name pos:line="301" pos:column="10">Curl_tvdiff<pos:position pos:line="301" pos:column="21"/></name><argument_list pos:line="301" pos:column="21">(<argument><expr><name pos:line="301" pos:column="22">now<pos:position pos:line="301" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="301" pos:column="27">conn<pos:position pos:line="301" pos:column="31"/></name><operator pos:line="301" pos:column="31">-&gt;<pos:position pos:line="301" pos:column="36"/></operator><name pos:line="301" pos:column="33">created<pos:position pos:line="301" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="301" pos:column="41"/></argument_list></call> <operator pos:line="301" pos:column="42">&gt;=<pos:position pos:line="301" pos:column="47"/></operator> <name><name pos:line="301" pos:column="45">data<pos:position pos:line="301" pos:column="49"/></name><operator pos:line="301" pos:column="49">-&gt;<pos:position pos:line="301" pos:column="54"/></operator><name pos:line="301" pos:column="51">set<pos:position pos:line="301" pos:column="54"/></name><operator pos:line="301" pos:column="54">.<pos:position pos:line="301" pos:column="55"/></operator><name pos:line="301" pos:column="55">timeout<pos:position pos:line="301" pos:column="62"/></name></name></expr>)<pos:position pos:line="301" pos:column="63"/></condition><then pos:line="301" pos:column="63"> <block pos:line="301" pos:column="64">{
        <expr_stmt><expr><call><name pos:line="302" pos:column="9">failf<pos:position pos:line="302" pos:column="14"/></name><argument_list pos:line="302" pos:column="14">(<argument><expr><name pos:line="302" pos:column="15">data<pos:position pos:line="302" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="302" pos:column="21">"Time-out"<pos:position pos:line="302" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="302" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="302" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="303" pos:column="9">code<pos:position pos:line="303" pos:column="13"/></name> <operator pos:line="303" pos:column="14">=<pos:position pos:line="303" pos:column="15"/></operator> <name pos:line="303" pos:column="16">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="303" pos:column="40"/></name></expr>;<pos:position pos:line="303" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name pos:line="304" pos:column="9">keepon<pos:position pos:line="304" pos:column="15"/></name> <operator pos:line="304" pos:column="16">=<pos:position pos:line="304" pos:column="17"/></operator> <name pos:line="304" pos:column="18">FALSE<pos:position pos:line="304" pos:column="23"/></name></expr>;<pos:position pos:line="304" pos:column="24"/></expr_stmt>
      }<pos:position pos:line="305" pos:column="8"/></block></then></if>
    }<pos:position pos:line="306" pos:column="6"/></block></then></if>
  }<pos:position pos:line="307" pos:column="4"/></block></while>
<cpp:endif pos:line="308" pos:column="1">#<cpp:directive pos:line="308" pos:column="2">endif<pos:position pos:line="308" pos:column="7"/></cpp:directive></cpp:endif>
  <comment type="block" pos:line="309" pos:column="3">/* mark this as "no further transfer wanted" */</comment>
  <expr_stmt><expr><call><name pos:line="310" pos:column="3">Curl_setup_transfer<pos:position pos:line="310" pos:column="22"/></name><argument_list pos:line="310" pos:column="22">(<argument><expr><name pos:line="310" pos:column="23">conn<pos:position pos:line="310" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="310" pos:column="29">-<pos:position pos:line="310" pos:column="30"/></operator><literal type="number" pos:line="310" pos:column="30">1<pos:position pos:line="310" pos:column="31"/></literal></expr></argument>, <argument><expr><operator pos:line="310" pos:column="33">-<pos:position pos:line="310" pos:column="34"/></operator><literal type="number" pos:line="310" pos:column="34">1<pos:position pos:line="310" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="310" pos:column="37">FALSE<pos:position pos:line="310" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="310" pos:column="44">NULL<pos:position pos:line="310" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="310" pos:column="50">-<pos:position pos:line="310" pos:column="51"/></operator><literal type="number" pos:line="310" pos:column="51">1<pos:position pos:line="310" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="310" pos:column="54">NULL<pos:position pos:line="310" pos:column="58"/></name></expr></argument>)<pos:position pos:line="310" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="310" pos:column="60"/></expr_stmt>

  <return pos:line="312" pos:column="3">return <expr><name pos:line="312" pos:column="10">code<pos:position pos:line="312" pos:column="14"/></name></expr>;<pos:position pos:line="312" pos:column="15"/></return>
}<pos:position pos:line="313" pos:column="2"/></block></function></unit>
