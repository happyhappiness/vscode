<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1663_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">Curl_infof<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name><name pos:line="1" pos:column="17">struct<pos:position pos:line="1" pos:column="23"/></name> <name pos:line="1" pos:column="24">Curl_easy<pos:position pos:line="1" pos:column="33"/></name></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">data<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">fmt<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="1" pos:column="58">...<pos:position pos:line="1" pos:column="61"/></modifier></type></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if<condition pos:line="3" pos:column="5">(<expr><name pos:line="3" pos:column="6">data<pos:position pos:line="3" pos:column="10"/></name> <operator pos:line="3" pos:column="11">&amp;&amp;<pos:position pos:line="3" pos:column="21"/></operator> <name><name pos:line="3" pos:column="14">data<pos:position pos:line="3" pos:column="18"/></name><operator pos:line="3" pos:column="18">-&gt;<pos:position pos:line="3" pos:column="23"/></operator><name pos:line="3" pos:column="20">set<pos:position pos:line="3" pos:column="23"/></name><operator pos:line="3" pos:column="23">.<pos:position pos:line="3" pos:column="24"/></operator><name pos:line="3" pos:column="24">verbose<pos:position pos:line="3" pos:column="31"/></name></name></expr>)<pos:position pos:line="3" pos:column="32"/></condition><then pos:line="3" pos:column="32"> <block pos:line="3" pos:column="33">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">va_list<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">ap<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">size_t<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">len<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">print_buffer<pos:position pos:line="6" pos:column="22"/></name><index pos:line="6" pos:column="22">[<expr><literal type="number" pos:line="6" pos:column="23">2048<pos:position pos:line="6" pos:column="27"/></literal> <operator pos:line="6" pos:column="28">+<pos:position pos:line="6" pos:column="29"/></operator> <literal type="number" pos:line="6" pos:column="30">1<pos:position pos:line="6" pos:column="31"/></literal></expr>]<pos:position pos:line="6" pos:column="32"/></index></name></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">va_start<pos:position pos:line="7" pos:column="13"/></name><argument_list pos:line="7" pos:column="13">(<argument><expr><name pos:line="7" pos:column="14">ap<pos:position pos:line="7" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="18">fmt<pos:position pos:line="7" pos:column="21"/></name></expr></argument>)<pos:position pos:line="7" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">vsnprintf<pos:position pos:line="8" pos:column="14"/></name><argument_list pos:line="8" pos:column="14">(<argument><expr><name pos:line="8" pos:column="15">print_buffer<pos:position pos:line="8" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="29">sizeof<argument_list pos:line="8" pos:column="35">(<argument><expr><name pos:line="8" pos:column="36">print_buffer<pos:position pos:line="8" pos:column="48"/></name></expr></argument>)<pos:position pos:line="8" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="8" pos:column="51">fmt<pos:position pos:line="8" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="56">ap<pos:position pos:line="8" pos:column="58"/></name></expr></argument>)<pos:position pos:line="8" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">va_end<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name pos:line="9" pos:column="12">ap<pos:position pos:line="9" pos:column="14"/></name></expr></argument>)<pos:position pos:line="9" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="10" pos:column="5">len<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">=<pos:position pos:line="10" pos:column="10"/></operator> <call><name pos:line="10" pos:column="11">strlen<pos:position pos:line="10" pos:column="17"/></name><argument_list pos:line="10" pos:column="17">(<argument><expr><name pos:line="10" pos:column="18">print_buffer<pos:position pos:line="10" pos:column="30"/></name></expr></argument>)<pos:position pos:line="10" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">Curl_debug<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><name pos:line="11" pos:column="16">data<pos:position pos:line="11" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="22">CURLINFO_TEXT<pos:position pos:line="11" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="37">print_buffer<pos:position pos:line="11" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="51">len<pos:position pos:line="11" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="56">NULL<pos:position pos:line="11" pos:column="60"/></name></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="62"/></expr_stmt>
  }<pos:position pos:line="12" pos:column="4"/></block></then></if>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
