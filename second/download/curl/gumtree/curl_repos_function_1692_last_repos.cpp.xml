<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1692_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">pop3_state_capa_resp<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name><name pos:line="1" pos:column="38">struct<pos:position pos:line="1" pos:column="44"/></name> <name pos:line="1" pos:column="45">connectdata<pos:position pos:line="1" pos:column="56"/></name></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">conn<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="64">int<pos:position pos:line="1" pos:column="67"/></name></type> <name pos:line="1" pos:column="68">pop3code<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
                                     <parameter><decl><type><name pos:line="2" pos:column="38">pop3state<pos:position pos:line="2" pos:column="47"/></name></type> <name pos:line="2" pos:column="48">instate<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">result<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">CURLE_OK<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_easy<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">data<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name><name pos:line="5" pos:column="28">conn<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">-&gt;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="34">data<pos:position pos:line="5" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">pop3_conn<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">pop3c<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><operator pos:line="6" pos:column="29">&amp;<pos:position pos:line="6" pos:column="34"/></operator><name><name pos:line="6" pos:column="30">conn<pos:position pos:line="6" pos:column="34"/></name><operator pos:line="6" pos:column="34">-&gt;<pos:position pos:line="6" pos:column="39"/></operator><name pos:line="6" pos:column="36">proto<pos:position pos:line="6" pos:column="41"/></name><operator pos:line="6" pos:column="41">.<pos:position pos:line="6" pos:column="42"/></operator><name pos:line="6" pos:column="42">pop3c<pos:position pos:line="6" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">line<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><name><name pos:line="7" pos:column="22">data<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">-&gt;<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="28">state<pos:position pos:line="7" pos:column="33"/></name><operator pos:line="7" pos:column="33">.<pos:position pos:line="7" pos:column="34"/></operator><name pos:line="7" pos:column="34">buffer<pos:position pos:line="7" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">size_t<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">len<pos:position pos:line="8" pos:column="13"/></name> <init pos:line="8" pos:column="14">= <expr><call><name pos:line="8" pos:column="16">strlen<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">(<argument><expr><name pos:line="8" pos:column="23">line<pos:position pos:line="8" pos:column="27"/></name></expr></argument>)<pos:position pos:line="8" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">wordlen<pos:position pos:line="9" pos:column="17"/></name></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="11" pos:column="3">(<pos:position pos:line="11" pos:column="4"/></operator><name pos:line="11" pos:column="4">void<pos:position pos:line="11" pos:column="8"/></name><operator pos:line="11" pos:column="8">)<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="9">instate<pos:position pos:line="11" pos:column="16"/></name></expr>;<pos:position pos:line="11" pos:column="17"/></expr_stmt> <comment type="block" pos:line="11" pos:column="18">/* no use for this yet */</comment>

  <comment type="block" pos:line="13" pos:column="3">/* Do we have a untagged continuation response? */</comment>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name pos:line="14" pos:column="6">pop3code<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">==<pos:position pos:line="14" pos:column="17"/></operator> <literal type="char" pos:line="14" pos:column="18">'*'<pos:position pos:line="14" pos:column="21"/></literal></expr>)<pos:position pos:line="14" pos:column="22"/></condition><then pos:line="14" pos:column="22"> <block pos:line="14" pos:column="23">{
    <comment type="block" pos:line="15" pos:column="5">/* Does the server support the STLS capability? */</comment>
    <if pos:line="16" pos:column="5">if<condition pos:line="16" pos:column="7">(<expr><name pos:line="16" pos:column="8">len<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">&gt;=<pos:position pos:line="16" pos:column="17"/></operator> <literal type="number" pos:line="16" pos:column="15">4<pos:position pos:line="16" pos:column="16"/></literal> <operator pos:line="16" pos:column="17">&amp;&amp;<pos:position pos:line="16" pos:column="27"/></operator> <operator pos:line="16" pos:column="20">!<pos:position pos:line="16" pos:column="21"/></operator><call><name pos:line="16" pos:column="21">memcmp<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">line<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="34">"STLS"<pos:position pos:line="16" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="42">4<pos:position pos:line="16" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="45"/></condition><then pos:line="16" pos:column="45">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="17" pos:column="7">pop3c<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">tls_supported<pos:position pos:line="17" pos:column="27"/></name></name> <operator pos:line="17" pos:column="28">=<pos:position pos:line="17" pos:column="29"/></operator> <name pos:line="17" pos:column="30">TRUE<pos:position pos:line="17" pos:column="34"/></name></expr>;<pos:position pos:line="17" pos:column="35"/></expr_stmt></block></then>

    <comment type="block" pos:line="19" pos:column="5">/* Does the server support clear text authentication? */</comment>
    <elseif pos:line="20" pos:column="5">else <if pos:line="20" pos:column="10">if<condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">len<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">&gt;=<pos:position pos:line="20" pos:column="22"/></operator> <literal type="number" pos:line="20" pos:column="20">4<pos:position pos:line="20" pos:column="21"/></literal> <operator pos:line="20" pos:column="22">&amp;&amp;<pos:position pos:line="20" pos:column="32"/></operator> <operator pos:line="20" pos:column="25">!<pos:position pos:line="20" pos:column="26"/></operator><call><name pos:line="20" pos:column="26">memcmp<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">line<pos:position pos:line="20" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="39">"USER"<pos:position pos:line="20" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="47">4<pos:position pos:line="20" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="50"/></condition><then pos:line="20" pos:column="50">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="21" pos:column="7">pop3c<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">-&gt;<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="14">authtypes<pos:position pos:line="21" pos:column="23"/></name></name> <operator pos:line="21" pos:column="24">|=<pos:position pos:line="21" pos:column="26"/></operator> <name pos:line="21" pos:column="27">POP3_TYPE_CLEARTEXT<pos:position pos:line="21" pos:column="46"/></name></expr>;<pos:position pos:line="21" pos:column="47"/></expr_stmt></block></then></if></elseif>

    <comment type="block" pos:line="23" pos:column="5">/* Does the server support SASL based authentication? */</comment>
    <elseif pos:line="24" pos:column="5">else <if pos:line="24" pos:column="10">if<condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">len<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">&gt;=<pos:position pos:line="24" pos:column="22"/></operator> <literal type="number" pos:line="24" pos:column="20">5<pos:position pos:line="24" pos:column="21"/></literal> <operator pos:line="24" pos:column="22">&amp;&amp;<pos:position pos:line="24" pos:column="32"/></operator> <operator pos:line="24" pos:column="25">!<pos:position pos:line="24" pos:column="26"/></operator><call><name pos:line="24" pos:column="26">memcmp<pos:position pos:line="24" pos:column="32"/></name><argument_list pos:line="24" pos:column="32">(<argument><expr><name pos:line="24" pos:column="33">line<pos:position pos:line="24" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="39">"SASL "<pos:position pos:line="24" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="48">5<pos:position pos:line="24" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="51"/></condition><then pos:line="24" pos:column="51"> <block pos:line="24" pos:column="52">{
      <expr_stmt><expr><name><name pos:line="25" pos:column="7">pop3c<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">-&gt;<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="14">authtypes<pos:position pos:line="25" pos:column="23"/></name></name> <operator pos:line="25" pos:column="24">|=<pos:position pos:line="25" pos:column="26"/></operator> <name pos:line="25" pos:column="27">POP3_TYPE_SASL<pos:position pos:line="25" pos:column="41"/></name></expr>;<pos:position pos:line="25" pos:column="42"/></expr_stmt>

      <comment type="block" pos:line="27" pos:column="7">/* Advance past the SASL keyword */</comment>
      <expr_stmt><expr><name pos:line="28" pos:column="7">line<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">+=<pos:position pos:line="28" pos:column="14"/></operator> <literal type="number" pos:line="28" pos:column="15">5<pos:position pos:line="28" pos:column="16"/></literal></expr>;<pos:position pos:line="28" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><name pos:line="29" pos:column="7">len<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">-=<pos:position pos:line="29" pos:column="13"/></operator> <literal type="number" pos:line="29" pos:column="14">5<pos:position pos:line="29" pos:column="15"/></literal></expr>;<pos:position pos:line="29" pos:column="16"/></expr_stmt>

      <comment type="block" pos:line="31" pos:column="7">/* Loop through the data line */</comment>
      <for pos:line="32" pos:column="7">for<control pos:line="32" pos:column="10">(<init pos:line="32" pos:column="11">;<pos:position pos:line="32" pos:column="12"/></init><condition pos:line="32" pos:column="12">;<pos:position pos:line="32" pos:column="13"/></condition><incr/>)<pos:position pos:line="32" pos:column="14"/></control> <block pos:line="32" pos:column="15">{
        <decl_stmt><decl><type><name pos:line="33" pos:column="9">size_t<pos:position pos:line="33" pos:column="15"/></name></type> <name pos:line="33" pos:column="16">llen<pos:position pos:line="33" pos:column="20"/></name></decl>;<pos:position pos:line="33" pos:column="21"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="34" pos:column="9">unsigned<pos:position pos:line="34" pos:column="17"/></name> <name pos:line="34" pos:column="18">int<pos:position pos:line="34" pos:column="21"/></name></type> <name pos:line="34" pos:column="22">mechbit<pos:position pos:line="34" pos:column="29"/></name></decl>;<pos:position pos:line="34" pos:column="30"/></decl_stmt>

        <while pos:line="36" pos:column="9">while<condition pos:line="36" pos:column="14">(<expr><name pos:line="36" pos:column="15">len<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">&amp;&amp;<pos:position pos:line="36" pos:column="29"/></operator>
              <operator pos:line="37" pos:column="15">(<pos:position pos:line="37" pos:column="16"/></operator><operator pos:line="37" pos:column="16">*<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="17">line<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">==<pos:position pos:line="37" pos:column="24"/></operator> <literal type="char" pos:line="37" pos:column="25">' '<pos:position pos:line="37" pos:column="28"/></literal> <operator pos:line="37" pos:column="29">||<pos:position pos:line="37" pos:column="31"/></operator> <operator pos:line="37" pos:column="32">*<pos:position pos:line="37" pos:column="33"/></operator><name pos:line="37" pos:column="33">line<pos:position pos:line="37" pos:column="37"/></name> <operator pos:line="37" pos:column="38">==<pos:position pos:line="37" pos:column="40"/></operator> <literal type="char" pos:line="37" pos:column="41">'\t'<pos:position pos:line="37" pos:column="45"/></literal> <operator pos:line="37" pos:column="46">||<pos:position pos:line="37" pos:column="48"/></operator>
               <operator pos:line="38" pos:column="16">*<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="17">line<pos:position pos:line="38" pos:column="21"/></name> <operator pos:line="38" pos:column="22">==<pos:position pos:line="38" pos:column="24"/></operator> <literal type="char" pos:line="38" pos:column="25">'\r'<pos:position pos:line="38" pos:column="29"/></literal> <operator pos:line="38" pos:column="30">||<pos:position pos:line="38" pos:column="32"/></operator> <operator pos:line="38" pos:column="33">*<pos:position pos:line="38" pos:column="34"/></operator><name pos:line="38" pos:column="34">line<pos:position pos:line="38" pos:column="38"/></name> <operator pos:line="38" pos:column="39">==<pos:position pos:line="38" pos:column="41"/></operator> <literal type="char" pos:line="38" pos:column="42">'\n'<pos:position pos:line="38" pos:column="46"/></literal><operator pos:line="38" pos:column="46">)<pos:position pos:line="38" pos:column="47"/></operator></expr>)<pos:position pos:line="38" pos:column="48"/></condition> <block pos:line="38" pos:column="49">{

          <expr_stmt><expr><name pos:line="40" pos:column="11">line<pos:position pos:line="40" pos:column="15"/></name><operator pos:line="40" pos:column="15">++<pos:position pos:line="40" pos:column="17"/></operator></expr>;<pos:position pos:line="40" pos:column="18"/></expr_stmt>
          <expr_stmt><expr><name pos:line="41" pos:column="11">len<pos:position pos:line="41" pos:column="14"/></name><operator pos:line="41" pos:column="14">--<pos:position pos:line="41" pos:column="16"/></operator></expr>;<pos:position pos:line="41" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="42" pos:column="10"/></block></while>

        <if pos:line="44" pos:column="9">if<condition pos:line="44" pos:column="11">(<expr><operator pos:line="44" pos:column="12">!<pos:position pos:line="44" pos:column="13"/></operator><name pos:line="44" pos:column="13">len<pos:position pos:line="44" pos:column="16"/></name></expr>)<pos:position pos:line="44" pos:column="17"/></condition><then pos:line="44" pos:column="17">
          <block type="pseudo"><break pos:line="45" pos:column="11">break;<pos:position pos:line="45" pos:column="17"/></break></block></then></if>

        <comment type="block" pos:line="47" pos:column="9">/* Extract the word */</comment>
        <for pos:line="48" pos:column="9">for<control pos:line="48" pos:column="12">(<init><expr><name pos:line="48" pos:column="13">wordlen<pos:position pos:line="48" pos:column="20"/></name> <operator pos:line="48" pos:column="21">=<pos:position pos:line="48" pos:column="22"/></operator> <literal type="number" pos:line="48" pos:column="23">0<pos:position pos:line="48" pos:column="24"/></literal></expr>;<pos:position pos:line="48" pos:column="25"/></init> <condition><expr><name pos:line="48" pos:column="26">wordlen<pos:position pos:line="48" pos:column="33"/></name> <operator pos:line="48" pos:column="34">&lt;<pos:position pos:line="48" pos:column="38"/></operator> <name pos:line="48" pos:column="36">len<pos:position pos:line="48" pos:column="39"/></name> <operator pos:line="48" pos:column="40">&amp;&amp;<pos:position pos:line="48" pos:column="50"/></operator> <name><name pos:line="48" pos:column="43">line<pos:position pos:line="48" pos:column="47"/></name><index pos:line="48" pos:column="47">[<expr><name pos:line="48" pos:column="48">wordlen<pos:position pos:line="48" pos:column="55"/></name></expr>]<pos:position pos:line="48" pos:column="56"/></index></name> <operator pos:line="48" pos:column="57">!=<pos:position pos:line="48" pos:column="59"/></operator> <literal type="char" pos:line="48" pos:column="60">' '<pos:position pos:line="48" pos:column="63"/></literal> <operator pos:line="48" pos:column="64">&amp;&amp;<pos:position pos:line="48" pos:column="74"/></operator>
              <name><name pos:line="49" pos:column="15">line<pos:position pos:line="49" pos:column="19"/></name><index pos:line="49" pos:column="19">[<expr><name pos:line="49" pos:column="20">wordlen<pos:position pos:line="49" pos:column="27"/></name></expr>]<pos:position pos:line="49" pos:column="28"/></index></name> <operator pos:line="49" pos:column="29">!=<pos:position pos:line="49" pos:column="31"/></operator> <literal type="char" pos:line="49" pos:column="32">'\t'<pos:position pos:line="49" pos:column="36"/></literal> <operator pos:line="49" pos:column="37">&amp;&amp;<pos:position pos:line="49" pos:column="47"/></operator> <name><name pos:line="49" pos:column="40">line<pos:position pos:line="49" pos:column="44"/></name><index pos:line="49" pos:column="44">[<expr><name pos:line="49" pos:column="45">wordlen<pos:position pos:line="49" pos:column="52"/></name></expr>]<pos:position pos:line="49" pos:column="53"/></index></name> <operator pos:line="49" pos:column="54">!=<pos:position pos:line="49" pos:column="56"/></operator> <literal type="char" pos:line="49" pos:column="57">'\r'<pos:position pos:line="49" pos:column="61"/></literal> <operator pos:line="49" pos:column="62">&amp;&amp;<pos:position pos:line="49" pos:column="72"/></operator>
              <name><name pos:line="50" pos:column="15">line<pos:position pos:line="50" pos:column="19"/></name><index pos:line="50" pos:column="19">[<expr><name pos:line="50" pos:column="20">wordlen<pos:position pos:line="50" pos:column="27"/></name></expr>]<pos:position pos:line="50" pos:column="28"/></index></name> <operator pos:line="50" pos:column="29">!=<pos:position pos:line="50" pos:column="31"/></operator> <literal type="char" pos:line="50" pos:column="32">'\n'<pos:position pos:line="50" pos:column="36"/></literal></expr>;<pos:position pos:line="50" pos:column="37"/></condition><incr/>)<pos:position pos:line="50" pos:column="38"/></control>
          <block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="11">wordlen<pos:position pos:line="51" pos:column="18"/></name><operator pos:line="51" pos:column="18">++<pos:position pos:line="51" pos:column="20"/></operator></expr>;<pos:position pos:line="51" pos:column="21"/></expr_stmt></block></for>

        <comment type="block" pos:line="53" pos:column="9">/* Test the word for a matching authentication mechanism */</comment>
        <expr_stmt><expr><name pos:line="54" pos:column="9">mechbit<pos:position pos:line="54" pos:column="16"/></name> <operator pos:line="54" pos:column="17">=<pos:position pos:line="54" pos:column="18"/></operator> <call><name pos:line="54" pos:column="19">Curl_sasl_decode_mech<pos:position pos:line="54" pos:column="40"/></name><argument_list pos:line="54" pos:column="40">(<argument><expr><name pos:line="54" pos:column="41">line<pos:position pos:line="54" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="47">wordlen<pos:position pos:line="54" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="56">&amp;<pos:position pos:line="54" pos:column="61"/></operator><name pos:line="54" pos:column="57">llen<pos:position pos:line="54" pos:column="61"/></name></expr></argument>)<pos:position pos:line="54" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="63"/></expr_stmt>
        <if pos:line="55" pos:column="9">if<condition pos:line="55" pos:column="11">(<expr><name pos:line="55" pos:column="12">mechbit<pos:position pos:line="55" pos:column="19"/></name> <operator pos:line="55" pos:column="20">&amp;&amp;<pos:position pos:line="55" pos:column="30"/></operator> <name pos:line="55" pos:column="23">llen<pos:position pos:line="55" pos:column="27"/></name> <operator pos:line="55" pos:column="28">==<pos:position pos:line="55" pos:column="30"/></operator> <name pos:line="55" pos:column="31">wordlen<pos:position pos:line="55" pos:column="38"/></name></expr>)<pos:position pos:line="55" pos:column="39"/></condition><then pos:line="55" pos:column="39">
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="56" pos:column="11">pop3c<pos:position pos:line="56" pos:column="16"/></name><operator pos:line="56" pos:column="16">-&gt;<pos:position pos:line="56" pos:column="21"/></operator><name pos:line="56" pos:column="18">sasl<pos:position pos:line="56" pos:column="22"/></name><operator pos:line="56" pos:column="22">.<pos:position pos:line="56" pos:column="23"/></operator><name pos:line="56" pos:column="23">authmechs<pos:position pos:line="56" pos:column="32"/></name></name> <operator pos:line="56" pos:column="33">|=<pos:position pos:line="56" pos:column="35"/></operator> <name pos:line="56" pos:column="36">mechbit<pos:position pos:line="56" pos:column="43"/></name></expr>;<pos:position pos:line="56" pos:column="44"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name pos:line="58" pos:column="9">line<pos:position pos:line="58" pos:column="13"/></name> <operator pos:line="58" pos:column="14">+=<pos:position pos:line="58" pos:column="16"/></operator> <name pos:line="58" pos:column="17">wordlen<pos:position pos:line="58" pos:column="24"/></name></expr>;<pos:position pos:line="58" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name pos:line="59" pos:column="9">len<pos:position pos:line="59" pos:column="12"/></name> <operator pos:line="59" pos:column="13">-=<pos:position pos:line="59" pos:column="15"/></operator> <name pos:line="59" pos:column="16">wordlen<pos:position pos:line="59" pos:column="23"/></name></expr>;<pos:position pos:line="59" pos:column="24"/></expr_stmt>
      }<pos:position pos:line="60" pos:column="8"/></block></for>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="62" pos:column="4"/></block></then>
  <elseif pos:line="63" pos:column="3">else <if pos:line="63" pos:column="8">if<condition pos:line="63" pos:column="10">(<expr><name pos:line="63" pos:column="11">pop3code<pos:position pos:line="63" pos:column="19"/></name> <operator pos:line="63" pos:column="20">==<pos:position pos:line="63" pos:column="22"/></operator> <literal type="char" pos:line="63" pos:column="23">'+'<pos:position pos:line="63" pos:column="26"/></literal></expr>)<pos:position pos:line="63" pos:column="27"/></condition><then pos:line="63" pos:column="27"> <block pos:line="63" pos:column="28">{
    <if pos:line="64" pos:column="5">if<condition pos:line="64" pos:column="7">(<expr><name><name pos:line="64" pos:column="8">data<pos:position pos:line="64" pos:column="12"/></name><operator pos:line="64" pos:column="12">-&gt;<pos:position pos:line="64" pos:column="17"/></operator><name pos:line="64" pos:column="14">set<pos:position pos:line="64" pos:column="17"/></name><operator pos:line="64" pos:column="17">.<pos:position pos:line="64" pos:column="18"/></operator><name pos:line="64" pos:column="18">use_ssl<pos:position pos:line="64" pos:column="25"/></name></name> <operator pos:line="64" pos:column="26">&amp;&amp;<pos:position pos:line="64" pos:column="36"/></operator> <operator pos:line="64" pos:column="29">!<pos:position pos:line="64" pos:column="30"/></operator><name><name pos:line="64" pos:column="30">conn<pos:position pos:line="64" pos:column="34"/></name><operator pos:line="64" pos:column="34">-&gt;<pos:position pos:line="64" pos:column="39"/></operator><name pos:line="64" pos:column="36">ssl<pos:position pos:line="64" pos:column="39"/></name><index pos:line="64" pos:column="39">[<expr><name pos:line="64" pos:column="40">FIRSTSOCKET<pos:position pos:line="64" pos:column="51"/></name></expr>]<pos:position pos:line="64" pos:column="52"/></index></name><operator pos:line="64" pos:column="52">.<pos:position pos:line="64" pos:column="53"/></operator><name pos:line="64" pos:column="53">use<pos:position pos:line="64" pos:column="56"/></name></expr>)<pos:position pos:line="64" pos:column="57"/></condition><then pos:line="64" pos:column="57"> <block pos:line="64" pos:column="58">{
      <comment type="block" pos:line="65" pos:column="7">/* We don't have a SSL/TLS connection yet, but SSL is requested */</comment>
      <if pos:line="66" pos:column="7">if<condition pos:line="66" pos:column="9">(<expr><name><name pos:line="66" pos:column="10">pop3c<pos:position pos:line="66" pos:column="15"/></name><operator pos:line="66" pos:column="15">-&gt;<pos:position pos:line="66" pos:column="20"/></operator><name pos:line="66" pos:column="17">tls_supported<pos:position pos:line="66" pos:column="30"/></name></name></expr>)<pos:position pos:line="66" pos:column="31"/></condition><then pos:line="66" pos:column="31">
        <comment type="block" pos:line="67" pos:column="9">/* Switch to TLS connection now */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="68" pos:column="9">result<pos:position pos:line="68" pos:column="15"/></name> <operator pos:line="68" pos:column="16">=<pos:position pos:line="68" pos:column="17"/></operator> <call><name pos:line="68" pos:column="18">pop3_perform_starttls<pos:position pos:line="68" pos:column="39"/></name><argument_list pos:line="68" pos:column="39">(<argument><expr><name pos:line="68" pos:column="40">conn<pos:position pos:line="68" pos:column="44"/></name></expr></argument>)<pos:position pos:line="68" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="46"/></expr_stmt></block></then>
      <elseif pos:line="69" pos:column="7">else <if pos:line="69" pos:column="12">if<condition pos:line="69" pos:column="14">(<expr><name><name pos:line="69" pos:column="15">data<pos:position pos:line="69" pos:column="19"/></name><operator pos:line="69" pos:column="19">-&gt;<pos:position pos:line="69" pos:column="24"/></operator><name pos:line="69" pos:column="21">set<pos:position pos:line="69" pos:column="24"/></name><operator pos:line="69" pos:column="24">.<pos:position pos:line="69" pos:column="25"/></operator><name pos:line="69" pos:column="25">use_ssl<pos:position pos:line="69" pos:column="32"/></name></name> <operator pos:line="69" pos:column="33">==<pos:position pos:line="69" pos:column="35"/></operator> <name pos:line="69" pos:column="36">CURLUSESSL_TRY<pos:position pos:line="69" pos:column="50"/></name></expr>)<pos:position pos:line="69" pos:column="51"/></condition><then pos:line="69" pos:column="51">
        <comment type="block" pos:line="70" pos:column="9">/* Fallback and carry on with authentication */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="71" pos:column="9">result<pos:position pos:line="71" pos:column="15"/></name> <operator pos:line="71" pos:column="16">=<pos:position pos:line="71" pos:column="17"/></operator> <call><name pos:line="71" pos:column="18">pop3_perform_authentication<pos:position pos:line="71" pos:column="45"/></name><argument_list pos:line="71" pos:column="45">(<argument><expr><name pos:line="71" pos:column="46">conn<pos:position pos:line="71" pos:column="50"/></name></expr></argument>)<pos:position pos:line="71" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="52"/></expr_stmt></block></then></if></elseif>
      <else pos:line="72" pos:column="7">else <block pos:line="72" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="73" pos:column="9">failf<pos:position pos:line="73" pos:column="14"/></name><argument_list pos:line="73" pos:column="14">(<argument><expr><name pos:line="73" pos:column="15">data<pos:position pos:line="73" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="21">"STLS not supported."<pos:position pos:line="73" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name pos:line="74" pos:column="9">result<pos:position pos:line="74" pos:column="15"/></name> <operator pos:line="74" pos:column="16">=<pos:position pos:line="74" pos:column="17"/></operator> <name pos:line="74" pos:column="18">CURLE_USE_SSL_FAILED<pos:position pos:line="74" pos:column="38"/></name></expr>;<pos:position pos:line="74" pos:column="39"/></expr_stmt>
      }<pos:position pos:line="75" pos:column="8"/></block></else></if>
    }<pos:position pos:line="76" pos:column="6"/></block></then>
    <else pos:line="77" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="78" pos:column="7">result<pos:position pos:line="78" pos:column="13"/></name> <operator pos:line="78" pos:column="14">=<pos:position pos:line="78" pos:column="15"/></operator> <call><name pos:line="78" pos:column="16">pop3_perform_authentication<pos:position pos:line="78" pos:column="43"/></name><argument_list pos:line="78" pos:column="43">(<argument><expr><name pos:line="78" pos:column="44">conn<pos:position pos:line="78" pos:column="48"/></name></expr></argument>)<pos:position pos:line="78" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="50"/></expr_stmt></block></else></if>
  }<pos:position pos:line="79" pos:column="4"/></block></then></if></elseif>
  <else pos:line="80" pos:column="3">else <block pos:line="80" pos:column="8">{
    <comment type="block" pos:line="81" pos:column="5">/* Clear text is supported when CAPA isn't recognised */</comment>
    <expr_stmt><expr><name><name pos:line="82" pos:column="5">pop3c<pos:position pos:line="82" pos:column="10"/></name><operator pos:line="82" pos:column="10">-&gt;<pos:position pos:line="82" pos:column="15"/></operator><name pos:line="82" pos:column="12">authtypes<pos:position pos:line="82" pos:column="21"/></name></name> <operator pos:line="82" pos:column="22">|=<pos:position pos:line="82" pos:column="24"/></operator> <name pos:line="82" pos:column="25">POP3_TYPE_CLEARTEXT<pos:position pos:line="82" pos:column="44"/></name></expr>;<pos:position pos:line="82" pos:column="45"/></expr_stmt>

    <expr_stmt><expr><name pos:line="84" pos:column="5">result<pos:position pos:line="84" pos:column="11"/></name> <operator pos:line="84" pos:column="12">=<pos:position pos:line="84" pos:column="13"/></operator> <call><name pos:line="84" pos:column="14">pop3_perform_authentication<pos:position pos:line="84" pos:column="41"/></name><argument_list pos:line="84" pos:column="41">(<argument><expr><name pos:line="84" pos:column="42">conn<pos:position pos:line="84" pos:column="46"/></name></expr></argument>)<pos:position pos:line="84" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="48"/></expr_stmt>
  }<pos:position pos:line="85" pos:column="4"/></block></else></if>

  <return pos:line="87" pos:column="3">return <expr><name pos:line="87" pos:column="10">result<pos:position pos:line="87" pos:column="16"/></name></expr>;<pos:position pos:line="87" pos:column="17"/></return>
}<pos:position pos:line="88" pos:column="2"/></block></function></unit>
