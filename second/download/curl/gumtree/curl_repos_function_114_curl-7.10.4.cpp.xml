<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_114_curl-7.10.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fillbuffer<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name><name pos:line="1" pos:column="23">struct<pos:position pos:line="1" pos:column="29"/></name> <name pos:line="1" pos:column="30">connectdata<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">conn<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>,
                      <parameter><decl><type><name pos:line="2" pos:column="23">int<pos:position pos:line="2" pos:column="26"/></name></type> <name pos:line="2" pos:column="27">bytes<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="33"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">buffersize<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><name pos:line="4" pos:column="20">bytes<pos:position pos:line="4" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">nread<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>

  <if pos:line="7" pos:column="3">if<condition pos:line="7" pos:column="5">(<expr><name><name pos:line="7" pos:column="6">conn<pos:position pos:line="7" pos:column="10"/></name><operator pos:line="7" pos:column="10">-&gt;<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="12">bits<pos:position pos:line="7" pos:column="16"/></name><operator pos:line="7" pos:column="16">.<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">upload_chunky<pos:position pos:line="7" pos:column="30"/></name></name></expr>)<pos:position pos:line="7" pos:column="31"/></condition><then pos:line="7" pos:column="31"> <block pos:line="7" pos:column="32">{
    <comment type="block" pos:line="8" pos:column="5">/* if chunked Transfer-Encoding */</comment>
    <expr_stmt><expr><name pos:line="9" pos:column="5">buffersize<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">-=<pos:position pos:line="9" pos:column="18"/></operator> <operator pos:line="9" pos:column="19">(<pos:position pos:line="9" pos:column="20"/></operator><literal type="number" pos:line="9" pos:column="20">8<pos:position pos:line="9" pos:column="21"/></literal> <operator pos:line="9" pos:column="22">+<pos:position pos:line="9" pos:column="23"/></operator> <literal type="number" pos:line="9" pos:column="24">2<pos:position pos:line="9" pos:column="25"/></literal> <operator pos:line="9" pos:column="26">+<pos:position pos:line="9" pos:column="27"/></operator> <literal type="number" pos:line="9" pos:column="28">2<pos:position pos:line="9" pos:column="29"/></literal><operator pos:line="9" pos:column="29">)<pos:position pos:line="9" pos:column="30"/></operator></expr>;<pos:position pos:line="9" pos:column="31"/></expr_stmt>   <comment type="block" pos:line="9" pos:column="34">/* 32bit hex + CRLF + CRLF */</comment>
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">conn<pos:position pos:line="10" pos:column="9"/></name><operator pos:line="10" pos:column="9">-&gt;<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="11">upload_fromhere<pos:position pos:line="10" pos:column="26"/></name></name> <operator pos:line="10" pos:column="27">+=<pos:position pos:line="10" pos:column="29"/></operator> <literal type="number" pos:line="10" pos:column="30">10<pos:position pos:line="10" pos:column="32"/></literal></expr>;<pos:position pos:line="10" pos:column="33"/></expr_stmt> <comment type="block" pos:line="10" pos:column="34">/* 32bit hex + CRLF */</comment>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>
  
  <expr_stmt><expr><name pos:line="13" pos:column="3">nread<pos:position pos:line="13" pos:column="8"/></name> <operator pos:line="13" pos:column="9">=<pos:position pos:line="13" pos:column="10"/></operator> <call><name><name pos:line="13" pos:column="11">conn<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">-&gt;<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="17">fread<pos:position pos:line="13" pos:column="22"/></name></name><argument_list pos:line="13" pos:column="22">(<argument><expr><name><name pos:line="13" pos:column="23">conn<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">-&gt;<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="29">upload_fromhere<pos:position pos:line="13" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="46">1<pos:position pos:line="13" pos:column="47"/></literal></expr></argument>,
                      <argument><expr><name pos:line="14" pos:column="23">buffersize<pos:position pos:line="14" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="35">conn<pos:position pos:line="14" pos:column="39"/></name><operator pos:line="14" pos:column="39">-&gt;<pos:position pos:line="14" pos:column="44"/></operator><name pos:line="14" pos:column="41">fread_in<pos:position pos:line="14" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="51"/></expr_stmt>
          
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><operator pos:line="16" pos:column="6">!<pos:position pos:line="16" pos:column="7"/></operator><name><name pos:line="16" pos:column="7">conn<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">-&gt;<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="13">bits<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">.<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="18">forbidchunk<pos:position pos:line="16" pos:column="29"/></name></name> <operator pos:line="16" pos:column="30">&amp;&amp;<pos:position pos:line="16" pos:column="40"/></operator> <name><name pos:line="16" pos:column="33">conn<pos:position pos:line="16" pos:column="37"/></name><operator pos:line="16" pos:column="37">-&gt;<pos:position pos:line="16" pos:column="42"/></operator><name pos:line="16" pos:column="39">bits<pos:position pos:line="16" pos:column="43"/></name><operator pos:line="16" pos:column="43">.<pos:position pos:line="16" pos:column="44"/></operator><name pos:line="16" pos:column="44">upload_chunky<pos:position pos:line="16" pos:column="57"/></name></name></expr>)<pos:position pos:line="16" pos:column="58"/></condition><then pos:line="16" pos:column="58"> <block pos:line="16" pos:column="59">{
    <comment type="block" pos:line="17" pos:column="5">/* if chunked Transfer-Encoding */</comment>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">char<pos:position pos:line="18" pos:column="9"/></name></type> <name><name pos:line="18" pos:column="10">hexbuffer<pos:position pos:line="18" pos:column="19"/></name><index pos:line="18" pos:column="19">[<expr><literal type="number" pos:line="18" pos:column="20">11<pos:position pos:line="18" pos:column="22"/></literal></expr>]<pos:position pos:line="18" pos:column="23"/></index></name></decl>;<pos:position pos:line="18" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">int<pos:position pos:line="19" pos:column="8"/></name></type> <name pos:line="19" pos:column="9">hexlen<pos:position pos:line="19" pos:column="15"/></name> <init pos:line="19" pos:column="16">= <expr><call><name pos:line="19" pos:column="18">snprintf<pos:position pos:line="19" pos:column="26"/></name><argument_list pos:line="19" pos:column="26">(<argument><expr><name pos:line="19" pos:column="27">hexbuffer<pos:position pos:line="19" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="38">sizeof<argument_list pos:line="19" pos:column="44">(<argument><expr><name pos:line="19" pos:column="45">hexbuffer<pos:position pos:line="19" pos:column="54"/></name></expr></argument>)<pos:position pos:line="19" pos:column="55"/></argument_list></sizeof></expr></argument>,
                          <argument><expr><literal type="string" pos:line="20" pos:column="27">"%x\r\n"<pos:position pos:line="20" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="37">nread<pos:position pos:line="20" pos:column="42"/></name></expr></argument>)<pos:position pos:line="20" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="44"/></decl_stmt>
    <comment type="block" pos:line="21" pos:column="5">/* move buffer pointer */</comment>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">conn<pos:position pos:line="22" pos:column="9"/></name><operator pos:line="22" pos:column="9">-&gt;<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="11">upload_fromhere<pos:position pos:line="22" pos:column="26"/></name></name> <operator pos:line="22" pos:column="27">-=<pos:position pos:line="22" pos:column="29"/></operator> <name pos:line="22" pos:column="30">hexlen<pos:position pos:line="22" pos:column="36"/></name></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="23" pos:column="5">nread<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">+=<pos:position pos:line="23" pos:column="13"/></operator> <name pos:line="23" pos:column="14">hexlen<pos:position pos:line="23" pos:column="20"/></name></expr>;<pos:position pos:line="23" pos:column="21"/></expr_stmt>

    <comment type="block" pos:line="25" pos:column="5">/* copy the prefix to the buffer */</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">memcpy<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><name><name pos:line="26" pos:column="12">conn<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">-&gt;<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="18">upload_fromhere<pos:position pos:line="26" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="35">hexbuffer<pos:position pos:line="26" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="46">hexlen<pos:position pos:line="26" pos:column="52"/></name></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="54"/></expr_stmt>
    <if pos:line="27" pos:column="5">if<condition pos:line="27" pos:column="7">(<expr><name pos:line="27" pos:column="8">nread<pos:position pos:line="27" pos:column="13"/></name><operator pos:line="27" pos:column="13">&gt;<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="14">hexlen<pos:position pos:line="27" pos:column="20"/></name></expr>)<pos:position pos:line="27" pos:column="21"/></condition><then pos:line="27" pos:column="21"> <block pos:line="27" pos:column="22">{
      <comment type="block" pos:line="28" pos:column="7">/* append CRLF to the data */</comment>
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">memcpy<pos:position pos:line="29" pos:column="13"/></name><argument_list pos:line="29" pos:column="13">(<argument><expr><name><name pos:line="29" pos:column="14">conn<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">-&gt;<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="20">upload_fromhere<pos:position pos:line="29" pos:column="35"/></name></name> <operator pos:line="29" pos:column="36">+<pos:position pos:line="29" pos:column="37"/></operator>
             <name pos:line="30" pos:column="14">nread<pos:position pos:line="30" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="21">"\r\n"<pos:position pos:line="30" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="29">2<pos:position pos:line="30" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="32"/></expr_stmt>
      <expr_stmt><expr><name pos:line="31" pos:column="7">nread<pos:position pos:line="31" pos:column="12"/></name><operator pos:line="31" pos:column="12">+=<pos:position pos:line="31" pos:column="14"/></operator><literal type="number" pos:line="31" pos:column="14">2<pos:position pos:line="31" pos:column="15"/></literal></expr>;<pos:position pos:line="31" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></then>
    <else pos:line="33" pos:column="5">else <block pos:line="33" pos:column="10">{
      <comment type="block" pos:line="34" pos:column="7">/* mark this as done once this chunk is transfered */</comment>
      <expr_stmt><expr><name><name pos:line="35" pos:column="7">conn<pos:position pos:line="35" pos:column="11"/></name><operator pos:line="35" pos:column="11">-&gt;<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="13">keep<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">.<pos:position pos:line="35" pos:column="18"/></operator><name pos:line="35" pos:column="18">upload_done<pos:position pos:line="35" pos:column="29"/></name></name> <operator pos:line="35" pos:column="30">=<pos:position pos:line="35" pos:column="31"/></operator> <name pos:line="35" pos:column="32">TRUE<pos:position pos:line="35" pos:column="36"/></name></expr>;<pos:position pos:line="35" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></else></if>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if>
  <return pos:line="38" pos:column="3">return <expr><name pos:line="38" pos:column="10">nread<pos:position pos:line="38" pos:column="15"/></name></expr>;<pos:position pos:line="38" pos:column="16"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
