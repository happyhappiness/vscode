<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2145_curl-7.55.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">Curl_addrinfo<pos:position pos:line="1" pos:column="14"/></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">Curl_getaddrinfo<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">connectdata<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">conn<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
                                <parameter><decl><type><specifier pos:line="2" pos:column="33">const<pos:position pos:line="2" pos:column="38"/></specifier> <name pos:line="2" pos:column="39">char<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">hostname<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="3" pos:column="33">int<pos:position pos:line="3" pos:column="36"/></name></type> <name pos:line="3" pos:column="37">port<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="4" pos:column="33">int<pos:position pos:line="4" pos:column="36"/></name> <modifier pos:line="4" pos:column="37">*<pos:position pos:line="4" pos:column="38"/></modifier></type><name pos:line="4" pos:column="38">waitp<pos:position pos:line="4" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="44"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">addrinfo<pos:position pos:line="6" pos:column="18"/></name></name></type> <name pos:line="6" pos:column="19">hints<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">Curl_addrinfo<pos:position pos:line="7" pos:column="16"/></name> <modifier pos:line="7" pos:column="17">*<pos:position pos:line="7" pos:column="18"/></modifier></type><name pos:line="7" pos:column="18">res<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">error<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name></type> <name><name pos:line="9" pos:column="8">sbuf<pos:position pos:line="9" pos:column="12"/></name><index pos:line="9" pos:column="12">[<expr><literal type="number" pos:line="9" pos:column="13">12<pos:position pos:line="9" pos:column="15"/></literal></expr>]<pos:position pos:line="9" pos:column="16"/></index></name></decl>;<pos:position pos:line="9" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">sbufptr<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><name pos:line="10" pos:column="19">NULL<pos:position pos:line="10" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
<cpp:ifndef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifndef<pos:position pos:line="11" pos:column="8"/></cpp:directive> <name pos:line="11" pos:column="9">USE_RESOLVE_ON_IPS<pos:position pos:line="11" pos:column="27"/></name></cpp:ifndef>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name></type> <name><name pos:line="12" pos:column="8">addrbuf<pos:position pos:line="12" pos:column="15"/></name><index pos:line="12" pos:column="15">[<expr><literal type="number" pos:line="12" pos:column="16">128<pos:position pos:line="12" pos:column="19"/></literal></expr>]<pos:position pos:line="12" pos:column="20"/></index></name></decl>;<pos:position pos:line="12" pos:column="21"/></decl_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">int<pos:position pos:line="14" pos:column="6"/></name></type> <name pos:line="14" pos:column="7">pf<pos:position pos:line="14" pos:column="9"/></name></decl>;<pos:position pos:line="14" pos:column="10"/></decl_stmt>
<cpp:if pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">if<pos:position pos:line="15" pos:column="4"/></cpp:directive> <expr><operator pos:line="15" pos:column="5">!<pos:position pos:line="15" pos:column="6"/></operator><call><name pos:line="15" pos:column="6">defined<pos:position pos:line="15" pos:column="13"/></name><argument_list pos:line="15" pos:column="13">(<argument><expr><name pos:line="15" pos:column="14">CURL_DISABLE_VERBOSE_STRINGS<pos:position pos:line="15" pos:column="42"/></name></expr></argument>)<pos:position pos:line="15" pos:column="43"/></argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name><name pos:line="16" pos:column="3">struct<pos:position pos:line="16" pos:column="9"/></name> <name pos:line="16" pos:column="10">Curl_easy<pos:position pos:line="16" pos:column="19"/></name></name> <modifier pos:line="16" pos:column="20">*<pos:position pos:line="16" pos:column="21"/></modifier></type><name pos:line="16" pos:column="21">data<pos:position pos:line="16" pos:column="25"/></name> <init pos:line="16" pos:column="26">= <expr><name><name pos:line="16" pos:column="28">conn<pos:position pos:line="16" pos:column="32"/></name><operator pos:line="16" pos:column="32">-&gt;<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="34">data<pos:position pos:line="16" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="16" pos:column="39"/></decl_stmt>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><operator pos:line="19" pos:column="3">*<pos:position pos:line="19" pos:column="4"/></operator><name pos:line="19" pos:column="4">waitp<pos:position pos:line="19" pos:column="9"/></name> <operator pos:line="19" pos:column="10">=<pos:position pos:line="19" pos:column="11"/></operator> <literal type="number" pos:line="19" pos:column="12">0<pos:position pos:line="19" pos:column="13"/></literal></expr>;<pos:position pos:line="19" pos:column="14"/></expr_stmt> <comment type="block" pos:line="19" pos:column="15">/* synchronous response only */</comment>

  <comment type="block" pos:line="21" pos:column="3">/* Check if a limited name resolve has been requested */</comment>
  <switch pos:line="22" pos:column="3">switch<condition pos:line="22" pos:column="9">(<expr><name><name pos:line="22" pos:column="10">conn<pos:position pos:line="22" pos:column="14"/></name><operator pos:line="22" pos:column="14">-&gt;<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="16">ip_version<pos:position pos:line="22" pos:column="26"/></name></name></expr>)<pos:position pos:line="22" pos:column="27"/></condition> <block pos:line="22" pos:column="28">{
  <case pos:line="23" pos:column="3">case <expr><name pos:line="23" pos:column="8">CURL_IPRESOLVE_V4<pos:position pos:line="23" pos:column="25"/></name></expr>:<pos:position pos:line="23" pos:column="26"/></case>
    <expr_stmt><expr><name pos:line="24" pos:column="5">pf<pos:position pos:line="24" pos:column="7"/></name> <operator pos:line="24" pos:column="8">=<pos:position pos:line="24" pos:column="9"/></operator> <name pos:line="24" pos:column="10">PF_INET<pos:position pos:line="24" pos:column="17"/></name></expr>;<pos:position pos:line="24" pos:column="18"/></expr_stmt>
    <break pos:line="25" pos:column="5">break;<pos:position pos:line="25" pos:column="11"/></break>
  <case pos:line="26" pos:column="3">case <expr><name pos:line="26" pos:column="8">CURL_IPRESOLVE_V6<pos:position pos:line="26" pos:column="25"/></name></expr>:<pos:position pos:line="26" pos:column="26"/></case>
    <expr_stmt><expr><name pos:line="27" pos:column="5">pf<pos:position pos:line="27" pos:column="7"/></name> <operator pos:line="27" pos:column="8">=<pos:position pos:line="27" pos:column="9"/></operator> <name pos:line="27" pos:column="10">PF_INET6<pos:position pos:line="27" pos:column="18"/></name></expr>;<pos:position pos:line="27" pos:column="19"/></expr_stmt>
    <break pos:line="28" pos:column="5">break;<pos:position pos:line="28" pos:column="11"/></break>
  <default pos:line="29" pos:column="3">default:<pos:position pos:line="29" pos:column="11"/></default>
    <expr_stmt><expr><name pos:line="30" pos:column="5">pf<pos:position pos:line="30" pos:column="7"/></name> <operator pos:line="30" pos:column="8">=<pos:position pos:line="30" pos:column="9"/></operator> <name pos:line="30" pos:column="10">PF_UNSPEC<pos:position pos:line="30" pos:column="19"/></name></expr>;<pos:position pos:line="30" pos:column="20"/></expr_stmt>
    <break pos:line="31" pos:column="5">break;<pos:position pos:line="31" pos:column="11"/></break>
  }<pos:position pos:line="32" pos:column="4"/></block></switch>

  <if pos:line="34" pos:column="3">if<condition pos:line="34" pos:column="5">(<expr><operator pos:line="34" pos:column="6">(<pos:position pos:line="34" pos:column="7"/></operator><name pos:line="34" pos:column="7">pf<pos:position pos:line="34" pos:column="9"/></name> <operator pos:line="34" pos:column="10">!=<pos:position pos:line="34" pos:column="12"/></operator> <name pos:line="34" pos:column="13">PF_INET<pos:position pos:line="34" pos:column="20"/></name><operator pos:line="34" pos:column="20">)<pos:position pos:line="34" pos:column="21"/></operator> <operator pos:line="34" pos:column="22">&amp;&amp;<pos:position pos:line="34" pos:column="32"/></operator> <operator pos:line="34" pos:column="25">!<pos:position pos:line="34" pos:column="26"/></operator><call><name pos:line="34" pos:column="26">Curl_ipv6works<pos:position pos:line="34" pos:column="40"/></name><argument_list pos:line="34" pos:column="40">()<pos:position pos:line="34" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="43"/></condition><then pos:line="34" pos:column="43">
    <comment type="block" pos:line="35" pos:column="5">/* The stack seems to be a non-IPv6 one */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="5">pf<pos:position pos:line="36" pos:column="7"/></name> <operator pos:line="36" pos:column="8">=<pos:position pos:line="36" pos:column="9"/></operator> <name pos:line="36" pos:column="10">PF_INET<pos:position pos:line="36" pos:column="17"/></name></expr>;<pos:position pos:line="36" pos:column="18"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="38" pos:column="3">memset<pos:position pos:line="38" pos:column="9"/></name><argument_list pos:line="38" pos:column="9">(<argument><expr><operator pos:line="38" pos:column="10">&amp;<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="11">hints<pos:position pos:line="38" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="18">0<pos:position pos:line="38" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="38" pos:column="21">sizeof<argument_list pos:line="38" pos:column="27">(<argument><expr><name pos:line="38" pos:column="28">hints<pos:position pos:line="38" pos:column="33"/></name></expr></argument>)<pos:position pos:line="38" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="38" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="39" pos:column="3">hints<pos:position pos:line="39" pos:column="8"/></name><operator pos:line="39" pos:column="8">.<pos:position pos:line="39" pos:column="9"/></operator><name pos:line="39" pos:column="9">ai_family<pos:position pos:line="39" pos:column="18"/></name></name> <operator pos:line="39" pos:column="19">=<pos:position pos:line="39" pos:column="20"/></operator> <name pos:line="39" pos:column="21">pf<pos:position pos:line="39" pos:column="23"/></name></expr>;<pos:position pos:line="39" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="40" pos:column="3">hints<pos:position pos:line="40" pos:column="8"/></name><operator pos:line="40" pos:column="8">.<pos:position pos:line="40" pos:column="9"/></operator><name pos:line="40" pos:column="9">ai_socktype<pos:position pos:line="40" pos:column="20"/></name></name> <operator pos:line="40" pos:column="21">=<pos:position pos:line="40" pos:column="22"/></operator> <name><name pos:line="40" pos:column="23">conn<pos:position pos:line="40" pos:column="27"/></name><operator pos:line="40" pos:column="27">-&gt;<pos:position pos:line="40" pos:column="32"/></operator><name pos:line="40" pos:column="29">socktype<pos:position pos:line="40" pos:column="37"/></name></name></expr>;<pos:position pos:line="40" pos:column="38"/></expr_stmt>

<cpp:ifndef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">ifndef<pos:position pos:line="42" pos:column="8"/></cpp:directive> <name pos:line="42" pos:column="9">USE_RESOLVE_ON_IPS<pos:position pos:line="42" pos:column="27"/></name></cpp:ifndef>
  <comment type="block" pos:line="43" pos:column="3">/*
   * The AI_NUMERICHOST must not be set to get synthesized IPv6 address from
   * an IPv4 address on iOS and Mac OS X.
   */</comment>
  <if pos:line="47" pos:column="3">if<condition pos:line="47" pos:column="5">(<expr><operator pos:line="47" pos:column="6">(<pos:position pos:line="47" pos:column="7"/></operator><literal type="number" pos:line="47" pos:column="7">1<pos:position pos:line="47" pos:column="8"/></literal> <operator pos:line="47" pos:column="9">==<pos:position pos:line="47" pos:column="11"/></operator> <call><name pos:line="47" pos:column="12">Curl_inet_pton<pos:position pos:line="47" pos:column="26"/></name><argument_list pos:line="47" pos:column="26">(<argument><expr><name pos:line="47" pos:column="27">AF_INET<pos:position pos:line="47" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="36">hostname<pos:position pos:line="47" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="46">addrbuf<pos:position pos:line="47" pos:column="53"/></name></expr></argument>)<pos:position pos:line="47" pos:column="54"/></argument_list></call><operator pos:line="47" pos:column="54">)<pos:position pos:line="47" pos:column="55"/></operator> <operator pos:line="47" pos:column="56">||<pos:position pos:line="47" pos:column="58"/></operator>
     <operator pos:line="48" pos:column="6">(<pos:position pos:line="48" pos:column="7"/></operator><literal type="number" pos:line="48" pos:column="7">1<pos:position pos:line="48" pos:column="8"/></literal> <operator pos:line="48" pos:column="9">==<pos:position pos:line="48" pos:column="11"/></operator> <call><name pos:line="48" pos:column="12">Curl_inet_pton<pos:position pos:line="48" pos:column="26"/></name><argument_list pos:line="48" pos:column="26">(<argument><expr><name pos:line="48" pos:column="27">AF_INET6<pos:position pos:line="48" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="37">hostname<pos:position pos:line="48" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="47">addrbuf<pos:position pos:line="48" pos:column="54"/></name></expr></argument>)<pos:position pos:line="48" pos:column="55"/></argument_list></call><operator pos:line="48" pos:column="55">)<pos:position pos:line="48" pos:column="56"/></operator></expr>)<pos:position pos:line="48" pos:column="57"/></condition><then pos:line="48" pos:column="57"> <block pos:line="48" pos:column="58">{
    <comment type="block" pos:line="49" pos:column="5">/* the given address is numerical only, prevent a reverse lookup */</comment>
    <expr_stmt><expr><name><name pos:line="50" pos:column="5">hints<pos:position pos:line="50" pos:column="10"/></name><operator pos:line="50" pos:column="10">.<pos:position pos:line="50" pos:column="11"/></operator><name pos:line="50" pos:column="11">ai_flags<pos:position pos:line="50" pos:column="19"/></name></name> <operator pos:line="50" pos:column="20">=<pos:position pos:line="50" pos:column="21"/></operator> <name pos:line="50" pos:column="22">AI_NUMERICHOST<pos:position pos:line="50" pos:column="36"/></name></expr>;<pos:position pos:line="50" pos:column="37"/></expr_stmt>
  }<pos:position pos:line="51" pos:column="4"/></block></then></if>
<cpp:endif pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">endif<pos:position pos:line="52" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="54" pos:column="3">if<condition pos:line="54" pos:column="5">(<expr><name pos:line="54" pos:column="6">port<pos:position pos:line="54" pos:column="10"/></name></expr>)<pos:position pos:line="54" pos:column="11"/></condition><then pos:line="54" pos:column="11"> <block pos:line="54" pos:column="12">{
    <expr_stmt><expr><call><name pos:line="55" pos:column="5">snprintf<pos:position pos:line="55" pos:column="13"/></name><argument_list pos:line="55" pos:column="13">(<argument><expr><name pos:line="55" pos:column="14">sbuf<pos:position pos:line="55" pos:column="18"/></name></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="20">sizeof<argument_list pos:line="55" pos:column="26">(<argument><expr><name pos:line="55" pos:column="27">sbuf<pos:position pos:line="55" pos:column="31"/></name></expr></argument>)<pos:position pos:line="55" pos:column="32"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="34">"%d"<pos:position pos:line="55" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="40">port<pos:position pos:line="55" pos:column="44"/></name></expr></argument>)<pos:position pos:line="55" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><name pos:line="56" pos:column="5">sbufptr<pos:position pos:line="56" pos:column="12"/></name><operator pos:line="56" pos:column="12">=<pos:position pos:line="56" pos:column="13"/></operator><name pos:line="56" pos:column="13">sbuf<pos:position pos:line="56" pos:column="17"/></name></expr>;<pos:position pos:line="56" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="57" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="59" pos:column="3">error<pos:position pos:line="59" pos:column="8"/></name> <operator pos:line="59" pos:column="9">=<pos:position pos:line="59" pos:column="10"/></operator> <call><name pos:line="59" pos:column="11">Curl_getaddrinfo_ex<pos:position pos:line="59" pos:column="30"/></name><argument_list pos:line="59" pos:column="30">(<argument><expr><name pos:line="59" pos:column="31">hostname<pos:position pos:line="59" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="41">sbufptr<pos:position pos:line="59" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="50">&amp;<pos:position pos:line="59" pos:column="55"/></operator><name pos:line="59" pos:column="51">hints<pos:position pos:line="59" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="58">&amp;<pos:position pos:line="59" pos:column="63"/></operator><name pos:line="59" pos:column="59">res<pos:position pos:line="59" pos:column="62"/></name></expr></argument>)<pos:position pos:line="59" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="64"/></expr_stmt>
  <if pos:line="60" pos:column="3">if<condition pos:line="60" pos:column="5">(<expr><name pos:line="60" pos:column="6">error<pos:position pos:line="60" pos:column="11"/></name></expr>)<pos:position pos:line="60" pos:column="12"/></condition><then pos:line="60" pos:column="12"> <block pos:line="60" pos:column="13">{
    <expr_stmt><expr><call><name pos:line="61" pos:column="5">infof<pos:position pos:line="61" pos:column="10"/></name><argument_list pos:line="61" pos:column="10">(<argument><expr><name pos:line="61" pos:column="11">data<pos:position pos:line="61" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="17">"getaddrinfo(3) failed for %s:%d\n"<pos:position pos:line="61" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="54">hostname<pos:position pos:line="61" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="64">port<pos:position pos:line="61" pos:column="68"/></name></expr></argument>)<pos:position pos:line="61" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="70"/></expr_stmt>
    <return pos:line="62" pos:column="5">return <expr><name pos:line="62" pos:column="12">NULL<pos:position pos:line="62" pos:column="16"/></name></expr>;<pos:position pos:line="62" pos:column="17"/></return>
  }<pos:position pos:line="63" pos:column="4"/></block></then></if>

  <if pos:line="65" pos:column="3">if<condition pos:line="65" pos:column="5">(<expr><name pos:line="65" pos:column="6">port<pos:position pos:line="65" pos:column="10"/></name></expr>)<pos:position pos:line="65" pos:column="11"/></condition><then pos:line="65" pos:column="11"> <block pos:line="65" pos:column="12">{
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">Curl_addrinfo_set_port<pos:position pos:line="66" pos:column="27"/></name><argument_list pos:line="66" pos:column="27">(<argument><expr><name pos:line="66" pos:column="28">res<pos:position pos:line="66" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="33">port<pos:position pos:line="66" pos:column="37"/></name></expr></argument>)<pos:position pos:line="66" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="67" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="69" pos:column="3">dump_addrinfo<pos:position pos:line="69" pos:column="16"/></name><argument_list pos:line="69" pos:column="16">(<argument><expr><name pos:line="69" pos:column="17">conn<pos:position pos:line="69" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="23">res<pos:position pos:line="69" pos:column="26"/></name></expr></argument>)<pos:position pos:line="69" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="28"/></expr_stmt>

  <return pos:line="71" pos:column="3">return <expr><name pos:line="71" pos:column="10">res<pos:position pos:line="71" pos:column="13"/></name></expr>;<pos:position pos:line="71" pos:column="14"/></return>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
