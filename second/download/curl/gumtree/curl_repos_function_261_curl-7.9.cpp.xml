<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_261_curl-7.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">DynaOpen<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">void<pos:position pos:line="1" pos:column="26"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="27"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><call><name pos:line="3" pos:column="5">defined<pos:position pos:line="3" pos:column="12"/></name><argument_list pos:line="3" pos:column="12">(<argument><expr><name pos:line="3" pos:column="13">HAVE_DLOPEN<pos:position pos:line="3" pos:column="24"/></name></expr></argument>)<pos:position pos:line="3" pos:column="25"/></argument_list></call> <operator pos:line="3" pos:column="26">||<pos:position pos:line="3" pos:column="28"/></operator> <call><name pos:line="3" pos:column="29">defined<pos:position pos:line="3" pos:column="36"/></name><argument_list pos:line="3" pos:column="36">(<argument><expr><name pos:line="3" pos:column="37">HAVE_LIBDL<pos:position pos:line="3" pos:column="47"/></name></expr></argument>)<pos:position pos:line="3" pos:column="48"/></argument_list></call></expr></cpp:if>
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><name pos:line="4" pos:column="7">libldap<pos:position pos:line="4" pos:column="14"/></name> <operator pos:line="4" pos:column="15">==<pos:position pos:line="4" pos:column="17"/></operator> <name pos:line="4" pos:column="18">NULL<pos:position pos:line="4" pos:column="22"/></name></expr>)<pos:position pos:line="4" pos:column="23"/></condition><then pos:line="4" pos:column="23"> <block pos:line="4" pos:column="24">{
    <comment type="block" pos:line="5" pos:column="5">/*
     * libldap.so should be able to resolve its dependency on
     * liblber.so automatically, but since it does not we will
     * handle it here by opening liblber.so as global.
     */</comment>
    <macro><name pos:line="10" pos:column="5">dlopen<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><literal type="string" pos:line="10" pos:column="12">"liblber.so"<pos:position pos:line="10" pos:column="24"/></literal></argument>,
<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef<pos:position pos:line="11" pos:column="7"/></cpp:directive> <name pos:line="11" pos:column="8">RTLD_LAZY_GLOBAL<pos:position pos:line="11" pos:column="24"/></name></cpp:ifdef> <comment type="block" pos:line="11" pos:column="25">/* It turns out some systems use this: */</comment>
           <argument pos:line="12" pos:column="12">RTLD_LAZY_GLOBAL
<cpp:else pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">else<pos:position pos:line="13" pos:column="6"/></cpp:directive></cpp:else>
<cpp:ifdef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifdef<pos:position pos:line="14" pos:column="7"/></cpp:directive> <name pos:line="14" pos:column="8">RTLD_GLOBAL<pos:position pos:line="14" pos:column="19"/></name></cpp:ifdef>
           RTLD_LAZY | RTLD_GLOBAL
<cpp:else pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">else<pos:position pos:line="16" pos:column="6"/></cpp:directive></cpp:else>
           <comment type="block" pos:line="17" pos:column="12">/* and some systems don't have the RTLD_GLOBAL symbol */</comment>
           RTLD_LAZY<pos:position pos:line="18" pos:column="21"/></argument>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>
           )<pos:position pos:line="21" pos:column="13"/></argument_list></macro><empty_stmt pos:line="21" pos:column="13">;<pos:position pos:line="21" pos:column="14"/></empty_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">libldap<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <call><name pos:line="22" pos:column="15">dlopen<pos:position pos:line="22" pos:column="21"/></name><argument_list pos:line="22" pos:column="21">(<argument><expr><literal type="string" pos:line="22" pos:column="22">"libldap.so"<pos:position pos:line="22" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="36">RTLD_LAZY<pos:position pos:line="22" pos:column="45"/></name></expr></argument>)<pos:position pos:line="22" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="47"/></expr_stmt>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
