<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_511_curl-7.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">argv<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier><modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">envp<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">base64<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">base64Len<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">unsigned<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">char<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">data<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">dataLen<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">i<pos:position pos:line="7" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="10">j<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>

  <expr_stmt><expr><name pos:line="9" pos:column="3">base64<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">=<pos:position pos:line="9" pos:column="11"/></operator> <operator pos:line="9" pos:column="12">(<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">char<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">*<pos:position pos:line="9" pos:column="19"/></operator><operator pos:line="9" pos:column="19">)<pos:position pos:line="9" pos:column="20"/></operator><call><name pos:line="9" pos:column="20">suck<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><operator pos:line="9" pos:column="25">&amp;<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="26">base64Len<pos:position pos:line="9" pos:column="35"/></name></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><name pos:line="10" pos:column="3">data<pos:position pos:line="10" pos:column="7"/></name> <operator pos:line="10" pos:column="8">=<pos:position pos:line="10" pos:column="9"/></operator> <operator pos:line="10" pos:column="10">(<pos:position pos:line="10" pos:column="11"/></operator><name pos:line="10" pos:column="11">unsigned<pos:position pos:line="10" pos:column="19"/></name> <name pos:line="10" pos:column="20">char<pos:position pos:line="10" pos:column="24"/></name> <operator pos:line="10" pos:column="25">*<pos:position pos:line="10" pos:column="26"/></operator><operator pos:line="10" pos:column="26">)<pos:position pos:line="10" pos:column="27"/></operator><call><name pos:line="10" pos:column="27">malloc<pos:position pos:line="10" pos:column="33"/></name><argument_list pos:line="10" pos:column="33">(<argument><expr><name pos:line="10" pos:column="34">base64Len<pos:position pos:line="10" pos:column="43"/></name> <operator pos:line="10" pos:column="44">*<pos:position pos:line="10" pos:column="45"/></operator> <literal type="number" pos:line="10" pos:column="46">3<pos:position pos:line="10" pos:column="47"/></literal><operator pos:line="10" pos:column="47">/<pos:position pos:line="10" pos:column="48"/></operator><literal type="number" pos:line="10" pos:column="48">4<pos:position pos:line="10" pos:column="49"/></literal> <operator pos:line="10" pos:column="50">+<pos:position pos:line="10" pos:column="51"/></operator> <literal type="number" pos:line="10" pos:column="52">8<pos:position pos:line="10" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="55"/></expr_stmt>
  <expr_stmt><expr><name pos:line="11" pos:column="3">dataLen<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <call><name pos:line="11" pos:column="13">Curl_base64_decode<pos:position pos:line="11" pos:column="31"/></name><argument_list pos:line="11" pos:column="31">(<argument><expr><name pos:line="11" pos:column="32">base64<pos:position pos:line="11" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="40">data<pos:position pos:line="11" pos:column="44"/></name></expr></argument>)<pos:position pos:line="11" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="46"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="13" pos:column="3">fprintf<pos:position pos:line="13" pos:column="10"/></name><argument_list pos:line="13" pos:column="10">(<argument><expr><name pos:line="13" pos:column="11">stderr<pos:position pos:line="13" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="19">"%d\n"<pos:position pos:line="13" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="27">dataLen<pos:position pos:line="13" pos:column="34"/></name></expr></argument>)<pos:position pos:line="13" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt>

  <for pos:line="15" pos:column="3">for<control pos:line="15" pos:column="6">(<init><expr><name pos:line="15" pos:column="7">i<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">=<pos:position pos:line="15" pos:column="9"/></operator><literal type="number" pos:line="15" pos:column="9">0<pos:position pos:line="15" pos:column="10"/></literal></expr>;<pos:position pos:line="15" pos:column="11"/></init> <condition><expr><name pos:line="15" pos:column="12">i<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">&lt;<pos:position pos:line="15" pos:column="18"/></operator> <name pos:line="15" pos:column="16">dataLen<pos:position pos:line="15" pos:column="23"/></name></expr>;<pos:position pos:line="15" pos:column="24"/></condition> <incr><expr><name pos:line="15" pos:column="25">i<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">+=<pos:position pos:line="15" pos:column="28"/></operator><literal type="number" pos:line="15" pos:column="28">0x10<pos:position pos:line="15" pos:column="32"/></literal></expr></incr>)<pos:position pos:line="15" pos:column="33"/></control> <block pos:line="15" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">printf<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><literal type="string" pos:line="16" pos:column="12">"0x%02x: "<pos:position pos:line="16" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="24">i<pos:position pos:line="16" pos:column="25"/></name></expr></argument>)<pos:position pos:line="16" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="27"/></expr_stmt>
    <for pos:line="17" pos:column="5">for<control pos:line="17" pos:column="8">(<init><expr><name pos:line="17" pos:column="9">j<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator><literal type="number" pos:line="17" pos:column="11">0<pos:position pos:line="17" pos:column="12"/></literal></expr>;<pos:position pos:line="17" pos:column="13"/></init> <condition><expr><name pos:line="17" pos:column="14">j<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">&lt;<pos:position pos:line="17" pos:column="20"/></operator> <literal type="number" pos:line="17" pos:column="18">0x10<pos:position pos:line="17" pos:column="22"/></literal></expr>;<pos:position pos:line="17" pos:column="23"/></condition> <incr><expr><name pos:line="17" pos:column="24">j<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">++<pos:position pos:line="17" pos:column="27"/></operator></expr></incr>)<pos:position pos:line="17" pos:column="28"/></control>
      <block type="pseudo"><if pos:line="18" pos:column="7">if<condition pos:line="18" pos:column="9">(<expr><operator pos:line="18" pos:column="10">(<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">j<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">+<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">i<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">)<pos:position pos:line="18" pos:column="15"/></operator> <operator pos:line="18" pos:column="16">&lt;<pos:position pos:line="18" pos:column="20"/></operator> <name pos:line="18" pos:column="18">dataLen<pos:position pos:line="18" pos:column="25"/></name></expr>)<pos:position pos:line="18" pos:column="26"/></condition><then pos:line="18" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="9">printf<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="string" pos:line="19" pos:column="16">"%02x "<pos:position pos:line="19" pos:column="23"/></literal></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="25">data<pos:position pos:line="19" pos:column="29"/></name><index pos:line="19" pos:column="29">[<expr><name pos:line="19" pos:column="30">i<pos:position pos:line="19" pos:column="31"/></name><operator pos:line="19" pos:column="31">+<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="32">j<pos:position pos:line="19" pos:column="33"/></name></expr>]<pos:position pos:line="19" pos:column="34"/></index></name></expr></argument>)<pos:position pos:line="19" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="36"/></expr_stmt></block></then>
      <else pos:line="20" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="9">printf<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="string" pos:line="21" pos:column="16">"   "<pos:position pos:line="21" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="23"/></expr_stmt></block></else></if></block></for>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">printf<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><literal type="string" pos:line="23" pos:column="12">" | "<pos:position pos:line="23" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="19"/></expr_stmt>

    <for pos:line="25" pos:column="5">for<control pos:line="25" pos:column="8">(<init><expr><name pos:line="25" pos:column="9">j<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">=<pos:position pos:line="25" pos:column="11"/></operator><literal type="number" pos:line="25" pos:column="11">0<pos:position pos:line="25" pos:column="12"/></literal></expr>;<pos:position pos:line="25" pos:column="13"/></init> <condition><expr><name pos:line="25" pos:column="14">j<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">&lt;<pos:position pos:line="25" pos:column="20"/></operator> <literal type="number" pos:line="25" pos:column="18">0x10<pos:position pos:line="25" pos:column="22"/></literal></expr>;<pos:position pos:line="25" pos:column="23"/></condition> <incr><expr><name pos:line="25" pos:column="24">j<pos:position pos:line="25" pos:column="25"/></name><operator pos:line="25" pos:column="25">++<pos:position pos:line="25" pos:column="27"/></operator></expr></incr>)<pos:position pos:line="25" pos:column="28"/></control>
      <block type="pseudo"><if pos:line="26" pos:column="7">if<condition pos:line="26" pos:column="9">(<expr><operator pos:line="26" pos:column="10">(<pos:position pos:line="26" pos:column="11"/></operator><name pos:line="26" pos:column="11">j<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">+<pos:position pos:line="26" pos:column="13"/></operator><name pos:line="26" pos:column="13">i<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">)<pos:position pos:line="26" pos:column="15"/></operator> <operator pos:line="26" pos:column="16">&lt;<pos:position pos:line="26" pos:column="20"/></operator> <name pos:line="26" pos:column="18">dataLen<pos:position pos:line="26" pos:column="25"/></name></expr>)<pos:position pos:line="26" pos:column="26"/></condition><then pos:line="26" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="9">printf<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="string" pos:line="27" pos:column="16">"%c"<pos:position pos:line="27" pos:column="20"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name pos:line="27" pos:column="22">isgraph<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name><name pos:line="27" pos:column="30">data<pos:position pos:line="27" pos:column="34"/></name><index pos:line="27" pos:column="34">[<expr><name pos:line="27" pos:column="35">i<pos:position pos:line="27" pos:column="36"/></name><operator pos:line="27" pos:column="36">+<pos:position pos:line="27" pos:column="37"/></operator><name pos:line="27" pos:column="37">j<pos:position pos:line="27" pos:column="38"/></name></expr>]<pos:position pos:line="27" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="27" pos:column="40"/></argument_list></call></expr>?<pos:position pos:line="27" pos:column="41"/></condition><then><expr><name><name pos:line="27" pos:column="41">data<pos:position pos:line="27" pos:column="45"/></name><index pos:line="27" pos:column="45">[<expr><name pos:line="27" pos:column="46">i<pos:position pos:line="27" pos:column="47"/></name><operator pos:line="27" pos:column="47">+<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="48">j<pos:position pos:line="27" pos:column="49"/></name></expr>]<pos:position pos:line="27" pos:column="50"/></index></name></expr></then><else pos:line="27" pos:column="50">:<expr><literal type="char" pos:line="27" pos:column="51">'.'<pos:position pos:line="27" pos:column="54"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="27" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="56"/></expr_stmt></block></then>
      <else pos:line="28" pos:column="7">else
        <block type="pseudo"><break pos:line="29" pos:column="9">break;<pos:position pos:line="29" pos:column="15"/></break></block></else></if></block></for>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">puts<pos:position pos:line="30" pos:column="9"/></name><argument_list pos:line="30" pos:column="9">(<argument><expr><literal type="string" pos:line="30" pos:column="10">""<pos:position pos:line="30" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="14"/></expr_stmt>
  }<pos:position pos:line="31" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="33" pos:column="3">free<pos:position pos:line="33" pos:column="7"/></name><argument_list pos:line="33" pos:column="7">(<argument><expr><name pos:line="33" pos:column="8">base64<pos:position pos:line="33" pos:column="14"/></name></expr></argument>)<pos:position pos:line="33" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="16"/></expr_stmt> <expr_stmt><expr><call><name pos:line="33" pos:column="17">free<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><name pos:line="33" pos:column="22">data<pos:position pos:line="33" pos:column="26"/></name></expr></argument>)<pos:position pos:line="33" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="28"/></expr_stmt>
  <return pos:line="34" pos:column="3">return <expr><literal type="number" pos:line="34" pos:column="10">0<pos:position pos:line="34" pos:column="11"/></literal></expr>;<pos:position pos:line="34" pos:column="12"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
