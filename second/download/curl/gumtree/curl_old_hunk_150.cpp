"\n"
"       No nesting of the sequences is supported at the moment, but you can use\n"
"       several ones next to each other:\n"
"\n"
"        http://any.org/archive[1996-1999]/vol[1-4]/part{a,b,c}.html\n"
"\n"
"       You can specify any amount of URLs on the command line.  They  will  be\n"
"       fetched in a sequential manner in the specified order.\n"
"\n"
, stdout);
 fputs(
"       Curl will attempt to re-use connections for multiple file transfers, so\n"
"       that getting many files from the same server will not do multiple  con-\n"
"       nects / handshakes. This improves speed. Of course this is only done on\n"
"       files specified on a single command line and  cannot  be  used  between\n"
"       separate curl invokes.\n"
"\n"
"OPTIONS\n"
"       -a/--append\n"
"              (FTP)  When used in an FTP upload, this will tell curl to append\n"
, stdout);
 fputs(
"              to the target file  instead  of  overwriting  it.  If  the  file\n"
"              doesn't exist, it will be created.\n"
"\n"
"              If this option is used twice, the second one will disable append\n"
"              mode again.\n"
"\n"
"       -A/--user-agent <agent string>\n"
"              (HTTP) Specify the User-Agent string to send to the HTTP server.\n"
"              Some  badly  done CGIs fail if its not set to \"Mozilla/4.0\".  To\n"
, stdout);
 fputs(
"              encode blanks in the string, surround  the  string  with  single\n"
"              quote  marks.   This can also be set with the -H/--header option\n"
"              of course.\n"
"\n"
"              If this option is set more than once, the last one will  be  the\n"
"              one that's used.\n"
"\n"
"       --anyauth\n"
"              (HTTP) Tells curl to figure out authentication method by itself,\n"
"              and use the most secure one the remote site claims it  supports.\n"
, stdout);
 fputs(
"              This is done by first doing a request and checking the response-\n"
"              headers, thus inducing an extra network round-trip. This is used\n"
"              instead  of  setting a specific authentication method, which you\n"
"              can do with --basic, --digest, --ntlm, and  --negotiate.  (Added\n"
"              in 7.10.6)\n"
"\n"
"              Note  that  using --anyauth is not recommended if you do uploads\n"
"              from stdin, since it may require data to be sent twice and  then\n"
, stdout);
 fputs(
"              the client must be able to rewind. If the need should arise when\n"
"              uploading from stdin, the upload operation will fail.\n"
"\n"
"              If this option is used several times, the following  occurrences\n"
"              make no difference.\n"
"\n"
"       -b/--cookie <name=data>\n"
"              (HTTP)  Pass the data to the HTTP server as a cookie. It is sup-\n"
"              posedly the data previously received from the server in a  \"Set-\n"
, stdout);
 fputs(
"              Cookie:\"  line.  The data should be in the format \"NAME1=VALUE1;\n"
"              NAME2=VALUE2\".\n"
"\n"
"              If no '=' letter is used in the line, it is treated as  a  file-\n"
"              name  to  use to read previously stored cookie lines from, which\n"
"              should be used in this session if they match. Using this  method\n"
"              also  activates  the \"cookie parser\" which will make curl record\n"
, stdout);
 fputs(
"              incoming cookies too, which may be handy if you're using this in\n"
"              combination  with  the  -L/--location option. The file format of\n"
"              the file to read cookies from should be plain  HTTP  headers  or\n"
"              the Netscape/Mozilla cookie file format.\n"
"\n"
"              NOTE  that  the  file specified with -b/--cookie is only used as\n"
"              input. No cookies will be stored in the file. To store  cookies,\n"
, stdout);
 fputs(
"              use  the  -c/--cookie-jar option or you could even save the HTTP\n"
"              headers to a file using -D/--dump-header!\n"
"\n"
"              If this option is set more than once, the last one will  be  the\n"
"              one that's used.\n"
"\n"
"       -B/--use-ascii\n"
"              Enable  ASCII transfer when using FTP or LDAP. For FTP, this can\n"
"              also be enforced by using an URL that ends with \";type=A\".  This\n"
, stdout);
 fputs(
"              option  causes  data sent to stdout to be in text mode for win32\n"
"              systems.\n"
"\n"
"              If this option is used twice, the second one will disable  ASCII\n"
"              usage.\n"
"\n"
"       --basic\n"
"              (HTTP)  Tells curl to use HTTP Basic authentication. This is the\n"
"              default and this option is usually pointless, unless you use  it\n"
"              to  override  a  previously  set  option  that  sets a different\n"
, stdout);
 fputs(
"              authentication method (such as --ntlm,  --digest  and  --negoti-\n"
"              ate). (Added in 7.10.6)\n"
"\n"
"              If  this option is used several times, the following occurrences\n"
"              make no difference.\n"
"\n"
"       --ciphers <list of ciphers>\n"
"              (SSL) Specifies which ciphers to use in the connection. The list\n"
"              of  ciphers  must  be using valid ciphers. Read up on SSL cipher\n"
, stdout);
 fputs(
"              list          details           on           this           URL:\n"
"              http://www.openssl.org/docs/apps/ciphers.html\n"
"\n"
"              If this option is used several times, the last one will override\n"
"              the others.\n"
"\n"
"       --compressed\n"
"              (HTTP) Request a compressed response using one of the algorithms\n"
"              libcurl supports, and return the uncompressed document.  If this\n"
, stdout);
 fputs(
"              option is used and the server  sends  an  unsupported  encoding,\n"
"              Curl will report an error.\n"
"\n"
"              If  this option is used several times, each occurrence will tog-\n"
"              gle it on/off.\n"
"\n"
"       --connect-timeout <seconds>\n"
"              Maximum time in seconds that you allow  the  connection  to  the\n"
"              server  to  take.   This  only limits the connection phase, once\n"
, stdout);
 fputs(
"              curl has connected this option is of no more use. See  also  the\n"
"              -m/--max-time option.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -c/--cookie-jar <file name>\n"
"              Specify to which file you want curl to write all cookies after a\n"
"              completed  operation.  Curl  writes  all cookies previously read\n"
"              from a specified file as  well  as  all  cookies  received  from\n"
, stdout);
 fputs(
"              remote server(s). If no cookies are known, no file will be writ-\n"
"              ten. The file will be written using  the  Netscape  cookie  file\n"
"              format.  If  you  set  the  file name to a single dash, \"-\", the\n"
"              cookies will be written to stdout.\n"
"\n"
"              NOTE If the cookie jar can't be created or written to, the whole\n"
"              curl operation won't fail or even report an error clearly. Using\n"
, stdout);
 fputs(
"              -v will get a warning displayed, but that is  the  only  visible\n"
"              feedback you get about this possibly lethal situation.\n"
"\n"
"              If  this  option  is used several times, the last specified file\n"
"              name will be used.\n"
"\n"
"       -C/--continue-at <offset>\n"
"              Continue/Resume a previous file transfer at  the  given  offset.\n"
"              The  given  offset  is  the  exact  number of bytes that will be\n"
, stdout);
 fputs(
"              skipped counted from the beginning of the source file before  it\n"
"              is  transferred  to  the destination.  If used with uploads, the\n"
"              ftp server command SIZE will not be used by curl.\n"
"\n"
"              Use \"-C -\" to tell curl to automatically find out  where/how  to\n"
"              resume  the  transfer. It then uses the given output/input files\n"
"              to figure that out.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
, stdout);
 fputs(
"       --create-dirs\n"
"              When  used  in  conjunction with the -o option, curl will create\n"
"              the necessary local directory hierarchy as needed.  This  option\n"
"              creates  the dirs mentioned with the -o option, nothing else. If\n"
"              the -o file name uses no dir or if the dirs it mentions  already\n"
"              exist, no dir will be created.\n"
"\n"
"              To  create  remote directories when using FTP, try --ftp-create-\n"
"              dirs.\n"
"\n"
, stdout);
 fputs(
"       --crlf (FTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).\n"
"\n"
"              If this option is used twice, the second will again disable crlf\n"
"              converting.\n"
"\n"
"       -d/--data <data>\n"
"              (HTTP)  Sends  the  specified data in a POST request to the HTTP\n"
"              server, in a way that can emulate as if a user has filled  in  a\n"
"              HTML  form  and pressed the submit button. Note that the data is\n"
, stdout);
 fputs(
"              sent exactly as specified with no  extra  processing  (with  all\n"
"              newlines  cut  off).   The data is expected to be \"url-encoded\".\n"
"              This will cause curl to pass the data to the  server  using  the\n"
"              content-type   application/x-www-form-urlencoded.   Compare   to\n"
"              -F/--form. If this option is used more than  once  on  the  same\n"
"              command  line, the data pieces specified will be merged together\n"
, stdout);
 fputs(
"              with a separating  &-letter.  Thus,  using  '-d  name=daniel  -d\n"
"              skill=lousy'  would  generate  a  post  chunk  that  looks  like\n"
"              'name=daniel&skill=lousy'.\n"
"\n"
"              If you start the data with the letter @, the rest  should  be  a\n"
"              file  name  to read the data from, or - if you want curl to read\n"
"              the data from stdin.  The contents of the file must  already  be\n"
, stdout);
 fputs(
"              url-encoded.  Multiple files can also be specified. Posting data\n"
"              from a file named 'foobar' would thus be done with --data  @foo-\n"
"              bar\".\n"
"\n"
"              To  post  data purely binary, you should instead use the --data-\n"
"              binary option.\n"
"\n"
"              -d/--data is the same as --data-ascii.\n"
"\n"
"              If this option is used several times,  the  ones  following  the\n"
"              first will append data.\n"
"\n"
"       --data-ascii <data>\n"
, stdout);
 fputs(
"              (HTTP) This is an alias for the -d/--data option.\n"
"\n"
"              If  this  option  is  used several times, the ones following the\n"
"              first will append data.\n"
"\n"
"       --data-binary <data>\n"
"              (HTTP) This posts data in a similar manner as --data-ascii does,\n"
"              although when using this option the entire context of the posted\n"
"              data is kept as-is. If you want to post a  binary  file  without\n"
, stdout);
 fputs(
"              the  strip-newlines  feature of the --data-ascii option, this is\n"
"              for you.\n"
"\n"
"              If this option is used several times,  the  ones  following  the\n"
"              first will append data.\n"
"\n"
"       --digest\n"
"              (HTTP) Enables HTTP Digest authentication. This is a authentica-\n"
"              tion that prevents the password from being sent over the wire in\n"
"              clear  text.  Use  this in combination with the normal -u/--user\n"
, stdout);
 fputs(
"              option to set user name and password. See also --ntlm, --negoti-\n"
"              ate and --anyauth for related options. (Added in curl 7.10.6)\n"
"\n"
"              If  this option is used several times, the following occurrences\n"
"              make no difference.\n"
"\n"
"       --disable-eprt\n"
"              (FTP) Tell curl to disable the use of the EPRT and LPRT commands\n"
"              when doing active FTP transfers. Curl will normally always first\n"
, stdout);
 fputs(
"              attempt to use EPRT, then LPRT before using PORT, but with  this\n"
"              option,  it  will  use PORT right away. EPRT and LPRT are exten-\n"
"              sions to the original FTP protocol, may not work on all  servers\n"
"              but  enable  more  functionality in a better way than the tradi-\n"
"              tional PORT command. (Added in 7.10.5)\n"
"\n"
"              If this option is used several times, each occurrence will  tog-\n"
"              gle this on/off.\n"
"\n"
, stdout);
 fputs(
"       --disable-epsv\n"
"              (FTP)  Tell  curl  to  disable  the use of the EPSV command when\n"
"              doing passive FTP transfers. Curl  will  normally  always  first\n"
"              attempt  to  use EPSV before PASV, but with this option, it will\n"
"              not try using EPSV.\n"
"\n"
"              If this option is used several times, each occurrence will  tog-\n"
"              gle this on/off.\n"
"\n"
"       -D/--dump-header <file>\n"
"              Write the protocol headers to the specified file.\n"
, stdout);
 fputs(
"\n"
"              This  option  is handy to use when you want to store the headers\n"
"              that a HTTP site sends to you. Cookies from  the  headers  could\n"
"              then  be  read  in a second curl invoke by using the -b/--cookie\n"
"              option! The -c/--cookie-jar option is however a  better  way  to\n"
"              store cookies.\n"
"\n"
"              When  used  on FTP, the ftp server response lines are considered\n"
"              being \"headers\" and thus are saved there.\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -e/--referer <URL>\n"
"              (HTTP)  Sends the \"Referer Page\" information to the HTTP server.\n"
"              This can also be set with the -H/--header flag of course.   When\n"
"              used  with  -L/--location  you can append \";auto\" to the referer\n"
"              URL to make curl automatically set the previous URL when it fol-\n"
, stdout);
 fputs(
"              lows  a  Location: header. The \";auto\" string can be used alone,\n"
"              even if you don't set an initial referer.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --engine <name>\n"
"              Select  the  OpenSSL crypto engine to use for cipher operations.\n"
"              Use --engine list  to  print  a  list  of  build-time  supported\n"
"              engines.  Note  that  not  all  (or  none) of the engines may be\n"
, stdout);
 fputs(
"              available at run-time.\n"
"\n"
"       --environment\n"
"              (RISC OS ONLY) Sets a range of environment variables, using  the\n"
"              names the -w option supports, to easier allow extraction of use-\n"
"              ful information after having run curl.\n"
"\n"
"              If this option is used several times, each occurrence will  tog-\n"
"              gle this on/off.\n"
"\n"
"       --egd-file <file>\n"
"              (HTTPS)  Specify  the  path name to the Entropy Gathering Daemon\n"
, stdout);
 fputs(
"              socket. The socket is used to seed the  random  engine  for  SSL\n"
"              connections. See also the --random-file option.\n"
"\n"
"       -E/--cert <certificate[:password]>\n"
"              (HTTPS)  Tells  curl  to use the specified certificate file when\n"
"              getting a file with HTTPS. The certificate must be in  PEM  for-\n"
"              mat.   If  the  optional  password  isn't  specified, it will be\n"
"              queried for on the terminal. Note that this certificate  is  the\n"
, stdout);
 fputs(
"              private key and the private certificate concatenated!\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --cert-type <type>\n"
"              (SSL) Tells curl what certificate type the provided  certificate\n"
"              is in. PEM, DER and ENG are recognized types.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --cacert <CA certificate>\n"
, stdout);
 fputs(
"              (HTTPS) Tells curl to use the specified certificate file to ver-\n"
"              ify the peer. The file may contain multiple CA certificates. The\n"
"              certificate(s) must be in PEM format.\n"
"\n"
"              curl recognizes the environment variable named  'CURL_CA_BUNDLE'\n"
"              if  that  is set, and uses the given path as a path to a CA cert\n"
"              bundle. This option overrides that variable.\n"
"\n"
, stdout);
 fputs(
"              The windows version of curl will automatically  look  for  a  CA\n"
"              certs file named 'curl-ca-bundle.crt', either in the same direc-\n"
"              tory as curl.exe, or in the Current Working Directory, or in any\n"
"              folder along your PATH.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --capath <CA certificate directory>\n"
"              (HTTPS) Tells curl to use the specified certificate directory to\n"
, stdout);
 fputs(
"              verify the peer. The certificates must be in PEM format, and the\n"
"              directory must have been processed using  the  c_rehash  utility\n"
"              supplied  with  openssl.  Using  --capath can allow curl to make\n"
"              https connections much more efficiently than using  --cacert  if\n"
"              the --cacert file contains many CA certificates.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -f/--fail\n"
, stdout);
 fputs(
"              (HTTP) Fail silently (no output at all) on server  errors.  This\n"
"              is  mostly done like this to better enable scripts etc to better\n"
"              deal with failed attempts. In normal cases when  a  HTTP  server\n"
"              fails  to deliver a document, it returns a HTML document stating\n"
"              so (which often also describes why and  more).  This  flag  will\n"
"              prevent curl from outputting that and fail silently instead.\n"
"\n"
, stdout);
 fputs(
"              If  this  option  is  used  twice, the second will again disable\n"
"              silent failure.\n"
"\n"
"       --ftp-account [data]\n"
"              (FTP) When an FTP server asks for \"account data\" after user name\n"
"              and  password has been provided, this data is sent off using the\n"
"              ACCT command. (Added in 7.13.0)\n"
"\n"
"              If this option is used twice, the second will override the  pre-\n"
"              vious use.\n"
"\n"
"       --ftp-create-dirs\n"
, stdout);
 fputs(
"              (FTP)  When  an  FTP URL/operation uses a path that doesn't cur-\n"
"              rently exist on the server, the standard behavior of curl is  to\n"
"              fail.  Using  this  option,  curl will instead attempt to create\n"
"              missing directories. (Added in 7.10.7)\n"
"\n"
"              If this option is used twice,  the  second  will  again  disable\n"
"              silent failure.\n"
"\n"
"       --ftp-pasv\n"
"              (FTP)  Use  PASV when transferring. PASV is the internal default\n"
, stdout);
 fputs(
"              behavior, but using this option can be used to override a previ-\n"
"              ous --ftp-port option. (Added in 7.11.0)\n"
"\n"
"              If  this  option  is  used  twice, the second will again disable\n"
"              silent failure.\n"
"\n"
"       --ftp-ssl\n"
"              (FTP) Make the FTP connection switch to use SSL/TLS.  (Added  in\n"
"              7.11.0)\n"
"\n"
"              If  this  option  is  used  twice, the second will again disable\n"
"              this.\n"
"\n"
"       -F/--form <name=content>\n"
, stdout);
 fputs(
"              (HTTP) This lets curl emulate a filled in form in which  a  user\n"
"              has  pressed  the  submit  button. This causes curl to POST data\n"
"              using the Content-Type multipart/form-data according to RFC1867.\n"
"              This  enables  uploading of binary files etc. To force the 'con-\n"
"              tent' part to be a file, prefix the file name with an @ sign. To\n"
"              just get the content part from a file, prefix the file name with\n"
, stdout);
 fputs(
"              the letter <. The difference between @ and  <  is  then  that  @\n"
"              makes  a  file  get attached in the post as a file upload, while\n"
"              the < makes a text field and just get the contents for that text\n"
"              field from a file.\n"
"\n"
"              Example,  to send your password file to the server, where 'pass-\n"
"              word' is the name of the form-field to which /etc/passwd will be\n"
"              the input:\n"
"\n"
, stdout);
 fputs(
"              curl -F password=@/etc/passwd www.mypasswords.com\n"
"\n"
"              To  read  the file's content from stdin instead of a file, use -\n"
"              where the file name should've been. This goes for both @  and  <\n"
"              constructs.\n"
"\n"
"              You  can  also  tell  curl  what  Content-Type  to  use by using\n"
"              'type=', in a manner similar to:\n"
"\n"
"              curl -F \"web=@index.html;type=text/html\" url.com\n"
"\n"
"              or\n"
"\n"
, stdout);
 fputs(
"              curl -F \"name=daniel;type=text/foo\" url.com\n"
"\n"
"              You can also explicitly change the name field of an file  upload\n"
"              part by setting filename=, like this:\n"
"\n"
"              curl -F \"file=@localfile;filename=nameinpost\" url.com\n"
"\n"
"              See further examples and details in the MANUAL.\n"
"\n"
"              This option can be used multiple times.\n"
"\n"
"       --form-string <name=string>\n"
"              (HTTP)  Similar  to  --form except that the value string for the\n"
, stdout);
 fputs(
"              named parameter is used literally. Leading '@' and  '<'  charac-\n"
"              ters, and the ';type=' string in the value have no special mean-\n"
"              ing. Use this in preference to --form if there's any possibility\n"
"              that  the  string  value may accidentally trigger the '@' or '<'\n"
"              features of --form.\n"
"\n"
"       -g/--globoff\n"
"              This option switches off the \"URL globbing parser\". When you set\n"
, stdout);
 fputs(
"              this  option, you can specify URLs that contain the letters {}[]\n"
"              without having them being interpreted by curl itself. Note  that\n"
"              these  letters are not normal legal URL contents but they should\n"
"              be encoded according to the URI standard.\n"
"\n"
"       -G/--get\n"
"              When used,  this  option  will  make  all  data  specified  with\n"
"              -d/--data  or  --data-binary  to  be  used in a HTTP GET request\n"
, stdout);
 fputs(
"              instead of the POST request that otherwise would  be  used.  The\n"
"              data will be appended to the URL with a '?'  separator.\n"
"\n"
"              If  used  in  combination with -I, the POST data will instead be\n"
"              appended to the URL with a HEAD request.\n"
"\n"
"              If used multiple times, nothing special happens.\n"
"\n"
"       -h/--help\n"
"              Usage help.\n"
"\n"
"       -H/--header <header>\n"
"              (HTTP) Extra header to use when getting  a  web  page.  You  may\n"
, stdout);
 fputs(
"              specify any number of extra headers. Note that if you should add\n"
"              a custom header that has the same name as one  of  the  internal\n"
"              ones  curl  would  use,  your externally set header will be used\n"
"              instead of the internal one. This allows you to make even trick-\n"
"              ier  stuff  than  curl would normally do. You should not replace\n"
"              internally set  headers  without  knowing  perfectly  well  what\n"
, stdout);
 fputs(
"              you're doing. Replacing an internal header with one without con-\n"
"              tent on the right side of the colon  will  prevent  that  header\n"
"              from appearing.\n"
"\n"
"              See also the -A/--user-agent and -e/--referer options.\n"
"\n"
"              This  option  can  be  used multiple times to add/replace/remove\n"
"              multiple headers.\n"
"\n"
"       -i/--include\n"
"              (HTTP) Include the HTTP-header in the  output.  The  HTTP-header\n"
, stdout);
 fputs(
"              includes  things  like  server-name, date of the document, HTTP-\n"
"              version and more...\n"
"\n"
"              If this option is used twice,  the  second  will  again  disable\n"
"              header include.\n"
"\n"
"       --interface <name>\n"
"              Perform  an operation using a specified interface. You can enter\n"
"              interface name, IP address or host name. An example  could  look\n"
"              like:\n"
"\n"
"               curl --interface eth0:1 http://www.netscape.com/\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -I/--head\n"
"              (HTTP/FTP/FILE) Fetch the HTTP-header only! HTTP-servers feature\n"
"              the  command  HEAD which this uses to get nothing but the header\n"
"              of a document. When used on a FTP or FILE  file,  curl  displays\n"
"              the file size and last modification time only.\n"
"\n"
"              If  this  option  is  used  twice, the second will again disable\n"
, stdout);
 fputs(
"              header only.\n"
"\n"
"       -j/--junk-session-cookies\n"
"              (HTTP) When curl is told to read cookies from a given file, this\n"
"              option  will  make  it  discard all \"session cookies\". This will\n"
"              basically have the same effect as if a new session  is  started.\n"
"              Typical  browsers  always  discard  session cookies when they're\n"
"              closed down. (Added in 7.9.7)\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, each occurrence will  tog-\n"
"              gle this on/off.\n"
"\n"
"       -k/--insecure\n"
"              (SSL)  This  option explicitly allows curl to perform \"insecure\"\n"
"              SSL connections and transfers. Starting with curl 7.10, all  SSL\n"
"              connections  will be attempted to be made secure by using the CA\n"
"              certificate bundle installed by default. This makes all  connec-\n"
, stdout);
 fputs(
"              tions  considered  \"insecure\"  to  fail  unless -k/--insecure is\n"
"              used.\n"
"\n"
"              If this option is used twice, the second time will again disable\n"
"              it.\n"
"\n"
"       --key <key>\n"
"              (SSL)  Private key file name. Allows you to provide your private\n"
"              key in this separate file.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --key-type <type>\n"
, stdout);
 fputs(
"              (SSL)  Private key file type. Specify which type your --key pro-\n"
"              vided private key is. DER, PEM and ENG are supported.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --krb4 <level>\n"
"              (FTP) Enable kerberos4 authentication and use. The level must be\n"
"              entered and should be one of 'clear', 'safe', 'confidential'  or\n"
"              'private'.  Should  you  use  a  level that is not one of these,\n"
, stdout);
 fputs(
"              'private' will instead be used.\n"
"\n"
"              This option requires that the library was built  with  kerberos4\n"
"              support.  This  is  not  very common. Use -V/--version to see if\n"
"              your curl supports it.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -K/--config <config file>\n"
"              Specify  which config file to read curl arguments from. The con-\n"
, stdout);
 fputs(
"              fig file is a text file in which command line arguments  can  be\n"
"              written  which  then will be used as if they were written on the\n"
"              actual command line. Options and their parameters must be speci-\n"
"              fied  on  the same config file line. If the parameter is to con-\n"
"              tain white spaces, the parameter must be inclosed within quotes.\n"
"              If  the  first  column  of a config line is a '#' character, the\n"
, stdout);
 fputs(
"              rest of the line will be treated as a comment.\n"
"\n"
"              Specify the filename as '-' to make  curl  read  the  file  from\n"
"              stdin.\n"
"\n"
"              Note  that  to  be able to specify a URL in the config file, you\n"
"              need to specify it using the --url option,  and  not  by  simply\n"
"              writing  the  URL  on its own line. So, it could look similar to\n"
"              this:\n"
"\n"
"              url = \"http://curl.haxx.se/docs/\"\n"
"\n"
, stdout);
 fputs(
"              This option can be used multiple times.\n"
"\n"
"              When curl is invoked, it always (unless -q is used) checks for a\n"
"              default  config  file  and  uses it if found. The default config\n"
"              file is checked for in the following places in this order:\n"
"\n"
"              1) curl tries to find the \"home dir\": It first  checks  for  the\n"
"              CURL_HOME and then the HOME environment variables. Failing that,\n"
, stdout);
 fputs(
"              it uses getpwuid() on unix-like systems (which returns the  home\n"
"              dir  given the current user in your system). On Windows, it then\n"
"              checks for the APPDATA variable, or as a last resort the '%USER-\n"
"              PROFILE%0lication Data'.\n"
"\n"
"              2)  On  windows, if there is no _curlrc file in the home dir, it\n"
"              checks for one in the same dir the executable curl is placed. On\n"
, stdout);
 fputs(
"              unix-like  systems,  it will simply try to load .curlrc from the\n"
"              determined home dir.\n"
"       --limit-rate <speed>\n"
"              Specify the maximum transfer rate you want  curl  to  use.  This\n"
"              feature is useful if you have a limited pipe and you'd like your\n"
"              transfer not use your entire bandwidth.\n"
"\n"
"              The given speed is measured in bytes/second, unless a suffix  is\n"
, stdout);
 fputs(
"              appended.   Appending  'k' or 'K' will count the number as kilo-\n"
"              bytes, 'm' or M' makes it megabytes while 'g' or  'G'  makes  it\n"
"              gigabytes. Examples: 200K, 3m and 1G.\n"
"\n"
"              If  you  are also using the -Y/--speed-limit option, that option\n"
"              will  take  precedence  and  might  cripple  the   rate-limiting\n"
"              slightly, to help keeping the speed-limit logic working.\n"
"\n"
"              This option was introduced in curl 7.10.\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -l/--list-only\n"
"              (FTP) When listing an FTP directory, this switch forces a  name-\n"
"              only  view.   Especially useful if you want to machine-parse the\n"
"              contents of an FTP directory since  the  normal  directory  view\n"
"              doesn't use a standard look or format.\n"
"\n"
"              This  option  causes  an  FTP NLST command to be sent.  Some FTP\n"
, stdout);
 fputs(
"              servers list only files in their response to NLST; they  do  not\n"
"              include subdirectories and symbolic links.\n"
"\n"
"              If this option is used twice, the second will again disable list\n"
"              only.\n"
"\n"
"       -L/--location\n"
"              (HTTP/HTTPS) If the server reports that the requested page has a\n"
"              different  location  (indicated  with the header line Location:)\n"
"              this flag will let curl attempt to reattempt the get on the  new\n"
, stdout);
 fputs(
"              place.  If used together with -i/--include or -I/--head, headers\n"
"              from all requested pages will be  shown.  If  authentication  is\n"
"              used,  curl  will only send its credentials to the initial host,\n"
"              so if a redirect takes curl to a different host, it won't inter-\n"
"              cept  the  user+password.  See also --location-trusted on how to\n"
"              change this.\n"
"\n"
, stdout);
 fputs(
"              If this option is used twice,  the  second  will  again  disable\n"
"              location following.\n"
"\n"
"       --location-trusted\n"
"              (HTTP/HTTPS) Like -L/--location, but will allow sending the name\n"
"              + password to all hosts that the site may redirect to. This  may\n"
"              or may not introduce a security breach if the site redirects you\n"
"              do a site to which you'll send your authentication  info  (which\n"
, stdout);
 fputs(
"              is plaintext in the case of HTTP Basic authentication).\n"
"\n"
"              If  this  option  is  used  twice, the second will again disable\n"
"              location following.\n"
"\n"
"       --max-filesize <bytes>\n"
"              Specify the maximum size (in bytes) of a file  to  download.  If\n"
"              the  file requested is larger than this value, the transfer will\n"
"              not start and curl will return with exit code 63.\n"
"\n"
, stdout);
 fputs(
"              NOTE: The file size is not always known prior to  download,  and\n"
"              for such files this option has no effect even if the file trans-\n"
"              fer ends up being larger than this given  limit.  This  concerns\n"
"              both FTP and HTTP transfers.\n"
"\n"
"       -m/--max-time <seconds>\n"
"              Maximum  time  in  seconds that you allow the whole operation to\n"
"              take.  This is useful for preventing your batch jobs from  hang-\n"
, stdout);
 fputs(
"              ing  for  hours  due to slow networks or links going down.  This\n"
"              doesn't work fully in win32 systems.  See  also  the  --connect-\n"
"              timeout option.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -M/--manual\n"
"              Manual. Display the huge help text.\n"
"\n"
"       -n/--netrc\n"
"              Makes curl scan the .netrc file in the user's home directory for\n"
, stdout);
 fputs(
"              login name and password. This is typically used for ftp on unix.\n"
"              If used with http, curl will  enable  user  authentication.  See\n"
"              netrc(4) or ftp(1) for details on the file format. Curl will not\n"
"              complain if that file hasn't the right  permissions  (it  should\n"
"              not  be  world  nor  group  readable).  The environment variable\n"
"              \"HOME\" is used to find the home directory.\n"
"\n"
, stdout);
 fputs(
"              A quick and very simple example of how  to  setup  a  .netrc  to\n"
"              allow  curl to ftp to the machine host.domain.com with user name\n"
"              'myself' and password\n"
"\n"
"              machine host.domain.com login myself password secret\n"
"\n"
"              If this option is used twice,  the  second  will  again  disable\n"
"              netrc usage.\n"
"\n"
"       --netrc-optional\n"
"              Very  similar to --netrc, but this option makes the .netrc usage\n"
, stdout);
 fputs(
"              optional and not mandatory as the --netrc does.\n"
"\n"
"       --negotiate\n"
"              (HTTP) Enables GSS-Negotiate authentication.  The  GSS-Negotiate\n"
"              method was designed by Microsoft and is used in their web appli-\n"
"              cations. It is  primarily  meant  as  a  support  for  Kerberos5\n"
"              authentication but may be also used along with another authenti-\n"
"              cation methods. For  more  information  see  IETF  draft  draft-\n"
, stdout);
 fputs(
"              brezak-spnego-http-04.txt. (Added in 7.10.6)\n"
"\n"
"              This option requires that the library was built with GSSAPI sup-\n"
"              port. This is not very common. Use -V/--version to see  if  your\n"
"              version supports GSS-Negotiate.\n"
"\n"
"              If  this option is used several times, the following occurrences\n"
"              make no difference.\n"
"\n"
"       -N/--no-buffer\n"
"              Disables the buffering of the output stream. In normal work sit-\n"
, stdout);
 fputs(
"              uations,  curl  will  use a standard buffered output stream that\n"
"              will have the effect that it will output the data in chunks, not\n"
"              necessarily  exactly  when  the data arrives.  Using this option\n"
"              will disable that buffering.\n"
"\n"
"              If this option is used twice, the second will  again  switch  on\n"
"              buffering.\n"
"\n"
"       --ntlm (HTTP)  Enables  NTLM  authentication.  The  NTLM authentication\n"
, stdout);
 fputs(
"              method was designed by Microsoft and is used by IIS web servers.\n"
"              It is a proprietary protocol, reversed engineered by clever peo-\n"
"              ple and implemented in curl based on their efforts. This kind of\n"
"              behavior  should  not be endorsed, you should encourage everyone\n"
"              who uses NTLM to switch to a public and  documented  authentica-\n"
"              tion method instead. Such as Digest. (Added in 7.10.6)\n"
"\n"
, stdout);
 fputs(
"              If  you  want to enable NTLM for your proxy authentication, then\n"
"              use --proxy-ntlm.\n"
"\n"
"              This option requires that the library was built  with  SSL  sup-\n"
"              port. Use -V/--version to see if your curl supports NTLM.\n"
"\n"
"              If  this option is used several times, the following occurrences\n"
"              make no difference.\n"
"\n"
"       -o/--output <file>\n"
"              Write output to <file> instead of stdout. If you are using {} or\n"
, stdout);
 fputs(
"              []  to  fetch  multiple documents, you can use '#' followed by a\n"
"              number in the <file> specifier. That variable will  be  replaced\n"
"              with the current string for the URL being fetched. Like in:\n"
"\n"
"                curl http://{one,two}.site.com -o \"file_#1.txt\"\n"
"\n"
"              or use several variables like:\n"
"\n"
"                curl http://{site,host}.host[1-5].com -o \"#1_#2\"\n"
"\n"
"              You  may  use  this  option  as many times as you have number of\n"
, stdout);
 fputs(
"              URLs.\n"
"\n"
"              See also the --create-dirs option to create the  local  directo-\n"
"              ries dynamically.\n"
"\n"
"       -O/--remote-name\n"
"              Write  output to a local file named like the remote file we get.\n"
"              (Only the file part of the remote file is used, the path is  cut\n"
"              off.)\n"
"\n"
"              The  remote  file  name  to use for saving is extracted from the\n"
"              given URL.  Nothing else\n"
"\n"
, stdout);
 fputs(
"              You may use this option as many times  as  you  have  number  of\n"
"              URLs.\n"
"\n"
"       --pass <phrase>\n"
"              (SSL) Pass phrase for the private key\n"
"\n"
