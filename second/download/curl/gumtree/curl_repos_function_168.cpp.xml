<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_168.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">telnet<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name><name pos:line="1" pos:column="17">struct<pos:position pos:line="1" pos:column="23"/></name> <name pos:line="1" pos:column="24">connectdata<pos:position pos:line="1" pos:column="35"/></name></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">conn<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">UrlData<pos:position pos:line="3" pos:column="17"/></name></name> <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier></type><name pos:line="3" pos:column="19">data<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><name><name pos:line="3" pos:column="26">conn<pos:position pos:line="3" pos:column="30"/></name><operator pos:line="3" pos:column="30">-&gt;<pos:position pos:line="3" pos:column="35"/></operator><name pos:line="3" pos:column="32">data<pos:position pos:line="3" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">sockfd<pos:position pos:line="4" pos:column="13"/></name> <init pos:line="4" pos:column="14">= <expr><name><name pos:line="4" pos:column="16">data<pos:position pos:line="4" pos:column="20"/></name><operator pos:line="4" pos:column="20">-&gt;<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="22">firstsocket<pos:position pos:line="4" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">fd_set<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">readfd<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">fd_set<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">keepfd<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">bool<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">keepon<pos:position pos:line="8" pos:column="14"/></name> <init pos:line="8" pos:column="15">= <expr><name pos:line="8" pos:column="17">TRUE<pos:position pos:line="8" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">buf<pos:position pos:line="9" pos:column="12"/></name> <init pos:line="9" pos:column="13">= <expr><name><name pos:line="9" pos:column="15">data<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">-&gt;<pos:position pos:line="9" pos:column="24"/></operator><name pos:line="9" pos:column="21">buffer<pos:position pos:line="9" pos:column="27"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">nread<pos:position pos:line="10" pos:column="12"/></name></decl>;<pos:position pos:line="10" pos:column="13"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">init_telnet<pos:position pos:line="12" pos:column="14"/></name><argument_list pos:line="12" pos:column="14">(<argument><expr><name pos:line="12" pos:column="15">data<pos:position pos:line="12" pos:column="19"/></name></expr></argument>)<pos:position pos:line="12" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="21"/></expr_stmt>
   
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">FD_ZERO<pos:position pos:line="14" pos:column="10"/></name> <argument_list pos:line="14" pos:column="11">(<argument><expr><operator pos:line="14" pos:column="12">&amp;<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="13">readfd<pos:position pos:line="14" pos:column="19"/></name></expr></argument>)<pos:position pos:line="14" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="21"/></expr_stmt>		<comment type="block" pos:line="14" pos:column="33">/* clear it */</comment>
  <expr_stmt><expr><call><name pos:line="15" pos:column="3">FD_SET<pos:position pos:line="15" pos:column="9"/></name> <argument_list pos:line="15" pos:column="10">(<argument><expr><name pos:line="15" pos:column="11">sockfd<pos:position pos:line="15" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="19">&amp;<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="20">readfd<pos:position pos:line="15" pos:column="26"/></name></expr></argument>)<pos:position pos:line="15" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">FD_SET<pos:position pos:line="16" pos:column="9"/></name> <argument_list pos:line="16" pos:column="10">(<argument><expr><literal type="number" pos:line="16" pos:column="11">1<pos:position pos:line="16" pos:column="12"/></literal></expr></argument>, <argument><expr><operator pos:line="16" pos:column="14">&amp;<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="15">readfd<pos:position pos:line="16" pos:column="21"/></name></expr></argument>)<pos:position pos:line="16" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>

  <expr_stmt><expr><name pos:line="18" pos:column="3">keepfd<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <name pos:line="18" pos:column="12">readfd<pos:position pos:line="18" pos:column="18"/></name></expr>;<pos:position pos:line="18" pos:column="19"/></expr_stmt>

   <while pos:line="20" pos:column="4">while <condition pos:line="20" pos:column="10">(<expr><name pos:line="20" pos:column="11">keepon<pos:position pos:line="20" pos:column="17"/></name></expr>)<pos:position pos:line="20" pos:column="18"/></condition>
   <block pos:line="21" pos:column="4">{
      <expr_stmt><expr><name pos:line="22" pos:column="7">readfd<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">=<pos:position pos:line="22" pos:column="15"/></operator> <name pos:line="22" pos:column="16">keepfd<pos:position pos:line="22" pos:column="22"/></name></expr>;<pos:position pos:line="22" pos:column="23"/></expr_stmt>		<comment type="block" pos:line="22" pos:column="33">/* set this every lap in the loop */</comment>

      <switch pos:line="24" pos:column="7">switch <condition pos:line="24" pos:column="14">(<expr><call><name pos:line="24" pos:column="15">select<pos:position pos:line="24" pos:column="21"/></name> <argument_list pos:line="24" pos:column="22">(<argument><expr><name pos:line="24" pos:column="23">sockfd<pos:position pos:line="24" pos:column="29"/></name> <operator pos:line="24" pos:column="30">+<pos:position pos:line="24" pos:column="31"/></operator> <literal type="number" pos:line="24" pos:column="32">1<pos:position pos:line="24" pos:column="33"/></literal></expr></argument>, <argument><expr><operator pos:line="24" pos:column="35">&amp;<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="36">readfd<pos:position pos:line="24" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="44">NULL<pos:position pos:line="24" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="50">NULL<pos:position pos:line="24" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="56">NULL<pos:position pos:line="24" pos:column="60"/></name></expr></argument>)<pos:position pos:line="24" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="62"/></condition>
      <block pos:line="25" pos:column="7">{
      <case pos:line="26" pos:column="7">case <expr><operator pos:line="26" pos:column="12">-<pos:position pos:line="26" pos:column="13"/></operator><literal type="number" pos:line="26" pos:column="13">1<pos:position pos:line="26" pos:column="14"/></literal></expr>:<pos:position pos:line="26" pos:column="15"/></case>			<comment type="block" pos:line="26" pos:column="33">/* error, stop reading */</comment>
	 <expr_stmt><expr><name pos:line="27" pos:column="10">keepon<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <name pos:line="27" pos:column="19">FALSE<pos:position pos:line="27" pos:column="24"/></name></expr>;<pos:position pos:line="27" pos:column="25"/></expr_stmt>
	 <continue pos:line="28" pos:column="10">continue;<pos:position pos:line="28" pos:column="19"/></continue>
      <case pos:line="29" pos:column="7">case <expr><literal type="number" pos:line="29" pos:column="12">0<pos:position pos:line="29" pos:column="13"/></literal></expr>:<pos:position pos:line="29" pos:column="14"/></case>			<comment type="block" pos:line="29" pos:column="33">/* timeout */</comment>
	 <break pos:line="30" pos:column="10">break;<pos:position pos:line="30" pos:column="16"/></break>
      <default pos:line="31" pos:column="7">default:<pos:position pos:line="31" pos:column="15"/></default>			<comment type="block" pos:line="31" pos:column="33">/* read! */</comment>
	 <if pos:line="32" pos:column="10">if<condition pos:line="32" pos:column="12">(<expr><call><name pos:line="32" pos:column="13">FD_ISSET<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">(<argument><expr><literal type="number" pos:line="32" pos:column="22">1<pos:position pos:line="32" pos:column="23"/></literal></expr></argument>, <argument><expr><operator pos:line="32" pos:column="25">&amp;<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="26">readfd<pos:position pos:line="32" pos:column="32"/></name></expr></argument>)<pos:position pos:line="32" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="34"/></condition><then pos:line="32" pos:column="34">
	 <block pos:line="33" pos:column="10">{
	    <expr_stmt><expr><name pos:line="34" pos:column="13">nread<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">=<pos:position pos:line="34" pos:column="20"/></operator> <call><name pos:line="34" pos:column="21">read<pos:position pos:line="34" pos:column="25"/></name><argument_list pos:line="34" pos:column="25">(<argument><expr><literal type="number" pos:line="34" pos:column="26">1<pos:position pos:line="34" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="29">buf<pos:position pos:line="34" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="34">255<pos:position pos:line="34" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="39"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="35" pos:column="13">telwrite<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name pos:line="35" pos:column="22">data<pos:position pos:line="35" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="28">(<pos:position pos:line="35" pos:column="29"/></operator><name pos:line="35" pos:column="29">unsigned<pos:position pos:line="35" pos:column="37"/></name> <name pos:line="35" pos:column="38">char<pos:position pos:line="35" pos:column="42"/></name> <operator pos:line="35" pos:column="43">*<pos:position pos:line="35" pos:column="44"/></operator><operator pos:line="35" pos:column="44">)<pos:position pos:line="35" pos:column="45"/></operator><name pos:line="35" pos:column="45">buf<pos:position pos:line="35" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="50">nread<pos:position pos:line="35" pos:column="55"/></name></expr></argument>)<pos:position pos:line="35" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="57"/></expr_stmt>
	 }<pos:position pos:line="36" pos:column="11"/></block></then></if>

	 <if pos:line="38" pos:column="10">if<condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">FD_ISSET<pos:position pos:line="38" pos:column="21"/></name><argument_list pos:line="38" pos:column="21">(<argument><expr><name pos:line="38" pos:column="22">sockfd<pos:position pos:line="38" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="30">&amp;<pos:position pos:line="38" pos:column="35"/></operator><name pos:line="38" pos:column="31">readfd<pos:position pos:line="38" pos:column="37"/></name></expr></argument>)<pos:position pos:line="38" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="39"/></condition><then pos:line="38" pos:column="39">
	 <block pos:line="39" pos:column="10">{
<cpp:ifndef pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">ifndef<pos:position pos:line="40" pos:column="8"/></cpp:directive> <name pos:line="40" pos:column="9">USE_SSLEAY<pos:position pos:line="40" pos:column="19"/></name></cpp:ifndef>
	    <expr_stmt><expr><name pos:line="41" pos:column="13">nread<pos:position pos:line="41" pos:column="18"/></name> <operator pos:line="41" pos:column="19">=<pos:position pos:line="41" pos:column="20"/></operator> <call><name pos:line="41" pos:column="21">sread<pos:position pos:line="41" pos:column="26"/></name> <argument_list pos:line="41" pos:column="27">(<argument><expr><name pos:line="41" pos:column="28">sockfd<pos:position pos:line="41" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="36">buf<pos:position pos:line="41" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="41">BUFSIZE<pos:position pos:line="41" pos:column="48"/></name> <operator pos:line="41" pos:column="49">-<pos:position pos:line="41" pos:column="50"/></operator> <literal type="number" pos:line="41" pos:column="51">1<pos:position pos:line="41" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="54"/></expr_stmt>
<cpp:else pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">else<pos:position pos:line="42" pos:column="6"/></cpp:directive></cpp:else>
	    <if pos:line="43" pos:column="13">if <condition pos:line="43" pos:column="16">(<expr><name><name pos:line="43" pos:column="17">data<pos:position pos:line="43" pos:column="21"/></name><operator pos:line="43" pos:column="21">-&gt;<pos:position pos:line="43" pos:column="26"/></operator><name pos:line="43" pos:column="23">use_ssl<pos:position pos:line="43" pos:column="30"/></name></name></expr>)<pos:position pos:line="43" pos:column="31"/></condition><then pos:line="43" pos:column="31"> <block pos:line="43" pos:column="32">{
	       <expr_stmt><expr><name pos:line="44" pos:column="16">nread<pos:position pos:line="44" pos:column="21"/></name> <operator pos:line="44" pos:column="22">=<pos:position pos:line="44" pos:column="23"/></operator> <call><name pos:line="44" pos:column="24">SSL_read<pos:position pos:line="44" pos:column="32"/></name> <argument_list pos:line="44" pos:column="33">(<argument><expr><name><name pos:line="44" pos:column="34">data<pos:position pos:line="44" pos:column="38"/></name><operator pos:line="44" pos:column="38">-&gt;<pos:position pos:line="44" pos:column="43"/></operator><name pos:line="44" pos:column="40">ssl<pos:position pos:line="44" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="45">buf<pos:position pos:line="44" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="50">BUFSIZE<pos:position pos:line="44" pos:column="57"/></name> <operator pos:line="44" pos:column="58">-<pos:position pos:line="44" pos:column="59"/></operator> <literal type="number" pos:line="44" pos:column="60">1<pos:position pos:line="44" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="63"/></expr_stmt>
	    }<pos:position pos:line="45" pos:column="14"/></block></then>
	    <else pos:line="46" pos:column="13">else <block pos:line="46" pos:column="18">{
	       <expr_stmt><expr><name pos:line="47" pos:column="16">nread<pos:position pos:line="47" pos:column="21"/></name> <operator pos:line="47" pos:column="22">=<pos:position pos:line="47" pos:column="23"/></operator> <call><name pos:line="47" pos:column="24">sread<pos:position pos:line="47" pos:column="29"/></name> <argument_list pos:line="47" pos:column="30">(<argument><expr><name pos:line="47" pos:column="31">sockfd<pos:position pos:line="47" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="39">buf<pos:position pos:line="47" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="44">BUFSIZE<pos:position pos:line="47" pos:column="51"/></name> <operator pos:line="47" pos:column="52">-<pos:position pos:line="47" pos:column="53"/></operator> <literal type="number" pos:line="47" pos:column="54">1<pos:position pos:line="47" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="57"/></expr_stmt>
	    }<pos:position pos:line="48" pos:column="14"/></block></else></if>
<cpp:endif pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">endif<pos:position pos:line="49" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="49" pos:column="8">/* USE_SSLEAY */</comment>
	 }<pos:position pos:line="50" pos:column="11"/></block></then></if>

	 <comment type="block" pos:line="52" pos:column="10">/* if we receive 0 or less here, the server closed the connection and
	   we bail out from this! */</comment>
	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">nread<pos:position pos:line="54" pos:column="18"/></name> <operator pos:line="54" pos:column="19">&lt;=<pos:position pos:line="54" pos:column="24"/></operator> <literal type="number" pos:line="54" pos:column="22">0<pos:position pos:line="54" pos:column="23"/></literal></expr>)<pos:position pos:line="54" pos:column="24"/></condition><then pos:line="54" pos:column="24"> <block pos:line="54" pos:column="25">{
	  <expr_stmt><expr><name pos:line="55" pos:column="11">keepon<pos:position pos:line="55" pos:column="17"/></name> <operator pos:line="55" pos:column="18">=<pos:position pos:line="55" pos:column="19"/></operator> <name pos:line="55" pos:column="20">FALSE<pos:position pos:line="55" pos:column="25"/></name></expr>;<pos:position pos:line="55" pos:column="26"/></expr_stmt>
	  <break pos:line="56" pos:column="11">break;<pos:position pos:line="56" pos:column="17"/></break>
	}<pos:position pos:line="57" pos:column="10"/></block></then></if>

	 <expr_stmt><expr><call><name pos:line="59" pos:column="10">telrcv<pos:position pos:line="59" pos:column="16"/></name><argument_list pos:line="59" pos:column="16">(<argument><expr><name pos:line="59" pos:column="17">data<pos:position pos:line="59" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="23">(<pos:position pos:line="59" pos:column="24"/></operator><name pos:line="59" pos:column="24">unsigned<pos:position pos:line="59" pos:column="32"/></name> <name pos:line="59" pos:column="33">char<pos:position pos:line="59" pos:column="37"/></name> <operator pos:line="59" pos:column="38">*<pos:position pos:line="59" pos:column="39"/></operator><operator pos:line="59" pos:column="39">)<pos:position pos:line="59" pos:column="40"/></operator><name pos:line="59" pos:column="40">buf<pos:position pos:line="59" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="45">nread<pos:position pos:line="59" pos:column="50"/></name></expr></argument>)<pos:position pos:line="59" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="52"/></expr_stmt>
      }<pos:position pos:line="60" pos:column="8"/></block></switch>
   }<pos:position pos:line="61" pos:column="5"/></block></while>
   <return pos:line="62" pos:column="4">return <expr><name pos:line="62" pos:column="11">CURLE_OK<pos:position pos:line="62" pos:column="19"/></name></expr>;<pos:position pos:line="62" pos:column="20"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
