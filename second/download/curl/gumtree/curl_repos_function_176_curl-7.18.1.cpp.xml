<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_176_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type>
<name pos:line="2" pos:column="1">curl_easy_getinfo_ccsid<pos:position pos:line="2" pos:column="24"/></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><name pos:line="2" pos:column="25">CURL<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type> <name pos:line="2" pos:column="32">curl<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="38">CURLINFO<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">info<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="2" pos:column="53">...<pos:position pos:line="2" pos:column="56"/></modifier></type></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>

<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">va_list<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">arg<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">void<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type> <name pos:line="6" pos:column="10">paramp<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">CURLcode<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">ret<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">unsigned<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">int<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">ccsid<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type> <name pos:line="9" pos:column="12">cpp<pos:position pos:line="9" pos:column="15"/></name></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type> <name pos:line="10" pos:column="10">s<pos:position pos:line="10" pos:column="11"/></name></decl>;<pos:position pos:line="10" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">char<pos:position pos:line="11" pos:column="7"/></name> <modifier pos:line="11" pos:column="8">*<pos:position pos:line="11" pos:column="9"/></modifier></type> <name pos:line="11" pos:column="10">d<pos:position pos:line="11" pos:column="11"/></name></decl>;<pos:position pos:line="11" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="12" pos:column="3">struct<pos:position pos:line="12" pos:column="9"/></name> <name pos:line="12" pos:column="10">SessionHandle<pos:position pos:line="12" pos:column="23"/></name></name> <modifier pos:line="12" pos:column="24">*<pos:position pos:line="12" pos:column="25"/></modifier></type> <name pos:line="12" pos:column="26">data<pos:position pos:line="12" pos:column="30"/></name></decl>;<pos:position pos:line="12" pos:column="31"/></decl_stmt>

  <comment type="block" pos:line="14" pos:column="3">/* WARNING: unlike curl_easy_get_info(), the strings returned by this
     procedure have to be free'ed. */</comment>

  <expr_stmt><expr><name pos:line="17" pos:column="3">data<pos:position pos:line="17" pos:column="7"/></name> <operator pos:line="17" pos:column="8">=<pos:position pos:line="17" pos:column="9"/></operator> <operator pos:line="17" pos:column="10">(<pos:position pos:line="17" pos:column="11"/></operator>struct <name pos:line="17" pos:column="18">SessionHandle<pos:position pos:line="17" pos:column="31"/></name> <operator pos:line="17" pos:column="32">*<pos:position pos:line="17" pos:column="33"/></operator><operator pos:line="17" pos:column="33">)<pos:position pos:line="17" pos:column="34"/></operator> <name pos:line="17" pos:column="35">curl<pos:position pos:line="17" pos:column="39"/></name></expr>;<pos:position pos:line="17" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="18" pos:column="3">va_start<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><name pos:line="18" pos:column="12">arg<pos:position pos:line="18" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="17">info<pos:position pos:line="18" pos:column="21"/></name></expr></argument>)<pos:position pos:line="18" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="19" pos:column="3">paramp<pos:position pos:line="19" pos:column="9"/></name> <operator pos:line="19" pos:column="10">=<pos:position pos:line="19" pos:column="11"/></operator> <call><name pos:line="19" pos:column="12">va_arg<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><name pos:line="19" pos:column="19">arg<pos:position pos:line="19" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="24">void<pos:position pos:line="19" pos:column="28"/></name> <operator pos:line="19" pos:column="29">*<pos:position pos:line="19" pos:column="30"/></operator></expr></argument>)<pos:position pos:line="19" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt>
  <expr_stmt><expr><name pos:line="20" pos:column="3">ret<pos:position pos:line="20" pos:column="6"/></name> <operator pos:line="20" pos:column="7">=<pos:position pos:line="20" pos:column="8"/></operator> <call><name pos:line="20" pos:column="9">Curl_getinfo<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><name pos:line="20" pos:column="22">data<pos:position pos:line="20" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="28">info<pos:position pos:line="20" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="34">paramp<pos:position pos:line="20" pos:column="40"/></name></expr></argument>)<pos:position pos:line="20" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="42"/></expr_stmt>

  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><name pos:line="22" pos:column="7">ret<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">!=<pos:position pos:line="22" pos:column="13"/></operator> <name pos:line="22" pos:column="14">CURLE_OK<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">||<pos:position pos:line="22" pos:column="25"/></operator> <operator pos:line="22" pos:column="26">(<pos:position pos:line="22" pos:column="27"/></operator><operator pos:line="22" pos:column="27">(<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="28">int<pos:position pos:line="22" pos:column="31"/></name><operator pos:line="22" pos:column="31">)<pos:position pos:line="22" pos:column="32"/></operator> <name pos:line="22" pos:column="33">info<pos:position pos:line="22" pos:column="37"/></name> <operator pos:line="22" pos:column="38">&amp;<pos:position pos:line="22" pos:column="43"/></operator> <name pos:line="22" pos:column="40">CURLINFO_TYPEMASK<pos:position pos:line="22" pos:column="57"/></name><operator pos:line="22" pos:column="57">)<pos:position pos:line="22" pos:column="58"/></operator> <operator pos:line="22" pos:column="59">!=<pos:position pos:line="22" pos:column="61"/></operator> <name pos:line="22" pos:column="62">CURLINFO_STRING<pos:position pos:line="22" pos:column="77"/></name></expr>)<pos:position pos:line="22" pos:column="78"/></condition><then pos:line="22" pos:column="78"> <block pos:line="22" pos:column="79">{
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">va_end<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><name pos:line="23" pos:column="12">arg<pos:position pos:line="23" pos:column="15"/></name></expr></argument>)<pos:position pos:line="23" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="17"/></expr_stmt>
    <return pos:line="24" pos:column="5">return <expr><name pos:line="24" pos:column="12">ret<pos:position pos:line="24" pos:column="15"/></name></expr>;<pos:position pos:line="24" pos:column="16"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

  <expr_stmt><expr><name pos:line="27" pos:column="3">ccsid<pos:position pos:line="27" pos:column="8"/></name> <operator pos:line="27" pos:column="9">=<pos:position pos:line="27" pos:column="10"/></operator> <macro><name pos:line="27" pos:column="11">va_arg<pos:position pos:line="27" pos:column="17"/></name><argument_list pos:line="27" pos:column="17">(<argument pos:line="27" pos:column="18">arg<pos:position pos:line="27" pos:column="21"/></argument>, <argument pos:line="27" pos:column="23">unsigned int<pos:position pos:line="27" pos:column="35"/></argument>)<pos:position pos:line="27" pos:column="36"/></argument_list></macro></expr>;<pos:position pos:line="27" pos:column="37"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="28" pos:column="3">va_end<pos:position pos:line="28" pos:column="9"/></name><argument_list pos:line="28" pos:column="9">(<argument><expr><name pos:line="28" pos:column="10">arg<pos:position pos:line="28" pos:column="13"/></name></expr></argument>)<pos:position pos:line="28" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name pos:line="29" pos:column="3">cpp<pos:position pos:line="29" pos:column="6"/></name> <operator pos:line="29" pos:column="7">=<pos:position pos:line="29" pos:column="8"/></operator> <operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">char<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">*<pos:position pos:line="29" pos:column="16"/></operator> <operator pos:line="29" pos:column="17">*<pos:position pos:line="29" pos:column="18"/></operator><operator pos:line="29" pos:column="18">)<pos:position pos:line="29" pos:column="19"/></operator> <name pos:line="29" pos:column="20">paramp<pos:position pos:line="29" pos:column="26"/></name></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name pos:line="30" pos:column="3">s<pos:position pos:line="30" pos:column="4"/></name> <operator pos:line="30" pos:column="5">=<pos:position pos:line="30" pos:column="6"/></operator> <operator pos:line="30" pos:column="7">*<pos:position pos:line="30" pos:column="8"/></operator><name pos:line="30" pos:column="8">cpp<pos:position pos:line="30" pos:column="11"/></name></expr>;<pos:position pos:line="30" pos:column="12"/></expr_stmt>

  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><operator pos:line="32" pos:column="7">!<pos:position pos:line="32" pos:column="8"/></operator><name pos:line="32" pos:column="8">s<pos:position pos:line="32" pos:column="9"/></name></expr>)<pos:position pos:line="32" pos:column="10"/></condition><then pos:line="32" pos:column="10">
    <block type="pseudo"><return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">ret<pos:position pos:line="33" pos:column="15"/></name></expr>;<pos:position pos:line="33" pos:column="16"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="35" pos:column="3">d<pos:position pos:line="35" pos:column="4"/></name> <operator pos:line="35" pos:column="5">=<pos:position pos:line="35" pos:column="6"/></operator> <call><name pos:line="35" pos:column="7">dynconvert<pos:position pos:line="35" pos:column="17"/></name><argument_list pos:line="35" pos:column="17">(<argument><expr><name pos:line="35" pos:column="18">ccsid<pos:position pos:line="35" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="25">s<pos:position pos:line="35" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="28">-<pos:position pos:line="35" pos:column="29"/></operator><literal type="number" pos:line="35" pos:column="29">1<pos:position pos:line="35" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="32">ASCII_CCSID<pos:position pos:line="35" pos:column="43"/></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="36" pos:column="3">*<pos:position pos:line="36" pos:column="4"/></operator><name pos:line="36" pos:column="4">cpp<pos:position pos:line="36" pos:column="7"/></name> <operator pos:line="36" pos:column="8">=<pos:position pos:line="36" pos:column="9"/></operator> <name pos:line="36" pos:column="10">d<pos:position pos:line="36" pos:column="11"/></name></expr>;<pos:position pos:line="36" pos:column="12"/></expr_stmt>

  <if pos:line="38" pos:column="3">if <condition pos:line="38" pos:column="6">(<expr><operator pos:line="38" pos:column="7">!<pos:position pos:line="38" pos:column="8"/></operator><name pos:line="38" pos:column="8">d<pos:position pos:line="38" pos:column="9"/></name></expr>)<pos:position pos:line="38" pos:column="10"/></condition><then pos:line="38" pos:column="10">
    <block type="pseudo"><return pos:line="39" pos:column="5">return <expr><name pos:line="39" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="39" pos:column="31"/></name></expr>;<pos:position pos:line="39" pos:column="32"/></return></block></then></if>

  <return pos:line="41" pos:column="3">return <expr><name pos:line="41" pos:column="10">ret<pos:position pos:line="41" pos:column="13"/></name></expr>;<pos:position pos:line="41" pos:column="14"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
