<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1623_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">singlesocket<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">Curl_multi<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">multi<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
                         <parameter><decl><type><name><name pos:line="2" pos:column="26">struct<pos:position pos:line="2" pos:column="32"/></name> <name pos:line="2" pos:column="33">Curl_easy<pos:position pos:line="2" pos:column="42"/></name></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">data<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">curl_socket_t<pos:position pos:line="4" pos:column="16"/></name></type> <name><name pos:line="4" pos:column="17">socks<pos:position pos:line="4" pos:column="22"/></name><index pos:line="4" pos:column="22">[<expr><name pos:line="4" pos:column="23">MAX_SOCKSPEREASYHANDLE<pos:position pos:line="4" pos:column="45"/></name></expr>]<pos:position pos:line="4" pos:column="46"/></index></name></decl>;<pos:position pos:line="4" pos:column="47"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">i<pos:position pos:line="5" pos:column="8"/></name></decl>;<pos:position pos:line="5" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">Curl_sh_entry<pos:position pos:line="6" pos:column="23"/></name></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">entry<pos:position pos:line="6" pos:column="30"/></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">curl_socket_t<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">s<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">num<pos:position pos:line="8" pos:column="10"/></name></decl>;<pos:position pos:line="8" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">unsigned<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">int<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">curraction<pos:position pos:line="9" pos:column="26"/></name></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>

  <for pos:line="11" pos:column="3">for<control pos:line="11" pos:column="6">(<init><expr><name pos:line="11" pos:column="7">i<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">=<pos:position pos:line="11" pos:column="10"/></operator> <literal type="number" pos:line="11" pos:column="11">0<pos:position pos:line="11" pos:column="12"/></literal></expr>;<pos:position pos:line="11" pos:column="13"/></init> <condition><expr><name pos:line="11" pos:column="14">i<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">&lt;<pos:position pos:line="11" pos:column="19"/></operator> <name pos:line="11" pos:column="17">MAX_SOCKSPEREASYHANDLE<pos:position pos:line="11" pos:column="39"/></name></expr>;<pos:position pos:line="11" pos:column="40"/></condition> <incr><expr><name pos:line="11" pos:column="41">i<pos:position pos:line="11" pos:column="42"/></name><operator pos:line="11" pos:column="42">++<pos:position pos:line="11" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="11" pos:column="45"/></control>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="12" pos:column="5">socks<pos:position pos:line="12" pos:column="10"/></name><index pos:line="12" pos:column="10">[<expr><name pos:line="12" pos:column="11">i<pos:position pos:line="12" pos:column="12"/></name></expr>]<pos:position pos:line="12" pos:column="13"/></index></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <name pos:line="12" pos:column="16">CURL_SOCKET_BAD<pos:position pos:line="12" pos:column="31"/></name></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt></block></for>

  <comment type="block" pos:line="14" pos:column="3">/* Fill in the 'current' struct with the state as it is now: what sockets to
     supervise and for what actions */</comment>
  <expr_stmt><expr><name pos:line="16" pos:column="3">curraction<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <call><name pos:line="16" pos:column="16">multi_getsock<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">data<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="36">socks<pos:position pos:line="16" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="43">MAX_SOCKSPEREASYHANDLE<pos:position pos:line="16" pos:column="65"/></name></expr></argument>)<pos:position pos:line="16" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="67"/></expr_stmt>

  <comment type="block" pos:line="18" pos:column="3">/* We have 0 .. N sockets already and we get to know about the 0 .. M
     sockets we should have from now on. Detect the differences, remove no
     longer supervised ones and add new ones */</comment>

  <comment type="block" pos:line="22" pos:column="3">/* walk over the sockets we got right now */</comment>
  <for pos:line="23" pos:column="3">for<control pos:line="23" pos:column="6">(<init><expr><name pos:line="23" pos:column="7">i<pos:position pos:line="23" pos:column="8"/></name> <operator pos:line="23" pos:column="9">=<pos:position pos:line="23" pos:column="10"/></operator> <literal type="number" pos:line="23" pos:column="11">0<pos:position pos:line="23" pos:column="12"/></literal></expr>;<pos:position pos:line="23" pos:column="13"/></init> <condition><expr><operator pos:line="23" pos:column="14">(<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="15">i<pos:position pos:line="23" pos:column="16"/></name><operator pos:line="23" pos:column="16">&lt;<pos:position pos:line="23" pos:column="20"/></operator> <name pos:line="23" pos:column="18">MAX_SOCKSPEREASYHANDLE<pos:position pos:line="23" pos:column="40"/></name><operator pos:line="23" pos:column="40">)<pos:position pos:line="23" pos:column="41"/></operator> <operator pos:line="23" pos:column="42">&amp;&amp;<pos:position pos:line="23" pos:column="52"/></operator>
        <operator pos:line="24" pos:column="9">(<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">curraction<pos:position pos:line="24" pos:column="20"/></name> <operator pos:line="24" pos:column="21">&amp;<pos:position pos:line="24" pos:column="26"/></operator> <operator pos:line="24" pos:column="23">(<pos:position pos:line="24" pos:column="24"/></operator><call><name pos:line="24" pos:column="24">GETSOCK_READSOCK<pos:position pos:line="24" pos:column="40"/></name><argument_list pos:line="24" pos:column="40">(<argument><expr><name pos:line="24" pos:column="41">i<pos:position pos:line="24" pos:column="42"/></name></expr></argument>)<pos:position pos:line="24" pos:column="43"/></argument_list></call> <operator pos:line="24" pos:column="44">|<pos:position pos:line="24" pos:column="45"/></operator> <call><name pos:line="24" pos:column="46">GETSOCK_WRITESOCK<pos:position pos:line="24" pos:column="63"/></name><argument_list pos:line="24" pos:column="63">(<argument><expr><name pos:line="24" pos:column="64">i<pos:position pos:line="24" pos:column="65"/></name></expr></argument>)<pos:position pos:line="24" pos:column="66"/></argument_list></call><operator pos:line="24" pos:column="66">)<pos:position pos:line="24" pos:column="67"/></operator><operator pos:line="24" pos:column="67">)<pos:position pos:line="24" pos:column="68"/></operator></expr>;<pos:position pos:line="24" pos:column="69"/></condition>
      <incr><expr><name pos:line="25" pos:column="7">i<pos:position pos:line="25" pos:column="8"/></name><operator pos:line="25" pos:column="8">++<pos:position pos:line="25" pos:column="10"/></operator></expr></incr>)<pos:position pos:line="25" pos:column="11"/></control> <block pos:line="25" pos:column="12">{
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">int<pos:position pos:line="26" pos:column="8"/></name></type> <name pos:line="26" pos:column="9">action<pos:position pos:line="26" pos:column="15"/></name> <init pos:line="26" pos:column="16">= <expr><name pos:line="26" pos:column="18">CURL_POLL_NONE<pos:position pos:line="26" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="26" pos:column="33"/></decl_stmt>

    <expr_stmt><expr><name pos:line="28" pos:column="5">s<pos:position pos:line="28" pos:column="6"/></name> <operator pos:line="28" pos:column="7">=<pos:position pos:line="28" pos:column="8"/></operator> <name><name pos:line="28" pos:column="9">socks<pos:position pos:line="28" pos:column="14"/></name><index pos:line="28" pos:column="14">[<expr><name pos:line="28" pos:column="15">i<pos:position pos:line="28" pos:column="16"/></name></expr>]<pos:position pos:line="28" pos:column="17"/></index></name></expr>;<pos:position pos:line="28" pos:column="18"/></expr_stmt>

    <comment type="block" pos:line="30" pos:column="5">/* get it from the hash */</comment>
    <expr_stmt><expr><name pos:line="31" pos:column="5">entry<pos:position pos:line="31" pos:column="10"/></name> <operator pos:line="31" pos:column="11">=<pos:position pos:line="31" pos:column="12"/></operator> <call><name pos:line="31" pos:column="13">sh_getentry<pos:position pos:line="31" pos:column="24"/></name><argument_list pos:line="31" pos:column="24">(<argument><expr><operator pos:line="31" pos:column="25">&amp;<pos:position pos:line="31" pos:column="30"/></operator><name><name pos:line="31" pos:column="26">multi<pos:position pos:line="31" pos:column="31"/></name><operator pos:line="31" pos:column="31">-&gt;<pos:position pos:line="31" pos:column="36"/></operator><name pos:line="31" pos:column="33">sockhash<pos:position pos:line="31" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="43">s<pos:position pos:line="31" pos:column="44"/></name></expr></argument>)<pos:position pos:line="31" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="46"/></expr_stmt>

    <if pos:line="33" pos:column="5">if<condition pos:line="33" pos:column="7">(<expr><name pos:line="33" pos:column="8">curraction<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">&amp;<pos:position pos:line="33" pos:column="24"/></operator> <call><name pos:line="33" pos:column="21">GETSOCK_READSOCK<pos:position pos:line="33" pos:column="37"/></name><argument_list pos:line="33" pos:column="37">(<argument><expr><name pos:line="33" pos:column="38">i<pos:position pos:line="33" pos:column="39"/></name></expr></argument>)<pos:position pos:line="33" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="41"/></condition><then pos:line="33" pos:column="41">
      <block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="7">action<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">|=<pos:position pos:line="34" pos:column="16"/></operator> <name pos:line="34" pos:column="17">CURL_POLL_IN<pos:position pos:line="34" pos:column="29"/></name></expr>;<pos:position pos:line="34" pos:column="30"/></expr_stmt></block></then></if>
    <if pos:line="35" pos:column="5">if<condition pos:line="35" pos:column="7">(<expr><name pos:line="35" pos:column="8">curraction<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">&amp;<pos:position pos:line="35" pos:column="24"/></operator> <call><name pos:line="35" pos:column="21">GETSOCK_WRITESOCK<pos:position pos:line="35" pos:column="38"/></name><argument_list pos:line="35" pos:column="38">(<argument><expr><name pos:line="35" pos:column="39">i<pos:position pos:line="35" pos:column="40"/></name></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="42"/></condition><then pos:line="35" pos:column="42">
      <block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="7">action<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">|=<pos:position pos:line="36" pos:column="16"/></operator> <name pos:line="36" pos:column="17">CURL_POLL_OUT<pos:position pos:line="36" pos:column="30"/></name></expr>;<pos:position pos:line="36" pos:column="31"/></expr_stmt></block></then></if>

    <if pos:line="38" pos:column="5">if<condition pos:line="38" pos:column="7">(<expr><name pos:line="38" pos:column="8">entry<pos:position pos:line="38" pos:column="13"/></name></expr>)<pos:position pos:line="38" pos:column="14"/></condition><then pos:line="38" pos:column="14"> <block pos:line="38" pos:column="15">{
      <comment type="block" pos:line="39" pos:column="7">/* yeps, already present so check if it has the same action set */</comment>
      <if pos:line="40" pos:column="7">if<condition pos:line="40" pos:column="9">(<expr><name><name pos:line="40" pos:column="10">entry<pos:position pos:line="40" pos:column="15"/></name><operator pos:line="40" pos:column="15">-&gt;<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="17">action<pos:position pos:line="40" pos:column="23"/></name></name> <operator pos:line="40" pos:column="24">==<pos:position pos:line="40" pos:column="26"/></operator> <name pos:line="40" pos:column="27">action<pos:position pos:line="40" pos:column="33"/></name></expr>)<pos:position pos:line="40" pos:column="34"/></condition><then pos:line="40" pos:column="34">
        <comment type="block" pos:line="41" pos:column="9">/* same, continue */</comment>
        <block type="pseudo"><continue pos:line="42" pos:column="9">continue;<pos:position pos:line="42" pos:column="18"/></continue></block></then></if>
    }<pos:position pos:line="43" pos:column="6"/></block></then>
    <else pos:line="44" pos:column="5">else <block pos:line="44" pos:column="10">{
      <comment type="block" pos:line="45" pos:column="7">/* this is a socket we didn't have before, add it! */</comment>
      <expr_stmt><expr><name pos:line="46" pos:column="7">entry<pos:position pos:line="46" pos:column="12"/></name> <operator pos:line="46" pos:column="13">=<pos:position pos:line="46" pos:column="14"/></operator> <call><name pos:line="46" pos:column="15">sh_addentry<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">(<argument><expr><operator pos:line="46" pos:column="27">&amp;<pos:position pos:line="46" pos:column="32"/></operator><name><name pos:line="46" pos:column="28">multi<pos:position pos:line="46" pos:column="33"/></name><operator pos:line="46" pos:column="33">-&gt;<pos:position pos:line="46" pos:column="38"/></operator><name pos:line="46" pos:column="35">sockhash<pos:position pos:line="46" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="45">s<pos:position pos:line="46" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="48">data<pos:position pos:line="46" pos:column="52"/></name></expr></argument>)<pos:position pos:line="46" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="54"/></expr_stmt>
      <if pos:line="47" pos:column="7">if<condition pos:line="47" pos:column="9">(<expr><operator pos:line="47" pos:column="10">!<pos:position pos:line="47" pos:column="11"/></operator><name pos:line="47" pos:column="11">entry<pos:position pos:line="47" pos:column="16"/></name></expr>)<pos:position pos:line="47" pos:column="17"/></condition><then pos:line="47" pos:column="17">
        <comment type="block" pos:line="48" pos:column="9">/* fatal */</comment>
        <block type="pseudo"><return pos:line="49" pos:column="9">return;<pos:position pos:line="49" pos:column="16"/></return></block></then></if>
    }<pos:position pos:line="50" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="52" pos:column="5">/* we know (entry != NULL) at this point, see the logic above */</comment>
    <if pos:line="53" pos:column="5">if<condition pos:line="53" pos:column="7">(<expr><name><name pos:line="53" pos:column="8">multi<pos:position pos:line="53" pos:column="13"/></name><operator pos:line="53" pos:column="13">-&gt;<pos:position pos:line="53" pos:column="18"/></operator><name pos:line="53" pos:column="15">socket_cb<pos:position pos:line="53" pos:column="24"/></name></name></expr>)<pos:position pos:line="53" pos:column="25"/></condition><then pos:line="53" pos:column="25">
      <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="54" pos:column="7">multi<pos:position pos:line="54" pos:column="12"/></name><operator pos:line="54" pos:column="12">-&gt;<pos:position pos:line="54" pos:column="17"/></operator><name pos:line="54" pos:column="14">socket_cb<pos:position pos:line="54" pos:column="23"/></name></name><argument_list pos:line="54" pos:column="23">(<argument><expr><name pos:line="54" pos:column="24">data<pos:position pos:line="54" pos:column="28"/></name></expr></argument>,
                       <argument><expr><name pos:line="55" pos:column="24">s<pos:position pos:line="55" pos:column="25"/></name></expr></argument>,
                       <argument><expr><name pos:line="56" pos:column="24">action<pos:position pos:line="56" pos:column="30"/></name></expr></argument>,
                       <argument><expr><name><name pos:line="57" pos:column="24">multi<pos:position pos:line="57" pos:column="29"/></name><operator pos:line="57" pos:column="29">-&gt;<pos:position pos:line="57" pos:column="34"/></operator><name pos:line="57" pos:column="31">socket_userp<pos:position pos:line="57" pos:column="43"/></name></name></expr></argument>,
                       <argument><expr><name><name pos:line="58" pos:column="24">entry<pos:position pos:line="58" pos:column="29"/></name><operator pos:line="58" pos:column="29">-&gt;<pos:position pos:line="58" pos:column="34"/></operator><name pos:line="58" pos:column="31">socketp<pos:position pos:line="58" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="40"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="60" pos:column="5">entry<pos:position pos:line="60" pos:column="10"/></name><operator pos:line="60" pos:column="10">-&gt;<pos:position pos:line="60" pos:column="15"/></operator><name pos:line="60" pos:column="12">action<pos:position pos:line="60" pos:column="18"/></name></name> <operator pos:line="60" pos:column="19">=<pos:position pos:line="60" pos:column="20"/></operator> <name pos:line="60" pos:column="21">action<pos:position pos:line="60" pos:column="27"/></name></expr>;<pos:position pos:line="60" pos:column="28"/></expr_stmt> <comment type="block" pos:line="60" pos:column="29">/* store the current action state */</comment>
  }<pos:position pos:line="61" pos:column="4"/></block></for>

  <expr_stmt><expr><name pos:line="63" pos:column="3">num<pos:position pos:line="63" pos:column="6"/></name> <operator pos:line="63" pos:column="7">=<pos:position pos:line="63" pos:column="8"/></operator> <name pos:line="63" pos:column="9">i<pos:position pos:line="63" pos:column="10"/></name></expr>;<pos:position pos:line="63" pos:column="11"/></expr_stmt> <comment type="block" pos:line="63" pos:column="12">/* number of sockets */</comment>

  <comment type="block" pos:line="65" pos:column="3">/* when we've walked over all the sockets we should have right now, we must
     make sure to detect sockets that are removed */</comment>
  <for pos:line="67" pos:column="3">for<control pos:line="67" pos:column="6">(<init><expr><name pos:line="67" pos:column="7">i<pos:position pos:line="67" pos:column="8"/></name> <operator pos:line="67" pos:column="9">=<pos:position pos:line="67" pos:column="10"/></operator> <literal type="number" pos:line="67" pos:column="11">0<pos:position pos:line="67" pos:column="12"/></literal></expr>;<pos:position pos:line="67" pos:column="13"/></init> <condition><expr><name pos:line="67" pos:column="14">i<pos:position pos:line="67" pos:column="15"/></name><operator pos:line="67" pos:column="15">&lt;<pos:position pos:line="67" pos:column="19"/></operator> <name><name pos:line="67" pos:column="17">data<pos:position pos:line="67" pos:column="21"/></name><operator pos:line="67" pos:column="21">-&gt;<pos:position pos:line="67" pos:column="26"/></operator><name pos:line="67" pos:column="23">numsocks<pos:position pos:line="67" pos:column="31"/></name></name></expr>;<pos:position pos:line="67" pos:column="32"/></condition> <incr><expr><name pos:line="67" pos:column="33">i<pos:position pos:line="67" pos:column="34"/></name><operator pos:line="67" pos:column="34">++<pos:position pos:line="67" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="67" pos:column="37"/></control> <block pos:line="67" pos:column="38">{
    <decl_stmt><decl><type><name pos:line="68" pos:column="5">int<pos:position pos:line="68" pos:column="8"/></name></type> <name pos:line="68" pos:column="9">j<pos:position pos:line="68" pos:column="10"/></name></decl>;<pos:position pos:line="68" pos:column="11"/></decl_stmt>
    <expr_stmt><expr><name pos:line="69" pos:column="5">s<pos:position pos:line="69" pos:column="6"/></name> <operator pos:line="69" pos:column="7">=<pos:position pos:line="69" pos:column="8"/></operator> <name><name pos:line="69" pos:column="9">data<pos:position pos:line="69" pos:column="13"/></name><operator pos:line="69" pos:column="13">-&gt;<pos:position pos:line="69" pos:column="18"/></operator><name pos:line="69" pos:column="15">sockets<pos:position pos:line="69" pos:column="22"/></name><index pos:line="69" pos:column="22">[<expr><name pos:line="69" pos:column="23">i<pos:position pos:line="69" pos:column="24"/></name></expr>]<pos:position pos:line="69" pos:column="25"/></index></name></expr>;<pos:position pos:line="69" pos:column="26"/></expr_stmt>
    <for pos:line="70" pos:column="5">for<control pos:line="70" pos:column="8">(<init><expr><name pos:line="70" pos:column="9">j<pos:position pos:line="70" pos:column="10"/></name> <operator pos:line="70" pos:column="11">=<pos:position pos:line="70" pos:column="12"/></operator> <literal type="number" pos:line="70" pos:column="13">0<pos:position pos:line="70" pos:column="14"/></literal></expr>;<pos:position pos:line="70" pos:column="15"/></init> <condition><expr><name pos:line="70" pos:column="16">j<pos:position pos:line="70" pos:column="17"/></name><operator pos:line="70" pos:column="17">&lt;<pos:position pos:line="70" pos:column="21"/></operator><name pos:line="70" pos:column="18">num<pos:position pos:line="70" pos:column="21"/></name></expr>;<pos:position pos:line="70" pos:column="22"/></condition> <incr><expr><name pos:line="70" pos:column="23">j<pos:position pos:line="70" pos:column="24"/></name><operator pos:line="70" pos:column="24">++<pos:position pos:line="70" pos:column="26"/></operator></expr></incr>)<pos:position pos:line="70" pos:column="27"/></control> <block pos:line="70" pos:column="28">{
      <if pos:line="71" pos:column="7">if<condition pos:line="71" pos:column="9">(<expr><name pos:line="71" pos:column="10">s<pos:position pos:line="71" pos:column="11"/></name> <operator pos:line="71" pos:column="12">==<pos:position pos:line="71" pos:column="14"/></operator> <name><name pos:line="71" pos:column="15">socks<pos:position pos:line="71" pos:column="20"/></name><index pos:line="71" pos:column="20">[<expr><name pos:line="71" pos:column="21">j<pos:position pos:line="71" pos:column="22"/></name></expr>]<pos:position pos:line="71" pos:column="23"/></index></name></expr>)<pos:position pos:line="71" pos:column="24"/></condition><then pos:line="71" pos:column="24"> <block pos:line="71" pos:column="25">{
        <comment type="block" pos:line="72" pos:column="9">/* this is still supervised */</comment>
        <expr_stmt><expr><name pos:line="73" pos:column="9">s<pos:position pos:line="73" pos:column="10"/></name> <operator pos:line="73" pos:column="11">=<pos:position pos:line="73" pos:column="12"/></operator> <name pos:line="73" pos:column="13">CURL_SOCKET_BAD<pos:position pos:line="73" pos:column="28"/></name></expr>;<pos:position pos:line="73" pos:column="29"/></expr_stmt>
        <break pos:line="74" pos:column="9">break;<pos:position pos:line="74" pos:column="15"/></break>
      }<pos:position pos:line="75" pos:column="8"/></block></then></if>
    }<pos:position pos:line="76" pos:column="6"/></block></for>

    <expr_stmt><expr><name pos:line="78" pos:column="5">entry<pos:position pos:line="78" pos:column="10"/></name> <operator pos:line="78" pos:column="11">=<pos:position pos:line="78" pos:column="12"/></operator> <call><name pos:line="78" pos:column="13">sh_getentry<pos:position pos:line="78" pos:column="24"/></name><argument_list pos:line="78" pos:column="24">(<argument><expr><operator pos:line="78" pos:column="25">&amp;<pos:position pos:line="78" pos:column="30"/></operator><name><name pos:line="78" pos:column="26">multi<pos:position pos:line="78" pos:column="31"/></name><operator pos:line="78" pos:column="31">-&gt;<pos:position pos:line="78" pos:column="36"/></operator><name pos:line="78" pos:column="33">sockhash<pos:position pos:line="78" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="43">s<pos:position pos:line="78" pos:column="44"/></name></expr></argument>)<pos:position pos:line="78" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="46"/></expr_stmt>
    <if pos:line="79" pos:column="5">if<condition pos:line="79" pos:column="7">(<expr><name pos:line="79" pos:column="8">entry<pos:position pos:line="79" pos:column="13"/></name></expr>)<pos:position pos:line="79" pos:column="14"/></condition><then pos:line="79" pos:column="14"> <block pos:line="79" pos:column="15">{
      <comment type="block" pos:line="80" pos:column="7">/* this socket has been removed. Tell the app to remove it */</comment>
      <decl_stmt><decl><type><name pos:line="81" pos:column="7">bool<pos:position pos:line="81" pos:column="11"/></name></type> <name pos:line="81" pos:column="12">remove_sock_from_hash<pos:position pos:line="81" pos:column="33"/></name> <init pos:line="81" pos:column="34">= <expr><name pos:line="81" pos:column="36">TRUE<pos:position pos:line="81" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="81" pos:column="41"/></decl_stmt>

      <comment type="block" pos:line="83" pos:column="7">/* check if the socket to be removed serves a connection which has
         other easy-s in a pipeline. In this case the socket should not be
         removed. */</comment>
      <decl_stmt><decl><type><name><name pos:line="86" pos:column="7">struct<pos:position pos:line="86" pos:column="13"/></name> <name pos:line="86" pos:column="14">connectdata<pos:position pos:line="86" pos:column="25"/></name></name> <modifier pos:line="86" pos:column="26">*<pos:position pos:line="86" pos:column="27"/></modifier></type><name pos:line="86" pos:column="27">easy_conn<pos:position pos:line="86" pos:column="36"/></name> <init pos:line="86" pos:column="37">= <expr><name><name pos:line="86" pos:column="39">data<pos:position pos:line="86" pos:column="43"/></name><operator pos:line="86" pos:column="43">-&gt;<pos:position pos:line="86" pos:column="48"/></operator><name pos:line="86" pos:column="45">easy_conn<pos:position pos:line="86" pos:column="54"/></name></name></expr></init></decl>;<pos:position pos:line="86" pos:column="55"/></decl_stmt>
      <if pos:line="87" pos:column="7">if<condition pos:line="87" pos:column="9">(<expr><name pos:line="87" pos:column="10">easy_conn<pos:position pos:line="87" pos:column="19"/></name></expr>)<pos:position pos:line="87" pos:column="20"/></condition><then pos:line="87" pos:column="20"> <block pos:line="87" pos:column="21">{
        <if pos:line="88" pos:column="9">if<condition pos:line="88" pos:column="11">(<expr><name><name pos:line="88" pos:column="12">easy_conn<pos:position pos:line="88" pos:column="21"/></name><operator pos:line="88" pos:column="21">-&gt;<pos:position pos:line="88" pos:column="26"/></operator><name pos:line="88" pos:column="23">recv_pipe<pos:position pos:line="88" pos:column="32"/></name><operator pos:line="88" pos:column="32">.<pos:position pos:line="88" pos:column="33"/></operator><name pos:line="88" pos:column="33">size<pos:position pos:line="88" pos:column="37"/></name></name> <operator pos:line="88" pos:column="38">&gt;<pos:position pos:line="88" pos:column="42"/></operator> <literal type="number" pos:line="88" pos:column="40">1<pos:position pos:line="88" pos:column="41"/></literal></expr>)<pos:position pos:line="88" pos:column="42"/></condition><then pos:line="88" pos:column="42"> <block pos:line="88" pos:column="43">{
          <comment type="block" pos:line="89" pos:column="11">/* the handle should not be removed from the pipe yet */</comment>
          <expr_stmt><expr><name pos:line="90" pos:column="11">remove_sock_from_hash<pos:position pos:line="90" pos:column="32"/></name> <operator pos:line="90" pos:column="33">=<pos:position pos:line="90" pos:column="34"/></operator> <name pos:line="90" pos:column="35">FALSE<pos:position pos:line="90" pos:column="40"/></name></expr>;<pos:position pos:line="90" pos:column="41"/></expr_stmt>

          <comment type="block" pos:line="92" pos:column="11">/* Update the sockhash entry to instead point to the next in line
             for the recv_pipe, or the first (in case this particular easy
             isn't already) */</comment>
          <if pos:line="95" pos:column="11">if<condition pos:line="95" pos:column="13">(<expr><name><name pos:line="95" pos:column="14">entry<pos:position pos:line="95" pos:column="19"/></name><operator pos:line="95" pos:column="19">-&gt;<pos:position pos:line="95" pos:column="24"/></operator><name pos:line="95" pos:column="21">easy<pos:position pos:line="95" pos:column="25"/></name></name> <operator pos:line="95" pos:column="26">==<pos:position pos:line="95" pos:column="28"/></operator> <name pos:line="95" pos:column="29">data<pos:position pos:line="95" pos:column="33"/></name></expr>)<pos:position pos:line="95" pos:column="34"/></condition><then pos:line="95" pos:column="34"> <block pos:line="95" pos:column="35">{
            <if pos:line="96" pos:column="13">if<condition pos:line="96" pos:column="15">(<expr><call><name pos:line="96" pos:column="16">Curl_recvpipe_head<pos:position pos:line="96" pos:column="34"/></name><argument_list pos:line="96" pos:column="34">(<argument><expr><name pos:line="96" pos:column="35">data<pos:position pos:line="96" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="41">easy_conn<pos:position pos:line="96" pos:column="50"/></name></expr></argument>)<pos:position pos:line="96" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="96" pos:column="52"/></condition><then pos:line="96" pos:column="52">
              <block type="pseudo"><expr_stmt><expr><name><name pos:line="97" pos:column="15">entry<pos:position pos:line="97" pos:column="20"/></name><operator pos:line="97" pos:column="20">-&gt;<pos:position pos:line="97" pos:column="25"/></operator><name pos:line="97" pos:column="22">easy<pos:position pos:line="97" pos:column="26"/></name></name> <operator pos:line="97" pos:column="27">=<pos:position pos:line="97" pos:column="28"/></operator> <name><name pos:line="97" pos:column="29">easy_conn<pos:position pos:line="97" pos:column="38"/></name><operator pos:line="97" pos:column="38">-&gt;<pos:position pos:line="97" pos:column="43"/></operator><name pos:line="97" pos:column="40">recv_pipe<pos:position pos:line="97" pos:column="49"/></name><operator pos:line="97" pos:column="49">.<pos:position pos:line="97" pos:column="50"/></operator><name pos:line="97" pos:column="50">head<pos:position pos:line="97" pos:column="54"/></name><operator pos:line="97" pos:column="54">-&gt;<pos:position pos:line="97" pos:column="59"/></operator><name pos:line="97" pos:column="56">next<pos:position pos:line="97" pos:column="60"/></name><operator pos:line="97" pos:column="60">-&gt;<pos:position pos:line="97" pos:column="65"/></operator><name pos:line="97" pos:column="62">ptr<pos:position pos:line="97" pos:column="65"/></name></name></expr>;<pos:position pos:line="97" pos:column="66"/></expr_stmt></block></then>
            <else pos:line="98" pos:column="13">else
              <block type="pseudo"><expr_stmt><expr><name><name pos:line="99" pos:column="15">entry<pos:position pos:line="99" pos:column="20"/></name><operator pos:line="99" pos:column="20">-&gt;<pos:position pos:line="99" pos:column="25"/></operator><name pos:line="99" pos:column="22">easy<pos:position pos:line="99" pos:column="26"/></name></name> <operator pos:line="99" pos:column="27">=<pos:position pos:line="99" pos:column="28"/></operator> <name><name pos:line="99" pos:column="29">easy_conn<pos:position pos:line="99" pos:column="38"/></name><operator pos:line="99" pos:column="38">-&gt;<pos:position pos:line="99" pos:column="43"/></operator><name pos:line="99" pos:column="40">recv_pipe<pos:position pos:line="99" pos:column="49"/></name><operator pos:line="99" pos:column="49">.<pos:position pos:line="99" pos:column="50"/></operator><name pos:line="99" pos:column="50">head<pos:position pos:line="99" pos:column="54"/></name><operator pos:line="99" pos:column="54">-&gt;<pos:position pos:line="99" pos:column="59"/></operator><name pos:line="99" pos:column="56">ptr<pos:position pos:line="99" pos:column="59"/></name></name></expr>;<pos:position pos:line="99" pos:column="60"/></expr_stmt></block></else></if>
          }<pos:position pos:line="100" pos:column="12"/></block></then></if>
        }<pos:position pos:line="101" pos:column="10"/></block></then></if>
        <if pos:line="102" pos:column="9">if<condition pos:line="102" pos:column="11">(<expr><name><name pos:line="102" pos:column="12">easy_conn<pos:position pos:line="102" pos:column="21"/></name><operator pos:line="102" pos:column="21">-&gt;<pos:position pos:line="102" pos:column="26"/></operator><name pos:line="102" pos:column="23">send_pipe<pos:position pos:line="102" pos:column="32"/></name><operator pos:line="102" pos:column="32">.<pos:position pos:line="102" pos:column="33"/></operator><name pos:line="102" pos:column="33">size<pos:position pos:line="102" pos:column="37"/></name></name> <operator pos:line="102" pos:column="38">&gt;<pos:position pos:line="102" pos:column="42"/></operator> <literal type="number" pos:line="102" pos:column="40">1<pos:position pos:line="102" pos:column="41"/></literal></expr>)<pos:position pos:line="102" pos:column="42"/></condition><then pos:line="102" pos:column="42"> <block pos:line="102" pos:column="43">{
          <comment type="block" pos:line="103" pos:column="11">/* the handle should not be removed from the pipe yet */</comment>
          <expr_stmt><expr><name pos:line="104" pos:column="11">remove_sock_from_hash<pos:position pos:line="104" pos:column="32"/></name> <operator pos:line="104" pos:column="33">=<pos:position pos:line="104" pos:column="34"/></operator> <name pos:line="104" pos:column="35">FALSE<pos:position pos:line="104" pos:column="40"/></name></expr>;<pos:position pos:line="104" pos:column="41"/></expr_stmt>

          <comment type="block" pos:line="106" pos:column="11">/* Update the sockhash entry to instead point to the next in line
             for the send_pipe, or the first (in case this particular easy
             isn't already) */</comment>
          <if pos:line="109" pos:column="11">if<condition pos:line="109" pos:column="13">(<expr><name><name pos:line="109" pos:column="14">entry<pos:position pos:line="109" pos:column="19"/></name><operator pos:line="109" pos:column="19">-&gt;<pos:position pos:line="109" pos:column="24"/></operator><name pos:line="109" pos:column="21">easy<pos:position pos:line="109" pos:column="25"/></name></name> <operator pos:line="109" pos:column="26">==<pos:position pos:line="109" pos:column="28"/></operator> <name pos:line="109" pos:column="29">data<pos:position pos:line="109" pos:column="33"/></name></expr>)<pos:position pos:line="109" pos:column="34"/></condition><then pos:line="109" pos:column="34"> <block pos:line="109" pos:column="35">{
            <if pos:line="110" pos:column="13">if<condition pos:line="110" pos:column="15">(<expr><call><name pos:line="110" pos:column="16">Curl_sendpipe_head<pos:position pos:line="110" pos:column="34"/></name><argument_list pos:line="110" pos:column="34">(<argument><expr><name pos:line="110" pos:column="35">data<pos:position pos:line="110" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="41">easy_conn<pos:position pos:line="110" pos:column="50"/></name></expr></argument>)<pos:position pos:line="110" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="110" pos:column="52"/></condition><then pos:line="110" pos:column="52">
              <block type="pseudo"><expr_stmt><expr><name><name pos:line="111" pos:column="15">entry<pos:position pos:line="111" pos:column="20"/></name><operator pos:line="111" pos:column="20">-&gt;<pos:position pos:line="111" pos:column="25"/></operator><name pos:line="111" pos:column="22">easy<pos:position pos:line="111" pos:column="26"/></name></name> <operator pos:line="111" pos:column="27">=<pos:position pos:line="111" pos:column="28"/></operator> <name><name pos:line="111" pos:column="29">easy_conn<pos:position pos:line="111" pos:column="38"/></name><operator pos:line="111" pos:column="38">-&gt;<pos:position pos:line="111" pos:column="43"/></operator><name pos:line="111" pos:column="40">send_pipe<pos:position pos:line="111" pos:column="49"/></name><operator pos:line="111" pos:column="49">.<pos:position pos:line="111" pos:column="50"/></operator><name pos:line="111" pos:column="50">head<pos:position pos:line="111" pos:column="54"/></name><operator pos:line="111" pos:column="54">-&gt;<pos:position pos:line="111" pos:column="59"/></operator><name pos:line="111" pos:column="56">next<pos:position pos:line="111" pos:column="60"/></name><operator pos:line="111" pos:column="60">-&gt;<pos:position pos:line="111" pos:column="65"/></operator><name pos:line="111" pos:column="62">ptr<pos:position pos:line="111" pos:column="65"/></name></name></expr>;<pos:position pos:line="111" pos:column="66"/></expr_stmt></block></then>
            <else pos:line="112" pos:column="13">else
              <block type="pseudo"><expr_stmt><expr><name><name pos:line="113" pos:column="15">entry<pos:position pos:line="113" pos:column="20"/></name><operator pos:line="113" pos:column="20">-&gt;<pos:position pos:line="113" pos:column="25"/></operator><name pos:line="113" pos:column="22">easy<pos:position pos:line="113" pos:column="26"/></name></name> <operator pos:line="113" pos:column="27">=<pos:position pos:line="113" pos:column="28"/></operator> <name><name pos:line="113" pos:column="29">easy_conn<pos:position pos:line="113" pos:column="38"/></name><operator pos:line="113" pos:column="38">-&gt;<pos:position pos:line="113" pos:column="43"/></operator><name pos:line="113" pos:column="40">send_pipe<pos:position pos:line="113" pos:column="49"/></name><operator pos:line="113" pos:column="49">.<pos:position pos:line="113" pos:column="50"/></operator><name pos:line="113" pos:column="50">head<pos:position pos:line="113" pos:column="54"/></name><operator pos:line="113" pos:column="54">-&gt;<pos:position pos:line="113" pos:column="59"/></operator><name pos:line="113" pos:column="56">ptr<pos:position pos:line="113" pos:column="59"/></name></name></expr>;<pos:position pos:line="113" pos:column="60"/></expr_stmt></block></else></if>
          }<pos:position pos:line="114" pos:column="12"/></block></then></if>
        }<pos:position pos:line="115" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="116" pos:column="9">/* Don't worry about overwriting recv_pipe head with send_pipe_head,
           when action will be asked on the socket (see multi_socket()), the
           head of the correct pipe will be taken according to the
           action. */</comment>
      }<pos:position pos:line="120" pos:column="8"/></block></then></if>

      <if pos:line="122" pos:column="7">if<condition pos:line="122" pos:column="9">(<expr><name pos:line="122" pos:column="10">remove_sock_from_hash<pos:position pos:line="122" pos:column="31"/></name></expr>)<pos:position pos:line="122" pos:column="32"/></condition><then pos:line="122" pos:column="32"> <block pos:line="122" pos:column="33">{
        <comment type="block" pos:line="123" pos:column="9">/* in this case 'entry' is always non-NULL */</comment>
        <if pos:line="124" pos:column="9">if<condition pos:line="124" pos:column="11">(<expr><name><name pos:line="124" pos:column="12">multi<pos:position pos:line="124" pos:column="17"/></name><operator pos:line="124" pos:column="17">-&gt;<pos:position pos:line="124" pos:column="22"/></operator><name pos:line="124" pos:column="19">socket_cb<pos:position pos:line="124" pos:column="28"/></name></name></expr>)<pos:position pos:line="124" pos:column="29"/></condition><then pos:line="124" pos:column="29">
          <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="125" pos:column="11">multi<pos:position pos:line="125" pos:column="16"/></name><operator pos:line="125" pos:column="16">-&gt;<pos:position pos:line="125" pos:column="21"/></operator><name pos:line="125" pos:column="18">socket_cb<pos:position pos:line="125" pos:column="27"/></name></name><argument_list pos:line="125" pos:column="27">(<argument><expr><name pos:line="125" pos:column="28">data<pos:position pos:line="125" pos:column="32"/></name></expr></argument>,
                           <argument><expr><name pos:line="126" pos:column="28">s<pos:position pos:line="126" pos:column="29"/></name></expr></argument>,
                           <argument><expr><name pos:line="127" pos:column="28">CURL_POLL_REMOVE<pos:position pos:line="127" pos:column="44"/></name></expr></argument>,
                           <argument><expr><name><name pos:line="128" pos:column="28">multi<pos:position pos:line="128" pos:column="33"/></name><operator pos:line="128" pos:column="33">-&gt;<pos:position pos:line="128" pos:column="38"/></operator><name pos:line="128" pos:column="35">socket_userp<pos:position pos:line="128" pos:column="47"/></name></name></expr></argument>,
                           <argument><expr><name><name pos:line="129" pos:column="28">entry<pos:position pos:line="129" pos:column="33"/></name><operator pos:line="129" pos:column="33">-&gt;<pos:position pos:line="129" pos:column="38"/></operator><name pos:line="129" pos:column="35">socketp<pos:position pos:line="129" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="129" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="44"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="130" pos:column="9">sh_delentry<pos:position pos:line="130" pos:column="20"/></name><argument_list pos:line="130" pos:column="20">(<argument><expr><operator pos:line="130" pos:column="21">&amp;<pos:position pos:line="130" pos:column="26"/></operator><name><name pos:line="130" pos:column="22">multi<pos:position pos:line="130" pos:column="27"/></name><operator pos:line="130" pos:column="27">-&gt;<pos:position pos:line="130" pos:column="32"/></operator><name pos:line="130" pos:column="29">sockhash<pos:position pos:line="130" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="39">s<pos:position pos:line="130" pos:column="40"/></name></expr></argument>)<pos:position pos:line="130" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="42"/></expr_stmt>
      }<pos:position pos:line="131" pos:column="8"/></block></then></if>
    }<pos:position pos:line="132" pos:column="6"/></block></then></if> <comment type="block" pos:line="132" pos:column="7">/* if sockhash entry existed */</comment>
  }<pos:position pos:line="133" pos:column="4"/></block></for> <comment type="block" pos:line="133" pos:column="5">/* for loop over numsocks */</comment>

  <expr_stmt><expr><call><name pos:line="135" pos:column="3">memcpy<pos:position pos:line="135" pos:column="9"/></name><argument_list pos:line="135" pos:column="9">(<argument><expr><name><name pos:line="135" pos:column="10">data<pos:position pos:line="135" pos:column="14"/></name><operator pos:line="135" pos:column="14">-&gt;<pos:position pos:line="135" pos:column="19"/></operator><name pos:line="135" pos:column="16">sockets<pos:position pos:line="135" pos:column="23"/></name></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="25">socks<pos:position pos:line="135" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="32">num<pos:position pos:line="135" pos:column="35"/></name><operator pos:line="135" pos:column="35">*<pos:position pos:line="135" pos:column="36"/></operator><sizeof pos:line="135" pos:column="36">sizeof<argument_list pos:line="135" pos:column="42">(<argument><expr><name pos:line="135" pos:column="43">curl_socket_t<pos:position pos:line="135" pos:column="56"/></name></expr></argument>)<pos:position pos:line="135" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="135" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="136" pos:column="3">data<pos:position pos:line="136" pos:column="7"/></name><operator pos:line="136" pos:column="7">-&gt;<pos:position pos:line="136" pos:column="12"/></operator><name pos:line="136" pos:column="9">numsocks<pos:position pos:line="136" pos:column="17"/></name></name> <operator pos:line="136" pos:column="18">=<pos:position pos:line="136" pos:column="19"/></operator> <name pos:line="136" pos:column="20">num<pos:position pos:line="136" pos:column="23"/></name></expr>;<pos:position pos:line="136" pos:column="24"/></expr_stmt>
}<pos:position pos:line="137" pos:column="2"/></block></function></unit>
