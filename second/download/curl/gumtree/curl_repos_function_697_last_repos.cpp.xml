<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_697_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_servercmd<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">httprequest<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">req<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">FILE<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">stream<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">filename<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">error<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>

  <expr_stmt><expr><name pos:line="7" pos:column="3">filename<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <call><name pos:line="7" pos:column="14">test2file<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">(<argument><expr><name><name pos:line="7" pos:column="24">req<pos:position pos:line="7" pos:column="27"/></name><operator pos:line="7" pos:column="27">-&gt;<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="29">testno<pos:position pos:line="7" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><name pos:line="9" pos:column="3">stream<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">=<pos:position pos:line="9" pos:column="11"/></operator> <call><name pos:line="9" pos:column="12">fopen<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><name pos:line="9" pos:column="18">filename<pos:position pos:line="9" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="28">"rb"<pos:position pos:line="9" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="34"/></expr_stmt>
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><operator pos:line="10" pos:column="6">!<pos:position pos:line="10" pos:column="7"/></operator><name pos:line="10" pos:column="7">stream<pos:position pos:line="10" pos:column="13"/></name></expr>)<pos:position pos:line="10" pos:column="14"/></condition><then pos:line="10" pos:column="14"> <block pos:line="10" pos:column="15">{
    <expr_stmt><expr><name pos:line="11" pos:column="5">error<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <name pos:line="11" pos:column="13">errno<pos:position pos:line="11" pos:column="18"/></name></expr>;<pos:position pos:line="11" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">logmsg<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><literal type="string" pos:line="12" pos:column="12">"fopen() failed with error: %d %s"<pos:position pos:line="12" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="48">error<pos:position pos:line="12" pos:column="53"/></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="55">strerror<pos:position pos:line="12" pos:column="63"/></name><argument_list pos:line="12" pos:column="63">(<argument><expr><name pos:line="12" pos:column="64">error<pos:position pos:line="12" pos:column="69"/></name></expr></argument>)<pos:position pos:line="12" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="72"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">logmsg<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="string" pos:line="13" pos:column="12">"  [1] Error opening file: %s"<pos:position pos:line="13" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="44">filename<pos:position pos:line="13" pos:column="52"/></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">logmsg<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><literal type="string" pos:line="14" pos:column="12">"  Couldn't open test file %ld"<pos:position pos:line="14" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="45">req<pos:position pos:line="14" pos:column="48"/></name><operator pos:line="14" pos:column="48">-&gt;<pos:position pos:line="14" pos:column="53"/></operator><name pos:line="14" pos:column="50">testno<pos:position pos:line="14" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">req<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">-&gt;<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="10">open<pos:position pos:line="15" pos:column="14"/></name></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <name pos:line="15" pos:column="17">FALSE<pos:position pos:line="15" pos:column="22"/></name></expr>;<pos:position pos:line="15" pos:column="23"/></expr_stmt> <comment type="block" pos:line="15" pos:column="24">/* closes connection */</comment>
    <return pos:line="16" pos:column="5">return <expr><literal type="number" pos:line="16" pos:column="12">1<pos:position pos:line="16" pos:column="13"/></literal></expr>;<pos:position pos:line="16" pos:column="14"/></return> <comment type="block" pos:line="16" pos:column="15">/* done */</comment>
  }<pos:position pos:line="17" pos:column="4"/></block></then>
  <else pos:line="18" pos:column="3">else <block pos:line="18" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">char<pos:position pos:line="19" pos:column="9"/></name> <modifier pos:line="19" pos:column="10">*<pos:position pos:line="19" pos:column="11"/></modifier></type><name pos:line="19" pos:column="11">orgcmd<pos:position pos:line="19" pos:column="17"/></name> <init pos:line="19" pos:column="18">= <expr><name pos:line="19" pos:column="20">NULL<pos:position pos:line="19" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">char<pos:position pos:line="20" pos:column="9"/></name> <modifier pos:line="20" pos:column="10">*<pos:position pos:line="20" pos:column="11"/></modifier></type><name pos:line="20" pos:column="11">cmd<pos:position pos:line="20" pos:column="14"/></name> <init pos:line="20" pos:column="15">= <expr><name pos:line="20" pos:column="17">NULL<pos:position pos:line="20" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">size_t<pos:position pos:line="21" pos:column="11"/></name></type> <name pos:line="21" pos:column="12">cmdsize<pos:position pos:line="21" pos:column="19"/></name> <init pos:line="21" pos:column="20">= <expr><literal type="number" pos:line="21" pos:column="22">0<pos:position pos:line="21" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">int<pos:position pos:line="22" pos:column="8"/></name></type> <name pos:line="22" pos:column="9">num<pos:position pos:line="22" pos:column="12"/></name> <init pos:line="22" pos:column="13">= <expr><literal type="number" pos:line="22" pos:column="15">0<pos:position pos:line="22" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="17"/></decl_stmt>

    <comment type="block" pos:line="24" pos:column="5">/* get the custom server control "commands" */</comment>
    <expr_stmt><expr><name pos:line="25" pos:column="5">error<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <call><name pos:line="25" pos:column="13">getpart<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><operator pos:line="25" pos:column="21">&amp;<pos:position pos:line="25" pos:column="26"/></operator><name pos:line="25" pos:column="22">orgcmd<pos:position pos:line="25" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="30">&amp;<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="31">cmdsize<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="40">"reply"<pos:position pos:line="25" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="49">"servercmd"<pos:position pos:line="25" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="62">stream<pos:position pos:line="25" pos:column="68"/></name></expr></argument>)<pos:position pos:line="25" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="70"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">fclose<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><name pos:line="26" pos:column="12">stream<pos:position pos:line="26" pos:column="18"/></name></expr></argument>)<pos:position pos:line="26" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="20"/></expr_stmt>
    <if pos:line="27" pos:column="5">if<condition pos:line="27" pos:column="7">(<expr><name pos:line="27" pos:column="8">error<pos:position pos:line="27" pos:column="13"/></name></expr>)<pos:position pos:line="27" pos:column="14"/></condition><then pos:line="27" pos:column="14"> <block pos:line="27" pos:column="15">{
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">logmsg<pos:position pos:line="28" pos:column="13"/></name><argument_list pos:line="28" pos:column="13">(<argument><expr><literal type="string" pos:line="28" pos:column="14">"getpart() failed with error: %d"<pos:position pos:line="28" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="49">error<pos:position pos:line="28" pos:column="54"/></name></expr></argument>)<pos:position pos:line="28" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="56"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="29" pos:column="7">req<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">-&gt;<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="12">open<pos:position pos:line="29" pos:column="16"/></name></name> <operator pos:line="29" pos:column="17">=<pos:position pos:line="29" pos:column="18"/></operator> <name pos:line="29" pos:column="19">FALSE<pos:position pos:line="29" pos:column="24"/></name></expr>;<pos:position pos:line="29" pos:column="25"/></expr_stmt> <comment type="block" pos:line="29" pos:column="26">/* closes connection */</comment>
      <return pos:line="30" pos:column="7">return <expr><literal type="number" pos:line="30" pos:column="14">1<pos:position pos:line="30" pos:column="15"/></literal></expr>;<pos:position pos:line="30" pos:column="16"/></return> <comment type="block" pos:line="30" pos:column="17">/* done */</comment>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="33" pos:column="5">req<pos:position pos:line="33" pos:column="8"/></name><operator pos:line="33" pos:column="8">-&gt;<pos:position pos:line="33" pos:column="13"/></operator><name pos:line="33" pos:column="10">connmon<pos:position pos:line="33" pos:column="17"/></name></name> <operator pos:line="33" pos:column="18">=<pos:position pos:line="33" pos:column="19"/></operator> <name pos:line="33" pos:column="20">FALSE<pos:position pos:line="33" pos:column="25"/></name></expr>;<pos:position pos:line="33" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><name pos:line="35" pos:column="5">cmd<pos:position pos:line="35" pos:column="8"/></name> <operator pos:line="35" pos:column="9">=<pos:position pos:line="35" pos:column="10"/></operator> <name pos:line="35" pos:column="11">orgcmd<pos:position pos:line="35" pos:column="17"/></name></expr>;<pos:position pos:line="35" pos:column="18"/></expr_stmt>
    <while pos:line="36" pos:column="5">while<condition pos:line="36" pos:column="10">(<expr><name pos:line="36" pos:column="11">cmd<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">&amp;&amp;<pos:position pos:line="36" pos:column="25"/></operator> <name pos:line="36" pos:column="18">cmdsize<pos:position pos:line="36" pos:column="25"/></name></expr>)<pos:position pos:line="36" pos:column="26"/></condition> <block pos:line="36" pos:column="27">{
      <decl_stmt><decl><type><name pos:line="37" pos:column="7">char<pos:position pos:line="37" pos:column="11"/></name> <modifier pos:line="37" pos:column="12">*<pos:position pos:line="37" pos:column="13"/></modifier></type><name pos:line="37" pos:column="13">check<pos:position pos:line="37" pos:column="18"/></name></decl>;<pos:position pos:line="37" pos:column="19"/></decl_stmt>

      <if pos:line="39" pos:column="7">if<condition pos:line="39" pos:column="9">(<expr><operator pos:line="39" pos:column="10">!<pos:position pos:line="39" pos:column="11"/></operator><call><name pos:line="39" pos:column="11">strncmp<pos:position pos:line="39" pos:column="18"/></name><argument_list pos:line="39" pos:column="18">(<argument><expr><name pos:line="39" pos:column="19">CMD_AUTH_REQUIRED<pos:position pos:line="39" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="38">cmd<pos:position pos:line="39" pos:column="41"/></name></expr></argument>, <argument><expr><call><name pos:line="39" pos:column="43">strlen<pos:position pos:line="39" pos:column="49"/></name><argument_list pos:line="39" pos:column="49">(<argument><expr><name pos:line="39" pos:column="50">CMD_AUTH_REQUIRED<pos:position pos:line="39" pos:column="67"/></name></expr></argument>)<pos:position pos:line="39" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="70"/></condition><then pos:line="39" pos:column="70"> <block pos:line="39" pos:column="71">{
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">logmsg<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><literal type="string" pos:line="40" pos:column="16">"instructed to require authorization header"<pos:position pos:line="40" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="41" pos:column="9">req<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">-&gt;<pos:position pos:line="41" pos:column="17"/></operator><name pos:line="41" pos:column="14">auth_req<pos:position pos:line="41" pos:column="22"/></name></name> <operator pos:line="41" pos:column="23">=<pos:position pos:line="41" pos:column="24"/></operator> <name pos:line="41" pos:column="25">TRUE<pos:position pos:line="41" pos:column="29"/></name></expr>;<pos:position pos:line="41" pos:column="30"/></expr_stmt>
      }<pos:position pos:line="42" pos:column="8"/></block></then>
      <elseif pos:line="43" pos:column="7">else <if pos:line="43" pos:column="12">if<condition pos:line="43" pos:column="14">(<expr><operator pos:line="43" pos:column="15">!<pos:position pos:line="43" pos:column="16"/></operator><call><name pos:line="43" pos:column="16">strncmp<pos:position pos:line="43" pos:column="23"/></name><argument_list pos:line="43" pos:column="23">(<argument><expr><name pos:line="43" pos:column="24">CMD_IDLE<pos:position pos:line="43" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="34">cmd<pos:position pos:line="43" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="43" pos:column="39">strlen<pos:position pos:line="43" pos:column="45"/></name><argument_list pos:line="43" pos:column="45">(<argument><expr><name pos:line="43" pos:column="46">CMD_IDLE<pos:position pos:line="43" pos:column="54"/></name></expr></argument>)<pos:position pos:line="43" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="57"/></condition><then pos:line="43" pos:column="57"> <block pos:line="43" pos:column="58">{
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">logmsg<pos:position pos:line="44" pos:column="15"/></name><argument_list pos:line="44" pos:column="15">(<argument><expr><literal type="string" pos:line="44" pos:column="16">"instructed to idle"<pos:position pos:line="44" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="45" pos:column="9">req<pos:position pos:line="45" pos:column="12"/></name><operator pos:line="45" pos:column="12">-&gt;<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="14">rcmd<pos:position pos:line="45" pos:column="18"/></name></name> <operator pos:line="45" pos:column="19">=<pos:position pos:line="45" pos:column="20"/></operator> <name pos:line="45" pos:column="21">RCMD_IDLE<pos:position pos:line="45" pos:column="30"/></name></expr>;<pos:position pos:line="45" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="46" pos:column="9">req<pos:position pos:line="46" pos:column="12"/></name><operator pos:line="46" pos:column="12">-&gt;<pos:position pos:line="46" pos:column="17"/></operator><name pos:line="46" pos:column="14">open<pos:position pos:line="46" pos:column="18"/></name></name> <operator pos:line="46" pos:column="19">=<pos:position pos:line="46" pos:column="20"/></operator> <name pos:line="46" pos:column="21">TRUE<pos:position pos:line="46" pos:column="25"/></name></expr>;<pos:position pos:line="46" pos:column="26"/></expr_stmt>
      }<pos:position pos:line="47" pos:column="8"/></block></then></if></elseif>
      <elseif pos:line="48" pos:column="7">else <if pos:line="48" pos:column="12">if<condition pos:line="48" pos:column="14">(<expr><operator pos:line="48" pos:column="15">!<pos:position pos:line="48" pos:column="16"/></operator><call><name pos:line="48" pos:column="16">strncmp<pos:position pos:line="48" pos:column="23"/></name><argument_list pos:line="48" pos:column="23">(<argument><expr><name pos:line="48" pos:column="24">CMD_STREAM<pos:position pos:line="48" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="36">cmd<pos:position pos:line="48" pos:column="39"/></name></expr></argument>, <argument><expr><call><name pos:line="48" pos:column="41">strlen<pos:position pos:line="48" pos:column="47"/></name><argument_list pos:line="48" pos:column="47">(<argument><expr><name pos:line="48" pos:column="48">CMD_STREAM<pos:position pos:line="48" pos:column="58"/></name></expr></argument>)<pos:position pos:line="48" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="61"/></condition><then pos:line="48" pos:column="61"> <block pos:line="48" pos:column="62">{
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">logmsg<pos:position pos:line="49" pos:column="15"/></name><argument_list pos:line="49" pos:column="15">(<argument><expr><literal type="string" pos:line="49" pos:column="16">"instructed to stream"<pos:position pos:line="49" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="50" pos:column="9">req<pos:position pos:line="50" pos:column="12"/></name><operator pos:line="50" pos:column="12">-&gt;<pos:position pos:line="50" pos:column="17"/></operator><name pos:line="50" pos:column="14">rcmd<pos:position pos:line="50" pos:column="18"/></name></name> <operator pos:line="50" pos:column="19">=<pos:position pos:line="50" pos:column="20"/></operator> <name pos:line="50" pos:column="21">RCMD_STREAM<pos:position pos:line="50" pos:column="32"/></name></expr>;<pos:position pos:line="50" pos:column="33"/></expr_stmt>
      }<pos:position pos:line="51" pos:column="8"/></block></then></if></elseif>
      <elseif pos:line="52" pos:column="7">else <if pos:line="52" pos:column="12">if<condition pos:line="52" pos:column="14">(<expr><operator pos:line="52" pos:column="15">!<pos:position pos:line="52" pos:column="16"/></operator><call><name pos:line="52" pos:column="16">strncmp<pos:position pos:line="52" pos:column="23"/></name><argument_list pos:line="52" pos:column="23">(<argument><expr><name pos:line="52" pos:column="24">CMD_CONNECTIONMONITOR<pos:position pos:line="52" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="47">cmd<pos:position pos:line="52" pos:column="50"/></name></expr></argument>,
                       <argument><expr><call><name pos:line="53" pos:column="24">strlen<pos:position pos:line="53" pos:column="30"/></name><argument_list pos:line="53" pos:column="30">(<argument><expr><name pos:line="53" pos:column="31">CMD_CONNECTIONMONITOR<pos:position pos:line="53" pos:column="52"/></name></expr></argument>)<pos:position pos:line="53" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="53" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="55"/></condition><then pos:line="53" pos:column="55"> <block pos:line="53" pos:column="56">{
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">logmsg<pos:position pos:line="54" pos:column="15"/></name><argument_list pos:line="54" pos:column="15">(<argument><expr><literal type="string" pos:line="54" pos:column="16">"enabled connection monitoring"<pos:position pos:line="54" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="55" pos:column="9">req<pos:position pos:line="55" pos:column="12"/></name><operator pos:line="55" pos:column="12">-&gt;<pos:position pos:line="55" pos:column="17"/></operator><name pos:line="55" pos:column="14">connmon<pos:position pos:line="55" pos:column="21"/></name></name> <operator pos:line="55" pos:column="22">=<pos:position pos:line="55" pos:column="23"/></operator> <name pos:line="55" pos:column="24">TRUE<pos:position pos:line="55" pos:column="28"/></name></expr>;<pos:position pos:line="55" pos:column="29"/></expr_stmt>
      }<pos:position pos:line="56" pos:column="8"/></block></then></if></elseif>
      <elseif pos:line="57" pos:column="7">else <if pos:line="57" pos:column="12">if<condition pos:line="57" pos:column="14">(<expr><operator pos:line="57" pos:column="15">!<pos:position pos:line="57" pos:column="16"/></operator><call><name pos:line="57" pos:column="16">strncmp<pos:position pos:line="57" pos:column="23"/></name><argument_list pos:line="57" pos:column="23">(<argument><expr><name pos:line="57" pos:column="24">CMD_UPGRADE<pos:position pos:line="57" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="37">cmd<pos:position pos:line="57" pos:column="40"/></name></expr></argument>, <argument><expr><call><name pos:line="57" pos:column="42">strlen<pos:position pos:line="57" pos:column="48"/></name><argument_list pos:line="57" pos:column="48">(<argument><expr><name pos:line="57" pos:column="49">CMD_UPGRADE<pos:position pos:line="57" pos:column="60"/></name></expr></argument>)<pos:position pos:line="57" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="57" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="63"/></condition><then pos:line="57" pos:column="63"> <block pos:line="57" pos:column="64">{
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">logmsg<pos:position pos:line="58" pos:column="15"/></name><argument_list pos:line="58" pos:column="15">(<argument><expr><literal type="string" pos:line="58" pos:column="16">"enabled upgrade to http2"<pos:position pos:line="58" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="59" pos:column="9">req<pos:position pos:line="59" pos:column="12"/></name><operator pos:line="59" pos:column="12">-&gt;<pos:position pos:line="59" pos:column="17"/></operator><name pos:line="59" pos:column="14">upgrade<pos:position pos:line="59" pos:column="21"/></name></name> <operator pos:line="59" pos:column="22">=<pos:position pos:line="59" pos:column="23"/></operator> <name pos:line="59" pos:column="24">TRUE<pos:position pos:line="59" pos:column="28"/></name></expr>;<pos:position pos:line="59" pos:column="29"/></expr_stmt>
      }<pos:position pos:line="60" pos:column="8"/></block></then></if></elseif>
      <elseif pos:line="61" pos:column="7">else <if pos:line="61" pos:column="12">if<condition pos:line="61" pos:column="14">(<expr><literal type="number" pos:line="61" pos:column="15">1<pos:position pos:line="61" pos:column="16"/></literal> <operator pos:line="61" pos:column="17">==<pos:position pos:line="61" pos:column="19"/></operator> <call><name pos:line="61" pos:column="20">sscanf<pos:position pos:line="61" pos:column="26"/></name><argument_list pos:line="61" pos:column="26">(<argument><expr><name pos:line="61" pos:column="27">cmd<pos:position pos:line="61" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="32">"pipe: %d"<pos:position pos:line="61" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="61" pos:column="44">&amp;<pos:position pos:line="61" pos:column="49"/></operator><name pos:line="61" pos:column="45">num<pos:position pos:line="61" pos:column="48"/></name></expr></argument>)<pos:position pos:line="61" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="50"/></condition><then pos:line="61" pos:column="50"> <block pos:line="61" pos:column="51">{
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">logmsg<pos:position pos:line="62" pos:column="15"/></name><argument_list pos:line="62" pos:column="15">(<argument><expr><literal type="string" pos:line="62" pos:column="16">"instructed to allow a pipe size of %d"<pos:position pos:line="62" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="57">num<pos:position pos:line="62" pos:column="60"/></name></expr></argument>)<pos:position pos:line="62" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="62"/></expr_stmt>
        <if pos:line="63" pos:column="9">if<condition pos:line="63" pos:column="11">(<expr><name pos:line="63" pos:column="12">num<pos:position pos:line="63" pos:column="15"/></name> <operator pos:line="63" pos:column="16">&lt;<pos:position pos:line="63" pos:column="20"/></operator> <literal type="number" pos:line="63" pos:column="18">0<pos:position pos:line="63" pos:column="19"/></literal></expr>)<pos:position pos:line="63" pos:column="20"/></condition><then pos:line="63" pos:column="20">
          <block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="11">logmsg<pos:position pos:line="64" pos:column="17"/></name><argument_list pos:line="64" pos:column="17">(<argument><expr><literal type="string" pos:line="64" pos:column="18">"negative pipe size ignored"<pos:position pos:line="64" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="48"/></expr_stmt></block></then>
        <elseif pos:line="65" pos:column="9">else <if pos:line="65" pos:column="14">if<condition pos:line="65" pos:column="16">(<expr><name pos:line="65" pos:column="17">num<pos:position pos:line="65" pos:column="20"/></name> <operator pos:line="65" pos:column="21">&gt;<pos:position pos:line="65" pos:column="25"/></operator> <literal type="number" pos:line="65" pos:column="23">0<pos:position pos:line="65" pos:column="24"/></literal></expr>)<pos:position pos:line="65" pos:column="25"/></condition><then pos:line="65" pos:column="25">
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="66" pos:column="11">req<pos:position pos:line="66" pos:column="14"/></name><operator pos:line="66" pos:column="14">-&gt;<pos:position pos:line="66" pos:column="19"/></operator><name pos:line="66" pos:column="16">pipe<pos:position pos:line="66" pos:column="20"/></name></name> <operator pos:line="66" pos:column="21">=<pos:position pos:line="66" pos:column="22"/></operator> <name pos:line="66" pos:column="23">num<pos:position pos:line="66" pos:column="26"/></name><operator pos:line="66" pos:column="26">-<pos:position pos:line="66" pos:column="27"/></operator><literal type="number" pos:line="66" pos:column="27">1<pos:position pos:line="66" pos:column="28"/></literal></expr>;<pos:position pos:line="66" pos:column="29"/></expr_stmt></block></then></if></elseif></if> <comment type="block" pos:line="66" pos:column="30">/* decrease by one since we don't count the
                                first request in this number */</comment>
      }<pos:position pos:line="68" pos:column="8"/></block></then></if></elseif>
      <elseif pos:line="69" pos:column="7">else <if pos:line="69" pos:column="12">if<condition pos:line="69" pos:column="14">(<expr><literal type="number" pos:line="69" pos:column="15">1<pos:position pos:line="69" pos:column="16"/></literal> <operator pos:line="69" pos:column="17">==<pos:position pos:line="69" pos:column="19"/></operator> <call><name pos:line="69" pos:column="20">sscanf<pos:position pos:line="69" pos:column="26"/></name><argument_list pos:line="69" pos:column="26">(<argument><expr><name pos:line="69" pos:column="27">cmd<pos:position pos:line="69" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="32">"skip: %d"<pos:position pos:line="69" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="69" pos:column="44">&amp;<pos:position pos:line="69" pos:column="49"/></operator><name pos:line="69" pos:column="45">num<pos:position pos:line="69" pos:column="48"/></name></expr></argument>)<pos:position pos:line="69" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="50"/></condition><then pos:line="69" pos:column="50"> <block pos:line="69" pos:column="51">{
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">logmsg<pos:position pos:line="70" pos:column="15"/></name><argument_list pos:line="70" pos:column="15">(<argument><expr><literal type="string" pos:line="70" pos:column="16">"instructed to skip this number of bytes %d"<pos:position pos:line="70" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="62">num<pos:position pos:line="70" pos:column="65"/></name></expr></argument>)<pos:position pos:line="70" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="71" pos:column="9">req<pos:position pos:line="71" pos:column="12"/></name><operator pos:line="71" pos:column="12">-&gt;<pos:position pos:line="71" pos:column="17"/></operator><name pos:line="71" pos:column="14">skip<pos:position pos:line="71" pos:column="18"/></name></name> <operator pos:line="71" pos:column="19">=<pos:position pos:line="71" pos:column="20"/></operator> <name pos:line="71" pos:column="21">num<pos:position pos:line="71" pos:column="24"/></name></expr>;<pos:position pos:line="71" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="72" pos:column="8"/></block></then></if></elseif>
      <elseif pos:line="73" pos:column="7">else <if pos:line="73" pos:column="12">if<condition pos:line="73" pos:column="14">(<expr><literal type="number" pos:line="73" pos:column="15">1<pos:position pos:line="73" pos:column="16"/></literal> <operator pos:line="73" pos:column="17">==<pos:position pos:line="73" pos:column="19"/></operator> <call><name pos:line="73" pos:column="20">sscanf<pos:position pos:line="73" pos:column="26"/></name><argument_list pos:line="73" pos:column="26">(<argument><expr><name pos:line="73" pos:column="27">cmd<pos:position pos:line="73" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="32">"writedelay: %d"<pos:position pos:line="73" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="73" pos:column="50">&amp;<pos:position pos:line="73" pos:column="55"/></operator><name pos:line="73" pos:column="51">num<pos:position pos:line="73" pos:column="54"/></name></expr></argument>)<pos:position pos:line="73" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="56"/></condition><then pos:line="73" pos:column="56"> <block pos:line="73" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">logmsg<pos:position pos:line="74" pos:column="15"/></name><argument_list pos:line="74" pos:column="15">(<argument><expr><literal type="string" pos:line="74" pos:column="16">"instructed to delay %d secs between packets"<pos:position pos:line="74" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="63">num<pos:position pos:line="74" pos:column="66"/></name></expr></argument>)<pos:position pos:line="74" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="75" pos:column="9">req<pos:position pos:line="75" pos:column="12"/></name><operator pos:line="75" pos:column="12">-&gt;<pos:position pos:line="75" pos:column="17"/></operator><name pos:line="75" pos:column="14">writedelay<pos:position pos:line="75" pos:column="24"/></name></name> <operator pos:line="75" pos:column="25">=<pos:position pos:line="75" pos:column="26"/></operator> <name pos:line="75" pos:column="27">num<pos:position pos:line="75" pos:column="30"/></name></expr>;<pos:position pos:line="75" pos:column="31"/></expr_stmt>
      }<pos:position pos:line="76" pos:column="8"/></block></then></if></elseif>
      <else pos:line="77" pos:column="7">else <block pos:line="77" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="78" pos:column="9">logmsg<pos:position pos:line="78" pos:column="15"/></name><argument_list pos:line="78" pos:column="15">(<argument><expr><literal type="string" pos:line="78" pos:column="16">"Unknown &lt;servercmd&gt; instruction found: %s"<pos:position pos:line="78" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="61">cmd<pos:position pos:line="78" pos:column="64"/></name></expr></argument>)<pos:position pos:line="78" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="66"/></expr_stmt>
      }<pos:position pos:line="79" pos:column="8"/></block></else></if>
      <comment type="block" pos:line="80" pos:column="7">/* try to deal with CRLF or just LF */</comment>
      <expr_stmt><expr><name pos:line="81" pos:column="7">check<pos:position pos:line="81" pos:column="12"/></name> <operator pos:line="81" pos:column="13">=<pos:position pos:line="81" pos:column="14"/></operator> <call><name pos:line="81" pos:column="15">strchr<pos:position pos:line="81" pos:column="21"/></name><argument_list pos:line="81" pos:column="21">(<argument><expr><name pos:line="81" pos:column="22">cmd<pos:position pos:line="81" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="81" pos:column="27">'\r'<pos:position pos:line="81" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="33"/></expr_stmt>
      <if pos:line="82" pos:column="7">if<condition pos:line="82" pos:column="9">(<expr><operator pos:line="82" pos:column="10">!<pos:position pos:line="82" pos:column="11"/></operator><name pos:line="82" pos:column="11">check<pos:position pos:line="82" pos:column="16"/></name></expr>)<pos:position pos:line="82" pos:column="17"/></condition><then pos:line="82" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><name pos:line="83" pos:column="9">check<pos:position pos:line="83" pos:column="14"/></name> <operator pos:line="83" pos:column="15">=<pos:position pos:line="83" pos:column="16"/></operator> <call><name pos:line="83" pos:column="17">strchr<pos:position pos:line="83" pos:column="23"/></name><argument_list pos:line="83" pos:column="23">(<argument><expr><name pos:line="83" pos:column="24">cmd<pos:position pos:line="83" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="83" pos:column="29">'\n'<pos:position pos:line="83" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="35"/></expr_stmt></block></then></if>

      <if pos:line="85" pos:column="7">if<condition pos:line="85" pos:column="9">(<expr><name pos:line="85" pos:column="10">check<pos:position pos:line="85" pos:column="15"/></name></expr>)<pos:position pos:line="85" pos:column="16"/></condition><then pos:line="85" pos:column="16"> <block pos:line="85" pos:column="17">{
        <comment type="block" pos:line="86" pos:column="9">/* get to the letter following the newline */</comment>
        <while pos:line="87" pos:column="9">while<condition pos:line="87" pos:column="14">(<expr><operator pos:line="87" pos:column="15">(<pos:position pos:line="87" pos:column="16"/></operator><operator pos:line="87" pos:column="16">*<pos:position pos:line="87" pos:column="17"/></operator><name pos:line="87" pos:column="17">check<pos:position pos:line="87" pos:column="22"/></name> <operator pos:line="87" pos:column="23">==<pos:position pos:line="87" pos:column="25"/></operator> <literal type="char" pos:line="87" pos:column="26">'\r'<pos:position pos:line="87" pos:column="30"/></literal><operator pos:line="87" pos:column="30">)<pos:position pos:line="87" pos:column="31"/></operator> <operator pos:line="87" pos:column="32">||<pos:position pos:line="87" pos:column="34"/></operator> <operator pos:line="87" pos:column="35">(<pos:position pos:line="87" pos:column="36"/></operator><operator pos:line="87" pos:column="36">*<pos:position pos:line="87" pos:column="37"/></operator><name pos:line="87" pos:column="37">check<pos:position pos:line="87" pos:column="42"/></name> <operator pos:line="87" pos:column="43">==<pos:position pos:line="87" pos:column="45"/></operator> <literal type="char" pos:line="87" pos:column="46">'\n'<pos:position pos:line="87" pos:column="50"/></literal><operator pos:line="87" pos:column="50">)<pos:position pos:line="87" pos:column="51"/></operator></expr>)<pos:position pos:line="87" pos:column="52"/></condition>
          <block type="pseudo"><expr_stmt><expr><name pos:line="88" pos:column="11">check<pos:position pos:line="88" pos:column="16"/></name><operator pos:line="88" pos:column="16">++<pos:position pos:line="88" pos:column="18"/></operator></expr>;<pos:position pos:line="88" pos:column="19"/></expr_stmt></block></while>

        <if pos:line="90" pos:column="9">if<condition pos:line="90" pos:column="11">(<expr><operator pos:line="90" pos:column="12">!<pos:position pos:line="90" pos:column="13"/></operator><operator pos:line="90" pos:column="13">*<pos:position pos:line="90" pos:column="14"/></operator><name pos:line="90" pos:column="14">check<pos:position pos:line="90" pos:column="19"/></name></expr>)<pos:position pos:line="90" pos:column="20"/></condition><then pos:line="90" pos:column="20">
          <comment type="block" pos:line="91" pos:column="11">/* if we reached a zero, get out */</comment>
          <block type="pseudo"><break pos:line="92" pos:column="11">break;<pos:position pos:line="92" pos:column="17"/></break></block></then></if>
        <expr_stmt><expr><name pos:line="93" pos:column="9">cmd<pos:position pos:line="93" pos:column="12"/></name> <operator pos:line="93" pos:column="13">=<pos:position pos:line="93" pos:column="14"/></operator> <name pos:line="93" pos:column="15">check<pos:position pos:line="93" pos:column="20"/></name></expr>;<pos:position pos:line="93" pos:column="21"/></expr_stmt>
      }<pos:position pos:line="94" pos:column="8"/></block></then>
      <else pos:line="95" pos:column="7">else
        <block type="pseudo"><break pos:line="96" pos:column="9">break;<pos:position pos:line="96" pos:column="15"/></break></block></else></if>
    }<pos:position pos:line="97" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="98" pos:column="5">free<pos:position pos:line="98" pos:column="9"/></name><argument_list pos:line="98" pos:column="9">(<argument><expr><name pos:line="98" pos:column="10">orgcmd<pos:position pos:line="98" pos:column="16"/></name></expr></argument>)<pos:position pos:line="98" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="99" pos:column="4"/></block></else></if>

  <return pos:line="101" pos:column="3">return <expr><literal type="number" pos:line="101" pos:column="10">0<pos:position pos:line="101" pos:column="11"/></literal></expr>;<pos:position pos:line="101" pos:column="12"/></return> <comment type="block" pos:line="101" pos:column="13">/* OK! */</comment>
}<pos:position pos:line="102" pos:column="2"/></block></function></unit>
