<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2676_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">Curl_polarsslthreadlock_thread_setup<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name pos:line="1" pos:column="42">void<pos:position pos:line="1" pos:column="46"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="47"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">i<pos:position pos:line="3" pos:column="8"/></name></decl>;<pos:position pos:line="3" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">ret<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>

  <expr_stmt><expr><name pos:line="6" pos:column="3">mutex_buf<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">=<pos:position pos:line="6" pos:column="14"/></operator> <call><name pos:line="6" pos:column="15">calloc<pos:position pos:line="6" pos:column="21"/></name><argument_list pos:line="6" pos:column="21">(<argument><expr><name pos:line="6" pos:column="22">NUMT<pos:position pos:line="6" pos:column="26"/></name> <operator pos:line="6" pos:column="27">*<pos:position pos:line="6" pos:column="28"/></operator> <sizeof pos:line="6" pos:column="29">sizeof<argument_list pos:line="6" pos:column="35">(<argument><expr><name pos:line="6" pos:column="36">POLARSSL_MUTEX_T<pos:position pos:line="6" pos:column="52"/></name></expr></argument>)<pos:position pos:line="6" pos:column="53"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="55">1<pos:position pos:line="6" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="58"/></expr_stmt>
  <if pos:line="7" pos:column="3">if<condition pos:line="7" pos:column="5">(<expr><operator pos:line="7" pos:column="6">!<pos:position pos:line="7" pos:column="7"/></operator><name pos:line="7" pos:column="7">mutex_buf<pos:position pos:line="7" pos:column="16"/></name></expr>)<pos:position pos:line="7" pos:column="17"/></condition><then pos:line="7" pos:column="17">
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><literal type="number" pos:line="8" pos:column="12">0<pos:position pos:line="8" pos:column="13"/></literal></expr>;<pos:position pos:line="8" pos:column="14"/></return></block></then></if>     <comment type="block" pos:line="8" pos:column="19">/* error, no number of threads defined */</comment>

<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">HAVE_PTHREAD_H<pos:position pos:line="10" pos:column="22"/></name></cpp:ifdef>
  <for pos:line="11" pos:column="3">for<control pos:line="11" pos:column="6">(<init><expr><name pos:line="11" pos:column="7">i<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">=<pos:position pos:line="11" pos:column="10"/></operator> <literal type="number" pos:line="11" pos:column="11">0<pos:position pos:line="11" pos:column="12"/></literal></expr>;<pos:position pos:line="11" pos:column="13"/></init>  <condition><expr><name pos:line="11" pos:column="15">i<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">&lt;<pos:position pos:line="11" pos:column="21"/></operator> <name pos:line="11" pos:column="19">NUMT<pos:position pos:line="11" pos:column="23"/></name></expr>;<pos:position pos:line="11" pos:column="24"/></condition>  <incr><expr><name pos:line="11" pos:column="26">i<pos:position pos:line="11" pos:column="27"/></name><operator pos:line="11" pos:column="27">++<pos:position pos:line="11" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="11" pos:column="30"/></control> <block pos:line="11" pos:column="31">{
    <expr_stmt><expr><name pos:line="12" pos:column="5">ret<pos:position pos:line="12" pos:column="8"/></name> <operator pos:line="12" pos:column="9">=<pos:position pos:line="12" pos:column="10"/></operator> <call><name pos:line="12" pos:column="11">pthread_mutex_init<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><operator pos:line="12" pos:column="30">&amp;<pos:position pos:line="12" pos:column="35"/></operator><name><name pos:line="12" pos:column="31">mutex_buf<pos:position pos:line="12" pos:column="40"/></name><index pos:line="12" pos:column="40">[<expr><name pos:line="12" pos:column="41">i<pos:position pos:line="12" pos:column="42"/></name></expr>]<pos:position pos:line="12" pos:column="43"/></index></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="45">NULL<pos:position pos:line="12" pos:column="49"/></name></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="51"/></expr_stmt>
    <if pos:line="13" pos:column="5">if<condition pos:line="13" pos:column="7">(<expr><name pos:line="13" pos:column="8">ret<pos:position pos:line="13" pos:column="11"/></name></expr>)<pos:position pos:line="13" pos:column="12"/></condition><then pos:line="13" pos:column="12">
      <block type="pseudo"><return pos:line="14" pos:column="7">return <expr><literal type="number" pos:line="14" pos:column="14">0<pos:position pos:line="14" pos:column="15"/></literal></expr>;<pos:position pos:line="14" pos:column="16"/></return></block></then></if> <comment type="block" pos:line="14" pos:column="17">/* pthread_mutex_init failed */</comment>
  }<pos:position pos:line="15" pos:column="4"/></block></for>
<cpp:elif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">elif<pos:position pos:line="16" pos:column="6"/></cpp:directive> <expr><call><name pos:line="16" pos:column="7">defined<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">(<argument><expr><name pos:line="16" pos:column="15">HAVE_PROCESS_H<pos:position pos:line="16" pos:column="29"/></name></expr></argument>)<pos:position pos:line="16" pos:column="30"/></argument_list></call></expr></cpp:elif>
  <for pos:line="17" pos:column="3">for<control pos:line="17" pos:column="6">(<init><expr><name pos:line="17" pos:column="7">i<pos:position pos:line="17" pos:column="8"/></name> <operator pos:line="17" pos:column="9">=<pos:position pos:line="17" pos:column="10"/></operator> <literal type="number" pos:line="17" pos:column="11">0<pos:position pos:line="17" pos:column="12"/></literal></expr>;<pos:position pos:line="17" pos:column="13"/></init>  <condition><expr><name pos:line="17" pos:column="15">i<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">&lt;<pos:position pos:line="17" pos:column="21"/></operator> <name pos:line="17" pos:column="19">NUMT<pos:position pos:line="17" pos:column="23"/></name></expr>;<pos:position pos:line="17" pos:column="24"/></condition>  <incr><expr><name pos:line="17" pos:column="26">i<pos:position pos:line="17" pos:column="27"/></name><operator pos:line="17" pos:column="27">++<pos:position pos:line="17" pos:column="29"/></operator></expr></incr>)<pos:position pos:line="17" pos:column="30"/></control> <block pos:line="17" pos:column="31">{
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">mutex_buf<pos:position pos:line="18" pos:column="14"/></name><index pos:line="18" pos:column="14">[<expr><name pos:line="18" pos:column="15">i<pos:position pos:line="18" pos:column="16"/></name></expr>]<pos:position pos:line="18" pos:column="17"/></index></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <call><name pos:line="18" pos:column="20">CreateMutex<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><literal type="number" pos:line="18" pos:column="32">0<pos:position pos:line="18" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="35">FALSE<pos:position pos:line="18" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="42">0<pos:position pos:line="18" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="45"/></expr_stmt>
    <if pos:line="19" pos:column="5">if<condition pos:line="19" pos:column="7">(<expr><name><name pos:line="19" pos:column="8">mutex_buf<pos:position pos:line="19" pos:column="17"/></name><index pos:line="19" pos:column="17">[<expr><name pos:line="19" pos:column="18">i<pos:position pos:line="19" pos:column="19"/></name></expr>]<pos:position pos:line="19" pos:column="20"/></index></name> <operator pos:line="19" pos:column="21">==<pos:position pos:line="19" pos:column="23"/></operator> <literal type="number" pos:line="19" pos:column="24">0<pos:position pos:line="19" pos:column="25"/></literal></expr>)<pos:position pos:line="19" pos:column="26"/></condition><then pos:line="19" pos:column="26">
      <block type="pseudo"><return pos:line="20" pos:column="7">return <expr><literal type="number" pos:line="20" pos:column="14">0<pos:position pos:line="20" pos:column="15"/></literal></expr>;<pos:position pos:line="20" pos:column="16"/></return></block></then></if>  <comment type="block" pos:line="20" pos:column="18">/* CreateMutex failed */</comment>
  }<pos:position pos:line="21" pos:column="4"/></block></for>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="22" pos:column="8">/* HAVE_PTHREAD_H */</comment>

  <return pos:line="24" pos:column="3">return <expr><literal type="number" pos:line="24" pos:column="10">1<pos:position pos:line="24" pos:column="11"/></literal></expr>;<pos:position pos:line="24" pos:column="12"/></return> <comment type="block" pos:line="24" pos:column="13">/* OK */</comment>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
