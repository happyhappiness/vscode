<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_726_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">validate_access<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">testcase<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">test<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>,
                           <parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">char<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">filename<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">int<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">mode<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">ptr<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">long<pos:position pos:line="5" pos:column="7"/></name></type> <name pos:line="5" pos:column="8">testno<pos:position pos:line="5" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="16">partno<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">error<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">partbuf<pos:position pos:line="7" pos:column="15"/></name><index pos:line="7" pos:column="15">[<expr><literal type="number" pos:line="7" pos:column="16">80<pos:position pos:line="7" pos:column="18"/></literal></expr>]<pos:position pos:line="7" pos:column="19"/></index></name><init pos:line="7" pos:column="19">=<expr><literal type="string" pos:line="7" pos:column="20">"data"<pos:position pos:line="7" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="9" pos:column="3">logmsg<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><literal type="string" pos:line="9" pos:column="10">"trying to get file: %s mode %x"<pos:position pos:line="9" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="44">filename<pos:position pos:line="9" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="54">mode<pos:position pos:line="9" pos:column="58"/></name></expr></argument>)<pos:position pos:line="9" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="60"/></expr_stmt>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><operator pos:line="11" pos:column="6">!<pos:position pos:line="11" pos:column="7"/></operator><call><name pos:line="11" pos:column="7">strncmp<pos:position pos:line="11" pos:column="14"/></name><argument_list pos:line="11" pos:column="14">(<argument><expr><literal type="string" pos:line="11" pos:column="15">"verifiedserver"<pos:position pos:line="11" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="33">filename<pos:position pos:line="11" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="43">14<pos:position pos:line="11" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="47"/></condition><then pos:line="11" pos:column="47"> <block pos:line="11" pos:column="48">{
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">char<pos:position pos:line="12" pos:column="9"/></name></type> <name><name pos:line="12" pos:column="10">weare<pos:position pos:line="12" pos:column="15"/></name><index pos:line="12" pos:column="15">[<expr><literal type="number" pos:line="12" pos:column="16">128<pos:position pos:line="12" pos:column="19"/></literal></expr>]<pos:position pos:line="12" pos:column="20"/></index></name></decl>;<pos:position pos:line="12" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">size_t<pos:position pos:line="13" pos:column="11"/></name></type> <name pos:line="13" pos:column="12">count<pos:position pos:line="13" pos:column="17"/></name> <init pos:line="13" pos:column="18">= <expr><call><name pos:line="13" pos:column="20">snprintf<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><name pos:line="13" pos:column="29">weare<pos:position pos:line="13" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="36">sizeof<argument_list pos:line="13" pos:column="42">(<argument><expr><name pos:line="13" pos:column="43">weare<pos:position pos:line="13" pos:column="48"/></name></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></sizeof></expr></argument>,
                            <argument><expr><literal type="string" pos:line="14" pos:column="29">"WE ROOLZ: %ld\r\n"<pos:position pos:line="14" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="14" pos:column="50">(<pos:position pos:line="14" pos:column="51"/></operator><name pos:line="14" pos:column="51">long<pos:position pos:line="14" pos:column="55"/></name><operator pos:line="14" pos:column="55">)<pos:position pos:line="14" pos:column="56"/></operator><call><name pos:line="14" pos:column="56">getpid<pos:position pos:line="14" pos:column="62"/></name><argument_list pos:line="14" pos:column="62">()<pos:position pos:line="14" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="66"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">logmsg<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><literal type="string" pos:line="16" pos:column="12">"Are-we-friendly question received"<pos:position pos:line="16" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">test<pos:position pos:line="17" pos:column="9"/></name><operator pos:line="17" pos:column="9">-&gt;<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="11">buffer<pos:position pos:line="17" pos:column="17"/></name></name> <operator pos:line="17" pos:column="18">=<pos:position pos:line="17" pos:column="19"/></operator> <call><name pos:line="17" pos:column="20">strdup<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">weare<pos:position pos:line="17" pos:column="32"/></name></expr></argument>)<pos:position pos:line="17" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">test<pos:position pos:line="18" pos:column="9"/></name><operator pos:line="18" pos:column="9">-&gt;<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="11">rptr<pos:position pos:line="18" pos:column="15"/></name></name> <operator pos:line="18" pos:column="16">=<pos:position pos:line="18" pos:column="17"/></operator> <name><name pos:line="18" pos:column="18">test<pos:position pos:line="18" pos:column="22"/></name><operator pos:line="18" pos:column="22">-&gt;<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="24">buffer<pos:position pos:line="18" pos:column="30"/></name></name></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt> <comment type="block" pos:line="18" pos:column="32">/* set read pointer */</comment>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">test<pos:position pos:line="19" pos:column="9"/></name><operator pos:line="19" pos:column="9">-&gt;<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="11">bufsize<pos:position pos:line="19" pos:column="18"/></name></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <name pos:line="19" pos:column="21">count<pos:position pos:line="19" pos:column="26"/></name></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>    <comment type="block" pos:line="19" pos:column="31">/* set total count */</comment>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">test<pos:position pos:line="20" pos:column="9"/></name><operator pos:line="20" pos:column="9">-&gt;<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="11">rcount<pos:position pos:line="20" pos:column="17"/></name></name> <operator pos:line="20" pos:column="18">=<pos:position pos:line="20" pos:column="19"/></operator> <name pos:line="20" pos:column="20">count<pos:position pos:line="20" pos:column="25"/></name></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>     <comment type="block" pos:line="20" pos:column="31">/* set data left to read */</comment>
    <return pos:line="21" pos:column="5">return <expr><literal type="number" pos:line="21" pos:column="12">0<pos:position pos:line="21" pos:column="13"/></literal></expr>;<pos:position pos:line="21" pos:column="14"/></return> <comment type="block" pos:line="21" pos:column="15">/* fine */</comment>
  }<pos:position pos:line="22" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="24" pos:column="3">/* find the last slash */</comment>
  <expr_stmt><expr><name pos:line="25" pos:column="3">ptr<pos:position pos:line="25" pos:column="6"/></name> <operator pos:line="25" pos:column="7">=<pos:position pos:line="25" pos:column="8"/></operator> <call><name pos:line="25" pos:column="9">strrchr<pos:position pos:line="25" pos:column="16"/></name><argument_list pos:line="25" pos:column="16">(<argument><expr><name pos:line="25" pos:column="17">filename<pos:position pos:line="25" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="25" pos:column="27">'/'<pos:position pos:line="25" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="32"/></expr_stmt>

  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">(<expr><name pos:line="27" pos:column="6">ptr<pos:position pos:line="27" pos:column="9"/></name></expr>)<pos:position pos:line="27" pos:column="10"/></condition><then pos:line="27" pos:column="10"> <block pos:line="27" pos:column="11">{
    <decl_stmt><decl><type><name pos:line="28" pos:column="5">char<pos:position pos:line="28" pos:column="9"/></name> <modifier pos:line="28" pos:column="10">*<pos:position pos:line="28" pos:column="11"/></modifier></type><name pos:line="28" pos:column="11">file<pos:position pos:line="28" pos:column="15"/></name></decl>;<pos:position pos:line="28" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="30" pos:column="5">ptr<pos:position pos:line="30" pos:column="8"/></name><operator pos:line="30" pos:column="8">++<pos:position pos:line="30" pos:column="10"/></operator></expr>;<pos:position pos:line="30" pos:column="11"/></expr_stmt> <comment type="block" pos:line="30" pos:column="12">/* skip the slash */</comment>

    <comment type="block" pos:line="32" pos:column="5">/* skip all non-numericals following the slash */</comment>
    <while pos:line="33" pos:column="5">while<condition pos:line="33" pos:column="10">(<expr><operator pos:line="33" pos:column="11">*<pos:position pos:line="33" pos:column="12"/></operator><name pos:line="33" pos:column="12">ptr<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">&amp;&amp;<pos:position pos:line="33" pos:column="26"/></operator> <operator pos:line="33" pos:column="19">!<pos:position pos:line="33" pos:column="20"/></operator><call><name pos:line="33" pos:column="20">ISDIGIT<pos:position pos:line="33" pos:column="27"/></name><argument_list pos:line="33" pos:column="27">(<argument><expr><operator pos:line="33" pos:column="28">*<pos:position pos:line="33" pos:column="29"/></operator><name pos:line="33" pos:column="29">ptr<pos:position pos:line="33" pos:column="32"/></name></expr></argument>)<pos:position pos:line="33" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="34"/></condition>
      <block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="7">ptr<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">++<pos:position pos:line="34" pos:column="12"/></operator></expr>;<pos:position pos:line="34" pos:column="13"/></expr_stmt></block></while>

    <comment type="block" pos:line="36" pos:column="5">/* get the number */</comment>
    <expr_stmt><expr><name pos:line="37" pos:column="5">testno<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">=<pos:position pos:line="37" pos:column="13"/></operator> <call><name pos:line="37" pos:column="14">strtol<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><name pos:line="37" pos:column="21">ptr<pos:position pos:line="37" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="26">&amp;<pos:position pos:line="37" pos:column="31"/></operator><name pos:line="37" pos:column="27">ptr<pos:position pos:line="37" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="32">10<pos:position pos:line="37" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="36"/></expr_stmt>

    <if pos:line="39" pos:column="5">if<condition pos:line="39" pos:column="7">(<expr><name pos:line="39" pos:column="8">testno<pos:position pos:line="39" pos:column="14"/></name> <operator pos:line="39" pos:column="15">&gt;<pos:position pos:line="39" pos:column="19"/></operator> <literal type="number" pos:line="39" pos:column="17">10000<pos:position pos:line="39" pos:column="22"/></literal></expr>)<pos:position pos:line="39" pos:column="23"/></condition><then pos:line="39" pos:column="23"> <block pos:line="39" pos:column="24">{
      <expr_stmt><expr><name pos:line="40" pos:column="7">partno<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <name pos:line="40" pos:column="16">testno<pos:position pos:line="40" pos:column="22"/></name> <operator pos:line="40" pos:column="23">%<pos:position pos:line="40" pos:column="24"/></operator> <literal type="number" pos:line="40" pos:column="25">10000<pos:position pos:line="40" pos:column="30"/></literal></expr>;<pos:position pos:line="40" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><name pos:line="41" pos:column="7">testno<pos:position pos:line="41" pos:column="13"/></name> <operator pos:line="41" pos:column="14">/=<pos:position pos:line="41" pos:column="16"/></operator> <literal type="number" pos:line="41" pos:column="17">10000<pos:position pos:line="41" pos:column="22"/></literal></expr>;<pos:position pos:line="41" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then>
    <else pos:line="43" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="7">partno<pos:position pos:line="44" pos:column="13"/></name> <operator pos:line="44" pos:column="14">=<pos:position pos:line="44" pos:column="15"/></operator> <literal type="number" pos:line="44" pos:column="16">0<pos:position pos:line="44" pos:column="17"/></literal></expr>;<pos:position pos:line="44" pos:column="18"/></expr_stmt></block></else></if>


    <expr_stmt><expr><call><name pos:line="47" pos:column="5">logmsg<pos:position pos:line="47" pos:column="11"/></name><argument_list pos:line="47" pos:column="11">(<argument><expr><literal type="string" pos:line="47" pos:column="12">"requested test number %ld part %ld"<pos:position pos:line="47" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="50">testno<pos:position pos:line="47" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="58">partno<pos:position pos:line="47" pos:column="64"/></name></expr></argument>)<pos:position pos:line="47" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="66"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="49" pos:column="5">test<pos:position pos:line="49" pos:column="9"/></name><operator pos:line="49" pos:column="9">-&gt;<pos:position pos:line="49" pos:column="14"/></operator><name pos:line="49" pos:column="11">testno<pos:position pos:line="49" pos:column="17"/></name></name> <operator pos:line="49" pos:column="18">=<pos:position pos:line="49" pos:column="19"/></operator> <name pos:line="49" pos:column="20">testno<pos:position pos:line="49" pos:column="26"/></name></expr>;<pos:position pos:line="49" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><operator pos:line="51" pos:column="5">(<pos:position pos:line="51" pos:column="6"/></operator><name pos:line="51" pos:column="6">void<pos:position pos:line="51" pos:column="10"/></name><operator pos:line="51" pos:column="10">)<pos:position pos:line="51" pos:column="11"/></operator><call><name pos:line="51" pos:column="11">parse_servercmd<pos:position pos:line="51" pos:column="26"/></name><argument_list pos:line="51" pos:column="26">(<argument><expr><name pos:line="51" pos:column="27">test<pos:position pos:line="51" pos:column="31"/></name></expr></argument>)<pos:position pos:line="51" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><name pos:line="53" pos:column="5">file<pos:position pos:line="53" pos:column="9"/></name> <operator pos:line="53" pos:column="10">=<pos:position pos:line="53" pos:column="11"/></operator> <call><name pos:line="53" pos:column="12">test2file<pos:position pos:line="53" pos:column="21"/></name><argument_list pos:line="53" pos:column="21">(<argument><expr><name pos:line="53" pos:column="22">testno<pos:position pos:line="53" pos:column="28"/></name></expr></argument>)<pos:position pos:line="53" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="30"/></expr_stmt>

    <if pos:line="55" pos:column="5">if<condition pos:line="55" pos:column="7">(<expr><literal type="number" pos:line="55" pos:column="8">0<pos:position pos:line="55" pos:column="9"/></literal> <operator pos:line="55" pos:column="10">!=<pos:position pos:line="55" pos:column="12"/></operator> <name pos:line="55" pos:column="13">partno<pos:position pos:line="55" pos:column="19"/></name></expr>)<pos:position pos:line="55" pos:column="20"/></condition><then pos:line="55" pos:column="20">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="7">snprintf<pos:position pos:line="56" pos:column="15"/></name><argument_list pos:line="56" pos:column="15">(<argument><expr><name pos:line="56" pos:column="16">partbuf<pos:position pos:line="56" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="25">sizeof<argument_list pos:line="56" pos:column="31">(<argument><expr><name pos:line="56" pos:column="32">partbuf<pos:position pos:line="56" pos:column="39"/></name></expr></argument>)<pos:position pos:line="56" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="42">"data%ld"<pos:position pos:line="56" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="53">partno<pos:position pos:line="56" pos:column="59"/></name></expr></argument>)<pos:position pos:line="56" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="61"/></expr_stmt></block></then></if>

    <if pos:line="58" pos:column="5">if<condition pos:line="58" pos:column="7">(<expr><name pos:line="58" pos:column="8">file<pos:position pos:line="58" pos:column="12"/></name></expr>)<pos:position pos:line="58" pos:column="13"/></condition><then pos:line="58" pos:column="13"> <block pos:line="58" pos:column="14">{
      <decl_stmt><decl><type><name pos:line="59" pos:column="7">FILE<pos:position pos:line="59" pos:column="11"/></name> <modifier pos:line="59" pos:column="12">*<pos:position pos:line="59" pos:column="13"/></modifier></type><name pos:line="59" pos:column="13">stream<pos:position pos:line="59" pos:column="19"/></name> <init pos:line="59" pos:column="20">= <expr><call><name pos:line="59" pos:column="22">fopen<pos:position pos:line="59" pos:column="27"/></name><argument_list pos:line="59" pos:column="27">(<argument><expr><name pos:line="59" pos:column="28">file<pos:position pos:line="59" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="34">"rb"<pos:position pos:line="59" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="59" pos:column="40"/></decl_stmt>
      <if pos:line="60" pos:column="7">if<condition pos:line="60" pos:column="9">(<expr><operator pos:line="60" pos:column="10">!<pos:position pos:line="60" pos:column="11"/></operator><name pos:line="60" pos:column="11">stream<pos:position pos:line="60" pos:column="17"/></name></expr>)<pos:position pos:line="60" pos:column="18"/></condition><then pos:line="60" pos:column="18"> <block pos:line="60" pos:column="19">{
        <expr_stmt><expr><name pos:line="61" pos:column="9">error<pos:position pos:line="61" pos:column="14"/></name> <operator pos:line="61" pos:column="15">=<pos:position pos:line="61" pos:column="16"/></operator> <name pos:line="61" pos:column="17">errno<pos:position pos:line="61" pos:column="22"/></name></expr>;<pos:position pos:line="61" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">logmsg<pos:position pos:line="62" pos:column="15"/></name><argument_list pos:line="62" pos:column="15">(<argument><expr><literal type="string" pos:line="62" pos:column="16">"fopen() failed with error: %d %s"<pos:position pos:line="62" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="52">error<pos:position pos:line="62" pos:column="57"/></name></expr></argument>, <argument><expr><call><name pos:line="62" pos:column="59">strerror<pos:position pos:line="62" pos:column="67"/></name><argument_list pos:line="62" pos:column="67">(<argument><expr><name pos:line="62" pos:column="68">error<pos:position pos:line="62" pos:column="73"/></name></expr></argument>)<pos:position pos:line="62" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="62" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">logmsg<pos:position pos:line="63" pos:column="15"/></name><argument_list pos:line="63" pos:column="15">(<argument><expr><literal type="string" pos:line="63" pos:column="16">"Error opening file: %s"<pos:position pos:line="63" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="42">file<pos:position pos:line="63" pos:column="46"/></name></expr></argument>)<pos:position pos:line="63" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">logmsg<pos:position pos:line="64" pos:column="15"/></name><argument_list pos:line="64" pos:column="15">(<argument><expr><literal type="string" pos:line="64" pos:column="16">"Couldn't open test file: %s"<pos:position pos:line="64" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="47">file<pos:position pos:line="64" pos:column="51"/></name></expr></argument>)<pos:position pos:line="64" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="53"/></expr_stmt>
        <return pos:line="65" pos:column="9">return <expr><name pos:line="65" pos:column="16">EACCESS<pos:position pos:line="65" pos:column="23"/></name></expr>;<pos:position pos:line="65" pos:column="24"/></return>
      }<pos:position pos:line="66" pos:column="8"/></block></then>
      <else pos:line="67" pos:column="7">else <block pos:line="67" pos:column="12">{
        <decl_stmt><decl><type><name pos:line="68" pos:column="9">size_t<pos:position pos:line="68" pos:column="15"/></name></type> <name pos:line="68" pos:column="16">count<pos:position pos:line="68" pos:column="21"/></name></decl>;<pos:position pos:line="68" pos:column="22"/></decl_stmt>
        <expr_stmt><expr><name pos:line="69" pos:column="9">error<pos:position pos:line="69" pos:column="14"/></name> <operator pos:line="69" pos:column="15">=<pos:position pos:line="69" pos:column="16"/></operator> <call><name pos:line="69" pos:column="17">getpart<pos:position pos:line="69" pos:column="24"/></name><argument_list pos:line="69" pos:column="24">(<argument><expr><operator pos:line="69" pos:column="25">&amp;<pos:position pos:line="69" pos:column="30"/></operator><name><name pos:line="69" pos:column="26">test<pos:position pos:line="69" pos:column="30"/></name><operator pos:line="69" pos:column="30">-&gt;<pos:position pos:line="69" pos:column="35"/></operator><name pos:line="69" pos:column="32">buffer<pos:position pos:line="69" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="40">&amp;<pos:position pos:line="69" pos:column="45"/></operator><name pos:line="69" pos:column="41">count<pos:position pos:line="69" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="48">"reply"<pos:position pos:line="69" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="57">partbuf<pos:position pos:line="69" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="66">stream<pos:position pos:line="69" pos:column="72"/></name></expr></argument>)<pos:position pos:line="69" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">fclose<pos:position pos:line="70" pos:column="15"/></name><argument_list pos:line="70" pos:column="15">(<argument><expr><name pos:line="70" pos:column="16">stream<pos:position pos:line="70" pos:column="22"/></name></expr></argument>)<pos:position pos:line="70" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="24"/></expr_stmt>
        <if pos:line="71" pos:column="9">if<condition pos:line="71" pos:column="11">(<expr><name pos:line="71" pos:column="12">error<pos:position pos:line="71" pos:column="17"/></name></expr>)<pos:position pos:line="71" pos:column="18"/></condition><then pos:line="71" pos:column="18"> <block pos:line="71" pos:column="19">{
          <expr_stmt><expr><call><name pos:line="72" pos:column="11">logmsg<pos:position pos:line="72" pos:column="17"/></name><argument_list pos:line="72" pos:column="17">(<argument><expr><literal type="string" pos:line="72" pos:column="18">"getpart() failed with error: %d"<pos:position pos:line="72" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="53">error<pos:position pos:line="72" pos:column="58"/></name></expr></argument>)<pos:position pos:line="72" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="60"/></expr_stmt>
          <return pos:line="73" pos:column="11">return <expr><name pos:line="73" pos:column="18">EACCESS<pos:position pos:line="73" pos:column="25"/></name></expr>;<pos:position pos:line="73" pos:column="26"/></return>
        }<pos:position pos:line="74" pos:column="10"/></block></then></if>
        <if pos:line="75" pos:column="9">if<condition pos:line="75" pos:column="11">(<expr><name><name pos:line="75" pos:column="12">test<pos:position pos:line="75" pos:column="16"/></name><operator pos:line="75" pos:column="16">-&gt;<pos:position pos:line="75" pos:column="21"/></operator><name pos:line="75" pos:column="18">buffer<pos:position pos:line="75" pos:column="24"/></name></name></expr>)<pos:position pos:line="75" pos:column="25"/></condition><then pos:line="75" pos:column="25"> <block pos:line="75" pos:column="26">{
          <expr_stmt><expr><name><name pos:line="76" pos:column="11">test<pos:position pos:line="76" pos:column="15"/></name><operator pos:line="76" pos:column="15">-&gt;<pos:position pos:line="76" pos:column="20"/></operator><name pos:line="76" pos:column="17">rptr<pos:position pos:line="76" pos:column="21"/></name></name> <operator pos:line="76" pos:column="22">=<pos:position pos:line="76" pos:column="23"/></operator> <name><name pos:line="76" pos:column="24">test<pos:position pos:line="76" pos:column="28"/></name><operator pos:line="76" pos:column="28">-&gt;<pos:position pos:line="76" pos:column="33"/></operator><name pos:line="76" pos:column="30">buffer<pos:position pos:line="76" pos:column="36"/></name></name></expr>;<pos:position pos:line="76" pos:column="37"/></expr_stmt> <comment type="block" pos:line="76" pos:column="38">/* set read pointer */</comment>
          <expr_stmt><expr><name><name pos:line="77" pos:column="11">test<pos:position pos:line="77" pos:column="15"/></name><operator pos:line="77" pos:column="15">-&gt;<pos:position pos:line="77" pos:column="20"/></operator><name pos:line="77" pos:column="17">bufsize<pos:position pos:line="77" pos:column="24"/></name></name> <operator pos:line="77" pos:column="25">=<pos:position pos:line="77" pos:column="26"/></operator> <name pos:line="77" pos:column="27">count<pos:position pos:line="77" pos:column="32"/></name></expr>;<pos:position pos:line="77" pos:column="33"/></expr_stmt>    <comment type="block" pos:line="77" pos:column="37">/* set total count */</comment>
          <expr_stmt><expr><name><name pos:line="78" pos:column="11">test<pos:position pos:line="78" pos:column="15"/></name><operator pos:line="78" pos:column="15">-&gt;<pos:position pos:line="78" pos:column="20"/></operator><name pos:line="78" pos:column="17">rcount<pos:position pos:line="78" pos:column="23"/></name></name> <operator pos:line="78" pos:column="24">=<pos:position pos:line="78" pos:column="25"/></operator> <name pos:line="78" pos:column="26">count<pos:position pos:line="78" pos:column="31"/></name></expr>;<pos:position pos:line="78" pos:column="32"/></expr_stmt>     <comment type="block" pos:line="78" pos:column="37">/* set data left to read */</comment>
        }<pos:position pos:line="79" pos:column="10"/></block></then>
        <else pos:line="80" pos:column="9">else
          <block type="pseudo"><return pos:line="81" pos:column="11">return <expr><name pos:line="81" pos:column="18">EACCESS<pos:position pos:line="81" pos:column="25"/></name></expr>;<pos:position pos:line="81" pos:column="26"/></return></block></else></if>
      }<pos:position pos:line="82" pos:column="8"/></block></else></if>

    }<pos:position pos:line="84" pos:column="6"/></block></then>
    <else pos:line="85" pos:column="5">else
      <block type="pseudo"><return pos:line="86" pos:column="7">return <expr><name pos:line="86" pos:column="14">EACCESS<pos:position pos:line="86" pos:column="21"/></name></expr>;<pos:position pos:line="86" pos:column="22"/></return></block></else></if>
  }<pos:position pos:line="87" pos:column="4"/></block></then>
  <else pos:line="88" pos:column="3">else <block pos:line="88" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="89" pos:column="5">logmsg<pos:position pos:line="89" pos:column="11"/></name><argument_list pos:line="89" pos:column="11">(<argument><expr><literal type="string" pos:line="89" pos:column="12">"no slash found in path"<pos:position pos:line="89" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="38"/></expr_stmt>
    <return pos:line="90" pos:column="5">return <expr><name pos:line="90" pos:column="12">EACCESS<pos:position pos:line="90" pos:column="19"/></name></expr>;<pos:position pos:line="90" pos:column="20"/></return> <comment type="block" pos:line="90" pos:column="21">/* failure */</comment>
  }<pos:position pos:line="91" pos:column="4"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="93" pos:column="3">logmsg<pos:position pos:line="93" pos:column="9"/></name><argument_list pos:line="93" pos:column="9">(<argument><expr><literal type="string" pos:line="93" pos:column="10">"file opened and all is good"<pos:position pos:line="93" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="41"/></expr_stmt>
  <return pos:line="94" pos:column="3">return <expr><literal type="number" pos:line="94" pos:column="10">0<pos:position pos:line="94" pos:column="11"/></literal></expr>;<pos:position pos:line="94" pos:column="12"/></return>
}<pos:position pos:line="95" pos:column="2"/></block></function></unit>
