<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2449_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">gskit_connect_step2<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name><name pos:line="1" pos:column="37">struct<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">connectdata<pos:position pos:line="1" pos:column="55"/></name></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">conn<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="63">int<pos:position pos:line="1" pos:column="66"/></name></type> <name pos:line="1" pos:column="67">sockindex<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
                                    <parameter><decl><type><name pos:line="2" pos:column="37">bool<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">nonblocking<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">Curl_easy<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">data<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name><name pos:line="4" pos:column="28">conn<pos:position pos:line="4" pos:column="32"/></name><operator pos:line="4" pos:column="32">-&gt;<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="34">data<pos:position pos:line="4" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">ssl_connect_data<pos:position pos:line="5" pos:column="26"/></name></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name pos:line="5" pos:column="28">connssl<pos:position pos:line="5" pos:column="35"/></name> <init pos:line="5" pos:column="36">= <expr><operator pos:line="5" pos:column="38">&amp;<pos:position pos:line="5" pos:column="43"/></operator><name><name pos:line="5" pos:column="39">conn<pos:position pos:line="5" pos:column="43"/></name><operator pos:line="5" pos:column="43">-&gt;<pos:position pos:line="5" pos:column="48"/></operator><name pos:line="5" pos:column="45">ssl<pos:position pos:line="5" pos:column="48"/></name><index pos:line="5" pos:column="48">[<expr><name pos:line="5" pos:column="49">sockindex<pos:position pos:line="5" pos:column="58"/></name></expr>]<pos:position pos:line="5" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="60"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">Qso_OverlappedIO_t<pos:position pos:line="6" pos:column="21"/></name></type> <name pos:line="6" pos:column="22">cstat<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">long<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">timeout_ms<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">timeval<pos:position pos:line="8" pos:column="17"/></name></name></type> <name pos:line="8" pos:column="18">stmv<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">CURLcode<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">result<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* Poll or wait for end of SSL asynchronous handshake. */</comment>

  <for pos:line="13" pos:column="3">for<control pos:line="13" pos:column="6">(<init pos:line="13" pos:column="7">;<pos:position pos:line="13" pos:column="8"/></init><condition pos:line="13" pos:column="8">;<pos:position pos:line="13" pos:column="9"/></condition><incr/>)<pos:position pos:line="13" pos:column="10"/></control> <block pos:line="13" pos:column="11">{
    <expr_stmt><expr><name pos:line="14" pos:column="5">timeout_ms<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <ternary><condition><expr><name pos:line="14" pos:column="18">nonblocking<pos:position pos:line="14" pos:column="29"/></name></expr>?<pos:position pos:line="14" pos:column="30"/></condition><then pos:line="14" pos:column="30"> <expr><literal type="number" pos:line="14" pos:column="31">0<pos:position pos:line="14" pos:column="32"/></literal></expr></then><else pos:line="14" pos:column="32">: <expr><call><name pos:line="14" pos:column="34">Curl_timeleft<pos:position pos:line="14" pos:column="47"/></name><argument_list pos:line="14" pos:column="47">(<argument><expr><name pos:line="14" pos:column="48">data<pos:position pos:line="14" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="54">NULL<pos:position pos:line="14" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="60">TRUE<pos:position pos:line="14" pos:column="64"/></name></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="14" pos:column="66"/></expr_stmt>
    <if pos:line="15" pos:column="5">if<condition pos:line="15" pos:column="7">(<expr><name pos:line="15" pos:column="8">timeout_ms<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">&lt;<pos:position pos:line="15" pos:column="23"/></operator> <literal type="number" pos:line="15" pos:column="21">0<pos:position pos:line="15" pos:column="22"/></literal></expr>)<pos:position pos:line="15" pos:column="23"/></condition><then pos:line="15" pos:column="23">
      <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="7">timeout_ms<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">=<pos:position pos:line="16" pos:column="19"/></operator> <literal type="number" pos:line="16" pos:column="20">0<pos:position pos:line="16" pos:column="21"/></literal></expr>;<pos:position pos:line="16" pos:column="22"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">stmv<pos:position pos:line="17" pos:column="9"/></name><operator pos:line="17" pos:column="9">.<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">tv_sec<pos:position pos:line="17" pos:column="16"/></name></name> <operator pos:line="17" pos:column="17">=<pos:position pos:line="17" pos:column="18"/></operator> <name pos:line="17" pos:column="19">timeout_ms<pos:position pos:line="17" pos:column="29"/></name> <operator pos:line="17" pos:column="30">/<pos:position pos:line="17" pos:column="31"/></operator> <literal type="number" pos:line="17" pos:column="32">1000<pos:position pos:line="17" pos:column="36"/></literal></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">stmv<pos:position pos:line="18" pos:column="9"/></name><operator pos:line="18" pos:column="9">.<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">tv_usec<pos:position pos:line="18" pos:column="17"/></name></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <operator pos:line="18" pos:column="20">(<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="21">timeout_ms<pos:position pos:line="18" pos:column="31"/></name> <operator pos:line="18" pos:column="32">-<pos:position pos:line="18" pos:column="33"/></operator> <name><name pos:line="18" pos:column="34">stmv<pos:position pos:line="18" pos:column="38"/></name><operator pos:line="18" pos:column="38">.<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="39">tv_sec<pos:position pos:line="18" pos:column="45"/></name></name> <operator pos:line="18" pos:column="46">*<pos:position pos:line="18" pos:column="47"/></operator> <literal type="number" pos:line="18" pos:column="48">1000<pos:position pos:line="18" pos:column="52"/></literal><operator pos:line="18" pos:column="52">)<pos:position pos:line="18" pos:column="53"/></operator> <operator pos:line="18" pos:column="54">*<pos:position pos:line="18" pos:column="55"/></operator> <literal type="number" pos:line="18" pos:column="56">1000<pos:position pos:line="18" pos:column="60"/></literal></expr>;<pos:position pos:line="18" pos:column="61"/></expr_stmt>
    <switch pos:line="19" pos:column="5">switch<condition pos:line="19" pos:column="11">(<expr><call><name pos:line="19" pos:column="12">QsoWaitForIOCompletion<pos:position pos:line="19" pos:column="34"/></name><argument_list pos:line="19" pos:column="34">(<argument><expr><name><name pos:line="19" pos:column="35">BACKEND<pos:position pos:line="19" pos:column="42"/></name><operator pos:line="19" pos:column="42">-&gt;<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="44">iocport<pos:position pos:line="19" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="53">&amp;<pos:position pos:line="19" pos:column="58"/></operator><name pos:line="19" pos:column="54">cstat<pos:position pos:line="19" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="61">&amp;<pos:position pos:line="19" pos:column="66"/></operator><name pos:line="19" pos:column="62">stmv<pos:position pos:line="19" pos:column="66"/></name></expr></argument>)<pos:position pos:line="19" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="68"/></condition> <block pos:line="19" pos:column="69">{
    <case pos:line="20" pos:column="5">case <expr><literal type="number" pos:line="20" pos:column="10">1<pos:position pos:line="20" pos:column="11"/></literal></expr>:<pos:position pos:line="20" pos:column="12"/></case>             <comment type="block" pos:line="20" pos:column="25">/* Operation complete. */</comment>
      <break pos:line="21" pos:column="7">break;<pos:position pos:line="21" pos:column="13"/></break>
    <case pos:line="22" pos:column="5">case <expr><operator pos:line="22" pos:column="10">-<pos:position pos:line="22" pos:column="11"/></operator><literal type="number" pos:line="22" pos:column="11">1<pos:position pos:line="22" pos:column="12"/></literal></expr>:<pos:position pos:line="22" pos:column="13"/></case>            <comment type="block" pos:line="22" pos:column="25">/* An error occurred: handshake still in progress. */</comment>
      <if pos:line="23" pos:column="7">if<condition pos:line="23" pos:column="9">(<expr><name pos:line="23" pos:column="10">errno<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">==<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">EINTR<pos:position pos:line="23" pos:column="24"/></name></expr>)<pos:position pos:line="23" pos:column="25"/></condition><then pos:line="23" pos:column="25"> <block pos:line="23" pos:column="26">{
        <if pos:line="24" pos:column="9">if<condition pos:line="24" pos:column="11">(<expr><name pos:line="24" pos:column="12">nonblocking<pos:position pos:line="24" pos:column="23"/></name></expr>)<pos:position pos:line="24" pos:column="24"/></condition><then pos:line="24" pos:column="24">
          <block type="pseudo"><return pos:line="25" pos:column="11">return <expr><name pos:line="25" pos:column="18">CURLE_OK<pos:position pos:line="25" pos:column="26"/></name></expr>;<pos:position pos:line="25" pos:column="27"/></return></block></then></if>
        <continue pos:line="26" pos:column="9">continue;<pos:position pos:line="26" pos:column="18"/></continue>       <comment type="block" pos:line="26" pos:column="25">/* Retry. */</comment>
      }<pos:position pos:line="27" pos:column="8"/></block></then></if>
      <if pos:line="28" pos:column="7">if<condition pos:line="28" pos:column="9">(<expr><name pos:line="28" pos:column="10">errno<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">!=<pos:position pos:line="28" pos:column="18"/></operator> <name pos:line="28" pos:column="19">ETIME<pos:position pos:line="28" pos:column="24"/></name></expr>)<pos:position pos:line="28" pos:column="25"/></condition><then pos:line="28" pos:column="25"> <block pos:line="28" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">failf<pos:position pos:line="29" pos:column="14"/></name><argument_list pos:line="29" pos:column="14">(<argument><expr><name pos:line="29" pos:column="15">data<pos:position pos:line="29" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="21">"QsoWaitForIOCompletion() I/O error: %s"<pos:position pos:line="29" pos:column="61"/></literal></expr></argument>, <argument><expr><call><name pos:line="29" pos:column="63">strerror<pos:position pos:line="29" pos:column="71"/></name><argument_list pos:line="29" pos:column="71">(<argument><expr><name pos:line="29" pos:column="72">errno<pos:position pos:line="29" pos:column="77"/></name></expr></argument>)<pos:position pos:line="29" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="80"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">cancel_async_handshake<pos:position pos:line="30" pos:column="31"/></name><argument_list pos:line="30" pos:column="31">(<argument><expr><name pos:line="30" pos:column="32">conn<pos:position pos:line="30" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="38">sockindex<pos:position pos:line="30" pos:column="47"/></name></expr></argument>)<pos:position pos:line="30" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">close_async_handshake<pos:position pos:line="31" pos:column="30"/></name><argument_list pos:line="31" pos:column="30">(<argument><expr><name pos:line="31" pos:column="31">connssl<pos:position pos:line="31" pos:column="38"/></name></expr></argument>)<pos:position pos:line="31" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="40"/></expr_stmt>
        <return pos:line="32" pos:column="9">return <expr><name pos:line="32" pos:column="16">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="32" pos:column="39"/></name></expr>;<pos:position pos:line="32" pos:column="40"/></return>
      }<pos:position pos:line="33" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="34" pos:column="7">/* FALL INTO... */</comment>
    <case pos:line="35" pos:column="5">case <expr><literal type="number" pos:line="35" pos:column="10">0<pos:position pos:line="35" pos:column="11"/></literal></expr>:<pos:position pos:line="35" pos:column="12"/></case>             <comment type="block" pos:line="35" pos:column="25">/* Handshake in progress, timeout occurred. */</comment>
      <if pos:line="36" pos:column="7">if<condition pos:line="36" pos:column="9">(<expr><name pos:line="36" pos:column="10">nonblocking<pos:position pos:line="36" pos:column="21"/></name></expr>)<pos:position pos:line="36" pos:column="22"/></condition><then pos:line="36" pos:column="22">
        <block type="pseudo"><return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">CURLE_OK<pos:position pos:line="37" pos:column="24"/></name></expr>;<pos:position pos:line="37" pos:column="25"/></return></block></then></if>
      <expr_stmt><expr><call><name pos:line="38" pos:column="7">cancel_async_handshake<pos:position pos:line="38" pos:column="29"/></name><argument_list pos:line="38" pos:column="29">(<argument><expr><name pos:line="38" pos:column="30">conn<pos:position pos:line="38" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="36">sockindex<pos:position pos:line="38" pos:column="45"/></name></expr></argument>)<pos:position pos:line="38" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="47"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="39" pos:column="7">close_async_handshake<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">(<argument><expr><name pos:line="39" pos:column="29">connssl<pos:position pos:line="39" pos:column="36"/></name></expr></argument>)<pos:position pos:line="39" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="38"/></expr_stmt>
      <return pos:line="40" pos:column="7">return <expr><name pos:line="40" pos:column="14">CURLE_OPERATION_TIMEDOUT<pos:position pos:line="40" pos:column="38"/></name></expr>;<pos:position pos:line="40" pos:column="39"/></return>
    }<pos:position pos:line="41" pos:column="6"/></block></switch>
    <break pos:line="42" pos:column="5">break;<pos:position pos:line="42" pos:column="11"/></break>
  }<pos:position pos:line="43" pos:column="4"/></block></for>
  <expr_stmt><expr><name pos:line="44" pos:column="3">result<pos:position pos:line="44" pos:column="9"/></name> <operator pos:line="44" pos:column="10">=<pos:position pos:line="44" pos:column="11"/></operator> <call><name pos:line="44" pos:column="12">gskit_status<pos:position pos:line="44" pos:column="24"/></name><argument_list pos:line="44" pos:column="24">(<argument><expr><name pos:line="44" pos:column="25">data<pos:position pos:line="44" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="31">cstat<pos:position pos:line="44" pos:column="36"/></name><operator pos:line="44" pos:column="36">.<pos:position pos:line="44" pos:column="37"/></operator><name pos:line="44" pos:column="37">returnValue<pos:position pos:line="44" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="50">"SSL handshake"<pos:position pos:line="44" pos:column="65"/></literal></expr></argument>,
                        <argument><expr><name pos:line="45" pos:column="25">CURLE_SSL_CONNECT_ERROR<pos:position pos:line="45" pos:column="48"/></name></expr></argument>)<pos:position pos:line="45" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="50"/></expr_stmt>
  <if pos:line="46" pos:column="3">if<condition pos:line="46" pos:column="5">(<expr><operator pos:line="46" pos:column="6">!<pos:position pos:line="46" pos:column="7"/></operator><name pos:line="46" pos:column="7">result<pos:position pos:line="46" pos:column="13"/></name></expr>)<pos:position pos:line="46" pos:column="14"/></condition><then pos:line="46" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="47" pos:column="5">connssl<pos:position pos:line="47" pos:column="12"/></name><operator pos:line="47" pos:column="12">-&gt;<pos:position pos:line="47" pos:column="17"/></operator><name pos:line="47" pos:column="14">connecting_state<pos:position pos:line="47" pos:column="30"/></name></name> <operator pos:line="47" pos:column="31">=<pos:position pos:line="47" pos:column="32"/></operator> <name pos:line="47" pos:column="33">ssl_connect_3<pos:position pos:line="47" pos:column="46"/></name></expr>;<pos:position pos:line="47" pos:column="47"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="48" pos:column="3">close_async_handshake<pos:position pos:line="48" pos:column="24"/></name><argument_list pos:line="48" pos:column="24">(<argument><expr><name pos:line="48" pos:column="25">connssl<pos:position pos:line="48" pos:column="32"/></name></expr></argument>)<pos:position pos:line="48" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="34"/></expr_stmt>
  <return pos:line="49" pos:column="3">return <expr><name pos:line="49" pos:column="10">result<pos:position pos:line="49" pos:column="16"/></name></expr>;<pos:position pos:line="49" pos:column="17"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
