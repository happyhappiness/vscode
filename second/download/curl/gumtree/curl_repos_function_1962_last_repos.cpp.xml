<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1962_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">Curl_sec_read_msg<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name><name pos:line="1" pos:column="23">struct<pos:position pos:line="1" pos:column="29"/></name> <name pos:line="1" pos:column="30">connectdata<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">conn<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">buffer<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>,
                      <parameter><decl><type><name><name pos:line="2" pos:column="23">enum<pos:position pos:line="2" pos:column="27"/></name> <name pos:line="2" pos:column="28">protection_level<pos:position pos:line="2" pos:column="44"/></name></name></type> <name pos:line="2" pos:column="45">level<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <comment type="block" pos:line="4" pos:column="3">/* decoded_len should be size_t or ssize_t but conn-&gt;mech-&gt;decode returns an
     int */</comment>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">decoded_len<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">buf<pos:position pos:line="7" pos:column="12"/></name></decl>;<pos:position pos:line="7" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">ret_code<pos:position pos:line="8" pos:column="15"/></name> <init pos:line="8" pos:column="16">= <expr><literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">size_t<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">decoded_sz<pos:position pos:line="9" pos:column="20"/></name> <init pos:line="9" pos:column="21">= <expr><literal type="number" pos:line="9" pos:column="23">0<pos:position pos:line="9" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">CURLcode<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">error<pos:position pos:line="10" pos:column="17"/></name></decl>;<pos:position pos:line="10" pos:column="18"/></decl_stmt>

  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><operator pos:line="12" pos:column="6">!<pos:position pos:line="12" pos:column="7"/></operator><name><name pos:line="12" pos:column="7">conn<pos:position pos:line="12" pos:column="11"/></name><operator pos:line="12" pos:column="11">-&gt;<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="13">mech<pos:position pos:line="12" pos:column="17"/></name></name></expr>)<pos:position pos:line="12" pos:column="18"/></condition><then pos:line="12" pos:column="18">
    <comment type="block" pos:line="13" pos:column="5">/* not inititalized, return error */</comment>
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">-<pos:position pos:line="14" pos:column="13"/></operator><literal type="number" pos:line="14" pos:column="13">1<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="16" pos:column="3">DEBUGASSERT<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">(<argument><expr><name pos:line="16" pos:column="15">level<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">&gt;<pos:position pos:line="16" pos:column="25"/></operator> <name pos:line="16" pos:column="23">PROT_NONE<pos:position pos:line="16" pos:column="32"/></name> <operator pos:line="16" pos:column="33">&amp;&amp;<pos:position pos:line="16" pos:column="43"/></operator> <name pos:line="16" pos:column="36">level<pos:position pos:line="16" pos:column="41"/></name> <operator pos:line="16" pos:column="42">&lt;<pos:position pos:line="16" pos:column="46"/></operator> <name pos:line="16" pos:column="44">PROT_LAST<pos:position pos:line="16" pos:column="53"/></name></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="55"/></expr_stmt>

  <expr_stmt><expr><name pos:line="18" pos:column="3">error<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">=<pos:position pos:line="18" pos:column="10"/></operator> <call><name pos:line="18" pos:column="11">Curl_base64_decode<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">buffer<pos:position pos:line="18" pos:column="36"/></name> <operator pos:line="18" pos:column="37">+<pos:position pos:line="18" pos:column="38"/></operator> <literal type="number" pos:line="18" pos:column="39">4<pos:position pos:line="18" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="18" pos:column="42">(<pos:position pos:line="18" pos:column="43"/></operator><name pos:line="18" pos:column="43">unsigned<pos:position pos:line="18" pos:column="51"/></name> <name pos:line="18" pos:column="52">char<pos:position pos:line="18" pos:column="56"/></name> <operator pos:line="18" pos:column="57">*<pos:position pos:line="18" pos:column="58"/></operator><operator pos:line="18" pos:column="58">*<pos:position pos:line="18" pos:column="59"/></operator><operator pos:line="18" pos:column="59">)<pos:position pos:line="18" pos:column="60"/></operator><operator pos:line="18" pos:column="60">&amp;<pos:position pos:line="18" pos:column="65"/></operator><name pos:line="18" pos:column="61">buf<pos:position pos:line="18" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="66">&amp;<pos:position pos:line="18" pos:column="71"/></operator><name pos:line="18" pos:column="67">decoded_sz<pos:position pos:line="18" pos:column="77"/></name></expr></argument>)<pos:position pos:line="18" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="79"/></expr_stmt>
  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><name pos:line="19" pos:column="6">error<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">||<pos:position pos:line="19" pos:column="14"/></operator> <name pos:line="19" pos:column="15">decoded_sz<pos:position pos:line="19" pos:column="25"/></name> <operator pos:line="19" pos:column="26">==<pos:position pos:line="19" pos:column="28"/></operator> <literal type="number" pos:line="19" pos:column="29">0<pos:position pos:line="19" pos:column="30"/></literal></expr>)<pos:position pos:line="19" pos:column="31"/></condition><then pos:line="19" pos:column="31">
    <block type="pseudo"><return pos:line="20" pos:column="5">return <expr><operator pos:line="20" pos:column="12">-<pos:position pos:line="20" pos:column="13"/></operator><literal type="number" pos:line="20" pos:column="13">1<pos:position pos:line="20" pos:column="14"/></literal></expr>;<pos:position pos:line="20" pos:column="15"/></return></block></then></if>

  <if pos:line="22" pos:column="3">if<condition pos:line="22" pos:column="5">(<expr><name pos:line="22" pos:column="6">decoded_sz<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">&gt;<pos:position pos:line="22" pos:column="21"/></operator> <operator pos:line="22" pos:column="19">(<pos:position pos:line="22" pos:column="20"/></operator><name pos:line="22" pos:column="20">size_t<pos:position pos:line="22" pos:column="26"/></name><operator pos:line="22" pos:column="26">)<pos:position pos:line="22" pos:column="27"/></operator><name pos:line="22" pos:column="27">INT_MAX<pos:position pos:line="22" pos:column="34"/></name></expr>)<pos:position pos:line="22" pos:column="35"/></condition><then pos:line="22" pos:column="35"> <block pos:line="22" pos:column="36">{
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">free<pos:position pos:line="23" pos:column="9"/></name><argument_list pos:line="23" pos:column="9">(<argument><expr><name pos:line="23" pos:column="10">buf<pos:position pos:line="23" pos:column="13"/></name></expr></argument>)<pos:position pos:line="23" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="15"/></expr_stmt>
    <return pos:line="24" pos:column="5">return <expr><operator pos:line="24" pos:column="12">-<pos:position pos:line="24" pos:column="13"/></operator><literal type="number" pos:line="24" pos:column="13">1<pos:position pos:line="24" pos:column="14"/></literal></expr>;<pos:position pos:line="24" pos:column="15"/></return>
  }<pos:position pos:line="25" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="26" pos:column="3">decoded_len<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <call><name pos:line="26" pos:column="17">curlx_uztosi<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><name pos:line="26" pos:column="30">decoded_sz<pos:position pos:line="26" pos:column="40"/></name></expr></argument>)<pos:position pos:line="26" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="42"/></expr_stmt>

  <expr_stmt><expr><name pos:line="28" pos:column="3">decoded_len<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">=<pos:position pos:line="28" pos:column="16"/></operator> <call><name><name pos:line="28" pos:column="17">conn<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">-&gt;<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="23">mech<pos:position pos:line="28" pos:column="27"/></name><operator pos:line="28" pos:column="27">-&gt;<pos:position pos:line="28" pos:column="32"/></operator><name pos:line="28" pos:column="29">decode<pos:position pos:line="28" pos:column="35"/></name></name><argument_list pos:line="28" pos:column="35">(<argument><expr><name><name pos:line="28" pos:column="36">conn<pos:position pos:line="28" pos:column="40"/></name><operator pos:line="28" pos:column="40">-&gt;<pos:position pos:line="28" pos:column="45"/></operator><name pos:line="28" pos:column="42">app_data<pos:position pos:line="28" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="52">buf<pos:position pos:line="28" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="57">decoded_len<pos:position pos:line="28" pos:column="68"/></name></expr></argument>,
                                   <argument><expr><name pos:line="29" pos:column="36">level<pos:position pos:line="29" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="43">conn<pos:position pos:line="29" pos:column="47"/></name></expr></argument>)<pos:position pos:line="29" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="49"/></expr_stmt>
  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><name pos:line="30" pos:column="6">decoded_len<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">&lt;=<pos:position pos:line="30" pos:column="23"/></operator> <literal type="number" pos:line="30" pos:column="21">0<pos:position pos:line="30" pos:column="22"/></literal></expr>)<pos:position pos:line="30" pos:column="23"/></condition><then pos:line="30" pos:column="23"> <block pos:line="30" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">free<pos:position pos:line="31" pos:column="9"/></name><argument_list pos:line="31" pos:column="9">(<argument><expr><name pos:line="31" pos:column="10">buf<pos:position pos:line="31" pos:column="13"/></name></expr></argument>)<pos:position pos:line="31" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="15"/></expr_stmt>
    <return pos:line="32" pos:column="5">return <expr><operator pos:line="32" pos:column="12">-<pos:position pos:line="32" pos:column="13"/></operator><literal type="number" pos:line="32" pos:column="13">1<pos:position pos:line="32" pos:column="14"/></literal></expr>;<pos:position pos:line="32" pos:column="15"/></return>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>

  <if pos:line="35" pos:column="3">if<condition pos:line="35" pos:column="5">(<expr><name><name pos:line="35" pos:column="6">conn<pos:position pos:line="35" pos:column="10"/></name><operator pos:line="35" pos:column="10">-&gt;<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="12">data<pos:position pos:line="35" pos:column="16"/></name><operator pos:line="35" pos:column="16">-&gt;<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="18">set<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">.<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="22">verbose<pos:position pos:line="35" pos:column="29"/></name></name></expr>)<pos:position pos:line="35" pos:column="30"/></condition><then pos:line="35" pos:column="30"> <block pos:line="35" pos:column="31">{
    <expr_stmt><expr><name><name pos:line="36" pos:column="5">buf<pos:position pos:line="36" pos:column="8"/></name><index pos:line="36" pos:column="8">[<expr><name pos:line="36" pos:column="9">decoded_len<pos:position pos:line="36" pos:column="20"/></name></expr>]<pos:position pos:line="36" pos:column="21"/></index></name> <operator pos:line="36" pos:column="22">=<pos:position pos:line="36" pos:column="23"/></operator> <literal type="char" pos:line="36" pos:column="24">'\n'<pos:position pos:line="36" pos:column="28"/></literal></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">Curl_debug<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name><name pos:line="37" pos:column="16">conn<pos:position pos:line="37" pos:column="20"/></name><operator pos:line="37" pos:column="20">-&gt;<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="22">data<pos:position pos:line="37" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="28">CURLINFO_HEADER_IN<pos:position pos:line="37" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="48">buf<pos:position pos:line="37" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="53">decoded_len<pos:position pos:line="37" pos:column="64"/></name> <operator pos:line="37" pos:column="65">+<pos:position pos:line="37" pos:column="66"/></operator> <literal type="number" pos:line="37" pos:column="67">1<pos:position pos:line="37" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="70">conn<pos:position pos:line="37" pos:column="74"/></name></expr></argument>)<pos:position pos:line="37" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="76"/></expr_stmt>
  }<pos:position pos:line="38" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="40" pos:column="3">buf<pos:position pos:line="40" pos:column="6"/></name><index pos:line="40" pos:column="6">[<expr><name pos:line="40" pos:column="7">decoded_len<pos:position pos:line="40" pos:column="18"/></name></expr>]<pos:position pos:line="40" pos:column="19"/></index></name> <operator pos:line="40" pos:column="20">=<pos:position pos:line="40" pos:column="21"/></operator> <literal type="char" pos:line="40" pos:column="22">'\0'<pos:position pos:line="40" pos:column="26"/></literal></expr>;<pos:position pos:line="40" pos:column="27"/></expr_stmt>
  <if pos:line="41" pos:column="3">if<condition pos:line="41" pos:column="5">(<expr><name pos:line="41" pos:column="6">decoded_len<pos:position pos:line="41" pos:column="17"/></name> <operator pos:line="41" pos:column="18">&lt;=<pos:position pos:line="41" pos:column="23"/></operator> <literal type="number" pos:line="41" pos:column="21">3<pos:position pos:line="41" pos:column="22"/></literal></expr>)<pos:position pos:line="41" pos:column="23"/></condition><then pos:line="41" pos:column="23">
    <comment type="block" pos:line="42" pos:column="5">/* suspiciously short */</comment>
    <block type="pseudo"><return pos:line="43" pos:column="5">return <expr><literal type="number" pos:line="43" pos:column="12">0<pos:position pos:line="43" pos:column="13"/></literal></expr>;<pos:position pos:line="43" pos:column="14"/></return></block></then></if>

  <if pos:line="45" pos:column="3">if<condition pos:line="45" pos:column="5">(<expr><name><name pos:line="45" pos:column="6">buf<pos:position pos:line="45" pos:column="9"/></name><index pos:line="45" pos:column="9">[<expr><literal type="number" pos:line="45" pos:column="10">3<pos:position pos:line="45" pos:column="11"/></literal></expr>]<pos:position pos:line="45" pos:column="12"/></index></name> <operator pos:line="45" pos:column="13">!=<pos:position pos:line="45" pos:column="15"/></operator> <literal type="char" pos:line="45" pos:column="16">'-'<pos:position pos:line="45" pos:column="19"/></literal></expr>)<pos:position pos:line="45" pos:column="20"/></condition><then pos:line="45" pos:column="20">
    <comment type="block" pos:line="46" pos:column="5">/* safe to ignore return code */</comment>
    <block type="pseudo"><expr_stmt><expr><operator pos:line="47" pos:column="5">(<pos:position pos:line="47" pos:column="6"/></operator><name pos:line="47" pos:column="6">void<pos:position pos:line="47" pos:column="10"/></name><operator pos:line="47" pos:column="10">)<pos:position pos:line="47" pos:column="11"/></operator><call><name pos:line="47" pos:column="11">sscanf<pos:position pos:line="47" pos:column="17"/></name><argument_list pos:line="47" pos:column="17">(<argument><expr><name pos:line="47" pos:column="18">buf<pos:position pos:line="47" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="23">"%d"<pos:position pos:line="47" pos:column="27"/></literal></expr></argument>, <argument><expr><operator pos:line="47" pos:column="29">&amp;<pos:position pos:line="47" pos:column="34"/></operator><name pos:line="47" pos:column="30">ret_code<pos:position pos:line="47" pos:column="38"/></name></expr></argument>)<pos:position pos:line="47" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="40"/></expr_stmt></block></then></if>

  <if pos:line="49" pos:column="3">if<condition pos:line="49" pos:column="5">(<expr><name><name pos:line="49" pos:column="6">buf<pos:position pos:line="49" pos:column="9"/></name><index pos:line="49" pos:column="9">[<expr><name pos:line="49" pos:column="10">decoded_len<pos:position pos:line="49" pos:column="21"/></name> <operator pos:line="49" pos:column="22">-<pos:position pos:line="49" pos:column="23"/></operator> <literal type="number" pos:line="49" pos:column="24">1<pos:position pos:line="49" pos:column="25"/></literal></expr>]<pos:position pos:line="49" pos:column="26"/></index></name> <operator pos:line="49" pos:column="27">==<pos:position pos:line="49" pos:column="29"/></operator> <literal type="char" pos:line="49" pos:column="30">'\n'<pos:position pos:line="49" pos:column="34"/></literal></expr>)<pos:position pos:line="49" pos:column="35"/></condition><then pos:line="49" pos:column="35">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="50" pos:column="5">buf<pos:position pos:line="50" pos:column="8"/></name><index pos:line="50" pos:column="8">[<expr><name pos:line="50" pos:column="9">decoded_len<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">-<pos:position pos:line="50" pos:column="22"/></operator> <literal type="number" pos:line="50" pos:column="23">1<pos:position pos:line="50" pos:column="24"/></literal></expr>]<pos:position pos:line="50" pos:column="25"/></index></name> <operator pos:line="50" pos:column="26">=<pos:position pos:line="50" pos:column="27"/></operator> <literal type="char" pos:line="50" pos:column="28">'\0'<pos:position pos:line="50" pos:column="32"/></literal></expr>;<pos:position pos:line="50" pos:column="33"/></expr_stmt></block></then></if>
  <comment type="block" pos:line="51" pos:column="3">/* FIXME: Is |buffer| length always greater than |decoded_len|? */</comment>
  <expr_stmt><expr><call><name pos:line="52" pos:column="3">strcpy<pos:position pos:line="52" pos:column="9"/></name><argument_list pos:line="52" pos:column="9">(<argument><expr><name pos:line="52" pos:column="10">buffer<pos:position pos:line="52" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="18">buf<pos:position pos:line="52" pos:column="21"/></name></expr></argument>)<pos:position pos:line="52" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="53" pos:column="3">free<pos:position pos:line="53" pos:column="7"/></name><argument_list pos:line="53" pos:column="7">(<argument><expr><name pos:line="53" pos:column="8">buf<pos:position pos:line="53" pos:column="11"/></name></expr></argument>)<pos:position pos:line="53" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="13"/></expr_stmt>
  <return pos:line="54" pos:column="3">return <expr><name pos:line="54" pos:column="10">ret_code<pos:position pos:line="54" pos:column="18"/></name></expr>;<pos:position pos:line="54" pos:column="19"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
