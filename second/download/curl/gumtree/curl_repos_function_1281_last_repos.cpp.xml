<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1281_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">curl_maprintf<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><specifier pos:line="1" pos:column="21">const<pos:position pos:line="1" pos:column="26"/></specifier> <name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">format<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="1" pos:column="41">...<pos:position pos:line="1" pos:column="44"/></modifier></type></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">va_list<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">ap_save<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt> <comment type="block" pos:line="3" pos:column="20">/* argument pointer */</comment>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">retcode<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">asprintf<pos:position pos:line="5" pos:column="18"/></name></name></type> <name pos:line="5" pos:column="19">info<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>

  <expr_stmt><expr><name><name pos:line="7" pos:column="3">info<pos:position pos:line="7" pos:column="7"/></name><operator pos:line="7" pos:column="7">.<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">buffer<pos:position pos:line="7" pos:column="14"/></name></name> <operator pos:line="7" pos:column="15">=<pos:position pos:line="7" pos:column="16"/></operator> <name pos:line="7" pos:column="17">NULL<pos:position pos:line="7" pos:column="21"/></name></expr>;<pos:position pos:line="7" pos:column="22"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="8" pos:column="3">info<pos:position pos:line="8" pos:column="7"/></name><operator pos:line="8" pos:column="7">.<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">len<pos:position pos:line="8" pos:column="11"/></name></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <literal type="number" pos:line="8" pos:column="14">0<pos:position pos:line="8" pos:column="15"/></literal></expr>;<pos:position pos:line="8" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="9" pos:column="3">info<pos:position pos:line="9" pos:column="7"/></name><operator pos:line="9" pos:column="7">.<pos:position pos:line="9" pos:column="8"/></operator><name pos:line="9" pos:column="8">alloc<pos:position pos:line="9" pos:column="13"/></name></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <literal type="number" pos:line="9" pos:column="16">0<pos:position pos:line="9" pos:column="17"/></literal></expr>;<pos:position pos:line="9" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="10" pos:column="3">info<pos:position pos:line="10" pos:column="7"/></name><operator pos:line="10" pos:column="7">.<pos:position pos:line="10" pos:column="8"/></operator><name pos:line="10" pos:column="8">fail<pos:position pos:line="10" pos:column="12"/></name></name> <operator pos:line="10" pos:column="13">=<pos:position pos:line="10" pos:column="14"/></operator> <literal type="number" pos:line="10" pos:column="15">0<pos:position pos:line="10" pos:column="16"/></literal></expr>;<pos:position pos:line="10" pos:column="17"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">va_start<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name pos:line="12" pos:column="12">ap_save<pos:position pos:line="12" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="21">format<pos:position pos:line="12" pos:column="27"/></name></expr></argument>)<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="13" pos:column="3">retcode<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <call><name pos:line="13" pos:column="13">dprintf_formatf<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><operator pos:line="13" pos:column="29">&amp;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="30">info<pos:position pos:line="13" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="36">alloc_addbyter<pos:position pos:line="13" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="52">format<pos:position pos:line="13" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="60">ap_save<pos:position pos:line="13" pos:column="67"/></name></expr></argument>)<pos:position pos:line="13" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="69"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">va_end<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">(<argument><expr><name pos:line="14" pos:column="10">ap_save<pos:position pos:line="14" pos:column="17"/></name></expr></argument>)<pos:position pos:line="14" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="19"/></expr_stmt>
  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><operator pos:line="15" pos:column="6">(<pos:position pos:line="15" pos:column="7"/></operator><operator pos:line="15" pos:column="7">-<pos:position pos:line="15" pos:column="8"/></operator><literal type="number" pos:line="15" pos:column="8">1<pos:position pos:line="15" pos:column="9"/></literal> <operator pos:line="15" pos:column="10">==<pos:position pos:line="15" pos:column="12"/></operator> <name pos:line="15" pos:column="13">retcode<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">)<pos:position pos:line="15" pos:column="21"/></operator> <operator pos:line="15" pos:column="22">||<pos:position pos:line="15" pos:column="24"/></operator> <name><name pos:line="15" pos:column="25">info<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">.<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="30">fail<pos:position pos:line="15" pos:column="34"/></name></name></expr>)<pos:position pos:line="15" pos:column="35"/></condition><then pos:line="15" pos:column="35"> <block pos:line="15" pos:column="36">{
    <if pos:line="16" pos:column="5">if<condition pos:line="16" pos:column="7">(<expr><name><name pos:line="16" pos:column="8">info<pos:position pos:line="16" pos:column="12"/></name><operator pos:line="16" pos:column="12">.<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">alloc<pos:position pos:line="16" pos:column="18"/></name></name></expr>)<pos:position pos:line="16" pos:column="19"/></condition><then pos:line="16" pos:column="19">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="7">free<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name><name pos:line="17" pos:column="12">info<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">.<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">buffer<pos:position pos:line="17" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt></block></then></if>
    <return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">NULL<pos:position pos:line="18" pos:column="16"/></name></expr>;<pos:position pos:line="18" pos:column="17"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>
  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><name><name pos:line="20" pos:column="6">info<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">.<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="11">alloc<pos:position pos:line="20" pos:column="16"/></name></name></expr>)<pos:position pos:line="20" pos:column="17"/></condition><then pos:line="20" pos:column="17"> <block pos:line="20" pos:column="18">{
    <expr_stmt><expr><name><name pos:line="21" pos:column="5">info<pos:position pos:line="21" pos:column="9"/></name><operator pos:line="21" pos:column="9">.<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">buffer<pos:position pos:line="21" pos:column="16"/></name><index pos:line="21" pos:column="16">[<expr><name><name pos:line="21" pos:column="17">info<pos:position pos:line="21" pos:column="21"/></name><operator pos:line="21" pos:column="21">.<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">len<pos:position pos:line="21" pos:column="25"/></name></name></expr>]<pos:position pos:line="21" pos:column="26"/></index></name> <operator pos:line="21" pos:column="27">=<pos:position pos:line="21" pos:column="28"/></operator> <literal type="number" pos:line="21" pos:column="29">0<pos:position pos:line="21" pos:column="30"/></literal></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt> <comment type="block" pos:line="21" pos:column="32">/* we terminate this with a zero byte */</comment>
    <return pos:line="22" pos:column="5">return <expr><name><name pos:line="22" pos:column="12">info<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">.<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">buffer<pos:position pos:line="22" pos:column="23"/></name></name></expr>;<pos:position pos:line="22" pos:column="24"/></return>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>
  <return pos:line="24" pos:column="3">return <expr><call><name pos:line="24" pos:column="10">strdup<pos:position pos:line="24" pos:column="16"/></name><argument_list pos:line="24" pos:column="16">(<argument><expr><literal type="string" pos:line="24" pos:column="17">""<pos:position pos:line="24" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="21"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
