<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_913_curl-7.35.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">rtsp_rtp_readwrite<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">SessionHandle<pos:position pos:line="1" pos:column="56"/></name></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">data<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
                                   <parameter><decl><type><name><name pos:line="2" pos:column="36">struct<pos:position pos:line="2" pos:column="42"/></name> <name pos:line="2" pos:column="43">connectdata<pos:position pos:line="2" pos:column="54"/></name></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">conn<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>,
                                   <parameter><decl><type><name pos:line="3" pos:column="36">ssize_t<pos:position pos:line="3" pos:column="43"/></name> <modifier pos:line="3" pos:column="44">*<pos:position pos:line="3" pos:column="45"/></modifier></type><name pos:line="3" pos:column="45">nread<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>,
                                   <parameter><decl><type><name pos:line="4" pos:column="36">bool<pos:position pos:line="4" pos:column="40"/></name> <modifier pos:line="4" pos:column="41">*<pos:position pos:line="4" pos:column="42"/></modifier></type><name pos:line="4" pos:column="42">readmore<pos:position pos:line="4" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="51"/></parameter_list> <block pos:line="4" pos:column="52">{
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">SingleRequest<pos:position pos:line="5" pos:column="23"/></name></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">k<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><operator pos:line="5" pos:column="29">&amp;<pos:position pos:line="5" pos:column="34"/></operator><name><name pos:line="5" pos:column="30">data<pos:position pos:line="5" pos:column="34"/></name><operator pos:line="5" pos:column="34">-&gt;<pos:position pos:line="5" pos:column="39"/></operator><name pos:line="5" pos:column="36">req<pos:position pos:line="5" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">rtsp_conn<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">rtspc<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><operator pos:line="6" pos:column="29">&amp;<pos:position pos:line="6" pos:column="34"/></operator><operator pos:line="6" pos:column="30">(<pos:position pos:line="6" pos:column="31"/></operator><name><name pos:line="6" pos:column="31">conn<pos:position pos:line="6" pos:column="35"/></name><operator pos:line="6" pos:column="35">-&gt;<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="37">proto<pos:position pos:line="6" pos:column="42"/></name><operator pos:line="6" pos:column="42">.<pos:position pos:line="6" pos:column="43"/></operator><name pos:line="6" pos:column="43">rtspc<pos:position pos:line="6" pos:column="48"/></name></name><operator pos:line="6" pos:column="48">)<pos:position pos:line="6" pos:column="49"/></operator></expr></init></decl>;<pos:position pos:line="6" pos:column="50"/></decl_stmt>

  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">rtp<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt> <comment type="block" pos:line="8" pos:column="14">/* moving pointer to rtp data */</comment>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">ssize_t<pos:position pos:line="9" pos:column="10"/></name></type> <name pos:line="9" pos:column="11">rtp_dataleft<pos:position pos:line="9" pos:column="23"/></name></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt> <comment type="block" pos:line="9" pos:column="25">/* how much data left to parse in this round */</comment>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">char<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">scratch<pos:position pos:line="10" pos:column="16"/></name></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">CURLcode<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">result<pos:position pos:line="11" pos:column="18"/></name></decl>;<pos:position pos:line="11" pos:column="19"/></decl_stmt>

  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><name><name pos:line="13" pos:column="6">rtspc<pos:position pos:line="13" pos:column="11"/></name><operator pos:line="13" pos:column="11">-&gt;<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="13">rtp_buf<pos:position pos:line="13" pos:column="20"/></name></name></expr>)<pos:position pos:line="13" pos:column="21"/></condition><then pos:line="13" pos:column="21"> <block pos:line="13" pos:column="22">{
    <comment type="block" pos:line="14" pos:column="5">/* There was some leftover data the last time. Merge buffers */</comment>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">char<pos:position pos:line="15" pos:column="9"/></name> <modifier pos:line="15" pos:column="10">*<pos:position pos:line="15" pos:column="11"/></modifier></type><name pos:line="15" pos:column="11">newptr<pos:position pos:line="15" pos:column="17"/></name> <init pos:line="15" pos:column="18">= <expr><call><name pos:line="15" pos:column="20">realloc<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">(<argument><expr><name><name pos:line="15" pos:column="28">rtspc<pos:position pos:line="15" pos:column="33"/></name><operator pos:line="15" pos:column="33">-&gt;<pos:position pos:line="15" pos:column="38"/></operator><name pos:line="15" pos:column="35">rtp_buf<pos:position pos:line="15" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="44">rtspc<pos:position pos:line="15" pos:column="49"/></name><operator pos:line="15" pos:column="49">-&gt;<pos:position pos:line="15" pos:column="54"/></operator><name pos:line="15" pos:column="51">rtp_bufsize<pos:position pos:line="15" pos:column="62"/></name></name> <operator pos:line="15" pos:column="63">+<pos:position pos:line="15" pos:column="64"/></operator> <operator pos:line="15" pos:column="65">*<pos:position pos:line="15" pos:column="66"/></operator><name pos:line="15" pos:column="66">nread<pos:position pos:line="15" pos:column="71"/></name></expr></argument>)<pos:position pos:line="15" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="73"/></decl_stmt>
    <if pos:line="16" pos:column="5">if<condition pos:line="16" pos:column="7">(<expr><operator pos:line="16" pos:column="8">!<pos:position pos:line="16" pos:column="9"/></operator><name pos:line="16" pos:column="9">newptr<pos:position pos:line="16" pos:column="15"/></name></expr>)<pos:position pos:line="16" pos:column="16"/></condition><then pos:line="16" pos:column="16"> <block pos:line="16" pos:column="17">{
      <expr_stmt><expr><call><name pos:line="17" pos:column="7">Curl_safefree<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><name><name pos:line="17" pos:column="21">rtspc<pos:position pos:line="17" pos:column="26"/></name><operator pos:line="17" pos:column="26">-&gt;<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="28">rtp_buf<pos:position pos:line="17" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="18" pos:column="7">rtspc<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">rtp_buf<pos:position pos:line="18" pos:column="21"/></name></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="24">NULL<pos:position pos:line="18" pos:column="28"/></name></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="19" pos:column="7">rtspc<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">rtp_bufsize<pos:position pos:line="19" pos:column="25"/></name></name> <operator pos:line="19" pos:column="26">=<pos:position pos:line="19" pos:column="27"/></operator> <literal type="number" pos:line="19" pos:column="28">0<pos:position pos:line="19" pos:column="29"/></literal></expr>;<pos:position pos:line="19" pos:column="30"/></expr_stmt>
      <return pos:line="20" pos:column="7">return <expr><name pos:line="20" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="20" pos:column="33"/></name></expr>;<pos:position pos:line="20" pos:column="34"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">rtspc<pos:position pos:line="22" pos:column="10"/></name><operator pos:line="22" pos:column="10">-&gt;<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="12">rtp_buf<pos:position pos:line="22" pos:column="19"/></name></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <name pos:line="22" pos:column="22">newptr<pos:position pos:line="22" pos:column="28"/></name></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">memcpy<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><name><name pos:line="23" pos:column="12">rtspc<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">-&gt;<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="19">rtp_buf<pos:position pos:line="23" pos:column="26"/></name></name> <operator pos:line="23" pos:column="27">+<pos:position pos:line="23" pos:column="28"/></operator> <name><name pos:line="23" pos:column="29">rtspc<pos:position pos:line="23" pos:column="34"/></name><operator pos:line="23" pos:column="34">-&gt;<pos:position pos:line="23" pos:column="39"/></operator><name pos:line="23" pos:column="36">rtp_bufsize<pos:position pos:line="23" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="49">k<pos:position pos:line="23" pos:column="50"/></name><operator pos:line="23" pos:column="50">-&gt;<pos:position pos:line="23" pos:column="55"/></operator><name pos:line="23" pos:column="52">str<pos:position pos:line="23" pos:column="55"/></name></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="57">*<pos:position pos:line="23" pos:column="58"/></operator><name pos:line="23" pos:column="58">nread<pos:position pos:line="23" pos:column="63"/></name></expr></argument>)<pos:position pos:line="23" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">rtspc<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">-&gt;<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="12">rtp_bufsize<pos:position pos:line="24" pos:column="23"/></name></name> <operator pos:line="24" pos:column="24">+=<pos:position pos:line="24" pos:column="26"/></operator> <operator pos:line="24" pos:column="27">*<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="28">nread<pos:position pos:line="24" pos:column="33"/></name></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="25" pos:column="5">rtp<pos:position pos:line="25" pos:column="8"/></name> <operator pos:line="25" pos:column="9">=<pos:position pos:line="25" pos:column="10"/></operator> <name><name pos:line="25" pos:column="11">rtspc<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">-&gt;<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="18">rtp_buf<pos:position pos:line="25" pos:column="25"/></name></name></expr>;<pos:position pos:line="25" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="26" pos:column="5">rtp_dataleft<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">=<pos:position pos:line="26" pos:column="19"/></operator> <name><name pos:line="26" pos:column="20">rtspc<pos:position pos:line="26" pos:column="25"/></name><operator pos:line="26" pos:column="25">-&gt;<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="27">rtp_bufsize<pos:position pos:line="26" pos:column="38"/></name></name></expr>;<pos:position pos:line="26" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="27" pos:column="4"/></block></then>
  <else pos:line="28" pos:column="3">else <block pos:line="28" pos:column="8">{
    <comment type="block" pos:line="29" pos:column="5">/* Just parse the request buffer directly */</comment>
    <expr_stmt><expr><name pos:line="30" pos:column="5">rtp<pos:position pos:line="30" pos:column="8"/></name> <operator pos:line="30" pos:column="9">=<pos:position pos:line="30" pos:column="10"/></operator> <name><name pos:line="30" pos:column="11">k<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">-&gt;<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="14">str<pos:position pos:line="30" pos:column="17"/></name></name></expr>;<pos:position pos:line="30" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="31" pos:column="5">rtp_dataleft<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">=<pos:position pos:line="31" pos:column="19"/></operator> <operator pos:line="31" pos:column="20">*<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="21">nread<pos:position pos:line="31" pos:column="26"/></name></expr>;<pos:position pos:line="31" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="32" pos:column="4"/></block></else></if>

  <while pos:line="34" pos:column="3">while<condition pos:line="34" pos:column="8">(<expr><operator pos:line="34" pos:column="9">(<pos:position pos:line="34" pos:column="10"/></operator><name pos:line="34" pos:column="10">rtp_dataleft<pos:position pos:line="34" pos:column="22"/></name> <operator pos:line="34" pos:column="23">&gt;<pos:position pos:line="34" pos:column="27"/></operator> <literal type="number" pos:line="34" pos:column="25">0<pos:position pos:line="34" pos:column="26"/></literal><operator pos:line="34" pos:column="26">)<pos:position pos:line="34" pos:column="27"/></operator> <operator pos:line="34" pos:column="28">&amp;&amp;<pos:position pos:line="34" pos:column="38"/></operator>
        <operator pos:line="35" pos:column="9">(<pos:position pos:line="35" pos:column="10"/></operator><name><name pos:line="35" pos:column="10">rtp<pos:position pos:line="35" pos:column="13"/></name><index pos:line="35" pos:column="13">[<expr><literal type="number" pos:line="35" pos:column="14">0<pos:position pos:line="35" pos:column="15"/></literal></expr>]<pos:position pos:line="35" pos:column="16"/></index></name> <operator pos:line="35" pos:column="17">==<pos:position pos:line="35" pos:column="19"/></operator> <literal type="char" pos:line="35" pos:column="20">'$'<pos:position pos:line="35" pos:column="23"/></literal><operator pos:line="35" pos:column="23">)<pos:position pos:line="35" pos:column="24"/></operator></expr>)<pos:position pos:line="35" pos:column="25"/></condition> <block pos:line="35" pos:column="26">{
    <if pos:line="36" pos:column="5">if<condition pos:line="36" pos:column="7">(<expr><name pos:line="36" pos:column="8">rtp_dataleft<pos:position pos:line="36" pos:column="20"/></name> <operator pos:line="36" pos:column="21">&gt;<pos:position pos:line="36" pos:column="25"/></operator> <literal type="number" pos:line="36" pos:column="23">4<pos:position pos:line="36" pos:column="24"/></literal></expr>)<pos:position pos:line="36" pos:column="25"/></condition><then pos:line="36" pos:column="25"> <block pos:line="36" pos:column="26">{
      <decl_stmt><decl><type><name pos:line="37" pos:column="7">int<pos:position pos:line="37" pos:column="10"/></name></type> <name pos:line="37" pos:column="11">rtp_length<pos:position pos:line="37" pos:column="21"/></name></decl>;<pos:position pos:line="37" pos:column="22"/></decl_stmt>

      <comment type="block" pos:line="39" pos:column="7">/* Parse the header */</comment>
      <comment type="block" pos:line="40" pos:column="7">/* The channel identifier immediately follows and is 1 byte */</comment>
      <expr_stmt><expr><name><name pos:line="41" pos:column="7">rtspc<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">-&gt;<pos:position pos:line="41" pos:column="17"/></operator><name pos:line="41" pos:column="14">rtp_channel<pos:position pos:line="41" pos:column="25"/></name></name> <operator pos:line="41" pos:column="26">=<pos:position pos:line="41" pos:column="27"/></operator> <call><name pos:line="41" pos:column="28">RTP_PKT_CHANNEL<pos:position pos:line="41" pos:column="43"/></name><argument_list pos:line="41" pos:column="43">(<argument><expr><name pos:line="41" pos:column="44">rtp<pos:position pos:line="41" pos:column="47"/></name></expr></argument>)<pos:position pos:line="41" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="49"/></expr_stmt>

      <comment type="block" pos:line="43" pos:column="7">/* The length is two bytes */</comment>
      <expr_stmt><expr><name pos:line="44" pos:column="7">rtp_length<pos:position pos:line="44" pos:column="17"/></name> <operator pos:line="44" pos:column="18">=<pos:position pos:line="44" pos:column="19"/></operator> <call><name pos:line="44" pos:column="20">RTP_PKT_LENGTH<pos:position pos:line="44" pos:column="34"/></name><argument_list pos:line="44" pos:column="34">(<argument><expr><name pos:line="44" pos:column="35">rtp<pos:position pos:line="44" pos:column="38"/></name></expr></argument>)<pos:position pos:line="44" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="40"/></expr_stmt>

      <if pos:line="46" pos:column="7">if<condition pos:line="46" pos:column="9">(<expr><name pos:line="46" pos:column="10">rtp_dataleft<pos:position pos:line="46" pos:column="22"/></name> <operator pos:line="46" pos:column="23">&lt;<pos:position pos:line="46" pos:column="27"/></operator> <name pos:line="46" pos:column="25">rtp_length<pos:position pos:line="46" pos:column="35"/></name> <operator pos:line="46" pos:column="36">+<pos:position pos:line="46" pos:column="37"/></operator> <literal type="number" pos:line="46" pos:column="38">4<pos:position pos:line="46" pos:column="39"/></literal></expr>)<pos:position pos:line="46" pos:column="40"/></condition><then pos:line="46" pos:column="40"> <block pos:line="46" pos:column="41">{
        <comment type="block" pos:line="47" pos:column="9">/* Need more - incomplete payload*/</comment>
        <expr_stmt><expr><operator pos:line="48" pos:column="9">*<pos:position pos:line="48" pos:column="10"/></operator><name pos:line="48" pos:column="10">readmore<pos:position pos:line="48" pos:column="18"/></name> <operator pos:line="48" pos:column="19">=<pos:position pos:line="48" pos:column="20"/></operator> <name pos:line="48" pos:column="21">TRUE<pos:position pos:line="48" pos:column="25"/></name></expr>;<pos:position pos:line="48" pos:column="26"/></expr_stmt>
        <break pos:line="49" pos:column="9">break;<pos:position pos:line="49" pos:column="15"/></break>
      }<pos:position pos:line="50" pos:column="8"/></block></then>
      <else pos:line="51" pos:column="7">else <block pos:line="51" pos:column="12">{
        <comment type="block" pos:line="52" pos:column="9">/* We have the full RTP interleaved packet
         * Write out the header including the leading '$' */</comment>
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">DEBUGF<pos:position pos:line="54" pos:column="15"/></name><argument_list pos:line="54" pos:column="15">(<argument><expr><call><name pos:line="54" pos:column="16">infof<pos:position pos:line="54" pos:column="21"/></name><argument_list pos:line="54" pos:column="21">(<argument><expr><name pos:line="54" pos:column="22">data<pos:position pos:line="54" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="28">"RTP write channel %d rtp_length %d\n"<pos:position pos:line="54" pos:column="66"/></literal></expr></argument>,
              <argument><expr><name><name pos:line="55" pos:column="15">rtspc<pos:position pos:line="55" pos:column="20"/></name><operator pos:line="55" pos:column="20">-&gt;<pos:position pos:line="55" pos:column="25"/></operator><name pos:line="55" pos:column="22">rtp_channel<pos:position pos:line="55" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="35">rtp_length<pos:position pos:line="55" pos:column="45"/></name></expr></argument>)<pos:position pos:line="55" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="55" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><name pos:line="56" pos:column="9">result<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">=<pos:position pos:line="56" pos:column="17"/></operator> <call><name pos:line="56" pos:column="18">rtp_client_write<pos:position pos:line="56" pos:column="34"/></name><argument_list pos:line="56" pos:column="34">(<argument><expr><name pos:line="56" pos:column="35">conn<pos:position pos:line="56" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="41">&amp;<pos:position pos:line="56" pos:column="46"/></operator><name><name pos:line="56" pos:column="42">rtp<pos:position pos:line="56" pos:column="45"/></name><index pos:line="56" pos:column="45">[<expr><literal type="number" pos:line="56" pos:column="46">0<pos:position pos:line="56" pos:column="47"/></literal></expr>]<pos:position pos:line="56" pos:column="48"/></index></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="50">rtp_length<pos:position pos:line="56" pos:column="60"/></name> <operator pos:line="56" pos:column="61">+<pos:position pos:line="56" pos:column="62"/></operator> <literal type="number" pos:line="56" pos:column="63">4<pos:position pos:line="56" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="66"/></expr_stmt>
        <if pos:line="57" pos:column="9">if<condition pos:line="57" pos:column="11">(<expr><name pos:line="57" pos:column="12">result<pos:position pos:line="57" pos:column="18"/></name></expr>)<pos:position pos:line="57" pos:column="19"/></condition><then pos:line="57" pos:column="19"> <block pos:line="57" pos:column="20">{
          <expr_stmt><expr><call><name pos:line="58" pos:column="11">failf<pos:position pos:line="58" pos:column="16"/></name><argument_list pos:line="58" pos:column="16">(<argument><expr><name pos:line="58" pos:column="17">data<pos:position pos:line="58" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="23">"Got an error writing an RTP packet"<pos:position pos:line="58" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="61"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="59" pos:column="11">*<pos:position pos:line="59" pos:column="12"/></operator><name pos:line="59" pos:column="12">readmore<pos:position pos:line="59" pos:column="20"/></name> <operator pos:line="59" pos:column="21">=<pos:position pos:line="59" pos:column="22"/></operator> <name pos:line="59" pos:column="23">FALSE<pos:position pos:line="59" pos:column="28"/></name></expr>;<pos:position pos:line="59" pos:column="29"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="60" pos:column="11">Curl_safefree<pos:position pos:line="60" pos:column="24"/></name><argument_list pos:line="60" pos:column="24">(<argument><expr><name><name pos:line="60" pos:column="25">rtspc<pos:position pos:line="60" pos:column="30"/></name><operator pos:line="60" pos:column="30">-&gt;<pos:position pos:line="60" pos:column="35"/></operator><name pos:line="60" pos:column="32">rtp_buf<pos:position pos:line="60" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="41"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="61" pos:column="11">rtspc<pos:position pos:line="61" pos:column="16"/></name><operator pos:line="61" pos:column="16">-&gt;<pos:position pos:line="61" pos:column="21"/></operator><name pos:line="61" pos:column="18">rtp_buf<pos:position pos:line="61" pos:column="25"/></name></name> <operator pos:line="61" pos:column="26">=<pos:position pos:line="61" pos:column="27"/></operator> <name pos:line="61" pos:column="28">NULL<pos:position pos:line="61" pos:column="32"/></name></expr>;<pos:position pos:line="61" pos:column="33"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="62" pos:column="11">rtspc<pos:position pos:line="62" pos:column="16"/></name><operator pos:line="62" pos:column="16">-&gt;<pos:position pos:line="62" pos:column="21"/></operator><name pos:line="62" pos:column="18">rtp_bufsize<pos:position pos:line="62" pos:column="29"/></name></name> <operator pos:line="62" pos:column="30">=<pos:position pos:line="62" pos:column="31"/></operator> <literal type="number" pos:line="62" pos:column="32">0<pos:position pos:line="62" pos:column="33"/></literal></expr>;<pos:position pos:line="62" pos:column="34"/></expr_stmt>
          <return pos:line="63" pos:column="11">return <expr><name pos:line="63" pos:column="18">result<pos:position pos:line="63" pos:column="24"/></name></expr>;<pos:position pos:line="63" pos:column="25"/></return>
        }<pos:position pos:line="64" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="66" pos:column="9">/* Move forward in the buffer */</comment>
        <expr_stmt><expr><name pos:line="67" pos:column="9">rtp_dataleft<pos:position pos:line="67" pos:column="21"/></name> <operator pos:line="67" pos:column="22">-=<pos:position pos:line="67" pos:column="24"/></operator> <name pos:line="67" pos:column="25">rtp_length<pos:position pos:line="67" pos:column="35"/></name> <operator pos:line="67" pos:column="36">+<pos:position pos:line="67" pos:column="37"/></operator> <literal type="number" pos:line="67" pos:column="38">4<pos:position pos:line="67" pos:column="39"/></literal></expr>;<pos:position pos:line="67" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name pos:line="68" pos:column="9">rtp<pos:position pos:line="68" pos:column="12"/></name> <operator pos:line="68" pos:column="13">+=<pos:position pos:line="68" pos:column="15"/></operator> <name pos:line="68" pos:column="16">rtp_length<pos:position pos:line="68" pos:column="26"/></name> <operator pos:line="68" pos:column="27">+<pos:position pos:line="68" pos:column="28"/></operator> <literal type="number" pos:line="68" pos:column="29">4<pos:position pos:line="68" pos:column="30"/></literal></expr>;<pos:position pos:line="68" pos:column="31"/></expr_stmt>

        <if pos:line="70" pos:column="9">if<condition pos:line="70" pos:column="11">(<expr><name><name pos:line="70" pos:column="12">data<pos:position pos:line="70" pos:column="16"/></name><operator pos:line="70" pos:column="16">-&gt;<pos:position pos:line="70" pos:column="21"/></operator><name pos:line="70" pos:column="18">set<pos:position pos:line="70" pos:column="21"/></name><operator pos:line="70" pos:column="21">.<pos:position pos:line="70" pos:column="22"/></operator><name pos:line="70" pos:column="22">rtspreq<pos:position pos:line="70" pos:column="29"/></name></name> <operator pos:line="70" pos:column="30">==<pos:position pos:line="70" pos:column="32"/></operator> <name pos:line="70" pos:column="33">RTSPREQ_RECEIVE<pos:position pos:line="70" pos:column="48"/></name></expr>)<pos:position pos:line="70" pos:column="49"/></condition><then pos:line="70" pos:column="49"> <block pos:line="70" pos:column="50">{
          <comment type="block" pos:line="71" pos:column="11">/* If we are in a passive receive, give control back
           * to the app as often as we can.
           */</comment>
          <expr_stmt><expr><name><name pos:line="74" pos:column="11">k<pos:position pos:line="74" pos:column="12"/></name><operator pos:line="74" pos:column="12">-&gt;<pos:position pos:line="74" pos:column="17"/></operator><name pos:line="74" pos:column="14">keepon<pos:position pos:line="74" pos:column="20"/></name></name> <operator pos:line="74" pos:column="21">&amp;=<pos:position pos:line="74" pos:column="27"/></operator> <operator pos:line="74" pos:column="24">~<pos:position pos:line="74" pos:column="25"/></operator><name pos:line="74" pos:column="25">KEEP_RECV<pos:position pos:line="74" pos:column="34"/></name></expr>;<pos:position pos:line="74" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="75" pos:column="10"/></block></then></if>
      }<pos:position pos:line="76" pos:column="8"/></block></else></if>
    }<pos:position pos:line="77" pos:column="6"/></block></then>
    <else pos:line="78" pos:column="5">else <block pos:line="78" pos:column="10">{
      <comment type="block" pos:line="79" pos:column="7">/* Need more - incomplete header */</comment>
      <expr_stmt><expr><operator pos:line="80" pos:column="7">*<pos:position pos:line="80" pos:column="8"/></operator><name pos:line="80" pos:column="8">readmore<pos:position pos:line="80" pos:column="16"/></name> <operator pos:line="80" pos:column="17">=<pos:position pos:line="80" pos:column="18"/></operator> <name pos:line="80" pos:column="19">TRUE<pos:position pos:line="80" pos:column="23"/></name></expr>;<pos:position pos:line="80" pos:column="24"/></expr_stmt>
      <break pos:line="81" pos:column="7">break;<pos:position pos:line="81" pos:column="13"/></break>
    }<pos:position pos:line="82" pos:column="6"/></block></else></if>
  }<pos:position pos:line="83" pos:column="4"/></block></while>

  <if pos:line="85" pos:column="3">if<condition pos:line="85" pos:column="5">(<expr><name pos:line="85" pos:column="6">rtp_dataleft<pos:position pos:line="85" pos:column="18"/></name> <operator pos:line="85" pos:column="19">!=<pos:position pos:line="85" pos:column="21"/></operator> <literal type="number" pos:line="85" pos:column="22">0<pos:position pos:line="85" pos:column="23"/></literal> <operator pos:line="85" pos:column="24">&amp;&amp;<pos:position pos:line="85" pos:column="34"/></operator> <name><name pos:line="85" pos:column="27">rtp<pos:position pos:line="85" pos:column="30"/></name><index pos:line="85" pos:column="30">[<expr><literal type="number" pos:line="85" pos:column="31">0<pos:position pos:line="85" pos:column="32"/></literal></expr>]<pos:position pos:line="85" pos:column="33"/></index></name> <operator pos:line="85" pos:column="34">==<pos:position pos:line="85" pos:column="36"/></operator> <literal type="char" pos:line="85" pos:column="37">'$'<pos:position pos:line="85" pos:column="40"/></literal></expr>)<pos:position pos:line="85" pos:column="41"/></condition><then pos:line="85" pos:column="41"> <block pos:line="85" pos:column="42">{
    <expr_stmt><expr><call><name pos:line="86" pos:column="5">DEBUGF<pos:position pos:line="86" pos:column="11"/></name><argument_list pos:line="86" pos:column="11">(<argument><expr><call><name pos:line="86" pos:column="12">infof<pos:position pos:line="86" pos:column="17"/></name><argument_list pos:line="86" pos:column="17">(<argument><expr><name pos:line="86" pos:column="18">data<pos:position pos:line="86" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="24">"RTP Rewinding %zd %s\n"<pos:position pos:line="86" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="50">rtp_dataleft<pos:position pos:line="86" pos:column="62"/></name></expr></argument>,
          <argument><expr><ternary><condition><expr><operator pos:line="87" pos:column="11">*<pos:position pos:line="87" pos:column="12"/></operator><name pos:line="87" pos:column="12">readmore<pos:position pos:line="87" pos:column="20"/></name></expr> ?<pos:position pos:line="87" pos:column="22"/></condition><then pos:line="87" pos:column="22"> <expr><literal type="string" pos:line="87" pos:column="23">"(READMORE)"<pos:position pos:line="87" pos:column="35"/></literal></expr> <pos:position pos:line="87" pos:column="36"/></then><else pos:line="87" pos:column="36">: <expr><literal type="string" pos:line="87" pos:column="38">""<pos:position pos:line="87" pos:column="40"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="87" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="87" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="43"/></expr_stmt>

    <comment type="block" pos:line="89" pos:column="5">/* Store the incomplete RTP packet for a "rewind" */</comment>
    <expr_stmt><expr><name pos:line="90" pos:column="5">scratch<pos:position pos:line="90" pos:column="12"/></name> <operator pos:line="90" pos:column="13">=<pos:position pos:line="90" pos:column="14"/></operator> <call><name pos:line="90" pos:column="15">malloc<pos:position pos:line="90" pos:column="21"/></name><argument_list pos:line="90" pos:column="21">(<argument><expr><name pos:line="90" pos:column="22">rtp_dataleft<pos:position pos:line="90" pos:column="34"/></name></expr></argument>)<pos:position pos:line="90" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="36"/></expr_stmt>
    <if pos:line="91" pos:column="5">if<condition pos:line="91" pos:column="7">(<expr><operator pos:line="91" pos:column="8">!<pos:position pos:line="91" pos:column="9"/></operator><name pos:line="91" pos:column="9">scratch<pos:position pos:line="91" pos:column="16"/></name></expr>)<pos:position pos:line="91" pos:column="17"/></condition><then pos:line="91" pos:column="17"> <block pos:line="91" pos:column="18">{
      <expr_stmt><expr><call><name pos:line="92" pos:column="7">Curl_safefree<pos:position pos:line="92" pos:column="20"/></name><argument_list pos:line="92" pos:column="20">(<argument><expr><name><name pos:line="92" pos:column="21">rtspc<pos:position pos:line="92" pos:column="26"/></name><operator pos:line="92" pos:column="26">-&gt;<pos:position pos:line="92" pos:column="31"/></operator><name pos:line="92" pos:column="28">rtp_buf<pos:position pos:line="92" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="93" pos:column="7">rtspc<pos:position pos:line="93" pos:column="12"/></name><operator pos:line="93" pos:column="12">-&gt;<pos:position pos:line="93" pos:column="17"/></operator><name pos:line="93" pos:column="14">rtp_buf<pos:position pos:line="93" pos:column="21"/></name></name> <operator pos:line="93" pos:column="22">=<pos:position pos:line="93" pos:column="23"/></operator> <name pos:line="93" pos:column="24">NULL<pos:position pos:line="93" pos:column="28"/></name></expr>;<pos:position pos:line="93" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="94" pos:column="7">rtspc<pos:position pos:line="94" pos:column="12"/></name><operator pos:line="94" pos:column="12">-&gt;<pos:position pos:line="94" pos:column="17"/></operator><name pos:line="94" pos:column="14">rtp_bufsize<pos:position pos:line="94" pos:column="25"/></name></name> <operator pos:line="94" pos:column="26">=<pos:position pos:line="94" pos:column="27"/></operator> <literal type="number" pos:line="94" pos:column="28">0<pos:position pos:line="94" pos:column="29"/></literal></expr>;<pos:position pos:line="94" pos:column="30"/></expr_stmt>
      <return pos:line="95" pos:column="7">return <expr><name pos:line="95" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="95" pos:column="33"/></name></expr>;<pos:position pos:line="95" pos:column="34"/></return>
    }<pos:position pos:line="96" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="97" pos:column="5">memcpy<pos:position pos:line="97" pos:column="11"/></name><argument_list pos:line="97" pos:column="11">(<argument><expr><name pos:line="97" pos:column="12">scratch<pos:position pos:line="97" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="21">rtp<pos:position pos:line="97" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="26">rtp_dataleft<pos:position pos:line="97" pos:column="38"/></name></expr></argument>)<pos:position pos:line="97" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="98" pos:column="5">Curl_safefree<pos:position pos:line="98" pos:column="18"/></name><argument_list pos:line="98" pos:column="18">(<argument><expr><name><name pos:line="98" pos:column="19">rtspc<pos:position pos:line="98" pos:column="24"/></name><operator pos:line="98" pos:column="24">-&gt;<pos:position pos:line="98" pos:column="29"/></operator><name pos:line="98" pos:column="26">rtp_buf<pos:position pos:line="98" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="98" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="99" pos:column="5">rtspc<pos:position pos:line="99" pos:column="10"/></name><operator pos:line="99" pos:column="10">-&gt;<pos:position pos:line="99" pos:column="15"/></operator><name pos:line="99" pos:column="12">rtp_buf<pos:position pos:line="99" pos:column="19"/></name></name> <operator pos:line="99" pos:column="20">=<pos:position pos:line="99" pos:column="21"/></operator> <name pos:line="99" pos:column="22">scratch<pos:position pos:line="99" pos:column="29"/></name></expr>;<pos:position pos:line="99" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="100" pos:column="5">rtspc<pos:position pos:line="100" pos:column="10"/></name><operator pos:line="100" pos:column="10">-&gt;<pos:position pos:line="100" pos:column="15"/></operator><name pos:line="100" pos:column="12">rtp_bufsize<pos:position pos:line="100" pos:column="23"/></name></name> <operator pos:line="100" pos:column="24">=<pos:position pos:line="100" pos:column="25"/></operator> <name pos:line="100" pos:column="26">rtp_dataleft<pos:position pos:line="100" pos:column="38"/></name></expr>;<pos:position pos:line="100" pos:column="39"/></expr_stmt>

    <comment type="block" pos:line="102" pos:column="5">/* As far as the transfer is concerned, this data is consumed */</comment>
    <expr_stmt><expr><operator pos:line="103" pos:column="5">*<pos:position pos:line="103" pos:column="6"/></operator><name pos:line="103" pos:column="6">nread<pos:position pos:line="103" pos:column="11"/></name> <operator pos:line="103" pos:column="12">=<pos:position pos:line="103" pos:column="13"/></operator> <literal type="number" pos:line="103" pos:column="14">0<pos:position pos:line="103" pos:column="15"/></literal></expr>;<pos:position pos:line="103" pos:column="16"/></expr_stmt>
    <return pos:line="104" pos:column="5">return <expr><name pos:line="104" pos:column="12">CURLE_OK<pos:position pos:line="104" pos:column="20"/></name></expr>;<pos:position pos:line="104" pos:column="21"/></return>
  }<pos:position pos:line="105" pos:column="4"/></block></then>
  <else pos:line="106" pos:column="3">else <block pos:line="106" pos:column="8">{
    <comment type="block" pos:line="107" pos:column="5">/* Fix up k-&gt;str to point just after the last RTP packet */</comment>
    <expr_stmt><expr><name><name pos:line="108" pos:column="5">k<pos:position pos:line="108" pos:column="6"/></name><operator pos:line="108" pos:column="6">-&gt;<pos:position pos:line="108" pos:column="11"/></operator><name pos:line="108" pos:column="8">str<pos:position pos:line="108" pos:column="11"/></name></name> <operator pos:line="108" pos:column="12">+=<pos:position pos:line="108" pos:column="14"/></operator> <operator pos:line="108" pos:column="15">*<pos:position pos:line="108" pos:column="16"/></operator><name pos:line="108" pos:column="16">nread<pos:position pos:line="108" pos:column="21"/></name> <operator pos:line="108" pos:column="22">-<pos:position pos:line="108" pos:column="23"/></operator> <name pos:line="108" pos:column="24">rtp_dataleft<pos:position pos:line="108" pos:column="36"/></name></expr>;<pos:position pos:line="108" pos:column="37"/></expr_stmt>

    <comment type="block" pos:line="110" pos:column="5">/* either all of the data has been read or...
     * rtp now points at the next byte to parse
     */</comment>
    <if pos:line="113" pos:column="5">if<condition pos:line="113" pos:column="7">(<expr><name pos:line="113" pos:column="8">rtp_dataleft<pos:position pos:line="113" pos:column="20"/></name> <operator pos:line="113" pos:column="21">&gt;<pos:position pos:line="113" pos:column="25"/></operator> <literal type="number" pos:line="113" pos:column="23">0<pos:position pos:line="113" pos:column="24"/></literal></expr>)<pos:position pos:line="113" pos:column="25"/></condition><then pos:line="113" pos:column="25">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="114" pos:column="7">DEBUGASSERT<pos:position pos:line="114" pos:column="18"/></name><argument_list pos:line="114" pos:column="18">(<argument><expr><name><name pos:line="114" pos:column="19">k<pos:position pos:line="114" pos:column="20"/></name><operator pos:line="114" pos:column="20">-&gt;<pos:position pos:line="114" pos:column="25"/></operator><name pos:line="114" pos:column="22">str<pos:position pos:line="114" pos:column="25"/></name><index pos:line="114" pos:column="25">[<expr><literal type="number" pos:line="114" pos:column="26">0<pos:position pos:line="114" pos:column="27"/></literal></expr>]<pos:position pos:line="114" pos:column="28"/></index></name> <operator pos:line="114" pos:column="29">==<pos:position pos:line="114" pos:column="31"/></operator> <name><name pos:line="114" pos:column="32">rtp<pos:position pos:line="114" pos:column="35"/></name><index pos:line="114" pos:column="35">[<expr><literal type="number" pos:line="114" pos:column="36">0<pos:position pos:line="114" pos:column="37"/></literal></expr>]<pos:position pos:line="114" pos:column="38"/></index></name></expr></argument>)<pos:position pos:line="114" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="40"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="116" pos:column="5">DEBUGASSERT<pos:position pos:line="116" pos:column="16"/></name><argument_list pos:line="116" pos:column="16">(<argument><expr><name pos:line="116" pos:column="17">rtp_dataleft<pos:position pos:line="116" pos:column="29"/></name> <operator pos:line="116" pos:column="30">&lt;=<pos:position pos:line="116" pos:column="35"/></operator> <operator pos:line="116" pos:column="33">*<pos:position pos:line="116" pos:column="34"/></operator><name pos:line="116" pos:column="34">nread<pos:position pos:line="116" pos:column="39"/></name></expr></argument>)<pos:position pos:line="116" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="41"/></expr_stmt> <comment type="block" pos:line="116" pos:column="42">/* sanity check */</comment>

    <expr_stmt><expr><operator pos:line="118" pos:column="5">*<pos:position pos:line="118" pos:column="6"/></operator><name pos:line="118" pos:column="6">nread<pos:position pos:line="118" pos:column="11"/></name> <operator pos:line="118" pos:column="12">=<pos:position pos:line="118" pos:column="13"/></operator> <name pos:line="118" pos:column="14">rtp_dataleft<pos:position pos:line="118" pos:column="26"/></name></expr>;<pos:position pos:line="118" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="119" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="121" pos:column="3">/* If we get here, we have finished with the leftover/merge buffer */</comment>
  <expr_stmt><expr><call><name pos:line="122" pos:column="3">Curl_safefree<pos:position pos:line="122" pos:column="16"/></name><argument_list pos:line="122" pos:column="16">(<argument><expr><name><name pos:line="122" pos:column="17">rtspc<pos:position pos:line="122" pos:column="22"/></name><operator pos:line="122" pos:column="22">-&gt;<pos:position pos:line="122" pos:column="27"/></operator><name pos:line="122" pos:column="24">rtp_buf<pos:position pos:line="122" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="122" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="123" pos:column="3">rtspc<pos:position pos:line="123" pos:column="8"/></name><operator pos:line="123" pos:column="8">-&gt;<pos:position pos:line="123" pos:column="13"/></operator><name pos:line="123" pos:column="10">rtp_buf<pos:position pos:line="123" pos:column="17"/></name></name> <operator pos:line="123" pos:column="18">=<pos:position pos:line="123" pos:column="19"/></operator> <name pos:line="123" pos:column="20">NULL<pos:position pos:line="123" pos:column="24"/></name></expr>;<pos:position pos:line="123" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="124" pos:column="3">rtspc<pos:position pos:line="124" pos:column="8"/></name><operator pos:line="124" pos:column="8">-&gt;<pos:position pos:line="124" pos:column="13"/></operator><name pos:line="124" pos:column="10">rtp_bufsize<pos:position pos:line="124" pos:column="21"/></name></name> <operator pos:line="124" pos:column="22">=<pos:position pos:line="124" pos:column="23"/></operator> <literal type="number" pos:line="124" pos:column="24">0<pos:position pos:line="124" pos:column="25"/></literal></expr>;<pos:position pos:line="124" pos:column="26"/></expr_stmt>

  <return pos:line="126" pos:column="3">return <expr><name pos:line="126" pos:column="10">CURLE_OK<pos:position pos:line="126" pos:column="18"/></name></expr>;<pos:position pos:line="126" pos:column="19"/></return>
}<pos:position pos:line="127" pos:column="2"/></block></function></unit>
