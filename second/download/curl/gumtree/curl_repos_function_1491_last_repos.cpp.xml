<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1491_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">parse_connect_to_host_port<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name><name pos:line="1" pos:column="44">struct<pos:position pos:line="1" pos:column="50"/></name> <name pos:line="1" pos:column="51">Curl_easy<pos:position pos:line="1" pos:column="60"/></name></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">data<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>,
                                           <parameter><decl><type><specifier pos:line="2" pos:column="44">const<pos:position pos:line="2" pos:column="49"/></specifier> <name pos:line="2" pos:column="50">char<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">host<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>,
                                           <parameter><decl><type><name pos:line="3" pos:column="44">char<pos:position pos:line="3" pos:column="48"/></name> <modifier pos:line="3" pos:column="49">*<pos:position pos:line="3" pos:column="50"/></modifier><modifier pos:line="3" pos:column="50">*<pos:position pos:line="3" pos:column="51"/></modifier></type><name pos:line="3" pos:column="51">hostname_result<pos:position pos:line="3" pos:column="66"/></name></decl></parameter>,
                                           <parameter><decl><type><name pos:line="4" pos:column="44">int<pos:position pos:line="4" pos:column="47"/></name> <modifier pos:line="4" pos:column="48">*<pos:position pos:line="4" pos:column="49"/></modifier></type><name pos:line="4" pos:column="49">port_result<pos:position pos:line="4" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="61"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">host_dup<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">hostptr<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">host_portno<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">portptr<pos:position pos:line="9" pos:column="16"/></name></decl>;<pos:position pos:line="9" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">port<pos:position pos:line="10" pos:column="11"/></name> <init pos:line="10" pos:column="12">= <expr><operator pos:line="10" pos:column="14">-<pos:position pos:line="10" pos:column="15"/></operator><literal type="number" pos:line="10" pos:column="15">1<pos:position pos:line="10" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>

<cpp:if pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">if<pos:position pos:line="12" pos:column="4"/></cpp:directive> <expr><call><name pos:line="12" pos:column="5">defined<pos:position pos:line="12" pos:column="12"/></name><argument_list pos:line="12" pos:column="12">(<argument><expr><name pos:line="12" pos:column="13">CURL_DISABLE_VERBOSE_STRINGS<pos:position pos:line="12" pos:column="41"/></name></expr></argument>)<pos:position pos:line="12" pos:column="42"/></argument_list></call></expr></cpp:if>
  <expr_stmt><expr><operator pos:line="13" pos:column="3">(<pos:position pos:line="13" pos:column="4"/></operator><name pos:line="13" pos:column="4">void<pos:position pos:line="13" pos:column="8"/></name><operator pos:line="13" pos:column="8">)<pos:position pos:line="13" pos:column="9"/></operator> <name pos:line="13" pos:column="10">data<pos:position pos:line="13" pos:column="14"/></name></expr>;<pos:position pos:line="13" pos:column="15"/></expr_stmt>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><operator pos:line="16" pos:column="3">*<pos:position pos:line="16" pos:column="4"/></operator><name pos:line="16" pos:column="4">hostname_result<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <name pos:line="16" pos:column="22">NULL<pos:position pos:line="16" pos:column="26"/></name></expr>;<pos:position pos:line="16" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="17" pos:column="3">*<pos:position pos:line="17" pos:column="4"/></operator><name pos:line="17" pos:column="4">port_result<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <operator pos:line="17" pos:column="18">-<pos:position pos:line="17" pos:column="19"/></operator><literal type="number" pos:line="17" pos:column="19">1<pos:position pos:line="17" pos:column="20"/></literal></expr>;<pos:position pos:line="17" pos:column="21"/></expr_stmt>

  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><operator pos:line="19" pos:column="6">!<pos:position pos:line="19" pos:column="7"/></operator><name pos:line="19" pos:column="7">host<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">||<pos:position pos:line="19" pos:column="14"/></operator> <operator pos:line="19" pos:column="15">!<pos:position pos:line="19" pos:column="16"/></operator><operator pos:line="19" pos:column="16">*<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">host<pos:position pos:line="19" pos:column="21"/></name></expr>)<pos:position pos:line="19" pos:column="22"/></condition><then pos:line="19" pos:column="22">
    <block type="pseudo"><return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">CURLE_OK<pos:position pos:line="20" pos:column="20"/></name></expr>;<pos:position pos:line="20" pos:column="21"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="22" pos:column="3">host_dup<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <call><name pos:line="22" pos:column="14">strdup<pos:position pos:line="22" pos:column="20"/></name><argument_list pos:line="22" pos:column="20">(<argument><expr><name pos:line="22" pos:column="21">host<pos:position pos:line="22" pos:column="25"/></name></expr></argument>)<pos:position pos:line="22" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="27"/></expr_stmt>
  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><operator pos:line="23" pos:column="6">!<pos:position pos:line="23" pos:column="7"/></operator><name pos:line="23" pos:column="7">host_dup<pos:position pos:line="23" pos:column="15"/></name></expr>)<pos:position pos:line="23" pos:column="16"/></condition><then pos:line="23" pos:column="16">
    <block type="pseudo"><return pos:line="24" pos:column="5">return <expr><name pos:line="24" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="24" pos:column="31"/></name></expr>;<pos:position pos:line="24" pos:column="32"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="26" pos:column="3">hostptr<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">=<pos:position pos:line="26" pos:column="12"/></operator> <name pos:line="26" pos:column="13">host_dup<pos:position pos:line="26" pos:column="21"/></name></expr>;<pos:position pos:line="26" pos:column="22"/></expr_stmt>

  <comment type="block" pos:line="28" pos:column="3">/* start scanning for port number at this point */</comment>
  <expr_stmt><expr><name pos:line="29" pos:column="3">portptr<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">=<pos:position pos:line="29" pos:column="12"/></operator> <name pos:line="29" pos:column="13">hostptr<pos:position pos:line="29" pos:column="20"/></name></expr>;<pos:position pos:line="29" pos:column="21"/></expr_stmt>

  <comment type="block" pos:line="31" pos:column="3">/* detect and extract RFC6874-style IPv6-addresses */</comment>
  <if pos:line="32" pos:column="3">if<condition pos:line="32" pos:column="5">(<expr><operator pos:line="32" pos:column="6">*<pos:position pos:line="32" pos:column="7"/></operator><name pos:line="32" pos:column="7">hostptr<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">==<pos:position pos:line="32" pos:column="17"/></operator> <literal type="char" pos:line="32" pos:column="18">'['<pos:position pos:line="32" pos:column="21"/></literal></expr>)<pos:position pos:line="32" pos:column="22"/></condition><then pos:line="32" pos:column="22"> <block pos:line="32" pos:column="23">{
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">char<pos:position pos:line="33" pos:column="9"/></name> <modifier pos:line="33" pos:column="10">*<pos:position pos:line="33" pos:column="11"/></modifier></type><name pos:line="33" pos:column="11">ptr<pos:position pos:line="33" pos:column="14"/></name> <init pos:line="33" pos:column="15">= <expr><operator pos:line="33" pos:column="17">++<pos:position pos:line="33" pos:column="19"/></operator><name pos:line="33" pos:column="19">hostptr<pos:position pos:line="33" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="33" pos:column="27"/></decl_stmt> <comment type="block" pos:line="33" pos:column="28">/* advance beyond the initial bracket */</comment>
    <while pos:line="34" pos:column="5">while<condition pos:line="34" pos:column="10">(<expr><operator pos:line="34" pos:column="11">*<pos:position pos:line="34" pos:column="12"/></operator><name pos:line="34" pos:column="12">ptr<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">&amp;&amp;<pos:position pos:line="34" pos:column="26"/></operator> <operator pos:line="34" pos:column="19">(<pos:position pos:line="34" pos:column="20"/></operator><call><name pos:line="34" pos:column="20">ISXDIGIT<pos:position pos:line="34" pos:column="28"/></name><argument_list pos:line="34" pos:column="28">(<argument><expr><operator pos:line="34" pos:column="29">*<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="30">ptr<pos:position pos:line="34" pos:column="33"/></name></expr></argument>)<pos:position pos:line="34" pos:column="34"/></argument_list></call> <operator pos:line="34" pos:column="35">||<pos:position pos:line="34" pos:column="37"/></operator> <operator pos:line="34" pos:column="38">(<pos:position pos:line="34" pos:column="39"/></operator><operator pos:line="34" pos:column="39">*<pos:position pos:line="34" pos:column="40"/></operator><name pos:line="34" pos:column="40">ptr<pos:position pos:line="34" pos:column="43"/></name> <operator pos:line="34" pos:column="44">==<pos:position pos:line="34" pos:column="46"/></operator> <literal type="char" pos:line="34" pos:column="47">':'<pos:position pos:line="34" pos:column="50"/></literal><operator pos:line="34" pos:column="50">)<pos:position pos:line="34" pos:column="51"/></operator> <operator pos:line="34" pos:column="52">||<pos:position pos:line="34" pos:column="54"/></operator> <operator pos:line="34" pos:column="55">(<pos:position pos:line="34" pos:column="56"/></operator><operator pos:line="34" pos:column="56">*<pos:position pos:line="34" pos:column="57"/></operator><name pos:line="34" pos:column="57">ptr<pos:position pos:line="34" pos:column="60"/></name> <operator pos:line="34" pos:column="61">==<pos:position pos:line="34" pos:column="63"/></operator> <literal type="char" pos:line="34" pos:column="64">'.'<pos:position pos:line="34" pos:column="67"/></literal><operator pos:line="34" pos:column="67">)<pos:position pos:line="34" pos:column="68"/></operator><operator pos:line="34" pos:column="68">)<pos:position pos:line="34" pos:column="69"/></operator></expr>)<pos:position pos:line="34" pos:column="70"/></condition>
      <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="7">ptr<pos:position pos:line="35" pos:column="10"/></name><operator pos:line="35" pos:column="10">++<pos:position pos:line="35" pos:column="12"/></operator></expr>;<pos:position pos:line="35" pos:column="13"/></expr_stmt></block></while>
    <if pos:line="36" pos:column="5">if<condition pos:line="36" pos:column="7">(<expr><operator pos:line="36" pos:column="8">*<pos:position pos:line="36" pos:column="9"/></operator><name pos:line="36" pos:column="9">ptr<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">==<pos:position pos:line="36" pos:column="15"/></operator> <literal type="char" pos:line="36" pos:column="16">'%'<pos:position pos:line="36" pos:column="19"/></literal></expr>)<pos:position pos:line="36" pos:column="20"/></condition><then pos:line="36" pos:column="20"> <block pos:line="36" pos:column="21">{
      <comment type="block" pos:line="37" pos:column="7">/* There might be a zone identifier */</comment>
      <if pos:line="38" pos:column="7">if<condition pos:line="38" pos:column="9">(<expr><call><name pos:line="38" pos:column="10">strncmp<pos:position pos:line="38" pos:column="17"/></name><argument_list pos:line="38" pos:column="17">(<argument><expr><literal type="string" pos:line="38" pos:column="18">"%25"<pos:position pos:line="38" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="25">ptr<pos:position pos:line="38" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="30">3<pos:position pos:line="38" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="33"/></condition><then pos:line="38" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="9">infof<pos:position pos:line="39" pos:column="14"/></name><argument_list pos:line="39" pos:column="14">(<argument><expr><name pos:line="39" pos:column="15">data<pos:position pos:line="39" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="21">"Please URL encode %% as %%25, see RFC 6874.\n"<pos:position pos:line="39" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="70"/></expr_stmt></block></then></if>
      <expr_stmt><expr><name pos:line="40" pos:column="7">ptr<pos:position pos:line="40" pos:column="10"/></name><operator pos:line="40" pos:column="10">++<pos:position pos:line="40" pos:column="12"/></operator></expr>;<pos:position pos:line="40" pos:column="13"/></expr_stmt>
      <comment type="block" pos:line="41" pos:column="7">/* Allow unreserved characters as defined in RFC 3986 */</comment>
      <while pos:line="42" pos:column="7">while<condition pos:line="42" pos:column="12">(<expr><operator pos:line="42" pos:column="13">*<pos:position pos:line="42" pos:column="14"/></operator><name pos:line="42" pos:column="14">ptr<pos:position pos:line="42" pos:column="17"/></name> <operator pos:line="42" pos:column="18">&amp;&amp;<pos:position pos:line="42" pos:column="28"/></operator> <operator pos:line="42" pos:column="21">(<pos:position pos:line="42" pos:column="22"/></operator><call><name pos:line="42" pos:column="22">ISALPHA<pos:position pos:line="42" pos:column="29"/></name><argument_list pos:line="42" pos:column="29">(<argument><expr><operator pos:line="42" pos:column="30">*<pos:position pos:line="42" pos:column="31"/></operator><name pos:line="42" pos:column="31">ptr<pos:position pos:line="42" pos:column="34"/></name></expr></argument>)<pos:position pos:line="42" pos:column="35"/></argument_list></call> <operator pos:line="42" pos:column="36">||<pos:position pos:line="42" pos:column="38"/></operator> <call><name pos:line="42" pos:column="39">ISXDIGIT<pos:position pos:line="42" pos:column="47"/></name><argument_list pos:line="42" pos:column="47">(<argument><expr><operator pos:line="42" pos:column="48">*<pos:position pos:line="42" pos:column="49"/></operator><name pos:line="42" pos:column="49">ptr<pos:position pos:line="42" pos:column="52"/></name></expr></argument>)<pos:position pos:line="42" pos:column="53"/></argument_list></call> <operator pos:line="42" pos:column="54">||<pos:position pos:line="42" pos:column="56"/></operator> <operator pos:line="42" pos:column="57">(<pos:position pos:line="42" pos:column="58"/></operator><operator pos:line="42" pos:column="58">*<pos:position pos:line="42" pos:column="59"/></operator><name pos:line="42" pos:column="59">ptr<pos:position pos:line="42" pos:column="62"/></name> <operator pos:line="42" pos:column="63">==<pos:position pos:line="42" pos:column="65"/></operator> <literal type="char" pos:line="42" pos:column="66">'-'<pos:position pos:line="42" pos:column="69"/></literal><operator pos:line="42" pos:column="69">)<pos:position pos:line="42" pos:column="70"/></operator> <operator pos:line="42" pos:column="71">||<pos:position pos:line="42" pos:column="73"/></operator>
                     <operator pos:line="43" pos:column="22">(<pos:position pos:line="43" pos:column="23"/></operator><operator pos:line="43" pos:column="23">*<pos:position pos:line="43" pos:column="24"/></operator><name pos:line="43" pos:column="24">ptr<pos:position pos:line="43" pos:column="27"/></name> <operator pos:line="43" pos:column="28">==<pos:position pos:line="43" pos:column="30"/></operator> <literal type="char" pos:line="43" pos:column="31">'.'<pos:position pos:line="43" pos:column="34"/></literal><operator pos:line="43" pos:column="34">)<pos:position pos:line="43" pos:column="35"/></operator> <operator pos:line="43" pos:column="36">||<pos:position pos:line="43" pos:column="38"/></operator> <operator pos:line="43" pos:column="39">(<pos:position pos:line="43" pos:column="40"/></operator><operator pos:line="43" pos:column="40">*<pos:position pos:line="43" pos:column="41"/></operator><name pos:line="43" pos:column="41">ptr<pos:position pos:line="43" pos:column="44"/></name> <operator pos:line="43" pos:column="45">==<pos:position pos:line="43" pos:column="47"/></operator> <literal type="char" pos:line="43" pos:column="48">'_'<pos:position pos:line="43" pos:column="51"/></literal><operator pos:line="43" pos:column="51">)<pos:position pos:line="43" pos:column="52"/></operator> <operator pos:line="43" pos:column="53">||<pos:position pos:line="43" pos:column="55"/></operator> <operator pos:line="43" pos:column="56">(<pos:position pos:line="43" pos:column="57"/></operator><operator pos:line="43" pos:column="57">*<pos:position pos:line="43" pos:column="58"/></operator><name pos:line="43" pos:column="58">ptr<pos:position pos:line="43" pos:column="61"/></name> <operator pos:line="43" pos:column="62">==<pos:position pos:line="43" pos:column="64"/></operator> <literal type="char" pos:line="43" pos:column="65">'~'<pos:position pos:line="43" pos:column="68"/></literal><operator pos:line="43" pos:column="68">)<pos:position pos:line="43" pos:column="69"/></operator><operator pos:line="43" pos:column="69">)<pos:position pos:line="43" pos:column="70"/></operator></expr>)<pos:position pos:line="43" pos:column="71"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="9">ptr<pos:position pos:line="44" pos:column="12"/></name><operator pos:line="44" pos:column="12">++<pos:position pos:line="44" pos:column="14"/></operator></expr>;<pos:position pos:line="44" pos:column="15"/></expr_stmt></block></while>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>
    <if pos:line="46" pos:column="5">if<condition pos:line="46" pos:column="7">(<expr><operator pos:line="46" pos:column="8">*<pos:position pos:line="46" pos:column="9"/></operator><name pos:line="46" pos:column="9">ptr<pos:position pos:line="46" pos:column="12"/></name> <operator pos:line="46" pos:column="13">==<pos:position pos:line="46" pos:column="15"/></operator> <literal type="char" pos:line="46" pos:column="16">']'<pos:position pos:line="46" pos:column="19"/></literal></expr>)<pos:position pos:line="46" pos:column="20"/></condition><then pos:line="46" pos:column="20">
      <comment type="block" pos:line="47" pos:column="7">/* yeps, it ended nicely with a bracket as well */</comment>
      <block type="pseudo"><expr_stmt><expr><operator pos:line="48" pos:column="7">*<pos:position pos:line="48" pos:column="8"/></operator><name pos:line="48" pos:column="8">ptr<pos:position pos:line="48" pos:column="11"/></name><operator pos:line="48" pos:column="11">++<pos:position pos:line="48" pos:column="13"/></operator> <operator pos:line="48" pos:column="14">=<pos:position pos:line="48" pos:column="15"/></operator> <literal type="char" pos:line="48" pos:column="16">'\0'<pos:position pos:line="48" pos:column="20"/></literal></expr>;<pos:position pos:line="48" pos:column="21"/></expr_stmt></block></then>
    <else pos:line="49" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="7">infof<pos:position pos:line="50" pos:column="12"/></name><argument_list pos:line="50" pos:column="12">(<argument><expr><name pos:line="50" pos:column="13">data<pos:position pos:line="50" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="19">"Invalid IPv6 address format\n"<pos:position pos:line="50" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="52"/></expr_stmt></block></else></if>
    <expr_stmt><expr><name pos:line="51" pos:column="5">portptr<pos:position pos:line="51" pos:column="12"/></name> <operator pos:line="51" pos:column="13">=<pos:position pos:line="51" pos:column="14"/></operator> <name pos:line="51" pos:column="15">ptr<pos:position pos:line="51" pos:column="18"/></name></expr>;<pos:position pos:line="51" pos:column="19"/></expr_stmt>
    <comment type="block" pos:line="52" pos:column="5">/* Note that if this didn't end with a bracket, we still advanced the
     * hostptr first, but I can't see anything wrong with that as no host
     * name nor a numeric can legally start with a bracket.
     */</comment>
  }<pos:position pos:line="56" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="58" pos:column="3">/* Get port number off server.com:1080 */</comment>
  <expr_stmt><expr><name pos:line="59" pos:column="3">host_portno<pos:position pos:line="59" pos:column="14"/></name> <operator pos:line="59" pos:column="15">=<pos:position pos:line="59" pos:column="16"/></operator> <call><name pos:line="59" pos:column="17">strchr<pos:position pos:line="59" pos:column="23"/></name><argument_list pos:line="59" pos:column="23">(<argument><expr><name pos:line="59" pos:column="24">portptr<pos:position pos:line="59" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="59" pos:column="33">':'<pos:position pos:line="59" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="38"/></expr_stmt>
  <if pos:line="60" pos:column="3">if<condition pos:line="60" pos:column="5">(<expr><name pos:line="60" pos:column="6">host_portno<pos:position pos:line="60" pos:column="17"/></name></expr>)<pos:position pos:line="60" pos:column="18"/></condition><then pos:line="60" pos:column="18"> <block pos:line="60" pos:column="19">{
    <decl_stmt><decl><type><name pos:line="61" pos:column="5">char<pos:position pos:line="61" pos:column="9"/></name> <modifier pos:line="61" pos:column="10">*<pos:position pos:line="61" pos:column="11"/></modifier></type><name pos:line="61" pos:column="11">endp<pos:position pos:line="61" pos:column="15"/></name> <init pos:line="61" pos:column="16">= <expr><name pos:line="61" pos:column="18">NULL<pos:position pos:line="61" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="61" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><operator pos:line="62" pos:column="5">*<pos:position pos:line="62" pos:column="6"/></operator><name pos:line="62" pos:column="6">host_portno<pos:position pos:line="62" pos:column="17"/></name> <operator pos:line="62" pos:column="18">=<pos:position pos:line="62" pos:column="19"/></operator> <literal type="char" pos:line="62" pos:column="20">'\0'<pos:position pos:line="62" pos:column="24"/></literal></expr>;<pos:position pos:line="62" pos:column="25"/></expr_stmt> <comment type="block" pos:line="62" pos:column="26">/* cut off number from host name */</comment>
    <expr_stmt><expr><name pos:line="63" pos:column="5">host_portno<pos:position pos:line="63" pos:column="16"/></name><operator pos:line="63" pos:column="16">++<pos:position pos:line="63" pos:column="18"/></operator></expr>;<pos:position pos:line="63" pos:column="19"/></expr_stmt>
    <if pos:line="64" pos:column="5">if<condition pos:line="64" pos:column="7">(<expr><operator pos:line="64" pos:column="8">*<pos:position pos:line="64" pos:column="9"/></operator><name pos:line="64" pos:column="9">host_portno<pos:position pos:line="64" pos:column="20"/></name></expr>)<pos:position pos:line="64" pos:column="21"/></condition><then pos:line="64" pos:column="21"> <block pos:line="64" pos:column="22">{
      <decl_stmt><decl><type><name pos:line="65" pos:column="7">long<pos:position pos:line="65" pos:column="11"/></name></type> <name pos:line="65" pos:column="12">portparse<pos:position pos:line="65" pos:column="21"/></name> <init pos:line="65" pos:column="22">= <expr><call><name pos:line="65" pos:column="24">strtol<pos:position pos:line="65" pos:column="30"/></name><argument_list pos:line="65" pos:column="30">(<argument><expr><name pos:line="65" pos:column="31">host_portno<pos:position pos:line="65" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="44">&amp;<pos:position pos:line="65" pos:column="49"/></operator><name pos:line="65" pos:column="45">endp<pos:position pos:line="65" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="51">10<pos:position pos:line="65" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="65" pos:column="55"/></decl_stmt>
      <if pos:line="66" pos:column="7">if<condition pos:line="66" pos:column="9">(<expr><operator pos:line="66" pos:column="10">(<pos:position pos:line="66" pos:column="11"/></operator><name pos:line="66" pos:column="11">endp<pos:position pos:line="66" pos:column="15"/></name> <operator pos:line="66" pos:column="16">&amp;&amp;<pos:position pos:line="66" pos:column="26"/></operator> <operator pos:line="66" pos:column="19">*<pos:position pos:line="66" pos:column="20"/></operator><name pos:line="66" pos:column="20">endp<pos:position pos:line="66" pos:column="24"/></name><operator pos:line="66" pos:column="24">)<pos:position pos:line="66" pos:column="25"/></operator> <operator pos:line="66" pos:column="26">||<pos:position pos:line="66" pos:column="28"/></operator> <operator pos:line="66" pos:column="29">(<pos:position pos:line="66" pos:column="30"/></operator><name pos:line="66" pos:column="30">portparse<pos:position pos:line="66" pos:column="39"/></name> <operator pos:line="66" pos:column="40">&lt;<pos:position pos:line="66" pos:column="44"/></operator> <literal type="number" pos:line="66" pos:column="42">0<pos:position pos:line="66" pos:column="43"/></literal><operator pos:line="66" pos:column="43">)<pos:position pos:line="66" pos:column="44"/></operator> <operator pos:line="66" pos:column="45">||<pos:position pos:line="66" pos:column="47"/></operator> <operator pos:line="66" pos:column="48">(<pos:position pos:line="66" pos:column="49"/></operator><name pos:line="66" pos:column="49">portparse<pos:position pos:line="66" pos:column="58"/></name> <operator pos:line="66" pos:column="59">&gt;<pos:position pos:line="66" pos:column="63"/></operator> <literal type="number" pos:line="66" pos:column="61">65535<pos:position pos:line="66" pos:column="66"/></literal><operator pos:line="66" pos:column="66">)<pos:position pos:line="66" pos:column="67"/></operator></expr>)<pos:position pos:line="66" pos:column="68"/></condition><then pos:line="66" pos:column="68"> <block pos:line="66" pos:column="69">{
        <expr_stmt><expr><call><name pos:line="67" pos:column="9">infof<pos:position pos:line="67" pos:column="14"/></name><argument_list pos:line="67" pos:column="14">(<argument><expr><name pos:line="67" pos:column="15">data<pos:position pos:line="67" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="21">"No valid port number in connect to host string (%s)\n"<pos:position pos:line="67" pos:column="76"/></literal></expr></argument>,
              <argument><expr><name pos:line="68" pos:column="15">host_portno<pos:position pos:line="68" pos:column="26"/></name></expr></argument>)<pos:position pos:line="68" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name pos:line="69" pos:column="9">hostptr<pos:position pos:line="69" pos:column="16"/></name> <operator pos:line="69" pos:column="17">=<pos:position pos:line="69" pos:column="18"/></operator> <name pos:line="69" pos:column="19">NULL<pos:position pos:line="69" pos:column="23"/></name></expr>;<pos:position pos:line="69" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="70" pos:column="9">port<pos:position pos:line="70" pos:column="13"/></name> <operator pos:line="70" pos:column="14">=<pos:position pos:line="70" pos:column="15"/></operator> <operator pos:line="70" pos:column="16">-<pos:position pos:line="70" pos:column="17"/></operator><literal type="number" pos:line="70" pos:column="17">1<pos:position pos:line="70" pos:column="18"/></literal></expr>;<pos:position pos:line="70" pos:column="19"/></expr_stmt>
      }<pos:position pos:line="71" pos:column="8"/></block></then>
      <else pos:line="72" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="73" pos:column="9">port<pos:position pos:line="73" pos:column="13"/></name> <operator pos:line="73" pos:column="14">=<pos:position pos:line="73" pos:column="15"/></operator> <operator pos:line="73" pos:column="16">(<pos:position pos:line="73" pos:column="17"/></operator><name pos:line="73" pos:column="17">int<pos:position pos:line="73" pos:column="20"/></name><operator pos:line="73" pos:column="20">)<pos:position pos:line="73" pos:column="21"/></operator><name pos:line="73" pos:column="21">portparse<pos:position pos:line="73" pos:column="30"/></name></expr>;<pos:position pos:line="73" pos:column="31"/></expr_stmt></block></else></if> <comment type="block" pos:line="73" pos:column="32">/* we know it will fit */</comment>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>
  }<pos:position pos:line="75" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="77" pos:column="3">/* now, clone the cleaned host name */</comment>
  <if pos:line="78" pos:column="3">if<condition pos:line="78" pos:column="5">(<expr><name pos:line="78" pos:column="6">hostptr<pos:position pos:line="78" pos:column="13"/></name></expr>)<pos:position pos:line="78" pos:column="14"/></condition><then pos:line="78" pos:column="14"> <block pos:line="78" pos:column="15">{
    <expr_stmt><expr><operator pos:line="79" pos:column="5">*<pos:position pos:line="79" pos:column="6"/></operator><name pos:line="79" pos:column="6">hostname_result<pos:position pos:line="79" pos:column="21"/></name> <operator pos:line="79" pos:column="22">=<pos:position pos:line="79" pos:column="23"/></operator> <call><name pos:line="79" pos:column="24">strdup<pos:position pos:line="79" pos:column="30"/></name><argument_list pos:line="79" pos:column="30">(<argument><expr><name pos:line="79" pos:column="31">hostptr<pos:position pos:line="79" pos:column="38"/></name></expr></argument>)<pos:position pos:line="79" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="40"/></expr_stmt>
    <if pos:line="80" pos:column="5">if<condition pos:line="80" pos:column="7">(<expr><operator pos:line="80" pos:column="8">!<pos:position pos:line="80" pos:column="9"/></operator><operator pos:line="80" pos:column="9">*<pos:position pos:line="80" pos:column="10"/></operator><name pos:line="80" pos:column="10">hostname_result<pos:position pos:line="80" pos:column="25"/></name></expr>)<pos:position pos:line="80" pos:column="26"/></condition><then pos:line="80" pos:column="26"> <block pos:line="80" pos:column="27">{
      <expr_stmt><expr><call><name pos:line="81" pos:column="7">free<pos:position pos:line="81" pos:column="11"/></name><argument_list pos:line="81" pos:column="11">(<argument><expr><name pos:line="81" pos:column="12">host_dup<pos:position pos:line="81" pos:column="20"/></name></expr></argument>)<pos:position pos:line="81" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="22"/></expr_stmt>
      <return pos:line="82" pos:column="7">return <expr><name pos:line="82" pos:column="14">CURLE_OUT_OF_MEMORY<pos:position pos:line="82" pos:column="33"/></name></expr>;<pos:position pos:line="82" pos:column="34"/></return>
    }<pos:position pos:line="83" pos:column="6"/></block></then></if>
  }<pos:position pos:line="84" pos:column="4"/></block></then></if>

  <expr_stmt><expr><operator pos:line="86" pos:column="3">*<pos:position pos:line="86" pos:column="4"/></operator><name pos:line="86" pos:column="4">port_result<pos:position pos:line="86" pos:column="15"/></name> <operator pos:line="86" pos:column="16">=<pos:position pos:line="86" pos:column="17"/></operator> <name pos:line="86" pos:column="18">port<pos:position pos:line="86" pos:column="22"/></name></expr>;<pos:position pos:line="86" pos:column="23"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="88" pos:column="3">free<pos:position pos:line="88" pos:column="7"/></name><argument_list pos:line="88" pos:column="7">(<argument><expr><name pos:line="88" pos:column="8">host_dup<pos:position pos:line="88" pos:column="16"/></name></expr></argument>)<pos:position pos:line="88" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="18"/></expr_stmt>
  <return pos:line="89" pos:column="3">return <expr><name pos:line="89" pos:column="10">CURLE_OK<pos:position pos:line="89" pos:column="18"/></name></expr>;<pos:position pos:line="89" pos:column="19"/></return>
}<pos:position pos:line="90" pos:column="2"/></block></function></unit>
