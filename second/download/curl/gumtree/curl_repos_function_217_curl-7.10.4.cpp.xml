<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_217_curl-7.10.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">CURLcode<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">add_bufferf<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">send_buffer<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">in<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier> <name pos:line="2" pos:column="45">char<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">fmt<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="2" pos:column="56">...<pos:position pos:line="2" pos:column="59"/></modifier></type></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">result<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">CURLE_OUT_OF_MEMORY<pos:position pos:line="4" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">s<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">va_list<pos:position pos:line="6" pos:column="10"/></name></type> <name pos:line="6" pos:column="11">ap<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="7" pos:column="3">va_start<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">ap<pos:position pos:line="7" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="16">fmt<pos:position pos:line="7" pos:column="19"/></name></expr></argument>)<pos:position pos:line="7" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="8" pos:column="3">s<pos:position pos:line="8" pos:column="4"/></name> <operator pos:line="8" pos:column="5">=<pos:position pos:line="8" pos:column="6"/></operator> <call><name pos:line="8" pos:column="7">vaprintf<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><name pos:line="8" pos:column="16">fmt<pos:position pos:line="8" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="21">ap<pos:position pos:line="8" pos:column="23"/></name></expr></argument>)<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt> <comment type="block" pos:line="8" pos:column="26">/* this allocs a new string to append */</comment>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">va_end<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><name pos:line="9" pos:column="10">ap<pos:position pos:line="9" pos:column="12"/></name></expr></argument>)<pos:position pos:line="9" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="14"/></expr_stmt>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">s<pos:position pos:line="11" pos:column="7"/></name></expr>)<pos:position pos:line="11" pos:column="8"/></condition><then pos:line="11" pos:column="8"> <block pos:line="11" pos:column="9">{
    <expr_stmt><expr><name pos:line="12" pos:column="5">result<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">add_buffer<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">(<argument><expr><name pos:line="12" pos:column="25">in<pos:position pos:line="12" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="29">s<pos:position pos:line="12" pos:column="30"/></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="32">strlen<pos:position pos:line="12" pos:column="38"/></name><argument_list pos:line="12" pos:column="38">(<argument><expr><name pos:line="12" pos:column="39">s<pos:position pos:line="12" pos:column="40"/></name></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">free<pos:position pos:line="13" pos:column="9"/></name><argument_list pos:line="13" pos:column="9">(<argument><expr><name pos:line="13" pos:column="10">s<pos:position pos:line="13" pos:column="11"/></name></expr></argument>)<pos:position pos:line="13" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>
  <return pos:line="15" pos:column="3">return <expr><name pos:line="15" pos:column="10">result<pos:position pos:line="15" pos:column="16"/></name></expr>;<pos:position pos:line="15" pos:column="17"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
