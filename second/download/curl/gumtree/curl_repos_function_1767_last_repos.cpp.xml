<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1767_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">Curl_socket_check<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">curl_socket_t<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">readfd0<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <comment type="block" pos:line="1" pos:column="46">/* two sockets to read from */</comment>
                      <parameter><decl><type><name pos:line="2" pos:column="23">curl_socket_t<pos:position pos:line="2" pos:column="36"/></name></type> <name pos:line="2" pos:column="37">readfd1<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>,
                      <parameter><decl><type><name pos:line="3" pos:column="23">curl_socket_t<pos:position pos:line="3" pos:column="36"/></name></type> <name pos:line="3" pos:column="37">writefd<pos:position pos:line="3" pos:column="44"/></name></decl></parameter>, <comment type="block" pos:line="3" pos:column="46">/* socket to write to */</comment>
                      <parameter><decl><type><name pos:line="4" pos:column="23">time_t<pos:position pos:line="4" pos:column="29"/></name></type> <name pos:line="4" pos:column="30">timeout_ms<pos:position pos:line="4" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="41"/></parameter_list>     <comment type="block" pos:line="4" pos:column="46">/* milliseconds to wait */</comment>
<block pos:line="5" pos:column="1">{
<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">HAVE_POLL_FINE<pos:position pos:line="6" pos:column="22"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">pollfd<pos:position pos:line="7" pos:column="16"/></name></name></type> <name><name pos:line="7" pos:column="17">pfd<pos:position pos:line="7" pos:column="20"/></name><index pos:line="7" pos:column="20">[<expr><literal type="number" pos:line="7" pos:column="21">3<pos:position pos:line="7" pos:column="22"/></literal></expr>]<pos:position pos:line="7" pos:column="23"/></index></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">num<pos:position pos:line="8" pos:column="10"/></name></decl>;<pos:position pos:line="8" pos:column="11"/></decl_stmt>
<cpp:else pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">else<pos:position pos:line="9" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">timeval<pos:position pos:line="10" pos:column="17"/></name></name></type> <name pos:line="10" pos:column="18">pending_tv<pos:position pos:line="10" pos:column="28"/></name></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">timeval<pos:position pos:line="11" pos:column="17"/></name></name> <modifier pos:line="11" pos:column="18">*<pos:position pos:line="11" pos:column="19"/></modifier></type><name pos:line="11" pos:column="19">ptimeout<pos:position pos:line="11" pos:column="27"/></name></decl>;<pos:position pos:line="11" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">fd_set<pos:position pos:line="12" pos:column="9"/></name></type> <name pos:line="12" pos:column="10">fds_read<pos:position pos:line="12" pos:column="18"/></name></decl>;<pos:position pos:line="12" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">fd_set<pos:position pos:line="13" pos:column="9"/></name></type> <name pos:line="13" pos:column="10">fds_write<pos:position pos:line="13" pos:column="19"/></name></decl>;<pos:position pos:line="13" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">fd_set<pos:position pos:line="14" pos:column="9"/></name></type> <name pos:line="14" pos:column="10">fds_err<pos:position pos:line="14" pos:column="17"/></name></decl>;<pos:position pos:line="14" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">curl_socket_t<pos:position pos:line="15" pos:column="16"/></name></type> <name pos:line="15" pos:column="17">maxfd<pos:position pos:line="15" pos:column="22"/></name></decl>;<pos:position pos:line="15" pos:column="23"/></decl_stmt>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name><name pos:line="17" pos:column="3">struct<pos:position pos:line="17" pos:column="9"/></name> <name pos:line="17" pos:column="10">curltime<pos:position pos:line="17" pos:column="18"/></name></name></type> <name pos:line="17" pos:column="19">initial_tv<pos:position pos:line="17" pos:column="29"/></name> <init pos:line="17" pos:column="30">= <expr><block pos:line="17" pos:column="32">{<expr><literal type="number" pos:line="17" pos:column="33">0<pos:position pos:line="17" pos:column="34"/></literal></expr>, <expr><literal type="number" pos:line="17" pos:column="36">0<pos:position pos:line="17" pos:column="37"/></literal></expr>}<pos:position pos:line="17" pos:column="38"/></block></expr></init></decl>;<pos:position pos:line="17" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="18" pos:column="3">int<pos:position pos:line="18" pos:column="6"/></name></type> <name pos:line="18" pos:column="7">pending_ms<pos:position pos:line="18" pos:column="17"/></name> <init pos:line="18" pos:column="18">= <expr><literal type="number" pos:line="18" pos:column="20">0<pos:position pos:line="18" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">int<pos:position pos:line="19" pos:column="6"/></name></type> <name pos:line="19" pos:column="7">error<pos:position pos:line="19" pos:column="12"/></name></decl>;<pos:position pos:line="19" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="20" pos:column="3">int<pos:position pos:line="20" pos:column="6"/></name></type> <name pos:line="20" pos:column="7">r<pos:position pos:line="20" pos:column="8"/></name></decl>;<pos:position pos:line="20" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">int<pos:position pos:line="21" pos:column="6"/></name></type> <name pos:line="21" pos:column="7">ret<pos:position pos:line="21" pos:column="10"/></name></decl>;<pos:position pos:line="21" pos:column="11"/></decl_stmt>

<cpp:if pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">if<pos:position pos:line="23" pos:column="4"/></cpp:directive> <expr><name pos:line="23" pos:column="5">SIZEOF_TIME_T<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">!=<pos:position pos:line="23" pos:column="21"/></operator> <name pos:line="23" pos:column="22">SIZEOF_INT<pos:position pos:line="23" pos:column="32"/></name></expr></cpp:if>
  <comment type="block" pos:line="24" pos:column="3">/* wrap-around precaution */</comment>
  <if pos:line="25" pos:column="3">if<condition pos:line="25" pos:column="5">(<expr><name pos:line="25" pos:column="6">timeout_ms<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">&gt;=<pos:position pos:line="25" pos:column="22"/></operator> <name pos:line="25" pos:column="20">INT_MAX<pos:position pos:line="25" pos:column="27"/></name></expr>)<pos:position pos:line="25" pos:column="28"/></condition><then pos:line="25" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="5">timeout_ms<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <name pos:line="26" pos:column="18">INT_MAX<pos:position pos:line="26" pos:column="25"/></name></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt></block></then></if>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="29" pos:column="3">if<condition pos:line="29" pos:column="5">(<expr><operator pos:line="29" pos:column="6">(<pos:position pos:line="29" pos:column="7"/></operator><name pos:line="29" pos:column="7">readfd0<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">==<pos:position pos:line="29" pos:column="17"/></operator> <name pos:line="29" pos:column="18">CURL_SOCKET_BAD<pos:position pos:line="29" pos:column="33"/></name><operator pos:line="29" pos:column="33">)<pos:position pos:line="29" pos:column="34"/></operator> <operator pos:line="29" pos:column="35">&amp;&amp;<pos:position pos:line="29" pos:column="45"/></operator> <operator pos:line="29" pos:column="38">(<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="39">readfd1<pos:position pos:line="29" pos:column="46"/></name> <operator pos:line="29" pos:column="47">==<pos:position pos:line="29" pos:column="49"/></operator> <name pos:line="29" pos:column="50">CURL_SOCKET_BAD<pos:position pos:line="29" pos:column="65"/></name><operator pos:line="29" pos:column="65">)<pos:position pos:line="29" pos:column="66"/></operator> <operator pos:line="29" pos:column="67">&amp;&amp;<pos:position pos:line="29" pos:column="77"/></operator>
     <operator pos:line="30" pos:column="6">(<pos:position pos:line="30" pos:column="7"/></operator><name pos:line="30" pos:column="7">writefd<pos:position pos:line="30" pos:column="14"/></name> <operator pos:line="30" pos:column="15">==<pos:position pos:line="30" pos:column="17"/></operator> <name pos:line="30" pos:column="18">CURL_SOCKET_BAD<pos:position pos:line="30" pos:column="33"/></name><operator pos:line="30" pos:column="33">)<pos:position pos:line="30" pos:column="34"/></operator></expr>)<pos:position pos:line="30" pos:column="35"/></condition><then pos:line="30" pos:column="35"> <block pos:line="30" pos:column="36">{
    <comment type="block" pos:line="31" pos:column="5">/* no sockets, just wait */</comment>
    <expr_stmt><expr><name pos:line="32" pos:column="5">r<pos:position pos:line="32" pos:column="6"/></name> <operator pos:line="32" pos:column="7">=<pos:position pos:line="32" pos:column="8"/></operator> <call><name pos:line="32" pos:column="9">Curl_wait_ms<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">(<argument><expr><operator pos:line="32" pos:column="22">(<pos:position pos:line="32" pos:column="23"/></operator><name pos:line="32" pos:column="23">int<pos:position pos:line="32" pos:column="26"/></name><operator pos:line="32" pos:column="26">)<pos:position pos:line="32" pos:column="27"/></operator><name pos:line="32" pos:column="27">timeout_ms<pos:position pos:line="32" pos:column="37"/></name></expr></argument>)<pos:position pos:line="32" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="39"/></expr_stmt>
    <return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">r<pos:position pos:line="33" pos:column="13"/></name></expr>;<pos:position pos:line="33" pos:column="14"/></return>
  }<pos:position pos:line="34" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="36" pos:column="3">/* Avoid initial timestamp, avoid curlx_tvnow() call, when elapsed
     time in this function does not need to be measured. This happens
     when function is called with a zero timeout or a negative timeout
     value indicating a blocking call should be performed. */</comment>

  <if pos:line="41" pos:column="3">if<condition pos:line="41" pos:column="5">(<expr><name pos:line="41" pos:column="6">timeout_ms<pos:position pos:line="41" pos:column="16"/></name> <operator pos:line="41" pos:column="17">&gt;<pos:position pos:line="41" pos:column="21"/></operator> <literal type="number" pos:line="41" pos:column="19">0<pos:position pos:line="41" pos:column="20"/></literal></expr>)<pos:position pos:line="41" pos:column="21"/></condition><then pos:line="41" pos:column="21"> <block pos:line="41" pos:column="22">{
    <expr_stmt><expr><name pos:line="42" pos:column="5">pending_ms<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">=<pos:position pos:line="42" pos:column="17"/></operator> <operator pos:line="42" pos:column="18">(<pos:position pos:line="42" pos:column="19"/></operator><name pos:line="42" pos:column="19">int<pos:position pos:line="42" pos:column="22"/></name><operator pos:line="42" pos:column="22">)<pos:position pos:line="42" pos:column="23"/></operator><name pos:line="42" pos:column="23">timeout_ms<pos:position pos:line="42" pos:column="33"/></name></expr>;<pos:position pos:line="42" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="43" pos:column="5">initial_tv<pos:position pos:line="43" pos:column="15"/></name> <operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator> <call><name pos:line="43" pos:column="18">curlx_tvnow<pos:position pos:line="43" pos:column="29"/></name><argument_list pos:line="43" pos:column="29">()<pos:position pos:line="43" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="44" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">ifdef<pos:position pos:line="46" pos:column="7"/></cpp:directive> <name pos:line="46" pos:column="8">HAVE_POLL_FINE<pos:position pos:line="46" pos:column="22"/></name></cpp:ifdef>

  <expr_stmt><expr><name pos:line="48" pos:column="3">num<pos:position pos:line="48" pos:column="6"/></name> <operator pos:line="48" pos:column="7">=<pos:position pos:line="48" pos:column="8"/></operator> <literal type="number" pos:line="48" pos:column="9">0<pos:position pos:line="48" pos:column="10"/></literal></expr>;<pos:position pos:line="48" pos:column="11"/></expr_stmt>
  <if pos:line="49" pos:column="3">if<condition pos:line="49" pos:column="5">(<expr><name pos:line="49" pos:column="6">readfd0<pos:position pos:line="49" pos:column="13"/></name> <operator pos:line="49" pos:column="14">!=<pos:position pos:line="49" pos:column="16"/></operator> <name pos:line="49" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="49" pos:column="32"/></name></expr>)<pos:position pos:line="49" pos:column="33"/></condition><then pos:line="49" pos:column="33"> <block pos:line="49" pos:column="34">{
    <expr_stmt><expr><name><name pos:line="50" pos:column="5">pfd<pos:position pos:line="50" pos:column="8"/></name><index pos:line="50" pos:column="8">[<expr><name pos:line="50" pos:column="9">num<pos:position pos:line="50" pos:column="12"/></name></expr>]<pos:position pos:line="50" pos:column="13"/></index></name><operator pos:line="50" pos:column="13">.<pos:position pos:line="50" pos:column="14"/></operator><name pos:line="50" pos:column="14">fd<pos:position pos:line="50" pos:column="16"/></name> <operator pos:line="50" pos:column="17">=<pos:position pos:line="50" pos:column="18"/></operator> <name pos:line="50" pos:column="19">readfd0<pos:position pos:line="50" pos:column="26"/></name></expr>;<pos:position pos:line="50" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="51" pos:column="5">pfd<pos:position pos:line="51" pos:column="8"/></name><index pos:line="51" pos:column="8">[<expr><name pos:line="51" pos:column="9">num<pos:position pos:line="51" pos:column="12"/></name></expr>]<pos:position pos:line="51" pos:column="13"/></index></name><operator pos:line="51" pos:column="13">.<pos:position pos:line="51" pos:column="14"/></operator><name pos:line="51" pos:column="14">events<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">=<pos:position pos:line="51" pos:column="22"/></operator> <name pos:line="51" pos:column="23">POLLRDNORM<pos:position pos:line="51" pos:column="33"/></name><operator pos:line="51" pos:column="33">|<pos:position pos:line="51" pos:column="34"/></operator><name pos:line="51" pos:column="34">POLLIN<pos:position pos:line="51" pos:column="40"/></name><operator pos:line="51" pos:column="40">|<pos:position pos:line="51" pos:column="41"/></operator><name pos:line="51" pos:column="41">POLLRDBAND<pos:position pos:line="51" pos:column="51"/></name><operator pos:line="51" pos:column="51">|<pos:position pos:line="51" pos:column="52"/></operator><name pos:line="51" pos:column="52">POLLPRI<pos:position pos:line="51" pos:column="59"/></name></expr>;<pos:position pos:line="51" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="52" pos:column="5">pfd<pos:position pos:line="52" pos:column="8"/></name><index pos:line="52" pos:column="8">[<expr><name pos:line="52" pos:column="9">num<pos:position pos:line="52" pos:column="12"/></name></expr>]<pos:position pos:line="52" pos:column="13"/></index></name><operator pos:line="52" pos:column="13">.<pos:position pos:line="52" pos:column="14"/></operator><name pos:line="52" pos:column="14">revents<pos:position pos:line="52" pos:column="21"/></name> <operator pos:line="52" pos:column="22">=<pos:position pos:line="52" pos:column="23"/></operator> <literal type="number" pos:line="52" pos:column="24">0<pos:position pos:line="52" pos:column="25"/></literal></expr>;<pos:position pos:line="52" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="53" pos:column="5">num<pos:position pos:line="53" pos:column="8"/></name><operator pos:line="53" pos:column="8">++<pos:position pos:line="53" pos:column="10"/></operator></expr>;<pos:position pos:line="53" pos:column="11"/></expr_stmt>
  }<pos:position pos:line="54" pos:column="4"/></block></then></if>
  <if pos:line="55" pos:column="3">if<condition pos:line="55" pos:column="5">(<expr><name pos:line="55" pos:column="6">readfd1<pos:position pos:line="55" pos:column="13"/></name> <operator pos:line="55" pos:column="14">!=<pos:position pos:line="55" pos:column="16"/></operator> <name pos:line="55" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="55" pos:column="32"/></name></expr>)<pos:position pos:line="55" pos:column="33"/></condition><then pos:line="55" pos:column="33"> <block pos:line="55" pos:column="34">{
    <expr_stmt><expr><name><name pos:line="56" pos:column="5">pfd<pos:position pos:line="56" pos:column="8"/></name><index pos:line="56" pos:column="8">[<expr><name pos:line="56" pos:column="9">num<pos:position pos:line="56" pos:column="12"/></name></expr>]<pos:position pos:line="56" pos:column="13"/></index></name><operator pos:line="56" pos:column="13">.<pos:position pos:line="56" pos:column="14"/></operator><name pos:line="56" pos:column="14">fd<pos:position pos:line="56" pos:column="16"/></name> <operator pos:line="56" pos:column="17">=<pos:position pos:line="56" pos:column="18"/></operator> <name pos:line="56" pos:column="19">readfd1<pos:position pos:line="56" pos:column="26"/></name></expr>;<pos:position pos:line="56" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="57" pos:column="5">pfd<pos:position pos:line="57" pos:column="8"/></name><index pos:line="57" pos:column="8">[<expr><name pos:line="57" pos:column="9">num<pos:position pos:line="57" pos:column="12"/></name></expr>]<pos:position pos:line="57" pos:column="13"/></index></name><operator pos:line="57" pos:column="13">.<pos:position pos:line="57" pos:column="14"/></operator><name pos:line="57" pos:column="14">events<pos:position pos:line="57" pos:column="20"/></name> <operator pos:line="57" pos:column="21">=<pos:position pos:line="57" pos:column="22"/></operator> <name pos:line="57" pos:column="23">POLLRDNORM<pos:position pos:line="57" pos:column="33"/></name><operator pos:line="57" pos:column="33">|<pos:position pos:line="57" pos:column="34"/></operator><name pos:line="57" pos:column="34">POLLIN<pos:position pos:line="57" pos:column="40"/></name><operator pos:line="57" pos:column="40">|<pos:position pos:line="57" pos:column="41"/></operator><name pos:line="57" pos:column="41">POLLRDBAND<pos:position pos:line="57" pos:column="51"/></name><operator pos:line="57" pos:column="51">|<pos:position pos:line="57" pos:column="52"/></operator><name pos:line="57" pos:column="52">POLLPRI<pos:position pos:line="57" pos:column="59"/></name></expr>;<pos:position pos:line="57" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="58" pos:column="5">pfd<pos:position pos:line="58" pos:column="8"/></name><index pos:line="58" pos:column="8">[<expr><name pos:line="58" pos:column="9">num<pos:position pos:line="58" pos:column="12"/></name></expr>]<pos:position pos:line="58" pos:column="13"/></index></name><operator pos:line="58" pos:column="13">.<pos:position pos:line="58" pos:column="14"/></operator><name pos:line="58" pos:column="14">revents<pos:position pos:line="58" pos:column="21"/></name> <operator pos:line="58" pos:column="22">=<pos:position pos:line="58" pos:column="23"/></operator> <literal type="number" pos:line="58" pos:column="24">0<pos:position pos:line="58" pos:column="25"/></literal></expr>;<pos:position pos:line="58" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="59" pos:column="5">num<pos:position pos:line="59" pos:column="8"/></name><operator pos:line="59" pos:column="8">++<pos:position pos:line="59" pos:column="10"/></operator></expr>;<pos:position pos:line="59" pos:column="11"/></expr_stmt>
  }<pos:position pos:line="60" pos:column="4"/></block></then></if>
  <if pos:line="61" pos:column="3">if<condition pos:line="61" pos:column="5">(<expr><name pos:line="61" pos:column="6">writefd<pos:position pos:line="61" pos:column="13"/></name> <operator pos:line="61" pos:column="14">!=<pos:position pos:line="61" pos:column="16"/></operator> <name pos:line="61" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="61" pos:column="32"/></name></expr>)<pos:position pos:line="61" pos:column="33"/></condition><then pos:line="61" pos:column="33"> <block pos:line="61" pos:column="34">{
    <expr_stmt><expr><name><name pos:line="62" pos:column="5">pfd<pos:position pos:line="62" pos:column="8"/></name><index pos:line="62" pos:column="8">[<expr><name pos:line="62" pos:column="9">num<pos:position pos:line="62" pos:column="12"/></name></expr>]<pos:position pos:line="62" pos:column="13"/></index></name><operator pos:line="62" pos:column="13">.<pos:position pos:line="62" pos:column="14"/></operator><name pos:line="62" pos:column="14">fd<pos:position pos:line="62" pos:column="16"/></name> <operator pos:line="62" pos:column="17">=<pos:position pos:line="62" pos:column="18"/></operator> <name pos:line="62" pos:column="19">writefd<pos:position pos:line="62" pos:column="26"/></name></expr>;<pos:position pos:line="62" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="63" pos:column="5">pfd<pos:position pos:line="63" pos:column="8"/></name><index pos:line="63" pos:column="8">[<expr><name pos:line="63" pos:column="9">num<pos:position pos:line="63" pos:column="12"/></name></expr>]<pos:position pos:line="63" pos:column="13"/></index></name><operator pos:line="63" pos:column="13">.<pos:position pos:line="63" pos:column="14"/></operator><name pos:line="63" pos:column="14">events<pos:position pos:line="63" pos:column="20"/></name> <operator pos:line="63" pos:column="21">=<pos:position pos:line="63" pos:column="22"/></operator> <name pos:line="63" pos:column="23">POLLWRNORM<pos:position pos:line="63" pos:column="33"/></name><operator pos:line="63" pos:column="33">|<pos:position pos:line="63" pos:column="34"/></operator><name pos:line="63" pos:column="34">POLLOUT<pos:position pos:line="63" pos:column="41"/></name></expr>;<pos:position pos:line="63" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="64" pos:column="5">pfd<pos:position pos:line="64" pos:column="8"/></name><index pos:line="64" pos:column="8">[<expr><name pos:line="64" pos:column="9">num<pos:position pos:line="64" pos:column="12"/></name></expr>]<pos:position pos:line="64" pos:column="13"/></index></name><operator pos:line="64" pos:column="13">.<pos:position pos:line="64" pos:column="14"/></operator><name pos:line="64" pos:column="14">revents<pos:position pos:line="64" pos:column="21"/></name> <operator pos:line="64" pos:column="22">=<pos:position pos:line="64" pos:column="23"/></operator> <literal type="number" pos:line="64" pos:column="24">0<pos:position pos:line="64" pos:column="25"/></literal></expr>;<pos:position pos:line="64" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="65" pos:column="5">num<pos:position pos:line="65" pos:column="8"/></name><operator pos:line="65" pos:column="8">++<pos:position pos:line="65" pos:column="10"/></operator></expr>;<pos:position pos:line="65" pos:column="11"/></expr_stmt>
  }<pos:position pos:line="66" pos:column="4"/></block></then></if>

  <do pos:line="68" pos:column="3">do <block pos:line="68" pos:column="6">{
    <if pos:line="69" pos:column="5">if<condition pos:line="69" pos:column="7">(<expr><name pos:line="69" pos:column="8">timeout_ms<pos:position pos:line="69" pos:column="18"/></name> <operator pos:line="69" pos:column="19">&lt;<pos:position pos:line="69" pos:column="23"/></operator> <literal type="number" pos:line="69" pos:column="21">0<pos:position pos:line="69" pos:column="22"/></literal></expr>)<pos:position pos:line="69" pos:column="23"/></condition><then pos:line="69" pos:column="23">
      <block type="pseudo"><expr_stmt><expr><name pos:line="70" pos:column="7">pending_ms<pos:position pos:line="70" pos:column="17"/></name> <operator pos:line="70" pos:column="18">=<pos:position pos:line="70" pos:column="19"/></operator> <operator pos:line="70" pos:column="20">-<pos:position pos:line="70" pos:column="21"/></operator><literal type="number" pos:line="70" pos:column="21">1<pos:position pos:line="70" pos:column="22"/></literal></expr>;<pos:position pos:line="70" pos:column="23"/></expr_stmt></block></then>
    <elseif pos:line="71" pos:column="5">else <if pos:line="71" pos:column="10">if<condition pos:line="71" pos:column="12">(<expr><operator pos:line="71" pos:column="13">!<pos:position pos:line="71" pos:column="14"/></operator><name pos:line="71" pos:column="14">timeout_ms<pos:position pos:line="71" pos:column="24"/></name></expr>)<pos:position pos:line="71" pos:column="25"/></condition><then pos:line="71" pos:column="25">
      <block type="pseudo"><expr_stmt><expr><name pos:line="72" pos:column="7">pending_ms<pos:position pos:line="72" pos:column="17"/></name> <operator pos:line="72" pos:column="18">=<pos:position pos:line="72" pos:column="19"/></operator> <literal type="number" pos:line="72" pos:column="20">0<pos:position pos:line="72" pos:column="21"/></literal></expr>;<pos:position pos:line="72" pos:column="22"/></expr_stmt></block></then></if></elseif></if>
    <expr_stmt><expr><name pos:line="73" pos:column="5">r<pos:position pos:line="73" pos:column="6"/></name> <operator pos:line="73" pos:column="7">=<pos:position pos:line="73" pos:column="8"/></operator> <call><name pos:line="73" pos:column="9">poll<pos:position pos:line="73" pos:column="13"/></name><argument_list pos:line="73" pos:column="13">(<argument><expr><name pos:line="73" pos:column="14">pfd<pos:position pos:line="73" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="19">num<pos:position pos:line="73" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="24">pending_ms<pos:position pos:line="73" pos:column="34"/></name></expr></argument>)<pos:position pos:line="73" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="36"/></expr_stmt>
    <if pos:line="74" pos:column="5">if<condition pos:line="74" pos:column="7">(<expr><name pos:line="74" pos:column="8">r<pos:position pos:line="74" pos:column="9"/></name> <operator pos:line="74" pos:column="10">!=<pos:position pos:line="74" pos:column="12"/></operator> <operator pos:line="74" pos:column="13">-<pos:position pos:line="74" pos:column="14"/></operator><literal type="number" pos:line="74" pos:column="14">1<pos:position pos:line="74" pos:column="15"/></literal></expr>)<pos:position pos:line="74" pos:column="16"/></condition><then pos:line="74" pos:column="16">
      <block type="pseudo"><break pos:line="75" pos:column="7">break;<pos:position pos:line="75" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><name pos:line="76" pos:column="5">error<pos:position pos:line="76" pos:column="10"/></name> <operator pos:line="76" pos:column="11">=<pos:position pos:line="76" pos:column="12"/></operator> <name pos:line="76" pos:column="13">SOCKERRNO<pos:position pos:line="76" pos:column="22"/></name></expr>;<pos:position pos:line="76" pos:column="23"/></expr_stmt>
    <if pos:line="77" pos:column="5">if<condition pos:line="77" pos:column="7">(<expr><name pos:line="77" pos:column="8">error<pos:position pos:line="77" pos:column="13"/></name> <operator pos:line="77" pos:column="14">&amp;&amp;<pos:position pos:line="77" pos:column="24"/></operator> <call><name pos:line="77" pos:column="17">ERROR_NOT_EINTR<pos:position pos:line="77" pos:column="32"/></name><argument_list pos:line="77" pos:column="32">(<argument><expr><name pos:line="77" pos:column="33">error<pos:position pos:line="77" pos:column="38"/></name></expr></argument>)<pos:position pos:line="77" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="77" pos:column="40"/></condition><then pos:line="77" pos:column="40">
      <block type="pseudo"><break pos:line="78" pos:column="7">break;<pos:position pos:line="78" pos:column="13"/></break></block></then></if>
    <if pos:line="79" pos:column="5">if<condition pos:line="79" pos:column="7">(<expr><name pos:line="79" pos:column="8">timeout_ms<pos:position pos:line="79" pos:column="18"/></name> <operator pos:line="79" pos:column="19">&gt;<pos:position pos:line="79" pos:column="23"/></operator> <literal type="number" pos:line="79" pos:column="21">0<pos:position pos:line="79" pos:column="22"/></literal></expr>)<pos:position pos:line="79" pos:column="23"/></condition><then pos:line="79" pos:column="23"> <block pos:line="79" pos:column="24">{
      <expr_stmt><expr><name pos:line="80" pos:column="7">pending_ms<pos:position pos:line="80" pos:column="17"/></name> <operator pos:line="80" pos:column="18">=<pos:position pos:line="80" pos:column="19"/></operator> <call pos:line="80" pos:column="20">(<name pos:line="80" pos:column="21">int<pos:position pos:line="80" pos:column="24"/></name>)<argument_list pos:line="80" pos:column="25">(<argument><expr><name pos:line="80" pos:column="26">timeout_ms<pos:position pos:line="80" pos:column="36"/></name> <operator pos:line="80" pos:column="37">-<pos:position pos:line="80" pos:column="38"/></operator> <call><name pos:line="80" pos:column="39">ELAPSED_MS<pos:position pos:line="80" pos:column="49"/></name><argument_list pos:line="80" pos:column="49">()<pos:position pos:line="80" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="80" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="53"/></expr_stmt>
      <if pos:line="81" pos:column="7">if<condition pos:line="81" pos:column="9">(<expr><name pos:line="81" pos:column="10">pending_ms<pos:position pos:line="81" pos:column="20"/></name> <operator pos:line="81" pos:column="21">&lt;=<pos:position pos:line="81" pos:column="26"/></operator> <literal type="number" pos:line="81" pos:column="24">0<pos:position pos:line="81" pos:column="25"/></literal></expr>)<pos:position pos:line="81" pos:column="26"/></condition><then pos:line="81" pos:column="26"> <block pos:line="81" pos:column="27">{
        <expr_stmt><expr><name pos:line="82" pos:column="9">r<pos:position pos:line="82" pos:column="10"/></name> <operator pos:line="82" pos:column="11">=<pos:position pos:line="82" pos:column="12"/></operator> <literal type="number" pos:line="82" pos:column="13">0<pos:position pos:line="82" pos:column="14"/></literal></expr>;<pos:position pos:line="82" pos:column="15"/></expr_stmt>  <comment type="block" pos:line="82" pos:column="17">/* Simulate a "call timed out" case */</comment>
        <break pos:line="83" pos:column="9">break;<pos:position pos:line="83" pos:column="15"/></break>
      }<pos:position pos:line="84" pos:column="8"/></block></then></if>
    }<pos:position pos:line="85" pos:column="6"/></block></then></if>
  }<pos:position pos:line="86" pos:column="4"/></block> while<condition pos:line="86" pos:column="10">(<expr><name pos:line="86" pos:column="11">r<pos:position pos:line="86" pos:column="12"/></name> <operator pos:line="86" pos:column="13">==<pos:position pos:line="86" pos:column="15"/></operator> <operator pos:line="86" pos:column="16">-<pos:position pos:line="86" pos:column="17"/></operator><literal type="number" pos:line="86" pos:column="17">1<pos:position pos:line="86" pos:column="18"/></literal></expr>)<pos:position pos:line="86" pos:column="19"/></condition>;<pos:position pos:line="86" pos:column="20"/></do>

  <if pos:line="88" pos:column="3">if<condition pos:line="88" pos:column="5">(<expr><name pos:line="88" pos:column="6">r<pos:position pos:line="88" pos:column="7"/></name> <operator pos:line="88" pos:column="8">&lt;<pos:position pos:line="88" pos:column="12"/></operator> <literal type="number" pos:line="88" pos:column="10">0<pos:position pos:line="88" pos:column="11"/></literal></expr>)<pos:position pos:line="88" pos:column="12"/></condition><then pos:line="88" pos:column="12">
    <block type="pseudo"><return pos:line="89" pos:column="5">return <expr><operator pos:line="89" pos:column="12">-<pos:position pos:line="89" pos:column="13"/></operator><literal type="number" pos:line="89" pos:column="13">1<pos:position pos:line="89" pos:column="14"/></literal></expr>;<pos:position pos:line="89" pos:column="15"/></return></block></then></if>
  <if pos:line="90" pos:column="3">if<condition pos:line="90" pos:column="5">(<expr><name pos:line="90" pos:column="6">r<pos:position pos:line="90" pos:column="7"/></name> <operator pos:line="90" pos:column="8">==<pos:position pos:line="90" pos:column="10"/></operator> <literal type="number" pos:line="90" pos:column="11">0<pos:position pos:line="90" pos:column="12"/></literal></expr>)<pos:position pos:line="90" pos:column="13"/></condition><then pos:line="90" pos:column="13">
    <block type="pseudo"><return pos:line="91" pos:column="5">return <expr><literal type="number" pos:line="91" pos:column="12">0<pos:position pos:line="91" pos:column="13"/></literal></expr>;<pos:position pos:line="91" pos:column="14"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="93" pos:column="3">ret<pos:position pos:line="93" pos:column="6"/></name> <operator pos:line="93" pos:column="7">=<pos:position pos:line="93" pos:column="8"/></operator> <literal type="number" pos:line="93" pos:column="9">0<pos:position pos:line="93" pos:column="10"/></literal></expr>;<pos:position pos:line="93" pos:column="11"/></expr_stmt>
  <expr_stmt><expr><name pos:line="94" pos:column="3">num<pos:position pos:line="94" pos:column="6"/></name> <operator pos:line="94" pos:column="7">=<pos:position pos:line="94" pos:column="8"/></operator> <literal type="number" pos:line="94" pos:column="9">0<pos:position pos:line="94" pos:column="10"/></literal></expr>;<pos:position pos:line="94" pos:column="11"/></expr_stmt>
  <if pos:line="95" pos:column="3">if<condition pos:line="95" pos:column="5">(<expr><name pos:line="95" pos:column="6">readfd0<pos:position pos:line="95" pos:column="13"/></name> <operator pos:line="95" pos:column="14">!=<pos:position pos:line="95" pos:column="16"/></operator> <name pos:line="95" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="95" pos:column="32"/></name></expr>)<pos:position pos:line="95" pos:column="33"/></condition><then pos:line="95" pos:column="33"> <block pos:line="95" pos:column="34">{
    <if pos:line="96" pos:column="5">if<condition pos:line="96" pos:column="7">(<expr><name><name pos:line="96" pos:column="8">pfd<pos:position pos:line="96" pos:column="11"/></name><index pos:line="96" pos:column="11">[<expr><name pos:line="96" pos:column="12">num<pos:position pos:line="96" pos:column="15"/></name></expr>]<pos:position pos:line="96" pos:column="16"/></index></name><operator pos:line="96" pos:column="16">.<pos:position pos:line="96" pos:column="17"/></operator><name pos:line="96" pos:column="17">revents<pos:position pos:line="96" pos:column="24"/></name> <operator pos:line="96" pos:column="25">&amp;<pos:position pos:line="96" pos:column="30"/></operator> <operator pos:line="96" pos:column="27">(<pos:position pos:line="96" pos:column="28"/></operator><name pos:line="96" pos:column="28">POLLRDNORM<pos:position pos:line="96" pos:column="38"/></name><operator pos:line="96" pos:column="38">|<pos:position pos:line="96" pos:column="39"/></operator><name pos:line="96" pos:column="39">POLLIN<pos:position pos:line="96" pos:column="45"/></name><operator pos:line="96" pos:column="45">|<pos:position pos:line="96" pos:column="46"/></operator><name pos:line="96" pos:column="46">POLLERR<pos:position pos:line="96" pos:column="53"/></name><operator pos:line="96" pos:column="53">|<pos:position pos:line="96" pos:column="54"/></operator><name pos:line="96" pos:column="54">POLLHUP<pos:position pos:line="96" pos:column="61"/></name><operator pos:line="96" pos:column="61">)<pos:position pos:line="96" pos:column="62"/></operator></expr>)<pos:position pos:line="96" pos:column="63"/></condition><then pos:line="96" pos:column="63">
      <block type="pseudo"><expr_stmt><expr><name pos:line="97" pos:column="7">ret<pos:position pos:line="97" pos:column="10"/></name> <operator pos:line="97" pos:column="11">|=<pos:position pos:line="97" pos:column="13"/></operator> <name pos:line="97" pos:column="14">CURL_CSELECT_IN<pos:position pos:line="97" pos:column="29"/></name></expr>;<pos:position pos:line="97" pos:column="30"/></expr_stmt></block></then></if>
    <if pos:line="98" pos:column="5">if<condition pos:line="98" pos:column="7">(<expr><name><name pos:line="98" pos:column="8">pfd<pos:position pos:line="98" pos:column="11"/></name><index pos:line="98" pos:column="11">[<expr><name pos:line="98" pos:column="12">num<pos:position pos:line="98" pos:column="15"/></name></expr>]<pos:position pos:line="98" pos:column="16"/></index></name><operator pos:line="98" pos:column="16">.<pos:position pos:line="98" pos:column="17"/></operator><name pos:line="98" pos:column="17">revents<pos:position pos:line="98" pos:column="24"/></name> <operator pos:line="98" pos:column="25">&amp;<pos:position pos:line="98" pos:column="30"/></operator> <operator pos:line="98" pos:column="27">(<pos:position pos:line="98" pos:column="28"/></operator><name pos:line="98" pos:column="28">POLLRDBAND<pos:position pos:line="98" pos:column="38"/></name><operator pos:line="98" pos:column="38">|<pos:position pos:line="98" pos:column="39"/></operator><name pos:line="98" pos:column="39">POLLPRI<pos:position pos:line="98" pos:column="46"/></name><operator pos:line="98" pos:column="46">|<pos:position pos:line="98" pos:column="47"/></operator><name pos:line="98" pos:column="47">POLLNVAL<pos:position pos:line="98" pos:column="55"/></name><operator pos:line="98" pos:column="55">)<pos:position pos:line="98" pos:column="56"/></operator></expr>)<pos:position pos:line="98" pos:column="57"/></condition><then pos:line="98" pos:column="57">
      <block type="pseudo"><expr_stmt><expr><name pos:line="99" pos:column="7">ret<pos:position pos:line="99" pos:column="10"/></name> <operator pos:line="99" pos:column="11">|=<pos:position pos:line="99" pos:column="13"/></operator> <name pos:line="99" pos:column="14">CURL_CSELECT_ERR<pos:position pos:line="99" pos:column="30"/></name></expr>;<pos:position pos:line="99" pos:column="31"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="100" pos:column="5">num<pos:position pos:line="100" pos:column="8"/></name><operator pos:line="100" pos:column="8">++<pos:position pos:line="100" pos:column="10"/></operator></expr>;<pos:position pos:line="100" pos:column="11"/></expr_stmt>
  }<pos:position pos:line="101" pos:column="4"/></block></then></if>
  <if pos:line="102" pos:column="3">if<condition pos:line="102" pos:column="5">(<expr><name pos:line="102" pos:column="6">readfd1<pos:position pos:line="102" pos:column="13"/></name> <operator pos:line="102" pos:column="14">!=<pos:position pos:line="102" pos:column="16"/></operator> <name pos:line="102" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="102" pos:column="32"/></name></expr>)<pos:position pos:line="102" pos:column="33"/></condition><then pos:line="102" pos:column="33"> <block pos:line="102" pos:column="34">{
    <if pos:line="103" pos:column="5">if<condition pos:line="103" pos:column="7">(<expr><name><name pos:line="103" pos:column="8">pfd<pos:position pos:line="103" pos:column="11"/></name><index pos:line="103" pos:column="11">[<expr><name pos:line="103" pos:column="12">num<pos:position pos:line="103" pos:column="15"/></name></expr>]<pos:position pos:line="103" pos:column="16"/></index></name><operator pos:line="103" pos:column="16">.<pos:position pos:line="103" pos:column="17"/></operator><name pos:line="103" pos:column="17">revents<pos:position pos:line="103" pos:column="24"/></name> <operator pos:line="103" pos:column="25">&amp;<pos:position pos:line="103" pos:column="30"/></operator> <operator pos:line="103" pos:column="27">(<pos:position pos:line="103" pos:column="28"/></operator><name pos:line="103" pos:column="28">POLLRDNORM<pos:position pos:line="103" pos:column="38"/></name><operator pos:line="103" pos:column="38">|<pos:position pos:line="103" pos:column="39"/></operator><name pos:line="103" pos:column="39">POLLIN<pos:position pos:line="103" pos:column="45"/></name><operator pos:line="103" pos:column="45">|<pos:position pos:line="103" pos:column="46"/></operator><name pos:line="103" pos:column="46">POLLERR<pos:position pos:line="103" pos:column="53"/></name><operator pos:line="103" pos:column="53">|<pos:position pos:line="103" pos:column="54"/></operator><name pos:line="103" pos:column="54">POLLHUP<pos:position pos:line="103" pos:column="61"/></name><operator pos:line="103" pos:column="61">)<pos:position pos:line="103" pos:column="62"/></operator></expr>)<pos:position pos:line="103" pos:column="63"/></condition><then pos:line="103" pos:column="63">
      <block type="pseudo"><expr_stmt><expr><name pos:line="104" pos:column="7">ret<pos:position pos:line="104" pos:column="10"/></name> <operator pos:line="104" pos:column="11">|=<pos:position pos:line="104" pos:column="13"/></operator> <name pos:line="104" pos:column="14">CURL_CSELECT_IN2<pos:position pos:line="104" pos:column="30"/></name></expr>;<pos:position pos:line="104" pos:column="31"/></expr_stmt></block></then></if>
    <if pos:line="105" pos:column="5">if<condition pos:line="105" pos:column="7">(<expr><name><name pos:line="105" pos:column="8">pfd<pos:position pos:line="105" pos:column="11"/></name><index pos:line="105" pos:column="11">[<expr><name pos:line="105" pos:column="12">num<pos:position pos:line="105" pos:column="15"/></name></expr>]<pos:position pos:line="105" pos:column="16"/></index></name><operator pos:line="105" pos:column="16">.<pos:position pos:line="105" pos:column="17"/></operator><name pos:line="105" pos:column="17">revents<pos:position pos:line="105" pos:column="24"/></name> <operator pos:line="105" pos:column="25">&amp;<pos:position pos:line="105" pos:column="30"/></operator> <operator pos:line="105" pos:column="27">(<pos:position pos:line="105" pos:column="28"/></operator><name pos:line="105" pos:column="28">POLLRDBAND<pos:position pos:line="105" pos:column="38"/></name><operator pos:line="105" pos:column="38">|<pos:position pos:line="105" pos:column="39"/></operator><name pos:line="105" pos:column="39">POLLPRI<pos:position pos:line="105" pos:column="46"/></name><operator pos:line="105" pos:column="46">|<pos:position pos:line="105" pos:column="47"/></operator><name pos:line="105" pos:column="47">POLLNVAL<pos:position pos:line="105" pos:column="55"/></name><operator pos:line="105" pos:column="55">)<pos:position pos:line="105" pos:column="56"/></operator></expr>)<pos:position pos:line="105" pos:column="57"/></condition><then pos:line="105" pos:column="57">
      <block type="pseudo"><expr_stmt><expr><name pos:line="106" pos:column="7">ret<pos:position pos:line="106" pos:column="10"/></name> <operator pos:line="106" pos:column="11">|=<pos:position pos:line="106" pos:column="13"/></operator> <name pos:line="106" pos:column="14">CURL_CSELECT_ERR<pos:position pos:line="106" pos:column="30"/></name></expr>;<pos:position pos:line="106" pos:column="31"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="107" pos:column="5">num<pos:position pos:line="107" pos:column="8"/></name><operator pos:line="107" pos:column="8">++<pos:position pos:line="107" pos:column="10"/></operator></expr>;<pos:position pos:line="107" pos:column="11"/></expr_stmt>
  }<pos:position pos:line="108" pos:column="4"/></block></then></if>
  <if pos:line="109" pos:column="3">if<condition pos:line="109" pos:column="5">(<expr><name pos:line="109" pos:column="6">writefd<pos:position pos:line="109" pos:column="13"/></name> <operator pos:line="109" pos:column="14">!=<pos:position pos:line="109" pos:column="16"/></operator> <name pos:line="109" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="109" pos:column="32"/></name></expr>)<pos:position pos:line="109" pos:column="33"/></condition><then pos:line="109" pos:column="33"> <block pos:line="109" pos:column="34">{
    <if pos:line="110" pos:column="5">if<condition pos:line="110" pos:column="7">(<expr><name><name pos:line="110" pos:column="8">pfd<pos:position pos:line="110" pos:column="11"/></name><index pos:line="110" pos:column="11">[<expr><name pos:line="110" pos:column="12">num<pos:position pos:line="110" pos:column="15"/></name></expr>]<pos:position pos:line="110" pos:column="16"/></index></name><operator pos:line="110" pos:column="16">.<pos:position pos:line="110" pos:column="17"/></operator><name pos:line="110" pos:column="17">revents<pos:position pos:line="110" pos:column="24"/></name> <operator pos:line="110" pos:column="25">&amp;<pos:position pos:line="110" pos:column="30"/></operator> <operator pos:line="110" pos:column="27">(<pos:position pos:line="110" pos:column="28"/></operator><name pos:line="110" pos:column="28">POLLWRNORM<pos:position pos:line="110" pos:column="38"/></name><operator pos:line="110" pos:column="38">|<pos:position pos:line="110" pos:column="39"/></operator><name pos:line="110" pos:column="39">POLLOUT<pos:position pos:line="110" pos:column="46"/></name><operator pos:line="110" pos:column="46">)<pos:position pos:line="110" pos:column="47"/></operator></expr>)<pos:position pos:line="110" pos:column="48"/></condition><then pos:line="110" pos:column="48">
      <block type="pseudo"><expr_stmt><expr><name pos:line="111" pos:column="7">ret<pos:position pos:line="111" pos:column="10"/></name> <operator pos:line="111" pos:column="11">|=<pos:position pos:line="111" pos:column="13"/></operator> <name pos:line="111" pos:column="14">CURL_CSELECT_OUT<pos:position pos:line="111" pos:column="30"/></name></expr>;<pos:position pos:line="111" pos:column="31"/></expr_stmt></block></then></if>
    <if pos:line="112" pos:column="5">if<condition pos:line="112" pos:column="7">(<expr><name><name pos:line="112" pos:column="8">pfd<pos:position pos:line="112" pos:column="11"/></name><index pos:line="112" pos:column="11">[<expr><name pos:line="112" pos:column="12">num<pos:position pos:line="112" pos:column="15"/></name></expr>]<pos:position pos:line="112" pos:column="16"/></index></name><operator pos:line="112" pos:column="16">.<pos:position pos:line="112" pos:column="17"/></operator><name pos:line="112" pos:column="17">revents<pos:position pos:line="112" pos:column="24"/></name> <operator pos:line="112" pos:column="25">&amp;<pos:position pos:line="112" pos:column="30"/></operator> <operator pos:line="112" pos:column="27">(<pos:position pos:line="112" pos:column="28"/></operator><name pos:line="112" pos:column="28">POLLERR<pos:position pos:line="112" pos:column="35"/></name><operator pos:line="112" pos:column="35">|<pos:position pos:line="112" pos:column="36"/></operator><name pos:line="112" pos:column="36">POLLHUP<pos:position pos:line="112" pos:column="43"/></name><operator pos:line="112" pos:column="43">|<pos:position pos:line="112" pos:column="44"/></operator><name pos:line="112" pos:column="44">POLLNVAL<pos:position pos:line="112" pos:column="52"/></name><operator pos:line="112" pos:column="52">)<pos:position pos:line="112" pos:column="53"/></operator></expr>)<pos:position pos:line="112" pos:column="54"/></condition><then pos:line="112" pos:column="54">
      <block type="pseudo"><expr_stmt><expr><name pos:line="113" pos:column="7">ret<pos:position pos:line="113" pos:column="10"/></name> <operator pos:line="113" pos:column="11">|=<pos:position pos:line="113" pos:column="13"/></operator> <name pos:line="113" pos:column="14">CURL_CSELECT_ERR<pos:position pos:line="113" pos:column="30"/></name></expr>;<pos:position pos:line="113" pos:column="31"/></expr_stmt></block></then></if>
  }<pos:position pos:line="114" pos:column="4"/></block></then></if>

  <return pos:line="116" pos:column="3">return <expr><name pos:line="116" pos:column="10">ret<pos:position pos:line="116" pos:column="13"/></name></expr>;<pos:position pos:line="116" pos:column="14"/></return>

<cpp:else pos:line="118" pos:column="1">#<cpp:directive pos:line="118" pos:column="2">else<pos:position pos:line="118" pos:column="6"/></cpp:directive></cpp:else>  <comment type="block" pos:line="118" pos:column="8">/* HAVE_POLL_FINE */</comment>

  <expr_stmt><expr><call><name pos:line="120" pos:column="3">FD_ZERO<pos:position pos:line="120" pos:column="10"/></name><argument_list pos:line="120" pos:column="10">(<argument><expr><operator pos:line="120" pos:column="11">&amp;<pos:position pos:line="120" pos:column="16"/></operator><name pos:line="120" pos:column="12">fds_err<pos:position pos:line="120" pos:column="19"/></name></expr></argument>)<pos:position pos:line="120" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="121" pos:column="3">maxfd<pos:position pos:line="121" pos:column="8"/></name> <operator pos:line="121" pos:column="9">=<pos:position pos:line="121" pos:column="10"/></operator> <operator pos:line="121" pos:column="11">(<pos:position pos:line="121" pos:column="12"/></operator><name pos:line="121" pos:column="12">curl_socket_t<pos:position pos:line="121" pos:column="25"/></name><operator pos:line="121" pos:column="25">)<pos:position pos:line="121" pos:column="26"/></operator><operator pos:line="121" pos:column="26">-<pos:position pos:line="121" pos:column="27"/></operator><literal type="number" pos:line="121" pos:column="27">1<pos:position pos:line="121" pos:column="28"/></literal></expr>;<pos:position pos:line="121" pos:column="29"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="123" pos:column="3">FD_ZERO<pos:position pos:line="123" pos:column="10"/></name><argument_list pos:line="123" pos:column="10">(<argument><expr><operator pos:line="123" pos:column="11">&amp;<pos:position pos:line="123" pos:column="16"/></operator><name pos:line="123" pos:column="12">fds_read<pos:position pos:line="123" pos:column="20"/></name></expr></argument>)<pos:position pos:line="123" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="22"/></expr_stmt>
  <if pos:line="124" pos:column="3">if<condition pos:line="124" pos:column="5">(<expr><name pos:line="124" pos:column="6">readfd0<pos:position pos:line="124" pos:column="13"/></name> <operator pos:line="124" pos:column="14">!=<pos:position pos:line="124" pos:column="16"/></operator> <name pos:line="124" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="124" pos:column="32"/></name></expr>)<pos:position pos:line="124" pos:column="33"/></condition><then pos:line="124" pos:column="33"> <block pos:line="124" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="125" pos:column="5">VERIFY_SOCK<pos:position pos:line="125" pos:column="16"/></name><argument_list pos:line="125" pos:column="16">(<argument><expr><name pos:line="125" pos:column="17">readfd0<pos:position pos:line="125" pos:column="24"/></name></expr></argument>)<pos:position pos:line="125" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="126" pos:column="5">FD_SET<pos:position pos:line="126" pos:column="11"/></name><argument_list pos:line="126" pos:column="11">(<argument><expr><name pos:line="126" pos:column="12">readfd0<pos:position pos:line="126" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="126" pos:column="21">&amp;<pos:position pos:line="126" pos:column="26"/></operator><name pos:line="126" pos:column="22">fds_read<pos:position pos:line="126" pos:column="30"/></name></expr></argument>)<pos:position pos:line="126" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="127" pos:column="5">FD_SET<pos:position pos:line="127" pos:column="11"/></name><argument_list pos:line="127" pos:column="11">(<argument><expr><name pos:line="127" pos:column="12">readfd0<pos:position pos:line="127" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="127" pos:column="21">&amp;<pos:position pos:line="127" pos:column="26"/></operator><name pos:line="127" pos:column="22">fds_err<pos:position pos:line="127" pos:column="29"/></name></expr></argument>)<pos:position pos:line="127" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="128" pos:column="5">maxfd<pos:position pos:line="128" pos:column="10"/></name> <operator pos:line="128" pos:column="11">=<pos:position pos:line="128" pos:column="12"/></operator> <name pos:line="128" pos:column="13">readfd0<pos:position pos:line="128" pos:column="20"/></name></expr>;<pos:position pos:line="128" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="129" pos:column="4"/></block></then></if>
  <if pos:line="130" pos:column="3">if<condition pos:line="130" pos:column="5">(<expr><name pos:line="130" pos:column="6">readfd1<pos:position pos:line="130" pos:column="13"/></name> <operator pos:line="130" pos:column="14">!=<pos:position pos:line="130" pos:column="16"/></operator> <name pos:line="130" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="130" pos:column="32"/></name></expr>)<pos:position pos:line="130" pos:column="33"/></condition><then pos:line="130" pos:column="33"> <block pos:line="130" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="131" pos:column="5">VERIFY_SOCK<pos:position pos:line="131" pos:column="16"/></name><argument_list pos:line="131" pos:column="16">(<argument><expr><name pos:line="131" pos:column="17">readfd1<pos:position pos:line="131" pos:column="24"/></name></expr></argument>)<pos:position pos:line="131" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="132" pos:column="5">FD_SET<pos:position pos:line="132" pos:column="11"/></name><argument_list pos:line="132" pos:column="11">(<argument><expr><name pos:line="132" pos:column="12">readfd1<pos:position pos:line="132" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="132" pos:column="21">&amp;<pos:position pos:line="132" pos:column="26"/></operator><name pos:line="132" pos:column="22">fds_read<pos:position pos:line="132" pos:column="30"/></name></expr></argument>)<pos:position pos:line="132" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="133" pos:column="5">FD_SET<pos:position pos:line="133" pos:column="11"/></name><argument_list pos:line="133" pos:column="11">(<argument><expr><name pos:line="133" pos:column="12">readfd1<pos:position pos:line="133" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="133" pos:column="21">&amp;<pos:position pos:line="133" pos:column="26"/></operator><name pos:line="133" pos:column="22">fds_err<pos:position pos:line="133" pos:column="29"/></name></expr></argument>)<pos:position pos:line="133" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="31"/></expr_stmt>
    <if pos:line="134" pos:column="5">if<condition pos:line="134" pos:column="7">(<expr><name pos:line="134" pos:column="8">readfd1<pos:position pos:line="134" pos:column="15"/></name> <operator pos:line="134" pos:column="16">&gt;<pos:position pos:line="134" pos:column="20"/></operator> <name pos:line="134" pos:column="18">maxfd<pos:position pos:line="134" pos:column="23"/></name></expr>)<pos:position pos:line="134" pos:column="24"/></condition><then pos:line="134" pos:column="24">
      <block type="pseudo"><expr_stmt><expr><name pos:line="135" pos:column="7">maxfd<pos:position pos:line="135" pos:column="12"/></name> <operator pos:line="135" pos:column="13">=<pos:position pos:line="135" pos:column="14"/></operator> <name pos:line="135" pos:column="15">readfd1<pos:position pos:line="135" pos:column="22"/></name></expr>;<pos:position pos:line="135" pos:column="23"/></expr_stmt></block></then></if>
  }<pos:position pos:line="136" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="138" pos:column="3">FD_ZERO<pos:position pos:line="138" pos:column="10"/></name><argument_list pos:line="138" pos:column="10">(<argument><expr><operator pos:line="138" pos:column="11">&amp;<pos:position pos:line="138" pos:column="16"/></operator><name pos:line="138" pos:column="12">fds_write<pos:position pos:line="138" pos:column="21"/></name></expr></argument>)<pos:position pos:line="138" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="23"/></expr_stmt>
  <if pos:line="139" pos:column="3">if<condition pos:line="139" pos:column="5">(<expr><name pos:line="139" pos:column="6">writefd<pos:position pos:line="139" pos:column="13"/></name> <operator pos:line="139" pos:column="14">!=<pos:position pos:line="139" pos:column="16"/></operator> <name pos:line="139" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="139" pos:column="32"/></name></expr>)<pos:position pos:line="139" pos:column="33"/></condition><then pos:line="139" pos:column="33"> <block pos:line="139" pos:column="34">{
    <expr_stmt><expr><call><name pos:line="140" pos:column="5">VERIFY_SOCK<pos:position pos:line="140" pos:column="16"/></name><argument_list pos:line="140" pos:column="16">(<argument><expr><name pos:line="140" pos:column="17">writefd<pos:position pos:line="140" pos:column="24"/></name></expr></argument>)<pos:position pos:line="140" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="141" pos:column="5">FD_SET<pos:position pos:line="141" pos:column="11"/></name><argument_list pos:line="141" pos:column="11">(<argument><expr><name pos:line="141" pos:column="12">writefd<pos:position pos:line="141" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="141" pos:column="21">&amp;<pos:position pos:line="141" pos:column="26"/></operator><name pos:line="141" pos:column="22">fds_write<pos:position pos:line="141" pos:column="31"/></name></expr></argument>)<pos:position pos:line="141" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="142" pos:column="5">FD_SET<pos:position pos:line="142" pos:column="11"/></name><argument_list pos:line="142" pos:column="11">(<argument><expr><name pos:line="142" pos:column="12">writefd<pos:position pos:line="142" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="142" pos:column="21">&amp;<pos:position pos:line="142" pos:column="26"/></operator><name pos:line="142" pos:column="22">fds_err<pos:position pos:line="142" pos:column="29"/></name></expr></argument>)<pos:position pos:line="142" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="31"/></expr_stmt>
    <if pos:line="143" pos:column="5">if<condition pos:line="143" pos:column="7">(<expr><name pos:line="143" pos:column="8">writefd<pos:position pos:line="143" pos:column="15"/></name> <operator pos:line="143" pos:column="16">&gt;<pos:position pos:line="143" pos:column="20"/></operator> <name pos:line="143" pos:column="18">maxfd<pos:position pos:line="143" pos:column="23"/></name></expr>)<pos:position pos:line="143" pos:column="24"/></condition><then pos:line="143" pos:column="24">
      <block type="pseudo"><expr_stmt><expr><name pos:line="144" pos:column="7">maxfd<pos:position pos:line="144" pos:column="12"/></name> <operator pos:line="144" pos:column="13">=<pos:position pos:line="144" pos:column="14"/></operator> <name pos:line="144" pos:column="15">writefd<pos:position pos:line="144" pos:column="22"/></name></expr>;<pos:position pos:line="144" pos:column="23"/></expr_stmt></block></then></if>
  }<pos:position pos:line="145" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="147" pos:column="3">ptimeout<pos:position pos:line="147" pos:column="11"/></name> <operator pos:line="147" pos:column="12">=<pos:position pos:line="147" pos:column="13"/></operator> <ternary><condition><expr><operator pos:line="147" pos:column="14">(<pos:position pos:line="147" pos:column="15"/></operator><name pos:line="147" pos:column="15">timeout_ms<pos:position pos:line="147" pos:column="25"/></name> <operator pos:line="147" pos:column="26">&lt;<pos:position pos:line="147" pos:column="30"/></operator> <literal type="number" pos:line="147" pos:column="28">0<pos:position pos:line="147" pos:column="29"/></literal><operator pos:line="147" pos:column="29">)<pos:position pos:line="147" pos:column="30"/></operator></expr> ?<pos:position pos:line="147" pos:column="32"/></condition><then pos:line="147" pos:column="32"> <expr><name pos:line="147" pos:column="33">NULL<pos:position pos:line="147" pos:column="37"/></name></expr> <pos:position pos:line="147" pos:column="38"/></then><else pos:line="147" pos:column="38">: <expr><operator pos:line="147" pos:column="40">&amp;<pos:position pos:line="147" pos:column="45"/></operator><name pos:line="147" pos:column="41">pending_tv<pos:position pos:line="147" pos:column="51"/></name></expr></else></ternary></expr>;<pos:position pos:line="147" pos:column="52"/></expr_stmt>

  <do pos:line="149" pos:column="3">do <block pos:line="149" pos:column="6">{
    <if pos:line="150" pos:column="5">if<condition pos:line="150" pos:column="7">(<expr><name pos:line="150" pos:column="8">timeout_ms<pos:position pos:line="150" pos:column="18"/></name> <operator pos:line="150" pos:column="19">&gt;<pos:position pos:line="150" pos:column="23"/></operator> <literal type="number" pos:line="150" pos:column="21">0<pos:position pos:line="150" pos:column="22"/></literal></expr>)<pos:position pos:line="150" pos:column="23"/></condition><then pos:line="150" pos:column="23"> <block pos:line="150" pos:column="24">{
      <expr_stmt><expr><name><name pos:line="151" pos:column="7">pending_tv<pos:position pos:line="151" pos:column="17"/></name><operator pos:line="151" pos:column="17">.<pos:position pos:line="151" pos:column="18"/></operator><name pos:line="151" pos:column="18">tv_sec<pos:position pos:line="151" pos:column="24"/></name></name> <operator pos:line="151" pos:column="25">=<pos:position pos:line="151" pos:column="26"/></operator> <name pos:line="151" pos:column="27">pending_ms<pos:position pos:line="151" pos:column="37"/></name> <operator pos:line="151" pos:column="38">/<pos:position pos:line="151" pos:column="39"/></operator> <literal type="number" pos:line="151" pos:column="40">1000<pos:position pos:line="151" pos:column="44"/></literal></expr>;<pos:position pos:line="151" pos:column="45"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="152" pos:column="7">pending_tv<pos:position pos:line="152" pos:column="17"/></name><operator pos:line="152" pos:column="17">.<pos:position pos:line="152" pos:column="18"/></operator><name pos:line="152" pos:column="18">tv_usec<pos:position pos:line="152" pos:column="25"/></name></name> <operator pos:line="152" pos:column="26">=<pos:position pos:line="152" pos:column="27"/></operator> <operator pos:line="152" pos:column="28">(<pos:position pos:line="152" pos:column="29"/></operator><name pos:line="152" pos:column="29">pending_ms<pos:position pos:line="152" pos:column="39"/></name> <operator pos:line="152" pos:column="40">%<pos:position pos:line="152" pos:column="41"/></operator> <literal type="number" pos:line="152" pos:column="42">1000<pos:position pos:line="152" pos:column="46"/></literal><operator pos:line="152" pos:column="46">)<pos:position pos:line="152" pos:column="47"/></operator> <operator pos:line="152" pos:column="48">*<pos:position pos:line="152" pos:column="49"/></operator> <literal type="number" pos:line="152" pos:column="50">1000<pos:position pos:line="152" pos:column="54"/></literal></expr>;<pos:position pos:line="152" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="153" pos:column="6"/></block></then>
    <elseif pos:line="154" pos:column="5">else <if pos:line="154" pos:column="10">if<condition pos:line="154" pos:column="12">(<expr><operator pos:line="154" pos:column="13">!<pos:position pos:line="154" pos:column="14"/></operator><name pos:line="154" pos:column="14">timeout_ms<pos:position pos:line="154" pos:column="24"/></name></expr>)<pos:position pos:line="154" pos:column="25"/></condition><then pos:line="154" pos:column="25"> <block pos:line="154" pos:column="26">{
      <expr_stmt><expr><name><name pos:line="155" pos:column="7">pending_tv<pos:position pos:line="155" pos:column="17"/></name><operator pos:line="155" pos:column="17">.<pos:position pos:line="155" pos:column="18"/></operator><name pos:line="155" pos:column="18">tv_sec<pos:position pos:line="155" pos:column="24"/></name></name> <operator pos:line="155" pos:column="25">=<pos:position pos:line="155" pos:column="26"/></operator> <literal type="number" pos:line="155" pos:column="27">0<pos:position pos:line="155" pos:column="28"/></literal></expr>;<pos:position pos:line="155" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="156" pos:column="7">pending_tv<pos:position pos:line="156" pos:column="17"/></name><operator pos:line="156" pos:column="17">.<pos:position pos:line="156" pos:column="18"/></operator><name pos:line="156" pos:column="18">tv_usec<pos:position pos:line="156" pos:column="25"/></name></name> <operator pos:line="156" pos:column="26">=<pos:position pos:line="156" pos:column="27"/></operator> <literal type="number" pos:line="156" pos:column="28">0<pos:position pos:line="156" pos:column="29"/></literal></expr>;<pos:position pos:line="156" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="157" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="159" pos:column="5">/* WinSock select() must not be called with an fd_set that contains zero
       fd flags, or it will return WSAEINVAL.  But, it also can't be called
       with no fd_sets at all!  From the documentation:

         Any two of the parameters, readfds, writefds, or exceptfds, can be
         given as null. At least one must be non-null, and any non-null
         descriptor set must contain at least one handle to a socket.

       We know that we have at least one bit set in at least two fd_sets in
       this case, but we may have no bits set in either fds_read or fd_write,
       so check for that and handle it.  Luckily, with WinSock, we can _also_
       ask how many bits are set on an fd_set.

       It is unclear why WinSock doesn't just handle this for us instead of
       calling this an error.

       Note also that WinSock ignores the first argument, so we don't worry
       about the fact that maxfd is computed incorrectly with WinSock (since
       curl_socket_t is unsigned in such cases and thus -1 is the largest
       value).
    */</comment>
<cpp:ifdef pos:line="180" pos:column="1">#<cpp:directive pos:line="180" pos:column="2">ifdef<pos:position pos:line="180" pos:column="7"/></cpp:directive> <name pos:line="180" pos:column="8">USE_WINSOCK<pos:position pos:line="180" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="181" pos:column="5">r<pos:position pos:line="181" pos:column="6"/></name> <operator pos:line="181" pos:column="7">=<pos:position pos:line="181" pos:column="8"/></operator> <call><name pos:line="181" pos:column="9">select<pos:position pos:line="181" pos:column="15"/></name><argument_list pos:line="181" pos:column="15">(<argument><expr><operator pos:line="181" pos:column="16">(<pos:position pos:line="181" pos:column="17"/></operator><name pos:line="181" pos:column="17">int<pos:position pos:line="181" pos:column="20"/></name><operator pos:line="181" pos:column="20">)<pos:position pos:line="181" pos:column="21"/></operator><name pos:line="181" pos:column="21">maxfd<pos:position pos:line="181" pos:column="26"/></name> <operator pos:line="181" pos:column="27">+<pos:position pos:line="181" pos:column="28"/></operator> <literal type="number" pos:line="181" pos:column="29">1<pos:position pos:line="181" pos:column="30"/></literal></expr></argument>,
               <argument><expr><ternary><condition><expr><name><name pos:line="182" pos:column="16">fds_read<pos:position pos:line="182" pos:column="24"/></name><operator pos:line="182" pos:column="24">.<pos:position pos:line="182" pos:column="25"/></operator><name pos:line="182" pos:column="25">fd_count<pos:position pos:line="182" pos:column="33"/></name></name></expr> ?<pos:position pos:line="182" pos:column="35"/></condition><then pos:line="182" pos:column="35"> <expr><operator pos:line="182" pos:column="36">&amp;<pos:position pos:line="182" pos:column="41"/></operator><name pos:line="182" pos:column="37">fds_read<pos:position pos:line="182" pos:column="45"/></name></expr> <pos:position pos:line="182" pos:column="46"/></then><else pos:line="182" pos:column="46">: <expr><name pos:line="182" pos:column="48">NULL<pos:position pos:line="182" pos:column="52"/></name></expr></else></ternary></expr></argument>,
               <argument><expr><ternary><condition><expr><name><name pos:line="183" pos:column="16">fds_write<pos:position pos:line="183" pos:column="25"/></name><operator pos:line="183" pos:column="25">.<pos:position pos:line="183" pos:column="26"/></operator><name pos:line="183" pos:column="26">fd_count<pos:position pos:line="183" pos:column="34"/></name></name></expr> ?<pos:position pos:line="183" pos:column="36"/></condition><then pos:line="183" pos:column="36"> <expr><operator pos:line="183" pos:column="37">&amp;<pos:position pos:line="183" pos:column="42"/></operator><name pos:line="183" pos:column="38">fds_write<pos:position pos:line="183" pos:column="47"/></name></expr> <pos:position pos:line="183" pos:column="48"/></then><else pos:line="183" pos:column="48">: <expr><name pos:line="183" pos:column="50">NULL<pos:position pos:line="183" pos:column="54"/></name></expr></else></ternary></expr></argument>,
               <argument><expr><operator pos:line="184" pos:column="16">&amp;<pos:position pos:line="184" pos:column="21"/></operator><name pos:line="184" pos:column="17">fds_err<pos:position pos:line="184" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="184" pos:column="26">ptimeout<pos:position pos:line="184" pos:column="34"/></name></expr></argument>)<pos:position pos:line="184" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="36"/></expr_stmt>
<cpp:else pos:line="185" pos:column="1">#<cpp:directive pos:line="185" pos:column="2">else<pos:position pos:line="185" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><name pos:line="186" pos:column="5">r<pos:position pos:line="186" pos:column="6"/></name> <operator pos:line="186" pos:column="7">=<pos:position pos:line="186" pos:column="8"/></operator> <call><name pos:line="186" pos:column="9">select<pos:position pos:line="186" pos:column="15"/></name><argument_list pos:line="186" pos:column="15">(<argument><expr><operator pos:line="186" pos:column="16">(<pos:position pos:line="186" pos:column="17"/></operator><name pos:line="186" pos:column="17">int<pos:position pos:line="186" pos:column="20"/></name><operator pos:line="186" pos:column="20">)<pos:position pos:line="186" pos:column="21"/></operator><name pos:line="186" pos:column="21">maxfd<pos:position pos:line="186" pos:column="26"/></name> <operator pos:line="186" pos:column="27">+<pos:position pos:line="186" pos:column="28"/></operator> <literal type="number" pos:line="186" pos:column="29">1<pos:position pos:line="186" pos:column="30"/></literal></expr></argument>, <argument><expr><operator pos:line="186" pos:column="32">&amp;<pos:position pos:line="186" pos:column="37"/></operator><name pos:line="186" pos:column="33">fds_read<pos:position pos:line="186" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="186" pos:column="43">&amp;<pos:position pos:line="186" pos:column="48"/></operator><name pos:line="186" pos:column="44">fds_write<pos:position pos:line="186" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="186" pos:column="55">&amp;<pos:position pos:line="186" pos:column="60"/></operator><name pos:line="186" pos:column="56">fds_err<pos:position pos:line="186" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="186" pos:column="65">ptimeout<pos:position pos:line="186" pos:column="73"/></name></expr></argument>)<pos:position pos:line="186" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="75"/></expr_stmt>
<cpp:endif pos:line="187" pos:column="1">#<cpp:directive pos:line="187" pos:column="2">endif<pos:position pos:line="187" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="189" pos:column="5">if<condition pos:line="189" pos:column="7">(<expr><name pos:line="189" pos:column="8">r<pos:position pos:line="189" pos:column="9"/></name> <operator pos:line="189" pos:column="10">!=<pos:position pos:line="189" pos:column="12"/></operator> <operator pos:line="189" pos:column="13">-<pos:position pos:line="189" pos:column="14"/></operator><literal type="number" pos:line="189" pos:column="14">1<pos:position pos:line="189" pos:column="15"/></literal></expr>)<pos:position pos:line="189" pos:column="16"/></condition><then pos:line="189" pos:column="16">
      <block type="pseudo"><break pos:line="190" pos:column="7">break;<pos:position pos:line="190" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><name pos:line="191" pos:column="5">error<pos:position pos:line="191" pos:column="10"/></name> <operator pos:line="191" pos:column="11">=<pos:position pos:line="191" pos:column="12"/></operator> <name pos:line="191" pos:column="13">SOCKERRNO<pos:position pos:line="191" pos:column="22"/></name></expr>;<pos:position pos:line="191" pos:column="23"/></expr_stmt>
    <if pos:line="192" pos:column="5">if<condition pos:line="192" pos:column="7">(<expr><name pos:line="192" pos:column="8">error<pos:position pos:line="192" pos:column="13"/></name> <operator pos:line="192" pos:column="14">&amp;&amp;<pos:position pos:line="192" pos:column="24"/></operator> <call><name pos:line="192" pos:column="17">ERROR_NOT_EINTR<pos:position pos:line="192" pos:column="32"/></name><argument_list pos:line="192" pos:column="32">(<argument><expr><name pos:line="192" pos:column="33">error<pos:position pos:line="192" pos:column="38"/></name></expr></argument>)<pos:position pos:line="192" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="192" pos:column="40"/></condition><then pos:line="192" pos:column="40">
      <block type="pseudo"><break pos:line="193" pos:column="7">break;<pos:position pos:line="193" pos:column="13"/></break></block></then></if>
    <if pos:line="194" pos:column="5">if<condition pos:line="194" pos:column="7">(<expr><name pos:line="194" pos:column="8">timeout_ms<pos:position pos:line="194" pos:column="18"/></name> <operator pos:line="194" pos:column="19">&gt;<pos:position pos:line="194" pos:column="23"/></operator> <literal type="number" pos:line="194" pos:column="21">0<pos:position pos:line="194" pos:column="22"/></literal></expr>)<pos:position pos:line="194" pos:column="23"/></condition><then pos:line="194" pos:column="23"> <block pos:line="194" pos:column="24">{
      <expr_stmt><expr><name pos:line="195" pos:column="7">pending_ms<pos:position pos:line="195" pos:column="17"/></name> <operator pos:line="195" pos:column="18">=<pos:position pos:line="195" pos:column="19"/></operator> <call pos:line="195" pos:column="20">(<name pos:line="195" pos:column="21">int<pos:position pos:line="195" pos:column="24"/></name>)<argument_list pos:line="195" pos:column="25">(<argument><expr><name pos:line="195" pos:column="26">timeout_ms<pos:position pos:line="195" pos:column="36"/></name> <operator pos:line="195" pos:column="37">-<pos:position pos:line="195" pos:column="38"/></operator> <call><name pos:line="195" pos:column="39">ELAPSED_MS<pos:position pos:line="195" pos:column="49"/></name><argument_list pos:line="195" pos:column="49">()<pos:position pos:line="195" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="195" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="53"/></expr_stmt>
      <if pos:line="196" pos:column="7">if<condition pos:line="196" pos:column="9">(<expr><name pos:line="196" pos:column="10">pending_ms<pos:position pos:line="196" pos:column="20"/></name> <operator pos:line="196" pos:column="21">&lt;=<pos:position pos:line="196" pos:column="26"/></operator> <literal type="number" pos:line="196" pos:column="24">0<pos:position pos:line="196" pos:column="25"/></literal></expr>)<pos:position pos:line="196" pos:column="26"/></condition><then pos:line="196" pos:column="26"> <block pos:line="196" pos:column="27">{
        <expr_stmt><expr><name pos:line="197" pos:column="9">r<pos:position pos:line="197" pos:column="10"/></name> <operator pos:line="197" pos:column="11">=<pos:position pos:line="197" pos:column="12"/></operator> <literal type="number" pos:line="197" pos:column="13">0<pos:position pos:line="197" pos:column="14"/></literal></expr>;<pos:position pos:line="197" pos:column="15"/></expr_stmt>  <comment type="block" pos:line="197" pos:column="17">/* Simulate a "call timed out" case */</comment>
        <break pos:line="198" pos:column="9">break;<pos:position pos:line="198" pos:column="15"/></break>
      }<pos:position pos:line="199" pos:column="8"/></block></then></if>
    }<pos:position pos:line="200" pos:column="6"/></block></then></if>
  }<pos:position pos:line="201" pos:column="4"/></block> while<condition pos:line="201" pos:column="10">(<expr><name pos:line="201" pos:column="11">r<pos:position pos:line="201" pos:column="12"/></name> <operator pos:line="201" pos:column="13">==<pos:position pos:line="201" pos:column="15"/></operator> <operator pos:line="201" pos:column="16">-<pos:position pos:line="201" pos:column="17"/></operator><literal type="number" pos:line="201" pos:column="17">1<pos:position pos:line="201" pos:column="18"/></literal></expr>)<pos:position pos:line="201" pos:column="19"/></condition>;<pos:position pos:line="201" pos:column="20"/></do>

  <if pos:line="203" pos:column="3">if<condition pos:line="203" pos:column="5">(<expr><name pos:line="203" pos:column="6">r<pos:position pos:line="203" pos:column="7"/></name> <operator pos:line="203" pos:column="8">&lt;<pos:position pos:line="203" pos:column="12"/></operator> <literal type="number" pos:line="203" pos:column="10">0<pos:position pos:line="203" pos:column="11"/></literal></expr>)<pos:position pos:line="203" pos:column="12"/></condition><then pos:line="203" pos:column="12">
    <block type="pseudo"><return pos:line="204" pos:column="5">return <expr><operator pos:line="204" pos:column="12">-<pos:position pos:line="204" pos:column="13"/></operator><literal type="number" pos:line="204" pos:column="13">1<pos:position pos:line="204" pos:column="14"/></literal></expr>;<pos:position pos:line="204" pos:column="15"/></return></block></then></if>
  <if pos:line="205" pos:column="3">if<condition pos:line="205" pos:column="5">(<expr><name pos:line="205" pos:column="6">r<pos:position pos:line="205" pos:column="7"/></name> <operator pos:line="205" pos:column="8">==<pos:position pos:line="205" pos:column="10"/></operator> <literal type="number" pos:line="205" pos:column="11">0<pos:position pos:line="205" pos:column="12"/></literal></expr>)<pos:position pos:line="205" pos:column="13"/></condition><then pos:line="205" pos:column="13">
    <block type="pseudo"><return pos:line="206" pos:column="5">return <expr><literal type="number" pos:line="206" pos:column="12">0<pos:position pos:line="206" pos:column="13"/></literal></expr>;<pos:position pos:line="206" pos:column="14"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="208" pos:column="3">ret<pos:position pos:line="208" pos:column="6"/></name> <operator pos:line="208" pos:column="7">=<pos:position pos:line="208" pos:column="8"/></operator> <literal type="number" pos:line="208" pos:column="9">0<pos:position pos:line="208" pos:column="10"/></literal></expr>;<pos:position pos:line="208" pos:column="11"/></expr_stmt>
  <if pos:line="209" pos:column="3">if<condition pos:line="209" pos:column="5">(<expr><name pos:line="209" pos:column="6">readfd0<pos:position pos:line="209" pos:column="13"/></name> <operator pos:line="209" pos:column="14">!=<pos:position pos:line="209" pos:column="16"/></operator> <name pos:line="209" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="209" pos:column="32"/></name></expr>)<pos:position pos:line="209" pos:column="33"/></condition><then pos:line="209" pos:column="33"> <block pos:line="209" pos:column="34">{
    <if pos:line="210" pos:column="5">if<condition pos:line="210" pos:column="7">(<expr><call><name pos:line="210" pos:column="8">FD_ISSET<pos:position pos:line="210" pos:column="16"/></name><argument_list pos:line="210" pos:column="16">(<argument><expr><name pos:line="210" pos:column="17">readfd0<pos:position pos:line="210" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="210" pos:column="26">&amp;<pos:position pos:line="210" pos:column="31"/></operator><name pos:line="210" pos:column="27">fds_read<pos:position pos:line="210" pos:column="35"/></name></expr></argument>)<pos:position pos:line="210" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="210" pos:column="37"/></condition><then pos:line="210" pos:column="37">
      <block type="pseudo"><expr_stmt><expr><name pos:line="211" pos:column="7">ret<pos:position pos:line="211" pos:column="10"/></name> <operator pos:line="211" pos:column="11">|=<pos:position pos:line="211" pos:column="13"/></operator> <name pos:line="211" pos:column="14">CURL_CSELECT_IN<pos:position pos:line="211" pos:column="29"/></name></expr>;<pos:position pos:line="211" pos:column="30"/></expr_stmt></block></then></if>
    <if pos:line="212" pos:column="5">if<condition pos:line="212" pos:column="7">(<expr><call><name pos:line="212" pos:column="8">FD_ISSET<pos:position pos:line="212" pos:column="16"/></name><argument_list pos:line="212" pos:column="16">(<argument><expr><name pos:line="212" pos:column="17">readfd0<pos:position pos:line="212" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="212" pos:column="26">&amp;<pos:position pos:line="212" pos:column="31"/></operator><name pos:line="212" pos:column="27">fds_err<pos:position pos:line="212" pos:column="34"/></name></expr></argument>)<pos:position pos:line="212" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="212" pos:column="36"/></condition><then pos:line="212" pos:column="36">
      <block type="pseudo"><expr_stmt><expr><name pos:line="213" pos:column="7">ret<pos:position pos:line="213" pos:column="10"/></name> <operator pos:line="213" pos:column="11">|=<pos:position pos:line="213" pos:column="13"/></operator> <name pos:line="213" pos:column="14">CURL_CSELECT_ERR<pos:position pos:line="213" pos:column="30"/></name></expr>;<pos:position pos:line="213" pos:column="31"/></expr_stmt></block></then></if>
  }<pos:position pos:line="214" pos:column="4"/></block></then></if>
  <if pos:line="215" pos:column="3">if<condition pos:line="215" pos:column="5">(<expr><name pos:line="215" pos:column="6">readfd1<pos:position pos:line="215" pos:column="13"/></name> <operator pos:line="215" pos:column="14">!=<pos:position pos:line="215" pos:column="16"/></operator> <name pos:line="215" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="215" pos:column="32"/></name></expr>)<pos:position pos:line="215" pos:column="33"/></condition><then pos:line="215" pos:column="33"> <block pos:line="215" pos:column="34">{
    <if pos:line="216" pos:column="5">if<condition pos:line="216" pos:column="7">(<expr><call><name pos:line="216" pos:column="8">FD_ISSET<pos:position pos:line="216" pos:column="16"/></name><argument_list pos:line="216" pos:column="16">(<argument><expr><name pos:line="216" pos:column="17">readfd1<pos:position pos:line="216" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="216" pos:column="26">&amp;<pos:position pos:line="216" pos:column="31"/></operator><name pos:line="216" pos:column="27">fds_read<pos:position pos:line="216" pos:column="35"/></name></expr></argument>)<pos:position pos:line="216" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="216" pos:column="37"/></condition><then pos:line="216" pos:column="37">
      <block type="pseudo"><expr_stmt><expr><name pos:line="217" pos:column="7">ret<pos:position pos:line="217" pos:column="10"/></name> <operator pos:line="217" pos:column="11">|=<pos:position pos:line="217" pos:column="13"/></operator> <name pos:line="217" pos:column="14">CURL_CSELECT_IN2<pos:position pos:line="217" pos:column="30"/></name></expr>;<pos:position pos:line="217" pos:column="31"/></expr_stmt></block></then></if>
    <if pos:line="218" pos:column="5">if<condition pos:line="218" pos:column="7">(<expr><call><name pos:line="218" pos:column="8">FD_ISSET<pos:position pos:line="218" pos:column="16"/></name><argument_list pos:line="218" pos:column="16">(<argument><expr><name pos:line="218" pos:column="17">readfd1<pos:position pos:line="218" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="218" pos:column="26">&amp;<pos:position pos:line="218" pos:column="31"/></operator><name pos:line="218" pos:column="27">fds_err<pos:position pos:line="218" pos:column="34"/></name></expr></argument>)<pos:position pos:line="218" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="218" pos:column="36"/></condition><then pos:line="218" pos:column="36">
      <block type="pseudo"><expr_stmt><expr><name pos:line="219" pos:column="7">ret<pos:position pos:line="219" pos:column="10"/></name> <operator pos:line="219" pos:column="11">|=<pos:position pos:line="219" pos:column="13"/></operator> <name pos:line="219" pos:column="14">CURL_CSELECT_ERR<pos:position pos:line="219" pos:column="30"/></name></expr>;<pos:position pos:line="219" pos:column="31"/></expr_stmt></block></then></if>
  }<pos:position pos:line="220" pos:column="4"/></block></then></if>
  <if pos:line="221" pos:column="3">if<condition pos:line="221" pos:column="5">(<expr><name pos:line="221" pos:column="6">writefd<pos:position pos:line="221" pos:column="13"/></name> <operator pos:line="221" pos:column="14">!=<pos:position pos:line="221" pos:column="16"/></operator> <name pos:line="221" pos:column="17">CURL_SOCKET_BAD<pos:position pos:line="221" pos:column="32"/></name></expr>)<pos:position pos:line="221" pos:column="33"/></condition><then pos:line="221" pos:column="33"> <block pos:line="221" pos:column="34">{
    <if pos:line="222" pos:column="5">if<condition pos:line="222" pos:column="7">(<expr><call><name pos:line="222" pos:column="8">FD_ISSET<pos:position pos:line="222" pos:column="16"/></name><argument_list pos:line="222" pos:column="16">(<argument><expr><name pos:line="222" pos:column="17">writefd<pos:position pos:line="222" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="222" pos:column="26">&amp;<pos:position pos:line="222" pos:column="31"/></operator><name pos:line="222" pos:column="27">fds_write<pos:position pos:line="222" pos:column="36"/></name></expr></argument>)<pos:position pos:line="222" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="222" pos:column="38"/></condition><then pos:line="222" pos:column="38">
      <block type="pseudo"><expr_stmt><expr><name pos:line="223" pos:column="7">ret<pos:position pos:line="223" pos:column="10"/></name> <operator pos:line="223" pos:column="11">|=<pos:position pos:line="223" pos:column="13"/></operator> <name pos:line="223" pos:column="14">CURL_CSELECT_OUT<pos:position pos:line="223" pos:column="30"/></name></expr>;<pos:position pos:line="223" pos:column="31"/></expr_stmt></block></then></if>
    <if pos:line="224" pos:column="5">if<condition pos:line="224" pos:column="7">(<expr><call><name pos:line="224" pos:column="8">FD_ISSET<pos:position pos:line="224" pos:column="16"/></name><argument_list pos:line="224" pos:column="16">(<argument><expr><name pos:line="224" pos:column="17">writefd<pos:position pos:line="224" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="224" pos:column="26">&amp;<pos:position pos:line="224" pos:column="31"/></operator><name pos:line="224" pos:column="27">fds_err<pos:position pos:line="224" pos:column="34"/></name></expr></argument>)<pos:position pos:line="224" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="224" pos:column="36"/></condition><then pos:line="224" pos:column="36">
      <block type="pseudo"><expr_stmt><expr><name pos:line="225" pos:column="7">ret<pos:position pos:line="225" pos:column="10"/></name> <operator pos:line="225" pos:column="11">|=<pos:position pos:line="225" pos:column="13"/></operator> <name pos:line="225" pos:column="14">CURL_CSELECT_ERR<pos:position pos:line="225" pos:column="30"/></name></expr>;<pos:position pos:line="225" pos:column="31"/></expr_stmt></block></then></if>
  }<pos:position pos:line="226" pos:column="4"/></block></then></if>

  <return pos:line="228" pos:column="3">return <expr><name pos:line="228" pos:column="10">ret<pos:position pos:line="228" pos:column="13"/></name></expr>;<pos:position pos:line="228" pos:column="14"/></return>

<cpp:endif pos:line="230" pos:column="1">#<cpp:directive pos:line="230" pos:column="2">endif<pos:position pos:line="230" pos:column="7"/></cpp:directive></cpp:endif>  <comment type="block" pos:line="230" pos:column="9">/* HAVE_POLL_FINE */</comment>

}<pos:position pos:line="232" pos:column="2"/></block></function></unit>
