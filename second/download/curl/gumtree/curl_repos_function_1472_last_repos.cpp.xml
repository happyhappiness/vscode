<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1472_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">fix_hostname<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">connectdata<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">conn<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="52">struct<pos:position pos:line="1" pos:column="58"/></name> <name pos:line="1" pos:column="59">hostname<pos:position pos:line="1" pos:column="67"/></name></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">host<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">len<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">Curl_easy<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">data<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name><name pos:line="4" pos:column="28">conn<pos:position pos:line="4" pos:column="32"/></name><operator pos:line="4" pos:column="32">-&gt;<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="34">data<pos:position pos:line="4" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>

<cpp:ifndef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifndef<pos:position pos:line="6" pos:column="8"/></cpp:directive> <name pos:line="6" pos:column="9">USE_LIBIDN2<pos:position pos:line="6" pos:column="20"/></name></cpp:ifndef>
  <expr_stmt><expr><operator pos:line="7" pos:column="3">(<pos:position pos:line="7" pos:column="4"/></operator><name pos:line="7" pos:column="4">void<pos:position pos:line="7" pos:column="8"/></name><operator pos:line="7" pos:column="8">)<pos:position pos:line="7" pos:column="9"/></operator><name pos:line="7" pos:column="9">data<pos:position pos:line="7" pos:column="13"/></name></expr>;<pos:position pos:line="7" pos:column="14"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="8" pos:column="3">(<pos:position pos:line="8" pos:column="4"/></operator><name pos:line="8" pos:column="4">void<pos:position pos:line="8" pos:column="8"/></name><operator pos:line="8" pos:column="8">)<pos:position pos:line="8" pos:column="9"/></operator><name pos:line="8" pos:column="9">conn<pos:position pos:line="8" pos:column="13"/></name></expr>;<pos:position pos:line="8" pos:column="14"/></expr_stmt>
<cpp:elif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">elif<pos:position pos:line="9" pos:column="6"/></cpp:directive> <expr><call><name pos:line="9" pos:column="7">defined<pos:position pos:line="9" pos:column="14"/></name><argument_list pos:line="9" pos:column="14">(<argument><expr><name pos:line="9" pos:column="15">CURL_DISABLE_VERBOSE_STRINGS<pos:position pos:line="9" pos:column="43"/></name></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><operator pos:line="10" pos:column="3">(<pos:position pos:line="10" pos:column="4"/></operator><name pos:line="10" pos:column="4">void<pos:position pos:line="10" pos:column="8"/></name><operator pos:line="10" pos:column="8">)<pos:position pos:line="10" pos:column="9"/></operator><name pos:line="10" pos:column="9">conn<pos:position pos:line="10" pos:column="13"/></name></expr>;<pos:position pos:line="10" pos:column="14"/></expr_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="13" pos:column="3">/* set the name we use to display the host name */</comment>
  <expr_stmt><expr><name><name pos:line="14" pos:column="3">host<pos:position pos:line="14" pos:column="7"/></name><operator pos:line="14" pos:column="7">-&gt;<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="9">dispname<pos:position pos:line="14" pos:column="17"/></name></name> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <name><name pos:line="14" pos:column="20">host<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">-&gt;<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="26">name<pos:position pos:line="14" pos:column="30"/></name></name></expr>;<pos:position pos:line="14" pos:column="31"/></expr_stmt>

  <expr_stmt><expr><name pos:line="16" pos:column="3">len<pos:position pos:line="16" pos:column="6"/></name> <operator pos:line="16" pos:column="7">=<pos:position pos:line="16" pos:column="8"/></operator> <call><name pos:line="16" pos:column="9">strlen<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><name><name pos:line="16" pos:column="16">host<pos:position pos:line="16" pos:column="20"/></name><operator pos:line="16" pos:column="20">-&gt;<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="22">name<pos:position pos:line="16" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="28"/></expr_stmt>
  <if pos:line="17" pos:column="3">if<condition pos:line="17" pos:column="5">(<expr><name pos:line="17" pos:column="6">len<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">&amp;&amp;<pos:position pos:line="17" pos:column="20"/></operator> <operator pos:line="17" pos:column="13">(<pos:position pos:line="17" pos:column="14"/></operator><name><name pos:line="17" pos:column="14">host<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">-&gt;<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="20">name<pos:position pos:line="17" pos:column="24"/></name><index pos:line="17" pos:column="24">[<expr><name pos:line="17" pos:column="25">len<pos:position pos:line="17" pos:column="28"/></name><operator pos:line="17" pos:column="28">-<pos:position pos:line="17" pos:column="29"/></operator><literal type="number" pos:line="17" pos:column="29">1<pos:position pos:line="17" pos:column="30"/></literal></expr>]<pos:position pos:line="17" pos:column="31"/></index></name> <operator pos:line="17" pos:column="32">==<pos:position pos:line="17" pos:column="34"/></operator> <literal type="char" pos:line="17" pos:column="35">'.'<pos:position pos:line="17" pos:column="38"/></literal><operator pos:line="17" pos:column="38">)<pos:position pos:line="17" pos:column="39"/></operator></expr>)<pos:position pos:line="17" pos:column="40"/></condition><then pos:line="17" pos:column="40">
    <comment type="block" pos:line="18" pos:column="5">/* strip off a single trailing dot if present, primarily for SNI but
       there's no use for it */</comment>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="20" pos:column="5">host<pos:position pos:line="20" pos:column="9"/></name><operator pos:line="20" pos:column="9">-&gt;<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="11">name<pos:position pos:line="20" pos:column="15"/></name><index pos:line="20" pos:column="15">[<expr><name pos:line="20" pos:column="16">len<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">-<pos:position pos:line="20" pos:column="20"/></operator><literal type="number" pos:line="20" pos:column="20">1<pos:position pos:line="20" pos:column="21"/></literal></expr>]<pos:position pos:line="20" pos:column="22"/></index></name> <operator pos:line="20" pos:column="23">=<pos:position pos:line="20" pos:column="24"/></operator> <literal type="number" pos:line="20" pos:column="25">0<pos:position pos:line="20" pos:column="26"/></literal></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="22" pos:column="3">/* Check name for non-ASCII and convert hostname to ACE form if we can */</comment>
  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><operator pos:line="23" pos:column="6">!<pos:position pos:line="23" pos:column="7"/></operator><call><name pos:line="23" pos:column="7">is_ASCII_name<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name><name pos:line="23" pos:column="21">host<pos:position pos:line="23" pos:column="25"/></name><operator pos:line="23" pos:column="25">-&gt;<pos:position pos:line="23" pos:column="30"/></operator><name pos:line="23" pos:column="27">name<pos:position pos:line="23" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="33"/></condition><then pos:line="23" pos:column="33"> <block pos:line="23" pos:column="34">{
<cpp:ifdef pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">ifdef<pos:position pos:line="24" pos:column="7"/></cpp:directive> <name pos:line="24" pos:column="8">USE_LIBIDN2<pos:position pos:line="24" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="25" pos:column="5">if<condition pos:line="25" pos:column="7">(<expr><call><name pos:line="25" pos:column="8">idn2_check_version<pos:position pos:line="25" pos:column="26"/></name><argument_list pos:line="25" pos:column="26">(<argument><expr><name pos:line="25" pos:column="27">IDN2_VERSION<pos:position pos:line="25" pos:column="39"/></name></expr></argument>)<pos:position pos:line="25" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="41"/></condition><then pos:line="25" pos:column="41"> <block pos:line="25" pos:column="42">{
      <decl_stmt><decl><type><name pos:line="26" pos:column="7">char<pos:position pos:line="26" pos:column="11"/></name> <modifier pos:line="26" pos:column="12">*<pos:position pos:line="26" pos:column="13"/></modifier></type><name pos:line="26" pos:column="13">ace_hostname<pos:position pos:line="26" pos:column="25"/></name> <init pos:line="26" pos:column="26">= <expr><name pos:line="26" pos:column="28">NULL<pos:position pos:line="26" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="26" pos:column="33"/></decl_stmt>
<cpp:if pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">if<pos:position pos:line="27" pos:column="4"/></cpp:directive> <expr><name pos:line="27" pos:column="5">IDN2_VERSION_NUMBER<pos:position pos:line="27" pos:column="24"/></name> <operator pos:line="27" pos:column="25">&gt;=<pos:position pos:line="27" pos:column="30"/></operator> <literal type="number" pos:line="27" pos:column="28">0x00140000<pos:position pos:line="27" pos:column="38"/></literal></expr></cpp:if>
      <comment type="block" pos:line="28" pos:column="7">/* IDN2_NFC_INPUT: Normalize input string using normalization form C.
         IDN2_NONTRANSITIONAL: Perform Unicode TR46 non-transitional
         processing. */</comment>
      <decl_stmt><decl><type><name pos:line="31" pos:column="7">int<pos:position pos:line="31" pos:column="10"/></name></type> <name pos:line="31" pos:column="11">flags<pos:position pos:line="31" pos:column="16"/></name> <init pos:line="31" pos:column="17">= <expr><name pos:line="31" pos:column="19">IDN2_NFC_INPUT<pos:position pos:line="31" pos:column="33"/></name> <operator pos:line="31" pos:column="34">|<pos:position pos:line="31" pos:column="35"/></operator> <name pos:line="31" pos:column="36">IDN2_NONTRANSITIONAL<pos:position pos:line="31" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="31" pos:column="57"/></decl_stmt>
<cpp:else pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">else<pos:position pos:line="32" pos:column="6"/></cpp:directive></cpp:else>
      <decl_stmt><decl><type><name pos:line="33" pos:column="7">int<pos:position pos:line="33" pos:column="10"/></name></type> <name pos:line="33" pos:column="11">flags<pos:position pos:line="33" pos:column="16"/></name> <init pos:line="33" pos:column="17">= <expr><name pos:line="33" pos:column="19">IDN2_NFC_INPUT<pos:position pos:line="33" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="33" pos:column="34"/></decl_stmt>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>
      <decl_stmt><decl><type><name pos:line="35" pos:column="7">int<pos:position pos:line="35" pos:column="10"/></name></type> <name pos:line="35" pos:column="11">rc<pos:position pos:line="35" pos:column="13"/></name> <init pos:line="35" pos:column="14">= <expr><call><name pos:line="35" pos:column="16">idn2_lookup_ul<pos:position pos:line="35" pos:column="30"/></name><argument_list pos:line="35" pos:column="30">(<argument><expr><operator pos:line="35" pos:column="31">(<pos:position pos:line="35" pos:column="32"/></operator><specifier pos:line="35" pos:column="32">const<pos:position pos:line="35" pos:column="37"/></specifier> <name pos:line="35" pos:column="38">char<pos:position pos:line="35" pos:column="42"/></name> <operator pos:line="35" pos:column="43">*<pos:position pos:line="35" pos:column="44"/></operator><operator pos:line="35" pos:column="44">)<pos:position pos:line="35" pos:column="45"/></operator><name><name pos:line="35" pos:column="45">host<pos:position pos:line="35" pos:column="49"/></name><operator pos:line="35" pos:column="49">-&gt;<pos:position pos:line="35" pos:column="54"/></operator><name pos:line="35" pos:column="51">name<pos:position pos:line="35" pos:column="55"/></name></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="57">&amp;<pos:position pos:line="35" pos:column="62"/></operator><name pos:line="35" pos:column="58">ace_hostname<pos:position pos:line="35" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="72">flags<pos:position pos:line="35" pos:column="77"/></name></expr></argument>)<pos:position pos:line="35" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="35" pos:column="79"/></decl_stmt>
      <if pos:line="36" pos:column="7">if<condition pos:line="36" pos:column="9">(<expr><name pos:line="36" pos:column="10">rc<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">==<pos:position pos:line="36" pos:column="15"/></operator> <name pos:line="36" pos:column="16">IDN2_OK<pos:position pos:line="36" pos:column="23"/></name></expr>)<pos:position pos:line="36" pos:column="24"/></condition><then pos:line="36" pos:column="24"> <block pos:line="36" pos:column="25">{
        <expr_stmt><expr><name><name pos:line="37" pos:column="9">host<pos:position pos:line="37" pos:column="13"/></name><operator pos:line="37" pos:column="13">-&gt;<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="15">encalloc<pos:position pos:line="37" pos:column="23"/></name></name> <operator pos:line="37" pos:column="24">=<pos:position pos:line="37" pos:column="25"/></operator> <operator pos:line="37" pos:column="26">(<pos:position pos:line="37" pos:column="27"/></operator><name pos:line="37" pos:column="27">char<pos:position pos:line="37" pos:column="31"/></name> <operator pos:line="37" pos:column="32">*<pos:position pos:line="37" pos:column="33"/></operator><operator pos:line="37" pos:column="33">)<pos:position pos:line="37" pos:column="34"/></operator><name pos:line="37" pos:column="34">ace_hostname<pos:position pos:line="37" pos:column="46"/></name></expr>;<pos:position pos:line="37" pos:column="47"/></expr_stmt>
        <comment type="block" pos:line="38" pos:column="9">/* change the name pointer to point to the encoded hostname */</comment>
        <expr_stmt><expr><name><name pos:line="39" pos:column="9">host<pos:position pos:line="39" pos:column="13"/></name><operator pos:line="39" pos:column="13">-&gt;<pos:position pos:line="39" pos:column="18"/></operator><name pos:line="39" pos:column="15">name<pos:position pos:line="39" pos:column="19"/></name></name> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <name><name pos:line="39" pos:column="22">host<pos:position pos:line="39" pos:column="26"/></name><operator pos:line="39" pos:column="26">-&gt;<pos:position pos:line="39" pos:column="31"/></operator><name pos:line="39" pos:column="28">encalloc<pos:position pos:line="39" pos:column="36"/></name></name></expr>;<pos:position pos:line="39" pos:column="37"/></expr_stmt>
      }<pos:position pos:line="40" pos:column="8"/></block></then>
      <else pos:line="41" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="9">infof<pos:position pos:line="42" pos:column="14"/></name><argument_list pos:line="42" pos:column="14">(<argument><expr><name pos:line="42" pos:column="15">data<pos:position pos:line="42" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="21">"Failed to convert %s to ACE; %s\n"<pos:position pos:line="42" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="58">host<pos:position pos:line="42" pos:column="62"/></name><operator pos:line="42" pos:column="62">-&gt;<pos:position pos:line="42" pos:column="67"/></operator><name pos:line="42" pos:column="64">name<pos:position pos:line="42" pos:column="68"/></name></name></expr></argument>,
              <argument><expr><call><name pos:line="43" pos:column="15">idn2_strerror<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><name pos:line="43" pos:column="29">rc<pos:position pos:line="43" pos:column="31"/></name></expr></argument>)<pos:position pos:line="43" pos:column="32"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="34"/></expr_stmt></block></else></if>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>
<cpp:elif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">elif<pos:position pos:line="45" pos:column="6"/></cpp:directive> <expr><call><name pos:line="45" pos:column="7">defined<pos:position pos:line="45" pos:column="14"/></name><argument_list pos:line="45" pos:column="14">(<argument><expr><name pos:line="45" pos:column="15">USE_WIN32_IDN<pos:position pos:line="45" pos:column="28"/></name></expr></argument>)<pos:position pos:line="45" pos:column="29"/></argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><name pos:line="46" pos:column="5">char<pos:position pos:line="46" pos:column="9"/></name> <modifier pos:line="46" pos:column="10">*<pos:position pos:line="46" pos:column="11"/></modifier></type><name pos:line="46" pos:column="11">ace_hostname<pos:position pos:line="46" pos:column="23"/></name> <init pos:line="46" pos:column="24">= <expr><name pos:line="46" pos:column="26">NULL<pos:position pos:line="46" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="46" pos:column="31"/></decl_stmt>

    <if pos:line="48" pos:column="5">if<condition pos:line="48" pos:column="7">(<expr><call><name pos:line="48" pos:column="8">curl_win32_idn_to_ascii<pos:position pos:line="48" pos:column="31"/></name><argument_list pos:line="48" pos:column="31">(<argument><expr><name><name pos:line="48" pos:column="32">host<pos:position pos:line="48" pos:column="36"/></name><operator pos:line="48" pos:column="36">-&gt;<pos:position pos:line="48" pos:column="41"/></operator><name pos:line="48" pos:column="38">name<pos:position pos:line="48" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="44">&amp;<pos:position pos:line="48" pos:column="49"/></operator><name pos:line="48" pos:column="45">ace_hostname<pos:position pos:line="48" pos:column="57"/></name></expr></argument>)<pos:position pos:line="48" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="59"/></condition><then pos:line="48" pos:column="59"> <block pos:line="48" pos:column="60">{
      <expr_stmt><expr><name><name pos:line="49" pos:column="7">host<pos:position pos:line="49" pos:column="11"/></name><operator pos:line="49" pos:column="11">-&gt;<pos:position pos:line="49" pos:column="16"/></operator><name pos:line="49" pos:column="13">encalloc<pos:position pos:line="49" pos:column="21"/></name></name> <operator pos:line="49" pos:column="22">=<pos:position pos:line="49" pos:column="23"/></operator> <name pos:line="49" pos:column="24">ace_hostname<pos:position pos:line="49" pos:column="36"/></name></expr>;<pos:position pos:line="49" pos:column="37"/></expr_stmt>
      <comment type="block" pos:line="50" pos:column="7">/* change the name pointer to point to the encoded hostname */</comment>
      <expr_stmt><expr><name><name pos:line="51" pos:column="7">host<pos:position pos:line="51" pos:column="11"/></name><operator pos:line="51" pos:column="11">-&gt;<pos:position pos:line="51" pos:column="16"/></operator><name pos:line="51" pos:column="13">name<pos:position pos:line="51" pos:column="17"/></name></name> <operator pos:line="51" pos:column="18">=<pos:position pos:line="51" pos:column="19"/></operator> <name><name pos:line="51" pos:column="20">host<pos:position pos:line="51" pos:column="24"/></name><operator pos:line="51" pos:column="24">-&gt;<pos:position pos:line="51" pos:column="29"/></operator><name pos:line="51" pos:column="26">encalloc<pos:position pos:line="51" pos:column="34"/></name></name></expr>;<pos:position pos:line="51" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="52" pos:column="6"/></block></then>
    <else pos:line="53" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="7">infof<pos:position pos:line="54" pos:column="12"/></name><argument_list pos:line="54" pos:column="12">(<argument><expr><name pos:line="54" pos:column="13">data<pos:position pos:line="54" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="19">"Failed to convert %s to ACE;\n"<pos:position pos:line="54" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="53">host<pos:position pos:line="54" pos:column="57"/></name><operator pos:line="54" pos:column="57">-&gt;<pos:position pos:line="54" pos:column="62"/></operator><name pos:line="54" pos:column="59">name<pos:position pos:line="54" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="65"/></expr_stmt></block></else></if>
<cpp:else pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">else<pos:position pos:line="55" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">infof<pos:position pos:line="56" pos:column="10"/></name><argument_list pos:line="56" pos:column="10">(<argument><expr><name pos:line="56" pos:column="11">data<pos:position pos:line="56" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="17">"IDN support not present, can't parse Unicode domains\n"<pos:position pos:line="56" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="75"/></expr_stmt>
<cpp:endif pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">endif<pos:position pos:line="57" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="58" pos:column="4"/></block></then></if>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
