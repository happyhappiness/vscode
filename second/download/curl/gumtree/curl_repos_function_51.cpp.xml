<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_51.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name pos:line="2" pos:column="1">url_fgets<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">char<pos:position pos:line="2" pos:column="15"/></name> <modifier pos:line="2" pos:column="16">*<pos:position pos:line="2" pos:column="17"/></modifier></type><name pos:line="2" pos:column="17">ptr<pos:position pos:line="2" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="22">int<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">size<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="32">URL_FILE<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">file<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">want<pos:position pos:line="4" pos:column="13"/></name> <init pos:line="4" pos:column="14">= <expr><name pos:line="4" pos:column="16">size<pos:position pos:line="4" pos:column="20"/></name> <operator pos:line="4" pos:column="21">-<pos:position pos:line="4" pos:column="22"/></operator> <literal type="number" pos:line="4" pos:column="23">1<pos:position pos:line="4" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt><comment type="block" pos:line="4" pos:column="25">/* always need to leave room for zero termination */</comment>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">loop<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>

    <switch pos:line="7" pos:column="5">switch<condition pos:line="7" pos:column="11">(<expr><name><name pos:line="7" pos:column="12">file<pos:position pos:line="7" pos:column="16"/></name><operator pos:line="7" pos:column="16">-&gt;<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="18">type<pos:position pos:line="7" pos:column="22"/></name></name></expr>)<pos:position pos:line="7" pos:column="23"/></condition>
    <block pos:line="8" pos:column="5">{
    <case pos:line="9" pos:column="5">case <expr><name pos:line="9" pos:column="10">CFTYPE_FILE<pos:position pos:line="9" pos:column="21"/></name></expr>:<pos:position pos:line="9" pos:column="22"/></case>
        <expr_stmt><expr><name pos:line="10" pos:column="9">ptr<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">=<pos:position pos:line="10" pos:column="14"/></operator> <call><name pos:line="10" pos:column="15">fgets<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><name pos:line="10" pos:column="21">ptr<pos:position pos:line="10" pos:column="24"/></name></expr></argument>,<argument><expr><name pos:line="10" pos:column="25">size<pos:position pos:line="10" pos:column="29"/></name></expr></argument>,<argument><expr><name><name pos:line="10" pos:column="30">file<pos:position pos:line="10" pos:column="34"/></name><operator pos:line="10" pos:column="34">-&gt;<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="36">handle<pos:position pos:line="10" pos:column="42"/></name><operator pos:line="10" pos:column="42">.<pos:position pos:line="10" pos:column="43"/></operator><name pos:line="10" pos:column="43">file<pos:position pos:line="10" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="49"/></expr_stmt>
        <break pos:line="11" pos:column="9">break;<pos:position pos:line="11" pos:column="15"/></break>

    <case pos:line="13" pos:column="5">case <expr><name pos:line="13" pos:column="10">CFTYPE_CURL<pos:position pos:line="13" pos:column="21"/></name></expr>:<pos:position pos:line="13" pos:column="22"/></case>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">fill_buffer<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name pos:line="14" pos:column="21">file<pos:position pos:line="14" pos:column="25"/></name></expr></argument>,<argument><expr><name pos:line="14" pos:column="26">want<pos:position pos:line="14" pos:column="30"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="14" pos:column="31">1<pos:position pos:line="14" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>

        <comment type="block" pos:line="16" pos:column="9">/* check if theres data in the buffer - if not fill either errored or
         * EOF */</comment>
        <if pos:line="18" pos:column="9">if<condition pos:line="18" pos:column="11">(<expr><operator pos:line="18" pos:column="12">!<pos:position pos:line="18" pos:column="13"/></operator><name><name pos:line="18" pos:column="13">file<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">-&gt;<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="19">buffer_pos<pos:position pos:line="18" pos:column="29"/></name></name></expr>)<pos:position pos:line="18" pos:column="30"/></condition><then pos:line="18" pos:column="30">
            <block type="pseudo"><return pos:line="19" pos:column="13">return <expr><name pos:line="19" pos:column="20">NULL<pos:position pos:line="19" pos:column="24"/></name></expr>;<pos:position pos:line="19" pos:column="25"/></return></block></then></if>

        <comment type="block" pos:line="21" pos:column="9">/* ensure only available data is considered */</comment>
        <if pos:line="22" pos:column="9">if<condition pos:line="22" pos:column="11">(<expr><name><name pos:line="22" pos:column="12">file<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">-&gt;<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="18">buffer_pos<pos:position pos:line="22" pos:column="28"/></name></name> <operator pos:line="22" pos:column="29">&lt;<pos:position pos:line="22" pos:column="33"/></operator> <name pos:line="22" pos:column="31">want<pos:position pos:line="22" pos:column="35"/></name></expr>)<pos:position pos:line="22" pos:column="36"/></condition><then pos:line="22" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="13">want<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">=<pos:position pos:line="23" pos:column="19"/></operator> <name><name pos:line="23" pos:column="20">file<pos:position pos:line="23" pos:column="24"/></name><operator pos:line="23" pos:column="24">-&gt;<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="26">buffer_pos<pos:position pos:line="23" pos:column="36"/></name></name></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="25" pos:column="9">/*buffer contains data */</comment>
        <comment type="block" pos:line="26" pos:column="9">/* look for newline or eof */</comment>
        <for pos:line="27" pos:column="9">for<control pos:line="27" pos:column="12">(<init><expr><name pos:line="27" pos:column="13">loop<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator><literal type="number" pos:line="27" pos:column="18">0<pos:position pos:line="27" pos:column="19"/></literal></expr>;<pos:position pos:line="27" pos:column="20"/></init><condition><expr><name pos:line="27" pos:column="20">loop<pos:position pos:line="27" pos:column="24"/></name> <operator pos:line="27" pos:column="25">&lt;<pos:position pos:line="27" pos:column="29"/></operator> <name pos:line="27" pos:column="27">want<pos:position pos:line="27" pos:column="31"/></name></expr>;<pos:position pos:line="27" pos:column="32"/></condition><incr><expr><name pos:line="27" pos:column="32">loop<pos:position pos:line="27" pos:column="36"/></name><operator pos:line="27" pos:column="36">++<pos:position pos:line="27" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="27" pos:column="39"/></control>
        <block pos:line="28" pos:column="9">{
            <if pos:line="29" pos:column="13">if<condition pos:line="29" pos:column="15">(<expr><name><name pos:line="29" pos:column="16">file<pos:position pos:line="29" pos:column="20"/></name><operator pos:line="29" pos:column="20">-&gt;<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="22">buffer<pos:position pos:line="29" pos:column="28"/></name><index pos:line="29" pos:column="28">[<expr><name pos:line="29" pos:column="29">loop<pos:position pos:line="29" pos:column="33"/></name></expr>]<pos:position pos:line="29" pos:column="34"/></index></name> <operator pos:line="29" pos:column="35">==<pos:position pos:line="29" pos:column="37"/></operator> <literal type="char" pos:line="29" pos:column="38">'\n'<pos:position pos:line="29" pos:column="42"/></literal></expr>)<pos:position pos:line="29" pos:column="43"/></condition><then pos:line="29" pos:column="43">
            <block pos:line="30" pos:column="13">{
                <expr_stmt><expr><name pos:line="31" pos:column="17">want<pos:position pos:line="31" pos:column="21"/></name><operator pos:line="31" pos:column="21">=<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="22">loop<pos:position pos:line="31" pos:column="26"/></name><operator pos:line="31" pos:column="26">+<pos:position pos:line="31" pos:column="27"/></operator><literal type="number" pos:line="31" pos:column="27">1<pos:position pos:line="31" pos:column="28"/></literal></expr>;<pos:position pos:line="31" pos:column="29"/></expr_stmt><comment type="block" pos:line="31" pos:column="29">/* include newline */</comment>
                <break pos:line="32" pos:column="17">break;<pos:position pos:line="32" pos:column="23"/></break>
            }<pos:position pos:line="33" pos:column="14"/></block></then></if>
        }<pos:position pos:line="34" pos:column="10"/></block></for>

        <comment type="block" pos:line="36" pos:column="9">/* xfer data to caller */</comment>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">memcpy<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name pos:line="37" pos:column="16">ptr<pos:position pos:line="37" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="21">file<pos:position pos:line="37" pos:column="25"/></name><operator pos:line="37" pos:column="25">-&gt;<pos:position pos:line="37" pos:column="30"/></operator><name pos:line="37" pos:column="27">buffer<pos:position pos:line="37" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="35">want<pos:position pos:line="37" pos:column="39"/></name></expr></argument>)<pos:position pos:line="37" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="38" pos:column="9">ptr<pos:position pos:line="38" pos:column="12"/></name><index pos:line="38" pos:column="12">[<expr><name pos:line="38" pos:column="13">want<pos:position pos:line="38" pos:column="17"/></name></expr>]<pos:position pos:line="38" pos:column="18"/></index></name><operator pos:line="38" pos:column="18">=<pos:position pos:line="38" pos:column="19"/></operator><literal type="number" pos:line="38" pos:column="19">0<pos:position pos:line="38" pos:column="20"/></literal></expr>;<pos:position pos:line="38" pos:column="21"/></expr_stmt><comment type="block" pos:line="38" pos:column="21">/* allways null terminate */</comment>

        <expr_stmt><expr><call><name pos:line="40" pos:column="9">use_buffer<pos:position pos:line="40" pos:column="19"/></name><argument_list pos:line="40" pos:column="19">(<argument><expr><name pos:line="40" pos:column="20">file<pos:position pos:line="40" pos:column="24"/></name></expr></argument>,<argument><expr><name pos:line="40" pos:column="25">want<pos:position pos:line="40" pos:column="29"/></name></expr></argument>)<pos:position pos:line="40" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="31"/></expr_stmt>

        <comment type="block" pos:line="42" pos:column="9">/*printf("(fgets) return %d bytes %d left\n", want,file-&gt;buffer_pos);*/</comment>
        <break pos:line="43" pos:column="9">break;<pos:position pos:line="43" pos:column="15"/></break>

    <default pos:line="45" pos:column="5">default:<pos:position pos:line="45" pos:column="13"/></default> <comment type="block" pos:line="45" pos:column="14">/* unknown or supported type - oh dear */</comment>
        <expr_stmt><expr><name pos:line="46" pos:column="9">ptr<pos:position pos:line="46" pos:column="12"/></name><operator pos:line="46" pos:column="12">=<pos:position pos:line="46" pos:column="13"/></operator><name pos:line="46" pos:column="13">NULL<pos:position pos:line="46" pos:column="17"/></name></expr>;<pos:position pos:line="46" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><name pos:line="47" pos:column="9">errno<pos:position pos:line="47" pos:column="14"/></name><operator pos:line="47" pos:column="14">=<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="15">EBADF<pos:position pos:line="47" pos:column="20"/></name></expr>;<pos:position pos:line="47" pos:column="21"/></expr_stmt>
        <break pos:line="48" pos:column="9">break;<pos:position pos:line="48" pos:column="15"/></break>
    }<pos:position pos:line="49" pos:column="6"/></block></switch>

    <return pos:line="51" pos:column="5">return <expr><name pos:line="51" pos:column="12">ptr<pos:position pos:line="51" pos:column="15"/></name></expr>;<pos:position pos:line="51" pos:column="16"/></return><comment type="block" pos:line="51" pos:column="16">/*success */</comment>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
