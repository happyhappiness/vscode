<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1562_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">smb_parse_url_path<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">connectdata<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">conn<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURLcode<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">result<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><name pos:line="3" pos:column="21">CURLE_OK<pos:position pos:line="3" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">Curl_easy<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">data<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name><name pos:line="4" pos:column="28">conn<pos:position pos:line="4" pos:column="32"/></name><operator pos:line="4" pos:column="32">-&gt;<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="34">data<pos:position pos:line="4" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">smb_request<pos:position pos:line="5" pos:column="21"/></name></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">req<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><name><name pos:line="5" pos:column="29">data<pos:position pos:line="5" pos:column="33"/></name><operator pos:line="5" pos:column="33">-&gt;<pos:position pos:line="5" pos:column="38"/></operator><name pos:line="5" pos:column="35">req<pos:position pos:line="5" pos:column="38"/></name><operator pos:line="5" pos:column="38">.<pos:position pos:line="5" pos:column="39"/></operator><name pos:line="5" pos:column="39">protop<pos:position pos:line="5" pos:column="45"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="46"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">path<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">slash<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>

  <comment type="block" pos:line="9" pos:column="3">/* URL decode the path */</comment>
  <expr_stmt><expr><name pos:line="10" pos:column="3">result<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <call><name pos:line="10" pos:column="12">Curl_urldecode<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">(<argument><expr><name pos:line="10" pos:column="27">data<pos:position pos:line="10" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="33">data<pos:position pos:line="10" pos:column="37"/></name><operator pos:line="10" pos:column="37">-&gt;<pos:position pos:line="10" pos:column="42"/></operator><name pos:line="10" pos:column="39">state<pos:position pos:line="10" pos:column="44"/></name><operator pos:line="10" pos:column="44">.<pos:position pos:line="10" pos:column="45"/></operator><name pos:line="10" pos:column="45">path<pos:position pos:line="10" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="51">0<pos:position pos:line="10" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="10" pos:column="54">&amp;<pos:position pos:line="10" pos:column="59"/></operator><name pos:line="10" pos:column="55">path<pos:position pos:line="10" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="61">NULL<pos:position pos:line="10" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="67">TRUE<pos:position pos:line="10" pos:column="71"/></name></expr></argument>)<pos:position pos:line="10" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="73"/></expr_stmt>
  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">result<pos:position pos:line="11" pos:column="12"/></name></expr>)<pos:position pos:line="11" pos:column="13"/></condition><then pos:line="11" pos:column="13">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">result<pos:position pos:line="12" pos:column="18"/></name></expr>;<pos:position pos:line="12" pos:column="19"/></return></block></then></if>

  <comment type="block" pos:line="14" pos:column="3">/* Parse the path for the share */</comment>
  <expr_stmt><expr><name><name pos:line="15" pos:column="3">req<pos:position pos:line="15" pos:column="6"/></name><operator pos:line="15" pos:column="6">-&gt;<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="8">share<pos:position pos:line="15" pos:column="13"/></name></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <call><name pos:line="15" pos:column="16">strdup<pos:position pos:line="15" pos:column="22"/></name><argument_list pos:line="15" pos:column="22">(<argument><expr><ternary><condition><expr><operator pos:line="15" pos:column="23">(<pos:position pos:line="15" pos:column="24"/></operator><operator pos:line="15" pos:column="24">*<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="25">path<pos:position pos:line="15" pos:column="29"/></name> <operator pos:line="15" pos:column="30">==<pos:position pos:line="15" pos:column="32"/></operator> <literal type="char" pos:line="15" pos:column="33">'/'<pos:position pos:line="15" pos:column="36"/></literal> <operator pos:line="15" pos:column="37">||<pos:position pos:line="15" pos:column="39"/></operator> <operator pos:line="15" pos:column="40">*<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="41">path<pos:position pos:line="15" pos:column="45"/></name> <operator pos:line="15" pos:column="46">==<pos:position pos:line="15" pos:column="48"/></operator> <literal type="char" pos:line="15" pos:column="49">'\\'<pos:position pos:line="15" pos:column="53"/></literal><operator pos:line="15" pos:column="53">)<pos:position pos:line="15" pos:column="54"/></operator></expr> ?<pos:position pos:line="15" pos:column="56"/></condition><then pos:line="15" pos:column="56"> <expr><name pos:line="15" pos:column="57">path<pos:position pos:line="15" pos:column="61"/></name> <operator pos:line="15" pos:column="62">+<pos:position pos:line="15" pos:column="63"/></operator> <literal type="number" pos:line="15" pos:column="64">1<pos:position pos:line="15" pos:column="65"/></literal></expr> <pos:position pos:line="15" pos:column="66"/></then><else pos:line="15" pos:column="66">: <expr><name pos:line="15" pos:column="68">path<pos:position pos:line="15" pos:column="72"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="15" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="74"/></expr_stmt>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><operator pos:line="16" pos:column="6">!<pos:position pos:line="16" pos:column="7"/></operator><name><name pos:line="16" pos:column="7">req<pos:position pos:line="16" pos:column="10"/></name><operator pos:line="16" pos:column="10">-&gt;<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="12">share<pos:position pos:line="16" pos:column="17"/></name></name></expr>)<pos:position pos:line="16" pos:column="18"/></condition><then pos:line="16" pos:column="18"> <block pos:line="16" pos:column="19">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">free<pos:position pos:line="17" pos:column="9"/></name><argument_list pos:line="17" pos:column="9">(<argument><expr><name pos:line="17" pos:column="10">path<pos:position pos:line="17" pos:column="14"/></name></expr></argument>)<pos:position pos:line="17" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="16"/></expr_stmt>

    <return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">CURLE_OUT_OF_MEMORY<pos:position pos:line="19" pos:column="31"/></name></expr>;<pos:position pos:line="19" pos:column="32"/></return>
  }<pos:position pos:line="20" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="22" pos:column="3">slash<pos:position pos:line="22" pos:column="8"/></name> <operator pos:line="22" pos:column="9">=<pos:position pos:line="22" pos:column="10"/></operator> <call><name pos:line="22" pos:column="11">strchr<pos:position pos:line="22" pos:column="17"/></name><argument_list pos:line="22" pos:column="17">(<argument><expr><name><name pos:line="22" pos:column="18">req<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">-&gt;<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="23">share<pos:position pos:line="22" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="22" pos:column="30">'/'<pos:position pos:line="22" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt>
  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><operator pos:line="23" pos:column="6">!<pos:position pos:line="23" pos:column="7"/></operator><name pos:line="23" pos:column="7">slash<pos:position pos:line="23" pos:column="12"/></name></expr>)<pos:position pos:line="23" pos:column="13"/></condition><then pos:line="23" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="5">slash<pos:position pos:line="24" pos:column="10"/></name> <operator pos:line="24" pos:column="11">=<pos:position pos:line="24" pos:column="12"/></operator> <call><name pos:line="24" pos:column="13">strchr<pos:position pos:line="24" pos:column="19"/></name><argument_list pos:line="24" pos:column="19">(<argument><expr><name><name pos:line="24" pos:column="20">req<pos:position pos:line="24" pos:column="23"/></name><operator pos:line="24" pos:column="23">-&gt;<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="25">share<pos:position pos:line="24" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="24" pos:column="32">'\\'<pos:position pos:line="24" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="38"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="26" pos:column="3">/* The share must be present */</comment>
  <if pos:line="27" pos:column="3">if<condition pos:line="27" pos:column="5">(<expr><operator pos:line="27" pos:column="6">!<pos:position pos:line="27" pos:column="7"/></operator><name pos:line="27" pos:column="7">slash<pos:position pos:line="27" pos:column="12"/></name></expr>)<pos:position pos:line="27" pos:column="13"/></condition><then pos:line="27" pos:column="13"> <block pos:line="27" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">free<pos:position pos:line="28" pos:column="9"/></name><argument_list pos:line="28" pos:column="9">(<argument><expr><name pos:line="28" pos:column="10">path<pos:position pos:line="28" pos:column="14"/></name></expr></argument>)<pos:position pos:line="28" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="16"/></expr_stmt>

    <return pos:line="30" pos:column="5">return <expr><name pos:line="30" pos:column="12">CURLE_URL_MALFORMAT<pos:position pos:line="30" pos:column="31"/></name></expr>;<pos:position pos:line="30" pos:column="32"/></return>
  }<pos:position pos:line="31" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="33" pos:column="3">/* Parse the path for the file path converting any forward slashes into
     backslashes */</comment>
  <expr_stmt><expr><operator pos:line="35" pos:column="3">*<pos:position pos:line="35" pos:column="4"/></operator><name pos:line="35" pos:column="4">slash<pos:position pos:line="35" pos:column="9"/></name><operator pos:line="35" pos:column="9">++<pos:position pos:line="35" pos:column="11"/></operator> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator> <literal type="number" pos:line="35" pos:column="14">0<pos:position pos:line="35" pos:column="15"/></literal></expr>;<pos:position pos:line="35" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="36" pos:column="3">req<pos:position pos:line="36" pos:column="6"/></name><operator pos:line="36" pos:column="6">-&gt;<pos:position pos:line="36" pos:column="11"/></operator><name pos:line="36" pos:column="8">path<pos:position pos:line="36" pos:column="12"/></name></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <name pos:line="36" pos:column="15">slash<pos:position pos:line="36" pos:column="20"/></name></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt>
  <for pos:line="37" pos:column="3">for<control pos:line="37" pos:column="6">(<init pos:line="37" pos:column="7">;<pos:position pos:line="37" pos:column="8"/></init> <condition><expr><operator pos:line="37" pos:column="9">*<pos:position pos:line="37" pos:column="10"/></operator><name pos:line="37" pos:column="10">slash<pos:position pos:line="37" pos:column="15"/></name></expr>;<pos:position pos:line="37" pos:column="16"/></condition> <incr><expr><name pos:line="37" pos:column="17">slash<pos:position pos:line="37" pos:column="22"/></name><operator pos:line="37" pos:column="22">++<pos:position pos:line="37" pos:column="24"/></operator></expr></incr>)<pos:position pos:line="37" pos:column="25"/></control> <block pos:line="37" pos:column="26">{
    <if pos:line="38" pos:column="5">if<condition pos:line="38" pos:column="7">(<expr><operator pos:line="38" pos:column="8">*<pos:position pos:line="38" pos:column="9"/></operator><name pos:line="38" pos:column="9">slash<pos:position pos:line="38" pos:column="14"/></name> <operator pos:line="38" pos:column="15">==<pos:position pos:line="38" pos:column="17"/></operator> <literal type="char" pos:line="38" pos:column="18">'/'<pos:position pos:line="38" pos:column="21"/></literal></expr>)<pos:position pos:line="38" pos:column="22"/></condition><then pos:line="38" pos:column="22">
      <block type="pseudo"><expr_stmt><expr><operator pos:line="39" pos:column="7">*<pos:position pos:line="39" pos:column="8"/></operator><name pos:line="39" pos:column="8">slash<pos:position pos:line="39" pos:column="13"/></name> <operator pos:line="39" pos:column="14">=<pos:position pos:line="39" pos:column="15"/></operator> <literal type="char" pos:line="39" pos:column="16">'\\'<pos:position pos:line="39" pos:column="20"/></literal></expr>;<pos:position pos:line="39" pos:column="21"/></expr_stmt></block></then></if>
  }<pos:position pos:line="40" pos:column="4"/></block></for>

  <expr_stmt><expr><call><name pos:line="42" pos:column="3">free<pos:position pos:line="42" pos:column="7"/></name><argument_list pos:line="42" pos:column="7">(<argument><expr><name pos:line="42" pos:column="8">path<pos:position pos:line="42" pos:column="12"/></name></expr></argument>)<pos:position pos:line="42" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="14"/></expr_stmt>

  <return pos:line="44" pos:column="3">return <expr><name pos:line="44" pos:column="10">CURLE_OK<pos:position pos:line="44" pos:column="18"/></name></expr>;<pos:position pos:line="44" pos:column="19"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
