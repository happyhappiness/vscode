<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_295_curl-7.18.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">curl_socket_t<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">sockdaemon<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">curl_socket_t<pos:position pos:line="1" pos:column="46"/></name></type> <name pos:line="1" pos:column="47">sock<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="2" pos:column="33">unsigned<pos:position pos:line="2" pos:column="41"/></name> <name pos:line="2" pos:column="42">short<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">listenport<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <comment type="block" pos:line="4" pos:column="3">/* passive daemon style */</comment>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">sockaddr_in<pos:position pos:line="5" pos:column="21"/></name></name></type> <name pos:line="5" pos:column="22">me<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">ENABLE_IPV6<pos:position pos:line="6" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">sockaddr_in6<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">me6<pos:position pos:line="7" pos:column="26"/></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="8" pos:column="8">/* ENABLE_IPV6 */</comment>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">flag<pos:position pos:line="9" pos:column="11"/></name> <init pos:line="9" pos:column="12">= <expr><literal type="number" pos:line="9" pos:column="14">1<pos:position pos:line="9" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">rc<pos:position pos:line="10" pos:column="9"/></name></decl>;<pos:position pos:line="10" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">totdelay<pos:position pos:line="11" pos:column="15"/></name> <init pos:line="11" pos:column="16">= <expr><literal type="number" pos:line="11" pos:column="18">0<pos:position pos:line="11" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">maxretr<pos:position pos:line="12" pos:column="14"/></name> <init pos:line="12" pos:column="15">= <expr><literal type="number" pos:line="12" pos:column="17">10<pos:position pos:line="12" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">delay<pos:position pos:line="13" pos:column="12"/></name><init pos:line="13" pos:column="12">= <expr><literal type="number" pos:line="13" pos:column="14">20<pos:position pos:line="13" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">int<pos:position pos:line="14" pos:column="6"/></name></type> <name pos:line="14" pos:column="7">attempt<pos:position pos:line="14" pos:column="14"/></name> <init pos:line="14" pos:column="15">= <expr><literal type="number" pos:line="14" pos:column="17">0<pos:position pos:line="14" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">int<pos:position pos:line="15" pos:column="6"/></name></type> <name pos:line="15" pos:column="7">error<pos:position pos:line="15" pos:column="12"/></name> <init pos:line="15" pos:column="13">= <expr><literal type="number" pos:line="15" pos:column="15">0<pos:position pos:line="15" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="17"/></decl_stmt>

  <do pos:line="17" pos:column="3">do <block pos:line="17" pos:column="6">{
    <expr_stmt><expr><name pos:line="18" pos:column="5">attempt<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">++<pos:position pos:line="18" pos:column="14"/></operator></expr>;<pos:position pos:line="18" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">rc<pos:position pos:line="19" pos:column="7"/></name> <operator pos:line="19" pos:column="8">=<pos:position pos:line="19" pos:column="9"/></operator> <call><name pos:line="19" pos:column="10">setsockopt<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">(<argument><expr><name pos:line="19" pos:column="21">sock<pos:position pos:line="19" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="27">SOL_SOCKET<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="39">SO_REUSEADDR<pos:position pos:line="19" pos:column="51"/></name></expr></argument>,
         <argument><expr><operator pos:line="20" pos:column="10">(<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="11">void<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">*<pos:position pos:line="20" pos:column="17"/></operator><operator pos:line="20" pos:column="17">)<pos:position pos:line="20" pos:column="18"/></operator><operator pos:line="20" pos:column="18">&amp;<pos:position pos:line="20" pos:column="23"/></operator><name pos:line="20" pos:column="19">flag<pos:position pos:line="20" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="25">sizeof<argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">flag<pos:position pos:line="20" pos:column="36"/></name></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="39"/></expr_stmt>
    <if pos:line="21" pos:column="5">if<condition pos:line="21" pos:column="7">(<expr><name pos:line="21" pos:column="8">rc<pos:position pos:line="21" pos:column="10"/></name></expr>)<pos:position pos:line="21" pos:column="11"/></condition><then pos:line="21" pos:column="11"> <block pos:line="21" pos:column="12">{
      <expr_stmt><expr><name pos:line="22" pos:column="7">error<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <name pos:line="22" pos:column="15">SOCKERRNO<pos:position pos:line="22" pos:column="24"/></name></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>
      <if pos:line="23" pos:column="7">if<condition pos:line="23" pos:column="9">(<expr><name pos:line="23" pos:column="10">maxretr<pos:position pos:line="23" pos:column="17"/></name></expr>)<pos:position pos:line="23" pos:column="18"/></condition><then pos:line="23" pos:column="18"> <block pos:line="23" pos:column="19">{
        <expr_stmt><expr><name pos:line="24" pos:column="9">rc<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <call><name pos:line="24" pos:column="14">wait_ms<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">delay<pos:position pos:line="24" pos:column="27"/></name></expr></argument>)<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>
        <if pos:line="25" pos:column="9">if<condition pos:line="25" pos:column="11">(<expr><name pos:line="25" pos:column="12">rc<pos:position pos:line="25" pos:column="14"/></name></expr>)<pos:position pos:line="25" pos:column="15"/></condition><then pos:line="25" pos:column="15"> <block pos:line="25" pos:column="16">{
          <comment type="block" pos:line="26" pos:column="11">/* should not happen */</comment>
          <expr_stmt><expr><name pos:line="27" pos:column="11">error<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <name pos:line="27" pos:column="19">SOCKERRNO<pos:position pos:line="27" pos:column="28"/></name></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="28" pos:column="11">logmsg<pos:position pos:line="28" pos:column="17"/></name><argument_list pos:line="28" pos:column="17">(<argument><expr><literal type="string" pos:line="28" pos:column="18">"wait_ms() failed: (%d) %s"<pos:position pos:line="28" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="47">error<pos:position pos:line="28" pos:column="52"/></name></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="54">strerror<pos:position pos:line="28" pos:column="62"/></name><argument_list pos:line="28" pos:column="62">(<argument><expr><name pos:line="28" pos:column="63">error<pos:position pos:line="28" pos:column="68"/></name></expr></argument>)<pos:position pos:line="28" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="71"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="29" pos:column="11">sclose<pos:position pos:line="29" pos:column="17"/></name><argument_list pos:line="29" pos:column="17">(<argument><expr><name pos:line="29" pos:column="18">sock<pos:position pos:line="29" pos:column="22"/></name></expr></argument>)<pos:position pos:line="29" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>
          <return pos:line="30" pos:column="11">return <expr><name pos:line="30" pos:column="18">CURL_SOCKET_BAD<pos:position pos:line="30" pos:column="33"/></name></expr>;<pos:position pos:line="30" pos:column="34"/></return>
        }<pos:position pos:line="31" pos:column="10"/></block></then></if>
        <if pos:line="32" pos:column="9">if<condition pos:line="32" pos:column="11">(<expr><name pos:line="32" pos:column="12">got_exit_signal<pos:position pos:line="32" pos:column="27"/></name></expr>)<pos:position pos:line="32" pos:column="28"/></condition><then pos:line="32" pos:column="28"> <block pos:line="32" pos:column="29">{
          <expr_stmt><expr><call><name pos:line="33" pos:column="11">logmsg<pos:position pos:line="33" pos:column="17"/></name><argument_list pos:line="33" pos:column="17">(<argument><expr><literal type="string" pos:line="33" pos:column="18">"signalled to die, exiting..."<pos:position pos:line="33" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="50"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="34" pos:column="11">sclose<pos:position pos:line="34" pos:column="17"/></name><argument_list pos:line="34" pos:column="17">(<argument><expr><name pos:line="34" pos:column="18">sock<pos:position pos:line="34" pos:column="22"/></name></expr></argument>)<pos:position pos:line="34" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="24"/></expr_stmt>
          <return pos:line="35" pos:column="11">return <expr><name pos:line="35" pos:column="18">CURL_SOCKET_BAD<pos:position pos:line="35" pos:column="33"/></name></expr>;<pos:position pos:line="35" pos:column="34"/></return>
        }<pos:position pos:line="36" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="37" pos:column="9">totdelay<pos:position pos:line="37" pos:column="17"/></name> <operator pos:line="37" pos:column="18">+=<pos:position pos:line="37" pos:column="20"/></operator> <name pos:line="37" pos:column="21">delay<pos:position pos:line="37" pos:column="26"/></name></expr>;<pos:position pos:line="37" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="38" pos:column="9">delay<pos:position pos:line="38" pos:column="14"/></name> <operator pos:line="38" pos:column="15">*=<pos:position pos:line="38" pos:column="17"/></operator> <literal type="number" pos:line="38" pos:column="18">2<pos:position pos:line="38" pos:column="19"/></literal></expr>;<pos:position pos:line="38" pos:column="20"/></expr_stmt> <comment type="block" pos:line="38" pos:column="21">/* double the sleep for next attempt */</comment>
      }<pos:position pos:line="39" pos:column="8"/></block></then></if>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>
  }<pos:position pos:line="41" pos:column="4"/></block> while<condition pos:line="41" pos:column="10">(<expr><name pos:line="41" pos:column="11">rc<pos:position pos:line="41" pos:column="13"/></name> <operator pos:line="41" pos:column="14">&amp;&amp;<pos:position pos:line="41" pos:column="24"/></operator> <name pos:line="41" pos:column="17">maxretr<pos:position pos:line="41" pos:column="24"/></name><operator pos:line="41" pos:column="24">--<pos:position pos:line="41" pos:column="26"/></operator></expr>)<pos:position pos:line="41" pos:column="27"/></condition>;<pos:position pos:line="41" pos:column="28"/></do>

  <if pos:line="43" pos:column="3">if<condition pos:line="43" pos:column="5">(<expr><name pos:line="43" pos:column="6">rc<pos:position pos:line="43" pos:column="8"/></name></expr>)<pos:position pos:line="43" pos:column="9"/></condition><then pos:line="43" pos:column="9"> <block pos:line="43" pos:column="10">{
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">logmsg<pos:position pos:line="44" pos:column="11"/></name><argument_list pos:line="44" pos:column="11">(<argument><expr><literal type="string" pos:line="44" pos:column="12">"setsockopt(SO_REUSEADDR) failed %d times in %d ms. Error: (%d) %s"<pos:position pos:line="44" pos:column="79"/></literal></expr></argument>,
           <argument><expr><name pos:line="45" pos:column="12">attempt<pos:position pos:line="45" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="21">totdelay<pos:position pos:line="45" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="31">error<pos:position pos:line="45" pos:column="36"/></name></expr></argument>, <argument><expr><call><name pos:line="45" pos:column="38">strerror<pos:position pos:line="45" pos:column="46"/></name><argument_list pos:line="45" pos:column="46">(<argument><expr><name pos:line="45" pos:column="47">error<pos:position pos:line="45" pos:column="52"/></name></expr></argument>)<pos:position pos:line="45" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">logmsg<pos:position pos:line="46" pos:column="11"/></name><argument_list pos:line="46" pos:column="11">(<argument><expr><literal type="string" pos:line="46" pos:column="12">"Continuing anyway..."<pos:position pos:line="46" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>

<cpp:ifdef pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">ifdef<pos:position pos:line="49" pos:column="7"/></cpp:directive> <name pos:line="49" pos:column="8">ENABLE_IPV6<pos:position pos:line="49" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="50" pos:column="3">if<condition pos:line="50" pos:column="5">(<expr><operator pos:line="50" pos:column="6">!<pos:position pos:line="50" pos:column="7"/></operator><name pos:line="50" pos:column="7">use_ipv6<pos:position pos:line="50" pos:column="15"/></name></expr>)<pos:position pos:line="50" pos:column="16"/></condition><then pos:line="50" pos:column="16"> <block pos:line="50" pos:column="17">{
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif<pos:position pos:line="51" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">memset<pos:position pos:line="52" pos:column="11"/></name><argument_list pos:line="52" pos:column="11">(<argument><expr><operator pos:line="52" pos:column="12">&amp;<pos:position pos:line="52" pos:column="17"/></operator><name pos:line="52" pos:column="13">me<pos:position pos:line="52" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="17">0<pos:position pos:line="52" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="52" pos:column="20">sizeof<argument_list pos:line="52" pos:column="26">(<argument><expr><name pos:line="52" pos:column="27">me<pos:position pos:line="52" pos:column="29"/></name></expr></argument>)<pos:position pos:line="52" pos:column="30"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="52" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="53" pos:column="5">me<pos:position pos:line="53" pos:column="7"/></name><operator pos:line="53" pos:column="7">.<pos:position pos:line="53" pos:column="8"/></operator><name pos:line="53" pos:column="8">sin_family<pos:position pos:line="53" pos:column="18"/></name></name> <operator pos:line="53" pos:column="19">=<pos:position pos:line="53" pos:column="20"/></operator> <name pos:line="53" pos:column="21">AF_INET<pos:position pos:line="53" pos:column="28"/></name></expr>;<pos:position pos:line="53" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="54" pos:column="5">me<pos:position pos:line="54" pos:column="7"/></name><operator pos:line="54" pos:column="7">.<pos:position pos:line="54" pos:column="8"/></operator><name pos:line="54" pos:column="8">sin_addr<pos:position pos:line="54" pos:column="16"/></name><operator pos:line="54" pos:column="16">.<pos:position pos:line="54" pos:column="17"/></operator><name pos:line="54" pos:column="17">s_addr<pos:position pos:line="54" pos:column="23"/></name></name> <operator pos:line="54" pos:column="24">=<pos:position pos:line="54" pos:column="25"/></operator> <name pos:line="54" pos:column="26">INADDR_ANY<pos:position pos:line="54" pos:column="36"/></name></expr>;<pos:position pos:line="54" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="55" pos:column="5">me<pos:position pos:line="55" pos:column="7"/></name><operator pos:line="55" pos:column="7">.<pos:position pos:line="55" pos:column="8"/></operator><name pos:line="55" pos:column="8">sin_port<pos:position pos:line="55" pos:column="16"/></name></name> <operator pos:line="55" pos:column="17">=<pos:position pos:line="55" pos:column="18"/></operator> <call><name pos:line="55" pos:column="19">htons<pos:position pos:line="55" pos:column="24"/></name><argument_list pos:line="55" pos:column="24">(<argument><expr><operator pos:line="55" pos:column="25">*<pos:position pos:line="55" pos:column="26"/></operator><name pos:line="55" pos:column="26">listenport<pos:position pos:line="55" pos:column="36"/></name></expr></argument>)<pos:position pos:line="55" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="56" pos:column="5">rc<pos:position pos:line="56" pos:column="7"/></name> <operator pos:line="56" pos:column="8">=<pos:position pos:line="56" pos:column="9"/></operator> <call><name pos:line="56" pos:column="10">bind<pos:position pos:line="56" pos:column="14"/></name><argument_list pos:line="56" pos:column="14">(<argument><expr><name pos:line="56" pos:column="15">sock<pos:position pos:line="56" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="21">(<pos:position pos:line="56" pos:column="22"/></operator>struct <name pos:line="56" pos:column="29">sockaddr<pos:position pos:line="56" pos:column="37"/></name> <operator pos:line="56" pos:column="38">*<pos:position pos:line="56" pos:column="39"/></operator><operator pos:line="56" pos:column="39">)<pos:position pos:line="56" pos:column="40"/></operator> <operator pos:line="56" pos:column="41">&amp;<pos:position pos:line="56" pos:column="46"/></operator><name pos:line="56" pos:column="42">me<pos:position pos:line="56" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="56" pos:column="46">sizeof<argument_list pos:line="56" pos:column="52">(<argument><expr><name pos:line="56" pos:column="53">me<pos:position pos:line="56" pos:column="55"/></name></expr></argument>)<pos:position pos:line="56" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="56" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="58"/></expr_stmt>
<cpp:ifdef pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">ifdef<pos:position pos:line="57" pos:column="7"/></cpp:directive> <name pos:line="57" pos:column="8">ENABLE_IPV6<pos:position pos:line="57" pos:column="19"/></name></cpp:ifdef>
  }<pos:position pos:line="58" pos:column="4"/></block></then>
  <else pos:line="59" pos:column="3">else <block pos:line="59" pos:column="8">{
    <expr_stmt><expr><call><name pos:line="60" pos:column="5">memset<pos:position pos:line="60" pos:column="11"/></name><argument_list pos:line="60" pos:column="11">(<argument><expr><operator pos:line="60" pos:column="12">&amp;<pos:position pos:line="60" pos:column="17"/></operator><name pos:line="60" pos:column="13">me6<pos:position pos:line="60" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="18">0<pos:position pos:line="60" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="60" pos:column="21">sizeof<argument_list pos:line="60" pos:column="27">(<argument><expr><name pos:line="60" pos:column="28">me6<pos:position pos:line="60" pos:column="31"/></name></expr></argument>)<pos:position pos:line="60" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="60" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="61" pos:column="5">me6<pos:position pos:line="61" pos:column="8"/></name><operator pos:line="61" pos:column="8">.<pos:position pos:line="61" pos:column="9"/></operator><name pos:line="61" pos:column="9">sin6_family<pos:position pos:line="61" pos:column="20"/></name></name> <operator pos:line="61" pos:column="21">=<pos:position pos:line="61" pos:column="22"/></operator> <name pos:line="61" pos:column="23">AF_INET6<pos:position pos:line="61" pos:column="31"/></name></expr>;<pos:position pos:line="61" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="62" pos:column="5">me6<pos:position pos:line="62" pos:column="8"/></name><operator pos:line="62" pos:column="8">.<pos:position pos:line="62" pos:column="9"/></operator><name pos:line="62" pos:column="9">sin6_addr<pos:position pos:line="62" pos:column="18"/></name></name> <operator pos:line="62" pos:column="19">=<pos:position pos:line="62" pos:column="20"/></operator> <name pos:line="62" pos:column="21">in6addr_any<pos:position pos:line="62" pos:column="32"/></name></expr>;<pos:position pos:line="62" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="63" pos:column="5">me6<pos:position pos:line="63" pos:column="8"/></name><operator pos:line="63" pos:column="8">.<pos:position pos:line="63" pos:column="9"/></operator><name pos:line="63" pos:column="9">sin6_port<pos:position pos:line="63" pos:column="18"/></name></name> <operator pos:line="63" pos:column="19">=<pos:position pos:line="63" pos:column="20"/></operator> <call><name pos:line="63" pos:column="21">htons<pos:position pos:line="63" pos:column="26"/></name><argument_list pos:line="63" pos:column="26">(<argument><expr><operator pos:line="63" pos:column="27">*<pos:position pos:line="63" pos:column="28"/></operator><name pos:line="63" pos:column="28">listenport<pos:position pos:line="63" pos:column="38"/></name></expr></argument>)<pos:position pos:line="63" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name pos:line="64" pos:column="5">rc<pos:position pos:line="64" pos:column="7"/></name> <operator pos:line="64" pos:column="8">=<pos:position pos:line="64" pos:column="9"/></operator> <call><name pos:line="64" pos:column="10">bind<pos:position pos:line="64" pos:column="14"/></name><argument_list pos:line="64" pos:column="14">(<argument><expr><name pos:line="64" pos:column="15">sock<pos:position pos:line="64" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="21">(<pos:position pos:line="64" pos:column="22"/></operator>struct <name pos:line="64" pos:column="29">sockaddr<pos:position pos:line="64" pos:column="37"/></name> <operator pos:line="64" pos:column="38">*<pos:position pos:line="64" pos:column="39"/></operator><operator pos:line="64" pos:column="39">)<pos:position pos:line="64" pos:column="40"/></operator> <operator pos:line="64" pos:column="41">&amp;<pos:position pos:line="64" pos:column="46"/></operator><name pos:line="64" pos:column="42">me6<pos:position pos:line="64" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="64" pos:column="47">sizeof<argument_list pos:line="64" pos:column="53">(<argument><expr><name pos:line="64" pos:column="54">me6<pos:position pos:line="64" pos:column="57"/></name></expr></argument>)<pos:position pos:line="64" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="64" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="60"/></expr_stmt>
  }<pos:position pos:line="65" pos:column="4"/></block></else></if>
<cpp:endif pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">endif<pos:position pos:line="66" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="66" pos:column="8">/* ENABLE_IPV6 */</comment>
  <if pos:line="67" pos:column="3">if<condition pos:line="67" pos:column="5">(<expr><name pos:line="67" pos:column="6">rc<pos:position pos:line="67" pos:column="8"/></name></expr>)<pos:position pos:line="67" pos:column="9"/></condition><then pos:line="67" pos:column="9"> <block pos:line="67" pos:column="10">{
    <expr_stmt><expr><name pos:line="68" pos:column="5">error<pos:position pos:line="68" pos:column="10"/></name> <operator pos:line="68" pos:column="11">=<pos:position pos:line="68" pos:column="12"/></operator> <name pos:line="68" pos:column="13">SOCKERRNO<pos:position pos:line="68" pos:column="22"/></name></expr>;<pos:position pos:line="68" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">logmsg<pos:position pos:line="69" pos:column="11"/></name><argument_list pos:line="69" pos:column="11">(<argument><expr><literal type="string" pos:line="69" pos:column="12">"Error binding socket: (%d) %s"<pos:position pos:line="69" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="45">error<pos:position pos:line="69" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="69" pos:column="52">strerror<pos:position pos:line="69" pos:column="60"/></name><argument_list pos:line="69" pos:column="60">(<argument><expr><name pos:line="69" pos:column="61">error<pos:position pos:line="69" pos:column="66"/></name></expr></argument>)<pos:position pos:line="69" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="69" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="69"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="70" pos:column="5">sclose<pos:position pos:line="70" pos:column="11"/></name><argument_list pos:line="70" pos:column="11">(<argument><expr><name pos:line="70" pos:column="12">sock<pos:position pos:line="70" pos:column="16"/></name></expr></argument>)<pos:position pos:line="70" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="18"/></expr_stmt>
    <return pos:line="71" pos:column="5">return <expr><name pos:line="71" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="71" pos:column="27"/></name></expr>;<pos:position pos:line="71" pos:column="28"/></return>
  }<pos:position pos:line="72" pos:column="4"/></block></then></if>

  <if pos:line="74" pos:column="3">if<condition pos:line="74" pos:column="5">(<expr><operator pos:line="74" pos:column="6">!<pos:position pos:line="74" pos:column="7"/></operator><operator pos:line="74" pos:column="7">*<pos:position pos:line="74" pos:column="8"/></operator><name pos:line="74" pos:column="8">listenport<pos:position pos:line="74" pos:column="18"/></name></expr>)<pos:position pos:line="74" pos:column="19"/></condition><then pos:line="74" pos:column="19"> <block pos:line="74" pos:column="20">{
    <comment type="block" pos:line="75" pos:column="5">/* The system picked a port number, now figure out which port we actually
       got */</comment>
    <comment type="block" pos:line="77" pos:column="5">/* we succeeded to bind */</comment>
    <decl_stmt><decl><type><name><name pos:line="78" pos:column="5">struct<pos:position pos:line="78" pos:column="11"/></name> <name pos:line="78" pos:column="12">sockaddr_in<pos:position pos:line="78" pos:column="23"/></name></name></type> <name pos:line="78" pos:column="24">add<pos:position pos:line="78" pos:column="27"/></name></decl>;<pos:position pos:line="78" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="79" pos:column="5">socklen_t<pos:position pos:line="79" pos:column="14"/></name></type> <name pos:line="79" pos:column="15">socksize<pos:position pos:line="79" pos:column="23"/></name> <init pos:line="79" pos:column="24">= <expr><sizeof pos:line="79" pos:column="26">sizeof<argument_list pos:line="79" pos:column="32">(<argument><expr><name pos:line="79" pos:column="33">add<pos:position pos:line="79" pos:column="36"/></name></expr></argument>)<pos:position pos:line="79" pos:column="37"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="79" pos:column="38"/></decl_stmt>

    <if pos:line="81" pos:column="5">if<condition pos:line="81" pos:column="7">(<expr><call><name pos:line="81" pos:column="8">getsockname<pos:position pos:line="81" pos:column="19"/></name><argument_list pos:line="81" pos:column="19">(<argument><expr><name pos:line="81" pos:column="20">sock<pos:position pos:line="81" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="81" pos:column="26">(<pos:position pos:line="81" pos:column="27"/></operator>struct <name pos:line="81" pos:column="34">sockaddr<pos:position pos:line="81" pos:column="42"/></name> <operator pos:line="81" pos:column="43">*<pos:position pos:line="81" pos:column="44"/></operator><operator pos:line="81" pos:column="44">)<pos:position pos:line="81" pos:column="45"/></operator> <operator pos:line="81" pos:column="46">&amp;<pos:position pos:line="81" pos:column="51"/></operator><name pos:line="81" pos:column="47">add<pos:position pos:line="81" pos:column="50"/></name></expr></argument>,
                   <argument><expr><operator pos:line="82" pos:column="20">&amp;<pos:position pos:line="82" pos:column="25"/></operator><name pos:line="82" pos:column="21">socksize<pos:position pos:line="82" pos:column="29"/></name></expr></argument>)<pos:position pos:line="82" pos:column="30"/></argument_list></call><operator pos:line="82" pos:column="30">&lt;<pos:position pos:line="82" pos:column="34"/></operator><literal type="number" pos:line="82" pos:column="31">0<pos:position pos:line="82" pos:column="32"/></literal></expr>)<pos:position pos:line="82" pos:column="33"/></condition><then pos:line="82" pos:column="33"> <block pos:line="82" pos:column="34">{
      <expr_stmt><expr><name pos:line="83" pos:column="7">error<pos:position pos:line="83" pos:column="12"/></name> <operator pos:line="83" pos:column="13">=<pos:position pos:line="83" pos:column="14"/></operator> <name pos:line="83" pos:column="15">SOCKERRNO<pos:position pos:line="83" pos:column="24"/></name></expr>;<pos:position pos:line="83" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="84" pos:column="7">logmsg<pos:position pos:line="84" pos:column="13"/></name><argument_list pos:line="84" pos:column="13">(<argument><expr><literal type="string" pos:line="84" pos:column="14">"getsockname() failed with error: (%d) %s"<pos:position pos:line="84" pos:column="56"/></literal></expr></argument>,
             <argument><expr><name pos:line="85" pos:column="14">error<pos:position pos:line="85" pos:column="19"/></name></expr></argument>, <argument><expr><call><name pos:line="85" pos:column="21">strerror<pos:position pos:line="85" pos:column="29"/></name><argument_list pos:line="85" pos:column="29">(<argument><expr><name pos:line="85" pos:column="30">error<pos:position pos:line="85" pos:column="35"/></name></expr></argument>)<pos:position pos:line="85" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="85" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="86" pos:column="7">sclose<pos:position pos:line="86" pos:column="13"/></name><argument_list pos:line="86" pos:column="13">(<argument><expr><name pos:line="86" pos:column="14">sock<pos:position pos:line="86" pos:column="18"/></name></expr></argument>)<pos:position pos:line="86" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="20"/></expr_stmt>
      <return pos:line="87" pos:column="7">return <expr><name pos:line="87" pos:column="14">CURL_SOCKET_BAD<pos:position pos:line="87" pos:column="29"/></name></expr>;<pos:position pos:line="87" pos:column="30"/></return>
    }<pos:position pos:line="88" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="89" pos:column="5">*<pos:position pos:line="89" pos:column="6"/></operator><name pos:line="89" pos:column="6">listenport<pos:position pos:line="89" pos:column="16"/></name> <operator pos:line="89" pos:column="17">=<pos:position pos:line="89" pos:column="18"/></operator> <call><name pos:line="89" pos:column="19">ntohs<pos:position pos:line="89" pos:column="24"/></name><argument_list pos:line="89" pos:column="24">(<argument><expr><name><name pos:line="89" pos:column="25">add<pos:position pos:line="89" pos:column="28"/></name><operator pos:line="89" pos:column="28">.<pos:position pos:line="89" pos:column="29"/></operator><name pos:line="89" pos:column="29">sin_port<pos:position pos:line="89" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="89" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="90" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="92" pos:column="3">/* start accepting connections */</comment>
  <expr_stmt><expr><name pos:line="93" pos:column="3">rc<pos:position pos:line="93" pos:column="5"/></name> <operator pos:line="93" pos:column="6">=<pos:position pos:line="93" pos:column="7"/></operator> <call><name pos:line="93" pos:column="8">listen<pos:position pos:line="93" pos:column="14"/></name><argument_list pos:line="93" pos:column="14">(<argument><expr><name pos:line="93" pos:column="15">sock<pos:position pos:line="93" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="93" pos:column="21">5<pos:position pos:line="93" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="24"/></expr_stmt>
  <if pos:line="94" pos:column="3">if<condition pos:line="94" pos:column="5">(<expr><literal type="number" pos:line="94" pos:column="6">0<pos:position pos:line="94" pos:column="7"/></literal> <operator pos:line="94" pos:column="8">!=<pos:position pos:line="94" pos:column="10"/></operator> <name pos:line="94" pos:column="11">rc<pos:position pos:line="94" pos:column="13"/></name></expr>)<pos:position pos:line="94" pos:column="14"/></condition><then pos:line="94" pos:column="14"> <block pos:line="94" pos:column="15">{
    <expr_stmt><expr><name pos:line="95" pos:column="5">error<pos:position pos:line="95" pos:column="10"/></name> <operator pos:line="95" pos:column="11">=<pos:position pos:line="95" pos:column="12"/></operator> <name pos:line="95" pos:column="13">SOCKERRNO<pos:position pos:line="95" pos:column="22"/></name></expr>;<pos:position pos:line="95" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="96" pos:column="5">logmsg<pos:position pos:line="96" pos:column="11"/></name><argument_list pos:line="96" pos:column="11">(<argument><expr><literal type="string" pos:line="96" pos:column="12">"listen() failed with error: (%d) %s"<pos:position pos:line="96" pos:column="49"/></literal></expr></argument>,
           <argument><expr><name pos:line="97" pos:column="12">error<pos:position pos:line="97" pos:column="17"/></name></expr></argument>, <argument><expr><call><name pos:line="97" pos:column="19">strerror<pos:position pos:line="97" pos:column="27"/></name><argument_list pos:line="97" pos:column="27">(<argument><expr><name pos:line="97" pos:column="28">error<pos:position pos:line="97" pos:column="33"/></name></expr></argument>)<pos:position pos:line="97" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="97" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="98" pos:column="5">sclose<pos:position pos:line="98" pos:column="11"/></name><argument_list pos:line="98" pos:column="11">(<argument><expr><name pos:line="98" pos:column="12">sock<pos:position pos:line="98" pos:column="16"/></name></expr></argument>)<pos:position pos:line="98" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="18"/></expr_stmt>
    <return pos:line="99" pos:column="5">return <expr><name pos:line="99" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="99" pos:column="27"/></name></expr>;<pos:position pos:line="99" pos:column="28"/></return>
  }<pos:position pos:line="100" pos:column="4"/></block></then></if>

  <return pos:line="102" pos:column="3">return <expr><name pos:line="102" pos:column="10">sock<pos:position pos:line="102" pos:column="14"/></name></expr>;<pos:position pos:line="102" pos:column="15"/></return>
}<pos:position pos:line="103" pos:column="2"/></block></function></unit>
