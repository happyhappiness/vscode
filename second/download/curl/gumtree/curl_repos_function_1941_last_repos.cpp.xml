<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1941_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_ftpsend<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name><name pos:line="1" pos:column="23">struct<pos:position pos:line="1" pos:column="29"/></name> <name pos:line="1" pos:column="30">connectdata<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">conn<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <name pos:line="1" pos:column="55">char<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">cmd<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">ssize_t<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">bytes_written<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
<cpp:define pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">define<pos:position pos:line="4" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="4" pos:column="9">SBUF_SIZE<pos:position pos:line="4" pos:column="18"/></name></cpp:macro> <cpp:value pos:line="4" pos:column="19">1024<pos:position pos:line="4" pos:column="23"/></cpp:value></cpp:define>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">s<pos:position pos:line="5" pos:column="9"/></name><index pos:line="5" pos:column="9">[<expr><name pos:line="5" pos:column="10">SBUF_SIZE<pos:position pos:line="5" pos:column="19"/></name></expr>]<pos:position pos:line="5" pos:column="20"/></index></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">size_t<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">write_len<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">sptr<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><name pos:line="7" pos:column="16">s<pos:position pos:line="7" pos:column="17"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">CURLcode<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">result<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><name pos:line="8" pos:column="21">CURLE_OK<pos:position pos:line="8" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
<cpp:ifdef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifdef<pos:position pos:line="9" pos:column="7"/></cpp:directive> <name pos:line="9" pos:column="8">HAVE_GSSAPI<pos:position pos:line="9" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">enum<pos:position pos:line="10" pos:column="7"/></name> <name pos:line="10" pos:column="8">protection_level<pos:position pos:line="10" pos:column="24"/></name></name></type> <name pos:line="10" pos:column="25">data_sec<pos:position pos:line="10" pos:column="33"/></name> <init pos:line="10" pos:column="34">= <expr><name><name pos:line="10" pos:column="36">conn<pos:position pos:line="10" pos:column="40"/></name><operator pos:line="10" pos:column="40">-&gt;<pos:position pos:line="10" pos:column="45"/></operator><name pos:line="10" pos:column="42">data_prot<pos:position pos:line="10" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="52"/></decl_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="13" pos:column="3">write_len<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <call><name pos:line="13" pos:column="15">strlen<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">cmd<pos:position pos:line="13" pos:column="25"/></name></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt>
  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name pos:line="14" pos:column="6">write_len<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">&gt;<pos:position pos:line="14" pos:column="20"/></operator> <operator pos:line="14" pos:column="18">(<pos:position pos:line="14" pos:column="19"/></operator><sizeof pos:line="14" pos:column="19">sizeof<argument_list pos:line="14" pos:column="25">(<argument><expr><name pos:line="14" pos:column="26">s<pos:position pos:line="14" pos:column="27"/></name></expr></argument>)<pos:position pos:line="14" pos:column="28"/></argument_list></sizeof> <operator pos:line="14" pos:column="29">-<pos:position pos:line="14" pos:column="30"/></operator><literal type="number" pos:line="14" pos:column="30">3<pos:position pos:line="14" pos:column="31"/></literal><operator pos:line="14" pos:column="31">)<pos:position pos:line="14" pos:column="32"/></operator></expr>)<pos:position pos:line="14" pos:column="33"/></condition><then pos:line="14" pos:column="33">
    <block type="pseudo"><return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">CURLE_BAD_FUNCTION_ARGUMENT<pos:position pos:line="15" pos:column="39"/></name></expr>;<pos:position pos:line="15" pos:column="40"/></return></block></then></if>

  <expr_stmt><expr><call><name pos:line="17" pos:column="3">strcpy<pos:position pos:line="17" pos:column="9"/></name><argument_list pos:line="17" pos:column="9">(<argument><expr><operator pos:line="17" pos:column="10">&amp;<pos:position pos:line="17" pos:column="15"/></operator><name><name pos:line="17" pos:column="11">s<pos:position pos:line="17" pos:column="12"/></name><index pos:line="17" pos:column="12">[<expr><name pos:line="17" pos:column="13">write_len<pos:position pos:line="17" pos:column="22"/></name></expr>]<pos:position pos:line="17" pos:column="23"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="25">"\r\n"<pos:position pos:line="17" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt> <comment type="block" pos:line="17" pos:column="34">/* append a trailing CRLF */</comment>
  <expr_stmt><expr><name pos:line="18" pos:column="3">write_len<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">+=<pos:position pos:line="18" pos:column="15"/></operator> <literal type="number" pos:line="18" pos:column="16">2<pos:position pos:line="18" pos:column="17"/></literal></expr>;<pos:position pos:line="18" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="19" pos:column="3">bytes_written<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <literal type="number" pos:line="19" pos:column="19">0<pos:position pos:line="19" pos:column="20"/></literal></expr>;<pos:position pos:line="19" pos:column="21"/></expr_stmt>

  <expr_stmt><expr><name pos:line="21" pos:column="3">result<pos:position pos:line="21" pos:column="9"/></name> <operator pos:line="21" pos:column="10">=<pos:position pos:line="21" pos:column="11"/></operator> <call><name pos:line="21" pos:column="12">Curl_convert_to_network<pos:position pos:line="21" pos:column="35"/></name><argument_list pos:line="21" pos:column="35">(<argument><expr><name><name pos:line="21" pos:column="36">conn<pos:position pos:line="21" pos:column="40"/></name><operator pos:line="21" pos:column="40">-&gt;<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="42">data<pos:position pos:line="21" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="48">s<pos:position pos:line="21" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="51">write_len<pos:position pos:line="21" pos:column="60"/></name></expr></argument>)<pos:position pos:line="21" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="62"/></expr_stmt>
  <comment type="block" pos:line="22" pos:column="3">/* Curl_convert_to_network calls failf if unsuccessful */</comment>
  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><name pos:line="23" pos:column="6">result<pos:position pos:line="23" pos:column="12"/></name></expr>)<pos:position pos:line="23" pos:column="13"/></condition><then pos:line="23" pos:column="13">
    <block type="pseudo"><return pos:line="24" pos:column="5">return <expr><name pos:line="24" pos:column="12">result<pos:position pos:line="24" pos:column="18"/></name></expr>;<pos:position pos:line="24" pos:column="19"/></return></block></then></if>

  <for pos:line="26" pos:column="3">for<control pos:line="26" pos:column="6">(<init pos:line="26" pos:column="7">;<pos:position pos:line="26" pos:column="8"/></init><condition pos:line="26" pos:column="8">;<pos:position pos:line="26" pos:column="9"/></condition><incr/>)<pos:position pos:line="26" pos:column="10"/></control> <block pos:line="26" pos:column="11">{
<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef<pos:position pos:line="27" pos:column="7"/></cpp:directive> <name pos:line="27" pos:column="8">HAVE_GSSAPI<pos:position pos:line="27" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><name><name pos:line="28" pos:column="5">conn<pos:position pos:line="28" pos:column="9"/></name><operator pos:line="28" pos:column="9">-&gt;<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="11">data_prot<pos:position pos:line="28" pos:column="20"/></name></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <name pos:line="28" pos:column="23">PROT_CMD<pos:position pos:line="28" pos:column="31"/></name></expr>;<pos:position pos:line="28" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="30" pos:column="5">result<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <call><name pos:line="30" pos:column="14">Curl_write<pos:position pos:line="30" pos:column="24"/></name><argument_list pos:line="30" pos:column="24">(<argument><expr><name pos:line="30" pos:column="25">conn<pos:position pos:line="30" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="31">conn<pos:position pos:line="30" pos:column="35"/></name><operator pos:line="30" pos:column="35">-&gt;<pos:position pos:line="30" pos:column="40"/></operator><name pos:line="30" pos:column="37">sock<pos:position pos:line="30" pos:column="41"/></name><index pos:line="30" pos:column="41">[<expr><name pos:line="30" pos:column="42">FIRSTSOCKET<pos:position pos:line="30" pos:column="53"/></name></expr>]<pos:position pos:line="30" pos:column="54"/></index></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="56">sptr<pos:position pos:line="30" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="62">write_len<pos:position pos:line="30" pos:column="71"/></name></expr></argument>,
                        <argument><expr><operator pos:line="31" pos:column="25">&amp;<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="26">bytes_written<pos:position pos:line="31" pos:column="39"/></name></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>
<cpp:ifdef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifdef<pos:position pos:line="32" pos:column="7"/></cpp:directive> <name pos:line="32" pos:column="8">HAVE_GSSAPI<pos:position pos:line="32" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">DEBUGASSERT<pos:position pos:line="33" pos:column="16"/></name><argument_list pos:line="33" pos:column="16">(<argument><expr><name pos:line="33" pos:column="17">data_sec<pos:position pos:line="33" pos:column="25"/></name> <operator pos:line="33" pos:column="26">&gt;<pos:position pos:line="33" pos:column="30"/></operator> <name pos:line="33" pos:column="28">PROT_NONE<pos:position pos:line="33" pos:column="37"/></name> <operator pos:line="33" pos:column="38">&amp;&amp;<pos:position pos:line="33" pos:column="48"/></operator> <name pos:line="33" pos:column="41">data_sec<pos:position pos:line="33" pos:column="49"/></name> <operator pos:line="33" pos:column="50">&lt;<pos:position pos:line="33" pos:column="54"/></operator> <name pos:line="33" pos:column="52">PROT_LAST<pos:position pos:line="33" pos:column="61"/></name></expr></argument>)<pos:position pos:line="33" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">conn<pos:position pos:line="34" pos:column="9"/></name><operator pos:line="34" pos:column="9">-&gt;<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="11">data_prot<pos:position pos:line="34" pos:column="20"/></name></name> <operator pos:line="34" pos:column="21">=<pos:position pos:line="34" pos:column="22"/></operator> <name pos:line="34" pos:column="23">data_sec<pos:position pos:line="34" pos:column="31"/></name></expr>;<pos:position pos:line="34" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="37" pos:column="5">if<condition pos:line="37" pos:column="7">(<expr><name pos:line="37" pos:column="8">result<pos:position pos:line="37" pos:column="14"/></name></expr>)<pos:position pos:line="37" pos:column="15"/></condition><then pos:line="37" pos:column="15">
      <block type="pseudo"><break pos:line="38" pos:column="7">break;<pos:position pos:line="38" pos:column="13"/></break></block></then></if>

    <if pos:line="40" pos:column="5">if<condition pos:line="40" pos:column="7">(<expr><name><name pos:line="40" pos:column="8">conn<pos:position pos:line="40" pos:column="12"/></name><operator pos:line="40" pos:column="12">-&gt;<pos:position pos:line="40" pos:column="17"/></operator><name pos:line="40" pos:column="14">data<pos:position pos:line="40" pos:column="18"/></name><operator pos:line="40" pos:column="18">-&gt;<pos:position pos:line="40" pos:column="23"/></operator><name pos:line="40" pos:column="20">set<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">.<pos:position pos:line="40" pos:column="24"/></operator><name pos:line="40" pos:column="24">verbose<pos:position pos:line="40" pos:column="31"/></name></name></expr>)<pos:position pos:line="40" pos:column="32"/></condition><then pos:line="40" pos:column="32">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="7">Curl_debug<pos:position pos:line="41" pos:column="17"/></name><argument_list pos:line="41" pos:column="17">(<argument><expr><name><name pos:line="41" pos:column="18">conn<pos:position pos:line="41" pos:column="22"/></name><operator pos:line="41" pos:column="22">-&gt;<pos:position pos:line="41" pos:column="27"/></operator><name pos:line="41" pos:column="24">data<pos:position pos:line="41" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="30">CURLINFO_HEADER_OUT<pos:position pos:line="41" pos:column="49"/></name></expr></argument>,
                 <argument><expr><name pos:line="42" pos:column="18">sptr<pos:position pos:line="42" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="24">(<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="25">size_t<pos:position pos:line="42" pos:column="31"/></name><operator pos:line="42" pos:column="31">)<pos:position pos:line="42" pos:column="32"/></operator><name pos:line="42" pos:column="32">bytes_written<pos:position pos:line="42" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="47">conn<pos:position pos:line="42" pos:column="51"/></name></expr></argument>)<pos:position pos:line="42" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="53"/></expr_stmt></block></then></if>

    <if pos:line="44" pos:column="5">if<condition pos:line="44" pos:column="7">(<expr><name pos:line="44" pos:column="8">bytes_written<pos:position pos:line="44" pos:column="21"/></name> <operator pos:line="44" pos:column="22">!=<pos:position pos:line="44" pos:column="24"/></operator> <operator pos:line="44" pos:column="25">(<pos:position pos:line="44" pos:column="26"/></operator><name pos:line="44" pos:column="26">ssize_t<pos:position pos:line="44" pos:column="33"/></name><operator pos:line="44" pos:column="33">)<pos:position pos:line="44" pos:column="34"/></operator><name pos:line="44" pos:column="34">write_len<pos:position pos:line="44" pos:column="43"/></name></expr>)<pos:position pos:line="44" pos:column="44"/></condition><then pos:line="44" pos:column="44"> <block pos:line="44" pos:column="45">{
      <expr_stmt><expr><name pos:line="45" pos:column="7">write_len<pos:position pos:line="45" pos:column="16"/></name> <operator pos:line="45" pos:column="17">-=<pos:position pos:line="45" pos:column="19"/></operator> <name pos:line="45" pos:column="20">bytes_written<pos:position pos:line="45" pos:column="33"/></name></expr>;<pos:position pos:line="45" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name pos:line="46" pos:column="7">sptr<pos:position pos:line="46" pos:column="11"/></name> <operator pos:line="46" pos:column="12">+=<pos:position pos:line="46" pos:column="14"/></operator> <name pos:line="46" pos:column="15">bytes_written<pos:position pos:line="46" pos:column="28"/></name></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="47" pos:column="6"/></block></then>
    <else pos:line="48" pos:column="5">else
      <block type="pseudo"><break pos:line="49" pos:column="7">break;<pos:position pos:line="49" pos:column="13"/></break></block></else></if>
  }<pos:position pos:line="50" pos:column="4"/></block></for>

  <return pos:line="52" pos:column="3">return <expr><name pos:line="52" pos:column="10">result<pos:position pos:line="52" pos:column="16"/></name></expr>;<pos:position pos:line="52" pos:column="17"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
