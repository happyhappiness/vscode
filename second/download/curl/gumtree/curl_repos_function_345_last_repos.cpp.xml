<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_345_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">Curl_os400_recvfrom<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">int<pos:position pos:line="2" pos:column="24"/></name></type> <name pos:line="2" pos:column="25">sd<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="29">char<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type> <name pos:line="2" pos:column="36">buffer<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="44">int<pos:position pos:line="2" pos:column="47"/></name></type> <name pos:line="2" pos:column="48">buflen<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">int<pos:position pos:line="2" pos:column="59"/></name></type> <name pos:line="2" pos:column="60">flags<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>,
                                <parameter><decl><type><name><name pos:line="3" pos:column="33">struct<pos:position pos:line="3" pos:column="39"/></name> <name pos:line="3" pos:column="40">sockaddr<pos:position pos:line="3" pos:column="48"/></name></name> <modifier pos:line="3" pos:column="49">*<pos:position pos:line="3" pos:column="50"/></modifier></type> <name pos:line="3" pos:column="51">fromaddr<pos:position pos:line="3" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="61">int<pos:position pos:line="3" pos:column="64"/></name> <modifier pos:line="3" pos:column="65">*<pos:position pos:line="3" pos:column="66"/></modifier></type> <name pos:line="3" pos:column="67">addrlen<pos:position pos:line="3" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="75"/></parameter_list>

<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">i<pos:position pos:line="6" pos:column="8"/></name></decl>;<pos:position pos:line="6" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">rcvlen<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">laddrlen<pos:position pos:line="8" pos:column="15"/></name></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="9" pos:column="3">const<pos:position pos:line="9" pos:column="8"/></specifier> <name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">sockaddr_un<pos:position pos:line="9" pos:column="27"/></name></name> <modifier pos:line="9" pos:column="28">*<pos:position pos:line="9" pos:column="29"/></modifier></type> <name pos:line="9" pos:column="30">srcu<pos:position pos:line="9" pos:column="34"/></name></decl>;<pos:position pos:line="9" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">sockaddr_un<pos:position pos:line="10" pos:column="21"/></name></name> <modifier pos:line="10" pos:column="22">*<pos:position pos:line="10" pos:column="23"/></modifier></type> <name pos:line="10" pos:column="24">dstu<pos:position pos:line="10" pos:column="28"/></name></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="11" pos:column="3">struct<pos:position pos:line="11" pos:column="9"/></name> <name pos:line="11" pos:column="10">sockaddr_storage<pos:position pos:line="11" pos:column="26"/></name></name></type> <name pos:line="11" pos:column="27">laddr<pos:position pos:line="11" pos:column="32"/></name></decl>;<pos:position pos:line="11" pos:column="33"/></decl_stmt>

  <if pos:line="13" pos:column="3">if<condition pos:line="13" pos:column="5">(<expr><operator pos:line="13" pos:column="6">!<pos:position pos:line="13" pos:column="7"/></operator><name pos:line="13" pos:column="7">fromaddr<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">||<pos:position pos:line="13" pos:column="18"/></operator> <operator pos:line="13" pos:column="19">!<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">addrlen<pos:position pos:line="13" pos:column="27"/></name> <operator pos:line="13" pos:column="28">||<pos:position pos:line="13" pos:column="30"/></operator> <operator pos:line="13" pos:column="31">*<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="32">addrlen<pos:position pos:line="13" pos:column="39"/></name> <operator pos:line="13" pos:column="40">&lt;=<pos:position pos:line="13" pos:column="45"/></operator> <literal type="number" pos:line="13" pos:column="43">0<pos:position pos:line="13" pos:column="44"/></literal></expr>)<pos:position pos:line="13" pos:column="45"/></condition><then pos:line="13" pos:column="45">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><call><name pos:line="14" pos:column="12">recvfrom<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name pos:line="14" pos:column="21">sd<pos:position pos:line="14" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="25">buffer<pos:position pos:line="14" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="33">buflen<pos:position pos:line="14" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="41">flags<pos:position pos:line="14" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="48">fromaddr<pos:position pos:line="14" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="58">addrlen<pos:position pos:line="14" pos:column="65"/></name></expr></argument>)<pos:position pos:line="14" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="67"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="16" pos:column="3">laddrlen<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <sizeof pos:line="16" pos:column="14">sizeof <name pos:line="16" pos:column="21">laddr<pos:position pos:line="16" pos:column="26"/></name></sizeof></expr>;<pos:position pos:line="16" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="17" pos:column="3">laddr<pos:position pos:line="17" pos:column="8"/></name><operator pos:line="17" pos:column="8">.<pos:position pos:line="17" pos:column="9"/></operator><name pos:line="17" pos:column="9">ss_family<pos:position pos:line="17" pos:column="18"/></name></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <name pos:line="17" pos:column="21">AF_UNSPEC<pos:position pos:line="17" pos:column="30"/></name></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt>          <comment type="block" pos:line="17" pos:column="41">/* To detect if unused. */</comment>
  <expr_stmt><expr><name pos:line="18" pos:column="3">rcvlen<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <call><name pos:line="18" pos:column="12">recvfrom<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><name pos:line="18" pos:column="21">sd<pos:position pos:line="18" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="25">buffer<pos:position pos:line="18" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="33">buflen<pos:position pos:line="18" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="41">flags<pos:position pos:line="18" pos:column="46"/></name></expr></argument>,
                    <argument><expr><operator pos:line="19" pos:column="21">(<pos:position pos:line="19" pos:column="22"/></operator>struct <name pos:line="19" pos:column="29">sockaddr<pos:position pos:line="19" pos:column="37"/></name> <operator pos:line="19" pos:column="38">*<pos:position pos:line="19" pos:column="39"/></operator><operator pos:line="19" pos:column="39">)<pos:position pos:line="19" pos:column="40"/></operator> <operator pos:line="19" pos:column="41">&amp;<pos:position pos:line="19" pos:column="46"/></operator><name pos:line="19" pos:column="42">laddr<pos:position pos:line="19" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="49">&amp;<pos:position pos:line="19" pos:column="54"/></operator><name pos:line="19" pos:column="50">laddrlen<pos:position pos:line="19" pos:column="58"/></name></expr></argument>)<pos:position pos:line="19" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="60"/></expr_stmt>

  <if pos:line="21" pos:column="3">if<condition pos:line="21" pos:column="5">(<expr><name pos:line="21" pos:column="6">rcvlen<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">&lt;<pos:position pos:line="21" pos:column="17"/></operator> <literal type="number" pos:line="21" pos:column="15">0<pos:position pos:line="21" pos:column="16"/></literal></expr>)<pos:position pos:line="21" pos:column="17"/></condition><then pos:line="21" pos:column="17">
    <block type="pseudo"><return pos:line="22" pos:column="5">return <expr><name pos:line="22" pos:column="12">rcvlen<pos:position pos:line="22" pos:column="18"/></name></expr>;<pos:position pos:line="22" pos:column="19"/></return></block></then></if>

  <switch pos:line="24" pos:column="3">switch <condition pos:line="24" pos:column="10">(<expr><name><name pos:line="24" pos:column="11">laddr<pos:position pos:line="24" pos:column="16"/></name><operator pos:line="24" pos:column="16">.<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="17">ss_family<pos:position pos:line="24" pos:column="26"/></name></name></expr>)<pos:position pos:line="24" pos:column="27"/></condition> <block pos:line="24" pos:column="28">{

  <case pos:line="26" pos:column="3">case <expr><name pos:line="26" pos:column="8">AF_UNIX<pos:position pos:line="26" pos:column="15"/></name></expr>:<pos:position pos:line="26" pos:column="16"/></case>
    <expr_stmt><expr><name pos:line="27" pos:column="5">srcu<pos:position pos:line="27" pos:column="9"/></name> <operator pos:line="27" pos:column="10">=<pos:position pos:line="27" pos:column="11"/></operator> <operator pos:line="27" pos:column="12">(<pos:position pos:line="27" pos:column="13"/></operator><specifier pos:line="27" pos:column="13">const<pos:position pos:line="27" pos:column="18"/></specifier> struct <name pos:line="27" pos:column="26">sockaddr_un<pos:position pos:line="27" pos:column="37"/></name> <operator pos:line="27" pos:column="38">*<pos:position pos:line="27" pos:column="39"/></operator><operator pos:line="27" pos:column="39">)<pos:position pos:line="27" pos:column="40"/></operator> <operator pos:line="27" pos:column="41">&amp;<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="42">laddr<pos:position pos:line="27" pos:column="47"/></name></expr>;<pos:position pos:line="27" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name pos:line="28" pos:column="5">dstu<pos:position pos:line="28" pos:column="9"/></name> <operator pos:line="28" pos:column="10">=<pos:position pos:line="28" pos:column="11"/></operator> <operator pos:line="28" pos:column="12">(<pos:position pos:line="28" pos:column="13"/></operator>struct <name pos:line="28" pos:column="20">sockaddr_un<pos:position pos:line="28" pos:column="31"/></name> <operator pos:line="28" pos:column="32">*<pos:position pos:line="28" pos:column="33"/></operator><operator pos:line="28" pos:column="33">)<pos:position pos:line="28" pos:column="34"/></operator> <name pos:line="28" pos:column="35">fromaddr<pos:position pos:line="28" pos:column="43"/></name></expr>;<pos:position pos:line="28" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="29" pos:column="5">i<pos:position pos:line="29" pos:column="6"/></name> <operator pos:line="29" pos:column="7">=<pos:position pos:line="29" pos:column="8"/></operator> <operator pos:line="29" pos:column="9">*<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">addrlen<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">-<pos:position pos:line="29" pos:column="19"/></operator> <call><name pos:line="29" pos:column="20">offsetof<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr pos:line="29" pos:column="29">struct <name pos:line="29" pos:column="36">sockaddr_un<pos:position pos:line="29" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="49">sun_path<pos:position pos:line="29" pos:column="57"/></name></expr></argument>)<pos:position pos:line="29" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><name pos:line="30" pos:column="5">laddrlen<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">-=<pos:position pos:line="30" pos:column="16"/></operator> <call><name pos:line="30" pos:column="17">offsetof<pos:position pos:line="30" pos:column="25"/></name><argument_list pos:line="30" pos:column="25">(<argument><expr pos:line="30" pos:column="26">struct <name pos:line="30" pos:column="33">sockaddr_un<pos:position pos:line="30" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="46">sun_path<pos:position pos:line="30" pos:column="54"/></name></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><name pos:line="31" pos:column="5">i<pos:position pos:line="31" pos:column="6"/></name> <operator pos:line="31" pos:column="7">=<pos:position pos:line="31" pos:column="8"/></operator> <call><name pos:line="31" pos:column="9">QadrtConvertE2A<pos:position pos:line="31" pos:column="24"/></name><argument_list pos:line="31" pos:column="24">(<argument><expr><name><name pos:line="31" pos:column="25">dstu<pos:position pos:line="31" pos:column="29"/></name><operator pos:line="31" pos:column="29">-&gt;<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="31">sun_path<pos:position pos:line="31" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="41">srcu<pos:position pos:line="31" pos:column="45"/></name><operator pos:line="31" pos:column="45">-&gt;<pos:position pos:line="31" pos:column="50"/></operator><name pos:line="31" pos:column="47">sun_path<pos:position pos:line="31" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="57">i<pos:position pos:line="31" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="60">laddrlen<pos:position pos:line="31" pos:column="68"/></name></expr></argument>)<pos:position pos:line="31" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="70"/></expr_stmt>
    <expr_stmt><expr><name pos:line="32" pos:column="5">laddrlen<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">=<pos:position pos:line="32" pos:column="15"/></operator> <name pos:line="32" pos:column="16">i<pos:position pos:line="32" pos:column="17"/></name> <operator pos:line="32" pos:column="18">+<pos:position pos:line="32" pos:column="19"/></operator> <call><name pos:line="32" pos:column="20">offsetof<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr pos:line="32" pos:column="29">struct <name pos:line="32" pos:column="36">sockaddr_un<pos:position pos:line="32" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="49">sun_path<pos:position pos:line="32" pos:column="57"/></name></expr></argument>)<pos:position pos:line="32" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="59"/></expr_stmt>

    <if pos:line="34" pos:column="5">if<condition pos:line="34" pos:column="7">(<expr><name pos:line="34" pos:column="8">laddrlen<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">&lt;<pos:position pos:line="34" pos:column="21"/></operator> <operator pos:line="34" pos:column="19">*<pos:position pos:line="34" pos:column="20"/></operator><name pos:line="34" pos:column="20">addrlen<pos:position pos:line="34" pos:column="27"/></name></expr>)<pos:position pos:line="34" pos:column="28"/></condition><then pos:line="34" pos:column="28">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="35" pos:column="7">dstu<pos:position pos:line="35" pos:column="11"/></name><operator pos:line="35" pos:column="11">-&gt;<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="13">sun_path<pos:position pos:line="35" pos:column="21"/></name><index pos:line="35" pos:column="21">[<expr><name pos:line="35" pos:column="22">i<pos:position pos:line="35" pos:column="23"/></name></expr>]<pos:position pos:line="35" pos:column="24"/></index></name> <operator pos:line="35" pos:column="25">=<pos:position pos:line="35" pos:column="26"/></operator> <literal type="char" pos:line="35" pos:column="27">'\0'<pos:position pos:line="35" pos:column="31"/></literal></expr>;<pos:position pos:line="35" pos:column="32"/></expr_stmt></block></then></if>

    <break pos:line="37" pos:column="5">break;<pos:position pos:line="37" pos:column="11"/></break>

  <case pos:line="39" pos:column="3">case <expr><name pos:line="39" pos:column="8">AF_UNSPEC<pos:position pos:line="39" pos:column="17"/></name></expr>:<pos:position pos:line="39" pos:column="18"/></case>
    <break pos:line="40" pos:column="5">break;<pos:position pos:line="40" pos:column="11"/></break>

  <default pos:line="42" pos:column="3">default:<pos:position pos:line="42" pos:column="11"/></default>
    <if pos:line="43" pos:column="5">if<condition pos:line="43" pos:column="7">(<expr><name pos:line="43" pos:column="8">laddrlen<pos:position pos:line="43" pos:column="16"/></name> <operator pos:line="43" pos:column="17">&gt;<pos:position pos:line="43" pos:column="21"/></operator> <operator pos:line="43" pos:column="19">*<pos:position pos:line="43" pos:column="20"/></operator><name pos:line="43" pos:column="20">addrlen<pos:position pos:line="43" pos:column="27"/></name></expr>)<pos:position pos:line="43" pos:column="28"/></condition><then pos:line="43" pos:column="28">
      <block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="7">laddrlen<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">=<pos:position pos:line="44" pos:column="17"/></operator> <operator pos:line="44" pos:column="18">*<pos:position pos:line="44" pos:column="19"/></operator><name pos:line="44" pos:column="19">addrlen<pos:position pos:line="44" pos:column="26"/></name></expr>;<pos:position pos:line="44" pos:column="27"/></expr_stmt></block></then></if>

    <if pos:line="46" pos:column="5">if<condition pos:line="46" pos:column="7">(<expr><name pos:line="46" pos:column="8">laddrlen<pos:position pos:line="46" pos:column="16"/></name></expr>)<pos:position pos:line="46" pos:column="17"/></condition><then pos:line="46" pos:column="17">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="7">memcpy<pos:position pos:line="47" pos:column="13"/></name><argument_list pos:line="47" pos:column="13">(<argument><expr><operator pos:line="47" pos:column="14">(<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="15">char<pos:position pos:line="47" pos:column="19"/></name> <operator pos:line="47" pos:column="20">*<pos:position pos:line="47" pos:column="21"/></operator><operator pos:line="47" pos:column="21">)<pos:position pos:line="47" pos:column="22"/></operator> <name pos:line="47" pos:column="23">fromaddr<pos:position pos:line="47" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="33">(<pos:position pos:line="47" pos:column="34"/></operator><name pos:line="47" pos:column="34">char<pos:position pos:line="47" pos:column="38"/></name> <operator pos:line="47" pos:column="39">*<pos:position pos:line="47" pos:column="40"/></operator><operator pos:line="47" pos:column="40">)<pos:position pos:line="47" pos:column="41"/></operator> <operator pos:line="47" pos:column="42">&amp;<pos:position pos:line="47" pos:column="47"/></operator><name pos:line="47" pos:column="43">laddr<pos:position pos:line="47" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="50">laddrlen<pos:position pos:line="47" pos:column="58"/></name></expr></argument>)<pos:position pos:line="47" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="60"/></expr_stmt></block></then></if>

    <break pos:line="49" pos:column="5">break;<pos:position pos:line="49" pos:column="11"/></break>
    }<pos:position pos:line="50" pos:column="6"/></block></switch>

  <expr_stmt><expr><operator pos:line="52" pos:column="3">*<pos:position pos:line="52" pos:column="4"/></operator><name pos:line="52" pos:column="4">addrlen<pos:position pos:line="52" pos:column="11"/></name> <operator pos:line="52" pos:column="12">=<pos:position pos:line="52" pos:column="13"/></operator> <name pos:line="52" pos:column="14">laddrlen<pos:position pos:line="52" pos:column="22"/></name></expr>;<pos:position pos:line="52" pos:column="23"/></expr_stmt>
  <return pos:line="53" pos:column="3">return <expr><name pos:line="53" pos:column="10">rcvlen<pos:position pos:line="53" pos:column="16"/></name></expr>;<pos:position pos:line="53" pos:column="17"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
