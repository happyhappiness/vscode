<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_756_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">ssize_t<pos:position pos:line="1" pos:column="15"/></name></type> <name pos:line="1" pos:column="16">fullread<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">filedes<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">void<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">buffer<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">size_t<pos:position pos:line="1" pos:column="58"/></name></type> <name pos:line="1" pos:column="59">nbytes<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">error<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">ssize_t<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">rc<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">ssize_t<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">nread<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

  <do pos:line="7" pos:column="3">do <block pos:line="7" pos:column="6">{
    <expr_stmt><expr><name pos:line="8" pos:column="5">rc<pos:position pos:line="8" pos:column="7"/></name> <operator pos:line="8" pos:column="8">=<pos:position pos:line="8" pos:column="9"/></operator> <call><name pos:line="8" pos:column="10">read<pos:position pos:line="8" pos:column="14"/></name><argument_list pos:line="8" pos:column="14">(<argument><expr><name pos:line="8" pos:column="15">filedes<pos:position pos:line="8" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="24">(<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">unsigned<pos:position pos:line="8" pos:column="33"/></name> <name pos:line="8" pos:column="34">char<pos:position pos:line="8" pos:column="38"/></name> <operator pos:line="8" pos:column="39">*<pos:position pos:line="8" pos:column="40"/></operator><operator pos:line="8" pos:column="40">)<pos:position pos:line="8" pos:column="41"/></operator><name pos:line="8" pos:column="41">buffer<pos:position pos:line="8" pos:column="47"/></name> <operator pos:line="8" pos:column="48">+<pos:position pos:line="8" pos:column="49"/></operator> <name pos:line="8" pos:column="50">nread<pos:position pos:line="8" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="57">nbytes<pos:position pos:line="8" pos:column="63"/></name> <operator pos:line="8" pos:column="64">-<pos:position pos:line="8" pos:column="65"/></operator> <name pos:line="8" pos:column="66">nread<pos:position pos:line="8" pos:column="71"/></name></expr></argument>)<pos:position pos:line="8" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="73"/></expr_stmt>

    <if pos:line="10" pos:column="5">if<condition pos:line="10" pos:column="7">(<expr><name pos:line="10" pos:column="8">got_exit_signal<pos:position pos:line="10" pos:column="23"/></name></expr>)<pos:position pos:line="10" pos:column="24"/></condition><then pos:line="10" pos:column="24"> <block pos:line="10" pos:column="25">{
      <expr_stmt><expr><call><name pos:line="11" pos:column="7">logmsg<pos:position pos:line="11" pos:column="13"/></name><argument_list pos:line="11" pos:column="13">(<argument><expr><literal type="string" pos:line="11" pos:column="14">"signalled to die"<pos:position pos:line="11" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="34"/></expr_stmt>
      <return pos:line="12" pos:column="7">return <expr><operator pos:line="12" pos:column="14">-<pos:position pos:line="12" pos:column="15"/></operator><literal type="number" pos:line="12" pos:column="15">1<pos:position pos:line="12" pos:column="16"/></literal></expr>;<pos:position pos:line="12" pos:column="17"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <if pos:line="15" pos:column="5">if<condition pos:line="15" pos:column="7">(<expr><name pos:line="15" pos:column="8">rc<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">&lt;<pos:position pos:line="15" pos:column="15"/></operator> <literal type="number" pos:line="15" pos:column="13">0<pos:position pos:line="15" pos:column="14"/></literal></expr>)<pos:position pos:line="15" pos:column="15"/></condition><then pos:line="15" pos:column="15"> <block pos:line="15" pos:column="16">{
      <expr_stmt><expr><name pos:line="16" pos:column="7">error<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <name pos:line="16" pos:column="15">errno<pos:position pos:line="16" pos:column="20"/></name></expr>;<pos:position pos:line="16" pos:column="21"/></expr_stmt>
      <if pos:line="17" pos:column="7">if<condition pos:line="17" pos:column="9">(<expr><operator pos:line="17" pos:column="10">(<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">error<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">==<pos:position pos:line="17" pos:column="19"/></operator> <name pos:line="17" pos:column="20">EINTR<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">)<pos:position pos:line="17" pos:column="26"/></operator> <operator pos:line="17" pos:column="27">||<pos:position pos:line="17" pos:column="29"/></operator> <operator pos:line="17" pos:column="30">(<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="31">error<pos:position pos:line="17" pos:column="36"/></name> <operator pos:line="17" pos:column="37">==<pos:position pos:line="17" pos:column="39"/></operator> <name pos:line="17" pos:column="40">EAGAIN<pos:position pos:line="17" pos:column="46"/></name><operator pos:line="17" pos:column="46">)<pos:position pos:line="17" pos:column="47"/></operator></expr>)<pos:position pos:line="17" pos:column="48"/></condition><then pos:line="17" pos:column="48">
        <block type="pseudo"><continue pos:line="18" pos:column="9">continue;<pos:position pos:line="18" pos:column="18"/></continue></block></then></if>
      <expr_stmt><expr><call><name pos:line="19" pos:column="7">logmsg<pos:position pos:line="19" pos:column="13"/></name><argument_list pos:line="19" pos:column="13">(<argument><expr><literal type="string" pos:line="19" pos:column="14">"reading from file descriptor: %d,"<pos:position pos:line="19" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="51">filedes<pos:position pos:line="19" pos:column="58"/></name></expr></argument>)<pos:position pos:line="19" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="60"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">logmsg<pos:position pos:line="20" pos:column="13"/></name><argument_list pos:line="20" pos:column="13">(<argument><expr><literal type="string" pos:line="20" pos:column="14">"unrecoverable read() failure: (%d) %s"<pos:position pos:line="20" pos:column="53"/></literal></expr></argument>,
             <argument><expr><name pos:line="21" pos:column="14">error<pos:position pos:line="21" pos:column="19"/></name></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="21">strerror<pos:position pos:line="21" pos:column="29"/></name><argument_list pos:line="21" pos:column="29">(<argument><expr><name pos:line="21" pos:column="30">error<pos:position pos:line="21" pos:column="35"/></name></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="38"/></expr_stmt>
      <return pos:line="22" pos:column="7">return <expr><operator pos:line="22" pos:column="14">-<pos:position pos:line="22" pos:column="15"/></operator><literal type="number" pos:line="22" pos:column="15">1<pos:position pos:line="22" pos:column="16"/></literal></expr>;<pos:position pos:line="22" pos:column="17"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <if pos:line="25" pos:column="5">if<condition pos:line="25" pos:column="7">(<expr><name pos:line="25" pos:column="8">rc<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">==<pos:position pos:line="25" pos:column="13"/></operator> <literal type="number" pos:line="25" pos:column="14">0<pos:position pos:line="25" pos:column="15"/></literal></expr>)<pos:position pos:line="25" pos:column="16"/></condition><then pos:line="25" pos:column="16"> <block pos:line="25" pos:column="17">{
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">logmsg<pos:position pos:line="26" pos:column="13"/></name><argument_list pos:line="26" pos:column="13">(<argument><expr><literal type="string" pos:line="26" pos:column="14">"got 0 reading from stdin"<pos:position pos:line="26" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="42"/></expr_stmt>
      <return pos:line="27" pos:column="7">return <expr><literal type="number" pos:line="27" pos:column="14">0<pos:position pos:line="27" pos:column="15"/></literal></expr>;<pos:position pos:line="27" pos:column="16"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="30" pos:column="5">nread<pos:position pos:line="30" pos:column="10"/></name> <operator pos:line="30" pos:column="11">+=<pos:position pos:line="30" pos:column="13"/></operator> <name pos:line="30" pos:column="14">rc<pos:position pos:line="30" pos:column="16"/></name></expr>;<pos:position pos:line="30" pos:column="17"/></expr_stmt>

  }<pos:position pos:line="32" pos:column="4"/></block> while<condition pos:line="32" pos:column="10">(<expr><operator pos:line="32" pos:column="11">(<pos:position pos:line="32" pos:column="12"/></operator><name pos:line="32" pos:column="12">size_t<pos:position pos:line="32" pos:column="18"/></name><operator pos:line="32" pos:column="18">)<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="19">nread<pos:position pos:line="32" pos:column="24"/></name> <operator pos:line="32" pos:column="25">&lt;<pos:position pos:line="32" pos:column="29"/></operator> <name pos:line="32" pos:column="27">nbytes<pos:position pos:line="32" pos:column="33"/></name></expr>)<pos:position pos:line="32" pos:column="34"/></condition>;<pos:position pos:line="32" pos:column="35"/></do>

  <if pos:line="34" pos:column="3">if<condition pos:line="34" pos:column="5">(<expr><name pos:line="34" pos:column="6">verbose<pos:position pos:line="34" pos:column="13"/></name></expr>)<pos:position pos:line="34" pos:column="14"/></condition><then pos:line="34" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="5">logmsg<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><literal type="string" pos:line="35" pos:column="12">"read %zd bytes"<pos:position pos:line="35" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="30">nread<pos:position pos:line="35" pos:column="35"/></name></expr></argument>)<pos:position pos:line="35" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="37"/></expr_stmt></block></then></if>

  <return pos:line="37" pos:column="3">return <expr><name pos:line="37" pos:column="10">nread<pos:position pos:line="37" pos:column="15"/></name></expr>;<pos:position pos:line="37" pos:column="16"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
