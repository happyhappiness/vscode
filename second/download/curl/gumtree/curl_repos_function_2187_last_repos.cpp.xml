<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_2187_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">sendsuboption<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">connectdata<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">conn<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">int<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">option<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">ssize_t<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">bytes_written<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">err<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">unsigned<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">short<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">x<pos:position pos:line="5" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="21">y<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">unsigned<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">char<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">uc1<pos:position pos:line="6" pos:column="21"/></name></decl>, <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="24">uc2<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>

  <decl_stmt><decl><type><name><name pos:line="8" pos:column="3">struct<pos:position pos:line="8" pos:column="9"/></name> <name pos:line="8" pos:column="10">Curl_easy<pos:position pos:line="8" pos:column="19"/></name></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">data<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><name><name pos:line="8" pos:column="28">conn<pos:position pos:line="8" pos:column="32"/></name><operator pos:line="8" pos:column="32">-&gt;<pos:position pos:line="8" pos:column="37"/></operator><name pos:line="8" pos:column="34">data<pos:position pos:line="8" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">TELNET<pos:position pos:line="9" pos:column="16"/></name></name> <modifier pos:line="9" pos:column="17">*<pos:position pos:line="9" pos:column="18"/></modifier></type><name pos:line="9" pos:column="18">tn<pos:position pos:line="9" pos:column="20"/></name> <init pos:line="9" pos:column="21">= <expr><operator pos:line="9" pos:column="23">(<pos:position pos:line="9" pos:column="24"/></operator>struct <name pos:line="9" pos:column="31">TELNET<pos:position pos:line="9" pos:column="37"/></name> <operator pos:line="9" pos:column="38">*<pos:position pos:line="9" pos:column="39"/></operator><operator pos:line="9" pos:column="39">)<pos:position pos:line="9" pos:column="40"/></operator><name><name pos:line="9" pos:column="40">data<pos:position pos:line="9" pos:column="44"/></name><operator pos:line="9" pos:column="44">-&gt;<pos:position pos:line="9" pos:column="49"/></operator><name pos:line="9" pos:column="46">req<pos:position pos:line="9" pos:column="49"/></name><operator pos:line="9" pos:column="49">.<pos:position pos:line="9" pos:column="50"/></operator><name pos:line="9" pos:column="50">protop<pos:position pos:line="9" pos:column="56"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="57"/></decl_stmt>

  <switch pos:line="11" pos:column="3">switch<condition pos:line="11" pos:column="9">(<expr><name pos:line="11" pos:column="10">option<pos:position pos:line="11" pos:column="16"/></name></expr>)<pos:position pos:line="11" pos:column="17"/></condition> <block pos:line="11" pos:column="18">{
  <case pos:line="12" pos:column="3">case <expr><name pos:line="12" pos:column="8">CURL_TELOPT_NAWS<pos:position pos:line="12" pos:column="24"/></name></expr>:<pos:position pos:line="12" pos:column="25"/></case>
    <comment type="block" pos:line="13" pos:column="5">/* We prepare data to be sent */</comment>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">CURL_SB_CLEAR<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">(<argument><expr><name pos:line="14" pos:column="19">tn<pos:position pos:line="14" pos:column="21"/></name></expr></argument>)<pos:position pos:line="14" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">CURL_SB_ACCUM<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">tn<pos:position pos:line="15" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="23">CURL_IAC<pos:position pos:line="15" pos:column="31"/></name></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">CURL_SB_ACCUM<pos:position pos:line="16" pos:column="18"/></name><argument_list pos:line="16" pos:column="18">(<argument><expr><name pos:line="16" pos:column="19">tn<pos:position pos:line="16" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="23">CURL_SB<pos:position pos:line="16" pos:column="30"/></name></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">CURL_SB_ACCUM<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(<argument><expr><name pos:line="17" pos:column="19">tn<pos:position pos:line="17" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="23">CURL_TELOPT_NAWS<pos:position pos:line="17" pos:column="39"/></name></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>
    <comment type="block" pos:line="18" pos:column="5">/* We must deal either with litte or big endian processors */</comment>
    <comment type="block" pos:line="19" pos:column="5">/* Window size must be sent according to the 'network order' */</comment>
    <expr_stmt><expr><name pos:line="20" pos:column="5">x<pos:position pos:line="20" pos:column="6"/></name> <operator pos:line="20" pos:column="7">=<pos:position pos:line="20" pos:column="8"/></operator> <call><name pos:line="20" pos:column="9">htons<pos:position pos:line="20" pos:column="14"/></name><argument_list pos:line="20" pos:column="14">(<argument><expr><name><name pos:line="20" pos:column="15">tn<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">-&gt;<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="19">subopt_wsx<pos:position pos:line="20" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="21" pos:column="5">y<pos:position pos:line="21" pos:column="6"/></name> <operator pos:line="21" pos:column="7">=<pos:position pos:line="21" pos:column="8"/></operator> <call><name pos:line="21" pos:column="9">htons<pos:position pos:line="21" pos:column="14"/></name><argument_list pos:line="21" pos:column="14">(<argument><expr><name><name pos:line="21" pos:column="15">tn<pos:position pos:line="21" pos:column="17"/></name><operator pos:line="21" pos:column="17">-&gt;<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="19">subopt_wsy<pos:position pos:line="21" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">uc1<pos:position pos:line="22" pos:column="8"/></name> <operator pos:line="22" pos:column="9">=<pos:position pos:line="22" pos:column="10"/></operator> <operator pos:line="22" pos:column="11">(<pos:position pos:line="22" pos:column="12"/></operator><name pos:line="22" pos:column="12">unsigned<pos:position pos:line="22" pos:column="20"/></name> <name pos:line="22" pos:column="21">char<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">*<pos:position pos:line="22" pos:column="27"/></operator><operator pos:line="22" pos:column="27">)<pos:position pos:line="22" pos:column="28"/></operator><operator pos:line="22" pos:column="28">&amp;<pos:position pos:line="22" pos:column="33"/></operator><name pos:line="22" pos:column="29">x<pos:position pos:line="22" pos:column="30"/></name></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="23" pos:column="5">uc2<pos:position pos:line="23" pos:column="8"/></name> <operator pos:line="23" pos:column="9">=<pos:position pos:line="23" pos:column="10"/></operator> <operator pos:line="23" pos:column="11">(<pos:position pos:line="23" pos:column="12"/></operator><name pos:line="23" pos:column="12">unsigned<pos:position pos:line="23" pos:column="20"/></name> <name pos:line="23" pos:column="21">char<pos:position pos:line="23" pos:column="25"/></name> <operator pos:line="23" pos:column="26">*<pos:position pos:line="23" pos:column="27"/></operator><operator pos:line="23" pos:column="27">)<pos:position pos:line="23" pos:column="28"/></operator><operator pos:line="23" pos:column="28">&amp;<pos:position pos:line="23" pos:column="33"/></operator><name pos:line="23" pos:column="29">y<pos:position pos:line="23" pos:column="30"/></name></expr>;<pos:position pos:line="23" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">CURL_SB_ACCUM<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">tn<pos:position pos:line="24" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="23">uc1<pos:position pos:line="24" pos:column="26"/></name><index pos:line="24" pos:column="26">[<expr><literal type="number" pos:line="24" pos:column="27">0<pos:position pos:line="24" pos:column="28"/></literal></expr>]<pos:position pos:line="24" pos:column="29"/></index></name></expr></argument>)<pos:position pos:line="24" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">CURL_SB_ACCUM<pos:position pos:line="25" pos:column="18"/></name><argument_list pos:line="25" pos:column="18">(<argument><expr><name pos:line="25" pos:column="19">tn<pos:position pos:line="25" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="23">uc1<pos:position pos:line="25" pos:column="26"/></name><index pos:line="25" pos:column="26">[<expr><literal type="number" pos:line="25" pos:column="27">1<pos:position pos:line="25" pos:column="28"/></literal></expr>]<pos:position pos:line="25" pos:column="29"/></index></name></expr></argument>)<pos:position pos:line="25" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">CURL_SB_ACCUM<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">(<argument><expr><name pos:line="26" pos:column="19">tn<pos:position pos:line="26" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="23">uc2<pos:position pos:line="26" pos:column="26"/></name><index pos:line="26" pos:column="26">[<expr><literal type="number" pos:line="26" pos:column="27">0<pos:position pos:line="26" pos:column="28"/></literal></expr>]<pos:position pos:line="26" pos:column="29"/></index></name></expr></argument>)<pos:position pos:line="26" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">CURL_SB_ACCUM<pos:position pos:line="27" pos:column="18"/></name><argument_list pos:line="27" pos:column="18">(<argument><expr><name pos:line="27" pos:column="19">tn<pos:position pos:line="27" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="23">uc2<pos:position pos:line="27" pos:column="26"/></name><index pos:line="27" pos:column="26">[<expr><literal type="number" pos:line="27" pos:column="27">1<pos:position pos:line="27" pos:column="28"/></literal></expr>]<pos:position pos:line="27" pos:column="29"/></index></name></expr></argument>)<pos:position pos:line="27" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">CURL_SB_ACCUM<pos:position pos:line="29" pos:column="18"/></name><argument_list pos:line="29" pos:column="18">(<argument><expr><name pos:line="29" pos:column="19">tn<pos:position pos:line="29" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="23">CURL_IAC<pos:position pos:line="29" pos:column="31"/></name></expr></argument>)<pos:position pos:line="29" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">CURL_SB_ACCUM<pos:position pos:line="30" pos:column="18"/></name><argument_list pos:line="30" pos:column="18">(<argument><expr><name pos:line="30" pos:column="19">tn<pos:position pos:line="30" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="23">CURL_SE<pos:position pos:line="30" pos:column="30"/></name></expr></argument>)<pos:position pos:line="30" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">CURL_SB_TERM<pos:position pos:line="31" pos:column="17"/></name><argument_list pos:line="31" pos:column="17">(<argument><expr><name pos:line="31" pos:column="18">tn<pos:position pos:line="31" pos:column="20"/></name></expr></argument>)<pos:position pos:line="31" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="22"/></expr_stmt>
    <comment type="block" pos:line="32" pos:column="5">/* data suboption is now ready */</comment>

    <expr_stmt><expr><call><name pos:line="34" pos:column="5">printsub<pos:position pos:line="34" pos:column="13"/></name><argument_list pos:line="34" pos:column="13">(<argument><expr><name pos:line="34" pos:column="14">data<pos:position pos:line="34" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="34" pos:column="20">'&gt;'<pos:position pos:line="34" pos:column="26"/></literal></expr></argument>, <argument><expr><operator pos:line="34" pos:column="25">(<pos:position pos:line="34" pos:column="26"/></operator><name pos:line="34" pos:column="26">unsigned<pos:position pos:line="34" pos:column="34"/></name> <name pos:line="34" pos:column="35">char<pos:position pos:line="34" pos:column="39"/></name> <operator pos:line="34" pos:column="40">*<pos:position pos:line="34" pos:column="41"/></operator><operator pos:line="34" pos:column="41">)<pos:position pos:line="34" pos:column="42"/></operator><name><name pos:line="34" pos:column="42">tn<pos:position pos:line="34" pos:column="44"/></name><operator pos:line="34" pos:column="44">-&gt;<pos:position pos:line="34" pos:column="49"/></operator><name pos:line="34" pos:column="46">subbuffer<pos:position pos:line="34" pos:column="55"/></name></name> <operator pos:line="34" pos:column="56">+<pos:position pos:line="34" pos:column="57"/></operator> <literal type="number" pos:line="34" pos:column="58">2<pos:position pos:line="34" pos:column="59"/></literal></expr></argument>,
             <argument><expr><call><name pos:line="35" pos:column="14">CURL_SB_LEN<pos:position pos:line="35" pos:column="25"/></name><argument_list pos:line="35" pos:column="25">(<argument><expr><name pos:line="35" pos:column="26">tn<pos:position pos:line="35" pos:column="28"/></name></expr></argument>)<pos:position pos:line="35" pos:column="29"/></argument_list></call><operator pos:line="35" pos:column="29">-<pos:position pos:line="35" pos:column="30"/></operator><literal type="number" pos:line="35" pos:column="30">2<pos:position pos:line="35" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="33"/></expr_stmt>

    <comment type="block" pos:line="37" pos:column="5">/* we send the header of the suboption... */</comment>
    <expr_stmt><expr><name pos:line="38" pos:column="5">bytes_written<pos:position pos:line="38" pos:column="18"/></name> <operator pos:line="38" pos:column="19">=<pos:position pos:line="38" pos:column="20"/></operator> <call><name pos:line="38" pos:column="21">swrite<pos:position pos:line="38" pos:column="27"/></name><argument_list pos:line="38" pos:column="27">(<argument><expr><name><name pos:line="38" pos:column="28">conn<pos:position pos:line="38" pos:column="32"/></name><operator pos:line="38" pos:column="32">-&gt;<pos:position pos:line="38" pos:column="37"/></operator><name pos:line="38" pos:column="34">sock<pos:position pos:line="38" pos:column="38"/></name><index pos:line="38" pos:column="38">[<expr><name pos:line="38" pos:column="39">FIRSTSOCKET<pos:position pos:line="38" pos:column="50"/></name></expr>]<pos:position pos:line="38" pos:column="51"/></index></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="53">tn<pos:position pos:line="38" pos:column="55"/></name><operator pos:line="38" pos:column="55">-&gt;<pos:position pos:line="38" pos:column="60"/></operator><name pos:line="38" pos:column="57">subbuffer<pos:position pos:line="38" pos:column="66"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="68">3<pos:position pos:line="38" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="71"/></expr_stmt>
    <if pos:line="39" pos:column="5">if<condition pos:line="39" pos:column="7">(<expr><name pos:line="39" pos:column="8">bytes_written<pos:position pos:line="39" pos:column="21"/></name> <operator pos:line="39" pos:column="22">&lt;<pos:position pos:line="39" pos:column="26"/></operator> <literal type="number" pos:line="39" pos:column="24">0<pos:position pos:line="39" pos:column="25"/></literal></expr>)<pos:position pos:line="39" pos:column="26"/></condition><then pos:line="39" pos:column="26"> <block pos:line="39" pos:column="27">{
      <expr_stmt><expr><name pos:line="40" pos:column="7">err<pos:position pos:line="40" pos:column="10"/></name> <operator pos:line="40" pos:column="11">=<pos:position pos:line="40" pos:column="12"/></operator> <name pos:line="40" pos:column="13">SOCKERRNO<pos:position pos:line="40" pos:column="22"/></name></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="41" pos:column="7">failf<pos:position pos:line="41" pos:column="12"/></name><argument_list pos:line="41" pos:column="12">(<argument><expr><name pos:line="41" pos:column="13">data<pos:position pos:line="41" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="19">"Sending data failed (%d)"<pos:position pos:line="41" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="47">err<pos:position pos:line="41" pos:column="50"/></name></expr></argument>)<pos:position pos:line="41" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="43" pos:column="5">/* ... then the window size with the send_telnet_data() function
       to deal with 0xFF cases ... */</comment>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">send_telnet_data<pos:position pos:line="45" pos:column="21"/></name><argument_list pos:line="45" pos:column="21">(<argument><expr><name pos:line="45" pos:column="22">conn<pos:position pos:line="45" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="28">(<pos:position pos:line="45" pos:column="29"/></operator><name pos:line="45" pos:column="29">char<pos:position pos:line="45" pos:column="33"/></name> <operator pos:line="45" pos:column="34">*<pos:position pos:line="45" pos:column="35"/></operator><operator pos:line="45" pos:column="35">)<pos:position pos:line="45" pos:column="36"/></operator><name><name pos:line="45" pos:column="36">tn<pos:position pos:line="45" pos:column="38"/></name><operator pos:line="45" pos:column="38">-&gt;<pos:position pos:line="45" pos:column="43"/></operator><name pos:line="45" pos:column="40">subbuffer<pos:position pos:line="45" pos:column="49"/></name></name> <operator pos:line="45" pos:column="50">+<pos:position pos:line="45" pos:column="51"/></operator> <literal type="number" pos:line="45" pos:column="52">3<pos:position pos:line="45" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="55">4<pos:position pos:line="45" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="58"/></expr_stmt>
    <comment type="block" pos:line="46" pos:column="5">/* ... and the footer */</comment>
    <expr_stmt><expr><name pos:line="47" pos:column="5">bytes_written<pos:position pos:line="47" pos:column="18"/></name> <operator pos:line="47" pos:column="19">=<pos:position pos:line="47" pos:column="20"/></operator> <call><name pos:line="47" pos:column="21">swrite<pos:position pos:line="47" pos:column="27"/></name><argument_list pos:line="47" pos:column="27">(<argument><expr><name><name pos:line="47" pos:column="28">conn<pos:position pos:line="47" pos:column="32"/></name><operator pos:line="47" pos:column="32">-&gt;<pos:position pos:line="47" pos:column="37"/></operator><name pos:line="47" pos:column="34">sock<pos:position pos:line="47" pos:column="38"/></name><index pos:line="47" pos:column="38">[<expr><name pos:line="47" pos:column="39">FIRSTSOCKET<pos:position pos:line="47" pos:column="50"/></name></expr>]<pos:position pos:line="47" pos:column="51"/></index></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="53">tn<pos:position pos:line="47" pos:column="55"/></name><operator pos:line="47" pos:column="55">-&gt;<pos:position pos:line="47" pos:column="60"/></operator><name pos:line="47" pos:column="57">subbuffer<pos:position pos:line="47" pos:column="66"/></name></name> <operator pos:line="47" pos:column="67">+<pos:position pos:line="47" pos:column="68"/></operator> <literal type="number" pos:line="47" pos:column="69">7<pos:position pos:line="47" pos:column="70"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="72">2<pos:position pos:line="47" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="75"/></expr_stmt>
    <if pos:line="48" pos:column="5">if<condition pos:line="48" pos:column="7">(<expr><name pos:line="48" pos:column="8">bytes_written<pos:position pos:line="48" pos:column="21"/></name> <operator pos:line="48" pos:column="22">&lt;<pos:position pos:line="48" pos:column="26"/></operator> <literal type="number" pos:line="48" pos:column="24">0<pos:position pos:line="48" pos:column="25"/></literal></expr>)<pos:position pos:line="48" pos:column="26"/></condition><then pos:line="48" pos:column="26"> <block pos:line="48" pos:column="27">{
      <expr_stmt><expr><name pos:line="49" pos:column="7">err<pos:position pos:line="49" pos:column="10"/></name> <operator pos:line="49" pos:column="11">=<pos:position pos:line="49" pos:column="12"/></operator> <name pos:line="49" pos:column="13">SOCKERRNO<pos:position pos:line="49" pos:column="22"/></name></expr>;<pos:position pos:line="49" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="50" pos:column="7">failf<pos:position pos:line="50" pos:column="12"/></name><argument_list pos:line="50" pos:column="12">(<argument><expr><name pos:line="50" pos:column="13">data<pos:position pos:line="50" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="19">"Sending data failed (%d)"<pos:position pos:line="50" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="47">err<pos:position pos:line="50" pos:column="50"/></name></expr></argument>)<pos:position pos:line="50" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>
    <break pos:line="52" pos:column="5">break;<pos:position pos:line="52" pos:column="11"/></break>
  }<pos:position pos:line="53" pos:column="4"/></block></switch>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
