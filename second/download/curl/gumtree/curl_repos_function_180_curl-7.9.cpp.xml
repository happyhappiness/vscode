<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_180_curl-7.9.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">hostent<pos:position pos:line="1" pos:column="15"/></name></name> <modifier pos:line="1" pos:column="16">*<pos:position pos:line="1" pos:column="17"/></modifier></type><name pos:line="1" pos:column="17">Curl_gethost<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">SessionHandle<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">data<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">hostname<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="3" pos:column="30">char<pos:position pos:line="3" pos:column="34"/></name> <modifier pos:line="3" pos:column="35">*<pos:position pos:line="3" pos:column="36"/></modifier><modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier></type><name pos:line="3" pos:column="37">bufp<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="42"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">hostent<pos:position pos:line="5" pos:column="17"/></name></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier></type><name pos:line="5" pos:column="19">h<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><name pos:line="5" pos:column="23">NULL<pos:position pos:line="5" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">unsigned<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">long<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">in<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">ret<pos:position pos:line="7" pos:column="10"/></name></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt> <comment type="block" pos:line="7" pos:column="12">/* this variable is unused on several platforms but used on some */</comment>

<cpp:define pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">define<pos:position pos:line="9" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="9" pos:column="9">CURL_NAMELOOKUP_SIZE<pos:position pos:line="9" pos:column="29"/></name></cpp:macro> <cpp:value pos:line="9" pos:column="30">9000<pos:position pos:line="9" pos:column="34"/></cpp:value></cpp:define>
  <comment type="block" pos:line="10" pos:column="3">/* Allocate enough memory to hold the full name information structs and
   * everything. OSF1 is known to require at least 8872 bytes. The buffer
   * required for storing all possible aliases and IP numbers is according to
   * Stevens' Unix Network Programming 2nd editor, p. 304: 8192 bytes! */</comment>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">char<pos:position pos:line="14" pos:column="7"/></name> <modifier pos:line="14" pos:column="8">*<pos:position pos:line="14" pos:column="9"/></modifier></type><name pos:line="14" pos:column="9">buf<pos:position pos:line="14" pos:column="12"/></name> <init pos:line="14" pos:column="13">= <expr><operator pos:line="14" pos:column="15">(<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="16">char<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">*<pos:position pos:line="14" pos:column="22"/></operator><operator pos:line="14" pos:column="22">)<pos:position pos:line="14" pos:column="23"/></operator><call><name pos:line="14" pos:column="23">malloc<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">CURL_NAMELOOKUP_SIZE<pos:position pos:line="14" pos:column="50"/></name></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="52"/></decl_stmt>
  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><operator pos:line="15" pos:column="6">!<pos:position pos:line="15" pos:column="7"/></operator><name pos:line="15" pos:column="7">buf<pos:position pos:line="15" pos:column="10"/></name></expr>)<pos:position pos:line="15" pos:column="11"/></condition><then pos:line="15" pos:column="11">
    <block type="pseudo"><return pos:line="16" pos:column="5">return <expr><name pos:line="16" pos:column="12">NULL<pos:position pos:line="16" pos:column="16"/></name></expr>;<pos:position pos:line="16" pos:column="17"/></return></block></then></if> <comment type="block" pos:line="16" pos:column="18">/* major failure */</comment>
  <expr_stmt><expr><operator pos:line="17" pos:column="3">*<pos:position pos:line="17" pos:column="4"/></operator><name pos:line="17" pos:column="4">bufp<pos:position pos:line="17" pos:column="8"/></name> <operator pos:line="17" pos:column="9">=<pos:position pos:line="17" pos:column="10"/></operator> <name pos:line="17" pos:column="11">buf<pos:position pos:line="17" pos:column="14"/></name></expr>;<pos:position pos:line="17" pos:column="15"/></expr_stmt>

  <expr_stmt><expr><name pos:line="19" pos:column="3">ret<pos:position pos:line="19" pos:column="6"/></name> <operator pos:line="19" pos:column="7">=<pos:position pos:line="19" pos:column="8"/></operator> <literal type="number" pos:line="19" pos:column="9">0<pos:position pos:line="19" pos:column="10"/></literal></expr>;<pos:position pos:line="19" pos:column="11"/></expr_stmt> <comment type="block" pos:line="19" pos:column="12">/* to prevent the compiler warning */</comment>

  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">( <expr><operator pos:line="21" pos:column="8">(<pos:position pos:line="21" pos:column="9"/></operator><name pos:line="21" pos:column="9">in<pos:position pos:line="21" pos:column="11"/></name><operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator><call><name pos:line="21" pos:column="12">inet_addr<pos:position pos:line="21" pos:column="21"/></name><argument_list pos:line="21" pos:column="21">(<argument><expr><name pos:line="21" pos:column="22">hostname<pos:position pos:line="21" pos:column="30"/></name></expr></argument>)<pos:position pos:line="21" pos:column="31"/></argument_list></call><operator pos:line="21" pos:column="31">)<pos:position pos:line="21" pos:column="32"/></operator> <operator pos:line="21" pos:column="33">!=<pos:position pos:line="21" pos:column="35"/></operator> <name pos:line="21" pos:column="36">INADDR_NONE<pos:position pos:line="21" pos:column="47"/></name></expr> )<pos:position pos:line="21" pos:column="49"/></condition><then pos:line="21" pos:column="49"> <block pos:line="21" pos:column="50">{
    <decl_stmt><decl><type><name><name pos:line="22" pos:column="5">struct<pos:position pos:line="22" pos:column="11"/></name> <name pos:line="22" pos:column="12">in_addr<pos:position pos:line="22" pos:column="19"/></name></name> <modifier pos:line="22" pos:column="20">*<pos:position pos:line="22" pos:column="21"/></modifier></type><name pos:line="22" pos:column="21">addrentry<pos:position pos:line="22" pos:column="30"/></name></decl>;<pos:position pos:line="22" pos:column="31"/></decl_stmt>

    <expr_stmt><expr><name pos:line="24" pos:column="5">h<pos:position pos:line="24" pos:column="6"/></name> <operator pos:line="24" pos:column="7">=<pos:position pos:line="24" pos:column="8"/></operator> <operator pos:line="24" pos:column="9">(<pos:position pos:line="24" pos:column="10"/></operator>struct <name pos:line="24" pos:column="17">hostent<pos:position pos:line="24" pos:column="24"/></name><operator pos:line="24" pos:column="24">*<pos:position pos:line="24" pos:column="25"/></operator><operator pos:line="24" pos:column="25">)<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="26">buf<pos:position pos:line="24" pos:column="29"/></name></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">h<pos:position pos:line="25" pos:column="6"/></name><operator pos:line="25" pos:column="6">-&gt;<pos:position pos:line="25" pos:column="11"/></operator><name pos:line="25" pos:column="8">h_addr_list<pos:position pos:line="25" pos:column="19"/></name></name> <operator pos:line="25" pos:column="20">=<pos:position pos:line="25" pos:column="21"/></operator> <operator pos:line="25" pos:column="22">(<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="23">char<pos:position pos:line="25" pos:column="27"/></name><operator pos:line="25" pos:column="27">*<pos:position pos:line="25" pos:column="28"/></operator><operator pos:line="25" pos:column="28">*<pos:position pos:line="25" pos:column="29"/></operator><operator pos:line="25" pos:column="29">)<pos:position pos:line="25" pos:column="30"/></operator><operator pos:line="25" pos:column="30">(<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="31">buf<pos:position pos:line="25" pos:column="34"/></name> <operator pos:line="25" pos:column="35">+<pos:position pos:line="25" pos:column="36"/></operator> <sizeof pos:line="25" pos:column="37">sizeof<argument_list pos:line="25" pos:column="43">(<argument><expr><operator pos:line="25" pos:column="44">*<pos:position pos:line="25" pos:column="45"/></operator><name pos:line="25" pos:column="45">h<pos:position pos:line="25" pos:column="46"/></name></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></sizeof><operator pos:line="25" pos:column="47">)<pos:position pos:line="25" pos:column="48"/></operator></expr>;<pos:position pos:line="25" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="26" pos:column="5">addrentry<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <operator pos:line="26" pos:column="17">(<pos:position pos:line="26" pos:column="18"/></operator>struct <name pos:line="26" pos:column="25">in_addr<pos:position pos:line="26" pos:column="32"/></name><operator pos:line="26" pos:column="32">*<pos:position pos:line="26" pos:column="33"/></operator><operator pos:line="26" pos:column="33">)<pos:position pos:line="26" pos:column="34"/></operator><operator pos:line="26" pos:column="34">(<pos:position pos:line="26" pos:column="35"/></operator><name><name pos:line="26" pos:column="35">h<pos:position pos:line="26" pos:column="36"/></name><operator pos:line="26" pos:column="36">-&gt;<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="38">h_addr_list<pos:position pos:line="26" pos:column="49"/></name></name> <operator pos:line="26" pos:column="50">+<pos:position pos:line="26" pos:column="51"/></operator> <literal type="number" pos:line="26" pos:column="52">2<pos:position pos:line="26" pos:column="53"/></literal><operator pos:line="26" pos:column="53">)<pos:position pos:line="26" pos:column="54"/></operator></expr>;<pos:position pos:line="26" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">addrentry<pos:position pos:line="27" pos:column="14"/></name><operator pos:line="27" pos:column="14">-&gt;<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="16">s_addr<pos:position pos:line="27" pos:column="22"/></name></name> <operator pos:line="27" pos:column="23">=<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">in<pos:position pos:line="27" pos:column="27"/></name></expr>;<pos:position pos:line="27" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="28" pos:column="5">h<pos:position pos:line="28" pos:column="6"/></name><operator pos:line="28" pos:column="6">-&gt;<pos:position pos:line="28" pos:column="11"/></operator><name pos:line="28" pos:column="8">h_addr_list<pos:position pos:line="28" pos:column="19"/></name><index pos:line="28" pos:column="19">[<expr><literal type="number" pos:line="28" pos:column="20">0<pos:position pos:line="28" pos:column="21"/></literal></expr>]<pos:position pos:line="28" pos:column="22"/></index></name> <operator pos:line="28" pos:column="23">=<pos:position pos:line="28" pos:column="24"/></operator> <operator pos:line="28" pos:column="25">(<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="26">char<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">*<pos:position pos:line="28" pos:column="31"/></operator><operator pos:line="28" pos:column="31">)<pos:position pos:line="28" pos:column="32"/></operator><name pos:line="28" pos:column="32">addrentry<pos:position pos:line="28" pos:column="41"/></name></expr>;<pos:position pos:line="28" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="29" pos:column="5">h<pos:position pos:line="29" pos:column="6"/></name><operator pos:line="29" pos:column="6">-&gt;<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="8">h_addr_list<pos:position pos:line="29" pos:column="19"/></name><index pos:line="29" pos:column="19">[<expr><literal type="number" pos:line="29" pos:column="20">1<pos:position pos:line="29" pos:column="21"/></literal></expr>]<pos:position pos:line="29" pos:column="22"/></index></name> <operator pos:line="29" pos:column="23">=<pos:position pos:line="29" pos:column="24"/></operator> <name pos:line="29" pos:column="25">NULL<pos:position pos:line="29" pos:column="29"/></name></expr>;<pos:position pos:line="29" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="30" pos:column="5">h<pos:position pos:line="30" pos:column="6"/></name><operator pos:line="30" pos:column="6">-&gt;<pos:position pos:line="30" pos:column="11"/></operator><name pos:line="30" pos:column="8">h_addrtype<pos:position pos:line="30" pos:column="18"/></name></name> <operator pos:line="30" pos:column="19">=<pos:position pos:line="30" pos:column="20"/></operator> <name pos:line="30" pos:column="21">AF_INET<pos:position pos:line="30" pos:column="28"/></name></expr>;<pos:position pos:line="30" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">h<pos:position pos:line="31" pos:column="6"/></name><operator pos:line="31" pos:column="6">-&gt;<pos:position pos:line="31" pos:column="11"/></operator><name pos:line="31" pos:column="8">h_length<pos:position pos:line="31" pos:column="16"/></name></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <sizeof pos:line="31" pos:column="19">sizeof<argument_list pos:line="31" pos:column="25">(<argument><expr><operator pos:line="31" pos:column="26">*<pos:position pos:line="31" pos:column="27"/></operator><name pos:line="31" pos:column="27">addrentry<pos:position pos:line="31" pos:column="36"/></name></expr></argument>)<pos:position pos:line="31" pos:column="37"/></argument_list></sizeof></expr>;<pos:position pos:line="31" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">h<pos:position pos:line="32" pos:column="6"/></name><operator pos:line="32" pos:column="6">-&gt;<pos:position pos:line="32" pos:column="11"/></operator><name pos:line="32" pos:column="8">h_name<pos:position pos:line="32" pos:column="14"/></name></name> <operator pos:line="32" pos:column="15">=<pos:position pos:line="32" pos:column="16"/></operator> <operator pos:line="32" pos:column="17">*<pos:position pos:line="32" pos:column="18"/></operator><operator pos:line="32" pos:column="18">(<pos:position pos:line="32" pos:column="19"/></operator><name><name pos:line="32" pos:column="19">h<pos:position pos:line="32" pos:column="20"/></name><operator pos:line="32" pos:column="20">-&gt;<pos:position pos:line="32" pos:column="25"/></operator><name pos:line="32" pos:column="22">h_addr_list<pos:position pos:line="32" pos:column="33"/></name></name><operator pos:line="32" pos:column="33">)<pos:position pos:line="32" pos:column="34"/></operator> <operator pos:line="32" pos:column="35">+<pos:position pos:line="32" pos:column="36"/></operator> <name><name pos:line="32" pos:column="37">h<pos:position pos:line="32" pos:column="38"/></name><operator pos:line="32" pos:column="38">-&gt;<pos:position pos:line="32" pos:column="43"/></operator><name pos:line="32" pos:column="40">h_length<pos:position pos:line="32" pos:column="48"/></name></name></expr>;<pos:position pos:line="32" pos:column="49"/></expr_stmt>
    <comment type="block" pos:line="33" pos:column="5">/* bad one h-&gt;h_name = (char*)(h-&gt;h_addr_list + h-&gt;h_length); */</comment>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">MakeIP<pos:position pos:line="34" pos:column="11"/></name><argument_list pos:line="34" pos:column="11">(<argument><expr><call><name pos:line="34" pos:column="12">ntohl<pos:position pos:line="34" pos:column="17"/></name><argument_list pos:line="34" pos:column="17">(<argument><expr><name pos:line="34" pos:column="18">in<pos:position pos:line="34" pos:column="20"/></name></expr></argument>)<pos:position pos:line="34" pos:column="21"/></argument_list></call></expr></argument>,<argument><expr><name><name pos:line="34" pos:column="22">h<pos:position pos:line="34" pos:column="23"/></name><operator pos:line="34" pos:column="23">-&gt;<pos:position pos:line="34" pos:column="28"/></operator><name pos:line="34" pos:column="25">h_name<pos:position pos:line="34" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="33">CURL_NAMELOOKUP_SIZE<pos:position pos:line="34" pos:column="53"/></name> <operator pos:line="34" pos:column="54">-<pos:position pos:line="34" pos:column="55"/></operator> <call pos:line="34" pos:column="56">(<name pos:line="34" pos:column="57">long<pos:position pos:line="34" pos:column="61"/></name>)<argument_list pos:line="34" pos:column="62">(<argument><expr><name><name pos:line="34" pos:column="63">h<pos:position pos:line="34" pos:column="64"/></name><operator pos:line="34" pos:column="64">-&gt;<pos:position pos:line="34" pos:column="69"/></operator><name pos:line="34" pos:column="66">h_name<pos:position pos:line="34" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="73"/></argument_list></call> <operator pos:line="34" pos:column="74">+<pos:position pos:line="34" pos:column="75"/></operator> <operator pos:line="34" pos:column="76">(<pos:position pos:line="34" pos:column="77"/></operator><name pos:line="34" pos:column="77">long<pos:position pos:line="34" pos:column="81"/></name><operator pos:line="34" pos:column="81">)<pos:position pos:line="34" pos:column="82"/></operator><name pos:line="34" pos:column="82">buf<pos:position pos:line="34" pos:column="85"/></name></expr></argument>)<pos:position pos:line="34" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="87"/></expr_stmt>
  }<pos:position pos:line="35" pos:column="4"/></block></then>
<cpp:if pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">if<pos:position pos:line="36" pos:column="4"/></cpp:directive> <expr><call><name pos:line="36" pos:column="5">defined<pos:position pos:line="36" pos:column="12"/></name><argument_list pos:line="36" pos:column="12">(<argument><expr><name pos:line="36" pos:column="13">HAVE_GETHOSTBYNAME_R<pos:position pos:line="36" pos:column="33"/></name></expr></argument>)<pos:position pos:line="36" pos:column="34"/></argument_list></call></expr></cpp:if>
  <else pos:line="37" pos:column="3">else <block pos:line="37" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="38" pos:column="5">int<pos:position pos:line="38" pos:column="8"/></name></type> <name pos:line="38" pos:column="9">h_errnop<pos:position pos:line="38" pos:column="17"/></name></decl>;<pos:position pos:line="38" pos:column="18"/></decl_stmt>
     <comment type="block" pos:line="39" pos:column="6">/* Workaround for gethostbyname_r bug in qnx nto. It is also _required_
        for some of these functions. */</comment>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">memset<pos:position pos:line="41" pos:column="11"/></name><argument_list pos:line="41" pos:column="11">(<argument><expr><name pos:line="41" pos:column="12">buf<pos:position pos:line="41" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="17">0<pos:position pos:line="41" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="20">CURL_NAMELOOKUP_SIZE<pos:position pos:line="41" pos:column="40"/></name></expr></argument>)<pos:position pos:line="41" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="42"/></expr_stmt>
<cpp:ifdef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">ifdef<pos:position pos:line="42" pos:column="7"/></cpp:directive> <name pos:line="42" pos:column="8">HAVE_GETHOSTBYNAME_R_5<pos:position pos:line="42" pos:column="30"/></name></cpp:ifdef>
    <comment type="block" pos:line="43" pos:column="5">/* Solaris, IRIX and more */</comment>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><operator pos:line="44" pos:column="9">(<pos:position pos:line="44" pos:column="10"/></operator><name pos:line="44" pos:column="10">h<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">=<pos:position pos:line="44" pos:column="13"/></operator> <call><name pos:line="44" pos:column="14">gethostbyname_r<pos:position pos:line="44" pos:column="29"/></name><argument_list pos:line="44" pos:column="29">(<argument><expr><name pos:line="44" pos:column="30">hostname<pos:position pos:line="44" pos:column="38"/></name></expr></argument>,
                             <argument><expr><operator pos:line="45" pos:column="30">(<pos:position pos:line="45" pos:column="31"/></operator>struct <name pos:line="45" pos:column="38">hostent<pos:position pos:line="45" pos:column="45"/></name> <operator pos:line="45" pos:column="46">*<pos:position pos:line="45" pos:column="47"/></operator><operator pos:line="45" pos:column="47">)<pos:position pos:line="45" pos:column="48"/></operator><name pos:line="45" pos:column="48">buf<pos:position pos:line="45" pos:column="51"/></name></expr></argument>,
                             <argument><expr><name pos:line="46" pos:column="30">buf<pos:position pos:line="46" pos:column="33"/></name> <operator pos:line="46" pos:column="34">+<pos:position pos:line="46" pos:column="35"/></operator> <sizeof pos:line="46" pos:column="36">sizeof<argument_list pos:line="46" pos:column="42">(<argument><expr pos:line="46" pos:column="43">struct <name pos:line="46" pos:column="50">hostent<pos:position pos:line="46" pos:column="57"/></name></expr></argument>)<pos:position pos:line="46" pos:column="58"/></argument_list></sizeof></expr></argument>,
                             <argument><expr><name pos:line="47" pos:column="30">CURL_NAMELOOKUP_SIZE<pos:position pos:line="47" pos:column="50"/></name> <operator pos:line="47" pos:column="51">-<pos:position pos:line="47" pos:column="52"/></operator> <sizeof pos:line="47" pos:column="53">sizeof<argument_list pos:line="47" pos:column="59">(<argument><expr pos:line="47" pos:column="60">struct <name pos:line="47" pos:column="67">hostent<pos:position pos:line="47" pos:column="74"/></name></expr></argument>)<pos:position pos:line="47" pos:column="75"/></argument_list></sizeof></expr></argument>,
                             <argument><expr><operator pos:line="48" pos:column="30">&amp;<pos:position pos:line="48" pos:column="35"/></operator><name pos:line="48" pos:column="31">h_errnop<pos:position pos:line="48" pos:column="39"/></name></expr></argument>)<pos:position pos:line="48" pos:column="40"/></argument_list></call><operator pos:line="48" pos:column="40">)<pos:position pos:line="48" pos:column="41"/></operator> <operator pos:line="48" pos:column="42">==<pos:position pos:line="48" pos:column="44"/></operator> <name pos:line="48" pos:column="45">NULL<pos:position pos:line="48" pos:column="49"/></name></expr> )<pos:position pos:line="48" pos:column="51"/></condition><then pos:line="48" pos:column="51">
<cpp:endif pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">endif<pos:position pos:line="49" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">ifdef<pos:position pos:line="50" pos:column="7"/></cpp:directive> <name pos:line="50" pos:column="8">HAVE_GETHOSTBYNAME_R_6<pos:position pos:line="50" pos:column="30"/></name></cpp:ifdef>
    <comment type="block" pos:line="51" pos:column="5">/* Linux */</comment>
    <block type="pseudo"><if pos:line="52" pos:column="5">if<condition pos:line="52" pos:column="7">( <expr><call><name pos:line="52" pos:column="9">gethostbyname_r<pos:position pos:line="52" pos:column="24"/></name><argument_list pos:line="52" pos:column="24">(<argument><expr><name pos:line="52" pos:column="25">hostname<pos:position pos:line="52" pos:column="33"/></name></expr></argument>,
                        <argument><expr><operator pos:line="53" pos:column="25">(<pos:position pos:line="53" pos:column="26"/></operator>struct <name pos:line="53" pos:column="33">hostent<pos:position pos:line="53" pos:column="40"/></name> <operator pos:line="53" pos:column="41">*<pos:position pos:line="53" pos:column="42"/></operator><operator pos:line="53" pos:column="42">)<pos:position pos:line="53" pos:column="43"/></operator><name pos:line="53" pos:column="43">buf<pos:position pos:line="53" pos:column="46"/></name></expr></argument>,
                        <argument><expr><name pos:line="54" pos:column="25">buf<pos:position pos:line="54" pos:column="28"/></name> <operator pos:line="54" pos:column="29">+<pos:position pos:line="54" pos:column="30"/></operator> <sizeof pos:line="54" pos:column="31">sizeof<argument_list pos:line="54" pos:column="37">(<argument><expr pos:line="54" pos:column="38">struct <name pos:line="54" pos:column="45">hostent<pos:position pos:line="54" pos:column="52"/></name></expr></argument>)<pos:position pos:line="54" pos:column="53"/></argument_list></sizeof></expr></argument>,
                        <argument><expr><name pos:line="55" pos:column="25">CURL_NAMELOOKUP_SIZE<pos:position pos:line="55" pos:column="45"/></name> <operator pos:line="55" pos:column="46">-<pos:position pos:line="55" pos:column="47"/></operator> <sizeof pos:line="55" pos:column="48">sizeof<argument_list pos:line="55" pos:column="54">(<argument><expr pos:line="55" pos:column="55">struct <name pos:line="55" pos:column="62">hostent<pos:position pos:line="55" pos:column="69"/></name></expr></argument>)<pos:position pos:line="55" pos:column="70"/></argument_list></sizeof></expr></argument>,
                        <argument><expr><operator pos:line="56" pos:column="25">&amp;<pos:position pos:line="56" pos:column="30"/></operator><name pos:line="56" pos:column="26">h<pos:position pos:line="56" pos:column="27"/></name></expr></argument>, <comment type="block" pos:line="56" pos:column="29">/* DIFFERENCE */</comment>
                        <argument><expr><operator pos:line="57" pos:column="25">&amp;<pos:position pos:line="57" pos:column="30"/></operator><name pos:line="57" pos:column="26">h_errnop<pos:position pos:line="57" pos:column="34"/></name></expr></argument>)<pos:position pos:line="57" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="36"/></condition><then pos:line="57" pos:column="36">
<cpp:endif pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">endif<pos:position pos:line="58" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">ifdef<pos:position pos:line="59" pos:column="7"/></cpp:directive> <name pos:line="59" pos:column="8">HAVE_GETHOSTBYNAME_R_3<pos:position pos:line="59" pos:column="30"/></name></cpp:ifdef>
    <comment type="block" pos:line="60" pos:column="5">/* AIX, Digital Unix, HPUX 10, more? */</comment>

    <block type="pseudo"><if pos:line="62" pos:column="5">if<condition pos:line="62" pos:column="7">(<expr><name pos:line="62" pos:column="8">CURL_NAMELOOKUP_SIZE<pos:position pos:line="62" pos:column="28"/></name> <operator pos:line="62" pos:column="29">&gt;=<pos:position pos:line="62" pos:column="34"/></operator>
       <operator pos:line="63" pos:column="8">(<pos:position pos:line="63" pos:column="9"/></operator><sizeof pos:line="63" pos:column="9">sizeof<argument_list pos:line="63" pos:column="15">(<argument><expr pos:line="63" pos:column="16">struct <name pos:line="63" pos:column="23">hostent<pos:position pos:line="63" pos:column="30"/></name></expr></argument>)<pos:position pos:line="63" pos:column="31"/></argument_list></sizeof><operator pos:line="63" pos:column="31">+<pos:position pos:line="63" pos:column="32"/></operator><sizeof pos:line="63" pos:column="32">sizeof<argument_list pos:line="63" pos:column="38">(<argument><expr pos:line="63" pos:column="39">struct <name pos:line="63" pos:column="46">hostent_data<pos:position pos:line="63" pos:column="58"/></name></expr></argument>)<pos:position pos:line="63" pos:column="59"/></argument_list></sizeof><operator pos:line="63" pos:column="59">)<pos:position pos:line="63" pos:column="60"/></operator></expr>)<pos:position pos:line="63" pos:column="61"/></condition><then pos:line="63" pos:column="61">

      <comment type="block" pos:line="65" pos:column="7">/* August 22nd, 2000: Albert Chin-A-Young brought an updated version
       * that should work! September 20: Richard Prescott worked on the buffer
       * size dilemma. */</comment>

      <block type="pseudo"><expr_stmt><expr><name pos:line="69" pos:column="7">ret<pos:position pos:line="69" pos:column="10"/></name> <operator pos:line="69" pos:column="11">=<pos:position pos:line="69" pos:column="12"/></operator> <call><name pos:line="69" pos:column="13">gethostbyname_r<pos:position pos:line="69" pos:column="28"/></name><argument_list pos:line="69" pos:column="28">(<argument><expr><name pos:line="69" pos:column="29">hostname<pos:position pos:line="69" pos:column="37"/></name></expr></argument>,
                          <argument><expr><operator pos:line="70" pos:column="27">(<pos:position pos:line="70" pos:column="28"/></operator>struct <name pos:line="70" pos:column="35">hostent<pos:position pos:line="70" pos:column="42"/></name> <operator pos:line="70" pos:column="43">*<pos:position pos:line="70" pos:column="44"/></operator><operator pos:line="70" pos:column="44">)<pos:position pos:line="70" pos:column="45"/></operator><name pos:line="70" pos:column="45">buf<pos:position pos:line="70" pos:column="48"/></name></expr></argument>,
                          <argument><expr><operator pos:line="71" pos:column="27">(<pos:position pos:line="71" pos:column="28"/></operator>struct <name pos:line="71" pos:column="35">hostent_data<pos:position pos:line="71" pos:column="47"/></name> <operator pos:line="71" pos:column="48">*<pos:position pos:line="71" pos:column="49"/></operator><operator pos:line="71" pos:column="49">)<pos:position pos:line="71" pos:column="50"/></operator><operator pos:line="71" pos:column="50">(<pos:position pos:line="71" pos:column="51"/></operator><name pos:line="71" pos:column="51">buf<pos:position pos:line="71" pos:column="54"/></name> <operator pos:line="71" pos:column="55">+<pos:position pos:line="71" pos:column="56"/></operator> <sizeof pos:line="71" pos:column="57">sizeof<argument_list pos:line="71" pos:column="63">(<argument><expr pos:line="71" pos:column="64">struct <name pos:line="71" pos:column="71">hostent<pos:position pos:line="71" pos:column="78"/></name></expr></argument>)<pos:position pos:line="71" pos:column="79"/></argument_list></sizeof><operator pos:line="71" pos:column="79">)<pos:position pos:line="71" pos:column="80"/></operator></expr></argument>)<pos:position pos:line="71" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="82"/></expr_stmt></block></then>
    <else pos:line="72" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><name pos:line="73" pos:column="7">ret<pos:position pos:line="73" pos:column="10"/></name> <operator pos:line="73" pos:column="11">=<pos:position pos:line="73" pos:column="12"/></operator> <operator pos:line="73" pos:column="13">-<pos:position pos:line="73" pos:column="14"/></operator><literal type="number" pos:line="73" pos:column="14">1<pos:position pos:line="73" pos:column="15"/></literal></expr>;<pos:position pos:line="73" pos:column="16"/></expr_stmt></block></else></if></block></then></if></block></then></if> <comment type="block" pos:line="73" pos:column="17">/* failure, too smallish buffer size */</comment>
    
    <comment type="block" pos:line="75" pos:column="5">/* result expected in h */</comment>
    <expr_stmt><expr><name pos:line="76" pos:column="5">h<pos:position pos:line="76" pos:column="6"/></name> <operator pos:line="76" pos:column="7">=<pos:position pos:line="76" pos:column="8"/></operator> <operator pos:line="76" pos:column="9">(<pos:position pos:line="76" pos:column="10"/></operator>struct <name pos:line="76" pos:column="17">hostent<pos:position pos:line="76" pos:column="24"/></name><operator pos:line="76" pos:column="24">*<pos:position pos:line="76" pos:column="25"/></operator><operator pos:line="76" pos:column="25">)<pos:position pos:line="76" pos:column="26"/></operator><name pos:line="76" pos:column="26">buf<pos:position pos:line="76" pos:column="29"/></name></expr>;<pos:position pos:line="76" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name pos:line="77" pos:column="5">h_errnop<pos:position pos:line="77" pos:column="13"/></name><operator pos:line="77" pos:column="13">=<pos:position pos:line="77" pos:column="14"/></operator> <name pos:line="77" pos:column="15">errno<pos:position pos:line="77" pos:column="20"/></name></expr>;<pos:position pos:line="77" pos:column="21"/></expr_stmt> <comment type="block" pos:line="77" pos:column="22">/* we don't deal with this, but set it anyway */</comment>
    <if pos:line="78" pos:column="5">if<condition pos:line="78" pos:column="7">(<expr><name pos:line="78" pos:column="8">ret<pos:position pos:line="78" pos:column="11"/></name></expr>)<pos:position pos:line="78" pos:column="12"/></condition><then pos:line="78" pos:column="12">
<cpp:endif pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">endif<pos:position pos:line="79" pos:column="7"/></cpp:directive></cpp:endif>
      <block pos:line="80" pos:column="7">{
      <expr_stmt><expr><call><name pos:line="81" pos:column="7">infof<pos:position pos:line="81" pos:column="12"/></name><argument_list pos:line="81" pos:column="12">(<argument><expr><name pos:line="81" pos:column="13">data<pos:position pos:line="81" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="19">"gethostbyname_r(2) failed for %s\n"<pos:position pos:line="81" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="57">hostname<pos:position pos:line="81" pos:column="65"/></name></expr></argument>)<pos:position pos:line="81" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="67"/></expr_stmt>
      <expr_stmt><expr><name pos:line="82" pos:column="7">h<pos:position pos:line="82" pos:column="8"/></name> <operator pos:line="82" pos:column="9">=<pos:position pos:line="82" pos:column="10"/></operator> <name pos:line="82" pos:column="11">NULL<pos:position pos:line="82" pos:column="15"/></name></expr>;<pos:position pos:line="82" pos:column="16"/></expr_stmt> <comment type="block" pos:line="82" pos:column="17">/* set return code to NULL */</comment>
      <expr_stmt><expr><call><name pos:line="83" pos:column="7">free<pos:position pos:line="83" pos:column="11"/></name><argument_list pos:line="83" pos:column="11">(<argument><expr><name pos:line="83" pos:column="12">buf<pos:position pos:line="83" pos:column="15"/></name></expr></argument>)<pos:position pos:line="83" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="84" pos:column="7">*<pos:position pos:line="84" pos:column="8"/></operator><name pos:line="84" pos:column="8">bufp<pos:position pos:line="84" pos:column="12"/></name><operator pos:line="84" pos:column="12">=<pos:position pos:line="84" pos:column="13"/></operator><name pos:line="84" pos:column="13">NULL<pos:position pos:line="84" pos:column="17"/></name></expr>;<pos:position pos:line="84" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="85" pos:column="6"/></block></then>
<cpp:else pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">else<pos:position pos:line="86" pos:column="6"/></cpp:directive></cpp:else>
  <else pos:line="87" pos:column="3">else <block pos:line="87" pos:column="8">{
    <if pos:line="88" pos:column="5">if <condition pos:line="88" pos:column="8">(<expr><operator pos:line="88" pos:column="9">(<pos:position pos:line="88" pos:column="10"/></operator><name pos:line="88" pos:column="10">h<pos:position pos:line="88" pos:column="11"/></name> <operator pos:line="88" pos:column="12">=<pos:position pos:line="88" pos:column="13"/></operator> <call><name pos:line="88" pos:column="14">gethostbyname<pos:position pos:line="88" pos:column="27"/></name><argument_list pos:line="88" pos:column="27">(<argument><expr><name pos:line="88" pos:column="28">hostname<pos:position pos:line="88" pos:column="36"/></name></expr></argument>)<pos:position pos:line="88" pos:column="37"/></argument_list></call><operator pos:line="88" pos:column="37">)<pos:position pos:line="88" pos:column="38"/></operator> <operator pos:line="88" pos:column="39">==<pos:position pos:line="88" pos:column="41"/></operator> <name pos:line="88" pos:column="42">NULL<pos:position pos:line="88" pos:column="46"/></name></expr> )<pos:position pos:line="88" pos:column="48"/></condition><then pos:line="88" pos:column="48"> <block pos:line="88" pos:column="49">{
      <expr_stmt><expr><call><name pos:line="89" pos:column="7">infof<pos:position pos:line="89" pos:column="12"/></name><argument_list pos:line="89" pos:column="12">(<argument><expr><name pos:line="89" pos:column="13">data<pos:position pos:line="89" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="19">"gethostbyname(2) failed for %s\n"<pos:position pos:line="89" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="55">hostname<pos:position pos:line="89" pos:column="63"/></name></expr></argument>)<pos:position pos:line="89" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="65"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="90" pos:column="7">free<pos:position pos:line="90" pos:column="11"/></name><argument_list pos:line="90" pos:column="11">(<argument><expr><name pos:line="90" pos:column="12">buf<pos:position pos:line="90" pos:column="15"/></name></expr></argument>)<pos:position pos:line="90" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="17"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="91" pos:column="7">*<pos:position pos:line="91" pos:column="8"/></operator><name pos:line="91" pos:column="8">bufp<pos:position pos:line="91" pos:column="12"/></name><operator pos:line="91" pos:column="12">=<pos:position pos:line="91" pos:column="13"/></operator><name pos:line="91" pos:column="13">NULL<pos:position pos:line="91" pos:column="17"/></name></expr>;<pos:position pos:line="91" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="92" pos:column="6"/></block></then></if>
<cpp:endif pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">endif<pos:position pos:line="93" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="94" pos:column="4"/></block></else></if>
  <return pos:line="95" pos:column="3">return <expr><operator pos:line="95" pos:column="10">(<pos:position pos:line="95" pos:column="11"/></operator><name pos:line="95" pos:column="11">h<pos:position pos:line="95" pos:column="12"/></name><operator pos:line="95" pos:column="12">)<pos:position pos:line="95" pos:column="13"/></operator></expr>;<pos:position pos:line="95" pos:column="14"/></return>
}<pos:position pos:line="96" pos:column="2"/></block></else></if></block></function></unit>
