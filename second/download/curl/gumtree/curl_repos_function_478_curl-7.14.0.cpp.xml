<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_478_curl-7.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">Curl_strcasestr<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><specifier pos:line="1" pos:column="23">const<pos:position pos:line="1" pos:column="28"/></specifier> <name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">haystack<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="45">const<pos:position pos:line="1" pos:column="50"/></specifier> <name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">needle<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">nlen<pos:position pos:line="3" pos:column="14"/></name> <init pos:line="3" pos:column="15">= <expr><call><name pos:line="3" pos:column="17">strlen<pos:position pos:line="3" pos:column="23"/></name><argument_list pos:line="3" pos:column="23">(<argument><expr><name pos:line="3" pos:column="24">needle<pos:position pos:line="3" pos:column="30"/></name></expr></argument>)<pos:position pos:line="3" pos:column="31"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">size_t<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">hlen<pos:position pos:line="4" pos:column="14"/></name> <init pos:line="4" pos:column="15">= <expr><call><name pos:line="4" pos:column="17">strlen<pos:position pos:line="4" pos:column="23"/></name><argument_list pos:line="4" pos:column="23">(<argument><expr><name pos:line="4" pos:column="24">haystack<pos:position pos:line="4" pos:column="32"/></name></expr></argument>)<pos:position pos:line="4" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>

  <while pos:line="6" pos:column="3">while<condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">hlen<pos:position pos:line="6" pos:column="13"/></name><operator pos:line="6" pos:column="13">--<pos:position pos:line="6" pos:column="15"/></operator> <operator pos:line="6" pos:column="16">&gt;=<pos:position pos:line="6" pos:column="21"/></operator> <name pos:line="6" pos:column="19">nlen<pos:position pos:line="6" pos:column="23"/></name></expr>)<pos:position pos:line="6" pos:column="24"/></condition> <block pos:line="6" pos:column="25">{
    <if pos:line="7" pos:column="5">if<condition pos:line="7" pos:column="7">(<expr><call><name pos:line="7" pos:column="8">curl_strnequal<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><name pos:line="7" pos:column="23">haystack<pos:position pos:line="7" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="33">needle<pos:position pos:line="7" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="41">nlen<pos:position pos:line="7" pos:column="45"/></name></expr></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="47"/></condition><then pos:line="7" pos:column="47">
      <block type="pseudo"><return pos:line="8" pos:column="7">return <expr><operator pos:line="8" pos:column="14">(<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></operator><operator pos:line="8" pos:column="21">)<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">haystack<pos:position pos:line="8" pos:column="30"/></name></expr>;<pos:position pos:line="8" pos:column="31"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="9" pos:column="5">haystack<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">++<pos:position pos:line="9" pos:column="15"/></operator></expr>;<pos:position pos:line="9" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="10" pos:column="4"/></block></while>
  <return pos:line="11" pos:column="3">return <expr><name pos:line="11" pos:column="10">NULL<pos:position pos:line="11" pos:column="14"/></name></expr>;<pos:position pos:line="11" pos:column="15"/></return>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
