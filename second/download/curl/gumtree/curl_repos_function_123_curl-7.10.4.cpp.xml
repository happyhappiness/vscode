<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_123_curl-7.10.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLcode<pos:position pos:line="1" pos:column="9"/></name></type> <name pos:line="1" pos:column="10">Curl_perform<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name><name pos:line="1" pos:column="23">struct<pos:position pos:line="1" pos:column="29"/></name> <name pos:line="1" pos:column="30">SessionHandle<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">data<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURLcode<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">res<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">res2<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">connectdata<pos:position pos:line="5" pos:column="21"/></name></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">conn<pos:position pos:line="5" pos:column="27"/></name><init pos:line="5" pos:column="27">=<expr><name pos:line="5" pos:column="28">NULL<pos:position pos:line="5" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">newurl<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><name pos:line="6" pos:column="18">NULL<pos:position pos:line="6" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt> <comment type="block" pos:line="6" pos:column="24">/* possibly a new URL to follow to! */</comment>

  <expr_stmt><expr><name><name pos:line="8" pos:column="3">data<pos:position pos:line="8" pos:column="7"/></name><operator pos:line="8" pos:column="7">-&gt;<pos:position pos:line="8" pos:column="12"/></operator><name pos:line="8" pos:column="9">state<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">.<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="15">used_interface<pos:position pos:line="8" pos:column="29"/></name></name> <operator pos:line="8" pos:column="30">=<pos:position pos:line="8" pos:column="31"/></operator> <name pos:line="8" pos:column="32">Curl_if_easy<pos:position pos:line="8" pos:column="44"/></name></expr>;<pos:position pos:line="8" pos:column="45"/></expr_stmt>

  <expr_stmt><expr><name pos:line="10" pos:column="3">res<pos:position pos:line="10" pos:column="6"/></name> <operator pos:line="10" pos:column="7">=<pos:position pos:line="10" pos:column="8"/></operator> <call><name pos:line="10" pos:column="9">Curl_pretransfer<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><name pos:line="10" pos:column="26">data<pos:position pos:line="10" pos:column="30"/></name></expr></argument>)<pos:position pos:line="10" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="32"/></expr_stmt>
  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><name pos:line="11" pos:column="6">res<pos:position pos:line="11" pos:column="9"/></name></expr>)<pos:position pos:line="11" pos:column="10"/></condition><then pos:line="11" pos:column="10">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">res<pos:position pos:line="12" pos:column="15"/></name></expr>;<pos:position pos:line="12" pos:column="16"/></return></block></then></if>

  <comment type="block" pos:line="14" pos:column="3">/*
   * It is important that there is NO 'return' from this function at any other
   * place than falling down to the end of the function! This is because we
   * have cleanup stuff that must be done before we get back, and that is only
   * performed after this do-while loop.
   */</comment>

  <do pos:line="21" pos:column="3">do <block pos:line="21" pos:column="6">{
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">Curl_pgrsTime<pos:position pos:line="22" pos:column="18"/></name><argument_list pos:line="22" pos:column="18">(<argument><expr><name pos:line="22" pos:column="19">data<pos:position pos:line="22" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="25">TIMER_STARTSINGLE<pos:position pos:line="22" pos:column="42"/></name></expr></argument>)<pos:position pos:line="22" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="23" pos:column="5">res<pos:position pos:line="23" pos:column="8"/></name> <operator pos:line="23" pos:column="9">=<pos:position pos:line="23" pos:column="10"/></operator> <call><name pos:line="23" pos:column="11">Curl_connect<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><name pos:line="23" pos:column="24">data<pos:position pos:line="23" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="30">&amp;<pos:position pos:line="23" pos:column="35"/></operator><name pos:line="23" pos:column="31">conn<pos:position pos:line="23" pos:column="35"/></name></expr></argument>)<pos:position pos:line="23" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt>
    <if pos:line="24" pos:column="5">if<condition pos:line="24" pos:column="7">(<expr><name pos:line="24" pos:column="8">res<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">==<pos:position pos:line="24" pos:column="14"/></operator> <name pos:line="24" pos:column="15">CURLE_OK<pos:position pos:line="24" pos:column="23"/></name></expr>)<pos:position pos:line="24" pos:column="24"/></condition><then pos:line="24" pos:column="24"> <block pos:line="24" pos:column="25">{
      <expr_stmt><expr><name pos:line="25" pos:column="7">res<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <call><name pos:line="25" pos:column="13">Curl_do<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><operator pos:line="25" pos:column="21">&amp;<pos:position pos:line="25" pos:column="26"/></operator><name pos:line="25" pos:column="22">conn<pos:position pos:line="25" pos:column="26"/></name></expr></argument>)<pos:position pos:line="25" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>

      <if pos:line="27" pos:column="7">if<condition pos:line="27" pos:column="9">(<expr><name pos:line="27" pos:column="10">res<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">==<pos:position pos:line="27" pos:column="16"/></operator> <name pos:line="27" pos:column="17">CURLE_OK<pos:position pos:line="27" pos:column="25"/></name></expr>)<pos:position pos:line="27" pos:column="26"/></condition><then pos:line="27" pos:column="26"> <block pos:line="27" pos:column="27">{
        <decl_stmt><decl><type><name pos:line="28" pos:column="9">CURLcode<pos:position pos:line="28" pos:column="17"/></name></type> <name pos:line="28" pos:column="18">res2<pos:position pos:line="28" pos:column="22"/></name></decl>;<pos:position pos:line="28" pos:column="23"/></decl_stmt> <comment type="block" pos:line="28" pos:column="24">/* just a local extra result container */</comment>

        <if pos:line="30" pos:column="9">if<condition pos:line="30" pos:column="11">(<expr><name><name pos:line="30" pos:column="12">conn<pos:position pos:line="30" pos:column="16"/></name><operator pos:line="30" pos:column="16">-&gt;<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="18">protocol<pos:position pos:line="30" pos:column="26"/></name></name><operator pos:line="30" pos:column="26">&amp;<pos:position pos:line="30" pos:column="31"/></operator><name pos:line="30" pos:column="27">PROT_FTPS<pos:position pos:line="30" pos:column="36"/></name></expr>)<pos:position pos:line="30" pos:column="37"/></condition><then pos:line="30" pos:column="37">
          <comment type="block" pos:line="31" pos:column="11">/* FTPS, disable ssl while transfering data */</comment>
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="32" pos:column="11">conn<pos:position pos:line="32" pos:column="15"/></name><operator pos:line="32" pos:column="15">-&gt;<pos:position pos:line="32" pos:column="20"/></operator><name pos:line="32" pos:column="17">ssl<pos:position pos:line="32" pos:column="20"/></name><operator pos:line="32" pos:column="20">.<pos:position pos:line="32" pos:column="21"/></operator><name pos:line="32" pos:column="21">use<pos:position pos:line="32" pos:column="24"/></name></name> <operator pos:line="32" pos:column="25">=<pos:position pos:line="32" pos:column="26"/></operator> <name pos:line="32" pos:column="27">FALSE<pos:position pos:line="32" pos:column="32"/></name></expr>;<pos:position pos:line="32" pos:column="33"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="33" pos:column="9">res<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator> <call><name pos:line="33" pos:column="15">Transfer<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">(<argument><expr><name pos:line="33" pos:column="24">conn<pos:position pos:line="33" pos:column="28"/></name></expr></argument>)<pos:position pos:line="33" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="30"/></expr_stmt> <comment type="block" pos:line="33" pos:column="31">/* now fetch that URL please */</comment>
        <if pos:line="34" pos:column="9">if<condition pos:line="34" pos:column="11">(<expr><name><name pos:line="34" pos:column="12">conn<pos:position pos:line="34" pos:column="16"/></name><operator pos:line="34" pos:column="16">-&gt;<pos:position pos:line="34" pos:column="21"/></operator><name pos:line="34" pos:column="18">protocol<pos:position pos:line="34" pos:column="26"/></name></name><operator pos:line="34" pos:column="26">&amp;<pos:position pos:line="34" pos:column="31"/></operator><name pos:line="34" pos:column="27">PROT_FTPS<pos:position pos:line="34" pos:column="36"/></name></expr>)<pos:position pos:line="34" pos:column="37"/></condition><then pos:line="34" pos:column="37">
          <comment type="block" pos:line="35" pos:column="11">/* FTPS, enable ssl again after havving transferred data */</comment>
          <block type="pseudo"><expr_stmt><expr><name><name pos:line="36" pos:column="11">conn<pos:position pos:line="36" pos:column="15"/></name><operator pos:line="36" pos:column="15">-&gt;<pos:position pos:line="36" pos:column="20"/></operator><name pos:line="36" pos:column="17">ssl<pos:position pos:line="36" pos:column="20"/></name><operator pos:line="36" pos:column="20">.<pos:position pos:line="36" pos:column="21"/></operator><name pos:line="36" pos:column="21">use<pos:position pos:line="36" pos:column="24"/></name></name> <operator pos:line="36" pos:column="25">=<pos:position pos:line="36" pos:column="26"/></operator> <name pos:line="36" pos:column="27">TRUE<pos:position pos:line="36" pos:column="31"/></name></expr>;<pos:position pos:line="36" pos:column="32"/></expr_stmt></block></then></if>

        <if pos:line="38" pos:column="9">if<condition pos:line="38" pos:column="11">(<expr><name pos:line="38" pos:column="12">res<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">==<pos:position pos:line="38" pos:column="18"/></operator> <name pos:line="38" pos:column="19">CURLE_OK<pos:position pos:line="38" pos:column="27"/></name></expr>)<pos:position pos:line="38" pos:column="28"/></condition><then pos:line="38" pos:column="28">
          <comment type="block" pos:line="39" pos:column="11">/*
           * We must duplicate the new URL here as the connection data
           * may be free()ed in the Curl_done() function.
           */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="11">newurl<pos:position pos:line="43" pos:column="17"/></name> <operator pos:line="43" pos:column="18">=<pos:position pos:line="43" pos:column="19"/></operator> <ternary><condition><expr><name><name pos:line="43" pos:column="20">conn<pos:position pos:line="43" pos:column="24"/></name><operator pos:line="43" pos:column="24">-&gt;<pos:position pos:line="43" pos:column="29"/></operator><name pos:line="43" pos:column="26">newurl<pos:position pos:line="43" pos:column="32"/></name></name></expr>?<pos:position pos:line="43" pos:column="33"/></condition><then><expr><call><name pos:line="43" pos:column="33">strdup<pos:position pos:line="43" pos:column="39"/></name><argument_list pos:line="43" pos:column="39">(<argument><expr><name><name pos:line="43" pos:column="40">conn<pos:position pos:line="43" pos:column="44"/></name><operator pos:line="43" pos:column="44">-&gt;<pos:position pos:line="43" pos:column="49"/></operator><name pos:line="43" pos:column="46">newurl<pos:position pos:line="43" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="53"/></argument_list></call></expr></then><else pos:line="43" pos:column="53">:<expr><name pos:line="43" pos:column="54">NULL<pos:position pos:line="43" pos:column="58"/></name></expr></else></ternary></expr>;<pos:position pos:line="43" pos:column="59"/></expr_stmt></block></then>
        <else pos:line="44" pos:column="9">else <block pos:line="44" pos:column="14">{
          <comment type="block" pos:line="45" pos:column="11">/* The transfer phase returned error, we mark the connection to get
           * closed to prevent being re-used. This is becasue we can't
           * possibly know if the connection is in a good shape or not now. */</comment>
          <expr_stmt><expr><name><name pos:line="48" pos:column="11">conn<pos:position pos:line="48" pos:column="15"/></name><operator pos:line="48" pos:column="15">-&gt;<pos:position pos:line="48" pos:column="20"/></operator><name pos:line="48" pos:column="17">bits<pos:position pos:line="48" pos:column="21"/></name><operator pos:line="48" pos:column="21">.<pos:position pos:line="48" pos:column="22"/></operator><name pos:line="48" pos:column="22">close<pos:position pos:line="48" pos:column="27"/></name></name> <operator pos:line="48" pos:column="28">=<pos:position pos:line="48" pos:column="29"/></operator> <name pos:line="48" pos:column="30">TRUE<pos:position pos:line="48" pos:column="34"/></name></expr>;<pos:position pos:line="48" pos:column="35"/></expr_stmt>

          <if pos:line="50" pos:column="11">if<condition pos:line="50" pos:column="13">(<expr><operator pos:line="50" pos:column="14">-<pos:position pos:line="50" pos:column="15"/></operator><literal type="number" pos:line="50" pos:column="15">1<pos:position pos:line="50" pos:column="16"/></literal> <operator pos:line="50" pos:column="17">!=<pos:position pos:line="50" pos:column="19"/></operator><name><name pos:line="50" pos:column="19">conn<pos:position pos:line="50" pos:column="23"/></name><operator pos:line="50" pos:column="23">-&gt;<pos:position pos:line="50" pos:column="28"/></operator><name pos:line="50" pos:column="25">secondarysocket<pos:position pos:line="50" pos:column="40"/></name></name></expr>)<pos:position pos:line="50" pos:column="41"/></condition><then pos:line="50" pos:column="41"> <block pos:line="50" pos:column="42">{
            <comment type="block" pos:line="51" pos:column="13">/* if we failed anywhere, we must clean up the secondary socket if
               it was used */</comment>
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">sclose<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><name><name pos:line="53" pos:column="20">conn<pos:position pos:line="53" pos:column="24"/></name><operator pos:line="53" pos:column="24">-&gt;<pos:position pos:line="53" pos:column="29"/></operator><name pos:line="53" pos:column="26">secondarysocket<pos:position pos:line="53" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="54" pos:column="13">conn<pos:position pos:line="54" pos:column="17"/></name><operator pos:line="54" pos:column="17">-&gt;<pos:position pos:line="54" pos:column="22"/></operator><name pos:line="54" pos:column="19">secondarysocket<pos:position pos:line="54" pos:column="34"/></name></name><operator pos:line="54" pos:column="34">=<pos:position pos:line="54" pos:column="35"/></operator><operator pos:line="54" pos:column="35">-<pos:position pos:line="54" pos:column="36"/></operator><literal type="number" pos:line="54" pos:column="36">1<pos:position pos:line="54" pos:column="37"/></literal></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt>
          }<pos:position pos:line="55" pos:column="12"/></block></then></if>
        }<pos:position pos:line="56" pos:column="10"/></block></else></if>

        <comment type="block" pos:line="58" pos:column="9">/* Always run Curl_done(), even if some of the previous calls
           failed, but return the previous (original) error code */</comment>
        <expr_stmt><expr><name pos:line="60" pos:column="9">res2<pos:position pos:line="60" pos:column="13"/></name> <operator pos:line="60" pos:column="14">=<pos:position pos:line="60" pos:column="15"/></operator> <call><name pos:line="60" pos:column="16">Curl_done<pos:position pos:line="60" pos:column="25"/></name><argument_list pos:line="60" pos:column="25">(<argument><expr><name pos:line="60" pos:column="26">conn<pos:position pos:line="60" pos:column="30"/></name></expr></argument>)<pos:position pos:line="60" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="32"/></expr_stmt>

        <if pos:line="62" pos:column="9">if<condition pos:line="62" pos:column="11">(<expr><name pos:line="62" pos:column="12">CURLE_OK<pos:position pos:line="62" pos:column="20"/></name> <operator pos:line="62" pos:column="21">==<pos:position pos:line="62" pos:column="23"/></operator> <name pos:line="62" pos:column="24">res<pos:position pos:line="62" pos:column="27"/></name></expr>)<pos:position pos:line="62" pos:column="28"/></condition><then pos:line="62" pos:column="28">
          <block type="pseudo"><expr_stmt><expr><name pos:line="63" pos:column="11">res<pos:position pos:line="63" pos:column="14"/></name> <operator pos:line="63" pos:column="15">=<pos:position pos:line="63" pos:column="16"/></operator> <name pos:line="63" pos:column="17">res2<pos:position pos:line="63" pos:column="21"/></name></expr>;<pos:position pos:line="63" pos:column="22"/></expr_stmt></block></then></if>
      }<pos:position pos:line="64" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="66" pos:column="7">/*
       * Important: 'conn' cannot be used here, since it may have been closed
       * in 'Curl_done' or other functions.
       */</comment>

      <if pos:line="71" pos:column="7">if<condition pos:line="71" pos:column="9">(<expr><operator pos:line="71" pos:column="10">(<pos:position pos:line="71" pos:column="11"/></operator><name pos:line="71" pos:column="11">res<pos:position pos:line="71" pos:column="14"/></name> <operator pos:line="71" pos:column="15">==<pos:position pos:line="71" pos:column="17"/></operator> <name pos:line="71" pos:column="18">CURLE_OK<pos:position pos:line="71" pos:column="26"/></name><operator pos:line="71" pos:column="26">)<pos:position pos:line="71" pos:column="27"/></operator> <operator pos:line="71" pos:column="28">&amp;&amp;<pos:position pos:line="71" pos:column="38"/></operator> <name pos:line="71" pos:column="31">newurl<pos:position pos:line="71" pos:column="37"/></name></expr>)<pos:position pos:line="71" pos:column="38"/></condition><then pos:line="71" pos:column="38"> <block pos:line="71" pos:column="39">{
        <expr_stmt><expr><name pos:line="72" pos:column="9">res<pos:position pos:line="72" pos:column="12"/></name> <operator pos:line="72" pos:column="13">=<pos:position pos:line="72" pos:column="14"/></operator> <call><name pos:line="72" pos:column="15">Curl_follow<pos:position pos:line="72" pos:column="26"/></name><argument_list pos:line="72" pos:column="26">(<argument><expr><name pos:line="72" pos:column="27">data<pos:position pos:line="72" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="33">newurl<pos:position pos:line="72" pos:column="39"/></name></expr></argument>)<pos:position pos:line="72" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="41"/></expr_stmt>
        <if pos:line="73" pos:column="9">if<condition pos:line="73" pos:column="11">(<expr><name pos:line="73" pos:column="12">CURLE_OK<pos:position pos:line="73" pos:column="20"/></name> <operator pos:line="73" pos:column="21">==<pos:position pos:line="73" pos:column="23"/></operator> <name pos:line="73" pos:column="24">res<pos:position pos:line="73" pos:column="27"/></name></expr>)<pos:position pos:line="73" pos:column="28"/></condition><then pos:line="73" pos:column="28"> <block pos:line="73" pos:column="29">{
          <expr_stmt><expr><name pos:line="74" pos:column="11">newurl<pos:position pos:line="74" pos:column="17"/></name> <operator pos:line="74" pos:column="18">=<pos:position pos:line="74" pos:column="19"/></operator> <name pos:line="74" pos:column="20">NULL<pos:position pos:line="74" pos:column="24"/></name></expr>;<pos:position pos:line="74" pos:column="25"/></expr_stmt>
          <continue pos:line="75" pos:column="11">continue;<pos:position pos:line="75" pos:column="20"/></continue>
        }<pos:position pos:line="76" pos:column="10"/></block></then></if>
      }<pos:position pos:line="77" pos:column="8"/></block></then></if>
    }<pos:position pos:line="78" pos:column="6"/></block></then></if>
    <break pos:line="79" pos:column="5">break;<pos:position pos:line="79" pos:column="11"/></break> <comment type="block" pos:line="79" pos:column="12">/* it only reaches here when this shouldn't loop */</comment>

  }<pos:position pos:line="81" pos:column="4"/></block> while<condition pos:line="81" pos:column="10">(<expr><literal type="number" pos:line="81" pos:column="11">1<pos:position pos:line="81" pos:column="12"/></literal></expr>)<pos:position pos:line="81" pos:column="13"/></condition>;<pos:position pos:line="81" pos:column="14"/></do> <comment type="block" pos:line="81" pos:column="15">/* loop if Location: */</comment>

  <if pos:line="83" pos:column="3">if<condition pos:line="83" pos:column="5">(<expr><name pos:line="83" pos:column="6">newurl<pos:position pos:line="83" pos:column="12"/></name></expr>)<pos:position pos:line="83" pos:column="13"/></condition><then pos:line="83" pos:column="13">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="84" pos:column="5">free<pos:position pos:line="84" pos:column="9"/></name><argument_list pos:line="84" pos:column="9">(<argument><expr><name pos:line="84" pos:column="10">newurl<pos:position pos:line="84" pos:column="16"/></name></expr></argument>)<pos:position pos:line="84" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="18"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="86" pos:column="3">/* run post-transfer uncondionally, but don't clobber the return code if
     we already have an error code recorder */</comment>
  <expr_stmt><expr><name pos:line="88" pos:column="3">res2<pos:position pos:line="88" pos:column="7"/></name> <operator pos:line="88" pos:column="8">=<pos:position pos:line="88" pos:column="9"/></operator> <call><name pos:line="88" pos:column="10">Curl_posttransfer<pos:position pos:line="88" pos:column="27"/></name><argument_list pos:line="88" pos:column="27">(<argument><expr><name pos:line="88" pos:column="28">data<pos:position pos:line="88" pos:column="32"/></name></expr></argument>)<pos:position pos:line="88" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="34"/></expr_stmt>
  <if pos:line="89" pos:column="3">if<condition pos:line="89" pos:column="5">(<expr><operator pos:line="89" pos:column="6">!<pos:position pos:line="89" pos:column="7"/></operator><name pos:line="89" pos:column="7">res<pos:position pos:line="89" pos:column="10"/></name> <operator pos:line="89" pos:column="11">&amp;&amp;<pos:position pos:line="89" pos:column="21"/></operator> <name pos:line="89" pos:column="14">res2<pos:position pos:line="89" pos:column="18"/></name></expr>)<pos:position pos:line="89" pos:column="19"/></condition><then pos:line="89" pos:column="19">
    <block type="pseudo"><expr_stmt><expr><name pos:line="90" pos:column="5">res<pos:position pos:line="90" pos:column="8"/></name> <operator pos:line="90" pos:column="9">=<pos:position pos:line="90" pos:column="10"/></operator> <name pos:line="90" pos:column="11">res2<pos:position pos:line="90" pos:column="15"/></name></expr>;<pos:position pos:line="90" pos:column="16"/></expr_stmt></block></then></if>

  <return pos:line="92" pos:column="3">return <expr><name pos:line="92" pos:column="10">res<pos:position pos:line="92" pos:column="13"/></name></expr>;<pos:position pos:line="92" pos:column="14"/></return>
}<pos:position pos:line="93" pos:column="2"/></block></function></unit>
