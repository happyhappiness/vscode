<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1012_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">singleipconnect<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">connectdata<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">conn<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
                                <parameter><decl><type><specifier pos:line="2" pos:column="33">const<pos:position pos:line="2" pos:column="38"/></specifier> <name pos:line="2" pos:column="39">Curl_addrinfo<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">ai<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="3" pos:column="33">curl_socket_t<pos:position pos:line="3" pos:column="46"/></name> <modifier pos:line="3" pos:column="47">*<pos:position pos:line="3" pos:column="48"/></modifier></type><name pos:line="3" pos:column="48">sockp<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="54"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_sockaddr_ex<pos:position pos:line="5" pos:column="26"/></name></name></type> <name pos:line="5" pos:column="27">addr<pos:position pos:line="5" pos:column="31"/></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">rc<pos:position pos:line="6" pos:column="9"/></name> <init pos:line="6" pos:column="10">= <expr><operator pos:line="6" pos:column="12">-<pos:position pos:line="6" pos:column="13"/></operator><literal type="number" pos:line="6" pos:column="13">1<pos:position pos:line="6" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">error<pos:position pos:line="7" pos:column="12"/></name> <init pos:line="7" pos:column="13">= <expr><literal type="number" pos:line="7" pos:column="15">0<pos:position pos:line="7" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">bool<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">isconnected<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><name pos:line="8" pos:column="22">FALSE<pos:position pos:line="8" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">Curl_easy<pos:position pos:line="9" pos:column="19"/></name></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">data<pos:position pos:line="9" pos:column="25"/></name> <init pos:line="9" pos:column="26">= <expr><name><name pos:line="9" pos:column="28">conn<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">-&gt;<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="34">data<pos:position pos:line="9" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">curl_socket_t<pos:position pos:line="10" pos:column="16"/></name></type> <name pos:line="10" pos:column="17">sockfd<pos:position pos:line="10" pos:column="23"/></name></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">CURLcode<pos:position pos:line="11" pos:column="11"/></name></type> <name pos:line="11" pos:column="12">result<pos:position pos:line="11" pos:column="18"/></name></decl>;<pos:position pos:line="11" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name></type> <name><name pos:line="12" pos:column="8">ipaddress<pos:position pos:line="12" pos:column="17"/></name><index pos:line="12" pos:column="17">[<expr><name pos:line="12" pos:column="18">MAX_IPADR_LEN<pos:position pos:line="12" pos:column="31"/></name></expr>]<pos:position pos:line="12" pos:column="32"/></index></name></decl>;<pos:position pos:line="12" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">long<pos:position pos:line="13" pos:column="7"/></name></type> <name pos:line="13" pos:column="8">port<pos:position pos:line="13" pos:column="12"/></name></decl>;<pos:position pos:line="13" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">bool<pos:position pos:line="14" pos:column="7"/></name></type> <name pos:line="14" pos:column="8">is_tcp<pos:position pos:line="14" pos:column="14"/></name></decl>;<pos:position pos:line="14" pos:column="15"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="16" pos:column="3">*<pos:position pos:line="16" pos:column="4"/></operator><name pos:line="16" pos:column="4">sockp<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <name pos:line="16" pos:column="12">CURL_SOCKET_BAD<pos:position pos:line="16" pos:column="27"/></name></expr>;<pos:position pos:line="16" pos:column="28"/></expr_stmt>

  <expr_stmt><expr><name pos:line="18" pos:column="3">result<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <call><name pos:line="18" pos:column="12">Curl_socket<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><name pos:line="18" pos:column="24">conn<pos:position pos:line="18" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="30">ai<pos:position pos:line="18" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="34">&amp;<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="35">addr<pos:position pos:line="18" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="41">&amp;<pos:position pos:line="18" pos:column="46"/></operator><name pos:line="18" pos:column="42">sockfd<pos:position pos:line="18" pos:column="48"/></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="50"/></expr_stmt>
  <if pos:line="19" pos:column="3">if<condition pos:line="19" pos:column="5">(<expr><name pos:line="19" pos:column="6">result<pos:position pos:line="19" pos:column="12"/></name></expr>)<pos:position pos:line="19" pos:column="13"/></condition><then pos:line="19" pos:column="13">
    <comment type="block" pos:line="20" pos:column="5">/* Failed to create the socket, but still return OK since we signal the
       lack of socket as well. This allows the parent function to keep looping
       over alternative addresses/socket families etc. */</comment>
    <block type="pseudo"><return pos:line="23" pos:column="5">return <expr><name pos:line="23" pos:column="12">CURLE_OK<pos:position pos:line="23" pos:column="20"/></name></expr>;<pos:position pos:line="23" pos:column="21"/></return></block></then></if>

  <comment type="block" pos:line="25" pos:column="3">/* store remote address and port used in this connection attempt */</comment>
  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><operator pos:line="26" pos:column="6">!<pos:position pos:line="26" pos:column="7"/></operator><call><name pos:line="26" pos:column="7">getaddressinfo<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><operator pos:line="26" pos:column="22">(<pos:position pos:line="26" pos:column="23"/></operator>struct <name pos:line="26" pos:column="30">sockaddr<pos:position pos:line="26" pos:column="38"/></name><operator pos:line="26" pos:column="38">*<pos:position pos:line="26" pos:column="39"/></operator><operator pos:line="26" pos:column="39">)<pos:position pos:line="26" pos:column="40"/></operator><operator pos:line="26" pos:column="40">&amp;<pos:position pos:line="26" pos:column="45"/></operator><name><name pos:line="26" pos:column="41">addr<pos:position pos:line="26" pos:column="45"/></name><operator pos:line="26" pos:column="45">.<pos:position pos:line="26" pos:column="46"/></operator><name pos:line="26" pos:column="46">sa_addr<pos:position pos:line="26" pos:column="53"/></name></name></expr></argument>,
                     <argument><expr><name pos:line="27" pos:column="22">ipaddress<pos:position pos:line="27" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="33">&amp;<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="34">port<pos:position pos:line="27" pos:column="38"/></name></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="40"/></condition><then pos:line="27" pos:column="40"> <block pos:line="27" pos:column="41">{
    <comment type="block" pos:line="28" pos:column="5">/* malformed address or bug in inet_ntop, try next address */</comment>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">failf<pos:position pos:line="29" pos:column="10"/></name><argument_list pos:line="29" pos:column="10">(<argument><expr><name pos:line="29" pos:column="11">data<pos:position pos:line="29" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="17">"sa_addr inet_ntop() failed with errno %d: %s"<pos:position pos:line="29" pos:column="63"/></literal></expr></argument>,
          <argument><expr><name pos:line="30" pos:column="11">errno<pos:position pos:line="30" pos:column="16"/></name></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="18">Curl_strerror<pos:position pos:line="30" pos:column="31"/></name><argument_list pos:line="30" pos:column="31">(<argument><expr><name pos:line="30" pos:column="32">conn<pos:position pos:line="30" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="38">errno<pos:position pos:line="30" pos:column="43"/></name></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">Curl_closesocket<pos:position pos:line="31" pos:column="21"/></name><argument_list pos:line="31" pos:column="21">(<argument><expr><name pos:line="31" pos:column="22">conn<pos:position pos:line="31" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="28">sockfd<pos:position pos:line="31" pos:column="34"/></name></expr></argument>)<pos:position pos:line="31" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="36"/></expr_stmt>
    <return pos:line="32" pos:column="5">return <expr><name pos:line="32" pos:column="12">CURLE_OK<pos:position pos:line="32" pos:column="20"/></name></expr>;<pos:position pos:line="32" pos:column="21"/></return>
  }<pos:position pos:line="33" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="34" pos:column="3">infof<pos:position pos:line="34" pos:column="8"/></name><argument_list pos:line="34" pos:column="8">(<argument><expr><name pos:line="34" pos:column="9">data<pos:position pos:line="34" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="15">"  Trying %s...\n"<pos:position pos:line="34" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="35">ipaddress<pos:position pos:line="34" pos:column="44"/></name></expr></argument>)<pos:position pos:line="34" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="46"/></expr_stmt>

<cpp:ifdef pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">ifdef<pos:position pos:line="36" pos:column="7"/></cpp:directive> <name pos:line="36" pos:column="8">ENABLE_IPV6<pos:position pos:line="36" pos:column="19"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="37" pos:column="3">is_tcp<pos:position pos:line="37" pos:column="9"/></name> <operator pos:line="37" pos:column="10">=<pos:position pos:line="37" pos:column="11"/></operator> <operator pos:line="37" pos:column="12">(<pos:position pos:line="37" pos:column="13"/></operator><name><name pos:line="37" pos:column="13">addr<pos:position pos:line="37" pos:column="17"/></name><operator pos:line="37" pos:column="17">.<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="18">family<pos:position pos:line="37" pos:column="24"/></name></name> <operator pos:line="37" pos:column="25">==<pos:position pos:line="37" pos:column="27"/></operator> <name pos:line="37" pos:column="28">AF_INET<pos:position pos:line="37" pos:column="35"/></name> <operator pos:line="37" pos:column="36">||<pos:position pos:line="37" pos:column="38"/></operator> <name><name pos:line="37" pos:column="39">addr<pos:position pos:line="37" pos:column="43"/></name><operator pos:line="37" pos:column="43">.<pos:position pos:line="37" pos:column="44"/></operator><name pos:line="37" pos:column="44">family<pos:position pos:line="37" pos:column="50"/></name></name> <operator pos:line="37" pos:column="51">==<pos:position pos:line="37" pos:column="53"/></operator> <name pos:line="37" pos:column="54">AF_INET6<pos:position pos:line="37" pos:column="62"/></name><operator pos:line="37" pos:column="62">)<pos:position pos:line="37" pos:column="63"/></operator> <operator pos:line="37" pos:column="64">&amp;&amp;<pos:position pos:line="37" pos:column="74"/></operator>
    <name><name pos:line="38" pos:column="5">addr<pos:position pos:line="38" pos:column="9"/></name><operator pos:line="38" pos:column="9">.<pos:position pos:line="38" pos:column="10"/></operator><name pos:line="38" pos:column="10">socktype<pos:position pos:line="38" pos:column="18"/></name></name> <operator pos:line="38" pos:column="19">==<pos:position pos:line="38" pos:column="21"/></operator> <name pos:line="38" pos:column="22">SOCK_STREAM<pos:position pos:line="38" pos:column="33"/></name></expr>;<pos:position pos:line="38" pos:column="34"/></expr_stmt>
<cpp:else pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">else<pos:position pos:line="39" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><name pos:line="40" pos:column="3">is_tcp<pos:position pos:line="40" pos:column="9"/></name> <operator pos:line="40" pos:column="10">=<pos:position pos:line="40" pos:column="11"/></operator> <operator pos:line="40" pos:column="12">(<pos:position pos:line="40" pos:column="13"/></operator><name><name pos:line="40" pos:column="13">addr<pos:position pos:line="40" pos:column="17"/></name><operator pos:line="40" pos:column="17">.<pos:position pos:line="40" pos:column="18"/></operator><name pos:line="40" pos:column="18">family<pos:position pos:line="40" pos:column="24"/></name></name> <operator pos:line="40" pos:column="25">==<pos:position pos:line="40" pos:column="27"/></operator> <name pos:line="40" pos:column="28">AF_INET<pos:position pos:line="40" pos:column="35"/></name><operator pos:line="40" pos:column="35">)<pos:position pos:line="40" pos:column="36"/></operator> <operator pos:line="40" pos:column="37">&amp;&amp;<pos:position pos:line="40" pos:column="47"/></operator> <name><name pos:line="40" pos:column="40">addr<pos:position pos:line="40" pos:column="44"/></name><operator pos:line="40" pos:column="44">.<pos:position pos:line="40" pos:column="45"/></operator><name pos:line="40" pos:column="45">socktype<pos:position pos:line="40" pos:column="53"/></name></name> <operator pos:line="40" pos:column="54">==<pos:position pos:line="40" pos:column="56"/></operator> <name pos:line="40" pos:column="57">SOCK_STREAM<pos:position pos:line="40" pos:column="68"/></name></expr>;<pos:position pos:line="40" pos:column="69"/></expr_stmt>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="42" pos:column="3">if<condition pos:line="42" pos:column="5">(<expr><name pos:line="42" pos:column="6">is_tcp<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">&amp;&amp;<pos:position pos:line="42" pos:column="23"/></operator> <name><name pos:line="42" pos:column="16">data<pos:position pos:line="42" pos:column="20"/></name><operator pos:line="42" pos:column="20">-&gt;<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="22">set<pos:position pos:line="42" pos:column="25"/></name><operator pos:line="42" pos:column="25">.<pos:position pos:line="42" pos:column="26"/></operator><name pos:line="42" pos:column="26">tcp_nodelay<pos:position pos:line="42" pos:column="37"/></name></name></expr>)<pos:position pos:line="42" pos:column="38"/></condition><then pos:line="42" pos:column="38">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="5">Curl_tcpnodelay<pos:position pos:line="43" pos:column="20"/></name><argument_list pos:line="43" pos:column="20">(<argument><expr><name pos:line="43" pos:column="21">conn<pos:position pos:line="43" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="27">sockfd<pos:position pos:line="43" pos:column="33"/></name></expr></argument>)<pos:position pos:line="43" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="35"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="45" pos:column="3">nosigpipe<pos:position pos:line="45" pos:column="12"/></name><argument_list pos:line="45" pos:column="12">(<argument><expr><name pos:line="45" pos:column="13">conn<pos:position pos:line="45" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="19">sockfd<pos:position pos:line="45" pos:column="25"/></name></expr></argument>)<pos:position pos:line="45" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="27"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="47" pos:column="3">Curl_sndbufset<pos:position pos:line="47" pos:column="17"/></name><argument_list pos:line="47" pos:column="17">(<argument><expr><name pos:line="47" pos:column="18">sockfd<pos:position pos:line="47" pos:column="24"/></name></expr></argument>)<pos:position pos:line="47" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="26"/></expr_stmt>

  <if pos:line="49" pos:column="3">if<condition pos:line="49" pos:column="5">(<expr><name pos:line="49" pos:column="6">is_tcp<pos:position pos:line="49" pos:column="12"/></name> <operator pos:line="49" pos:column="13">&amp;&amp;<pos:position pos:line="49" pos:column="23"/></operator> <name><name pos:line="49" pos:column="16">data<pos:position pos:line="49" pos:column="20"/></name><operator pos:line="49" pos:column="20">-&gt;<pos:position pos:line="49" pos:column="25"/></operator><name pos:line="49" pos:column="22">set<pos:position pos:line="49" pos:column="25"/></name><operator pos:line="49" pos:column="25">.<pos:position pos:line="49" pos:column="26"/></operator><name pos:line="49" pos:column="26">tcp_keepalive<pos:position pos:line="49" pos:column="39"/></name></name></expr>)<pos:position pos:line="49" pos:column="40"/></condition><then pos:line="49" pos:column="40">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="5">tcpkeepalive<pos:position pos:line="50" pos:column="17"/></name><argument_list pos:line="50" pos:column="17">(<argument><expr><name pos:line="50" pos:column="18">data<pos:position pos:line="50" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="24">sockfd<pos:position pos:line="50" pos:column="30"/></name></expr></argument>)<pos:position pos:line="50" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="32"/></expr_stmt></block></then></if>

  <if pos:line="52" pos:column="3">if<condition pos:line="52" pos:column="5">(<expr><name><name pos:line="52" pos:column="6">data<pos:position pos:line="52" pos:column="10"/></name><operator pos:line="52" pos:column="10">-&gt;<pos:position pos:line="52" pos:column="15"/></operator><name pos:line="52" pos:column="12">set<pos:position pos:line="52" pos:column="15"/></name><operator pos:line="52" pos:column="15">.<pos:position pos:line="52" pos:column="16"/></operator><name pos:line="52" pos:column="16">fsockopt<pos:position pos:line="52" pos:column="24"/></name></name></expr>)<pos:position pos:line="52" pos:column="25"/></condition><then pos:line="52" pos:column="25"> <block pos:line="52" pos:column="26">{
    <comment type="block" pos:line="53" pos:column="5">/* activate callback for setting socket options */</comment>
    <expr_stmt><expr><name pos:line="54" pos:column="5">error<pos:position pos:line="54" pos:column="10"/></name> <operator pos:line="54" pos:column="11">=<pos:position pos:line="54" pos:column="12"/></operator> <call><name><name pos:line="54" pos:column="13">data<pos:position pos:line="54" pos:column="17"/></name><operator pos:line="54" pos:column="17">-&gt;<pos:position pos:line="54" pos:column="22"/></operator><name pos:line="54" pos:column="19">set<pos:position pos:line="54" pos:column="22"/></name><operator pos:line="54" pos:column="22">.<pos:position pos:line="54" pos:column="23"/></operator><name pos:line="54" pos:column="23">fsockopt<pos:position pos:line="54" pos:column="31"/></name></name><argument_list pos:line="54" pos:column="31">(<argument><expr><name><name pos:line="54" pos:column="32">data<pos:position pos:line="54" pos:column="36"/></name><operator pos:line="54" pos:column="36">-&gt;<pos:position pos:line="54" pos:column="41"/></operator><name pos:line="54" pos:column="38">set<pos:position pos:line="54" pos:column="41"/></name><operator pos:line="54" pos:column="41">.<pos:position pos:line="54" pos:column="42"/></operator><name pos:line="54" pos:column="42">sockopt_client<pos:position pos:line="54" pos:column="56"/></name></name></expr></argument>,
                               <argument><expr><name pos:line="55" pos:column="32">sockfd<pos:position pos:line="55" pos:column="38"/></name></expr></argument>,
                               <argument><expr><name pos:line="56" pos:column="32">CURLSOCKTYPE_IPCXN<pos:position pos:line="56" pos:column="50"/></name></expr></argument>)<pos:position pos:line="56" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="52"/></expr_stmt>

    <if pos:line="58" pos:column="5">if<condition pos:line="58" pos:column="7">(<expr><name pos:line="58" pos:column="8">error<pos:position pos:line="58" pos:column="13"/></name> <operator pos:line="58" pos:column="14">==<pos:position pos:line="58" pos:column="16"/></operator> <name pos:line="58" pos:column="17">CURL_SOCKOPT_ALREADY_CONNECTED<pos:position pos:line="58" pos:column="47"/></name></expr>)<pos:position pos:line="58" pos:column="48"/></condition><then pos:line="58" pos:column="48">
      <block type="pseudo"><expr_stmt><expr><name pos:line="59" pos:column="7">isconnected<pos:position pos:line="59" pos:column="18"/></name> <operator pos:line="59" pos:column="19">=<pos:position pos:line="59" pos:column="20"/></operator> <name pos:line="59" pos:column="21">TRUE<pos:position pos:line="59" pos:column="25"/></name></expr>;<pos:position pos:line="59" pos:column="26"/></expr_stmt></block></then>
    <elseif pos:line="60" pos:column="5">else <if pos:line="60" pos:column="10">if<condition pos:line="60" pos:column="12">(<expr><name pos:line="60" pos:column="13">error<pos:position pos:line="60" pos:column="18"/></name></expr>)<pos:position pos:line="60" pos:column="19"/></condition><then pos:line="60" pos:column="19"> <block pos:line="60" pos:column="20">{
      <expr_stmt><expr><call><name pos:line="61" pos:column="7">Curl_closesocket<pos:position pos:line="61" pos:column="23"/></name><argument_list pos:line="61" pos:column="23">(<argument><expr><name pos:line="61" pos:column="24">conn<pos:position pos:line="61" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="30">sockfd<pos:position pos:line="61" pos:column="36"/></name></expr></argument>)<pos:position pos:line="61" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="38"/></expr_stmt> <comment type="block" pos:line="61" pos:column="39">/* close the socket and bail out */</comment>
      <return pos:line="62" pos:column="7">return <expr><name pos:line="62" pos:column="14">CURLE_ABORTED_BY_CALLBACK<pos:position pos:line="62" pos:column="39"/></name></expr>;<pos:position pos:line="62" pos:column="40"/></return>
    }<pos:position pos:line="63" pos:column="6"/></block></then></if></elseif></if>
  }<pos:position pos:line="64" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="66" pos:column="3">/* possibly bind the local end to an IP, interface or port */</comment>
  <if pos:line="67" pos:column="3">if<condition pos:line="67" pos:column="5">(<expr><name><name pos:line="67" pos:column="6">addr<pos:position pos:line="67" pos:column="10"/></name><operator pos:line="67" pos:column="10">.<pos:position pos:line="67" pos:column="11"/></operator><name pos:line="67" pos:column="11">family<pos:position pos:line="67" pos:column="17"/></name></name> <operator pos:line="67" pos:column="18">==<pos:position pos:line="67" pos:column="20"/></operator> <name pos:line="67" pos:column="21">AF_INET<pos:position pos:line="67" pos:column="28"/></name>
<cpp:ifdef pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">ifdef<pos:position pos:line="68" pos:column="7"/></cpp:directive> <name pos:line="68" pos:column="8">ENABLE_IPV6<pos:position pos:line="68" pos:column="19"/></name></cpp:ifdef>
     <operator pos:line="69" pos:column="6">||<pos:position pos:line="69" pos:column="8"/></operator> <name><name pos:line="69" pos:column="9">addr<pos:position pos:line="69" pos:column="13"/></name><operator pos:line="69" pos:column="13">.<pos:position pos:line="69" pos:column="14"/></operator><name pos:line="69" pos:column="14">family<pos:position pos:line="69" pos:column="20"/></name></name> <operator pos:line="69" pos:column="21">==<pos:position pos:line="69" pos:column="23"/></operator> <name pos:line="69" pos:column="24">AF_INET6<pos:position pos:line="69" pos:column="32"/></name></expr>
<cpp:endif pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">endif<pos:position pos:line="70" pos:column="7"/></cpp:directive></cpp:endif>
    )<pos:position pos:line="71" pos:column="6"/></condition><then pos:line="71" pos:column="6"> <block pos:line="71" pos:column="7">{
    <expr_stmt><expr><name pos:line="72" pos:column="5">result<pos:position pos:line="72" pos:column="11"/></name> <operator pos:line="72" pos:column="12">=<pos:position pos:line="72" pos:column="13"/></operator> <call><name pos:line="72" pos:column="14">bindlocal<pos:position pos:line="72" pos:column="23"/></name><argument_list pos:line="72" pos:column="23">(<argument><expr><name pos:line="72" pos:column="24">conn<pos:position pos:line="72" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="30">sockfd<pos:position pos:line="72" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="38">addr<pos:position pos:line="72" pos:column="42"/></name><operator pos:line="72" pos:column="42">.<pos:position pos:line="72" pos:column="43"/></operator><name pos:line="72" pos:column="43">family<pos:position pos:line="72" pos:column="49"/></name></name></expr></argument>,
                       <argument><expr><call><name pos:line="73" pos:column="24">Curl_ipv6_scope<pos:position pos:line="73" pos:column="39"/></name><argument_list pos:line="73" pos:column="39">(<argument><expr><operator pos:line="73" pos:column="40">(<pos:position pos:line="73" pos:column="41"/></operator>struct <name pos:line="73" pos:column="48">sockaddr<pos:position pos:line="73" pos:column="56"/></name><operator pos:line="73" pos:column="56">*<pos:position pos:line="73" pos:column="57"/></operator><operator pos:line="73" pos:column="57">)<pos:position pos:line="73" pos:column="58"/></operator><operator pos:line="73" pos:column="58">&amp;<pos:position pos:line="73" pos:column="63"/></operator><name><name pos:line="73" pos:column="59">addr<pos:position pos:line="73" pos:column="63"/></name><operator pos:line="73" pos:column="63">.<pos:position pos:line="73" pos:column="64"/></operator><name pos:line="73" pos:column="64">sa_addr<pos:position pos:line="73" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="73" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="73" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="74"/></expr_stmt>
    <if pos:line="74" pos:column="5">if<condition pos:line="74" pos:column="7">(<expr><name pos:line="74" pos:column="8">result<pos:position pos:line="74" pos:column="14"/></name></expr>)<pos:position pos:line="74" pos:column="15"/></condition><then pos:line="74" pos:column="15"> <block pos:line="74" pos:column="16">{
      <expr_stmt><expr><call><name pos:line="75" pos:column="7">Curl_closesocket<pos:position pos:line="75" pos:column="23"/></name><argument_list pos:line="75" pos:column="23">(<argument><expr><name pos:line="75" pos:column="24">conn<pos:position pos:line="75" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="30">sockfd<pos:position pos:line="75" pos:column="36"/></name></expr></argument>)<pos:position pos:line="75" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="38"/></expr_stmt> <comment type="block" pos:line="75" pos:column="39">/* close socket and bail out */</comment>
      <if pos:line="76" pos:column="7">if<condition pos:line="76" pos:column="9">(<expr><name pos:line="76" pos:column="10">result<pos:position pos:line="76" pos:column="16"/></name> <operator pos:line="76" pos:column="17">==<pos:position pos:line="76" pos:column="19"/></operator> <name pos:line="76" pos:column="20">CURLE_UNSUPPORTED_PROTOCOL<pos:position pos:line="76" pos:column="46"/></name></expr>)<pos:position pos:line="76" pos:column="47"/></condition><then pos:line="76" pos:column="47"> <block pos:line="76" pos:column="48">{
        <comment type="block" pos:line="77" pos:column="9">/* The address family is not supported on this interface.
           We can continue trying addresses */</comment>
        <return pos:line="79" pos:column="9">return <expr><name pos:line="79" pos:column="16">CURLE_COULDNT_CONNECT<pos:position pos:line="79" pos:column="37"/></name></expr>;<pos:position pos:line="79" pos:column="38"/></return>
      }<pos:position pos:line="80" pos:column="8"/></block></then></if>
      <return pos:line="81" pos:column="7">return <expr><name pos:line="81" pos:column="14">result<pos:position pos:line="81" pos:column="20"/></name></expr>;<pos:position pos:line="81" pos:column="21"/></return>
    }<pos:position pos:line="82" pos:column="6"/></block></then></if>
  }<pos:position pos:line="83" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="85" pos:column="3">/* set socket non-blocking */</comment>
  <expr_stmt><expr><operator pos:line="86" pos:column="3">(<pos:position pos:line="86" pos:column="4"/></operator><name pos:line="86" pos:column="4">void<pos:position pos:line="86" pos:column="8"/></name><operator pos:line="86" pos:column="8">)<pos:position pos:line="86" pos:column="9"/></operator><call><name pos:line="86" pos:column="9">curlx_nonblock<pos:position pos:line="86" pos:column="23"/></name><argument_list pos:line="86" pos:column="23">(<argument><expr><name pos:line="86" pos:column="24">sockfd<pos:position pos:line="86" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="32">TRUE<pos:position pos:line="86" pos:column="36"/></name></expr></argument>)<pos:position pos:line="86" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="38"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="88" pos:column="3">conn<pos:position pos:line="88" pos:column="7"/></name><operator pos:line="88" pos:column="7">-&gt;<pos:position pos:line="88" pos:column="12"/></operator><name pos:line="88" pos:column="9">connecttime<pos:position pos:line="88" pos:column="20"/></name></name> <operator pos:line="88" pos:column="21">=<pos:position pos:line="88" pos:column="22"/></operator> <call><name pos:line="88" pos:column="23">Curl_tvnow<pos:position pos:line="88" pos:column="33"/></name><argument_list pos:line="88" pos:column="33">()<pos:position pos:line="88" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="36"/></expr_stmt>
  <if pos:line="89" pos:column="3">if<condition pos:line="89" pos:column="5">(<expr><name><name pos:line="89" pos:column="6">conn<pos:position pos:line="89" pos:column="10"/></name><operator pos:line="89" pos:column="10">-&gt;<pos:position pos:line="89" pos:column="15"/></operator><name pos:line="89" pos:column="12">num_addr<pos:position pos:line="89" pos:column="20"/></name></name> <operator pos:line="89" pos:column="21">&gt;<pos:position pos:line="89" pos:column="25"/></operator> <literal type="number" pos:line="89" pos:column="23">1<pos:position pos:line="89" pos:column="24"/></literal></expr>)<pos:position pos:line="89" pos:column="25"/></condition><then pos:line="89" pos:column="25">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="90" pos:column="5">Curl_expire<pos:position pos:line="90" pos:column="16"/></name><argument_list pos:line="90" pos:column="16">(<argument><expr><name pos:line="90" pos:column="17">data<pos:position pos:line="90" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="23">conn<pos:position pos:line="90" pos:column="27"/></name><operator pos:line="90" pos:column="27">-&gt;<pos:position pos:line="90" pos:column="32"/></operator><name pos:line="90" pos:column="29">timeoutms_per_addr<pos:position pos:line="90" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="49">EXPIRE_DNS_PER_NAME<pos:position pos:line="90" pos:column="68"/></name></expr></argument>)<pos:position pos:line="90" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="70"/></expr_stmt></block></then></if>

  <comment type="block" pos:line="92" pos:column="3">/* Connect TCP sockets, bind UDP */</comment>
  <if pos:line="93" pos:column="3">if<condition pos:line="93" pos:column="5">(<expr><operator pos:line="93" pos:column="6">!<pos:position pos:line="93" pos:column="7"/></operator><name pos:line="93" pos:column="7">isconnected<pos:position pos:line="93" pos:column="18"/></name> <operator pos:line="93" pos:column="19">&amp;&amp;<pos:position pos:line="93" pos:column="29"/></operator> <operator pos:line="93" pos:column="22">(<pos:position pos:line="93" pos:column="23"/></operator><name><name pos:line="93" pos:column="23">conn<pos:position pos:line="93" pos:column="27"/></name><operator pos:line="93" pos:column="27">-&gt;<pos:position pos:line="93" pos:column="32"/></operator><name pos:line="93" pos:column="29">socktype<pos:position pos:line="93" pos:column="37"/></name></name> <operator pos:line="93" pos:column="38">==<pos:position pos:line="93" pos:column="40"/></operator> <name pos:line="93" pos:column="41">SOCK_STREAM<pos:position pos:line="93" pos:column="52"/></name><operator pos:line="93" pos:column="52">)<pos:position pos:line="93" pos:column="53"/></operator></expr>)<pos:position pos:line="93" pos:column="54"/></condition><then pos:line="93" pos:column="54"> <block pos:line="93" pos:column="55">{
    <if pos:line="94" pos:column="5">if<condition pos:line="94" pos:column="7">(<expr><name><name pos:line="94" pos:column="8">conn<pos:position pos:line="94" pos:column="12"/></name><operator pos:line="94" pos:column="12">-&gt;<pos:position pos:line="94" pos:column="17"/></operator><name pos:line="94" pos:column="14">bits<pos:position pos:line="94" pos:column="18"/></name><operator pos:line="94" pos:column="18">.<pos:position pos:line="94" pos:column="19"/></operator><name pos:line="94" pos:column="19">tcp_fastopen<pos:position pos:line="94" pos:column="31"/></name></name></expr>)<pos:position pos:line="94" pos:column="32"/></condition><then pos:line="94" pos:column="32"> <block pos:line="94" pos:column="33">{
<cpp:if pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">if<pos:position pos:line="95" pos:column="4"/></cpp:directive> <expr><call><name pos:line="95" pos:column="5">defined<pos:position pos:line="95" pos:column="12"/></name><argument_list pos:line="95" pos:column="12">(<argument><expr><name pos:line="95" pos:column="13">CONNECT_DATA_IDEMPOTENT<pos:position pos:line="95" pos:column="36"/></name></expr></argument>)<pos:position pos:line="95" pos:column="37"/></argument_list></call></expr></cpp:if> <comment type="block" pos:line="95" pos:column="38">/* OS X */</comment>
<cpp:ifdef pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">ifdef<pos:position pos:line="96" pos:column="7"/></cpp:directive> <name pos:line="96" pos:column="8">HAVE_BUILTIN_AVAILABLE<pos:position pos:line="96" pos:column="30"/></name></cpp:ifdef>
      <if pos:line="97" pos:column="7">if<condition pos:line="97" pos:column="9">(<expr><call><name pos:line="97" pos:column="10">__builtin_available<pos:position pos:line="97" pos:column="29"/></name><argument_list pos:line="97" pos:column="29">(<argument><expr><name pos:line="97" pos:column="30">macOS<pos:position pos:line="97" pos:column="35"/></name> <literal type="number" pos:line="97" pos:column="36">10.11<pos:position pos:line="97" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="97" pos:column="43">iOS<pos:position pos:line="97" pos:column="46"/></name> <literal type="number" pos:line="97" pos:column="47">9.0<pos:position pos:line="97" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="97" pos:column="52">tvOS<pos:position pos:line="97" pos:column="56"/></name> <literal type="number" pos:line="97" pos:column="57">9.0<pos:position pos:line="97" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="97" pos:column="62">watchOS<pos:position pos:line="97" pos:column="69"/></name> <literal type="number" pos:line="97" pos:column="70">2.0<pos:position pos:line="97" pos:column="73"/></literal></expr></argument>, <argument><expr><operator pos:line="97" pos:column="75">*<pos:position pos:line="97" pos:column="76"/></operator></expr></argument>)<pos:position pos:line="97" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="97" pos:column="78"/></condition><then pos:line="97" pos:column="78"> <block pos:line="97" pos:column="79">{
<cpp:endif pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">endif<pos:position pos:line="98" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="98" pos:column="8">/* HAVE_BUILTIN_AVAILABLE */</comment>
        <decl_stmt><decl><type><name pos:line="99" pos:column="9">sa_endpoints_t<pos:position pos:line="99" pos:column="23"/></name></type> <name pos:line="99" pos:column="24">endpoints<pos:position pos:line="99" pos:column="33"/></name></decl>;<pos:position pos:line="99" pos:column="34"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="100" pos:column="9">endpoints<pos:position pos:line="100" pos:column="18"/></name><operator pos:line="100" pos:column="18">.<pos:position pos:line="100" pos:column="19"/></operator><name pos:line="100" pos:column="19">sae_srcif<pos:position pos:line="100" pos:column="28"/></name></name> <operator pos:line="100" pos:column="29">=<pos:position pos:line="100" pos:column="30"/></operator> <literal type="number" pos:line="100" pos:column="31">0<pos:position pos:line="100" pos:column="32"/></literal></expr>;<pos:position pos:line="100" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="101" pos:column="9">endpoints<pos:position pos:line="101" pos:column="18"/></name><operator pos:line="101" pos:column="18">.<pos:position pos:line="101" pos:column="19"/></operator><name pos:line="101" pos:column="19">sae_srcaddr<pos:position pos:line="101" pos:column="30"/></name></name> <operator pos:line="101" pos:column="31">=<pos:position pos:line="101" pos:column="32"/></operator> <name pos:line="101" pos:column="33">NULL<pos:position pos:line="101" pos:column="37"/></name></expr>;<pos:position pos:line="101" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="102" pos:column="9">endpoints<pos:position pos:line="102" pos:column="18"/></name><operator pos:line="102" pos:column="18">.<pos:position pos:line="102" pos:column="19"/></operator><name pos:line="102" pos:column="19">sae_srcaddrlen<pos:position pos:line="102" pos:column="33"/></name></name> <operator pos:line="102" pos:column="34">=<pos:position pos:line="102" pos:column="35"/></operator> <literal type="number" pos:line="102" pos:column="36">0<pos:position pos:line="102" pos:column="37"/></literal></expr>;<pos:position pos:line="102" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="103" pos:column="9">endpoints<pos:position pos:line="103" pos:column="18"/></name><operator pos:line="103" pos:column="18">.<pos:position pos:line="103" pos:column="19"/></operator><name pos:line="103" pos:column="19">sae_dstaddr<pos:position pos:line="103" pos:column="30"/></name></name> <operator pos:line="103" pos:column="31">=<pos:position pos:line="103" pos:column="32"/></operator> <operator pos:line="103" pos:column="33">&amp;<pos:position pos:line="103" pos:column="38"/></operator><name><name pos:line="103" pos:column="34">addr<pos:position pos:line="103" pos:column="38"/></name><operator pos:line="103" pos:column="38">.<pos:position pos:line="103" pos:column="39"/></operator><name pos:line="103" pos:column="39">sa_addr<pos:position pos:line="103" pos:column="46"/></name></name></expr>;<pos:position pos:line="103" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="104" pos:column="9">endpoints<pos:position pos:line="104" pos:column="18"/></name><operator pos:line="104" pos:column="18">.<pos:position pos:line="104" pos:column="19"/></operator><name pos:line="104" pos:column="19">sae_dstaddrlen<pos:position pos:line="104" pos:column="33"/></name></name> <operator pos:line="104" pos:column="34">=<pos:position pos:line="104" pos:column="35"/></operator> <name><name pos:line="104" pos:column="36">addr<pos:position pos:line="104" pos:column="40"/></name><operator pos:line="104" pos:column="40">.<pos:position pos:line="104" pos:column="41"/></operator><name pos:line="104" pos:column="41">addrlen<pos:position pos:line="104" pos:column="48"/></name></name></expr>;<pos:position pos:line="104" pos:column="49"/></expr_stmt>

        <expr_stmt><expr><name pos:line="106" pos:column="9">rc<pos:position pos:line="106" pos:column="11"/></name> <operator pos:line="106" pos:column="12">=<pos:position pos:line="106" pos:column="13"/></operator> <call><name pos:line="106" pos:column="14">connectx<pos:position pos:line="106" pos:column="22"/></name><argument_list pos:line="106" pos:column="22">(<argument><expr><name pos:line="106" pos:column="23">sockfd<pos:position pos:line="106" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="106" pos:column="31">&amp;<pos:position pos:line="106" pos:column="36"/></operator><name pos:line="106" pos:column="32">endpoints<pos:position pos:line="106" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="43">SAE_ASSOCID_ANY<pos:position pos:line="106" pos:column="58"/></name></expr></argument>,
                      <argument><expr><name pos:line="107" pos:column="23">CONNECT_RESUME_ON_READ_WRITE<pos:position pos:line="107" pos:column="51"/></name> <operator pos:line="107" pos:column="52">|<pos:position pos:line="107" pos:column="53"/></operator> <name pos:line="107" pos:column="54">CONNECT_DATA_IDEMPOTENT<pos:position pos:line="107" pos:column="77"/></name></expr></argument>,
                      <argument><expr><name pos:line="108" pos:column="23">NULL<pos:position pos:line="108" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="108" pos:column="29">0<pos:position pos:line="108" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="108" pos:column="32">NULL<pos:position pos:line="108" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="38">NULL<pos:position pos:line="108" pos:column="42"/></name></expr></argument>)<pos:position pos:line="108" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="44"/></expr_stmt>
<cpp:ifdef pos:line="109" pos:column="1">#<cpp:directive pos:line="109" pos:column="2">ifdef<pos:position pos:line="109" pos:column="7"/></cpp:directive> <name pos:line="109" pos:column="8">HAVE_BUILTIN_AVAILABLE<pos:position pos:line="109" pos:column="30"/></name></cpp:ifdef>
      }<pos:position pos:line="110" pos:column="8"/></block></then>
      <else pos:line="111" pos:column="7">else <block pos:line="111" pos:column="12">{
        <expr_stmt><expr><name pos:line="112" pos:column="9">rc<pos:position pos:line="112" pos:column="11"/></name> <operator pos:line="112" pos:column="12">=<pos:position pos:line="112" pos:column="13"/></operator> <call><name pos:line="112" pos:column="14">connect<pos:position pos:line="112" pos:column="21"/></name><argument_list pos:line="112" pos:column="21">(<argument><expr><name pos:line="112" pos:column="22">sockfd<pos:position pos:line="112" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="112" pos:column="30">&amp;<pos:position pos:line="112" pos:column="35"/></operator><name><name pos:line="112" pos:column="31">addr<pos:position pos:line="112" pos:column="35"/></name><operator pos:line="112" pos:column="35">.<pos:position pos:line="112" pos:column="36"/></operator><name pos:line="112" pos:column="36">sa_addr<pos:position pos:line="112" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="112" pos:column="45">addr<pos:position pos:line="112" pos:column="49"/></name><operator pos:line="112" pos:column="49">.<pos:position pos:line="112" pos:column="50"/></operator><name pos:line="112" pos:column="50">addrlen<pos:position pos:line="112" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="112" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="59"/></expr_stmt>
      }<pos:position pos:line="113" pos:column="8"/></block></else></if>
<cpp:endif pos:line="114" pos:column="1">#<cpp:directive pos:line="114" pos:column="2">endif<pos:position pos:line="114" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="114" pos:column="8">/* HAVE_BUILTIN_AVAILABLE */</comment>
<cpp:elif pos:line="115" pos:column="1">#<cpp:directive pos:line="115" pos:column="2">elif<pos:position pos:line="115" pos:column="6"/></cpp:directive> <expr><call><name pos:line="115" pos:column="7">defined<pos:position pos:line="115" pos:column="14"/></name><argument_list pos:line="115" pos:column="14">(<argument><expr><name pos:line="115" pos:column="15">MSG_FASTOPEN<pos:position pos:line="115" pos:column="27"/></name></expr></argument>)<pos:position pos:line="115" pos:column="28"/></argument_list></call></expr></cpp:elif> <comment type="block" pos:line="115" pos:column="29">/* Linux */</comment>
      <if pos:line="116" pos:column="7">if<condition pos:line="116" pos:column="9">(<expr><name><name pos:line="116" pos:column="10">conn<pos:position pos:line="116" pos:column="14"/></name><operator pos:line="116" pos:column="14">-&gt;<pos:position pos:line="116" pos:column="19"/></operator><name pos:line="116" pos:column="16">given<pos:position pos:line="116" pos:column="21"/></name><operator pos:line="116" pos:column="21">-&gt;<pos:position pos:line="116" pos:column="26"/></operator><name pos:line="116" pos:column="23">flags<pos:position pos:line="116" pos:column="28"/></name></name> <operator pos:line="116" pos:column="29">&amp;<pos:position pos:line="116" pos:column="34"/></operator> <name pos:line="116" pos:column="31">PROTOPT_SSL<pos:position pos:line="116" pos:column="42"/></name></expr>)<pos:position pos:line="116" pos:column="43"/></condition><then pos:line="116" pos:column="43">
        <block type="pseudo"><expr_stmt><expr><name pos:line="117" pos:column="9">rc<pos:position pos:line="117" pos:column="11"/></name> <operator pos:line="117" pos:column="12">=<pos:position pos:line="117" pos:column="13"/></operator> <call><name pos:line="117" pos:column="14">connect<pos:position pos:line="117" pos:column="21"/></name><argument_list pos:line="117" pos:column="21">(<argument><expr><name pos:line="117" pos:column="22">sockfd<pos:position pos:line="117" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="117" pos:column="30">&amp;<pos:position pos:line="117" pos:column="35"/></operator><name><name pos:line="117" pos:column="31">addr<pos:position pos:line="117" pos:column="35"/></name><operator pos:line="117" pos:column="35">.<pos:position pos:line="117" pos:column="36"/></operator><name pos:line="117" pos:column="36">sa_addr<pos:position pos:line="117" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="117" pos:column="45">addr<pos:position pos:line="117" pos:column="49"/></name><operator pos:line="117" pos:column="49">.<pos:position pos:line="117" pos:column="50"/></operator><name pos:line="117" pos:column="50">addrlen<pos:position pos:line="117" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="117" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="59"/></expr_stmt></block></then>
      <else pos:line="118" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="119" pos:column="9">rc<pos:position pos:line="119" pos:column="11"/></name> <operator pos:line="119" pos:column="12">=<pos:position pos:line="119" pos:column="13"/></operator> <literal type="number" pos:line="119" pos:column="14">0<pos:position pos:line="119" pos:column="15"/></literal></expr>;<pos:position pos:line="119" pos:column="16"/></expr_stmt></block></else></if> <comment type="block" pos:line="119" pos:column="17">/* Do nothing */</comment>
<cpp:endif pos:line="120" pos:column="1">#<cpp:directive pos:line="120" pos:column="2">endif<pos:position pos:line="120" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="121" pos:column="6"/></block></then>
    <else pos:line="122" pos:column="5">else <block pos:line="122" pos:column="10">{
      <expr_stmt><expr><name pos:line="123" pos:column="7">rc<pos:position pos:line="123" pos:column="9"/></name> <operator pos:line="123" pos:column="10">=<pos:position pos:line="123" pos:column="11"/></operator> <call><name pos:line="123" pos:column="12">connect<pos:position pos:line="123" pos:column="19"/></name><argument_list pos:line="123" pos:column="19">(<argument><expr><name pos:line="123" pos:column="20">sockfd<pos:position pos:line="123" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="123" pos:column="28">&amp;<pos:position pos:line="123" pos:column="33"/></operator><name><name pos:line="123" pos:column="29">addr<pos:position pos:line="123" pos:column="33"/></name><operator pos:line="123" pos:column="33">.<pos:position pos:line="123" pos:column="34"/></operator><name pos:line="123" pos:column="34">sa_addr<pos:position pos:line="123" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="123" pos:column="43">addr<pos:position pos:line="123" pos:column="47"/></name><operator pos:line="123" pos:column="47">.<pos:position pos:line="123" pos:column="48"/></operator><name pos:line="123" pos:column="48">addrlen<pos:position pos:line="123" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="123" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="124" pos:column="6"/></block></else></if>

    <if pos:line="126" pos:column="5">if<condition pos:line="126" pos:column="7">(<expr><operator pos:line="126" pos:column="8">-<pos:position pos:line="126" pos:column="9"/></operator><literal type="number" pos:line="126" pos:column="9">1<pos:position pos:line="126" pos:column="10"/></literal> <operator pos:line="126" pos:column="11">==<pos:position pos:line="126" pos:column="13"/></operator> <name pos:line="126" pos:column="14">rc<pos:position pos:line="126" pos:column="16"/></name></expr>)<pos:position pos:line="126" pos:column="17"/></condition><then pos:line="126" pos:column="17">
      <block type="pseudo"><expr_stmt><expr><name pos:line="127" pos:column="7">error<pos:position pos:line="127" pos:column="12"/></name> <operator pos:line="127" pos:column="13">=<pos:position pos:line="127" pos:column="14"/></operator> <name pos:line="127" pos:column="15">SOCKERRNO<pos:position pos:line="127" pos:column="24"/></name></expr>;<pos:position pos:line="127" pos:column="25"/></expr_stmt></block></then></if>
  }<pos:position pos:line="128" pos:column="4"/></block></then>
  <else pos:line="129" pos:column="3">else <block pos:line="129" pos:column="8">{
    <expr_stmt><expr><operator pos:line="130" pos:column="5">*<pos:position pos:line="130" pos:column="6"/></operator><name pos:line="130" pos:column="6">sockp<pos:position pos:line="130" pos:column="11"/></name> <operator pos:line="130" pos:column="12">=<pos:position pos:line="130" pos:column="13"/></operator> <name pos:line="130" pos:column="14">sockfd<pos:position pos:line="130" pos:column="20"/></name></expr>;<pos:position pos:line="130" pos:column="21"/></expr_stmt>
    <return pos:line="131" pos:column="5">return <expr><name pos:line="131" pos:column="12">CURLE_OK<pos:position pos:line="131" pos:column="20"/></name></expr>;<pos:position pos:line="131" pos:column="21"/></return>
  }<pos:position pos:line="132" pos:column="4"/></block></else></if>

<cpp:ifdef pos:line="134" pos:column="1">#<cpp:directive pos:line="134" pos:column="2">ifdef<pos:position pos:line="134" pos:column="7"/></cpp:directive> <name pos:line="134" pos:column="8">ENABLE_IPV6<pos:position pos:line="134" pos:column="19"/></name></cpp:ifdef>
  <expr_stmt><expr><name><name pos:line="135" pos:column="3">conn<pos:position pos:line="135" pos:column="7"/></name><operator pos:line="135" pos:column="7">-&gt;<pos:position pos:line="135" pos:column="12"/></operator><name pos:line="135" pos:column="9">bits<pos:position pos:line="135" pos:column="13"/></name><operator pos:line="135" pos:column="13">.<pos:position pos:line="135" pos:column="14"/></operator><name pos:line="135" pos:column="14">ipv6<pos:position pos:line="135" pos:column="18"/></name></name> <operator pos:line="135" pos:column="19">=<pos:position pos:line="135" pos:column="20"/></operator> <ternary><condition><expr><operator pos:line="135" pos:column="21">(<pos:position pos:line="135" pos:column="22"/></operator><name><name pos:line="135" pos:column="22">addr<pos:position pos:line="135" pos:column="26"/></name><operator pos:line="135" pos:column="26">.<pos:position pos:line="135" pos:column="27"/></operator><name pos:line="135" pos:column="27">family<pos:position pos:line="135" pos:column="33"/></name></name> <operator pos:line="135" pos:column="34">==<pos:position pos:line="135" pos:column="36"/></operator> <name pos:line="135" pos:column="37">AF_INET6<pos:position pos:line="135" pos:column="45"/></name><operator pos:line="135" pos:column="45">)<pos:position pos:line="135" pos:column="46"/></operator></expr>?<pos:position pos:line="135" pos:column="47"/></condition><then><expr><name pos:line="135" pos:column="47">TRUE<pos:position pos:line="135" pos:column="51"/></name></expr></then><else pos:line="135" pos:column="51">:<expr><name pos:line="135" pos:column="52">FALSE<pos:position pos:line="135" pos:column="57"/></name></expr></else></ternary></expr>;<pos:position pos:line="135" pos:column="58"/></expr_stmt>
<cpp:endif pos:line="136" pos:column="1">#<cpp:directive pos:line="136" pos:column="2">endif<pos:position pos:line="136" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="138" pos:column="3">if<condition pos:line="138" pos:column="5">(<expr><operator pos:line="138" pos:column="6">-<pos:position pos:line="138" pos:column="7"/></operator><literal type="number" pos:line="138" pos:column="7">1<pos:position pos:line="138" pos:column="8"/></literal> <operator pos:line="138" pos:column="9">==<pos:position pos:line="138" pos:column="11"/></operator> <name pos:line="138" pos:column="12">rc<pos:position pos:line="138" pos:column="14"/></name></expr>)<pos:position pos:line="138" pos:column="15"/></condition><then pos:line="138" pos:column="15"> <block pos:line="138" pos:column="16">{
    <switch pos:line="139" pos:column="5">switch<condition pos:line="139" pos:column="11">(<expr><name pos:line="139" pos:column="12">error<pos:position pos:line="139" pos:column="17"/></name></expr>)<pos:position pos:line="139" pos:column="18"/></condition> <block pos:line="139" pos:column="19">{
    <case pos:line="140" pos:column="5">case <expr><name pos:line="140" pos:column="10">EINPROGRESS<pos:position pos:line="140" pos:column="21"/></name></expr>:<pos:position pos:line="140" pos:column="22"/></case>
    <case pos:line="141" pos:column="5">case <expr><name pos:line="141" pos:column="10">EWOULDBLOCK<pos:position pos:line="141" pos:column="21"/></name></expr>:<pos:position pos:line="141" pos:column="22"/></case>
<cpp:if pos:line="142" pos:column="1">#<cpp:directive pos:line="142" pos:column="2">if<pos:position pos:line="142" pos:column="4"/></cpp:directive> <expr><call><name pos:line="142" pos:column="5">defined<pos:position pos:line="142" pos:column="12"/></name><argument_list pos:line="142" pos:column="12">(<argument><expr><name pos:line="142" pos:column="13">EAGAIN<pos:position pos:line="142" pos:column="19"/></name></expr></argument>)<pos:position pos:line="142" pos:column="20"/></argument_list></call></expr></cpp:if>
<cpp:if pos:line="143" pos:column="1">#<cpp:directive pos:line="143" pos:column="2">if<pos:position pos:line="143" pos:column="4"/></cpp:directive> <expr><operator pos:line="143" pos:column="5">(<pos:position pos:line="143" pos:column="6"/></operator><name pos:line="143" pos:column="6">EAGAIN<pos:position pos:line="143" pos:column="12"/></name><operator pos:line="143" pos:column="12">)<pos:position pos:line="143" pos:column="13"/></operator> <operator pos:line="143" pos:column="14">!=<pos:position pos:line="143" pos:column="16"/></operator> <operator pos:line="143" pos:column="17">(<pos:position pos:line="143" pos:column="18"/></operator><name pos:line="143" pos:column="18">EWOULDBLOCK<pos:position pos:line="143" pos:column="29"/></name><operator pos:line="143" pos:column="29">)<pos:position pos:line="143" pos:column="30"/></operator></expr></cpp:if>
      <comment type="block" pos:line="144" pos:column="7">/* On some platforms EAGAIN and EWOULDBLOCK are the
       * same value, and on others they are different, hence
       * the odd #if
       */</comment>
    <case pos:line="148" pos:column="5">case <expr><name pos:line="148" pos:column="10">EAGAIN<pos:position pos:line="148" pos:column="16"/></name></expr>:<pos:position pos:line="148" pos:column="17"/></case>
<cpp:endif pos:line="149" pos:column="1">#<cpp:directive pos:line="149" pos:column="2">endif<pos:position pos:line="149" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="150" pos:column="1">#<cpp:directive pos:line="150" pos:column="2">endif<pos:position pos:line="150" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="151" pos:column="7">result<pos:position pos:line="151" pos:column="13"/></name> <operator pos:line="151" pos:column="14">=<pos:position pos:line="151" pos:column="15"/></operator> <name pos:line="151" pos:column="16">CURLE_OK<pos:position pos:line="151" pos:column="24"/></name></expr>;<pos:position pos:line="151" pos:column="25"/></expr_stmt>
      <break pos:line="152" pos:column="7">break;<pos:position pos:line="152" pos:column="13"/></break>

    <default pos:line="154" pos:column="5">default:<pos:position pos:line="154" pos:column="13"/></default>
      <comment type="block" pos:line="155" pos:column="7">/* unknown error, fallthrough and try another address! */</comment>
      <expr_stmt><expr><call><name pos:line="156" pos:column="7">infof<pos:position pos:line="156" pos:column="12"/></name><argument_list pos:line="156" pos:column="12">(<argument><expr><name pos:line="156" pos:column="13">data<pos:position pos:line="156" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="156" pos:column="19">"Immediate connect fail for %s: %s\n"<pos:position pos:line="156" pos:column="56"/></literal></expr></argument>,
            <argument><expr><name pos:line="157" pos:column="13">ipaddress<pos:position pos:line="157" pos:column="22"/></name></expr></argument>, <argument><expr><call><name pos:line="157" pos:column="24">Curl_strerror<pos:position pos:line="157" pos:column="37"/></name><argument_list pos:line="157" pos:column="37">(<argument><expr><name pos:line="157" pos:column="38">conn<pos:position pos:line="157" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="157" pos:column="44">error<pos:position pos:line="157" pos:column="49"/></name></expr></argument>)<pos:position pos:line="157" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="157" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="158" pos:column="7">data<pos:position pos:line="158" pos:column="11"/></name><operator pos:line="158" pos:column="11">-&gt;<pos:position pos:line="158" pos:column="16"/></operator><name pos:line="158" pos:column="13">state<pos:position pos:line="158" pos:column="18"/></name><operator pos:line="158" pos:column="18">.<pos:position pos:line="158" pos:column="19"/></operator><name pos:line="158" pos:column="19">os_errno<pos:position pos:line="158" pos:column="27"/></name></name> <operator pos:line="158" pos:column="28">=<pos:position pos:line="158" pos:column="29"/></operator> <name pos:line="158" pos:column="30">error<pos:position pos:line="158" pos:column="35"/></name></expr>;<pos:position pos:line="158" pos:column="36"/></expr_stmt>

      <comment type="block" pos:line="160" pos:column="7">/* connect failed */</comment>
      <expr_stmt><expr><call><name pos:line="161" pos:column="7">Curl_closesocket<pos:position pos:line="161" pos:column="23"/></name><argument_list pos:line="161" pos:column="23">(<argument><expr><name pos:line="161" pos:column="24">conn<pos:position pos:line="161" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="161" pos:column="30">sockfd<pos:position pos:line="161" pos:column="36"/></name></expr></argument>)<pos:position pos:line="161" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><name pos:line="162" pos:column="7">result<pos:position pos:line="162" pos:column="13"/></name> <operator pos:line="162" pos:column="14">=<pos:position pos:line="162" pos:column="15"/></operator> <name pos:line="162" pos:column="16">CURLE_COULDNT_CONNECT<pos:position pos:line="162" pos:column="37"/></name></expr>;<pos:position pos:line="162" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="163" pos:column="6"/></block></switch>
  }<pos:position pos:line="164" pos:column="4"/></block></then></if>

  <if pos:line="166" pos:column="3">if<condition pos:line="166" pos:column="5">(<expr><operator pos:line="166" pos:column="6">!<pos:position pos:line="166" pos:column="7"/></operator><name pos:line="166" pos:column="7">result<pos:position pos:line="166" pos:column="13"/></name></expr>)<pos:position pos:line="166" pos:column="14"/></condition><then pos:line="166" pos:column="14">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="167" pos:column="5">*<pos:position pos:line="167" pos:column="6"/></operator><name pos:line="167" pos:column="6">sockp<pos:position pos:line="167" pos:column="11"/></name> <operator pos:line="167" pos:column="12">=<pos:position pos:line="167" pos:column="13"/></operator> <name pos:line="167" pos:column="14">sockfd<pos:position pos:line="167" pos:column="20"/></name></expr>;<pos:position pos:line="167" pos:column="21"/></expr_stmt></block></then></if>

  <return pos:line="169" pos:column="3">return <expr><name pos:line="169" pos:column="10">result<pos:position pos:line="169" pos:column="16"/></name></expr>;<pos:position pos:line="169" pos:column="17"/></return>
}<pos:position pos:line="170" pos:column="2"/></block></function></unit>
