<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1532_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">Curl_gethostname<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">char<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">name<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">GETHOSTNAME_TYPE_ARG2<pos:position pos:line="1" pos:column="55"/></name></type> <name pos:line="1" pos:column="56">namelen<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:ifndef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifndef<pos:position pos:line="3" pos:column="8"/></cpp:directive> <name pos:line="3" pos:column="9">HAVE_GETHOSTNAME<pos:position pos:line="3" pos:column="25"/></name></cpp:ifndef>

  <comment type="block" pos:line="5" pos:column="3">/* Allow compilation and return failure when unavailable */</comment>
  <expr_stmt><expr><operator pos:line="6" pos:column="3">(<pos:position pos:line="6" pos:column="4"/></operator><name pos:line="6" pos:column="4">void<pos:position pos:line="6" pos:column="8"/></name><operator pos:line="6" pos:column="8">)<pos:position pos:line="6" pos:column="9"/></operator> <name pos:line="6" pos:column="10">name<pos:position pos:line="6" pos:column="14"/></name></expr>;<pos:position pos:line="6" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="7" pos:column="3">(<pos:position pos:line="7" pos:column="4"/></operator><name pos:line="7" pos:column="4">void<pos:position pos:line="7" pos:column="8"/></name><operator pos:line="7" pos:column="8">)<pos:position pos:line="7" pos:column="9"/></operator> <name pos:line="7" pos:column="10">namelen<pos:position pos:line="7" pos:column="17"/></name></expr>;<pos:position pos:line="7" pos:column="18"/></expr_stmt>
  <return pos:line="8" pos:column="3">return <expr><operator pos:line="8" pos:column="10">-<pos:position pos:line="8" pos:column="11"/></operator><literal type="number" pos:line="8" pos:column="11">1<pos:position pos:line="8" pos:column="12"/></literal></expr>;<pos:position pos:line="8" pos:column="13"/></return>

<cpp:else pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">else<pos:position pos:line="10" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">err<pos:position pos:line="11" pos:column="10"/></name></decl>;<pos:position pos:line="11" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">char<pos:position pos:line="12" pos:column="7"/></name> <modifier pos:line="12" pos:column="8">*<pos:position pos:line="12" pos:column="9"/></modifier></type><name pos:line="12" pos:column="9">dot<pos:position pos:line="12" pos:column="12"/></name></decl>;<pos:position pos:line="12" pos:column="13"/></decl_stmt>

<cpp:ifdef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifdef<pos:position pos:line="14" pos:column="7"/></cpp:directive> <name pos:line="14" pos:column="8">DEBUGBUILD<pos:position pos:line="14" pos:column="18"/></name></cpp:ifdef>

  <comment type="block" pos:line="16" pos:column="3">/* Override host name when environment variable CURL_GETHOSTNAME is set */</comment>
  <decl_stmt><decl><type><specifier pos:line="17" pos:column="3">const<pos:position pos:line="17" pos:column="8"/></specifier> <name pos:line="17" pos:column="9">char<pos:position pos:line="17" pos:column="13"/></name> <modifier pos:line="17" pos:column="14">*<pos:position pos:line="17" pos:column="15"/></modifier></type><name pos:line="17" pos:column="15">force_hostname<pos:position pos:line="17" pos:column="29"/></name> <init pos:line="17" pos:column="30">= <expr><call><name pos:line="17" pos:column="32">getenv<pos:position pos:line="17" pos:column="38"/></name><argument_list pos:line="17" pos:column="38">(<argument><expr><literal type="string" pos:line="17" pos:column="39">"CURL_GETHOSTNAME"<pos:position pos:line="17" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="59"/></decl_stmt>
  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><name pos:line="18" pos:column="6">force_hostname<pos:position pos:line="18" pos:column="20"/></name></expr>)<pos:position pos:line="18" pos:column="21"/></condition><then pos:line="18" pos:column="21"> <block pos:line="18" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">strncpy<pos:position pos:line="19" pos:column="12"/></name><argument_list pos:line="19" pos:column="12">(<argument><expr><name pos:line="19" pos:column="13">name<pos:position pos:line="19" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="19">force_hostname<pos:position pos:line="19" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="35">namelen<pos:position pos:line="19" pos:column="42"/></name></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="20" pos:column="5">err<pos:position pos:line="20" pos:column="8"/></name> <operator pos:line="20" pos:column="9">=<pos:position pos:line="20" pos:column="10"/></operator> <literal type="number" pos:line="20" pos:column="11">0<pos:position pos:line="20" pos:column="12"/></literal></expr>;<pos:position pos:line="20" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="21" pos:column="4"/></block></then>
  <else pos:line="22" pos:column="3">else <block pos:line="22" pos:column="8">{
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">name<pos:position pos:line="23" pos:column="9"/></name><index pos:line="23" pos:column="9">[<expr><literal type="number" pos:line="23" pos:column="10">0<pos:position pos:line="23" pos:column="11"/></literal></expr>]<pos:position pos:line="23" pos:column="12"/></index></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <literal type="char" pos:line="23" pos:column="15">'\0'<pos:position pos:line="23" pos:column="19"/></literal></expr>;<pos:position pos:line="23" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="24" pos:column="5">err<pos:position pos:line="24" pos:column="8"/></name> <operator pos:line="24" pos:column="9">=<pos:position pos:line="24" pos:column="10"/></operator> <call><name pos:line="24" pos:column="11">gethostname<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><name pos:line="24" pos:column="23">name<pos:position pos:line="24" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="29">namelen<pos:position pos:line="24" pos:column="36"/></name></expr></argument>)<pos:position pos:line="24" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="38"/></expr_stmt>
  }<pos:position pos:line="25" pos:column="4"/></block></else></if>

<cpp:else pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">else<pos:position pos:line="27" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="27" pos:column="7">/* DEBUGBUILD */</comment>

  <comment type="block" pos:line="29" pos:column="3">/* The call to system's gethostname() might get intercepted by the
     libhostname library when libcurl is built as a non-debug shared
     library when running the test suite. */</comment>
  <expr_stmt><expr><name><name pos:line="32" pos:column="3">name<pos:position pos:line="32" pos:column="7"/></name><index pos:line="32" pos:column="7">[<expr><literal type="number" pos:line="32" pos:column="8">0<pos:position pos:line="32" pos:column="9"/></literal></expr>]<pos:position pos:line="32" pos:column="10"/></index></name> <operator pos:line="32" pos:column="11">=<pos:position pos:line="32" pos:column="12"/></operator> <literal type="char" pos:line="32" pos:column="13">'\0'<pos:position pos:line="32" pos:column="17"/></literal></expr>;<pos:position pos:line="32" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="33" pos:column="3">err<pos:position pos:line="33" pos:column="6"/></name> <operator pos:line="33" pos:column="7">=<pos:position pos:line="33" pos:column="8"/></operator> <call><name pos:line="33" pos:column="9">gethostname<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><name pos:line="33" pos:column="21">name<pos:position pos:line="33" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="27">namelen<pos:position pos:line="33" pos:column="34"/></name></expr></argument>)<pos:position pos:line="33" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt>

<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name pos:line="37" pos:column="3">name<pos:position pos:line="37" pos:column="7"/></name><index pos:line="37" pos:column="7">[<expr><name pos:line="37" pos:column="8">namelen<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">-<pos:position pos:line="37" pos:column="17"/></operator> <literal type="number" pos:line="37" pos:column="18">1<pos:position pos:line="37" pos:column="19"/></literal></expr>]<pos:position pos:line="37" pos:column="20"/></index></name> <operator pos:line="37" pos:column="21">=<pos:position pos:line="37" pos:column="22"/></operator> <literal type="char" pos:line="37" pos:column="23">'\0'<pos:position pos:line="37" pos:column="27"/></literal></expr>;<pos:position pos:line="37" pos:column="28"/></expr_stmt>

  <if pos:line="39" pos:column="3">if<condition pos:line="39" pos:column="5">(<expr><name pos:line="39" pos:column="6">err<pos:position pos:line="39" pos:column="9"/></name></expr>)<pos:position pos:line="39" pos:column="10"/></condition><then pos:line="39" pos:column="10">
    <block type="pseudo"><return pos:line="40" pos:column="5">return <expr><name pos:line="40" pos:column="12">err<pos:position pos:line="40" pos:column="15"/></name></expr>;<pos:position pos:line="40" pos:column="16"/></return></block></then></if>

  <comment type="block" pos:line="42" pos:column="3">/* Truncate domain, leave only machine name */</comment>
  <expr_stmt><expr><name pos:line="43" pos:column="3">dot<pos:position pos:line="43" pos:column="6"/></name> <operator pos:line="43" pos:column="7">=<pos:position pos:line="43" pos:column="8"/></operator> <call><name pos:line="43" pos:column="9">strchr<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><name pos:line="43" pos:column="16">name<pos:position pos:line="43" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="43" pos:column="22">'.'<pos:position pos:line="43" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="27"/></expr_stmt>
  <if pos:line="44" pos:column="3">if<condition pos:line="44" pos:column="5">(<expr><name pos:line="44" pos:column="6">dot<pos:position pos:line="44" pos:column="9"/></name></expr>)<pos:position pos:line="44" pos:column="10"/></condition><then pos:line="44" pos:column="10">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="45" pos:column="5">*<pos:position pos:line="45" pos:column="6"/></operator><name pos:line="45" pos:column="6">dot<pos:position pos:line="45" pos:column="9"/></name> <operator pos:line="45" pos:column="10">=<pos:position pos:line="45" pos:column="11"/></operator> <literal type="char" pos:line="45" pos:column="12">'\0'<pos:position pos:line="45" pos:column="16"/></literal></expr>;<pos:position pos:line="45" pos:column="17"/></expr_stmt></block></then></if>

  <return pos:line="47" pos:column="3">return <expr><literal type="number" pos:line="47" pos:column="10">0<pos:position pos:line="47" pos:column="11"/></literal></expr>;<pos:position pos:line="47" pos:column="12"/></return>
<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif<pos:position pos:line="48" pos:column="7"/></cpp:directive></cpp:endif>

}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
