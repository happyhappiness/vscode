<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_139.cpp" pos:tabs="8"><function_decl><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name> <parameter_list pos:line="2" pos:column="6">(<parameter><decl><type><name pos:line="2" pos:column="7">ac<pos:position pos:line="2" pos:column="9"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="11">av<pos:position pos:line="2" pos:column="13"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="14"/></parameter_list>
     <decl_stmt><decl><type><name pos:line="3" pos:column="6">int<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">ac<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
     <decl_stmt><decl><type><name pos:line="4" pos:column="6">char<pos:position pos:line="4" pos:column="10"/></name> <modifier pos:line="4" pos:column="11">*<pos:position pos:line="4" pos:column="12"/></modifier></type><name><name pos:line="4" pos:column="12">av<pos:position pos:line="4" pos:column="14"/></name><index pos:line="4" pos:column="14">[]<pos:position pos:line="4" pos:column="16"/></index></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">buff<pos:position pos:line="6" pos:column="12"/></name><index pos:line="6" pos:column="12">[<expr><name pos:line="6" pos:column="13">MAX_BUFF_LEN<pos:position pos:line="6" pos:column="25"/></name> <operator pos:line="6" pos:column="26">+<pos:position pos:line="6" pos:column="27"/></operator> <literal type="number" pos:line="6" pos:column="28">1<pos:position pos:line="6" pos:column="29"/></literal></expr>]<pos:position pos:line="6" pos:column="30"/></index></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">time_t<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">d<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="9" pos:column="3">(<pos:position pos:line="9" pos:column="4"/></operator><name pos:line="9" pos:column="4">void<pos:position pos:line="9" pos:column="8"/></name><operator pos:line="9" pos:column="8">)<pos:position pos:line="9" pos:column="9"/></operator> <call><name pos:line="9" pos:column="10">printf<pos:position pos:line="9" pos:column="16"/></name> <argument_list pos:line="9" pos:column="17">(<argument><expr><literal type="string" pos:line="9" pos:column="18">"Enter date, or blank line to exit.\n\t&gt; "<pos:position pos:line="9" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="62"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="10" pos:column="3">(<pos:position pos:line="10" pos:column="4"/></operator><name pos:line="10" pos:column="4">void<pos:position pos:line="10" pos:column="8"/></name><operator pos:line="10" pos:column="8">)<pos:position pos:line="10" pos:column="9"/></operator> <call><name pos:line="10" pos:column="10">fflush<pos:position pos:line="10" pos:column="16"/></name> <argument_list pos:line="10" pos:column="17">(<argument><expr><name pos:line="10" pos:column="18">stdout<pos:position pos:line="10" pos:column="24"/></name></expr></argument>)<pos:position pos:line="10" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="12" pos:column="3">buff<pos:position pos:line="12" pos:column="7"/></name><index pos:line="12" pos:column="7">[<expr><name pos:line="12" pos:column="8">MAX_BUFF_LEN<pos:position pos:line="12" pos:column="20"/></name></expr>]<pos:position pos:line="12" pos:column="21"/></index></name> <operator pos:line="12" pos:column="22">=<pos:position pos:line="12" pos:column="23"/></operator> <literal type="number" pos:line="12" pos:column="24">0<pos:position pos:line="12" pos:column="25"/></literal></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>
  <while pos:line="13" pos:column="3">while <condition pos:line="13" pos:column="9">(<expr><call><name pos:line="13" pos:column="10">fgets<pos:position pos:line="13" pos:column="15"/></name> <argument_list pos:line="13" pos:column="16">(<argument><expr><name pos:line="13" pos:column="17">buff<pos:position pos:line="13" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="23">MAX_BUFF_LEN<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="37">stdin<pos:position pos:line="13" pos:column="42"/></name></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call> <operator pos:line="13" pos:column="44">&amp;&amp;<pos:position pos:line="13" pos:column="54"/></operator> <name><name pos:line="13" pos:column="47">buff<pos:position pos:line="13" pos:column="51"/></name><index pos:line="13" pos:column="51">[<expr><literal type="number" pos:line="13" pos:column="52">0<pos:position pos:line="13" pos:column="53"/></literal></expr>]<pos:position pos:line="13" pos:column="54"/></index></name></expr>)<pos:position pos:line="13" pos:column="55"/></condition>
    <block pos:line="14" pos:column="5">{
      <expr_stmt><expr><name pos:line="15" pos:column="7">d<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <call><name pos:line="15" pos:column="11">curl_getdate<pos:position pos:line="15" pos:column="23"/></name> <argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">buff<pos:position pos:line="15" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="31">(<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="32">time_t<pos:position pos:line="15" pos:column="38"/></name> <operator pos:line="15" pos:column="39">*<pos:position pos:line="15" pos:column="40"/></operator><operator pos:line="15" pos:column="40">)<pos:position pos:line="15" pos:column="41"/></operator> <name pos:line="15" pos:column="42">NULL<pos:position pos:line="15" pos:column="46"/></name></expr></argument>)<pos:position pos:line="15" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="48"/></expr_stmt>
      <if pos:line="16" pos:column="7">if <condition pos:line="16" pos:column="10">(<expr><name pos:line="16" pos:column="11">d<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">==<pos:position pos:line="16" pos:column="15"/></operator> <operator pos:line="16" pos:column="16">-<pos:position pos:line="16" pos:column="17"/></operator><literal type="number" pos:line="16" pos:column="17">1<pos:position pos:line="16" pos:column="18"/></literal></expr>)<pos:position pos:line="16" pos:column="19"/></condition><then pos:line="16" pos:column="19">
	<block type="pseudo"><expr_stmt><expr><operator pos:line="17" pos:column="9">(<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">void<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">)<pos:position pos:line="17" pos:column="15"/></operator> <call><name pos:line="17" pos:column="16">printf<pos:position pos:line="17" pos:column="22"/></name> <argument_list pos:line="17" pos:column="23">(<argument><expr><literal type="string" pos:line="17" pos:column="24">"Bad format - couldn't convert.\n"<pos:position pos:line="17" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="60"/></expr_stmt></block></then>
      <else pos:line="18" pos:column="7">else
	<block type="pseudo"><expr_stmt><expr><operator pos:line="19" pos:column="9">(<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">void<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">)<pos:position pos:line="19" pos:column="15"/></operator> <call><name pos:line="19" pos:column="16">printf<pos:position pos:line="19" pos:column="22"/></name> <argument_list pos:line="19" pos:column="23">(<argument><expr><literal type="string" pos:line="19" pos:column="24">"%s"<pos:position pos:line="19" pos:column="28"/></literal></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="30">ctime<pos:position pos:line="19" pos:column="35"/></name> <argument_list pos:line="19" pos:column="36">(<argument><expr><operator pos:line="19" pos:column="37">&amp;<pos:position pos:line="19" pos:column="42"/></operator><name pos:line="19" pos:column="38">d<pos:position pos:line="19" pos:column="39"/></name></expr></argument>)<pos:position pos:line="19" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt></block></else></if>
      <expr_stmt><expr><operator pos:line="20" pos:column="7">(<pos:position pos:line="20" pos:column="8"/></operator><name pos:line="20" pos:column="8">void<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">)<pos:position pos:line="20" pos:column="13"/></operator> <call><name pos:line="20" pos:column="14">printf<pos:position pos:line="20" pos:column="20"/></name> <argument_list pos:line="20" pos:column="21">(<argument><expr><literal type="string" pos:line="20" pos:column="22">"\t&gt; "<pos:position pos:line="20" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="30"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="21" pos:column="7">(<pos:position pos:line="21" pos:column="8"/></operator><name pos:line="21" pos:column="8">void<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">)<pos:position pos:line="21" pos:column="13"/></operator> <call><name pos:line="21" pos:column="14">fflush<pos:position pos:line="21" pos:column="20"/></name> <argument_list pos:line="21" pos:column="21">(<argument><expr><name pos:line="21" pos:column="22">stdout<pos:position pos:line="21" pos:column="28"/></name></expr></argument>)<pos:position pos:line="21" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></while>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">exit<pos:position pos:line="23" pos:column="7"/></name> <argument_list pos:line="23" pos:column="8">(<argument><expr><literal type="number" pos:line="23" pos:column="9">0<pos:position pos:line="23" pos:column="10"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="11"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="12"/></expr_stmt>
  <comment type="block" pos:line="24" pos:column="3">/* NOTREACHED */</comment>
}<pos:position pos:line="25" pos:column="2"/></block></function_decl></unit>
