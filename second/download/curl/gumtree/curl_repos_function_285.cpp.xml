<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_285.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">Curl_ossl_send<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name><name pos:line="1" pos:column="20">struct<pos:position pos:line="1" pos:column="26"/></name> <name pos:line="1" pos:column="27">connectdata<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">conn<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>,
                   <parameter><decl><type><name pos:line="2" pos:column="20">int<pos:position pos:line="2" pos:column="23"/></name></type> <name pos:line="2" pos:column="24">sockindex<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>,
                   <parameter><decl><type><name pos:line="3" pos:column="20">void<pos:position pos:line="3" pos:column="24"/></name> <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier></type><name pos:line="3" pos:column="26">mem<pos:position pos:line="3" pos:column="29"/></name></decl></parameter>,
                   <parameter><decl><type><name pos:line="4" pos:column="20">size_t<pos:position pos:line="4" pos:column="26"/></name></type> <name pos:line="4" pos:column="27">len<pos:position pos:line="4" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="31"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <comment type="block" pos:line="6" pos:column="3">/* SSL_write() is said to return 'int' while write() and send() returns
     'size_t' */</comment>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">err<pos:position pos:line="8" pos:column="10"/></name></decl>;<pos:position pos:line="8" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">char<pos:position pos:line="9" pos:column="7"/></name></type> <name><name pos:line="9" pos:column="8">error_buffer<pos:position pos:line="9" pos:column="20"/></name><index pos:line="9" pos:column="20">[<expr><literal type="number" pos:line="9" pos:column="21">120<pos:position pos:line="9" pos:column="24"/></literal></expr>]<pos:position pos:line="9" pos:column="25"/></index></name></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt> <comment type="block" pos:line="9" pos:column="27">/* OpenSSL documents that this must be at least 120
                             bytes long. */</comment>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">unsigned<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">long<pos:position pos:line="11" pos:column="16"/></name></type> <name pos:line="11" pos:column="17">sslerror<pos:position pos:line="11" pos:column="25"/></name></decl>;<pos:position pos:line="11" pos:column="26"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">rc<pos:position pos:line="12" pos:column="9"/></name> <init pos:line="12" pos:column="10">= <expr><call><name pos:line="12" pos:column="12">SSL_write<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name><name pos:line="12" pos:column="22">conn<pos:position pos:line="12" pos:column="26"/></name><operator pos:line="12" pos:column="26">-&gt;<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="28">ssl<pos:position pos:line="12" pos:column="31"/></name><index pos:line="12" pos:column="31">[<expr><name pos:line="12" pos:column="32">sockindex<pos:position pos:line="12" pos:column="41"/></name></expr>]<pos:position pos:line="12" pos:column="42"/></index></name><operator pos:line="12" pos:column="42">.<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="43">handle<pos:position pos:line="12" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="51">mem<pos:position pos:line="12" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="56">(<pos:position pos:line="12" pos:column="57"/></operator><name pos:line="12" pos:column="57">int<pos:position pos:line="12" pos:column="60"/></name><operator pos:line="12" pos:column="60">)<pos:position pos:line="12" pos:column="61"/></operator><name pos:line="12" pos:column="61">len<pos:position pos:line="12" pos:column="64"/></name></expr></argument>)<pos:position pos:line="12" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="66"/></decl_stmt>

  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name pos:line="14" pos:column="6">rc<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">&lt;<pos:position pos:line="14" pos:column="13"/></operator> <literal type="number" pos:line="14" pos:column="11">0<pos:position pos:line="14" pos:column="12"/></literal></expr>)<pos:position pos:line="14" pos:column="13"/></condition><then pos:line="14" pos:column="13"> <block pos:line="14" pos:column="14">{
    <expr_stmt><expr><name pos:line="15" pos:column="5">err<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <call><name pos:line="15" pos:column="11">SSL_get_error<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name><name pos:line="15" pos:column="25">conn<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">-&gt;<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="31">ssl<pos:position pos:line="15" pos:column="34"/></name><index pos:line="15" pos:column="34">[<expr><name pos:line="15" pos:column="35">sockindex<pos:position pos:line="15" pos:column="44"/></name></expr>]<pos:position pos:line="15" pos:column="45"/></index></name><operator pos:line="15" pos:column="45">.<pos:position pos:line="15" pos:column="46"/></operator><name pos:line="15" pos:column="46">handle<pos:position pos:line="15" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="54">rc<pos:position pos:line="15" pos:column="56"/></name></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="58"/></expr_stmt>

    <switch pos:line="17" pos:column="5">switch<condition pos:line="17" pos:column="11">(<expr><name pos:line="17" pos:column="12">err<pos:position pos:line="17" pos:column="15"/></name></expr>)<pos:position pos:line="17" pos:column="16"/></condition> <block pos:line="17" pos:column="17">{
    <case pos:line="18" pos:column="5">case <expr><name pos:line="18" pos:column="10">SSL_ERROR_WANT_READ<pos:position pos:line="18" pos:column="29"/></name></expr>:<pos:position pos:line="18" pos:column="30"/></case>
    <case pos:line="19" pos:column="5">case <expr><name pos:line="19" pos:column="10">SSL_ERROR_WANT_WRITE<pos:position pos:line="19" pos:column="30"/></name></expr>:<pos:position pos:line="19" pos:column="31"/></case>
      <comment type="block" pos:line="20" pos:column="7">/* The operation did not complete; the same TLS/SSL I/O function
         should be called again later. This is basicly an EWOULDBLOCK
         equivalent. */</comment>
      <return pos:line="23" pos:column="7">return <expr><literal type="number" pos:line="23" pos:column="14">0<pos:position pos:line="23" pos:column="15"/></literal></expr>;<pos:position pos:line="23" pos:column="16"/></return>
    <case pos:line="24" pos:column="5">case <expr><name pos:line="24" pos:column="10">SSL_ERROR_SYSCALL<pos:position pos:line="24" pos:column="27"/></name></expr>:<pos:position pos:line="24" pos:column="28"/></case>
      <expr_stmt><expr><call><name pos:line="25" pos:column="7">failf<pos:position pos:line="25" pos:column="12"/></name><argument_list pos:line="25" pos:column="12">(<argument><expr><name><name pos:line="25" pos:column="13">conn<pos:position pos:line="25" pos:column="17"/></name><operator pos:line="25" pos:column="17">-&gt;<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="19">data<pos:position pos:line="25" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="25">"SSL_write() returned SYSCALL, errno = %d\n"<pos:position pos:line="25" pos:column="69"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="26" pos:column="13">Curl_ourerrno<pos:position pos:line="26" pos:column="26"/></name><argument_list pos:line="26" pos:column="26">()<pos:position pos:line="26" pos:column="28"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="30"/></expr_stmt>
      <return pos:line="27" pos:column="7">return <expr><operator pos:line="27" pos:column="14">-<pos:position pos:line="27" pos:column="15"/></operator><literal type="number" pos:line="27" pos:column="15">1<pos:position pos:line="27" pos:column="16"/></literal></expr>;<pos:position pos:line="27" pos:column="17"/></return>
    <case pos:line="28" pos:column="5">case <expr><name pos:line="28" pos:column="10">SSL_ERROR_SSL<pos:position pos:line="28" pos:column="23"/></name></expr>:<pos:position pos:line="28" pos:column="24"/></case>
      <comment type="block" pos:line="29" pos:column="7">/*  A failure in the SSL library occurred, usually a protocol error.
          The OpenSSL error queue contains more information on the error. */</comment>
      <expr_stmt><expr><name pos:line="31" pos:column="7">sslerror<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">=<pos:position pos:line="31" pos:column="17"/></operator> <call><name pos:line="31" pos:column="18">ERR_get_error<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">()<pos:position pos:line="31" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="32" pos:column="7">failf<pos:position pos:line="32" pos:column="12"/></name><argument_list pos:line="32" pos:column="12">(<argument><expr><name><name pos:line="32" pos:column="13">conn<pos:position pos:line="32" pos:column="17"/></name><operator pos:line="32" pos:column="17">-&gt;<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="19">data<pos:position pos:line="32" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="25">"SSL_write() error: %s\n"<pos:position pos:line="32" pos:column="50"/></literal></expr></argument>,
            <argument><expr><call><name pos:line="33" pos:column="13">ERR_error_string<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><name pos:line="33" pos:column="30">sslerror<pos:position pos:line="33" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="40">error_buffer<pos:position pos:line="33" pos:column="52"/></name></expr></argument>)<pos:position pos:line="33" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt>
      <return pos:line="34" pos:column="7">return <expr><operator pos:line="34" pos:column="14">-<pos:position pos:line="34" pos:column="15"/></operator><literal type="number" pos:line="34" pos:column="15">1<pos:position pos:line="34" pos:column="16"/></literal></expr>;<pos:position pos:line="34" pos:column="17"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></switch>
    <comment type="block" pos:line="36" pos:column="5">/* a true error */</comment>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">failf<pos:position pos:line="37" pos:column="10"/></name><argument_list pos:line="37" pos:column="10">(<argument><expr><name><name pos:line="37" pos:column="11">conn<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">-&gt;<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="17">data<pos:position pos:line="37" pos:column="21"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="23">"SSL_write() return error %d\n"<pos:position pos:line="37" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="56">err<pos:position pos:line="37" pos:column="59"/></name></expr></argument>)<pos:position pos:line="37" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="61"/></expr_stmt>
    <return pos:line="38" pos:column="5">return <expr><operator pos:line="38" pos:column="12">-<pos:position pos:line="38" pos:column="13"/></operator><literal type="number" pos:line="38" pos:column="13">1<pos:position pos:line="38" pos:column="14"/></literal></expr>;<pos:position pos:line="38" pos:column="15"/></return>
  }<pos:position pos:line="39" pos:column="4"/></block></then></if>
  <return pos:line="40" pos:column="3">return <expr><name pos:line="40" pos:column="10">rc<pos:position pos:line="40" pos:column="12"/></name></expr>;<pos:position pos:line="40" pos:column="13"/></return> <comment type="block" pos:line="40" pos:column="14">/* number of bytes */</comment>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
