<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_783_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">fuzz_tlv_to_string<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">TLV<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">tlv<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="35"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">tlvstr<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>

  <comment type="block" pos:line="5" pos:column="3">/* Allocate enough space, plus a null terminator */</comment>
  <expr_stmt><expr><name pos:line="6" pos:column="3">tlvstr<pos:position pos:line="6" pos:column="9"/></name> <operator pos:line="6" pos:column="10">=<pos:position pos:line="6" pos:column="11"/></operator> <operator pos:line="6" pos:column="12">(<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">char<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></operator><operator pos:line="6" pos:column="19">)<pos:position pos:line="6" pos:column="20"/></operator><call><name pos:line="6" pos:column="20">malloc<pos:position pos:line="6" pos:column="26"/></name><argument_list pos:line="6" pos:column="26">(<argument><expr><name><name pos:line="6" pos:column="27">tlv<pos:position pos:line="6" pos:column="30"/></name><operator pos:line="6" pos:column="30">-&gt;<pos:position pos:line="6" pos:column="35"/></operator><name pos:line="6" pos:column="32">length<pos:position pos:line="6" pos:column="38"/></name></name> <operator pos:line="6" pos:column="39">+<pos:position pos:line="6" pos:column="40"/></operator> <literal type="number" pos:line="6" pos:column="41">1<pos:position pos:line="6" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="44"/></expr_stmt>

  <if pos:line="8" pos:column="3">if<condition pos:line="8" pos:column="5">(<expr><name pos:line="8" pos:column="6">tlvstr<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">!=<pos:position pos:line="8" pos:column="15"/></operator> <name pos:line="8" pos:column="16">NULL<pos:position pos:line="8" pos:column="20"/></name></expr>)<pos:position pos:line="8" pos:column="21"/></condition><then pos:line="8" pos:column="21"> <block pos:line="8" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">memcpy<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name pos:line="9" pos:column="12">tlvstr<pos:position pos:line="9" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="20">tlv<pos:position pos:line="9" pos:column="23"/></name><operator pos:line="9" pos:column="23">-&gt;<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="25">value<pos:position pos:line="9" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="32">tlv<pos:position pos:line="9" pos:column="35"/></name><operator pos:line="9" pos:column="35">-&gt;<pos:position pos:line="9" pos:column="40"/></operator><name pos:line="9" pos:column="37">length<pos:position pos:line="9" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">tlvstr<pos:position pos:line="10" pos:column="11"/></name><index pos:line="10" pos:column="11">[<expr><name><name pos:line="10" pos:column="12">tlv<pos:position pos:line="10" pos:column="15"/></name><operator pos:line="10" pos:column="15">-&gt;<pos:position pos:line="10" pos:column="20"/></operator><name pos:line="10" pos:column="17">length<pos:position pos:line="10" pos:column="23"/></name></name></expr>]<pos:position pos:line="10" pos:column="24"/></index></name> <operator pos:line="10" pos:column="25">=<pos:position pos:line="10" pos:column="26"/></operator> <literal type="number" pos:line="10" pos:column="27">0<pos:position pos:line="10" pos:column="28"/></literal></expr>;<pos:position pos:line="10" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="11" pos:column="4"/></block></then></if>

  <return pos:line="13" pos:column="3">return <expr><name pos:line="13" pos:column="10">tlvstr<pos:position pos:line="13" pos:column="16"/></name></expr>;<pos:position pos:line="13" pos:column="17"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
