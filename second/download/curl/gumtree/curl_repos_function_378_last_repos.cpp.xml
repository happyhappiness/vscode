<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_378_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type> <name pos:line="1" pos:column="28">argv<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list> <block pos:line="1" pos:column="34">{


<decl_stmt><decl><type><name pos:line="4" pos:column="1">void<pos:position pos:line="4" pos:column="5"/></name> <modifier pos:line="4" pos:column="6">*<pos:position pos:line="4" pos:column="7"/></modifier></type> <name pos:line="4" pos:column="8">libptr<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
<function_decl><type><specifier pos:line="5" pos:column="1">const<pos:position pos:line="5" pos:column="6"/></specifier> <name pos:line="5" pos:column="7">char<pos:position pos:line="5" pos:column="11"/></name> <modifier pos:line="5" pos:column="12">*<pos:position pos:line="5" pos:column="13"/></modifier></type> (<modifier pos:line="5" pos:column="15">*<pos:position pos:line="5" pos:column="16"/></modifier><name pos:line="5" pos:column="16">ssl_version<pos:position pos:line="5" pos:column="27"/></name>)<parameter_list pos:line="5" pos:column="28">(<parameter><decl><type><name pos:line="5" pos:column="29">int<pos:position pos:line="5" pos:column="32"/></name></type> <name pos:line="5" pos:column="33">t<pos:position pos:line="5" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="35"/></parameter_list>;<pos:position pos:line="5" pos:column="36"/></function_decl>
<decl_stmt><decl><type><specifier pos:line="6" pos:column="1">const<pos:position pos:line="6" pos:column="6"/></specifier> <name pos:line="6" pos:column="7">char<pos:position pos:line="6" pos:column="11"/></name> <modifier pos:line="6" pos:column="12">*<pos:position pos:line="6" pos:column="13"/></modifier></type> <name pos:line="6" pos:column="14">version<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>

   <if pos:line="8" pos:column="4">if <condition pos:line="8" pos:column="7">(<expr><name pos:line="8" pos:column="8">argc<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">&lt;<pos:position pos:line="8" pos:column="17"/></operator> <literal type="number" pos:line="8" pos:column="15">1<pos:position pos:line="8" pos:column="16"/></literal></expr>)<pos:position pos:line="8" pos:column="17"/></condition><then pos:line="8" pos:column="17"> <block pos:line="8" pos:column="18">{
       <expr_stmt><expr><call><name pos:line="9" pos:column="8">puts<pos:position pos:line="9" pos:column="12"/></name><argument_list pos:line="9" pos:column="12">(<argument><expr><literal type="string" pos:line="9" pos:column="13">"report_openssl_version filename"<pos:position pos:line="9" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="48"/></expr_stmt>
       <expr_stmt><expr><call><name pos:line="10" pos:column="8">exit<pos:position pos:line="10" pos:column="12"/></name><argument_list pos:line="10" pos:column="12">(<argument><expr><literal type="number" pos:line="10" pos:column="13">1<pos:position pos:line="10" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="16"/></expr_stmt>
   }<pos:position pos:line="11" pos:column="5"/></block></then></if>

   <expr_stmt><expr><name pos:line="13" pos:column="4">libptr<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <call><name pos:line="13" pos:column="13">dlopen<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><name><name pos:line="13" pos:column="20">argv<pos:position pos:line="13" pos:column="24"/></name><index pos:line="13" pos:column="24">[<expr><literal type="number" pos:line="13" pos:column="25">1<pos:position pos:line="13" pos:column="26"/></literal></expr>]<pos:position pos:line="13" pos:column="27"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="29">0<pos:position pos:line="13" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt>

   <expr_stmt><expr><name pos:line="15" pos:column="4">ssl_version<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <operator pos:line="15" pos:column="18">(<pos:position pos:line="15" pos:column="19"/></operator><specifier pos:line="15" pos:column="19">const<pos:position pos:line="15" pos:column="24"/></specifier> <name pos:line="15" pos:column="25">char<pos:position pos:line="15" pos:column="29"/></name> <operator pos:line="15" pos:column="30">*<pos:position pos:line="15" pos:column="31"/></operator> <call pos:line="15" pos:column="32">(<modifier pos:line="15" pos:column="33">*<pos:position pos:line="15" pos:column="34"/></modifier>)<argument_list pos:line="15" pos:column="35">(<argument><expr><name pos:line="15" pos:column="36">int<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call><operator pos:line="15" pos:column="40">)<pos:position pos:line="15" pos:column="41"/></operator><call><name pos:line="15" pos:column="41">dlsym<pos:position pos:line="15" pos:column="46"/></name><argument_list pos:line="15" pos:column="46">(<argument><expr><name pos:line="15" pos:column="47">libptr<pos:position pos:line="15" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="55">"SSLeay_version"<pos:position pos:line="15" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="73"/></expr_stmt>
   <if pos:line="16" pos:column="4">if <condition pos:line="16" pos:column="7">(<expr><operator pos:line="16" pos:column="8">(<pos:position pos:line="16" pos:column="9"/></operator><name pos:line="16" pos:column="9">void<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">*<pos:position pos:line="16" pos:column="15"/></operator><operator pos:line="16" pos:column="15">)<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="16">ssl_version<pos:position pos:line="16" pos:column="27"/></name> <operator pos:line="16" pos:column="28">==<pos:position pos:line="16" pos:column="30"/></operator> <name pos:line="16" pos:column="31">NULL<pos:position pos:line="16" pos:column="35"/></name></expr>)<pos:position pos:line="16" pos:column="36"/></condition><then pos:line="16" pos:column="36"> <block pos:line="16" pos:column="37">{
      <expr_stmt><expr><name pos:line="17" pos:column="7">ssl_version<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <operator pos:line="17" pos:column="21">(<pos:position pos:line="17" pos:column="22"/></operator><specifier pos:line="17" pos:column="22">const<pos:position pos:line="17" pos:column="27"/></specifier> <name pos:line="17" pos:column="28">char<pos:position pos:line="17" pos:column="32"/></name> <operator pos:line="17" pos:column="33">*<pos:position pos:line="17" pos:column="34"/></operator> <call pos:line="17" pos:column="35">(<modifier pos:line="17" pos:column="36">*<pos:position pos:line="17" pos:column="37"/></modifier>)<argument_list pos:line="17" pos:column="38">(<argument><expr><name pos:line="17" pos:column="39">int<pos:position pos:line="17" pos:column="42"/></name></expr></argument>)<pos:position pos:line="17" pos:column="43"/></argument_list></call><operator pos:line="17" pos:column="43">)<pos:position pos:line="17" pos:column="44"/></operator><call><name pos:line="17" pos:column="44">dlsym<pos:position pos:line="17" pos:column="49"/></name><argument_list pos:line="17" pos:column="49">(<argument><expr><name pos:line="17" pos:column="50">libptr<pos:position pos:line="17" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="58">"ssleay_version"<pos:position pos:line="17" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="76"/></expr_stmt>
      <if pos:line="18" pos:column="7">if <condition pos:line="18" pos:column="10">(<expr><operator pos:line="18" pos:column="11">(<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">void<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">*<pos:position pos:line="18" pos:column="18"/></operator><operator pos:line="18" pos:column="18">)<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="19">ssl_version<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">==<pos:position pos:line="18" pos:column="33"/></operator> <name pos:line="18" pos:column="34">NULL<pos:position pos:line="18" pos:column="38"/></name></expr>)<pos:position pos:line="18" pos:column="39"/></condition><then pos:line="18" pos:column="39"> <block pos:line="18" pos:column="40">{
         <expr_stmt><expr><name pos:line="19" pos:column="10">ssl_version<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <operator pos:line="19" pos:column="24">(<pos:position pos:line="19" pos:column="25"/></operator><specifier pos:line="19" pos:column="25">const<pos:position pos:line="19" pos:column="30"/></specifier> <name pos:line="19" pos:column="31">char<pos:position pos:line="19" pos:column="35"/></name> <operator pos:line="19" pos:column="36">*<pos:position pos:line="19" pos:column="37"/></operator> <call pos:line="19" pos:column="38">(<modifier pos:line="19" pos:column="39">*<pos:position pos:line="19" pos:column="40"/></modifier>)<argument_list pos:line="19" pos:column="41">(<argument><expr><name pos:line="19" pos:column="42">int<pos:position pos:line="19" pos:column="45"/></name></expr></argument>)<pos:position pos:line="19" pos:column="46"/></argument_list></call><operator pos:line="19" pos:column="46">)<pos:position pos:line="19" pos:column="47"/></operator><call><name pos:line="19" pos:column="47">dlsym<pos:position pos:line="19" pos:column="52"/></name><argument_list pos:line="19" pos:column="52">(<argument><expr><name pos:line="19" pos:column="53">libptr<pos:position pos:line="19" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="61">"SSLEAY_VERSION"<pos:position pos:line="19" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="79"/></expr_stmt>
      }<pos:position pos:line="20" pos:column="8"/></block></then></if>
   }<pos:position pos:line="21" pos:column="5"/></block></then></if>

   <expr_stmt><expr><call><name pos:line="23" pos:column="4">dlclose<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><name pos:line="23" pos:column="12">libptr<pos:position pos:line="23" pos:column="18"/></name></expr></argument>)<pos:position pos:line="23" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="20"/></expr_stmt>

   <if pos:line="25" pos:column="4">if <condition pos:line="25" pos:column="7">(<expr><operator pos:line="25" pos:column="8">(<pos:position pos:line="25" pos:column="9"/></operator><name pos:line="25" pos:column="9">void<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">*<pos:position pos:line="25" pos:column="15"/></operator><operator pos:line="25" pos:column="15">)<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="16">ssl_version<pos:position pos:line="25" pos:column="27"/></name> <operator pos:line="25" pos:column="28">==<pos:position pos:line="25" pos:column="30"/></operator> <name pos:line="25" pos:column="31">NULL<pos:position pos:line="25" pos:column="35"/></name></expr>)<pos:position pos:line="25" pos:column="36"/></condition><then pos:line="25" pos:column="36"> <block pos:line="25" pos:column="37">{
      <expr_stmt><expr><call><name pos:line="26" pos:column="7">puts<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><literal type="string" pos:line="26" pos:column="12">"Unable to lookup version of OpenSSL"<pos:position pos:line="26" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="51"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="27" pos:column="7">exit<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><literal type="number" pos:line="27" pos:column="12">1<pos:position pos:line="27" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="15"/></expr_stmt>
   }<pos:position pos:line="28" pos:column="5"/></block></then></if>

   <expr_stmt><expr><name pos:line="30" pos:column="4">version<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <call><name pos:line="30" pos:column="14">ssl_version<pos:position pos:line="30" pos:column="25"/></name><argument_list pos:line="30" pos:column="25">(<argument><expr><name pos:line="30" pos:column="26">SSLEAY_VERSION<pos:position pos:line="30" pos:column="40"/></name></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>

   <expr_stmt><expr><call><name pos:line="32" pos:column="4">puts<pos:position pos:line="32" pos:column="8"/></name><argument_list pos:line="32" pos:column="8">(<argument><expr><name pos:line="32" pos:column="9">version<pos:position pos:line="32" pos:column="16"/></name></expr></argument>)<pos:position pos:line="32" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="18"/></expr_stmt>

   <comment type="block" pos:line="34" pos:column="4">/* Was a symbol argument given? */</comment>
   <if pos:line="35" pos:column="4">if <condition pos:line="35" pos:column="7">(<expr><name pos:line="35" pos:column="8">argc<pos:position pos:line="35" pos:column="12"/></name> <operator pos:line="35" pos:column="13">&gt;<pos:position pos:line="35" pos:column="17"/></operator> <literal type="number" pos:line="35" pos:column="15">1<pos:position pos:line="35" pos:column="16"/></literal></expr>)<pos:position pos:line="35" pos:column="17"/></condition><then pos:line="35" pos:column="17"> <block pos:line="35" pos:column="18">{
      <decl_stmt><decl><type><name pos:line="36" pos:column="7">int<pos:position pos:line="36" pos:column="10"/></name></type> <name pos:line="36" pos:column="11">status<pos:position pos:line="36" pos:column="17"/></name></decl>;<pos:position pos:line="36" pos:column="18"/></decl_stmt>
      <decl_stmt><decl><type><name><name pos:line="37" pos:column="7">struct<pos:position pos:line="37" pos:column="13"/></name> <name pos:line="37" pos:column="14">dsc$descriptor_s<pos:position pos:line="37" pos:column="30"/></name></name></type> <name pos:line="37" pos:column="31">symbol_dsc<pos:position pos:line="37" pos:column="41"/></name></decl>;<pos:position pos:line="37" pos:column="42"/></decl_stmt>
      <decl_stmt><decl><type><name><name pos:line="38" pos:column="7">struct<pos:position pos:line="38" pos:column="13"/></name> <name pos:line="38" pos:column="14">dsc$descriptor_s<pos:position pos:line="38" pos:column="30"/></name></name></type> <name pos:line="38" pos:column="31">value_dsc<pos:position pos:line="38" pos:column="40"/></name></decl>;<pos:position pos:line="38" pos:column="41"/></decl_stmt>
      <decl_stmt><decl><type><specifier pos:line="39" pos:column="7">const<pos:position pos:line="39" pos:column="12"/></specifier> <name pos:line="39" pos:column="13">unsigned<pos:position pos:line="39" pos:column="21"/></name> <name pos:line="39" pos:column="22">long<pos:position pos:line="39" pos:column="26"/></name></type> <name pos:line="39" pos:column="27">table_type<pos:position pos:line="39" pos:column="37"/></name> <init pos:line="39" pos:column="38">= <expr><name pos:line="39" pos:column="40">LIB$K_CLI_LOCAL_SYM<pos:position pos:line="39" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="39" pos:column="60"/></decl_stmt>

      <expr_stmt><expr><name><name pos:line="41" pos:column="7">symbol_dsc<pos:position pos:line="41" pos:column="17"/></name><operator pos:line="41" pos:column="17">.<pos:position pos:line="41" pos:column="18"/></operator><name pos:line="41" pos:column="18">dsc$a_pointer<pos:position pos:line="41" pos:column="31"/></name></name> <operator pos:line="41" pos:column="32">=<pos:position pos:line="41" pos:column="33"/></operator> <name><name pos:line="41" pos:column="34">argv<pos:position pos:line="41" pos:column="38"/></name><index pos:line="41" pos:column="38">[<expr><literal type="number" pos:line="41" pos:column="39">2<pos:position pos:line="41" pos:column="40"/></literal></expr>]<pos:position pos:line="41" pos:column="41"/></index></name></expr>;<pos:position pos:line="41" pos:column="42"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="42" pos:column="7">symbol_dsc<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">.<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="18">dsc$w_length<pos:position pos:line="42" pos:column="30"/></name></name> <operator pos:line="42" pos:column="31">=<pos:position pos:line="42" pos:column="32"/></operator> <call><name pos:line="42" pos:column="33">strlen<pos:position pos:line="42" pos:column="39"/></name><argument_list pos:line="42" pos:column="39">(<argument><expr><name><name pos:line="42" pos:column="40">argv<pos:position pos:line="42" pos:column="44"/></name><index pos:line="42" pos:column="44">[<expr><literal type="number" pos:line="42" pos:column="45">2<pos:position pos:line="42" pos:column="46"/></literal></expr>]<pos:position pos:line="42" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="42" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="43" pos:column="7">symbol_dsc<pos:position pos:line="43" pos:column="17"/></name><operator pos:line="43" pos:column="17">.<pos:position pos:line="43" pos:column="18"/></operator><name pos:line="43" pos:column="18">dsc$b_dtype<pos:position pos:line="43" pos:column="29"/></name></name> <operator pos:line="43" pos:column="30">=<pos:position pos:line="43" pos:column="31"/></operator> <name pos:line="43" pos:column="32">DSC$K_DTYPE_T<pos:position pos:line="43" pos:column="45"/></name></expr>;<pos:position pos:line="43" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="44" pos:column="7">symbol_dsc<pos:position pos:line="44" pos:column="17"/></name><operator pos:line="44" pos:column="17">.<pos:position pos:line="44" pos:column="18"/></operator><name pos:line="44" pos:column="18">dsc$b_class<pos:position pos:line="44" pos:column="29"/></name></name> <operator pos:line="44" pos:column="30">=<pos:position pos:line="44" pos:column="31"/></operator> <name pos:line="44" pos:column="32">DSC$K_CLASS_S<pos:position pos:line="44" pos:column="45"/></name></expr>;<pos:position pos:line="44" pos:column="46"/></expr_stmt>

      <expr_stmt><expr><name><name pos:line="46" pos:column="7">value_dsc<pos:position pos:line="46" pos:column="16"/></name><operator pos:line="46" pos:column="16">.<pos:position pos:line="46" pos:column="17"/></operator><name pos:line="46" pos:column="17">dsc$a_pointer<pos:position pos:line="46" pos:column="30"/></name></name> <operator pos:line="46" pos:column="31">=<pos:position pos:line="46" pos:column="32"/></operator> <operator pos:line="46" pos:column="33">(<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="34">char<pos:position pos:line="46" pos:column="38"/></name> <operator pos:line="46" pos:column="39">*<pos:position pos:line="46" pos:column="40"/></operator><operator pos:line="46" pos:column="40">)<pos:position pos:line="46" pos:column="41"/></operator><name pos:line="46" pos:column="41">version<pos:position pos:line="46" pos:column="48"/></name></expr>;<pos:position pos:line="46" pos:column="49"/></expr_stmt> <comment type="block" pos:line="46" pos:column="50">/* Cast ok */</comment>
      <expr_stmt><expr><name><name pos:line="47" pos:column="7">value_dsc<pos:position pos:line="47" pos:column="16"/></name><operator pos:line="47" pos:column="16">.<pos:position pos:line="47" pos:column="17"/></operator><name pos:line="47" pos:column="17">dsc$w_length<pos:position pos:line="47" pos:column="29"/></name></name> <operator pos:line="47" pos:column="30">=<pos:position pos:line="47" pos:column="31"/></operator> <call><name pos:line="47" pos:column="32">strlen<pos:position pos:line="47" pos:column="38"/></name><argument_list pos:line="47" pos:column="38">(<argument><expr><name pos:line="47" pos:column="39">version<pos:position pos:line="47" pos:column="46"/></name></expr></argument>)<pos:position pos:line="47" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="48" pos:column="7">value_dsc<pos:position pos:line="48" pos:column="16"/></name><operator pos:line="48" pos:column="16">.<pos:position pos:line="48" pos:column="17"/></operator><name pos:line="48" pos:column="17">dsc$b_dtype<pos:position pos:line="48" pos:column="28"/></name></name> <operator pos:line="48" pos:column="29">=<pos:position pos:line="48" pos:column="30"/></operator> <name pos:line="48" pos:column="31">DSC$K_DTYPE_T<pos:position pos:line="48" pos:column="44"/></name></expr>;<pos:position pos:line="48" pos:column="45"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="49" pos:column="7">value_dsc<pos:position pos:line="49" pos:column="16"/></name><operator pos:line="49" pos:column="16">.<pos:position pos:line="49" pos:column="17"/></operator><name pos:line="49" pos:column="17">dsc$b_class<pos:position pos:line="49" pos:column="28"/></name></name> <operator pos:line="49" pos:column="29">=<pos:position pos:line="49" pos:column="30"/></operator> <name pos:line="49" pos:column="31">DSC$K_CLASS_S<pos:position pos:line="49" pos:column="44"/></name></expr>;<pos:position pos:line="49" pos:column="45"/></expr_stmt>

      <expr_stmt><expr><name pos:line="51" pos:column="7">status<pos:position pos:line="51" pos:column="13"/></name> <operator pos:line="51" pos:column="14">=<pos:position pos:line="51" pos:column="15"/></operator> <call><name pos:line="51" pos:column="16">LIB$SET_SYMBOL<pos:position pos:line="51" pos:column="30"/></name><argument_list pos:line="51" pos:column="30">(<argument><expr><operator pos:line="51" pos:column="31">&amp;<pos:position pos:line="51" pos:column="36"/></operator><name pos:line="51" pos:column="32">symbol_dsc<pos:position pos:line="51" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="44">&amp;<pos:position pos:line="51" pos:column="49"/></operator><name pos:line="51" pos:column="45">value_dsc<pos:position pos:line="51" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="56">&amp;<pos:position pos:line="51" pos:column="61"/></operator><name pos:line="51" pos:column="57">table_type<pos:position pos:line="51" pos:column="67"/></name></expr></argument>)<pos:position pos:line="51" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="69"/></expr_stmt>
      <if pos:line="52" pos:column="7">if <condition pos:line="52" pos:column="10">(<expr><operator pos:line="52" pos:column="11">!<pos:position pos:line="52" pos:column="12"/></operator><call><name pos:line="52" pos:column="12">$VMS_STATUS_SUCCESS<pos:position pos:line="52" pos:column="31"/></name><argument_list pos:line="52" pos:column="31">(<argument><expr><name pos:line="52" pos:column="32">status<pos:position pos:line="52" pos:column="38"/></name></expr></argument>)<pos:position pos:line="52" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="40"/></condition><then pos:line="52" pos:column="40"> <block pos:line="52" pos:column="41">{
         <expr_stmt><expr><call><name pos:line="53" pos:column="10">exit<pos:position pos:line="53" pos:column="14"/></name><argument_list pos:line="53" pos:column="14">(<argument><expr><name pos:line="53" pos:column="15">status<pos:position pos:line="53" pos:column="21"/></name></expr></argument>)<pos:position pos:line="53" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="23"/></expr_stmt>
      }<pos:position pos:line="54" pos:column="8"/></block></then></if>
   }<pos:position pos:line="55" pos:column="5"/></block></then></if>

   <expr_stmt><expr><call><name pos:line="57" pos:column="4">exit<pos:position pos:line="57" pos:column="8"/></name><argument_list pos:line="57" pos:column="8">(<argument><expr><literal type="number" pos:line="57" pos:column="9">0<pos:position pos:line="57" pos:column="10"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="11"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="12"/></expr_stmt>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
