<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1454.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">CURLMcode<pos:position pos:line="1" pos:column="10"/></name></type> <name pos:line="1" pos:column="11">curl_multi_remove_handle<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">CURLM<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">multi_handle<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
                                   <parameter><decl><type><name pos:line="2" pos:column="36">CURL<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">curl_handle<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="4" pos:column="3">struct<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">Curl_multi<pos:position pos:line="4" pos:column="20"/></name></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">multi<pos:position pos:line="4" pos:column="27"/></name><init pos:line="4" pos:column="27">=<expr><operator pos:line="4" pos:column="28">(<pos:position pos:line="4" pos:column="29"/></operator>struct <name pos:line="4" pos:column="36">Curl_multi<pos:position pos:line="4" pos:column="46"/></name> <operator pos:line="4" pos:column="47">*<pos:position pos:line="4" pos:column="48"/></operator><operator pos:line="4" pos:column="48">)<pos:position pos:line="4" pos:column="49"/></operator><name pos:line="4" pos:column="49">multi_handle<pos:position pos:line="4" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="62"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">SessionHandle<pos:position pos:line="5" pos:column="23"/></name></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">easy<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><name pos:line="5" pos:column="32">curl_handle<pos:position pos:line="5" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="44"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">SessionHandle<pos:position pos:line="6" pos:column="23"/></name></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">data<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><name pos:line="6" pos:column="32">easy<pos:position pos:line="6" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">bool<pos:position pos:line="7" pos:column="7"/></name></type> <name pos:line="7" pos:column="8">premature<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">bool<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">easy_owns_conn<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">curl_llist_element<pos:position pos:line="9" pos:column="28"/></name></name> <modifier pos:line="9" pos:column="29">*<pos:position pos:line="9" pos:column="30"/></modifier></type><name pos:line="9" pos:column="30">e<pos:position pos:line="9" pos:column="31"/></name></decl>;<pos:position pos:line="9" pos:column="32"/></decl_stmt>

  <comment type="block" pos:line="11" pos:column="3">/* First, make some basic checks that the CURLM handle is a good handle */</comment>
  <if pos:line="12" pos:column="3">if<condition pos:line="12" pos:column="5">(<expr><operator pos:line="12" pos:column="6">!<pos:position pos:line="12" pos:column="7"/></operator><call><name pos:line="12" pos:column="7">GOOD_MULTI_HANDLE<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">(<argument><expr><name pos:line="12" pos:column="25">multi<pos:position pos:line="12" pos:column="30"/></name></expr></argument>)<pos:position pos:line="12" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="32"/></condition><then pos:line="12" pos:column="32">
    <block type="pseudo"><return pos:line="13" pos:column="5">return <expr><name pos:line="13" pos:column="12">CURLM_BAD_HANDLE<pos:position pos:line="13" pos:column="28"/></name></expr>;<pos:position pos:line="13" pos:column="29"/></return></block></then></if>

  <comment type="block" pos:line="15" pos:column="3">/* Verify that we got a somewhat good easy handle too */</comment>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><operator pos:line="16" pos:column="6">!<pos:position pos:line="16" pos:column="7"/></operator><call><name pos:line="16" pos:column="7">GOOD_EASY_HANDLE<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><name pos:line="16" pos:column="24">curl_handle<pos:position pos:line="16" pos:column="35"/></name></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="37"/></condition><then pos:line="16" pos:column="37">
    <block type="pseudo"><return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">CURLM_BAD_EASY_HANDLE<pos:position pos:line="17" pos:column="33"/></name></expr>;<pos:position pos:line="17" pos:column="34"/></return></block></then></if>

  <comment type="block" pos:line="19" pos:column="3">/* Prevent users from trying to remove same easy handle more than once */</comment>
  <if pos:line="20" pos:column="3">if<condition pos:line="20" pos:column="5">(<expr><operator pos:line="20" pos:column="6">!<pos:position pos:line="20" pos:column="7"/></operator><name><name pos:line="20" pos:column="7">data<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">-&gt;<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="13">multi<pos:position pos:line="20" pos:column="18"/></name></name></expr>)<pos:position pos:line="20" pos:column="19"/></condition><then pos:line="20" pos:column="19">
    <block type="pseudo"><return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">CURLM_OK<pos:position pos:line="21" pos:column="20"/></name></expr>;<pos:position pos:line="21" pos:column="21"/></return></block></then></if> <comment type="block" pos:line="21" pos:column="22">/* it is already removed so let's say it is fine! */</comment>


  <expr_stmt><expr><name pos:line="24" pos:column="3">premature<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <ternary><condition><expr><operator pos:line="24" pos:column="15">(<pos:position pos:line="24" pos:column="16"/></operator><name><name pos:line="24" pos:column="16">data<pos:position pos:line="24" pos:column="20"/></name><operator pos:line="24" pos:column="20">-&gt;<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="22">mstate<pos:position pos:line="24" pos:column="28"/></name></name> <operator pos:line="24" pos:column="29">&lt;<pos:position pos:line="24" pos:column="33"/></operator> <name pos:line="24" pos:column="31">CURLM_STATE_COMPLETED<pos:position pos:line="24" pos:column="52"/></name><operator pos:line="24" pos:column="52">)<pos:position pos:line="24" pos:column="53"/></operator></expr> ?<pos:position pos:line="24" pos:column="55"/></condition><then pos:line="24" pos:column="55"> <expr><name pos:line="24" pos:column="56">TRUE<pos:position pos:line="24" pos:column="60"/></name></expr> <pos:position pos:line="24" pos:column="61"/></then><else pos:line="24" pos:column="61">: <expr><name pos:line="24" pos:column="63">FALSE<pos:position pos:line="24" pos:column="68"/></name></expr></else></ternary></expr>;<pos:position pos:line="24" pos:column="69"/></expr_stmt>
  <expr_stmt><expr><name pos:line="25" pos:column="3">easy_owns_conn<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <ternary><condition><expr><operator pos:line="25" pos:column="20">(<pos:position pos:line="25" pos:column="21"/></operator><name><name pos:line="25" pos:column="21">data<pos:position pos:line="25" pos:column="25"/></name><operator pos:line="25" pos:column="25">-&gt;<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="27">easy_conn<pos:position pos:line="25" pos:column="36"/></name></name> <operator pos:line="25" pos:column="37">&amp;&amp;<pos:position pos:line="25" pos:column="47"/></operator> <operator pos:line="25" pos:column="40">(<pos:position pos:line="25" pos:column="41"/></operator><name><name pos:line="25" pos:column="41">data<pos:position pos:line="25" pos:column="45"/></name><operator pos:line="25" pos:column="45">-&gt;<pos:position pos:line="25" pos:column="50"/></operator><name pos:line="25" pos:column="47">easy_conn<pos:position pos:line="25" pos:column="56"/></name><operator pos:line="25" pos:column="56">-&gt;<pos:position pos:line="25" pos:column="61"/></operator><name pos:line="25" pos:column="58">data<pos:position pos:line="25" pos:column="62"/></name></name> <operator pos:line="25" pos:column="63">==<pos:position pos:line="25" pos:column="65"/></operator> <name pos:line="25" pos:column="66">easy<pos:position pos:line="25" pos:column="70"/></name><operator pos:line="25" pos:column="70">)<pos:position pos:line="25" pos:column="71"/></operator><operator pos:line="25" pos:column="71">)<pos:position pos:line="25" pos:column="72"/></operator></expr> ?<pos:position pos:line="25" pos:column="74"/></condition><then pos:line="25" pos:column="74">
    <expr><name pos:line="26" pos:column="5">TRUE<pos:position pos:line="26" pos:column="9"/></name></expr> <pos:position pos:line="26" pos:column="10"/></then><else pos:line="26" pos:column="10">: <expr><name pos:line="26" pos:column="12">FALSE<pos:position pos:line="26" pos:column="17"/></name></expr></else></ternary></expr>;<pos:position pos:line="26" pos:column="18"/></expr_stmt>

  <comment type="block" pos:line="28" pos:column="3">/* If the 'state' is not INIT or COMPLETED, we might need to do something
     nice to put the easy_handle in a good known state when this returns. */</comment>
  <if pos:line="30" pos:column="3">if<condition pos:line="30" pos:column="5">(<expr><name pos:line="30" pos:column="6">premature<pos:position pos:line="30" pos:column="15"/></name></expr>)<pos:position pos:line="30" pos:column="16"/></condition><then pos:line="30" pos:column="16">
    <comment type="block" pos:line="31" pos:column="5">/* this handle is "alive" so we need to count down the total number of
       alive connections when this is removed */</comment>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="33" pos:column="5">multi<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">-&gt;<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="12">num_alive<pos:position pos:line="33" pos:column="21"/></name></name><operator pos:line="33" pos:column="21">--<pos:position pos:line="33" pos:column="23"/></operator></expr>;<pos:position pos:line="33" pos:column="24"/></expr_stmt></block></then></if>

  <if pos:line="35" pos:column="3">if<condition pos:line="35" pos:column="5">(<expr><name><name pos:line="35" pos:column="6">data<pos:position pos:line="35" pos:column="10"/></name><operator pos:line="35" pos:column="10">-&gt;<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="12">easy_conn<pos:position pos:line="35" pos:column="21"/></name></name> <operator pos:line="35" pos:column="22">&amp;&amp;<pos:position pos:line="35" pos:column="32"/></operator>
     <name><name pos:line="36" pos:column="6">data<pos:position pos:line="36" pos:column="10"/></name><operator pos:line="36" pos:column="10">-&gt;<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="12">mstate<pos:position pos:line="36" pos:column="18"/></name></name> <operator pos:line="36" pos:column="19">&gt;<pos:position pos:line="36" pos:column="23"/></operator> <name pos:line="36" pos:column="21">CURLM_STATE_DO<pos:position pos:line="36" pos:column="35"/></name> <operator pos:line="36" pos:column="36">&amp;&amp;<pos:position pos:line="36" pos:column="46"/></operator>
     <name><name pos:line="37" pos:column="6">data<pos:position pos:line="37" pos:column="10"/></name><operator pos:line="37" pos:column="10">-&gt;<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="12">mstate<pos:position pos:line="37" pos:column="18"/></name></name> <operator pos:line="37" pos:column="19">&lt;<pos:position pos:line="37" pos:column="23"/></operator> <name pos:line="37" pos:column="21">CURLM_STATE_COMPLETED<pos:position pos:line="37" pos:column="42"/></name></expr>)<pos:position pos:line="37" pos:column="43"/></condition><then pos:line="37" pos:column="43"> <block pos:line="37" pos:column="44">{
    <comment type="block" pos:line="38" pos:column="5">/* If the handle is in a pipeline and has started sending off its
       request but not received its response yet, we need to close
       connection. */</comment>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">connclose<pos:position pos:line="41" pos:column="14"/></name><argument_list pos:line="41" pos:column="14">(<argument><expr><name><name pos:line="41" pos:column="15">data<pos:position pos:line="41" pos:column="19"/></name><operator pos:line="41" pos:column="19">-&gt;<pos:position pos:line="41" pos:column="24"/></operator><name pos:line="41" pos:column="21">easy_conn<pos:position pos:line="41" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="32">"Removed with partial response"<pos:position pos:line="41" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="65"/></expr_stmt>
    <comment type="block" pos:line="42" pos:column="5">/* Set connection owner so that Curl_done() closes it.
       We can safely do this here since connection is killed. */</comment>
    <expr_stmt><expr><name><name pos:line="44" pos:column="5">data<pos:position pos:line="44" pos:column="9"/></name><operator pos:line="44" pos:column="9">-&gt;<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="11">easy_conn<pos:position pos:line="44" pos:column="20"/></name><operator pos:line="44" pos:column="20">-&gt;<pos:position pos:line="44" pos:column="25"/></operator><name pos:line="44" pos:column="22">data<pos:position pos:line="44" pos:column="26"/></name></name> <operator pos:line="44" pos:column="27">=<pos:position pos:line="44" pos:column="28"/></operator> <name pos:line="44" pos:column="29">easy<pos:position pos:line="44" pos:column="33"/></name></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="45" pos:column="5">easy_owns_conn<pos:position pos:line="45" pos:column="19"/></name> <operator pos:line="45" pos:column="20">=<pos:position pos:line="45" pos:column="21"/></operator> <name pos:line="45" pos:column="22">TRUE<pos:position pos:line="45" pos:column="26"/></name></expr>;<pos:position pos:line="45" pos:column="27"/></expr_stmt>
  }<pos:position pos:line="46" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="48" pos:column="3">/* The timer must be shut down before data-&gt;multi is set to NULL,
     else the timenode will remain in the splay tree after
     curl_easy_cleanup is called. */</comment>
  <expr_stmt><expr><call><name pos:line="51" pos:column="3">Curl_expire<pos:position pos:line="51" pos:column="14"/></name><argument_list pos:line="51" pos:column="14">(<argument><expr><name pos:line="51" pos:column="15">data<pos:position pos:line="51" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="21">0<pos:position pos:line="51" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="24"/></expr_stmt>

  <comment type="block" pos:line="53" pos:column="3">/* destroy the timeout list that is held in the easy handle */</comment>
  <if pos:line="54" pos:column="3">if<condition pos:line="54" pos:column="5">(<expr><name><name pos:line="54" pos:column="6">data<pos:position pos:line="54" pos:column="10"/></name><operator pos:line="54" pos:column="10">-&gt;<pos:position pos:line="54" pos:column="15"/></operator><name pos:line="54" pos:column="12">state<pos:position pos:line="54" pos:column="17"/></name><operator pos:line="54" pos:column="17">.<pos:position pos:line="54" pos:column="18"/></operator><name pos:line="54" pos:column="18">timeoutlist<pos:position pos:line="54" pos:column="29"/></name></name></expr>)<pos:position pos:line="54" pos:column="30"/></condition><then pos:line="54" pos:column="30"> <block pos:line="54" pos:column="31">{
    <expr_stmt><expr><call><name pos:line="55" pos:column="5">Curl_llist_destroy<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><name><name pos:line="55" pos:column="24">data<pos:position pos:line="55" pos:column="28"/></name><operator pos:line="55" pos:column="28">-&gt;<pos:position pos:line="55" pos:column="33"/></operator><name pos:line="55" pos:column="30">state<pos:position pos:line="55" pos:column="35"/></name><operator pos:line="55" pos:column="35">.<pos:position pos:line="55" pos:column="36"/></operator><name pos:line="55" pos:column="36">timeoutlist<pos:position pos:line="55" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="49">NULL<pos:position pos:line="55" pos:column="53"/></name></expr></argument>)<pos:position pos:line="55" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="56" pos:column="5">data<pos:position pos:line="56" pos:column="9"/></name><operator pos:line="56" pos:column="9">-&gt;<pos:position pos:line="56" pos:column="14"/></operator><name pos:line="56" pos:column="11">state<pos:position pos:line="56" pos:column="16"/></name><operator pos:line="56" pos:column="16">.<pos:position pos:line="56" pos:column="17"/></operator><name pos:line="56" pos:column="17">timeoutlist<pos:position pos:line="56" pos:column="28"/></name></name> <operator pos:line="56" pos:column="29">=<pos:position pos:line="56" pos:column="30"/></operator> <name pos:line="56" pos:column="31">NULL<pos:position pos:line="56" pos:column="35"/></name></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt>
  }<pos:position pos:line="57" pos:column="4"/></block></then></if>

  <if pos:line="59" pos:column="3">if<condition pos:line="59" pos:column="5">(<expr><name><name pos:line="59" pos:column="6">data<pos:position pos:line="59" pos:column="10"/></name><operator pos:line="59" pos:column="10">-&gt;<pos:position pos:line="59" pos:column="15"/></operator><name pos:line="59" pos:column="12">dns<pos:position pos:line="59" pos:column="15"/></name><operator pos:line="59" pos:column="15">.<pos:position pos:line="59" pos:column="16"/></operator><name pos:line="59" pos:column="16">hostcachetype<pos:position pos:line="59" pos:column="29"/></name></name> <operator pos:line="59" pos:column="30">==<pos:position pos:line="59" pos:column="32"/></operator> <name pos:line="59" pos:column="33">HCACHE_MULTI<pos:position pos:line="59" pos:column="45"/></name></expr>)<pos:position pos:line="59" pos:column="46"/></condition><then pos:line="59" pos:column="46"> <block pos:line="59" pos:column="47">{
    <comment type="block" pos:line="60" pos:column="5">/* stop using the multi handle's DNS cache */</comment>
    <expr_stmt><expr><name><name pos:line="61" pos:column="5">data<pos:position pos:line="61" pos:column="9"/></name><operator pos:line="61" pos:column="9">-&gt;<pos:position pos:line="61" pos:column="14"/></operator><name pos:line="61" pos:column="11">dns<pos:position pos:line="61" pos:column="14"/></name><operator pos:line="61" pos:column="14">.<pos:position pos:line="61" pos:column="15"/></operator><name pos:line="61" pos:column="15">hostcache<pos:position pos:line="61" pos:column="24"/></name></name> <operator pos:line="61" pos:column="25">=<pos:position pos:line="61" pos:column="26"/></operator> <name pos:line="61" pos:column="27">NULL<pos:position pos:line="61" pos:column="31"/></name></expr>;<pos:position pos:line="61" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="62" pos:column="5">data<pos:position pos:line="62" pos:column="9"/></name><operator pos:line="62" pos:column="9">-&gt;<pos:position pos:line="62" pos:column="14"/></operator><name pos:line="62" pos:column="11">dns<pos:position pos:line="62" pos:column="14"/></name><operator pos:line="62" pos:column="14">.<pos:position pos:line="62" pos:column="15"/></operator><name pos:line="62" pos:column="15">hostcachetype<pos:position pos:line="62" pos:column="28"/></name></name> <operator pos:line="62" pos:column="29">=<pos:position pos:line="62" pos:column="30"/></operator> <name pos:line="62" pos:column="31">HCACHE_NONE<pos:position pos:line="62" pos:column="42"/></name></expr>;<pos:position pos:line="62" pos:column="43"/></expr_stmt>
  }<pos:position pos:line="63" pos:column="4"/></block></then></if>

  <if pos:line="65" pos:column="3">if<condition pos:line="65" pos:column="5">(<expr><name><name pos:line="65" pos:column="6">data<pos:position pos:line="65" pos:column="10"/></name><operator pos:line="65" pos:column="10">-&gt;<pos:position pos:line="65" pos:column="15"/></operator><name pos:line="65" pos:column="12">easy_conn<pos:position pos:line="65" pos:column="21"/></name></name></expr>)<pos:position pos:line="65" pos:column="22"/></condition><then pos:line="65" pos:column="22"> <block pos:line="65" pos:column="23">{

    <comment type="block" pos:line="67" pos:column="5">/* we must call Curl_done() here (if we still "own it") so that we don't
       leave a half-baked one around */</comment>
    <if pos:line="69" pos:column="5">if<condition pos:line="69" pos:column="7">(<expr><name pos:line="69" pos:column="8">easy_owns_conn<pos:position pos:line="69" pos:column="22"/></name></expr>)<pos:position pos:line="69" pos:column="23"/></condition><then pos:line="69" pos:column="23"> <block pos:line="69" pos:column="24">{

      <comment type="block" pos:line="71" pos:column="7">/* Curl_done() clears the conn-&gt;data field to lose the association
         between the easy handle and the connection

         Note that this ignores the return code simply because there's
         nothing really useful to do with it anyway! */</comment>
      <expr_stmt><expr><operator pos:line="76" pos:column="7">(<pos:position pos:line="76" pos:column="8"/></operator><name pos:line="76" pos:column="8">void<pos:position pos:line="76" pos:column="12"/></name><operator pos:line="76" pos:column="12">)<pos:position pos:line="76" pos:column="13"/></operator><call><name pos:line="76" pos:column="13">Curl_done<pos:position pos:line="76" pos:column="22"/></name><argument_list pos:line="76" pos:column="22">(<argument><expr><operator pos:line="76" pos:column="23">&amp;<pos:position pos:line="76" pos:column="28"/></operator><name><name pos:line="76" pos:column="24">data<pos:position pos:line="76" pos:column="28"/></name><operator pos:line="76" pos:column="28">-&gt;<pos:position pos:line="76" pos:column="33"/></operator><name pos:line="76" pos:column="30">easy_conn<pos:position pos:line="76" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="41">data<pos:position pos:line="76" pos:column="45"/></name><operator pos:line="76" pos:column="45">-&gt;<pos:position pos:line="76" pos:column="50"/></operator><name pos:line="76" pos:column="47">result<pos:position pos:line="76" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="55">premature<pos:position pos:line="76" pos:column="64"/></name></expr></argument>)<pos:position pos:line="76" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="66"/></expr_stmt>
    }<pos:position pos:line="77" pos:column="6"/></block></then>
    <else pos:line="78" pos:column="5">else
      <comment type="block" pos:line="79" pos:column="7">/* Clear connection pipelines, if Curl_done above was not called */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="80" pos:column="7">Curl_getoff_all_pipelines<pos:position pos:line="80" pos:column="32"/></name><argument_list pos:line="80" pos:column="32">(<argument><expr><name pos:line="80" pos:column="33">data<pos:position pos:line="80" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="39">data<pos:position pos:line="80" pos:column="43"/></name><operator pos:line="80" pos:column="43">-&gt;<pos:position pos:line="80" pos:column="48"/></operator><name pos:line="80" pos:column="45">easy_conn<pos:position pos:line="80" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="56"/></expr_stmt></block></else></if>
  }<pos:position pos:line="81" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="83" pos:column="3">Curl_wildcard_dtor<pos:position pos:line="83" pos:column="21"/></name><argument_list pos:line="83" pos:column="21">(<argument><expr><operator pos:line="83" pos:column="22">&amp;<pos:position pos:line="83" pos:column="27"/></operator><name><name pos:line="83" pos:column="23">data<pos:position pos:line="83" pos:column="27"/></name><operator pos:line="83" pos:column="27">-&gt;<pos:position pos:line="83" pos:column="32"/></operator><name pos:line="83" pos:column="29">wildcard<pos:position pos:line="83" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="39"/></expr_stmt>

  <comment type="block" pos:line="85" pos:column="3">/* as this was using a shared connection cache we clear the pointer to that
     since we're not part of that multi handle anymore */</comment>
  <expr_stmt><expr><name><name pos:line="87" pos:column="3">data<pos:position pos:line="87" pos:column="7"/></name><operator pos:line="87" pos:column="7">-&gt;<pos:position pos:line="87" pos:column="12"/></operator><name pos:line="87" pos:column="9">state<pos:position pos:line="87" pos:column="14"/></name><operator pos:line="87" pos:column="14">.<pos:position pos:line="87" pos:column="15"/></operator><name pos:line="87" pos:column="15">conn_cache<pos:position pos:line="87" pos:column="25"/></name></name> <operator pos:line="87" pos:column="26">=<pos:position pos:line="87" pos:column="27"/></operator> <name pos:line="87" pos:column="28">NULL<pos:position pos:line="87" pos:column="32"/></name></expr>;<pos:position pos:line="87" pos:column="33"/></expr_stmt>

  <comment type="block" pos:line="89" pos:column="3">/* change state without using multistate(), only to make singlesocket() do
     what we want */</comment>
  <expr_stmt><expr><name><name pos:line="91" pos:column="3">data<pos:position pos:line="91" pos:column="7"/></name><operator pos:line="91" pos:column="7">-&gt;<pos:position pos:line="91" pos:column="12"/></operator><name pos:line="91" pos:column="9">mstate<pos:position pos:line="91" pos:column="15"/></name></name> <operator pos:line="91" pos:column="16">=<pos:position pos:line="91" pos:column="17"/></operator> <name pos:line="91" pos:column="18">CURLM_STATE_COMPLETED<pos:position pos:line="91" pos:column="39"/></name></expr>;<pos:position pos:line="91" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="92" pos:column="3">singlesocket<pos:position pos:line="92" pos:column="15"/></name><argument_list pos:line="92" pos:column="15">(<argument><expr><name pos:line="92" pos:column="16">multi<pos:position pos:line="92" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="23">easy<pos:position pos:line="92" pos:column="27"/></name></expr></argument>)<pos:position pos:line="92" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="29"/></expr_stmt> <comment type="block" pos:line="92" pos:column="30">/* to let the application know what sockets that
                                vanish with this handle */</comment>

  <comment type="block" pos:line="95" pos:column="3">/* Remove the association between the connection and the handle */</comment>
  <if pos:line="96" pos:column="3">if<condition pos:line="96" pos:column="5">(<expr><name><name pos:line="96" pos:column="6">data<pos:position pos:line="96" pos:column="10"/></name><operator pos:line="96" pos:column="10">-&gt;<pos:position pos:line="96" pos:column="15"/></operator><name pos:line="96" pos:column="12">easy_conn<pos:position pos:line="96" pos:column="21"/></name></name></expr>)<pos:position pos:line="96" pos:column="22"/></condition><then pos:line="96" pos:column="22"> <block pos:line="96" pos:column="23">{
    <expr_stmt><expr><name><name pos:line="97" pos:column="5">data<pos:position pos:line="97" pos:column="9"/></name><operator pos:line="97" pos:column="9">-&gt;<pos:position pos:line="97" pos:column="14"/></operator><name pos:line="97" pos:column="11">easy_conn<pos:position pos:line="97" pos:column="20"/></name><operator pos:line="97" pos:column="20">-&gt;<pos:position pos:line="97" pos:column="25"/></operator><name pos:line="97" pos:column="22">data<pos:position pos:line="97" pos:column="26"/></name></name> <operator pos:line="97" pos:column="27">=<pos:position pos:line="97" pos:column="28"/></operator> <name pos:line="97" pos:column="29">NULL<pos:position pos:line="97" pos:column="33"/></name></expr>;<pos:position pos:line="97" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="98" pos:column="5">data<pos:position pos:line="98" pos:column="9"/></name><operator pos:line="98" pos:column="9">-&gt;<pos:position pos:line="98" pos:column="14"/></operator><name pos:line="98" pos:column="11">easy_conn<pos:position pos:line="98" pos:column="20"/></name></name> <operator pos:line="98" pos:column="21">=<pos:position pos:line="98" pos:column="22"/></operator> <name pos:line="98" pos:column="23">NULL<pos:position pos:line="98" pos:column="27"/></name></expr>;<pos:position pos:line="98" pos:column="28"/></expr_stmt>
  }<pos:position pos:line="99" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="101" pos:column="3">data<pos:position pos:line="101" pos:column="7"/></name><operator pos:line="101" pos:column="7">-&gt;<pos:position pos:line="101" pos:column="12"/></operator><name pos:line="101" pos:column="9">multi<pos:position pos:line="101" pos:column="14"/></name></name> <operator pos:line="101" pos:column="15">=<pos:position pos:line="101" pos:column="16"/></operator> <name pos:line="101" pos:column="17">NULL<pos:position pos:line="101" pos:column="21"/></name></expr>;<pos:position pos:line="101" pos:column="22"/></expr_stmt> <comment type="block" pos:line="101" pos:column="23">/* clear the association to this multi handle */</comment>

  <comment type="block" pos:line="103" pos:column="3">/* make sure there's no pending message in the queue sent from this easy
     handle */</comment>

  <for pos:line="106" pos:column="3">for<control pos:line="106" pos:column="6">(<init><expr><name pos:line="106" pos:column="7">e<pos:position pos:line="106" pos:column="8"/></name> <operator pos:line="106" pos:column="9">=<pos:position pos:line="106" pos:column="10"/></operator> <name><name pos:line="106" pos:column="11">multi<pos:position pos:line="106" pos:column="16"/></name><operator pos:line="106" pos:column="16">-&gt;<pos:position pos:line="106" pos:column="21"/></operator><name pos:line="106" pos:column="18">msglist<pos:position pos:line="106" pos:column="25"/></name><operator pos:line="106" pos:column="25">-&gt;<pos:position pos:line="106" pos:column="30"/></operator><name pos:line="106" pos:column="27">head<pos:position pos:line="106" pos:column="31"/></name></name></expr>;<pos:position pos:line="106" pos:column="32"/></init> <condition><expr><name pos:line="106" pos:column="33">e<pos:position pos:line="106" pos:column="34"/></name></expr>;<pos:position pos:line="106" pos:column="35"/></condition> <incr><expr><name pos:line="106" pos:column="36">e<pos:position pos:line="106" pos:column="37"/></name> <operator pos:line="106" pos:column="38">=<pos:position pos:line="106" pos:column="39"/></operator> <name><name pos:line="106" pos:column="40">e<pos:position pos:line="106" pos:column="41"/></name><operator pos:line="106" pos:column="41">-&gt;<pos:position pos:line="106" pos:column="46"/></operator><name pos:line="106" pos:column="43">next<pos:position pos:line="106" pos:column="47"/></name></name></expr></incr>)<pos:position pos:line="106" pos:column="48"/></control> <block pos:line="106" pos:column="49">{
    <decl_stmt><decl><type><name><name pos:line="107" pos:column="5">struct<pos:position pos:line="107" pos:column="11"/></name> <name pos:line="107" pos:column="12">Curl_message<pos:position pos:line="107" pos:column="24"/></name></name> <modifier pos:line="107" pos:column="25">*<pos:position pos:line="107" pos:column="26"/></modifier></type><name pos:line="107" pos:column="26">msg<pos:position pos:line="107" pos:column="29"/></name> <init pos:line="107" pos:column="30">= <expr><name><name pos:line="107" pos:column="32">e<pos:position pos:line="107" pos:column="33"/></name><operator pos:line="107" pos:column="33">-&gt;<pos:position pos:line="107" pos:column="38"/></operator><name pos:line="107" pos:column="35">ptr<pos:position pos:line="107" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="107" pos:column="39"/></decl_stmt>

    <if pos:line="109" pos:column="5">if<condition pos:line="109" pos:column="7">(<expr><name><name pos:line="109" pos:column="8">msg<pos:position pos:line="109" pos:column="11"/></name><operator pos:line="109" pos:column="11">-&gt;<pos:position pos:line="109" pos:column="16"/></operator><name pos:line="109" pos:column="13">extmsg<pos:position pos:line="109" pos:column="19"/></name><operator pos:line="109" pos:column="19">.<pos:position pos:line="109" pos:column="20"/></operator><name pos:line="109" pos:column="20">easy_handle<pos:position pos:line="109" pos:column="31"/></name></name> <operator pos:line="109" pos:column="32">==<pos:position pos:line="109" pos:column="34"/></operator> <name pos:line="109" pos:column="35">easy<pos:position pos:line="109" pos:column="39"/></name></expr>)<pos:position pos:line="109" pos:column="40"/></condition><then pos:line="109" pos:column="40"> <block pos:line="109" pos:column="41">{
      <expr_stmt><expr><call><name pos:line="110" pos:column="7">Curl_llist_remove<pos:position pos:line="110" pos:column="24"/></name><argument_list pos:line="110" pos:column="24">(<argument><expr><name><name pos:line="110" pos:column="25">multi<pos:position pos:line="110" pos:column="30"/></name><operator pos:line="110" pos:column="30">-&gt;<pos:position pos:line="110" pos:column="35"/></operator><name pos:line="110" pos:column="32">msglist<pos:position pos:line="110" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="41">e<pos:position pos:line="110" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="44">NULL<pos:position pos:line="110" pos:column="48"/></name></expr></argument>)<pos:position pos:line="110" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="50"/></expr_stmt>
      <comment type="block" pos:line="111" pos:column="7">/* there can only be one from this specific handle */</comment>
      <break pos:line="112" pos:column="7">break;<pos:position pos:line="112" pos:column="13"/></break>
    }<pos:position pos:line="113" pos:column="6"/></block></then></if>
  }<pos:position pos:line="114" pos:column="4"/></block></for>

  <comment type="block" pos:line="116" pos:column="3">/* make the previous node point to our next */</comment>
  <if pos:line="117" pos:column="3">if<condition pos:line="117" pos:column="5">(<expr><name><name pos:line="117" pos:column="6">data<pos:position pos:line="117" pos:column="10"/></name><operator pos:line="117" pos:column="10">-&gt;<pos:position pos:line="117" pos:column="15"/></operator><name pos:line="117" pos:column="12">prev<pos:position pos:line="117" pos:column="16"/></name></name></expr>)<pos:position pos:line="117" pos:column="17"/></condition><then pos:line="117" pos:column="17">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="118" pos:column="5">data<pos:position pos:line="118" pos:column="9"/></name><operator pos:line="118" pos:column="9">-&gt;<pos:position pos:line="118" pos:column="14"/></operator><name pos:line="118" pos:column="11">prev<pos:position pos:line="118" pos:column="15"/></name><operator pos:line="118" pos:column="15">-&gt;<pos:position pos:line="118" pos:column="20"/></operator><name pos:line="118" pos:column="17">next<pos:position pos:line="118" pos:column="21"/></name></name> <operator pos:line="118" pos:column="22">=<pos:position pos:line="118" pos:column="23"/></operator> <name><name pos:line="118" pos:column="24">data<pos:position pos:line="118" pos:column="28"/></name><operator pos:line="118" pos:column="28">-&gt;<pos:position pos:line="118" pos:column="33"/></operator><name pos:line="118" pos:column="30">next<pos:position pos:line="118" pos:column="34"/></name></name></expr>;<pos:position pos:line="118" pos:column="35"/></expr_stmt></block></then>
  <else pos:line="119" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="120" pos:column="5">multi<pos:position pos:line="120" pos:column="10"/></name><operator pos:line="120" pos:column="10">-&gt;<pos:position pos:line="120" pos:column="15"/></operator><name pos:line="120" pos:column="12">easyp<pos:position pos:line="120" pos:column="17"/></name></name> <operator pos:line="120" pos:column="18">=<pos:position pos:line="120" pos:column="19"/></operator> <name><name pos:line="120" pos:column="20">data<pos:position pos:line="120" pos:column="24"/></name><operator pos:line="120" pos:column="24">-&gt;<pos:position pos:line="120" pos:column="29"/></operator><name pos:line="120" pos:column="26">next<pos:position pos:line="120" pos:column="30"/></name></name></expr>;<pos:position pos:line="120" pos:column="31"/></expr_stmt></block></else></if> <comment type="block" pos:line="120" pos:column="32">/* point to first node */</comment>

  <comment type="block" pos:line="122" pos:column="3">/* make our next point to our previous node */</comment>
  <if pos:line="123" pos:column="3">if<condition pos:line="123" pos:column="5">(<expr><name><name pos:line="123" pos:column="6">data<pos:position pos:line="123" pos:column="10"/></name><operator pos:line="123" pos:column="10">-&gt;<pos:position pos:line="123" pos:column="15"/></operator><name pos:line="123" pos:column="12">next<pos:position pos:line="123" pos:column="16"/></name></name></expr>)<pos:position pos:line="123" pos:column="17"/></condition><then pos:line="123" pos:column="17">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="124" pos:column="5">data<pos:position pos:line="124" pos:column="9"/></name><operator pos:line="124" pos:column="9">-&gt;<pos:position pos:line="124" pos:column="14"/></operator><name pos:line="124" pos:column="11">next<pos:position pos:line="124" pos:column="15"/></name><operator pos:line="124" pos:column="15">-&gt;<pos:position pos:line="124" pos:column="20"/></operator><name pos:line="124" pos:column="17">prev<pos:position pos:line="124" pos:column="21"/></name></name> <operator pos:line="124" pos:column="22">=<pos:position pos:line="124" pos:column="23"/></operator> <name><name pos:line="124" pos:column="24">data<pos:position pos:line="124" pos:column="28"/></name><operator pos:line="124" pos:column="28">-&gt;<pos:position pos:line="124" pos:column="33"/></operator><name pos:line="124" pos:column="30">prev<pos:position pos:line="124" pos:column="34"/></name></name></expr>;<pos:position pos:line="124" pos:column="35"/></expr_stmt></block></then>
  <else pos:line="125" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="126" pos:column="5">multi<pos:position pos:line="126" pos:column="10"/></name><operator pos:line="126" pos:column="10">-&gt;<pos:position pos:line="126" pos:column="15"/></operator><name pos:line="126" pos:column="12">easylp<pos:position pos:line="126" pos:column="18"/></name></name> <operator pos:line="126" pos:column="19">=<pos:position pos:line="126" pos:column="20"/></operator> <name><name pos:line="126" pos:column="21">data<pos:position pos:line="126" pos:column="25"/></name><operator pos:line="126" pos:column="25">-&gt;<pos:position pos:line="126" pos:column="30"/></operator><name pos:line="126" pos:column="27">prev<pos:position pos:line="126" pos:column="31"/></name></name></expr>;<pos:position pos:line="126" pos:column="32"/></expr_stmt></block></else></if> <comment type="block" pos:line="126" pos:column="33">/* point to last node */</comment>

  <comment type="block" pos:line="128" pos:column="3">/* NOTE NOTE NOTE
     We do not touch the easy handle here! */</comment>
  <expr_stmt><expr><name><name pos:line="130" pos:column="3">multi<pos:position pos:line="130" pos:column="8"/></name><operator pos:line="130" pos:column="8">-&gt;<pos:position pos:line="130" pos:column="13"/></operator><name pos:line="130" pos:column="10">num_easy<pos:position pos:line="130" pos:column="18"/></name></name><operator pos:line="130" pos:column="18">--<pos:position pos:line="130" pos:column="20"/></operator></expr>;<pos:position pos:line="130" pos:column="21"/></expr_stmt> <comment type="block" pos:line="130" pos:column="22">/* one less to care about now */</comment>

  <expr_stmt><expr><call><name pos:line="132" pos:column="3">update_timer<pos:position pos:line="132" pos:column="15"/></name><argument_list pos:line="132" pos:column="15">(<argument><expr><name pos:line="132" pos:column="16">multi<pos:position pos:line="132" pos:column="21"/></name></expr></argument>)<pos:position pos:line="132" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="23"/></expr_stmt>
  <return pos:line="133" pos:column="3">return <expr><name pos:line="133" pos:column="10">CURLM_OK<pos:position pos:line="133" pos:column="18"/></name></expr>;<pos:position pos:line="133" pos:column="19"/></return>
}<pos:position pos:line="134" pos:column="2"/></block></function></unit>
