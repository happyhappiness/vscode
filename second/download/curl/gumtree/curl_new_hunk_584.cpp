"              --proto -all,https,+http\n"
"                             only enables http and https\n"
"\n"
"              --proto =http,https\n"
"                             also only enables http and https\n"
"\n"
"              Unknown  protocols  produce  a  warning.  This allows scripts to\n"
"              safely rely on being able to disable potentially dangerous  pro-\n"
, stdout);
 fputs(
"              tocols,  without  relying  upon  support for that protocol being\n"
"              built into curl to avoid an error.\n"
"\n"
"              This option can be used multiple times, in which case the effect\n"
"              is  the same as concatenating the protocols into one instance of\n"
"              the option.\n"
"\n"
"              (Added in 7.20.2)\n"
"\n"
"       --proto-redir <protocols>\n"
"              Tells curl to use the listed protocols  after  a  redirect.  See\n"
, stdout);
 fputs(
"              --proto for how protocols are represented.\n"
"\n"
"              (Added in 7.20.2)\n"
"\n"
"       --proxy-anyauth\n"
"              Tells  curl to pick a suitable authentication method when commu-\n"
"              nicating with  the  given  proxy.  This  might  cause  an  extra\n"
"              request/response round-trip. (Added in 7.13.2)\n"
"\n"
"       --proxy-basic\n"
"              Tells  curl  to use HTTP Basic authentication when communicating\n"
, stdout);
 fputs(
"              with the given proxy. Use --basic for enabling HTTP Basic with a\n"
"              remote  host.  Basic  is  the default authentication method curl\n"
"              uses with proxies.\n"
"\n"
"       --proxy-digest\n"
"              Tells curl to use HTTP Digest authentication when  communicating\n"
"              with the given proxy. Use --digest for enabling HTTP Digest with\n"
"              a remote host.\n"
"\n"
"       --proxy-negotiate\n"
, stdout);
 fputs(
"              Tells curl to use HTTP Negotiate authentication when communicat-\n"
"              ing  with  the  given  proxy.  Use --negotiate for enabling HTTP\n"
"              Negotiate with a remote host. (Added in 7.17.1)\n"
"\n"
"       --proxy-ntlm\n"
"              Tells curl to use HTTP NTLM  authentication  when  communicating\n"
"              with the given proxy. Use --ntlm for enabling NTLM with a remote\n"
"              host.\n"
"\n"
"       --proxy1.0 <proxyhost[:port]>\n"
, stdout);
 fputs(
"              Use the specified HTTP 1.0 proxy. If  the  port  number  is  not\n"
"              specified, it is assumed at port 1080.\n"
"\n"
"              The  only difference between this and the HTTP proxy option (-x,\n"
"              --proxy), is that attempts to use CONNECT through the proxy will\n"
"              specify an HTTP 1.0 protocol instead of the default HTTP 1.1.\n"
"\n"
"       --pubkey <key>\n"
"              (SSH)  Public  key  file name. Allows you to provide your public\n"
, stdout);
 fputs(
"              key in this separate file.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -q     If used as the first parameter on the command line,  the  curlrc\n"
"              config  file will not be read and used. See the -K, --config for\n"
"              details on the default config file search path.\n"
"\n"
"       -Q, --quote <command>\n"
"              (FTP/SFTP) Send an arbitrary command to the remote FTP  or  SFTP\n"
, stdout);
 fputs(
"              server.  Quote commands are sent BEFORE the transfer takes place\n"
"              (just after the initial PWD command in an FTP  transfer,  to  be\n"
"              exact). To make commands take place after a successful transfer,\n"
"              prefix them with a dash '-'.  To make  commands  be  sent  after\n"
"              libcurl  has  changed  the  working  directory,  just before the\n"
"              transfer command(s), prefix the command with a '+' (this is only\n"
, stdout);
 fputs(
"              supported  for  FTP). You may specify any number of commands. If\n"
"              the server returns failure for one of the commands,  the  entire\n"
"              operation  will  be aborted. You must send syntactically correct\n"
"              FTP commands as RFC 959 defines to FTP servers, or  one  of  the\n"
"              commands  listed below to SFTP servers.  This option can be used\n"
"              multiple times. When speaking to a FTP server, prefix  the  com-\n"
, stdout);
 fputs(
"              mand  with  an asterisk (*) to make libcurl continue even if the\n"
"              command fails as by default curl will stop at first failure.\n"
"\n"
"              SFTP is a binary protocol. Unlike for  FTP,  libcurl  interprets\n"
"              SFTP  quote  commands  itself before sending them to the server.\n"
"              File names may be quoted shell-style to embed spaces or  special\n"
"              characters.   Following  is the list of all supported SFTP quote\n"
"              commands:\n"
"\n"
, stdout);
 fputs(
"              chgrp group file\n"
"                     The chgrp command sets the group ID of the file named  by\n"
"                     the  file  operand to the group ID specified by the group\n"
"                     operand. The group operand is a decimal integer group ID.\n"
"\n"
"              chmod mode file\n"
"                     The chmod command modifies the  file  mode  bits  of  the\n"
"                     specified file. The mode operand is an octal integer mode\n"
"                     number.\n"
"\n"
, stdout);
 fputs(
"              chown user file\n"
"                     The chown command sets the owner of the file named by the\n"
"                     file  operand  to the user ID specified by the user oper-\n"
"                     and. The user operand is a decimal integer user ID.\n"
"\n"
"              ln source_file target_file\n"
"                     The ln and symlink commands create a symbolic link at the\n"
"                     target_file  location  pointing  to the source_file loca-\n"
"                     tion.\n"
"\n"
, stdout);
 fputs(
"              mkdir directory_name\n"
"                     The mkdir command creates  the  directory  named  by  the\n"
"                     directory_name operand.\n"
"\n"
"              pwd    The pwd command returns the absolute pathname of the cur-\n"
"                     rent working directory.\n"
"\n"
"              rename source target\n"
"                     The rename command renames the file or directory named by\n"
"                     the  source  operand to the destination path named by the\n"
, stdout);
 fputs(
"                     target operand.\n"
"\n"
"              rm file\n"
"                     The rm command removes the file specified by the file op-\n"
"                     erand.\n"
"\n"
"              rmdir directory\n"
"                     The  rmdir  command removes the directory entry specified\n"
"                     by the directory operand, provided it is empty.\n"
"\n"
"              symlink source_file target_file\n"
"                     See ln.\n"
"\n"
"       -r, --range <range>\n"
, stdout);
 fputs(
"              (HTTP/FTP/SFTP/FILE) Retrieve a byte range (i.e a partial  docu-\n"
"              ment)  from  a  HTTP/1.1,  FTP  or  SFTP server or a local FILE.\n"
"              Ranges can be specified in a number of ways.\n"
"\n"
"              0-499     specifies the first 500 bytes\n"
"\n"
"              500-999   specifies the second 500 bytes\n"
"\n"
"              -500      specifies the last 500 bytes\n"
"\n"
"              9500-     specifies the bytes from offset 9500 and forward\n"
"\n"
, stdout);
 fputs(
"              0-0,-1    specifies the first and last byte only(*)(H)\n"
"\n"
"              500-700,600-799\n"
"                        specifies 300 bytes from offset 500(H)\n"
"\n"
"              100-199,500-599\n"
"                        specifies two separate 100-byte ranges(*)(H)\n"
"\n"
"       (*) = NOTE that this will cause the server to reply  with  a  multipart\n"
"       response!\n"
"\n"
"       Only  digit characters (0-9) are valid in the 'start' and 'stop' fields\n"
, stdout);
 fputs(
"       of the 'start-stop' range syntax. If a non-digit character is given  in\n"
"       the  range, the server's response will be unspecified, depending on the\n"
"       server's configuration.\n"
"\n"
"       You should also be aware that many HTTP/1.1 servers do  not  have  this\n"
"       feature  enabled,  so  that  when  you  attempt  to get a range, you'll\n"
"       instead get the whole document.\n"
"\n"
"       FTP and SFTP range downloads only support the simple 'start-stop'  syn-\n"
, stdout);
 fputs(
"       tax  (optionally  with  one of the numbers omitted). FTP use depends on\n"
"       the extended FTP command SIZE.\n"
"\n"
"       If this option is used several times, the last one will be used.\n"
"\n"
"       -R, --remote-time\n"
"              When used, this will make libcurl  attempt  to  figure  out  the\n"
"              timestamp  of the remote file, and if that is available make the\n"
"              local file get that same timestamp.\n"
"\n"
"       --random-file <file>\n"
, stdout);
 fputs(
"              (SSL) Specify the path name to file containing what will be con-\n"
"              sidered  as  random  data.  The  data is used to seed the random\n"
"              engine for SSL connections.  See also the --egd-file option.\n"
"\n"
"       --raw  When used, it disables all internal HTTP decoding of content  or\n"
"              transfer  encodings  and instead makes them passed on unaltered,\n"
"              raw. (Added in 7.16.2)\n"
"\n"
"       --remote-name-all\n"
, stdout);
 fputs(
"              This option changes the default action for all given URLs to  be\n"
"              dealt with as if -O, --remote-name were used for each one. So if\n"
"              you want to disable that for a specific URL after --remote-name-\n"
"              all  has  been  used,  you  must use \"-o -\" or --no-remote-name.\n"
"              (Added in 7.19.0)\n"
"\n"
"       --resolve <host:port:address>\n"
"              Provide a custom address for a  specific  host  and  port  pair.\n"
, stdout);
 fputs(
"              Using  this,  you  can make the curl requests(s) use a specified\n"
"              address and prevent the otherwise normally resolved  address  to\n"
"              be  used.  Consider it a sort of /etc/hosts alternative provided\n"
"              on the command line. The port number should be the  number  used\n"
"              for  the  specific  protocol the host will be used for. It means\n"
"              you need several entries if you want to provide address for  the\n"
, stdout);
 fputs(
"              same host but different ports.\n"
"\n"
"              This  option  can  be  used many times to add many host names to\n"
"              resolve.\n"
"\n"
"              (Added in 7.21.3)\n"
"\n"
"       --retry <num>\n"
"              If a transient error is returned when curl tries  to  perform  a\n"
"              transfer,  it  will retry this number of times before giving up.\n"
"              Setting the number to 0 makes curl do no retries (which  is  the\n"
, stdout);
 fputs(
"              default).  Transient  error  means either: a timeout, an FTP 4xx\n"
"              response code or an HTTP 5xx response code.\n"
"\n"
"              When curl is about to retry a transfer, it will first  wait  one\n"
"              second  and  then for all forthcoming retries it will double the\n"
"              waiting time until it reaches 10 minutes which then will be  the\n"
"              delay  between  the rest of the retries.  By using --retry-delay\n"
, stdout);
 fputs(
"              you  disable  this  exponential  backoff  algorithm.  See   also\n"
"              --retry-max-time  to  limit  the total time allowed for retries.\n"
"              (Added in 7.12.3)\n"
"\n"
"              If this option is  used  multiple  times,  the  last  occurrence\n"
"              decide the amount.\n"
"\n"
"       --retry-delay <seconds>\n"
"              Make  curl  sleep  this  amount of time before each retry when a\n"
"              transfer has failed with  a  transient  error  (it  changes  the\n"
, stdout);
 fputs(
"              default  backoff time algorithm between retries). This option is\n"
"              only interesting if --retry is also used. Setting this delay  to\n"
"              zero  will  make  curl  use the default backoff time.  (Added in\n"
"              7.12.3)\n"
"\n"
"              If this option is  used  multiple  times,  the  last  occurrence\n"
"              determines the amount.\n"
"\n"
"       --retry-max-time <seconds>\n"
"              The  retry  timer  is  reset  before the first transfer attempt.\n"
, stdout);
 fputs(
"              Retries will be done as usual (see --retry) as long as the timer\n"
"              hasn't reached this given limit. Notice that if the timer hasn't\n"
"              reached the limit, the request will be made and  while  perform-\n"
"              ing,  it may take longer than this given time period. To limit a\n"
"              single request's maximum time, use  -m,  --max-time.   Set  this\n"
"              option to zero to not timeout retries. (Added in 7.12.3)\n"
"\n"
, stdout);
 fputs(
"              If  this  option  is  used  multiple  times, the last occurrence\n"
"              determines the amount.\n"
"\n"
"       -s, --silent\n"
"              Silent or quiet mode. Don't show progress meter  or  error  mes-\n"
"              sages.  Makes Curl mute.\n"
"\n"
"       -S, --show-error\n"
"              When  used  with  -s  it  makes curl show an error message if it\n"
"              fails.\n"
"\n"
"       --ssl  (FTP, POP3, IMAP, SMTP) Try to use SSL/TLS for  the  connection.\n"
, stdout);
 fputs(
"              Reverts to a non-secure connection if the server doesn't support\n"
"              SSL/TLS.  See also --ftp-ssl-control and --ssl-reqd for  differ-\n"
"              ent levels of encryption required. (Added in 7.20.0)\n"
"\n"
"              This  option  was formerly known as --ftp-ssl (Added in 7.11.0).\n"
"              That option name can still be used but  will  be  removed  in  a\n"
"              future version.\n"
"\n"
"       --ssl-reqd\n"
, stdout);
 fputs(
"              (FTP,  POP3,  IMAP,  SMTP)  Require  SSL/TLS for the connection.\n"
"              Terminates the connection if the server doesn't support SSL/TLS.\n"
"              (Added in 7.20.0)\n"
"\n"
"              This  option  was  formerly  known  as  --ftp-ssl-reqd (added in\n"
"              7.15.5). That option name can still be used but will be  removed\n"
"              in a future version.\n"
"\n"
"       --socks4 <host[:port]>\n"
"              Use the specified SOCKS4 proxy. If the port number is not speci-\n"
, stdout);
 fputs(
"              fied, it is assumed at port 1080. (Added in 7.15.2)\n"
"\n"
"              This option overrides any previous use of -x, --proxy,  as  they\n"
"              are mutually exclusive.\n"
"\n"
"              Since 7.21.7, this option is superfluous since you can specify a\n"
"              socks4 proxy with -x, --proxy using a socks4:// protocol prefix.\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --socks4a <host[:port]>\n"
, stdout);
 fputs(
"              Use the specified SOCKS4a proxy. If the port number is not spec-\n"
"              ified, it is assumed at port 1080. (Added in 7.18.0)\n"
"\n"
"              This  option  overrides any previous use of -x, --proxy, as they\n"
"              are mutually exclusive.\n"
"\n"
"              Since 7.21.7, this option is superfluous since you can specify a\n"
"              socks4a  proxy with -x, --proxy using a socks4a:// protocol pre-\n"
"              fix.\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --socks5-hostname <host[:port]>\n"
"              Use the specified SOCKS5 proxy (and let the  proxy  resolve  the\n"
"              host  name).  If the port number is not specified, it is assumed\n"
"              at port 1080. (Added in 7.18.0)\n"
"\n"
"              This option overrides any previous use of -x, --proxy,  as  they\n"
"              are mutually exclusive.\n"
"\n"
, stdout);
 fputs(
"              Since 7.21.7, this option is superfluous since you can specify a\n"
"              socks5 hostname proxy with -x, --proxy using a socks5h:// proto-\n"
"              col prefix.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"              (This option was  previously  wrongly  documented  and  used  as\n"
"              --socks without the number appended.)\n"
"\n"
"       --socks5 <host[:port]>\n"
, stdout);
 fputs(
"              Use  the  specified  SOCKS5  proxy  -  but resolve the host name\n"
"              locally. If the port number is not specified, it is  assumed  at\n"
"              port 1080.\n"
"\n"
"              This  option  overrides any previous use of -x, --proxy, as they\n"
"              are mutually exclusive.\n"
"\n"
"              Since 7.21.7, this option is superfluous since you can specify a\n"
"              socks5 proxy with -x, --proxy using a socks5:// protocol prefix.\n"
, stdout);
 fputs(
"              If this option is used several times, the last one will be used.\n"
"              (This option was  previously  wrongly  documented  and  used  as\n"
"              --socks without the number appended.)\n"
"\n"
"              This  option (as well as --socks4) does not work with IPV6, FTPS\n"
"              or LDAP.\n"
"\n"
"       --socks5-gssapi-service <servicename>\n"
"              The default service name for a socks server is rcmd/server-fqdn.\n"
"              This option allows you to change it.\n"
"\n"
, stdout);
 fputs(
"              Examples:   --socks5  proxy-name  --socks5-gssapi-service  sockd\n"
"              would use sockd/proxy-name --socks5 proxy-name  --socks5-gssapi-\n"
"              service  sockd/real-name  would  use  sockd/real-name  for cases\n"
"              where the proxy-name does not match the principal name.   (Added\n"
"              in 7.19.4).\n"
"\n"
"       --socks5-gssapi-nec\n"
"              As  part  of the gssapi negotiation a protection mode is negoti-\n"
, stdout);
 fputs(
"              ated. RFC 1961 says in section 4.3/4.4 it should  be  protected,\n"
"              but  the  NEC  reference  implementation  does  not.  The option\n"
"              --socks5-gssapi-nec allows the unprotected exchange of the  pro-\n"
"              tection mode negotiation. (Added in 7.19.4).\n"
"\n"
"       --stderr <file>\n"
"              Redirect  all writes to stderr to the specified file instead. If\n"
"              the file name is a plain '-', it is instead written  to  stdout.\n"
, stdout);
 fputs(
"              This  option  has no point when you're using a shell with decent\n"
"              redirecting capabilities.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -t, --telnet-option <OPT=val>\n"
"              Pass options to the telnet protocol. Supported options are:\n"
"\n"
"              TTYPE=<term> Sets the terminal type.\n"
"\n"
"              XDISPLOC=<X display> Sets the X display location.\n"
"\n"
"              NEW_ENV=<var,val> Sets an environment variable.\n"
"\n"
, stdout);
 fputs(
"       -T, --upload-file <file>\n"
"              This transfers the specified local file to the  remote  URL.  If\n"
"              there is no file part in the specified URL, Curl will append the\n"
"              local file name. NOTE that you must use a trailing / on the last\n"
"              directory  to really prove to Curl that there is no file name or\n"
"              curl will think that your last directory name is the remote file\n"
, stdout);
 fputs(
"              name to use. That will most likely cause the upload operation to\n"
"              fail. If this is used on a HTTP(S) server, the PUT command  will\n"
"              be used.\n"
"\n"
"              Use  the file name \"-\" (a single dash) to use stdin instead of a\n"
"              given file.  Alternately, the file name \".\"  (a  single  period)\n"
"              may  be  specified  instead  of \"-\" to use stdin in non-blocking\n"
"              mode to  allow  reading  server  output  while  stdin  is  being\n"
, stdout);
 fputs(
"              uploaded.\n"
"\n"
"              You can specify one -T for each URL on the command line. Each -T\n"
"              + URL pair specifies what to upload and to where. curl also sup-\n"
"              ports \"globbing\" of the -T argument, meaning that you can upload\n"
"              multiple files to a single URL by using the  same  URL  globbing\n"
"              style supported in the URL, like this:\n"
"\n"
"              curl -T \"{file1,file2}\" http://www.uploadtothissite.com\n"
"\n"
"              or even\n"
"\n"
, stdout);
 fputs(
"              curl -T \"img[1-1000].png\" ftp://ftp.picturemania.com/upload/\n"
"\n"
"       --tcp-nodelay\n"
"              Turn  on the TCP_NODELAY option. See the curl_easy_setopt(3) man\n"
"              page for details about this option. (Added in 7.11.2)\n"
"\n"
"       --tftp-blksize <value>\n"
"              (TFTP) Set TFTP BLKSIZE option (must be >512). This is the block\n"
"              size that curl will try to use when transferring data to or from\n"
"              a TFTP server. By default 512 bytes will be used.\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, the last one will be used.\n"
"\n"
"              (Added in 7.20.0)\n"
"\n"
"       --tlsauthtype <authtype>\n"
"              Set TLS  authentication  type.  Currently,  the  only  supported\n"
"              option  is  \"SRP\",  for  TLS-SRP  (RFC  5054).  If --tlsuser and\n"
"              --tlspassword are specified but --tlsauthtype is not, then  this\n"
"              option defaults to \"SRP\".  (Added in 7.21.4)\n"
"\n"
"       --tlsuser <user>\n"
, stdout);
 fputs(
"              Set  username  for use with the TLS authentication method speci-\n"
"              fied with --tlsauthtype. Requires  that  --tlspassword  also  be\n"
"              set.  (Added in 7.21.4)\n"
"\n"
"       --tlspassword <password>\n"
"              Set  password  for use with the TLS authentication method speci-\n"
"              fied with --tlsauthtype. Requires that --tlsuser  also  be  set.\n"
"              (Added in 7.21.4)\n"
"\n"
"       --tr-encoding\n"
, stdout);
 fputs(
"              (HTTP) Request a compressed Transfer-Encoding response using one\n"
"              of the algorithms libcurl  supports,  and  uncompress  the  data\n"
"              while receiving it.\n"
"\n"
"              (Added in 7.21.6)\n"
"\n"
"       --trace <file>\n"
"              Enables  a  full  trace  dump of all incoming and outgoing data,\n"
"              including descriptive information, to the given output file. Use\n"
"              \"-\" as filename to have the output sent to stdout.\n"
"\n"
, stdout);
 fputs(
"              This option overrides previous uses of -v, --verbose or --trace-\n"
"              ascii.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --trace-ascii <file>\n"
"              Enables a full trace dump of all  incoming  and  outgoing  data,\n"
"              including descriptive information, to the given output file. Use\n"
"              \"-\" as filename to have the output sent to stdout.\n"
"\n"
, stdout);
 fputs(
"              This is very similar to --trace, but leaves out the hex part and\n"
"              only  shows  the ASCII part of the dump. It makes smaller output\n"
"              that might be easier to read for untrained humans.\n"
"\n"
"              This option overrides previous uses of -v, --verbose or --trace.\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --trace-time\n"
"              Prepends a time stamp to each trace or verbose  line  that  curl\n"
, stdout);
 fputs(
"              displays.  (Added in 7.14.0)\n"
"\n"
"       -u, --user <user:password>\n"
"              Specify the user name and password to use for server authentica-\n"
"              tion. Overrides -n, --netrc and --netrc-optional.\n"
"\n"
"              If you just give the user name (without entering a  colon)  curl\n"
"              will prompt for a password.\n"
"\n"
"              If  you  use an SSPI-enabled curl binary and do NTLM authentica-\n"
, stdout);
 fputs(
"              tion, you can force curl to pick up the user name  and  password\n"
"              from  your  environment by simply specifying a single colon with\n"
"              this option: \"-u :\".\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -U, --proxy-user <user:password>\n"
"              Specify the user name and password to use for proxy  authentica-\n"
"              tion.\n"
"\n"
"              If  you  use an SSPI-enabled curl binary and do NTLM authentica-\n"
, stdout);
 fputs(
"              tion, you can force curl to pick up the user name  and  password\n"
"              from  your  environment by simply specifying a single colon with\n"
"              this option: \"-U :\".\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --url <URL>\n"
"              Specify a URL to fetch. This option is  mostly  handy  when  you\n"
"              want to specify URL(s) in a config file.\n"
"\n"
, stdout);
 fputs(
"              This  option  may  be used any number of times. To control where\n"
"              this URL is written, use the -o, --output or the  -O,  --remote-\n"
"              name options.\n"
"       -v, --verbose\n"
"              Makes  the  fetching  more  verbose/talkative. Mostly useful for\n"
"              debugging. A line starting with '>' means \"header data\" sent  by\n"
"              curl, '<' means \"header data\" received by curl that is hidden in\n"
, stdout);
 fputs(
"              normal cases, and a line starting with '*' means additional info\n"
"              provided by curl.\n"
"\n"
"              Note  that  if  you  only  want  HTTP headers in the output, -i,\n"
"              --include might be the option you're looking for.\n"
"\n"
"              If you think this option still doesn't give you enough  details,\n"
"              consider using --trace or --trace-ascii instead.\n"
"\n"
"              This option overrides previous uses of --trace-ascii or --trace.\n"
"\n"
, stdout);
 fputs(
"              Use -s, --silent to make curl quiet.\n"
"\n"
"       -w, --write-out <format>\n"
"              Defines what to display on stdout after a completed and success-\n"
"              ful operation. The format is a string  that  may  contain  plain\n"
"              text mixed with any number of variables. The string can be spec-\n"
"              ified as \"string\", to get read from a particular file you  spec-\n"
"              ify  it  \"@filename\"  and  to  tell curl to read the format from\n"
, stdout);
 fputs(
"              stdin you write \"@-\".\n"
"\n"
"              The variables present in the output format will  be  substituted\n"
"              by  the  value or text that curl thinks fit, as described below.\n"
"              All variables are specified as %{variable_name} and to output  a\n"
"              normal  % you just write them as %%. You can output a newline by\n"
"              using \\n, a carriage return with \\r and a tab space with \\t.\n"
"\n"
, stdout);
 fputs(
"              NOTE: The %-symbol is a special symbol in the win32-environment,\n"
"              where  all  occurrences  of  %  must  be doubled when using this\n"
"              option.\n"
"\n"
"              The variables available at this point are:\n"
"\n"
"              url_effective  The URL that was fetched last. This is most mean-\n"
"                             ingful  if  you've  told curl to follow location:\n"
"                             headers.\n"
"\n"
, stdout);
 fputs(
"              http_code      The numerical response code that was found in the\n"
"                             last  retrieved  HTTP(S)  or  FTP(s) transfer. In\n"
"                             7.18.2 the alias response_code was added to  show\n"
"                             the same info.\n"
"\n"
"              http_connect   The  numerical  code  that  was found in the last\n"
"                             response  (from  a  proxy)  to  a  curl   CONNECT\n"
"                             request. (Added in 7.12.4)\n"
"\n"
, stdout);
 fputs(
"              time_total     The  total time, in seconds, that the full opera-\n"
"                             tion lasted. The time will be displayed with mil-\n"
"                             lisecond resolution.\n"
"\n"
"              time_namelookup\n"
"                             The  time,  in  seconds,  it  took from the start\n"
"                             until the name resolving was completed.\n"
"\n"
"              time_connect   The time, in seconds,  it  took  from  the  start\n"
, stdout);
 fputs(
"                             until  the  TCP  connect  to  the remote host (or\n"
"                             proxy) was completed.\n"
"\n"
"              time_appconnect\n"
"                             The time, in seconds,  it  took  from  the  start\n"
"                             until  the  SSL/SSH/etc  connect/handshake to the\n"
"                             remote host was completed. (Added in 7.19.0)\n"
"\n"
"              time_pretransfer\n"
, stdout);
 fputs(
"                             The time, in seconds,  it  took  from  the  start\n"
"                             until  the file transfer was just about to begin.\n"
"                             This includes all pre-transfer commands and nego-\n"
"                             tiations that are specific to the particular pro-\n"
"                             tocol(s) involved.\n"
"\n"
"              time_redirect  The time, in seconds, it took for all redirection\n"
, stdout);
 fputs(
"                             steps  include  name lookup, connect, pretransfer\n"
"                             and transfer before  the  final  transaction  was\n"
"                             started.  time_redirect shows the complete execu-\n"
"                             tion time for multiple  redirections.  (Added  in\n"
"                             7.12.3)\n"
"\n"
"              time_starttransfer\n"
"                             The  time,  in  seconds,  it  took from the start\n"
, stdout);
 fputs(
"                             until the first byte was just about to be  trans-\n"
"                             ferred.  This  includes time_pretransfer and also\n"
"                             the time  the  server  needed  to  calculate  the\n"
"                             result.\n"
"\n"
"              size_download  The total amount of bytes that were downloaded.\n"
"\n"
"              size_upload    The total amount of bytes that were uploaded.\n"
"\n"
, stdout);
 fputs(
"              size_header    The total amount of bytes of the downloaded head-\n"
"                             ers.\n"
"\n"
"              size_request   The total amount of bytes that were sent  in  the\n"
"                             HTTP request.\n"
"\n"
"              speed_download The average download speed that curl measured for\n"
"                             the complete download. Bytes per second.\n"
"\n"
"              speed_upload   The average upload speed that curl  measured  for\n"
, stdout);
 fputs(
"                             the complete upload. Bytes per second.\n"
"\n"
"              content_type   The  Content-Type  of  the requested document, if\n"
"                             there was any.\n"
"\n"
"              num_connects   Number of new connects made in the recent  trans-\n"
"                             fer. (Added in 7.12.3)\n"
"\n"
"              num_redirects  Number  of  redirects  that  were followed in the\n"
"                             request. (Added in 7.12.3)\n"
"\n"
, stdout);
 fputs(
"              redirect_url   When a HTTP request was made without -L to follow\n"
"                             redirects, this variable will show the actual URL\n"
"                             a redirect would take you to. (Added in 7.18.2)\n"
"\n"
"              ftp_entry_path The initial path libcurl ended up in when logging\n"
"                             on to the remote FTP server. (Added in 7.15.4)\n"
"\n"
"              ssl_verify_result\n"
, stdout);
 fputs(
"                             The  result of the SSL peer certificate verifica-\n"
"                             tion that was requested. 0 means the verification\n"
"                             was successful. (Added in 7.19.0)\n"
"\n"
"       If this option is used several times, the last one will be used.\n"
"\n"
"       -x, --proxy <[protocol://][user@password]proxyhost[:port]>\n"
"              Use  the  specified HTTP proxy. If the port number is not speci-\n"
"              fied, it is assumed at port 1080.\n"
"\n"
, stdout);
 fputs(
"              This option overrides existing environment  variables  that  set\n"
"              the  proxy  to use. If there's an environment variable setting a\n"
"              proxy, you can set proxy to \"\" to override it.\n"
"\n"
"              All operations that are performed over a HTTP proxy will  trans-\n"
"              parently  be  converted  to HTTP. It means that certain protocol\n"
"              specific operations might not be available. This is not the case\n"
, stdout);
 fputs(
"              if you can tunnel through the proxy, as one with the -p, --prox-\n"
"              ytunnel option.\n"
"\n"
"              The proxy host can be specified the exact same way as the  proxy\n"
"              environment  variables,  including the protocol prefix (http://)\n"
"              and the embedded user + password.\n"
"\n"
"              From 7.21.7, the proxy string may be  specified  with  a  proto-\n"
"              col://  prefix  to  specify  alternative  proxy  protocols.  Use\n"
, stdout);
 fputs(
"              socks4://, socks4a://, socks5:// or socks5h://  to  request  the\n"
"              specific  SOCKS  version  to  be  used.  No  protocol specified,\n"
"              http:// and all others will be treated as HTTP proxies.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -X, --request <command>\n"
"              (HTTP) Specifies a custom request method to use when communicat-\n"
"              ing  with  the  HTTP server.  The specified request will be used\n"
, stdout);
 fputs(
"              instead of the method otherwise used (which  defaults  to  GET).\n"
"              Read  the  HTTP  1.1 specification for details and explanations.\n"
"              Common additional HTTP requests  include  PUT  and  DELETE,  but\n"
"              related technologies like WebDAV offers PROPFIND, COPY, MOVE and\n"
"              more.\n"
"\n"
"              (FTP) Specifies a custom FTP command to use instead of LIST when\n"
"              doing file lists with FTP.\n"
"\n"
