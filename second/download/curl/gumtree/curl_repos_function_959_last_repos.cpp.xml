<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_959_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">parseconfig<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><specifier pos:line="1" pos:column="17">const<pos:position pos:line="1" pos:column="22"/></specifier> <name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">filename<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="39">struct<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">GlobalConfig<pos:position pos:line="1" pos:column="58"/></name></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">global<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">res<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">FILE<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">file<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name></type> <name><name pos:line="5" pos:column="8">filebuffer<pos:position pos:line="5" pos:column="18"/></name><index pos:line="5" pos:column="18">[<expr><literal type="number" pos:line="5" pos:column="19">512<pos:position pos:line="5" pos:column="22"/></literal></expr>]<pos:position pos:line="5" pos:column="23"/></index></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">bool<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">usedarg<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><name pos:line="6" pos:column="18">FALSE<pos:position pos:line="6" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">home<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">rc<pos:position pos:line="8" pos:column="9"/></name> <init pos:line="8" pos:column="10">= <expr><literal type="number" pos:line="8" pos:column="12">0<pos:position pos:line="8" pos:column="13"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">OperationConfig<pos:position pos:line="9" pos:column="25"/></name></name> <modifier pos:line="9" pos:column="26">*<pos:position pos:line="9" pos:column="27"/></modifier></type><name pos:line="9" pos:column="27">operation<pos:position pos:line="9" pos:column="36"/></name> <init pos:line="9" pos:column="37">= <expr><name><name pos:line="9" pos:column="39">global<pos:position pos:line="9" pos:column="45"/></name><operator pos:line="9" pos:column="45">-&gt;<pos:position pos:line="9" pos:column="50"/></operator><name pos:line="9" pos:column="47">first<pos:position pos:line="9" pos:column="52"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="53"/></decl_stmt>

  <if pos:line="11" pos:column="3">if<condition pos:line="11" pos:column="5">(<expr><operator pos:line="11" pos:column="6">!<pos:position pos:line="11" pos:column="7"/></operator><name pos:line="11" pos:column="7">filename<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">||<pos:position pos:line="11" pos:column="18"/></operator> <operator pos:line="11" pos:column="19">!<pos:position pos:line="11" pos:column="20"/></operator><operator pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="21">filename<pos:position pos:line="11" pos:column="29"/></name></expr>)<pos:position pos:line="11" pos:column="30"/></condition><then pos:line="11" pos:column="30"> <block pos:line="11" pos:column="31">{
    <comment type="block" pos:line="12" pos:column="5">/* NULL or no file name attempts to load .curlrc from the homedir! */</comment>

<cpp:ifndef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifndef<pos:position pos:line="14" pos:column="8"/></cpp:directive> <name pos:line="14" pos:column="9">__AMIGA__<pos:position pos:line="14" pos:column="18"/></name></cpp:ifndef>
    <expr_stmt><expr><name pos:line="15" pos:column="5">filename<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <name pos:line="15" pos:column="16">CURLRC<pos:position pos:line="15" pos:column="22"/></name></expr>;<pos:position pos:line="15" pos:column="23"/></expr_stmt>   <comment type="block" pos:line="15" pos:column="26">/* sensible default */</comment>
    <expr_stmt><expr><name pos:line="16" pos:column="5">home<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <call><name pos:line="16" pos:column="12">homedir<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">()<pos:position pos:line="16" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="22"/></expr_stmt>    <comment type="block" pos:line="16" pos:column="26">/* portable homedir finder */</comment>
    <if pos:line="17" pos:column="5">if<condition pos:line="17" pos:column="7">(<expr><name pos:line="17" pos:column="8">home<pos:position pos:line="17" pos:column="12"/></name></expr>)<pos:position pos:line="17" pos:column="13"/></condition><then pos:line="17" pos:column="13"> <block pos:line="17" pos:column="14">{
      <if pos:line="18" pos:column="7">if<condition pos:line="18" pos:column="9">(<expr><call><name pos:line="18" pos:column="10">strlen<pos:position pos:line="18" pos:column="16"/></name><argument_list pos:line="18" pos:column="16">(<argument><expr><name pos:line="18" pos:column="17">home<pos:position pos:line="18" pos:column="21"/></name></expr></argument>)<pos:position pos:line="18" pos:column="22"/></argument_list></call> <operator pos:line="18" pos:column="23">&lt;<pos:position pos:line="18" pos:column="27"/></operator> <operator pos:line="18" pos:column="25">(<pos:position pos:line="18" pos:column="26"/></operator><sizeof pos:line="18" pos:column="26">sizeof<argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">filebuffer<pos:position pos:line="18" pos:column="43"/></name></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></sizeof> <operator pos:line="18" pos:column="45">-<pos:position pos:line="18" pos:column="46"/></operator> <call><name pos:line="18" pos:column="47">strlen<pos:position pos:line="18" pos:column="53"/></name><argument_list pos:line="18" pos:column="53">(<argument><expr><name pos:line="18" pos:column="54">CURLRC<pos:position pos:line="18" pos:column="60"/></name></expr></argument>)<pos:position pos:line="18" pos:column="61"/></argument_list></call><operator pos:line="18" pos:column="61">)<pos:position pos:line="18" pos:column="62"/></operator></expr>)<pos:position pos:line="18" pos:column="63"/></condition><then pos:line="18" pos:column="63"> <block pos:line="18" pos:column="64">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">snprintf<pos:position pos:line="19" pos:column="17"/></name><argument_list pos:line="19" pos:column="17">(<argument><expr><name pos:line="19" pos:column="18">filebuffer<pos:position pos:line="19" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="30">sizeof<argument_list pos:line="19" pos:column="36">(<argument><expr><name pos:line="19" pos:column="37">filebuffer<pos:position pos:line="19" pos:column="47"/></name></expr></argument>)<pos:position pos:line="19" pos:column="48"/></argument_list></sizeof></expr></argument>,
                 <argument><expr><literal type="string" pos:line="20" pos:column="18">"%s%s%s"<pos:position pos:line="20" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="28">home<pos:position pos:line="20" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="34">DIR_CHAR<pos:position pos:line="20" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="44">CURLRC<pos:position pos:line="20" pos:column="50"/></name></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="52"/></expr_stmt>

<cpp:ifdef pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">ifdef<pos:position pos:line="22" pos:column="7"/></cpp:directive> <name pos:line="22" pos:column="8">WIN32<pos:position pos:line="22" pos:column="13"/></name></cpp:ifdef>
        <comment type="block" pos:line="23" pos:column="9">/* Check if the file exists - if not, try CURLRC in the same
         * directory as our executable
         */</comment>
        <expr_stmt><expr><name pos:line="26" pos:column="9">file<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">=<pos:position pos:line="26" pos:column="15"/></operator> <call><name pos:line="26" pos:column="16">fopen<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><name pos:line="26" pos:column="22">filebuffer<pos:position pos:line="26" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="34">FOPEN_READTEXT<pos:position pos:line="26" pos:column="48"/></name></expr></argument>)<pos:position pos:line="26" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="50"/></expr_stmt>
        <if pos:line="27" pos:column="9">if<condition pos:line="27" pos:column="11">(<expr><name pos:line="27" pos:column="12">file<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">!=<pos:position pos:line="27" pos:column="19"/></operator> <name pos:line="27" pos:column="20">NULL<pos:position pos:line="27" pos:column="24"/></name></expr>)<pos:position pos:line="27" pos:column="25"/></condition><then pos:line="27" pos:column="25"> <block pos:line="27" pos:column="26">{
          <expr_stmt><expr><call><name pos:line="28" pos:column="11">fclose<pos:position pos:line="28" pos:column="17"/></name><argument_list pos:line="28" pos:column="17">(<argument><expr><name pos:line="28" pos:column="18">file<pos:position pos:line="28" pos:column="22"/></name></expr></argument>)<pos:position pos:line="28" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="24"/></expr_stmt>
          <expr_stmt><expr><name pos:line="29" pos:column="11">filename<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">=<pos:position pos:line="29" pos:column="21"/></operator> <name pos:line="29" pos:column="22">filebuffer<pos:position pos:line="29" pos:column="32"/></name></expr>;<pos:position pos:line="29" pos:column="33"/></expr_stmt>
        }<pos:position pos:line="30" pos:column="10"/></block></then>
        <else pos:line="31" pos:column="9">else <block pos:line="31" pos:column="14">{
          <comment type="block" pos:line="32" pos:column="11">/* Get the filename of our executable. GetModuleFileName is
           * already declared via inclusions done in setup header file.
           * We assume that we are using the ASCII version here.
           */</comment>
          <decl_stmt><decl><type><name pos:line="36" pos:column="11">int<pos:position pos:line="36" pos:column="14"/></name></type> <name pos:line="36" pos:column="15">n<pos:position pos:line="36" pos:column="16"/></name> <init pos:line="36" pos:column="17">= <expr><call><name pos:line="36" pos:column="19">GetModuleFileNameA<pos:position pos:line="36" pos:column="37"/></name><argument_list pos:line="36" pos:column="37">(<argument><expr><literal type="number" pos:line="36" pos:column="38">0<pos:position pos:line="36" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="41">filebuffer<pos:position pos:line="36" pos:column="51"/></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="53">sizeof<argument_list pos:line="36" pos:column="59">(<argument><expr><name pos:line="36" pos:column="60">filebuffer<pos:position pos:line="36" pos:column="70"/></name></expr></argument>)<pos:position pos:line="36" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="73"/></decl_stmt>
          <if pos:line="37" pos:column="11">if<condition pos:line="37" pos:column="13">(<expr><name pos:line="37" pos:column="14">n<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">&gt;<pos:position pos:line="37" pos:column="20"/></operator> <literal type="number" pos:line="37" pos:column="18">0<pos:position pos:line="37" pos:column="19"/></literal> <operator pos:line="37" pos:column="20">&amp;&amp;<pos:position pos:line="37" pos:column="30"/></operator> <name pos:line="37" pos:column="23">n<pos:position pos:line="37" pos:column="24"/></name> <operator pos:line="37" pos:column="25">&lt;<pos:position pos:line="37" pos:column="29"/></operator> <operator pos:line="37" pos:column="27">(<pos:position pos:line="37" pos:column="28"/></operator><name pos:line="37" pos:column="28">int<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">)<pos:position pos:line="37" pos:column="32"/></operator><sizeof pos:line="37" pos:column="32">sizeof<argument_list pos:line="37" pos:column="38">(<argument><expr><name pos:line="37" pos:column="39">filebuffer<pos:position pos:line="37" pos:column="49"/></name></expr></argument>)<pos:position pos:line="37" pos:column="50"/></argument_list></sizeof></expr>)<pos:position pos:line="37" pos:column="51"/></condition><then pos:line="37" pos:column="51"> <block pos:line="37" pos:column="52">{
            <comment type="block" pos:line="38" pos:column="13">/* We got a valid filename - get the directory part */</comment>
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">char<pos:position pos:line="39" pos:column="17"/></name> <modifier pos:line="39" pos:column="18">*<pos:position pos:line="39" pos:column="19"/></modifier></type><name pos:line="39" pos:column="19">lastdirchar<pos:position pos:line="39" pos:column="30"/></name> <init pos:line="39" pos:column="31">= <expr><call><name pos:line="39" pos:column="33">strrchr<pos:position pos:line="39" pos:column="40"/></name><argument_list pos:line="39" pos:column="40">(<argument><expr><name pos:line="39" pos:column="41">filebuffer<pos:position pos:line="39" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="39" pos:column="53">'\\'<pos:position pos:line="39" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="39" pos:column="59"/></decl_stmt>
            <if pos:line="40" pos:column="13">if<condition pos:line="40" pos:column="15">(<expr><name pos:line="40" pos:column="16">lastdirchar<pos:position pos:line="40" pos:column="27"/></name></expr>)<pos:position pos:line="40" pos:column="28"/></condition><then pos:line="40" pos:column="28"> <block pos:line="40" pos:column="29">{
              <decl_stmt><decl><type><name pos:line="41" pos:column="15">size_t<pos:position pos:line="41" pos:column="21"/></name></type> <name pos:line="41" pos:column="22">remaining<pos:position pos:line="41" pos:column="31"/></name></decl>;<pos:position pos:line="41" pos:column="32"/></decl_stmt>
              <expr_stmt><expr><operator pos:line="42" pos:column="15">*<pos:position pos:line="42" pos:column="16"/></operator><name pos:line="42" pos:column="16">lastdirchar<pos:position pos:line="42" pos:column="27"/></name> <operator pos:line="42" pos:column="28">=<pos:position pos:line="42" pos:column="29"/></operator> <literal type="number" pos:line="42" pos:column="30">0<pos:position pos:line="42" pos:column="31"/></literal></expr>;<pos:position pos:line="42" pos:column="32"/></expr_stmt>
              <comment type="block" pos:line="43" pos:column="15">/* If we have enough space, build the RC filename */</comment>
              <expr_stmt><expr><name pos:line="44" pos:column="15">remaining<pos:position pos:line="44" pos:column="24"/></name> <operator pos:line="44" pos:column="25">=<pos:position pos:line="44" pos:column="26"/></operator> <sizeof pos:line="44" pos:column="27">sizeof<argument_list pos:line="44" pos:column="33">(<argument><expr><name pos:line="44" pos:column="34">filebuffer<pos:position pos:line="44" pos:column="44"/></name></expr></argument>)<pos:position pos:line="44" pos:column="45"/></argument_list></sizeof> <operator pos:line="44" pos:column="46">-<pos:position pos:line="44" pos:column="47"/></operator> <call><name pos:line="44" pos:column="48">strlen<pos:position pos:line="44" pos:column="54"/></name><argument_list pos:line="44" pos:column="54">(<argument><expr><name pos:line="44" pos:column="55">filebuffer<pos:position pos:line="44" pos:column="65"/></name></expr></argument>)<pos:position pos:line="44" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="67"/></expr_stmt>
              <if pos:line="45" pos:column="15">if<condition pos:line="45" pos:column="17">(<expr><call><name pos:line="45" pos:column="18">strlen<pos:position pos:line="45" pos:column="24"/></name><argument_list pos:line="45" pos:column="24">(<argument><expr><name pos:line="45" pos:column="25">CURLRC<pos:position pos:line="45" pos:column="31"/></name></expr></argument>)<pos:position pos:line="45" pos:column="32"/></argument_list></call> <operator pos:line="45" pos:column="33">&lt;<pos:position pos:line="45" pos:column="37"/></operator> <name pos:line="45" pos:column="35">remaining<pos:position pos:line="45" pos:column="44"/></name> <operator pos:line="45" pos:column="45">-<pos:position pos:line="45" pos:column="46"/></operator> <literal type="number" pos:line="45" pos:column="47">1<pos:position pos:line="45" pos:column="48"/></literal></expr>)<pos:position pos:line="45" pos:column="49"/></condition><then pos:line="45" pos:column="49"> <block pos:line="45" pos:column="50">{
                <expr_stmt><expr><call><name pos:line="46" pos:column="17">snprintf<pos:position pos:line="46" pos:column="25"/></name><argument_list pos:line="46" pos:column="25">(<argument><expr><name pos:line="46" pos:column="26">lastdirchar<pos:position pos:line="46" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="39">remaining<pos:position pos:line="46" pos:column="48"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="47" pos:column="26">"%s%s"<pos:position pos:line="47" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="34">DIR_CHAR<pos:position pos:line="47" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="44">CURLRC<pos:position pos:line="47" pos:column="50"/></name></expr></argument>)<pos:position pos:line="47" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="52"/></expr_stmt>
                <comment type="block" pos:line="48" pos:column="17">/* Don't bother checking if it exists - we do
                 * that later
                 */</comment>
                <expr_stmt><expr><name pos:line="51" pos:column="17">filename<pos:position pos:line="51" pos:column="25"/></name> <operator pos:line="51" pos:column="26">=<pos:position pos:line="51" pos:column="27"/></operator> <name pos:line="51" pos:column="28">filebuffer<pos:position pos:line="51" pos:column="38"/></name></expr>;<pos:position pos:line="51" pos:column="39"/></expr_stmt>
              }<pos:position pos:line="52" pos:column="16"/></block></then></if>
            }<pos:position pos:line="53" pos:column="14"/></block></then></if>
          }<pos:position pos:line="54" pos:column="12"/></block></then></if>
        }<pos:position pos:line="55" pos:column="10"/></block></else></if>
<cpp:else pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">else<pos:position pos:line="56" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="56" pos:column="7">/* WIN32 */</comment>
        <expr_stmt><expr><name pos:line="57" pos:column="9">filename<pos:position pos:line="57" pos:column="17"/></name> <operator pos:line="57" pos:column="18">=<pos:position pos:line="57" pos:column="19"/></operator> <name pos:line="57" pos:column="20">filebuffer<pos:position pos:line="57" pos:column="30"/></name></expr>;<pos:position pos:line="57" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">endif<pos:position pos:line="58" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="58" pos:column="8">/* WIN32 */</comment>
      }<pos:position pos:line="59" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="60" pos:column="7">Curl_safefree<pos:position pos:line="60" pos:column="20"/></name><argument_list pos:line="60" pos:column="20">(<argument><expr><name pos:line="60" pos:column="21">home<pos:position pos:line="60" pos:column="25"/></name></expr></argument>)<pos:position pos:line="60" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="27"/></expr_stmt> <comment type="block" pos:line="60" pos:column="28">/* we've used it, now free it */</comment>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>

<cpp:else pos:line="63" pos:column="1"># <cpp:directive pos:line="63" pos:column="3">else<pos:position pos:line="63" pos:column="7"/></cpp:directive></cpp:else> <comment type="block" pos:line="63" pos:column="8">/* __AMIGA__ */</comment>
    <comment type="block" pos:line="64" pos:column="5">/* On AmigaOS all the config files are into env:
     */</comment>
    <expr_stmt><expr><name pos:line="66" pos:column="5">filename<pos:position pos:line="66" pos:column="13"/></name> <operator pos:line="66" pos:column="14">=<pos:position pos:line="66" pos:column="15"/></operator> <literal type="string" pos:line="66" pos:column="16">"ENV:"<pos:position pos:line="66" pos:column="22"/></literal> <name pos:line="66" pos:column="23">CURLRC<pos:position pos:line="66" pos:column="29"/></name></expr>;<pos:position pos:line="66" pos:column="30"/></expr_stmt>

<cpp:endif pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">endif<pos:position pos:line="68" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="69" pos:column="4"/></block></then></if>

  <if pos:line="71" pos:column="3">if<condition pos:line="71" pos:column="5">(<expr><call><name pos:line="71" pos:column="6">strcmp<pos:position pos:line="71" pos:column="12"/></name><argument_list pos:line="71" pos:column="12">(<argument><expr><name pos:line="71" pos:column="13">filename<pos:position pos:line="71" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="23">"-"<pos:position pos:line="71" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="71" pos:column="28"/></condition><then pos:line="71" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><name pos:line="72" pos:column="5">file<pos:position pos:line="72" pos:column="9"/></name> <operator pos:line="72" pos:column="10">=<pos:position pos:line="72" pos:column="11"/></operator> <call><name pos:line="72" pos:column="12">fopen<pos:position pos:line="72" pos:column="17"/></name><argument_list pos:line="72" pos:column="17">(<argument><expr><name pos:line="72" pos:column="18">filename<pos:position pos:line="72" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="28">FOPEN_READTEXT<pos:position pos:line="72" pos:column="42"/></name></expr></argument>)<pos:position pos:line="72" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="44"/></expr_stmt></block></then>
  <else pos:line="73" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="74" pos:column="5">file<pos:position pos:line="74" pos:column="9"/></name> <operator pos:line="74" pos:column="10">=<pos:position pos:line="74" pos:column="11"/></operator> <name pos:line="74" pos:column="12">stdin<pos:position pos:line="74" pos:column="17"/></name></expr>;<pos:position pos:line="74" pos:column="18"/></expr_stmt></block></else></if>

  <if pos:line="76" pos:column="3">if<condition pos:line="76" pos:column="5">(<expr><name pos:line="76" pos:column="6">file<pos:position pos:line="76" pos:column="10"/></name></expr>)<pos:position pos:line="76" pos:column="11"/></condition><then pos:line="76" pos:column="11"> <block pos:line="76" pos:column="12">{
    <decl_stmt><decl><type><name pos:line="77" pos:column="5">char<pos:position pos:line="77" pos:column="9"/></name> <modifier pos:line="77" pos:column="10">*<pos:position pos:line="77" pos:column="11"/></modifier></type><name pos:line="77" pos:column="11">line<pos:position pos:line="77" pos:column="15"/></name></decl>;<pos:position pos:line="77" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="78" pos:column="5">char<pos:position pos:line="78" pos:column="9"/></name> <modifier pos:line="78" pos:column="10">*<pos:position pos:line="78" pos:column="11"/></modifier></type><name pos:line="78" pos:column="11">aline<pos:position pos:line="78" pos:column="16"/></name></decl>;<pos:position pos:line="78" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="79" pos:column="5">char<pos:position pos:line="79" pos:column="9"/></name> <modifier pos:line="79" pos:column="10">*<pos:position pos:line="79" pos:column="11"/></modifier></type><name pos:line="79" pos:column="11">option<pos:position pos:line="79" pos:column="17"/></name></decl>;<pos:position pos:line="79" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="80" pos:column="5">char<pos:position pos:line="80" pos:column="9"/></name> <modifier pos:line="80" pos:column="10">*<pos:position pos:line="80" pos:column="11"/></modifier></type><name pos:line="80" pos:column="11">param<pos:position pos:line="80" pos:column="16"/></name></decl>;<pos:position pos:line="80" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="81" pos:column="5">int<pos:position pos:line="81" pos:column="8"/></name></type> <name pos:line="81" pos:column="9">lineno<pos:position pos:line="81" pos:column="15"/></name> <init pos:line="81" pos:column="16">= <expr><literal type="number" pos:line="81" pos:column="18">0<pos:position pos:line="81" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="81" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="82" pos:column="5">bool<pos:position pos:line="82" pos:column="9"/></name></type> <name pos:line="82" pos:column="10">alloced_param<pos:position pos:line="82" pos:column="23"/></name></decl>;<pos:position pos:line="82" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="83" pos:column="5">bool<pos:position pos:line="83" pos:column="9"/></name></type> <name pos:line="83" pos:column="10">dashed_option<pos:position pos:line="83" pos:column="23"/></name></decl>;<pos:position pos:line="83" pos:column="24"/></decl_stmt>

    <while pos:line="85" pos:column="5">while<condition pos:line="85" pos:column="10">(<expr><name pos:line="85" pos:column="11">NULL<pos:position pos:line="85" pos:column="15"/></name> <operator pos:line="85" pos:column="16">!=<pos:position pos:line="85" pos:column="18"/></operator> <operator pos:line="85" pos:column="19">(<pos:position pos:line="85" pos:column="20"/></operator><name pos:line="85" pos:column="20">aline<pos:position pos:line="85" pos:column="25"/></name> <operator pos:line="85" pos:column="26">=<pos:position pos:line="85" pos:column="27"/></operator> <call><name pos:line="85" pos:column="28">my_get_line<pos:position pos:line="85" pos:column="39"/></name><argument_list pos:line="85" pos:column="39">(<argument><expr><name pos:line="85" pos:column="40">file<pos:position pos:line="85" pos:column="44"/></name></expr></argument>)<pos:position pos:line="85" pos:column="45"/></argument_list></call><operator pos:line="85" pos:column="45">)<pos:position pos:line="85" pos:column="46"/></operator></expr>)<pos:position pos:line="85" pos:column="47"/></condition> <block pos:line="85" pos:column="48">{
      <expr_stmt><expr><name pos:line="86" pos:column="7">lineno<pos:position pos:line="86" pos:column="13"/></name><operator pos:line="86" pos:column="13">++<pos:position pos:line="86" pos:column="15"/></operator></expr>;<pos:position pos:line="86" pos:column="16"/></expr_stmt>
      <expr_stmt><expr><name pos:line="87" pos:column="7">line<pos:position pos:line="87" pos:column="11"/></name> <operator pos:line="87" pos:column="12">=<pos:position pos:line="87" pos:column="13"/></operator> <name pos:line="87" pos:column="14">aline<pos:position pos:line="87" pos:column="19"/></name></expr>;<pos:position pos:line="87" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><name pos:line="88" pos:column="7">alloced_param<pos:position pos:line="88" pos:column="20"/></name> <operator pos:line="88" pos:column="21">=<pos:position pos:line="88" pos:column="22"/></operator> <name pos:line="88" pos:column="23">FALSE<pos:position pos:line="88" pos:column="28"/></name></expr>;<pos:position pos:line="88" pos:column="29"/></expr_stmt>

      <comment type="block" pos:line="90" pos:column="7">/* line with # in the first non-blank column is a comment! */</comment>
      <while pos:line="91" pos:column="7">while<condition pos:line="91" pos:column="12">(<expr><operator pos:line="91" pos:column="13">*<pos:position pos:line="91" pos:column="14"/></operator><name pos:line="91" pos:column="14">line<pos:position pos:line="91" pos:column="18"/></name> <operator pos:line="91" pos:column="19">&amp;&amp;<pos:position pos:line="91" pos:column="29"/></operator> <call><name pos:line="91" pos:column="22">ISSPACE<pos:position pos:line="91" pos:column="29"/></name><argument_list pos:line="91" pos:column="29">(<argument><expr><operator pos:line="91" pos:column="30">*<pos:position pos:line="91" pos:column="31"/></operator><name pos:line="91" pos:column="31">line<pos:position pos:line="91" pos:column="35"/></name></expr></argument>)<pos:position pos:line="91" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="91" pos:column="37"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="92" pos:column="9">line<pos:position pos:line="92" pos:column="13"/></name><operator pos:line="92" pos:column="13">++<pos:position pos:line="92" pos:column="15"/></operator></expr>;<pos:position pos:line="92" pos:column="16"/></expr_stmt></block></while>

      <switch pos:line="94" pos:column="7">switch<condition pos:line="94" pos:column="13">(<expr><operator pos:line="94" pos:column="14">*<pos:position pos:line="94" pos:column="15"/></operator><name pos:line="94" pos:column="15">line<pos:position pos:line="94" pos:column="19"/></name></expr>)<pos:position pos:line="94" pos:column="20"/></condition> <block pos:line="94" pos:column="21">{
      <case pos:line="95" pos:column="7">case <expr><literal type="char" pos:line="95" pos:column="12">'#'<pos:position pos:line="95" pos:column="15"/></literal></expr>:<pos:position pos:line="95" pos:column="16"/></case>
      <case pos:line="96" pos:column="7">case <expr><literal type="char" pos:line="96" pos:column="12">'/'<pos:position pos:line="96" pos:column="15"/></literal></expr>:<pos:position pos:line="96" pos:column="16"/></case>
      <case pos:line="97" pos:column="7">case <expr><literal type="char" pos:line="97" pos:column="12">'\r'<pos:position pos:line="97" pos:column="16"/></literal></expr>:<pos:position pos:line="97" pos:column="17"/></case>
      <case pos:line="98" pos:column="7">case <expr><literal type="char" pos:line="98" pos:column="12">'\n'<pos:position pos:line="98" pos:column="16"/></literal></expr>:<pos:position pos:line="98" pos:column="17"/></case>
      <case pos:line="99" pos:column="7">case <expr><literal type="char" pos:line="99" pos:column="12">'*'<pos:position pos:line="99" pos:column="15"/></literal></expr>:<pos:position pos:line="99" pos:column="16"/></case>
      <case pos:line="100" pos:column="7">case <expr><literal type="char" pos:line="100" pos:column="12">'\0'<pos:position pos:line="100" pos:column="16"/></literal></expr>:<pos:position pos:line="100" pos:column="17"/></case>
        <expr_stmt><expr><call><name pos:line="101" pos:column="9">Curl_safefree<pos:position pos:line="101" pos:column="22"/></name><argument_list pos:line="101" pos:column="22">(<argument><expr><name pos:line="101" pos:column="23">aline<pos:position pos:line="101" pos:column="28"/></name></expr></argument>)<pos:position pos:line="101" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="30"/></expr_stmt>
        <continue pos:line="102" pos:column="9">continue;<pos:position pos:line="102" pos:column="18"/></continue>
      }<pos:position pos:line="103" pos:column="8"/></block></switch>

      <comment type="block" pos:line="105" pos:column="7">/* the option keywords starts here */</comment>
      <expr_stmt><expr><name pos:line="106" pos:column="7">option<pos:position pos:line="106" pos:column="13"/></name> <operator pos:line="106" pos:column="14">=<pos:position pos:line="106" pos:column="15"/></operator> <name pos:line="106" pos:column="16">line<pos:position pos:line="106" pos:column="20"/></name></expr>;<pos:position pos:line="106" pos:column="21"/></expr_stmt>

      <comment type="block" pos:line="108" pos:column="7">/* the option starts with a dash? */</comment>
      <expr_stmt><expr><name pos:line="109" pos:column="7">dashed_option<pos:position pos:line="109" pos:column="20"/></name> <operator pos:line="109" pos:column="21">=<pos:position pos:line="109" pos:column="22"/></operator> <ternary><condition><expr><name><name pos:line="109" pos:column="23">option<pos:position pos:line="109" pos:column="29"/></name><index pos:line="109" pos:column="29">[<expr><literal type="number" pos:line="109" pos:column="30">0<pos:position pos:line="109" pos:column="31"/></literal></expr>]<pos:position pos:line="109" pos:column="32"/></index></name><operator pos:line="109" pos:column="32">==<pos:position pos:line="109" pos:column="34"/></operator><literal type="char" pos:line="109" pos:column="34">'-'<pos:position pos:line="109" pos:column="37"/></literal></expr>?<pos:position pos:line="109" pos:column="38"/></condition><then><expr><name pos:line="109" pos:column="38">TRUE<pos:position pos:line="109" pos:column="42"/></name></expr></then><else pos:line="109" pos:column="42">:<expr><name pos:line="109" pos:column="43">FALSE<pos:position pos:line="109" pos:column="48"/></name></expr></else></ternary></expr>;<pos:position pos:line="109" pos:column="49"/></expr_stmt>

      <while pos:line="111" pos:column="7">while<condition pos:line="111" pos:column="12">(<expr><operator pos:line="111" pos:column="13">*<pos:position pos:line="111" pos:column="14"/></operator><name pos:line="111" pos:column="14">line<pos:position pos:line="111" pos:column="18"/></name> <operator pos:line="111" pos:column="19">&amp;&amp;<pos:position pos:line="111" pos:column="29"/></operator> <operator pos:line="111" pos:column="22">!<pos:position pos:line="111" pos:column="23"/></operator><call><name pos:line="111" pos:column="23">ISSPACE<pos:position pos:line="111" pos:column="30"/></name><argument_list pos:line="111" pos:column="30">(<argument><expr><operator pos:line="111" pos:column="31">*<pos:position pos:line="111" pos:column="32"/></operator><name pos:line="111" pos:column="32">line<pos:position pos:line="111" pos:column="36"/></name></expr></argument>)<pos:position pos:line="111" pos:column="37"/></argument_list></call> <operator pos:line="111" pos:column="38">&amp;&amp;<pos:position pos:line="111" pos:column="48"/></operator> <operator pos:line="111" pos:column="41">!<pos:position pos:line="111" pos:column="42"/></operator><call><name pos:line="111" pos:column="42">ISSEP<pos:position pos:line="111" pos:column="47"/></name><argument_list pos:line="111" pos:column="47">(<argument><expr><operator pos:line="111" pos:column="48">*<pos:position pos:line="111" pos:column="49"/></operator><name pos:line="111" pos:column="49">line<pos:position pos:line="111" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="55">dashed_option<pos:position pos:line="111" pos:column="68"/></name></expr></argument>)<pos:position pos:line="111" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="111" pos:column="70"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="112" pos:column="9">line<pos:position pos:line="112" pos:column="13"/></name><operator pos:line="112" pos:column="13">++<pos:position pos:line="112" pos:column="15"/></operator></expr>;<pos:position pos:line="112" pos:column="16"/></expr_stmt></block></while>
      <comment type="block" pos:line="113" pos:column="7">/* ... and has ended here */</comment>

      <if pos:line="115" pos:column="7">if<condition pos:line="115" pos:column="9">(<expr><operator pos:line="115" pos:column="10">*<pos:position pos:line="115" pos:column="11"/></operator><name pos:line="115" pos:column="11">line<pos:position pos:line="115" pos:column="15"/></name></expr>)<pos:position pos:line="115" pos:column="16"/></condition><then pos:line="115" pos:column="16">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="116" pos:column="9">*<pos:position pos:line="116" pos:column="10"/></operator><name pos:line="116" pos:column="10">line<pos:position pos:line="116" pos:column="14"/></name><operator pos:line="116" pos:column="14">++<pos:position pos:line="116" pos:column="16"/></operator> <operator pos:line="116" pos:column="17">=<pos:position pos:line="116" pos:column="18"/></operator> <literal type="char" pos:line="116" pos:column="19">'\0'<pos:position pos:line="116" pos:column="23"/></literal></expr>;<pos:position pos:line="116" pos:column="24"/></expr_stmt></block></then></if> <comment type="block" pos:line="116" pos:column="25">/* zero terminate, we have a local copy of the data */</comment>

<cpp:ifdef pos:line="118" pos:column="1">#<cpp:directive pos:line="118" pos:column="2">ifdef<pos:position pos:line="118" pos:column="7"/></cpp:directive> <name pos:line="118" pos:column="8">DEBUG_CONFIG<pos:position pos:line="118" pos:column="20"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="119" pos:column="7">fprintf<pos:position pos:line="119" pos:column="14"/></name><argument_list pos:line="119" pos:column="14">(<argument><expr><name pos:line="119" pos:column="15">stderr<pos:position pos:line="119" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="119" pos:column="23">"GOT: %s\n"<pos:position pos:line="119" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="119" pos:column="36">option<pos:position pos:line="119" pos:column="42"/></name></expr></argument>)<pos:position pos:line="119" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="44"/></expr_stmt>
<cpp:endif pos:line="120" pos:column="1">#<cpp:directive pos:line="120" pos:column="2">endif<pos:position pos:line="120" pos:column="7"/></cpp:directive></cpp:endif>

      <comment type="block" pos:line="122" pos:column="7">/* pass spaces and separator(s) */</comment>
      <while pos:line="123" pos:column="7">while<condition pos:line="123" pos:column="12">(<expr><operator pos:line="123" pos:column="13">*<pos:position pos:line="123" pos:column="14"/></operator><name pos:line="123" pos:column="14">line<pos:position pos:line="123" pos:column="18"/></name> <operator pos:line="123" pos:column="19">&amp;&amp;<pos:position pos:line="123" pos:column="29"/></operator> <operator pos:line="123" pos:column="22">(<pos:position pos:line="123" pos:column="23"/></operator><call><name pos:line="123" pos:column="23">ISSPACE<pos:position pos:line="123" pos:column="30"/></name><argument_list pos:line="123" pos:column="30">(<argument><expr><operator pos:line="123" pos:column="31">*<pos:position pos:line="123" pos:column="32"/></operator><name pos:line="123" pos:column="32">line<pos:position pos:line="123" pos:column="36"/></name></expr></argument>)<pos:position pos:line="123" pos:column="37"/></argument_list></call> <operator pos:line="123" pos:column="38">||<pos:position pos:line="123" pos:column="40"/></operator> <call><name pos:line="123" pos:column="41">ISSEP<pos:position pos:line="123" pos:column="46"/></name><argument_list pos:line="123" pos:column="46">(<argument><expr><operator pos:line="123" pos:column="47">*<pos:position pos:line="123" pos:column="48"/></operator><name pos:line="123" pos:column="48">line<pos:position pos:line="123" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="54">dashed_option<pos:position pos:line="123" pos:column="67"/></name></expr></argument>)<pos:position pos:line="123" pos:column="68"/></argument_list></call><operator pos:line="123" pos:column="68">)<pos:position pos:line="123" pos:column="69"/></operator></expr>)<pos:position pos:line="123" pos:column="70"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="124" pos:column="9">line<pos:position pos:line="124" pos:column="13"/></name><operator pos:line="124" pos:column="13">++<pos:position pos:line="124" pos:column="15"/></operator></expr>;<pos:position pos:line="124" pos:column="16"/></expr_stmt></block></while>

      <comment type="block" pos:line="126" pos:column="7">/* the parameter starts here (unless quoted) */</comment>
      <if pos:line="127" pos:column="7">if<condition pos:line="127" pos:column="9">(<expr><operator pos:line="127" pos:column="10">*<pos:position pos:line="127" pos:column="11"/></operator><name pos:line="127" pos:column="11">line<pos:position pos:line="127" pos:column="15"/></name> <operator pos:line="127" pos:column="16">==<pos:position pos:line="127" pos:column="18"/></operator> <literal type="char" pos:line="127" pos:column="19">'\"'<pos:position pos:line="127" pos:column="23"/></literal></expr>)<pos:position pos:line="127" pos:column="24"/></condition><then pos:line="127" pos:column="24"> <block pos:line="127" pos:column="25">{
        <comment type="block" pos:line="128" pos:column="9">/* quoted parameter, do the quote dance */</comment>
        <expr_stmt><expr><name pos:line="129" pos:column="9">line<pos:position pos:line="129" pos:column="13"/></name><operator pos:line="129" pos:column="13">++<pos:position pos:line="129" pos:column="15"/></operator></expr>;<pos:position pos:line="129" pos:column="16"/></expr_stmt>
        <expr_stmt><expr><name pos:line="130" pos:column="9">param<pos:position pos:line="130" pos:column="14"/></name> <operator pos:line="130" pos:column="15">=<pos:position pos:line="130" pos:column="16"/></operator> <call><name pos:line="130" pos:column="17">malloc<pos:position pos:line="130" pos:column="23"/></name><argument_list pos:line="130" pos:column="23">(<argument><expr><call><name pos:line="130" pos:column="24">strlen<pos:position pos:line="130" pos:column="30"/></name><argument_list pos:line="130" pos:column="30">(<argument><expr><name pos:line="130" pos:column="31">line<pos:position pos:line="130" pos:column="35"/></name></expr></argument>)<pos:position pos:line="130" pos:column="36"/></argument_list></call> <operator pos:line="130" pos:column="37">+<pos:position pos:line="130" pos:column="38"/></operator> <literal type="number" pos:line="130" pos:column="39">1<pos:position pos:line="130" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="42"/></expr_stmt> <comment type="block" pos:line="130" pos:column="43">/* parameter */</comment>
        <if pos:line="131" pos:column="9">if<condition pos:line="131" pos:column="11">(<expr><operator pos:line="131" pos:column="12">!<pos:position pos:line="131" pos:column="13"/></operator><name pos:line="131" pos:column="13">param<pos:position pos:line="131" pos:column="18"/></name></expr>)<pos:position pos:line="131" pos:column="19"/></condition><then pos:line="131" pos:column="19"> <block pos:line="131" pos:column="20">{
          <comment type="block" pos:line="132" pos:column="11">/* out of memory */</comment>
          <expr_stmt><expr><call><name pos:line="133" pos:column="11">Curl_safefree<pos:position pos:line="133" pos:column="24"/></name><argument_list pos:line="133" pos:column="24">(<argument><expr><name pos:line="133" pos:column="25">aline<pos:position pos:line="133" pos:column="30"/></name></expr></argument>)<pos:position pos:line="133" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="32"/></expr_stmt>
          <expr_stmt><expr><name pos:line="134" pos:column="11">rc<pos:position pos:line="134" pos:column="13"/></name> <operator pos:line="134" pos:column="14">=<pos:position pos:line="134" pos:column="15"/></operator> <literal type="number" pos:line="134" pos:column="16">1<pos:position pos:line="134" pos:column="17"/></literal></expr>;<pos:position pos:line="134" pos:column="18"/></expr_stmt>
          <break pos:line="135" pos:column="11">break;<pos:position pos:line="135" pos:column="17"/></break>
        }<pos:position pos:line="136" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="137" pos:column="9">alloced_param<pos:position pos:line="137" pos:column="22"/></name> <operator pos:line="137" pos:column="23">=<pos:position pos:line="137" pos:column="24"/></operator> <name pos:line="137" pos:column="25">TRUE<pos:position pos:line="137" pos:column="29"/></name></expr>;<pos:position pos:line="137" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="138" pos:column="9">(<pos:position pos:line="138" pos:column="10"/></operator><name pos:line="138" pos:column="10">void<pos:position pos:line="138" pos:column="14"/></name><operator pos:line="138" pos:column="14">)<pos:position pos:line="138" pos:column="15"/></operator><call><name pos:line="138" pos:column="15">unslashquote<pos:position pos:line="138" pos:column="27"/></name><argument_list pos:line="138" pos:column="27">(<argument><expr><name pos:line="138" pos:column="28">line<pos:position pos:line="138" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="138" pos:column="34">param<pos:position pos:line="138" pos:column="39"/></name></expr></argument>)<pos:position pos:line="138" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="41"/></expr_stmt>
      }<pos:position pos:line="139" pos:column="8"/></block></then>
      <else pos:line="140" pos:column="7">else <block pos:line="140" pos:column="12">{
        <expr_stmt><expr><name pos:line="141" pos:column="9">param<pos:position pos:line="141" pos:column="14"/></name> <operator pos:line="141" pos:column="15">=<pos:position pos:line="141" pos:column="16"/></operator> <name pos:line="141" pos:column="17">line<pos:position pos:line="141" pos:column="21"/></name></expr>;<pos:position pos:line="141" pos:column="22"/></expr_stmt> <comment type="block" pos:line="141" pos:column="23">/* parameter starts here */</comment>
        <while pos:line="142" pos:column="9">while<condition pos:line="142" pos:column="14">(<expr><operator pos:line="142" pos:column="15">*<pos:position pos:line="142" pos:column="16"/></operator><name pos:line="142" pos:column="16">line<pos:position pos:line="142" pos:column="20"/></name> <operator pos:line="142" pos:column="21">&amp;&amp;<pos:position pos:line="142" pos:column="31"/></operator> <operator pos:line="142" pos:column="24">!<pos:position pos:line="142" pos:column="25"/></operator><call><name pos:line="142" pos:column="25">ISSPACE<pos:position pos:line="142" pos:column="32"/></name><argument_list pos:line="142" pos:column="32">(<argument><expr><operator pos:line="142" pos:column="33">*<pos:position pos:line="142" pos:column="34"/></operator><name pos:line="142" pos:column="34">line<pos:position pos:line="142" pos:column="38"/></name></expr></argument>)<pos:position pos:line="142" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="142" pos:column="40"/></condition>
          <block type="pseudo"><expr_stmt><expr><name pos:line="143" pos:column="11">line<pos:position pos:line="143" pos:column="15"/></name><operator pos:line="143" pos:column="15">++<pos:position pos:line="143" pos:column="17"/></operator></expr>;<pos:position pos:line="143" pos:column="18"/></expr_stmt></block></while>

        <if pos:line="145" pos:column="9">if<condition pos:line="145" pos:column="11">(<expr><operator pos:line="145" pos:column="12">*<pos:position pos:line="145" pos:column="13"/></operator><name pos:line="145" pos:column="13">line<pos:position pos:line="145" pos:column="17"/></name></expr>)<pos:position pos:line="145" pos:column="18"/></condition><then pos:line="145" pos:column="18"> <block pos:line="145" pos:column="19">{
          <expr_stmt><expr><operator pos:line="146" pos:column="11">*<pos:position pos:line="146" pos:column="12"/></operator><name pos:line="146" pos:column="12">line<pos:position pos:line="146" pos:column="16"/></name> <operator pos:line="146" pos:column="17">=<pos:position pos:line="146" pos:column="18"/></operator> <literal type="char" pos:line="146" pos:column="19">'\0'<pos:position pos:line="146" pos:column="23"/></literal></expr>;<pos:position pos:line="146" pos:column="24"/></expr_stmt> <comment type="block" pos:line="146" pos:column="25">/* zero terminate */</comment>

          <comment type="block" pos:line="148" pos:column="11">/* to detect mistakes better, see if there's data following */</comment>
          <expr_stmt><expr><name pos:line="149" pos:column="11">line<pos:position pos:line="149" pos:column="15"/></name><operator pos:line="149" pos:column="15">++<pos:position pos:line="149" pos:column="17"/></operator></expr>;<pos:position pos:line="149" pos:column="18"/></expr_stmt>
          <comment type="block" pos:line="150" pos:column="11">/* pass all spaces */</comment>
          <while pos:line="151" pos:column="11">while<condition pos:line="151" pos:column="16">(<expr><operator pos:line="151" pos:column="17">*<pos:position pos:line="151" pos:column="18"/></operator><name pos:line="151" pos:column="18">line<pos:position pos:line="151" pos:column="22"/></name> <operator pos:line="151" pos:column="23">&amp;&amp;<pos:position pos:line="151" pos:column="33"/></operator> <call><name pos:line="151" pos:column="26">ISSPACE<pos:position pos:line="151" pos:column="33"/></name><argument_list pos:line="151" pos:column="33">(<argument><expr><operator pos:line="151" pos:column="34">*<pos:position pos:line="151" pos:column="35"/></operator><name pos:line="151" pos:column="35">line<pos:position pos:line="151" pos:column="39"/></name></expr></argument>)<pos:position pos:line="151" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="151" pos:column="41"/></condition>
            <block type="pseudo"><expr_stmt><expr><name pos:line="152" pos:column="13">line<pos:position pos:line="152" pos:column="17"/></name><operator pos:line="152" pos:column="17">++<pos:position pos:line="152" pos:column="19"/></operator></expr>;<pos:position pos:line="152" pos:column="20"/></expr_stmt></block></while>

          <switch pos:line="154" pos:column="11">switch<condition pos:line="154" pos:column="17">(<expr><operator pos:line="154" pos:column="18">*<pos:position pos:line="154" pos:column="19"/></operator><name pos:line="154" pos:column="19">line<pos:position pos:line="154" pos:column="23"/></name></expr>)<pos:position pos:line="154" pos:column="24"/></condition> <block pos:line="154" pos:column="25">{
          <case pos:line="155" pos:column="11">case <expr><literal type="char" pos:line="155" pos:column="16">'\0'<pos:position pos:line="155" pos:column="20"/></literal></expr>:<pos:position pos:line="155" pos:column="21"/></case>
          <case pos:line="156" pos:column="11">case <expr><literal type="char" pos:line="156" pos:column="16">'\r'<pos:position pos:line="156" pos:column="20"/></literal></expr>:<pos:position pos:line="156" pos:column="21"/></case>
          <case pos:line="157" pos:column="11">case <expr><literal type="char" pos:line="157" pos:column="16">'\n'<pos:position pos:line="157" pos:column="20"/></literal></expr>:<pos:position pos:line="157" pos:column="21"/></case>
          <case pos:line="158" pos:column="11">case <expr><literal type="char" pos:line="158" pos:column="16">'#'<pos:position pos:line="158" pos:column="19"/></literal></expr>:<pos:position pos:line="158" pos:column="20"/></case> <comment type="block" pos:line="158" pos:column="21">/* comment */</comment>
            <break pos:line="159" pos:column="13">break;<pos:position pos:line="159" pos:column="19"/></break>
          <default pos:line="160" pos:column="11">default:<pos:position pos:line="160" pos:column="19"/></default>
            <expr_stmt><expr><call><name pos:line="161" pos:column="13">warnf<pos:position pos:line="161" pos:column="18"/></name><argument_list pos:line="161" pos:column="18">(<argument><expr><name><name pos:line="161" pos:column="19">operation<pos:position pos:line="161" pos:column="28"/></name><operator pos:line="161" pos:column="28">-&gt;<pos:position pos:line="161" pos:column="33"/></operator><name pos:line="161" pos:column="30">global<pos:position pos:line="161" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="161" pos:column="38">"%s:%d: warning: '%s' uses unquoted "<pos:position pos:line="161" pos:column="75"/></literal>
                  <literal type="string" pos:line="162" pos:column="19">"white space in the line that may cause side-effects!\n"<pos:position pos:line="162" pos:column="75"/></literal></expr></argument>,
                  <argument><expr><name pos:line="163" pos:column="19">filename<pos:position pos:line="163" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="29">lineno<pos:position pos:line="163" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="37">option<pos:position pos:line="163" pos:column="43"/></name></expr></argument>)<pos:position pos:line="163" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="45"/></expr_stmt>
          }<pos:position pos:line="164" pos:column="12"/></block></switch>
        }<pos:position pos:line="165" pos:column="10"/></block></then></if>
        <if pos:line="166" pos:column="9">if<condition pos:line="166" pos:column="11">(<expr><operator pos:line="166" pos:column="12">!<pos:position pos:line="166" pos:column="13"/></operator><operator pos:line="166" pos:column="13">*<pos:position pos:line="166" pos:column="14"/></operator><name pos:line="166" pos:column="14">param<pos:position pos:line="166" pos:column="19"/></name></expr>)<pos:position pos:line="166" pos:column="20"/></condition><then pos:line="166" pos:column="20">
          <comment type="block" pos:line="167" pos:column="11">/* do this so getparameter can check for required parameters.
             Otherwise it always thinks there's a parameter. */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="169" pos:column="11">param<pos:position pos:line="169" pos:column="16"/></name> <operator pos:line="169" pos:column="17">=<pos:position pos:line="169" pos:column="18"/></operator> <name pos:line="169" pos:column="19">NULL<pos:position pos:line="169" pos:column="23"/></name></expr>;<pos:position pos:line="169" pos:column="24"/></expr_stmt></block></then></if>
      }<pos:position pos:line="170" pos:column="8"/></block></else></if>

<cpp:ifdef pos:line="172" pos:column="1">#<cpp:directive pos:line="172" pos:column="2">ifdef<pos:position pos:line="172" pos:column="7"/></cpp:directive> <name pos:line="172" pos:column="8">DEBUG_CONFIG<pos:position pos:line="172" pos:column="20"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="173" pos:column="7">fprintf<pos:position pos:line="173" pos:column="14"/></name><argument_list pos:line="173" pos:column="14">(<argument><expr><name pos:line="173" pos:column="15">stderr<pos:position pos:line="173" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="173" pos:column="23">"PARAM: \"%s\"\n"<pos:position pos:line="173" pos:column="40"/></literal></expr></argument>,<argument><expr><operator pos:line="173" pos:column="41">(<pos:position pos:line="173" pos:column="42"/></operator><ternary><condition><expr><name pos:line="173" pos:column="42">param<pos:position pos:line="173" pos:column="47"/></name></expr> ?<pos:position pos:line="173" pos:column="49"/></condition><then pos:line="173" pos:column="49"> <expr><name pos:line="173" pos:column="50">param<pos:position pos:line="173" pos:column="55"/></name></expr> <pos:position pos:line="173" pos:column="56"/></then><else pos:line="173" pos:column="56">: <expr><literal type="string" pos:line="173" pos:column="58">"(null)"<pos:position pos:line="173" pos:column="66"/></literal></expr></else></ternary><operator pos:line="173" pos:column="66">)<pos:position pos:line="173" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="173" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="69"/></expr_stmt>
<cpp:endif pos:line="174" pos:column="1">#<cpp:directive pos:line="174" pos:column="2">endif<pos:position pos:line="174" pos:column="7"/></cpp:directive></cpp:endif>
      <expr_stmt><expr><name pos:line="175" pos:column="7">res<pos:position pos:line="175" pos:column="10"/></name> <operator pos:line="175" pos:column="11">=<pos:position pos:line="175" pos:column="12"/></operator> <call><name pos:line="175" pos:column="13">getparameter<pos:position pos:line="175" pos:column="25"/></name><argument_list pos:line="175" pos:column="25">(<argument><expr><name pos:line="175" pos:column="26">option<pos:position pos:line="175" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="175" pos:column="34">param<pos:position pos:line="175" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="175" pos:column="41">&amp;<pos:position pos:line="175" pos:column="46"/></operator><name pos:line="175" pos:column="42">usedarg<pos:position pos:line="175" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="175" pos:column="51">global<pos:position pos:line="175" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="175" pos:column="59">operation<pos:position pos:line="175" pos:column="68"/></name></expr></argument>)<pos:position pos:line="175" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="70"/></expr_stmt>

      <if pos:line="177" pos:column="7">if<condition pos:line="177" pos:column="9">(<expr><operator pos:line="177" pos:column="10">!<pos:position pos:line="177" pos:column="11"/></operator><name pos:line="177" pos:column="11">res<pos:position pos:line="177" pos:column="14"/></name> <operator pos:line="177" pos:column="15">&amp;&amp;<pos:position pos:line="177" pos:column="25"/></operator> <name pos:line="177" pos:column="18">param<pos:position pos:line="177" pos:column="23"/></name> <operator pos:line="177" pos:column="24">&amp;&amp;<pos:position pos:line="177" pos:column="34"/></operator> <operator pos:line="177" pos:column="27">*<pos:position pos:line="177" pos:column="28"/></operator><name pos:line="177" pos:column="28">param<pos:position pos:line="177" pos:column="33"/></name> <operator pos:line="177" pos:column="34">&amp;&amp;<pos:position pos:line="177" pos:column="44"/></operator> <operator pos:line="177" pos:column="37">!<pos:position pos:line="177" pos:column="38"/></operator><name pos:line="177" pos:column="38">usedarg<pos:position pos:line="177" pos:column="45"/></name></expr>)<pos:position pos:line="177" pos:column="46"/></condition><then pos:line="177" pos:column="46">
        <comment type="block" pos:line="178" pos:column="9">/* we passed in a parameter that wasn't used! */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="179" pos:column="9">res<pos:position pos:line="179" pos:column="12"/></name> <operator pos:line="179" pos:column="13">=<pos:position pos:line="179" pos:column="14"/></operator> <name pos:line="179" pos:column="15">PARAM_GOT_EXTRA_PARAMETER<pos:position pos:line="179" pos:column="40"/></name></expr>;<pos:position pos:line="179" pos:column="41"/></expr_stmt></block></then></if>

      <if pos:line="181" pos:column="7">if<condition pos:line="181" pos:column="9">(<expr><name pos:line="181" pos:column="10">res<pos:position pos:line="181" pos:column="13"/></name> <operator pos:line="181" pos:column="14">==<pos:position pos:line="181" pos:column="16"/></operator> <name pos:line="181" pos:column="17">PARAM_NEXT_OPERATION<pos:position pos:line="181" pos:column="37"/></name></expr>)<pos:position pos:line="181" pos:column="38"/></condition><then pos:line="181" pos:column="38"> <block pos:line="181" pos:column="39">{
        <if pos:line="182" pos:column="9">if<condition pos:line="182" pos:column="11">(<expr><name><name pos:line="182" pos:column="12">operation<pos:position pos:line="182" pos:column="21"/></name><operator pos:line="182" pos:column="21">-&gt;<pos:position pos:line="182" pos:column="26"/></operator><name pos:line="182" pos:column="23">url_list<pos:position pos:line="182" pos:column="31"/></name></name> <operator pos:line="182" pos:column="32">&amp;&amp;<pos:position pos:line="182" pos:column="42"/></operator> <name><name pos:line="182" pos:column="35">operation<pos:position pos:line="182" pos:column="44"/></name><operator pos:line="182" pos:column="44">-&gt;<pos:position pos:line="182" pos:column="49"/></operator><name pos:line="182" pos:column="46">url_list<pos:position pos:line="182" pos:column="54"/></name><operator pos:line="182" pos:column="54">-&gt;<pos:position pos:line="182" pos:column="59"/></operator><name pos:line="182" pos:column="56">url<pos:position pos:line="182" pos:column="59"/></name></name></expr>)<pos:position pos:line="182" pos:column="60"/></condition><then pos:line="182" pos:column="60"> <block pos:line="182" pos:column="61">{
          <comment type="block" pos:line="183" pos:column="11">/* Allocate the next config */</comment>
          <expr_stmt><expr><name><name pos:line="184" pos:column="11">operation<pos:position pos:line="184" pos:column="20"/></name><operator pos:line="184" pos:column="20">-&gt;<pos:position pos:line="184" pos:column="25"/></operator><name pos:line="184" pos:column="22">next<pos:position pos:line="184" pos:column="26"/></name></name> <operator pos:line="184" pos:column="27">=<pos:position pos:line="184" pos:column="28"/></operator> <call><name pos:line="184" pos:column="29">malloc<pos:position pos:line="184" pos:column="35"/></name><argument_list pos:line="184" pos:column="35">(<argument><expr><sizeof pos:line="184" pos:column="36">sizeof<argument_list pos:line="184" pos:column="42">(<argument><expr pos:line="184" pos:column="43">struct <name pos:line="184" pos:column="50">OperationConfig<pos:position pos:line="184" pos:column="65"/></name></expr></argument>)<pos:position pos:line="184" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="184" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="68"/></expr_stmt>
          <if pos:line="185" pos:column="11">if<condition pos:line="185" pos:column="13">(<expr><name><name pos:line="185" pos:column="14">operation<pos:position pos:line="185" pos:column="23"/></name><operator pos:line="185" pos:column="23">-&gt;<pos:position pos:line="185" pos:column="28"/></operator><name pos:line="185" pos:column="25">next<pos:position pos:line="185" pos:column="29"/></name></name></expr>)<pos:position pos:line="185" pos:column="30"/></condition><then pos:line="185" pos:column="30"> <block pos:line="185" pos:column="31">{
            <comment type="block" pos:line="186" pos:column="13">/* Initialise the newly created config */</comment>
            <expr_stmt><expr><call><name pos:line="187" pos:column="13">config_init<pos:position pos:line="187" pos:column="24"/></name><argument_list pos:line="187" pos:column="24">(<argument><expr><name><name pos:line="187" pos:column="25">operation<pos:position pos:line="187" pos:column="34"/></name><operator pos:line="187" pos:column="34">-&gt;<pos:position pos:line="187" pos:column="39"/></operator><name pos:line="187" pos:column="36">next<pos:position pos:line="187" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="187" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="42"/></expr_stmt>

            <comment type="block" pos:line="189" pos:column="13">/* Copy the easy handle */</comment>
            <expr_stmt><expr><name><name pos:line="190" pos:column="13">operation<pos:position pos:line="190" pos:column="22"/></name><operator pos:line="190" pos:column="22">-&gt;<pos:position pos:line="190" pos:column="27"/></operator><name pos:line="190" pos:column="24">next<pos:position pos:line="190" pos:column="28"/></name><operator pos:line="190" pos:column="28">-&gt;<pos:position pos:line="190" pos:column="33"/></operator><name pos:line="190" pos:column="30">easy<pos:position pos:line="190" pos:column="34"/></name></name> <operator pos:line="190" pos:column="35">=<pos:position pos:line="190" pos:column="36"/></operator> <name><name pos:line="190" pos:column="37">global<pos:position pos:line="190" pos:column="43"/></name><operator pos:line="190" pos:column="43">-&gt;<pos:position pos:line="190" pos:column="48"/></operator><name pos:line="190" pos:column="45">easy<pos:position pos:line="190" pos:column="49"/></name></name></expr>;<pos:position pos:line="190" pos:column="50"/></expr_stmt>

            <comment type="block" pos:line="192" pos:column="13">/* Set the global config pointer */</comment>
            <expr_stmt><expr><name><name pos:line="193" pos:column="13">operation<pos:position pos:line="193" pos:column="22"/></name><operator pos:line="193" pos:column="22">-&gt;<pos:position pos:line="193" pos:column="27"/></operator><name pos:line="193" pos:column="24">next<pos:position pos:line="193" pos:column="28"/></name><operator pos:line="193" pos:column="28">-&gt;<pos:position pos:line="193" pos:column="33"/></operator><name pos:line="193" pos:column="30">global<pos:position pos:line="193" pos:column="36"/></name></name> <operator pos:line="193" pos:column="37">=<pos:position pos:line="193" pos:column="38"/></operator> <name pos:line="193" pos:column="39">global<pos:position pos:line="193" pos:column="45"/></name></expr>;<pos:position pos:line="193" pos:column="46"/></expr_stmt>

            <comment type="block" pos:line="195" pos:column="13">/* Update the last operation pointer */</comment>
            <expr_stmt><expr><name><name pos:line="196" pos:column="13">global<pos:position pos:line="196" pos:column="19"/></name><operator pos:line="196" pos:column="19">-&gt;<pos:position pos:line="196" pos:column="24"/></operator><name pos:line="196" pos:column="21">last<pos:position pos:line="196" pos:column="25"/></name></name> <operator pos:line="196" pos:column="26">=<pos:position pos:line="196" pos:column="27"/></operator> <name><name pos:line="196" pos:column="28">operation<pos:position pos:line="196" pos:column="37"/></name><operator pos:line="196" pos:column="37">-&gt;<pos:position pos:line="196" pos:column="42"/></operator><name pos:line="196" pos:column="39">next<pos:position pos:line="196" pos:column="43"/></name></name></expr>;<pos:position pos:line="196" pos:column="44"/></expr_stmt>

            <comment type="block" pos:line="198" pos:column="13">/* Move onto the new config */</comment>
            <expr_stmt><expr><name><name pos:line="199" pos:column="13">operation<pos:position pos:line="199" pos:column="22"/></name><operator pos:line="199" pos:column="22">-&gt;<pos:position pos:line="199" pos:column="27"/></operator><name pos:line="199" pos:column="24">next<pos:position pos:line="199" pos:column="28"/></name><operator pos:line="199" pos:column="28">-&gt;<pos:position pos:line="199" pos:column="33"/></operator><name pos:line="199" pos:column="30">prev<pos:position pos:line="199" pos:column="34"/></name></name> <operator pos:line="199" pos:column="35">=<pos:position pos:line="199" pos:column="36"/></operator> <name pos:line="199" pos:column="37">operation<pos:position pos:line="199" pos:column="46"/></name></expr>;<pos:position pos:line="199" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><name pos:line="200" pos:column="13">operation<pos:position pos:line="200" pos:column="22"/></name> <operator pos:line="200" pos:column="23">=<pos:position pos:line="200" pos:column="24"/></operator> <name><name pos:line="200" pos:column="25">operation<pos:position pos:line="200" pos:column="34"/></name><operator pos:line="200" pos:column="34">-&gt;<pos:position pos:line="200" pos:column="39"/></operator><name pos:line="200" pos:column="36">next<pos:position pos:line="200" pos:column="40"/></name></name></expr>;<pos:position pos:line="200" pos:column="41"/></expr_stmt>
          }<pos:position pos:line="201" pos:column="12"/></block></then>
          <else pos:line="202" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="203" pos:column="13">res<pos:position pos:line="203" pos:column="16"/></name> <operator pos:line="203" pos:column="17">=<pos:position pos:line="203" pos:column="18"/></operator> <name pos:line="203" pos:column="19">PARAM_NO_MEM<pos:position pos:line="203" pos:column="31"/></name></expr>;<pos:position pos:line="203" pos:column="32"/></expr_stmt></block></else></if>
        }<pos:position pos:line="204" pos:column="10"/></block></then></if>
      }<pos:position pos:line="205" pos:column="8"/></block></then></if>

      <if pos:line="207" pos:column="7">if<condition pos:line="207" pos:column="9">(<expr><name pos:line="207" pos:column="10">res<pos:position pos:line="207" pos:column="13"/></name> <operator pos:line="207" pos:column="14">!=<pos:position pos:line="207" pos:column="16"/></operator> <name pos:line="207" pos:column="17">PARAM_OK<pos:position pos:line="207" pos:column="25"/></name> <operator pos:line="207" pos:column="26">&amp;&amp;<pos:position pos:line="207" pos:column="36"/></operator> <name pos:line="207" pos:column="29">res<pos:position pos:line="207" pos:column="32"/></name> <operator pos:line="207" pos:column="33">!=<pos:position pos:line="207" pos:column="35"/></operator> <name pos:line="207" pos:column="36">PARAM_NEXT_OPERATION<pos:position pos:line="207" pos:column="56"/></name></expr>)<pos:position pos:line="207" pos:column="57"/></condition><then pos:line="207" pos:column="57"> <block pos:line="207" pos:column="58">{
        <comment type="block" pos:line="208" pos:column="9">/* the help request isn't really an error */</comment>
        <if pos:line="209" pos:column="9">if<condition pos:line="209" pos:column="11">(<expr><operator pos:line="209" pos:column="12">!<pos:position pos:line="209" pos:column="13"/></operator><call><name pos:line="209" pos:column="13">strcmp<pos:position pos:line="209" pos:column="19"/></name><argument_list pos:line="209" pos:column="19">(<argument><expr><name pos:line="209" pos:column="20">filename<pos:position pos:line="209" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="209" pos:column="30">"-"<pos:position pos:line="209" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="209" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="209" pos:column="35"/></condition><then pos:line="209" pos:column="35"> <block pos:line="209" pos:column="36">{
          <expr_stmt><expr><name pos:line="210" pos:column="11">filename<pos:position pos:line="210" pos:column="19"/></name> <operator pos:line="210" pos:column="20">=<pos:position pos:line="210" pos:column="21"/></operator> <literal type="string" pos:line="210" pos:column="22">"&lt;stdin&gt;"<pos:position pos:line="210" pos:column="37"/></literal></expr>;<pos:position pos:line="210" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="211" pos:column="10"/></block></then></if>
        <if pos:line="212" pos:column="9">if<condition pos:line="212" pos:column="11">(<expr><name pos:line="212" pos:column="12">res<pos:position pos:line="212" pos:column="15"/></name> <operator pos:line="212" pos:column="16">!=<pos:position pos:line="212" pos:column="18"/></operator> <name pos:line="212" pos:column="19">PARAM_HELP_REQUESTED<pos:position pos:line="212" pos:column="39"/></name> <operator pos:line="212" pos:column="40">&amp;&amp;<pos:position pos:line="212" pos:column="50"/></operator>
           <name pos:line="213" pos:column="12">res<pos:position pos:line="213" pos:column="15"/></name> <operator pos:line="213" pos:column="16">!=<pos:position pos:line="213" pos:column="18"/></operator> <name pos:line="213" pos:column="19">PARAM_MANUAL_REQUESTED<pos:position pos:line="213" pos:column="41"/></name> <operator pos:line="213" pos:column="42">&amp;&amp;<pos:position pos:line="213" pos:column="52"/></operator>
           <name pos:line="214" pos:column="12">res<pos:position pos:line="214" pos:column="15"/></name> <operator pos:line="214" pos:column="16">!=<pos:position pos:line="214" pos:column="18"/></operator> <name pos:line="214" pos:column="19">PARAM_VERSION_INFO_REQUESTED<pos:position pos:line="214" pos:column="47"/></name> <operator pos:line="214" pos:column="48">&amp;&amp;<pos:position pos:line="214" pos:column="58"/></operator>
           <name pos:line="215" pos:column="12">res<pos:position pos:line="215" pos:column="15"/></name> <operator pos:line="215" pos:column="16">!=<pos:position pos:line="215" pos:column="18"/></operator> <name pos:line="215" pos:column="19">PARAM_ENGINES_REQUESTED<pos:position pos:line="215" pos:column="42"/></name></expr>)<pos:position pos:line="215" pos:column="43"/></condition><then pos:line="215" pos:column="43"> <block pos:line="215" pos:column="44">{
          <decl_stmt><decl><type><specifier pos:line="216" pos:column="11">const<pos:position pos:line="216" pos:column="16"/></specifier> <name pos:line="216" pos:column="17">char<pos:position pos:line="216" pos:column="21"/></name> <modifier pos:line="216" pos:column="22">*<pos:position pos:line="216" pos:column="23"/></modifier></type><name pos:line="216" pos:column="23">reason<pos:position pos:line="216" pos:column="29"/></name> <init pos:line="216" pos:column="30">= <expr><call><name pos:line="216" pos:column="32">param2text<pos:position pos:line="216" pos:column="42"/></name><argument_list pos:line="216" pos:column="42">(<argument><expr><name pos:line="216" pos:column="43">res<pos:position pos:line="216" pos:column="46"/></name></expr></argument>)<pos:position pos:line="216" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="216" pos:column="48"/></decl_stmt>
          <expr_stmt><expr><call><name pos:line="217" pos:column="11">warnf<pos:position pos:line="217" pos:column="16"/></name><argument_list pos:line="217" pos:column="16">(<argument><expr><name><name pos:line="217" pos:column="17">operation<pos:position pos:line="217" pos:column="26"/></name><operator pos:line="217" pos:column="26">-&gt;<pos:position pos:line="217" pos:column="31"/></operator><name pos:line="217" pos:column="28">global<pos:position pos:line="217" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="217" pos:column="36">"%s:%d: warning: '%s' %s\n"<pos:position pos:line="217" pos:column="63"/></literal></expr></argument>,
                <argument><expr><name pos:line="218" pos:column="17">filename<pos:position pos:line="218" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="218" pos:column="27">lineno<pos:position pos:line="218" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="218" pos:column="35">option<pos:position pos:line="218" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="218" pos:column="43">reason<pos:position pos:line="218" pos:column="49"/></name></expr></argument>)<pos:position pos:line="218" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="218" pos:column="51"/></expr_stmt>
        }<pos:position pos:line="219" pos:column="10"/></block></then></if>
      }<pos:position pos:line="220" pos:column="8"/></block></then></if>

      <if pos:line="222" pos:column="7">if<condition pos:line="222" pos:column="9">(<expr><name pos:line="222" pos:column="10">alloced_param<pos:position pos:line="222" pos:column="23"/></name></expr>)<pos:position pos:line="222" pos:column="24"/></condition><then pos:line="222" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="223" pos:column="9">Curl_safefree<pos:position pos:line="223" pos:column="22"/></name><argument_list pos:line="223" pos:column="22">(<argument><expr><name pos:line="223" pos:column="23">param<pos:position pos:line="223" pos:column="28"/></name></expr></argument>)<pos:position pos:line="223" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="223" pos:column="30"/></expr_stmt></block></then></if>

      <expr_stmt><expr><call><name pos:line="225" pos:column="7">Curl_safefree<pos:position pos:line="225" pos:column="20"/></name><argument_list pos:line="225" pos:column="20">(<argument><expr><name pos:line="225" pos:column="21">aline<pos:position pos:line="225" pos:column="26"/></name></expr></argument>)<pos:position pos:line="225" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="225" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="226" pos:column="6"/></block></while>
    <if pos:line="227" pos:column="5">if<condition pos:line="227" pos:column="7">(<expr><name pos:line="227" pos:column="8">file<pos:position pos:line="227" pos:column="12"/></name> <operator pos:line="227" pos:column="13">!=<pos:position pos:line="227" pos:column="15"/></operator> <name pos:line="227" pos:column="16">stdin<pos:position pos:line="227" pos:column="21"/></name></expr>)<pos:position pos:line="227" pos:column="22"/></condition><then pos:line="227" pos:column="22">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="228" pos:column="7">fclose<pos:position pos:line="228" pos:column="13"/></name><argument_list pos:line="228" pos:column="13">(<argument><expr><name pos:line="228" pos:column="14">file<pos:position pos:line="228" pos:column="18"/></name></expr></argument>)<pos:position pos:line="228" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="228" pos:column="20"/></expr_stmt></block></then></if>
  }<pos:position pos:line="229" pos:column="4"/></block></then>
  <else pos:line="230" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="231" pos:column="5">rc<pos:position pos:line="231" pos:column="7"/></name> <operator pos:line="231" pos:column="8">=<pos:position pos:line="231" pos:column="9"/></operator> <literal type="number" pos:line="231" pos:column="10">1<pos:position pos:line="231" pos:column="11"/></literal></expr>;<pos:position pos:line="231" pos:column="12"/></expr_stmt></block></else></if> <comment type="block" pos:line="231" pos:column="13">/* couldn't open the file */</comment>

  <return pos:line="233" pos:column="3">return <expr><name pos:line="233" pos:column="10">rc<pos:position pos:line="233" pos:column="12"/></name></expr>;<pos:position pos:line="233" pos:column="13"/></return>
}<pos:position pos:line="234" pos:column="2"/></block></function></unit>
