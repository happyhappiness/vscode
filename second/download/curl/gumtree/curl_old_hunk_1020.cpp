, stdout);
 fputs(
"              (SSL)  Specify  the  path  name  to the Entropy Gathering Daemon\n"
"              socket. The socket is used to seed the  random  engine  for  SSL\n"
"              connections. See also the --random-file option.\n"
"\n"
"       --cert-type <type>\n"
"              (SSL)  Tells curl what certificate type the provided certificate\n"
"              is in. PEM, DER and ENG are recognized types.  If not specified,\n"
"              PEM is assumed.\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --cacert <CA certificate>\n"
"              (SSL) Tells curl to use the specified certificate file to verify\n"
"              the peer. The file may contain  multiple  CA  certificates.  The\n"
"              certificate(s)  must be in PEM format. Normally curl is built to\n"
"              use a default file for this, so this option is typically used to\n"
"              alter that default file.\n"
"\n"
, stdout);
 fputs(
"              curl  recognizes the environment variable named 'CURL_CA_BUNDLE'\n"
"              if it is set, and uses the given path as a path  to  a  CA  cert\n"
"              bundle. This option overrides that variable.\n"
"\n"
"              The  windows  version  of  curl will automatically look for a CA\n"
"              certs file named 'curl-ca-bundle.crt', either in the same direc-\n"
"              tory as curl.exe, or in the Current Working Directory, or in any\n"
"              folder along your PATH.\n"
"\n"
, stdout);
 fputs(
"              If curl is built against  the  NSS  SSL  library,  the  NSS  PEM\n"
"              PKCS#11  module  (libnsspem.so)  needs  to be available for this\n"
"              option to work properly.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --capath <CA certificate directory>\n"
"              (SSL) Tells curl to use the specified certificate  directory  to\n"
"              verify  the  peer.  Multiple paths can be provided by separating\n"
, stdout);
 fputs(
"              them with \":\" (e.g.  \"path1:path2:path3\"). The certificates must\n"
"              be  in  PEM  format,  and  if curl is built against OpenSSL, the\n"
"              directory must have been processed using  the  c_rehash  utility\n"
"              supplied  with OpenSSL. Using --capath can allow OpenSSL-powered\n"
"              curl to make SSL-connections much more  efficiently  than  using\n"
"              --cacert if the --cacert file contains many CA certificates.\n"
"\n"
, stdout);
 fputs(
"              If this option is set, the default capath value will be ignored,\n"
"              and if it is used several times, the last one will be used.\n"
"\n"
"       --pinnedpubkey <pinned public key (hashes)>\n"
"              (SSL) Tells curl to  use  the  specified  public  key  file  (or\n"
"              hashes)  to  verify the peer. This can be a path to a file which\n"
"              contains a single public key in PEM or DER format, or any number\n"
, stdout);
 fputs(
"              of base64 encoded sha256 hashes preceded by 'sha256//' and sepa-\n"
"              rated by ';'\n"
"\n"
"              When negotiating a TLS or SSL connection,  the  server  sends  a\n"
"              certificate  indicating  its identity. A public key is extracted\n"
"              from this certificate and if it does not exactly match the  pub-\n"
"              lic  key provided to this option, curl will abort the connection\n"
"              before sending or receiving any data.\n"
"\n"
, stdout);
 fputs(
"              Added in 7.39.0 for OpenSSL, GnuTLS and GSKit. Added  in  7.43.0\n"
"              for  NSS  and wolfSSL/CyaSSL. sha256 support added in 7.44.0 for\n"
"              OpenSSL, GnuTLS, NSS and wolfSSL/CyaSSL. Other SSL backends  not\n"
"              supported.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --cert-status\n"
"              (SSL)  Tells curl to verify the status of the server certificate\n"
, stdout);
 fputs(
"              by using the Certificate Status Request (aka. OCSP stapling) TLS\n"
"              extension.\n"
"\n"
"              If  this option is enabled and the server sends an invalid (e.g.\n"
"              expired) response, if the response suggests that the server cer-\n"
"              tificate  has  been  revoked, or no response at all is received,\n"
"              the verification fails.\n"
"\n"
"              This is currently only implemented in the  OpenSSL,  GnuTLS  and\n"
, stdout);
 fputs(
"              NSS backends.  (Added in 7.41.0)\n"
"\n"
"       --false-start\n"
"\n"
"              (SSL)  Tells  curl  to use false start during the TLS handshake.\n"
"              False start is a mode where a  TLS  client  will  start  sending\n"
"              application data before verifying the server's Finished message,\n"
"              thus saving a round trip when performing a full handshake.\n"
"\n"
"              This is currently only implemented in the NSS and Secure  Trans-\n"
, stdout);
 fputs(
"              port  (on  iOS  7.0  or  later, or OS X 10.9 or later) backends.\n"
"              (Added in 7.42.0)\n"
"\n"
"       -f, --fail\n"
"              (HTTP) Fail silently (no output at all) on server  errors.  This\n"
"              is  mostly done to better enable scripts etc to better deal with\n"
"              failed attempts. In normal cases when an HTTP  server  fails  to\n"
"              deliver  a  document,  it  returns  an  HTML document stating so\n"
, stdout);
 fputs(
"              (which often also describes why and more). This flag  will  pre-\n"
"              vent curl from outputting that and return error 22.\n"
"\n"
"              This  method is not fail-safe and there are occasions where non-\n"
"              successful response codes will  slip  through,  especially  when\n"
"              authentication is involved (response codes 401 and 407).\n"
"\n"
"       -F, --form <name=content>\n"
"              (HTTP)  This  lets curl emulate a filled-in form in which a user\n"
, stdout);
 fputs(
"              has pressed the submit button. This causes  curl  to  POST  data\n"
"              using  the  Content-Type  multipart/form-data  according  to RFC\n"
"              2388. This enables uploading of binary files etc. To  force  the\n"
"              'content'  part  to  be  a  file, prefix the file name with an @\n"
"              sign. To just get the content part from a file, prefix the  file\n"
"              name  with  the symbol <. The difference between @ and < is then\n"
, stdout);
 fputs(
"              that @ makes a file get attached in the post as a  file  upload,\n"
"              while  the  <  makes  a text field and just get the contents for\n"
"              that text field from a file.\n"
"\n"
"              Example, to send your password file to the server, where  'pass-\n"
"              word' is the name of the form-field to which /etc/passwd will be\n"
"              the input:\n"
"\n"
"              curl -F password=@/etc/passwd www.mypasswords.com\n"
"\n"
, stdout);
 fputs(
"              To read content from stdin instead of a file, use - as the file-\n"
"              name.  This  goes  for both @ and < constructs. Unfortunately it\n"
"              does not support reading the file from a named pipe or  similar,\n"
"              as it needs the full size before the transfer starts.\n"
"\n"
"              You  can  also  tell  curl  what  Content-Type  to  use by using\n"
"              'type=', in a manner similar to:\n"
"\n"
"              curl -F \"web=@index.html;type=text/html\" url.com\n"
"\n"
, stdout);
 fputs(
"              or\n"
"\n"
"              curl -F \"name=daniel;type=text/foo\" url.com\n"
"\n"
"              You can also explicitly change the name field of a  file  upload\n"
"              part by setting filename=, like this:\n"
"\n"
"              curl -F \"file=@localfile;filename=nameinpost\" url.com\n"
"\n"
"              If  filename/path contains ',' or ';', it must be quoted by dou-\n"
"              ble-quotes like:\n"
"\n"
"              curl -F \"file=@\\\"localfile\\\";filename=\\\"nameinpost\\\"\" url.com\n"
"\n"
"              or\n"
"\n"
, stdout);
 fputs(
"              curl -F 'file=@\"localfile\";filename=\"nameinpost\"' url.com\n"
"\n"
"              Note that if a filename/path is  quoted  by  double-quotes,  any\n"
"              double-quote or backslash within the filename must be escaped by\n"
"              backslash.\n"
"\n"
"              See further examples and details in the MANUAL.\n"
"\n"
"              This option can be used multiple times.\n"
"\n"
"       --ftp-account [data]\n"
"              (FTP) When an FTP server asks for \"account data\" after user name\n"
, stdout);
 fputs(
"              and  password has been provided, this data is sent off using the\n"
"              ACCT command. (Added in 7.13.0)\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --ftp-alternative-to-user <command>\n"
"              (FTP) If authenticating with the USER and PASS  commands  fails,\n"
"              send  this  command.   When  connecting  to  Tumbleweed's Secure\n"
"              Transport server over FTPS using  a  client  certificate,  using\n"
, stdout);
 fputs(
"              \"SITE  AUTH\"  will tell the server to retrieve the username from\n"
"              the certificate. (Added in 7.15.5)\n"
"\n"
"       --ftp-create-dirs\n"
"              (FTP/SFTP) When an FTP or SFTP URL/operation uses  a  path  that\n"
"              doesn't  currently exist on the server, the standard behavior of\n"
"              curl is to fail. Using this option, curl will instead attempt to\n"
"              create missing directories.\n"
"\n"
"       --ftp-method [method]\n"
, stdout);
 fputs(
"              (FTP)  Control what method curl should use to reach a file on an\n"
"              FTP(S) server. The method argument should be one of the  follow-\n"
"              ing alternatives:\n"
"\n"
"              multicwd\n"
"                     curl  does  a  single CWD operation for each path part in\n"
"                     the given URL. For deep hierarchies this means very  many\n"
"                     commands.  This  is  how RFC 1738 says it should be done.\n"
, stdout);
 fputs(
"                     This is the default but the slowest behavior.\n"
"\n"
"              nocwd  curl does no CWD at all. curl will do  SIZE,  RETR,  STOR\n"
"                     etc and give a full path to the server for all these com-\n"
"                     mands. This is the fastest behavior.\n"
"\n"
"              singlecwd\n"
"                     curl does one CWD with the full target directory and then\n"
"                     operates  on  the  file  \"normally\" (like in the multicwd\n"
, stdout);
 fputs(
"                     case). This is somewhat  more  standards  compliant  than\n"
"                     'nocwd' but without the full penalty of 'multicwd'.\n"
"\n"
"              (Added in 7.15.1)\n"
"\n"
"       --ftp-pasv\n"
"              (FTP)  Use  passive mode for the data connection. Passive is the\n"
"              internal default behavior, but using this option can be used  to\n"
"              override a previous -P/-ftp-port option. (Added in 7.11.0)\n"
"\n"
, stdout);
 fputs(
"              If  this  option  is  used  several times, only the first one is\n"
"              used. Undoing an enforced passive really isn't  doable  but  you\n"
"              must then instead enforce the correct -P, --ftp-port again.\n"
"\n"
"              Passive mode means that curl will try the EPSV command first and\n"
"              then PASV, unless --disable-epsv is used.\n"
"\n"
"       --ftp-skip-pasv-ip\n"
"              (FTP) Tell curl to not use the IP address the server suggests in\n"
, stdout);
 fputs(
"              its  response to curl's PASV command when curl connects the data\n"
"              connection. Instead curl will re-use  the  same  IP  address  it\n"
"              already uses for the control connection. (Added in 7.14.2)\n"
"\n"
"              This  option has no effect if PORT, EPRT or EPSV is used instead\n"
"              of PASV.\n"
"\n"
"       --ftp-pret\n"
"              (FTP) Tell curl to send a PRET command before PASV  (and  EPSV).\n"
, stdout);
 fputs(
"              Certain  FTP  servers,  mainly drftpd, require this non-standard\n"
"              command for directory listings as well as up  and  downloads  in\n"
"              PASV mode.  (Added in 7.20.x)\n"
"\n"
"       --ftp-ssl-ccc\n"
"              (FTP)  Use  CCC  (Clear  Command Channel) Shuts down the SSL/TLS\n"
"              layer after authenticating. The rest of the control channel com-\n"
"              munication  will be unencrypted. This allows NAT routers to fol-\n"
, stdout);
 fputs(
"              low the FTP transaction. The default mode is passive. See --ftp-\n"
"              ssl-ccc-mode for other modes.  (Added in 7.16.1)\n"
"\n"
"       --ftp-ssl-ccc-mode [active/passive]\n"
"              (FTP)  Use  CCC  (Clear  Command Channel) Sets the CCC mode. The\n"
"              passive mode will not initiate the shutdown,  but  instead  wait\n"
"              for the server to do it, and will not reply to the shutdown from\n"
, stdout);
 fputs(
"              the server. The active mode initiates the shutdown and waits for\n"
"              a reply from the server.  (Added in 7.16.2)\n"
"\n"
"       --ftp-ssl-control\n"
"              (FTP)  Require  SSL/TLS  for  the FTP login, clear for transfer.\n"
"              Allows secure authentication, but non-encrypted  data  transfers\n"
"              for  efficiency.   Fails the transfer if the server doesn't sup-\n"
"              port SSL/TLS.  (Added in 7.16.0) that can still be used but will\n"
, stdout);
 fputs(
"              be removed in a future version.\n"
"\n"
"       --form-string <name=string>\n"
"              (HTTP)  Similar  to  --form except that the value string for the\n"
"              named parameter is used literally. Leading '@' and  '<'  charac-\n"
"              ters, and the ';type=' string in the value have no special mean-\n"
"              ing. Use this in preference to --form if there's any possibility\n"
"              that  the  string  value may accidentally trigger the '@' or '<'\n"
, stdout);
 fputs(
"              features of --form.\n"
"\n"
"       -g, --globoff\n"
"              This option switches off the \"URL globbing parser\". When you set\n"
"              this  option, you can specify URLs that contain the letters {}[]\n"
"              without having them being interpreted by curl itself. Note  that\n"
"              these  letters are not normal legal URL contents but they should\n"
"              be encoded according to the URI standard.\n"
"\n"
"       -G, --get\n"
, stdout);
 fputs(
"              When used, this option will make all  data  specified  with  -d,\n"
"              --data,  --data-binary or --data-urlencode to be used in an HTTP\n"
"              GET request instead of the POST request that otherwise would  be\n"
"              used. The data will be appended to the URL with a '?' separator.\n"
"              If  used  in  combination with -I, the POST data will instead be\n"
"              appended to the URL with a HEAD request.\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times,  only  the  first  one  is\n"
"              used.  This is because undoing a GET doesn't make sense, but you\n"
"              should then instead enforce the alternative method you prefer.\n"
"\n"
"       -H, --header <header>\n"
"              (HTTP) Extra header to include in the request when sending  HTTP\n"
"              to  a  server. You may specify any number of extra headers. Note\n"
, stdout);
 fputs(
"              that if you should add a custom header that has the same name as\n"
"              one  of  the  internal  ones curl would use, your externally set\n"
"              header will be used instead of the internal one. This allows you\n"
"              to  make  even  trickier  stuff than curl would normally do. You\n"
"              should not replace internally set headers without  knowing  per-\n"
"              fectly well what you're doing. Remove an internal header by giv-\n"
, stdout);
 fputs(
"              ing a replacement without content  on  the  right  side  of  the\n"
"              colon, as in: -H \"Host:\". If you send the custom header with no-\n"
"              value then its header must be terminated with a semicolon,  such\n"
"              as -H \"X-Custom-Header;\" to send \"X-Custom-Header:\".\n"
"\n"
"              curl  will  make  sure  that each header you add/replace is sent\n"
"              with the proper end-of-line marker, you should thus not add that\n"
, stdout);
 fputs(
"              as a part of the header content: do not add newlines or carriage\n"
"              returns, they will only mess things up for you.\n"
"\n"
"              See also the -A, --user-agent and -e, --referer options.\n"
"\n"
"              Starting in 7.37.0, you need --proxy-header to send custom head-\n"
"              ers intended for a proxy.\n"
"\n"
"              Example:\n"
"\n"
"              # curl -H \"X-First-Name: Joe\" http://192.168.0.1/\n"
"\n"
, stdout);
 fputs(
"              WARNING:  headers  set  with  this  option  will  be  set in all\n"
"              requests - even after redirects are  followed,  like  when  told\n"
"              with  -L,  --location. This can lead to the header being sent to\n"
"              other hosts than the original host, so sensitive headers  should\n"
"              be used with caution combined with following redirects.\n"
"\n"
"              This  option  can  be  used multiple times to add/replace/remove\n"
"              multiple headers.\n"
"\n"
, stdout);
 fputs(
"       --hostpubmd5 <md5>\n"
"              (SCP/SFTP) Pass a string containing 32 hexadecimal  digits.  The\n"
"              string  should  be the 128 bit MD5 checksum of the remote host's\n"
"              public key, curl will refuse the connection with the host unless\n"
"              the md5sums match. (Added in 7.17.1)\n"
"\n"
"       --ignore-content-length\n"
"              For HTTP, Ignore the Content-Length header. This is particularly\n"
, stdout);
 fputs(
"              useful for servers running Apache 1.x, which will report  incor-\n"
"              rect Content-Length for files larger than 2 gigabytes.\n"
"\n"
"              For  FTP (since 7.46.0), skip the RETR command to figure out the\n"
"              size before downloading a file.\n"
"\n"
"       -i, --include\n"
"              (HTTP) Include the HTTP-header in the  output.  The  HTTP-header\n"
"              includes  things  like  server-name, date of the document, HTTP-\n"
"              version and more...\n"
"\n"
, stdout);
 fputs(
"       -I, --head\n"
"              (HTTP/FTP/FILE) Fetch the HTTP-header only! HTTP-servers feature\n"
"              the  command  HEAD which this uses to get nothing but the header\n"
"              of a document. When used on an FTP or FILE file,  curl  displays\n"
"              the file size and last modification time only.\n"
"\n"
"       --interface <name>\n"
"              Perform  an operation using a specified interface. You can enter\n"
, stdout);
 fputs(
"              interface name, IP address or host name. An example  could  look\n"
"              like:\n"
"\n"
"               curl --interface eth0:1 http://www.netscape.com/\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -j, --junk-session-cookies\n"
"              (HTTP) When curl is told to read cookies from a given file, this\n"
"              option will make it discard all  \"session  cookies\".  This  will\n"
, stdout);
 fputs(
"              basically  have  the same effect as if a new session is started.\n"
"              Typical browsers always discard  session  cookies  when  they're\n"
"              closed down.\n"
"\n"
"       -J, --remote-header-name\n"
"              (HTTP) This option tells the -O, --remote-name option to use the\n"
"              server-specified   Content-Disposition   filename   instead   of\n"
"              extracting a filename from the URL.\n"
"\n"
, stdout);
 fputs(
"              There's  no  attempt to decode %-sequences (yet) in the provided\n"
"              file name, so this option may provide you with rather unexpected\n"
"              file names.\n"
"\n"
"       -k, --insecure\n"
"              (SSL)  This  option explicitly allows curl to perform \"insecure\"\n"
"              SSL connections and transfers. All SSL connections are attempted\n"
"              to  be  made secure by using the CA certificate bundle installed\n"
, stdout);
 fputs(
"              by default. This makes  all  connections  considered  \"insecure\"\n"
"              fail unless -k, --insecure is used.\n"
"\n"
"              See     this    online    resource    for    further    details:\n"
"              http://curl.haxx.se/docs/sslcerts.html\n"
"\n"
"       -K, --config <config file>\n"
"              Specify which config file to read curl arguments from. The  con-\n"
"              fig  file  is a text file in which command line arguments can be\n"
, stdout);
 fputs(
"              written which then will be used as if they were written  on  the\n"
"              actual command line.\n"
"\n"
"              Options  and their parameters must be specified on the same con-\n"
"              fig file line, separated by whitespace,  colon,  or  the  equals\n"
"              sign.  Long  option  names can optionally be given in the config\n"
"              file without the initial double dashes and if so, the  colon  or\n"
, stdout);
 fputs(
"              equals  characters  can  be used as separators. If the option is\n"
"              specified with one or two dashes,  there  can  be  no  colon  or\n"
"              equals character between the option and its parameter.\n"
"\n"
"              If the parameter is to contain whitespace, the parameter must be\n"
"              enclosed within quotes.  Within  double  quotes,  the  following\n"
"              escape  sequences  are  available:  \\\\, \\\", \\t, \\n, \\r and \\v. A\n"
, stdout);
 fputs(
"              backslash preceding any other letter is ignored.  If  the  first\n"
"              column of a config line is a '#' character, the rest of the line\n"
"              will be treated as a comment. Only write one option per physical\n"
"              line in the config file.\n"
"\n"
"              Specify  the  filename  to -K, --config as '-' to make curl read\n"
"              the file from stdin.\n"
"\n"
"              Note that to be able to specify a URL in the  config  file,  you\n"
, stdout);
 fputs(
"              need  to  specify  it  using the --url option, and not by simply\n"
"              writing the URL on its own line. So, it could  look  similar  to\n"
"              this:\n"
"\n"
"              url = \"http://curl.haxx.se/docs/\"\n"
"\n"
"              When curl is invoked, it always (unless -q is used) checks for a\n"
"              default config file and uses it if  found.  The  default  config\n"
"              file is checked for in the following places in this order:\n"
"\n"
, stdout);
 fputs(
"              1)  curl  tries  to find the \"home dir\": It first checks for the\n"
"              CURL_HOME and then the HOME environment variables. Failing that,\n"
"              it  uses getpwuid() on Unix-like systems (which returns the home\n"
"              dir given the current user in your system). On Windows, it  then\n"
"              checks for the APPDATA variable, or as a last resort the '%USER-\n"
"              PROFILE%\\Application Data'.\n"
"\n"
, stdout);
 fputs(
"              2) On windows, if there is no _curlrc file in the home  dir,  it\n"
"              checks for one in the same dir the curl executable is placed. On\n"
"              Unix-like systems, it will simply try to load .curlrc  from  the\n"
"              determined home dir.\n"
"\n"
"              # --- Example file ---\n"
"              # this is a comment\n"
"              url = \"curl.haxx.se\"\n"
"              output = \"curlhere.html\"\n"
"              user-agent = \"superagent/1.0\"\n"
"\n"
, stdout);
 fputs(
"              # and fetch another URL too\n"
"              url = \"curl.haxx.se/docs/manpage.html\"\n"
"              -O\n"
"              referer = \"http://nowhereatall.com/\"\n"
"              # --- End of example file ---\n"
"\n"
"              This  option  can be used multiple times to load multiple config\n"
"              files.\n"
"\n"
"       --keepalive-time <seconds>\n"
"              This option sets the time a  connection  needs  to  remain  idle\n"
, stdout);
 fputs(
"              before  sending keepalive probes and the time between individual\n"
"              keepalive probes. It is currently effective on operating systems\n"
"              offering  the  TCP_KEEPIDLE  and  TCP_KEEPINTVL  socket  options\n"
"              (meaning Linux, recent AIX, HP-UX and more). This option has  no\n"
"              effect if --no-keepalive is used. (Added in 7.18.0)\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
, stdout);
 fputs(
"              If unspecified, the option defaults to 60 seconds.\n"
"\n"
"       --key <key>\n"
"              (SSL/SSH) Private key file name. Allows you to provide your pri-\n"
"              vate  key in this separate file. For SSH, if not specified, curl\n"
"              tries  the  following  candidates  in  order:   '~/.ssh/id_rsa',\n"
"              '~/.ssh/id_dsa', './id_rsa', './id_dsa'.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --key-type <type>\n"
, stdout);
 fputs(
"              (SSL)  Private key file type. Specify which type your --key pro-\n"
"              vided private key is. DER, PEM, and ENG are  supported.  If  not\n"
"              specified, PEM is assumed.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --krb <level>\n"
"              (FTP)  Enable Kerberos authentication and use. The level must be\n"
"              entered and should be one of 'clear', 'safe', 'confidential', or\n"
, stdout);
 fputs(
"              'private'.  Should  you  use  a  level that is not one of these,\n"
"              'private' will instead be used.\n"
"\n"
"              This option requires a library  built  with  kerberos4  support.\n"
"              This  is  not very common. Use -V, --version to see if your curl\n"
"              supports it.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       -l, --list-only\n"
"              (FTP) When listing an FTP directory, this switch forces a  name-\n"
, stdout);
 fputs(
"              only  view.  This  is  especially  useful  if  the user wants to\n"
"              machine-parse the contents of an FTP directory since the  normal\n"
"              directory  view doesn't use a standard look or format. When used\n"
"              like this, the option causes a NLST command to be  sent  to  the\n"
"              server instead of LIST.\n"
"\n"
"              Note:  Some  FTP  servers  list  only files in their response to\n"
, stdout);
 fputs(
"              NLST; they do not include sub-directories and symbolic links.\n"
"\n"
"              (POP3) When retrieving a specific email from POP3,  this  switch\n"
"              forces  a  LIST command to be performed instead of RETR. This is\n"
"              particularly useful if the user wants to see if a specific  mes-\n"
"              sage id exists on the server and what size it is.\n"
"\n"
"              Note:  When  combined  with -X, --request <command>, this option\n"
, stdout);
 fputs(
"              can be used to send an UIDL command instead, so the user may use\n"
"              the  email's  unique  identifier  rather than it's message id to\n"
"              make the request. (Added in 7.21.5)\n"
"\n"
"       -L, --location\n"
"              (HTTP/HTTPS) If the server reports that the requested  page  has\n"
"              moved to a different location (indicated with a Location: header\n"
"              and a 3XX response code), this option will make  curl  redo  the\n"
, stdout);
 fputs(
"              request on the new place. If used together with -i, --include or\n"
"              -I, --head, headers from all requested pages will be shown. When\n"
"              authentication  is  used, curl only sends its credentials to the\n"
"              initial host. If a redirect takes curl to a different  host,  it\n"
"              won't  be  able to intercept the user+password. See also --loca-\n"
"              tion-trusted on how to change this. You can limit the amount  of\n"
, stdout);
 fputs(
"              redirects to follow by using the --max-redirs option.\n"
"\n"
"              When  curl follows a redirect and the request is not a plain GET\n"
"              (for example POST or PUT), it will do the following request with\n"
"              a GET if the HTTP response was 301, 302, or 303. If the response\n"
"              code was any other 3xx code, curl  will  re-send  the  following\n"
"              request using the same unmodified method.\n"
"\n"
, stdout);
 fputs(
"              You  can  tell  curl to not change the non-GET request method to\n"
"              GET after a 30x response by  using  the  dedicated  options  for\n"
"              that: --post301, --post302 and -post303.\n"
"\n"
"       --libcurl <file>\n"
"              Append  this  option  to any ordinary curl command line, and you\n"
"              will get a libcurl-using C source code written to the file  that\n"
"              does the equivalent of what your command-line operation does!\n"
"\n"
, stdout);
 fputs(
"              If  this  option is used several times, the last given file name\n"
"              will be used. (Added in 7.16.1)\n"
"\n"
"       --limit-rate <speed>\n"
"              Specify the maximum transfer rate you want curl  to  use  -  for\n"
"              both downloads and uploads. This feature is useful if you have a\n"
"              limited pipe and you'd like your transfer not to use your entire\n"
"              bandwidth. To make it slower than it otherwise would be.\n"
"\n"
, stdout);
 fputs(
"              The  given speed is measured in bytes/second, unless a suffix is\n"
"              appended.  Appending 'k' or 'K' will count the number  as  kilo-\n"
"              bytes,  'm'  or M' makes it megabytes, while 'g' or 'G' makes it\n"
"              gigabytes. Examples: 200K, 3m and 1G.\n"
"\n"
"              The given rate is the average speed counted  during  the  entire\n"
"              transfer. It means that curl might use higher transfer speeds in\n"
, stdout);
 fputs(
"              short bursts, but over time it uses no more than the given rate.\n"
"              If you also use the -Y, --speed-limit option, that  option  will\n"
"              take precedence and might cripple the rate-limiting slightly, to\n"
"              help keeping the speed-limit logic working.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --local-port <num>[-num]\n"
"              Set a preferred number or range of local port numbers to use for\n"
, stdout);
 fputs(
"              the  connection(s).   Note  that  port  numbers  by nature are a\n"
"              scarce resource that will be busy at times so setting this range\n"
"              to something too narrow might cause unnecessary connection setup\n"
"              failures. (Added in 7.15.2)\n"
"\n"
"       --location-trusted\n"
"              (HTTP/HTTPS) Like -L, --location, but  will  allow  sending  the\n"
"              name + password to all hosts that the site may redirect to. This\n"
, stdout);
 fputs(
"              may or may not introduce a security breach if the site redirects\n"
"              you  to  a  site  to  which you'll send your authentication info\n"
"              (which is plaintext in the case of HTTP Basic authentication).\n"
"\n"
"       -m, --max-time <seconds>\n"
"              Maximum time in seconds that you allow the  whole  operation  to\n"
"              take.   This is useful for preventing your batch jobs from hang-\n"
, stdout);
 fputs(
"              ing for hours due to slow networks or links going  down.   Since\n"
"              7.32.0, this option accepts decimal values, but the actual time-\n"
"              out will decrease in accuracy as the specified timeout increases\n"
"              in decimal precision.  See also the --connect-timeout option.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --login-options <options>\n"
, stdout);
 fputs(
"              Specify the login options to use during server authentication.\n"
"\n"
"              You  can  use  the  login  options  to specify protocol specific\n"
"              options that may be used during authentication. At present  only\n"
"              IMAP,  POP3 and SMTP support login options. For more information\n"
"              about the login options please see RFC 2384, RFC 5092  and  IETF\n"
"              draft draft-earhart-url-smtp-00.txt (Added in 7.34.0).\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --mail-auth <address>\n"
"              (SMTP)  Specify  a  single address. This will be used to specify\n"
"              the authentication address (identity)  of  a  submitted  message\n"
"              that is being relayed to another server.\n"
"\n"
"              (Added in 7.25.0)\n"
"\n"
"       --mail-from <address>\n"
"              (SMTP)  Specify  a single address that the given mail should get\n"
"              sent from.\n"
"\n"
, stdout);
 fputs(
"              (Added in 7.20.0)\n"
"\n"
"       --max-filesize <bytes>\n"
"              Specify the maximum size (in bytes) of a file  to  download.  If\n"
"              the  file requested is larger than this value, the transfer will\n"
"              not start and curl will return with exit code 63.\n"
"\n"
"              NOTE: The file size is not always known prior to  download,  and\n"
"              for such files this option has no effect even if the file trans-\n"
, stdout);
 fputs(
"              fer ends up being larger than this given  limit.  This  concerns\n"
"              both FTP and HTTP transfers.\n"
"\n"
"       --mail-rcpt <address>\n"
"              (SMTP) Specify a single address, user name or mailing list name.\n"
"              When  performing a mail transfer, the recipient should specify a\n"
"              valid email address to send the mail to. (Added in 7.20.0)\n"
"\n"
"              When performing an  address  verification  (VRFY  command),  the\n"
, stdout);
 fputs(
"              recipient  should be specified as the user name or user name and\n"
"              domain (as per Section 3.5 of RFC5321). (Added in 7.34.0)\n"
"\n"
"              When performing a mailing list expand (EXPN command), the recip-\n"
"              ient  should  be  specified using the mailing list name, such as\n"
"              \"Friends\" or \"London-Office\".  (Added in 7.34.0)\n"
"\n"
"       --max-redirs <num>\n"
"              Set maximum number of  redirection-followings  allowed.  If  -L,\n"
, stdout);
 fputs(
"              --location is used, this option can be used to prevent curl from\n"
"              following redirections \"in absurdum\". By default, the  limit  is\n"
"              set  to 50 redirections. Set this option to -1 to make it limit-\n"
"              less.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --metalink\n"
"              This option can tell curl to parse and process a  given  URI  as\n"
, stdout);
 fputs(
"              Metalink  file  (both  version 3 and 4 (RFC 5854) are supported)\n"
"              and make use of the mirrors listed within for failover if  there\n"
"              are  errors (such as the file or server not being available). It\n"
"              will also verify the hash of the file after  the  download  com-\n"
"              pletes.  The Metalink file itself is downloaded and processed in\n"
"              memory and not stored in the local file system.\n"
"\n"
, stdout);
 fputs(
"              Example to use a remote Metalink file:\n"
"\n"
"              curl --metalink http://www.example.com/example.metalink\n"
"\n"
"              To use a Metalink file in the local file system, use FILE proto-\n"
"              col (file://):\n"
"\n"
"              curl --metalink file://example.metalink\n"
"\n"
"              Please  note  that if FILE protocol is disabled, there is no way\n"
"              to use a local Metalink file at the time of this  writing.  Also\n"
, stdout);
 fputs(
"              note  that  if  --metalink  and  --include  are  used  together,\n"
"              --include will be ignored. This is because including headers  in\n"
"              the  response  will break Metalink parser and if the headers are\n"
"              included in the file described in Metalink file, hash check will\n"
"              fail.\n"
"\n"
"              (Added in 7.27.0, if built against the libmetalink library.)\n"
"\n"
"       -n, --netrc\n"
, stdout);
 fputs(
"              Makes  curl  scan  the  .netrc  (_netrc  on Windows) file in the\n"
"              user's home directory for login name and password. This is typi-\n"
"              cally  used for FTP on Unix. If used with HTTP, curl will enable\n"
"              user authentication. See netrc(5) ftp(1) for details on the file\n"
"              format.  Curl  will  not  complain if that file doesn't have the\n"
"              right permissions (it should not be either world- or group-read-\n"
, stdout);
 fputs(
"              able).  The environment variable \"HOME\" is used to find the home\n"
"              directory.\n"
"\n"
"              A quick and very simple example of how  to  setup  a  .netrc  to\n"
"              allow  curl to FTP to the machine host.domain.com with user name\n"
"              'myself' and password 'secret' should look similar to:\n"
"\n"
"              machine host.domain.com login myself password secret\n"
"\n"
"       -N, --no-buffer\n"
, stdout);
 fputs(
"              Disables the buffering of the output stream. In normal work sit-\n"
"              uations,  curl  will  use a standard buffered output stream that\n"
"              will have the effect that it will output the data in chunks, not\n"
"              necessarily  exactly  when  the data arrives.  Using this option\n"
"              will disable that buffering.\n"
"\n"
"              Note that this is the negated option name  documented.  You  can\n"
"              thus use --buffer to enforce the buffering.\n"
"\n"
, stdout);
 fputs(
"       --netrc-file\n"
"              This  option  is similar to --netrc, except that you provide the\n"
"              path (absolute or relative) to the netrc file that  Curl  should\n"
"              use.   You  can  only  specify one netrc file per invocation. If\n"
"              several --netrc-file options are provided,  only  the  last  one\n"
"              will be used.  (Added in 7.21.5)\n"
"\n"
"              This  option  overrides  any use of --netrc as they are mutually\n"
, stdout);
 fputs(
"              exclusive.  It will also abide by --netrc-optional if specified.\n"
"\n"
"       --netrc-optional\n"
"              Very similar to --netrc, but this option makes the .netrc  usage\n"
"              optional and not mandatory as the --netrc option does.\n"
"\n"
"       --negotiate\n"
"              (HTTP) Enables Negotiate (SPNEGO) authentication.\n"
"\n"
"              If  you  want to enable Negotiate (SPNEGO) for proxy authentica-\n"
"              tion, then use --proxy-negotiate.\n"
"\n"
, stdout);
 fputs(
"              This option requires a library built with GSS-API or  SSPI  sup-\n"
"              port.  Use  -V,  --version  to  see  if  your curl supports GSS-\n"
"              API/SSPI and SPNEGO.\n"
"\n"
"              When using this option, you must also provide a fake -u,  --user\n"
"              option  to  activate the authentication code properly. Sending a\n"
"              '-u :' is enough as the user  name  and  password  from  the  -u\n"
"              option aren't actually used.\n"
"\n"
, stdout);
 fputs(
"              If  this  option  is  used  several times, only the first one is\n"
"              used.\n"
"\n"
"       --no-keepalive\n"
"              Disables the use of keepalive messages on the TCP connection, as\n"
"              by default curl enables them.\n"
"\n"
"              Note  that  this  is the negated option name documented. You can\n"
"              thus use --keepalive to enforce keepalive.\n"
"\n"
"       --no-sessionid\n"
"              (SSL) Disable curl's use of SSL session-ID caching.  By  default\n"
, stdout);
 fputs(
"              all  transfers are done using the cache. Note that while nothing\n"
"              should ever get hurt by attempting  to  reuse  SSL  session-IDs,\n"
"              there seem to be broken SSL implementations in the wild that may\n"
"              require you to disable this in order for you to succeed.  (Added\n"
"              in 7.16.0)\n"
"\n"
"              Note  that  this  is the negated option name documented. You can\n"
"              thus use --sessionid to enforce session-ID caching.\n"
"\n"
, stdout);
 fputs(
"       --noproxy <no-proxy-list>\n"
"              Comma-separated list of hosts which do not use a proxy,  if  one\n"
"              is  specified.  The only wildcard is a single * character, which\n"
"              matches all hosts, and effectively disables the proxy. Each name\n"
"              in  this  list  is matched as either a domain which contains the\n"
"              hostname, or the hostname itself. For example,  local.com  would\n"
, stdout);
 fputs(
"              match   local.com,  local.com:80,  and  www.local.com,  but  not\n"
"              www.notlocal.com.  (Added in 7.19.4).\n"
"\n"
"       --ntlm (HTTP) Enables  NTLM  authentication.  The  NTLM  authentication\n"
"              method was designed by Microsoft and is used by IIS web servers.\n"
"              It is a proprietary protocol, reverse-engineered by clever  peo-\n"
"              ple and implemented in curl based on their efforts. This kind of\n"
, stdout);
 fputs(
"              behavior should not be endorsed, you should  encourage  everyone\n"
"              who  uses  NTLM to switch to a public and documented authentica-\n"
"              tion method instead, such as Digest.\n"
"\n"
"              If you want to enable NTLM for your proxy  authentication,  then\n"
"              use --proxy-ntlm.\n"
"\n"
"              This  option  requires a library built with SSL support. Use -V,\n"
"              --version to see if your curl supports NTLM.\n"
"\n"
, stdout);
 fputs(
"              If this option is used several times,  only  the  first  one  is\n"
"              used.\n"
"\n"
"       -o, --output <file>\n"
"              Write output to <file> instead of stdout. If you are using {} or\n"
"              [] to fetch multiple documents, you can use '#'  followed  by  a\n"
"              number  in  the <file> specifier. That variable will be replaced\n"
"              with the current string for the URL being fetched. Like in:\n"
"\n"
, stdout);
 fputs(
"                curl http://{one,two}.site.com -o \"file_#1.txt\"\n"
"\n"
"              or use several variables like:\n"
"\n"
"                curl http://{site,host}.host[1-5].com -o \"#1_#2\"\n"
"\n"
"              You may use this option as many times as the number of URLs  you\n"
"              have.\n"
"\n"
"              See  also  the --create-dirs option to create the local directo-\n"
"              ries dynamically. Specifying the output as '-' (a  single  dash)\n"
"              will force the output to be done to stdout.\n"
"\n"
, stdout);
 fputs(
"       -O, --remote-name\n"
"              Write  output to a local file named like the remote file we get.\n"
"              (Only the file part of the remote file is used, the path is  cut\n"
"              off.)\n"
"\n"
"              The  remote  file  name  to use for saving is extracted from the\n"
"              given URL, nothing else.\n"
"\n"
"              Consequentially, the file will be saved in the  current  working\n"
"              directory.  If you want the file saved in a different directory,\n"
, stdout);
 fputs(
"              make sure you change current working directory before you invoke\n"
"              curl with the -O, --remote-name flag!\n"
"\n"
"              There is no URL decoding done on the file name. If it has %20 or\n"
"              other URL encoded parts of the name, they will end up  as-is  as\n"
"              file name.\n"
"\n"
"              You  may use this option as many times as the number of URLs you\n"
"              have.\n"
"\n"
"       --oauth2-bearer\n"
, stdout);
 fputs(
"              (IMAP, POP3, SMTP) Specify the Bearer Token for OAUTH 2.0 server\n"
"              authentication. The Bearer Token is used in conjunction with the\n"
"              user name which can be specified as part of  the  --url  or  -u,\n"
"              --user options.\n"
"\n"
"              The  Bearer  Token  and user name are formatted according to RFC\n"
"              6750.\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --proxy-header <header>\n"
, stdout);
 fputs(
"              (HTTP) Extra header to include in the request when sending  HTTP\n"
"              to a proxy. You may specify any number of extra headers. This is\n"
"              the equivalent option to -H, --header but is for proxy  communi-\n"
"              cation  only  like  in CONNECT requests when you want a separate\n"
"              header sent to the proxy to what is sent to  the  actual  remote\n"
"              host.\n"
"\n"
"              curl  will  make  sure  that each header you add/replace is sent\n"
, stdout);
 fputs(
"              with the proper end-of-line marker, you should thus not add that\n"
"              as a part of the header content: do not add newlines or carriage\n"
"              returns, they will only mess things up for you.\n"
"\n"
"              Headers specified with this  option  will  not  be  included  in\n"
"              requests that curl knows will not be sent to a proxy.\n"
"\n"
"              This  option  can  be  used multiple times to add/replace/remove\n"
"              multiple headers.\n"
, stdout);
 fputs(
"              (Added in 7.37.0)\n"
"       -p, --proxytunnel\n"
"              When an HTTP proxy is used (-x, --proxy), this option will cause\n"
"              non-HTTP  protocols  to  attempt  to  tunnel  through  the proxy\n"
"              instead of merely using it to do HTTP-like operations. The  tun-\n"
"              nel  approach  is  made  with the HTTP proxy CONNECT request and\n"
"              requires that the proxy allows direct connect to the remote port\n"
, stdout);
 fputs(
"              number curl wants to tunnel through to.\n"
"\n"
"       -P, --ftp-port <address>\n"
"              (FTP)  Reverses  the  default initiator/listener roles when con-\n"
"              necting with FTP. This switch makes curl  use  active  mode.  In\n"
"              practice,  curl  then  tells  the  server to connect back to the\n"
"              client's specified address and port, while passive mode asks the\n"
"              server  to  setup  an  IP address and port for it to connect to.\n"
, stdout);
 fputs(
"              <address> should be one of:\n"
"\n"
"              interface\n"
"                     i.e \"eth0\" to specify which interface's  IP  address  you\n"
"                     want to use (Unix only)\n"
"\n"
"              IP address\n"
"                     i.e \"192.168.10.1\" to specify the exact IP address\n"
"\n"
"              host name\n"
"                     i.e \"my.host.domain\" to specify the machine\n"
"\n"
"              -      make  curl  pick the same IP address that is already used\n"
, stdout);
 fputs(
"                     for the control connection\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"              Disable  the use of PORT with --ftp-pasv. Disable the attempt to\n"
"              use the EPRT command instead of PORT  by  using  --disable-eprt.\n"
"              EPRT is really PORT++.\n"
"\n"
"              Starting in 7.19.5, you can append \":[start]-[end]\" to the right\n"
"              of the address, to tell curl what TCP port range  to  use.  That\n"
, stdout);
 fputs(
"              means you specify a port range, from a lower to a higher number.\n"
"              A single number works as well, but do note that it increases the\n"
"              risk of failure since the port may not be available.\n"
"\n"
"       --pass <phrase>\n"
"              (SSL/SSH) Passphrase for the private key\n"
"\n"
"              If this option is used several times, the last one will be used.\n"
"\n"
"       --path-as-is\n"
"              Tell  curl  to  not handle sequences of /../ or /./ in the given\n"
, stdout);
 fputs(
"              URL path. Normally curl will squash or merge them  according  to\n"
"              standards but with this option set you tell it not to do that.\n"
"\n"
"              (Added in 7.42.0)\n"
"\n"
"       --post301\n"
"              (HTTP) Tells curl to respect RFC 7230/6.4.2 and not convert POST\n"
"              requests into GET requests when following a 301 redirection. The\n"
"              non-RFC  behaviour  is  ubiquitous in web browsers, so curl does\n"
, stdout);
 fputs(
"              the conversion by default to maintain  consistency.  However,  a\n"
"              server  may  require  a POST to remain a POST after such a redi-\n"
"              rection. This option is meaningful only when using  -L,  --loca-\n"
"              tion (Added in 7.17.1)\n"
"\n"
"       --post302\n"
"              (HTTP) Tells curl to respect RFC 7230/6.4.3 and not convert POST\n"
"              requests into GET requests when following a 302 redirection. The\n"
, stdout);
 fputs(
"              non-RFC  behaviour  is  ubiquitous in web browsers, so curl does\n"
"              the conversion by default to maintain  consistency.  However,  a\n"
"              server  may  require  a POST to remain a POST after such a redi-\n"
"              rection. This option is meaningful only when using  -L,  --loca-\n"
"              tion (Added in 7.19.1)\n"
"\n"
"       --post303\n"
"              (HTTP) Tells curl to respect RFC 7230/6.4.4 and not convert POST\n"
, stdout);
 fputs(
"              requests into GET requests when following a 303 redirection. The\n"
"              non-RFC  behaviour  is  ubiquitous in web browsers, so curl does\n"
"              the conversion by default to maintain  consistency.  However,  a\n"
"              server  may  require  a POST to remain a POST after such a redi-\n"
"              rection. This option is meaningful only when using  -L,  --loca-\n"
"              tion (Added in 7.26.0)\n"
"\n"
"       --proto <protocols>\n"
, stdout);
 fputs(
"              Tells   curl  to  use  the  listed  protocols  for  its  initial\n"
"              retrieval. Protocols are evaluated left to right, are comma sep-\n"
"              arated,  and  are each a protocol name or 'all', optionally pre-\n"
"              fixed by zero or more modifiers. Available modifiers are:\n"
"\n"
"              +  Permit this protocol in addition to protocols already permit-\n"
"                 ted (this is the default if no modifier is used).\n"
"\n"
, stdout);
 fputs(
"              -  Deny  this  protocol,  removing it from the list of protocols\n"
"                 already permitted.\n"
"\n"
"              =  Permit only this protocol (ignoring the list already  permit-\n"
"                 ted),  though  subject  to  later  modification by subsequent\n"
"                 entries in the comma separated list.\n"
"\n"
"              For example:\n"
"\n"
"              --proto -ftps  uses the default protocols, but disables ftps\n"
"\n"
"              --proto -all,https,+http\n"
, stdout);
 fputs(
"                             only enables http and https\n"
"\n"
"              --proto =http,https\n"
"                             also only enables http and https\n"
"\n"
"              Unknown protocols produce a  warning.  This  allows  scripts  to\n"
"              safely  rely on being able to disable potentially dangerous pro-\n"
"              tocols, without relying upon support  for  that  protocol  being\n"
"              built into curl to avoid an error.\n"
"\n"
, stdout);
 fputs(
"              This option can be used multiple times, in which case the effect\n"
"              is the same as concatenating the protocols into one instance  of\n"
"              the option.\n"
"\n"
"              (Added in 7.20.2)\n"
"\n"
"       --proto-default <protocol>\n"
