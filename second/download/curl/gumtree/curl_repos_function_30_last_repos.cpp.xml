<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_30_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">start_timeout<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">CURLM<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">multi<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">long<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">timeout_ms<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">void<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">userp<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <if pos:line="3" pos:column="3">if<condition pos:line="3" pos:column="5">(<expr><name pos:line="3" pos:column="6">timeout_ms<pos:position pos:line="3" pos:column="16"/></name> <operator pos:line="3" pos:column="17">&lt;<pos:position pos:line="3" pos:column="21"/></operator> <literal type="number" pos:line="3" pos:column="19">0<pos:position pos:line="3" pos:column="20"/></literal></expr>)<pos:position pos:line="3" pos:column="21"/></condition><then pos:line="3" pos:column="21"> <block pos:line="3" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">uv_timer_stop<pos:position pos:line="4" pos:column="18"/></name><argument_list pos:line="4" pos:column="18">(<argument><expr><operator pos:line="4" pos:column="19">&amp;<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="20">timeout<pos:position pos:line="4" pos:column="27"/></name></expr></argument>)<pos:position pos:line="4" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="29"/></expr_stmt>
  }<pos:position pos:line="5" pos:column="4"/></block></then>
  <else pos:line="6" pos:column="3">else <block pos:line="6" pos:column="8">{
    <if pos:line="7" pos:column="5">if<condition pos:line="7" pos:column="7">(<expr><name pos:line="7" pos:column="8">timeout_ms<pos:position pos:line="7" pos:column="18"/></name> <operator pos:line="7" pos:column="19">==<pos:position pos:line="7" pos:column="21"/></operator> <literal type="number" pos:line="7" pos:column="22">0<pos:position pos:line="7" pos:column="23"/></literal></expr>)<pos:position pos:line="7" pos:column="24"/></condition><then pos:line="7" pos:column="24">
      <block type="pseudo"><expr_stmt><expr><name pos:line="8" pos:column="7">timeout_ms<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">=<pos:position pos:line="8" pos:column="19"/></operator> <literal type="number" pos:line="8" pos:column="20">1<pos:position pos:line="8" pos:column="21"/></literal></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt></block></then></if> <comment type="block" pos:line="8" pos:column="23">/* 0 means directly call socket_action, but we'll do it
                         in a bit */</comment>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">uv_timer_start<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><operator pos:line="10" pos:column="20">&amp;<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="21">timeout<pos:position pos:line="10" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="30">on_timeout<pos:position pos:line="10" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="42">timeout_ms<pos:position pos:line="10" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="54">0<pos:position pos:line="10" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="57"/></expr_stmt>
  }<pos:position pos:line="11" pos:column="4"/></block></else></if>
  <return pos:line="12" pos:column="3">return <expr><literal type="number" pos:line="12" pos:column="10">0<pos:position pos:line="12" pos:column="11"/></literal></expr>;<pos:position pos:line="12" pos:column="12"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
