<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_145_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">Curl_inet_ntoa_r_a<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name><name pos:line="2" pos:column="20">struct<pos:position pos:line="2" pos:column="26"/></name> <name pos:line="2" pos:column="27">in_addr<pos:position pos:line="2" pos:column="34"/></name></name></type> <name pos:line="2" pos:column="35">internet_address<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>,
                   <parameter><decl><type><name pos:line="3" pos:column="20">char<pos:position pos:line="3" pos:column="24"/></name> <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier></type> <name pos:line="3" pos:column="27">output_buffer<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="42">int<pos:position pos:line="3" pos:column="45"/></name></type> <name pos:line="3" pos:column="46">output_buffer_length<pos:position pos:line="3" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="67"/></parameter_list>

<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">rc<pos:position pos:line="6" pos:column="9"/></name></decl>;<pos:position pos:line="6" pos:column="10"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">i<pos:position pos:line="7" pos:column="8"/></name></decl>;<pos:position pos:line="7" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type> <name pos:line="8" pos:column="10">cp<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><operator pos:line="10" pos:column="7">!<pos:position pos:line="10" pos:column="8"/></operator><name pos:line="10" pos:column="8">output_buffer<pos:position pos:line="10" pos:column="21"/></name> <operator pos:line="10" pos:column="22">||<pos:position pos:line="10" pos:column="24"/></operator> <name pos:line="10" pos:column="25">output_buffer_length<pos:position pos:line="10" pos:column="45"/></name> <operator pos:line="10" pos:column="46">&lt;<pos:position pos:line="10" pos:column="50"/></operator> <literal type="number" pos:line="10" pos:column="48">16<pos:position pos:line="10" pos:column="50"/></literal></expr>)<pos:position pos:line="10" pos:column="51"/></condition><then pos:line="10" pos:column="51">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><call><name pos:line="11" pos:column="12">inet_ntoa_r<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">internet_address<pos:position pos:line="11" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="42">output_buffer<pos:position pos:line="11" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="57">output_buffer_length<pos:position pos:line="11" pos:column="77"/></name></expr></argument>)<pos:position pos:line="11" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="79"/></return></block></then></if>

  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><operator pos:line="13" pos:column="7">!<pos:position pos:line="13" pos:column="8"/></operator><operator pos:line="13" pos:column="8">(<pos:position pos:line="13" pos:column="9"/></operator><name pos:line="13" pos:column="9">cp<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <call><name pos:line="13" pos:column="14">malloc<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name pos:line="13" pos:column="21">output_buffer_length<pos:position pos:line="13" pos:column="41"/></name> <operator pos:line="13" pos:column="42">+<pos:position pos:line="13" pos:column="43"/></operator> <literal type="number" pos:line="13" pos:column="44">1<pos:position pos:line="13" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call><operator pos:line="13" pos:column="46">)<pos:position pos:line="13" pos:column="47"/></operator></expr>)<pos:position pos:line="13" pos:column="48"/></condition><then pos:line="13" pos:column="48">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><operator pos:line="14" pos:column="12">-<pos:position pos:line="14" pos:column="13"/></operator><literal type="number" pos:line="14" pos:column="13">1<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="16" pos:column="3">rc<pos:position pos:line="16" pos:column="5"/></name> <operator pos:line="16" pos:column="6">=<pos:position pos:line="16" pos:column="7"/></operator> <call><name pos:line="16" pos:column="8">inet_ntoa_r<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><name pos:line="16" pos:column="20">internet_address<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="38">cp<pos:position pos:line="16" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="42">output_buffer_length<pos:position pos:line="16" pos:column="62"/></name></expr></argument>)<pos:position pos:line="16" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="64"/></expr_stmt>

  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><name pos:line="18" pos:column="7">rc<pos:position pos:line="18" pos:column="9"/></name></expr>)<pos:position pos:line="18" pos:column="10"/></condition><then pos:line="18" pos:column="10"> <block pos:line="18" pos:column="11">{
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">free<pos:position pos:line="19" pos:column="9"/></name><argument_list pos:line="19" pos:column="9">(<argument><expr><name pos:line="19" pos:column="10">cp<pos:position pos:line="19" pos:column="12"/></name></expr></argument>)<pos:position pos:line="19" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="14"/></expr_stmt>
    <return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">rc<pos:position pos:line="20" pos:column="14"/></name></expr>;<pos:position pos:line="20" pos:column="15"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

  <expr_stmt><expr><name><name pos:line="23" pos:column="3">cp<pos:position pos:line="23" pos:column="5"/></name><index pos:line="23" pos:column="5">[<expr><name pos:line="23" pos:column="6">output_buffer_length<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">-<pos:position pos:line="23" pos:column="28"/></operator> <literal type="number" pos:line="23" pos:column="29">1<pos:position pos:line="23" pos:column="30"/></literal></expr>]<pos:position pos:line="23" pos:column="31"/></index></name> <operator pos:line="23" pos:column="32">=<pos:position pos:line="23" pos:column="33"/></operator> <literal type="char" pos:line="23" pos:column="34">'\0'<pos:position pos:line="23" pos:column="38"/></literal></expr>;<pos:position pos:line="23" pos:column="39"/></expr_stmt>
  <expr_stmt><expr><name pos:line="24" pos:column="3">i<pos:position pos:line="24" pos:column="4"/></name> <operator pos:line="24" pos:column="5">=<pos:position pos:line="24" pos:column="6"/></operator> <call><name pos:line="24" pos:column="7">strlen<pos:position pos:line="24" pos:column="13"/></name><argument_list pos:line="24" pos:column="13">(<argument><expr><name pos:line="24" pos:column="14">cp<pos:position pos:line="24" pos:column="16"/></name></expr></argument>)<pos:position pos:line="24" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="25" pos:column="3">QadrtConvertE2A<pos:position pos:line="25" pos:column="18"/></name><argument_list pos:line="25" pos:column="18">(<argument><expr><name pos:line="25" pos:column="19">output_buffer<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="34">cp<pos:position pos:line="25" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="38">i<pos:position pos:line="25" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="41">i<pos:position pos:line="25" pos:column="42"/></name></expr></argument>)<pos:position pos:line="25" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="26" pos:column="3">output_buffer<pos:position pos:line="26" pos:column="16"/></name><index pos:line="26" pos:column="16">[<expr><name pos:line="26" pos:column="17">i<pos:position pos:line="26" pos:column="18"/></name></expr>]<pos:position pos:line="26" pos:column="19"/></index></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <literal type="char" pos:line="26" pos:column="22">'\0'<pos:position pos:line="26" pos:column="26"/></literal></expr>;<pos:position pos:line="26" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">free<pos:position pos:line="27" pos:column="7"/></name><argument_list pos:line="27" pos:column="7">(<argument><expr><name pos:line="27" pos:column="8">cp<pos:position pos:line="27" pos:column="10"/></name></expr></argument>)<pos:position pos:line="27" pos:column="11"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="12"/></expr_stmt>
  <return pos:line="28" pos:column="3">return <expr><name pos:line="28" pos:column="10">rc<pos:position pos:line="28" pos:column="12"/></name></expr>;<pos:position pos:line="28" pos:column="13"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
