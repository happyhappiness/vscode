<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_111.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">hostent<pos:position pos:line="1" pos:column="15"/></name></name> <modifier pos:line="1" pos:column="16">*<pos:position pos:line="1" pos:column="17"/></modifier></type><name pos:line="1" pos:column="17">GetHost<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">UrlData<pos:position pos:line="1" pos:column="39"/></name></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">data<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">hostname<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="3" pos:column="25">char<pos:position pos:line="3" pos:column="29"/></name> <modifier pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></modifier></type><name pos:line="3" pos:column="31">buf<pos:position pos:line="3" pos:column="34"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="4" pos:column="25">int<pos:position pos:line="4" pos:column="28"/></name></type> <name pos:line="4" pos:column="29">buf_size<pos:position pos:line="4" pos:column="37"/></name></decl></parameter> )<pos:position pos:line="4" pos:column="39"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">hostent<pos:position pos:line="6" pos:column="17"/></name></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier></type><name pos:line="6" pos:column="19">h<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">NULL<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">unsigned<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">long<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">in<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">( <expr><operator pos:line="9" pos:column="8">(<pos:position pos:line="9" pos:column="9"/></operator><name pos:line="9" pos:column="9">in<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">=<pos:position pos:line="9" pos:column="12"/></operator><call><name pos:line="9" pos:column="12">inet_addr<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><name pos:line="9" pos:column="22">hostname<pos:position pos:line="9" pos:column="30"/></name></expr></argument>)<pos:position pos:line="9" pos:column="31"/></argument_list></call><operator pos:line="9" pos:column="31">)<pos:position pos:line="9" pos:column="32"/></operator> <operator pos:line="9" pos:column="33">!=<pos:position pos:line="9" pos:column="35"/></operator> <name pos:line="9" pos:column="36">INADDR_NONE<pos:position pos:line="9" pos:column="47"/></name></expr> )<pos:position pos:line="9" pos:column="49"/></condition><then pos:line="9" pos:column="49"> <block pos:line="9" pos:column="50">{
    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">struct<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">in_addr<pos:position pos:line="10" pos:column="19"/></name></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">addrentry<pos:position pos:line="10" pos:column="30"/></name></decl>;<pos:position pos:line="10" pos:column="31"/></decl_stmt>

    <expr_stmt><expr><name pos:line="12" pos:column="5">h<pos:position pos:line="12" pos:column="6"/></name> <operator pos:line="12" pos:column="7">=<pos:position pos:line="12" pos:column="8"/></operator> <operator pos:line="12" pos:column="9">(<pos:position pos:line="12" pos:column="10"/></operator>struct <name pos:line="12" pos:column="17">hostent<pos:position pos:line="12" pos:column="24"/></name><operator pos:line="12" pos:column="24">*<pos:position pos:line="12" pos:column="25"/></operator><operator pos:line="12" pos:column="25">)<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="26">buf<pos:position pos:line="12" pos:column="29"/></name></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">h<pos:position pos:line="13" pos:column="6"/></name><operator pos:line="13" pos:column="6">-&gt;<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="8">h_addr_list<pos:position pos:line="13" pos:column="19"/></name></name> <operator pos:line="13" pos:column="20">=<pos:position pos:line="13" pos:column="21"/></operator> <operator pos:line="13" pos:column="22">(<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="23">char<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">*<pos:position pos:line="13" pos:column="28"/></operator><operator pos:line="13" pos:column="28">*<pos:position pos:line="13" pos:column="29"/></operator><operator pos:line="13" pos:column="29">)<pos:position pos:line="13" pos:column="30"/></operator><operator pos:line="13" pos:column="30">(<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="31">buf<pos:position pos:line="13" pos:column="34"/></name> <operator pos:line="13" pos:column="35">+<pos:position pos:line="13" pos:column="36"/></operator> <sizeof pos:line="13" pos:column="37">sizeof<argument_list pos:line="13" pos:column="43">(<argument><expr><operator pos:line="13" pos:column="44">*<pos:position pos:line="13" pos:column="45"/></operator><name pos:line="13" pos:column="45">h<pos:position pos:line="13" pos:column="46"/></name></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></sizeof><operator pos:line="13" pos:column="47">)<pos:position pos:line="13" pos:column="48"/></operator></expr>;<pos:position pos:line="13" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="14" pos:column="5">addrentry<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <operator pos:line="14" pos:column="17">(<pos:position pos:line="14" pos:column="18"/></operator>struct <name pos:line="14" pos:column="25">in_addr<pos:position pos:line="14" pos:column="32"/></name><operator pos:line="14" pos:column="32">*<pos:position pos:line="14" pos:column="33"/></operator><operator pos:line="14" pos:column="33">)<pos:position pos:line="14" pos:column="34"/></operator><operator pos:line="14" pos:column="34">(<pos:position pos:line="14" pos:column="35"/></operator><name><name pos:line="14" pos:column="35">h<pos:position pos:line="14" pos:column="36"/></name><operator pos:line="14" pos:column="36">-&gt;<pos:position pos:line="14" pos:column="41"/></operator><name pos:line="14" pos:column="38">h_addr_list<pos:position pos:line="14" pos:column="49"/></name></name> <operator pos:line="14" pos:column="50">+<pos:position pos:line="14" pos:column="51"/></operator> <literal type="number" pos:line="14" pos:column="52">2<pos:position pos:line="14" pos:column="53"/></literal><operator pos:line="14" pos:column="53">)<pos:position pos:line="14" pos:column="54"/></operator></expr>;<pos:position pos:line="14" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">addrentry<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">-&gt;<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="16">s_addr<pos:position pos:line="15" pos:column="22"/></name></name> <operator pos:line="15" pos:column="23">=<pos:position pos:line="15" pos:column="24"/></operator> <name pos:line="15" pos:column="25">in<pos:position pos:line="15" pos:column="27"/></name></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">h<pos:position pos:line="16" pos:column="6"/></name><operator pos:line="16" pos:column="6">-&gt;<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="8">h_addr_list<pos:position pos:line="16" pos:column="19"/></name><index pos:line="16" pos:column="19">[<expr><literal type="number" pos:line="16" pos:column="20">0<pos:position pos:line="16" pos:column="21"/></literal></expr>]<pos:position pos:line="16" pos:column="22"/></index></name> <operator pos:line="16" pos:column="23">=<pos:position pos:line="16" pos:column="24"/></operator> <operator pos:line="16" pos:column="25">(<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="26">char<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">*<pos:position pos:line="16" pos:column="31"/></operator><operator pos:line="16" pos:column="31">)<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="32">addrentry<pos:position pos:line="16" pos:column="41"/></name></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">h<pos:position pos:line="17" pos:column="6"/></name><operator pos:line="17" pos:column="6">-&gt;<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="8">h_addr_list<pos:position pos:line="17" pos:column="19"/></name><index pos:line="17" pos:column="19">[<expr><literal type="number" pos:line="17" pos:column="20">1<pos:position pos:line="17" pos:column="21"/></literal></expr>]<pos:position pos:line="17" pos:column="22"/></index></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <name pos:line="17" pos:column="25">NULL<pos:position pos:line="17" pos:column="29"/></name></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">h<pos:position pos:line="18" pos:column="6"/></name><operator pos:line="18" pos:column="6">-&gt;<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="8">h_addrtype<pos:position pos:line="18" pos:column="18"/></name></name> <operator pos:line="18" pos:column="19">=<pos:position pos:line="18" pos:column="20"/></operator> <name pos:line="18" pos:column="21">AF_INET<pos:position pos:line="18" pos:column="28"/></name></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">h<pos:position pos:line="19" pos:column="6"/></name><operator pos:line="19" pos:column="6">-&gt;<pos:position pos:line="19" pos:column="11"/></operator><name pos:line="19" pos:column="8">h_length<pos:position pos:line="19" pos:column="16"/></name></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <sizeof pos:line="19" pos:column="19">sizeof<argument_list pos:line="19" pos:column="25">(<argument><expr><operator pos:line="19" pos:column="26">*<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">addrentry<pos:position pos:line="19" pos:column="36"/></name></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></sizeof></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">h<pos:position pos:line="20" pos:column="6"/></name><operator pos:line="20" pos:column="6">-&gt;<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="8">h_name<pos:position pos:line="20" pos:column="14"/></name></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <operator pos:line="20" pos:column="17">*<pos:position pos:line="20" pos:column="18"/></operator><operator pos:line="20" pos:column="18">(<pos:position pos:line="20" pos:column="19"/></operator><name><name pos:line="20" pos:column="19">h<pos:position pos:line="20" pos:column="20"/></name><operator pos:line="20" pos:column="20">-&gt;<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="22">h_addr_list<pos:position pos:line="20" pos:column="33"/></name></name><operator pos:line="20" pos:column="33">)<pos:position pos:line="20" pos:column="34"/></operator> <operator pos:line="20" pos:column="35">+<pos:position pos:line="20" pos:column="36"/></operator> <name><name pos:line="20" pos:column="37">h<pos:position pos:line="20" pos:column="38"/></name><operator pos:line="20" pos:column="38">-&gt;<pos:position pos:line="20" pos:column="43"/></operator><name pos:line="20" pos:column="40">h_length<pos:position pos:line="20" pos:column="48"/></name></name></expr>;<pos:position pos:line="20" pos:column="49"/></expr_stmt>
    <comment type="block" pos:line="21" pos:column="5">/* bad one h-&gt;h_name = (char*)(h-&gt;h_addr_list + h-&gt;h_length); */</comment>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">MakeIP<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><call><name pos:line="22" pos:column="12">ntohl<pos:position pos:line="22" pos:column="17"/></name><argument_list pos:line="22" pos:column="17">(<argument><expr><name pos:line="22" pos:column="18">in<pos:position pos:line="22" pos:column="20"/></name></expr></argument>)<pos:position pos:line="22" pos:column="21"/></argument_list></call></expr></argument>,<argument><expr><name><name pos:line="22" pos:column="22">h<pos:position pos:line="22" pos:column="23"/></name><operator pos:line="22" pos:column="23">-&gt;<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="25">h_name<pos:position pos:line="22" pos:column="31"/></name></name></expr></argument>,<argument><expr><name pos:line="22" pos:column="32">buf_size<pos:position pos:line="22" pos:column="40"/></name> <operator pos:line="22" pos:column="41">-<pos:position pos:line="22" pos:column="42"/></operator> <call pos:line="22" pos:column="43">(<name pos:line="22" pos:column="44">long<pos:position pos:line="22" pos:column="48"/></name>)<argument_list pos:line="22" pos:column="49">(<argument><expr><name><name pos:line="22" pos:column="50">h<pos:position pos:line="22" pos:column="51"/></name><operator pos:line="22" pos:column="51">-&gt;<pos:position pos:line="22" pos:column="56"/></operator><name pos:line="22" pos:column="53">h_name<pos:position pos:line="22" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="60"/></argument_list></call> <operator pos:line="22" pos:column="61">+<pos:position pos:line="22" pos:column="62"/></operator> <operator pos:line="22" pos:column="63">(<pos:position pos:line="22" pos:column="64"/></operator><name pos:line="22" pos:column="64">long<pos:position pos:line="22" pos:column="68"/></name><operator pos:line="22" pos:column="68">)<pos:position pos:line="22" pos:column="69"/></operator><name pos:line="22" pos:column="69">buf<pos:position pos:line="22" pos:column="72"/></name></expr></argument>)<pos:position pos:line="22" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="74"/></expr_stmt>
  }<pos:position pos:line="23" pos:column="4"/></block></then>
<cpp:if pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">if<pos:position pos:line="24" pos:column="4"/></cpp:directive> <expr><call><name pos:line="24" pos:column="5">defined<pos:position pos:line="24" pos:column="12"/></name><argument_list pos:line="24" pos:column="12">(<argument><expr><name pos:line="24" pos:column="13">HAVE_GETHOSTBYNAME_R<pos:position pos:line="24" pos:column="33"/></name></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></call></expr></cpp:if>
  <else pos:line="25" pos:column="3">else <block pos:line="25" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">int<pos:position pos:line="26" pos:column="8"/></name></type> <name pos:line="26" pos:column="9">h_errnop<pos:position pos:line="26" pos:column="17"/></name></decl>;<pos:position pos:line="26" pos:column="18"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">memset<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><name pos:line="27" pos:column="12">buf<pos:position pos:line="27" pos:column="15"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="27" pos:column="16">0<pos:position pos:line="27" pos:column="17"/></literal></expr></argument>,<argument><expr><name pos:line="27" pos:column="18">buf_size<pos:position pos:line="27" pos:column="26"/></name></expr></argument>)<pos:position pos:line="27" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="28"/></expr_stmt>	<comment type="block" pos:line="27" pos:column="33">/* workaround for gethostbyname_r bug in qnx nto */</comment>
<cpp:ifdef pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">ifdef<pos:position pos:line="28" pos:column="7"/></cpp:directive> <name pos:line="28" pos:column="8">HAVE_GETHOSTBYNAME_R_5<pos:position pos:line="28" pos:column="30"/></name></cpp:ifdef>
    <comment type="block" pos:line="29" pos:column="5">/* Solaris, IRIX and more */</comment>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><operator pos:line="30" pos:column="9">(<pos:position pos:line="30" pos:column="10"/></operator><name pos:line="30" pos:column="10">h<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <call><name pos:line="30" pos:column="14">gethostbyname_r<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">hostname<pos:position pos:line="30" pos:column="38"/></name></expr></argument>,
                             <argument><expr><operator pos:line="31" pos:column="30">(<pos:position pos:line="31" pos:column="31"/></operator>struct <name pos:line="31" pos:column="38">hostent<pos:position pos:line="31" pos:column="45"/></name> <operator pos:line="31" pos:column="46">*<pos:position pos:line="31" pos:column="47"/></operator><operator pos:line="31" pos:column="47">)<pos:position pos:line="31" pos:column="48"/></operator><name pos:line="31" pos:column="48">buf<pos:position pos:line="31" pos:column="51"/></name></expr></argument>,
                             <argument><expr><name pos:line="32" pos:column="30">buf<pos:position pos:line="32" pos:column="33"/></name> <operator pos:line="32" pos:column="34">+<pos:position pos:line="32" pos:column="35"/></operator> <sizeof pos:line="32" pos:column="36">sizeof<argument_list pos:line="32" pos:column="42">(<argument><expr pos:line="32" pos:column="43">struct <name pos:line="32" pos:column="50">hostent<pos:position pos:line="32" pos:column="57"/></name></expr></argument>)<pos:position pos:line="32" pos:column="58"/></argument_list></sizeof></expr></argument>,
                             <argument><expr><name pos:line="33" pos:column="30">buf_size<pos:position pos:line="33" pos:column="38"/></name> <operator pos:line="33" pos:column="39">-<pos:position pos:line="33" pos:column="40"/></operator> <sizeof pos:line="33" pos:column="41">sizeof<argument_list pos:line="33" pos:column="47">(<argument><expr pos:line="33" pos:column="48">struct <name pos:line="33" pos:column="55">hostent<pos:position pos:line="33" pos:column="62"/></name></expr></argument>)<pos:position pos:line="33" pos:column="63"/></argument_list></sizeof></expr></argument>,
                             <argument><expr><operator pos:line="34" pos:column="30">&amp;<pos:position pos:line="34" pos:column="35"/></operator><name pos:line="34" pos:column="31">h_errnop<pos:position pos:line="34" pos:column="39"/></name></expr></argument>)<pos:position pos:line="34" pos:column="40"/></argument_list></call><operator pos:line="34" pos:column="40">)<pos:position pos:line="34" pos:column="41"/></operator> <operator pos:line="34" pos:column="42">==<pos:position pos:line="34" pos:column="44"/></operator> <name pos:line="34" pos:column="45">NULL<pos:position pos:line="34" pos:column="49"/></name></expr> )<pos:position pos:line="34" pos:column="51"/></condition><then pos:line="34" pos:column="51">
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">ifdef<pos:position pos:line="36" pos:column="7"/></cpp:directive> <name pos:line="36" pos:column="8">HAVE_GETHOSTBYNAME_R_6<pos:position pos:line="36" pos:column="30"/></name></cpp:ifdef>
    <comment type="block" pos:line="37" pos:column="5">/* Linux */</comment>
    <block type="pseudo"><if pos:line="38" pos:column="5">if<condition pos:line="38" pos:column="7">( <expr><call><name pos:line="38" pos:column="9">gethostbyname_r<pos:position pos:line="38" pos:column="24"/></name><argument_list pos:line="38" pos:column="24">(<argument><expr><name pos:line="38" pos:column="25">hostname<pos:position pos:line="38" pos:column="33"/></name></expr></argument>,
                        <argument><expr><operator pos:line="39" pos:column="25">(<pos:position pos:line="39" pos:column="26"/></operator>struct <name pos:line="39" pos:column="33">hostent<pos:position pos:line="39" pos:column="40"/></name> <operator pos:line="39" pos:column="41">*<pos:position pos:line="39" pos:column="42"/></operator><operator pos:line="39" pos:column="42">)<pos:position pos:line="39" pos:column="43"/></operator><name pos:line="39" pos:column="43">buf<pos:position pos:line="39" pos:column="46"/></name></expr></argument>,
                        <argument><expr><name pos:line="40" pos:column="25">buf<pos:position pos:line="40" pos:column="28"/></name> <operator pos:line="40" pos:column="29">+<pos:position pos:line="40" pos:column="30"/></operator> <sizeof pos:line="40" pos:column="31">sizeof<argument_list pos:line="40" pos:column="37">(<argument><expr pos:line="40" pos:column="38">struct <name pos:line="40" pos:column="45">hostent<pos:position pos:line="40" pos:column="52"/></name></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></sizeof></expr></argument>,
                        <argument><expr><name pos:line="41" pos:column="25">buf_size<pos:position pos:line="41" pos:column="33"/></name> <operator pos:line="41" pos:column="34">-<pos:position pos:line="41" pos:column="35"/></operator> <sizeof pos:line="41" pos:column="36">sizeof<argument_list pos:line="41" pos:column="42">(<argument><expr pos:line="41" pos:column="43">struct <name pos:line="41" pos:column="50">hostent<pos:position pos:line="41" pos:column="57"/></name></expr></argument>)<pos:position pos:line="41" pos:column="58"/></argument_list></sizeof></expr></argument>,
                        <argument><expr><operator pos:line="42" pos:column="25">&amp;<pos:position pos:line="42" pos:column="30"/></operator><name pos:line="42" pos:column="26">h<pos:position pos:line="42" pos:column="27"/></name></expr></argument>, <comment type="block" pos:line="42" pos:column="29">/* DIFFERENCE */</comment>
                        <argument><expr><operator pos:line="43" pos:column="25">&amp;<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="26">h_errnop<pos:position pos:line="43" pos:column="34"/></name></expr></argument>)<pos:position pos:line="43" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="36"/></condition><then pos:line="43" pos:column="36">
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">ifdef<pos:position pos:line="45" pos:column="7"/></cpp:directive> <name pos:line="45" pos:column="8">HAVE_GETHOSTBYNAME_R_3<pos:position pos:line="45" pos:column="30"/></name></cpp:ifdef>
    <comment type="block" pos:line="46" pos:column="5">/* AIX, Digital Unix, HPUX 10, more? */</comment>

    <comment type="block" pos:line="48" pos:column="5">/* August 4th, 2000. I don't have any such system around so I write this
       blindly in hope it might work or that someone else will help me fix
       this. */</comment>

    <block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="5">h<pos:position pos:line="52" pos:column="6"/></name> <operator pos:line="52" pos:column="7">=<pos:position pos:line="52" pos:column="8"/></operator> <call><name pos:line="52" pos:column="9">gethostbyname_r<pos:position pos:line="52" pos:column="24"/></name><argument_list pos:line="52" pos:column="24">(<argument><expr><name pos:line="52" pos:column="25">hostname<pos:position pos:line="52" pos:column="33"/></name></expr></argument>,
                        <argument><expr><operator pos:line="53" pos:column="25">(<pos:position pos:line="53" pos:column="26"/></operator>struct <name pos:line="53" pos:column="33">hostent<pos:position pos:line="53" pos:column="40"/></name> <operator pos:line="53" pos:column="41">*<pos:position pos:line="53" pos:column="42"/></operator><operator pos:line="53" pos:column="42">)<pos:position pos:line="53" pos:column="43"/></operator><name pos:line="53" pos:column="43">buf<pos:position pos:line="53" pos:column="46"/></name></expr></argument>,
                        <argument><expr><operator pos:line="54" pos:column="25">(<pos:position pos:line="54" pos:column="26"/></operator>struct <name pos:line="54" pos:column="33">hostent_data<pos:position pos:line="54" pos:column="45"/></name> <operator pos:line="54" pos:column="46">*<pos:position pos:line="54" pos:column="47"/></operator><operator pos:line="54" pos:column="47">)<pos:position pos:line="54" pos:column="48"/></operator><operator pos:line="54" pos:column="48">(<pos:position pos:line="54" pos:column="49"/></operator><name pos:line="54" pos:column="49">buf<pos:position pos:line="54" pos:column="52"/></name> <operator pos:line="54" pos:column="53">+<pos:position pos:line="54" pos:column="54"/></operator> <sizeof pos:line="54" pos:column="55">sizeof<argument_list pos:line="54" pos:column="61">(<argument><expr pos:line="54" pos:column="62">struct <name pos:line="54" pos:column="69">hostent<pos:position pos:line="54" pos:column="76"/></name></expr></argument>)<pos:position pos:line="54" pos:column="77"/></argument_list></sizeof><operator pos:line="54" pos:column="77">)<pos:position pos:line="54" pos:column="78"/></operator></expr></argument>)<pos:position pos:line="54" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="80"/></expr_stmt></block></then></if></block></then></if>
    <expr_stmt><expr><name pos:line="55" pos:column="5">h_errnop<pos:position pos:line="55" pos:column="13"/></name><operator pos:line="55" pos:column="13">=<pos:position pos:line="55" pos:column="14"/></operator> <name pos:line="55" pos:column="15">errno<pos:position pos:line="55" pos:column="20"/></name></expr>;<pos:position pos:line="55" pos:column="21"/></expr_stmt> <comment type="block" pos:line="55" pos:column="22">/* we don't deal with this, but set it anyway */</comment>
    <if pos:line="56" pos:column="5">if<condition pos:line="56" pos:column="7">(<expr><name pos:line="56" pos:column="8">NULL<pos:position pos:line="56" pos:column="12"/></name> <operator pos:line="56" pos:column="13">==<pos:position pos:line="56" pos:column="15"/></operator> <name pos:line="56" pos:column="16">h<pos:position pos:line="56" pos:column="17"/></name></expr>)<pos:position pos:line="56" pos:column="18"/></condition><then pos:line="56" pos:column="18">
<cpp:endif pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">endif<pos:position pos:line="57" pos:column="7"/></cpp:directive></cpp:endif>
      <block pos:line="58" pos:column="7">{
      <expr_stmt><expr><call><name pos:line="59" pos:column="7">infof<pos:position pos:line="59" pos:column="12"/></name><argument_list pos:line="59" pos:column="12">(<argument><expr><name pos:line="59" pos:column="13">data<pos:position pos:line="59" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="19">"gethostbyname_r(2) failed for %s\n"<pos:position pos:line="59" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="57">hostname<pos:position pos:line="59" pos:column="65"/></name></expr></argument>)<pos:position pos:line="59" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="67"/></expr_stmt>
    }<pos:position pos:line="60" pos:column="6"/></block></then>
<cpp:else pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">else<pos:position pos:line="61" pos:column="6"/></cpp:directive></cpp:else>
  <else pos:line="62" pos:column="3">else <block pos:line="62" pos:column="8">{
    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><operator pos:line="63" pos:column="9">(<pos:position pos:line="63" pos:column="10"/></operator><name pos:line="63" pos:column="10">h<pos:position pos:line="63" pos:column="11"/></name> <operator pos:line="63" pos:column="12">=<pos:position pos:line="63" pos:column="13"/></operator> <call><name pos:line="63" pos:column="14">gethostbyname<pos:position pos:line="63" pos:column="27"/></name><argument_list pos:line="63" pos:column="27">(<argument><expr><name pos:line="63" pos:column="28">hostname<pos:position pos:line="63" pos:column="36"/></name></expr></argument>)<pos:position pos:line="63" pos:column="37"/></argument_list></call><operator pos:line="63" pos:column="37">)<pos:position pos:line="63" pos:column="38"/></operator> <operator pos:line="63" pos:column="39">==<pos:position pos:line="63" pos:column="41"/></operator> <name pos:line="63" pos:column="42">NULL<pos:position pos:line="63" pos:column="46"/></name></expr> )<pos:position pos:line="63" pos:column="48"/></condition><then pos:line="63" pos:column="48"> <block pos:line="63" pos:column="49">{
      <expr_stmt><expr><call><name pos:line="64" pos:column="7">infof<pos:position pos:line="64" pos:column="12"/></name><argument_list pos:line="64" pos:column="12">(<argument><expr><name pos:line="64" pos:column="13">data<pos:position pos:line="64" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="19">"gethostbyname(2) failed for %s\n"<pos:position pos:line="64" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="55">hostname<pos:position pos:line="64" pos:column="63"/></name></expr></argument>)<pos:position pos:line="64" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>
<cpp:endif pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">endif<pos:position pos:line="66" pos:column="7"/></cpp:directive></cpp:endif>
  }<pos:position pos:line="67" pos:column="4"/></block></else></if>
  <return pos:line="68" pos:column="3">return <expr><operator pos:line="68" pos:column="10">(<pos:position pos:line="68" pos:column="11"/></operator><name pos:line="68" pos:column="11">h<pos:position pos:line="68" pos:column="12"/></name><operator pos:line="68" pos:column="12">)<pos:position pos:line="68" pos:column="13"/></operator></expr>;<pos:position pos:line="68" pos:column="14"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></else></if></block></function></unit>
