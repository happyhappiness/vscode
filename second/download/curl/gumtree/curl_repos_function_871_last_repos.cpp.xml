<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_871_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">parse_filename<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">ptr<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">size_t<pos:position pos:line="1" pos:column="52"/></name></type> <name pos:line="1" pos:column="53">len<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">copy<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">char<pos:position pos:line="4" pos:column="7"/></name> <modifier pos:line="4" pos:column="8">*<pos:position pos:line="4" pos:column="9"/></modifier></type><name pos:line="4" pos:column="9">p<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">q<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type>  <name pos:line="6" pos:column="9">stop<pos:position pos:line="6" pos:column="13"/></name> <init pos:line="6" pos:column="14">= <expr><literal type="char" pos:line="6" pos:column="16">'\0'<pos:position pos:line="6" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>

  <comment type="block" pos:line="8" pos:column="3">/* simple implementation of strndup() */</comment>
  <expr_stmt><expr><name pos:line="9" pos:column="3">copy<pos:position pos:line="9" pos:column="7"/></name> <operator pos:line="9" pos:column="8">=<pos:position pos:line="9" pos:column="9"/></operator> <call><name pos:line="9" pos:column="10">malloc<pos:position pos:line="9" pos:column="16"/></name><argument_list pos:line="9" pos:column="16">(<argument><expr><name pos:line="9" pos:column="17">len<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">+<pos:position pos:line="9" pos:column="22"/></operator> <literal type="number" pos:line="9" pos:column="23">1<pos:position pos:line="9" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="26"/></expr_stmt>
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><operator pos:line="10" pos:column="6">!<pos:position pos:line="10" pos:column="7"/></operator><name pos:line="10" pos:column="7">copy<pos:position pos:line="10" pos:column="11"/></name></expr>)<pos:position pos:line="10" pos:column="12"/></condition><then pos:line="10" pos:column="12">
    <block type="pseudo"><return pos:line="11" pos:column="5">return <expr><name pos:line="11" pos:column="12">NULL<pos:position pos:line="11" pos:column="16"/></name></expr>;<pos:position pos:line="11" pos:column="17"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">memcpy<pos:position pos:line="12" pos:column="9"/></name><argument_list pos:line="12" pos:column="9">(<argument><expr><name pos:line="12" pos:column="10">copy<pos:position pos:line="12" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="16">ptr<pos:position pos:line="12" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="21">len<pos:position pos:line="12" pos:column="24"/></name></expr></argument>)<pos:position pos:line="12" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="13" pos:column="3">copy<pos:position pos:line="13" pos:column="7"/></name><index pos:line="13" pos:column="7">[<expr><name pos:line="13" pos:column="8">len<pos:position pos:line="13" pos:column="11"/></name></expr>]<pos:position pos:line="13" pos:column="12"/></index></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <literal type="char" pos:line="13" pos:column="15">'\0'<pos:position pos:line="13" pos:column="19"/></literal></expr>;<pos:position pos:line="13" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><name pos:line="15" pos:column="3">p<pos:position pos:line="15" pos:column="4"/></name> <operator pos:line="15" pos:column="5">=<pos:position pos:line="15" pos:column="6"/></operator> <name pos:line="15" pos:column="7">copy<pos:position pos:line="15" pos:column="11"/></name></expr>;<pos:position pos:line="15" pos:column="12"/></expr_stmt>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><operator pos:line="16" pos:column="6">*<pos:position pos:line="16" pos:column="7"/></operator><name pos:line="16" pos:column="7">p<pos:position pos:line="16" pos:column="8"/></name> <operator pos:line="16" pos:column="9">==<pos:position pos:line="16" pos:column="11"/></operator> <literal type="char" pos:line="16" pos:column="12">'\''<pos:position pos:line="16" pos:column="16"/></literal> <operator pos:line="16" pos:column="17">||<pos:position pos:line="16" pos:column="19"/></operator> <operator pos:line="16" pos:column="20">*<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="21">p<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">==<pos:position pos:line="16" pos:column="25"/></operator> <literal type="char" pos:line="16" pos:column="26">'"'<pos:position pos:line="16" pos:column="29"/></literal></expr>)<pos:position pos:line="16" pos:column="30"/></condition><then pos:line="16" pos:column="30"> <block pos:line="16" pos:column="31">{
    <comment type="block" pos:line="17" pos:column="5">/* store the starting quote */</comment>
    <expr_stmt><expr><name pos:line="18" pos:column="5">stop<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <operator pos:line="18" pos:column="12">*<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">p<pos:position pos:line="18" pos:column="14"/></name></expr>;<pos:position pos:line="18" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">p<pos:position pos:line="19" pos:column="6"/></name><operator pos:line="19" pos:column="6">++<pos:position pos:line="19" pos:column="8"/></operator></expr>;<pos:position pos:line="19" pos:column="9"/></expr_stmt>
  }<pos:position pos:line="20" pos:column="4"/></block></then>
  <else pos:line="21" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="5">stop<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">=<pos:position pos:line="22" pos:column="11"/></operator> <literal type="char" pos:line="22" pos:column="12">';'<pos:position pos:line="22" pos:column="15"/></literal></expr>;<pos:position pos:line="22" pos:column="16"/></expr_stmt></block></else></if>

  <comment type="block" pos:line="24" pos:column="3">/* if the filename contains a path, only use filename portion */</comment>
  <expr_stmt><expr><name pos:line="25" pos:column="3">q<pos:position pos:line="25" pos:column="4"/></name> <operator pos:line="25" pos:column="5">=<pos:position pos:line="25" pos:column="6"/></operator> <call><name pos:line="25" pos:column="7">strrchr<pos:position pos:line="25" pos:column="14"/></name><argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">copy<pos:position pos:line="25" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="25" pos:column="21">'/'<pos:position pos:line="25" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="26"/></expr_stmt>
  <if pos:line="26" pos:column="3">if<condition pos:line="26" pos:column="5">(<expr><name pos:line="26" pos:column="6">q<pos:position pos:line="26" pos:column="7"/></name></expr>)<pos:position pos:line="26" pos:column="8"/></condition><then pos:line="26" pos:column="8"> <block pos:line="26" pos:column="9">{
    <expr_stmt><expr><name pos:line="27" pos:column="5">p<pos:position pos:line="27" pos:column="6"/></name> <operator pos:line="27" pos:column="7">=<pos:position pos:line="27" pos:column="8"/></operator> <name pos:line="27" pos:column="9">q<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">+<pos:position pos:line="27" pos:column="12"/></operator> <literal type="number" pos:line="27" pos:column="13">1<pos:position pos:line="27" pos:column="14"/></literal></expr>;<pos:position pos:line="27" pos:column="15"/></expr_stmt>
    <if pos:line="28" pos:column="5">if<condition pos:line="28" pos:column="7">(<expr><operator pos:line="28" pos:column="8">!<pos:position pos:line="28" pos:column="9"/></operator><operator pos:line="28" pos:column="9">*<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="10">p<pos:position pos:line="28" pos:column="11"/></name></expr>)<pos:position pos:line="28" pos:column="12"/></condition><then pos:line="28" pos:column="12"> <block pos:line="28" pos:column="13">{
      <expr_stmt><expr><call><name pos:line="29" pos:column="7">Curl_safefree<pos:position pos:line="29" pos:column="20"/></name><argument_list pos:line="29" pos:column="20">(<argument><expr><name pos:line="29" pos:column="21">copy<pos:position pos:line="29" pos:column="25"/></name></expr></argument>)<pos:position pos:line="29" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt>
      <return pos:line="30" pos:column="7">return <expr><name pos:line="30" pos:column="14">NULL<pos:position pos:line="30" pos:column="18"/></name></expr>;<pos:position pos:line="30" pos:column="19"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="34" pos:column="3">/* If the filename contains a backslash, only use filename portion. The idea
     is that even systems that don't handle backslashes as path separators
     probably want the path removed for convenience. */</comment>
  <expr_stmt><expr><name pos:line="37" pos:column="3">q<pos:position pos:line="37" pos:column="4"/></name> <operator pos:line="37" pos:column="5">=<pos:position pos:line="37" pos:column="6"/></operator> <call><name pos:line="37" pos:column="7">strrchr<pos:position pos:line="37" pos:column="14"/></name><argument_list pos:line="37" pos:column="14">(<argument><expr><name pos:line="37" pos:column="15">p<pos:position pos:line="37" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="37" pos:column="18">'\\'<pos:position pos:line="37" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="24"/></expr_stmt>
  <if pos:line="38" pos:column="3">if<condition pos:line="38" pos:column="5">(<expr><name pos:line="38" pos:column="6">q<pos:position pos:line="38" pos:column="7"/></name></expr>)<pos:position pos:line="38" pos:column="8"/></condition><then pos:line="38" pos:column="8"> <block pos:line="38" pos:column="9">{
    <expr_stmt><expr><name pos:line="39" pos:column="5">p<pos:position pos:line="39" pos:column="6"/></name> <operator pos:line="39" pos:column="7">=<pos:position pos:line="39" pos:column="8"/></operator> <name pos:line="39" pos:column="9">q<pos:position pos:line="39" pos:column="10"/></name> <operator pos:line="39" pos:column="11">+<pos:position pos:line="39" pos:column="12"/></operator> <literal type="number" pos:line="39" pos:column="13">1<pos:position pos:line="39" pos:column="14"/></literal></expr>;<pos:position pos:line="39" pos:column="15"/></expr_stmt>
    <if pos:line="40" pos:column="5">if<condition pos:line="40" pos:column="7">(<expr><operator pos:line="40" pos:column="8">!<pos:position pos:line="40" pos:column="9"/></operator><operator pos:line="40" pos:column="9">*<pos:position pos:line="40" pos:column="10"/></operator><name pos:line="40" pos:column="10">p<pos:position pos:line="40" pos:column="11"/></name></expr>)<pos:position pos:line="40" pos:column="12"/></condition><then pos:line="40" pos:column="12"> <block pos:line="40" pos:column="13">{
      <expr_stmt><expr><call><name pos:line="41" pos:column="7">Curl_safefree<pos:position pos:line="41" pos:column="20"/></name><argument_list pos:line="41" pos:column="20">(<argument><expr><name pos:line="41" pos:column="21">copy<pos:position pos:line="41" pos:column="25"/></name></expr></argument>)<pos:position pos:line="41" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>
      <return pos:line="42" pos:column="7">return <expr><name pos:line="42" pos:column="14">NULL<pos:position pos:line="42" pos:column="18"/></name></expr>;<pos:position pos:line="42" pos:column="19"/></return>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>
  }<pos:position pos:line="44" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="46" pos:column="3">/* scan for the end letter and stop there */</comment>
  <for pos:line="47" pos:column="3">for<control pos:line="47" pos:column="6">(<init><expr><name pos:line="47" pos:column="7">q<pos:position pos:line="47" pos:column="8"/></name> <operator pos:line="47" pos:column="9">=<pos:position pos:line="47" pos:column="10"/></operator> <name pos:line="47" pos:column="11">p<pos:position pos:line="47" pos:column="12"/></name></expr>;<pos:position pos:line="47" pos:column="13"/></init> <condition><expr><operator pos:line="47" pos:column="14">*<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="15">q<pos:position pos:line="47" pos:column="16"/></name></expr>;<pos:position pos:line="47" pos:column="17"/></condition> <incr><expr><operator pos:line="47" pos:column="18">++<pos:position pos:line="47" pos:column="20"/></operator><name pos:line="47" pos:column="20">q<pos:position pos:line="47" pos:column="21"/></name></expr></incr>)<pos:position pos:line="47" pos:column="22"/></control> <block pos:line="47" pos:column="23">{
    <if pos:line="48" pos:column="5">if<condition pos:line="48" pos:column="7">(<expr><operator pos:line="48" pos:column="8">*<pos:position pos:line="48" pos:column="9"/></operator><name pos:line="48" pos:column="9">q<pos:position pos:line="48" pos:column="10"/></name> <operator pos:line="48" pos:column="11">==<pos:position pos:line="48" pos:column="13"/></operator> <name pos:line="48" pos:column="14">stop<pos:position pos:line="48" pos:column="18"/></name></expr>)<pos:position pos:line="48" pos:column="19"/></condition><then pos:line="48" pos:column="19"> <block pos:line="48" pos:column="20">{
      <expr_stmt><expr><operator pos:line="49" pos:column="7">*<pos:position pos:line="49" pos:column="8"/></operator><name pos:line="49" pos:column="8">q<pos:position pos:line="49" pos:column="9"/></name> <operator pos:line="49" pos:column="10">=<pos:position pos:line="49" pos:column="11"/></operator> <literal type="char" pos:line="49" pos:column="12">'\0'<pos:position pos:line="49" pos:column="16"/></literal></expr>;<pos:position pos:line="49" pos:column="17"/></expr_stmt>
      <break pos:line="50" pos:column="7">break;<pos:position pos:line="50" pos:column="13"/></break>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>
  }<pos:position pos:line="52" pos:column="4"/></block></for>

  <comment type="block" pos:line="54" pos:column="3">/* make sure the file name doesn't end in \r or \n */</comment>
  <expr_stmt><expr><name pos:line="55" pos:column="3">q<pos:position pos:line="55" pos:column="4"/></name> <operator pos:line="55" pos:column="5">=<pos:position pos:line="55" pos:column="6"/></operator> <call><name pos:line="55" pos:column="7">strchr<pos:position pos:line="55" pos:column="13"/></name><argument_list pos:line="55" pos:column="13">(<argument><expr><name pos:line="55" pos:column="14">p<pos:position pos:line="55" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="55" pos:column="17">'\r'<pos:position pos:line="55" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="23"/></expr_stmt>
  <if pos:line="56" pos:column="3">if<condition pos:line="56" pos:column="5">(<expr><name pos:line="56" pos:column="6">q<pos:position pos:line="56" pos:column="7"/></name></expr>)<pos:position pos:line="56" pos:column="8"/></condition><then pos:line="56" pos:column="8">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="57" pos:column="5">*<pos:position pos:line="57" pos:column="6"/></operator><name pos:line="57" pos:column="6">q<pos:position pos:line="57" pos:column="7"/></name> <operator pos:line="57" pos:column="8">=<pos:position pos:line="57" pos:column="9"/></operator> <literal type="char" pos:line="57" pos:column="10">'\0'<pos:position pos:line="57" pos:column="14"/></literal></expr>;<pos:position pos:line="57" pos:column="15"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="59" pos:column="3">q<pos:position pos:line="59" pos:column="4"/></name> <operator pos:line="59" pos:column="5">=<pos:position pos:line="59" pos:column="6"/></operator> <call><name pos:line="59" pos:column="7">strchr<pos:position pos:line="59" pos:column="13"/></name><argument_list pos:line="59" pos:column="13">(<argument><expr><name pos:line="59" pos:column="14">p<pos:position pos:line="59" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="59" pos:column="17">'\n'<pos:position pos:line="59" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="23"/></expr_stmt>
  <if pos:line="60" pos:column="3">if<condition pos:line="60" pos:column="5">(<expr><name pos:line="60" pos:column="6">q<pos:position pos:line="60" pos:column="7"/></name></expr>)<pos:position pos:line="60" pos:column="8"/></condition><then pos:line="60" pos:column="8">
    <block type="pseudo"><expr_stmt><expr><operator pos:line="61" pos:column="5">*<pos:position pos:line="61" pos:column="6"/></operator><name pos:line="61" pos:column="6">q<pos:position pos:line="61" pos:column="7"/></name> <operator pos:line="61" pos:column="8">=<pos:position pos:line="61" pos:column="9"/></operator> <literal type="char" pos:line="61" pos:column="10">'\0'<pos:position pos:line="61" pos:column="14"/></literal></expr>;<pos:position pos:line="61" pos:column="15"/></expr_stmt></block></then></if>

  <if pos:line="63" pos:column="3">if<condition pos:line="63" pos:column="5">(<expr><name pos:line="63" pos:column="6">copy<pos:position pos:line="63" pos:column="10"/></name> <operator pos:line="63" pos:column="11">!=<pos:position pos:line="63" pos:column="13"/></operator> <name pos:line="63" pos:column="14">p<pos:position pos:line="63" pos:column="15"/></name></expr>)<pos:position pos:line="63" pos:column="16"/></condition><then pos:line="63" pos:column="16">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="5">memmove<pos:position pos:line="64" pos:column="12"/></name><argument_list pos:line="64" pos:column="12">(<argument><expr><name pos:line="64" pos:column="13">copy<pos:position pos:line="64" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="19">p<pos:position pos:line="64" pos:column="20"/></name></expr></argument>, <argument><expr><call><name pos:line="64" pos:column="22">strlen<pos:position pos:line="64" pos:column="28"/></name><argument_list pos:line="64" pos:column="28">(<argument><expr><name pos:line="64" pos:column="29">p<pos:position pos:line="64" pos:column="30"/></name></expr></argument>)<pos:position pos:line="64" pos:column="31"/></argument_list></call> <operator pos:line="64" pos:column="32">+<pos:position pos:line="64" pos:column="33"/></operator> <literal type="number" pos:line="64" pos:column="34">1<pos:position pos:line="64" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="37"/></expr_stmt></block></then></if>

<cpp:if pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">if<pos:position pos:line="66" pos:column="4"/></cpp:directive> <expr><call><name pos:line="66" pos:column="5">defined<pos:position pos:line="66" pos:column="12"/></name><argument_list pos:line="66" pos:column="12">(<argument><expr><name pos:line="66" pos:column="13">MSDOS<pos:position pos:line="66" pos:column="18"/></name></expr></argument>)<pos:position pos:line="66" pos:column="19"/></argument_list></call> <operator pos:line="66" pos:column="20">||<pos:position pos:line="66" pos:column="22"/></operator> <call><name pos:line="66" pos:column="23">defined<pos:position pos:line="66" pos:column="30"/></name><argument_list pos:line="66" pos:column="30">(<argument><expr><name pos:line="66" pos:column="31">WIN32<pos:position pos:line="66" pos:column="36"/></name></expr></argument>)<pos:position pos:line="66" pos:column="37"/></argument_list></call></expr></cpp:if>
  <block pos:line="67" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="68" pos:column="5">char<pos:position pos:line="68" pos:column="9"/></name> <modifier pos:line="68" pos:column="10">*<pos:position pos:line="68" pos:column="11"/></modifier></type><name pos:line="68" pos:column="11">sanitized<pos:position pos:line="68" pos:column="20"/></name></decl>;<pos:position pos:line="68" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="69" pos:column="5">SANITIZEcode<pos:position pos:line="69" pos:column="17"/></name></type> <name pos:line="69" pos:column="18">sc<pos:position pos:line="69" pos:column="20"/></name> <init pos:line="69" pos:column="21">= <expr><call><name pos:line="69" pos:column="23">sanitize_file_name<pos:position pos:line="69" pos:column="41"/></name><argument_list pos:line="69" pos:column="41">(<argument><expr><operator pos:line="69" pos:column="42">&amp;<pos:position pos:line="69" pos:column="47"/></operator><name pos:line="69" pos:column="43">sanitized<pos:position pos:line="69" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="54">copy<pos:position pos:line="69" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="60">0<pos:position pos:line="69" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="69" pos:column="63"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="70" pos:column="5">Curl_safefree<pos:position pos:line="70" pos:column="18"/></name><argument_list pos:line="70" pos:column="18">(<argument><expr><name pos:line="70" pos:column="19">copy<pos:position pos:line="70" pos:column="23"/></name></expr></argument>)<pos:position pos:line="70" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="25"/></expr_stmt>
    <if pos:line="71" pos:column="5">if<condition pos:line="71" pos:column="7">(<expr><name pos:line="71" pos:column="8">sc<pos:position pos:line="71" pos:column="10"/></name></expr>)<pos:position pos:line="71" pos:column="11"/></condition><then pos:line="71" pos:column="11">
      <block type="pseudo"><return pos:line="72" pos:column="7">return <expr><name pos:line="72" pos:column="14">NULL<pos:position pos:line="72" pos:column="18"/></name></expr>;<pos:position pos:line="72" pos:column="19"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="73" pos:column="5">copy<pos:position pos:line="73" pos:column="9"/></name> <operator pos:line="73" pos:column="10">=<pos:position pos:line="73" pos:column="11"/></operator> <name pos:line="73" pos:column="12">sanitized<pos:position pos:line="73" pos:column="21"/></name></expr>;<pos:position pos:line="73" pos:column="22"/></expr_stmt>
  }<pos:position pos:line="74" pos:column="4"/></block>
<cpp:endif pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">endif<pos:position pos:line="75" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="75" pos:column="8">/* MSDOS || WIN32 */</comment>

  <comment type="block" pos:line="77" pos:column="3">/* in case we built debug enabled, we allow an environment variable
   * named CURL_TESTDIR to prefix the given file name to put it into a
   * specific directory
   */</comment>
<cpp:ifdef pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">ifdef<pos:position pos:line="81" pos:column="7"/></cpp:directive> <name pos:line="81" pos:column="8">DEBUGBUILD<pos:position pos:line="81" pos:column="18"/></name></cpp:ifdef>
  <block pos:line="82" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="83" pos:column="5">char<pos:position pos:line="83" pos:column="9"/></name> <modifier pos:line="83" pos:column="10">*<pos:position pos:line="83" pos:column="11"/></modifier></type><name pos:line="83" pos:column="11">tdir<pos:position pos:line="83" pos:column="15"/></name> <init pos:line="83" pos:column="16">= <expr><call><name pos:line="83" pos:column="18">curlx_getenv<pos:position pos:line="83" pos:column="30"/></name><argument_list pos:line="83" pos:column="30">(<argument><expr><literal type="string" pos:line="83" pos:column="31">"CURL_TESTDIR"<pos:position pos:line="83" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="83" pos:column="47"/></decl_stmt>
    <if pos:line="84" pos:column="5">if<condition pos:line="84" pos:column="7">(<expr><name pos:line="84" pos:column="8">tdir<pos:position pos:line="84" pos:column="12"/></name></expr>)<pos:position pos:line="84" pos:column="13"/></condition><then pos:line="84" pos:column="13"> <block pos:line="84" pos:column="14">{
      <decl_stmt><decl><type><name pos:line="85" pos:column="7">char<pos:position pos:line="85" pos:column="11"/></name></type> <name><name pos:line="85" pos:column="12">buffer<pos:position pos:line="85" pos:column="18"/></name><index pos:line="85" pos:column="18">[<expr><literal type="number" pos:line="85" pos:column="19">512<pos:position pos:line="85" pos:column="22"/></literal></expr>]<pos:position pos:line="85" pos:column="23"/></index></name></decl>;<pos:position pos:line="85" pos:column="24"/></decl_stmt> <comment type="block" pos:line="85" pos:column="25">/* suitably large */</comment>
      <expr_stmt><expr><call><name pos:line="86" pos:column="7">snprintf<pos:position pos:line="86" pos:column="15"/></name><argument_list pos:line="86" pos:column="15">(<argument><expr><name pos:line="86" pos:column="16">buffer<pos:position pos:line="86" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="86" pos:column="24">sizeof<argument_list pos:line="86" pos:column="30">(<argument><expr><name pos:line="86" pos:column="31">buffer<pos:position pos:line="86" pos:column="37"/></name></expr></argument>)<pos:position pos:line="86" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="40">"%s/%s"<pos:position pos:line="86" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="49">tdir<pos:position pos:line="86" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="55">copy<pos:position pos:line="86" pos:column="59"/></name></expr></argument>)<pos:position pos:line="86" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="61"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="87" pos:column="7">Curl_safefree<pos:position pos:line="87" pos:column="20"/></name><argument_list pos:line="87" pos:column="20">(<argument><expr><name pos:line="87" pos:column="21">copy<pos:position pos:line="87" pos:column="25"/></name></expr></argument>)<pos:position pos:line="87" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><name pos:line="88" pos:column="7">copy<pos:position pos:line="88" pos:column="11"/></name> <operator pos:line="88" pos:column="12">=<pos:position pos:line="88" pos:column="13"/></operator> <call><name pos:line="88" pos:column="14">strdup<pos:position pos:line="88" pos:column="20"/></name><argument_list pos:line="88" pos:column="20">(<argument><expr><name pos:line="88" pos:column="21">buffer<pos:position pos:line="88" pos:column="27"/></name></expr></argument>)<pos:position pos:line="88" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="29"/></expr_stmt> <comment type="block" pos:line="88" pos:column="30">/* clone the buffer, we don't use the libcurl
                                aprintf() or similar since we want to use the
                                same memory code as the "real" parse_filename
                                function */</comment>
      <expr_stmt><expr><call><name pos:line="92" pos:column="7">curl_free<pos:position pos:line="92" pos:column="16"/></name><argument_list pos:line="92" pos:column="16">(<argument><expr><name pos:line="92" pos:column="17">tdir<pos:position pos:line="92" pos:column="21"/></name></expr></argument>)<pos:position pos:line="92" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="93" pos:column="6"/></block></then></if>
  }<pos:position pos:line="94" pos:column="4"/></block>
<cpp:endif pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">endif<pos:position pos:line="95" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="97" pos:column="3">return <expr><name pos:line="97" pos:column="10">copy<pos:position pos:line="97" pos:column="14"/></name></expr>;<pos:position pos:line="97" pos:column="15"/></return>
}<pos:position pos:line="98" pos:column="2"/></block></function></unit>
