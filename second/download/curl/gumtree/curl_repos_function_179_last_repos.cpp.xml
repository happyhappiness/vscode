<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_179_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">init_fifo<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name pos:line="1" pos:column="15">void<pos:position pos:line="1" pos:column="19"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="20"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name><name pos:line="3" pos:column="3">struct<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">stat<pos:position pos:line="3" pos:column="14"/></name></name></type> <name pos:line="3" pos:column="15">st<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">fifo<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><literal type="string" pos:line="4" pos:column="22">"hiper.fifo"<pos:position pos:line="4" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">socket<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>

  <if pos:line="7" pos:column="3">if<condition pos:line="7" pos:column="5">(<expr><call><name pos:line="7" pos:column="6">lstat<pos:position pos:line="7" pos:column="11"/></name> <argument_list pos:line="7" pos:column="12">(<argument><expr><name pos:line="7" pos:column="13">fifo<pos:position pos:line="7" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="19">&amp;<pos:position pos:line="7" pos:column="24"/></operator><name pos:line="7" pos:column="20">st<pos:position pos:line="7" pos:column="22"/></name></expr></argument>)<pos:position pos:line="7" pos:column="23"/></argument_list></call> <operator pos:line="7" pos:column="24">==<pos:position pos:line="7" pos:column="26"/></operator> <literal type="number" pos:line="7" pos:column="27">0<pos:position pos:line="7" pos:column="28"/></literal></expr>)<pos:position pos:line="7" pos:column="29"/></condition><then pos:line="7" pos:column="29"> <block pos:line="7" pos:column="30">{
    <if pos:line="8" pos:column="5">if<condition pos:line="8" pos:column="7">(<expr><operator pos:line="8" pos:column="8">(<pos:position pos:line="8" pos:column="9"/></operator><name><name pos:line="8" pos:column="9">st<pos:position pos:line="8" pos:column="11"/></name><operator pos:line="8" pos:column="11">.<pos:position pos:line="8" pos:column="12"/></operator><name pos:line="8" pos:column="12">st_mode<pos:position pos:line="8" pos:column="19"/></name></name> <operator pos:line="8" pos:column="20">&amp;<pos:position pos:line="8" pos:column="25"/></operator> <name pos:line="8" pos:column="22">S_IFMT<pos:position pos:line="8" pos:column="28"/></name><operator pos:line="8" pos:column="28">)<pos:position pos:line="8" pos:column="29"/></operator> <operator pos:line="8" pos:column="30">==<pos:position pos:line="8" pos:column="32"/></operator> <name pos:line="8" pos:column="33">S_IFREG<pos:position pos:line="8" pos:column="40"/></name></expr>)<pos:position pos:line="8" pos:column="41"/></condition><then pos:line="8" pos:column="41"> <block pos:line="8" pos:column="42">{
      <expr_stmt><expr><name pos:line="9" pos:column="7">errno<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <name pos:line="9" pos:column="15">EEXIST<pos:position pos:line="9" pos:column="21"/></name></expr>;<pos:position pos:line="9" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="10" pos:column="7">perror<pos:position pos:line="10" pos:column="13"/></name><argument_list pos:line="10" pos:column="13">(<argument><expr><literal type="string" pos:line="10" pos:column="14">"lstat"<pos:position pos:line="10" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="11" pos:column="7">exit<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="number" pos:line="11" pos:column="12">1<pos:position pos:line="11" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="15" pos:column="3">unlink<pos:position pos:line="15" pos:column="9"/></name><argument_list pos:line="15" pos:column="9">(<argument><expr><name pos:line="15" pos:column="10">fifo<pos:position pos:line="15" pos:column="14"/></name></expr></argument>)<pos:position pos:line="15" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="16"/></expr_stmt>
  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><call><name pos:line="16" pos:column="6">mkfifo<pos:position pos:line="16" pos:column="12"/></name> <argument_list pos:line="16" pos:column="13">(<argument><expr><name pos:line="16" pos:column="14">fifo<pos:position pos:line="16" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="20">0600<pos:position pos:line="16" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="25"/></argument_list></call> <operator pos:line="16" pos:column="26">==<pos:position pos:line="16" pos:column="28"/></operator> <operator pos:line="16" pos:column="29">-<pos:position pos:line="16" pos:column="30"/></operator><literal type="number" pos:line="16" pos:column="30">1<pos:position pos:line="16" pos:column="31"/></literal></expr>)<pos:position pos:line="16" pos:column="32"/></condition><then pos:line="16" pos:column="32"> <block pos:line="16" pos:column="33">{
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">perror<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><literal type="string" pos:line="17" pos:column="12">"mkfifo"<pos:position pos:line="17" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">exit<pos:position pos:line="18" pos:column="9"/></name><argument_list pos:line="18" pos:column="9">(<argument><expr><literal type="number" pos:line="18" pos:column="10">1<pos:position pos:line="18" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="21" pos:column="3">socket<pos:position pos:line="21" pos:column="9"/></name> <operator pos:line="21" pos:column="10">=<pos:position pos:line="21" pos:column="11"/></operator> <call><name pos:line="21" pos:column="12">open<pos:position pos:line="21" pos:column="16"/></name><argument_list pos:line="21" pos:column="16">(<argument><expr><name pos:line="21" pos:column="17">fifo<pos:position pos:line="21" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="23">O_RDWR<pos:position pos:line="21" pos:column="29"/></name> <operator pos:line="21" pos:column="30">|<pos:position pos:line="21" pos:column="31"/></operator> <name pos:line="21" pos:column="32">O_NONBLOCK<pos:position pos:line="21" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="44">0<pos:position pos:line="21" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="47"/></expr_stmt>

  <if pos:line="23" pos:column="3">if<condition pos:line="23" pos:column="5">(<expr><name pos:line="23" pos:column="6">socket<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">==<pos:position pos:line="23" pos:column="15"/></operator> <operator pos:line="23" pos:column="16">-<pos:position pos:line="23" pos:column="17"/></operator><literal type="number" pos:line="23" pos:column="17">1<pos:position pos:line="23" pos:column="18"/></literal></expr>)<pos:position pos:line="23" pos:column="19"/></condition><then pos:line="23" pos:column="19"> <block pos:line="23" pos:column="20">{
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">perror<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><literal type="string" pos:line="24" pos:column="12">"open"<pos:position pos:line="24" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">exit<pos:position pos:line="25" pos:column="9"/></name><argument_list pos:line="25" pos:column="9">(<argument><expr><literal type="number" pos:line="25" pos:column="10">1<pos:position pos:line="25" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="13"/></expr_stmt>
  }<pos:position pos:line="26" pos:column="4"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="27" pos:column="3">MSG_OUT<pos:position pos:line="27" pos:column="10"/></name><argument_list pos:line="27" pos:column="10">(<argument><expr><literal type="string" pos:line="27" pos:column="11">"Now, pipe some URL's into &gt; %s\n"<pos:position pos:line="27" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="47">fifo<pos:position pos:line="27" pos:column="51"/></name></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="53"/></expr_stmt>

  <return pos:line="29" pos:column="3">return <expr><name pos:line="29" pos:column="10">socket<pos:position pos:line="29" pos:column="16"/></name></expr>;<pos:position pos:line="29" pos:column="17"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
