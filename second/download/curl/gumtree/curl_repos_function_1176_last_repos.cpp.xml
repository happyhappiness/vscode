<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_1176_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">CURLcode<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">imap_state_fetch_resp<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name><name pos:line="1" pos:column="39">struct<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">connectdata<pos:position pos:line="1" pos:column="57"/></name></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">conn<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">int<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">imapcode<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="2" pos:column="39">imapstate<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">instate<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLcode<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">result<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">CURLE_OK<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="5" pos:column="3">struct<pos:position pos:line="5" pos:column="9"/></name> <name pos:line="5" pos:column="10">Curl_easy<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">data<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name><name pos:line="5" pos:column="28">conn<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">-&gt;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="34">data<pos:position pos:line="5" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="6" pos:column="3">struct<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">imap_conn<pos:position pos:line="6" pos:column="19"/></name></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">imapc<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><operator pos:line="6" pos:column="29">&amp;<pos:position pos:line="6" pos:column="34"/></operator><name><name pos:line="6" pos:column="30">conn<pos:position pos:line="6" pos:column="34"/></name><operator pos:line="6" pos:column="34">-&gt;<pos:position pos:line="6" pos:column="39"/></operator><name pos:line="6" pos:column="36">proto<pos:position pos:line="6" pos:column="41"/></name><operator pos:line="6" pos:column="41">.<pos:position pos:line="6" pos:column="42"/></operator><name pos:line="6" pos:column="42">imapc<pos:position pos:line="6" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="48"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">pingpong<pos:position pos:line="7" pos:column="18"/></name></name> <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier></type><name pos:line="7" pos:column="20">pp<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><operator pos:line="7" pos:column="25">&amp;<pos:position pos:line="7" pos:column="30"/></operator><name><name pos:line="7" pos:column="26">imapc<pos:position pos:line="7" pos:column="31"/></name><operator pos:line="7" pos:column="31">-&gt;<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="33">pp<pos:position pos:line="7" pos:column="35"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">ptr<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><name><name pos:line="8" pos:column="21">data<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">-&gt;<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="27">state<pos:position pos:line="8" pos:column="32"/></name><operator pos:line="8" pos:column="32">.<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="33">buffer<pos:position pos:line="8" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="40"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">bool<pos:position pos:line="9" pos:column="7"/></name></type> <name pos:line="9" pos:column="8">parsed<pos:position pos:line="9" pos:column="14"/></name> <init pos:line="9" pos:column="15">= <expr><name pos:line="9" pos:column="17">FALSE<pos:position pos:line="9" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">curl_off_t<pos:position pos:line="10" pos:column="13"/></name></type> <name pos:line="10" pos:column="14">size<pos:position pos:line="10" pos:column="18"/></name> <init pos:line="10" pos:column="19">= <expr><literal type="number" pos:line="10" pos:column="21">0<pos:position pos:line="10" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>

  <expr_stmt><expr><operator pos:line="12" pos:column="3">(<pos:position pos:line="12" pos:column="4"/></operator><name pos:line="12" pos:column="4">void<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">)<pos:position pos:line="12" pos:column="9"/></operator><name pos:line="12" pos:column="9">instate<pos:position pos:line="12" pos:column="16"/></name></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt> <comment type="block" pos:line="12" pos:column="18">/* no use for this yet */</comment>

  <if pos:line="14" pos:column="3">if<condition pos:line="14" pos:column="5">(<expr><name pos:line="14" pos:column="6">imapcode<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">!=<pos:position pos:line="14" pos:column="17"/></operator> <literal type="char" pos:line="14" pos:column="18">'*'<pos:position pos:line="14" pos:column="21"/></literal></expr>)<pos:position pos:line="14" pos:column="22"/></condition><then pos:line="14" pos:column="22"> <block pos:line="14" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">Curl_pgrsSetDownloadSize<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><name pos:line="15" pos:column="30">data<pos:position pos:line="15" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="36">-<pos:position pos:line="15" pos:column="37"/></operator><literal type="number" pos:line="15" pos:column="37">1<pos:position pos:line="15" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">state<pos:position pos:line="16" pos:column="10"/></name><argument_list pos:line="16" pos:column="10">(<argument><expr><name pos:line="16" pos:column="11">conn<pos:position pos:line="16" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="17">IMAP_STOP<pos:position pos:line="16" pos:column="26"/></name></expr></argument>)<pos:position pos:line="16" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="28"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">CURLE_REMOTE_FILE_NOT_FOUND<pos:position pos:line="17" pos:column="39"/></name></expr>;<pos:position pos:line="17" pos:column="40"/></return> <comment type="block" pos:line="17" pos:column="41">/* TODO: Fix error code */</comment>
  }<pos:position pos:line="18" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="20" pos:column="3">/* Something like this is received "* 1 FETCH (BODY[TEXT] {2021}\r" so parse
     the continuation data contained within the curly brackets */</comment>
  <while pos:line="22" pos:column="3">while<condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">*<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">ptr<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">&amp;&amp;<pos:position pos:line="22" pos:column="24"/></operator> <operator pos:line="22" pos:column="17">(<pos:position pos:line="22" pos:column="18"/></operator><operator pos:line="22" pos:column="18">*<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="19">ptr<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">!=<pos:position pos:line="22" pos:column="25"/></operator> <literal type="char" pos:line="22" pos:column="26">'{'<pos:position pos:line="22" pos:column="29"/></literal><operator pos:line="22" pos:column="29">)<pos:position pos:line="22" pos:column="30"/></operator></expr>)<pos:position pos:line="22" pos:column="31"/></condition>
    <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="5">ptr<pos:position pos:line="23" pos:column="8"/></name><operator pos:line="23" pos:column="8">++<pos:position pos:line="23" pos:column="10"/></operator></expr>;<pos:position pos:line="23" pos:column="11"/></expr_stmt></block></while>

  <if pos:line="25" pos:column="3">if<condition pos:line="25" pos:column="5">(<expr><operator pos:line="25" pos:column="6">*<pos:position pos:line="25" pos:column="7"/></operator><name pos:line="25" pos:column="7">ptr<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">==<pos:position pos:line="25" pos:column="13"/></operator> <literal type="char" pos:line="25" pos:column="14">'{'<pos:position pos:line="25" pos:column="17"/></literal></expr>)<pos:position pos:line="25" pos:column="18"/></condition><then pos:line="25" pos:column="18"> <block pos:line="25" pos:column="19">{
    <decl_stmt><decl><type><name pos:line="26" pos:column="5">char<pos:position pos:line="26" pos:column="9"/></name> <modifier pos:line="26" pos:column="10">*<pos:position pos:line="26" pos:column="11"/></modifier></type><name pos:line="26" pos:column="11">endptr<pos:position pos:line="26" pos:column="17"/></name></decl>;<pos:position pos:line="26" pos:column="18"/></decl_stmt>
    <if pos:line="27" pos:column="5">if<condition pos:line="27" pos:column="7">(<expr><operator pos:line="27" pos:column="8">!<pos:position pos:line="27" pos:column="9"/></operator><call><name pos:line="27" pos:column="9">curlx_strtoofft<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><name pos:line="27" pos:column="25">ptr<pos:position pos:line="27" pos:column="28"/></name> <operator pos:line="27" pos:column="29">+<pos:position pos:line="27" pos:column="30"/></operator> <literal type="number" pos:line="27" pos:column="31">1<pos:position pos:line="27" pos:column="32"/></literal></expr></argument>, <argument><expr><operator pos:line="27" pos:column="34">&amp;<pos:position pos:line="27" pos:column="39"/></operator><name pos:line="27" pos:column="35">endptr<pos:position pos:line="27" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="43">10<pos:position pos:line="27" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="27" pos:column="47">&amp;<pos:position pos:line="27" pos:column="52"/></operator><name pos:line="27" pos:column="48">size<pos:position pos:line="27" pos:column="52"/></name></expr></argument>)<pos:position pos:line="27" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="54"/></condition><then pos:line="27" pos:column="54"> <block pos:line="27" pos:column="55">{
      <if pos:line="28" pos:column="7">if<condition pos:line="28" pos:column="9">(<expr><name pos:line="28" pos:column="10">endptr<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">-<pos:position pos:line="28" pos:column="18"/></operator> <name pos:line="28" pos:column="19">ptr<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">&gt;<pos:position pos:line="28" pos:column="27"/></operator> <literal type="number" pos:line="28" pos:column="25">1<pos:position pos:line="28" pos:column="26"/></literal> <operator pos:line="28" pos:column="27">&amp;&amp;<pos:position pos:line="28" pos:column="37"/></operator> <name><name pos:line="28" pos:column="30">endptr<pos:position pos:line="28" pos:column="36"/></name><index pos:line="28" pos:column="36">[<expr><literal type="number" pos:line="28" pos:column="37">0<pos:position pos:line="28" pos:column="38"/></literal></expr>]<pos:position pos:line="28" pos:column="39"/></index></name> <operator pos:line="28" pos:column="40">==<pos:position pos:line="28" pos:column="42"/></operator> <literal type="char" pos:line="28" pos:column="43">'}'<pos:position pos:line="28" pos:column="46"/></literal> <operator pos:line="28" pos:column="47">&amp;&amp;<pos:position pos:line="28" pos:column="57"/></operator>
         <name><name pos:line="29" pos:column="10">endptr<pos:position pos:line="29" pos:column="16"/></name><index pos:line="29" pos:column="16">[<expr><literal type="number" pos:line="29" pos:column="17">1<pos:position pos:line="29" pos:column="18"/></literal></expr>]<pos:position pos:line="29" pos:column="19"/></index></name> <operator pos:line="29" pos:column="20">==<pos:position pos:line="29" pos:column="22"/></operator> <literal type="char" pos:line="29" pos:column="23">'\r'<pos:position pos:line="29" pos:column="27"/></literal> <operator pos:line="29" pos:column="28">&amp;&amp;<pos:position pos:line="29" pos:column="38"/></operator> <name><name pos:line="29" pos:column="31">endptr<pos:position pos:line="29" pos:column="37"/></name><index pos:line="29" pos:column="37">[<expr><literal type="number" pos:line="29" pos:column="38">2<pos:position pos:line="29" pos:column="39"/></literal></expr>]<pos:position pos:line="29" pos:column="40"/></index></name> <operator pos:line="29" pos:column="41">==<pos:position pos:line="29" pos:column="43"/></operator> <literal type="char" pos:line="29" pos:column="44">'\0'<pos:position pos:line="29" pos:column="48"/></literal></expr>)<pos:position pos:line="29" pos:column="49"/></condition><then pos:line="29" pos:column="49">
        <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="9">parsed<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <name pos:line="30" pos:column="18">TRUE<pos:position pos:line="30" pos:column="22"/></name></expr>;<pos:position pos:line="30" pos:column="23"/></expr_stmt></block></then></if>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>

  <if pos:line="34" pos:column="3">if<condition pos:line="34" pos:column="5">(<expr><name pos:line="34" pos:column="6">parsed<pos:position pos:line="34" pos:column="12"/></name></expr>)<pos:position pos:line="34" pos:column="13"/></condition><then pos:line="34" pos:column="13"> <block pos:line="34" pos:column="14">{
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">infof<pos:position pos:line="35" pos:column="10"/></name><argument_list pos:line="35" pos:column="10">(<argument><expr><name pos:line="35" pos:column="11">data<pos:position pos:line="35" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="17">"Found %"<pos:position pos:line="35" pos:column="26"/></literal> <name pos:line="35" pos:column="27">CURL_FORMAT_CURL_OFF_TU<pos:position pos:line="35" pos:column="50"/></name> <literal type="string" pos:line="35" pos:column="51">" bytes to download\n"<pos:position pos:line="35" pos:column="73"/></literal></expr></argument>,
          <argument><expr><name pos:line="36" pos:column="11">size<pos:position pos:line="36" pos:column="15"/></name></expr></argument>)<pos:position pos:line="36" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">Curl_pgrsSetDownloadSize<pos:position pos:line="37" pos:column="29"/></name><argument_list pos:line="37" pos:column="29">(<argument><expr><name pos:line="37" pos:column="30">data<pos:position pos:line="37" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="36">size<pos:position pos:line="37" pos:column="40"/></name></expr></argument>)<pos:position pos:line="37" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="42"/></expr_stmt>

    <if pos:line="39" pos:column="5">if<condition pos:line="39" pos:column="7">(<expr><name><name pos:line="39" pos:column="8">pp<pos:position pos:line="39" pos:column="10"/></name><operator pos:line="39" pos:column="10">-&gt;<pos:position pos:line="39" pos:column="15"/></operator><name pos:line="39" pos:column="12">cache<pos:position pos:line="39" pos:column="17"/></name></name></expr>)<pos:position pos:line="39" pos:column="18"/></condition><then pos:line="39" pos:column="18"> <block pos:line="39" pos:column="19">{
      <comment type="block" pos:line="40" pos:column="7">/* At this point there is a bunch of data in the header "cache" that is
         actually body content, send it as body and then skip it. Do note
         that there may even be additional "headers" after the body. */</comment>
      <decl_stmt><decl><type><name pos:line="43" pos:column="7">size_t<pos:position pos:line="43" pos:column="13"/></name></type> <name pos:line="43" pos:column="14">chunk<pos:position pos:line="43" pos:column="19"/></name> <init pos:line="43" pos:column="20">= <expr><name><name pos:line="43" pos:column="22">pp<pos:position pos:line="43" pos:column="24"/></name><operator pos:line="43" pos:column="24">-&gt;<pos:position pos:line="43" pos:column="29"/></operator><name pos:line="43" pos:column="26">cache_size<pos:position pos:line="43" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="43" pos:column="37"/></decl_stmt>

      <if pos:line="45" pos:column="7">if<condition pos:line="45" pos:column="9">(<expr><name pos:line="45" pos:column="10">chunk<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">&gt;<pos:position pos:line="45" pos:column="20"/></operator> <operator pos:line="45" pos:column="18">(<pos:position pos:line="45" pos:column="19"/></operator><name pos:line="45" pos:column="19">size_t<pos:position pos:line="45" pos:column="25"/></name><operator pos:line="45" pos:column="25">)<pos:position pos:line="45" pos:column="26"/></operator><name pos:line="45" pos:column="26">size<pos:position pos:line="45" pos:column="30"/></name></expr>)<pos:position pos:line="45" pos:column="31"/></condition><then pos:line="45" pos:column="31">
        <comment type="block" pos:line="46" pos:column="9">/* The conversion from curl_off_t to size_t is always fine here */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="9">chunk<pos:position pos:line="47" pos:column="14"/></name> <operator pos:line="47" pos:column="15">=<pos:position pos:line="47" pos:column="16"/></operator> <operator pos:line="47" pos:column="17">(<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="18">size_t<pos:position pos:line="47" pos:column="24"/></name><operator pos:line="47" pos:column="24">)<pos:position pos:line="47" pos:column="25"/></operator><name pos:line="47" pos:column="25">size<pos:position pos:line="47" pos:column="29"/></name></expr>;<pos:position pos:line="47" pos:column="30"/></expr_stmt></block></then></if>

      <expr_stmt><expr><name pos:line="49" pos:column="7">result<pos:position pos:line="49" pos:column="13"/></name> <operator pos:line="49" pos:column="14">=<pos:position pos:line="49" pos:column="15"/></operator> <call><name pos:line="49" pos:column="16">Curl_client_write<pos:position pos:line="49" pos:column="33"/></name><argument_list pos:line="49" pos:column="33">(<argument><expr><name pos:line="49" pos:column="34">conn<pos:position pos:line="49" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="40">CLIENTWRITE_BODY<pos:position pos:line="49" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="58">pp<pos:position pos:line="49" pos:column="60"/></name><operator pos:line="49" pos:column="60">-&gt;<pos:position pos:line="49" pos:column="65"/></operator><name pos:line="49" pos:column="62">cache<pos:position pos:line="49" pos:column="67"/></name></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="69">chunk<pos:position pos:line="49" pos:column="74"/></name></expr></argument>)<pos:position pos:line="49" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="76"/></expr_stmt>
      <if pos:line="50" pos:column="7">if<condition pos:line="50" pos:column="9">(<expr><name pos:line="50" pos:column="10">result<pos:position pos:line="50" pos:column="16"/></name></expr>)<pos:position pos:line="50" pos:column="17"/></condition><then pos:line="50" pos:column="17">
        <block type="pseudo"><return pos:line="51" pos:column="9">return <expr><name pos:line="51" pos:column="16">result<pos:position pos:line="51" pos:column="22"/></name></expr>;<pos:position pos:line="51" pos:column="23"/></return></block></then></if>

      <expr_stmt><expr><name><name pos:line="53" pos:column="7">data<pos:position pos:line="53" pos:column="11"/></name><operator pos:line="53" pos:column="11">-&gt;<pos:position pos:line="53" pos:column="16"/></operator><name pos:line="53" pos:column="13">req<pos:position pos:line="53" pos:column="16"/></name><operator pos:line="53" pos:column="16">.<pos:position pos:line="53" pos:column="17"/></operator><name pos:line="53" pos:column="17">bytecount<pos:position pos:line="53" pos:column="26"/></name></name> <operator pos:line="53" pos:column="27">+=<pos:position pos:line="53" pos:column="29"/></operator> <name pos:line="53" pos:column="30">chunk<pos:position pos:line="53" pos:column="35"/></name></expr>;<pos:position pos:line="53" pos:column="36"/></expr_stmt>

      <expr_stmt><expr><call><name pos:line="55" pos:column="7">infof<pos:position pos:line="55" pos:column="12"/></name><argument_list pos:line="55" pos:column="12">(<argument><expr><name pos:line="55" pos:column="13">data<pos:position pos:line="55" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="19">"Written %"<pos:position pos:line="55" pos:column="30"/></literal> <name pos:line="55" pos:column="31">CURL_FORMAT_CURL_OFF_TU<pos:position pos:line="55" pos:column="54"/></name>
            <literal type="string" pos:line="56" pos:column="13">" bytes, %"<pos:position pos:line="56" pos:column="24"/></literal> <name pos:line="56" pos:column="25">CURL_FORMAT_CURL_OFF_TU<pos:position pos:line="56" pos:column="48"/></name>
            <literal type="string" pos:line="57" pos:column="13">" bytes are left for transfer\n"<pos:position pos:line="57" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="57" pos:column="47">(<pos:position pos:line="57" pos:column="48"/></operator><name pos:line="57" pos:column="48">curl_off_t<pos:position pos:line="57" pos:column="58"/></name><operator pos:line="57" pos:column="58">)<pos:position pos:line="57" pos:column="59"/></operator><name pos:line="57" pos:column="59">chunk<pos:position pos:line="57" pos:column="64"/></name></expr></argument>,
            <argument><expr><name pos:line="58" pos:column="13">size<pos:position pos:line="58" pos:column="17"/></name> <operator pos:line="58" pos:column="18">-<pos:position pos:line="58" pos:column="19"/></operator> <name pos:line="58" pos:column="20">chunk<pos:position pos:line="58" pos:column="25"/></name></expr></argument>)<pos:position pos:line="58" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="27"/></expr_stmt>

      <comment type="block" pos:line="60" pos:column="7">/* Have we used the entire cache or just part of it?*/</comment>
      <if pos:line="61" pos:column="7">if<condition pos:line="61" pos:column="9">(<expr><name><name pos:line="61" pos:column="10">pp<pos:position pos:line="61" pos:column="12"/></name><operator pos:line="61" pos:column="12">-&gt;<pos:position pos:line="61" pos:column="17"/></operator><name pos:line="61" pos:column="14">cache_size<pos:position pos:line="61" pos:column="24"/></name></name> <operator pos:line="61" pos:column="25">&gt;<pos:position pos:line="61" pos:column="29"/></operator> <name pos:line="61" pos:column="27">chunk<pos:position pos:line="61" pos:column="32"/></name></expr>)<pos:position pos:line="61" pos:column="33"/></condition><then pos:line="61" pos:column="33"> <block pos:line="61" pos:column="34">{
        <comment type="block" pos:line="62" pos:column="9">/* Only part of it so shrink the cache to fit the trailing data */</comment>
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">memmove<pos:position pos:line="63" pos:column="16"/></name><argument_list pos:line="63" pos:column="16">(<argument><expr><name><name pos:line="63" pos:column="17">pp<pos:position pos:line="63" pos:column="19"/></name><operator pos:line="63" pos:column="19">-&gt;<pos:position pos:line="63" pos:column="24"/></operator><name pos:line="63" pos:column="21">cache<pos:position pos:line="63" pos:column="26"/></name></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="28">pp<pos:position pos:line="63" pos:column="30"/></name><operator pos:line="63" pos:column="30">-&gt;<pos:position pos:line="63" pos:column="35"/></operator><name pos:line="63" pos:column="32">cache<pos:position pos:line="63" pos:column="37"/></name></name> <operator pos:line="63" pos:column="38">+<pos:position pos:line="63" pos:column="39"/></operator> <name pos:line="63" pos:column="40">chunk<pos:position pos:line="63" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="47">pp<pos:position pos:line="63" pos:column="49"/></name><operator pos:line="63" pos:column="49">-&gt;<pos:position pos:line="63" pos:column="54"/></operator><name pos:line="63" pos:column="51">cache_size<pos:position pos:line="63" pos:column="61"/></name></name> <operator pos:line="63" pos:column="62">-<pos:position pos:line="63" pos:column="63"/></operator> <name pos:line="63" pos:column="64">chunk<pos:position pos:line="63" pos:column="69"/></name></expr></argument>)<pos:position pos:line="63" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="71"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="64" pos:column="9">pp<pos:position pos:line="64" pos:column="11"/></name><operator pos:line="64" pos:column="11">-&gt;<pos:position pos:line="64" pos:column="16"/></operator><name pos:line="64" pos:column="13">cache_size<pos:position pos:line="64" pos:column="23"/></name></name> <operator pos:line="64" pos:column="24">-=<pos:position pos:line="64" pos:column="26"/></operator> <name pos:line="64" pos:column="27">chunk<pos:position pos:line="64" pos:column="32"/></name></expr>;<pos:position pos:line="64" pos:column="33"/></expr_stmt>
      }<pos:position pos:line="65" pos:column="8"/></block></then>
      <else pos:line="66" pos:column="7">else <block pos:line="66" pos:column="12">{
        <comment type="block" pos:line="67" pos:column="9">/* Free the cache */</comment>
        <expr_stmt><expr><call><name pos:line="68" pos:column="9">Curl_safefree<pos:position pos:line="68" pos:column="22"/></name><argument_list pos:line="68" pos:column="22">(<argument><expr><name><name pos:line="68" pos:column="23">pp<pos:position pos:line="68" pos:column="25"/></name><operator pos:line="68" pos:column="25">-&gt;<pos:position pos:line="68" pos:column="30"/></operator><name pos:line="68" pos:column="27">cache<pos:position pos:line="68" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="34"/></expr_stmt>

        <comment type="block" pos:line="70" pos:column="9">/* Reset the cache size */</comment>
        <expr_stmt><expr><name><name pos:line="71" pos:column="9">pp<pos:position pos:line="71" pos:column="11"/></name><operator pos:line="71" pos:column="11">-&gt;<pos:position pos:line="71" pos:column="16"/></operator><name pos:line="71" pos:column="13">cache_size<pos:position pos:line="71" pos:column="23"/></name></name> <operator pos:line="71" pos:column="24">=<pos:position pos:line="71" pos:column="25"/></operator> <literal type="number" pos:line="71" pos:column="26">0<pos:position pos:line="71" pos:column="27"/></literal></expr>;<pos:position pos:line="71" pos:column="28"/></expr_stmt>
      }<pos:position pos:line="72" pos:column="8"/></block></else></if>
    }<pos:position pos:line="73" pos:column="6"/></block></then></if>

    <if pos:line="75" pos:column="5">if<condition pos:line="75" pos:column="7">(<expr><name><name pos:line="75" pos:column="8">data<pos:position pos:line="75" pos:column="12"/></name><operator pos:line="75" pos:column="12">-&gt;<pos:position pos:line="75" pos:column="17"/></operator><name pos:line="75" pos:column="14">req<pos:position pos:line="75" pos:column="17"/></name><operator pos:line="75" pos:column="17">.<pos:position pos:line="75" pos:column="18"/></operator><name pos:line="75" pos:column="18">bytecount<pos:position pos:line="75" pos:column="27"/></name></name> <operator pos:line="75" pos:column="28">==<pos:position pos:line="75" pos:column="30"/></operator> <name pos:line="75" pos:column="31">size<pos:position pos:line="75" pos:column="35"/></name></expr>)<pos:position pos:line="75" pos:column="36"/></condition><then pos:line="75" pos:column="36">
      <comment type="block" pos:line="76" pos:column="7">/* The entire data is already transferred! */</comment>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="77" pos:column="7">Curl_setup_transfer<pos:position pos:line="77" pos:column="26"/></name><argument_list pos:line="77" pos:column="26">(<argument><expr><name pos:line="77" pos:column="27">conn<pos:position pos:line="77" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="77" pos:column="33">-<pos:position pos:line="77" pos:column="34"/></operator><literal type="number" pos:line="77" pos:column="34">1<pos:position pos:line="77" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="77" pos:column="37">-<pos:position pos:line="77" pos:column="38"/></operator><literal type="number" pos:line="77" pos:column="38">1<pos:position pos:line="77" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="41">FALSE<pos:position pos:line="77" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="48">NULL<pos:position pos:line="77" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="77" pos:column="54">-<pos:position pos:line="77" pos:column="55"/></operator><literal type="number" pos:line="77" pos:column="55">1<pos:position pos:line="77" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="58">NULL<pos:position pos:line="77" pos:column="62"/></name></expr></argument>)<pos:position pos:line="77" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="64"/></expr_stmt></block></then>
    <else pos:line="78" pos:column="5">else <block pos:line="78" pos:column="10">{
      <comment type="block" pos:line="79" pos:column="7">/* IMAP download */</comment>
      <expr_stmt><expr><name><name pos:line="80" pos:column="7">data<pos:position pos:line="80" pos:column="11"/></name><operator pos:line="80" pos:column="11">-&gt;<pos:position pos:line="80" pos:column="16"/></operator><name pos:line="80" pos:column="13">req<pos:position pos:line="80" pos:column="16"/></name><operator pos:line="80" pos:column="16">.<pos:position pos:line="80" pos:column="17"/></operator><name pos:line="80" pos:column="17">maxdownload<pos:position pos:line="80" pos:column="28"/></name></name> <operator pos:line="80" pos:column="29">=<pos:position pos:line="80" pos:column="30"/></operator> <name pos:line="80" pos:column="31">size<pos:position pos:line="80" pos:column="35"/></name></expr>;<pos:position pos:line="80" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="81" pos:column="7">Curl_setup_transfer<pos:position pos:line="81" pos:column="26"/></name><argument_list pos:line="81" pos:column="26">(<argument><expr><name pos:line="81" pos:column="27">conn<pos:position pos:line="81" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="33">FIRSTSOCKET<pos:position pos:line="81" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="46">size<pos:position pos:line="81" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="52">FALSE<pos:position pos:line="81" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="59">NULL<pos:position pos:line="81" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="81" pos:column="65">-<pos:position pos:line="81" pos:column="66"/></operator><literal type="number" pos:line="81" pos:column="66">1<pos:position pos:line="81" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="69">NULL<pos:position pos:line="81" pos:column="73"/></name></expr></argument>)<pos:position pos:line="81" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="75"/></expr_stmt>
    }<pos:position pos:line="82" pos:column="6"/></block></else></if>
  }<pos:position pos:line="83" pos:column="4"/></block></then>
  <else pos:line="84" pos:column="3">else <block pos:line="84" pos:column="8">{
    <comment type="block" pos:line="85" pos:column="5">/* We don't know how to parse this line */</comment>
    <expr_stmt><expr><call><name pos:line="86" pos:column="5">failf<pos:position pos:line="86" pos:column="10"/></name><argument_list pos:line="86" pos:column="10">(<argument><expr><name><name pos:line="86" pos:column="11">pp<pos:position pos:line="86" pos:column="13"/></name><operator pos:line="86" pos:column="13">-&gt;<pos:position pos:line="86" pos:column="18"/></operator><name pos:line="86" pos:column="15">conn<pos:position pos:line="86" pos:column="19"/></name><operator pos:line="86" pos:column="19">-&gt;<pos:position pos:line="86" pos:column="24"/></operator><name pos:line="86" pos:column="21">data<pos:position pos:line="86" pos:column="25"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="27">"Failed to parse FETCH response."<pos:position pos:line="86" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name pos:line="87" pos:column="5">result<pos:position pos:line="87" pos:column="11"/></name> <operator pos:line="87" pos:column="12">=<pos:position pos:line="87" pos:column="13"/></operator> <name pos:line="87" pos:column="14">CURLE_WEIRD_SERVER_REPLY<pos:position pos:line="87" pos:column="38"/></name></expr>;<pos:position pos:line="87" pos:column="39"/></expr_stmt>
  }<pos:position pos:line="88" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="90" pos:column="3">/* End of DO phase */</comment>
  <expr_stmt><expr><call><name pos:line="91" pos:column="3">state<pos:position pos:line="91" pos:column="8"/></name><argument_list pos:line="91" pos:column="8">(<argument><expr><name pos:line="91" pos:column="9">conn<pos:position pos:line="91" pos:column="13"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="15">IMAP_STOP<pos:position pos:line="91" pos:column="24"/></name></expr></argument>)<pos:position pos:line="91" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="26"/></expr_stmt>

  <return pos:line="93" pos:column="3">return <expr><name pos:line="93" pos:column="10">result<pos:position pos:line="93" pos:column="16"/></name></expr>;<pos:position pos:line="93" pos:column="17"/></return>
}<pos:position pos:line="94" pos:column="2"/></block></function></unit>
