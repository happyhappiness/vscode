<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_707_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">service_connection<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">curl_socket_t<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">msgsock<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="54">struct<pos:position pos:line="1" pos:column="60"/></name> <name pos:line="1" pos:column="61">httprequest<pos:position pos:line="1" pos:column="72"/></name></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">req<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="2" pos:column="31">curl_socket_t<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">listensock<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>,
                              <parameter><decl><type><specifier pos:line="3" pos:column="31">const<pos:position pos:line="3" pos:column="36"/></specifier> <name pos:line="3" pos:column="37">char<pos:position pos:line="3" pos:column="41"/></name> <modifier pos:line="3" pos:column="42">*<pos:position pos:line="3" pos:column="43"/></modifier></type><name pos:line="3" pos:column="43">connecthost<pos:position pos:line="3" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="55"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <if pos:line="5" pos:column="3">if<condition pos:line="5" pos:column="5">(<expr><name pos:line="5" pos:column="6">got_exit_signal<pos:position pos:line="5" pos:column="21"/></name></expr>)<pos:position pos:line="5" pos:column="22"/></condition><then pos:line="5" pos:column="22">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><operator pos:line="6" pos:column="12">-<pos:position pos:line="6" pos:column="13"/></operator><literal type="number" pos:line="6" pos:column="13">1<pos:position pos:line="6" pos:column="14"/></literal></expr>;<pos:position pos:line="6" pos:column="15"/></return></block></then></if>

  <while pos:line="8" pos:column="3">while<condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><name><name pos:line="8" pos:column="10">req<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">-&gt;<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="15">done_processing<pos:position pos:line="8" pos:column="30"/></name></name></expr>)<pos:position pos:line="8" pos:column="31"/></condition> <block pos:line="8" pos:column="32">{
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">rc<pos:position pos:line="9" pos:column="11"/></name> <init pos:line="9" pos:column="12">= <expr><call><name pos:line="9" pos:column="14">get_request<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">msgsock<pos:position pos:line="9" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="35">req<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="40"/></decl_stmt>
    <if pos:line="10" pos:column="5">if<condition pos:line="10" pos:column="7">(<expr><name pos:line="10" pos:column="8">rc<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">&lt;=<pos:position pos:line="10" pos:column="16"/></operator> <literal type="number" pos:line="10" pos:column="14">0<pos:position pos:line="10" pos:column="15"/></literal></expr>)<pos:position pos:line="10" pos:column="16"/></condition><then pos:line="10" pos:column="16"> <block pos:line="10" pos:column="17">{
      <comment type="block" pos:line="11" pos:column="7">/* Nothing further to read now, possibly because the socket was closed */</comment>
      <return pos:line="12" pos:column="7">return <expr><name pos:line="12" pos:column="14">rc<pos:position pos:line="12" pos:column="16"/></name></expr>;<pos:position pos:line="12" pos:column="17"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>
  }<pos:position pos:line="14" pos:column="4"/></block></while>

  <if pos:line="16" pos:column="3">if<condition pos:line="16" pos:column="5">(<expr><name pos:line="16" pos:column="6">prevbounce<pos:position pos:line="16" pos:column="16"/></name></expr>)<pos:position pos:line="16" pos:column="17"/></condition><then pos:line="16" pos:column="17"> <block pos:line="16" pos:column="18">{
    <comment type="block" pos:line="17" pos:column="5">/* bounce treatment requested */</comment>
    <if pos:line="18" pos:column="5">if<condition pos:line="18" pos:column="7">(<expr><operator pos:line="18" pos:column="8">(<pos:position pos:line="18" pos:column="9"/></operator><name><name pos:line="18" pos:column="9">req<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">testno<pos:position pos:line="18" pos:column="20"/></name></name> <operator pos:line="18" pos:column="21">==<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="24">prevtestno<pos:position pos:line="18" pos:column="34"/></name><operator pos:line="18" pos:column="34">)<pos:position pos:line="18" pos:column="35"/></operator> <operator pos:line="18" pos:column="36">&amp;&amp;<pos:position pos:line="18" pos:column="46"/></operator>
       <operator pos:line="19" pos:column="8">(<pos:position pos:line="19" pos:column="9"/></operator><name><name pos:line="19" pos:column="9">req<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">partno<pos:position pos:line="19" pos:column="20"/></name></name> <operator pos:line="19" pos:column="21">==<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="24">prevpartno<pos:position pos:line="19" pos:column="34"/></name><operator pos:line="19" pos:column="34">)<pos:position pos:line="19" pos:column="35"/></operator></expr>)<pos:position pos:line="19" pos:column="36"/></condition><then pos:line="19" pos:column="36"> <block pos:line="19" pos:column="37">{
      <expr_stmt><expr><name><name pos:line="20" pos:column="7">req<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">-&gt;<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="12">partno<pos:position pos:line="20" pos:column="18"/></name></name><operator pos:line="20" pos:column="18">++<pos:position pos:line="20" pos:column="20"/></operator></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="21" pos:column="7">logmsg<pos:position pos:line="21" pos:column="13"/></name><argument_list pos:line="21" pos:column="13">(<argument><expr><literal type="string" pos:line="21" pos:column="14">"BOUNCE part number to %ld"<pos:position pos:line="21" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="43">req<pos:position pos:line="21" pos:column="46"/></name><operator pos:line="21" pos:column="46">-&gt;<pos:position pos:line="21" pos:column="51"/></operator><name pos:line="21" pos:column="48">partno<pos:position pos:line="21" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then>
    <else pos:line="23" pos:column="5">else <block pos:line="23" pos:column="10">{
      <expr_stmt><expr><name pos:line="24" pos:column="7">prevbounce<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">=<pos:position pos:line="24" pos:column="19"/></operator> <name pos:line="24" pos:column="20">FALSE<pos:position pos:line="24" pos:column="25"/></name></expr>;<pos:position pos:line="24" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><name pos:line="25" pos:column="7">prevtestno<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <operator pos:line="25" pos:column="20">-<pos:position pos:line="25" pos:column="21"/></operator><literal type="number" pos:line="25" pos:column="21">1<pos:position pos:line="25" pos:column="22"/></literal></expr>;<pos:position pos:line="25" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><name pos:line="26" pos:column="7">prevpartno<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">=<pos:position pos:line="26" pos:column="19"/></operator> <operator pos:line="26" pos:column="20">-<pos:position pos:line="26" pos:column="21"/></operator><literal type="number" pos:line="26" pos:column="21">1<pos:position pos:line="26" pos:column="22"/></literal></expr>;<pos:position pos:line="26" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></else></if>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="30" pos:column="3">send_doc<pos:position pos:line="30" pos:column="11"/></name><argument_list pos:line="30" pos:column="11">(<argument><expr><name pos:line="30" pos:column="12">msgsock<pos:position pos:line="30" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="21">req<pos:position pos:line="30" pos:column="24"/></name></expr></argument>)<pos:position pos:line="30" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="26"/></expr_stmt>
  <if pos:line="31" pos:column="3">if<condition pos:line="31" pos:column="5">(<expr><name pos:line="31" pos:column="6">got_exit_signal<pos:position pos:line="31" pos:column="21"/></name></expr>)<pos:position pos:line="31" pos:column="22"/></condition><then pos:line="31" pos:column="22">
    <block type="pseudo"><return pos:line="32" pos:column="5">return <expr><operator pos:line="32" pos:column="12">-<pos:position pos:line="32" pos:column="13"/></operator><literal type="number" pos:line="32" pos:column="13">1<pos:position pos:line="32" pos:column="14"/></literal></expr>;<pos:position pos:line="32" pos:column="15"/></return></block></then></if>

  <if pos:line="34" pos:column="3">if<condition pos:line="34" pos:column="5">(<expr><name><name pos:line="34" pos:column="6">req<pos:position pos:line="34" pos:column="9"/></name><operator pos:line="34" pos:column="9">-&gt;<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="11">testno<pos:position pos:line="34" pos:column="17"/></name></name> <operator pos:line="34" pos:column="18">&lt;<pos:position pos:line="34" pos:column="22"/></operator> <literal type="number" pos:line="34" pos:column="20">0<pos:position pos:line="34" pos:column="21"/></literal></expr>)<pos:position pos:line="34" pos:column="22"/></condition><then pos:line="34" pos:column="22"> <block pos:line="34" pos:column="23">{
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">logmsg<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><literal type="string" pos:line="35" pos:column="12">"special request received, no persistency"<pos:position pos:line="35" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="56"/></expr_stmt>
    <return pos:line="36" pos:column="5">return <expr><operator pos:line="36" pos:column="12">-<pos:position pos:line="36" pos:column="13"/></operator><literal type="number" pos:line="36" pos:column="13">1<pos:position pos:line="36" pos:column="14"/></literal></expr>;<pos:position pos:line="36" pos:column="15"/></return>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if>
  <if pos:line="38" pos:column="3">if<condition pos:line="38" pos:column="5">(<expr><operator pos:line="38" pos:column="6">!<pos:position pos:line="38" pos:column="7"/></operator><name><name pos:line="38" pos:column="7">req<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">-&gt;<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="12">open<pos:position pos:line="38" pos:column="16"/></name></name></expr>)<pos:position pos:line="38" pos:column="17"/></condition><then pos:line="38" pos:column="17"> <block pos:line="38" pos:column="18">{
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">logmsg<pos:position pos:line="39" pos:column="11"/></name><argument_list pos:line="39" pos:column="11">(<argument><expr><literal type="string" pos:line="39" pos:column="12">"instructed to close connection after server-reply"<pos:position pos:line="39" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="65"/></expr_stmt>
    <return pos:line="40" pos:column="5">return <expr><operator pos:line="40" pos:column="12">-<pos:position pos:line="40" pos:column="13"/></operator><literal type="number" pos:line="40" pos:column="13">1<pos:position pos:line="40" pos:column="14"/></literal></expr>;<pos:position pos:line="40" pos:column="15"/></return>
  }<pos:position pos:line="41" pos:column="4"/></block></then></if>

  <if pos:line="43" pos:column="3">if<condition pos:line="43" pos:column="5">(<expr><name><name pos:line="43" pos:column="6">req<pos:position pos:line="43" pos:column="9"/></name><operator pos:line="43" pos:column="9">-&gt;<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="11">connect_request<pos:position pos:line="43" pos:column="26"/></name></name></expr>)<pos:position pos:line="43" pos:column="27"/></condition><then pos:line="43" pos:column="27"> <block pos:line="43" pos:column="28">{
    <comment type="block" pos:line="44" pos:column="5">/* a CONNECT request, setup and talk the tunnel */</comment>
    <if pos:line="45" pos:column="5">if<condition pos:line="45" pos:column="7">(<expr><operator pos:line="45" pos:column="8">!<pos:position pos:line="45" pos:column="9"/></operator><name pos:line="45" pos:column="9">is_proxy<pos:position pos:line="45" pos:column="17"/></name></expr>)<pos:position pos:line="45" pos:column="18"/></condition><then pos:line="45" pos:column="18"> <block pos:line="45" pos:column="19">{
      <expr_stmt><expr><call><name pos:line="46" pos:column="7">logmsg<pos:position pos:line="46" pos:column="13"/></name><argument_list pos:line="46" pos:column="13">(<argument><expr><literal type="string" pos:line="46" pos:column="14">"received CONNECT but isn't running as proxy!"<pos:position pos:line="46" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="62"/></expr_stmt>
      <return pos:line="47" pos:column="7">return <expr><literal type="number" pos:line="47" pos:column="14">1<pos:position pos:line="47" pos:column="15"/></literal></expr>;<pos:position pos:line="47" pos:column="16"/></return>
    }<pos:position pos:line="48" pos:column="6"/></block></then>
    <else pos:line="49" pos:column="5">else <block pos:line="49" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="50" pos:column="7">http_connect<pos:position pos:line="50" pos:column="19"/></name><argument_list pos:line="50" pos:column="19">(<argument><expr><operator pos:line="50" pos:column="20">&amp;<pos:position pos:line="50" pos:column="25"/></operator><name pos:line="50" pos:column="21">msgsock<pos:position pos:line="50" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="30">listensock<pos:position pos:line="50" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="42">connecthost<pos:position pos:line="50" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="55">req<pos:position pos:line="50" pos:column="58"/></name><operator pos:line="50" pos:column="58">-&gt;<pos:position pos:line="50" pos:column="63"/></operator><name pos:line="50" pos:column="60">connect_port<pos:position pos:line="50" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="74"/></expr_stmt>
      <return pos:line="51" pos:column="7">return <expr><operator pos:line="51" pos:column="14">-<pos:position pos:line="51" pos:column="15"/></operator><literal type="number" pos:line="51" pos:column="15">1<pos:position pos:line="51" pos:column="16"/></literal></expr>;<pos:position pos:line="51" pos:column="17"/></return>
    }<pos:position pos:line="52" pos:column="6"/></block></else></if>
  }<pos:position pos:line="53" pos:column="4"/></block></then></if>

  <if pos:line="55" pos:column="3">if<condition pos:line="55" pos:column="5">(<expr><name><name pos:line="55" pos:column="6">req<pos:position pos:line="55" pos:column="9"/></name><operator pos:line="55" pos:column="9">-&gt;<pos:position pos:line="55" pos:column="14"/></operator><name pos:line="55" pos:column="11">upgrade_request<pos:position pos:line="55" pos:column="26"/></name></name></expr>)<pos:position pos:line="55" pos:column="27"/></condition><then pos:line="55" pos:column="27"> <block pos:line="55" pos:column="28">{
    <comment type="block" pos:line="56" pos:column="5">/* an upgrade request, switch to http2 here */</comment>
    <expr_stmt><expr><call><name pos:line="57" pos:column="5">http2<pos:position pos:line="57" pos:column="10"/></name><argument_list pos:line="57" pos:column="10">(<argument><expr><name pos:line="57" pos:column="11">req<pos:position pos:line="57" pos:column="14"/></name></expr></argument>)<pos:position pos:line="57" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="16"/></expr_stmt>
    <return pos:line="58" pos:column="5">return <expr><operator pos:line="58" pos:column="12">-<pos:position pos:line="58" pos:column="13"/></operator><literal type="number" pos:line="58" pos:column="13">1<pos:position pos:line="58" pos:column="14"/></literal></expr>;<pos:position pos:line="58" pos:column="15"/></return>
  }<pos:position pos:line="59" pos:column="4"/></block></then></if>

  <comment type="block" pos:line="61" pos:column="3">/* if we got a CONNECT, loop and get another request as well! */</comment>

  <if pos:line="63" pos:column="3">if<condition pos:line="63" pos:column="5">(<expr><name><name pos:line="63" pos:column="6">req<pos:position pos:line="63" pos:column="9"/></name><operator pos:line="63" pos:column="9">-&gt;<pos:position pos:line="63" pos:column="14"/></operator><name pos:line="63" pos:column="11">open<pos:position pos:line="63" pos:column="15"/></name></name></expr>)<pos:position pos:line="63" pos:column="16"/></condition><then pos:line="63" pos:column="16"> <block pos:line="63" pos:column="17">{
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">logmsg<pos:position pos:line="64" pos:column="11"/></name><argument_list pos:line="64" pos:column="11">(<argument><expr><literal type="string" pos:line="64" pos:column="12">"=&gt; persistant connection request ended, awaits new request\n"<pos:position pos:line="64" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="76"/></expr_stmt>
    <return pos:line="65" pos:column="5">return <expr><literal type="number" pos:line="65" pos:column="12">1<pos:position pos:line="65" pos:column="13"/></literal></expr>;<pos:position pos:line="65" pos:column="14"/></return>
  }<pos:position pos:line="66" pos:column="4"/></block></then></if>

  <return pos:line="68" pos:column="3">return <expr><operator pos:line="68" pos:column="10">-<pos:position pos:line="68" pos:column="11"/></operator><literal type="number" pos:line="68" pos:column="11">1<pos:position pos:line="68" pos:column="12"/></literal></expr>;<pos:position pos:line="68" pos:column="13"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
