<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_function_6679.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">krb5_auth<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">void<pos:position pos:line="2" pos:column="15"/></name> <modifier pos:line="2" pos:column="16">*<pos:position pos:line="2" pos:column="17"/></modifier></type><name pos:line="2" pos:column="17">app_data<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="27">struct<pos:position pos:line="2" pos:column="33"/></name> <name pos:line="2" pos:column="34">connectdata<pos:position pos:line="2" pos:column="45"/></name></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">conn<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">ret<pos:position pos:line="4" pos:column="10"/></name> <init pos:line="4" pos:column="11">= <expr><name pos:line="4" pos:column="13">AUTH_OK<pos:position pos:line="4" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">char<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">p<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">host<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><name><name pos:line="6" pos:column="22">conn<pos:position pos:line="6" pos:column="26"/></name><operator pos:line="6" pos:column="26">-&gt;<pos:position pos:line="6" pos:column="31"/></operator><name pos:line="6" pos:column="28">host<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">.<pos:position pos:line="6" pos:column="33"/></operator><name pos:line="6" pos:column="33">name<pos:position pos:line="6" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="38"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">ssize_t<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">nread<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">curl_socklen_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">l<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><sizeof pos:line="8" pos:column="22">sizeof<argument_list pos:line="8" pos:column="28">(<argument><expr><name><name pos:line="8" pos:column="29">conn<pos:position pos:line="8" pos:column="33"/></name><operator pos:line="8" pos:column="33">-&gt;<pos:position pos:line="8" pos:column="38"/></operator><name pos:line="8" pos:column="35">local_addr<pos:position pos:line="8" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="46"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="8" pos:column="47"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">SessionHandle<pos:position pos:line="9" pos:column="23"/></name></name> <modifier pos:line="9" pos:column="24">*<pos:position pos:line="9" pos:column="25"/></modifier></type><name pos:line="9" pos:column="25">data<pos:position pos:line="9" pos:column="29"/></name> <init pos:line="9" pos:column="30">= <expr><name><name pos:line="9" pos:column="32">conn<pos:position pos:line="9" pos:column="36"/></name><operator pos:line="9" pos:column="36">-&gt;<pos:position pos:line="9" pos:column="41"/></operator><name pos:line="9" pos:column="38">data<pos:position pos:line="9" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="43"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">CURLcode<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">result<pos:position pos:line="10" pos:column="18"/></name></decl>;<pos:position pos:line="10" pos:column="19"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="11" pos:column="3">const<pos:position pos:line="11" pos:column="8"/></specifier> <name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">service<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><literal type="string" pos:line="11" pos:column="25">"ftp"<pos:position pos:line="11" pos:column="30"/></literal></expr></init></decl>, <modifier pos:line="11" pos:column="32">*<pos:position pos:line="11" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="11" pos:column="33">srv_host<pos:position pos:line="11" pos:column="41"/></name> <init pos:line="11" pos:column="42">= <expr><literal type="string" pos:line="11" pos:column="44">"host"<pos:position pos:line="11" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="51"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">gss_buffer_desc<pos:position pos:line="12" pos:column="18"/></name></type> <name pos:line="12" pos:column="19">input_buffer<pos:position pos:line="12" pos:column="31"/></name></decl>, <decl><type ref="prev"/><name pos:line="12" pos:column="33">output_buffer<pos:position pos:line="12" pos:column="46"/></name></decl>, <decl><type ref="prev"/><name pos:line="12" pos:column="48">_gssresp<pos:position pos:line="12" pos:column="56"/></name></decl>, <modifier pos:line="12" pos:column="58">*<pos:position pos:line="12" pos:column="59"/></modifier><decl><type ref="prev"/><name pos:line="12" pos:column="59">gssresp<pos:position pos:line="12" pos:column="66"/></name></decl>;<pos:position pos:line="12" pos:column="67"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">OM_uint32<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">maj<pos:position pos:line="13" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="13" pos:column="18">min<pos:position pos:line="13" pos:column="21"/></name></decl>;<pos:position pos:line="13" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">gss_name_t<pos:position pos:line="14" pos:column="13"/></name></type> <name pos:line="14" pos:column="14">gssname<pos:position pos:line="14" pos:column="21"/></name></decl>;<pos:position pos:line="14" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">gss_ctx_id_t<pos:position pos:line="15" pos:column="15"/></name> <modifier pos:line="15" pos:column="16">*<pos:position pos:line="15" pos:column="17"/></modifier></type><name pos:line="15" pos:column="17">context<pos:position pos:line="15" pos:column="24"/></name> <init pos:line="15" pos:column="25">= <expr><name pos:line="15" pos:column="27">app_data<pos:position pos:line="15" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="16" pos:column="3">struct<pos:position pos:line="16" pos:column="9"/></name> <name pos:line="16" pos:column="10">gss_channel_bindings_struct<pos:position pos:line="16" pos:column="37"/></name></name></type> <name pos:line="16" pos:column="38">chan<pos:position pos:line="16" pos:column="42"/></name></decl>;<pos:position pos:line="16" pos:column="43"/></decl_stmt>

  <if pos:line="18" pos:column="3">if<condition pos:line="18" pos:column="5">(<expr><call><name pos:line="18" pos:column="6">getsockname<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">(<argument><expr><name><name pos:line="18" pos:column="18">conn<pos:position pos:line="18" pos:column="22"/></name><operator pos:line="18" pos:column="22">-&gt;<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="24">sock<pos:position pos:line="18" pos:column="28"/></name><index pos:line="18" pos:column="28">[<expr><name pos:line="18" pos:column="29">FIRSTSOCKET<pos:position pos:line="18" pos:column="40"/></name></expr>]<pos:position pos:line="18" pos:column="41"/></index></name></expr></argument>,
                 <argument><expr><operator pos:line="19" pos:column="18">(<pos:position pos:line="19" pos:column="19"/></operator>struct <name pos:line="19" pos:column="26">sockaddr<pos:position pos:line="19" pos:column="34"/></name> <operator pos:line="19" pos:column="35">*<pos:position pos:line="19" pos:column="36"/></operator><operator pos:line="19" pos:column="36">)<pos:position pos:line="19" pos:column="37"/></operator><name pos:line="19" pos:column="37">LOCAL_ADDR<pos:position pos:line="19" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="49">&amp;<pos:position pos:line="19" pos:column="54"/></operator><name pos:line="19" pos:column="50">l<pos:position pos:line="19" pos:column="51"/></name></expr></argument>)<pos:position pos:line="19" pos:column="52"/></argument_list></call> <operator pos:line="19" pos:column="53">&lt;<pos:position pos:line="19" pos:column="57"/></operator> <literal type="number" pos:line="19" pos:column="55">0<pos:position pos:line="19" pos:column="56"/></literal></expr>)<pos:position pos:line="19" pos:column="57"/></condition><then pos:line="19" pos:column="57">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="5">perror<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><literal type="string" pos:line="20" pos:column="12">"getsockname()"<pos:position pos:line="20" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name><name pos:line="22" pos:column="3">chan<pos:position pos:line="22" pos:column="7"/></name><operator pos:line="22" pos:column="7">.<pos:position pos:line="22" pos:column="8"/></operator><name pos:line="22" pos:column="8">initiator_addrtype<pos:position pos:line="22" pos:column="26"/></name></name> <operator pos:line="22" pos:column="27">=<pos:position pos:line="22" pos:column="28"/></operator> <name pos:line="22" pos:column="29">GSS_C_AF_INET<pos:position pos:line="22" pos:column="42"/></name></expr>;<pos:position pos:line="22" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="23" pos:column="3">chan<pos:position pos:line="23" pos:column="7"/></name><operator pos:line="23" pos:column="7">.<pos:position pos:line="23" pos:column="8"/></operator><name pos:line="23" pos:column="8">initiator_address<pos:position pos:line="23" pos:column="25"/></name><operator pos:line="23" pos:column="25">.<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="26">length<pos:position pos:line="23" pos:column="32"/></name></name> <operator pos:line="23" pos:column="33">=<pos:position pos:line="23" pos:column="34"/></operator> <name pos:line="23" pos:column="35">l<pos:position pos:line="23" pos:column="36"/></name> <operator pos:line="23" pos:column="37">-<pos:position pos:line="23" pos:column="38"/></operator> <literal type="number" pos:line="23" pos:column="39">4<pos:position pos:line="23" pos:column="40"/></literal></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="24" pos:column="3">chan<pos:position pos:line="24" pos:column="7"/></name><operator pos:line="24" pos:column="7">.<pos:position pos:line="24" pos:column="8"/></operator><name pos:line="24" pos:column="8">initiator_address<pos:position pos:line="24" pos:column="25"/></name><operator pos:line="24" pos:column="25">.<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="26">value<pos:position pos:line="24" pos:column="31"/></name></name> <operator pos:line="24" pos:column="32">=<pos:position pos:line="24" pos:column="33"/></operator>
    <operator pos:line="25" pos:column="5">&amp;<pos:position pos:line="25" pos:column="10"/></operator><operator pos:line="25" pos:column="6">(<pos:position pos:line="25" pos:column="7"/></operator><operator pos:line="25" pos:column="7">(<pos:position pos:line="25" pos:column="8"/></operator>struct <name pos:line="25" pos:column="15">sockaddr_in<pos:position pos:line="25" pos:column="26"/></name> <operator pos:line="25" pos:column="27">*<pos:position pos:line="25" pos:column="28"/></operator><operator pos:line="25" pos:column="28">)<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="29">LOCAL_ADDR<pos:position pos:line="25" pos:column="39"/></name><operator pos:line="25" pos:column="39">)<pos:position pos:line="25" pos:column="40"/></operator><operator pos:line="25" pos:column="40">-&gt;<pos:position pos:line="25" pos:column="45"/></operator><name><name pos:line="25" pos:column="42">sin_addr<pos:position pos:line="25" pos:column="50"/></name><operator pos:line="25" pos:column="50">.<pos:position pos:line="25" pos:column="51"/></operator><name pos:line="25" pos:column="51">s_addr<pos:position pos:line="25" pos:column="57"/></name></name></expr>;<pos:position pos:line="25" pos:column="58"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="26" pos:column="3">chan<pos:position pos:line="26" pos:column="7"/></name><operator pos:line="26" pos:column="7">.<pos:position pos:line="26" pos:column="8"/></operator><name pos:line="26" pos:column="8">acceptor_addrtype<pos:position pos:line="26" pos:column="25"/></name></name> <operator pos:line="26" pos:column="26">=<pos:position pos:line="26" pos:column="27"/></operator> <name pos:line="26" pos:column="28">GSS_C_AF_INET<pos:position pos:line="26" pos:column="41"/></name></expr>;<pos:position pos:line="26" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="27" pos:column="3">chan<pos:position pos:line="27" pos:column="7"/></name><operator pos:line="27" pos:column="7">.<pos:position pos:line="27" pos:column="8"/></operator><name pos:line="27" pos:column="8">acceptor_address<pos:position pos:line="27" pos:column="24"/></name><operator pos:line="27" pos:column="24">.<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="25">length<pos:position pos:line="27" pos:column="31"/></name></name> <operator pos:line="27" pos:column="32">=<pos:position pos:line="27" pos:column="33"/></operator> <name pos:line="27" pos:column="34">l<pos:position pos:line="27" pos:column="35"/></name> <operator pos:line="27" pos:column="36">-<pos:position pos:line="27" pos:column="37"/></operator> <literal type="number" pos:line="27" pos:column="38">4<pos:position pos:line="27" pos:column="39"/></literal></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="28" pos:column="3">chan<pos:position pos:line="28" pos:column="7"/></name><operator pos:line="28" pos:column="7">.<pos:position pos:line="28" pos:column="8"/></operator><name pos:line="28" pos:column="8">acceptor_address<pos:position pos:line="28" pos:column="24"/></name><operator pos:line="28" pos:column="24">.<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="25">value<pos:position pos:line="28" pos:column="30"/></name></name> <operator pos:line="28" pos:column="31">=<pos:position pos:line="28" pos:column="32"/></operator>
    <operator pos:line="29" pos:column="5">&amp;<pos:position pos:line="29" pos:column="10"/></operator><operator pos:line="29" pos:column="6">(<pos:position pos:line="29" pos:column="7"/></operator><operator pos:line="29" pos:column="7">(<pos:position pos:line="29" pos:column="8"/></operator>struct <name pos:line="29" pos:column="15">sockaddr_in<pos:position pos:line="29" pos:column="26"/></name> <operator pos:line="29" pos:column="27">*<pos:position pos:line="29" pos:column="28"/></operator><operator pos:line="29" pos:column="28">)<pos:position pos:line="29" pos:column="29"/></operator><name pos:line="29" pos:column="29">REMOTE_ADDR<pos:position pos:line="29" pos:column="40"/></name><operator pos:line="29" pos:column="40">)<pos:position pos:line="29" pos:column="41"/></operator><operator pos:line="29" pos:column="41">-&gt;<pos:position pos:line="29" pos:column="46"/></operator><name><name pos:line="29" pos:column="43">sin_addr<pos:position pos:line="29" pos:column="51"/></name><operator pos:line="29" pos:column="51">.<pos:position pos:line="29" pos:column="52"/></operator><name pos:line="29" pos:column="52">s_addr<pos:position pos:line="29" pos:column="58"/></name></name></expr>;<pos:position pos:line="29" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="30" pos:column="3">chan<pos:position pos:line="30" pos:column="7"/></name><operator pos:line="30" pos:column="7">.<pos:position pos:line="30" pos:column="8"/></operator><name pos:line="30" pos:column="8">application_data<pos:position pos:line="30" pos:column="24"/></name><operator pos:line="30" pos:column="24">.<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="25">length<pos:position pos:line="30" pos:column="31"/></name></name> <operator pos:line="30" pos:column="32">=<pos:position pos:line="30" pos:column="33"/></operator> <literal type="number" pos:line="30" pos:column="34">0<pos:position pos:line="30" pos:column="35"/></literal></expr>;<pos:position pos:line="30" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="31" pos:column="3">chan<pos:position pos:line="31" pos:column="7"/></name><operator pos:line="31" pos:column="7">.<pos:position pos:line="31" pos:column="8"/></operator><name pos:line="31" pos:column="8">application_data<pos:position pos:line="31" pos:column="24"/></name><operator pos:line="31" pos:column="24">.<pos:position pos:line="31" pos:column="25"/></operator><name pos:line="31" pos:column="25">value<pos:position pos:line="31" pos:column="30"/></name></name> <operator pos:line="31" pos:column="31">=<pos:position pos:line="31" pos:column="32"/></operator> <name pos:line="31" pos:column="33">NULL<pos:position pos:line="31" pos:column="37"/></name></expr>;<pos:position pos:line="31" pos:column="38"/></expr_stmt>

  <comment type="block" pos:line="33" pos:column="3">/* this loop will execute twice (once for service, once for host) */</comment>
  <while pos:line="34" pos:column="3">while<condition pos:line="34" pos:column="8">(<expr><literal type="number" pos:line="34" pos:column="9">1<pos:position pos:line="34" pos:column="10"/></literal></expr>)<pos:position pos:line="34" pos:column="11"/></condition> <block pos:line="34" pos:column="12">{
    <comment type="block" pos:line="35" pos:column="5">/* this really shouldn't be repeated here, but can't help it */</comment>
    <if pos:line="36" pos:column="5">if<condition pos:line="36" pos:column="7">(<expr><name pos:line="36" pos:column="8">service<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">==<pos:position pos:line="36" pos:column="18"/></operator> <name pos:line="36" pos:column="19">srv_host<pos:position pos:line="36" pos:column="27"/></name></expr>)<pos:position pos:line="36" pos:column="28"/></condition><then pos:line="36" pos:column="28"> <block pos:line="36" pos:column="29">{
      <expr_stmt><expr><name pos:line="37" pos:column="7">result<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <call><name pos:line="37" pos:column="16">Curl_ftpsendf<pos:position pos:line="37" pos:column="29"/></name><argument_list pos:line="37" pos:column="29">(<argument><expr><name pos:line="37" pos:column="30">conn<pos:position pos:line="37" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="36">"AUTH GSSAPI"<pos:position pos:line="37" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="51"/></expr_stmt>

      <if pos:line="39" pos:column="7">if<condition pos:line="39" pos:column="9">(<expr><name pos:line="39" pos:column="10">result<pos:position pos:line="39" pos:column="16"/></name></expr>)<pos:position pos:line="39" pos:column="17"/></condition><then pos:line="39" pos:column="17">
        <block type="pseudo"><return pos:line="40" pos:column="9">return <expr><operator pos:line="40" pos:column="16">-<pos:position pos:line="40" pos:column="17"/></operator><literal type="number" pos:line="40" pos:column="17">2<pos:position pos:line="40" pos:column="18"/></literal></expr>;<pos:position pos:line="40" pos:column="19"/></return></block></then></if>
      <if pos:line="41" pos:column="7">if<condition pos:line="41" pos:column="9">(<expr><call><name pos:line="41" pos:column="10">Curl_GetFTPResponse<pos:position pos:line="41" pos:column="29"/></name><argument_list pos:line="41" pos:column="29">(<argument><expr><operator pos:line="41" pos:column="30">&amp;<pos:position pos:line="41" pos:column="35"/></operator><name pos:line="41" pos:column="31">nread<pos:position pos:line="41" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="38">conn<pos:position pos:line="41" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="44">NULL<pos:position pos:line="41" pos:column="48"/></name></expr></argument>)<pos:position pos:line="41" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="50"/></condition><then pos:line="41" pos:column="50">
        <block type="pseudo"><return pos:line="42" pos:column="9">return <expr><operator pos:line="42" pos:column="16">-<pos:position pos:line="42" pos:column="17"/></operator><literal type="number" pos:line="42" pos:column="17">1<pos:position pos:line="42" pos:column="18"/></literal></expr>;<pos:position pos:line="42" pos:column="19"/></return></block></then></if>

      <if pos:line="44" pos:column="7">if<condition pos:line="44" pos:column="9">(<expr><name><name pos:line="44" pos:column="10">data<pos:position pos:line="44" pos:column="14"/></name><operator pos:line="44" pos:column="14">-&gt;<pos:position pos:line="44" pos:column="19"/></operator><name pos:line="44" pos:column="16">state<pos:position pos:line="44" pos:column="21"/></name><operator pos:line="44" pos:column="21">.<pos:position pos:line="44" pos:column="22"/></operator><name pos:line="44" pos:column="22">buffer<pos:position pos:line="44" pos:column="28"/></name><index pos:line="44" pos:column="28">[<expr><literal type="number" pos:line="44" pos:column="29">0<pos:position pos:line="44" pos:column="30"/></literal></expr>]<pos:position pos:line="44" pos:column="31"/></index></name> <operator pos:line="44" pos:column="32">!=<pos:position pos:line="44" pos:column="34"/></operator> <literal type="char" pos:line="44" pos:column="35">'3'<pos:position pos:line="44" pos:column="38"/></literal></expr>)<pos:position pos:line="44" pos:column="39"/></condition><then pos:line="44" pos:column="39">
        <block type="pseudo"><return pos:line="45" pos:column="9">return <expr><operator pos:line="45" pos:column="16">-<pos:position pos:line="45" pos:column="17"/></operator><literal type="number" pos:line="45" pos:column="17">1<pos:position pos:line="45" pos:column="18"/></literal></expr>;<pos:position pos:line="45" pos:column="19"/></return></block></then></if>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="48" pos:column="5">input_buffer<pos:position pos:line="48" pos:column="17"/></name><operator pos:line="48" pos:column="17">.<pos:position pos:line="48" pos:column="18"/></operator><name pos:line="48" pos:column="18">value<pos:position pos:line="48" pos:column="23"/></name></name> <operator pos:line="48" pos:column="24">=<pos:position pos:line="48" pos:column="25"/></operator> <name><name pos:line="48" pos:column="26">data<pos:position pos:line="48" pos:column="30"/></name><operator pos:line="48" pos:column="30">-&gt;<pos:position pos:line="48" pos:column="35"/></operator><name pos:line="48" pos:column="32">state<pos:position pos:line="48" pos:column="37"/></name><operator pos:line="48" pos:column="37">.<pos:position pos:line="48" pos:column="38"/></operator><name pos:line="48" pos:column="38">buffer<pos:position pos:line="48" pos:column="44"/></name></name></expr>;<pos:position pos:line="48" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="49" pos:column="5">input_buffer<pos:position pos:line="49" pos:column="17"/></name><operator pos:line="49" pos:column="17">.<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="18">length<pos:position pos:line="49" pos:column="24"/></name></name> <operator pos:line="49" pos:column="25">=<pos:position pos:line="49" pos:column="26"/></operator> <call><name pos:line="49" pos:column="27">snprintf<pos:position pos:line="49" pos:column="35"/></name><argument_list pos:line="49" pos:column="35">(<argument><expr><name><name pos:line="49" pos:column="36">input_buffer<pos:position pos:line="49" pos:column="48"/></name><operator pos:line="49" pos:column="48">.<pos:position pos:line="49" pos:column="49"/></operator><name pos:line="49" pos:column="49">value<pos:position pos:line="49" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="56">BUFSIZE<pos:position pos:line="49" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="65">"%s@%s"<pos:position pos:line="49" pos:column="72"/></literal></expr></argument>,
                                   <argument><expr><name pos:line="50" pos:column="36">service<pos:position pos:line="50" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="45">host<pos:position pos:line="50" pos:column="49"/></name></expr></argument>)<pos:position pos:line="50" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name pos:line="51" pos:column="5">maj<pos:position pos:line="51" pos:column="8"/></name> <operator pos:line="51" pos:column="9">=<pos:position pos:line="51" pos:column="10"/></operator> <call><name pos:line="51" pos:column="11">gss_import_name<pos:position pos:line="51" pos:column="26"/></name><argument_list pos:line="51" pos:column="26">(<argument><expr><operator pos:line="51" pos:column="27">&amp;<pos:position pos:line="51" pos:column="32"/></operator><name pos:line="51" pos:column="28">min<pos:position pos:line="51" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="33">&amp;<pos:position pos:line="51" pos:column="38"/></operator><name pos:line="51" pos:column="34">input_buffer<pos:position pos:line="51" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="48">GSS_C_NT_HOSTBASED_SERVICE<pos:position pos:line="51" pos:column="74"/></name></expr></argument>,
                          <argument><expr><operator pos:line="52" pos:column="27">&amp;<pos:position pos:line="52" pos:column="32"/></operator><name pos:line="52" pos:column="28">gssname<pos:position pos:line="52" pos:column="35"/></name></expr></argument>)<pos:position pos:line="52" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="37"/></expr_stmt>
    <if pos:line="53" pos:column="5">if<condition pos:line="53" pos:column="7">(<expr><name pos:line="53" pos:column="8">maj<pos:position pos:line="53" pos:column="11"/></name> <operator pos:line="53" pos:column="12">!=<pos:position pos:line="53" pos:column="14"/></operator> <name pos:line="53" pos:column="15">GSS_S_COMPLETE<pos:position pos:line="53" pos:column="29"/></name></expr>)<pos:position pos:line="53" pos:column="30"/></condition><then pos:line="53" pos:column="30"> <block pos:line="53" pos:column="31">{
      <expr_stmt><expr><call><name pos:line="54" pos:column="7">gss_release_name<pos:position pos:line="54" pos:column="23"/></name><argument_list pos:line="54" pos:column="23">(<argument><expr><operator pos:line="54" pos:column="24">&amp;<pos:position pos:line="54" pos:column="29"/></operator><name pos:line="54" pos:column="25">min<pos:position pos:line="54" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="30">&amp;<pos:position pos:line="54" pos:column="35"/></operator><name pos:line="54" pos:column="31">gssname<pos:position pos:line="54" pos:column="38"/></name></expr></argument>)<pos:position pos:line="54" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="40"/></expr_stmt>
      <if pos:line="55" pos:column="7">if<condition pos:line="55" pos:column="9">(<expr><name pos:line="55" pos:column="10">service<pos:position pos:line="55" pos:column="17"/></name> <operator pos:line="55" pos:column="18">==<pos:position pos:line="55" pos:column="20"/></operator> <name pos:line="55" pos:column="21">srv_host<pos:position pos:line="55" pos:column="29"/></name></expr>)<pos:position pos:line="55" pos:column="30"/></condition><then pos:line="55" pos:column="30"> <block pos:line="55" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">Curl_failf<pos:position pos:line="56" pos:column="19"/></name><argument_list pos:line="56" pos:column="19">(<argument><expr><name pos:line="56" pos:column="20">data<pos:position pos:line="56" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="26">"Error importing service name %s"<pos:position pos:line="56" pos:column="59"/></literal></expr></argument>,
                   <argument><expr><name><name pos:line="57" pos:column="20">input_buffer<pos:position pos:line="57" pos:column="32"/></name><operator pos:line="57" pos:column="32">.<pos:position pos:line="57" pos:column="33"/></operator><name pos:line="57" pos:column="33">value<pos:position pos:line="57" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="40"/></expr_stmt>
        <return pos:line="58" pos:column="9">return <expr><name pos:line="58" pos:column="16">AUTH_ERROR<pos:position pos:line="58" pos:column="26"/></name></expr>;<pos:position pos:line="58" pos:column="27"/></return>
      }<pos:position pos:line="59" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="60" pos:column="7">service<pos:position pos:line="60" pos:column="14"/></name> <operator pos:line="60" pos:column="15">=<pos:position pos:line="60" pos:column="16"/></operator> <name pos:line="60" pos:column="17">srv_host<pos:position pos:line="60" pos:column="25"/></name></expr>;<pos:position pos:line="60" pos:column="26"/></expr_stmt>
      <continue pos:line="61" pos:column="7">continue;<pos:position pos:line="61" pos:column="16"/></continue>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="63" pos:column="5">/* We pass NULL as |output_name_type| to avoid a leak. */</comment>
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">gss_display_name<pos:position pos:line="64" pos:column="21"/></name><argument_list pos:line="64" pos:column="21">(<argument><expr><operator pos:line="64" pos:column="22">&amp;<pos:position pos:line="64" pos:column="27"/></operator><name pos:line="64" pos:column="23">min<pos:position pos:line="64" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="28">gssname<pos:position pos:line="64" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="37">&amp;<pos:position pos:line="64" pos:column="42"/></operator><name pos:line="64" pos:column="38">output_buffer<pos:position pos:line="64" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="53">NULL<pos:position pos:line="64" pos:column="57"/></name></expr></argument>)<pos:position pos:line="64" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">Curl_infof<pos:position pos:line="65" pos:column="15"/></name><argument_list pos:line="65" pos:column="15">(<argument><expr><name pos:line="65" pos:column="16">data<pos:position pos:line="65" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="22">"Trying against %s\n"<pos:position pos:line="65" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="45">output_buffer<pos:position pos:line="65" pos:column="58"/></name><operator pos:line="65" pos:column="58">.<pos:position pos:line="65" pos:column="59"/></operator><name pos:line="65" pos:column="59">value<pos:position pos:line="65" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><name pos:line="66" pos:column="5">gssresp<pos:position pos:line="66" pos:column="12"/></name> <operator pos:line="66" pos:column="13">=<pos:position pos:line="66" pos:column="14"/></operator> <name pos:line="66" pos:column="15">GSS_C_NO_BUFFER<pos:position pos:line="66" pos:column="30"/></name></expr>;<pos:position pos:line="66" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="67" pos:column="5">*<pos:position pos:line="67" pos:column="6"/></operator><name pos:line="67" pos:column="6">context<pos:position pos:line="67" pos:column="13"/></name> <operator pos:line="67" pos:column="14">=<pos:position pos:line="67" pos:column="15"/></operator> <name pos:line="67" pos:column="16">GSS_C_NO_CONTEXT<pos:position pos:line="67" pos:column="32"/></name></expr>;<pos:position pos:line="67" pos:column="33"/></expr_stmt>

    <do pos:line="69" pos:column="5">do <block pos:line="69" pos:column="8">{
      <comment type="block" pos:line="70" pos:column="7">/* Release the buffer at each iteration to avoid leaking: the first time
         we are releasing the memory from gss_display_name. The last item is
         taken care by a final gss_release_buffer. */</comment>
      <expr_stmt><expr><call><name pos:line="73" pos:column="7">gss_release_buffer<pos:position pos:line="73" pos:column="25"/></name><argument_list pos:line="73" pos:column="25">(<argument><expr><operator pos:line="73" pos:column="26">&amp;<pos:position pos:line="73" pos:column="31"/></operator><name pos:line="73" pos:column="27">min<pos:position pos:line="73" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="32">&amp;<pos:position pos:line="73" pos:column="37"/></operator><name pos:line="73" pos:column="33">output_buffer<pos:position pos:line="73" pos:column="46"/></name></expr></argument>)<pos:position pos:line="73" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><name pos:line="74" pos:column="7">ret<pos:position pos:line="74" pos:column="10"/></name> <operator pos:line="74" pos:column="11">=<pos:position pos:line="74" pos:column="12"/></operator> <name pos:line="74" pos:column="13">AUTH_OK<pos:position pos:line="74" pos:column="20"/></name></expr>;<pos:position pos:line="74" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><name pos:line="75" pos:column="7">maj<pos:position pos:line="75" pos:column="10"/></name> <operator pos:line="75" pos:column="11">=<pos:position pos:line="75" pos:column="12"/></operator> <call><name pos:line="75" pos:column="13">gss_init_sec_context<pos:position pos:line="75" pos:column="33"/></name><argument_list pos:line="75" pos:column="33">(<argument><expr><operator pos:line="75" pos:column="34">&amp;<pos:position pos:line="75" pos:column="39"/></operator><name pos:line="75" pos:column="35">min<pos:position pos:line="75" pos:column="38"/></name></expr></argument>,
                                 <argument><expr><name pos:line="76" pos:column="34">GSS_C_NO_CREDENTIAL<pos:position pos:line="76" pos:column="53"/></name></expr></argument>,
                                 <argument><expr><name pos:line="77" pos:column="34">context<pos:position pos:line="77" pos:column="41"/></name></expr></argument>,
                                 <argument><expr><name pos:line="78" pos:column="34">gssname<pos:position pos:line="78" pos:column="41"/></name></expr></argument>,
                                 <argument><expr><name pos:line="79" pos:column="34">GSS_C_NO_OID<pos:position pos:line="79" pos:column="46"/></name></expr></argument>,
                                 <argument><expr><name pos:line="80" pos:column="34">GSS_C_MUTUAL_FLAG<pos:position pos:line="80" pos:column="51"/></name> <operator pos:line="80" pos:column="52">|<pos:position pos:line="80" pos:column="53"/></operator> <name pos:line="80" pos:column="54">GSS_C_REPLAY_FLAG<pos:position pos:line="80" pos:column="71"/></name></expr></argument>,
                                 <argument><expr><literal type="number" pos:line="81" pos:column="34">0<pos:position pos:line="81" pos:column="35"/></literal></expr></argument>,
                                 <argument><expr><operator pos:line="82" pos:column="34">&amp;<pos:position pos:line="82" pos:column="39"/></operator><name pos:line="82" pos:column="35">chan<pos:position pos:line="82" pos:column="39"/></name></expr></argument>,
                                 <argument><expr><name pos:line="83" pos:column="34">gssresp<pos:position pos:line="83" pos:column="41"/></name></expr></argument>,
                                 <argument><expr><name pos:line="84" pos:column="34">NULL<pos:position pos:line="84" pos:column="38"/></name></expr></argument>,
                                 <argument><expr><operator pos:line="85" pos:column="34">&amp;<pos:position pos:line="85" pos:column="39"/></operator><name pos:line="85" pos:column="35">output_buffer<pos:position pos:line="85" pos:column="48"/></name></expr></argument>,
                                 <argument><expr><name pos:line="86" pos:column="34">NULL<pos:position pos:line="86" pos:column="38"/></name></expr></argument>,
                                 <argument><expr><name pos:line="87" pos:column="34">NULL<pos:position pos:line="87" pos:column="38"/></name></expr></argument>)<pos:position pos:line="87" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="40"/></expr_stmt>

      <if pos:line="89" pos:column="7">if<condition pos:line="89" pos:column="9">(<expr><name pos:line="89" pos:column="10">gssresp<pos:position pos:line="89" pos:column="17"/></name></expr>)<pos:position pos:line="89" pos:column="18"/></condition><then pos:line="89" pos:column="18"> <block pos:line="89" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="90" pos:column="9">free<pos:position pos:line="90" pos:column="13"/></name><argument_list pos:line="90" pos:column="13">(<argument><expr><name><name pos:line="90" pos:column="14">_gssresp<pos:position pos:line="90" pos:column="22"/></name><operator pos:line="90" pos:column="22">.<pos:position pos:line="90" pos:column="23"/></operator><name pos:line="90" pos:column="23">value<pos:position pos:line="90" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="90" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name pos:line="91" pos:column="9">gssresp<pos:position pos:line="91" pos:column="16"/></name> <operator pos:line="91" pos:column="17">=<pos:position pos:line="91" pos:column="18"/></operator> <name pos:line="91" pos:column="19">NULL<pos:position pos:line="91" pos:column="23"/></name></expr>;<pos:position pos:line="91" pos:column="24"/></expr_stmt>
      }<pos:position pos:line="92" pos:column="8"/></block></then></if>

      <if pos:line="94" pos:column="7">if<condition pos:line="94" pos:column="9">(<expr><call><name pos:line="94" pos:column="10">GSS_ERROR<pos:position pos:line="94" pos:column="19"/></name><argument_list pos:line="94" pos:column="19">(<argument><expr><name pos:line="94" pos:column="20">maj<pos:position pos:line="94" pos:column="23"/></name></expr></argument>)<pos:position pos:line="94" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="94" pos:column="25"/></condition><then pos:line="94" pos:column="25"> <block pos:line="94" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="95" pos:column="9">Curl_infof<pos:position pos:line="95" pos:column="19"/></name><argument_list pos:line="95" pos:column="19">(<argument><expr><name pos:line="95" pos:column="20">data<pos:position pos:line="95" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="26">"Error creating security context\n"<pos:position pos:line="95" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><name pos:line="96" pos:column="9">ret<pos:position pos:line="96" pos:column="12"/></name> <operator pos:line="96" pos:column="13">=<pos:position pos:line="96" pos:column="14"/></operator> <name pos:line="96" pos:column="15">AUTH_ERROR<pos:position pos:line="96" pos:column="25"/></name></expr>;<pos:position pos:line="96" pos:column="26"/></expr_stmt>
        <break pos:line="97" pos:column="9">break;<pos:position pos:line="97" pos:column="15"/></break>
      }<pos:position pos:line="98" pos:column="8"/></block></then></if>

      <if pos:line="100" pos:column="7">if<condition pos:line="100" pos:column="9">(<expr><name><name pos:line="100" pos:column="10">output_buffer<pos:position pos:line="100" pos:column="23"/></name><operator pos:line="100" pos:column="23">.<pos:position pos:line="100" pos:column="24"/></operator><name pos:line="100" pos:column="24">length<pos:position pos:line="100" pos:column="30"/></name></name> <operator pos:line="100" pos:column="31">!=<pos:position pos:line="100" pos:column="33"/></operator> <literal type="number" pos:line="100" pos:column="34">0<pos:position pos:line="100" pos:column="35"/></literal></expr>)<pos:position pos:line="100" pos:column="36"/></condition><then pos:line="100" pos:column="36"> <block pos:line="100" pos:column="37">{
        <if pos:line="101" pos:column="9">if<condition pos:line="101" pos:column="11">(<expr><call><name pos:line="101" pos:column="12">Curl_base64_encode<pos:position pos:line="101" pos:column="30"/></name><argument_list pos:line="101" pos:column="30">(<argument><expr><name pos:line="101" pos:column="31">data<pos:position pos:line="101" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="101" pos:column="37">(<pos:position pos:line="101" pos:column="38"/></operator><name pos:line="101" pos:column="38">char<pos:position pos:line="101" pos:column="42"/></name> <operator pos:line="101" pos:column="43">*<pos:position pos:line="101" pos:column="44"/></operator><operator pos:line="101" pos:column="44">)<pos:position pos:line="101" pos:column="45"/></operator><name><name pos:line="101" pos:column="45">output_buffer<pos:position pos:line="101" pos:column="58"/></name><operator pos:line="101" pos:column="58">.<pos:position pos:line="101" pos:column="59"/></operator><name pos:line="101" pos:column="59">value<pos:position pos:line="101" pos:column="64"/></name></name></expr></argument>,
                              <argument><expr><name><name pos:line="102" pos:column="31">output_buffer<pos:position pos:line="102" pos:column="44"/></name><operator pos:line="102" pos:column="44">.<pos:position pos:line="102" pos:column="45"/></operator><name pos:line="102" pos:column="45">length<pos:position pos:line="102" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="102" pos:column="53">&amp;<pos:position pos:line="102" pos:column="58"/></operator><name pos:line="102" pos:column="54">p<pos:position pos:line="102" pos:column="55"/></name></expr></argument>)<pos:position pos:line="102" pos:column="56"/></argument_list></call> <operator pos:line="102" pos:column="57">&lt;<pos:position pos:line="102" pos:column="61"/></operator> <literal type="number" pos:line="102" pos:column="59">1<pos:position pos:line="102" pos:column="60"/></literal></expr>)<pos:position pos:line="102" pos:column="61"/></condition><then pos:line="102" pos:column="61"> <block pos:line="102" pos:column="62">{
          <expr_stmt><expr><call><name pos:line="103" pos:column="11">Curl_infof<pos:position pos:line="103" pos:column="21"/></name><argument_list pos:line="103" pos:column="21">(<argument><expr><name pos:line="103" pos:column="22">data<pos:position pos:line="103" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="103" pos:column="28">"Out of memory base64-encoding\n"<pos:position pos:line="103" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="63"/></expr_stmt>
          <expr_stmt><expr><name pos:line="104" pos:column="11">ret<pos:position pos:line="104" pos:column="14"/></name> <operator pos:line="104" pos:column="15">=<pos:position pos:line="104" pos:column="16"/></operator> <name pos:line="104" pos:column="17">AUTH_CONTINUE<pos:position pos:line="104" pos:column="30"/></name></expr>;<pos:position pos:line="104" pos:column="31"/></expr_stmt>
          <break pos:line="105" pos:column="11">break;<pos:position pos:line="105" pos:column="17"/></break>
        }<pos:position pos:line="106" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="108" pos:column="9">result<pos:position pos:line="108" pos:column="15"/></name> <operator pos:line="108" pos:column="16">=<pos:position pos:line="108" pos:column="17"/></operator> <call><name pos:line="108" pos:column="18">Curl_ftpsendf<pos:position pos:line="108" pos:column="31"/></name><argument_list pos:line="108" pos:column="31">(<argument><expr><name pos:line="108" pos:column="32">conn<pos:position pos:line="108" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="38">"ADAT %s"<pos:position pos:line="108" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="108" pos:column="49">p<pos:position pos:line="108" pos:column="50"/></name></expr></argument>)<pos:position pos:line="108" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="52"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="110" pos:column="9">free<pos:position pos:line="110" pos:column="13"/></name><argument_list pos:line="110" pos:column="13">(<argument><expr><name pos:line="110" pos:column="14">p<pos:position pos:line="110" pos:column="15"/></name></expr></argument>)<pos:position pos:line="110" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="17"/></expr_stmt>

        <if pos:line="112" pos:column="9">if<condition pos:line="112" pos:column="11">(<expr><name pos:line="112" pos:column="12">result<pos:position pos:line="112" pos:column="18"/></name></expr>)<pos:position pos:line="112" pos:column="19"/></condition><then pos:line="112" pos:column="19"> <block pos:line="112" pos:column="20">{
          <expr_stmt><expr><name pos:line="113" pos:column="11">ret<pos:position pos:line="113" pos:column="14"/></name> <operator pos:line="113" pos:column="15">=<pos:position pos:line="113" pos:column="16"/></operator> <operator pos:line="113" pos:column="17">-<pos:position pos:line="113" pos:column="18"/></operator><literal type="number" pos:line="113" pos:column="18">2<pos:position pos:line="113" pos:column="19"/></literal></expr>;<pos:position pos:line="113" pos:column="20"/></expr_stmt>
          <break pos:line="114" pos:column="11">break;<pos:position pos:line="114" pos:column="17"/></break>
        }<pos:position pos:line="115" pos:column="10"/></block></then></if>

        <if pos:line="117" pos:column="9">if<condition pos:line="117" pos:column="11">(<expr><call><name pos:line="117" pos:column="12">Curl_GetFTPResponse<pos:position pos:line="117" pos:column="31"/></name><argument_list pos:line="117" pos:column="31">(<argument><expr><operator pos:line="117" pos:column="32">&amp;<pos:position pos:line="117" pos:column="37"/></operator><name pos:line="117" pos:column="33">nread<pos:position pos:line="117" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="40">conn<pos:position pos:line="117" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="46">NULL<pos:position pos:line="117" pos:column="50"/></name></expr></argument>)<pos:position pos:line="117" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="117" pos:column="52"/></condition><then pos:line="117" pos:column="52"> <block pos:line="117" pos:column="53">{
          <expr_stmt><expr><name pos:line="118" pos:column="11">ret<pos:position pos:line="118" pos:column="14"/></name> <operator pos:line="118" pos:column="15">=<pos:position pos:line="118" pos:column="16"/></operator> <operator pos:line="118" pos:column="17">-<pos:position pos:line="118" pos:column="18"/></operator><literal type="number" pos:line="118" pos:column="18">1<pos:position pos:line="118" pos:column="19"/></literal></expr>;<pos:position pos:line="118" pos:column="20"/></expr_stmt>
          <break pos:line="119" pos:column="11">break;<pos:position pos:line="119" pos:column="17"/></break>
        }<pos:position pos:line="120" pos:column="10"/></block></then></if>

        <if pos:line="122" pos:column="9">if<condition pos:line="122" pos:column="11">(<expr><name><name pos:line="122" pos:column="12">data<pos:position pos:line="122" pos:column="16"/></name><operator pos:line="122" pos:column="16">-&gt;<pos:position pos:line="122" pos:column="21"/></operator><name pos:line="122" pos:column="18">state<pos:position pos:line="122" pos:column="23"/></name><operator pos:line="122" pos:column="23">.<pos:position pos:line="122" pos:column="24"/></operator><name pos:line="122" pos:column="24">buffer<pos:position pos:line="122" pos:column="30"/></name><index pos:line="122" pos:column="30">[<expr><literal type="number" pos:line="122" pos:column="31">0<pos:position pos:line="122" pos:column="32"/></literal></expr>]<pos:position pos:line="122" pos:column="33"/></index></name> <operator pos:line="122" pos:column="34">!=<pos:position pos:line="122" pos:column="36"/></operator> <literal type="char" pos:line="122" pos:column="37">'2'<pos:position pos:line="122" pos:column="40"/></literal> <operator pos:line="122" pos:column="41">&amp;&amp;<pos:position pos:line="122" pos:column="51"/></operator> <name><name pos:line="122" pos:column="44">data<pos:position pos:line="122" pos:column="48"/></name><operator pos:line="122" pos:column="48">-&gt;<pos:position pos:line="122" pos:column="53"/></operator><name pos:line="122" pos:column="50">state<pos:position pos:line="122" pos:column="55"/></name><operator pos:line="122" pos:column="55">.<pos:position pos:line="122" pos:column="56"/></operator><name pos:line="122" pos:column="56">buffer<pos:position pos:line="122" pos:column="62"/></name><index pos:line="122" pos:column="62">[<expr><literal type="number" pos:line="122" pos:column="63">0<pos:position pos:line="122" pos:column="64"/></literal></expr>]<pos:position pos:line="122" pos:column="65"/></index></name> <operator pos:line="122" pos:column="66">!=<pos:position pos:line="122" pos:column="68"/></operator> <literal type="char" pos:line="122" pos:column="69">'3'<pos:position pos:line="122" pos:column="72"/></literal></expr>)<pos:position pos:line="122" pos:column="73"/></condition><then><block pos:line="122" pos:column="73">{
          <expr_stmt><expr><call><name pos:line="123" pos:column="11">Curl_infof<pos:position pos:line="123" pos:column="21"/></name><argument_list pos:line="123" pos:column="21">(<argument><expr><name pos:line="123" pos:column="22">data<pos:position pos:line="123" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="123" pos:column="28">"Server didn't accept auth data\n"<pos:position pos:line="123" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="64"/></expr_stmt>
          <expr_stmt><expr><name pos:line="124" pos:column="11">ret<pos:position pos:line="124" pos:column="14"/></name> <operator pos:line="124" pos:column="15">=<pos:position pos:line="124" pos:column="16"/></operator> <name pos:line="124" pos:column="17">AUTH_ERROR<pos:position pos:line="124" pos:column="27"/></name></expr>;<pos:position pos:line="124" pos:column="28"/></expr_stmt>
          <break pos:line="125" pos:column="11">break;<pos:position pos:line="125" pos:column="17"/></break>
        }<pos:position pos:line="126" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="128" pos:column="9">p<pos:position pos:line="128" pos:column="10"/></name> <operator pos:line="128" pos:column="11">=<pos:position pos:line="128" pos:column="12"/></operator> <name><name pos:line="128" pos:column="13">data<pos:position pos:line="128" pos:column="17"/></name><operator pos:line="128" pos:column="17">-&gt;<pos:position pos:line="128" pos:column="22"/></operator><name pos:line="128" pos:column="19">state<pos:position pos:line="128" pos:column="24"/></name><operator pos:line="128" pos:column="24">.<pos:position pos:line="128" pos:column="25"/></operator><name pos:line="128" pos:column="25">buffer<pos:position pos:line="128" pos:column="31"/></name></name> <operator pos:line="128" pos:column="32">+<pos:position pos:line="128" pos:column="33"/></operator> <literal type="number" pos:line="128" pos:column="34">4<pos:position pos:line="128" pos:column="35"/></literal></expr>;<pos:position pos:line="128" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name pos:line="129" pos:column="9">p<pos:position pos:line="129" pos:column="10"/></name> <operator pos:line="129" pos:column="11">=<pos:position pos:line="129" pos:column="12"/></operator> <call><name pos:line="129" pos:column="13">strstr<pos:position pos:line="129" pos:column="19"/></name><argument_list pos:line="129" pos:column="19">(<argument><expr><name pos:line="129" pos:column="20">p<pos:position pos:line="129" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="129" pos:column="23">"ADAT="<pos:position pos:line="129" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="129" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="32"/></expr_stmt>
        <if pos:line="130" pos:column="9">if<condition pos:line="130" pos:column="11">(<expr><name pos:line="130" pos:column="12">p<pos:position pos:line="130" pos:column="13"/></name></expr>)<pos:position pos:line="130" pos:column="14"/></condition><then pos:line="130" pos:column="14"> <block pos:line="130" pos:column="15">{
          <expr_stmt><expr><name><name pos:line="131" pos:column="11">_gssresp<pos:position pos:line="131" pos:column="19"/></name><operator pos:line="131" pos:column="19">.<pos:position pos:line="131" pos:column="20"/></operator><name pos:line="131" pos:column="20">length<pos:position pos:line="131" pos:column="26"/></name></name> <operator pos:line="131" pos:column="27">=<pos:position pos:line="131" pos:column="28"/></operator> <call><name pos:line="131" pos:column="29">Curl_base64_decode<pos:position pos:line="131" pos:column="47"/></name><argument_list pos:line="131" pos:column="47">(<argument><expr><name pos:line="131" pos:column="48">p<pos:position pos:line="131" pos:column="49"/></name> <operator pos:line="131" pos:column="50">+<pos:position pos:line="131" pos:column="51"/></operator> <literal type="number" pos:line="131" pos:column="52">5<pos:position pos:line="131" pos:column="53"/></literal></expr></argument>, <argument><expr><operator pos:line="131" pos:column="55">(<pos:position pos:line="131" pos:column="56"/></operator><name pos:line="131" pos:column="56">unsigned<pos:position pos:line="131" pos:column="64"/></name> <name pos:line="131" pos:column="65">char<pos:position pos:line="131" pos:column="69"/></name> <operator pos:line="131" pos:column="70">*<pos:position pos:line="131" pos:column="71"/></operator><operator pos:line="131" pos:column="71">*<pos:position pos:line="131" pos:column="72"/></operator><operator pos:line="131" pos:column="72">)<pos:position pos:line="131" pos:column="73"/></operator>
                                               <operator pos:line="132" pos:column="48">&amp;<pos:position pos:line="132" pos:column="53"/></operator><name><name pos:line="132" pos:column="49">_gssresp<pos:position pos:line="132" pos:column="57"/></name><operator pos:line="132" pos:column="57">.<pos:position pos:line="132" pos:column="58"/></operator><name pos:line="132" pos:column="58">value<pos:position pos:line="132" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="132" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="65"/></expr_stmt>
          <if pos:line="133" pos:column="11">if<condition pos:line="133" pos:column="13">(<expr><name><name pos:line="133" pos:column="14">_gssresp<pos:position pos:line="133" pos:column="22"/></name><operator pos:line="133" pos:column="22">.<pos:position pos:line="133" pos:column="23"/></operator><name pos:line="133" pos:column="23">length<pos:position pos:line="133" pos:column="29"/></name></name> <operator pos:line="133" pos:column="30">&lt;<pos:position pos:line="133" pos:column="34"/></operator> <literal type="number" pos:line="133" pos:column="32">1<pos:position pos:line="133" pos:column="33"/></literal></expr>)<pos:position pos:line="133" pos:column="34"/></condition><then pos:line="133" pos:column="34"> <block pos:line="133" pos:column="35">{
            <expr_stmt><expr><call><name pos:line="134" pos:column="13">Curl_failf<pos:position pos:line="134" pos:column="23"/></name><argument_list pos:line="134" pos:column="23">(<argument><expr><name pos:line="134" pos:column="24">data<pos:position pos:line="134" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="134" pos:column="30">"Out of memory base64-encoding\n"<pos:position pos:line="134" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="134" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="65"/></expr_stmt>
            <expr_stmt><expr><name pos:line="135" pos:column="13">ret<pos:position pos:line="135" pos:column="16"/></name> <operator pos:line="135" pos:column="17">=<pos:position pos:line="135" pos:column="18"/></operator> <name pos:line="135" pos:column="19">AUTH_CONTINUE<pos:position pos:line="135" pos:column="32"/></name></expr>;<pos:position pos:line="135" pos:column="33"/></expr_stmt>
            <break pos:line="136" pos:column="13">break;<pos:position pos:line="136" pos:column="19"/></break>
          }<pos:position pos:line="137" pos:column="12"/></block></then></if>
        }<pos:position pos:line="138" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="140" pos:column="9">gssresp<pos:position pos:line="140" pos:column="16"/></name> <operator pos:line="140" pos:column="17">=<pos:position pos:line="140" pos:column="18"/></operator> <operator pos:line="140" pos:column="19">&amp;<pos:position pos:line="140" pos:column="24"/></operator><name pos:line="140" pos:column="20">_gssresp<pos:position pos:line="140" pos:column="28"/></name></expr>;<pos:position pos:line="140" pos:column="29"/></expr_stmt>
      }<pos:position pos:line="141" pos:column="8"/></block></then></if>
    }<pos:position pos:line="142" pos:column="6"/></block> while<condition pos:line="142" pos:column="12">(<expr><name pos:line="142" pos:column="13">maj<pos:position pos:line="142" pos:column="16"/></name> <operator pos:line="142" pos:column="17">==<pos:position pos:line="142" pos:column="19"/></operator> <name pos:line="142" pos:column="20">GSS_S_CONTINUE_NEEDED<pos:position pos:line="142" pos:column="41"/></name></expr>)<pos:position pos:line="142" pos:column="42"/></condition>;<pos:position pos:line="142" pos:column="43"/></do>

    <expr_stmt><expr><call><name pos:line="144" pos:column="5">gss_release_name<pos:position pos:line="144" pos:column="21"/></name><argument_list pos:line="144" pos:column="21">(<argument><expr><operator pos:line="144" pos:column="22">&amp;<pos:position pos:line="144" pos:column="27"/></operator><name pos:line="144" pos:column="23">min<pos:position pos:line="144" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="144" pos:column="28">&amp;<pos:position pos:line="144" pos:column="33"/></operator><name pos:line="144" pos:column="29">gssname<pos:position pos:line="144" pos:column="36"/></name></expr></argument>)<pos:position pos:line="144" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="145" pos:column="5">gss_release_buffer<pos:position pos:line="145" pos:column="23"/></name><argument_list pos:line="145" pos:column="23">(<argument><expr><operator pos:line="145" pos:column="24">&amp;<pos:position pos:line="145" pos:column="29"/></operator><name pos:line="145" pos:column="25">min<pos:position pos:line="145" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="145" pos:column="30">&amp;<pos:position pos:line="145" pos:column="35"/></operator><name pos:line="145" pos:column="31">output_buffer<pos:position pos:line="145" pos:column="44"/></name></expr></argument>)<pos:position pos:line="145" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="46"/></expr_stmt>

    <if pos:line="147" pos:column="5">if<condition pos:line="147" pos:column="7">(<expr><name pos:line="147" pos:column="8">gssresp<pos:position pos:line="147" pos:column="15"/></name></expr>)<pos:position pos:line="147" pos:column="16"/></condition><then pos:line="147" pos:column="16">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="148" pos:column="7">free<pos:position pos:line="148" pos:column="11"/></name><argument_list pos:line="148" pos:column="11">(<argument><expr><name><name pos:line="148" pos:column="12">_gssresp<pos:position pos:line="148" pos:column="20"/></name><operator pos:line="148" pos:column="20">.<pos:position pos:line="148" pos:column="21"/></operator><name pos:line="148" pos:column="21">value<pos:position pos:line="148" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="148" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="28"/></expr_stmt></block></then></if>

    <if pos:line="150" pos:column="5">if<condition pos:line="150" pos:column="7">(<expr><name pos:line="150" pos:column="8">ret<pos:position pos:line="150" pos:column="11"/></name> <operator pos:line="150" pos:column="12">==<pos:position pos:line="150" pos:column="14"/></operator> <name pos:line="150" pos:column="15">AUTH_OK<pos:position pos:line="150" pos:column="22"/></name> <operator pos:line="150" pos:column="23">||<pos:position pos:line="150" pos:column="25"/></operator> <name pos:line="150" pos:column="26">service<pos:position pos:line="150" pos:column="33"/></name> <operator pos:line="150" pos:column="34">==<pos:position pos:line="150" pos:column="36"/></operator> <name pos:line="150" pos:column="37">srv_host<pos:position pos:line="150" pos:column="45"/></name></expr>)<pos:position pos:line="150" pos:column="46"/></condition><then pos:line="150" pos:column="46">
      <block type="pseudo"><return pos:line="151" pos:column="7">return <expr><name pos:line="151" pos:column="14">ret<pos:position pos:line="151" pos:column="17"/></name></expr>;<pos:position pos:line="151" pos:column="18"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="153" pos:column="5">service<pos:position pos:line="153" pos:column="12"/></name> <operator pos:line="153" pos:column="13">=<pos:position pos:line="153" pos:column="14"/></operator> <name pos:line="153" pos:column="15">srv_host<pos:position pos:line="153" pos:column="23"/></name></expr>;<pos:position pos:line="153" pos:column="24"/></expr_stmt>
  }<pos:position pos:line="154" pos:column="4"/></block></while>
  <return pos:line="155" pos:column="3">return <expr><name pos:line="155" pos:column="10">ret<pos:position pos:line="155" pos:column="13"/></name></expr>;<pos:position pos:line="155" pos:column="14"/></return>
}<pos:position pos:line="156" pos:column="2"/></block></function></unit>
