<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/curl/gumtree/curl_repos_function_219_curl-7.18.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">test<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">char<pos:position pos:line="1" pos:column="14"/></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type><name pos:line="1" pos:column="16">URL<pos:position pos:line="1" pos:column="19"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="20"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">CURL<pos:position pos:line="3" pos:column="7"/></name> <modifier pos:line="3" pos:column="8">*<pos:position pos:line="3" pos:column="9"/></modifier></type><name pos:line="3" pos:column="9">c<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">CURLM<pos:position pos:line="4" pos:column="8"/></name> <modifier pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></modifier></type><name pos:line="4" pos:column="10">m<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">res<pos:position pos:line="5" pos:column="10"/></name> <init pos:line="5" pos:column="11">= <expr><literal type="number" pos:line="5" pos:column="13">0<pos:position pos:line="5" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">running<pos:position pos:line="6" pos:column="14"/></name><init pos:line="6" pos:column="14">=<expr><literal type="number" pos:line="6" pos:column="15">1<pos:position pos:line="6" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="7" pos:column="3">struct<pos:position pos:line="7" pos:column="9"/></name> <name pos:line="7" pos:column="10">timeval<pos:position pos:line="7" pos:column="17"/></name></name></type> <name pos:line="7" pos:column="18">mp_start<pos:position pos:line="7" pos:column="26"/></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">char<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">mp_timedout<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><name pos:line="8" pos:column="22">FALSE<pos:position pos:line="8" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><call><name pos:line="10" pos:column="7">curl_global_init<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><name pos:line="10" pos:column="24">CURL_GLOBAL_ALL<pos:position pos:line="10" pos:column="39"/></name></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call> <operator pos:line="10" pos:column="41">!=<pos:position pos:line="10" pos:column="43"/></operator> <name pos:line="10" pos:column="44">CURLE_OK<pos:position pos:line="10" pos:column="52"/></name></expr>)<pos:position pos:line="10" pos:column="53"/></condition><then pos:line="10" pos:column="53"> <block pos:line="10" pos:column="54">{
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">fprintf<pos:position pos:line="11" pos:column="12"/></name><argument_list pos:line="11" pos:column="12">(<argument><expr><name pos:line="11" pos:column="13">stderr<pos:position pos:line="11" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="21">"curl_global_init() failed\n"<pos:position pos:line="11" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="52"/></expr_stmt>
    <return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="12" pos:column="30"/></name></expr>;<pos:position pos:line="12" pos:column="31"/></return>
  }<pos:position pos:line="13" pos:column="4"/></block></then></if>

  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><operator pos:line="15" pos:column="7">(<pos:position pos:line="15" pos:column="8"/></operator><name pos:line="15" pos:column="8">c<pos:position pos:line="15" pos:column="9"/></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <call><name pos:line="15" pos:column="12">curl_easy_init<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">()<pos:position pos:line="15" pos:column="28"/></argument_list></call><operator pos:line="15" pos:column="28">)<pos:position pos:line="15" pos:column="29"/></operator> <operator pos:line="15" pos:column="30">==<pos:position pos:line="15" pos:column="32"/></operator> <name pos:line="15" pos:column="33">NULL<pos:position pos:line="15" pos:column="37"/></name></expr>)<pos:position pos:line="15" pos:column="38"/></condition><then pos:line="15" pos:column="38"> <block pos:line="15" pos:column="39">{
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">fprintf<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">stderr<pos:position pos:line="16" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="21">"curl_easy_init() failed\n"<pos:position pos:line="16" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">curl_global_cleanup<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">()<pos:position pos:line="17" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="27"/></expr_stmt>
    <return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="18" pos:column="30"/></name></expr>;<pos:position pos:line="18" pos:column="31"/></return>
  }<pos:position pos:line="19" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="21" pos:column="3">curl_easy_setopt<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><name pos:line="21" pos:column="20">c<pos:position pos:line="21" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="23">CURLOPT_URL<pos:position pos:line="21" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="36">URL<pos:position pos:line="21" pos:column="39"/></name></expr></argument>)<pos:position pos:line="21" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="41"/></expr_stmt>

  <if pos:line="23" pos:column="3">if <condition pos:line="23" pos:column="6">(<expr><operator pos:line="23" pos:column="7">(<pos:position pos:line="23" pos:column="8"/></operator><name pos:line="23" pos:column="8">m<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">=<pos:position pos:line="23" pos:column="11"/></operator> <call><name pos:line="23" pos:column="12">curl_multi_init<pos:position pos:line="23" pos:column="27"/></name><argument_list pos:line="23" pos:column="27">()<pos:position pos:line="23" pos:column="29"/></argument_list></call><operator pos:line="23" pos:column="29">)<pos:position pos:line="23" pos:column="30"/></operator> <operator pos:line="23" pos:column="31">==<pos:position pos:line="23" pos:column="33"/></operator> <name pos:line="23" pos:column="34">NULL<pos:position pos:line="23" pos:column="38"/></name></expr>)<pos:position pos:line="23" pos:column="39"/></condition><then pos:line="23" pos:column="39"> <block pos:line="23" pos:column="40">{
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">fprintf<pos:position pos:line="24" pos:column="12"/></name><argument_list pos:line="24" pos:column="12">(<argument><expr><name pos:line="24" pos:column="13">stderr<pos:position pos:line="24" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="21">"curl_multi_init() failed\n"<pos:position pos:line="24" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">curl_easy_cleanup<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">c<pos:position pos:line="25" pos:column="24"/></name></expr></argument>)<pos:position pos:line="25" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">curl_global_cleanup<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">()<pos:position pos:line="26" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="27"/></expr_stmt>
    <return pos:line="27" pos:column="5">return <expr><name pos:line="27" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="27" pos:column="30"/></name></expr>;<pos:position pos:line="27" pos:column="31"/></return>
  }<pos:position pos:line="28" pos:column="4"/></block></then></if>

  <if pos:line="30" pos:column="3">if <condition pos:line="30" pos:column="6">(<expr><operator pos:line="30" pos:column="7">(<pos:position pos:line="30" pos:column="8"/></operator><name pos:line="30" pos:column="8">res<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <operator pos:line="30" pos:column="14">(<pos:position pos:line="30" pos:column="15"/></operator><name pos:line="30" pos:column="15">int<pos:position pos:line="30" pos:column="18"/></name><operator pos:line="30" pos:column="18">)<pos:position pos:line="30" pos:column="19"/></operator><call><name pos:line="30" pos:column="19">curl_multi_add_handle<pos:position pos:line="30" pos:column="40"/></name><argument_list pos:line="30" pos:column="40">(<argument><expr><name pos:line="30" pos:column="41">m<pos:position pos:line="30" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="44">c<pos:position pos:line="30" pos:column="45"/></name></expr></argument>)<pos:position pos:line="30" pos:column="46"/></argument_list></call><operator pos:line="30" pos:column="46">)<pos:position pos:line="30" pos:column="47"/></operator> <operator pos:line="30" pos:column="48">!=<pos:position pos:line="30" pos:column="50"/></operator> <name pos:line="30" pos:column="51">CURLM_OK<pos:position pos:line="30" pos:column="59"/></name></expr>)<pos:position pos:line="30" pos:column="60"/></condition><then pos:line="30" pos:column="60"> <block pos:line="30" pos:column="61">{
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">fprintf<pos:position pos:line="31" pos:column="12"/></name><argument_list pos:line="31" pos:column="12">(<argument><expr><name pos:line="31" pos:column="13">stderr<pos:position pos:line="31" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="21">"curl_multi_add_handle() failed, "<pos:position pos:line="31" pos:column="55"/></literal>
            <literal type="string" pos:line="32" pos:column="13">"with code %d\n"<pos:position pos:line="32" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="31">res<pos:position pos:line="32" pos:column="34"/></name></expr></argument>)<pos:position pos:line="32" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">curl_multi_cleanup<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">(<argument><expr><name pos:line="33" pos:column="24">m<pos:position pos:line="33" pos:column="25"/></name></expr></argument>)<pos:position pos:line="33" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">curl_easy_cleanup<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><name pos:line="34" pos:column="23">c<pos:position pos:line="34" pos:column="24"/></name></expr></argument>)<pos:position pos:line="34" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">curl_global_cleanup<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">()<pos:position pos:line="35" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="27"/></expr_stmt>
    <return pos:line="36" pos:column="5">return <expr><name pos:line="36" pos:column="12">TEST_ERR_MAJOR_BAD<pos:position pos:line="36" pos:column="30"/></name></expr>;<pos:position pos:line="36" pos:column="31"/></return>
  }<pos:position pos:line="37" pos:column="4"/></block></then></if>

  <expr_stmt><expr><name pos:line="39" pos:column="3">mp_timedout<pos:position pos:line="39" pos:column="14"/></name> <operator pos:line="39" pos:column="15">=<pos:position pos:line="39" pos:column="16"/></operator> <name pos:line="39" pos:column="17">FALSE<pos:position pos:line="39" pos:column="22"/></name></expr>;<pos:position pos:line="39" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name pos:line="40" pos:column="3">mp_start<pos:position pos:line="40" pos:column="11"/></name> <operator pos:line="40" pos:column="12">=<pos:position pos:line="40" pos:column="13"/></operator> <call><name pos:line="40" pos:column="14">tutil_tvnow<pos:position pos:line="40" pos:column="25"/></name><argument_list pos:line="40" pos:column="25">()<pos:position pos:line="40" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="28"/></expr_stmt>

  <while pos:line="42" pos:column="3">while <condition pos:line="42" pos:column="9">(<expr><name pos:line="42" pos:column="10">running<pos:position pos:line="42" pos:column="17"/></name></expr>)<pos:position pos:line="42" pos:column="18"/></condition> <block pos:line="42" pos:column="19">{
    <expr_stmt><expr><name pos:line="43" pos:column="5">res<pos:position pos:line="43" pos:column="8"/></name> <operator pos:line="43" pos:column="9">=<pos:position pos:line="43" pos:column="10"/></operator> <operator pos:line="43" pos:column="11">(<pos:position pos:line="43" pos:column="12"/></operator><name pos:line="43" pos:column="12">int<pos:position pos:line="43" pos:column="15"/></name><operator pos:line="43" pos:column="15">)<pos:position pos:line="43" pos:column="16"/></operator><call><name pos:line="43" pos:column="16">curl_multi_perform<pos:position pos:line="43" pos:column="34"/></name><argument_list pos:line="43" pos:column="34">(<argument><expr><name pos:line="43" pos:column="35">m<pos:position pos:line="43" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="38">&amp;<pos:position pos:line="43" pos:column="43"/></operator><name pos:line="43" pos:column="39">running<pos:position pos:line="43" pos:column="46"/></name></expr></argument>)<pos:position pos:line="43" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="48"/></expr_stmt>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><call><name pos:line="44" pos:column="9">tutil_tvdiff<pos:position pos:line="44" pos:column="21"/></name><argument_list pos:line="44" pos:column="21">(<argument><expr><call><name pos:line="44" pos:column="22">tutil_tvnow<pos:position pos:line="44" pos:column="33"/></name><argument_list pos:line="44" pos:column="33">()<pos:position pos:line="44" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="44" pos:column="37">mp_start<pos:position pos:line="44" pos:column="45"/></name></expr></argument>)<pos:position pos:line="44" pos:column="46"/></argument_list></call> <operator pos:line="44" pos:column="47">&gt;<pos:position pos:line="44" pos:column="51"/></operator> 
        <name pos:line="45" pos:column="9">MULTI_PERFORM_HANG_TIMEOUT<pos:position pos:line="45" pos:column="35"/></name></expr>)<pos:position pos:line="45" pos:column="36"/></condition><then pos:line="45" pos:column="36"> <block pos:line="45" pos:column="37">{
      <expr_stmt><expr><name pos:line="46" pos:column="7">mp_timedout<pos:position pos:line="46" pos:column="18"/></name> <operator pos:line="46" pos:column="19">=<pos:position pos:line="46" pos:column="20"/></operator> <name pos:line="46" pos:column="21">TRUE<pos:position pos:line="46" pos:column="25"/></name></expr>;<pos:position pos:line="46" pos:column="26"/></expr_stmt>
      <break pos:line="47" pos:column="7">break;<pos:position pos:line="47" pos:column="13"/></break>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>
    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><name pos:line="49" pos:column="9">running<pos:position pos:line="49" pos:column="16"/></name> <operator pos:line="49" pos:column="17">&lt;=<pos:position pos:line="49" pos:column="22"/></operator> <literal type="number" pos:line="49" pos:column="20">0<pos:position pos:line="49" pos:column="21"/></literal></expr>)<pos:position pos:line="49" pos:column="22"/></condition><then pos:line="49" pos:column="22"> <block pos:line="49" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="50" pos:column="7">fprintf<pos:position pos:line="50" pos:column="14"/></name><argument_list pos:line="50" pos:column="14">(<argument><expr><name pos:line="50" pos:column="15">stderr<pos:position pos:line="50" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="23">"nothing left running.\n"<pos:position pos:line="50" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="50"/></expr_stmt>
      <break pos:line="51" pos:column="7">break;<pos:position pos:line="51" pos:column="13"/></break>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if>
  }<pos:position pos:line="53" pos:column="4"/></block></while>

  <if pos:line="55" pos:column="3">if <condition pos:line="55" pos:column="6">(<expr><name pos:line="55" pos:column="7">mp_timedout<pos:position pos:line="55" pos:column="18"/></name></expr>)<pos:position pos:line="55" pos:column="19"/></condition><then pos:line="55" pos:column="19"> <block pos:line="55" pos:column="20">{
    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><name pos:line="56" pos:column="9">mp_timedout<pos:position pos:line="56" pos:column="20"/></name></expr>)<pos:position pos:line="56" pos:column="21"/></condition><then pos:line="56" pos:column="21"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="22">fprintf<pos:position pos:line="56" pos:column="29"/></name><argument_list pos:line="56" pos:column="29">(<argument><expr><name pos:line="56" pos:column="30">stderr<pos:position pos:line="56" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="38">"mp_timedout\n"<pos:position pos:line="56" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="55"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="57" pos:column="5">fprintf<pos:position pos:line="57" pos:column="12"/></name><argument_list pos:line="57" pos:column="12">(<argument><expr><name pos:line="57" pos:column="13">stderr<pos:position pos:line="57" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="21">"ABORTING TEST, since it seems "<pos:position pos:line="57" pos:column="53"/></literal>
            <literal type="string" pos:line="58" pos:column="13">"that it would have run forever.\n"<pos:position pos:line="58" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name pos:line="59" pos:column="5">res<pos:position pos:line="59" pos:column="8"/></name> <operator pos:line="59" pos:column="9">=<pos:position pos:line="59" pos:column="10"/></operator> <name pos:line="59" pos:column="11">TEST_ERR_RUNS_FOREVER<pos:position pos:line="59" pos:column="32"/></name></expr>;<pos:position pos:line="59" pos:column="33"/></expr_stmt>
  }<pos:position pos:line="60" pos:column="4"/></block></then></if>

  <expr_stmt><expr><call><name pos:line="62" pos:column="3">curl_multi_remove_handle<pos:position pos:line="62" pos:column="27"/></name><argument_list pos:line="62" pos:column="27">(<argument><expr><name pos:line="62" pos:column="28">m<pos:position pos:line="62" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="31">c<pos:position pos:line="62" pos:column="32"/></name></expr></argument>)<pos:position pos:line="62" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="63" pos:column="3">curl_easy_cleanup<pos:position pos:line="63" pos:column="20"/></name><argument_list pos:line="63" pos:column="20">(<argument><expr><name pos:line="63" pos:column="21">c<pos:position pos:line="63" pos:column="22"/></name></expr></argument>)<pos:position pos:line="63" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="64" pos:column="3">curl_multi_cleanup<pos:position pos:line="64" pos:column="21"/></name><argument_list pos:line="64" pos:column="21">(<argument><expr><name pos:line="64" pos:column="22">m<pos:position pos:line="64" pos:column="23"/></name></expr></argument>)<pos:position pos:line="64" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="65" pos:column="3">curl_global_cleanup<pos:position pos:line="65" pos:column="22"/></name><argument_list pos:line="65" pos:column="22">()<pos:position pos:line="65" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="25"/></expr_stmt>

  <return pos:line="67" pos:column="3">return <expr><name pos:line="67" pos:column="10">res<pos:position pos:line="67" pos:column="13"/></name></expr>;<pos:position pos:line="67" pos:column="14"/></return>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
