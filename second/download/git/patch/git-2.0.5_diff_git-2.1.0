Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/abspath.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/abspath.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/abspath.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/abspath.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/advice.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/advice.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/advice.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/advice.c	2014-08-16 06:26:55.000000000 +0800
@@ -58,37 +58,39 @@
 	}
 	strbuf_release(&buf);
 }
 
 int git_default_advice_config(const char *var, const char *value)
 {
-	const char *k = skip_prefix(var, "advice.");
+	const char *k;
 	int i;
 
+	if (!skip_prefix(var, "advice.", &k))
+		return 0;
+
 	for (i = 0; i < ARRAY_SIZE(advice_config); i++) {
 		if (strcmp(k, advice_config[i].name))
 			continue;
 		*advice_config[i].preference = git_config_bool(var, value);
 		return 0;
 	}
 
 	return 0;
 }
 
 int error_resolve_conflict(const char *me)
 {
-	error("'%s' is not possible because you have unmerged files.", me);
+	error("%s is not possible because you have unmerged files.", me);
 	if (advice_resolve_conflict)
 		/*
 		 * Message used both when 'git commit' fails and when
 		 * other commands doing a merge do.
 		 */
-		advise(_("Fix them up in the work tree,\n"
-			 "and then use 'git add/rm <file>' as\n"
-			 "appropriate to mark resolution and make a commit,\n"
-			 "or use 'git commit -a'."));
+		advise(_("Fix them up in the work tree, and then use 'git add/rm <file>'\n"
+			 "as appropriate to mark resolution and make a commit, or use\n"
+			 "'git commit -a'."));
 	return -1;
 }
 
 void NORETURN die_resolve_conflict(const char *me)
 {
 	error_resolve_conflict(me);
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/advice.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/advice.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/advice.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/advice.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/alias.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/alias.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/alias.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/alias.c	2014-08-16 06:26:55.000000000 +0800
@@ -2,13 +2,14 @@
 
 static const char *alias_key;
 static char *alias_val;
 
 static int alias_lookup_cb(const char *k, const char *v, void *cb)
 {
-	if (starts_with(k, "alias.") && !strcmp(k + 6, alias_key)) {
+	const char *name;
+	if (skip_prefix(k, "alias.", &name) && !strcmp(name, alias_key)) {
 		if (!v)
 			return config_error_nonbool(k);
 		alias_val = xstrdup(v);
 		return 0;
 	}
 	return 0;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/alias.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/alias.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/alias.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/alias.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/alloc.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/alloc.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/alloc.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/alloc.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive-tar.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive-tar.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive-tar.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive-tar.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive-zip.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive-zip.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive-zip.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive-zip.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/argv-array.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/argv-array.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/argv-array.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/argv-array.c	2014-08-16 06:26:55.000000000 +0800
@@ -65,26 +65,6 @@
 		for (i = 0; i < array->argc; i++)
 			free((char *)array->argv[i]);
 		free(array->argv);
 	}
 	argv_array_init(array);
 }
-
-const char **argv_array_detach(struct argv_array *array, int *argc)
-{
-	const char **argv =
-		array->argv == empty_argv || array->argc == 0 ? NULL : array->argv;
-	if (argc)
-		*argc = array->argc;
-	argv_array_init(array);
-	return argv;
-}
-
-void argv_array_free_detached(const char **argv)
-{
-	if (argv) {
-		int i;
-		for (i = 0; argv[i]; i++)
-			free((char **)argv[i]);
-		free(argv);
-	}
-}
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/argv-array.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/argv-array.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/argv-array.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/argv-array.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/argv-array.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/argv-array.h	2014-08-16 06:26:55.000000000 +0800
@@ -16,10 +16,8 @@
 __attribute__((format (printf,2,3)))
 void argv_array_pushf(struct argv_array *, const char *fmt, ...);
 LAST_ARG_MUST_BE_NULL
 void argv_array_pushl(struct argv_array *, ...);
 void argv_array_pop(struct argv_array *);
 void argv_array_clear(struct argv_array *);
-const char **argv_array_detach(struct argv_array *array, int *argc);
-void argv_array_free_detached(const char **argv);
 
 #endif /* ARGV_ARRAY_H */
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/argv-array.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/argv-array.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/attr.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/attr.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/attr.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/attr.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/base85.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/base85.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/base85.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/base85.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/git /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/git
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/git	2017-10-10 09:55:10.767226516 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/git	2017-10-10 09:58:41.257920798 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and git.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and git.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/git" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/git-cvsserver /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/git-cvsserver
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/git-cvsserver	2017-10-10 09:55:10.783218515 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/git-cvsserver	2017-10-10 09:58:41.273912797 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and git-cvsserver.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and git-cvsserver.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/git-cvsserver" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/git-receive-pack /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/git-receive-pack
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/git-receive-pack	2017-10-10 09:55:10.775222516 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/git-receive-pack	2017-10-10 09:58:41.261918798 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and git-receive-pack.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and git-receive-pack.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/git-receive-pack" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/git-shell /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/git-shell
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/git-shell	2017-10-10 09:55:10.779220515 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/git-shell	2017-10-10 09:58:41.269914797 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and git-shell.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and git-shell.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/git-shell" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/git-upload-archive /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/git-upload-archive
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/git-upload-archive	2017-10-10 09:55:10.775222516 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/git-upload-archive	2017-10-10 09:58:41.265916798 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and git-upload-archive.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and git-upload-archive.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/git-upload-archive" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/git-upload-pack /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/git-upload-pack
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/git-upload-pack	2017-10-10 09:55:10.771224516 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/git-upload-pack	2017-10-10 09:58:41.257920798 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and git-upload-pack.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and git-upload-pack.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/git-upload-pack" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-chmtime /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-chmtime
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-chmtime	2017-10-10 09:55:10.783218515 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-chmtime	2017-10-10 09:58:41.277910796 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-chmtime.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-chmtime.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-chmtime" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-ctype /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-ctype
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-ctype	2017-10-10 09:55:10.787216516 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-ctype	2017-10-10 09:58:41.277910796 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-ctype.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-ctype.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-ctype" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-date /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-date
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-date	2017-10-10 09:55:10.787216516 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-date	2017-10-10 09:58:41.285906797 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-date.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-date.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-date" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-delta /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-delta
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-delta	2017-10-10 09:55:10.791214516 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-delta	2017-10-10 09:58:41.285906797 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-delta.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-delta.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-delta" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-dump-cache-tree /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-dump-cache-tree
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-dump-cache-tree	2017-10-10 09:55:10.795212515 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-dump-cache-tree	2017-10-10 09:58:41.289904797 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-dump-cache-tree.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-dump-cache-tree.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-dump-cache-tree" "$@"
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers: test-dump-split-index
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-genrandom /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-genrandom
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-genrandom	2017-10-10 09:55:10.795212515 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-genrandom	2017-10-10 09:58:41.293902797 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-genrandom.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-genrandom.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-genrandom" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-hashmap /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-hashmap
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-hashmap	2017-10-10 09:55:10.799210515 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-hashmap	2017-10-10 09:58:41.297900796 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-hashmap.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-hashmap.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-hashmap" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-index-version /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-index-version
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-index-version	2017-10-10 09:55:10.799210515 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-index-version	2017-10-10 09:58:41.297900796 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-index-version.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-index-version.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-index-version" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-line-buffer /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-line-buffer
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-line-buffer	2017-10-10 09:55:10.803208515 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-line-buffer	2017-10-10 09:58:41.301898796 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-line-buffer.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-line-buffer.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-line-buffer" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-match-trees /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-match-trees
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-match-trees	2017-10-10 09:55:10.807206515 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-match-trees	2017-10-10 09:58:41.305896796 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-match-trees.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-match-trees.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-match-trees" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-mergesort /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-mergesort
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-mergesort	2017-10-10 09:55:10.807206515 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-mergesort	2017-10-10 09:58:41.305896796 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-mergesort.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-mergesort.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-mergesort" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-mktemp /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-mktemp
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-mktemp	2017-10-10 09:55:10.811204514 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-mktemp	2017-10-10 09:58:41.309894796 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-mktemp.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-mktemp.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-mktemp" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-parse-options /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-parse-options
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-parse-options	2017-10-10 09:55:10.811204514 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-parse-options	2017-10-10 09:58:41.309894796 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-parse-options.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-parse-options.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-parse-options" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-path-utils /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-path-utils
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-path-utils	2017-10-10 09:55:10.815202514 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-path-utils	2017-10-10 09:58:41.313892795 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-path-utils.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-path-utils.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-path-utils" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-prio-queue /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-prio-queue
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-prio-queue	2017-10-10 09:55:10.819200514 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-prio-queue	2017-10-10 09:58:41.317890796 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-prio-queue.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-prio-queue.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-prio-queue" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-read-cache /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-read-cache
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-read-cache	2017-10-10 09:55:10.819200514 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-read-cache	2017-10-10 09:58:41.317890796 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-read-cache.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-read-cache.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-read-cache" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-regex /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-regex
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-regex	2017-10-10 09:55:10.823198514 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-regex	2017-10-10 09:58:41.321888796 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-regex.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-regex.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-regex" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-revision-walking /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-revision-walking
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-revision-walking	2017-10-10 09:55:10.823198514 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-revision-walking	2017-10-10 09:58:41.325886796 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-revision-walking.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-revision-walking.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-revision-walking" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-run-command /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-run-command
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-run-command	2017-10-10 09:55:10.827196514 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-run-command	2017-10-10 09:58:41.329884795 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-run-command.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-run-command.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-run-command" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-scrap-cache-tree /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-scrap-cache-tree
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-scrap-cache-tree	2017-10-10 09:55:10.827196514 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-scrap-cache-tree	2017-10-10 09:58:41.329884795 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-scrap-cache-tree.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-scrap-cache-tree.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-scrap-cache-tree" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-sha1 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-sha1
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-sha1	2017-10-10 09:55:10.831194514 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-sha1	2017-10-10 09:58:41.333882795 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-sha1.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-sha1.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-sha1" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-sigchain /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-sigchain
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-sigchain	2017-10-10 09:55:10.835192514 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-sigchain	2017-10-10 09:58:41.333882795 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-sigchain.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-sigchain.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-sigchain" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-string-list /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-string-list
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-string-list	2017-10-10 09:55:10.835192514 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-string-list	2017-10-10 09:58:41.337880795 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-string-list.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-string-list.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-string-list" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-subprocess /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-subprocess
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-subprocess	2017-10-10 09:55:10.839190514 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-subprocess	2017-10-10 09:58:41.341878795 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-subprocess.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-subprocess.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-subprocess" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-svn-fe /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-svn-fe
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-svn-fe	2017-10-10 09:55:10.839190514 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-svn-fe	2017-10-10 09:58:41.341878795 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-svn-fe.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-svn-fe.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-svn-fe" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-urlmatch-normalization /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-urlmatch-normalization
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-urlmatch-normalization	2017-10-10 09:55:10.843188513 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-urlmatch-normalization	2017-10-10 09:58:41.345876794 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-urlmatch-normalization.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-urlmatch-normalization.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-urlmatch-normalization" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-wildmatch /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-wildmatch
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers/test-wildmatch	2017-10-10 09:55:10.843188513 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers/test-wildmatch	2017-10-10 09:58:41.345876794 +0800
@@ -1,22 +1,22 @@
 #!/bin/sh
 
 # wrap-for-bin.sh: Template for git executable wrapper scripts
 # to run test suite against sandbox, but with only bindir-installed
 # executables in PATH.  The Makefile copies this into various
 # files in bin-wrappers, substituting
-# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5 and test-wildmatch.
+# /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0 and test-wildmatch.
 
-GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+GIT_EXEC_PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 if test -n "$NO_SET_GIT_TEMPLATE_DIR"
 then
 	unset GIT_TEMPLATE_DIR
 else
-	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/blt'
+	GIT_TEMPLATE_DIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/blt'
 	export GIT_TEMPLATE_DIR
 fi
-GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
-GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/po/build/locale'
-PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bin-wrappers:'"$PATH"
+GITPERLLIB='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib'"${GITPERLLIB:+:$GITPERLLIB}"
+GIT_TEXTDOMAINDIR='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/po/build/locale'
+PATH='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bin-wrappers:'"$PATH"
 export GIT_EXEC_PATH GITPERLLIB PATH GIT_TEXTDOMAINDIR
 
 exec "${GIT_EXEC_PATH}/test-wildmatch" "$@"
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bisect.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bisect.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bisect.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bisect.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/blob.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/blob.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/blob.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/blob.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/block-sha1/sha1.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/block-sha1/sha1.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/block-sha1/sha1.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/block-sha1/sha1.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/branch.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/branch.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/branch.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/branch.c	2014-08-16 06:26:55.000000000 +0800
@@ -47,17 +47,17 @@
 	}
 	return 0;
 }
 
 void install_branch_config(int flag, const char *local, const char *origin, const char *remote)
 {
-	const char *shortname = skip_prefix(remote, "refs/heads/");
+	const char *shortname = NULL;
 	struct strbuf key = STRBUF_INIT;
 	int rebasing = should_setup_rebase(origin);
 
-	if (shortname
+	if (skip_prefix(remote, "refs/heads/", &shortname)
 	    && !strcmp(local, shortname)
 	    && !origin) {
 		warning(_("Not setting branch %s as its own upstream."),
 			local);
 		return;
 	}
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/branch.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/branch.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/branch.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/branch.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/build_ir.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/build_ir.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/build_ir.sh	2017-10-10 09:55:10.871174512 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/build_ir.sh	2017-10-10 09:58:41.365866794 +0800
@@ -11,1527 +11,1542 @@
 	then
 		succ=`expr $succ + 1`;
 	fi
 	total=`expr $total + 1`;
 }
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-store.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-store.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-store.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-store.c.bc
 check
-echo "1 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-store.c to bc" >&2
+echo "1 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-store.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/abspath.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/abspath.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/abspath.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/abspath.c.bc
 check
-echo "2 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/abspath.c to bc" >&2
+echo "2 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/abspath.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/advice.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/advice.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/advice.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/advice.c.bc
 check
-echo "3 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/advice.c to bc" >&2
+echo "3 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/advice.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/alias.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/alias.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/alias.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/alias.c.bc
 check
-echo "4 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/alias.c to bc" >&2
+echo "4 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/alias.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/alloc.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/alloc.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/alloc.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/alloc.c.bc
 check
-echo "5 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/alloc.c to bc" >&2
+echo "5 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/alloc.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive.c.bc
 check
-echo "6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive.c to bc" >&2
+echo "6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive-tar.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive-tar.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive-tar.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive-tar.c.bc
 check
-echo "7 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive-tar.c to bc" >&2
+echo "7 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive-tar.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive-zip.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive-zip.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive-zip.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive-zip.c.bc
 check
-echo "8 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive-zip.c to bc" >&2
+echo "8 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive-zip.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/argv-array.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/argv-array.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/argv-array.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/argv-array.c.bc
 check
-echo "9 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/argv-array.c to bc" >&2
+echo "9 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/argv-array.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DETC_GITATTRIBUTES=\"/usr/local/etc/gitattributes\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/attr.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/attr.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DETC_GITATTRIBUTES=\"/usr/local/etc/gitattributes\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/attr.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/attr.c.bc
 check
-echo "10 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/attr.c to bc" >&2
+echo "10 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/attr.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/base85.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/base85.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/base85.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/base85.c.bc
 check
-echo "11 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/base85.c to bc" >&2
+echo "11 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/base85.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bisect.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bisect.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bisect.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bisect.c.bc
 check
-echo "12 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bisect.c to bc" >&2
+echo "12 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bisect.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/blob.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/blob.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/blob.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/blob.c.bc
 check
-echo "13 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/blob.c to bc" >&2
+echo "13 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/blob.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/branch.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/branch.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/branch.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/branch.c.bc
 check
-echo "14 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/branch.c to bc" >&2
+echo "14 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/branch.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bulk-checkin.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bulk-checkin.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bulk-checkin.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bulk-checkin.c.bc
 check
-echo "15 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bulk-checkin.c to bc" >&2
+echo "15 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bulk-checkin.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bundle.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bundle.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bundle.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bundle.c.bc
 check
-echo "16 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bundle.c to bc" >&2
+echo "16 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bundle.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/cache-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/cache-tree.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/cache-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/cache-tree.c.bc
 check
-echo "17 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/cache-tree.c to bc" >&2
+echo "17 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/cache-tree.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/color.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/color.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/color.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/color.c.bc
 check
-echo "18 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/color.c to bc" >&2
+echo "18 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/color.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/column.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/column.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/column.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/column.c.bc
 check
-echo "19 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/column.c to bc" >&2
+echo "19 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/column.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/combine-diff.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/combine-diff.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/combine-diff.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/combine-diff.c.bc
 check
-echo "20 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/combine-diff.c to bc" >&2
+echo "20 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/combine-diff.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/commit.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/commit.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/commit.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/commit.c.bc
 check
-echo "21 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/commit.c to bc" >&2
+echo "21 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/commit.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/obstack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/obstack.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/obstack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/obstack.c.bc
 check
-echo "22 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/obstack.c to bc" >&2
+echo "22 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/obstack.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/terminal.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/terminal.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/terminal.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/terminal.c.bc
 check
-echo "23 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/terminal.c to bc" >&2
+echo "23 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/terminal.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DETC_GITCONFIG=\"/usr/local/etc/gitconfig\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/config.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/config.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DETC_GITCONFIG=\"/usr/local/etc/gitconfig\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/config.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/config.c.bc
 check
-echo "24 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/config.c to bc" >&2
+echo "24 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/config.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/connect.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/connect.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/connect.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/connect.c.bc
 check
-echo "25 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/connect.c to bc" >&2
+echo "25 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/connect.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/connected.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/connected.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/connected.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/connected.c.bc
 check
-echo "26 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/connected.c to bc" >&2
+echo "26 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/connected.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/convert.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/convert.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/convert.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/convert.c.bc
 check
-echo "27 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/convert.c to bc" >&2
+echo "27 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/convert.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/copy.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/copy.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/copy.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/copy.c.bc
 check
-echo "28 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/copy.c to bc" >&2
+echo "28 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/copy.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential.c.bc
 check
-echo "29 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential.c to bc" >&2
+echo "29 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/csum-file.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/csum-file.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/csum-file.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/csum-file.c.bc
 check
-echo "30 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/csum-file.c to bc" >&2
+echo "30 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/csum-file.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ctype.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ctype.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ctype.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ctype.c.bc
 check
-echo "31 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ctype.c to bc" >&2
+echo "31 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ctype.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/date.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/date.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/date.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/date.c.bc
 check
-echo "32 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/date.c to bc" >&2
+echo "32 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/date.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/decorate.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/decorate.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/decorate.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/decorate.c.bc
 check
-echo "33 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/decorate.c to bc" >&2
+echo "33 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/decorate.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-break.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-break.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-break.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-break.c.bc
 check
-echo "34 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-break.c to bc" >&2
+echo "34 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-break.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-delta.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-delta.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-delta.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-delta.c.bc
 check
-echo "35 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-delta.c to bc" >&2
+echo "35 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-delta.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-order.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-order.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-order.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-order.c.bc
 check
-echo "36 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-order.c to bc" >&2
+echo "36 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-order.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-pickaxe.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-pickaxe.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-pickaxe.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-pickaxe.c.bc
 check
-echo "37 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-pickaxe.c to bc" >&2
+echo "37 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-pickaxe.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-rename.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-rename.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-rename.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-rename.c.bc
 check
-echo "38 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-rename.c to bc" >&2
+echo "38 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-rename.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-delta.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-delta.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-delta.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-delta.c.bc
 check
-echo "39 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-delta.c to bc" >&2
+echo "39 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-delta.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-lib.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-lib.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-lib.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-lib.c.bc
 check
-echo "40 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-lib.c to bc" >&2
+echo "40 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-lib.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-no-index.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-no-index.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-no-index.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-no-index.c.bc
 check
-echo "41 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-no-index.c to bc" >&2
+echo "41 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-no-index.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff.c.bc
 check
-echo "42 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff.c to bc" >&2
+echo "42 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/dir.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/dir.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/dir.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/dir.c.bc
 check
-echo "43 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/dir.c to bc" >&2
+echo "43 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/dir.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/editor.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/editor.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/editor.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/editor.c.bc
 check
-echo "44 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/editor.c to bc" >&2
+echo "44 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/editor.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/entry.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/entry.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/entry.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/entry.c.bc
 check
-echo "45 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/entry.c to bc" >&2
+echo "45 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/entry.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/environment.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/environment.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/environment.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/environment.c.bc
 check
-echo "46 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/environment.c to bc" >&2
+echo "46 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/environment.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/bitmap.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/bitmap.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/bitmap.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/bitmap.c.bc
 check
-echo "47 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/bitmap.c to bc" >&2
+echo "47 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/bitmap.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_bitmap.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_bitmap.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_bitmap.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_bitmap.c.bc
 check
-echo "48 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_bitmap.c to bc" >&2
+echo "48 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_bitmap.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_io.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_io.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_io.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_io.c.bc
 check
-echo "49 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_io.c to bc" >&2
+echo "49 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_io.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_rlw.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_rlw.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_rlw.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_rlw.c.bc
 check
-echo "50 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_rlw.c to bc" >&2
+echo "50 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_rlw.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_EXEC_PATH=\"/usr/local/libexec/git-core\" -DBINDIR=\"bin\" -DPREFIX=\"/usr/local\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/exec_cmd.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/exec_cmd.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_EXEC_PATH=\"/usr/local/libexec/git-core\" -DBINDIR=\"bin\" -DPREFIX=\"/usr/local\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/exec_cmd.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/exec_cmd.c.bc
 check
-echo "51 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/exec_cmd.c to bc" >&2
+echo "51 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/exec_cmd.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fetch-pack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fetch-pack.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fetch-pack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fetch-pack.c.bc
 check
-echo "52 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fetch-pack.c to bc" >&2
+echo "52 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fetch-pack.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fsck.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fsck.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fsck.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fsck.c.bc
 check
-echo "53 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fsck.c to bc" >&2
+echo "53 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fsck.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_LOCALE_PATH=\"/usr/local/share/locale\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gettext.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gettext.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_LOCALE_PATH=\"/usr/local/share/locale\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gettext.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gettext.c.bc
 check
-echo "54 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gettext.c to bc" >&2
+echo "54 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gettext.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gpg-interface.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gpg-interface.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gpg-interface.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gpg-interface.c.bc
 check
-echo "55 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gpg-interface.c to bc" >&2
+echo "55 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gpg-interface.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/graph.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/graph.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/graph.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/graph.c.bc
 check
-echo "56 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/graph.c to bc" >&2
+echo "56 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/graph.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/grep.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/grep.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/grep.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/grep.c.bc
 check
-echo "57 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/grep.c to bc" >&2
+echo "57 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/grep.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/hashmap.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/hashmap.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/hashmap.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/hashmap.c.bc
 check
-echo "58 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/hashmap.c to bc" >&2
+echo "58 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/hashmap.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/help.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/help.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/help.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/help.c.bc
 check
-echo "59 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/help.c to bc" >&2
+echo "59 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/help.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/hex.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/hex.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/hex.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/hex.c.bc
 check
-echo "60 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/hex.c to bc" >&2
+echo "60 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/hex.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ident.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ident.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ident.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ident.c.bc
 check
-echo "61 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ident.c to bc" >&2
+echo "61 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ident.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/kwset.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/kwset.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/kwset.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/kwset.c.bc
 check
-echo "62 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/kwset.c to bc" >&2
+echo "62 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/kwset.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/levenshtein.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/levenshtein.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/levenshtein.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/levenshtein.c.bc
 check
-echo "63 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/levenshtein.c to bc" >&2
+echo "63 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/levenshtein.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/line-log.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/line-log.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/line-log.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/line-log.c.bc
 check
-echo "64 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/line-log.c to bc" >&2
+echo "64 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/line-log.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/line-range.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/line-range.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/line-range.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/line-range.c.bc
 check
-echo "65 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/line-range.c to bc" >&2
+echo "65 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/line-range.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/list-objects.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/list-objects.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/list-objects.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/list-objects.c.bc
 check
-echo "66 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/list-objects.c to bc" >&2
+echo "66 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/list-objects.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ll-merge.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ll-merge.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ll-merge.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ll-merge.c.bc
 check
-echo "67 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ll-merge.c to bc" >&2
+echo "67 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ll-merge.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/lockfile.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/lockfile.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/lockfile.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/lockfile.c.bc
 check
-echo "68 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/lockfile.c to bc" >&2
+echo "68 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/lockfile.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/log-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/log-tree.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/log-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/log-tree.c.bc
 check
-echo "69 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/log-tree.c to bc" >&2
+echo "69 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/log-tree.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/mailmap.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/mailmap.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/mailmap.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/mailmap.c.bc
 check
-echo "70 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/mailmap.c to bc" >&2
+echo "70 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/mailmap.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/match-trees.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/match-trees.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/match-trees.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/match-trees.c.bc
 check
-echo "71 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/match-trees.c to bc" >&2
+echo "71 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/match-trees.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge.c.bc
 check
-echo "72 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge.c to bc" >&2
+echo "72 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge-blobs.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge-blobs.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge-blobs.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge-blobs.c.bc
 check
-echo "73 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge-blobs.c to bc" >&2
+echo "73 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge-blobs.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge-recursive.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge-recursive.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge-recursive.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge-recursive.c.bc
 check
-echo "74 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge-recursive.c to bc" >&2
+echo "74 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge-recursive.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/mergesort.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/mergesort.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/mergesort.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/mergesort.c.bc
 check
-echo "75 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/mergesort.c to bc" >&2
+echo "75 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/mergesort.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/name-hash.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/name-hash.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/name-hash.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/name-hash.c.bc
 check
-echo "76 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/name-hash.c to bc" >&2
+echo "76 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/name-hash.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes.c.bc
 check
-echo "77 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes.c to bc" >&2
+echo "77 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-cache.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-cache.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-cache.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-cache.c.bc
 check
-echo "78 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-cache.c to bc" >&2
+echo "78 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-cache.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-merge.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-merge.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-merge.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-merge.c.bc
 check
-echo "79 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-merge.c to bc" >&2
+echo "79 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-merge.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-utils.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-utils.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-utils.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-utils.c.bc
 check
-echo "80 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-utils.c to bc" >&2
+echo "80 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-utils.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/object.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/object.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/object.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/object.c.bc
 check
-echo "81 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/object.c to bc" >&2
+echo "81 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/object.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-bitmap.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-bitmap.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-bitmap.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-bitmap.c.bc
 check
-echo "82 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-bitmap.c to bc" >&2
+echo "82 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-bitmap.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-bitmap-write.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-bitmap-write.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-bitmap-write.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-bitmap-write.c.bc
 check
-echo "83 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-bitmap-write.c to bc" >&2
+echo "83 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-bitmap-write.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-check.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-check.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-check.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-check.c.bc
 check
-echo "84 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-check.c to bc" >&2
+echo "84 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-check.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-objects.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-objects.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-objects.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-objects.c.bc
 check
-echo "85 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-objects.c to bc" >&2
+echo "85 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-objects.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-revindex.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-revindex.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-revindex.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-revindex.c.bc
 check
-echo "86 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-revindex.c to bc" >&2
+echo "86 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-revindex.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-write.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-write.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-write.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-write.c.bc
 check
-echo "87 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-write.c to bc" >&2
+echo "87 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-write.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pager.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pager.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pager.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pager.c.bc
 check
-echo "88 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pager.c to bc" >&2
+echo "88 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pager.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/parse-options.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/parse-options.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/parse-options.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/parse-options.c.bc
 check
-echo "89 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/parse-options.c to bc" >&2
+echo "89 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/parse-options.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/parse-options-cb.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/parse-options-cb.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/parse-options-cb.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/parse-options-cb.c.bc
 check
-echo "90 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/parse-options-cb.c to bc" >&2
+echo "90 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/parse-options-cb.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/patch-delta.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/patch-delta.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/patch-delta.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/patch-delta.c.bc
 check
-echo "91 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/patch-delta.c to bc" >&2
+echo "91 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/patch-delta.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/patch-ids.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/patch-ids.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/patch-ids.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/patch-ids.c.bc
 check
-echo "92 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/patch-ids.c to bc" >&2
+echo "92 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/patch-ids.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/path.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/path.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/path.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/path.c.bc
 check
-echo "93 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/path.c to bc" >&2
+echo "93 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/path.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pathspec.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pathspec.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pathspec.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pathspec.c.bc
 check
-echo "94 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pathspec.c to bc" >&2
+echo "94 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pathspec.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pkt-line.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pkt-line.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pkt-line.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pkt-line.c.bc
 check
-echo "95 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pkt-line.c to bc" >&2
+echo "95 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pkt-line.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/preload-index.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/preload-index.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/preload-index.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/preload-index.c.bc
 check
-echo "96 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/preload-index.c to bc" >&2
+echo "96 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/preload-index.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pretty.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pretty.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pretty.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pretty.c.bc
 check
-echo "97 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pretty.c to bc" >&2
+echo "97 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pretty.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/prio-queue.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/prio-queue.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/prio-queue.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/prio-queue.c.bc
 check
-echo "98 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/prio-queue.c to bc" >&2
+echo "98 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/prio-queue.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/progress.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/progress.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/progress.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/progress.c.bc
 check
-echo "99 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/progress.c to bc" >&2
+echo "99 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/progress.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/prompt.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/prompt.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/prompt.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/prompt.c.bc
 check
-echo "100 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/prompt.c to bc" >&2
+echo "100 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/prompt.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/quote.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/quote.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/quote.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/quote.c.bc
 check
-echo "101 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/quote.c to bc" >&2
+echo "101 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/quote.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/reachable.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/reachable.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/reachable.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/reachable.c.bc
 check
-echo "102 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/reachable.c to bc" >&2
+echo "102 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/reachable.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/read-cache.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/read-cache.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/read-cache.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/read-cache.c.bc
 check
-echo "103 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/read-cache.c to bc" >&2
+echo "103 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/read-cache.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/reflog-walk.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/reflog-walk.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/reflog-walk.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/reflog-walk.c.bc
 check
-echo "104 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/reflog-walk.c to bc" >&2
+echo "104 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/reflog-walk.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/refs.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/refs.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/refs.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/refs.c.bc
 check
-echo "105 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/refs.c to bc" >&2
+echo "105 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/refs.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote.c.bc
 check
-echo "106 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote.c to bc" >&2
+echo "106 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/replace_object.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/replace_object.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/replace_object.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/replace_object.c.bc
 check
-echo "107 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/replace_object.c to bc" >&2
+echo "107 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/replace_object.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/rerere.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/rerere.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/rerere.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/rerere.c.bc
 check
-echo "108 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/rerere.c to bc" >&2
+echo "108 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/rerere.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/resolve-undo.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/resolve-undo.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/resolve-undo.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/resolve-undo.c.bc
 check
-echo "109 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/resolve-undo.c to bc" >&2
+echo "109 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/resolve-undo.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/revision.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/revision.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/revision.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/revision.c.bc
 check
-echo "110 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/revision.c to bc" >&2
+echo "110 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/revision.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/run-command.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/run-command.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/run-command.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/run-command.c.bc
 check
-echo "111 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/run-command.c to bc" >&2
+echo "111 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/run-command.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/send-pack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/send-pack.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/send-pack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/send-pack.c.bc
 check
-echo "112 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/send-pack.c to bc" >&2
+echo "112 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/send-pack.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sequencer.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sequencer.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sequencer.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sequencer.c.bc
 check
-echo "113 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sequencer.c to bc" >&2
+echo "113 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sequencer.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/server-info.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/server-info.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/server-info.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/server-info.c.bc
 check
-echo "114 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/server-info.c to bc" >&2
+echo "114 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/server-info.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/setup.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/setup.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/setup.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/setup.c.bc
 check
-echo "115 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/setup.c to bc" >&2
+echo "115 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/setup.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1-array.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1-array.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1-array.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1-array.c.bc
 check
-echo "116 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1-array.c to bc" >&2
+echo "116 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1-array.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1-lookup.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1-lookup.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1-lookup.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1-lookup.c.bc
 check
-echo "117 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1-lookup.c to bc" >&2
+echo "117 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1-lookup.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1_file.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1_file.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1_file.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1_file.c.bc
 check
-echo "118 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1_file.c to bc" >&2
+echo "118 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1_file.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1_name.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1_name.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1_name.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1_name.c.bc
 check
-echo "119 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1_name.c to bc" >&2
+echo "119 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1_name.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/shallow.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/shallow.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/shallow.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/shallow.c.bc
 check
-echo "120 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/shallow.c to bc" >&2
+echo "120 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/shallow.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sideband.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sideband.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sideband.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sideband.c.bc
 check
-echo "121 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sideband.c to bc" >&2
+echo "121 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sideband.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sigchain.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sigchain.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sigchain.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sigchain.c.bc
 check
-echo "122 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sigchain.c to bc" >&2
+echo "122 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sigchain.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/strbuf.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/strbuf.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/split-index.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/split-index.c.bc
 check
-echo "123 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/strbuf.c to bc" >&2
+echo "123 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/split-index.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/streaming.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/streaming.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/strbuf.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/strbuf.c.bc
 check
-echo "124 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/streaming.c to bc" >&2
+echo "124 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/strbuf.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/string-list.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/string-list.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/streaming.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/streaming.c.bc
 check
-echo "125 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/string-list.c to bc" >&2
+echo "125 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/streaming.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/submodule.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/submodule.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/string-list.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/string-list.c.bc
 check
-echo "126 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/submodule.c to bc" >&2
+echo "126 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/string-list.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/symlinks.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/symlinks.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/submodule.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/submodule.c.bc
 check
-echo "127 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/symlinks.c to bc" >&2
+echo "127 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/submodule.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tag.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tag.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/symlinks.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/symlinks.c.bc
 check
-echo "128 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tag.c to bc" >&2
+echo "128 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/symlinks.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/trace.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/trace.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tag.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tag.c.bc
 check
-echo "129 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/trace.c to bc" >&2
+echo "129 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tag.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/transport.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/transport.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/trace.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/trace.c.bc
 check
-echo "130 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/transport.c to bc" >&2
+echo "130 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/trace.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/transport-helper.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/transport-helper.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/transport.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/transport.c.bc
 check
-echo "131 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/transport-helper.c to bc" >&2
+echo "131 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/transport.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree-diff.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree-diff.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/transport-helper.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/transport-helper.c.bc
 check
-echo "132 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree-diff.c to bc" >&2
+echo "132 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/transport-helper.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree-diff.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree-diff.c.bc
 check
-echo "133 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree.c to bc" >&2
+echo "133 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree-diff.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree-walk.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree-walk.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree.c.bc
 check
-echo "134 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree-walk.c to bc" >&2
+echo "134 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/unpack-trees.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/unpack-trees.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree-walk.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree-walk.c.bc
 check
-echo "135 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/unpack-trees.c to bc" >&2
+echo "135 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree-walk.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/url.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/url.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/unpack-trees.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/unpack-trees.c.bc
 check
-echo "136 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/url.c to bc" >&2
+echo "136 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/unpack-trees.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/urlmatch.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/urlmatch.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/url.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/url.c.bc
 check
-echo "137 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/urlmatch.c to bc" >&2
+echo "137 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/url.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/usage.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/usage.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/urlmatch.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/urlmatch.c.bc
 check
-echo "138 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/usage.c to bc" >&2
+echo "138 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/urlmatch.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/userdiff.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/userdiff.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/usage.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/usage.c.bc
 check
-echo "139 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/userdiff.c to bc" >&2
+echo "139 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/usage.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/utf8.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/utf8.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/userdiff.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/userdiff.c.bc
 check
-echo "140 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/utf8.c to bc" >&2
+echo "140 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/userdiff.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/varint.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/varint.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/utf8.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/utf8.c.bc
 check
-echo "141 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/varint.c to bc" >&2
+echo "141 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/utf8.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_VERSION=\"2.0.5\" -DGIT_USER_AGENT=\"git/2.0.5\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/version.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/version.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/varint.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/varint.c.bc
 check
-echo "142 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/version.c to bc" >&2
+echo "142 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/varint.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/versioncmp.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/versioncmp.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_VERSION=\"2.1.0\" -DGIT_USER_AGENT=\"git/2.1.0\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/version.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/version.c.bc
 check
-echo "143 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/versioncmp.c to bc" >&2
+echo "143 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/version.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/walker.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/walker.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/versioncmp.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/versioncmp.c.bc
 check
-echo "144 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/walker.c to bc" >&2
+echo "144 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/versioncmp.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wildmatch.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wildmatch.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/walker.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/walker.c.bc
 check
-echo "145 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wildmatch.c to bc" >&2
+echo "145 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/walker.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wrapper.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wrapper.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wildmatch.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wildmatch.c.bc
 check
-echo "146 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wrapper.c to bc" >&2
+echo "146 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wildmatch.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/write_or_die.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/write_or_die.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wrapper.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wrapper.c.bc
 check
-echo "147 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/write_or_die.c to bc" >&2
+echo "147 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wrapper.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ws.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ws.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/write_or_die.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/write_or_die.c.bc
 check
-echo "148 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ws.c to bc" >&2
+echo "148 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/write_or_die.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wt-status.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wt-status.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ws.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ws.c.bc
 check
-echo "149 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wt-status.c to bc" >&2
+echo "149 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ws.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff-interface.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff-interface.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wt-status.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wt-status.c.bc
 check
-echo "150 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff-interface.c to bc" >&2
+echo "150 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wt-status.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/zlib.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/zlib.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff-interface.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff-interface.c.bc
 check
-echo "151 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/zlib.c to bc" >&2
+echo "151 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff-interface.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/unix-socket.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/unix-socket.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/zlib.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/zlib.c.bc
 check
-echo "152 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/unix-socket.c to bc" >&2
+echo "152 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/zlib.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/block-sha1/sha1.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/block-sha1/sha1.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/unix-socket.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/unix-socket.c.bc
 check
-echo "153 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/block-sha1/sha1.c to bc" >&2
+echo "153 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/unix-socket.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/thread-utils.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/thread-utils.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/block-sha1/sha1.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/block-sha1/sha1.c.bc
 check
-echo "154 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/thread-utils.c to bc" >&2
+echo "154 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/block-sha1/sha1.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/strlcpy.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/strlcpy.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/thread-utils.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/thread-utils.c.bc
 check
-echo "155 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/strlcpy.c to bc" >&2
+echo "155 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/thread-utils.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xdiffi.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xdiffi.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/strlcpy.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/strlcpy.c.bc
 check
-echo "156 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xdiffi.c to bc" >&2
+echo "156 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/strlcpy.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xprepare.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xprepare.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xdiffi.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xdiffi.c.bc
 check
-echo "157 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xprepare.c to bc" >&2
+echo "157 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xdiffi.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xutils.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xutils.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xprepare.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xprepare.c.bc
 check
-echo "158 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xutils.c to bc" >&2
+echo "158 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xprepare.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xemit.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xemit.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xutils.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xutils.c.bc
 check
-echo "159 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xemit.c to bc" >&2
+echo "159 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xutils.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xmerge.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xmerge.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xemit.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xemit.c.bc
 check
-echo "160 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xmerge.c to bc" >&2
+echo "160 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xemit.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xpatience.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xpatience.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xmerge.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xmerge.c.bc
 check
-echo "161 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xpatience.c to bc" >&2
+echo "161 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xmerge.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xhistogram.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xhistogram.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xpatience.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xpatience.c.bc
 check
-echo "162 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xhistogram.c to bc" >&2
+echo "162 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xpatience.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/daemon.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/daemon.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xhistogram.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xhistogram.c.bc
 check
-echo "163 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/daemon.c to bc" >&2
+echo "163 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xhistogram.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fast-import.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fast-import.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/daemon.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/daemon.c.bc
 check
-echo "164 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fast-import.c to bc" >&2
+echo "164 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/daemon.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/http-backend.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/http-backend.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fast-import.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fast-import.c.bc
 check
-echo "165 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/http-backend.c to bc" >&2
+echo "165 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fast-import.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/imap-send.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/imap-send.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/http-backend.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/http-backend.c.bc
 check
-echo "166 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/imap-send.c to bc" >&2
+echo "166 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/http-backend.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sh-i18n--envsubst.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sh-i18n--envsubst.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/imap-send.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/imap-send.c.bc
 check
-echo "167 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sh-i18n--envsubst.c to bc" >&2
+echo "167 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/imap-send.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/shell.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/shell.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sh-i18n--envsubst.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sh-i18n--envsubst.c.bc
 check
-echo "168 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/shell.c to bc" >&2
+echo "168 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sh-i18n--envsubst.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/show-index.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/show-index.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/shell.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/shell.c.bc
 check
-echo "169 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/show-index.c to bc" >&2
+echo "169 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/shell.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/upload-pack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/upload-pack.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/show-index.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/show-index.c.bc
 check
-echo "170 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/upload-pack.c to bc" >&2
+echo "170 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/show-index.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote-testsvn.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote-testsvn.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/upload-pack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/upload-pack.c.bc
 check
-echo "171 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote-testsvn.c to bc" >&2
+echo "171 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/upload-pack.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/line_buffer.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/line_buffer.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote-testsvn.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote-testsvn.c.bc
 check
-echo "172 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/line_buffer.c to bc" >&2
+echo "172 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote-testsvn.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/sliding_window.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/sliding_window.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/line_buffer.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/line_buffer.c.bc
 check
-echo "173 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/sliding_window.c to bc" >&2
+echo "173 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/line_buffer.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/repo_tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/repo_tree.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/sliding_window.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/sliding_window.c.bc
 check
-echo "174 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/repo_tree.c to bc" >&2
+echo "174 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/sliding_window.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/fast_export.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/fast_export.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/repo_tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/repo_tree.c.bc
 check
-echo "175 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/fast_export.c to bc" >&2
+echo "175 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/repo_tree.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/svndiff.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/svndiff.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/fast_export.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/fast_export.c.bc
 check
-echo "176 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/svndiff.c to bc" >&2
+echo "176 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/fast_export.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/svndump.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/svndump.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/svndiff.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/svndiff.c.bc
 check
-echo "177 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/svndump.c to bc" >&2
+echo "177 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/svndiff.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-cache.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-cache.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/svndump.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/svndump.c.bc
 check
-echo "178 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-cache.c to bc" >&2
+echo "178 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/svndump.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-cache--daemon.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-cache--daemon.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-cache.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-cache.c.bc
 check
-echo "179 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-cache--daemon.c to bc" >&2
+echo "179 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-cache.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_HTML_PATH=\"share/doc/git\" -DGIT_MAN_PATH=\"share/man\" -DGIT_INFO_PATH=\"share/info\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-cache--daemon.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-cache--daemon.c.bc
 check
-echo "180 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git.c to bc" >&2
+echo "180 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-cache--daemon.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/add.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/add.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_HTML_PATH=\"share/doc/git\" -DGIT_MAN_PATH=\"share/man\" -DGIT_INFO_PATH=\"share/info\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git.c.bc
 check
-echo "181 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/add.c to bc" >&2
+echo "181 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/annotate.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/annotate.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/add.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/add.c.bc
 check
-echo "182 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/annotate.c to bc" >&2
+echo "182 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/add.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/apply.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/apply.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/annotate.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/annotate.c.bc
 check
-echo "183 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/apply.c to bc" >&2
+echo "183 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/annotate.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/archive.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/archive.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/apply.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/apply.c.bc
 check
-echo "184 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/archive.c to bc" >&2
+echo "184 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/apply.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/bisect--helper.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/bisect--helper.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/archive.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/archive.c.bc
 check
-echo "185 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/bisect--helper.c to bc" >&2
+echo "185 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/archive.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/blame.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/blame.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/bisect--helper.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/bisect--helper.c.bc
 check
-echo "186 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/blame.c to bc" >&2
+echo "186 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/bisect--helper.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/branch.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/branch.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/blame.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/blame.c.bc
 check
-echo "187 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/branch.c to bc" >&2
+echo "187 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/blame.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/bundle.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/bundle.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/branch.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/branch.c.bc
 check
-echo "188 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/bundle.c to bc" >&2
+echo "188 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/branch.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/cat-file.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/cat-file.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/bundle.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/bundle.c.bc
 check
-echo "189 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/cat-file.c to bc" >&2
+echo "189 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/bundle.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-attr.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-attr.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/cat-file.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/cat-file.c.bc
 check
-echo "190 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-attr.c to bc" >&2
+echo "190 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/cat-file.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-ignore.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-ignore.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-attr.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-attr.c.bc
 check
-echo "191 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-ignore.c to bc" >&2
+echo "191 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-attr.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-mailmap.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-mailmap.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-ignore.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-ignore.c.bc
 check
-echo "192 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-mailmap.c to bc" >&2
+echo "192 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-ignore.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-ref-format.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-ref-format.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-mailmap.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-mailmap.c.bc
 check
-echo "193 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-ref-format.c to bc" >&2
+echo "193 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-mailmap.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/checkout-index.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/checkout-index.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-ref-format.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-ref-format.c.bc
 check
-echo "194 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/checkout-index.c to bc" >&2
+echo "194 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-ref-format.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/checkout.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/checkout.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/checkout-index.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/checkout-index.c.bc
 check
-echo "195 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/checkout.c to bc" >&2
+echo "195 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/checkout-index.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/clean.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/clean.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/checkout.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/checkout.c.bc
 check
-echo "196 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/clean.c to bc" >&2
+echo "196 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/checkout.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/clone.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/clone.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/clean.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/clean.c.bc
 check
-echo "197 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/clone.c to bc" >&2
+echo "197 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/clean.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/column.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/column.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/clone.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/clone.c.bc
 check
-echo "198 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/column.c to bc" >&2
+echo "198 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/clone.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/commit-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/commit-tree.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/column.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/column.c.bc
 check
-echo "199 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/commit-tree.c to bc" >&2
+echo "199 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/column.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/commit.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/commit.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/commit-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/commit-tree.c.bc
 check
-echo "200 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/commit.c to bc" >&2
+echo "200 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/commit-tree.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/config.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/config.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/commit.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/commit.c.bc
 check
-echo "201 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/config.c to bc" >&2
+echo "201 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/commit.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/count-objects.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/count-objects.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/config.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/config.c.bc
 check
-echo "202 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/count-objects.c to bc" >&2
+echo "202 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/config.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/credential.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/credential.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/count-objects.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/count-objects.c.bc
 check
-echo "203 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/credential.c to bc" >&2
+echo "203 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/count-objects.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/describe.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/describe.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/credential.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/credential.c.bc
 check
-echo "204 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/describe.c to bc" >&2
+echo "204 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/credential.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-files.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-files.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/describe.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/describe.c.bc
 check
-echo "205 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-files.c to bc" >&2
+echo "205 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/describe.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-index.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-index.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-files.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-files.c.bc
 check
-echo "206 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-index.c to bc" >&2
+echo "206 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-files.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-tree.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-index.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-index.c.bc
 check
-echo "207 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-tree.c to bc" >&2
+echo "207 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-index.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-tree.c.bc
 check
-echo "208 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff.c to bc" >&2
+echo "208 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-tree.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fast-export.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fast-export.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff.c.bc
 check
-echo "209 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fast-export.c to bc" >&2
+echo "209 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fetch-pack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fetch-pack.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fast-export.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fast-export.c.bc
 check
-echo "210 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fetch-pack.c to bc" >&2
+echo "210 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fast-export.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fetch.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fetch.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fetch-pack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fetch-pack.c.bc
 check
-echo "211 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fetch.c to bc" >&2
+echo "211 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fetch-pack.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fmt-merge-msg.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fmt-merge-msg.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fetch.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fetch.c.bc
 check
-echo "212 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fmt-merge-msg.c to bc" >&2
+echo "212 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fetch.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/for-each-ref.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/for-each-ref.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fmt-merge-msg.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fmt-merge-msg.c.bc
 check
-echo "213 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/for-each-ref.c to bc" >&2
+echo "213 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fmt-merge-msg.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fsck.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fsck.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/for-each-ref.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/for-each-ref.c.bc
 check
-echo "214 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fsck.c to bc" >&2
+echo "214 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/for-each-ref.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/gc.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/gc.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fsck.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fsck.c.bc
 check
-echo "215 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/gc.c to bc" >&2
+echo "215 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fsck.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/get-tar-commit-id.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/get-tar-commit-id.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/gc.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/gc.c.bc
 check
-echo "216 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/get-tar-commit-id.c to bc" >&2
+echo "216 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/gc.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/grep.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/grep.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/get-tar-commit-id.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/get-tar-commit-id.c.bc
 check
-echo "217 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/grep.c to bc" >&2
+echo "217 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/get-tar-commit-id.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/hash-object.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/hash-object.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/grep.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/grep.c.bc
 check
-echo "218 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/hash-object.c to bc" >&2
+echo "218 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/grep.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_HTML_PATH=\"share/doc/git\" -DGIT_MAN_PATH=\"share/man\" -DGIT_INFO_PATH=\"share/info\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/help.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/help.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/hash-object.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/hash-object.c.bc
 check
-echo "219 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/help.c to bc" >&2
+echo "219 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/hash-object.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/index-pack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/index-pack.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_HTML_PATH=\"share/doc/git\" -DGIT_MAN_PATH=\"share/man\" -DGIT_INFO_PATH=\"share/info\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/help.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/help.c.bc
 check
-echo "220 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/index-pack.c to bc" >&2
+echo "220 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/help.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DDEFAULT_GIT_TEMPLATE_DIR=\"/usr/local/share/git-core/templates\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/init-db.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/init-db.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/index-pack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/index-pack.c.bc
 check
-echo "221 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/init-db.c to bc" >&2
+echo "221 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/index-pack.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/log.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/log.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DDEFAULT_GIT_TEMPLATE_DIR=\"/usr/local/share/git-core/templates\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/init-db.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/init-db.c.bc
 check
-echo "222 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/log.c to bc" >&2
+echo "222 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/init-db.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-files.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-files.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/log.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/log.c.bc
 check
-echo "223 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-files.c to bc" >&2
+echo "223 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/log.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-remote.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-remote.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-files.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-files.c.bc
 check
-echo "224 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-remote.c to bc" >&2
+echo "224 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-files.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-tree.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-remote.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-remote.c.bc
 check
-echo "225 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-tree.c to bc" >&2
+echo "225 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-remote.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mailinfo.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mailinfo.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-tree.c.bc
 check
-echo "226 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mailinfo.c to bc" >&2
+echo "226 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-tree.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mailsplit.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mailsplit.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mailinfo.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mailinfo.c.bc
 check
-echo "227 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mailsplit.c to bc" >&2
+echo "227 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mailinfo.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mailsplit.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mailsplit.c.bc
 check
-echo "228 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge.c to bc" >&2
+echo "228 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mailsplit.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-base.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-base.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge.c.bc
 check
-echo "229 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-base.c to bc" >&2
+echo "229 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-file.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-file.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-base.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-base.c.bc
 check
-echo "230 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-file.c to bc" >&2
+echo "230 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-base.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-index.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-index.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-file.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-file.c.bc
 check
-echo "231 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-index.c to bc" >&2
+echo "231 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-file.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-ours.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-ours.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-index.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-index.c.bc
 check
-echo "232 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-ours.c to bc" >&2
+echo "232 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-index.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-recursive.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-recursive.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-ours.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-ours.c.bc
 check
-echo "233 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-recursive.c to bc" >&2
+echo "233 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-ours.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-tree.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-recursive.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-recursive.c.bc
 check
-echo "234 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-tree.c to bc" >&2
+echo "234 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-recursive.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mktag.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mktag.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-tree.c.bc
 check
-echo "235 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mktag.c to bc" >&2
+echo "235 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-tree.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mktree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mktree.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mktag.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mktag.c.bc
 check
-echo "236 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mktree.c to bc" >&2
+echo "236 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mktag.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mv.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mv.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mktree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mktree.c.bc
 check
-echo "237 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mv.c to bc" >&2
+echo "237 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mktree.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/name-rev.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/name-rev.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mv.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mv.c.bc
 check
-echo "238 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/name-rev.c to bc" >&2
+echo "238 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mv.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/notes.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/notes.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/name-rev.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/name-rev.c.bc
 check
-echo "239 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/notes.c to bc" >&2
+echo "239 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/name-rev.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-objects.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-objects.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/notes.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/notes.c.bc
 check
-echo "240 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-objects.c to bc" >&2
+echo "240 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/notes.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-redundant.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-redundant.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-objects.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-objects.c.bc
 check
-echo "241 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-redundant.c to bc" >&2
+echo "241 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-objects.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-refs.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-refs.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-redundant.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-redundant.c.bc
 check
-echo "242 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-refs.c to bc" >&2
+echo "242 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-redundant.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/patch-id.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/patch-id.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-refs.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-refs.c.bc
 check
-echo "243 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/patch-id.c to bc" >&2
+echo "243 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-refs.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/prune-packed.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/prune-packed.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/patch-id.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/patch-id.c.bc
 check
-echo "244 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/prune-packed.c to bc" >&2
+echo "244 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/patch-id.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/prune.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/prune.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/prune-packed.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/prune-packed.c.bc
 check
-echo "245 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/prune.c to bc" >&2
+echo "245 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/prune-packed.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/push.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/push.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/prune.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/prune.c.bc
 check
-echo "246 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/push.c to bc" >&2
+echo "246 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/prune.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/read-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/read-tree.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/push.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/push.c.bc
 check
-echo "247 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/read-tree.c to bc" >&2
+echo "247 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/push.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/receive-pack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/receive-pack.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/read-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/read-tree.c.bc
 check
-echo "248 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/receive-pack.c to bc" >&2
+echo "248 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/read-tree.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/reflog.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/reflog.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/receive-pack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/receive-pack.c.bc
 check
-echo "249 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/reflog.c to bc" >&2
+echo "249 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/receive-pack.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/reflog.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/reflog.c.bc
 check
-echo "250 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote.c to bc" >&2
+echo "250 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/reflog.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote-ext.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote-ext.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote.c.bc
 check
-echo "251 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote-ext.c to bc" >&2
+echo "251 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote-fd.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote-fd.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote-ext.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote-ext.c.bc
 check
-echo "252 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote-fd.c to bc" >&2
+echo "252 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote-ext.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/repack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/repack.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote-fd.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote-fd.c.bc
 check
-echo "253 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/repack.c to bc" >&2
+echo "253 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote-fd.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/replace.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/replace.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/repack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/repack.c.bc
 check
-echo "254 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/replace.c to bc" >&2
+echo "254 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/repack.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rerere.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rerere.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/replace.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/replace.c.bc
 check
-echo "255 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rerere.c to bc" >&2
+echo "255 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/replace.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/reset.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/reset.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rerere.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rerere.c.bc
 check
-echo "256 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/reset.c to bc" >&2
+echo "256 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rerere.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rev-list.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rev-list.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/reset.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/reset.c.bc
 check
-echo "257 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rev-list.c to bc" >&2
+echo "257 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/reset.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rev-parse.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rev-parse.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rev-list.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rev-list.c.bc
 check
-echo "258 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rev-parse.c to bc" >&2
+echo "258 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rev-list.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/revert.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/revert.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rev-parse.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rev-parse.c.bc
 check
-echo "259 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/revert.c to bc" >&2
+echo "259 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rev-parse.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rm.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rm.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/revert.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/revert.c.bc
 check
-echo "260 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rm.c to bc" >&2
+echo "260 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/revert.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/send-pack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/send-pack.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rm.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rm.c.bc
 check
-echo "261 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/send-pack.c to bc" >&2
+echo "261 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rm.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/shortlog.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/shortlog.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/send-pack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/send-pack.c.bc
 check
-echo "262 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/shortlog.c to bc" >&2
+echo "262 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/send-pack.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/show-branch.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/show-branch.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/shortlog.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/shortlog.c.bc
 check
-echo "263 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/show-branch.c to bc" >&2
+echo "263 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/shortlog.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/show-ref.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/show-ref.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/show-branch.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/show-branch.c.bc
 check
-echo "264 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/show-ref.c to bc" >&2
+echo "264 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/show-branch.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/stripspace.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/stripspace.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/show-ref.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/show-ref.c.bc
 check
-echo "265 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/stripspace.c to bc" >&2
+echo "265 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/show-ref.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/symbolic-ref.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/symbolic-ref.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/stripspace.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/stripspace.c.bc
 check
-echo "266 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/symbolic-ref.c to bc" >&2
+echo "266 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/stripspace.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/tag.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/tag.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/symbolic-ref.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/symbolic-ref.c.bc
 check
-echo "267 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/tag.c to bc" >&2
+echo "267 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/symbolic-ref.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/unpack-file.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/unpack-file.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/tag.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/tag.c.bc
 check
-echo "268 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/unpack-file.c to bc" >&2
+echo "268 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/tag.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/unpack-objects.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/unpack-objects.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/unpack-file.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/unpack-file.c.bc
 check
-echo "269 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/unpack-objects.c to bc" >&2
+echo "269 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/unpack-file.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-index.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-index.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/unpack-objects.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/unpack-objects.c.bc
 check
-echo "270 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-index.c to bc" >&2
+echo "270 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/unpack-objects.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-ref.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-ref.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-index.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-index.c.bc
 check
-echo "271 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-ref.c to bc" >&2
+echo "271 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-index.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-server-info.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-server-info.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-ref.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-ref.c.bc
 check
-echo "272 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-server-info.c to bc" >&2
+echo "272 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-ref.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/upload-archive.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/upload-archive.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-server-info.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-server-info.c.bc
 check
-echo "273 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/upload-archive.c to bc" >&2
+echo "273 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-server-info.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/var.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/var.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/upload-archive.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/upload-archive.c.bc
 check
-echo "274 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/var.c to bc" >&2
+echo "274 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/upload-archive.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/verify-pack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/verify-pack.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/var.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/var.c.bc
 check
-echo "275 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/verify-pack.c to bc" >&2
+echo "275 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/var.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/verify-tag.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/verify-tag.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-commit.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-commit.c.bc
 check
-echo "276 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/verify-tag.c to bc" >&2
+echo "276 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-commit.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/write-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/write-tree.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-pack.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-pack.c.bc
 check
-echo "277 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/write-tree.c to bc" >&2
+echo "277 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-pack.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-chmtime.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-chmtime.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-tag.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-tag.c.bc
 check
-echo "278 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-chmtime.c to bc" >&2
+echo "278 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-tag.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-ctype.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-ctype.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/write-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/write-tree.c.bc
 check
-echo "279 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-ctype.c to bc" >&2
+echo "279 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/write-tree.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-date.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-date.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-chmtime.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-chmtime.c.bc
 check
-echo "280 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-date.c to bc" >&2
+echo "280 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-chmtime.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-delta.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-delta.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-ctype.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-ctype.c.bc
 check
-echo "281 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-delta.c to bc" >&2
+echo "281 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-ctype.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-dump-cache-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-dump-cache-tree.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-date.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-date.c.bc
 check
-echo "282 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-dump-cache-tree.c to bc" >&2
+echo "282 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-date.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-genrandom.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-genrandom.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-delta.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-delta.c.bc
 check
-echo "283 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-genrandom.c to bc" >&2
+echo "283 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-delta.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-hashmap.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-hashmap.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-dump-cache-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-dump-cache-tree.c.bc
 check
-echo "284 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-hashmap.c to bc" >&2
+echo "284 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-dump-cache-tree.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-index-version.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-index-version.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-dump-split-index.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-dump-split-index.c.bc
 check
-echo "285 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-index-version.c to bc" >&2
+echo "285 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-dump-split-index.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-line-buffer.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-line-buffer.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-genrandom.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-genrandom.c.bc
 check
-echo "286 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-line-buffer.c to bc" >&2
+echo "286 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-genrandom.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-match-trees.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-match-trees.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-hashmap.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-hashmap.c.bc
 check
-echo "287 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-match-trees.c to bc" >&2
+echo "287 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-hashmap.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-mergesort.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-mergesort.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-index-version.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-index-version.c.bc
 check
-echo "288 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-mergesort.c to bc" >&2
+echo "288 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-index-version.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-mktemp.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-mktemp.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-line-buffer.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-line-buffer.c.bc
 check
-echo "289 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-mktemp.c to bc" >&2
+echo "289 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-line-buffer.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-parse-options.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-parse-options.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-match-trees.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-match-trees.c.bc
 check
-echo "290 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-parse-options.c to bc" >&2
+echo "290 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-match-trees.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-path-utils.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-path-utils.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-mergesort.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-mergesort.c.bc
 check
-echo "291 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-path-utils.c to bc" >&2
+echo "291 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-mergesort.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-prio-queue.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-prio-queue.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-mktemp.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-mktemp.c.bc
 check
-echo "292 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-prio-queue.c to bc" >&2
+echo "292 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-mktemp.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-read-cache.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-read-cache.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-parse-options.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-parse-options.c.bc
 check
-echo "293 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-read-cache.c to bc" >&2
+echo "293 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-parse-options.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-regex.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-regex.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-path-utils.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-path-utils.c.bc
 check
-echo "294 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-regex.c to bc" >&2
+echo "294 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-path-utils.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-revision-walking.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-revision-walking.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-prio-queue.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-prio-queue.c.bc
 check
-echo "295 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-revision-walking.c to bc" >&2
+echo "295 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-prio-queue.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-run-command.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-run-command.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-read-cache.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-read-cache.c.bc
 check
-echo "296 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-run-command.c to bc" >&2
+echo "296 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-read-cache.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-scrap-cache-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-scrap-cache-tree.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-regex.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-regex.c.bc
 check
-echo "297 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-scrap-cache-tree.c to bc" >&2
+echo "297 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-regex.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-sha1.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-sha1.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-revision-walking.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-revision-walking.c.bc
 check
-echo "298 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-sha1.c to bc" >&2
+echo "298 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-revision-walking.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-sigchain.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-sigchain.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-run-command.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-run-command.c.bc
 check
-echo "299 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-sigchain.c to bc" >&2
+echo "299 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-run-command.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-string-list.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-string-list.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-scrap-cache-tree.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-scrap-cache-tree.c.bc
 check
-echo "300 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-string-list.c to bc" >&2
+echo "300 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-scrap-cache-tree.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-subprocess.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-subprocess.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-sha1.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-sha1.c.bc
 check
-echo "301 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-subprocess.c to bc" >&2
+echo "301 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-sha1.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-svn-fe.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-svn-fe.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-sigchain.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-sigchain.c.bc
 check
-echo "302 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-svn-fe.c to bc" >&2
+echo "302 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-sigchain.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-urlmatch-normalization.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-urlmatch-normalization.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-string-list.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-string-list.c.bc
 check
-echo "303 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-urlmatch-normalization.c to bc" >&2
+echo "303 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-string-list.c to bc" >&2
 
-cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5
-clang -g -emit-llvm -I. -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-wildmatch.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-wildmatch.c.bc
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-subprocess.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-subprocess.c.bc
 check
-echo "304 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-wildmatch.c to bc" >&2
+echo "304 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-subprocess.c to bc" >&2
+
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-svn-fe.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-svn-fe.c.bc
+check
+echo "305 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-svn-fe.c to bc" >&2
+
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-urlmatch-normalization.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-urlmatch-normalization.c.bc
+check
+echo "306 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-urlmatch-normalization.c to bc" >&2
+
+cd /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0
+clang -g -emit-llvm -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-wildmatch.c -o /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-wildmatch.c.bc
+check
+echo "307 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-wildmatch.c to bc" >&2
 echo "Total ir $total" >&2
 echo "Succ ir $succ" >&2
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/add.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/add.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/add.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/add.c	2014-08-16 06:26:55.000000000 +0800
@@ -296,13 +296,12 @@
 	return exit_status;
 }
 
 int cmd_add(int argc, const char **argv, const char *prefix)
 {
 	int exit_status = 0;
-	int newfd;
 	struct pathspec pathspec;
 	struct dir_struct dir;
 	int flags;
 	int add_new_files;
 	int require_pathspec;
 	char *seen = NULL;
@@ -342,13 +341,13 @@
 		argv = whole;
 	}
 
 	add_new_files = !take_worktree_changes && !refresh_only;
 	require_pathspec = !take_worktree_changes;
 
-	newfd = hold_locked_index(&lock_file, 1);
+	hold_locked_index(&lock_file, 1);
 
 	flags = ((verbose ? ADD_CACHE_VERBOSE : 0) |
 		 (show_only ? ADD_CACHE_PRETEND : 0) |
 		 (intent_to_add ? ADD_CACHE_INTENT : 0) |
 		 (ignore_add_errors ? ADD_CACHE_IGNORE_ERRORS : 0) |
 		 (!(addremove || take_worktree_changes)
@@ -440,13 +439,12 @@
 		exit_status |= add_files(&dir, flags);
 
 	unplug_bulk_checkin();
 
 finish:
 	if (active_cache_changed) {
-		if (write_cache(newfd, active_cache, active_nr) ||
-		    commit_locked_index(&lock_file))
+		if (write_locked_index(&the_index, &lock_file, COMMIT_LOCK))
 			die(_("Unable to write new index file"));
 	}
 
 	return exit_status;
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/add.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/add.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/add.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/add.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/annotate.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/annotate.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/annotate.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/annotate.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/apply.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/apply.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/apply.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/apply.c	2014-08-16 06:26:55.000000000 +0800
@@ -1072,13 +1072,13 @@
 	len = ptr - line;
 	memcpy(patch->old_sha1_prefix, line, len);
 	patch->old_sha1_prefix[len] = 0;
 
 	line = ptr + 2;
 	ptr = strchr(line, ' ');
-	eol = strchr(line, '\n');
+	eol = strchrnul(line, '\n');
 
 	if (!ptr || eol < ptr)
 		ptr = eol;
 	len = ptr - line;
 
 	if (40 < len)
@@ -1278,15 +1278,13 @@
 	 * rest of the headers anywhere (pure mode changes,
 	 * or removing or adding empty files), so we get
 	 * the default name from the header.
 	 */
 	patch->def_name = git_header_name(line, len);
 	if (patch->def_name && root) {
-		char *s = xmalloc(root_len + strlen(patch->def_name) + 1);
-		strcpy(s, root);
-		strcpy(s + root_len, patch->def_name);
+		char *s = xstrfmt("%s%s", root, patch->def_name);
 		free(patch->def_name);
 		patch->def_name = s;
 	}
 
 	line += len;
 	size -= len;
@@ -3081,19 +3079,21 @@
 			item->util = PATH_TO_BE_DELETED;
 		}
 		patch = patch->next;
 	}
 }
 
-static int checkout_target(struct cache_entry *ce, struct stat *st)
+static int checkout_target(struct index_state *istate,
+			   struct cache_entry *ce, struct stat *st)
 {
 	struct checkout costate;
 
 	memset(&costate, 0, sizeof(costate));
 	costate.base_dir = "";
 	costate.refresh_cache = 1;
+	costate.istate = istate;
 	if (checkout_entry(ce, &costate, NULL) || lstat(ce->name, st))
 		return error(_("cannot checkout %s"), ce->name);
 	return 0;
 }
 
 static struct patch *previous_patch(struct patch *patch, int *gone)
@@ -3254,13 +3254,13 @@
 	if (pos < 0)
 		return error(_("%s: does not exist in index"), name);
 	ce = active_cache[pos];
 	if (lstat(name, &st)) {
 		if (errno != ENOENT)
 			return error(_("%s: %s"), name, strerror(errno));
-		if (checkout_target(ce, &st))
+		if (checkout_target(&the_index, ce, &st))
 			return -1;
 	}
 	if (verify_index_match(ce, &st))
 		return error(_("%s: does not match index"), name);
 
 	status = load_patch_target(&buf, ce, &st, name, mode);
@@ -3408,13 +3408,13 @@
 			if (patch->is_new < 0)
 				goto is_new;
 			return error(_("%s: does not exist in index"), old_name);
 		}
 		*ce = active_cache[pos];
 		if (stat_ret < 0) {
-			if (checkout_target(*ce, st))
+			if (checkout_target(&the_index, *ce, st))
 				return -1;
 		}
 		if (!cached && verify_index_match(*ce, st))
 			return error(_("%s: does not match index"), old_name);
 		if (cached)
 			st_mode = (*ce)->ce_mode;
@@ -3641,13 +3641,13 @@
 
 /* Build an index that contains the just the files needed for a 3way merge */
 static void build_fake_ancestor(struct patch *list, const char *filename)
 {
 	struct patch *patch;
 	struct index_state result = { NULL };
-	int fd;
+	static struct lock_file lock;
 
 	/* Once we start supporting the reverse patch, it may be
 	 * worth showing the new sha1 prefix, but until then...
 	 */
 	for (patch = list; patch; patch = patch->next) {
 		unsigned char sha1[20];
@@ -3679,14 +3679,14 @@
 		if (!ce)
 			die(_("make_cache_entry failed for path '%s'"), name);
 		if (add_index_entry(&result, ce, ADD_CACHE_OK_TO_ADD))
 			die ("Could not add %s to temporary index", name);
 	}
 
-	fd = open(filename, O_WRONLY | O_CREAT, 0666);
-	if (fd < 0 || write_index(&result, fd) || close(fd))
+	hold_lock_file_for_update(&lock, filename, LOCK_DIE_ON_ERROR);
+	if (write_locked_index(&result, &lock, COMMIT_LOCK))
 		die ("Could not write temporary index to %s", filename);
 
 	discard_index(&result);
 }
 
 static void stat_patch_list(struct patch *patch)
@@ -3842,15 +3842,16 @@
 	ce = xcalloc(1, ce_size);
 	memcpy(ce->name, path, namelen);
 	ce->ce_mode = create_ce_mode(mode);
 	ce->ce_flags = create_ce_flags(0);
 	ce->ce_namelen = namelen;
 	if (S_ISGITLINK(mode)) {
-		const char *s = buf;
+		const char *s;
 
-		if (get_sha1_hex(s + strlen("Subproject commit "), ce->sha1))
+		if (!skip_prefix(buf, "Subproject commit ", &s) ||
+		    get_sha1_hex(s, ce->sha1))
 			die(_("corrupt patch for submodule %s"), path);
 	} else {
 		if (!cached) {
 			if (lstat(path, &st) < 0)
 				die_errno(_("unable to stat newly created file '%s'"),
 					  path);
@@ -4498,13 +4499,12 @@
 				   "%d lines add whitespace errors.",
 				   whitespace_error),
 				whitespace_error);
 	}
 
 	if (update_index) {
-		if (write_cache(newfd, active_cache, active_nr) ||
-		    commit_locked_index(&lock_file))
+		if (write_locked_index(&the_index, &lock_file, COMMIT_LOCK))
 			die(_("Unable to write new index file"));
 	}
 
 	return !!errs;
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/apply.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/apply.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/apply.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/apply.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/archive.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/archive.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/archive.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/archive.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/bisect--helper.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/bisect--helper.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/bisect--helper.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/bisect--helper.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/blame.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/blame.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/blame.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/blame.c	2014-08-16 06:26:55.000000000 +0800
@@ -1,10 +1,11 @@
 /*
  * Blame
  *
- * Copyright (c) 2006, Junio C Hamano
+ * Copyright (c) 2006, 2014 by its authors
+ * See COPYING for licensing conditions
  */
 
 #include "cache.h"
 #include "builtin.h"
 #include "blob.h"
 #include "commit.h"
@@ -15,13 +16,15 @@
 #include "revision.h"
 #include "quote.h"
 #include "xdiff-interface.h"
 #include "cache-tree.h"
 #include "string-list.h"
 #include "mailmap.h"
+#include "mergesort.h"
 #include "parse-options.h"
+#include "prio-queue.h"
 #include "utf8.h"
 #include "userdiff.h"
 #include "line-range.h"
 #include "line-log.h"
 
 static char blame_usage[] = N_("git blame [options] [rev-opts] [rev] [--] file");
@@ -80,17 +83,48 @@
 
 /*
  * One blob in a commit that is being suspected
  */
 struct origin {
 	int refcnt;
+	/* Record preceding blame record for this blob */
 	struct origin *previous;
+	/* origins are put in a list linked via `next' hanging off the
+	 * corresponding commit's util field in order to make finding
+	 * them fast.  The presence in this chain does not count
+	 * towards the origin's reference count.  It is tempting to
+	 * let it count as long as the commit is pending examination,
+	 * but even under circumstances where the commit will be
+	 * present multiple times in the priority queue of unexamined
+	 * commits, processing the first instance will not leave any
+	 * work requiring the origin data for the second instance.  An
+	 * interspersed commit changing that would have to be
+	 * preexisting with a different ancestry and with the same
+	 * commit date in order to wedge itself between two instances
+	 * of the same commit in the priority queue _and_ produce
+	 * blame entries relevant for it.  While we don't want to let
+	 * us get tripped up by this case, it certainly does not seem
+	 * worth optimizing for.
+	 */
+	struct origin *next;
 	struct commit *commit;
+	/* `suspects' contains blame entries that may be attributed to
+	 * this origin's commit or to parent commits.  When a commit
+	 * is being processed, all suspects will be moved, either by
+	 * assigning them to an origin in a different commit, or by
+	 * shipping them to the scoreboard's ent list because they
+	 * cannot be attributed to a different commit.
+	 */
+	struct blame_entry *suspects;
 	mmfile_t file;
 	unsigned char blob_sha1[20];
 	unsigned mode;
+	/* guilty gets set when shipping any suspects to the final
+	 * blame list instead of other commits
+	 */
+	char guilty;
 	char path[FLEX_ARRAY];
 };
 
 static int diff_hunks(mmfile_t *file_a, mmfile_t *file_b, long ctxlen,
 		      xdl_emit_hunk_consume_func_t hunk_func, void *cb_data)
 {
@@ -173,16 +207,28 @@
 	return o;
 }
 
 static void origin_decref(struct origin *o)
 {
 	if (o && --o->refcnt <= 0) {
+		struct origin *p, *l = NULL;
 		if (o->previous)
 			origin_decref(o->previous);
 		free(o->file.ptr);
-		free(o);
+		/* Should be present exactly once in commit chain */
+		for (p = o->commit->util; p; l = p, p = p->next) {
+			if (p == o) {
+				if (l)
+					l->next = p->next;
+				else
+					o->commit->util = p->next;
+				free(o);
+				return;
+			}
+		}
+		die("internal error in blame::origin_decref");
 	}
 }
 
 static void drop_origin_blob(struct origin *o)
 {
 	if (o->file.ptr) {
@@ -190,14 +236,18 @@
 		o->file.ptr = NULL;
 	}
 }
 
 /*
  * Each group of lines is described by a blame_entry; it can be split
- * as we pass blame to the parents.  They form a linked list in the
- * scoreboard structure, sorted by the target line number.
+ * as we pass blame to the parents.  They are arranged in linked lists
+ * kept as `suspects' of some unprocessed origin, or entered (when the
+ * blame origin has been finalized) into the scoreboard structure.
+ * While the scoreboard structure is only sorted at the end of
+ * processing (according to final image line number), the lists
+ * attached to an origin are sorted by the target line number.
  */
 struct blame_entry {
 	struct blame_entry *next;
 
 	/* the first line of this group in the final image;
 	 * internally all line numbers are 0 based.
@@ -207,38 +257,130 @@
 	/* how many lines this group has */
 	int num_lines;
 
 	/* the commit that introduced this group into the final image */
 	struct origin *suspect;
 
-	/* true if the suspect is truly guilty; false while we have not
-	 * checked if the group came from one of its parents.
-	 */
-	char guilty;
-
-	/* true if the entry has been scanned for copies in the current parent
-	 */
-	char scanned;
-
 	/* the line number of the first line of this group in the
 	 * suspect's file; internally all line numbers are 0 based.
 	 */
 	int s_lno;
 
 	/* how significant this entry is -- cached to avoid
 	 * scanning the lines over and over.
 	 */
 	unsigned score;
 };
 
 /*
+ * Any merge of blames happens on lists of blames that arrived via
+ * different parents in a single suspect.  In this case, we want to
+ * sort according to the suspect line numbers as opposed to the final
+ * image line numbers.  The function body is somewhat longish because
+ * it avoids unnecessary writes.
+ */
+
+static struct blame_entry *blame_merge(struct blame_entry *list1,
+				       struct blame_entry *list2)
+{
+	struct blame_entry *p1 = list1, *p2 = list2,
+		**tail = &list1;
+
+	if (!p1)
+		return p2;
+	if (!p2)
+		return p1;
+
+	if (p1->s_lno <= p2->s_lno) {
+		do {
+			tail = &p1->next;
+			if ((p1 = *tail) == NULL) {
+				*tail = p2;
+				return list1;
+			}
+		} while (p1->s_lno <= p2->s_lno);
+	}
+	for (;;) {
+		*tail = p2;
+		do {
+			tail = &p2->next;
+			if ((p2 = *tail) == NULL)  {
+				*tail = p1;
+				return list1;
+			}
+		} while (p1->s_lno > p2->s_lno);
+		*tail = p1;
+		do {
+			tail = &p1->next;
+			if ((p1 = *tail) == NULL) {
+				*tail = p2;
+				return list1;
+			}
+		} while (p1->s_lno <= p2->s_lno);
+	}
+}
+
+static void *get_next_blame(const void *p)
+{
+	return ((struct blame_entry *)p)->next;
+}
+
+static void set_next_blame(void *p1, void *p2)
+{
+	((struct blame_entry *)p1)->next = p2;
+}
+
+/*
+ * Final image line numbers are all different, so we don't need a
+ * three-way comparison here.
+ */
+
+static int compare_blame_final(const void *p1, const void *p2)
+{
+	return ((struct blame_entry *)p1)->lno > ((struct blame_entry *)p2)->lno
+		? 1 : -1;
+}
+
+static int compare_blame_suspect(const void *p1, const void *p2)
+{
+	const struct blame_entry *s1 = p1, *s2 = p2;
+	/*
+	 * to allow for collating suspects, we sort according to the
+	 * respective pointer value as the primary sorting criterion.
+	 * The actual relation is pretty unimportant as long as it
+	 * establishes a total order.  Comparing as integers gives us
+	 * that.
+	 */
+	if (s1->suspect != s2->suspect)
+		return (intptr_t)s1->suspect > (intptr_t)s2->suspect ? 1 : -1;
+	if (s1->s_lno == s2->s_lno)
+		return 0;
+	return s1->s_lno > s2->s_lno ? 1 : -1;
+}
+
+static struct blame_entry *blame_sort(struct blame_entry *head,
+				      int (*compare_fn)(const void *, const void *))
+{
+	return llist_mergesort (head, get_next_blame, set_next_blame, compare_fn);
+}
+
+static int compare_commits_by_reverse_commit_date(const void *a,
+						  const void *b,
+						  void *c)
+{
+	return -compare_commits_by_commit_date(a, b, c);
+}
+
+/*
  * The current state of the blame assignment.
  */
 struct scoreboard {
 	/* the final commit (i.e. where we started digging from) */
 	struct commit *final;
+	/* Priority queue for commits with unassigned blame records */
+	struct prio_queue commits;
 	struct rev_info *revs;
 	const char *path;
 
 	/*
 	 * The contents in the final image.
 	 * Used by many functions to obtain contents of the nth line,
@@ -265,13 +407,12 @@
 static void coalesce(struct scoreboard *sb)
 {
 	struct blame_entry *ent, *next;
 
 	for (ent = sb->ent; ent && (next = ent->next); ent = next) {
 		if (ent->suspect == next->suspect &&
-		    ent->guilty == next->guilty &&
 		    ent->s_lno + ent->num_lines == next->s_lno) {
 			ent->num_lines += next->num_lines;
 			ent->next = next->next;
 			origin_decref(next->suspect);
 			free(next);
 			ent->score = 0;
@@ -281,40 +422,73 @@
 
 	if (DEBUG) /* sanity */
 		sanity_check_refcnt(sb);
 }
 
 /*
+ * Merge the given sorted list of blames into a preexisting origin.
+ * If there were no previous blames to that commit, it is entered into
+ * the commit priority queue of the score board.
+ */
+
+static void queue_blames(struct scoreboard *sb, struct origin *porigin,
+			 struct blame_entry *sorted)
+{
+	if (porigin->suspects)
+		porigin->suspects = blame_merge(porigin->suspects, sorted);
+	else {
+		struct origin *o;
+		for (o = porigin->commit->util; o; o = o->next) {
+			if (o->suspects) {
+				porigin->suspects = sorted;
+				return;
+			}
+		}
+		porigin->suspects = sorted;
+		prio_queue_put(&sb->commits, porigin->commit);
+	}
+}
+
+/*
  * Given a commit and a path in it, create a new origin structure.
  * The callers that add blame to the scoreboard should use
  * get_origin() to obtain shared, refcounted copy instead of calling
  * this function directly.
  */
 static struct origin *make_origin(struct commit *commit, const char *path)
 {
 	struct origin *o;
 	o = xcalloc(1, sizeof(*o) + strlen(path) + 1);
 	o->commit = commit;
 	o->refcnt = 1;
+	o->next = commit->util;
+	commit->util = o;
 	strcpy(o->path, path);
 	return o;
 }
 
 /*
  * Locate an existing origin or create a new one.
+ * This moves the origin to front position in the commit util list.
  */
 static struct origin *get_origin(struct scoreboard *sb,
 				 struct commit *commit,
 				 const char *path)
 {
-	struct blame_entry *e;
+	struct origin *o, *l;
 
-	for (e = sb->ent; e; e = e->next) {
-		if (e->suspect->commit == commit &&
-		    !strcmp(e->suspect->path, path))
-			return origin_incref(e->suspect);
+	for (o = commit->util, l = NULL; o; l = o, o = o->next) {
+		if (!strcmp(o->path, path)) {
+			/* bump to front */
+			if (l) {
+				l->next = o->next;
+				o->next = commit->util;
+				commit->util = o;
+			}
+			return origin_incref(o);
+		}
 	}
 	return make_origin(commit, path);
 }
 
 /*
  * Fill the blob_sha1 field of an origin if it hasn't, so that later
@@ -347,47 +521,25 @@
  * parent and return an origin structure to represent it.
  */
 static struct origin *find_origin(struct scoreboard *sb,
 				  struct commit *parent,
 				  struct origin *origin)
 {
-	struct origin *porigin = NULL;
+	struct origin *porigin;
 	struct diff_options diff_opts;
 	const char *paths[2];
 
-	if (parent->util) {
-		/*
-		 * Each commit object can cache one origin in that
-		 * commit.  This is a freestanding copy of origin and
-		 * not refcounted.
-		 */
-		struct origin *cached = parent->util;
-		if (!strcmp(cached->path, origin->path)) {
+	/* First check any existing origins */
+	for (porigin = parent->util; porigin; porigin = porigin->next)
+		if (!strcmp(porigin->path, origin->path)) {
 			/*
 			 * The same path between origin and its parent
 			 * without renaming -- the most common case.
 			 */
-			porigin = get_origin(sb, parent, cached->path);
-
-			/*
-			 * If the origin was newly created (i.e. get_origin
-			 * would call make_origin if none is found in the
-			 * scoreboard), it does not know the blob_sha1/mode,
-			 * so copy it.  Otherwise porigin was in the
-			 * scoreboard and already knows blob_sha1/mode.
-			 */
-			if (porigin->refcnt == 1) {
-				hashcpy(porigin->blob_sha1, cached->blob_sha1);
-				porigin->mode = cached->mode;
-			}
-			return porigin;
+			return origin_incref (porigin);
 		}
-		/* otherwise it was not very useful; free it */
-		free(parent->util);
-		parent->util = NULL;
-	}
 
 	/* See if the origin->path is different between parent
 	 * and origin first.  Most of the time they are the
 	 * same and diff-tree is fairly efficient about this.
 	 */
 	diff_setup(&diff_opts);
@@ -447,25 +599,12 @@
 			/* Did not exist in parent, or type changed */
 			break;
 		}
 	}
 	diff_flush(&diff_opts);
 	free_pathspec(&diff_opts.pathspec);
-	if (porigin) {
-		/*
-		 * Create a freestanding copy that is not part of
-		 * the refcounted origin found in the scoreboard, and
-		 * cache it in the commit.
-		 */
-		struct origin *cached;
-
-		cached = make_origin(porigin->commit, porigin->path);
-		hashcpy(cached->blob_sha1, porigin->blob_sha1);
-		cached->mode = porigin->mode;
-		parent->util = cached;
-	}
 	return porigin;
 }
 
 /*
  * We have an origin -- find the path that corresponds to it in its
  * parent and return an origin structure to represent it.
@@ -506,52 +645,37 @@
 	diff_flush(&diff_opts);
 	free_pathspec(&diff_opts.pathspec);
 	return porigin;
 }
 
 /*
- * Link in a new blame entry to the scoreboard.  Entries that cover the
- * same line range have been removed from the scoreboard previously.
+ * Append a new blame entry to a given output queue.
  */
-static void add_blame_entry(struct scoreboard *sb, struct blame_entry *e)
+static void add_blame_entry(struct blame_entry ***queue, struct blame_entry *e)
 {
-	struct blame_entry *ent, *prev = NULL;
-
 	origin_incref(e->suspect);
 
-	for (ent = sb->ent; ent && ent->lno < e->lno; ent = ent->next)
-		prev = ent;
-
-	/* prev, if not NULL, is the last one that is below e */
-
-	if (prev) {
-		e->next = prev->next;
-		prev->next = e;
-	}
-	else {
-		e->next = sb->ent;
-		sb->ent = e;
-	}
+	e->next = **queue;
+	**queue = e;
+	*queue = &e->next;
 }
 
 /*
  * src typically is on-stack; we want to copy the information in it to
- * a malloced blame_entry that is already on the linked list of the
- * scoreboard.  The origin of dst loses a refcnt while the origin of src
- * gains one.
+ * a malloced blame_entry that gets added to the given queue.  The
+ * origin of dst loses a refcnt.
  */
-static void dup_entry(struct blame_entry *dst, struct blame_entry *src)
+static void dup_entry(struct blame_entry ***queue,
+		      struct blame_entry *dst, struct blame_entry *src)
 {
-	struct blame_entry *n;
-
-	n = dst->next;
 	origin_incref(src->suspect);
 	origin_decref(dst->suspect);
 	memcpy(dst, src, sizeof(*src));
-	dst->next = n;
-	dst->score = 0;
+	dst->next = **queue;
+	**queue = dst;
+	*queue = &dst->next;
 }
 
 static const char *nth_line(struct scoreboard *sb, long lno)
 {
 	return sb->final_buf + sb->lineno[lno];
 }
@@ -617,78 +741,57 @@
 		return;
 	split[1].suspect = origin_incref(parent);
 }
 
 /*
  * split_overlap() divided an existing blame e into up to three parts
- * in split.  Adjust the linked list of blames in the scoreboard to
+ * in split.  Any assigned blame is moved to queue to
  * reflect the split.
  */
-static void split_blame(struct scoreboard *sb,
+static void split_blame(struct blame_entry ***blamed,
+			struct blame_entry ***unblamed,
 			struct blame_entry *split,
 			struct blame_entry *e)
 {
 	struct blame_entry *new_entry;
 
 	if (split[0].suspect && split[2].suspect) {
 		/* The first part (reuse storage for the existing entry e) */
-		dup_entry(e, &split[0]);
+		dup_entry(unblamed, e, &split[0]);
 
 		/* The last part -- me */
 		new_entry = xmalloc(sizeof(*new_entry));
 		memcpy(new_entry, &(split[2]), sizeof(struct blame_entry));
-		add_blame_entry(sb, new_entry);
+		add_blame_entry(unblamed, new_entry);
 
 		/* ... and the middle part -- parent */
 		new_entry = xmalloc(sizeof(*new_entry));
 		memcpy(new_entry, &(split[1]), sizeof(struct blame_entry));
-		add_blame_entry(sb, new_entry);
+		add_blame_entry(blamed, new_entry);
 	}
 	else if (!split[0].suspect && !split[2].suspect)
 		/*
 		 * The parent covers the entire area; reuse storage for
 		 * e and replace it with the parent.
 		 */
-		dup_entry(e, &split[1]);
+		dup_entry(blamed, e, &split[1]);
 	else if (split[0].suspect) {
 		/* me and then parent */
-		dup_entry(e, &split[0]);
+		dup_entry(unblamed, e, &split[0]);
 
 		new_entry = xmalloc(sizeof(*new_entry));
 		memcpy(new_entry, &(split[1]), sizeof(struct blame_entry));
-		add_blame_entry(sb, new_entry);
+		add_blame_entry(blamed, new_entry);
 	}
 	else {
 		/* parent and then me */
-		dup_entry(e, &split[1]);
+		dup_entry(blamed, e, &split[1]);
 
 		new_entry = xmalloc(sizeof(*new_entry));
 		memcpy(new_entry, &(split[2]), sizeof(struct blame_entry));
-		add_blame_entry(sb, new_entry);
-	}
-
-	if (DEBUG) { /* sanity */
-		struct blame_entry *ent;
-		int lno = sb->ent->lno, corrupt = 0;
-
-		for (ent = sb->ent; ent; ent = ent->next) {
-			if (lno != ent->lno)
-				corrupt = 1;
-			if (ent->s_lno < 0)
-				corrupt = 1;
-			lno += ent->num_lines;
-		}
-		if (corrupt) {
-			lno = sb->ent->lno;
-			for (ent = sb->ent; ent; ent = ent->next) {
-				printf("L %8d l %8d n %8d\n",
-				       lno, ent->lno, ent->num_lines);
-				lno = ent->lno + ent->num_lines;
-			}
-			die("oops");
-		}
+		add_blame_entry(unblamed, new_entry);
 	}
 }
 
 /*
  * After splitting the blame, the origins used by the
  * on-stack blame_entry should lose one refcnt each.
@@ -699,111 +802,186 @@
 
 	for (i = 0; i < 3; i++)
 		origin_decref(split[i].suspect);
 }
 
 /*
- * Helper for blame_chunk().  blame_entry e is known to overlap with
- * the patch hunk; split it and pass blame to the parent.
- */
-static void blame_overlap(struct scoreboard *sb, struct blame_entry *e,
-			  int tlno, int plno, int same,
-			  struct origin *parent)
-{
-	struct blame_entry split[3];
-
-	split_overlap(split, e, tlno, plno, same, parent);
-	if (split[1].suspect)
-		split_blame(sb, split, e);
-	decref_split(split);
-}
-
-/*
- * Find the line number of the last line the target is suspected for.
- */
-static int find_last_in_target(struct scoreboard *sb, struct origin *target)
-{
-	struct blame_entry *e;
-	int last_in_target = -1;
-
-	for (e = sb->ent; e; e = e->next) {
-		if (e->guilty || e->suspect != target)
-			continue;
-		if (last_in_target < e->s_lno + e->num_lines)
-			last_in_target = e->s_lno + e->num_lines;
+ * reverse_blame reverses the list given in head, appending tail.
+ * That allows us to build lists in reverse order, then reverse them
+ * afterwards.  This can be faster than building the list in proper
+ * order right away.  The reason is that building in proper order
+ * requires writing a link in the _previous_ element, while building
+ * in reverse order just requires placing the list head into the
+ * _current_ element.
+ */
+
+static struct blame_entry *reverse_blame(struct blame_entry *head,
+					 struct blame_entry *tail)
+{
+	while (head) {
+		struct blame_entry *next = head->next;
+		head->next = tail;
+		tail = head;
+		head = next;
 	}
-	return last_in_target;
+	return tail;
 }
 
 /*
  * Process one hunk from the patch between the current suspect for
- * blame_entry e and its parent.  Find and split the overlap, and
- * pass blame to the overlapping part to the parent.
- */
-static void blame_chunk(struct scoreboard *sb,
-			int tlno, int plno, int same,
-			struct origin *target, struct origin *parent)
+ * blame_entry e and its parent.  This first blames any unfinished
+ * entries before the chunk (which is where target and parent start
+ * differing) on the parent, and then splits blame entries at the
+ * start and at the end of the difference region.  Since use of -M and
+ * -C options may lead to overlapping/duplicate source line number
+ * ranges, all we can rely on from sorting/merging is the order of the
+ * first suspect line number.
+ */
+static void blame_chunk(struct blame_entry ***dstq, struct blame_entry ***srcq,
+			int tlno, int offset, int same,
+			struct origin *parent)
 {
-	struct blame_entry *e;
+	struct blame_entry *e = **srcq;
+	struct blame_entry *samep = NULL, *diffp = NULL;
 
-	for (e = sb->ent; e; e = e->next) {
-		if (e->guilty || e->suspect != target)
-			continue;
-		if (same <= e->s_lno)
-			continue;
-		if (tlno < e->s_lno + e->num_lines)
-			blame_overlap(sb, e, tlno, plno, same, parent);
+	while (e && e->s_lno < tlno) {
+		struct blame_entry *next = e->next;
+		/*
+		 * current record starts before differing portion.  If
+		 * it reaches into it, we need to split it up and
+		 * examine the second part separately.
+		 */
+		if (e->s_lno + e->num_lines > tlno) {
+			/* Move second half to a new record */
+			int len = tlno - e->s_lno;
+			struct blame_entry *n = xcalloc(1, sizeof (struct blame_entry));
+			n->suspect = e->suspect;
+			n->lno = e->lno + len;
+			n->s_lno = e->s_lno + len;
+			n->num_lines = e->num_lines - len;
+			e->num_lines = len;
+			e->score = 0;
+			/* Push new record to diffp */
+			n->next = diffp;
+			diffp = n;
+		} else
+			origin_decref(e->suspect);
+		/* Pass blame for everything before the differing
+		 * chunk to the parent */
+		e->suspect = origin_incref(parent);
+		e->s_lno += offset;
+		e->next = samep;
+		samep = e;
+		e = next;
 	}
+	/*
+	 * As we don't know how much of a common stretch after this
+	 * diff will occur, the currently blamed parts are all that we
+	 * can assign to the parent for now.
+	 */
+
+	if (samep) {
+		**dstq = reverse_blame(samep, **dstq);
+		*dstq = &samep->next;
+	}
+	/*
+	 * Prepend the split off portions: everything after e starts
+	 * after the blameable portion.
+	 */
+	e = reverse_blame(diffp, e);
+
+	/*
+	 * Now retain records on the target while parts are different
+	 * from the parent.
+	 */
+	samep = NULL;
+	diffp = NULL;
+	while (e && e->s_lno < same) {
+		struct blame_entry *next = e->next;
+
+		/*
+		 * If current record extends into sameness, need to split.
+		 */
+		if (e->s_lno + e->num_lines > same) {
+			/*
+			 * Move second half to a new record to be
+			 * processed by later chunks
+			 */
+			int len = same - e->s_lno;
+			struct blame_entry *n = xcalloc(1, sizeof (struct blame_entry));
+			n->suspect = origin_incref(e->suspect);
+			n->lno = e->lno + len;
+			n->s_lno = e->s_lno + len;
+			n->num_lines = e->num_lines - len;
+			e->num_lines = len;
+			e->score = 0;
+			/* Push new record to samep */
+			n->next = samep;
+			samep = n;
+		}
+		e->next = diffp;
+		diffp = e;
+		e = next;
+	}
+	**srcq = reverse_blame(diffp, reverse_blame(samep, e));
+	/* Move across elements that are in the unblamable portion */
+	if (diffp)
+		*srcq = &diffp->next;
 }
 
 struct blame_chunk_cb_data {
-	struct scoreboard *sb;
-	struct origin *target;
 	struct origin *parent;
-	long plno;
-	long tlno;
+	long offset;
+	struct blame_entry **dstq;
+	struct blame_entry **srcq;
 };
 
+/* diff chunks are from parent to target */
 static int blame_chunk_cb(long start_a, long count_a,
 			  long start_b, long count_b, void *data)
 {
 	struct blame_chunk_cb_data *d = data;
-	blame_chunk(d->sb, d->tlno, d->plno, start_b, d->target, d->parent);
-	d->plno = start_a + count_a;
-	d->tlno = start_b + count_b;
+	if (start_a - start_b != d->offset)
+		die("internal error in blame::blame_chunk_cb");
+	blame_chunk(&d->dstq, &d->srcq, start_b, start_a - start_b,
+		    start_b + count_b, d->parent);
+	d->offset = start_a + count_a - (start_b + count_b);
 	return 0;
 }
 
 /*
  * We are looking at the origin 'target' and aiming to pass blame
  * for the lines it is suspected to its parent.  Run diff to find
  * which lines came from parent and pass blame for them.
  */
-static int pass_blame_to_parent(struct scoreboard *sb,
-				struct origin *target,
-				struct origin *parent)
+static void pass_blame_to_parent(struct scoreboard *sb,
+				 struct origin *target,
+				 struct origin *parent)
 {
-	int last_in_target;
 	mmfile_t file_p, file_o;
 	struct blame_chunk_cb_data d;
+	struct blame_entry *newdest = NULL;
 
-	memset(&d, 0, sizeof(d));
-	d.sb = sb; d.target = target; d.parent = parent;
-	last_in_target = find_last_in_target(sb, target);
-	if (last_in_target < 0)
-		return 1; /* nothing remains for this target */
+	if (!target->suspects)
+		return; /* nothing remains for this target */
+
+	d.parent = parent;
+	d.offset = 0;
+	d.dstq = &newdest; d.srcq = &target->suspects;
 
 	fill_origin_blob(&sb->revs->diffopt, parent, &file_p);
 	fill_origin_blob(&sb->revs->diffopt, target, &file_o);
 	num_get_patch++;
 
 	diff_hunks(&file_p, &file_o, 0, blame_chunk_cb, &d);
-	/* The rest (i.e. anything after tlno) are the same as the parent */
-	blame_chunk(sb, d.tlno, d.plno, last_in_target, target, parent);
+	/* The rest are the same as the parent */
+	blame_chunk(&d.dstq, &d.srcq, INT_MAX, d.offset, INT_MAX, parent);
+	*d.dstq = NULL;
+	queue_blames(sb, parent, newdest);
 
-	return 0;
+	return;
 }
 
 /*
  * The lines in blame_entry after splitting blames many times can become
  * very small and trivial, and at some point it becomes pointless to
  * blame the parents.  E.g. "\t\t}\n\t}\n\n" appears everywhere in any
@@ -942,116 +1120,137 @@
 	memset(split, 0, sizeof(struct blame_entry [3]));
 	diff_hunks(file_p, &file_o, 1, handle_split_cb, &d);
 	/* remainder, if any, all match the preimage */
 	handle_split(sb, ent, d.tlno, d.plno, ent->num_lines, parent, split);
 }
 
+/* Move all blame entries from list *source that have a score smaller
+ * than score_min to the front of list *small.
+ * Returns a pointer to the link pointing to the old head of the small list.
+ */
+
+static struct blame_entry **filter_small(struct scoreboard *sb,
+					 struct blame_entry **small,
+					 struct blame_entry **source,
+					 unsigned score_min)
+{
+	struct blame_entry *p = *source;
+	struct blame_entry *oldsmall = *small;
+	while (p) {
+		if (ent_score(sb, p) <= score_min) {
+			*small = p;
+			small = &p->next;
+			p = *small;
+		} else {
+			*source = p;
+			source = &p->next;
+			p = *source;
+		}
+	}
+	*small = oldsmall;
+	*source = NULL;
+	return small;
+}
+
 /*
  * See if lines currently target is suspected for can be attributed to
  * parent.
  */
-static int find_move_in_parent(struct scoreboard *sb,
-			       struct origin *target,
-			       struct origin *parent)
+static void find_move_in_parent(struct scoreboard *sb,
+				struct blame_entry ***blamed,
+				struct blame_entry **toosmall,
+				struct origin *target,
+				struct origin *parent)
 {
-	int last_in_target, made_progress;
 	struct blame_entry *e, split[3];
+	struct blame_entry *unblamed = target->suspects;
+	struct blame_entry *leftover = NULL;
 	mmfile_t file_p;
 
-	last_in_target = find_last_in_target(sb, target);
-	if (last_in_target < 0)
-		return 1; /* nothing remains for this target */
+	if (!unblamed)
+		return; /* nothing remains for this target */
 
 	fill_origin_blob(&sb->revs->diffopt, parent, &file_p);
 	if (!file_p.ptr)
-		return 0;
+		return;
 
-	made_progress = 1;
-	while (made_progress) {
-		made_progress = 0;
-		for (e = sb->ent; e; e = e->next) {
-			if (e->guilty || e->suspect != target ||
-			    ent_score(sb, e) < blame_move_score)
-				continue;
+	/* At each iteration, unblamed has a NULL-terminated list of
+	 * entries that have not yet been tested for blame.  leftover
+	 * contains the reversed list of entries that have been tested
+	 * without being assignable to the parent.
+	 */
+	do {
+		struct blame_entry **unblamedtail = &unblamed;
+		struct blame_entry *next;
+		for (e = unblamed; e; e = next) {
+			next = e->next;
 			find_copy_in_blob(sb, e, parent, split, &file_p);
 			if (split[1].suspect &&
 			    blame_move_score < ent_score(sb, &split[1])) {
-				split_blame(sb, split, e);
-				made_progress = 1;
+				split_blame(blamed, &unblamedtail, split, e);
+			} else {
+				e->next = leftover;
+				leftover = e;
 			}
 			decref_split(split);
 		}
-	}
-	return 0;
+		*unblamedtail = NULL;
+		toosmall = filter_small(sb, toosmall, &unblamed, blame_move_score);
+	} while (unblamed);
+	target->suspects = reverse_blame(leftover, NULL);
 }
 
 struct blame_list {
 	struct blame_entry *ent;
 	struct blame_entry split[3];
 };
 
 /*
  * Count the number of entries the target is suspected for,
  * and prepare a list of entry and the best split.
  */
-static struct blame_list *setup_blame_list(struct scoreboard *sb,
-					   struct origin *target,
-					   int min_score,
+static struct blame_list *setup_blame_list(struct blame_entry *unblamed,
 					   int *num_ents_p)
 {
 	struct blame_entry *e;
 	int num_ents, i;
 	struct blame_list *blame_list = NULL;
 
-	for (e = sb->ent, num_ents = 0; e; e = e->next)
-		if (!e->scanned && !e->guilty &&
-		    e->suspect == target &&
-		    min_score < ent_score(sb, e))
-			num_ents++;
+	for (e = unblamed, num_ents = 0; e; e = e->next)
+		num_ents++;
 	if (num_ents) {
 		blame_list = xcalloc(num_ents, sizeof(struct blame_list));
-		for (e = sb->ent, i = 0; e; e = e->next)
-			if (!e->scanned && !e->guilty &&
-			    e->suspect == target &&
-			    min_score < ent_score(sb, e))
-				blame_list[i++].ent = e;
+		for (e = unblamed, i = 0; e; e = e->next)
+			blame_list[i++].ent = e;
 	}
 	*num_ents_p = num_ents;
 	return blame_list;
 }
 
 /*
- * Reset the scanned status on all entries.
- */
-static void reset_scanned_flag(struct scoreboard *sb)
-{
-	struct blame_entry *e;
-	for (e = sb->ent; e; e = e->next)
-		e->scanned = 0;
-}
-
-/*
  * For lines target is suspected for, see if we can find code movement
  * across file boundary from the parent commit.  porigin is the path
  * in the parent we already tried.
  */
-static int find_copy_in_parent(struct scoreboard *sb,
-			       struct origin *target,
-			       struct commit *parent,
-			       struct origin *porigin,
-			       int opt)
+static void find_copy_in_parent(struct scoreboard *sb,
+				struct blame_entry ***blamed,
+				struct blame_entry **toosmall,
+				struct origin *target,
+				struct commit *parent,
+				struct origin *porigin,
+				int opt)
 {
 	struct diff_options diff_opts;
 	int i, j;
-	int retval;
 	struct blame_list *blame_list;
 	int num_ents;
+	struct blame_entry *unblamed = target->suspects;
+	struct blame_entry *leftover = NULL;
 
-	blame_list = setup_blame_list(sb, target, blame_copy_score, &num_ents);
-	if (!blame_list)
-		return 1; /* nothing remains for this target */
+	if (!unblamed)
+		return; /* nothing remains for this target */
 
 	diff_setup(&diff_opts);
 	DIFF_OPT_SET(&diff_opts, RECURSIVE);
 	diff_opts.output_format = DIFF_FORMAT_NO_OUTPUT;
 
 	diff_setup_done(&diff_opts);
@@ -1075,15 +1274,15 @@
 			       target->commit->tree->object.sha1,
 			       "", &diff_opts);
 
 	if (!DIFF_OPT_TST(&diff_opts, FIND_COPIES_HARDER))
 		diffcore_std(&diff_opts);
 
-	retval = 0;
-	while (1) {
-		int made_progress = 0;
+	do {
+		struct blame_entry **unblamedtail = &unblamed;
+		blame_list = setup_blame_list(unblamed, &num_ents);
 
 		for (i = 0; i < diff_queued_diff.nr; i++) {
 			struct diff_filepair *p = diff_queued_diff.queue[i];
 			struct origin *norigin;
 			mmfile_t file_p;
 			struct blame_entry this[3];
@@ -1114,56 +1313,51 @@
 		}
 
 		for (j = 0; j < num_ents; j++) {
 			struct blame_entry *split = blame_list[j].split;
 			if (split[1].suspect &&
 			    blame_copy_score < ent_score(sb, &split[1])) {
-				split_blame(sb, split, blame_list[j].ent);
-				made_progress = 1;
+				split_blame(blamed, &unblamedtail, split,
+					    blame_list[j].ent);
+			} else {
+				blame_list[j].ent->next = leftover;
+				leftover = blame_list[j].ent;
 			}
-			else
-				blame_list[j].ent->scanned = 1;
 			decref_split(split);
 		}
 		free(blame_list);
-
-		if (!made_progress)
-			break;
-		blame_list = setup_blame_list(sb, target, blame_copy_score, &num_ents);
-		if (!blame_list) {
-			retval = 1;
-			break;
-		}
-	}
-	reset_scanned_flag(sb);
+		*unblamedtail = NULL;
+		toosmall = filter_small(sb, toosmall, &unblamed, blame_copy_score);
+	} while (unblamed);
+	target->suspects = reverse_blame(leftover, NULL);
 	diff_flush(&diff_opts);
 	free_pathspec(&diff_opts.pathspec);
-	return retval;
 }
 
 /*
  * The blobs of origin and porigin exactly match, so everything
  * origin is suspected for can be blamed on the parent.
  */
 static void pass_whole_blame(struct scoreboard *sb,
 			     struct origin *origin, struct origin *porigin)
 {
-	struct blame_entry *e;
+	struct blame_entry *e, *suspects;
 
 	if (!porigin->file.ptr && origin->file.ptr) {
 		/* Steal its file */
 		porigin->file = origin->file;
 		origin->file.ptr = NULL;
 	}
-	for (e = sb->ent; e; e = e->next) {
-		if (e->suspect != origin)
-			continue;
+	suspects = origin->suspects;
+	origin->suspects = NULL;
+	for (e = suspects; e; e = e->next) {
 		origin_incref(porigin);
 		origin_decref(e->suspect);
 		e->suspect = porigin;
 	}
+	queue_blames(sb, porigin, suspects);
 }
 
 /*
  * We pass blame from the current commit to its parents.  We keep saying
  * "parent" (and "porigin"), but what we mean is to find scapegoat to
  * exonerate ourselves.
@@ -1174,29 +1368,49 @@
 		return commit->parents;
 	return lookup_decoration(&revs->children, &commit->object);
 }
 
 static int num_scapegoats(struct rev_info *revs, struct commit *commit)
 {
-	int cnt;
 	struct commit_list *l = first_scapegoat(revs, commit);
-	for (cnt = 0; l; l = l->next)
-		cnt++;
-	return cnt;
+	return commit_list_count(l);
+}
+
+/* Distribute collected unsorted blames to the respected sorted lists
+ * in the various origins.
+ */
+static void distribute_blame(struct scoreboard *sb, struct blame_entry *blamed)
+{
+	blamed = blame_sort(blamed, compare_blame_suspect);
+	while (blamed)
+	{
+		struct origin *porigin = blamed->suspect;
+		struct blame_entry *suspects = NULL;
+		do {
+			struct blame_entry *next = blamed->next;
+			blamed->next = suspects;
+			suspects = blamed;
+			blamed = next;
+		} while (blamed && blamed->suspect == porigin);
+		suspects = reverse_blame(suspects, NULL);
+		queue_blames(sb, porigin, suspects);
+	}
 }
 
 #define MAXSG 16
 
 static void pass_blame(struct scoreboard *sb, struct origin *origin, int opt)
 {
 	struct rev_info *revs = sb->revs;
 	int i, pass, num_sg;
 	struct commit *commit = origin->commit;
 	struct commit_list *sg;
 	struct origin *sg_buf[MAXSG];
 	struct origin *porigin, **sg_origin = sg_buf;
+	struct blame_entry *toosmall = NULL;
+	struct blame_entry *blames, **blametail = &blames;
 
 	num_sg = num_scapegoats(revs, commit);
 	if (!num_sg)
 		goto finish;
 	else if (num_sg < ARRAY_SIZE(sg_buf))
 		memset(sg_buf, 0, sizeof(sg_buf));
@@ -1252,44 +1466,77 @@
 		if (!porigin)
 			continue;
 		if (!origin->previous) {
 			origin_incref(porigin);
 			origin->previous = porigin;
 		}
-		if (pass_blame_to_parent(sb, origin, porigin))
+		pass_blame_to_parent(sb, origin, porigin);
+		if (!origin->suspects)
 			goto finish;
 	}
 
 	/*
 	 * Optionally find moves in parents' files.
 	 */
-	if (opt & PICKAXE_BLAME_MOVE)
-		for (i = 0, sg = first_scapegoat(revs, commit);
-		     i < num_sg && sg;
-		     sg = sg->next, i++) {
-			struct origin *porigin = sg_origin[i];
-			if (!porigin)
-				continue;
-			if (find_move_in_parent(sb, origin, porigin))
-				goto finish;
+	if (opt & PICKAXE_BLAME_MOVE) {
+		filter_small(sb, &toosmall, &origin->suspects, blame_move_score);
+		if (origin->suspects) {
+			for (i = 0, sg = first_scapegoat(revs, commit);
+			     i < num_sg && sg;
+			     sg = sg->next, i++) {
+				struct origin *porigin = sg_origin[i];
+				if (!porigin)
+					continue;
+				find_move_in_parent(sb, &blametail, &toosmall, origin, porigin);
+				if (!origin->suspects)
+					break;
+			}
 		}
+	}
 
 	/*
 	 * Optionally find copies from parents' files.
 	 */
-	if (opt & PICKAXE_BLAME_COPY)
+	if (opt & PICKAXE_BLAME_COPY) {
+		if (blame_copy_score > blame_move_score)
+			filter_small(sb, &toosmall, &origin->suspects, blame_copy_score);
+		else if (blame_copy_score < blame_move_score) {
+			origin->suspects = blame_merge(origin->suspects, toosmall);
+			toosmall = NULL;
+			filter_small(sb, &toosmall, &origin->suspects, blame_copy_score);
+		}
+		if (!origin->suspects)
+			goto finish;
+
 		for (i = 0, sg = first_scapegoat(revs, commit);
 		     i < num_sg && sg;
 		     sg = sg->next, i++) {
 			struct origin *porigin = sg_origin[i];
-			if (find_copy_in_parent(sb, origin, sg->item,
-						porigin, opt))
+			find_copy_in_parent(sb, &blametail, &toosmall,
+					    origin, sg->item, porigin, opt);
+			if (!origin->suspects)
 				goto finish;
 		}
+	}
 
- finish:
+finish:
+	*blametail = NULL;
+	distribute_blame(sb, blames);
+	/*
+	 * prepend toosmall to origin->suspects
+	 *
+	 * There is no point in sorting: this ends up on a big
+	 * unsorted list in the caller anyway.
+	 */
+	if (toosmall) {
+		struct blame_entry **tail = &toosmall;
+		while (*tail)
+			tail = &(*tail)->next;
+		*tail = origin->suspects;
+		origin->suspects = toosmall;
+	}
 	for (i = 0; i < num_sg; i++) {
 		if (sg_origin[i]) {
 			drop_origin_blob(sg_origin[i]);
 			origin_decref(sg_origin[i]);
 		}
 	}
@@ -1478,20 +1725,17 @@
 	commit_info_destroy(&ci);
 
 	return 1;
 }
 
 /*
- * The blame_entry is found to be guilty for the range.  Mark it
- * as such, and show it in incremental output.
+ * The blame_entry is found to be guilty for the range.
+ * Show it in incremental output.
  */
 static void found_guilty_entry(struct blame_entry *ent)
 {
-	if (ent->guilty)
-		return;
-	ent->guilty = 1;
 	if (incremental) {
 		struct origin *suspect = ent->suspect;
 
 		printf("%s %d %d %d\n",
 		       sha1_to_hex(suspect->commit->object.sha1),
 		       ent->s_lno + 1, ent->lno + 1, ent->num_lines);
@@ -1499,38 +1743,40 @@
 		write_filename_info(suspect->path);
 		maybe_flush_or_die(stdout, "stdout");
 	}
 }
 
 /*
- * The main loop -- while the scoreboard has lines whose true origin
- * is still unknown, pick one blame_entry, and allow its current
- * suspect to pass blames to its parents.
- */
+ * The main loop -- while we have blobs with lines whose true origin
+ * is still unknown, pick one blob, and allow its lines to pass blames
+ * to its parents. */
 static void assign_blame(struct scoreboard *sb, int opt)
 {
 	struct rev_info *revs = sb->revs;
+	struct commit *commit = prio_queue_get(&sb->commits);
 
-	while (1) {
+	while (commit) {
 		struct blame_entry *ent;
-		struct commit *commit;
-		struct origin *suspect = NULL;
+		struct origin *suspect = commit->util;
 
 		/* find one suspect to break down */
-		for (ent = sb->ent; !suspect && ent; ent = ent->next)
-			if (!ent->guilty)
-				suspect = ent->suspect;
-		if (!suspect)
-			return; /* all done */
+		while (suspect && !suspect->suspects)
+			suspect = suspect->next;
+
+		if (!suspect) {
+			commit = prio_queue_get(&sb->commits);
+			continue;
+		}
+
+		assert(commit == suspect->commit);
 
 		/*
 		 * We will use this suspect later in the loop,
 		 * so hold onto it in the meantime.
 		 */
 		origin_incref(suspect);
-		commit = suspect->commit;
 		parse_commit(commit);
 		if (reverse ||
 		    (!(commit->object.flags & UNINTERESTING) &&
 		     !(revs->max_age != -1 && commit->date < revs->max_age)))
 			pass_blame(sb, suspect, opt);
 		else {
@@ -1540,15 +1786,28 @@
 		}
 		/* treat root commit as boundary */
 		if (!commit->parents && !show_root)
 			commit->object.flags |= UNINTERESTING;
 
 		/* Take responsibility for the remaining entries */
-		for (ent = sb->ent; ent; ent = ent->next)
-			if (ent->suspect == suspect)
+		ent = suspect->suspects;
+		if (ent) {
+			suspect->guilty = 1;
+			for (;;) {
+				struct blame_entry *next = ent->next;
 				found_guilty_entry(ent);
+				if (next) {
+					ent = next;
+					continue;
+				}
+				ent->next = sb->ent;
+				sb->ent = suspect->suspects;
+				suspect->suspects = NULL;
+				break;
+			}
+		}
 		origin_decref(suspect);
 
 		if (DEBUG) /* sanity */
 			sanity_check_refcnt(sb);
 	}
 }
@@ -1606,15 +1865,14 @@
 	int cnt;
 	const char *cp;
 	struct origin *suspect = ent->suspect;
 	char hex[41];
 
 	strcpy(hex, sha1_to_hex(suspect->commit->object.sha1));
-	printf("%s%c%d %d %d\n",
+	printf("%s %d %d %d\n",
 	       hex,
-	       ent->guilty ? ' ' : '*', /* purely for debugging */
 	       ent->s_lno + 1,
 	       ent->lno + 1,
 	       ent->num_lines);
 	emit_porcelain_details(suspect, repeat);
 
 	cp = nth_line(sb, ent->lno);
@@ -1721,23 +1979,22 @@
 static void output(struct scoreboard *sb, int option)
 {
 	struct blame_entry *ent;
 
 	if (option & OUTPUT_PORCELAIN) {
 		for (ent = sb->ent; ent; ent = ent->next) {
-			struct blame_entry *oth;
-			struct origin *suspect = ent->suspect;
-			struct commit *commit = suspect->commit;
+			int count = 0;
+			struct origin *suspect;
+			struct commit *commit = ent->suspect->commit;
 			if (commit->object.flags & MORE_THAN_ONE_PATH)
 				continue;
-			for (oth = ent->next; oth; oth = oth->next) {
-				if ((oth->suspect->commit != commit) ||
-				    !strcmp(oth->suspect->path, suspect->path))
-					continue;
-				commit->object.flags |= MORE_THAN_ONE_PATH;
-				break;
+			for (suspect = commit->util; suspect; suspect = suspect->next) {
+				if (suspect->guilty && count++) {
+					commit->object.flags |= MORE_THAN_ONE_PATH;
+					break;
+				}
 			}
 		}
 	}
 
 	for (ent = sb->ent; ent; ent = ent->next) {
 		if (option & OUTPUT_PORCELAIN)
@@ -1745,56 +2002,42 @@
 		else {
 			emit_other(sb, ent, option);
 		}
 	}
 }
 
+static const char *get_next_line(const char *start, const char *end)
+{
+	const char *nl = memchr(start, '\n', end - start);
+	return nl ? nl + 1 : end;
+}
+
 /*
  * To allow quick access to the contents of nth line in the
  * final image, prepare an index in the scoreboard.
  */
 static int prepare_lines(struct scoreboard *sb)
 {
 	const char *buf = sb->final_buf;
 	unsigned long len = sb->final_buf_size;
 	const char *end = buf + len;
 	const char *p;
 	int *lineno;
-	int num = 0, incomplete = 0;
-
-	for (p = buf;;) {
-		p = memchr(p, '\n', end - p);
-		if (p) {
-			p++;
-			num++;
-			continue;
-		}
-		break;
-	}
+	int num = 0;
 
-	if (len && end[-1] != '\n')
-		incomplete++; /* incomplete line at the end */
+	for (p = buf; p < end; p = get_next_line(p, end))
+		num++;
 
-	sb->lineno = xmalloc(sizeof(*sb->lineno) * (num + incomplete + 1));
-	lineno = sb->lineno;
+	sb->lineno = lineno = xmalloc(sizeof(*sb->lineno) * (num + 1));
 
-	*lineno++ = 0;
-	for (p = buf;;) {
-		p = memchr(p, '\n', end - p);
-		if (p) {
-			p++;
-			*lineno++ = p - buf;
-			continue;
-		}
-		break;
-	}
+	for (p = buf; p < end; p = get_next_line(p, end))
+		*lineno++ = p - buf;
 
-	if (incomplete)
-		*lineno++ = len;
+	*lineno = len;
 
-	sb->num_lines = num + incomplete;
+	sb->num_lines = num;
 	return sb->num_lines;
 }
 
 /*
  * Add phony grafts for use with -S; this is primarily to
  * support git's cvsserver that wants to give a linear history
@@ -2106,13 +2349,12 @@
 		if (strbuf_read(&buf, 0, 0) < 0)
 			die_errno("failed to read from stdin");
 	}
 	origin->file.ptr = buf.buf;
 	origin->file.size = buf.len;
 	pretend_sha1_file(buf.buf, buf.len, OBJ_BLOB, origin->blob_sha1);
-	commit->util = origin;
 
 	/*
 	 * Read the current index, replace the path entry with
 	 * origin->blob_sha1 without mucking with its mode or type
 	 * bits; we are not going to write this index out -- we just
 	 * want to run "diff-index --cached".
@@ -2140,13 +2382,13 @@
 
 	/*
 	 * We are not going to write this out, so this does not matter
 	 * right now, but someday we might optimize diff-index --cached
 	 * with cache-tree information.
 	 */
-	cache_tree_invalidate_path(active_cache_tree, path);
+	cache_tree_invalidate_path(&the_index, path);
 
 	return commit;
 }
 
 static const char *prepare_final(struct scoreboard *sb)
 {
@@ -2424,18 +2666,22 @@
 
 	revs.disable_stdin = 1;
 	setup_revisions(argc, argv, &revs, NULL);
 	memset(&sb, 0, sizeof(sb));
 
 	sb.revs = &revs;
-	if (!reverse)
+	if (!reverse) {
 		final_commit_name = prepare_final(&sb);
+		sb.commits.compare = compare_commits_by_commit_date;
+	}
 	else if (contents_from)
 		die("--contents and --children do not blend well.");
-	else
+	else {
 		final_commit_name = prepare_initial(&sb);
+		sb.commits.compare = compare_commits_by_reverse_commit_date;
+	}
 
 	if (!sb.final) {
 		/*
 		 * "--not A B -- path" without anything positive;
 		 * do not default to HEAD, but use the working tree
 		 * or "--contents".
@@ -2515,30 +2761,36 @@
 		ent->num_lines = top - bottom;
 		ent->suspect = o;
 		ent->s_lno = bottom;
 		ent->next = next;
 		origin_incref(o);
 	}
+
+	o->suspects = ent;
+	prio_queue_put(&sb.commits, o->commit);
+
 	origin_decref(o);
 
 	range_set_release(&ranges);
 	string_list_clear(&range_list, 0);
 
-	sb.ent = ent;
+	sb.ent = NULL;
 	sb.path = path;
 
 	read_mailmap(&mailmap, NULL);
 
 	if (!incremental)
 		setup_pager();
 
 	assign_blame(&sb, opt);
 
 	if (incremental)
 		return 0;
 
+	sb.ent = blame_sort(sb.ent, compare_blame_final);
+
 	coalesce(&sb);
 
 	if (!(output_option & OUTPUT_PORCELAIN))
 		find_alignment(&sb, &output_option);
 
 	output(&sb, output_option);
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/blame.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/blame.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/blame.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/blame.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/branch.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/branch.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/branch.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/branch.c	2014-08-16 06:26:55.000000000 +0800
@@ -291,19 +291,19 @@
 };
 
 static char *resolve_symref(const char *src, const char *prefix)
 {
 	unsigned char sha1[20];
 	int flag;
-	const char *dst, *cp;
+	const char *dst;
 
 	dst = resolve_ref_unsafe(src, sha1, 0, &flag);
 	if (!(dst && (flag & REF_ISSYMREF)))
 		return NULL;
-	if (prefix && (cp = skip_prefix(dst, prefix)))
-		dst = cp;
+	if (prefix)
+		skip_prefix(dst, prefix, &dst);
 	return xstrdup(dst);
 }
 
 struct append_ref_cb {
 	struct ref_list *ref_list;
 	const char **pattern;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/branch.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/branch.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/branch.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/branch.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/bundle.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/bundle.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/bundle.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/bundle.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/cat-file.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/cat-file.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/cat-file.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/cat-file.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-attr.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-attr.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-attr.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-attr.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-ignore.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-ignore.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-ignore.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-ignore.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-mailmap.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-mailmap.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-mailmap.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-mailmap.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/checkout.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/checkout.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/checkout.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/checkout.c	2014-08-16 06:26:55.000000000 +0800
@@ -222,13 +222,12 @@
 	struct checkout state;
 	static char *ps_matched;
 	unsigned char rev[20];
 	int flag;
 	struct commit *head;
 	int errs = 0;
-	int newfd;
 	struct lock_file *lock_file;
 
 	if (opts->track != BRANCH_TRACK_UNSPECIFIED)
 		die(_("'%s' cannot be used with updating paths"), "--track");
 
 	if (opts->new_branch_log)
@@ -253,13 +252,13 @@
 	if (opts->patch_mode)
 		return run_add_interactive(revision, "--patch=checkout",
 					   &opts->pathspec);
 
 	lock_file = xcalloc(1, sizeof(struct lock_file));
 
-	newfd = hold_locked_index(lock_file, 1);
+	hold_locked_index(lock_file, 1);
 	if (read_cache_preload(&opts->pathspec) < 0)
 		return error(_("corrupt index file"));
 
 	if (opts->source_tree)
 		read_tree_some(opts->source_tree, &opts->pathspec);
 
@@ -334,12 +333,13 @@
 		return 1;
 
 	/* Now we are committed to check them out */
 	memset(&state, 0, sizeof(state));
 	state.force = 1;
 	state.refresh_cache = 1;
+	state.istate = &the_index;
 	for (pos = 0; pos < active_nr; pos++) {
 		struct cache_entry *ce = active_cache[pos];
 		if (ce->ce_flags & CE_MATCHED) {
 			if (!ce_stage(ce)) {
 				errs |= checkout_entry(ce, &state, NULL);
 				continue;
@@ -349,14 +349,13 @@
 			else if (opts->merge)
 				errs |= checkout_merged(pos, &state);
 			pos = skip_same_name(ce, pos) - 1;
 		}
 	}
 
-	if (write_cache(newfd, active_cache, active_nr) ||
-	    commit_locked_index(lock_file))
+	if (write_locked_index(&the_index, lock_file, COMMIT_LOCK))
 		die(_("unable to write new index file"));
 
 	read_ref_full("HEAD", rev, 0, &flag);
 	head = lookup_commit_reference_gently(rev, 1);
 
 	errs |= post_checkout_hook(head, head, 0);
@@ -441,14 +440,14 @@
 			      struct branch_info *old,
 			      struct branch_info *new,
 			      int *writeout_error)
 {
 	int ret;
 	struct lock_file *lock_file = xcalloc(1, sizeof(struct lock_file));
-	int newfd = hold_locked_index(lock_file, 1);
 
+	hold_locked_index(lock_file, 1);
 	if (read_cache_preload(NULL) < 0)
 		return error(_("corrupt index file"));
 
 	resolve_undo_clear();
 	if (opts->force) {
 		ret = reset_tree(new->commit->tree, opts, 1, writeout_error);
@@ -550,14 +549,13 @@
 					 writeout_error);
 			if (ret)
 				return ret;
 		}
 	}
 
-	if (write_cache(newfd, active_cache, active_nr) ||
-	    commit_locked_index(lock_file))
+	if (write_locked_index(&the_index, lock_file, COMMIT_LOCK))
 		die(_("unable to write new index file"));
 
 	if (!opts->force && !opts->quiet)
 		show_local_changes(&new->commit->object, &opts->diff_options);
 
 	return 0;
@@ -621,13 +619,13 @@
 		strbuf_insert(&msg, 0, reflog_msg, strlen(reflog_msg));
 
 	if (!strcmp(new->name, "HEAD") && !new->path && !opts->force_detach) {
 		/* Nothing to do. */
 	} else if (opts->force_detach || !new->path) {	/* No longer on any branch. */
 		update_ref(msg.buf, "HEAD", new->commit->object.sha1, NULL,
-			   REF_NODEREF, DIE_ON_ERR);
+			   REF_NODEREF, UPDATE_REFS_DIE_ON_ERR);
 		if (!opts->quiet) {
 			if (old->path && advice_detached_head)
 				detach_advice(new->name);
 			describe_detached_head(_("HEAD is now at"), new->commit);
 		}
 	} else if (new->path) {	/* Switch branches. */
@@ -648,18 +646,14 @@
 			} else {
 				fprintf(stderr, _("Switched to branch '%s'\n"),
 					new->name);
 			}
 		}
 		if (old->path && old->name) {
-			char log_file[PATH_MAX], ref_file[PATH_MAX];
-
-			git_snpath(log_file, sizeof(log_file), "logs/%s", old->path);
-			git_snpath(ref_file, sizeof(ref_file), "%s", old->path);
-			if (!file_exists(ref_file) && file_exists(log_file))
-				remove_path(log_file);
+			if (!ref_exists(old->path) && reflog_exists(old->path))
+				delete_reflog(old->path);
 		}
 	}
 	remove_branch_state();
 	strbuf_release(&msg);
 	if (!opts->quiet &&
 	    (new->path || (!opts->force_detach && !strcmp(new->name, "HEAD"))))
@@ -777,14 +771,14 @@
 	memset(&old, 0, sizeof(old));
 	old.path = path_to_free = resolve_refdup("HEAD", rev, 0, &flag);
 	old.commit = lookup_commit_reference_gently(rev, 1);
 	if (!(flag & REF_ISSYMREF))
 		old.path = NULL;
 
-	if (old.path && starts_with(old.path, "refs/heads/"))
-		old.name = old.path + strlen("refs/heads/");
+	if (old.path)
+		skip_prefix(old.path, "refs/heads/", &old.name);
 
 	if (!new->name) {
 		new->name = "HEAD";
 		new->commit = old.commit;
 		if (!new->commit)
 			die(_("You are on a branch yet to be born"));
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/checkout.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/checkout.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/checkout-index.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/checkout-index.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/checkout-index.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/checkout-index.c	2014-08-16 06:26:55.000000000 +0800
@@ -132,12 +132,13 @@
 static int option_parse_u(const struct option *opt,
 			      const char *arg, int unset)
 {
 	int *newfd = opt->value;
 
 	state.refresh_cache = 1;
+	state.istate = &the_index;
 	if (*newfd < 0)
 		*newfd = hold_locked_index(&lock_file, 1);
 	return 0;
 }
 
 static int option_parse_z(const struct option *opt,
@@ -276,11 +277,10 @@
 	}
 
 	if (all)
 		checkout_all(prefix, prefix_length);
 
 	if (0 <= newfd &&
-	    (write_cache(newfd, active_cache, active_nr) ||
-	     commit_locked_index(&lock_file)))
+	    write_locked_index(&the_index, &lock_file, COMMIT_LOCK))
 		die("Unable to write new index file");
 	return 0;
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/checkout-index.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/checkout-index.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/checkout-index.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/checkout-index.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/checkout.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/checkout.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-ref-format.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-ref-format.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-ref-format.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-ref-format.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/clean.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/clean.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/clean.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/clean.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/clone.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/clone.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/clone.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/clone.c	2014-08-16 06:26:55.000000000 +0800
@@ -518,13 +518,13 @@
 			continue;
 		if (ends_with(ref->name, "^{}"))
 			continue;
 		if (!has_sha1_file(ref->old_sha1))
 			continue;
 		update_ref(msg, ref->name, ref->old_sha1,
-			   NULL, 0, DIE_ON_ERR);
+			   NULL, 0, UPDATE_REFS_DIE_ON_ERR);
 	}
 }
 
 static int iterate_ref_map(void *cb_data, unsigned char sha1[20])
 {
 	struct ref **rm = cb_data;
@@ -581,45 +581,46 @@
 	}
 }
 
 static void update_head(const struct ref *our, const struct ref *remote,
 			const char *msg)
 {
-	if (our && starts_with(our->name, "refs/heads/")) {
+	const char *head;
+	if (our && skip_prefix(our->name, "refs/heads/", &head)) {
 		/* Local default branch link */
 		create_symref("HEAD", our->name, NULL);
 		if (!option_bare) {
-			const char *head = skip_prefix(our->name, "refs/heads/");
-			update_ref(msg, "HEAD", our->old_sha1, NULL, 0, DIE_ON_ERR);
+			update_ref(msg, "HEAD", our->old_sha1, NULL, 0,
+				   UPDATE_REFS_DIE_ON_ERR);
 			install_branch_config(0, head, option_origin, our->name);
 		}
 	} else if (our) {
 		struct commit *c = lookup_commit_reference(our->old_sha1);
 		/* --branch specifies a non-branch (i.e. tags), detach HEAD */
 		update_ref(msg, "HEAD", c->object.sha1,
-			   NULL, REF_NODEREF, DIE_ON_ERR);
+			   NULL, REF_NODEREF, UPDATE_REFS_DIE_ON_ERR);
 	} else if (remote) {
 		/*
 		 * We know remote HEAD points to a non-branch, or
 		 * HEAD points to a branch but we don't know which one.
 		 * Detach HEAD in all these cases.
 		 */
 		update_ref(msg, "HEAD", remote->old_sha1,
-			   NULL, REF_NODEREF, DIE_ON_ERR);
+			   NULL, REF_NODEREF, UPDATE_REFS_DIE_ON_ERR);
 	}
 }
 
 static int checkout(void)
 {
 	unsigned char sha1[20];
 	char *head;
 	struct lock_file *lock_file;
 	struct unpack_trees_options opts;
 	struct tree *tree;
 	struct tree_desc t;
-	int err = 0, fd;
+	int err = 0;
 
 	if (option_no_checkout)
 		return 0;
 
 	head = resolve_refdup("HEAD", sha1, 1, NULL);
 	if (!head) {
@@ -637,13 +638,13 @@
 	free(head);
 
 	/* We need to be in the new work tree for the checkout */
 	setup_work_tree();
 
 	lock_file = xcalloc(1, sizeof(struct lock_file));
-	fd = hold_locked_index(lock_file, 1);
+	hold_locked_index(lock_file, 1);
 
 	memset(&opts, 0, sizeof opts);
 	opts.update = 1;
 	opts.merge = 1;
 	opts.fn = oneway_merge;
 	opts.verbose_update = (option_verbosity >= 0);
@@ -653,14 +654,13 @@
 	tree = parse_tree_indirect(sha1);
 	parse_tree(tree);
 	init_tree_desc(&t, tree->buffer, tree->size);
 	if (unpack_trees(1, &t, &opts) < 0)
 		die(_("unable to checkout working tree"));
 
-	if (write_cache(fd, active_cache, active_nr) ||
-	    commit_locked_index(lock_file))
+	if (write_locked_index(&the_index, lock_file, COMMIT_LOCK))
 		die(_("unable to write new index file"));
 
 	err |= run_hook_le(NULL, "post-checkout", sha1_to_hex(null_sha1),
 			   sha1_to_hex(sha1), "1", NULL);
 
 	if (!err && option_recursive)
@@ -699,15 +699,18 @@
 					strbuf_addf(&value, "+%s:%s", our_head_points_at->name,
 						our_head_points_at->name);
 				else
 					strbuf_addf(&value, "+%s:%s%s", our_head_points_at->name,
 						branch_top->buf, option_branch);
 			} else if (remote_head_points_at) {
+				const char *head = remote_head_points_at->name;
+				if (!skip_prefix(head, "refs/heads/", &head))
+					die("BUG: remote HEAD points at non-head?");
+
 				strbuf_addf(&value, "+%s:%s%s", remote_head_points_at->name,
-						branch_top->buf,
-						skip_prefix(remote_head_points_at->name, "refs/heads/"));
+						branch_top->buf, head);
 			}
 			/*
 			 * otherwise, the next "git fetch" will
 			 * simply fetch from HEAD without updating
 			 * any remote-tracking branch, which is what
 			 * we want.
@@ -793,24 +796,12 @@
 	if (path)
 		repo = xstrdup(absolute_path(repo_name));
 	else if (!strchr(repo_name, ':'))
 		die(_("repository '%s' does not exist"), repo_name);
 	else
 		repo = repo_name;
-	is_local = option_local != 0 && path && !is_bundle;
-	if (is_local) {
-		if (option_depth)
-			warning(_("--depth is ignored in local clones; use file:// instead."));
-		if (!access(mkpath("%s/shallow", path), F_OK)) {
-			if (option_local > 0)
-				warning(_("source repository is shallow, ignoring --local"));
-			is_local = 0;
-		}
-	}
-	if (option_local > 0 && !is_local)
-		warning(_("--local is ignored"));
 
 	/* no need to be strict, transport_set_option() will validate it again */
 	if (option_depth && atoi(option_depth) < 1)
 		die(_("depth %s is not a positive number"), option_depth);
 
 	if (argc == 2)
@@ -897,12 +888,25 @@
 	refspec = parse_fetch_refspec(1, &fetch_pattern);
 
 	strbuf_reset(&value);
 
 	remote = remote_get(option_origin);
 	transport = transport_get(remote, remote->url[0]);
+	path = get_repo_path(remote->url[0], &is_bundle);
+	is_local = option_local != 0 && path && !is_bundle;
+	if (is_local) {
+		if (option_depth)
+			warning(_("--depth is ignored in local clones; use file:// instead."));
+		if (!access(mkpath("%s/shallow", path), F_OK)) {
+			if (option_local > 0)
+				warning(_("source repository is shallow, ignoring --local"));
+			is_local = 0;
+		}
+	}
+	if (option_local > 0 && !is_local)
+		warning(_("--local is ignored"));
 	transport->cloning = 1;
 
 	if (!transport->get_refs_list || (!is_local && !transport->fetch))
 		die(_("Don't know how to clone %s"), transport->url);
 
 	transport_set_option(transport, TRANS_OPT_KEEP, "yes");
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/clone.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/clone.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/clone.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/clone.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/column.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/column.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/column.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/column.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/commit.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/commit.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/commit.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/commit.c	2014-08-16 06:26:55.000000000 +0800
@@ -302,13 +302,12 @@
 		die_resolve_conflict("commit");
 }
 
 static char *prepare_index(int argc, const char **argv, const char *prefix,
 			   const struct commit *current_head, int is_status)
 {
-	int fd;
 	struct string_list partial;
 	struct pathspec pathspec;
 	int refresh_flags = REFRESH_QUIET;
 
 	if (is_status)
 		refresh_flags |= REFRESH_UNMERGED;
@@ -318,18 +317,17 @@
 
 	if (read_cache_preload(&pathspec) < 0)
 		die(_("index file corrupt"));
 
 	if (interactive) {
 		char *old_index_env = NULL;
-		fd = hold_locked_index(&index_lock, 1);
+		hold_locked_index(&index_lock, 1);
 
 		refresh_cache_or_die(refresh_flags);
 
-		if (write_cache(fd, active_cache, active_nr) ||
-		    close_lock_file(&index_lock))
+		if (write_locked_index(&the_index, &index_lock, CLOSE_LOCK))
 			die(_("unable to create temporary index"));
 
 		old_index_env = getenv(INDEX_ENVIRONMENT);
 		setenv(INDEX_ENVIRONMENT, index_lock.filename, 1);
 
 		if (interactive_add(argc, argv, prefix, patch_interactive) != 0)
@@ -357,18 +355,17 @@
 	 *
 	 * The caller should run hooks on the locked real index, and
 	 * (A) if all goes well, commit the real index;
 	 * (B) on failure, rollback the real index.
 	 */
 	if (all || (also && pathspec.nr)) {
-		fd = hold_locked_index(&index_lock, 1);
+		hold_locked_index(&index_lock, 1);
 		add_files_to_cache(also ? prefix : NULL, &pathspec, 0);
 		refresh_cache_or_die(refresh_flags);
 		update_main_cache_tree(WRITE_TREE_SILENT);
-		if (write_cache(fd, active_cache, active_nr) ||
-		    close_lock_file(&index_lock))
+		if (write_locked_index(&the_index, &index_lock, CLOSE_LOCK))
 			die(_("unable to write new_index file"));
 		commit_style = COMMIT_NORMAL;
 		return index_lock.filename;
 	}
 
 	/*
@@ -378,18 +375,18 @@
 	 *
 	 * The caller should run hooks on the real index,
 	 * and create commit from the_index.
 	 * We still need to refresh the index here.
 	 */
 	if (!only && !pathspec.nr) {
-		fd = hold_locked_index(&index_lock, 1);
+		hold_locked_index(&index_lock, 1);
 		refresh_cache_or_die(refresh_flags);
 		if (active_cache_changed) {
 			update_main_cache_tree(WRITE_TREE_SILENT);
-			if (write_cache(fd, active_cache, active_nr) ||
-			    commit_locked_index(&index_lock))
+			if (write_locked_index(&the_index, &index_lock,
+					       COMMIT_LOCK))
 				die(_("unable to write new_index file"));
 		} else {
 			rollback_lock_file(&index_lock);
 		}
 		commit_style = COMMIT_AS_IS;
 		return get_index_file();
@@ -420,39 +417,36 @@
 		if (whence == FROM_MERGE)
 			die(_("cannot do a partial commit during a merge."));
 		else if (whence == FROM_CHERRY_PICK)
 			die(_("cannot do a partial commit during a cherry-pick."));
 	}
 
-	memset(&partial, 0, sizeof(partial));
-	partial.strdup_strings = 1;
+	string_list_init(&partial, 1);
 	if (list_paths(&partial, !current_head ? NULL : "HEAD", prefix, &pathspec))
 		exit(1);
 
 	discard_cache();
 	if (read_cache() < 0)
 		die(_("cannot read the index"));
 
-	fd = hold_locked_index(&index_lock, 1);
+	hold_locked_index(&index_lock, 1);
 	add_remove_files(&partial);
 	refresh_cache(REFRESH_QUIET);
-	if (write_cache(fd, active_cache, active_nr) ||
-	    close_lock_file(&index_lock))
+	if (write_locked_index(&the_index, &index_lock, CLOSE_LOCK))
 		die(_("unable to write new_index file"));
 
-	fd = hold_lock_file_for_update(&false_lock,
-				       git_path("next-index-%"PRIuMAX,
-						(uintmax_t) getpid()),
-				       LOCK_DIE_ON_ERROR);
+	hold_lock_file_for_update(&false_lock,
+				  git_path("next-index-%"PRIuMAX,
+					   (uintmax_t) getpid()),
+				  LOCK_DIE_ON_ERROR);
 
 	create_base_index(current_head);
 	add_remove_files(&partial);
 	refresh_cache(REFRESH_QUIET);
 
-	if (write_cache(fd, active_cache, active_nr) ||
-	    close_lock_file(&false_lock))
+	if (write_locked_index(&the_index, &false_lock, CLOSE_LOCK))
 		die(_("unable to write temporary index file"));
 
 	discard_cache();
 	read_cache_from(false_lock.filename);
 
 	return false_lock.filename;
@@ -523,16 +517,35 @@
 	if (!person->date_begin || !person->date_end ||
 	    !person->tz_begin || !person->tz_end)
 		return 0;
 	return 1;
 }
 
+static int parse_force_date(const char *in, char *out, int len)
+{
+	if (len < 1)
+		return -1;
+	*out++ = '@';
+	len--;
+
+	if (parse_date(in, out, len) < 0) {
+		int errors = 0;
+		unsigned long t = approxidate_careful(in, &errors);
+		if (errors)
+			return -1;
+		snprintf(out, len, "%lu", t);
+	}
+
+	return 0;
+}
+
 static void determine_author_info(struct strbuf *author_ident)
 {
 	char *name, *email, *date;
 	struct ident_split author;
+	char date_buf[64];
 
 	name = getenv("GIT_AUTHOR_NAME");
 	email = getenv("GIT_AUTHOR_EMAIL");
 	date = getenv("GIT_AUTHOR_DATE");
 
 	if (author_message) {
@@ -571,30 +584,67 @@
 		if (!lb || !rb)
 			die(_("malformed --author parameter"));
 		name = xstrndup(force_author, lb - force_author);
 		email = xstrndup(lb + 2, rb - (lb + 2));
 	}
 
-	if (force_date)
-		date = force_date;
+	if (force_date) {
+		if (parse_force_date(force_date, date_buf, sizeof(date_buf)))
+			die(_("invalid date format: %s"), force_date);
+		date = date_buf;
+	}
+
 	strbuf_addstr(author_ident, fmt_ident(name, email, date, IDENT_STRICT));
 	if (!split_ident_line(&author, author_ident->buf, author_ident->len) &&
 	    sane_ident_split(&author)) {
 		export_one("GIT_AUTHOR_NAME", author.name_begin, author.name_end, 0);
 		export_one("GIT_AUTHOR_EMAIL", author.mail_begin, author.mail_end, 0);
 		export_one("GIT_AUTHOR_DATE", author.date_begin, author.tz_end, '@');
 	}
 }
 
-static char *cut_ident_timestamp_part(char *string)
+static void split_ident_or_die(struct ident_split *id, const struct strbuf *buf)
 {
-	char *ket = strrchr(string, '>');
-	if (!ket || ket[1] != ' ')
-		die(_("Malformed ident string: '%s'"), string);
-	*++ket = '\0';
-	return ket;
+	if (split_ident_line(id, buf->buf, buf->len) ||
+	    !sane_ident_split(id))
+		die(_("Malformed ident string: '%s'"), buf->buf);
+}
+
+static int author_date_is_interesting(void)
+{
+	return author_message || force_date;
+}
+
+static void adjust_comment_line_char(const struct strbuf *sb)
+{
+	char candidates[] = "#;@!$%^&|:";
+	char *candidate;
+	const char *p;
+
+	comment_line_char = candidates[0];
+	if (!memchr(sb->buf, comment_line_char, sb->len))
+		return;
+
+	p = sb->buf;
+	candidate = strchr(candidates, *p);
+	if (candidate)
+		*candidate = ' ';
+	for (p = sb->buf; *p; p++) {
+		if ((p[0] == '\n' || p[0] == '\r') && p[1]) {
+			candidate = strchr(candidates, p[1]);
+			if (candidate)
+				*candidate = ' ';
+		}
+	}
+
+	for (p = candidates; *p == ' '; p++)
+		;
+	if (!*p)
+		die(_("unable to select a comment character that is not used\n"
+		      "in the current commit message"));
+	comment_line_char = *p;
 }
 
 static int prepare_to_commit(const char *index_file, const char *prefix,
 			     struct commit *current_head,
 			     struct wt_status *s,
 			     struct strbuf *author_ident)
@@ -648,13 +698,13 @@
 				  logfile);
 		hook_arg1 = "message";
 	} else if (use_message) {
 		char *buffer;
 		buffer = strstr(use_message_buffer, "\n\n");
 		if (buffer)
-			strbuf_add(&sb, buffer + 2, strlen(buffer + 2));
+			strbuf_addstr(&sb, buffer + 2);
 		hook_arg1 = "commit";
 		hook_arg2 = use_message;
 	} else if (fixup_message) {
 		struct pretty_print_context ctx = {0};
 		struct commit *commit;
 		commit = lookup_commit_reference_by_name(fixup_message);
@@ -744,20 +794,23 @@
 		append_signoff(&sb, ignore_footer, 0);
 	}
 
 	if (fwrite(sb.buf, 1, sb.len, s->fp) < sb.len)
 		die_errno(_("could not write commit template"));
 
+	if (auto_comment_line_char)
+		adjust_comment_line_char(&sb);
 	strbuf_release(&sb);
 
 	/* This checks if committer ident is explicitly given */
 	strbuf_addstr(&committer_ident, git_committer_info(IDENT_STRICT));
 	if (use_editor && include_status) {
 		int ident_shown = 0;
 		int saved_color_setting;
-		char *ai_tmp, *ci_tmp;
+		struct ident_split ci, ai;
+
 		if (whence != FROM_COMMIT) {
 			if (cleanup_mode == CLEANUP_SCISSORS)
 				wt_status_add_cut_line(s->fp);
 			status_printf_ln(s, GIT_COLOR_NORMAL,
 			    whence == FROM_MERGE
 				? _("\n"
@@ -791,38 +844,45 @@
 				  " yourself if you want to.\n"
 				  "An empty message aborts the commit.\n"), comment_line_char);
 		if (only_include_assumed)
 			status_printf_ln(s, GIT_COLOR_NORMAL,
 					"%s", only_include_assumed);
 
-		ai_tmp = cut_ident_timestamp_part(author_ident->buf);
-		ci_tmp = cut_ident_timestamp_part(committer_ident.buf);
-		if (strcmp(author_ident->buf, committer_ident.buf))
+		split_ident_or_die(&ai, author_ident);
+		split_ident_or_die(&ci, &committer_ident);
+
+		if (ident_cmp(&ai, &ci))
 			status_printf_ln(s, GIT_COLOR_NORMAL,
 				_("%s"
-				"Author:    %s"),
+				"Author:    %.*s <%.*s>"),
 				ident_shown++ ? "" : "\n",
-				author_ident->buf);
+				(int)(ai.name_end - ai.name_begin), ai.name_begin,
+				(int)(ai.mail_end - ai.mail_begin), ai.mail_begin);
+
+		if (author_date_is_interesting())
+			status_printf_ln(s, GIT_COLOR_NORMAL,
+				_("%s"
+				"Date:      %s"),
+				ident_shown++ ? "" : "\n",
+				show_ident_date(&ai, DATE_NORMAL));
 
 		if (!committer_ident_sufficiently_given())
 			status_printf_ln(s, GIT_COLOR_NORMAL,
 				_("%s"
-				"Committer: %s"),
+				"Committer: %.*s <%.*s>"),
 				ident_shown++ ? "" : "\n",
-				committer_ident.buf);
+				(int)(ci.name_end - ci.name_begin), ci.name_begin,
+				(int)(ci.mail_end - ci.mail_begin), ci.mail_begin);
 
 		if (ident_shown)
-			status_printf_ln(s, GIT_COLOR_NORMAL, "");
+			status_printf_ln(s, GIT_COLOR_NORMAL, "%s", "");
 
 		saved_color_setting = s->use_color;
 		s->use_color = 0;
 		commitable = run_status(s->fp, index_file, prefix, 1, s);
 		s->use_color = saved_color_setting;
-
-		*ai_tmp = ' ';
-		*ci_tmp = ' ';
 	} else {
 		unsigned char sha1[20];
 		const char *parent = "HEAD";
 
 		if (!active_nr && read_cache() < 0)
 			die(_("Cannot read index"));
@@ -951,23 +1011,22 @@
  * See if the user edited the message in the editor or left what
  * was in the template intact
  */
 static int template_untouched(struct strbuf *sb)
 {
 	struct strbuf tmpl = STRBUF_INIT;
-	char *start;
+	const char *start;
 
 	if (cleanup_mode == CLEANUP_NONE && sb->len)
 		return 0;
 
 	if (!template_file || strbuf_read_file(&tmpl, template_file, 0) <= 0)
 		return 0;
 
 	stripspace(&tmpl, cleanup_mode == CLEANUP_ALL);
-	start = (char *)skip_prefix(sb->buf, tmpl.buf);
-	if (!start)
+	if (!skip_prefix(sb->buf, tmpl.buf, &start))
 		start = sb->buf;
 	strbuf_release(&tmpl);
 	return rest_is_empty(sb, start - sb->buf);
 }
 
 static const char *find_author_by_nickname(const char *name)
@@ -1366,12 +1425,19 @@
 	format_commit_message(commit, "%an <%ae>", &author_ident, &pctx);
 	format_commit_message(commit, "%cn <%ce>", &committer_ident, &pctx);
 	if (strbuf_cmp(&author_ident, &committer_ident)) {
 		strbuf_addstr(&format, "\n Author: ");
 		strbuf_addbuf_percentquote(&format, &author_ident);
 	}
+	if (author_date_is_interesting()) {
+		struct strbuf date = STRBUF_INIT;
+		format_commit_message(commit, "%ad", &date, &pctx);
+		strbuf_addstr(&format, "\n Date: ");
+		strbuf_addbuf_percentquote(&format, &date);
+		strbuf_release(&date);
+	}
 	if (!committer_ident_sufficiently_given()) {
 		strbuf_addstr(&format, "\n Committer: ");
 		strbuf_addbuf_percentquote(&format, &committer_ident);
 		if (advice_implicit_identity) {
 			strbuf_addch(&format, '\n');
 			strbuf_addstr(&format, _(implicit_ident_advice));
@@ -1682,25 +1748,25 @@
 
 	ref_lock = lock_any_ref_for_update("HEAD",
 					   !current_head
 					   ? NULL
 					   : current_head->object.sha1,
 					   0, NULL);
+	if (!ref_lock) {
+		rollback_index_files();
+		die(_("cannot lock HEAD ref"));
+	}
 
 	nl = strchr(sb.buf, '\n');
 	if (nl)
 		strbuf_setlen(&sb, nl + 1 - sb.buf);
 	else
 		strbuf_addch(&sb, '\n');
 	strbuf_insert(&sb, 0, reflog_msg, strlen(reflog_msg));
 	strbuf_insert(&sb, strlen(reflog_msg), ": ", 2);
 
-	if (!ref_lock) {
-		rollback_index_files();
-		die(_("cannot lock HEAD ref"));
-	}
 	if (write_ref_sha1(ref_lock, sha1, sb.buf) < 0) {
 		rollback_index_files();
 		die(_("cannot update HEAD ref"));
 	}
 
 	unlink(git_path("CHERRY_PICK_HEAD"));
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/commit.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/commit.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/commit.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/commit.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/commit-tree.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/commit-tree.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/commit-tree.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/commit-tree.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/config.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/config.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/config.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/config.c	2014-08-16 06:26:55.000000000 +0800
@@ -392,25 +392,12 @@
 	} else {
 		matched->value_is_null = 1;
 	}
 	return 0;
 }
 
-static char *dup_downcase(const char *string)
-{
-	char *result;
-	size_t len, i;
-
-	len = strlen(string);
-	result = xmalloc(len + 1);
-	for (i = 0; i < len; i++)
-		result[i] = tolower(string[i]);
-	result[i] = '\0';
-	return result;
-}
-
 static int get_urlmatch(const char *var, const char *url)
 {
 	char *section_tail;
 	struct string_list_item *item;
 	struct urlmatch_config config = { STRING_LIST_INIT_DUP };
 	struct string_list values = STRING_LIST_INIT_DUP;
@@ -419,13 +406,13 @@
 	config.cascade_fn = NULL;
 	config.cb = &values;
 
 	if (!url_normalize(url, &config.url))
 		die("%s", config.url.err);
 
-	config.section = dup_downcase(var);
+	config.section = xstrdup_tolower(var);
 	section_tail = strchr(config.section, '.');
 	if (section_tail) {
 		*section_tail = '\0';
 		config.key = section_tail + 1;
 		show_keys = 0;
 	} else {
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/config.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/config.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/config.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/config.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/count-objects.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/count-objects.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/count-objects.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/count-objects.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/credential.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/credential.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/credential.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/credential.o differ
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/.depend: verify-commit.o.d
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/describe.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/describe.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/describe.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/describe.c	2014-08-16 06:26:55.000000000 +0800
@@ -53,24 +53,15 @@
 static int commit_name_cmp(const struct commit_name *cn1,
 		const struct commit_name *cn2, const void *peeled)
 {
 	return hashcmp(cn1->peeled, peeled ? peeled : cn2->peeled);
 }
 
-static inline unsigned int hash_sha1(const unsigned char *sha1)
-{
-	unsigned int hash;
-	memcpy(&hash, sha1, sizeof(hash));
-	return hash;
-}
-
 static inline struct commit_name *find_commit_name(const unsigned char *peeled)
 {
-	struct commit_name key;
-	hashmap_entry_init(&key, hash_sha1(peeled));
-	return hashmap_get(&names, &key, peeled);
+	return hashmap_get_from_hash(&names, sha1hash(peeled), peeled);
 }
 
 static int replace_name(struct commit_name *e,
 			       int prio,
 			       const unsigned char *sha1,
 			       struct tag **tag)
@@ -111,13 +102,13 @@
 	struct commit_name *e = find_commit_name(peeled);
 	struct tag *tag = NULL;
 	if (replace_name(e, prio, sha1, &tag)) {
 		if (!e) {
 			e = xmalloc(sizeof(struct commit_name));
 			hashcpy(e->peeled, peeled);
-			hashmap_entry_init(e, hash_sha1(peeled));
+			hashmap_entry_init(e, sha1hash(peeled));
 			hashmap_add(&names, e);
 			e->path = NULL;
 		}
 		e->tag = tag;
 		e->prio = prio;
 		e->name_checked = 0;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/describe.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/describe.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/describe.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/describe.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-files.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-files.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-files.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-files.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-index.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-index.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-index.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-index.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-tree.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-tree.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-tree.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-tree.c	2014-08-16 06:26:55.000000000 +0800
@@ -19,20 +19,16 @@
 static int stdin_diff_commit(struct commit *commit, char *line, int len)
 {
 	unsigned char sha1[20];
 	if (isspace(line[40]) && !get_sha1_hex(line+41, sha1)) {
 		/* Graft the fake parents locally to the commit */
 		int pos = 41;
-		struct commit_list **pptr, *parents;
+		struct commit_list **pptr;
 
 		/* Free the real parent list */
-		for (parents = commit->parents; parents; ) {
-			struct commit_list *tmp = parents->next;
-			free(parents);
-			parents = tmp;
-		}
+		free_commit_list(commit->parents);
 		commit->parents = NULL;
 		pptr = &(commit->parents);
 		while (line[pos] && !get_sha1_hex(line + pos, sha1)) {
 			struct commit *parent = lookup_commit(sha1);
 			if (parent) {
 				pptr = &commit_list_insert(parent, pptr)->next;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-tree.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-tree.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-tree.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-tree.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fast-export.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fast-export.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fast-export.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fast-export.c	2014-08-16 06:26:55.000000000 +0800
@@ -14,12 +14,13 @@
 #include "revision.h"
 #include "decorate.h"
 #include "string-list.h"
 #include "utf8.h"
 #include "parse-options.h"
 #include "quote.h"
+#include "remote.h"
 
 static const char *fast_export_usage[] = {
 	N_("git fast-export [rev-list-opts]"),
 	NULL
 };
 
@@ -28,12 +29,14 @@
 static enum { ERROR, DROP, REWRITE } tag_of_filtered_mode = ERROR;
 static int fake_missing_tagger;
 static int use_done_feature;
 static int no_data;
 static int full_tree;
 static struct string_list extra_refs = STRING_LIST_INIT_NODUP;
+static struct refspec *refspecs;
+static int refspecs_nr;
 
 static int parse_opt_signed_tag_mode(const struct option *opt,
 				     const char *arg, int unset)
 {
 	if (unset || !strcmp(arg, "abort"))
 		signed_tag_mode = ABORT;
@@ -525,12 +528,21 @@
 		if (e->flags & UNINTERESTING)
 			continue;
 
 		if (dwim_ref(e->name, strlen(e->name), sha1, &full_name) != 1)
 			continue;
 
+		if (refspecs) {
+			char *private;
+			private = apply_refspecs(refspecs, refspecs_nr, full_name);
+			if (private) {
+				free(full_name);
+				full_name = private;
+			}
+		}
+
 		commit = get_commit(e, full_name);
 		if (!commit) {
 			warning("%s: Unexpected object of type %s, skipping.",
 				e->name,
 				typename(e->item->type));
 			continue;
@@ -661,19 +673,33 @@
 
 		object->flags |= SHOWN;
 	}
 	fclose(f);
 }
 
+static void handle_deletes(void)
+{
+	int i;
+	for (i = 0; i < refspecs_nr; i++) {
+		struct refspec *refspec = &refspecs[i];
+		if (*refspec->src)
+			continue;
+
+		printf("reset %s\nfrom %s\n\n",
+				refspec->dst, sha1_to_hex(null_sha1));
+	}
+}
+
 int cmd_fast_export(int argc, const char **argv, const char *prefix)
 {
 	struct rev_info revs;
 	struct object_array commits = OBJECT_ARRAY_INIT;
 	struct commit *commit;
 	char *export_filename = NULL, *import_filename = NULL;
 	uint32_t lastimportid;
+	struct string_list refspecs_list = STRING_LIST_INIT_NODUP;
 	struct option options[] = {
 		OPT_INTEGER(0, "progress", &progress,
 			    N_("show progress after <n> objects")),
 		OPT_CALLBACK(0, "signed-tags", &signed_tag_mode, N_("mode"),
 			     N_("select handling of signed tags"),
 			     parse_opt_signed_tag_mode),
@@ -688,12 +714,14 @@
 			 N_("Fake a tagger when tags lack one")),
 		OPT_BOOL(0, "full-tree", &full_tree,
 			 N_("Output full tree for each commit")),
 		OPT_BOOL(0, "use-done-feature", &use_done_feature,
 			     N_("Use the done feature to terminate the stream")),
 		OPT_BOOL(0, "no-data", &no_data, N_("Skip output of blob data")),
+		OPT_STRING_LIST(0, "refspec", &refspecs_list, N_("refspec"),
+			     N_("Apply refspec to exported refs")),
 		OPT_END()
 	};
 
 	if (argc == 1)
 		usage_with_options (fast_export_usage, options);
 
@@ -701,17 +729,33 @@
 	git_config(git_default_config, NULL);
 
 	init_revisions(&revs, prefix);
 	revs.topo_order = 1;
 	revs.show_source = 1;
 	revs.rewrite_parents = 1;
+	argc = parse_options(argc, argv, prefix, options, fast_export_usage,
+			PARSE_OPT_KEEP_ARGV0 | PARSE_OPT_KEEP_UNKNOWN);
 	argc = setup_revisions(argc, argv, &revs, NULL);
-	argc = parse_options(argc, argv, prefix, options, fast_export_usage, 0);
 	if (argc > 1)
 		usage_with_options (fast_export_usage, options);
 
+	if (refspecs_list.nr) {
+		const char **refspecs_str;
+		int i;
+
+		refspecs_str = xmalloc(sizeof(*refspecs_str) * refspecs_list.nr);
+		for (i = 0; i < refspecs_list.nr; i++)
+			refspecs_str[i] = refspecs_list.items[i].string;
+
+		refspecs_nr = refspecs_list.nr;
+		refspecs = parse_fetch_refspec(refspecs_nr, refspecs_str);
+
+		string_list_clear(&refspecs_list, 1);
+		free(refspecs_str);
+	}
+
 	if (use_done_feature)
 		printf("feature done\n");
 
 	if (import_filename)
 		import_marks(import_filename);
 	lastimportid = last_idnum;
@@ -733,15 +777,18 @@
 			handle_commit(commit, &revs);
 			handle_tail(&commits, &revs);
 		}
 	}
 
 	handle_tags_and_duplicates();
+	handle_deletes();
 
 	if (export_filename && lastimportid != last_idnum)
 		export_marks(export_filename);
 
 	if (use_done_feature)
 		printf("done\n");
 
+	free_refspec(refspecs_nr, refspecs);
+
 	return 0;
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fast-export.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fast-export.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fast-export.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fast-export.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fetch.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fetch.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fetch.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fetch.c	2014-08-16 06:26:55.000000000 +0800
@@ -42,12 +42,14 @@
 static struct strbuf default_rla = STRBUF_INIT;
 static struct transport *gtransport;
 static struct transport *gsecondary;
 static const char *submodule_prefix = "";
 static const char *recurse_submodules_default;
 static int shown_url = 0;
+static int refmap_alloc, refmap_nr;
+static const char **refmap_array;
 
 static int option_parse_recurse_submodules(const struct option *opt,
 				   const char *arg, int unset)
 {
 	if (unset) {
 		recurse_submodules = RECURSE_SUBMODULES_OFF;
@@ -66,12 +68,25 @@
 		fetch_prune_config = git_config_bool(k, v);
 		return 0;
 	}
 	return 0;
 }
 
+static int parse_refmap_arg(const struct option *opt, const char *arg, int unset)
+{
+	ALLOC_GROW(refmap_array, refmap_nr + 1, refmap_alloc);
+
+	/*
+	 * "git fetch --refmap='' origin foo"
+	 * can be used to tell the command not to store anywhere
+	 */
+	if (*arg)
+		refmap_array[refmap_nr++] = arg;
+	return 0;
+}
+
 static struct option builtin_fetch_options[] = {
 	OPT__VERBOSITY(&verbosity),
 	OPT_BOOL(0, "all", &all,
 		 N_("fetch from all remotes")),
 	OPT_BOOL('a', "append", &append,
 		 N_("append to .git/FETCH_HEAD instead of overwriting")),
@@ -104,12 +119,14 @@
 		   N_("prepend this to submodule path output"), PARSE_OPT_HIDDEN },
 	{ OPTION_STRING, 0, "recurse-submodules-default",
 		   &recurse_submodules_default, NULL,
 		   N_("default mode for recursion"), PARSE_OPT_HIDDEN },
 	OPT_BOOL(0, "update-shallow", &update_shallow,
 		 N_("accept refs that update .git/shallow")),
+	{ OPTION_CALLBACK, 0, "refmap", NULL, N_("refmap"),
+	  N_("specify fetch refmap"), PARSE_OPT_NONEG, parse_refmap_arg },
 	OPT_END()
 };
 
 static void unlock_pack(void)
 {
 	if (gtransport)
@@ -275,12 +292,15 @@
 	/* opportunistically-updated references: */
 	struct ref *orefs = NULL, **oref_tail = &orefs;
 
 	const struct ref *remote_refs = transport_get_remote_refs(transport);
 
 	if (refspec_count) {
+		struct refspec *fetch_refspec;
+		int fetch_refspec_nr;
+
 		for (i = 0; i < refspec_count; i++) {
 			get_fetch_map(remote_refs, &refspecs[i], &tail, 0);
 			if (refspecs[i].dst && refspecs[i].dst[0])
 				*autotags = 1;
 		}
 		/* Merge everything on the command line (but not --tags) */
@@ -304,18 +324,27 @@
 		 * them to the list following the refspecs resulting
 		 * from the tags option so that one of the latter,
 		 * which has FETCH_HEAD_NOT_FOR_MERGE, is not removed
 		 * by ref_remove_duplicates() in favor of one of these
 		 * opportunistic entries with FETCH_HEAD_IGNORE.
 		 */
-		for (i = 0; i < transport->remote->fetch_refspec_nr; i++)
-			get_fetch_map(ref_map, &transport->remote->fetch[i],
-				      &oref_tail, 1);
+		if (refmap_array) {
+			fetch_refspec = parse_fetch_refspec(refmap_nr, refmap_array);
+			fetch_refspec_nr = refmap_nr;
+		} else {
+			fetch_refspec = transport->remote->fetch;
+			fetch_refspec_nr = transport->remote->fetch_refspec_nr;
+		}
+
+		for (i = 0; i < fetch_refspec_nr; i++)
+			get_fetch_map(ref_map, &fetch_refspec[i], &oref_tail, 1);
 
 		if (tags == TAGS_SET)
 			get_fetch_map(remote_refs, tag_refspec, &tail, 0);
+	} else if (refmap_array) {
+		die("--refmap option is only meaningful with command-line refspec(s).");
 	} else {
 		/* Use the defaults */
 		struct remote *remote = transport->remote;
 		struct branch *branch = branch_get(NULL);
 		int has_merge = branch_has_merge_config(branch);
 		if (remote &&
@@ -1050,22 +1079,17 @@
 	if (argc > 0) {
 		int j = 0;
 		int i;
 		refs = xcalloc(argc + 1, sizeof(const char *));
 		for (i = 0; i < argc; i++) {
 			if (!strcmp(argv[i], "tag")) {
-				char *ref;
 				i++;
 				if (i >= argc)
 					die(_("You need to specify a tag name."));
-				ref = xmalloc(strlen(argv[i]) * 2 + 22);
-				strcpy(ref, "refs/tags/");
-				strcat(ref, argv[i]);
-				strcat(ref, ":refs/tags/");
-				strcat(ref, argv[i]);
-				refs[j++] = ref;
+				refs[j++] = xstrfmt("refs/tags/%s:refs/tags/%s",
+						    argv[i], argv[i]);
 			} else
 				refs[j++] = argv[i];
 		}
 		refs[j] = NULL;
 		ref_nr = j;
 	}
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fetch.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fetch.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fetch.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fetch.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fetch-pack.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fetch-pack.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fetch-pack.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fetch-pack.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fmt-merge-msg.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fmt-merge-msg.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fmt-merge-msg.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fmt-merge-msg.c	2014-08-16 06:26:55.000000000 +0800
@@ -97,13 +97,14 @@
 }
 
 static int handle_line(char *line, struct merge_parents *merge_parents)
 {
 	int i, len = strlen(line);
 	struct origin_data *origin_data;
-	char *src, *origin;
+	char *src;
+	const char *origin;
 	struct src_data *src_data;
 	struct string_list_item *item;
 	int pulling_head = 0;
 	unsigned char sha1[20];
 
 	if (len < 43 || line[40] != '\t')
@@ -161,31 +162,27 @@
 		string_list_append(&src_data->branch, origin);
 		src_data->head_status |= 2;
 	} else if (starts_with(line, "tag ")) {
 		origin = line;
 		string_list_append(&src_data->tag, origin + 4);
 		src_data->head_status |= 2;
-	} else if (starts_with(line, "remote-tracking branch ")) {
-		origin = line + strlen("remote-tracking branch ");
+	} else if (skip_prefix(line, "remote-tracking branch ", &origin)) {
 		string_list_append(&src_data->r_branch, origin);
 		src_data->head_status |= 2;
 	} else {
 		origin = src;
 		string_list_append(&src_data->generic, line);
 		src_data->head_status |= 2;
 	}
 
 	if (!strcmp(".", src) || !strcmp(src, origin)) {
 		int len = strlen(origin);
 		if (origin[0] == '\'' && origin[len - 1] == '\'')
 			origin = xmemdupz(origin + 1, len - 2);
-	} else {
-		char *new_origin = xmalloc(strlen(origin) + strlen(src) + 5);
-		sprintf(new_origin, "%s of %s", origin, src);
-		origin = new_origin;
-	}
+	} else
+		origin = xstrfmt("%s of %s", origin, src);
 	if (strcmp(".", src))
 		origin_data->is_local_branch = 0;
 	string_list_append(&origins, origin)->util = origin_data;
 	return 0;
 }
 
@@ -297,14 +294,14 @@
 		me = git_committer_info(IDENT_NO_DATE);
 	}
 
 	if (!them->nr ||
 	    (them->nr == 1 &&
 	     me &&
-	     (me = skip_prefix(me, them->items->string)) != NULL &&
-	     skip_prefix(me, " <")))
+	     skip_prefix(me, them->items->string, &me) &&
+	     starts_with(me, " <")))
 		return;
 	strbuf_addf(out, "\n%c %s ", comment_line_char, label);
 	add_people_count(out, them);
 }
 
 static void add_people_info(struct strbuf *out,
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fmt-merge-msg.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fmt-merge-msg.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fmt-merge-msg.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fmt-merge-msg.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/for-each-ref.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/for-each-ref.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/for-each-ref.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/for-each-ref.c	2014-08-16 06:26:55.000000000 +0800
@@ -190,13 +190,13 @@
 		if (!ep)
 			return error("malformed format string %s", sp);
 		/* sp points at "%(" and ep points at the closing ")" */
 		at = parse_atom(sp + 2, ep);
 		cp = ep + 1;
 
-		if (!memcmp(used_atom[at], "color:", 6))
+		if (starts_with(used_atom[at], "color:"))
 			need_color_reset_at_eol = !!strcmp(used_atom[at], color_reset);
 	}
 	return 0;
 }
 
 /*
@@ -280,24 +280,12 @@
 			strcpy(s, sha1_to_hex(tag->tagged->sha1));
 			v->s = s;
 		}
 	}
 }
 
-static int num_parents(struct commit *commit)
-{
-	struct commit_list *parents;
-	int i;
-
-	for (i = 0, parents = commit->parents;
-	     parents;
-	     parents = parents->next)
-		i++;
-	return i;
-}
-
 /* See grab_values */
 static void grab_commit_values(struct atom_value *val, int deref, struct object *obj, void *buf, unsigned long sz)
 {
 	int i;
 	struct commit *commit = (struct commit *) obj;
 
@@ -312,18 +300,18 @@
 			char *s = xmalloc(41);
 			strcpy(s, sha1_to_hex(commit->tree->object.sha1));
 			v->s = s;
 		}
 		if (!strcmp(name, "numparent")) {
 			char *s = xmalloc(40);
-			v->ul = num_parents(commit);
+			v->ul = commit_list_count(commit->parents);
 			sprintf(s, "%lu", v->ul);
 			v->s = s;
 		}
 		else if (!strcmp(name, "parent")) {
-			int num = num_parents(commit);
+			int num = commit_list_count(commit->parents);
 			int i;
 			struct commit_list *parents;
 			char *s = xmalloc(41 * num + 1);
 			v->s = s;
 			for (i = 0, parents = commit->parents;
 			     parents;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/for-each-ref.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/for-each-ref.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/for-each-ref.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/for-each-ref.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fsck.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fsck.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fsck.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fsck.c	2014-08-16 06:26:55.000000000 +0800
@@ -478,17 +478,12 @@
 static int fsck_handle_reflog(const char *logname, const unsigned char *sha1, int flag, void *cb_data)
 {
 	for_each_reflog_ent(logname, fsck_handle_reflog_ent, NULL);
 	return 0;
 }
 
-static int is_branch(const char *refname)
-{
-	return !strcmp(refname, "HEAD") || starts_with(refname, "refs/heads/");
-}
-
 static int fsck_handle_ref(const char *refname, const unsigned char *sha1, int flag, void *cb_data)
 {
 	struct object *obj;
 
 	obj = parse_object(sha1);
 	if (!obj) {
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fsck.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fsck.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fsck.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fsck.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/gc.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/gc.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/gc.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/gc.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/get-tar-commit-id.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/get-tar-commit-id.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/get-tar-commit-id.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/get-tar-commit-id.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/grep.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/grep.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/grep.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/grep.c	2014-08-16 06:26:55.000000000 +0800
@@ -358,15 +358,13 @@
 	int i, status;
 
 	for (i = 0; i < path_list->nr; i++)
 		argv[i] = path_list->items[i].string;
 	argv[path_list->nr] = NULL;
 
-	if (prefix && chdir(prefix))
-		die(_("Failed to chdir: %s"), prefix);
-	status = run_command_v_opt(argv, RUN_USING_SHELL);
+	status = run_command_v_opt_cd_env(argv, RUN_USING_SHELL, prefix, NULL);
 	if (status)
 		exit(status);
 	free(argv);
 }
 
 static int grep_cache(struct grep_opt *opt, const struct pathspec *pathspec, int cached)
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/grep.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/grep.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/grep.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/grep.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/hash-object.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/hash-object.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/hash-object.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/hash-object.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/help.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/help.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/help.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/help.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/index-pack.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/index-pack.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/index-pack.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/index-pack.c	2014-08-16 06:26:55.000000000 +0800
@@ -1502,13 +1502,14 @@
 int cmd_index_pack(int argc, const char **argv, const char *prefix)
 {
 	int i, fix_thin_pack = 0, verify = 0, stat_only = 0;
 	const char *curr_index;
 	const char *index_name = NULL, *pack_name = NULL;
 	const char *keep_name = NULL, *keep_msg = NULL;
-	char *index_name_buf = NULL, *keep_name_buf = NULL;
+	struct strbuf index_name_buf = STRBUF_INIT,
+		      keep_name_buf = STRBUF_INIT;
 	struct pack_idx_entry **idx_objects;
 	struct pack_idx_option opts;
 	unsigned char pack_sha1[20];
 	unsigned foreign_nr = 1;	/* zero is a "good" value, assume bad */
 
 	if (argc == 2 && !strcmp(argv[1], "-h"))
@@ -1599,30 +1600,28 @@
 
 	if (!pack_name && !from_stdin)
 		usage(index_pack_usage);
 	if (fix_thin_pack && !from_stdin)
 		die(_("--fix-thin cannot be used without --stdin"));
 	if (!index_name && pack_name) {
-		int len = strlen(pack_name);
-		if (!has_extension(pack_name, ".pack"))
+		size_t len;
+		if (!strip_suffix(pack_name, ".pack", &len))
 			die(_("packfile name '%s' does not end with '.pack'"),
 			    pack_name);
-		index_name_buf = xmalloc(len);
-		memcpy(index_name_buf, pack_name, len - 5);
-		strcpy(index_name_buf + len - 5, ".idx");
-		index_name = index_name_buf;
+		strbuf_add(&index_name_buf, pack_name, len);
+		strbuf_addstr(&index_name_buf, ".idx");
+		index_name = index_name_buf.buf;
 	}
 	if (keep_msg && !keep_name && pack_name) {
-		int len = strlen(pack_name);
-		if (!has_extension(pack_name, ".pack"))
+		size_t len;
+		if (!strip_suffix(pack_name, ".pack", &len))
 			die(_("packfile name '%s' does not end with '.pack'"),
 			    pack_name);
-		keep_name_buf = xmalloc(len);
-		memcpy(keep_name_buf, pack_name, len - 5);
-		strcpy(keep_name_buf + len - 5, ".keep");
-		keep_name = keep_name_buf;
+		strbuf_add(&keep_name_buf, pack_name, len);
+		strbuf_addstr(&keep_name_buf, ".idx");
+		keep_name = keep_name_buf.buf;
 	}
 	if (verify) {
 		if (!index_name)
 			die(_("--verify with no packfile name given"));
 		read_idx_option(&opts, index_name);
 		opts.flags |= WRITE_IDX_VERIFY | WRITE_IDX_STRICT;
@@ -1664,14 +1663,14 @@
 		      index_name, curr_index,
 		      keep_name, keep_msg,
 		      pack_sha1);
 	else
 		close(input_fd);
 	free(objects);
-	free(index_name_buf);
-	free(keep_name_buf);
+	strbuf_release(&index_name_buf);
+	strbuf_release(&keep_name_buf);
 	if (pack_name == NULL)
 		free((void *) curr_pack);
 	if (index_name == NULL)
 		free((void *) curr_index);
 
 	/*
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/index-pack.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/index-pack.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/index-pack.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/index-pack.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/init-db.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/init-db.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/init-db.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/init-db.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/log.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/log.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/log.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/log.c	2014-08-16 06:26:55.000000000 +0800
@@ -60,12 +60,14 @@
 		break;
 	}
 	if (!strcmp(value, "full"))
 		return DECORATE_FULL_REFS;
 	else if (!strcmp(value, "short"))
 		return DECORATE_SHORT_REFS;
+	else if (!strcmp(value, "auto"))
+		return (isatty(1) || pager_in_use()) ? DECORATE_SHORT_REFS : 0;
 	return -1;
 }
 
 static int decorate_callback(const struct option *opt, const char *arg, int unset)
 {
 	if (unset)
@@ -665,12 +667,13 @@
 
 #define THREAD_SHALLOW 1
 #define THREAD_DEEP 2
 static int thread;
 static int do_signoff;
 static const char *signature = git_version_string;
+static const char *signature_file;
 static int config_cover_letter;
 
 enum {
 	COVER_UNSET,
 	COVER_OFF,
 	COVER_ON,
@@ -734,12 +737,14 @@
 	if (!strcmp(var, "format.signoff")) {
 		do_signoff = git_config_bool(var, value);
 		return 0;
 	}
 	if (!strcmp(var, "format.signature"))
 		return git_config_string(&signature, var, value);
+	if (!strcmp(var, "format.signaturefile"))
+		return git_config_pathname(&signature_file, var, value);
 	if (!strcmp(var, "format.coverletter")) {
 		if (value && !strcasecmp(value, "auto")) {
 			config_cover_letter = COVER_AUTO;
 			return 0;
 		}
 		config_cover_letter = git_config_bool(var, value) ? COVER_ON : COVER_OFF;
@@ -836,35 +841,40 @@
 		    git_committer_info(IDENT_NO_NAME|IDENT_NO_DATE|IDENT_STRICT));
 	info->message_id = strbuf_detach(&buf, NULL);
 }
 
 static void print_signature(void)
 {
-	if (signature && *signature)
-		printf("-- \n%s\n\n", signature);
+	if (!signature || !*signature)
+		return;
+
+	printf("-- \n%s", signature);
+	if (signature[strlen(signature)-1] != '\n')
+		putchar('\n');
+	putchar('\n');
 }
 
 static void add_branch_description(struct strbuf *buf, const char *branch_name)
 {
 	struct strbuf desc = STRBUF_INIT;
 	if (!branch_name || !*branch_name)
 		return;
 	read_branch_desc(&desc, branch_name);
 	if (desc.len) {
 		strbuf_addch(buf, '\n');
-		strbuf_add(buf, desc.buf, desc.len);
+		strbuf_addbuf(buf, &desc);
 		strbuf_addch(buf, '\n');
 	}
 }
 
 static char *find_branch_name(struct rev_info *rev)
 {
 	int i, positive = -1;
 	unsigned char branch_sha1[20];
 	const unsigned char *tip_sha1;
-	const char *ref;
+	const char *ref, *v;
 	char *full_ref, *branch = NULL;
 
 	for (i = 0; i < rev->cmdline.nr; i++) {
 		if (rev->cmdline.rev[i].flags & UNINTERESTING)
 			continue;
 		if (positive < 0)
@@ -874,15 +884,15 @@
 	}
 	if (positive < 0)
 		return NULL;
 	ref = rev->cmdline.rev[positive].name;
 	tip_sha1 = rev->cmdline.rev[positive].item->sha1;
 	if (dwim_ref(ref, strlen(ref), branch_sha1, &full_ref) &&
-	    starts_with(full_ref, "refs/heads/") &&
+	    skip_prefix(full_ref, "refs/heads/", &v) &&
 	    !hashcmp(tip_sha1, branch_sha1))
-		branch = xstrdup(full_ref + strlen("refs/heads/"));
+		branch = xstrdup(v);
 	free(full_ref);
 	return branch;
 }
 
 static void make_cover_letter(struct rev_info *rev, int use_stdout,
 			      struct commit *origin,
@@ -1225,12 +1235,14 @@
 			    inline_callback },
 		{ OPTION_CALLBACK, 0, "thread", &thread, N_("style"),
 			    N_("enable message threading, styles: shallow, deep"),
 			    PARSE_OPT_OPTARG, thread_callback },
 		OPT_STRING(0, "signature", &signature, N_("signature"),
 			    N_("add a signature")),
+		OPT_FILENAME(0, "signature-file", &signature_file,
+				N_("add a signature from a file")),
 		OPT__QUIET(&quiet, N_("don't print the patch filenames")),
 		OPT_END()
 	};
 
 	extra_hdr.strdup_strings = 1;
 	extra_to.strdup_strings = 1;
@@ -1381,16 +1393,16 @@
 
 		if (!strcmp(rev.pending.objects[0].name, "HEAD"))
 			check_head = 1;
 
 		if (check_head) {
 			unsigned char sha1[20];
-			const char *ref;
+			const char *ref, *v;
 			ref = resolve_ref_unsafe("HEAD", sha1, 1, NULL);
-			if (ref && starts_with(ref, "refs/heads/"))
-				branch_name = xstrdup(ref + strlen("refs/heads/"));
+			if (ref && skip_prefix(ref, "refs/heads/", &v))
+				branch_name = xstrdup(v);
 			else
 				branch_name = xstrdup(""); /* no branch */
 		}
 	}
 
 	/*
@@ -1442,12 +1454,24 @@
 		if (config_cover_letter == COVER_AUTO)
 			cover_letter = (total > 1);
 		else
 			cover_letter = (config_cover_letter == COVER_ON);
 	}
 
+	if (!signature) {
+		; /* --no-signature inhibits all signatures */
+	} else if (signature && signature != git_version_string) {
+		; /* non-default signature already set */
+	} else if (signature_file) {
+		struct strbuf buf = STRBUF_INIT;
+
+		if (strbuf_read_file(&buf, signature_file, 128) < 0)
+			die_errno(_("unable to read signature file '%s'"), signature_file);
+		signature = strbuf_detach(&buf, NULL);
+	}
+
 	if (in_reply_to || thread || cover_letter)
 		rev.ref_message_ids = xcalloc(1, sizeof(struct string_list));
 	if (in_reply_to) {
 		const char *msgid = clean_message_id(in_reply_to);
 		string_list_append(rev.ref_message_ids, msgid);
 	}
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/log.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/log.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/log.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/log.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-files.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-files.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-files.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-files.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-remote.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-remote.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-remote.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-remote.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-tree.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-tree.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-tree.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-tree.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mailinfo.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mailinfo.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mailinfo.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mailinfo.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mailsplit.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mailsplit.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mailsplit.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mailsplit.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-base.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-base.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-base.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-base.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge.c	2014-08-16 06:26:55.000000000 +0800
@@ -60,13 +60,13 @@
 static char *branch_mergeoptions;
 static int option_renormalize;
 static int verbosity;
 static int allow_rerere_auto;
 static int abort_current_merge;
 static int show_progress = -1;
-static int default_to_upstream;
+static int default_to_upstream = 1;
 static const char *sign_commit;
 
 static struct strategy all_strategy[] = {
 	{ "recursive",  DEFAULT_TWOHEAD | NO_TRIVIAL },
 	{ "octopus",    DEFAULT_OCTOPUS },
 	{ "resolve",    0 },
@@ -395,13 +395,13 @@
 		if (verbosity >= 0 && !merge_msg.len)
 			printf(_("No merge message -- not updating HEAD\n"));
 		else {
 			const char *argv_gc_auto[] = { "gc", "--auto", NULL };
 			update_ref(reflog_message.buf, "HEAD",
 				new_head, head, 0,
-				DIE_ON_ERR);
+				UPDATE_REFS_DIE_ON_ERR);
 			/*
 			 * We ignore errors in 'gc --auto', since the
 			 * user should see them.
 			 */
 			run_command_v_opt(argv_gc_auto, RUN_GIT_CMD);
 		}
@@ -654,28 +654,25 @@
 }
 
 static int try_merge_strategy(const char *strategy, struct commit_list *common,
 			      struct commit_list *remoteheads,
 			      struct commit *head, const char *head_arg)
 {
-	int index_fd;
 	struct lock_file *lock = xcalloc(1, sizeof(struct lock_file));
 
-	index_fd = hold_locked_index(lock, 1);
+	hold_locked_index(lock, 1);
 	refresh_cache(REFRESH_QUIET);
 	if (active_cache_changed &&
-			(write_cache(index_fd, active_cache, active_nr) ||
-			 commit_locked_index(lock)))
+	    write_locked_index(&the_index, lock, COMMIT_LOCK))
 		return error(_("Unable to write index."));
 	rollback_lock_file(lock);
 
 	if (!strcmp(strategy, "recursive") || !strcmp(strategy, "subtree")) {
 		int clean, x;
 		struct commit *result;
 		struct lock_file *lock = xcalloc(1, sizeof(struct lock_file));
-		int index_fd;
 		struct commit_list *reversed = NULL;
 		struct merge_options o;
 		struct commit_list *j;
 
 		if (remoteheads->next) {
 			error(_("Not handling anything other than two heads merge."));
@@ -697,18 +694,17 @@
 		o.branch1 = head_arg;
 		o.branch2 = merge_remote_util(remoteheads->item)->name;
 
 		for (j = common; j; j = j->next)
 			commit_list_insert(j->item, &reversed);
 
-		index_fd = hold_locked_index(lock, 1);
+		hold_locked_index(lock, 1);
 		clean = merge_recursive(&o, head,
 				remoteheads->item, reversed, &result);
 		if (active_cache_changed &&
-				(write_cache(index_fd, active_cache, active_nr) ||
-				 commit_locked_index(lock)))
+		    write_locked_index(&the_index, lock, COMMIT_LOCK))
 			die (_("unable to write %s"), get_index_file());
 		rollback_lock_file(lock);
 		return clean ? 0 : 1;
 	} else {
 		return try_merge_command(strategy, xopts_nr, xopts,
 						common, head_arg, remoteheads);
@@ -840,22 +836,20 @@
 	strbuf_release(&msg);
 }
 
 static int merge_trivial(struct commit *head, struct commit_list *remoteheads)
 {
 	unsigned char result_tree[20], result_commit[20];
-	struct commit_list *parent = xmalloc(sizeof(*parent));
+	struct commit_list *parents, **pptr = &parents;
 
 	write_tree_trivial(result_tree);
 	printf(_("Wonderful.\n"));
-	parent->item = head;
-	parent->next = xmalloc(sizeof(*parent->next));
-	parent->next->item = remoteheads->item;
-	parent->next->next = NULL;
+	pptr = commit_list_append(head, pptr);
+	pptr = commit_list_append(remoteheads->item, pptr);
 	prepare_to_commit(remoteheads);
-	if (commit_tree(merge_msg.buf, merge_msg.len, result_tree, parent,
+	if (commit_tree(merge_msg.buf, merge_msg.len, result_tree, parents,
 			result_commit, NULL, sign_commit))
 		die(_("failed to write commit object"));
 	finish(head, remoteheads, result_commit, "In-index merge");
 	drop_save();
 	return 0;
 }
@@ -1219,13 +1213,13 @@
 		remoteheads = collect_parents(head_commit, &head_subsumed, argc, argv);
 		remote_head = remoteheads->item;
 		if (!remote_head)
 			die(_("%s - not something we can merge"), argv[0]);
 		read_empty(remote_head->object.sha1, 0);
 		update_ref("initial pull", "HEAD", remote_head->object.sha1,
-			   NULL, 0, DIE_ON_ERR);
+			   NULL, 0, UPDATE_REFS_DIE_ON_ERR);
 		goto done;
 	} else {
 		struct strbuf merge_names = STRBUF_INIT;
 
 		/* We are invoked directly as the first-class UI. */
 		head_arg = "HEAD";
@@ -1279,16 +1273,13 @@
 				die(_("Commit %s does not have a GPG signature."), hex);
 			}
 			if (verbosity >= 0 && signature_check.result == 'G')
 				printf(_("Commit %s has a good GPG signature by %s\n"),
 				       hex, signature_check.signer);
 
-			free(signature_check.gpg_output);
-			free(signature_check.gpg_status);
-			free(signature_check.signer);
-			free(signature_check.key);
+			signature_check_clear(&signature_check);
 		}
 	}
 
 	strbuf_addstr(&buf, "merge");
 	for (p = remoteheads; p; p = p->next)
 		strbuf_addf(&buf, " %s", merge_remote_util(p->item)->name);
@@ -1336,13 +1327,13 @@
 		commit_list_insert(head_commit, &list);
 		common = get_octopus_merge_bases(list);
 		free(list);
 	}
 
 	update_ref("updating ORIG_HEAD", "ORIG_HEAD", head_commit->object.sha1,
-		   NULL, 0, DIE_ON_ERR);
+		   NULL, 0, UPDATE_REFS_DIE_ON_ERR);
 
 	if (remoteheads && !common)
 		; /* No common ancestors found. We need a real merge. */
 	else if (!remoteheads ||
 		 (!remoteheads->next && !common->next &&
 		  common->item == remoteheads->item)) {
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-file.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-file.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-file.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-file.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-index.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-index.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-index.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-index.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-ours.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-ours.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-ours.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-ours.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-recursive.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-recursive.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-recursive.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-recursive.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-tree.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-tree.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-tree.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-tree.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mktag.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mktag.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mktag.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mktag.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mktree.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mktree.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mktree.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mktree.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mv.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mv.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mv.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mv.c	2014-08-16 06:26:55.000000000 +0800
@@ -60,13 +60,13 @@
 
 static struct lock_file lock_file;
 #define SUBMODULE_WITH_GITDIR ((const char *)1)
 
 int cmd_mv(int argc, const char **argv, const char *prefix)
 {
-	int i, newfd, gitmodules_modified = 0;
+	int i, gitmodules_modified = 0;
 	int verbose = 0, show_only = 0, force = 0, ignore_errors = 0;
 	struct option builtin_mv_options[] = {
 		OPT__VERBOSE(&verbose, N_("be verbose")),
 		OPT__DRY_RUN(&show_only, N_("dry run")),
 		OPT__FORCE(&force, N_("force move/rename even if target exists")),
 		OPT_BOOL('k', NULL, &ignore_errors, N_("skip move/rename errors")),
@@ -82,13 +82,13 @@
 
 	argc = parse_options(argc, argv, prefix, builtin_mv_options,
 			     builtin_mv_usage, 0);
 	if (--argc < 1)
 		usage_with_options(builtin_mv_usage, builtin_mv_options);
 
-	newfd = hold_locked_index(&lock_file, 1);
+	hold_locked_index(&lock_file, 1);
 	if (read_cache() < 0)
 		die(_("index file corrupt"));
 
 	source = internal_copy_pathspec(prefix, argv, argc, 0);
 	modes = xcalloc(argc, sizeof(enum update_mode));
 	/*
@@ -273,13 +273,12 @@
 	}
 
 	if (gitmodules_modified)
 		stage_updated_gitmodules();
 
 	if (active_cache_changed) {
-		if (write_cache(newfd, active_cache, active_nr) ||
-		    commit_locked_index(&lock_file))
+		if (write_locked_index(&the_index, &lock_file, COMMIT_LOCK))
 			die(_("Unable to write new index file"));
 	}
 
 	return 0;
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mv.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mv.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mv.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mv.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/name-rev.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/name-rev.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/name-rev.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/name-rev.c	2014-08-16 06:26:55.000000000 +0800
@@ -30,16 +30,13 @@
 	parse_commit(commit);
 
 	if (commit->date < cutoff)
 		return;
 
 	if (deref) {
-		char *new_name = xmalloc(strlen(tip_name)+3);
-		strcpy(new_name, tip_name);
-		strcat(new_name, "^0");
-		tip_name = new_name;
+		tip_name = xstrfmt("%s^0", tip_name);
 
 		if (generation)
 			die("generation: %d, but deref?", generation);
 	}
 
 	if (name == NULL) {
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/name-rev.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/name-rev.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/name-rev.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/name-rev.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/notes.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/notes.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/notes.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/notes.c	2014-08-16 06:26:55.000000000 +0800
@@ -714,13 +714,13 @@
 	memset(&pretty_ctx, 0, sizeof(pretty_ctx));
 	format_commit_message(partial, "%s", &msg, &pretty_ctx);
 	strbuf_trim(&msg);
 	strbuf_insert(&msg, 0, "notes: ", 7);
 	update_ref(msg.buf, o->local_ref, sha1,
 		   is_null_sha1(parent_sha1) ? NULL : parent_sha1,
-		   0, DIE_ON_ERR);
+		   0, UPDATE_REFS_DIE_ON_ERR);
 
 	free_notes(t);
 	strbuf_release(&msg);
 	ret = merge_abort(o);
 	free(local_ref_to_free);
 	return ret;
@@ -809,17 +809,17 @@
 
 	result = notes_merge(&o, t, result_sha1);
 
 	if (result >= 0) /* Merge resulted (trivially) in result_sha1 */
 		/* Update default notes ref with new commit */
 		update_ref(msg.buf, default_notes_ref(), result_sha1, NULL,
-			   0, DIE_ON_ERR);
+			   0, UPDATE_REFS_DIE_ON_ERR);
 	else { /* Merge has unresolved conflicts */
 		/* Update .git/NOTES_MERGE_PARTIAL with partial merge result */
 		update_ref(msg.buf, "NOTES_MERGE_PARTIAL", result_sha1, NULL,
-			   0, DIE_ON_ERR);
+			   0, UPDATE_REFS_DIE_ON_ERR);
 		/* Store ref-to-be-updated into .git/NOTES_MERGE_REF */
 		if (create_symref("NOTES_MERGE_REF", default_notes_ref(), NULL))
 			die("Failed to store link to current notes ref (%s)",
 			    default_notes_ref());
 		printf("Automatic notes merge failed. Fix conflicts in %s and "
 		       "commit the result with 'git notes merge --commit', or "
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/notes.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/notes.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/notes.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/notes.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-objects.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-objects.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-objects.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-objects.c	2014-08-16 06:26:55.000000000 +0800
@@ -2211,16 +2211,12 @@
 		return 0;
 	}
 	if (!strcmp(k, "pack.deltacachelimit")) {
 		cache_max_small_delta_size = git_config_int(k, v);
 		return 0;
 	}
-	if (!strcmp(k, "pack.writebitmaps")) {
-		write_bitmap_index = git_config_bool(k, v);
-		return 0;
-	}
 	if (!strcmp(k, "pack.writebitmaphashcache")) {
 		if (git_config_bool(k, v))
 			write_bitmap_options |= BITMAP_OPT_HASH_CACHE;
 		else
 			write_bitmap_options &= ~BITMAP_OPT_HASH_CACHE;
 	}
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-objects.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-objects.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-objects.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-objects.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-redundant.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-redundant.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-redundant.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-redundant.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-refs.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-refs.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-refs.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-refs.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/patch-id.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/patch-id.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/patch-id.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/patch-id.c	2014-08-16 06:26:55.000000000 +0800
@@ -1,20 +1,17 @@
 #include "builtin.h"
 
-static void flush_current_id(int patchlen, unsigned char *id, git_SHA_CTX *c)
+static void flush_current_id(int patchlen, unsigned char *id, unsigned char *result)
 {
-	unsigned char result[20];
 	char name[50];
 
 	if (!patchlen)
 		return;
 
-	git_SHA1_Final(result, c);
 	memcpy(name, sha1_to_hex(id), 41);
 	printf("%s %s\n", sha1_to_hex(result), name);
-	git_SHA1_Init(c);
 }
 
 static int remove_space(char *line)
 {
 	char *src = line;
 	char *dst = line;
@@ -53,16 +50,37 @@
 
 	*p_before = atoi(q);
 	*p_after = atoi(r);
 	return 1;
 }
 
-static int get_one_patchid(unsigned char *next_sha1, git_SHA_CTX *ctx, struct strbuf *line_buf)
+static void flush_one_hunk(unsigned char *result, git_SHA_CTX *ctx)
+{
+	unsigned char hash[20];
+	unsigned short carry = 0;
+	int i;
+
+	git_SHA1_Final(hash, ctx);
+	git_SHA1_Init(ctx);
+	/* 20-byte sum, with carry */
+	for (i = 0; i < 20; ++i) {
+		carry += result[i] + hash[i];
+		result[i] = carry;
+		carry >>= 8;
+	}
+}
+
+static int get_one_patchid(unsigned char *next_sha1, unsigned char *result,
+			   struct strbuf *line_buf, int stable)
 {
 	int patchlen = 0, found_next = 0;
 	int before = -1, after = -1;
+	git_SHA_CTX ctx;
+
+	git_SHA1_Init(&ctx);
+	hashclr(result);
 
 	while (strbuf_getwholeline(line_buf, stdin, '\n') != EOF) {
 		char *line = line_buf->buf;
 		char *p = line;
 		int len;
 
@@ -104,54 +122,80 @@
 
 			/* Split at the end of the patch.  */
 			if (memcmp(line, "diff ", 5))
 				break;
 
 			/* Else we're parsing another header.  */
+			if (stable)
+				flush_one_hunk(result, &ctx);
 			before = after = -1;
 		}
 
 		/* If we get here, we're inside a hunk.  */
 		if (line[0] == '-' || line[0] == ' ')
 			before--;
 		if (line[0] == '+' || line[0] == ' ')
 			after--;
 
 		/* Compute the sha without whitespace */
 		len = remove_space(line);
 		patchlen += len;
-		git_SHA1_Update(ctx, line, len);
+		git_SHA1_Update(&ctx, line, len);
 	}
 
 	if (!found_next)
 		hashclr(next_sha1);
 
+	flush_one_hunk(result, &ctx);
+
 	return patchlen;
 }
 
-static void generate_id_list(void)
+static void generate_id_list(int stable)
 {
-	unsigned char sha1[20], n[20];
-	git_SHA_CTX ctx;
+	unsigned char sha1[20], n[20], result[20];
 	int patchlen;
 	struct strbuf line_buf = STRBUF_INIT;
 
-	git_SHA1_Init(&ctx);
 	hashclr(sha1);
 	while (!feof(stdin)) {
-		patchlen = get_one_patchid(n, &ctx, &line_buf);
-		flush_current_id(patchlen, sha1, &ctx);
+		patchlen = get_one_patchid(n, result, &line_buf, stable);
+		flush_current_id(patchlen, sha1, result);
 		hashcpy(sha1, n);
 	}
 	strbuf_release(&line_buf);
 }
 
-static const char patch_id_usage[] = "git patch-id < patch";
+static const char patch_id_usage[] = "git patch-id [--stable | --unstable] < patch";
+
+static int git_patch_id_config(const char *var, const char *value, void *cb)
+{
+	int *stable = cb;
+
+	if (!strcmp(var, "patchid.stable")) {
+		*stable = git_config_bool(var, value);
+		return 0;
+	}
+
+	return git_default_config(var, value, cb);
+}
 
 int cmd_patch_id(int argc, const char **argv, const char *prefix)
 {
-	if (argc != 1)
+	int stable = -1;
+
+	git_config(git_patch_id_config, &stable);
+
+	/* If nothing is set, default to unstable. */
+	if (stable < 0)
+		stable = 0;
+
+	if (argc == 2 && !strcmp(argv[1], "--stable"))
+		stable = 1;
+	else if (argc == 2 && !strcmp(argv[1], "--unstable"))
+		stable = 0;
+	else if (argc != 1)
 		usage(patch_id_usage);
 
-	generate_id_list();
+	generate_id_list(stable);
 	return 0;
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/patch-id.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/patch-id.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/patch-id.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/patch-id.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/prune.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/prune.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/prune.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/prune.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/prune-packed.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/prune-packed.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/prune-packed.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/prune-packed.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/push.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/push.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/push.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/push.c	2014-08-16 06:26:55.000000000 +0800
@@ -124,17 +124,16 @@
 	 * we have locally. Plus, this is supposed to be the simple
 	 * mode. If the user is doing something crazy like setting
 	 * upstream to a non-branch, we should probably be showing
 	 * them the big ugly fully qualified ref.
 	 */
 	const char *advice_maybe = "";
-	const char *short_upstream =
-		skip_prefix(branch->merge[0]->src, "refs/heads/");
+	const char *short_upstream = branch->merge[0]->src;
+
+	skip_prefix(short_upstream, "refs/heads/", &short_upstream);
 
-	if (!short_upstream)
-		short_upstream = branch->merge[0]->src;
 	/*
 	 * Don't show advice for people who explicitly set
 	 * push.default.
 	 */
 	if (push_default == PUSH_DEFAULT_UNSPECIFIED)
 		advice_maybe = _("\n"
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/push.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/push.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/push.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/push.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/read-tree.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/read-tree.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/read-tree.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/read-tree.c	2014-08-16 06:26:55.000000000 +0800
@@ -96,13 +96,13 @@
 }
 
 static struct lock_file lock_file;
 
 int cmd_read_tree(int argc, const char **argv, const char *unused_prefix)
 {
-	int i, newfd, stage = 0;
+	int i, stage = 0;
 	unsigned char sha1[20];
 	struct tree_desc t[MAX_UNPACK_TREES];
 	struct unpack_trees_options opts;
 	int prefix_set = 0;
 	const struct option read_tree_options[] = {
 		{ OPTION_CALLBACK, 0, "index-output", NULL, N_("file"),
@@ -146,18 +146,27 @@
 
 	git_config(git_default_config, NULL);
 
 	argc = parse_options(argc, argv, unused_prefix, read_tree_options,
 			     read_tree_usage, 0);
 
-	newfd = hold_locked_index(&lock_file, 1);
+	hold_locked_index(&lock_file, 1);
 
 	prefix_set = opts.prefix ? 1 : 0;
 	if (1 < opts.merge + opts.reset + prefix_set)
 		die("Which one? -m, --reset, or --prefix?");
 
+	/*
+	 * NEEDSWORK
+	 *
+	 * The old index should be read anyway even if we're going to
+	 * destroy all index entries because we still need to preserve
+	 * certain information such as index version or split-index
+	 * mode.
+	 */
+
 	if (opts.reset || opts.merge || opts.prefix) {
 		if (read_cache_unmerged() && (opts.prefix || opts.merge))
 			die("You need to resolve your current index first");
 		stage = opts.merge = 1;
 	}
 	resolve_undo_clear();
@@ -228,13 +237,12 @@
 	 * When reading only one tree (either the most basic form,
 	 * "-m ent" or "--reset ent" form), we can obtain a fully
 	 * valid cache-tree because the index must match exactly
 	 * what came from the tree.
 	 */
 	if (nr_trees == 1 && !opts.prefix)
-		prime_cache_tree(&active_cache_tree, trees[0]);
+		prime_cache_tree(&the_index, trees[0]);
 
-	if (write_cache(newfd, active_cache, active_nr) ||
-	    commit_locked_index(&lock_file))
+	if (write_locked_index(&the_index, &lock_file, COMMIT_LOCK))
 		die("unable to write new index file");
 	return 0;
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/read-tree.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/read-tree.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/read-tree.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/read-tree.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/receive-pack.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/receive-pack.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/receive-pack.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/receive-pack.c	2014-08-16 06:26:55.000000000 +0800
@@ -435,13 +435,13 @@
 	static struct lock_file shallow_lock;
 	struct sha1_array extra = SHA1_ARRAY_INIT;
 	const char *alt_file;
 	uint32_t mask = 1 << (cmd->index % 32);
 	int i;
 
-	trace_printf_key("GIT_TRACE_SHALLOW",
+	trace_printf_key(&trace_shallow,
 			 "shallow: update_shallow_ref %s\n", cmd->ref_name);
 	for (i = 0; i < si->shallow->nr; i++)
 		if (si->used_shallow[i] &&
 		    (si->used_shallow[i][cmd->index / 32] & mask) &&
 		    !delayed_reachability_test(si, i))
 			sha1_array_append(&extra, si->shallow->sha1[i]);
@@ -611,18 +611,15 @@
 		return;
 
 	argv = xmalloc(sizeof(*argv) * (2 + argc));
 	argv[0] = hook;
 
 	for (argc = 1, cmd = commands; cmd; cmd = cmd->next) {
-		char *p;
 		if (cmd->error_string || cmd->did_not_exist)
 			continue;
-		p = xmalloc(strlen(cmd->ref_name) + 1);
-		strcpy(p, cmd->ref_name);
-		argv[argc] = p;
+		argv[argc] = xstrdup(cmd->ref_name);
 		argc++;
 	}
 	argv[argc] = NULL;
 
 	memset(&proc, 0, sizeof(proc));
 	proc.no_stdin = 1;
@@ -1122,13 +1119,13 @@
 
 int cmd_receive_pack(int argc, const char **argv, const char *prefix)
 {
 	int advertise_refs = 0;
 	int stateless_rpc = 0;
 	int i;
-	char *dir = NULL;
+	const char *dir = NULL;
 	struct command *commands;
 	struct sha1_array shallow = SHA1_ARRAY_INIT;
 	struct sha1_array ref = SHA1_ARRAY_INIT;
 	struct shallow_info si;
 
 	packet_trace_identity("receive-pack");
@@ -1157,13 +1154,13 @@
 			}
 
 			usage(receive_pack_usage);
 		}
 		if (dir)
 			usage(receive_pack_usage);
-		dir = xstrdup(arg);
+		dir = arg;
 	}
 	if (!dir)
 		usage(receive_pack_usage);
 
 	setup_path();
 
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/receive-pack.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/receive-pack.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/receive-pack.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/receive-pack.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/reflog.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/reflog.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/reflog.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/reflog.c	2014-08-16 06:26:55.000000000 +0800
@@ -366,13 +366,13 @@
 	 * getting updated.
 	 */
 	lock = lock_any_ref_for_update(ref, sha1, 0, NULL);
 	if (!lock)
 		return error("cannot lock ref '%s'", ref);
 	log_file = git_pathdup("logs/%s", ref);
-	if (!file_exists(log_file))
+	if (!reflog_exists(ref))
 		goto finish;
 	if (!cmd->dry_run) {
 		newlog_path = git_pathdup("logs/%s.lock", ref);
 		cb.newlog = fopen(newlog_path, "w");
 	}
 
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/reflog.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/reflog.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/reflog.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/reflog.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote.c	2014-08-16 06:26:55.000000000 +0800
@@ -247,37 +247,36 @@
 };
 
 static struct string_list branch_list;
 
 static const char *abbrev_ref(const char *name, const char *prefix)
 {
-	const char *abbrev = skip_prefix(name, prefix);
-	if (abbrev)
-		return abbrev;
+	skip_prefix(name, prefix, &name);
 	return name;
 }
 #define abbrev_branch(name) abbrev_ref((name), "refs/heads/")
 
 static int config_read_branches(const char *key, const char *value, void *cb)
 {
 	if (starts_with(key, "branch.")) {
 		const char *orig_key = key;
 		char *name;
 		struct string_list_item *item;
 		struct branch_info *info;
 		enum { REMOTE, MERGE, REBASE } type;
+		size_t key_len;
 
 		key += 7;
-		if (ends_with(key, ".remote")) {
-			name = xstrndup(key, strlen(key) - 7);
+		if (strip_suffix(key, ".remote", &key_len)) {
+			name = xmemdupz(key, key_len);
 			type = REMOTE;
-		} else if (ends_with(key, ".merge")) {
-			name = xstrndup(key, strlen(key) - 6);
+		} else if (strip_suffix(key, ".merge", &key_len)) {
+			name = xmemdupz(key, key_len);
 			type = MERGE;
-		} else if (ends_with(key, ".rebase")) {
-			name = xstrndup(key, strlen(key) - 7);
+		} else if (strip_suffix(key, ".rebase", &key_len)) {
+			name = xmemdupz(key, key_len);
 			type = REBASE;
 		} else
 			return 0;
 
 		item = string_list_insert(&branch_list, name);
 
@@ -752,13 +751,13 @@
 	const char **branch_names;
 	int i, result = 0;
 
 	branch_names = xmalloc(branches->nr * sizeof(*branch_names));
 	for (i = 0; i < branches->nr; i++)
 		branch_names[i] = branches->items[i].string;
-	result |= repack_without_refs(branch_names, branches->nr);
+	result |= repack_without_refs(branch_names, branches->nr, NULL);
 	free(branch_names);
 
 	for (i = 0; i < branches->nr; i++) {
 		struct string_list_item *item = branches->items + i;
 		const char *refname = item->string;
 
@@ -1330,13 +1329,14 @@
 		       : _("(no URL)"));
 
 		delete_refs = xmalloc(states.stale.nr * sizeof(*delete_refs));
 		for (i = 0; i < states.stale.nr; i++)
 			delete_refs[i] = states.stale.items[i].util;
 		if (!dry_run)
-			result |= repack_without_refs(delete_refs, states.stale.nr);
+			result |= repack_without_refs(delete_refs,
+						      states.stale.nr, NULL);
 		free(delete_refs);
 	}
 
 	for (i = 0; i < states.stale.nr; i++) {
 		const char *refname = states.stale.items[i].util;
 
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote-ext.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote-ext.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote-ext.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote-ext.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote-fd.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote-fd.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote-fd.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote-fd.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/repack.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/repack.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/repack.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/repack.c	2014-08-16 06:26:55.000000000 +0800
@@ -7,13 +7,13 @@
 #include "strbuf.h"
 #include "string-list.h"
 #include "argv-array.h"
 
 static int delta_base_offset = 1;
 static int pack_kept_objects = -1;
-static int write_bitmaps = -1;
+static int write_bitmaps;
 static char *packdir, *packtmp;
 
 static const char *const git_repack_usage[] = {
 	N_("git repack [options]"),
 	NULL
 };
@@ -25,13 +25,14 @@
 		return 0;
 	}
 	if (!strcmp(var, "repack.packkeptobjects")) {
 		pack_kept_objects = git_config_bool(var, value);
 		return 0;
 	}
-	if (!strcmp(var, "pack.writebitmaps")) {
+	if (!strcmp(var, "repack.writebitmaps") ||
+	    !strcmp(var, "pack.writebitmaps")) {
 		write_bitmaps = git_config_bool(var, value);
 		return 0;
 	}
 	return git_default_config(var, value, cb);
 }
 
@@ -79,22 +80,21 @@
  */
 static void get_non_kept_pack_filenames(struct string_list *fname_list)
 {
 	DIR *dir;
 	struct dirent *e;
 	char *fname;
-	size_t len;
 
 	if (!(dir = opendir(packdir)))
 		return;
 
 	while ((e = readdir(dir)) != NULL) {
-		if (!ends_with(e->d_name, ".pack"))
+		size_t len;
+		if (!strip_suffix(e->d_name, ".pack", &len))
 			continue;
 
-		len = strlen(e->d_name) - strlen(".pack");
 		fname = xmemdupz(e->d_name, len);
 
 		if (!file_exists(mkpath("%s/%s.keep", packdir, fname)))
 			string_list_append_nodup(fname_list, fname);
 		else
 			free(fname);
@@ -192,13 +192,13 @@
 	git_config(repack_config, NULL);
 
 	argc = parse_options(argc, argv, prefix, builtin_repack_options,
 				git_repack_usage, 0);
 
 	if (pack_kept_objects < 0)
-		pack_kept_objects = write_bitmaps > 0;
+		pack_kept_objects = write_bitmaps;
 
 	packdir = mkpathdup("%s/pack", get_object_directory());
 	packtmp = mkpathdup("%s/.tmp-%d-pack", packdir, (int)getpid());
 
 	sigchain_push_common(remove_pack_on_signal);
 
@@ -218,15 +218,14 @@
 	if (max_pack_size)
 		argv_array_pushf(&cmd_args, "--max-pack-size=%s", max_pack_size);
 	if (no_reuse_delta)
 		argv_array_pushf(&cmd_args, "--no-reuse-delta");
 	if (no_reuse_object)
 		argv_array_pushf(&cmd_args, "--no-reuse-object");
-	if (write_bitmaps >= 0)
-		argv_array_pushf(&cmd_args, "--%swrite-bitmap-index",
-				 write_bitmaps ? "" : "no-");
+	if (write_bitmaps)
+		argv_array_push(&cmd_args, "--write-bitmap-index");
 
 	if (pack_everything & ALL_INTO_ONE) {
 		get_non_kept_pack_filenames(&existing_packs);
 
 		if (existing_packs.nr && delete_redundant) {
 			if (unpack_unreachable)
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/repack.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/repack.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/repack.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/repack.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/replace.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/replace.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/replace.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/replace.c	2014-08-16 06:26:55.000000000 +0800
@@ -9,24 +9,28 @@
  */
 
 #include "cache.h"
 #include "builtin.h"
 #include "refs.h"
 #include "parse-options.h"
+#include "run-command.h"
+#include "tag.h"
 
 static const char * const git_replace_usage[] = {
 	N_("git replace [-f] <object> <replacement>"),
+	N_("git replace [-f] --edit <object>"),
+	N_("git replace [-f] --graft <commit> [<parent>...]"),
 	N_("git replace -d <object>..."),
 	N_("git replace [--format=<format>] [-l [<pattern>]]"),
 	NULL
 };
 
 enum replace_format {
-      REPLACE_FORMAT_SHORT,
-      REPLACE_FORMAT_MEDIUM,
-      REPLACE_FORMAT_LONG
+	REPLACE_FORMAT_SHORT,
+	REPLACE_FORMAT_MEDIUM,
+	REPLACE_FORMAT_LONG
 };
 
 struct show_data {
 	const char *pattern;
 	enum replace_format format;
 };
@@ -120,106 +124,372 @@
 	if (delete_ref(ref, sha1, 0))
 		return 1;
 	printf("Deleted replace ref '%s'\n", name);
 	return 0;
 }
 
-static int replace_object(const char *object_ref, const char *replace_ref,
-			  int force)
+static void check_ref_valid(unsigned char object[20],
+			    unsigned char prev[20],
+			    char *ref,
+			    int ref_size,
+			    int force)
 {
-	unsigned char object[20], prev[20], repl[20];
-	enum object_type obj_type, repl_type;
-	char ref[PATH_MAX];
-	struct ref_lock *lock;
-
-	if (get_sha1(object_ref, object))
-		die("Failed to resolve '%s' as a valid ref.", object_ref);
-	if (get_sha1(replace_ref, repl))
-		die("Failed to resolve '%s' as a valid ref.", replace_ref);
-
-	if (snprintf(ref, sizeof(ref),
+	if (snprintf(ref, ref_size,
 		     "refs/replace/%s",
-		     sha1_to_hex(object)) > sizeof(ref) - 1)
+		     sha1_to_hex(object)) > ref_size - 1)
 		die("replace ref name too long: %.*s...", 50, ref);
 	if (check_refname_format(ref, 0))
 		die("'%s' is not a valid ref name.", ref);
 
+	if (read_ref(ref, prev))
+		hashclr(prev);
+	else if (!force)
+		die("replace ref '%s' already exists", ref);
+}
+
+static int replace_object_sha1(const char *object_ref,
+			       unsigned char object[20],
+			       const char *replace_ref,
+			       unsigned char repl[20],
+			       int force)
+{
+	unsigned char prev[20];
+	enum object_type obj_type, repl_type;
+	char ref[PATH_MAX];
+	struct ref_lock *lock;
+
 	obj_type = sha1_object_info(object, NULL);
 	repl_type = sha1_object_info(repl, NULL);
 	if (!force && obj_type != repl_type)
 		die("Objects must be of the same type.\n"
 		    "'%s' points to a replaced object of type '%s'\n"
 		    "while '%s' points to a replacement object of type '%s'.",
 		    object_ref, typename(obj_type),
 		    replace_ref, typename(repl_type));
 
-	if (read_ref(ref, prev))
-		hashclr(prev);
-	else if (!force)
-		die("replace ref '%s' already exists", ref);
+	check_ref_valid(object, prev, ref, sizeof(ref), force);
 
 	lock = lock_any_ref_for_update(ref, prev, 0, NULL);
 	if (!lock)
 		die("%s: cannot lock the ref", ref);
 	if (write_ref_sha1(lock, repl, NULL) < 0)
 		die("%s: cannot update the ref", ref);
 
 	return 0;
 }
 
+static int replace_object(const char *object_ref, const char *replace_ref, int force)
+{
+	unsigned char object[20], repl[20];
+
+	if (get_sha1(object_ref, object))
+		die("Failed to resolve '%s' as a valid ref.", object_ref);
+	if (get_sha1(replace_ref, repl))
+		die("Failed to resolve '%s' as a valid ref.", replace_ref);
+
+	return replace_object_sha1(object_ref, object, replace_ref, repl, force);
+}
+
+/*
+ * Write the contents of the object named by "sha1" to the file "filename".
+ * If "raw" is true, then the object's raw contents are printed according to
+ * "type". Otherwise, we pretty-print the contents for human editing.
+ */
+static void export_object(const unsigned char *sha1, enum object_type type,
+			  int raw, const char *filename)
+{
+	struct child_process cmd = { NULL };
+	int fd;
+
+	fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0666);
+	if (fd < 0)
+		die_errno("unable to open %s for writing", filename);
+
+	argv_array_push(&cmd.args, "--no-replace-objects");
+	argv_array_push(&cmd.args, "cat-file");
+	if (raw)
+		argv_array_push(&cmd.args, typename(type));
+	else
+		argv_array_push(&cmd.args, "-p");
+	argv_array_push(&cmd.args, sha1_to_hex(sha1));
+	cmd.git_cmd = 1;
+	cmd.out = fd;
+
+	if (run_command(&cmd))
+		die("cat-file reported failure");
+}
+
+/*
+ * Read a previously-exported (and possibly edited) object back from "filename",
+ * interpreting it as "type", and writing the result to the object database.
+ * The sha1 of the written object is returned via sha1.
+ */
+static void import_object(unsigned char *sha1, enum object_type type,
+			  int raw, const char *filename)
+{
+	int fd;
+
+	fd = open(filename, O_RDONLY);
+	if (fd < 0)
+		die_errno("unable to open %s for reading", filename);
+
+	if (!raw && type == OBJ_TREE) {
+		const char *argv[] = { "mktree", NULL };
+		struct child_process cmd = { argv };
+		struct strbuf result = STRBUF_INIT;
+
+		cmd.argv = argv;
+		cmd.git_cmd = 1;
+		cmd.in = fd;
+		cmd.out = -1;
+
+		if (start_command(&cmd))
+			die("unable to spawn mktree");
+
+		if (strbuf_read(&result, cmd.out, 41) < 0)
+			die_errno("unable to read from mktree");
+		close(cmd.out);
+
+		if (finish_command(&cmd))
+			die("mktree reported failure");
+		if (get_sha1_hex(result.buf, sha1) < 0)
+			die("mktree did not return an object name");
+
+		strbuf_release(&result);
+	} else {
+		struct stat st;
+		int flags = HASH_FORMAT_CHECK | HASH_WRITE_OBJECT;
+
+		if (fstat(fd, &st) < 0)
+			die_errno("unable to fstat %s", filename);
+		if (index_fd(sha1, fd, &st, type, NULL, flags) < 0)
+			die("unable to write object to database");
+		/* index_fd close()s fd for us */
+	}
+
+	/*
+	 * No need to close(fd) here; both run-command and index-fd
+	 * will have done it for us.
+	 */
+}
+
+static int edit_and_replace(const char *object_ref, int force, int raw)
+{
+	char *tmpfile = git_pathdup("REPLACE_EDITOBJ");
+	enum object_type type;
+	unsigned char old[20], new[20], prev[20];
+	char ref[PATH_MAX];
+
+	if (get_sha1(object_ref, old) < 0)
+		die("Not a valid object name: '%s'", object_ref);
+
+	type = sha1_object_info(old, NULL);
+	if (type < 0)
+		die("unable to get object type for %s", sha1_to_hex(old));
+
+	check_ref_valid(old, prev, ref, sizeof(ref), force);
+
+	export_object(old, type, raw, tmpfile);
+	if (launch_editor(tmpfile, NULL, NULL) < 0)
+		die("editing object file failed");
+	import_object(new, type, raw, tmpfile);
+
+	free(tmpfile);
+
+	if (!hashcmp(old, new))
+		return error("new object is the same as the old one: '%s'", sha1_to_hex(old));
+
+	return replace_object_sha1(object_ref, old, "replacement", new, force);
+}
+
+static void replace_parents(struct strbuf *buf, int argc, const char **argv)
+{
+	struct strbuf new_parents = STRBUF_INIT;
+	const char *parent_start, *parent_end;
+	int i;
+
+	/* find existing parents */
+	parent_start = buf->buf;
+	parent_start += 46; /* "tree " + "hex sha1" + "\n" */
+	parent_end = parent_start;
+
+	while (starts_with(parent_end, "parent "))
+		parent_end += 48; /* "parent " + "hex sha1" + "\n" */
+
+	/* prepare new parents */
+	for (i = 0; i < argc; i++) {
+		unsigned char sha1[20];
+		if (get_sha1(argv[i], sha1) < 0)
+			die(_("Not a valid object name: '%s'"), argv[i]);
+		lookup_commit_or_die(sha1, argv[i]);
+		strbuf_addf(&new_parents, "parent %s\n", sha1_to_hex(sha1));
+	}
+
+	/* replace existing parents with new ones */
+	strbuf_splice(buf, parent_start - buf->buf, parent_end - parent_start,
+		      new_parents.buf, new_parents.len);
+
+	strbuf_release(&new_parents);
+}
+
+struct check_mergetag_data {
+	int argc;
+	const char **argv;
+};
+
+static void check_one_mergetag(struct commit *commit,
+			       struct commit_extra_header *extra,
+			       void *data)
+{
+	struct check_mergetag_data *mergetag_data = (struct check_mergetag_data *)data;
+	const char *ref = mergetag_data->argv[0];
+	unsigned char tag_sha1[20];
+	struct tag *tag;
+	int i;
+
+	hash_sha1_file(extra->value, extra->len, typename(OBJ_TAG), tag_sha1);
+	tag = lookup_tag(tag_sha1);
+	if (!tag)
+		die(_("bad mergetag in commit '%s'"), ref);
+	if (parse_tag_buffer(tag, extra->value, extra->len))
+		die(_("malformed mergetag in commit '%s'"), ref);
+
+	/* iterate over new parents */
+	for (i = 1; i < mergetag_data->argc; i++) {
+		unsigned char sha1[20];
+		if (get_sha1(mergetag_data->argv[i], sha1) < 0)
+			die(_("Not a valid object name: '%s'"), mergetag_data->argv[i]);
+		if (!hashcmp(tag->tagged->sha1, sha1))
+			return; /* found */
+	}
+
+	die(_("original commit '%s' contains mergetag '%s' that is discarded; "
+	      "use --edit instead of --graft"), ref, sha1_to_hex(tag_sha1));
+}
+
+static void check_mergetags(struct commit *commit, int argc, const char **argv)
+{
+	struct check_mergetag_data mergetag_data;
+
+	mergetag_data.argc = argc;
+	mergetag_data.argv = argv;
+	for_each_mergetag(check_one_mergetag, commit, &mergetag_data);
+}
+
+static int create_graft(int argc, const char **argv, int force)
+{
+	unsigned char old[20], new[20];
+	const char *old_ref = argv[0];
+	struct commit *commit;
+	struct strbuf buf = STRBUF_INIT;
+	const char *buffer;
+	unsigned long size;
+
+	if (get_sha1(old_ref, old) < 0)
+		die(_("Not a valid object name: '%s'"), old_ref);
+	commit = lookup_commit_or_die(old, old_ref);
+
+	buffer = get_commit_buffer(commit, &size);
+	strbuf_add(&buf, buffer, size);
+	unuse_commit_buffer(commit, buffer);
+
+	replace_parents(&buf, argc - 1, &argv[1]);
+
+	if (remove_signature(&buf)) {
+		warning(_("the original commit '%s' has a gpg signature."), old_ref);
+		warning(_("the signature will be removed in the replacement commit!"));
+	}
+
+	check_mergetags(commit, argc, argv);
+
+	if (write_sha1_file(buf.buf, buf.len, commit_type, new))
+		die(_("could not write replacement commit for: '%s'"), old_ref);
+
+	strbuf_release(&buf);
+
+	if (!hashcmp(old, new))
+		return error("new commit is the same as the old one: '%s'", sha1_to_hex(old));
+
+	return replace_object_sha1(old_ref, old, "replacement", new, force);
+}
+
 int cmd_replace(int argc, const char **argv, const char *prefix)
 {
-	int list = 0, delete = 0, force = 0;
+	int force = 0;
+	int raw = 0;
 	const char *format = NULL;
+	enum {
+		MODE_UNSPECIFIED = 0,
+		MODE_LIST,
+		MODE_DELETE,
+		MODE_EDIT,
+		MODE_GRAFT,
+		MODE_REPLACE
+	} cmdmode = MODE_UNSPECIFIED;
 	struct option options[] = {
-		OPT_BOOL('l', "list", &list, N_("list replace refs")),
-		OPT_BOOL('d', "delete", &delete, N_("delete replace refs")),
+		OPT_CMDMODE('l', "list", &cmdmode, N_("list replace refs"), MODE_LIST),
+		OPT_CMDMODE('d', "delete", &cmdmode, N_("delete replace refs"), MODE_DELETE),
+		OPT_CMDMODE('e', "edit", &cmdmode, N_("edit existing object"), MODE_EDIT),
+		OPT_CMDMODE('g', "graft", &cmdmode, N_("change a commit's parents"), MODE_GRAFT),
 		OPT_BOOL('f', "force", &force, N_("replace the ref if it exists")),
+		OPT_BOOL(0, "raw", &raw, N_("do not pretty-print contents for --edit")),
 		OPT_STRING(0, "format", &format, N_("format"), N_("use this format")),
 		OPT_END()
 	};
 
 	check_replace_refs = 0;
 
 	argc = parse_options(argc, argv, prefix, options, git_replace_usage, 0);
 
-	if (list && delete)
-		usage_msg_opt("-l and -d cannot be used together",
+	if (!cmdmode)
+		cmdmode = argc ? MODE_REPLACE : MODE_LIST;
+
+	if (format && cmdmode != MODE_LIST)
+		usage_msg_opt("--format cannot be used when not listing",
 			      git_replace_usage, options);
 
-	if (format && delete)
-		usage_msg_opt("--format and -d cannot be used together",
+	if (force &&
+	    cmdmode != MODE_REPLACE &&
+	    cmdmode != MODE_EDIT &&
+	    cmdmode != MODE_GRAFT)
+		usage_msg_opt("-f only makes sense when writing a replacement",
 			      git_replace_usage, options);
 
-	if (force && (list || delete))
-		usage_msg_opt("-f cannot be used with -d or -l",
+	if (raw && cmdmode != MODE_EDIT)
+		usage_msg_opt("--raw only makes sense with --edit",
 			      git_replace_usage, options);
 
-	/* Delete refs */
-	if (delete) {
+	switch (cmdmode) {
+	case MODE_DELETE:
 		if (argc < 1)
 			usage_msg_opt("-d needs at least one argument",
 				      git_replace_usage, options);
 		return for_each_replace_name(argv, delete_replace_ref);
-	}
 
-	/* Replace object */
-	if (!list && argc) {
+	case MODE_REPLACE:
 		if (argc != 2)
 			usage_msg_opt("bad number of arguments",
 				      git_replace_usage, options);
-		if (format)
-			usage_msg_opt("--format cannot be used when not listing",
-				      git_replace_usage, options);
 		return replace_object(argv[0], argv[1], force);
-	}
 
-	/* List refs, even if "list" is not set */
-	if (argc > 1)
-		usage_msg_opt("only one pattern can be given with -l",
-			      git_replace_usage, options);
-	if (force)
-		usage_msg_opt("-f needs some arguments",
-			      git_replace_usage, options);
+	case MODE_EDIT:
+		if (argc != 1)
+			usage_msg_opt("-e needs exactly one argument",
+				      git_replace_usage, options);
+		return edit_and_replace(argv[0], force, raw);
 
-	return list_replace_refs(argv[0], format);
+	case MODE_GRAFT:
+		if (argc < 1)
+			usage_msg_opt("-g needs at least one argument",
+				      git_replace_usage, options);
+		return create_graft(argc, argv, force);
+
+	case MODE_LIST:
+		if (argc > 1)
+			usage_msg_opt("only one pattern can be given with -l",
+				      git_replace_usage, options);
+		return list_replace_refs(argv[0], format);
+
+	default:
+		die("BUG: invalid cmdmode %d", (int)cmdmode);
+	}
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/replace.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/replace.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/replace.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/replace.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rerere.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rerere.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rerere.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rerere.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/reset.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/reset.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/reset.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/reset.c	2014-08-16 06:26:55.000000000 +0800
@@ -81,13 +81,13 @@
 		return error(_("Failed to find tree of %s."), sha1_to_hex(sha1));
 	if (unpack_trees(nr, desc, &opts))
 		return -1;
 
 	if (reset_type == MIXED || reset_type == HARD) {
 		tree = parse_tree_indirect(sha1);
-		prime_cache_tree(&active_cache_tree, tree);
+		prime_cache_tree(&the_index, tree);
 	}
 
 	return 0;
 }
 
 static void print_new_head_line(struct commit *commit)
@@ -249,17 +249,19 @@
 
 	if (!get_sha1("ORIG_HEAD", sha1_old_orig))
 		old_orig = sha1_old_orig;
 	if (!get_sha1("HEAD", sha1_orig)) {
 		orig = sha1_orig;
 		set_reflog_message(&msg, "updating ORIG_HEAD", NULL);
-		update_ref(msg.buf, "ORIG_HEAD", orig, old_orig, 0, MSG_ON_ERR);
+		update_ref(msg.buf, "ORIG_HEAD", orig, old_orig, 0,
+			   UPDATE_REFS_MSG_ON_ERR);
 	} else if (old_orig)
 		delete_ref("ORIG_HEAD", old_orig, 0);
 	set_reflog_message(&msg, "updating HEAD", rev);
-	update_ref_status = update_ref(msg.buf, "HEAD", sha1, orig, 0, MSG_ON_ERR);
+	update_ref_status = update_ref(msg.buf, "HEAD", sha1, orig, 0,
+				       UPDATE_REFS_MSG_ON_ERR);
 	strbuf_release(&msg);
 	return update_ref_status;
 }
 
 int cmd_reset(int argc, const char **argv, const char *prefix)
 {
@@ -348,13 +350,13 @@
 	 * the index file to the tree object we are switching to. */
 	if (reset_type == SOFT || reset_type == KEEP)
 		die_if_unmerged_cache(reset_type);
 
 	if (reset_type != SOFT) {
 		struct lock_file *lock = xcalloc(1, sizeof(*lock));
-		int newfd = hold_locked_index(lock, 1);
+		hold_locked_index(lock, 1);
 		if (reset_type == MIXED) {
 			int flags = quiet ? REFRESH_QUIET : REFRESH_IN_PORCELAIN;
 			if (read_from_tree(&pathspec, sha1, intent_to_add))
 				return 1;
 			if (get_git_work_tree())
 				refresh_index(&the_index, flags, NULL, NULL,
@@ -364,14 +366,13 @@
 			if (reset_type == KEEP && !err)
 				err = reset_index(sha1, MIXED, quiet);
 			if (err)
 				die(_("Could not reset index file to revision '%s'."), rev);
 		}
 
-		if (write_cache(newfd, active_cache, active_nr) ||
-		    commit_locked_index(lock))
+		if (write_locked_index(&the_index, lock, COMMIT_LOCK))
 			die(_("Could not write new index file."));
 	}
 
 	if (!pathspec.nr && !unborn) {
 		/* Any resets without paths update HEAD to the head being
 		 * switched to, saving the previous head in ORIG_HEAD before. */
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/reset.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/reset.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/reset.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/reset.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/revert.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/revert.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/revert.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/revert.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rev-list.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rev-list.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rev-list.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rev-list.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rev-parse.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rev-parse.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rev-parse.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rev-parse.c	2014-08-16 06:26:55.000000000 +0800
@@ -8,12 +8,13 @@
 #include "refs.h"
 #include "quote.h"
 #include "builtin.h"
 #include "parse-options.h"
 #include "diff.h"
 #include "revision.h"
+#include "split-index.h"
 
 #define DO_REVS		1
 #define DO_NOREV	2
 #define DO_FLAGS	4
 #define DO_NONFLAGS	8
 static int filter = ~0;
@@ -147,12 +148,13 @@
 				show_with_type(type, full);
 				break;
 			default: /* ambiguous */
 				error("refname '%s' is ambiguous", name);
 				break;
 			}
+			free(full);
 		} else {
 			show_with_type(type, name);
 		}
 	}
 	else if (abbrev)
 		show_with_type(type, find_unique_abbrev(sha1, abbrev));
@@ -772,12 +774,21 @@
 			}
 			if (!strcmp(arg, "--is-bare-repository")) {
 				printf("%s\n", is_bare_repository() ? "true"
 						: "false");
 				continue;
 			}
+			if (!strcmp(arg, "--shared-index-path")) {
+				if (read_cache() < 0)
+					die(_("Could not read the index"));
+				if (the_index.split_index) {
+					const unsigned char *sha1 = the_index.split_index->base_sha1;
+					puts(git_path("sharedindex.%s", sha1_to_hex(sha1)));
+				}
+				continue;
+			}
 			if (starts_with(arg, "--since=")) {
 				show_datestring("--max-age=", arg+8);
 				continue;
 			}
 			if (starts_with(arg, "--after=")) {
 				show_datestring("--max-age=", arg+8);
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rev-parse.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rev-parse.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rev-parse.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rev-parse.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rm.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rm.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rm.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rm.c	2014-08-16 06:26:55.000000000 +0800
@@ -275,13 +275,13 @@
 				N_("exit with a zero status even if nothing matched")),
 	OPT_END(),
 };
 
 int cmd_rm(int argc, const char **argv, const char *prefix)
 {
-	int i, newfd;
+	int i;
 	struct pathspec pathspec;
 	char *seen;
 
 	gitmodules_config();
 	git_config(git_default_config, NULL);
 
@@ -290,13 +290,13 @@
 	if (!argc)
 		usage_with_options(builtin_rm_usage, builtin_rm_options);
 
 	if (!index_only)
 		setup_work_tree();
 
-	newfd = hold_locked_index(&lock_file, 1);
+	hold_locked_index(&lock_file, 1);
 
 	if (read_cache() < 0)
 		die(_("index file corrupt"));
 
 	parse_pathspec(&pathspec, 0,
 		       PATHSPEC_PREFER_CWD |
@@ -424,13 +424,12 @@
 		}
 		if (gitmodules_modified)
 			stage_updated_gitmodules();
 	}
 
 	if (active_cache_changed) {
-		if (write_cache(newfd, active_cache, active_nr) ||
-		    commit_locked_index(&lock_file))
+		if (write_locked_index(&the_index, &lock_file, COMMIT_LOCK))
 			die(_("Unable to write new index file"));
 	}
 
 	return 0;
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rm.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rm.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rm.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rm.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/send-pack.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/send-pack.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/send-pack.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/send-pack.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/shortlog.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/shortlog.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/shortlog.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/shortlog.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/show-branch.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/show-branch.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/show-branch.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/show-branch.c	2014-08-16 06:26:55.000000000 +0800
@@ -752,13 +752,13 @@
 				read_ref_at(ref, at, -1, sha1, NULL,
 					    NULL, NULL, &base);
 			}
 		}
 
 		for (i = 0; i < reflog; i++) {
-			char *logmsg, *m;
+			char *logmsg;
 			const char *msg;
 			unsigned long timestamp;
 			int tz;
 
 			if (read_ref_at(ref, 0, base+i, sha1, &logmsg,
 					&timestamp, &tz, NULL)) {
@@ -767,21 +767,20 @@
 			}
 			msg = strchr(logmsg, '\t');
 			if (!msg)
 				msg = "(none)";
 			else
 				msg++;
-			m = xmalloc(strlen(msg) + 200);
-			sprintf(m, "(%s) %s",
-				show_date(timestamp, tz, 1),
-				msg);
-			reflog_msg[i] = m;
+			reflog_msg[i] = xstrfmt("(%s) %s",
+						show_date(timestamp, tz, 1),
+						msg);
 			free(logmsg);
 			sprintf(nth_desc, "%s@{%d}", *av, base+i);
 			append_ref(nth_desc, sha1, 1);
 		}
+		free(ref);
 	}
 	else if (all_heads + all_remotes)
 		snarf_refs(all_heads, all_remotes);
 	else {
 		while (0 < ac) {
 			append_one_rev(*av);
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/show-branch.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/show-branch.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/show-branch.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/show-branch.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/show-ref.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/show-ref.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/show-ref.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/show-ref.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/stripspace.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/stripspace.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/stripspace.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/stripspace.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/symbolic-ref.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/symbolic-ref.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/symbolic-ref.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/symbolic-ref.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/tag.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/tag.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/tag.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/tag.c	2014-08-16 06:26:55.000000000 +0800
@@ -29,12 +29,14 @@
 
 #define STRCMP_SORT     0	/* must be zero */
 #define VERCMP_SORT     1
 #define SORT_MASK       0x7fff
 #define REVERSE_SORT    0x8000
 
+static int tag_sort;
+
 struct tag_filter {
 	const char **patterns;
 	int lines;
 	int sort;
 	struct string_list tags;
 	struct commit_list *with_commit;
@@ -77,44 +79,104 @@
 	for (; want; want = want->next)
 		if (!hashcmp(want->item->object.sha1, c->object.sha1))
 			return 1;
 	return 0;
 }
 
-static int contains_recurse(struct commit *candidate,
+enum contains_result {
+	CONTAINS_UNKNOWN = -1,
+	CONTAINS_NO = 0,
+	CONTAINS_YES = 1
+};
+
+/*
+ * Test whether the candidate or one of its parents is contained in the list.
+ * Do not recurse to find out, though, but return -1 if inconclusive.
+ */
+static enum contains_result contains_test(struct commit *candidate,
 			    const struct commit_list *want)
 {
-	struct commit_list *p;
-
 	/* was it previously marked as containing a want commit? */
 	if (candidate->object.flags & TMP_MARK)
 		return 1;
 	/* or marked as not possibly containing a want commit? */
 	if (candidate->object.flags & UNINTERESTING)
 		return 0;
 	/* or are we it? */
-	if (in_commit_list(want, candidate))
+	if (in_commit_list(want, candidate)) {
+		candidate->object.flags |= TMP_MARK;
 		return 1;
+	}
 
 	if (parse_commit(candidate) < 0)
 		return 0;
 
-	/* Otherwise recurse and mark ourselves for future traversals. */
-	for (p = candidate->parents; p; p = p->next) {
-		if (contains_recurse(p->item, want)) {
-			candidate->object.flags |= TMP_MARK;
-			return 1;
-		}
-	}
-	candidate->object.flags |= UNINTERESTING;
-	return 0;
+	return -1;
 }
 
-static int contains(struct commit *candidate, const struct commit_list *want)
+/*
+ * Mimicking the real stack, this stack lives on the heap, avoiding stack
+ * overflows.
+ *
+ * At each recursion step, the stack items points to the commits whose
+ * ancestors are to be inspected.
+ */
+struct stack {
+	int nr, alloc;
+	struct stack_entry {
+		struct commit *commit;
+		struct commit_list *parents;
+	} *stack;
+};
+
+static void push_to_stack(struct commit *candidate, struct stack *stack)
 {
-	return contains_recurse(candidate, want);
+	int index = stack->nr++;
+	ALLOC_GROW(stack->stack, stack->nr, stack->alloc);
+	stack->stack[index].commit = candidate;
+	stack->stack[index].parents = candidate->parents;
+}
+
+static enum contains_result contains(struct commit *candidate,
+		const struct commit_list *want)
+{
+	struct stack stack = { 0, 0, NULL };
+	int result = contains_test(candidate, want);
+
+	if (result != CONTAINS_UNKNOWN)
+		return result;
+
+	push_to_stack(candidate, &stack);
+	while (stack.nr) {
+		struct stack_entry *entry = &stack.stack[stack.nr - 1];
+		struct commit *commit = entry->commit;
+		struct commit_list *parents = entry->parents;
+
+		if (!parents) {
+			commit->object.flags |= UNINTERESTING;
+			stack.nr--;
+		}
+		/*
+		 * If we just popped the stack, parents->item has been marked,
+		 * therefore contains_test will return a meaningful 0 or 1.
+		 */
+		else switch (contains_test(parents->item, want)) {
+		case CONTAINS_YES:
+			commit->object.flags |= TMP_MARK;
+			stack.nr--;
+			break;
+		case CONTAINS_NO:
+			entry->parents = parents->next;
+			break;
+		case CONTAINS_UNKNOWN:
+			push_to_stack(parents->item, &stack);
+			break;
+		}
+	}
+	free(stack.stack);
+	return contains_test(candidate, want);
 }
 
 static void show_tag_lines(const unsigned char *sha1, int lines)
 {
 	int i;
 	unsigned long size;
@@ -275,23 +337,65 @@
 static int do_sign(struct strbuf *buffer)
 {
 	return sign_buffer(buffer, buffer, get_signing_key());
 }
 
 static const char tag_template[] =
-	N_("\nWrite a tag message\n"
+	N_("\nWrite a message for tag:\n  %s\n"
 	"Lines starting with '%c' will be ignored.\n");
 
 static const char tag_template_nocleanup[] =
-	N_("\nWrite a tag message\n"
+	N_("\nWrite a message for tag:\n  %s\n"
 	"Lines starting with '%c' will be kept; you may remove them"
 	" yourself if you want to.\n");
 
+/*
+ * Parse a sort string, and return 0 if parsed successfully. Will return
+ * non-zero when the sort string does not parse into a known type. If var is
+ * given, the error message becomes a warning and includes information about
+ * the configuration value.
+ */
+static int parse_sort_string(const char *var, const char *arg, int *sort)
+{
+	int type = 0, flags = 0;
+
+	if (skip_prefix(arg, "-", &arg))
+		flags |= REVERSE_SORT;
+
+	if (skip_prefix(arg, "version:", &arg) || skip_prefix(arg, "v:", &arg))
+		type = VERCMP_SORT;
+	else
+		type = STRCMP_SORT;
+
+	if (strcmp(arg, "refname")) {
+		if (!var)
+			return error(_("unsupported sort specification '%s'"), arg);
+		else {
+			warning(_("unsupported sort specification '%s' in variable '%s'"),
+				var, arg);
+			return -1;
+		}
+	}
+
+	*sort = (type | flags);
+
+	return 0;
+}
+
 static int git_tag_config(const char *var, const char *value, void *cb)
 {
-	int status = git_gpg_config(var, value, cb);
+	int status;
+
+	if (!strcmp(var, "tag.sort")) {
+		if (!value)
+			return config_error_nonbool(var);
+		parse_sort_string(var, value, &tag_sort);
+		return 0;
+	}
+
+	status = git_gpg_config(var, value, cb);
 	if (status)
 		return status;
 	if (starts_with(var, "column."))
 		return git_column_config(var, value, "tag", &colopts);
 	return git_default_config(var, value, cb);
 }
@@ -375,15 +479,15 @@
 		if (!is_null_sha1(prev)) {
 			write_tag_body(fd, prev);
 		} else {
 			struct strbuf buf = STRBUF_INIT;
 			strbuf_addch(&buf, '\n');
 			if (opt->cleanup_mode == CLEANUP_ALL)
-				strbuf_commented_addf(&buf, _(tag_template), comment_line_char);
+				strbuf_commented_addf(&buf, _(tag_template), tag, comment_line_char);
 			else
-				strbuf_commented_addf(&buf, _(tag_template_nocleanup), comment_line_char);
+				strbuf_commented_addf(&buf, _(tag_template_nocleanup), tag, comment_line_char);
 			write_or_die(fd, buf.buf, buf.len);
 			strbuf_release(&buf);
 		}
 		close(fd);
 
 		if (launch_editor(path, buf, NULL)) {
@@ -459,43 +563,27 @@
 	return 0;
 }
 
 static int parse_opt_sort(const struct option *opt, const char *arg, int unset)
 {
 	int *sort = opt->value;
-	int flags = 0;
 
-	if (*arg == '-') {
-		flags |= REVERSE_SORT;
-		arg++;
-	}
-	if (starts_with(arg, "version:")) {
-		*sort = VERCMP_SORT;
-		arg += 8;
-	} else if (starts_with(arg, "v:")) {
-		*sort = VERCMP_SORT;
-		arg += 2;
-	} else
-		*sort = STRCMP_SORT;
-	if (strcmp(arg, "refname"))
-		die(_("unsupported sort specification %s"), arg);
-	*sort |= flags;
-	return 0;
+	return parse_sort_string(NULL, arg, sort);
 }
 
 int cmd_tag(int argc, const char **argv, const char *prefix)
 {
 	struct strbuf buf = STRBUF_INIT;
 	struct strbuf ref = STRBUF_INIT;
 	unsigned char object[20], prev[20];
 	const char *object_ref, *tag;
 	struct ref_lock *lock;
 	struct create_tag_options opt;
 	char *cleanup_arg = NULL;
 	int annotate = 0, force = 0, lines = -1;
-	int cmdmode = 0, sort = 0;
+	int cmdmode = 0;
 	const char *msgfile = NULL, *keyid = NULL;
 	struct msg_arg msg = { 0, STRBUF_INIT };
 	struct commit_list *with_commit = NULL;
 	struct option options[] = {
 		OPT_CMDMODE('l', "list", &cmdmode, N_("list tag names"), 'l'),
 		{ OPTION_INTEGER, 'n', NULL, &lines, N_("n"),
@@ -515,13 +603,13 @@
 			N_("how to strip spaces and #comments from message")),
 		OPT_STRING('u', "local-user", &keyid, N_("key-id"),
 					N_("use another key to sign the tag")),
 		OPT__FORCE(&force, N_("replace the tag if exists")),
 		OPT_COLUMN(0, "column", &colopts, N_("show tag list in columns")),
 		{
-			OPTION_CALLBACK, 0, "sort", &sort, N_("type"), N_("sort tags"),
+			OPTION_CALLBACK, 0, "sort", &tag_sort, N_("type"), N_("sort tags"),
 			PARSE_OPT_NONEG, parse_opt_sort
 		},
 
 		OPT_GROUP(N_("Tag listing options")),
 		{
 			OPTION_CALLBACK, 0, "contains", &with_commit, N_("commit"),
@@ -571,15 +659,15 @@
 		if (column_active(colopts)) {
 			struct column_options copts;
 			memset(&copts, 0, sizeof(copts));
 			copts.padding = 2;
 			run_column_filter(colopts, &copts);
 		}
-		if (lines != -1 && sort)
+		if (lines != -1 && tag_sort)
 			die(_("--sort and -n are incompatible"));
-		ret = list_tags(argv, lines == -1 ? 0 : lines, with_commit, sort);
+		ret = list_tags(argv, lines == -1 ? 0 : lines, with_commit, tag_sort);
 		if (column_active(colopts))
 			stop_column_filter();
 		return ret;
 	}
 	if (lines != -1)
 		die(_("-n option is only allowed with -l."));
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/tag.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/tag.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/tag.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/tag.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/unpack-file.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/unpack-file.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/unpack-file.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/unpack-file.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/unpack-objects.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/unpack-objects.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/unpack-objects.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/unpack-objects.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-index.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-index.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-index.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-index.c	2014-08-16 06:26:55.000000000 +0800
@@ -10,12 +10,13 @@
 #include "builtin.h"
 #include "refs.h"
 #include "resolve-undo.h"
 #include "parse-options.h"
 #include "pathspec.h"
 #include "dir.h"
+#include "split-index.h"
 
 /*
  * Default to not allowing changes to the list of files. The
  * tool doesn't actually care, but this makes it harder to add
  * files to the revision control by mistake by doing something
  * like "git update-index *" and suddenly having all the object
@@ -52,14 +53,15 @@
 	int pos = cache_name_pos(path, namelen);
 	if (0 <= pos) {
 		if (mark)
 			active_cache[pos]->ce_flags |= flag;
 		else
 			active_cache[pos]->ce_flags &= ~flag;
-		cache_tree_invalidate_path(active_cache_tree, path);
-		active_cache_changed = 1;
+		active_cache[pos]->ce_flags |= CE_UPDATE_IN_BASE;
+		cache_tree_invalidate_path(&the_index, path);
+		active_cache_changed |= CE_ENTRY_CHANGED;
 		return 0;
 	}
 	return -1;
 }
 
 static int remove_one_path(const char *path)
@@ -264,14 +266,15 @@
 		ce->ce_mode |= 0111; break;
 	case '-':
 		ce->ce_mode &= ~0111; break;
 	default:
 		goto fail;
 	}
-	cache_tree_invalidate_path(active_cache_tree, path);
-	active_cache_changed = 1;
+	cache_tree_invalidate_path(&the_index, path);
+	ce->ce_flags |= CE_UPDATE_IN_BASE;
+	active_cache_changed |= CE_ENTRY_CHANGED;
 	report("chmod %cx '%s'", flip, path);
 	return;
  fail:
 	die("git update-index: cannot chmod %cx '%s'", flip, path);
 }
 
@@ -740,12 +743,13 @@
 	int read_from_stdin = 0;
 	int prefix_length = prefix ? strlen(prefix) : 0;
 	int preferred_index_format = 0;
 	char set_executable_bit = 0;
 	struct refresh_params refresh_args = {0, &has_errors};
 	int lock_error = 0;
+	int split_index = -1;
 	struct lock_file *lock_file;
 	struct parse_opt_ctx_t ctx;
 	int parseopt_state = PARSE_OPT_UNKNOWN;
 	struct option options[] = {
 		OPT_BIT('q', NULL, &refresh_args.flags,
 			N_("continue refresh even when index needs update"),
@@ -822,12 +826,14 @@
 		{OPTION_CALLBACK, 0, "clear-resolve-undo", NULL, NULL,
 			N_("(for porcelains) forget saved unresolved conflicts"),
 			PARSE_OPT_NOARG | PARSE_OPT_NONEG,
 			resolve_undo_clear_callback},
 		OPT_INTEGER(0, "index-version", &preferred_index_format,
 			N_("write index in this format")),
+		OPT_BOOL(0, "split-index", &split_index,
+			N_("enable or disable split index")),
 		OPT_END()
 	};
 
 	if (argc == 2 && !strcmp(argv[1], "-h"))
 		usage_with_options(update_index_usage, options);
 
@@ -889,13 +895,13 @@
 		    INDEX_FORMAT_UB < preferred_index_format)
 			die("index-version %d not in range: %d..%d",
 			    preferred_index_format,
 			    INDEX_FORMAT_LB, INDEX_FORMAT_UB);
 
 		if (the_index.version != preferred_index_format)
-			active_cache_changed = 1;
+			active_cache_changed |= SOMETHING_CHANGED;
 		the_index.version = preferred_index_format;
 	}
 
 	if (read_from_stdin) {
 		struct strbuf buf = STRBUF_INIT, nbuf = STRBUF_INIT;
 
@@ -915,20 +921,33 @@
 			free((char *)p);
 		}
 		strbuf_release(&nbuf);
 		strbuf_release(&buf);
 	}
 
+	if (split_index > 0) {
+		init_split_index(&the_index);
+		the_index.cache_changed |= SPLIT_INDEX_ORDERED;
+	} else if (!split_index && the_index.split_index) {
+		/*
+		 * can't discard_split_index(&the_index); because that
+		 * will destroy split_index->base->cache[], which may
+		 * be shared with the_index.cache[]. So yeah we're
+		 * leaking a bit here.
+		 */
+		the_index.split_index = NULL;
+		the_index.cache_changed |= SOMETHING_CHANGED;
+	}
+
 	if (active_cache_changed) {
 		if (newfd < 0) {
 			if (refresh_args.flags & REFRESH_QUIET)
 				exit(128);
 			unable_to_lock_index_die(get_index_file(), lock_error);
 		}
-		if (write_cache(newfd, active_cache, active_nr) ||
-		    commit_locked_index(lock_file))
+		if (write_locked_index(&the_index, lock_file, COMMIT_LOCK))
 			die("Unable to write new index file");
 	}
 
 	rollback_lock_file(lock_file);
 
 	return has_errors ? 1 : 0;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-index.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-index.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-index.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-index.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-ref.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-ref.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-ref.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-ref.c	2014-08-16 06:26:55.000000000 +0800
@@ -9,244 +9,338 @@
 	N_("git update-ref [options] -d <refname> [<oldval>]"),
 	N_("git update-ref [options]    <refname> <newval> [<oldval>]"),
 	N_("git update-ref [options] --stdin [-z]"),
 	NULL
 };
 
-static int updates_alloc;
-static int updates_count;
-static const struct ref_update **updates;
+static struct ref_transaction *transaction;
 
 static char line_termination = '\n';
 static int update_flags;
+static struct strbuf err = STRBUF_INIT;
 
-static struct ref_update *update_alloc(void)
-{
-	struct ref_update *update;
-
-	/* Allocate and zero-init a struct ref_update */
-	update = xcalloc(1, sizeof(*update));
-	ALLOC_GROW(updates, updates_count + 1, updates_alloc);
-	updates[updates_count++] = update;
-
-	/* Store and reset accumulated options */
-	update->flags = update_flags;
-	update_flags = 0;
-
-	return update;
-}
-
-static void update_store_ref_name(struct ref_update *update,
-				  const char *ref_name)
-{
-	if (check_refname_format(ref_name, REFNAME_ALLOW_ONELEVEL))
-		die("invalid ref format: %s", ref_name);
-	update->ref_name = xstrdup(ref_name);
-}
-
-static void update_store_new_sha1(struct ref_update *update,
-				  const char *newvalue)
-{
-	if (*newvalue && get_sha1(newvalue, update->new_sha1))
-		die("invalid new value for ref %s: %s",
-		    update->ref_name, newvalue);
-}
-
-static void update_store_old_sha1(struct ref_update *update,
-				  const char *oldvalue)
-{
-	if (*oldvalue && get_sha1(oldvalue, update->old_sha1))
-		die("invalid old value for ref %s: %s",
-		    update->ref_name, oldvalue);
-
-	/* We have an old value if non-empty, or if empty without -z */
-	update->have_old = *oldvalue || line_termination;
-}
-
+/*
+ * Parse one whitespace- or NUL-terminated, possibly C-quoted argument
+ * and append the result to arg.  Return a pointer to the terminator.
+ * Die if there is an error in how the argument is C-quoted.  This
+ * function is only used if not -z.
+ */
 static const char *parse_arg(const char *next, struct strbuf *arg)
 {
-	/* Parse SP-terminated, possibly C-quoted argument */
-	if (*next != '"')
+	if (*next == '"') {
+		const char *orig = next;
+
+		if (unquote_c_style(arg, next, &next))
+			die("badly quoted argument: %s", orig);
+		if (*next && !isspace(*next))
+			die("unexpected character after quoted argument: %s", orig);
+	} else {
 		while (*next && !isspace(*next))
 			strbuf_addch(arg, *next++);
-	else if (unquote_c_style(arg, next, &next))
-		die("badly quoted argument: %s", next);
+	}
 
-	/* Return position after the argument */
 	return next;
 }
 
-static const char *parse_first_arg(const char *next, struct strbuf *arg)
+/*
+ * Parse the reference name immediately after "command SP".  If not
+ * -z, then handle C-quoting.  Return a pointer to a newly allocated
+ * string containing the name of the reference, or NULL if there was
+ * an error.  Update *next to point at the character that terminates
+ * the argument.  Die if C-quoting is malformed or the reference name
+ * is invalid.
+ */
+static char *parse_refname(struct strbuf *input, const char **next)
 {
-	/* Parse argument immediately after "command SP" */
-	strbuf_reset(arg);
+	struct strbuf ref = STRBUF_INIT;
+
 	if (line_termination) {
 		/* Without -z, use the next argument */
-		next = parse_arg(next, arg);
+		*next = parse_arg(*next, &ref);
 	} else {
-		/* With -z, use rest of first NUL-terminated line */
-		strbuf_addstr(arg, next);
-		next = next + arg->len;
+		/* With -z, use everything up to the next NUL */
+		strbuf_addstr(&ref, *next);
+		*next += ref.len;
 	}
-	return next;
+
+	if (!ref.len) {
+		strbuf_release(&ref);
+		return NULL;
+	}
+
+	if (check_refname_format(ref.buf, REFNAME_ALLOW_ONELEVEL))
+		die("invalid ref format: %s", ref.buf);
+
+	return strbuf_detach(&ref, NULL);
 }
 
-static const char *parse_next_arg(const char *next, struct strbuf *arg)
+/*
+ * The value being parsed is <oldvalue> (as opposed to <newvalue>; the
+ * difference affects which error messages are generated):
+ */
+#define PARSE_SHA1_OLD 0x01
+
+/*
+ * For backwards compatibility, accept an empty string for update's
+ * <newvalue> in binary mode to be equivalent to specifying zeros.
+ */
+#define PARSE_SHA1_ALLOW_EMPTY 0x02
+
+/*
+ * Parse an argument separator followed by the next argument, if any.
+ * If there is an argument, convert it to a SHA-1, write it to sha1,
+ * set *next to point at the character terminating the argument, and
+ * return 0.  If there is no argument at all (not even the empty
+ * string), return 1 and leave *next unchanged.  If the value is
+ * provided but cannot be converted to a SHA-1, die.  flags can
+ * include PARSE_SHA1_OLD and/or PARSE_SHA1_ALLOW_EMPTY.
+ */
+static int parse_next_sha1(struct strbuf *input, const char **next,
+			   unsigned char *sha1,
+			   const char *command, const char *refname,
+			   int flags)
 {
-	/* Parse next SP-terminated or NUL-terminated argument, if any */
-	strbuf_reset(arg);
+	struct strbuf arg = STRBUF_INIT;
+	int ret = 0;
+
+	if (*next == input->buf + input->len)
+		goto eof;
+
 	if (line_termination) {
 		/* Without -z, consume SP and use next argument */
-		if (!*next)
-			return NULL;
-		if (*next != ' ')
-			die("expected SP but got: %s", next);
-		next = parse_arg(next + 1, arg);
+		if (!**next || **next == line_termination)
+			return 1;
+		if (**next != ' ')
+			die("%s %s: expected SP but got: %s",
+			    command, refname, *next);
+		(*next)++;
+		*next = parse_arg(*next, &arg);
+		if (arg.len) {
+			if (get_sha1(arg.buf, sha1))
+				goto invalid;
+		} else {
+			/* Without -z, an empty value means all zeros: */
+			hashclr(sha1);
+		}
 	} else {
 		/* With -z, read the next NUL-terminated line */
-		if (*next)
-			die("expected NUL but got: %s", next);
-		if (strbuf_getline(arg, stdin, '\0') == EOF)
-			return NULL;
-		next = arg->buf + arg->len;
+		if (**next)
+			die("%s %s: expected NUL but got: %s",
+			    command, refname, *next);
+		(*next)++;
+		if (*next == input->buf + input->len)
+			goto eof;
+		strbuf_addstr(&arg, *next);
+		*next += arg.len;
+
+		if (arg.len) {
+			if (get_sha1(arg.buf, sha1))
+				goto invalid;
+		} else if (flags & PARSE_SHA1_ALLOW_EMPTY) {
+			/* With -z, treat an empty value as all zeros: */
+			warning("%s %s: missing <newvalue>, treating as zero",
+				command, refname);
+			hashclr(sha1);
+		} else {
+			/*
+			 * With -z, an empty non-required value means
+			 * unspecified:
+			 */
+			ret = 1;
+		}
 	}
-	return next;
-}
 
-static void parse_cmd_update(const char *next)
-{
-	struct strbuf ref = STRBUF_INIT;
-	struct strbuf newvalue = STRBUF_INIT;
-	struct strbuf oldvalue = STRBUF_INIT;
-	struct ref_update *update;
+	strbuf_release(&arg);
 
-	update = update_alloc();
+	return ret;
 
-	if ((next = parse_first_arg(next, &ref)) != NULL && ref.buf[0])
-		update_store_ref_name(update, ref.buf);
-	else
-		die("update line missing <ref>");
+ invalid:
+	die(flags & PARSE_SHA1_OLD ?
+	    "%s %s: invalid <oldvalue>: %s" :
+	    "%s %s: invalid <newvalue>: %s",
+	    command, refname, arg.buf);
+
+ eof:
+	die(flags & PARSE_SHA1_OLD ?
+	    "%s %s: unexpected end of input when reading <oldvalue>" :
+	    "%s %s: unexpected end of input when reading <newvalue>",
+	    command, refname);
+}
 
-	if ((next = parse_next_arg(next, &newvalue)) != NULL)
-		update_store_new_sha1(update, newvalue.buf);
-	else
-		die("update %s missing <newvalue>", ref.buf);
 
-	if ((next = parse_next_arg(next, &oldvalue)) != NULL)
-		update_store_old_sha1(update, oldvalue.buf);
-	else if(!line_termination)
-		die("update %s missing [<oldvalue>] NUL", ref.buf);
+/*
+ * The following five parse_cmd_*() functions parse the corresponding
+ * command.  In each case, next points at the character following the
+ * command name and the following space.  They each return a pointer
+ * to the character terminating the command, and die with an
+ * explanatory message if there are any parsing problems.  All of
+ * these functions handle either text or binary format input,
+ * depending on how line_termination is set.
+ */
+
+static const char *parse_cmd_update(struct strbuf *input, const char *next)
+{
+	char *refname;
+	unsigned char new_sha1[20];
+	unsigned char old_sha1[20];
+	int have_old;
+
+	refname = parse_refname(input, &next);
+	if (!refname)
+		die("update: missing <ref>");
+
+	if (parse_next_sha1(input, &next, new_sha1, "update", refname,
+			    PARSE_SHA1_ALLOW_EMPTY))
+		die("update %s: missing <newvalue>", refname);
+
+	have_old = !parse_next_sha1(input, &next, old_sha1, "update", refname,
+				    PARSE_SHA1_OLD);
+
+	if (*next != line_termination)
+		die("update %s: extra input: %s", refname, next);
+
+	if (ref_transaction_update(transaction, refname, new_sha1, old_sha1,
+				   update_flags, have_old, &err))
+		die("%s", err.buf);
+
+	update_flags = 0;
+	free(refname);
 
-	if (next && *next)
-		die("update %s has extra input: %s", ref.buf, next);
+	return next;
 }
 
-static void parse_cmd_create(const char *next)
+static const char *parse_cmd_create(struct strbuf *input, const char *next)
 {
-	struct strbuf ref = STRBUF_INIT;
-	struct strbuf newvalue = STRBUF_INIT;
-	struct ref_update *update;
+	char *refname;
+	unsigned char new_sha1[20];
 
-	update = update_alloc();
-	update->have_old = 1;
+	refname = parse_refname(input, &next);
+	if (!refname)
+		die("create: missing <ref>");
 
-	if ((next = parse_first_arg(next, &ref)) != NULL && ref.buf[0])
-		update_store_ref_name(update, ref.buf);
-	else
-		die("create line missing <ref>");
+	if (parse_next_sha1(input, &next, new_sha1, "create", refname, 0))
+		die("create %s: missing <newvalue>", refname);
 
-	if ((next = parse_next_arg(next, &newvalue)) != NULL)
-		update_store_new_sha1(update, newvalue.buf);
-	else
-		die("create %s missing <newvalue>", ref.buf);
-	if (is_null_sha1(update->new_sha1))
-		die("create %s given zero new value", ref.buf);
+	if (is_null_sha1(new_sha1))
+		die("create %s: zero <newvalue>", refname);
+
+	if (*next != line_termination)
+		die("create %s: extra input: %s", refname, next);
+
+	ref_transaction_create(transaction, refname, new_sha1, update_flags);
+
+	update_flags = 0;
+	free(refname);
 
-	if (next && *next)
-		die("create %s has extra input: %s", ref.buf, next);
+	return next;
 }
 
-static void parse_cmd_delete(const char *next)
+static const char *parse_cmd_delete(struct strbuf *input, const char *next)
 {
-	struct strbuf ref = STRBUF_INIT;
-	struct strbuf oldvalue = STRBUF_INIT;
-	struct ref_update *update;
+	char *refname;
+	unsigned char old_sha1[20];
+	int have_old;
+
+	refname = parse_refname(input, &next);
+	if (!refname)
+		die("delete: missing <ref>");
+
+	if (parse_next_sha1(input, &next, old_sha1, "delete", refname,
+			    PARSE_SHA1_OLD)) {
+		have_old = 0;
+	} else {
+		if (is_null_sha1(old_sha1))
+			die("delete %s: zero <oldvalue>", refname);
+		have_old = 1;
+	}
 
-	update = update_alloc();
+	if (*next != line_termination)
+		die("delete %s: extra input: %s", refname, next);
 
-	if ((next = parse_first_arg(next, &ref)) != NULL && ref.buf[0])
-		update_store_ref_name(update, ref.buf);
-	else
-		die("delete line missing <ref>");
+	ref_transaction_delete(transaction, refname, old_sha1,
+			       update_flags, have_old);
 
-	if ((next = parse_next_arg(next, &oldvalue)) != NULL)
-		update_store_old_sha1(update, oldvalue.buf);
-	else if(!line_termination)
-		die("delete %s missing [<oldvalue>] NUL", ref.buf);
-	if (update->have_old && is_null_sha1(update->old_sha1))
-		die("delete %s given zero old value", ref.buf);
+	update_flags = 0;
+	free(refname);
 
-	if (next && *next)
-		die("delete %s has extra input: %s", ref.buf, next);
+	return next;
 }
 
-static void parse_cmd_verify(const char *next)
+static const char *parse_cmd_verify(struct strbuf *input, const char *next)
 {
-	struct strbuf ref = STRBUF_INIT;
-	struct strbuf value = STRBUF_INIT;
-	struct ref_update *update;
+	char *refname;
+	unsigned char new_sha1[20];
+	unsigned char old_sha1[20];
+	int have_old;
+
+	refname = parse_refname(input, &next);
+	if (!refname)
+		die("verify: missing <ref>");
+
+	if (parse_next_sha1(input, &next, old_sha1, "verify", refname,
+			    PARSE_SHA1_OLD)) {
+		hashclr(new_sha1);
+		have_old = 0;
+	} else {
+		hashcpy(new_sha1, old_sha1);
+		have_old = 1;
+	}
 
-	update = update_alloc();
+	if (*next != line_termination)
+		die("verify %s: extra input: %s", refname, next);
 
-	if ((next = parse_first_arg(next, &ref)) != NULL && ref.buf[0])
-		update_store_ref_name(update, ref.buf);
-	else
-		die("verify line missing <ref>");
+	if (ref_transaction_update(transaction, refname, new_sha1, old_sha1,
+				   update_flags, have_old, &err))
+		die("%s", err.buf);
 
-	if ((next = parse_next_arg(next, &value)) != NULL) {
-		update_store_old_sha1(update, value.buf);
-		update_store_new_sha1(update, value.buf);
-	} else if(!line_termination)
-		die("verify %s missing [<oldvalue>] NUL", ref.buf);
+	update_flags = 0;
+	free(refname);
 
-	if (next && *next)
-		die("verify %s has extra input: %s", ref.buf, next);
+	return next;
 }
 
-static void parse_cmd_option(const char *next)
+static const char *parse_cmd_option(struct strbuf *input, const char *next)
 {
-	if (!strcmp(next, "no-deref"))
+	if (!strncmp(next, "no-deref", 8) && next[8] == line_termination)
 		update_flags |= REF_NODEREF;
 	else
 		die("option unknown: %s", next);
+	return next + 8;
 }
 
 static void update_refs_stdin(void)
 {
-	struct strbuf cmd = STRBUF_INIT;
+	struct strbuf input = STRBUF_INIT;
+	const char *next;
 
+	if (strbuf_read(&input, 0, 1000) < 0)
+		die_errno("could not read from stdin");
+	next = input.buf;
 	/* Read each line dispatch its command */
-	while (strbuf_getline(&cmd, stdin, line_termination) != EOF)
-		if (!cmd.buf[0])
+	while (next < input.buf + input.len) {
+		if (*next == line_termination)
 			die("empty command in input");
-		else if (isspace(*cmd.buf))
-			die("whitespace before command: %s", cmd.buf);
-		else if (starts_with(cmd.buf, "update "))
-			parse_cmd_update(cmd.buf + 7);
-		else if (starts_with(cmd.buf, "create "))
-			parse_cmd_create(cmd.buf + 7);
-		else if (starts_with(cmd.buf, "delete "))
-			parse_cmd_delete(cmd.buf + 7);
-		else if (starts_with(cmd.buf, "verify "))
-			parse_cmd_verify(cmd.buf + 7);
-		else if (starts_with(cmd.buf, "option "))
-			parse_cmd_option(cmd.buf + 7);
+		else if (isspace(*next))
+			die("whitespace before command: %s", next);
+		else if (starts_with(next, "update "))
+			next = parse_cmd_update(&input, next + 7);
+		else if (starts_with(next, "create "))
+			next = parse_cmd_create(&input, next + 7);
+		else if (starts_with(next, "delete "))
+			next = parse_cmd_delete(&input, next + 7);
+		else if (starts_with(next, "verify "))
+			next = parse_cmd_verify(&input, next + 7);
+		else if (starts_with(next, "option "))
+			next = parse_cmd_option(&input, next + 7);
 		else
-			die("unknown command: %s", cmd.buf);
+			die("unknown command: %s", next);
+
+		next++;
+	}
 
-	strbuf_release(&cmd);
+	strbuf_release(&input);
 }
 
 int cmd_update_ref(int argc, const char **argv, const char *prefix)
 {
 	const char *refname, *oldval, *msg = NULL;
 	unsigned char sha1[20], oldsha1[20];
@@ -265,18 +359,22 @@
 	argc = parse_options(argc, argv, prefix, options, git_update_ref_usage,
 			     0);
 	if (msg && !*msg)
 		die("Refusing to perform update with empty message.");
 
 	if (read_stdin) {
+		transaction = ref_transaction_begin();
 		if (delete || no_deref || argc > 0)
 			usage_with_options(git_update_ref_usage, options);
 		if (end_null)
 			line_termination = '\0';
 		update_refs_stdin();
-		return update_refs(msg, updates, updates_count, DIE_ON_ERR);
+		if (ref_transaction_commit(transaction, msg, &err))
+			die("%s", err.buf);
+		ref_transaction_free(transaction);
+		return 0;
 	}
 
 	if (end_null)
 		usage_with_options(git_update_ref_usage, options);
 
 	if (delete) {
@@ -302,8 +400,8 @@
 	if (no_deref)
 		flags = REF_NODEREF;
 	if (delete)
 		return delete_ref(refname, oldval ? oldsha1 : NULL, flags);
 	else
 		return update_ref(msg, refname, sha1, oldval ? oldsha1 : NULL,
-				  flags, DIE_ON_ERR);
+				  flags, UPDATE_REFS_DIE_ON_ERR);
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-ref.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-ref.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-ref.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-ref.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-server-info.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-server-info.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-server-info.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-server-info.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/upload-archive.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/upload-archive.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/upload-archive.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/upload-archive.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/var.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/var.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/var.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/var.o differ
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin: verify-commit.c
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin: verify-commit.c.bc
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin: verify-commit.o
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/verify-pack.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-pack.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/verify-pack.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-pack.c	2014-08-16 06:26:55.000000000 +0800
@@ -24,16 +24,15 @@
 
 	/*
 	 * In addition to "foo.pack" we accept "foo.idx" and "foo";
 	 * normalize these forms to "foo.pack" for "index-pack --verify".
 	 */
 	strbuf_addstr(&arg, path);
-	if (has_extension(arg.buf, ".idx"))
-		strbuf_splice(&arg, arg.len - 3, 3, "pack", 4);
-	else if (!has_extension(arg.buf, ".pack"))
-		strbuf_add(&arg, ".pack", 5);
+	if (strbuf_strip_suffix(&arg, ".idx") ||
+	    !ends_with(arg.buf, ".pack"))
+		strbuf_addstr(&arg, ".pack");
 	argv[2] = arg.buf;
 
 	memset(&index_pack, 0, sizeof(index_pack));
 	index_pack.argv = argv;
 	index_pack.git_cmd = 1;
 
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/verify-pack.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-pack.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/verify-pack.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-pack.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/verify-tag.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-tag.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/verify-tag.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-tag.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/write-tree.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/write-tree.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/write-tree.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/write-tree.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin.h	2014-08-16 06:26:55.000000000 +0800
@@ -125,12 +125,13 @@
 extern int cmd_update_index(int argc, const char **argv, const char *prefix);
 extern int cmd_update_ref(int argc, const char **argv, const char *prefix);
 extern int cmd_update_server_info(int argc, const char **argv, const char *prefix);
 extern int cmd_upload_archive(int argc, const char **argv, const char *prefix);
 extern int cmd_upload_archive_writer(int argc, const char **argv, const char *prefix);
 extern int cmd_var(int argc, const char **argv, const char *prefix);
+extern int cmd_verify_commit(int argc, const char **argv, const char *prefix);
 extern int cmd_verify_tag(int argc, const char **argv, const char *prefix);
 extern int cmd_version(int argc, const char **argv, const char *prefix);
 extern int cmd_whatchanged(int argc, const char **argv, const char *prefix);
 extern int cmd_write_tree(int argc, const char **argv, const char *prefix);
 extern int cmd_verify_pack(int argc, const char **argv, const char *prefix);
 extern int cmd_show_ref(int argc, const char **argv, const char *prefix);
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bulk-checkin.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bulk-checkin.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bulk-checkin.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bulk-checkin.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bundle.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bundle.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bundle.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bundle.c	2014-08-16 06:26:55.000000000 +0800
@@ -234,14 +234,12 @@
 int create_bundle(struct bundle_header *header, const char *path,
 		  int argc, const char **argv)
 {
 	static struct lock_file lock;
 	int bundle_fd = -1;
 	int bundle_to_stdout;
-	struct argv_array argv_boundary = ARGV_ARRAY_INIT;
-	struct argv_array argv_pack = ARGV_ARRAY_INIT;
 	int i, ref_count = 0;
 	struct strbuf buf = STRBUF_INIT;
 	struct rev_info revs;
 	struct child_process rls;
 	FILE *rls_fout;
 
@@ -257,20 +255,18 @@
 
 	/* init revs to list objects for pack-objects later */
 	save_commit_buffer = 0;
 	init_revisions(&revs, NULL);
 
 	/* write prerequisites */
-	argv_array_pushl(&argv_boundary,
+	memset(&rls, 0, sizeof(rls));
+	argv_array_pushl(&rls.args,
 			 "rev-list", "--boundary", "--pretty=oneline",
 			 NULL);
 	for (i = 1; i < argc; i++)
-		argv_array_push(&argv_boundary, argv[i]);
-
-	memset(&rls, 0, sizeof(rls));
-	rls.argv = argv_boundary.argv;
+		argv_array_push(&rls.args, argv[i]);
 	rls.out = -1;
 	rls.git_cmd = 1;
 	if (start_command(&rls))
 		return -1;
 	rls_fout = xfdopen(rls.out, "r");
 	while (strbuf_getwholeline(&buf, rls_fout, '\n') != EOF) {
@@ -379,18 +375,17 @@
 		die(_("Refusing to create empty bundle."));
 
 	/* end header */
 	write_or_die(bundle_fd, "\n", 1);
 
 	/* write pack */
-	argv_array_pushl(&argv_pack,
+	memset(&rls, 0, sizeof(rls));
+	argv_array_pushl(&rls.args,
 			 "pack-objects", "--all-progress-implied",
 			 "--stdout", "--thin", "--delta-base-offset",
 			 NULL);
-	memset(&rls, 0, sizeof(rls));
-	rls.argv = argv_pack.argv;
 	rls.in = -1;
 	rls.out = bundle_fd;
 	rls.git_cmd = 1;
 	if (start_command(&rls))
 		return error(_("Could not spawn pack-objects"));
 
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bundle.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bundle.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bundle.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bundle.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/cache.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/cache.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/cache.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/cache.h	2014-08-16 06:26:55.000000000 +0800
@@ -4,12 +4,13 @@
 #include "git-compat-util.h"
 #include "strbuf.h"
 #include "hashmap.h"
 #include "advice.h"
 #include "gettext.h"
 #include "convert.h"
+#include "trace.h"
 
 #include SHA1_HEADER
 #ifndef git_SHA_CTX
 #define git_SHA_CTX	SHA_CTX
 #define git_SHA1_Init	SHA1_Init
 #define git_SHA1_Update	SHA1_Update
@@ -72,12 +73,27 @@
  * in the UNIX world (and apparently wider too..)
  */
 #define S_IFGITLINK	0160000
 #define S_ISGITLINK(m)	(((m) & S_IFMT) == S_IFGITLINK)
 
 /*
+ * Some mode bits are also used internally for computations.
+ *
+ * They *must* not overlap with any valid modes, and they *must* not be emitted
+ * to outside world - i.e. appear on disk or network. In other words, it's just
+ * temporary fields, which we internally use, but they have to stay in-house.
+ *
+ * ( such approach is valid, as standard S_IF* fits into 16 bits, and in Git
+ *   codebase mode is `unsigned int` which is assumed to be at least 32 bits )
+ */
+
+/* used internally in tree-diff */
+#define S_DIFFTREE_IFXMIN_NEQ	0x80000000
+
+
+/*
  * Intensive research over the course of many years has shown that
  * port 9418 is totally unused by anything else. Or
  *
  *	Your search - "port 9418" - did not match any documents.
  *
  * as www.google.com puts it.
@@ -132,23 +148,24 @@
 struct cache_entry {
 	struct hashmap_entry ent;
 	struct stat_data ce_stat_data;
 	unsigned int ce_mode;
 	unsigned int ce_flags;
 	unsigned int ce_namelen;
+	unsigned int index;	/* for link extension */
 	unsigned char sha1[20];
 	char name[FLEX_ARRAY]; /* more */
 };
 
 #define CE_STAGEMASK (0x3000)
 #define CE_EXTENDED  (0x4000)
 #define CE_VALID     (0x8000)
 #define CE_STAGESHIFT 12
 
 /*
- * Range 0xFFFF0000 in ce_flags is divided into
+ * Range 0xFFFF0FFF in ce_flags is divided into
  * two parts: in-memory flags and on-disk ones.
  * Flags in CE_EXTENDED_FLAGS will get saved on-disk
  * if you want to save a new flag, add it in
  * CE_EXTENDED_FLAGS
  *
  * In-memory only flags
@@ -165,12 +182,15 @@
 #define CE_UNPACKED          (1 << 24)
 #define CE_NEW_SKIP_WORKTREE (1 << 25)
 
 /* used to temporarily mark paths matched by pathspecs */
 #define CE_MATCHED           (1 << 26)
 
+#define CE_UPDATE_IN_BASE    (1 << 27)
+#define CE_STRIP_NAME        (1 << 28)
+
 /*
  * Extended on-disk flags
  */
 #define CE_INTENT_TO_ADD     (1 << 29)
 #define CE_SKIP_WORKTREE     (1 << 30)
 /* CE_EXTENDED2 is for future extension */
@@ -265,18 +285,28 @@
 		return S_IFDIR;
 	return S_IFGITLINK;
 }
 
 #define cache_entry_size(len) (offsetof(struct cache_entry,name) + (len) + 1)
 
+#define SOMETHING_CHANGED	(1 << 0) /* unclassified changes go here */
+#define CE_ENTRY_CHANGED	(1 << 1)
+#define CE_ENTRY_REMOVED	(1 << 2)
+#define CE_ENTRY_ADDED		(1 << 3)
+#define RESOLVE_UNDO_CHANGED	(1 << 4)
+#define CACHE_TREE_CHANGED	(1 << 5)
+#define SPLIT_INDEX_ORDERED	(1 << 6)
+
+struct split_index;
 struct index_state {
 	struct cache_entry **cache;
 	unsigned int version;
 	unsigned int cache_nr, cache_alloc, cache_changed;
 	struct string_list *resolve_undo;
 	struct cache_tree *cache_tree;
+	struct split_index *split_index;
 	struct cache_time timestamp;
 	unsigned name_hash_initialized : 1,
 		 initialized : 1;
 	struct hashmap name_hash;
 	struct hashmap dir_hash;
 	unsigned char sha1[20];
@@ -299,13 +329,12 @@
 
 #define read_cache() read_index(&the_index)
 #define read_cache_from(path) read_index_from(&the_index, (path))
 #define read_cache_preload(pathspec) read_index_preload(&the_index, (pathspec))
 #define is_cache_unborn() is_index_unborn(&the_index)
 #define read_cache_unmerged() read_index_unmerged(&the_index)
-#define write_cache(newfd, cache, entries) write_index(&the_index, (newfd))
 #define discard_cache() discard_index(&the_index)
 #define unmerged_cache() unmerged_index(&the_index)
 #define cache_name_pos(name, namelen) index_name_pos(&the_index,(name),(namelen))
 #define add_cache_entry(ce, option) add_index_entry(&the_index, (ce), (option))
 #define rename_cache_entry_at(pos, new_name) rename_index_entry_at(&the_index, (pos), (new_name))
 #define remove_cache_entry_at(pos) remove_index_entry_at(&the_index, (pos))
@@ -454,29 +483,35 @@
 				alloc = alloc_nr(alloc); \
 			x = xrealloc((x), alloc * sizeof(*(x))); \
 		} \
 	} while (0)
 
 /* Initialize and use the cache information */
+struct lock_file;
 extern int read_index(struct index_state *);
 extern int read_index_preload(struct index_state *, const struct pathspec *pathspec);
+extern int do_read_index(struct index_state *istate, const char *path,
+			 int must_exist); /* for testting only! */
 extern int read_index_from(struct index_state *, const char *path);
 extern int is_index_unborn(struct index_state *);
 extern int read_index_unmerged(struct index_state *);
-extern int write_index(struct index_state *, int newfd);
+#define COMMIT_LOCK		(1 << 0)
+#define CLOSE_LOCK		(1 << 1)
+extern int write_locked_index(struct index_state *, struct lock_file *lock, unsigned flags);
 extern int discard_index(struct index_state *);
 extern int unmerged_index(const struct index_state *);
 extern int verify_path(const char *path);
 extern struct cache_entry *index_dir_exists(struct index_state *istate, const char *name, int namelen);
 extern struct cache_entry *index_file_exists(struct index_state *istate, const char *name, int namelen, int igncase);
 extern int index_name_pos(const struct index_state *, const char *name, int namelen);
 #define ADD_CACHE_OK_TO_ADD 1		/* Ok to add */
 #define ADD_CACHE_OK_TO_REPLACE 2	/* Ok to replace file/directory */
 #define ADD_CACHE_SKIP_DFCHECK 4	/* Ok to skip DF conflict checks */
 #define ADD_CACHE_JUST_APPEND 8		/* Append only; tree.c::read_tree() */
 #define ADD_CACHE_NEW_ONLY 16		/* Do not replace existing ones */
+#define ADD_CACHE_KEEP_CACHE_TREE 32	/* Do not invalidate cache-tree */
 extern int add_index_entry(struct index_state *, struct cache_entry *ce, int option);
 extern void rename_index_entry_at(struct index_state *, int pos, const char *new_name);
 extern int remove_index_entry_at(struct index_state *, int pos);
 extern void remove_marked_cache_entries(struct index_state *istate);
 extern int remove_file_from_index(struct index_state *, const char *path);
 #define ADD_CACHE_VERBOSE 1
@@ -541,20 +576,21 @@
 	char on_list;
 	char filename[PATH_MAX];
 };
 #define LOCK_DIE_ON_ERROR 1
 #define LOCK_NODEREF 2
 extern int unable_to_lock_error(const char *path, int err);
+extern void unable_to_lock_message(const char *path, int err,
+				   struct strbuf *buf);
 extern NORETURN void unable_to_lock_index_die(const char *path, int err);
 extern int hold_lock_file_for_update(struct lock_file *, const char *path, int);
 extern int hold_lock_file_for_append(struct lock_file *, const char *path, int);
 extern int commit_lock_file(struct lock_file *);
 extern void update_index_if_able(struct index_state *, struct lock_file *);
 
 extern int hold_locked_index(struct lock_file *, int);
-extern int commit_locked_index(struct lock_file *);
 extern void set_alternate_index_output(const char *);
 extern int close_lock_file(struct lock_file *);
 extern void rollback_lock_file(struct lock_file *);
 extern int delete_ref(const char *, const unsigned char *sha1, int delopt);
 
 /* Environment bits from configuration mechanism */
@@ -594,20 +630,19 @@
 extern int check_replace_refs;
 
 extern int fsync_object_files;
 extern int core_preload_index;
 extern int core_apply_sparse_checkout;
 extern int precomposed_unicode;
-extern int protect_hfs;
-extern int protect_ntfs;
 
 /*
  * The character that begins a commented line in user-editable file
  * that is subject to stripspace.
  */
 extern char comment_line_char;
+extern int auto_comment_line_char;
 
 enum branch_track {
 	BRANCH_TRACK_UNSPECIFIED = -1,
 	BRANCH_TRACK_NEVER = 0,
 	BRANCH_TRACK_REMOTE,
 	BRANCH_TRACK_ALWAYS,
@@ -809,14 +844,12 @@
 const char *relative_path(const char *in, const char *prefix, struct strbuf *sb);
 int normalize_path_copy_len(char *dst, const char *src, int *prefix_len);
 int normalize_path_copy(char *dst, const char *src);
 int longest_ancestor_length(const char *path, struct string_list *prefixes);
 char *strip_path_suffix(const char *path, const char *suffix);
 int daemon_avoid_alias(const char *path);
-int offset_1st_component(const char *path);
-extern int is_ntfs_dotgit(const char *name);
 
 /* object replacement */
 #define LOOKUP_REPLACE_OBJECT 1
 extern void *read_sha1_file_extended(const unsigned char *sha1, enum object_type *type, unsigned long *size, unsigned flag);
 static inline void *read_sha1_file(const unsigned char *sha1, enum object_type *type, unsigned long *size)
 {
@@ -962,13 +995,13 @@
  * symbolic reference).
  *
  * If ref is not a properly-formatted, normalized reference, return
  * NULL.  If more than MAXDEPTH recursive symbolic lookups are needed,
  * give up and return NULL.
  *
- * errno is sometimes set on errors, but not always.
+ * errno is set to something meaningful on error.
  */
 extern const char *resolve_ref_unsafe(const char *ref, unsigned char *sha1, int reading, int *flag);
 extern char *resolve_refdup(const char *ref, unsigned char *sha1, int reading, int *flag);
 
 extern int dwim_ref(const char *str, int len, unsigned char *sha1, char **ref);
 extern int dwim_log(const char *str, int len, unsigned char *sha1, char **ref);
@@ -984,13 +1017,13 @@
 
 extern int create_symref(const char *ref, const char *refs_heads_master, const char *logmsg);
 extern int validate_headref(const char *ref);
 
 extern int base_name_compare(const char *name1, int len1, int mode1, const char *name2, int len2, int mode2);
 extern int df_name_compare(const char *name1, int len1, int mode1, const char *name2, int len2, int mode2);
-extern int cache_name_compare(const char *name1, int len1, const char *name2, int len2);
+extern int name_compare(const char *name1, size_t len1, const char *name2, size_t len2);
 extern int cache_name_stage_compare(const char *name1, int len1, int stage1, const char *name2, int len2, int stage2);
 
 extern void *read_object_with_reference(const unsigned char *sha1,
 					const char *required_type,
 					unsigned long *size,
 					unsigned char *sha1_ret);
@@ -1047,39 +1080,51 @@
  * Signals an success with 0, but time part of the result may be NULL
  * if the input lacks timestamp and zone
  */
 extern int split_ident_line(struct ident_split *, const char *, int);
 
 /*
+ * Like show_date, but pull the timestamp and tz parameters from
+ * the ident_split. It will also sanity-check the values and produce
+ * a well-known sentinel date if they appear bogus.
+ */
+const char *show_ident_date(const struct ident_split *id, enum date_mode mode);
+
+/*
  * Compare split idents for equality or strict ordering. Note that we
  * compare only the ident part of the line, ignoring any timestamp.
  *
  * Because there are two fields, we must choose one as the primary key; we
  * currently arbitrarily pick the email.
  */
 extern int ident_cmp(const struct ident_split *, const struct ident_split *);
 
 struct checkout {
+	struct index_state *istate;
 	const char *base_dir;
 	int base_dir_len;
 	unsigned force:1,
 		 quiet:1,
 		 not_new:1,
 		 refresh_cache:1;
 };
 
 #define TEMPORARY_FILENAME_LENGTH 25
 extern int checkout_entry(struct cache_entry *ce, const struct checkout *state, char *topath);
 
 struct cache_def {
-	char path[PATH_MAX + 1];
-	int len;
+	struct strbuf path;
 	int flags;
 	int track_flags;
 	int prefix_len_stat_func;
 };
+#define CACHE_DEF_INIT { STRBUF_INIT, 0, 0, 0 }
+static inline void cache_def_clear(struct cache_def *cache)
+{
+	strbuf_release(&cache->path);
+}
 
 extern int has_symlink_leading_path(const char *name, int len);
 extern int threaded_has_symlink_leading_path(struct cache_def *, const char *, int);
 extern int check_leading_path(const char *name, int len);
 extern int has_dirs_only_path(const char *name, int len, int prefix_len);
 extern void schedule_dir_for_removal(const char *name, int len);
@@ -1272,14 +1317,14 @@
 extern int git_config_rename_section_in_file(const char *, const char *, const char *);
 extern const char *git_etc_gitconfig(void);
 extern int check_repository_format_version(const char *var, const char *value, void *cb);
 extern int git_env_bool(const char *, int);
 extern int git_config_system(void);
 extern int config_error_nonbool(const char *);
-#if defined(__GNUC__) && ! defined(__clang__)
-#define config_error_nonbool(s) (config_error_nonbool(s), -1)
+#if defined(__GNUC__)
+#define config_error_nonbool(s) (config_error_nonbool(s), const_error())
 #endif
 extern const char *get_log_output_encoding(void);
 extern const char *get_commit_output_encoding(void);
 
 extern int git_config_parse_parameter(const char *, config_fn_t fn, void *data);
 
@@ -1356,23 +1401,13 @@
 extern void *alloc_commit_node(void);
 extern void *alloc_tag_node(void);
 extern void *alloc_object_node(void);
 extern void alloc_report(void);
 extern unsigned int alloc_commit_index(void);
 
-/* trace.c */
-__attribute__((format (printf, 1, 2)))
-extern void trace_printf(const char *format, ...);
-__attribute__((format (printf, 2, 3)))
-extern void trace_argv_printf(const char **argv, const char *format, ...);
-extern void trace_repo_setup(const char *prefix);
-extern int trace_want(const char *key);
-__attribute__((format (printf, 2, 3)))
-extern void trace_printf_key(const char *key, const char *fmt, ...);
-extern void trace_strbuf(const char *key, const struct strbuf *buf);
-
+/* pkt-line.c */
 void packet_trace_identity(const char *prog);
 
 /* add */
 /*
  * return 0 if success, 1 - if addition of a file failed and
  * ADD_FILES_IGNORE_ERRORS was specified in flags
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/cache-tree.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/cache-tree.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/cache-tree.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/cache-tree.c	2014-08-16 06:26:55.000000000 +0800
@@ -95,13 +95,13 @@
 struct cache_tree_sub *cache_tree_sub(struct cache_tree *it, const char *path)
 {
 	int pathlen = strlen(path);
 	return find_subtree(it, path, pathlen, 1);
 }
 
-void cache_tree_invalidate_path(struct cache_tree *it, const char *path)
+static int do_invalidate_path(struct cache_tree *it, const char *path)
 {
 	/* a/b/c
 	 * ==> invalidate self
 	 * ==> find "a", have it invalidate "b/c"
 	 * a
 	 * ==> invalidate self
@@ -113,13 +113,13 @@
 
 #if DEBUG
 	fprintf(stderr, "cache-tree invalidate <%s>\n", path);
 #endif
 
 	if (!it)
-		return;
+		return 0;
 	slash = strchrnul(path, '/');
 	namelen = slash - path;
 	it->entry_count = -1;
 	if (!*slash) {
 		int pos;
 		pos = subtree_pos(it, path, namelen);
@@ -134,20 +134,27 @@
 			 */
 			memmove(it->down+pos, it->down+pos+1,
 				sizeof(struct cache_tree_sub *) *
 				(it->subtree_nr - pos - 1));
 			it->subtree_nr--;
 		}
-		return;
+		return 1;
 	}
 	down = find_subtree(it, path, namelen, 0);
 	if (down)
-		cache_tree_invalidate_path(down->cache_tree, slash + 1);
+		do_invalidate_path(down->cache_tree, slash + 1);
+	return 1;
+}
+
+void cache_tree_invalidate_path(struct index_state *istate, const char *path)
+{
+	if (do_invalidate_path(istate->cache_tree, path))
+		istate->cache_changed |= CACHE_TREE_CHANGED;
 }
 
-static int verify_cache(const struct cache_entry * const *cache,
+static int verify_cache(struct cache_entry **cache,
 			int entries, int flags)
 {
 	int i, funny;
 	int silent = flags & WRITE_TREE_SILENT;
 
 	/* Verify that the tree is merged */
@@ -226,13 +233,13 @@
 			return 0;
 	}
 	return 1;
 }
 
 static int update_one(struct cache_tree *it,
-		      const struct cache_entry * const *cache,
+		      struct cache_entry **cache,
 		      int entries,
 		      const char *base,
 		      int baselen,
 		      int *skip_count,
 		      int flags)
 {
@@ -388,24 +395,25 @@
 		it->entry_count, it->subtree_nr,
 		sha1_to_hex(it->sha1));
 #endif
 	return i;
 }
 
-int cache_tree_update(struct cache_tree *it,
-		      const struct cache_entry * const *cache,
-		      int entries,
-		      int flags)
+int cache_tree_update(struct index_state *istate, int flags)
 {
-	int i, skip;
-	i = verify_cache(cache, entries, flags);
+	struct cache_tree *it = istate->cache_tree;
+	struct cache_entry **cache = istate->cache;
+	int entries = istate->cache_nr;
+	int skip, i = verify_cache(cache, entries, flags);
+
 	if (i)
 		return i;
 	i = update_one(it, cache, entries, "", 0, &skip, flags);
 	if (i < 0)
 		return i;
+	istate->cache_changed |= CACHE_TREE_CHANGED;
 	return 0;
 }
 
 static void write_one(struct strbuf *buffer, struct cache_tree *it,
                       const char *path, int pathlen)
 {
@@ -587,19 +595,16 @@
 
 	if (!active_cache_tree)
 		active_cache_tree = cache_tree();
 
 	was_valid = cache_tree_fully_valid(active_cache_tree);
 	if (!was_valid) {
-		if (cache_tree_update(active_cache_tree,
-				      (const struct cache_entry * const *)active_cache,
-				      active_nr, flags) < 0)
+		if (cache_tree_update(&the_index, flags) < 0)
 			return WRITE_TREE_UNMERGED_INDEX;
 		if (0 <= newfd) {
-			if (!write_cache(newfd, active_cache, active_nr) &&
-			    !commit_lock_file(lock_file))
+			if (!write_locked_index(&the_index, lock_file, COMMIT_LOCK))
 				newfd = -1;
 		}
 		/* Not being able to write is fine -- we are only interested
 		 * in updating the cache-tree part, and if the next caller
 		 * ends up using the old index with unupdated cache-tree part
 		 * it misses the work we did here, but that is just a
@@ -646,17 +651,18 @@
 			cnt += sub->cache_tree->entry_count;
 		}
 	}
 	it->entry_count = cnt;
 }
 
-void prime_cache_tree(struct cache_tree **it, struct tree *tree)
+void prime_cache_tree(struct index_state *istate, struct tree *tree)
 {
-	cache_tree_free(it);
-	*it = cache_tree();
-	prime_cache_tree_rec(*it, tree);
+	cache_tree_free(&istate->cache_tree);
+	istate->cache_tree = cache_tree();
+	prime_cache_tree_rec(istate->cache_tree, tree);
+	istate->cache_changed |= CACHE_TREE_CHANGED;
 }
 
 /*
  * find the cache_tree that corresponds to the current level without
  * exploding the full path into textual form.  The root of the
  * cache tree is given as "root", and our current level is "info".
@@ -689,10 +695,8 @@
 }
 
 int update_main_cache_tree(int flags)
 {
 	if (!the_index.cache_tree)
 		the_index.cache_tree = cache_tree();
-	return cache_tree_update(the_index.cache_tree,
-				 (const struct cache_entry * const *)the_index.cache,
-				 the_index.cache_nr, flags);
+	return cache_tree_update(&the_index, flags);
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/cache-tree.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/cache-tree.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/cache-tree.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/cache-tree.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/cache-tree.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/cache-tree.h	2014-08-16 06:26:55.000000000 +0800
@@ -20,20 +20,20 @@
 	int subtree_alloc;
 	struct cache_tree_sub **down;
 };
 
 struct cache_tree *cache_tree(void);
 void cache_tree_free(struct cache_tree **);
-void cache_tree_invalidate_path(struct cache_tree *, const char *);
+void cache_tree_invalidate_path(struct index_state *, const char *);
 struct cache_tree_sub *cache_tree_sub(struct cache_tree *, const char *);
 
 void cache_tree_write(struct strbuf *, struct cache_tree *root);
 struct cache_tree *cache_tree_read(const char *buffer, unsigned long size);
 
 int cache_tree_fully_valid(struct cache_tree *);
-int cache_tree_update(struct cache_tree *, const struct cache_entry * const *, int, int);
+int cache_tree_update(struct index_state *, int);
 
 int update_main_cache_tree(int);
 
 /* bitmasks to write_cache_as_tree flags */
 #define WRITE_TREE_MISSING_OK 1
 #define WRITE_TREE_IGNORE_CACHE_TREE 2
@@ -43,11 +43,11 @@
 /* error return codes */
 #define WRITE_TREE_UNREADABLE_INDEX (-1)
 #define WRITE_TREE_UNMERGED_INDEX (-2)
 #define WRITE_TREE_PREFIX_ERROR (-3)
 
 int write_cache_as_tree(unsigned char *sha1, int flags, const char *prefix);
-void prime_cache_tree(struct cache_tree **, struct tree *);
+void prime_cache_tree(struct index_state *, struct tree *);
 
 extern int cache_tree_matches_traversal(struct cache_tree *, struct name_entry *ent, struct traverse_info *info);
 
 #endif
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/cache-tree.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/cache-tree.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/check_bindir /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/check_bindir
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/check_bindir	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/check_bindir	2014-08-16 06:26:55.000000000 +0800
@@ -1,11 +1,11 @@
 #!/bin/sh
 bindir="$1"
 gitexecdir="$2"
 gitcmd="$3"
-if test "$bindir" != "$gitexecdir" -a -x "$gitcmd"
+if test "$bindir" != "$gitexecdir" && test -x "$gitcmd"
 then
 	echo
 	echo "!! You have installed git-* commands to new gitexecdir."
 	echo "!! Old version git-* commands still remain in bindir."
 	echo "!! Mixing two versions of Git will lead to problems."
 	echo "!! Please remove old version commands in bindir now."
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/color.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/color.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/color.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/color.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/column.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/column.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/column.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/column.c	2014-08-16 06:26:55.000000000 +0800
@@ -333,14 +333,15 @@
 	return 0;
 }
 
 int git_column_config(const char *var, const char *value,
 		      const char *command, unsigned int *colopts)
 {
-	const char *it = skip_prefix(var, "column.");
-	if (!it)
+	const char *it;
+
+	if (!skip_prefix(var, "column.", &it))
 		return 0;
 
 	if (!strcmp(it, "ui"))
 		return column_config(var, value, "ui", colopts);
 
 	if (command && !strcmp(it, command))
@@ -367,52 +368,35 @@
 
 static int fd_out = -1;
 static struct child_process column_process;
 
 int run_column_filter(int colopts, const struct column_options *opts)
 {
-	const char *av[10];
-	int ret, ac = 0;
-	struct strbuf sb_colopt  = STRBUF_INIT;
-	struct strbuf sb_width   = STRBUF_INIT;
-	struct strbuf sb_padding = STRBUF_INIT;
+	struct argv_array *argv;
 
 	if (fd_out != -1)
 		return -1;
 
-	av[ac++] = "column";
-	strbuf_addf(&sb_colopt, "--raw-mode=%d", colopts);
-	av[ac++] = sb_colopt.buf;
-	if (opts && opts->width) {
-		strbuf_addf(&sb_width, "--width=%d", opts->width);
-		av[ac++] = sb_width.buf;
-	}
-	if (opts && opts->indent) {
-		av[ac++] = "--indent";
-		av[ac++] = opts->indent;
-	}
-	if (opts && opts->padding) {
-		strbuf_addf(&sb_padding, "--padding=%d", opts->padding);
-		av[ac++] = sb_padding.buf;
-	}
-	av[ac] = NULL;
+	memset(&column_process, 0, sizeof(column_process));
+	argv = &column_process.args;
+
+	argv_array_push(argv, "column");
+	argv_array_pushf(argv, "--raw-mode=%d", colopts);
+	if (opts && opts->width)
+		argv_array_pushf(argv, "--width=%d", opts->width);
+	if (opts && opts->indent)
+		argv_array_pushf(argv, "--indent=%s", opts->indent);
+	if (opts && opts->padding)
+		argv_array_pushf(argv, "--padding=%d", opts->padding);
 
 	fflush(stdout);
-	memset(&column_process, 0, sizeof(column_process));
 	column_process.in = -1;
 	column_process.out = dup(1);
 	column_process.git_cmd = 1;
-	column_process.argv = av;
-
-	ret = start_command(&column_process);
-
-	strbuf_release(&sb_colopt);
-	strbuf_release(&sb_width);
-	strbuf_release(&sb_padding);
 
-	if (ret)
+	if (start_command(&column_process))
 		return -2;
 
 	fd_out = dup(1);
 	close(1);
 	dup2(column_process.in, 1);
 	close(column_process.in);
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/column.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/column.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/column.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/column.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/combine-diff.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/combine-diff.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/combine-diff.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/combine-diff.c	2014-08-16 06:26:55.000000000 +0800
@@ -1298,63 +1298,171 @@
 {
 	struct combine_diff_path *path = (struct combine_diff_path *)obj;
 
 	return path->path;
 }
 
+
+/* find set of paths that every parent touches */
+static struct combine_diff_path *find_paths_generic(const unsigned char *sha1,
+	const struct sha1_array *parents, struct diff_options *opt)
+{
+	struct combine_diff_path *paths = NULL;
+	int i, num_parent = parents->nr;
+
+	int output_format = opt->output_format;
+	const char *orderfile = opt->orderfile;
+
+	opt->output_format = DIFF_FORMAT_NO_OUTPUT;
+	/* tell diff_tree to emit paths in sorted (=tree) order */
+	opt->orderfile = NULL;
+
+	/* D(A,P1...Pn) = D(A,P1) ^ ... ^ D(A,Pn)  (wrt paths) */
+	for (i = 0; i < num_parent; i++) {
+		/*
+		 * show stat against the first parent even when doing
+		 * combined diff.
+		 */
+		int stat_opt = (output_format &
+				(DIFF_FORMAT_NUMSTAT|DIFF_FORMAT_DIFFSTAT));
+		if (i == 0 && stat_opt)
+			opt->output_format = stat_opt;
+		else
+			opt->output_format = DIFF_FORMAT_NO_OUTPUT;
+		diff_tree_sha1(parents->sha1[i], sha1, "", opt);
+		diffcore_std(opt);
+		paths = intersect_paths(paths, i, num_parent);
+
+		/* if showing diff, show it in requested order */
+		if (opt->output_format != DIFF_FORMAT_NO_OUTPUT &&
+		    orderfile) {
+			diffcore_order(orderfile);
+		}
+
+		diff_flush(opt);
+	}
+
+	opt->output_format = output_format;
+	opt->orderfile = orderfile;
+	return paths;
+}
+
+
+/*
+ * find set of paths that everybody touches, assuming diff is run without
+ * rename/copy detection, etc, comparing all trees simultaneously (= faster).
+ */
+static struct combine_diff_path *find_paths_multitree(
+	const unsigned char *sha1, const struct sha1_array *parents,
+	struct diff_options *opt)
+{
+	int i, nparent = parents->nr;
+	const unsigned char **parents_sha1;
+	struct combine_diff_path paths_head;
+	struct strbuf base;
+
+	parents_sha1 = xmalloc(nparent * sizeof(parents_sha1[0]));
+	for (i = 0; i < nparent; i++)
+		parents_sha1[i] = parents->sha1[i];
+
+	/* fake list head, so worker can assume it is non-NULL */
+	paths_head.next = NULL;
+
+	strbuf_init(&base, PATH_MAX);
+	diff_tree_paths(&paths_head, sha1, parents_sha1, nparent, &base, opt);
+
+	strbuf_release(&base);
+	free(parents_sha1);
+	return paths_head.next;
+}
+
+
 void diff_tree_combined(const unsigned char *sha1,
 			const struct sha1_array *parents,
 			int dense,
 			struct rev_info *rev)
 {
 	struct diff_options *opt = &rev->diffopt;
 	struct diff_options diffopts;
-	struct combine_diff_path *p, *paths = NULL;
+	struct combine_diff_path *p, *paths;
 	int i, num_paths, needsep, show_log_first, num_parent = parents->nr;
+	int need_generic_pathscan;
+
+	/* nothing to do, if no parents */
+	if (!num_parent)
+		return;
+
+	show_log_first = !!rev->loginfo && !rev->no_commit_id;
+	needsep = 0;
+	if (show_log_first) {
+		show_log(rev);
+
+		if (rev->verbose_header && opt->output_format &&
+		    opt->output_format != DIFF_FORMAT_NO_OUTPUT)
+			printf("%s%c", diff_line_prefix(opt),
+			       opt->line_termination);
+	}
 
 	diffopts = *opt;
 	copy_pathspec(&diffopts.pathspec, &opt->pathspec);
-	diffopts.output_format = DIFF_FORMAT_NO_OUTPUT;
 	DIFF_OPT_SET(&diffopts, RECURSIVE);
 	DIFF_OPT_CLR(&diffopts, ALLOW_EXTERNAL);
-	/* tell diff_tree to emit paths in sorted (=tree) order */
-	diffopts.orderfile = NULL;
 
-	show_log_first = !!rev->loginfo && !rev->no_commit_id;
-	needsep = 0;
-	/* find set of paths that everybody touches */
-	for (i = 0; i < num_parent; i++) {
-		/* show stat against the first parent even
+	/* find set of paths that everybody touches
+	 *
+	 * NOTE
+	 *
+	 * Diffcore transformations are bound to diff_filespec and logic
+	 * comparing two entries - i.e. they do not apply directly to combine
+	 * diff.
+	 *
+	 * If some of such transformations is requested - we launch generic
+	 * path scanning, which works significantly slower compared to
+	 * simultaneous all-trees-in-one-go scan in find_paths_multitree().
+	 *
+	 * TODO some of the filters could be ported to work on
+	 * combine_diff_paths - i.e. all functionality that skips paths, so in
+	 * theory, we could end up having only multitree path scanning.
+	 *
+	 * NOTE please keep this semantically in sync with diffcore_std()
+	 */
+	need_generic_pathscan = opt->skip_stat_unmatch	||
+			DIFF_OPT_TST(opt, FOLLOW_RENAMES)	||
+			opt->break_opt != -1	||
+			opt->detect_rename	||
+			opt->pickaxe		||
+			opt->filter;
+
+
+	if (need_generic_pathscan) {
+		/*
+		 * NOTE generic case also handles --stat, as it computes
+		 * diff(sha1,parent_i) for all i to do the job, specifically
+		 * for parent0.
+		 */
+		paths = find_paths_generic(sha1, parents, &diffopts);
+	}
+	else {
+		int stat_opt;
+		paths = find_paths_multitree(sha1, parents, &diffopts);
+
+		/*
+		 * show stat against the first parent even
 		 * when doing combined diff.
 		 */
-		int stat_opt = (opt->output_format &
+		stat_opt = (opt->output_format &
 				(DIFF_FORMAT_NUMSTAT|DIFF_FORMAT_DIFFSTAT));
-		if (i == 0 && stat_opt)
+		if (stat_opt) {
 			diffopts.output_format = stat_opt;
-		else
-			diffopts.output_format = DIFF_FORMAT_NO_OUTPUT;
-		diff_tree_sha1(parents->sha1[i], sha1, "", &diffopts);
-		diffcore_std(&diffopts);
-		paths = intersect_paths(paths, i, num_parent);
 
-		if (show_log_first && i == 0) {
-			show_log(rev);
-
-			if (rev->verbose_header && opt->output_format &&
-			    opt->output_format != DIFF_FORMAT_NO_OUTPUT)
-				printf("%s%c", diff_line_prefix(opt),
-				       opt->line_termination);
+			diff_tree_sha1(parents->sha1[0], sha1, "", &diffopts);
+			diffcore_std(&diffopts);
+			if (opt->orderfile)
+				diffcore_order(opt->orderfile);
+			diff_flush(&diffopts);
 		}
-
-		/* if showing diff, show it in requested order */
-		if (diffopts.output_format != DIFF_FORMAT_NO_OUTPUT &&
-		    opt->orderfile) {
-			diffcore_order(opt->orderfile);
-		}
-
-		diff_flush(&diffopts);
 	}
 
 	/* find out number of surviving paths */
 	for (num_paths = 0, p = paths; p; p = p->next)
 		num_paths++;
 
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/combine-diff.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/combine-diff.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/combine-diff.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/combine-diff.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/command-list.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/command-list.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/command-list.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/command-list.txt	2014-08-16 06:26:55.000000000 +0800
@@ -129,11 +129,12 @@
 git-update-index                        plumbingmanipulators
 git-update-ref                          plumbingmanipulators
 git-update-server-info                  synchingrepositories
 git-upload-archive                      synchelpers
 git-upload-pack                         synchelpers
 git-var                                 plumbinginterrogators
+git-verify-commit                       ancillaryinterrogators
 git-verify-pack                         plumbinginterrogators
 git-verify-tag                          ancillaryinterrogators
 gitweb                                  ancillaryinterrogators
 git-whatchanged                         ancillaryinterrogators
 git-write-tree                          plumbingmanipulators
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/commit.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/commit.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/commit.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/commit.c	2014-08-16 06:26:55.000000000 +0800
@@ -427,18 +427,13 @@
 
 struct commit_list *copy_commit_list(struct commit_list *list)
 {
 	struct commit_list *head = NULL;
 	struct commit_list **pp = &head;
 	while (list) {
-		struct commit_list *new;
-		new = xmalloc(sizeof(struct commit_list));
-		new->item = list->item;
-		new->next = NULL;
-		*pp = new;
-		pp = &new->next;
+		pp = commit_list_append(list->item, pp);
 		list = list->next;
 	}
 	return head;
 }
 
 void free_commit_list(struct commit_list *list)
@@ -594,14 +589,13 @@
 	struct ident_split ident;
 	char *date_end;
 	unsigned long date;
 
 	for (buf = buffer; buf; buf = line_end + 1) {
 		line_end = strchrnul(buf, '\n');
-		ident_line = skip_prefix(buf, "author ");
-		if (!ident_line) {
+		if (!skip_prefix(buf, "author ", &ident_line)) {
 			if (!line_end[0] || line_end[1] == '\n')
 				return; /* end of header */
 			continue;
 		}
 		if (split_ident_line(&ident,
 				     ident_line, line_end - ident_line) ||
@@ -767,51 +761,47 @@
 #define PARENT2		(1u<<17)
 #define STALE		(1u<<18)
 #define RESULT		(1u<<19)
 
 static const unsigned all_flags = (PARENT1 | PARENT2 | STALE | RESULT);
 
-static struct commit *interesting(struct commit_list *list)
+static int queue_has_nonstale(struct prio_queue *queue)
 {
-	while (list) {
-		struct commit *commit = list->item;
-		list = list->next;
-		if (commit->object.flags & STALE)
-			continue;
-		return commit;
+	int i;
+	for (i = 0; i < queue->nr; i++) {
+		struct commit *commit = queue->array[i].data;
+		if (!(commit->object.flags & STALE))
+			return 1;
 	}
-	return NULL;
+	return 0;
 }
 
 /* all input commits in one and twos[] must have been parsed! */
 static struct commit_list *paint_down_to_common(struct commit *one, int n, struct commit **twos)
 {
-	struct commit_list *list = NULL;
+	struct prio_queue queue = { compare_commits_by_commit_date };
 	struct commit_list *result = NULL;
 	int i;
 
 	one->object.flags |= PARENT1;
-	commit_list_insert_by_date(one, &list);
-	if (!n)
-		return list;
+	if (!n) {
+		commit_list_append(one, &result);
+		return result;
+	}
+	prio_queue_put(&queue, one);
+
 	for (i = 0; i < n; i++) {
 		twos[i]->object.flags |= PARENT2;
-		commit_list_insert_by_date(twos[i], &list);
+		prio_queue_put(&queue, twos[i]);
 	}
 
-	while (interesting(list)) {
-		struct commit *commit;
+	while (queue_has_nonstale(&queue)) {
+		struct commit *commit = prio_queue_get(&queue);
 		struct commit_list *parents;
-		struct commit_list *next;
 		int flags;
 
-		commit = list->item;
-		next = list->next;
-		free(list);
-		list = next;
-
 		flags = commit->object.flags & (PARENT1 | PARENT2 | STALE);
 		if (flags == (PARENT1 | PARENT2)) {
 			if (!(commit->object.flags & RESULT)) {
 				commit->object.flags |= RESULT;
 				commit_list_insert_by_date(commit, &result);
 			}
@@ -824,17 +814,17 @@
 			parents = parents->next;
 			if ((p->object.flags & flags) == flags)
 				continue;
 			if (parse_commit(p))
 				return NULL;
 			p->object.flags |= flags;
-			commit_list_insert_by_date(p, &list);
+			prio_queue_put(&queue, p);
 		}
 	}
 
-	free_commit_list(list);
+	clear_prio_queue(&queue);
 	return result;
 }
 
 static struct commit_list *merge_bases_many(struct commit *one, int n, struct commit **twos)
 {
 	struct commit_list *list = NULL;
@@ -973,18 +963,13 @@
 			clear_commit_marks_many(n, twos, all_flags);
 		}
 		return result;
 	}
 
 	/* There are more than one */
-	cnt = 0;
-	list = result;
-	while (list) {
-		list = list->next;
-		cnt++;
-	}
+	cnt = commit_list_count(result);
 	rslt = xcalloc(cnt, sizeof(*rslt));
 	for (list = result, i = 0; list; list = list->next)
 		rslt[i++] = list->item;
 	free_commit_list(result);
 
 	clear_commit_marks(one, all_flags);
@@ -1158,12 +1143,46 @@
 		line = next;
 	}
 	unuse_commit_buffer(commit, buffer);
 	return saw_signature;
 }
 
+int remove_signature(struct strbuf *buf)
+{
+	const char *line = buf->buf;
+	const char *tail = buf->buf + buf->len;
+	int in_signature = 0;
+	const char *sig_start = NULL;
+	const char *sig_end = NULL;
+
+	while (line < tail) {
+		const char *next = memchr(line, '\n', tail - line);
+		next = next ? next + 1 : tail;
+
+		if (in_signature && line[0] == ' ')
+			sig_end = next;
+		else if (starts_with(line, gpg_sig_header) &&
+			 line[gpg_sig_header_len] == ' ') {
+			sig_start = line;
+			sig_end = next;
+			in_signature = 1;
+		} else {
+			if (*line == '\n')
+				/* dump the whole remainder of the buffer */
+				next = tail;
+			in_signature = 0;
+		}
+		line = next;
+	}
+
+	if (sig_start)
+		strbuf_remove(buf, sig_start - buf->buf, sig_end - sig_start);
+
+	return sig_start != NULL;
+}
+
 static void handle_signed_tag(struct commit *parent, struct commit_extra_header ***tail)
 {
 	struct merge_remote_desc *desc;
 	struct commit_extra_header *mergetag;
 	char *buf;
 	unsigned long size, len;
@@ -1217,14 +1236,13 @@
 	int i;
 
 	/* Iterate over all search strings */
 	for (i = 0; i < ARRAY_SIZE(sigcheck_gpg_status); i++) {
 		const char *found, *next;
 
-		found = skip_prefix(buf, sigcheck_gpg_status[i].check + 1);
-		if (!found) {
+		if (!skip_prefix(buf, sigcheck_gpg_status[i].check + 1, &found)) {
 			found = strstr(buf, sigcheck_gpg_status[i].check);
 			if (!found)
 				continue;
 			found += strlen(sigcheck_gpg_status[i].check);
 		}
 		sigc->result = sigcheck_gpg_status[i].result;
@@ -1252,12 +1270,13 @@
 		goto out;
 	status = verify_signed_buffer(payload.buf, payload.len,
 				      signature.buf, signature.len,
 				      &gpg_output, &gpg_status);
 	if (status && !gpg_output.len)
 		goto out;
+	sigc->payload = strbuf_detach(&payload, NULL);
 	sigc->gpg_output = strbuf_detach(&gpg_output, NULL);
 	sigc->gpg_status = strbuf_detach(&gpg_status, NULL);
 	parse_gpg_output(sigc);
 
  out:
 	strbuf_release(&gpg_status);
@@ -1296,12 +1315,25 @@
 	const char *buffer = get_commit_buffer(commit, &size);
 	extra = read_commit_extra_header_lines(buffer, size, exclude);
 	unuse_commit_buffer(commit, buffer);
 	return extra;
 }
 
+void for_each_mergetag(each_mergetag_fn fn, struct commit *commit, void *data)
+{
+	struct commit_extra_header *extra, *to_free;
+
+	to_free = read_commit_extra_headers(commit, NULL);
+	for (extra = to_free; extra; extra = extra->next) {
+		if (strcmp(extra->key, "mergetag"))
+			continue; /* not a merge tag */
+		fn(commit, extra, data);
+	}
+	free_commit_extra_headers(to_free);
+}
+
 static inline int standard_header_field(const char *field, size_t len)
 {
 	return ((len == 4 && !memcmp(field, "tree ", 5)) ||
 		(len == 6 && !memcmp(field, "parent ", 7)) ||
 		(len == 6 && !memcmp(field, "author ", 7)) ||
 		(len == 9 && !memcmp(field, "committer ", 10)) ||
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/commit.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/commit.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/commit.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/commit.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/commit.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/commit.h	2014-08-16 06:26:55.000000000 +0800
@@ -268,12 +268,13 @@
 extern void remove_nonexistent_theirs_shallow(struct shallow_info *);
 extern void assign_shallow_commits_to_refs(struct shallow_info *info,
 					   uint32_t **used,
 					   int *ref_status);
 extern int delayed_reachability_test(struct shallow_info *si, int c);
 extern void prune_shallow(int show_only);
+extern struct trace_key trace_shallow;
 
 int is_descendant_of(struct commit *, struct commit_list *);
 int in_merge_bases(struct commit *, struct commit *);
 int in_merge_bases_many(struct commit *, int, struct commit **);
 
 extern int interactive_add(int argc, const char **argv, const char *prefix, int patch);
@@ -309,12 +310,17 @@
 				struct commit_extra_header *);
 
 extern struct commit_extra_header *read_commit_extra_headers(struct commit *, const char **);
 
 extern void free_commit_extra_headers(struct commit_extra_header *extra);
 
+typedef void (*each_mergetag_fn)(struct commit *commit, struct commit_extra_header *extra,
+				 void *cb_data);
+
+extern void for_each_mergetag(each_mergetag_fn fn, struct commit *commit, void *data);
+
 struct merge_remote_desc {
 	struct object *obj; /* the named object, could be a tag */
 	const char *name;
 };
 #define merge_remote_util(commit) ((struct merge_remote_desc *)((commit)->util))
 
@@ -324,12 +330,14 @@
  * to allow callers to tell if we are told to merge a tag.
  */
 struct commit *get_merge_parent(const char *name);
 
 extern int parse_signed_commit(const struct commit *commit,
 			       struct strbuf *message, struct strbuf *signature);
+extern int remove_signature(struct strbuf *buf);
+
 extern void print_commit_list(struct commit_list *list,
 			      const char *format_cur,
 			      const char *format_last);
 
 /*
  * Check the signature of the given commit. The result of the check is stored
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/commit.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/commit.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/mingw.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/mingw.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/mingw.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/mingw.c	2014-08-16 06:26:55.000000000 +0800
@@ -1,11 +1,13 @@
 #include "../git-compat-util.h"
 #include "win32.h"
 #include <conio.h>
+#include <wchar.h>
 #include "../strbuf.h"
 #include "../run-command.h"
+#include "../cache.h"
 
 static const int delay[] = { 0, 1, 10, 20, 40 };
 
 int err_win_to_posix(DWORD winerr)
 {
 	int error = ENOSYS;
@@ -195,20 +197,22 @@
 
 		fprintf(stderr, "Sorry, I did not understand your answer. "
 				"Please type 'y' or 'n'\n");
 	}
 }
 
-#undef unlink
 int mingw_unlink(const char *pathname)
 {
 	int ret, tries = 0;
+	wchar_t wpathname[MAX_PATH];
+	if (xutftowcs_path(wpathname, pathname) < 0)
+		return -1;
 
 	/* read-only files cannot be removed */
-	chmod(pathname, 0666);
-	while ((ret = unlink(pathname)) == -1 && tries < ARRAY_SIZE(delay)) {
+	_wchmod(wpathname, 0666);
+	while ((ret = _wunlink(wpathname)) == -1 && tries < ARRAY_SIZE(delay)) {
 		if (!is_file_in_use_error(GetLastError()))
 			break;
 		/*
 		 * We assume that some other process had the source or
 		 * destination file open at the wrong moment and retry.
 		 * In order to give the other process a higher chance to
@@ -218,51 +222,51 @@
 		Sleep(delay[tries]);
 		tries++;
 	}
 	while (ret == -1 && is_file_in_use_error(GetLastError()) &&
 	       ask_yes_no_if_possible("Unlink of file '%s' failed. "
 			"Should I try again?", pathname))
-	       ret = unlink(pathname);
+	       ret = _wunlink(wpathname);
 	return ret;
 }
 
-static int is_dir_empty(const char *path)
+static int is_dir_empty(const wchar_t *wpath)
 {
-	struct strbuf buf = STRBUF_INIT;
-	WIN32_FIND_DATAA findbuf;
+	WIN32_FIND_DATAW findbuf;
 	HANDLE handle;
-
-	strbuf_addf(&buf, "%s\\*", path);
-	handle = FindFirstFileA(buf.buf, &findbuf);
-	if (handle == INVALID_HANDLE_VALUE) {
-		strbuf_release(&buf);
+	wchar_t wbuf[MAX_PATH + 2];
+	wcscpy(wbuf, wpath);
+	wcscat(wbuf, L"\\*");
+	handle = FindFirstFileW(wbuf, &findbuf);
+	if (handle == INVALID_HANDLE_VALUE)
 		return GetLastError() == ERROR_NO_MORE_FILES;
-	}
 
-	while (!strcmp(findbuf.cFileName, ".") ||
-			!strcmp(findbuf.cFileName, ".."))
-		if (!FindNextFile(handle, &findbuf)) {
-			strbuf_release(&buf);
-			return GetLastError() == ERROR_NO_MORE_FILES;
+	while (!wcscmp(findbuf.cFileName, L".") ||
+			!wcscmp(findbuf.cFileName, L".."))
+		if (!FindNextFileW(handle, &findbuf)) {
+			DWORD err = GetLastError();
+			FindClose(handle);
+			return err == ERROR_NO_MORE_FILES;
 		}
 	FindClose(handle);
-	strbuf_release(&buf);
 	return 0;
 }
 
-#undef rmdir
 int mingw_rmdir(const char *pathname)
 {
 	int ret, tries = 0;
+	wchar_t wpathname[MAX_PATH];
+	if (xutftowcs_path(wpathname, pathname) < 0)
+		return -1;
 
-	while ((ret = rmdir(pathname)) == -1 && tries < ARRAY_SIZE(delay)) {
+	while ((ret = _wrmdir(wpathname)) == -1 && tries < ARRAY_SIZE(delay)) {
 		if (!is_file_in_use_error(GetLastError()))
 			errno = err_win_to_posix(GetLastError());
 		if (errno != EACCES)
 			break;
-		if (!is_dir_empty(pathname)) {
+		if (!is_dir_empty(wpathname)) {
 			errno = ENOTEMPTY;
 			break;
 		}
 		/*
 		 * We assume that some other process had the source or
 		 * destination file open at the wrong moment and retry.
@@ -273,34 +277,46 @@
 		Sleep(delay[tries]);
 		tries++;
 	}
 	while (ret == -1 && errno == EACCES && is_file_in_use_error(GetLastError()) &&
 	       ask_yes_no_if_possible("Deletion of directory '%s' failed. "
 			"Should I try again?", pathname))
-	       ret = rmdir(pathname);
+	       ret = _wrmdir(wpathname);
+	return ret;
+}
+
+int mingw_mkdir(const char *path, int mode)
+{
+	int ret;
+	wchar_t wpath[MAX_PATH];
+	if (xutftowcs_path(wpath, path) < 0)
+		return -1;
+	ret = _wmkdir(wpath);
 	return ret;
 }
 
-#undef open
 int mingw_open (const char *filename, int oflags, ...)
 {
 	va_list args;
 	unsigned mode;
 	int fd;
+	wchar_t wfilename[MAX_PATH];
 
 	va_start(args, oflags);
 	mode = va_arg(args, int);
 	va_end(args);
 
 	if (filename && !strcmp(filename, "/dev/null"))
 		filename = "nul";
 
-	fd = open(filename, oflags, mode);
+	if (xutftowcs_path(wfilename, filename) < 0)
+		return -1;
+	fd = _wopen(wfilename, oflags, mode);
 
 	if (fd < 0 && (oflags & O_CREAT) && errno == EACCES) {
-		DWORD attrs = GetFileAttributes(filename);
+		DWORD attrs = GetFileAttributesW(wfilename);
 		if (attrs != INVALID_FILE_ATTRIBUTES && (attrs & FILE_ATTRIBUTE_DIRECTORY))
 			errno = EISDIR;
 	}
 	return fd;
 }
 
@@ -329,23 +345,34 @@
 	return ch;
 }
 
 #undef fopen
 FILE *mingw_fopen (const char *filename, const char *otype)
 {
+	FILE *file;
+	wchar_t wfilename[MAX_PATH], wotype[4];
 	if (filename && !strcmp(filename, "/dev/null"))
 		filename = "nul";
-	return fopen(filename, otype);
+	if (xutftowcs_path(wfilename, filename) < 0 ||
+		xutftowcs(wotype, otype, ARRAY_SIZE(wotype)) < 0)
+		return NULL;
+	file = _wfopen(wfilename, wotype);
+	return file;
 }
 
-#undef freopen
 FILE *mingw_freopen (const char *filename, const char *otype, FILE *stream)
 {
+	FILE *file;
+	wchar_t wfilename[MAX_PATH], wotype[4];
 	if (filename && !strcmp(filename, "/dev/null"))
 		filename = "nul";
-	return freopen(filename, otype, stream);
+	if (xutftowcs_path(wfilename, filename) < 0 ||
+		xutftowcs(wotype, otype, ARRAY_SIZE(wotype)) < 0)
+		return NULL;
+	file = _wfreopen(wfilename, wotype, stream);
+	return file;
 }
 
 #undef fflush
 int mingw_fflush(FILE *stream)
 {
 	int ret = fflush(stream);
@@ -364,12 +391,37 @@
 	if (ret && errno == EINVAL)
 		errno = EPIPE;
 
 	return ret;
 }
 
+int mingw_access(const char *filename, int mode)
+{
+	wchar_t wfilename[MAX_PATH];
+	if (xutftowcs_path(wfilename, filename) < 0)
+		return -1;
+	/* X_OK is not supported by the MSVCRT version */
+	return _waccess(wfilename, mode & ~X_OK);
+}
+
+int mingw_chdir(const char *dirname)
+{
+	wchar_t wdirname[MAX_PATH];
+	if (xutftowcs_path(wdirname, dirname) < 0)
+		return -1;
+	return _wchdir(wdirname);
+}
+
+int mingw_chmod(const char *filename, int mode)
+{
+	wchar_t wfilename[MAX_PATH];
+	if (xutftowcs_path(wfilename, filename) < 0)
+		return -1;
+	return _wchmod(wfilename, mode);
+}
+
 /*
  * The unit of FILETIME is 100-nanoseconds since January 1, 1601, UTC.
  * Returns the 100-nanoseconds ("hekto nanoseconds") since the epoch.
  */
 static inline long long filetime_to_hnsec(const FILETIME *ft)
 {
@@ -389,30 +441,32 @@
  *
  * If follow is true then act like stat() and report on the link
  * target. Otherwise report on the link itself.
  */
 static int do_lstat(int follow, const char *file_name, struct stat *buf)
 {
-	int err;
 	WIN32_FILE_ATTRIBUTE_DATA fdata;
+	wchar_t wfilename[MAX_PATH];
+	if (xutftowcs_path(wfilename, file_name) < 0)
+		return -1;
 
-	if (!(err = get_file_attr(file_name, &fdata))) {
+	if (GetFileAttributesExW(wfilename, GetFileExInfoStandard, &fdata)) {
 		buf->st_ino = 0;
 		buf->st_gid = 0;
 		buf->st_uid = 0;
 		buf->st_nlink = 1;
 		buf->st_mode = file_attr_to_st_mode(fdata.dwFileAttributes);
 		buf->st_size = fdata.nFileSizeLow |
 			(((off_t)fdata.nFileSizeHigh)<<32);
 		buf->st_dev = buf->st_rdev = 0; /* not used by Git */
 		buf->st_atime = filetime_to_time_t(&(fdata.ftLastAccessTime));
 		buf->st_mtime = filetime_to_time_t(&(fdata.ftLastWriteTime));
 		buf->st_ctime = filetime_to_time_t(&(fdata.ftCreationTime));
 		if (fdata.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) {
-			WIN32_FIND_DATAA findbuf;
-			HANDLE handle = FindFirstFileA(file_name, &findbuf);
+			WIN32_FIND_DATAW findbuf;
+			HANDLE handle = FindFirstFileW(wfilename, &findbuf);
 			if (handle != INVALID_HANDLE_VALUE) {
 				if ((findbuf.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) &&
 						(findbuf.dwReserved0 == IO_REPARSE_TAG_SYMLINK)) {
 					if (follow) {
 						char buffer[MAXIMUM_REPARSE_DATA_BUFFER_SIZE];
 						buf->st_size = readlink(file_name, buffer, MAXIMUM_REPARSE_DATA_BUFFER_SIZE);
@@ -425,26 +479,42 @@
 				}
 				FindClose(handle);
 			}
 		}
 		return 0;
 	}
-	errno = err;
+	switch (GetLastError()) {
+	case ERROR_ACCESS_DENIED:
+	case ERROR_SHARING_VIOLATION:
+	case ERROR_LOCK_VIOLATION:
+	case ERROR_SHARING_BUFFER_EXCEEDED:
+		errno = EACCES;
+		break;
+	case ERROR_BUFFER_OVERFLOW:
+		errno = ENAMETOOLONG;
+		break;
+	case ERROR_NOT_ENOUGH_MEMORY:
+		errno = ENOMEM;
+		break;
+	default:
+		errno = ENOENT;
+		break;
+	}
 	return -1;
 }
 
 /* We provide our own lstat/fstat functions, since the provided
  * lstat/fstat functions are so slow. These stat functions are
  * tailored for Git's usage (read: fast), and are not meant to be
  * complete. Note that Git stat()s are redirected to mingw_lstat()
  * too, since Windows doesn't really handle symlinks that well.
  */
 static int do_stat_internal(int follow, const char *file_name, struct stat *buf)
 {
 	int namelen;
-	static char alt_name[PATH_MAX];
+	char alt_name[PATH_MAX];
 
 	if (!do_lstat(follow, file_name, buf))
 		return 0;
 
 	/* if file_name ended in a '/', Windows returned ENOENT;
 	 * try again without trailing slashes
@@ -513,22 +583,26 @@
 }
 
 int mingw_utime (const char *file_name, const struct utimbuf *times)
 {
 	FILETIME mft, aft;
 	int fh, rc;
+	DWORD attrs;
+	wchar_t wfilename[MAX_PATH];
+	if (xutftowcs_path(wfilename, file_name) < 0)
+		return -1;
 
 	/* must have write permission */
-	DWORD attrs = GetFileAttributes(file_name);
+	attrs = GetFileAttributesW(wfilename);
 	if (attrs != INVALID_FILE_ATTRIBUTES &&
 	    (attrs & FILE_ATTRIBUTE_READONLY)) {
 		/* ignore errors here; open() will report them */
-		SetFileAttributes(file_name, attrs & ~FILE_ATTRIBUTE_READONLY);
+		SetFileAttributesW(wfilename, attrs & ~FILE_ATTRIBUTE_READONLY);
 	}
 
-	if ((fh = open(file_name, O_RDWR | O_BINARY)) < 0) {
+	if ((fh = _wopen(wfilename, O_RDWR | O_BINARY)) < 0) {
 		rc = -1;
 		goto revert_attrs;
 	}
 
 	if (times) {
 		time_t_to_filetime(times->modtime, &mft);
@@ -545,23 +619,35 @@
 	close(fh);
 
 revert_attrs:
 	if (attrs != INVALID_FILE_ATTRIBUTES &&
 	    (attrs & FILE_ATTRIBUTE_READONLY)) {
 		/* ignore errors again */
-		SetFileAttributes(file_name, attrs);
+		SetFileAttributesW(wfilename, attrs);
 	}
 	return rc;
 }
 
 unsigned int sleep (unsigned int seconds)
 {
 	Sleep(seconds*1000);
 	return 0;
 }
 
+char *mingw_mktemp(char *template)
+{
+	wchar_t wtemplate[MAX_PATH];
+	if (xutftowcs_path(wtemplate, template) < 0)
+		return NULL;
+	if (!_wmktemp(wtemplate))
+		return NULL;
+	if (xwcstoutf(template, wtemplate, strlen(template) + 1) < 0)
+		return NULL;
+	return template;
+}
+
 int mkstemp(char *template)
 {
 	char *filename = mktemp(template);
 	if (filename == NULL)
 		return -1;
 	return open(filename, O_RDWR | O_CREAT, 0600);
@@ -614,23 +700,24 @@
 {
 	/* localtime() in MSVCRT.DLL is thread-safe, but not reentrant */
 	memcpy(result, localtime(timep), sizeof(struct tm));
 	return result;
 }
 
-#undef getcwd
 char *mingw_getcwd(char *pointer, int len)
 {
 	int i;
-	char *ret = getcwd(pointer, len);
-	if (!ret)
-		return ret;
+	wchar_t wpointer[MAX_PATH];
+	if (!_wgetcwd(wpointer, ARRAY_SIZE(wpointer)))
+		return NULL;
+	if (xwcstoutf(pointer, wpointer, len) < 0)
+		return NULL;
 	for (i = 0; pointer[i]; i++)
 		if (pointer[i] == '\\')
 			pointer[i] = '/';
-	return ret;
+	return pointer;
 }
 
 /*
  * See http://msdn2.microsoft.com/en-us/library/17w5ykft(vs.71).aspx
  * (Parsing C++ Command-Line Arguments)
  */
@@ -809,35 +896,69 @@
 	while (!prog && *path)
 		prog = lookup_prog(*path++, cmd, isexe, exe_only);
 
 	return prog;
 }
 
-static int env_compare(const void *a, const void *b)
+static int do_putenv(char **env, const char *name, int size, int free_old);
+
+/* used number of elements of environ array, including terminating NULL */
+static int environ_size = 0;
+/* allocated size of environ array, in bytes */
+static int environ_alloc = 0;
+
+/*
+ * Create environment block suitable for CreateProcess. Merges current
+ * process environment and the supplied environment changes.
+ */
+static wchar_t *make_environment_block(char **deltaenv)
 {
-	char *const *ea = a;
-	char *const *eb = b;
-	return strcasecmp(*ea, *eb);
+	wchar_t *wenvblk = NULL;
+	char **tmpenv;
+	int i = 0, size = environ_size, wenvsz = 0, wenvpos = 0;
+
+	while (deltaenv && deltaenv[i])
+		i++;
+
+	/* copy the environment, leaving space for changes */
+	tmpenv = xmalloc((size + i) * sizeof(char*));
+	memcpy(tmpenv, environ, size * sizeof(char*));
+
+	/* merge supplied environment changes into the temporary environment */
+	for (i = 0; deltaenv && deltaenv[i]; i++)
+		size = do_putenv(tmpenv, deltaenv[i], size, 0);
+
+	/* create environment block from temporary environment */
+	for (i = 0; tmpenv[i]; i++) {
+		size = 2 * strlen(tmpenv[i]) + 2; /* +2 for final \0 */
+		ALLOC_GROW(wenvblk, (wenvpos + size) * sizeof(wchar_t), wenvsz);
+		wenvpos += xutftowcs(&wenvblk[wenvpos], tmpenv[i], size) + 1;
+	}
+	/* add final \0 terminator */
+	wenvblk[wenvpos] = 0;
+	free(tmpenv);
+	return wenvblk;
 }
 
 struct pinfo_t {
 	struct pinfo_t *next;
 	pid_t pid;
 	HANDLE proc;
 };
 static struct pinfo_t *pinfo = NULL;
 CRITICAL_SECTION pinfo_cs;
 
-static pid_t mingw_spawnve_fd(const char *cmd, const char **argv, char **env,
+static pid_t mingw_spawnve_fd(const char *cmd, const char **argv, char **deltaenv,
 			      const char *dir,
 			      int prepend_cmd, int fhin, int fhout, int fherr)
 {
-	STARTUPINFO si;
+	STARTUPINFOW si;
 	PROCESS_INFORMATION pi;
-	struct strbuf envblk, args;
-	unsigned flags;
+	struct strbuf args;
+	wchar_t wcmd[MAX_PATH], wdir[MAX_PATH], *wargs, *wenvblk = NULL;
+	unsigned flags = CREATE_UNICODE_ENVIRONMENT;
 	BOOL ret;
 
 	/* Determine whether or not we are associated to a console */
 	HANDLE cons = CreateFile("CONOUT$", GENERIC_WRITE,
 			FILE_SHARE_WRITE, NULL, OPEN_EXISTING,
 			FILE_ATTRIBUTE_NORMAL, NULL);
@@ -848,29 +969,33 @@
 		 * since we'll be redirecting std streams, we do
 		 * not need the console.
 		 * It is necessary to use DETACHED_PROCESS
 		 * instead of CREATE_NO_WINDOW to make ssh
 		 * recognize that it has no console.
 		 */
-		flags = DETACHED_PROCESS;
+		flags |= DETACHED_PROCESS;
 	} else {
 		/* There is already a console. If we specified
 		 * DETACHED_PROCESS here, too, Windows would
 		 * disassociate the child from the console.
 		 * The same is true for CREATE_NO_WINDOW.
 		 * Go figure!
 		 */
-		flags = 0;
 		CloseHandle(cons);
 	}
 	memset(&si, 0, sizeof(si));
 	si.cb = sizeof(si);
 	si.dwFlags = STARTF_USESTDHANDLES;
-	si.hStdInput = (HANDLE) _get_osfhandle(fhin);
-	si.hStdOutput = (HANDLE) _get_osfhandle(fhout);
-	si.hStdError = (HANDLE) _get_osfhandle(fherr);
+	si.hStdInput = winansi_get_osfhandle(fhin);
+	si.hStdOutput = winansi_get_osfhandle(fhout);
+	si.hStdError = winansi_get_osfhandle(fherr);
+
+	if (xutftowcs_path(wcmd, cmd) < 0)
+		return -1;
+	if (dir && xutftowcs_path(wdir, dir) < 0)
+		return -1;
 
 	/* concatenate argv, quoting args as we go */
 	strbuf_init(&args, 0);
 	if (prepend_cmd) {
 		char *quoted = (char *)quote_arg(cmd);
 		strbuf_addstr(&args, quoted);
@@ -883,39 +1008,24 @@
 			strbuf_addch(&args, ' ');
 		strbuf_addstr(&args, quoted);
 		if (quoted != *argv)
 			free(quoted);
 	}
 
-	if (env) {
-		int count = 0;
-		char **e, **sorted_env;
-
-		for (e = env; *e; e++)
-			count++;
-
-		/* environment must be sorted */
-		sorted_env = xmalloc(sizeof(*sorted_env) * (count + 1));
-		memcpy(sorted_env, env, sizeof(*sorted_env) * (count + 1));
-		qsort(sorted_env, count, sizeof(*sorted_env), env_compare);
-
-		strbuf_init(&envblk, 0);
-		for (e = sorted_env; *e; e++) {
-			strbuf_addstr(&envblk, *e);
-			strbuf_addch(&envblk, '\0');
-		}
-		free(sorted_env);
-	}
+	wargs = xmalloc((2 * args.len + 1) * sizeof(wchar_t));
+	xutftowcs(wargs, args.buf, 2 * args.len + 1);
+	strbuf_release(&args);
+
+	wenvblk = make_environment_block(deltaenv);
 
 	memset(&pi, 0, sizeof(pi));
-	ret = CreateProcess(cmd, args.buf, NULL, NULL, TRUE, flags,
-		env ? envblk.buf : NULL, dir, &si, &pi);
+	ret = CreateProcessW(wcmd, wargs, NULL, NULL, TRUE, flags,
+		wenvblk, dir ? wdir : NULL, &si, &pi);
 
-	if (env)
-		strbuf_release(&envblk);
-	strbuf_release(&args);
+	free(wenvblk);
+	free(wargs);
 
 	if (!ret) {
 		errno = ENOENT;
 		return -1;
 	}
 	CloseHandle(pi.hThread);
@@ -938,19 +1048,18 @@
 	}
 	LeaveCriticalSection(&pinfo_cs);
 
 	return (pid_t)pi.dwProcessId;
 }
 
-static pid_t mingw_spawnve(const char *cmd, const char **argv, char **env,
-			   int prepend_cmd)
+static pid_t mingw_spawnv(const char *cmd, const char **argv, int prepend_cmd)
 {
-	return mingw_spawnve_fd(cmd, argv, env, NULL, prepend_cmd, 0, 1, 2);
+	return mingw_spawnve_fd(cmd, argv, NULL, NULL, prepend_cmd, 0, 1, 2);
 }
 
-pid_t mingw_spawnvpe(const char *cmd, const char **argv, char **env,
+pid_t mingw_spawnvpe(const char *cmd, const char **argv, char **deltaenv,
 		     const char *dir,
 		     int fhin, int fhout, int fherr)
 {
 	pid_t pid;
 	char **path = get_path_split();
 	char *prog = path_lookup(cmd, path, 0);
@@ -968,28 +1077,28 @@
 			argv[0] = prog;
 			if (!iprog) {
 				errno = ENOENT;
 				pid = -1;
 			}
 			else {
-				pid = mingw_spawnve_fd(iprog, argv, env, dir, 1,
+				pid = mingw_spawnve_fd(iprog, argv, deltaenv, dir, 1,
 						       fhin, fhout, fherr);
 				free(iprog);
 			}
 			argv[0] = argv0;
 		}
 		else
-			pid = mingw_spawnve_fd(prog, argv, env, dir, 0,
+			pid = mingw_spawnve_fd(prog, argv, deltaenv, dir, 0,
 					       fhin, fhout, fherr);
 		free(prog);
 	}
 	free_path_split(path);
 	return pid;
 }
 
-static int try_shell_exec(const char *cmd, char *const *argv, char **env)
+static int try_shell_exec(const char *cmd, char *const *argv)
 {
 	const char *interpr = parse_interpreter(cmd);
 	char **path;
 	char *prog;
 	int pid = 0;
 
@@ -1001,13 +1110,13 @@
 		int argc = 0;
 		const char **argv2;
 		while (argv[argc]) argc++;
 		argv2 = xmalloc(sizeof(*argv) * (argc+1));
 		argv2[0] = (char *)cmd;	/* full path to the script file */
 		memcpy(&argv2[1], &argv[1], sizeof(*argv) * argc);
-		pid = mingw_spawnve(prog, argv2, env, 1);
+		pid = mingw_spawnv(prog, argv2, 1);
 		if (pid >= 0) {
 			int status;
 			if (waitpid(pid, &status, 0) < 0)
 				status = 255;
 			exit(status);
 		}
@@ -1016,48 +1125,43 @@
 		free(argv2);
 	}
 	free_path_split(path);
 	return pid;
 }
 
-static void mingw_execve(const char *cmd, char *const *argv, char *const *env)
+int mingw_execv(const char *cmd, char *const *argv)
 {
 	/* check if git_command is a shell script */
-	if (!try_shell_exec(cmd, argv, (char **)env)) {
+	if (!try_shell_exec(cmd, argv)) {
 		int pid, status;
 
-		pid = mingw_spawnve(cmd, (const char **)argv, (char **)env, 0);
+		pid = mingw_spawnv(cmd, (const char **)argv, 0);
 		if (pid < 0)
-			return;
+			return -1;
 		if (waitpid(pid, &status, 0) < 0)
 			status = 255;
 		exit(status);
 	}
+	return -1;
 }
 
 int mingw_execvp(const char *cmd, char *const *argv)
 {
 	char **path = get_path_split();
 	char *prog = path_lookup(cmd, path, 0);
 
 	if (prog) {
-		mingw_execve(prog, argv, environ);
+		mingw_execv(prog, argv);
 		free(prog);
 	} else
 		errno = ENOENT;
 
 	free_path_split(path);
 	return -1;
 }
 
-int mingw_execv(const char *cmd, char *const *argv)
-{
-	mingw_execve(cmd, argv, environ);
-	return -1;
-}
-
 int mingw_kill(pid_t pid, int sig)
 {
 	if (pid > 0 && sig == SIGTERM) {
 		HANDLE h = OpenProcess(PROCESS_TERMINATE, FALSE, pid);
 
 		if (TerminateProcess(h, -1)) {
@@ -1077,114 +1181,94 @@
 	}
 
 	errno = EINVAL;
 	return -1;
 }
 
-static char **copy_environ(void)
+/*
+ * Compare environment entries by key (i.e. stopping at '=' or '\0').
+ */
+static int compareenv(const void *v1, const void *v2)
 {
-	char **env;
-	int i = 0;
-	while (environ[i])
-		i++;
-	env = xmalloc((i+1)*sizeof(*env));
-	for (i = 0; environ[i]; i++)
-		env[i] = xstrdup(environ[i]);
-	env[i] = NULL;
-	return env;
-}
+	const char *e1 = *(const char**)v1;
+	const char *e2 = *(const char**)v2;
 
-void free_environ(char **env)
-{
-	int i;
-	for (i = 0; env[i]; i++)
-		free(env[i]);
-	free(env);
+	for (;;) {
+		int c1 = *e1++;
+		int c2 = *e2++;
+		c1 = (c1 == '=') ? 0 : tolower(c1);
+		c2 = (c2 == '=') ? 0 : tolower(c2);
+		if (c1 > c2)
+			return 1;
+		if (c1 < c2)
+			return -1;
+		if (c1 == 0)
+			return 0;
+	}
 }
 
-static int lookup_env(char **env, const char *name, size_t nmln)
+static int bsearchenv(char **env, const char *name, size_t size)
 {
-	int i;
-
-	for (i = 0; env[i]; i++) {
-		if (0 == strncmp(env[i], name, nmln)
-		    && '=' == env[i][nmln])
-			/* matches */
-			return i;
+	unsigned low = 0, high = size;
+	while (low < high) {
+		unsigned mid = low + ((high - low) >> 1);
+		int cmp = compareenv(&env[mid], &name);
+		if (cmp < 0)
+			low = mid + 1;
+		else if (cmp > 0)
+			high = mid;
+		else
+			return mid;
 	}
-	return -1;
+	return ~low; /* not found, return 1's complement of insert position */
 }
 
 /*
  * If name contains '=', then sets the variable, otherwise it unsets it
+ * Size includes the terminating NULL. Env must have room for size + 1 entries
+ * (in case of insert). Returns the new size. Optionally frees removed entries.
  */
-static char **env_setenv(char **env, const char *name)
+static int do_putenv(char **env, const char *name, int size, int free_old)
 {
-	char *eq = strchrnul(name, '=');
-	int i = lookup_env(env, name, eq-name);
+	int i = bsearchenv(env, name, size - 1);
 
-	if (i < 0) {
-		if (*eq) {
-			for (i = 0; env[i]; i++)
-				;
-			env = xrealloc(env, (i+2)*sizeof(*env));
-			env[i] = xstrdup(name);
-			env[i+1] = NULL;
-		}
-	}
-	else {
+	/* optionally free removed / replaced entry */
+	if (i >= 0 && free_old)
 		free(env[i]);
-		if (*eq)
-			env[i] = xstrdup(name);
-		else
-			for (; env[i]; i++)
-				env[i] = env[i+1];
+
+	if (strchr(name, '=')) {
+		/* if new value ('key=value') is specified, insert or replace entry */
+		if (i < 0) {
+			i = ~i;
+			memmove(&env[i + 1], &env[i], (size - i) * sizeof(char*));
+			size++;
+		}
+		env[i] = (char*) name;
+	} else if (i >= 0) {
+		/* otherwise ('key') remove existing entry */
+		size--;
+		memmove(&env[i], &env[i + 1], (size - i) * sizeof(char*));
 	}
-	return env;
+	return size;
 }
 
-/*
- * Copies global environ and adjusts variables as specified by vars.
- */
-char **make_augmented_environ(const char *const *vars)
+char *mingw_getenv(const char *name)
 {
-	char **env = copy_environ();
-
-	while (*vars)
-		env = env_setenv(env, *vars++);
-	return env;
+	char *value;
+	int pos = bsearchenv(environ, name, environ_size - 1);
+	if (pos < 0)
+		return NULL;
+	value = strchr(environ[pos], '=');
+	return value ? &value[1] : NULL;
 }
 
-#undef getenv
-
-/*
- * The system's getenv looks up the name in a case-insensitive manner.
- * This version tries a case-sensitive lookup and falls back to
- * case-insensitive if nothing was found.  This is necessary because,
- * as a prominent example, CMD sets 'Path', but not 'PATH'.
- * Warning: not thread-safe.
- */
-static char *getenv_cs(const char *name)
+int mingw_putenv(const char *namevalue)
 {
-	size_t len = strlen(name);
-	int i = lookup_env(environ, name, len);
-	if (i >= 0)
-		return environ[i] + len + 1;	/* skip past name and '=' */
-	return getenv(name);
-}
-
-char *mingw_getenv(const char *name)
-{
-	char *result = getenv_cs(name);
-	if (!result && !strcmp(name, "TMPDIR")) {
-		/* on Windows it is TMP and TEMP */
-		result = getenv_cs("TMP");
-		if (!result)
-			result = getenv_cs("TEMP");
-	}
-	return result;
+	ALLOC_GROW(environ, (environ_size + 1) * sizeof(char*), environ_alloc);
+	environ_size = do_putenv(environ, namevalue, environ_size, 1);
+	return 0;
 }
 
 /*
  * Note, this isn't a complete replacement for getaddrinfo. It assumes
  * that service contains a numerical port, or that it is null. It
  * does a simple search using gethostbyname, and returns one IPv4 host
@@ -1477,39 +1561,42 @@
 
 #undef rename
 int mingw_rename(const char *pold, const char *pnew)
 {
 	DWORD attrs, gle;
 	int tries = 0;
+	wchar_t wpold[MAX_PATH], wpnew[MAX_PATH];
+	if (xutftowcs_path(wpold, pold) < 0 || xutftowcs_path(wpnew, pnew) < 0)
+		return -1;
 
 	/*
 	 * Try native rename() first to get errno right.
 	 * It is based on MoveFile(), which cannot overwrite existing files.
 	 */
-	if (!rename(pold, pnew))
+	if (!_wrename(wpold, wpnew))
 		return 0;
 	if (errno != EEXIST)
 		return -1;
 repeat:
-	if (MoveFileEx(pold, pnew, MOVEFILE_REPLACE_EXISTING))
+	if (MoveFileExW(wpold, wpnew, MOVEFILE_REPLACE_EXISTING))
 		return 0;
 	/* TODO: translate more errors */
 	gle = GetLastError();
 	if (gle == ERROR_ACCESS_DENIED &&
-	    (attrs = GetFileAttributes(pnew)) != INVALID_FILE_ATTRIBUTES) {
+	    (attrs = GetFileAttributesW(wpnew)) != INVALID_FILE_ATTRIBUTES) {
 		if (attrs & FILE_ATTRIBUTE_DIRECTORY) {
 			errno = EISDIR;
 			return -1;
 		}
 		if ((attrs & FILE_ATTRIBUTE_READONLY) &&
-		    SetFileAttributes(pnew, attrs & ~FILE_ATTRIBUTE_READONLY)) {
-			if (MoveFileEx(pold, pnew, MOVEFILE_REPLACE_EXISTING))
+		    SetFileAttributesW(wpnew, attrs & ~FILE_ATTRIBUTE_READONLY)) {
+			if (MoveFileExW(wpold, wpnew, MOVEFILE_REPLACE_EXISTING))
 				return 0;
 			gle = GetLastError();
 			/* revert file attributes on failure */
-			SetFileAttributes(pnew, attrs);
+			SetFileAttributesW(wpnew, attrs);
 		}
 	}
 	if (tries < ARRAY_SIZE(delay) && gle == ERROR_ACCESS_DENIED) {
 		/*
 		 * We assume that some other process had the source or
 		 * destination file open at the wrong moment and retry.
@@ -1749,25 +1836,30 @@
 		die("failed to launch browser for %.*s", MAX_PATH, unixpath);
 	}
 }
 
 int link(const char *oldpath, const char *newpath)
 {
-	typedef BOOL (WINAPI *T)(const char*, const char*, LPSECURITY_ATTRIBUTES);
+	typedef BOOL (WINAPI *T)(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES);
 	static T create_hard_link = NULL;
+	wchar_t woldpath[MAX_PATH], wnewpath[MAX_PATH];
+	if (xutftowcs_path(woldpath, oldpath) < 0 ||
+		xutftowcs_path(wnewpath, newpath) < 0)
+		return -1;
+
 	if (!create_hard_link) {
 		create_hard_link = (T) GetProcAddress(
-			GetModuleHandle("kernel32.dll"), "CreateHardLinkA");
+			GetModuleHandle("kernel32.dll"), "CreateHardLinkW");
 		if (!create_hard_link)
 			create_hard_link = (T)-1;
 	}
 	if (create_hard_link == (T)-1) {
 		errno = ENOSYS;
 		return -1;
 	}
-	if (!create_hard_link(newpath, oldpath, NULL)) {
+	if (!create_hard_link(wnewpath, woldpath, NULL)) {
 		errno = err_win_to_posix(GetLastError());
 		return -1;
 	}
 	return 0;
 }
 
@@ -1819,6 +1911,220 @@
 	}
 	CloseHandle(h);
 
 	errno = EINVAL;
 	return -1;
 }
+
+int mingw_offset_1st_component(const char *path)
+{
+	int offset = 0;
+	if (has_dos_drive_prefix(path))
+		offset = 2;
+
+	/* unc paths */
+	else if (is_dir_sep(path[0]) && is_dir_sep(path[1])) {
+
+		/* skip server name */
+		char *pos = strpbrk(path + 2, "\\/");
+		if (!pos)
+			return 0; /* Error: malformed unc path */
+
+		do {
+			pos++;
+		} while (*pos && !is_dir_sep(*pos));
+
+		offset = pos - path;
+	}
+
+	return offset + is_dir_sep(path[offset]);
+}
+
+int xutftowcsn(wchar_t *wcs, const char *utfs, size_t wcslen, int utflen)
+{
+	int upos = 0, wpos = 0;
+	const unsigned char *utf = (const unsigned char*) utfs;
+	if (!utf || !wcs || wcslen < 1) {
+		errno = EINVAL;
+		return -1;
+	}
+	/* reserve space for \0 */
+	wcslen--;
+	if (utflen < 0)
+		utflen = INT_MAX;
+
+	while (upos < utflen) {
+		int c = utf[upos++] & 0xff;
+		if (utflen == INT_MAX && c == 0)
+			break;
+
+		if (wpos >= wcslen) {
+			wcs[wpos] = 0;
+			errno = ERANGE;
+			return -1;
+		}
+
+		if (c < 0x80) {
+			/* ASCII */
+			wcs[wpos++] = c;
+		} else if (c >= 0xc2 && c < 0xe0 && upos < utflen &&
+				(utf[upos] & 0xc0) == 0x80) {
+			/* 2-byte utf-8 */
+			c = ((c & 0x1f) << 6);
+			c |= (utf[upos++] & 0x3f);
+			wcs[wpos++] = c;
+		} else if (c >= 0xe0 && c < 0xf0 && upos + 1 < utflen &&
+				!(c == 0xe0 && utf[upos] < 0xa0) && /* over-long encoding */
+				(utf[upos] & 0xc0) == 0x80 &&
+				(utf[upos + 1] & 0xc0) == 0x80) {
+			/* 3-byte utf-8 */
+			c = ((c & 0x0f) << 12);
+			c |= ((utf[upos++] & 0x3f) << 6);
+			c |= (utf[upos++] & 0x3f);
+			wcs[wpos++] = c;
+		} else if (c >= 0xf0 && c < 0xf5 && upos + 2 < utflen &&
+				wpos + 1 < wcslen &&
+				!(c == 0xf0 && utf[upos] < 0x90) && /* over-long encoding */
+				!(c == 0xf4 && utf[upos] >= 0x90) && /* > \u10ffff */
+				(utf[upos] & 0xc0) == 0x80 &&
+				(utf[upos + 1] & 0xc0) == 0x80 &&
+				(utf[upos + 2] & 0xc0) == 0x80) {
+			/* 4-byte utf-8: convert to \ud8xx \udcxx surrogate pair */
+			c = ((c & 0x07) << 18);
+			c |= ((utf[upos++] & 0x3f) << 12);
+			c |= ((utf[upos++] & 0x3f) << 6);
+			c |= (utf[upos++] & 0x3f);
+			c -= 0x10000;
+			wcs[wpos++] = 0xd800 | (c >> 10);
+			wcs[wpos++] = 0xdc00 | (c & 0x3ff);
+		} else if (c >= 0xa0) {
+			/* invalid utf-8 byte, printable unicode char: convert 1:1 */
+			wcs[wpos++] = c;
+		} else {
+			/* invalid utf-8 byte, non-printable unicode: convert to hex */
+			static const char *hex = "0123456789abcdef";
+			wcs[wpos++] = hex[c >> 4];
+			if (wpos < wcslen)
+				wcs[wpos++] = hex[c & 0x0f];
+		}
+	}
+	wcs[wpos] = 0;
+	return wpos;
+}
+
+int xwcstoutf(char *utf, const wchar_t *wcs, size_t utflen)
+{
+	if (!wcs || !utf || utflen < 1) {
+		errno = EINVAL;
+		return -1;
+	}
+	utflen = WideCharToMultiByte(CP_UTF8, 0, wcs, -1, utf, utflen, NULL, NULL);
+	if (utflen)
+		return utflen - 1;
+	errno = ERANGE;
+	return -1;
+}
+
+/*
+ * Disable MSVCRT command line wildcard expansion (__getmainargs called from
+ * mingw startup code, see init.c in mingw runtime).
+ */
+int _CRT_glob = 0;
+
+typedef struct {
+	int newmode;
+} _startupinfo;
+
+extern int __wgetmainargs(int *argc, wchar_t ***argv, wchar_t ***env, int glob,
+		_startupinfo *si);
+
+static NORETURN void die_startup()
+{
+	fputs("fatal: not enough memory for initialization", stderr);
+	exit(128);
+}
+
+static void *malloc_startup(size_t size)
+{
+	void *result = malloc(size);
+	if (!result)
+		die_startup();
+	return result;
+}
+
+static char *wcstoutfdup_startup(char *buffer, const wchar_t *wcs, size_t len)
+{
+	len = xwcstoutf(buffer, wcs, len) + 1;
+	return memcpy(malloc_startup(len), buffer, len);
+}
+
+void mingw_startup()
+{
+	int i, maxlen, argc;
+	char *buffer;
+	wchar_t **wenv, **wargv;
+	_startupinfo si;
+
+	/* get wide char arguments and environment */
+	si.newmode = 0;
+	if (__wgetmainargs(&argc, &wargv, &wenv, _CRT_glob, &si) < 0)
+		die_startup();
+
+	/* determine size of argv and environ conversion buffer */
+	maxlen = wcslen(_wpgmptr);
+	for (i = 1; i < argc; i++)
+		maxlen = max(maxlen, wcslen(wargv[i]));
+	for (i = 0; wenv[i]; i++)
+		maxlen = max(maxlen, wcslen(wenv[i]));
+
+	/*
+	 * nedmalloc can't free CRT memory, allocate resizable environment
+	 * list. Note that xmalloc / xmemdupz etc. call getenv, so we cannot
+	 * use it while initializing the environment itself.
+	 */
+	environ_size = i + 1;
+	environ_alloc = alloc_nr(environ_size * sizeof(char*));
+	environ = malloc_startup(environ_alloc);
+
+	/* allocate buffer (wchar_t encodes to max 3 UTF-8 bytes) */
+	maxlen = 3 * maxlen + 1;
+	buffer = malloc_startup(maxlen);
+
+	/* convert command line arguments and environment to UTF-8 */
+	__argv[0] = wcstoutfdup_startup(buffer, _wpgmptr, maxlen);
+	for (i = 1; i < argc; i++)
+		__argv[i] = wcstoutfdup_startup(buffer, wargv[i], maxlen);
+	for (i = 0; wenv[i]; i++)
+		environ[i] = wcstoutfdup_startup(buffer, wenv[i], maxlen);
+	environ[i] = NULL;
+	free(buffer);
+
+	/* sort environment for O(log n) getenv / putenv */
+	qsort(environ, i, sizeof(char*), compareenv);
+
+	/* fix Windows specific environment settings */
+
+	/* on Windows it is TMP and TEMP */
+	if (!mingw_getenv("TMPDIR")) {
+		const char *tmp = mingw_getenv("TMP");
+		if (!tmp)
+			tmp = mingw_getenv("TEMP");
+		if (tmp)
+			setenv("TMPDIR", tmp, 1);
+	}
+
+	/* simulate TERM to enable auto-color (see color.c) */
+	if (!getenv("TERM"))
+		setenv("TERM", "cygwin", 1);
+
+	/* initialize critical section for waitpid pinfo_t list */
+	InitializeCriticalSection(&pinfo_cs);
+
+	/* set up default file mode and file modes for stdin/out/err */
+	_fmode = _O_BINARY;
+	_setmode(_fileno(stdin), _O_BINARY);
+	_setmode(_fileno(stdout), _O_BINARY);
+	_setmode(_fileno(stderr), _O_BINARY);
+
+	/* initialize Unicode console */
+	winansi_init();
+}
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/mingw.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/mingw.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/mingw.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/mingw.h	2014-08-16 06:26:55.000000000 +0800
@@ -32,12 +32,15 @@
 #define WEXITSTATUS(x) ((x) & 0xff)
 #define WTERMSIG(x) SIGTERM
 
 #ifndef EWOULDBLOCK
 #define EWOULDBLOCK EAGAIN
 #endif
+#ifndef ELOOP
+#define ELOOP EMLINK
+#endif
 #define SHUT_WR SD_SEND
 
 #define SIGHUP 1
 #define SIGQUIT 3
 #define SIGKILL 9
 #define SIGPIPE 13
@@ -115,16 +118,13 @@
 #define exit(code) exit((code) & 0xff)
 
 /*
  * simple adaptors
  */
 
-static inline int mingw_mkdir(const char *path, int mode)
-{
-	return mkdir(path);
-}
+int mingw_mkdir(const char *path, int mode);
 #define mkdir mingw_mkdir
 
 #define WNOHANG 1
 pid_t waitpid(pid_t pid, int *status, int options);
 
 #define kill mingw_kill
@@ -189,17 +189,33 @@
 FILE *mingw_freopen (const char *filename, const char *otype, FILE *stream);
 #define freopen mingw_freopen
 
 int mingw_fflush(FILE *stream);
 #define fflush mingw_fflush
 
+int mingw_access(const char *filename, int mode);
+#undef access
+#define access mingw_access
+
+int mingw_chdir(const char *dirname);
+#define chdir mingw_chdir
+
+int mingw_chmod(const char *filename, int mode);
+#define chmod mingw_chmod
+
+char *mingw_mktemp(char *template);
+#define mktemp mingw_mktemp
+
 char *mingw_getcwd(char *pointer, int len);
 #define getcwd mingw_getcwd
 
 char *mingw_getenv(const char *name);
 #define getenv mingw_getenv
+int mingw_putenv(const char *namevalue);
+#define putenv mingw_putenv
+#define unsetenv mingw_putenv
 
 int mingw_gethostname(char *host, int namelen);
 #define gethostname mingw_gethostname
 
 struct hostent *mingw_gethostbyname(const char *host);
 #define gethostbyname mingw_gethostbyname
@@ -314,18 +330,14 @@
 #define raise mingw_raise
 
 /*
  * ANSI emulation wrappers
  */
 
-int winansi_fputs(const char *str, FILE *stream);
-int winansi_printf(const char *format, ...) __attribute__((format (printf, 1, 2)));
-int winansi_fprintf(FILE *stream, const char *format, ...) __attribute__((format (printf, 2, 3)));
-#define fputs winansi_fputs
-#define printf(...) winansi_printf(__VA_ARGS__)
-#define fprintf(...) winansi_fprintf(__VA_ARGS__)
+void winansi_init(void);
+HANDLE winansi_get_osfhandle(int fd);
 
 /*
  * git specific compatibility
  */
 
 #define has_dos_drive_prefix(path) (isalpha(*(path)) && (path)[1] == ':')
@@ -336,50 +348,146 @@
 	for (; *path; ++path)
 		if (is_dir_sep(*path))
 			ret = (char *)path;
 	return ret;
 }
 #define find_last_dir_sep mingw_find_last_dir_sep
+int mingw_offset_1st_component(const char *path);
+#define offset_1st_component mingw_offset_1st_component
 #define PATH_SEP ';'
 #define PRIuMAX "I64u"
 #define PRId64 "I64d"
 
 void mingw_open_html(const char *path);
 #define open_html mingw_open_html
 
-/*
- * helpers
+void mingw_mark_as_git_dir(const char *dir);
+#define mark_as_git_dir mingw_mark_as_git_dir
+
+/**
+ * Converts UTF-8 encoded string to UTF-16LE.
+ *
+ * To support repositories with legacy-encoded file names, invalid UTF-8 bytes
+ * 0xa0 - 0xff are converted to corresponding printable Unicode chars \u00a0 -
+ * \u00ff, and invalid UTF-8 bytes 0x80 - 0x9f (which would make non-printable
+ * Unicode) are converted to hex-code.
+ *
+ * Lead-bytes not followed by an appropriate number of trail-bytes, over-long
+ * encodings and 4-byte encodings > \u10ffff are detected as invalid UTF-8.
+ *
+ * Maximum space requirement for the target buffer is two wide chars per UTF-8
+ * char (((strlen(utf) * 2) + 1) [* sizeof(wchar_t)]).
+ *
+ * The maximum space is needed only if the entire input string consists of
+ * invalid UTF-8 bytes in range 0x80-0x9f, as per the following table:
+ *
+ *               |                   | UTF-8 | UTF-16 |
+ *   Code point  |  UTF-8 sequence   | bytes | words  | ratio
+ * --------------+-------------------+-------+--------+-------
+ * 000000-00007f | 0-7f              |   1   |   1    |  1
+ * 000080-0007ff | c2-df + 80-bf     |   2   |   1    |  0.5
+ * 000800-00ffff | e0-ef + 2 * 80-bf |   3   |   1    |  0.33
+ * 010000-10ffff | f0-f4 + 3 * 80-bf |   4   |  2 (a) |  0.5
+ * invalid       | 80-9f             |   1   |  2 (b) |  2
+ * invalid       | a0-ff             |   1   |   1    |  1
+ *
+ * (a) encoded as UTF-16 surrogate pair
+ * (b) encoded as two hex digits
+ *
+ * Note that, while the UTF-8 encoding scheme can be extended to 5-byte, 6-byte
+ * or even indefinite-byte sequences, the largest valid code point \u10ffff
+ * encodes as only 4 UTF-8 bytes.
+ *
+ * Parameters:
+ * wcs: wide char target buffer
+ * utf: string to convert
+ * wcslen: size of target buffer (in wchar_t's)
+ * utflen: size of string to convert, or -1 if 0-terminated
+ *
+ * Returns:
+ * length of converted string (_wcslen(wcs)), or -1 on failure
+ *
+ * Errors:
+ * EINVAL: one of the input parameters is invalid (e.g. NULL)
+ * ERANGE: the output buffer is too small
  */
+int xutftowcsn(wchar_t *wcs, const char *utf, size_t wcslen, int utflen);
 
-char **make_augmented_environ(const char *const *vars);
-void free_environ(char **env);
+/**
+ * Simplified variant of xutftowcsn, assumes input string is \0-terminated.
+ */
+static inline int xutftowcs(wchar_t *wcs, const char *utf, size_t wcslen)
+{
+	return xutftowcsn(wcs, utf, wcslen, -1);
+}
+
+/**
+ * Simplified file system specific variant of xutftowcsn, assumes output
+ * buffer size is MAX_PATH wide chars and input string is \0-terminated,
+ * fails with ENAMETOOLONG if input string is too long.
+ */
+static inline int xutftowcs_path(wchar_t *wcs, const char *utf)
+{
+	int result = xutftowcsn(wcs, utf, MAX_PATH, -1);
+	if (result < 0 && errno == ERANGE)
+		errno = ENAMETOOLONG;
+	return result;
+}
+
+/**
+ * Converts UTF-16LE encoded string to UTF-8.
+ *
+ * Maximum space requirement for the target buffer is three UTF-8 chars per
+ * wide char ((_wcslen(wcs) * 3) + 1).
+ *
+ * The maximum space is needed only if the entire input string consists of
+ * UTF-16 words in range 0x0800-0xd7ff or 0xe000-0xffff (i.e. \u0800-\uffff
+ * modulo surrogate pairs), as per the following table:
+ *
+ *               |                       | UTF-16 | UTF-8 |
+ *   Code point  |  UTF-16 sequence      | words  | bytes | ratio
+ * --------------+-----------------------+--------+-------+-------
+ * 000000-00007f | 0000-007f             |   1    |   1   |  1
+ * 000080-0007ff | 0080-07ff             |   1    |   2   |  2
+ * 000800-00ffff | 0800-d7ff / e000-ffff |   1    |   3   |  3
+ * 010000-10ffff | d800-dbff + dc00-dfff |   2    |   4   |  2
+ *
+ * Note that invalid code points > 10ffff cannot be represented in UTF-16.
+ *
+ * Parameters:
+ * utf: target buffer
+ * wcs: wide string to convert
+ * utflen: size of target buffer
+ *
+ * Returns:
+ * length of converted string, or -1 on failure
+ *
+ * Errors:
+ * EINVAL: one of the input parameters is invalid (e.g. NULL)
+ * ERANGE: the output buffer is too small
+ */
+int xwcstoutf(char *utf, const wchar_t *wcs, size_t utflen);
 
 /*
  * A critical section used in the implementation of the spawn
  * functions (mingw_spawnv[p]e()) and waitpid(). Intialised in
  * the replacement main() macro below.
  */
 extern CRITICAL_SECTION pinfo_cs;
 
 /*
- * A replacement of main() that ensures that argv[0] has a path
- * and that default fmode and std(in|out|err) are in binary mode
+ * A replacement of main() that adds win32 specific initialization.
  */
 
+void mingw_startup();
 #define main(c,v) dummy_decl_mingw_main(); \
 static int mingw_main(c,v); \
 int main(int argc, char **argv) \
 { \
-	extern CRITICAL_SECTION pinfo_cs; \
-	_fmode = _O_BINARY; \
-	_setmode(_fileno(stdin), _O_BINARY); \
-	_setmode(_fileno(stdout), _O_BINARY); \
-	_setmode(_fileno(stderr), _O_BINARY); \
-	argv[0] = xstrdup(_pgmptr); \
-	InitializeCriticalSection(&pinfo_cs); \
-	return mingw_main(argc, argv); \
+	mingw_startup(); \
+	return mingw_main(__argc, (void *)__argv); \
 } \
 static int mingw_main(c,v)
 
 /*
  * Used by Pthread API implementation for Windows
  */
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/obstack.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/obstack.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/obstack.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/obstack.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/poll/poll.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/poll/poll.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/poll/poll.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/poll/poll.c	2014-08-16 06:26:55.000000000 +0800
@@ -602,13 +602,13 @@
        if ((pfd[i].revents |= happened) != 0)
 	rc++;
     }
 
   if (!rc && timeout == INFTIM)
     {
-      SwitchToThread();
+      SleepEx (1, TRUE);
       goto restart;
     }
 
   return rc;
 #endif
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/strlcpy.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/strlcpy.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/strlcpy.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/strlcpy.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/terminal.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/terminal.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/terminal.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/terminal.o differ
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/vcbuild/include: alloca.h
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/win32: alloca.h
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/win32/dirent.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/win32/dirent.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/win32/dirent.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/win32/dirent.c	2014-08-16 06:26:55.000000000 +0800
@@ -1,108 +1,92 @@
-#include "../git-compat-util.h"
-#include "dirent.h"
+#include "../../git-compat-util.h"
 
 struct DIR {
 	struct dirent dd_dir; /* includes d_type */
 	HANDLE dd_handle;     /* FindFirstFile handle */
 	int dd_stat;          /* 0-based index */
-	char dd_name[1];      /* extend struct */
 };
 
+static inline void finddata2dirent(struct dirent *ent, WIN32_FIND_DATAW *fdata)
+{
+	/* convert UTF-16 name to UTF-8 */
+	xwcstoutf(ent->d_name, fdata->cFileName, sizeof(ent->d_name));
+
+	/* Set file type, based on WIN32_FIND_DATA */
+	if (fdata->dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
+		ent->d_type = DT_DIR;
+	else
+		ent->d_type = DT_REG;
+}
+
 DIR *opendir(const char *name)
 {
-	DWORD attrs = GetFileAttributesA(name);
+	wchar_t pattern[MAX_PATH + 2]; /* + 2 for '/' '*' */
+	WIN32_FIND_DATAW fdata;
+	HANDLE h;
 	int len;
-	DIR *p;
+	DIR *dir;
 
-	/* check for valid path */
-	if (attrs == INVALID_FILE_ATTRIBUTES) {
-		errno = ENOENT;
+	/* convert name to UTF-16 and check length < MAX_PATH */
+	if ((len = xutftowcs_path(pattern, name)) < 0)
 		return NULL;
-	}
 
-	/* check if it's a directory */
-	if (!(attrs & FILE_ATTRIBUTE_DIRECTORY)) {
-		errno = ENOTDIR;
-		return NULL;
-	}
+	/* append optional '/' and wildcard '*' */
+	if (len && !is_dir_sep(pattern[len - 1]))
+		pattern[len++] = '/';
+	pattern[len++] = '*';
+	pattern[len] = 0;
 
-	/* check that the pattern won't be too long for FindFirstFileA */
-	len = strlen(name);
-	if (is_dir_sep(name[len - 1]))
-		len--;
-	if (len + 2 >= MAX_PATH) {
-		errno = ENAMETOOLONG;
+	/* open find handle */
+	h = FindFirstFileW(pattern, &fdata);
+	if (h == INVALID_HANDLE_VALUE) {
+		DWORD err = GetLastError();
+		errno = (err == ERROR_DIRECTORY) ? ENOTDIR : err_win_to_posix(err);
 		return NULL;
 	}
 
-	p = malloc(sizeof(DIR) + len + 2);
-	if (!p)
-		return NULL;
-
-	memset(p, 0, sizeof(DIR) + len + 2);
-	strcpy(p->dd_name, name);
-	p->dd_name[len] = '/';
-	p->dd_name[len+1] = '*';
-
-	p->dd_handle = INVALID_HANDLE_VALUE;
-	return p;
+	/* initialize DIR structure and copy first dir entry */
+	dir = xmalloc(sizeof(DIR));
+	dir->dd_handle = h;
+	dir->dd_stat = 0;
+	finddata2dirent(&dir->dd_dir, &fdata);
+	return dir;
 }
 
 struct dirent *readdir(DIR *dir)
 {
-	WIN32_FIND_DATAA buf;
-	HANDLE handle;
-
-	if (!dir || !dir->dd_handle) {
+	if (!dir) {
 		errno = EBADF; /* No set_errno for mingw */
 		return NULL;
 	}
 
-	if (dir->dd_handle == INVALID_HANDLE_VALUE && dir->dd_stat == 0) {
-		DWORD lasterr;
-		handle = FindFirstFileA(dir->dd_name, &buf);
-		lasterr = GetLastError();
-		dir->dd_handle = handle;
-		if (handle == INVALID_HANDLE_VALUE && (lasterr != ERROR_NO_MORE_FILES)) {
-			errno = err_win_to_posix(lasterr);
+	/* if first entry, dirent has already been set up by opendir */
+	if (dir->dd_stat) {
+		/* get next entry and convert from WIN32_FIND_DATA to dirent */
+		WIN32_FIND_DATAW fdata;
+		if (FindNextFileW(dir->dd_handle, &fdata)) {
+			finddata2dirent(&dir->dd_dir, &fdata);
+		} else {
+			DWORD lasterr = GetLastError();
+			/* POSIX says you shouldn't set errno when readdir can't
+			   find any more files; so, if another error we leave it set. */
+			if (lasterr != ERROR_NO_MORE_FILES)
+				errno = err_win_to_posix(lasterr);
 			return NULL;
 		}
-	} else if (dir->dd_handle == INVALID_HANDLE_VALUE) {
-		return NULL;
-	} else if (!FindNextFileA(dir->dd_handle, &buf)) {
-		DWORD lasterr = GetLastError();
-		FindClose(dir->dd_handle);
-		dir->dd_handle = INVALID_HANDLE_VALUE;
-		/* POSIX says you shouldn't set errno when readdir can't
-		   find any more files; so, if another error we leave it set. */
-		if (lasterr != ERROR_NO_MORE_FILES)
-			errno = err_win_to_posix(lasterr);
-		return NULL;
 	}
 
-	/* We get here if `buf' contains valid data.  */
-	strcpy(dir->dd_dir.d_name, buf.cFileName);
 	++dir->dd_stat;
-
-	/* Set file type, based on WIN32_FIND_DATA */
-	dir->dd_dir.d_type = 0;
-	if (buf.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
-		dir->dd_dir.d_type |= DT_DIR;
-	else
-		dir->dd_dir.d_type |= DT_REG;
-
 	return &dir->dd_dir;
 }
 
 int closedir(DIR *dir)
 {
 	if (!dir) {
 		errno = EBADF;
 		return -1;
 	}
 
-	if (dir->dd_handle != INVALID_HANDLE_VALUE)
-		FindClose(dir->dd_handle);
+	FindClose(dir->dd_handle);
 	free(dir);
 	return 0;
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/win32/dirent.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/win32/dirent.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/win32/dirent.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/win32/dirent.h	2014-08-16 06:26:55.000000000 +0800
@@ -6,18 +6,14 @@
 #define DT_UNKNOWN 0
 #define DT_DIR     1
 #define DT_REG     2
 #define DT_LNK     3
 
 struct dirent {
-	long d_ino;                      /* Always zero. */
-	char d_name[FILENAME_MAX];       /* File name. */
-	union {
-		unsigned short d_reclen; /* Always zero. */
-		unsigned char  d_type;   /* Reimplementation adds this */
-	};
+	unsigned char d_type;      /* file type to prevent lstat after readdir */
+	char d_name[MAX_PATH * 3]; /* file name (* 3 for UTF-8 conversion) */
 };
 
 DIR *opendir(const char *dirname);
 struct dirent *readdir(DIR *dir);
 int closedir(DIR *dir);
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/winansi.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/winansi.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/winansi.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/winansi.c	2014-08-16 06:26:55.000000000 +0800
@@ -1,54 +1,134 @@
 /*
  * Copyright 2008 Peter Harris <git@peter.is-a-geek.org>
  */
 
+#undef NOGDI
 #include "../git-compat-util.h"
-
-/*
- Functions to be wrapped:
-*/
-#undef printf
-#undef fprintf
-#undef fputs
-/* TODO: write */
+#include <wingdi.h>
+#include <winreg.h>
 
 /*
  ANSI codes used by git: m, K
 
  This file is git-specific. Therefore, this file does not attempt
  to implement any codes that are not used by git.
 */
 
 static HANDLE console;
 static WORD plain_attr;
 static WORD attr;
 static int negative;
+static int non_ascii_used = 0;
+static HANDLE hthread, hread, hwrite;
+static HANDLE hconsole1, hconsole2;
+
+#ifdef __MINGW32__
+typedef struct _CONSOLE_FONT_INFOEX {
+	ULONG cbSize;
+	DWORD nFont;
+	COORD dwFontSize;
+	UINT FontFamily;
+	UINT FontWeight;
+	WCHAR FaceName[LF_FACESIZE];
+} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;
+#endif
+
+typedef BOOL (WINAPI *PGETCURRENTCONSOLEFONTEX)(HANDLE, BOOL,
+		PCONSOLE_FONT_INFOEX);
+
+static void warn_if_raster_font(void)
+{
+	DWORD fontFamily = 0;
+	PGETCURRENTCONSOLEFONTEX pGetCurrentConsoleFontEx;
+
+	/* don't bother if output was ascii only */
+	if (!non_ascii_used)
+		return;
 
-static void init(void)
+	/* GetCurrentConsoleFontEx is available since Vista */
+	pGetCurrentConsoleFontEx = (PGETCURRENTCONSOLEFONTEX) GetProcAddress(
+			GetModuleHandle("kernel32.dll"),
+			"GetCurrentConsoleFontEx");
+	if (pGetCurrentConsoleFontEx) {
+		CONSOLE_FONT_INFOEX cfi;
+		cfi.cbSize = sizeof(cfi);
+		if (pGetCurrentConsoleFontEx(console, 0, &cfi))
+			fontFamily = cfi.FontFamily;
+	} else {
+		/* pre-Vista: check default console font in registry */
+		HKEY hkey;
+		if (ERROR_SUCCESS == RegOpenKeyExA(HKEY_CURRENT_USER, "Console",
+				0, KEY_READ, &hkey)) {
+			DWORD size = sizeof(fontFamily);
+			RegQueryValueExA(hkey, "FontFamily", NULL, NULL,
+					(LPVOID) &fontFamily, &size);
+			RegCloseKey(hkey);
+		}
+	}
+
+	if (!(fontFamily & TMPF_TRUETYPE)) {
+		const wchar_t *msg = L"\nWarning: Your console font probably "
+			L"doesn\'t support Unicode. If you experience strange "
+			L"characters in the output, consider switching to a "
+			L"TrueType font such as Consolas!\n";
+		DWORD dummy;
+		WriteConsoleW(console, msg, wcslen(msg), &dummy, NULL);
+	}
+}
+
+static int is_console(int fd)
 {
 	CONSOLE_SCREEN_BUFFER_INFO sbi;
+	HANDLE hcon;
 
 	static int initialized = 0;
-	if (initialized)
-		return;
 
-	console = GetStdHandle(STD_OUTPUT_HANDLE);
-	if (console == INVALID_HANDLE_VALUE)
-		console = NULL;
+	/* get OS handle of the file descriptor */
+	hcon = (HANDLE) _get_osfhandle(fd);
+	if (hcon == INVALID_HANDLE_VALUE)
+		return 0;
+
+	/* check if its a device (i.e. console, printer, serial port) */
+	if (GetFileType(hcon) != FILE_TYPE_CHAR)
+		return 0;
 
-	if (!console)
-		return;
+	/* check if its a handle to a console output screen buffer */
+	if (!GetConsoleScreenBufferInfo(hcon, &sbi))
+		return 0;
 
-	GetConsoleScreenBufferInfo(console, &sbi);
-	attr = plain_attr = sbi.wAttributes;
-	negative = 0;
+	/* initialize attributes */
+	if (!initialized) {
+		console = hcon;
+		attr = plain_attr = sbi.wAttributes;
+		negative = 0;
+		initialized = 1;
+	}
 
-	initialized = 1;
+	return 1;
 }
 
+#define BUFFER_SIZE 4096
+#define MAX_PARAMS 16
+
+static void write_console(unsigned char *str, size_t len)
+{
+	/* only called from console_thread, so a static buffer will do */
+	static wchar_t wbuf[2 * BUFFER_SIZE + 1];
+	DWORD dummy;
+
+	/* convert utf-8 to utf-16 */
+	int wlen = xutftowcsn(wbuf, (char*) str, ARRAY_SIZE(wbuf), len);
+
+	/* write directly to console */
+	WriteConsoleW(console, wbuf, wlen, &dummy, NULL);
+
+	/* remember if non-ascii characters are printed */
+	if (wlen != len)
+		non_ascii_used = 1;
+}
 
 #define FOREGROUND_ALL (FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE)
 #define BACKGROUND_ALL (BACKGROUND_RED | BACKGROUND_GREEN | BACKGROUND_BLUE)
 
 static void set_console_attr(void)
 {
@@ -87,24 +167,19 @@
 	GetConsoleScreenBufferInfo(console, &sbi);
 	FillConsoleOutputCharacterA(console, ' ',
 		sbi.dwSize.X - sbi.dwCursorPosition.X, sbi.dwCursorPosition,
 		&dummy);
 }
 
-
-static const char *set_attr(const char *str)
+static void set_attr(char func, const int *params, int paramlen)
 {
-	const char *func;
-	size_t len = strspn(str, "0123456789;");
-	func = str + len;
-
-	switch (*func) {
+	int i;
+	switch (func) {
 	case 'm':
-		do {
-			long val = strtol(str, (char **)&str, 10);
-			switch (val) {
+		for (i = 0; i < paramlen; i++) {
+			switch (params[i]) {
 			case 0: /* reset */
 				attr = plain_attr;
 				negative = 0;
 				break;
 			case 1: /* bold */
 				attr |= FOREGROUND_INTENSITY;
@@ -221,137 +296,284 @@
 				attr |= (plain_attr & BACKGROUND_ALL);
 				break;
 			default:
 				/* Unsupported code */
 				break;
 			}
-			str++;
-		} while (*(str-1) == ';');
-
+		}
 		set_console_attr();
 		break;
 	case 'K':
 		erase_in_line();
 		break;
 	default:
 		/* Unsupported code */
 		break;
 	}
-
-	return func + 1;
 }
 
-static int ansi_emulate(const char *str, FILE *stream)
-{
-	int rv = 0;
-	const char *pos = str;
+enum {
+	TEXT = 0, ESCAPE = 033, BRACKET = '['
+};
 
-	while (*pos) {
-		pos = strstr(str, "\033[");
-		if (pos) {
-			size_t len = pos - str;
+static DWORD WINAPI console_thread(LPVOID unused)
+{
+	unsigned char buffer[BUFFER_SIZE];
+	DWORD bytes;
+	int start, end = 0, c, parampos = 0, state = TEXT;
+	int params[MAX_PARAMS];
+
+	while (1) {
+		/* read next chunk of bytes from the pipe */
+		if (!ReadFile(hread, buffer + end, BUFFER_SIZE - end, &bytes,
+				NULL)) {
+			/* exit if pipe has been closed or disconnected */
+			if (GetLastError() == ERROR_PIPE_NOT_CONNECTED ||
+					GetLastError() == ERROR_BROKEN_PIPE)
+				break;
+			/* ignore other errors */
+			continue;
+		}
 
-			if (len) {
-				size_t out_len = fwrite(str, 1, len, stream);
-				rv += out_len;
-				if (out_len < len)
-					return rv;
+		/* scan the bytes and handle ANSI control codes */
+		bytes += end;
+		start = end = 0;
+		while (end < bytes) {
+			c = buffer[end++];
+			switch (state) {
+			case TEXT:
+				if (c == ESCAPE) {
+					/* print text seen so far */
+					if (end - 1 > start)
+						write_console(buffer + start,
+							end - 1 - start);
+
+					/* then start parsing escape sequence */
+					start = end - 1;
+					memset(params, 0, sizeof(params));
+					parampos = 0;
+					state = ESCAPE;
+				}
+				break;
+
+			case ESCAPE:
+				/* continue if "\033[", otherwise bail out */
+				state = (c == BRACKET) ? BRACKET : TEXT;
+				break;
+
+			case BRACKET:
+				/* parse [0-9;]* into array of parameters */
+				if (c >= '0' && c <= '9') {
+					params[parampos] *= 10;
+					params[parampos] += c - '0';
+				} else if (c == ';') {
+					/*
+					 * next parameter, bail out if out of
+					 * bounds
+					 */
+					parampos++;
+					if (parampos >= MAX_PARAMS)
+						state = TEXT;
+				} else {
+					/*
+					 * end of escape sequence, change
+					 * console attributes
+					 */
+					set_attr(c, params, parampos + 1);
+					start = end;
+					state = TEXT;
+				}
+				break;
 			}
+		}
 
-			str = pos + 2;
-			rv += 2;
-
-			fflush(stream);
+		/* print remaining text unless parsing an escape sequence */
+		if (state == TEXT && end > start) {
+			/* check for incomplete UTF-8 sequences and fix end */
+			if (buffer[end - 1] >= 0x80) {
+				if (buffer[end -1] >= 0xc0)
+					end--;
+				else if (end - 1 > start &&
+						buffer[end - 2] >= 0xe0)
+					end -= 2;
+				else if (end - 2 > start &&
+						buffer[end - 3] >= 0xf0)
+					end -= 3;
+			}
 
-			pos = set_attr(str);
-			rv += pos - str;
-			str = pos;
+			/* print remaining complete UTF-8 sequences */
+			if (end > start)
+				write_console(buffer + start, end - start);
+
+			/* move remaining bytes to the front */
+			if (end < bytes)
+				memmove(buffer, buffer + end, bytes - end);
+			end = bytes - end;
 		} else {
-			rv += strlen(str);
-			fputs(str, stream);
-			return rv;
+			/* all data has been consumed, mark buffer empty */
+			end = 0;
 		}
 	}
-	return rv;
-}
 
-int winansi_fputs(const char *str, FILE *stream)
-{
-	int rv;
-
-	if (!isatty(fileno(stream)))
-		return fputs(str, stream);
+	/* check if the console font supports unicode */
+	warn_if_raster_font();
 
-	init();
-
-	if (!console)
-		return fputs(str, stream);
+	CloseHandle(hread);
+	return 0;
+}
 
-	rv = ansi_emulate(str, stream);
+static void winansi_exit(void)
+{
+	/* flush all streams */
+	_flushall();
 
-	if (rv >= 0)
-		return 0;
-	else
-		return EOF;
+	/* signal console thread to exit */
+	FlushFileBuffers(hwrite);
+	DisconnectNamedPipe(hwrite);
+
+	/* wait for console thread to copy remaining data */
+	WaitForSingleObject(hthread, INFINITE);
+
+	/* cleanup handles... */
+	CloseHandle(hwrite);
+	CloseHandle(hthread);
 }
 
-static int winansi_vfprintf(FILE *stream, const char *format, va_list list)
+static void die_lasterr(const char *fmt, ...)
 {
-	int len, rv;
-	char small_buf[256];
-	char *buf = small_buf;
-	va_list cp;
+	va_list params;
+	va_start(params, fmt);
+	errno = err_win_to_posix(GetLastError());
+	die_errno(fmt, params);
+	va_end(params);
+}
 
-	if (!isatty(fileno(stream)))
-		goto abort;
+static HANDLE duplicate_handle(HANDLE hnd)
+{
+	HANDLE hresult, hproc = GetCurrentProcess();
+	if (!DuplicateHandle(hproc, hnd, hproc, &hresult, 0, TRUE,
+			DUPLICATE_SAME_ACCESS))
+		die_lasterr("DuplicateHandle(%li) failed", (long) hnd);
+	return hresult;
+}
 
-	init();
 
-	if (!console)
-		goto abort;
+/*
+ * Make MSVCRT's internal file descriptor control structure accessible
+ * so that we can tweak OS handles and flags directly (we need MSVCRT
+ * to treat our pipe handle as if it were a console).
+ *
+ * We assume that the ioinfo structure (exposed by MSVCRT.dll via
+ * __pioinfo) starts with the OS handle and the flags. The exact size
+ * varies between MSVCRT versions, so we try different sizes until
+ * toggling the FDEV bit of _pioinfo(1)->osflags is reflected in
+ * isatty(1).
+ */
+typedef struct {
+	HANDLE osfhnd;
+	char osflags;
+} ioinfo;
 
-	va_copy(cp, list);
-	len = vsnprintf(small_buf, sizeof(small_buf), format, cp);
-	va_end(cp);
-
-	if (len > sizeof(small_buf) - 1) {
-		buf = malloc(len + 1);
-		if (!buf)
-			goto abort;
+extern __declspec(dllimport) ioinfo *__pioinfo[];
 
-		len = vsnprintf(buf, len + 1, format, list);
-	}
+static size_t sizeof_ioinfo = 0;
 
-	rv = ansi_emulate(buf, stream);
+#define IOINFO_L2E 5
+#define IOINFO_ARRAY_ELTS (1 << IOINFO_L2E)
 
-	if (buf != small_buf)
-		free(buf);
-	return rv;
+#define FDEV  0x40
 
-abort:
-	rv = vfprintf(stream, format, list);
-	return rv;
+static inline ioinfo* _pioinfo(int fd)
+{
+	return (ioinfo*)((char*)__pioinfo[fd >> IOINFO_L2E] +
+			(fd & (IOINFO_ARRAY_ELTS - 1)) * sizeof_ioinfo);
 }
 
-int winansi_fprintf(FILE *stream, const char *format, ...)
+static int init_sizeof_ioinfo()
 {
-	va_list list;
-	int rv;
+	int istty, wastty;
+	/* don't init twice */
+	if (sizeof_ioinfo)
+		return sizeof_ioinfo >= 256;
+
+	sizeof_ioinfo = sizeof(ioinfo);
+	wastty = isatty(1);
+	while (sizeof_ioinfo < 256) {
+		/* toggle FDEV flag, check isatty, then toggle back */
+		_pioinfo(1)->osflags ^= FDEV;
+		istty = isatty(1);
+		_pioinfo(1)->osflags ^= FDEV;
+		/* return if we found the correct size */
+		if (istty != wastty)
+			return 0;
+		sizeof_ioinfo += sizeof(void*);
+	}
+	error("Tweaking file descriptors doesn't work with this MSVCRT.dll");
+	return 1;
+}
 
-	va_start(list, format);
-	rv = winansi_vfprintf(stream, format, list);
-	va_end(list);
+static HANDLE swap_osfhnd(int fd, HANDLE new_handle)
+{
+	ioinfo *pioinfo;
+	HANDLE old_handle;
 
-	return rv;
+	/* init ioinfo size if we haven't done so */
+	if (init_sizeof_ioinfo())
+		return INVALID_HANDLE_VALUE;
+
+	/* get ioinfo pointer and change the handles */
+	pioinfo = _pioinfo(fd);
+	old_handle = pioinfo->osfhnd;
+	pioinfo->osfhnd = new_handle;
+	return old_handle;
 }
 
-int winansi_printf(const char *format, ...)
+void winansi_init(void)
 {
-	va_list list;
-	int rv;
+	int con1, con2;
+	char name[32];
+
+	/* check if either stdout or stderr is a console output screen buffer */
+	con1 = is_console(1);
+	con2 = is_console(2);
+	if (!con1 && !con2)
+		return;
 
-	va_start(list, format);
-	rv = winansi_vfprintf(stdout, format, list);
-	va_end(list);
+	/* create a named pipe to communicate with the console thread */
+	sprintf(name, "\\\\.\\pipe\\winansi%lu", GetCurrentProcessId());
+	hwrite = CreateNamedPipe(name, PIPE_ACCESS_OUTBOUND,
+		PIPE_TYPE_BYTE | PIPE_WAIT, 1, BUFFER_SIZE, 0, 0, NULL);
+	if (hwrite == INVALID_HANDLE_VALUE)
+		die_lasterr("CreateNamedPipe failed");
+
+	hread = CreateFile(name, GENERIC_READ, 0, NULL, OPEN_EXISTING, 0, NULL);
+	if (hread == INVALID_HANDLE_VALUE)
+		die_lasterr("CreateFile for named pipe failed");
+
+	/* start console spool thread on the pipe's read end */
+	hthread = CreateThread(NULL, 0, console_thread, NULL, 0, NULL);
+	if (hthread == INVALID_HANDLE_VALUE)
+		die_lasterr("CreateThread(console_thread) failed");
+
+	/* schedule cleanup routine */
+	if (atexit(winansi_exit))
+		die_errno("atexit(winansi_exit) failed");
+
+	/* redirect stdout / stderr to the pipe */
+	if (con1)
+		hconsole1 = swap_osfhnd(1, duplicate_handle(hwrite));
+	if (con2)
+		hconsole2 = swap_osfhnd(2, duplicate_handle(hwrite));
+}
 
-	return rv;
+/*
+ * Returns the real console handle if stdout / stderr is a pipe redirecting
+ * to the console. Allows spawn / exec to pass the console to the next process.
+ */
+HANDLE winansi_get_osfhandle(int fd)
+{
+	HANDLE hnd = (HANDLE) _get_osfhandle(fd);
+	if ((fd == 1 || fd == 2) && isatty(fd)
+	    && GetFileType(hnd) == FILE_TYPE_PIPE)
+		return (fd == 1) ? hconsole1 : hconsole2;
+	return hnd;
 }
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compile_commands.json /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compile_commands.json
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compile_commands.json	2017-10-10 09:55:10.863178513 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compile_commands.json	2017-10-10 09:58:41.357870795 +0800
@@ -1,1825 +1,1843 @@
 [
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o credential-store.o -c -MF ./.depend/credential-store.o.d -MQ credential-store.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" credential-store.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-store.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o credential-store.o -c -MF ./.depend/credential-store.o.d -MQ credential-store.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" credential-store.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-store.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o abspath.o -c -MF ./.depend/abspath.o.d -MQ abspath.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" abspath.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/abspath.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o abspath.o -c -MF ./.depend/abspath.o.d -MQ abspath.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" abspath.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/abspath.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o advice.o -c -MF ./.depend/advice.o.d -MQ advice.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" advice.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/advice.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o advice.o -c -MF ./.depend/advice.o.d -MQ advice.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" advice.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/advice.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o alias.o -c -MF ./.depend/alias.o.d -MQ alias.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" alias.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/alias.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o alias.o -c -MF ./.depend/alias.o.d -MQ alias.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" alias.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/alias.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o alloc.o -c -MF ./.depend/alloc.o.d -MQ alloc.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" alloc.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/alloc.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o alloc.o -c -MF ./.depend/alloc.o.d -MQ alloc.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" alloc.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/alloc.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o archive.o -c -MF ./.depend/archive.o.d -MQ archive.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" archive.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o archive.o -c -MF ./.depend/archive.o.d -MQ archive.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" archive.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o archive-tar.o -c -MF ./.depend/archive-tar.o.d -MQ archive-tar.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" archive-tar.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive-tar.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o archive-tar.o -c -MF ./.depend/archive-tar.o.d -MQ archive-tar.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" archive-tar.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive-tar.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o archive-zip.o -c -MF ./.depend/archive-zip.o.d -MQ archive-zip.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" archive-zip.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive-zip.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o archive-zip.o -c -MF ./.depend/archive-zip.o.d -MQ archive-zip.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" archive-zip.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive-zip.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o argv-array.o -c -MF ./.depend/argv-array.o.d -MQ argv-array.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" argv-array.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/argv-array.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o argv-array.o -c -MF ./.depend/argv-array.o.d -MQ argv-array.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" argv-array.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/argv-array.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o attr.o -c -MF ./.depend/attr.o.d -MQ attr.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DETC_GITATTRIBUTES=\"/usr/local/etc/gitattributes\" attr.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/attr.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o attr.o -c -MF ./.depend/attr.o.d -MQ attr.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DETC_GITATTRIBUTES=\"/usr/local/etc/gitattributes\" attr.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/attr.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o base85.o -c -MF ./.depend/base85.o.d -MQ base85.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" base85.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/base85.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o base85.o -c -MF ./.depend/base85.o.d -MQ base85.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" base85.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/base85.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o bisect.o -c -MF ./.depend/bisect.o.d -MQ bisect.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" bisect.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bisect.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o bisect.o -c -MF ./.depend/bisect.o.d -MQ bisect.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" bisect.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bisect.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o blob.o -c -MF ./.depend/blob.o.d -MQ blob.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" blob.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/blob.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o blob.o -c -MF ./.depend/blob.o.d -MQ blob.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" blob.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/blob.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o branch.o -c -MF ./.depend/branch.o.d -MQ branch.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" branch.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/branch.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o branch.o -c -MF ./.depend/branch.o.d -MQ branch.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" branch.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/branch.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o bulk-checkin.o -c -MF ./.depend/bulk-checkin.o.d -MQ bulk-checkin.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" bulk-checkin.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bulk-checkin.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o bulk-checkin.o -c -MF ./.depend/bulk-checkin.o.d -MQ bulk-checkin.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" bulk-checkin.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bulk-checkin.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o bundle.o -c -MF ./.depend/bundle.o.d -MQ bundle.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" bundle.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bundle.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o bundle.o -c -MF ./.depend/bundle.o.d -MQ bundle.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" bundle.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bundle.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o cache-tree.o -c -MF ./.depend/cache-tree.o.d -MQ cache-tree.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" cache-tree.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/cache-tree.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o cache-tree.o -c -MF ./.depend/cache-tree.o.d -MQ cache-tree.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" cache-tree.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/cache-tree.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o color.o -c -MF ./.depend/color.o.d -MQ color.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" color.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/color.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o color.o -c -MF ./.depend/color.o.d -MQ color.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" color.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/color.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o column.o -c -MF ./.depend/column.o.d -MQ column.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" column.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/column.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o column.o -c -MF ./.depend/column.o.d -MQ column.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" column.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/column.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o combine-diff.o -c -MF ./.depend/combine-diff.o.d -MQ combine-diff.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" combine-diff.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/combine-diff.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o combine-diff.o -c -MF ./.depend/combine-diff.o.d -MQ combine-diff.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" combine-diff.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/combine-diff.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o commit.o -c -MF ./.depend/commit.o.d -MQ commit.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" commit.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/commit.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o commit.o -c -MF ./.depend/commit.o.d -MQ commit.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" commit.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/commit.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o compat/obstack.o -c -MF compat/.depend/obstack.o.d -MQ compat/obstack.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" compat/obstack.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/obstack.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o compat/obstack.o -c -MF compat/.depend/obstack.o.d -MQ compat/obstack.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" compat/obstack.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/obstack.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o compat/terminal.o -c -MF compat/.depend/terminal.o.d -MQ compat/terminal.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" compat/terminal.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/terminal.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o compat/terminal.o -c -MF compat/.depend/terminal.o.d -MQ compat/terminal.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" compat/terminal.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/terminal.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o config.o -c -MF ./.depend/config.o.d -MQ config.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DETC_GITCONFIG=\"/usr/local/etc/gitconfig\" config.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/config.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o config.o -c -MF ./.depend/config.o.d -MQ config.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DETC_GITCONFIG=\"/usr/local/etc/gitconfig\" config.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/config.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o connect.o -c -MF ./.depend/connect.o.d -MQ connect.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" connect.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/connect.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o connect.o -c -MF ./.depend/connect.o.d -MQ connect.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" connect.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/connect.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o connected.o -c -MF ./.depend/connected.o.d -MQ connected.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" connected.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/connected.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o connected.o -c -MF ./.depend/connected.o.d -MQ connected.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" connected.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/connected.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o convert.o -c -MF ./.depend/convert.o.d -MQ convert.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" convert.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/convert.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o convert.o -c -MF ./.depend/convert.o.d -MQ convert.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" convert.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/convert.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o copy.o -c -MF ./.depend/copy.o.d -MQ copy.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" copy.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/copy.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o copy.o -c -MF ./.depend/copy.o.d -MQ copy.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" copy.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/copy.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o credential.o -c -MF ./.depend/credential.o.d -MQ credential.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" credential.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o credential.o -c -MF ./.depend/credential.o.d -MQ credential.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" credential.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o csum-file.o -c -MF ./.depend/csum-file.o.d -MQ csum-file.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" csum-file.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/csum-file.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o csum-file.o -c -MF ./.depend/csum-file.o.d -MQ csum-file.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" csum-file.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/csum-file.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o ctype.o -c -MF ./.depend/ctype.o.d -MQ ctype.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" ctype.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ctype.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o ctype.o -c -MF ./.depend/ctype.o.d -MQ ctype.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" ctype.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ctype.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o date.o -c -MF ./.depend/date.o.d -MQ date.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" date.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/date.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o date.o -c -MF ./.depend/date.o.d -MQ date.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" date.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/date.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o decorate.o -c -MF ./.depend/decorate.o.d -MQ decorate.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" decorate.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/decorate.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o decorate.o -c -MF ./.depend/decorate.o.d -MQ decorate.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" decorate.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/decorate.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o diffcore-break.o -c -MF ./.depend/diffcore-break.o.d -MQ diffcore-break.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" diffcore-break.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-break.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o diffcore-break.o -c -MF ./.depend/diffcore-break.o.d -MQ diffcore-break.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" diffcore-break.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-break.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o diffcore-delta.o -c -MF ./.depend/diffcore-delta.o.d -MQ diffcore-delta.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" diffcore-delta.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-delta.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o diffcore-delta.o -c -MF ./.depend/diffcore-delta.o.d -MQ diffcore-delta.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" diffcore-delta.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-delta.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o diffcore-order.o -c -MF ./.depend/diffcore-order.o.d -MQ diffcore-order.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" diffcore-order.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-order.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o diffcore-order.o -c -MF ./.depend/diffcore-order.o.d -MQ diffcore-order.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" diffcore-order.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-order.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o diffcore-pickaxe.o -c -MF ./.depend/diffcore-pickaxe.o.d -MQ diffcore-pickaxe.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" diffcore-pickaxe.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-pickaxe.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o diffcore-pickaxe.o -c -MF ./.depend/diffcore-pickaxe.o.d -MQ diffcore-pickaxe.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" diffcore-pickaxe.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-pickaxe.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o diffcore-rename.o -c -MF ./.depend/diffcore-rename.o.d -MQ diffcore-rename.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" diffcore-rename.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-rename.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o diffcore-rename.o -c -MF ./.depend/diffcore-rename.o.d -MQ diffcore-rename.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" diffcore-rename.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-rename.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o diff-delta.o -c -MF ./.depend/diff-delta.o.d -MQ diff-delta.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" diff-delta.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-delta.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o diff-delta.o -c -MF ./.depend/diff-delta.o.d -MQ diff-delta.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" diff-delta.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-delta.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o diff-lib.o -c -MF ./.depend/diff-lib.o.d -MQ diff-lib.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" diff-lib.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-lib.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o diff-lib.o -c -MF ./.depend/diff-lib.o.d -MQ diff-lib.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" diff-lib.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-lib.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o diff-no-index.o -c -MF ./.depend/diff-no-index.o.d -MQ diff-no-index.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" diff-no-index.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-no-index.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o diff-no-index.o -c -MF ./.depend/diff-no-index.o.d -MQ diff-no-index.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" diff-no-index.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-no-index.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o diff.o -c -MF ./.depend/diff.o.d -MQ diff.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" diff.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o diff.o -c -MF ./.depend/diff.o.d -MQ diff.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" diff.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o dir.o -c -MF ./.depend/dir.o.d -MQ dir.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" dir.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/dir.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o dir.o -c -MF ./.depend/dir.o.d -MQ dir.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" dir.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/dir.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o editor.o -c -MF ./.depend/editor.o.d -MQ editor.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" editor.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/editor.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o editor.o -c -MF ./.depend/editor.o.d -MQ editor.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" editor.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/editor.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o entry.o -c -MF ./.depend/entry.o.d -MQ entry.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" entry.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/entry.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o entry.o -c -MF ./.depend/entry.o.d -MQ entry.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" entry.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/entry.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o environment.o -c -MF ./.depend/environment.o.d -MQ environment.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" environment.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/environment.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o environment.o -c -MF ./.depend/environment.o.d -MQ environment.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" environment.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/environment.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o ewah/bitmap.o -c -MF ewah/.depend/bitmap.o.d -MQ ewah/bitmap.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" ewah/bitmap.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/bitmap.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o ewah/bitmap.o -c -MF ewah/.depend/bitmap.o.d -MQ ewah/bitmap.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" ewah/bitmap.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/bitmap.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o ewah/ewah_bitmap.o -c -MF ewah/.depend/ewah_bitmap.o.d -MQ ewah/ewah_bitmap.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" ewah/ewah_bitmap.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_bitmap.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o ewah/ewah_bitmap.o -c -MF ewah/.depend/ewah_bitmap.o.d -MQ ewah/ewah_bitmap.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" ewah/ewah_bitmap.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_bitmap.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o ewah/ewah_io.o -c -MF ewah/.depend/ewah_io.o.d -MQ ewah/ewah_io.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" ewah/ewah_io.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_io.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o ewah/ewah_io.o -c -MF ewah/.depend/ewah_io.o.d -MQ ewah/ewah_io.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" ewah/ewah_io.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_io.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o ewah/ewah_rlw.o -c -MF ewah/.depend/ewah_rlw.o.d -MQ ewah/ewah_rlw.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" ewah/ewah_rlw.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_rlw.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o ewah/ewah_rlw.o -c -MF ewah/.depend/ewah_rlw.o.d -MQ ewah/ewah_rlw.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" ewah/ewah_rlw.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_rlw.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o exec_cmd.o -c -MF ./.depend/exec_cmd.o.d -MQ exec_cmd.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_EXEC_PATH=\"/usr/local/libexec/git-core\" -DBINDIR=\"bin\" -DPREFIX=\"/usr/local\" exec_cmd.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/exec_cmd.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o exec_cmd.o -c -MF ./.depend/exec_cmd.o.d -MQ exec_cmd.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_EXEC_PATH=\"/usr/local/libexec/git-core\" -DBINDIR=\"bin\" -DPREFIX=\"/usr/local\" exec_cmd.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/exec_cmd.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o fetch-pack.o -c -MF ./.depend/fetch-pack.o.d -MQ fetch-pack.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" fetch-pack.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fetch-pack.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o fetch-pack.o -c -MF ./.depend/fetch-pack.o.d -MQ fetch-pack.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" fetch-pack.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fetch-pack.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o fsck.o -c -MF ./.depend/fsck.o.d -MQ fsck.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" fsck.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fsck.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o fsck.o -c -MF ./.depend/fsck.o.d -MQ fsck.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" fsck.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fsck.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o gettext.o -c -MF ./.depend/gettext.o.d -MQ gettext.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_LOCALE_PATH=\"/usr/local/share/locale\" gettext.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gettext.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o gettext.o -c -MF ./.depend/gettext.o.d -MQ gettext.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_LOCALE_PATH=\"/usr/local/share/locale\" gettext.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gettext.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o gpg-interface.o -c -MF ./.depend/gpg-interface.o.d -MQ gpg-interface.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" gpg-interface.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gpg-interface.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o gpg-interface.o -c -MF ./.depend/gpg-interface.o.d -MQ gpg-interface.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" gpg-interface.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gpg-interface.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o graph.o -c -MF ./.depend/graph.o.d -MQ graph.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" graph.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/graph.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o graph.o -c -MF ./.depend/graph.o.d -MQ graph.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" graph.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/graph.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o grep.o -c -MF ./.depend/grep.o.d -MQ grep.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" grep.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/grep.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o grep.o -c -MF ./.depend/grep.o.d -MQ grep.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" grep.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/grep.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o hashmap.o -c -MF ./.depend/hashmap.o.d -MQ hashmap.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" hashmap.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/hashmap.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o hashmap.o -c -MF ./.depend/hashmap.o.d -MQ hashmap.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" hashmap.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/hashmap.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o help.o -c -MF ./.depend/help.o.d -MQ help.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" help.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/help.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o help.o -c -MF ./.depend/help.o.d -MQ help.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" help.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/help.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o hex.o -c -MF ./.depend/hex.o.d -MQ hex.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" hex.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/hex.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o hex.o -c -MF ./.depend/hex.o.d -MQ hex.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" hex.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/hex.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o ident.o -c -MF ./.depend/ident.o.d -MQ ident.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" ident.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ident.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o ident.o -c -MF ./.depend/ident.o.d -MQ ident.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" ident.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ident.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o kwset.o -c -MF ./.depend/kwset.o.d -MQ kwset.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" kwset.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/kwset.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o kwset.o -c -MF ./.depend/kwset.o.d -MQ kwset.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" kwset.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/kwset.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o levenshtein.o -c -MF ./.depend/levenshtein.o.d -MQ levenshtein.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" levenshtein.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/levenshtein.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o levenshtein.o -c -MF ./.depend/levenshtein.o.d -MQ levenshtein.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" levenshtein.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/levenshtein.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o line-log.o -c -MF ./.depend/line-log.o.d -MQ line-log.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" line-log.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/line-log.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o line-log.o -c -MF ./.depend/line-log.o.d -MQ line-log.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" line-log.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/line-log.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o line-range.o -c -MF ./.depend/line-range.o.d -MQ line-range.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" line-range.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/line-range.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o line-range.o -c -MF ./.depend/line-range.o.d -MQ line-range.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" line-range.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/line-range.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o list-objects.o -c -MF ./.depend/list-objects.o.d -MQ list-objects.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" list-objects.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/list-objects.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o list-objects.o -c -MF ./.depend/list-objects.o.d -MQ list-objects.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" list-objects.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/list-objects.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o ll-merge.o -c -MF ./.depend/ll-merge.o.d -MQ ll-merge.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" ll-merge.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ll-merge.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o ll-merge.o -c -MF ./.depend/ll-merge.o.d -MQ ll-merge.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" ll-merge.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ll-merge.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o lockfile.o -c -MF ./.depend/lockfile.o.d -MQ lockfile.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" lockfile.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/lockfile.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o lockfile.o -c -MF ./.depend/lockfile.o.d -MQ lockfile.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" lockfile.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/lockfile.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o log-tree.o -c -MF ./.depend/log-tree.o.d -MQ log-tree.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" log-tree.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/log-tree.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o log-tree.o -c -MF ./.depend/log-tree.o.d -MQ log-tree.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" log-tree.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/log-tree.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o mailmap.o -c -MF ./.depend/mailmap.o.d -MQ mailmap.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" mailmap.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/mailmap.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o mailmap.o -c -MF ./.depend/mailmap.o.d -MQ mailmap.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" mailmap.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/mailmap.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o match-trees.o -c -MF ./.depend/match-trees.o.d -MQ match-trees.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" match-trees.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/match-trees.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o match-trees.o -c -MF ./.depend/match-trees.o.d -MQ match-trees.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" match-trees.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/match-trees.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o merge.o -c -MF ./.depend/merge.o.d -MQ merge.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" merge.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o merge.o -c -MF ./.depend/merge.o.d -MQ merge.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" merge.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o merge-blobs.o -c -MF ./.depend/merge-blobs.o.d -MQ merge-blobs.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" merge-blobs.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge-blobs.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o merge-blobs.o -c -MF ./.depend/merge-blobs.o.d -MQ merge-blobs.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" merge-blobs.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge-blobs.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o merge-recursive.o -c -MF ./.depend/merge-recursive.o.d -MQ merge-recursive.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" merge-recursive.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge-recursive.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o merge-recursive.o -c -MF ./.depend/merge-recursive.o.d -MQ merge-recursive.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" merge-recursive.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge-recursive.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o mergesort.o -c -MF ./.depend/mergesort.o.d -MQ mergesort.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" mergesort.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/mergesort.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o mergesort.o -c -MF ./.depend/mergesort.o.d -MQ mergesort.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" mergesort.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/mergesort.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o name-hash.o -c -MF ./.depend/name-hash.o.d -MQ name-hash.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" name-hash.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/name-hash.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o name-hash.o -c -MF ./.depend/name-hash.o.d -MQ name-hash.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" name-hash.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/name-hash.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o notes.o -c -MF ./.depend/notes.o.d -MQ notes.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" notes.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o notes.o -c -MF ./.depend/notes.o.d -MQ notes.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" notes.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o notes-cache.o -c -MF ./.depend/notes-cache.o.d -MQ notes-cache.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" notes-cache.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-cache.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o notes-cache.o -c -MF ./.depend/notes-cache.o.d -MQ notes-cache.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" notes-cache.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-cache.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o notes-merge.o -c -MF ./.depend/notes-merge.o.d -MQ notes-merge.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" notes-merge.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-merge.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o notes-merge.o -c -MF ./.depend/notes-merge.o.d -MQ notes-merge.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" notes-merge.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-merge.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o notes-utils.o -c -MF ./.depend/notes-utils.o.d -MQ notes-utils.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" notes-utils.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-utils.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o notes-utils.o -c -MF ./.depend/notes-utils.o.d -MQ notes-utils.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" notes-utils.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-utils.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o object.o -c -MF ./.depend/object.o.d -MQ object.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" object.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/object.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o object.o -c -MF ./.depend/object.o.d -MQ object.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" object.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/object.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o pack-bitmap.o -c -MF ./.depend/pack-bitmap.o.d -MQ pack-bitmap.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pack-bitmap.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-bitmap.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o pack-bitmap.o -c -MF ./.depend/pack-bitmap.o.d -MQ pack-bitmap.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pack-bitmap.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-bitmap.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o pack-bitmap-write.o -c -MF ./.depend/pack-bitmap-write.o.d -MQ pack-bitmap-write.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pack-bitmap-write.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-bitmap-write.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o pack-bitmap-write.o -c -MF ./.depend/pack-bitmap-write.o.d -MQ pack-bitmap-write.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pack-bitmap-write.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-bitmap-write.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o pack-check.o -c -MF ./.depend/pack-check.o.d -MQ pack-check.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pack-check.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-check.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o pack-check.o -c -MF ./.depend/pack-check.o.d -MQ pack-check.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pack-check.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-check.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o pack-objects.o -c -MF ./.depend/pack-objects.o.d -MQ pack-objects.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pack-objects.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-objects.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o pack-objects.o -c -MF ./.depend/pack-objects.o.d -MQ pack-objects.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pack-objects.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-objects.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o pack-revindex.o -c -MF ./.depend/pack-revindex.o.d -MQ pack-revindex.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pack-revindex.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-revindex.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o pack-revindex.o -c -MF ./.depend/pack-revindex.o.d -MQ pack-revindex.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pack-revindex.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-revindex.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o pack-write.o -c -MF ./.depend/pack-write.o.d -MQ pack-write.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pack-write.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-write.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o pack-write.o -c -MF ./.depend/pack-write.o.d -MQ pack-write.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pack-write.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-write.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o pager.o -c -MF ./.depend/pager.o.d -MQ pager.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pager.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pager.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o pager.o -c -MF ./.depend/pager.o.d -MQ pager.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pager.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pager.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o parse-options.o -c -MF ./.depend/parse-options.o.d -MQ parse-options.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" parse-options.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/parse-options.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o parse-options.o -c -MF ./.depend/parse-options.o.d -MQ parse-options.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" parse-options.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/parse-options.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o parse-options-cb.o -c -MF ./.depend/parse-options-cb.o.d -MQ parse-options-cb.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" parse-options-cb.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/parse-options-cb.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o parse-options-cb.o -c -MF ./.depend/parse-options-cb.o.d -MQ parse-options-cb.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" parse-options-cb.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/parse-options-cb.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o patch-delta.o -c -MF ./.depend/patch-delta.o.d -MQ patch-delta.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" patch-delta.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/patch-delta.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o patch-delta.o -c -MF ./.depend/patch-delta.o.d -MQ patch-delta.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" patch-delta.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/patch-delta.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o patch-ids.o -c -MF ./.depend/patch-ids.o.d -MQ patch-ids.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" patch-ids.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/patch-ids.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o patch-ids.o -c -MF ./.depend/patch-ids.o.d -MQ patch-ids.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" patch-ids.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/patch-ids.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o path.o -c -MF ./.depend/path.o.d -MQ path.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" path.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/path.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o path.o -c -MF ./.depend/path.o.d -MQ path.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" path.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/path.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o pathspec.o -c -MF ./.depend/pathspec.o.d -MQ pathspec.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pathspec.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pathspec.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o pathspec.o -c -MF ./.depend/pathspec.o.d -MQ pathspec.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pathspec.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pathspec.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o pkt-line.o -c -MF ./.depend/pkt-line.o.d -MQ pkt-line.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pkt-line.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pkt-line.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o pkt-line.o -c -MF ./.depend/pkt-line.o.d -MQ pkt-line.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pkt-line.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pkt-line.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o preload-index.o -c -MF ./.depend/preload-index.o.d -MQ preload-index.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" preload-index.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/preload-index.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o preload-index.o -c -MF ./.depend/preload-index.o.d -MQ preload-index.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" preload-index.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/preload-index.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o pretty.o -c -MF ./.depend/pretty.o.d -MQ pretty.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pretty.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pretty.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o pretty.o -c -MF ./.depend/pretty.o.d -MQ pretty.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" pretty.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pretty.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o prio-queue.o -c -MF ./.depend/prio-queue.o.d -MQ prio-queue.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" prio-queue.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/prio-queue.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o prio-queue.o -c -MF ./.depend/prio-queue.o.d -MQ prio-queue.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" prio-queue.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/prio-queue.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o progress.o -c -MF ./.depend/progress.o.d -MQ progress.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" progress.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/progress.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o progress.o -c -MF ./.depend/progress.o.d -MQ progress.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" progress.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/progress.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o prompt.o -c -MF ./.depend/prompt.o.d -MQ prompt.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" prompt.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/prompt.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o prompt.o -c -MF ./.depend/prompt.o.d -MQ prompt.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" prompt.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/prompt.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o quote.o -c -MF ./.depend/quote.o.d -MQ quote.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" quote.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/quote.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o quote.o -c -MF ./.depend/quote.o.d -MQ quote.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" quote.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/quote.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o reachable.o -c -MF ./.depend/reachable.o.d -MQ reachable.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" reachable.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/reachable.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o reachable.o -c -MF ./.depend/reachable.o.d -MQ reachable.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" reachable.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/reachable.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o read-cache.o -c -MF ./.depend/read-cache.o.d -MQ read-cache.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" read-cache.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/read-cache.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o read-cache.o -c -MF ./.depend/read-cache.o.d -MQ read-cache.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" read-cache.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/read-cache.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o reflog-walk.o -c -MF ./.depend/reflog-walk.o.d -MQ reflog-walk.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" reflog-walk.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/reflog-walk.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o reflog-walk.o -c -MF ./.depend/reflog-walk.o.d -MQ reflog-walk.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" reflog-walk.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/reflog-walk.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o refs.o -c -MF ./.depend/refs.o.d -MQ refs.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" refs.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/refs.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o refs.o -c -MF ./.depend/refs.o.d -MQ refs.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" refs.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/refs.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o remote.o -c -MF ./.depend/remote.o.d -MQ remote.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" remote.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o remote.o -c -MF ./.depend/remote.o.d -MQ remote.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" remote.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o replace_object.o -c -MF ./.depend/replace_object.o.d -MQ replace_object.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" replace_object.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/replace_object.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o replace_object.o -c -MF ./.depend/replace_object.o.d -MQ replace_object.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" replace_object.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/replace_object.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o rerere.o -c -MF ./.depend/rerere.o.d -MQ rerere.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" rerere.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/rerere.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o rerere.o -c -MF ./.depend/rerere.o.d -MQ rerere.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" rerere.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/rerere.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o resolve-undo.o -c -MF ./.depend/resolve-undo.o.d -MQ resolve-undo.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" resolve-undo.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/resolve-undo.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o resolve-undo.o -c -MF ./.depend/resolve-undo.o.d -MQ resolve-undo.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" resolve-undo.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/resolve-undo.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o revision.o -c -MF ./.depend/revision.o.d -MQ revision.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" revision.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/revision.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o revision.o -c -MF ./.depend/revision.o.d -MQ revision.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" revision.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/revision.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o run-command.o -c -MF ./.depend/run-command.o.d -MQ run-command.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" run-command.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/run-command.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o run-command.o -c -MF ./.depend/run-command.o.d -MQ run-command.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" run-command.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/run-command.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o send-pack.o -c -MF ./.depend/send-pack.o.d -MQ send-pack.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" send-pack.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/send-pack.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o send-pack.o -c -MF ./.depend/send-pack.o.d -MQ send-pack.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" send-pack.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/send-pack.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o sequencer.o -c -MF ./.depend/sequencer.o.d -MQ sequencer.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" sequencer.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sequencer.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o sequencer.o -c -MF ./.depend/sequencer.o.d -MQ sequencer.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" sequencer.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sequencer.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o server-info.o -c -MF ./.depend/server-info.o.d -MQ server-info.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" server-info.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/server-info.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o server-info.o -c -MF ./.depend/server-info.o.d -MQ server-info.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" server-info.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/server-info.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o setup.o -c -MF ./.depend/setup.o.d -MQ setup.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" setup.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/setup.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o setup.o -c -MF ./.depend/setup.o.d -MQ setup.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" setup.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/setup.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o sha1-array.o -c -MF ./.depend/sha1-array.o.d -MQ sha1-array.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" sha1-array.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1-array.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o sha1-array.o -c -MF ./.depend/sha1-array.o.d -MQ sha1-array.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" sha1-array.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1-array.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o sha1-lookup.o -c -MF ./.depend/sha1-lookup.o.d -MQ sha1-lookup.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" sha1-lookup.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1-lookup.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o sha1-lookup.o -c -MF ./.depend/sha1-lookup.o.d -MQ sha1-lookup.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" sha1-lookup.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1-lookup.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o sha1_file.o -c -MF ./.depend/sha1_file.o.d -MQ sha1_file.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" sha1_file.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1_file.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o sha1_file.o -c -MF ./.depend/sha1_file.o.d -MQ sha1_file.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" sha1_file.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1_file.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o sha1_name.o -c -MF ./.depend/sha1_name.o.d -MQ sha1_name.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" sha1_name.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1_name.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o sha1_name.o -c -MF ./.depend/sha1_name.o.d -MQ sha1_name.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" sha1_name.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1_name.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o shallow.o -c -MF ./.depend/shallow.o.d -MQ shallow.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" shallow.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/shallow.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o shallow.o -c -MF ./.depend/shallow.o.d -MQ shallow.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" shallow.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/shallow.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o sideband.o -c -MF ./.depend/sideband.o.d -MQ sideband.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" sideband.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sideband.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o sideband.o -c -MF ./.depend/sideband.o.d -MQ sideband.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" sideband.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sideband.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o sigchain.o -c -MF ./.depend/sigchain.o.d -MQ sigchain.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" sigchain.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sigchain.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o sigchain.o -c -MF ./.depend/sigchain.o.d -MQ sigchain.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" sigchain.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sigchain.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o strbuf.o -c -MF ./.depend/strbuf.o.d -MQ strbuf.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" strbuf.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/strbuf.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o split-index.o -c -MF ./.depend/split-index.o.d -MQ split-index.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" split-index.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/split-index.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o streaming.o -c -MF ./.depend/streaming.o.d -MQ streaming.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" streaming.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/streaming.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o strbuf.o -c -MF ./.depend/strbuf.o.d -MQ strbuf.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" strbuf.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/strbuf.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o string-list.o -c -MF ./.depend/string-list.o.d -MQ string-list.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" string-list.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/string-list.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o streaming.o -c -MF ./.depend/streaming.o.d -MQ streaming.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" streaming.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/streaming.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o submodule.o -c -MF ./.depend/submodule.o.d -MQ submodule.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" submodule.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/submodule.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o string-list.o -c -MF ./.depend/string-list.o.d -MQ string-list.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" string-list.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/string-list.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o symlinks.o -c -MF ./.depend/symlinks.o.d -MQ symlinks.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" symlinks.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/symlinks.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o submodule.o -c -MF ./.depend/submodule.o.d -MQ submodule.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" submodule.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/submodule.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o tag.o -c -MF ./.depend/tag.o.d -MQ tag.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" tag.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tag.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o symlinks.o -c -MF ./.depend/symlinks.o.d -MQ symlinks.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" symlinks.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/symlinks.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o trace.o -c -MF ./.depend/trace.o.d -MQ trace.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" trace.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/trace.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o tag.o -c -MF ./.depend/tag.o.d -MQ tag.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" tag.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tag.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o transport.o -c -MF ./.depend/transport.o.d -MQ transport.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" transport.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/transport.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o trace.o -c -MF ./.depend/trace.o.d -MQ trace.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" trace.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/trace.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o transport-helper.o -c -MF ./.depend/transport-helper.o.d -MQ transport-helper.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" transport-helper.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/transport-helper.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o transport.o -c -MF ./.depend/transport.o.d -MQ transport.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" transport.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/transport.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o tree-diff.o -c -MF ./.depend/tree-diff.o.d -MQ tree-diff.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" tree-diff.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree-diff.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o transport-helper.o -c -MF ./.depend/transport-helper.o.d -MQ transport-helper.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" transport-helper.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/transport-helper.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o tree.o -c -MF ./.depend/tree.o.d -MQ tree.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" tree.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o tree-diff.o -c -MF ./.depend/tree-diff.o.d -MQ tree-diff.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" tree-diff.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree-diff.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o tree-walk.o -c -MF ./.depend/tree-walk.o.d -MQ tree-walk.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" tree-walk.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree-walk.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o tree.o -c -MF ./.depend/tree.o.d -MQ tree.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" tree.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o unpack-trees.o -c -MF ./.depend/unpack-trees.o.d -MQ unpack-trees.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" unpack-trees.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/unpack-trees.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o tree-walk.o -c -MF ./.depend/tree-walk.o.d -MQ tree-walk.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" tree-walk.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree-walk.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o url.o -c -MF ./.depend/url.o.d -MQ url.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" url.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/url.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o unpack-trees.o -c -MF ./.depend/unpack-trees.o.d -MQ unpack-trees.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" unpack-trees.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/unpack-trees.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o urlmatch.o -c -MF ./.depend/urlmatch.o.d -MQ urlmatch.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" urlmatch.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/urlmatch.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o url.o -c -MF ./.depend/url.o.d -MQ url.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" url.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/url.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o usage.o -c -MF ./.depend/usage.o.d -MQ usage.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" usage.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/usage.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o urlmatch.o -c -MF ./.depend/urlmatch.o.d -MQ urlmatch.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" urlmatch.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/urlmatch.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o userdiff.o -c -MF ./.depend/userdiff.o.d -MQ userdiff.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" userdiff.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/userdiff.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o usage.o -c -MF ./.depend/usage.o.d -MQ usage.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" usage.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/usage.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o utf8.o -c -MF ./.depend/utf8.o.d -MQ utf8.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" utf8.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/utf8.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o userdiff.o -c -MF ./.depend/userdiff.o.d -MQ userdiff.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" userdiff.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/userdiff.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o varint.o -c -MF ./.depend/varint.o.d -MQ varint.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" varint.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/varint.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o utf8.o -c -MF ./.depend/utf8.o.d -MQ utf8.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" utf8.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/utf8.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o version.o -c -MF ./.depend/version.o.d -MQ version.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_VERSION=\"2.0.5\" -DGIT_USER_AGENT=\"git/2.0.5\" version.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/version.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o varint.o -c -MF ./.depend/varint.o.d -MQ varint.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" varint.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/varint.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o versioncmp.o -c -MF ./.depend/versioncmp.o.d -MQ versioncmp.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" versioncmp.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/versioncmp.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o version.o -c -MF ./.depend/version.o.d -MQ version.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_VERSION=\"2.1.0\" -DGIT_USER_AGENT=\"git/2.1.0\" version.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/version.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o walker.o -c -MF ./.depend/walker.o.d -MQ walker.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" walker.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/walker.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o versioncmp.o -c -MF ./.depend/versioncmp.o.d -MQ versioncmp.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" versioncmp.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/versioncmp.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o wildmatch.o -c -MF ./.depend/wildmatch.o.d -MQ wildmatch.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" wildmatch.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wildmatch.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o walker.o -c -MF ./.depend/walker.o.d -MQ walker.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" walker.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/walker.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o wrapper.o -c -MF ./.depend/wrapper.o.d -MQ wrapper.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" wrapper.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wrapper.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o wildmatch.o -c -MF ./.depend/wildmatch.o.d -MQ wildmatch.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" wildmatch.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wildmatch.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o write_or_die.o -c -MF ./.depend/write_or_die.o.d -MQ write_or_die.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" write_or_die.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/write_or_die.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o wrapper.o -c -MF ./.depend/wrapper.o.d -MQ wrapper.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" wrapper.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wrapper.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o ws.o -c -MF ./.depend/ws.o.d -MQ ws.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" ws.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ws.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o write_or_die.o -c -MF ./.depend/write_or_die.o.d -MQ write_or_die.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" write_or_die.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/write_or_die.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o wt-status.o -c -MF ./.depend/wt-status.o.d -MQ wt-status.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" wt-status.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wt-status.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o ws.o -c -MF ./.depend/ws.o.d -MQ ws.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" ws.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ws.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o xdiff-interface.o -c -MF ./.depend/xdiff-interface.o.d -MQ xdiff-interface.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" xdiff-interface.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff-interface.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o wt-status.o -c -MF ./.depend/wt-status.o.d -MQ wt-status.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" wt-status.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wt-status.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o zlib.o -c -MF ./.depend/zlib.o.d -MQ zlib.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" zlib.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/zlib.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o xdiff-interface.o -c -MF ./.depend/xdiff-interface.o.d -MQ xdiff-interface.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" xdiff-interface.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff-interface.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o unix-socket.o -c -MF ./.depend/unix-socket.o.d -MQ unix-socket.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" unix-socket.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/unix-socket.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o zlib.o -c -MF ./.depend/zlib.o.d -MQ zlib.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" zlib.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/zlib.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o block-sha1/sha1.o -c -MF block-sha1/.depend/sha1.o.d -MQ block-sha1/sha1.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" block-sha1/sha1.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/block-sha1/sha1.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o unix-socket.o -c -MF ./.depend/unix-socket.o.d -MQ unix-socket.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" unix-socket.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/unix-socket.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o thread-utils.o -c -MF ./.depend/thread-utils.o.d -MQ thread-utils.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" thread-utils.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/thread-utils.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o block-sha1/sha1.o -c -MF block-sha1/.depend/sha1.o.d -MQ block-sha1/sha1.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" block-sha1/sha1.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/block-sha1/sha1.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o compat/strlcpy.o -c -MF compat/.depend/strlcpy.o.d -MQ compat/strlcpy.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" compat/strlcpy.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/strlcpy.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o thread-utils.o -c -MF ./.depend/thread-utils.o.d -MQ thread-utils.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" thread-utils.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/thread-utils.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o xdiff/xdiffi.o -c -MF xdiff/.depend/xdiffi.o.d -MQ xdiff/xdiffi.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" xdiff/xdiffi.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xdiffi.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o compat/strlcpy.o -c -MF compat/.depend/strlcpy.o.d -MQ compat/strlcpy.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" compat/strlcpy.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/strlcpy.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o xdiff/xprepare.o -c -MF xdiff/.depend/xprepare.o.d -MQ xdiff/xprepare.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" xdiff/xprepare.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xprepare.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o xdiff/xdiffi.o -c -MF xdiff/.depend/xdiffi.o.d -MQ xdiff/xdiffi.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" xdiff/xdiffi.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xdiffi.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o xdiff/xutils.o -c -MF xdiff/.depend/xutils.o.d -MQ xdiff/xutils.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" xdiff/xutils.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xutils.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o xdiff/xprepare.o -c -MF xdiff/.depend/xprepare.o.d -MQ xdiff/xprepare.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" xdiff/xprepare.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xprepare.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o xdiff/xemit.o -c -MF xdiff/.depend/xemit.o.d -MQ xdiff/xemit.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" xdiff/xemit.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xemit.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o xdiff/xutils.o -c -MF xdiff/.depend/xutils.o.d -MQ xdiff/xutils.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" xdiff/xutils.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xutils.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o xdiff/xmerge.o -c -MF xdiff/.depend/xmerge.o.d -MQ xdiff/xmerge.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" xdiff/xmerge.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xmerge.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o xdiff/xemit.o -c -MF xdiff/.depend/xemit.o.d -MQ xdiff/xemit.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" xdiff/xemit.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xemit.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o xdiff/xpatience.o -c -MF xdiff/.depend/xpatience.o.d -MQ xdiff/xpatience.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" xdiff/xpatience.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xpatience.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o xdiff/xmerge.o -c -MF xdiff/.depend/xmerge.o.d -MQ xdiff/xmerge.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" xdiff/xmerge.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xmerge.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o xdiff/xhistogram.o -c -MF xdiff/.depend/xhistogram.o.d -MQ xdiff/xhistogram.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" xdiff/xhistogram.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xhistogram.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o xdiff/xpatience.o -c -MF xdiff/.depend/xpatience.o.d -MQ xdiff/xpatience.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" xdiff/xpatience.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xpatience.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o daemon.o -c -MF ./.depend/daemon.o.d -MQ daemon.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" daemon.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/daemon.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o xdiff/xhistogram.o -c -MF xdiff/.depend/xhistogram.o.d -MQ xdiff/xhistogram.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" xdiff/xhistogram.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xhistogram.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o fast-import.o -c -MF ./.depend/fast-import.o.d -MQ fast-import.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" fast-import.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fast-import.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o daemon.o -c -MF ./.depend/daemon.o.d -MQ daemon.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" daemon.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/daemon.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o http-backend.o -c -MF ./.depend/http-backend.o.d -MQ http-backend.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" http-backend.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/http-backend.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o fast-import.o -c -MF ./.depend/fast-import.o.d -MQ fast-import.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" fast-import.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fast-import.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o imap-send.o -c -MF ./.depend/imap-send.o.d -MQ imap-send.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" imap-send.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/imap-send.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o http-backend.o -c -MF ./.depend/http-backend.o.d -MQ http-backend.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" http-backend.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/http-backend.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o sh-i18n--envsubst.o -c -MF ./.depend/sh-i18n--envsubst.o.d -MQ sh-i18n--envsubst.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" sh-i18n--envsubst.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sh-i18n--envsubst.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o imap-send.o -c -MF ./.depend/imap-send.o.d -MQ imap-send.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" imap-send.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/imap-send.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o shell.o -c -MF ./.depend/shell.o.d -MQ shell.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" shell.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/shell.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o sh-i18n--envsubst.o -c -MF ./.depend/sh-i18n--envsubst.o.d -MQ sh-i18n--envsubst.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" sh-i18n--envsubst.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sh-i18n--envsubst.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o show-index.o -c -MF ./.depend/show-index.o.d -MQ show-index.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" show-index.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/show-index.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o shell.o -c -MF ./.depend/shell.o.d -MQ shell.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" shell.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/shell.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o upload-pack.o -c -MF ./.depend/upload-pack.o.d -MQ upload-pack.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" upload-pack.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/upload-pack.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o show-index.o -c -MF ./.depend/show-index.o.d -MQ show-index.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" show-index.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/show-index.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o remote-testsvn.o -c -MF ./.depend/remote-testsvn.o.d -MQ remote-testsvn.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" remote-testsvn.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote-testsvn.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o upload-pack.o -c -MF ./.depend/upload-pack.o.d -MQ upload-pack.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" upload-pack.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/upload-pack.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o vcs-svn/line_buffer.o -c -MF vcs-svn/.depend/line_buffer.o.d -MQ vcs-svn/line_buffer.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" vcs-svn/line_buffer.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/line_buffer.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o remote-testsvn.o -c -MF ./.depend/remote-testsvn.o.d -MQ remote-testsvn.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" remote-testsvn.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote-testsvn.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o vcs-svn/sliding_window.o -c -MF vcs-svn/.depend/sliding_window.o.d -MQ vcs-svn/sliding_window.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" vcs-svn/sliding_window.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/sliding_window.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o vcs-svn/line_buffer.o -c -MF vcs-svn/.depend/line_buffer.o.d -MQ vcs-svn/line_buffer.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" vcs-svn/line_buffer.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/line_buffer.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o vcs-svn/repo_tree.o -c -MF vcs-svn/.depend/repo_tree.o.d -MQ vcs-svn/repo_tree.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" vcs-svn/repo_tree.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/repo_tree.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o vcs-svn/sliding_window.o -c -MF vcs-svn/.depend/sliding_window.o.d -MQ vcs-svn/sliding_window.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" vcs-svn/sliding_window.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/sliding_window.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o vcs-svn/fast_export.o -c -MF vcs-svn/.depend/fast_export.o.d -MQ vcs-svn/fast_export.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" vcs-svn/fast_export.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/fast_export.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o vcs-svn/repo_tree.o -c -MF vcs-svn/.depend/repo_tree.o.d -MQ vcs-svn/repo_tree.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" vcs-svn/repo_tree.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/repo_tree.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o vcs-svn/svndiff.o -c -MF vcs-svn/.depend/svndiff.o.d -MQ vcs-svn/svndiff.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" vcs-svn/svndiff.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/svndiff.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o vcs-svn/fast_export.o -c -MF vcs-svn/.depend/fast_export.o.d -MQ vcs-svn/fast_export.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" vcs-svn/fast_export.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/fast_export.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o vcs-svn/svndump.o -c -MF vcs-svn/.depend/svndump.o.d -MQ vcs-svn/svndump.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" vcs-svn/svndump.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/svndump.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o vcs-svn/svndiff.o -c -MF vcs-svn/.depend/svndiff.o.d -MQ vcs-svn/svndiff.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" vcs-svn/svndiff.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/svndiff.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o credential-cache.o -c -MF ./.depend/credential-cache.o.d -MQ credential-cache.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" credential-cache.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-cache.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o vcs-svn/svndump.o -c -MF vcs-svn/.depend/svndump.o.d -MQ vcs-svn/svndump.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" vcs-svn/svndump.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/svndump.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o credential-cache--daemon.o -c -MF ./.depend/credential-cache--daemon.o.d -MQ credential-cache--daemon.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" credential-cache--daemon.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-cache--daemon.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o credential-cache.o -c -MF ./.depend/credential-cache.o.d -MQ credential-cache.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" credential-cache.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-cache.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o git.o -c -MF ./.depend/git.o.d -MQ git.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_HTML_PATH=\"share/doc/git\" -DGIT_MAN_PATH=\"share/man\" -DGIT_INFO_PATH=\"share/info\" git.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o credential-cache--daemon.o -c -MF ./.depend/credential-cache--daemon.o.d -MQ credential-cache--daemon.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" credential-cache--daemon.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-cache--daemon.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/add.o -c -MF builtin/.depend/add.o.d -MQ builtin/add.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/add.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/add.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o git.o -c -MF ./.depend/git.o.d -MQ git.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_HTML_PATH=\"share/doc/git\" -DGIT_MAN_PATH=\"share/man\" -DGIT_INFO_PATH=\"share/info\" git.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/annotate.o -c -MF builtin/.depend/annotate.o.d -MQ builtin/annotate.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/annotate.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/annotate.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/add.o -c -MF builtin/.depend/add.o.d -MQ builtin/add.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/add.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/add.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/apply.o -c -MF builtin/.depend/apply.o.d -MQ builtin/apply.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/apply.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/apply.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/annotate.o -c -MF builtin/.depend/annotate.o.d -MQ builtin/annotate.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/annotate.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/annotate.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/archive.o -c -MF builtin/.depend/archive.o.d -MQ builtin/archive.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/archive.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/archive.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/apply.o -c -MF builtin/.depend/apply.o.d -MQ builtin/apply.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/apply.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/apply.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/bisect--helper.o -c -MF builtin/.depend/bisect--helper.o.d -MQ builtin/bisect--helper.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/bisect--helper.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/bisect--helper.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/archive.o -c -MF builtin/.depend/archive.o.d -MQ builtin/archive.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/archive.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/archive.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/blame.o -c -MF builtin/.depend/blame.o.d -MQ builtin/blame.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/blame.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/blame.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/bisect--helper.o -c -MF builtin/.depend/bisect--helper.o.d -MQ builtin/bisect--helper.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/bisect--helper.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/bisect--helper.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/branch.o -c -MF builtin/.depend/branch.o.d -MQ builtin/branch.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/branch.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/branch.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/blame.o -c -MF builtin/.depend/blame.o.d -MQ builtin/blame.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/blame.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/blame.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/bundle.o -c -MF builtin/.depend/bundle.o.d -MQ builtin/bundle.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/bundle.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/bundle.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/branch.o -c -MF builtin/.depend/branch.o.d -MQ builtin/branch.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/branch.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/branch.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/cat-file.o -c -MF builtin/.depend/cat-file.o.d -MQ builtin/cat-file.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/cat-file.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/cat-file.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/bundle.o -c -MF builtin/.depend/bundle.o.d -MQ builtin/bundle.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/bundle.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/bundle.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/check-attr.o -c -MF builtin/.depend/check-attr.o.d -MQ builtin/check-attr.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/check-attr.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-attr.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/cat-file.o -c -MF builtin/.depend/cat-file.o.d -MQ builtin/cat-file.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/cat-file.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/cat-file.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/check-ignore.o -c -MF builtin/.depend/check-ignore.o.d -MQ builtin/check-ignore.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/check-ignore.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-ignore.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/check-attr.o -c -MF builtin/.depend/check-attr.o.d -MQ builtin/check-attr.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/check-attr.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-attr.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/check-mailmap.o -c -MF builtin/.depend/check-mailmap.o.d -MQ builtin/check-mailmap.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/check-mailmap.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-mailmap.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/check-ignore.o -c -MF builtin/.depend/check-ignore.o.d -MQ builtin/check-ignore.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/check-ignore.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-ignore.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/check-ref-format.o -c -MF builtin/.depend/check-ref-format.o.d -MQ builtin/check-ref-format.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/check-ref-format.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-ref-format.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/check-mailmap.o -c -MF builtin/.depend/check-mailmap.o.d -MQ builtin/check-mailmap.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/check-mailmap.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-mailmap.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/checkout-index.o -c -MF builtin/.depend/checkout-index.o.d -MQ builtin/checkout-index.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/checkout-index.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/checkout-index.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/check-ref-format.o -c -MF builtin/.depend/check-ref-format.o.d -MQ builtin/check-ref-format.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/check-ref-format.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-ref-format.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/checkout.o -c -MF builtin/.depend/checkout.o.d -MQ builtin/checkout.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/checkout.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/checkout.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/checkout-index.o -c -MF builtin/.depend/checkout-index.o.d -MQ builtin/checkout-index.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/checkout-index.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/checkout-index.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/clean.o -c -MF builtin/.depend/clean.o.d -MQ builtin/clean.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/clean.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/clean.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/checkout.o -c -MF builtin/.depend/checkout.o.d -MQ builtin/checkout.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/checkout.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/checkout.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/clone.o -c -MF builtin/.depend/clone.o.d -MQ builtin/clone.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/clone.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/clone.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/clean.o -c -MF builtin/.depend/clean.o.d -MQ builtin/clean.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/clean.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/clean.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/column.o -c -MF builtin/.depend/column.o.d -MQ builtin/column.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/column.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/column.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/clone.o -c -MF builtin/.depend/clone.o.d -MQ builtin/clone.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/clone.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/clone.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/commit-tree.o -c -MF builtin/.depend/commit-tree.o.d -MQ builtin/commit-tree.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/commit-tree.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/commit-tree.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/column.o -c -MF builtin/.depend/column.o.d -MQ builtin/column.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/column.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/column.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/commit.o -c -MF builtin/.depend/commit.o.d -MQ builtin/commit.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/commit.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/commit.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/commit-tree.o -c -MF builtin/.depend/commit-tree.o.d -MQ builtin/commit-tree.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/commit-tree.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/commit-tree.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/config.o -c -MF builtin/.depend/config.o.d -MQ builtin/config.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/config.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/config.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/commit.o -c -MF builtin/.depend/commit.o.d -MQ builtin/commit.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/commit.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/commit.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/count-objects.o -c -MF builtin/.depend/count-objects.o.d -MQ builtin/count-objects.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/count-objects.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/count-objects.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/config.o -c -MF builtin/.depend/config.o.d -MQ builtin/config.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/config.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/config.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/credential.o -c -MF builtin/.depend/credential.o.d -MQ builtin/credential.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/credential.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/credential.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/count-objects.o -c -MF builtin/.depend/count-objects.o.d -MQ builtin/count-objects.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/count-objects.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/count-objects.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/describe.o -c -MF builtin/.depend/describe.o.d -MQ builtin/describe.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/describe.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/describe.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/credential.o -c -MF builtin/.depend/credential.o.d -MQ builtin/credential.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/credential.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/credential.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/diff-files.o -c -MF builtin/.depend/diff-files.o.d -MQ builtin/diff-files.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/diff-files.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-files.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/describe.o -c -MF builtin/.depend/describe.o.d -MQ builtin/describe.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/describe.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/describe.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/diff-index.o -c -MF builtin/.depend/diff-index.o.d -MQ builtin/diff-index.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/diff-index.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-index.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/diff-files.o -c -MF builtin/.depend/diff-files.o.d -MQ builtin/diff-files.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/diff-files.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-files.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/diff-tree.o -c -MF builtin/.depend/diff-tree.o.d -MQ builtin/diff-tree.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/diff-tree.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-tree.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/diff-index.o -c -MF builtin/.depend/diff-index.o.d -MQ builtin/diff-index.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/diff-index.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-index.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/diff.o -c -MF builtin/.depend/diff.o.d -MQ builtin/diff.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/diff.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/diff-tree.o -c -MF builtin/.depend/diff-tree.o.d -MQ builtin/diff-tree.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/diff-tree.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-tree.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/fast-export.o -c -MF builtin/.depend/fast-export.o.d -MQ builtin/fast-export.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/fast-export.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fast-export.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/diff.o -c -MF builtin/.depend/diff.o.d -MQ builtin/diff.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/diff.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/fetch-pack.o -c -MF builtin/.depend/fetch-pack.o.d -MQ builtin/fetch-pack.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/fetch-pack.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fetch-pack.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/fast-export.o -c -MF builtin/.depend/fast-export.o.d -MQ builtin/fast-export.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/fast-export.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fast-export.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/fetch.o -c -MF builtin/.depend/fetch.o.d -MQ builtin/fetch.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/fetch.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fetch.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/fetch-pack.o -c -MF builtin/.depend/fetch-pack.o.d -MQ builtin/fetch-pack.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/fetch-pack.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fetch-pack.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/fmt-merge-msg.o -c -MF builtin/.depend/fmt-merge-msg.o.d -MQ builtin/fmt-merge-msg.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/fmt-merge-msg.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fmt-merge-msg.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/fetch.o -c -MF builtin/.depend/fetch.o.d -MQ builtin/fetch.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/fetch.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fetch.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/for-each-ref.o -c -MF builtin/.depend/for-each-ref.o.d -MQ builtin/for-each-ref.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/for-each-ref.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/for-each-ref.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/fmt-merge-msg.o -c -MF builtin/.depend/fmt-merge-msg.o.d -MQ builtin/fmt-merge-msg.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/fmt-merge-msg.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fmt-merge-msg.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/fsck.o -c -MF builtin/.depend/fsck.o.d -MQ builtin/fsck.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/fsck.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fsck.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/for-each-ref.o -c -MF builtin/.depend/for-each-ref.o.d -MQ builtin/for-each-ref.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/for-each-ref.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/for-each-ref.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/gc.o -c -MF builtin/.depend/gc.o.d -MQ builtin/gc.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/gc.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/gc.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/fsck.o -c -MF builtin/.depend/fsck.o.d -MQ builtin/fsck.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/fsck.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fsck.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/get-tar-commit-id.o -c -MF builtin/.depend/get-tar-commit-id.o.d -MQ builtin/get-tar-commit-id.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/get-tar-commit-id.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/get-tar-commit-id.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/gc.o -c -MF builtin/.depend/gc.o.d -MQ builtin/gc.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/gc.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/gc.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/grep.o -c -MF builtin/.depend/grep.o.d -MQ builtin/grep.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/grep.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/grep.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/get-tar-commit-id.o -c -MF builtin/.depend/get-tar-commit-id.o.d -MQ builtin/get-tar-commit-id.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/get-tar-commit-id.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/get-tar-commit-id.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/hash-object.o -c -MF builtin/.depend/hash-object.o.d -MQ builtin/hash-object.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/hash-object.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/hash-object.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/grep.o -c -MF builtin/.depend/grep.o.d -MQ builtin/grep.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/grep.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/grep.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/help.o -c -MF builtin/.depend/help.o.d -MQ builtin/help.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_HTML_PATH=\"share/doc/git\" -DGIT_MAN_PATH=\"share/man\" -DGIT_INFO_PATH=\"share/info\" builtin/help.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/help.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/hash-object.o -c -MF builtin/.depend/hash-object.o.d -MQ builtin/hash-object.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/hash-object.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/hash-object.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/index-pack.o -c -MF builtin/.depend/index-pack.o.d -MQ builtin/index-pack.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/index-pack.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/index-pack.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/help.o -c -MF builtin/.depend/help.o.d -MQ builtin/help.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DGIT_HTML_PATH=\"share/doc/git\" -DGIT_MAN_PATH=\"share/man\" -DGIT_INFO_PATH=\"share/info\" builtin/help.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/help.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/init-db.o -c -MF builtin/.depend/init-db.o.d -MQ builtin/init-db.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DDEFAULT_GIT_TEMPLATE_DIR=\"/usr/local/share/git-core/templates\" builtin/init-db.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/init-db.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/index-pack.o -c -MF builtin/.depend/index-pack.o.d -MQ builtin/index-pack.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/index-pack.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/index-pack.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/log.o -c -MF builtin/.depend/log.o.d -MQ builtin/log.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/log.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/log.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/init-db.o -c -MF builtin/.depend/init-db.o.d -MQ builtin/init-db.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" -DDEFAULT_GIT_TEMPLATE_DIR=\"/usr/local/share/git-core/templates\" builtin/init-db.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/init-db.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/ls-files.o -c -MF builtin/.depend/ls-files.o.d -MQ builtin/ls-files.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/ls-files.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-files.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/log.o -c -MF builtin/.depend/log.o.d -MQ builtin/log.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/log.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/log.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/ls-remote.o -c -MF builtin/.depend/ls-remote.o.d -MQ builtin/ls-remote.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/ls-remote.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-remote.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/ls-files.o -c -MF builtin/.depend/ls-files.o.d -MQ builtin/ls-files.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/ls-files.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-files.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/ls-tree.o -c -MF builtin/.depend/ls-tree.o.d -MQ builtin/ls-tree.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/ls-tree.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-tree.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/ls-remote.o -c -MF builtin/.depend/ls-remote.o.d -MQ builtin/ls-remote.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/ls-remote.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-remote.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/mailinfo.o -c -MF builtin/.depend/mailinfo.o.d -MQ builtin/mailinfo.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/mailinfo.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mailinfo.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/ls-tree.o -c -MF builtin/.depend/ls-tree.o.d -MQ builtin/ls-tree.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/ls-tree.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-tree.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/mailsplit.o -c -MF builtin/.depend/mailsplit.o.d -MQ builtin/mailsplit.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/mailsplit.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mailsplit.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/mailinfo.o -c -MF builtin/.depend/mailinfo.o.d -MQ builtin/mailinfo.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/mailinfo.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mailinfo.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/merge.o -c -MF builtin/.depend/merge.o.d -MQ builtin/merge.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/merge.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/mailsplit.o -c -MF builtin/.depend/mailsplit.o.d -MQ builtin/mailsplit.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/mailsplit.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mailsplit.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/merge-base.o -c -MF builtin/.depend/merge-base.o.d -MQ builtin/merge-base.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/merge-base.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-base.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/merge.o -c -MF builtin/.depend/merge.o.d -MQ builtin/merge.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/merge.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/merge-file.o -c -MF builtin/.depend/merge-file.o.d -MQ builtin/merge-file.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/merge-file.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-file.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/merge-base.o -c -MF builtin/.depend/merge-base.o.d -MQ builtin/merge-base.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/merge-base.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-base.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/merge-index.o -c -MF builtin/.depend/merge-index.o.d -MQ builtin/merge-index.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/merge-index.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-index.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/merge-file.o -c -MF builtin/.depend/merge-file.o.d -MQ builtin/merge-file.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/merge-file.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-file.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/merge-ours.o -c -MF builtin/.depend/merge-ours.o.d -MQ builtin/merge-ours.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/merge-ours.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-ours.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/merge-index.o -c -MF builtin/.depend/merge-index.o.d -MQ builtin/merge-index.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/merge-index.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-index.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/merge-recursive.o -c -MF builtin/.depend/merge-recursive.o.d -MQ builtin/merge-recursive.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/merge-recursive.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-recursive.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/merge-ours.o -c -MF builtin/.depend/merge-ours.o.d -MQ builtin/merge-ours.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/merge-ours.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-ours.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/merge-tree.o -c -MF builtin/.depend/merge-tree.o.d -MQ builtin/merge-tree.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/merge-tree.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-tree.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/merge-recursive.o -c -MF builtin/.depend/merge-recursive.o.d -MQ builtin/merge-recursive.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/merge-recursive.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-recursive.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/mktag.o -c -MF builtin/.depend/mktag.o.d -MQ builtin/mktag.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/mktag.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mktag.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/merge-tree.o -c -MF builtin/.depend/merge-tree.o.d -MQ builtin/merge-tree.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/merge-tree.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-tree.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/mktree.o -c -MF builtin/.depend/mktree.o.d -MQ builtin/mktree.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/mktree.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mktree.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/mktag.o -c -MF builtin/.depend/mktag.o.d -MQ builtin/mktag.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/mktag.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mktag.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/mv.o -c -MF builtin/.depend/mv.o.d -MQ builtin/mv.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/mv.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mv.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/mktree.o -c -MF builtin/.depend/mktree.o.d -MQ builtin/mktree.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/mktree.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mktree.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/name-rev.o -c -MF builtin/.depend/name-rev.o.d -MQ builtin/name-rev.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/name-rev.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/name-rev.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/mv.o -c -MF builtin/.depend/mv.o.d -MQ builtin/mv.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/mv.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mv.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/notes.o -c -MF builtin/.depend/notes.o.d -MQ builtin/notes.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/notes.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/notes.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/name-rev.o -c -MF builtin/.depend/name-rev.o.d -MQ builtin/name-rev.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/name-rev.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/name-rev.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/pack-objects.o -c -MF builtin/.depend/pack-objects.o.d -MQ builtin/pack-objects.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/pack-objects.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-objects.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/notes.o -c -MF builtin/.depend/notes.o.d -MQ builtin/notes.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/notes.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/notes.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/pack-redundant.o -c -MF builtin/.depend/pack-redundant.o.d -MQ builtin/pack-redundant.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/pack-redundant.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-redundant.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/pack-objects.o -c -MF builtin/.depend/pack-objects.o.d -MQ builtin/pack-objects.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/pack-objects.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-objects.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/pack-refs.o -c -MF builtin/.depend/pack-refs.o.d -MQ builtin/pack-refs.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/pack-refs.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-refs.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/pack-redundant.o -c -MF builtin/.depend/pack-redundant.o.d -MQ builtin/pack-redundant.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/pack-redundant.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-redundant.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/patch-id.o -c -MF builtin/.depend/patch-id.o.d -MQ builtin/patch-id.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/patch-id.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/patch-id.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/pack-refs.o -c -MF builtin/.depend/pack-refs.o.d -MQ builtin/pack-refs.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/pack-refs.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-refs.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/prune-packed.o -c -MF builtin/.depend/prune-packed.o.d -MQ builtin/prune-packed.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/prune-packed.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/prune-packed.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/patch-id.o -c -MF builtin/.depend/patch-id.o.d -MQ builtin/patch-id.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/patch-id.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/patch-id.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/prune.o -c -MF builtin/.depend/prune.o.d -MQ builtin/prune.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/prune.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/prune.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/prune-packed.o -c -MF builtin/.depend/prune-packed.o.d -MQ builtin/prune-packed.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/prune-packed.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/prune-packed.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/push.o -c -MF builtin/.depend/push.o.d -MQ builtin/push.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/push.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/push.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/prune.o -c -MF builtin/.depend/prune.o.d -MQ builtin/prune.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/prune.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/prune.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/read-tree.o -c -MF builtin/.depend/read-tree.o.d -MQ builtin/read-tree.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/read-tree.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/read-tree.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/push.o -c -MF builtin/.depend/push.o.d -MQ builtin/push.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/push.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/push.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/receive-pack.o -c -MF builtin/.depend/receive-pack.o.d -MQ builtin/receive-pack.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/receive-pack.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/receive-pack.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/read-tree.o -c -MF builtin/.depend/read-tree.o.d -MQ builtin/read-tree.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/read-tree.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/read-tree.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/reflog.o -c -MF builtin/.depend/reflog.o.d -MQ builtin/reflog.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/reflog.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/reflog.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/receive-pack.o -c -MF builtin/.depend/receive-pack.o.d -MQ builtin/receive-pack.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/receive-pack.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/receive-pack.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/remote.o -c -MF builtin/.depend/remote.o.d -MQ builtin/remote.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/remote.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/reflog.o -c -MF builtin/.depend/reflog.o.d -MQ builtin/reflog.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/reflog.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/reflog.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/remote-ext.o -c -MF builtin/.depend/remote-ext.o.d -MQ builtin/remote-ext.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/remote-ext.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote-ext.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/remote.o -c -MF builtin/.depend/remote.o.d -MQ builtin/remote.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/remote.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/remote-fd.o -c -MF builtin/.depend/remote-fd.o.d -MQ builtin/remote-fd.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/remote-fd.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote-fd.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/remote-ext.o -c -MF builtin/.depend/remote-ext.o.d -MQ builtin/remote-ext.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/remote-ext.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote-ext.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/repack.o -c -MF builtin/.depend/repack.o.d -MQ builtin/repack.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/repack.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/repack.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/remote-fd.o -c -MF builtin/.depend/remote-fd.o.d -MQ builtin/remote-fd.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/remote-fd.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote-fd.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/replace.o -c -MF builtin/.depend/replace.o.d -MQ builtin/replace.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/replace.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/replace.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/repack.o -c -MF builtin/.depend/repack.o.d -MQ builtin/repack.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/repack.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/repack.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/rerere.o -c -MF builtin/.depend/rerere.o.d -MQ builtin/rerere.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/rerere.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rerere.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/replace.o -c -MF builtin/.depend/replace.o.d -MQ builtin/replace.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/replace.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/replace.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/reset.o -c -MF builtin/.depend/reset.o.d -MQ builtin/reset.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/reset.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/reset.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/rerere.o -c -MF builtin/.depend/rerere.o.d -MQ builtin/rerere.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/rerere.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rerere.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/rev-list.o -c -MF builtin/.depend/rev-list.o.d -MQ builtin/rev-list.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/rev-list.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rev-list.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/reset.o -c -MF builtin/.depend/reset.o.d -MQ builtin/reset.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/reset.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/reset.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/rev-parse.o -c -MF builtin/.depend/rev-parse.o.d -MQ builtin/rev-parse.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/rev-parse.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rev-parse.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/rev-list.o -c -MF builtin/.depend/rev-list.o.d -MQ builtin/rev-list.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/rev-list.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rev-list.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/revert.o -c -MF builtin/.depend/revert.o.d -MQ builtin/revert.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/revert.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/revert.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/rev-parse.o -c -MF builtin/.depend/rev-parse.o.d -MQ builtin/rev-parse.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/rev-parse.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rev-parse.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/rm.o -c -MF builtin/.depend/rm.o.d -MQ builtin/rm.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/rm.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rm.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/revert.o -c -MF builtin/.depend/revert.o.d -MQ builtin/revert.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/revert.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/revert.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/send-pack.o -c -MF builtin/.depend/send-pack.o.d -MQ builtin/send-pack.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/send-pack.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/send-pack.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/rm.o -c -MF builtin/.depend/rm.o.d -MQ builtin/rm.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/rm.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rm.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/shortlog.o -c -MF builtin/.depend/shortlog.o.d -MQ builtin/shortlog.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/shortlog.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/shortlog.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/send-pack.o -c -MF builtin/.depend/send-pack.o.d -MQ builtin/send-pack.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/send-pack.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/send-pack.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/show-branch.o -c -MF builtin/.depend/show-branch.o.d -MQ builtin/show-branch.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/show-branch.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/show-branch.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/shortlog.o -c -MF builtin/.depend/shortlog.o.d -MQ builtin/shortlog.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/shortlog.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/shortlog.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/show-ref.o -c -MF builtin/.depend/show-ref.o.d -MQ builtin/show-ref.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/show-ref.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/show-ref.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/show-branch.o -c -MF builtin/.depend/show-branch.o.d -MQ builtin/show-branch.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/show-branch.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/show-branch.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/stripspace.o -c -MF builtin/.depend/stripspace.o.d -MQ builtin/stripspace.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/stripspace.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/stripspace.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/show-ref.o -c -MF builtin/.depend/show-ref.o.d -MQ builtin/show-ref.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/show-ref.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/show-ref.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/symbolic-ref.o -c -MF builtin/.depend/symbolic-ref.o.d -MQ builtin/symbolic-ref.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/symbolic-ref.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/symbolic-ref.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/stripspace.o -c -MF builtin/.depend/stripspace.o.d -MQ builtin/stripspace.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/stripspace.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/stripspace.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/tag.o -c -MF builtin/.depend/tag.o.d -MQ builtin/tag.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/tag.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/tag.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/symbolic-ref.o -c -MF builtin/.depend/symbolic-ref.o.d -MQ builtin/symbolic-ref.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/symbolic-ref.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/symbolic-ref.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/unpack-file.o -c -MF builtin/.depend/unpack-file.o.d -MQ builtin/unpack-file.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/unpack-file.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/unpack-file.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/tag.o -c -MF builtin/.depend/tag.o.d -MQ builtin/tag.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/tag.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/tag.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/unpack-objects.o -c -MF builtin/.depend/unpack-objects.o.d -MQ builtin/unpack-objects.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/unpack-objects.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/unpack-objects.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/unpack-file.o -c -MF builtin/.depend/unpack-file.o.d -MQ builtin/unpack-file.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/unpack-file.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/unpack-file.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/update-index.o -c -MF builtin/.depend/update-index.o.d -MQ builtin/update-index.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/update-index.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-index.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/unpack-objects.o -c -MF builtin/.depend/unpack-objects.o.d -MQ builtin/unpack-objects.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/unpack-objects.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/unpack-objects.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/update-ref.o -c -MF builtin/.depend/update-ref.o.d -MQ builtin/update-ref.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/update-ref.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-ref.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/update-index.o -c -MF builtin/.depend/update-index.o.d -MQ builtin/update-index.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/update-index.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-index.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/update-server-info.o -c -MF builtin/.depend/update-server-info.o.d -MQ builtin/update-server-info.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/update-server-info.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-server-info.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/update-ref.o -c -MF builtin/.depend/update-ref.o.d -MQ builtin/update-ref.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/update-ref.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-ref.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/upload-archive.o -c -MF builtin/.depend/upload-archive.o.d -MQ builtin/upload-archive.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/upload-archive.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/upload-archive.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/update-server-info.o -c -MF builtin/.depend/update-server-info.o.d -MQ builtin/update-server-info.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/update-server-info.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-server-info.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/var.o -c -MF builtin/.depend/var.o.d -MQ builtin/var.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/var.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/var.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/upload-archive.o -c -MF builtin/.depend/upload-archive.o.d -MQ builtin/upload-archive.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/upload-archive.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/upload-archive.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/verify-pack.o -c -MF builtin/.depend/verify-pack.o.d -MQ builtin/verify-pack.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/verify-pack.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/verify-pack.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/var.o -c -MF builtin/.depend/var.o.d -MQ builtin/var.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/var.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/var.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/verify-tag.o -c -MF builtin/.depend/verify-tag.o.d -MQ builtin/verify-tag.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/verify-tag.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/verify-tag.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/verify-commit.o -c -MF builtin/.depend/verify-commit.o.d -MQ builtin/verify-commit.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/verify-commit.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-commit.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o builtin/write-tree.o -c -MF builtin/.depend/write-tree.o.d -MQ builtin/write-tree.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/write-tree.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/write-tree.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/verify-pack.o -c -MF builtin/.depend/verify-pack.o.d -MQ builtin/verify-pack.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/verify-pack.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-pack.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-chmtime.o -c -MF ./.depend/test-chmtime.o.d -MQ test-chmtime.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-chmtime.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-chmtime.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/verify-tag.o -c -MF builtin/.depend/verify-tag.o.d -MQ builtin/verify-tag.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/verify-tag.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-tag.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-ctype.o -c -MF ./.depend/test-ctype.o.d -MQ test-ctype.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-ctype.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-ctype.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o builtin/write-tree.o -c -MF builtin/.depend/write-tree.o.d -MQ builtin/write-tree.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" builtin/write-tree.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/write-tree.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-date.o -c -MF ./.depend/test-date.o.d -MQ test-date.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-date.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-date.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-chmtime.o -c -MF ./.depend/test-chmtime.o.d -MQ test-chmtime.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-chmtime.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-chmtime.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-delta.o -c -MF ./.depend/test-delta.o.d -MQ test-delta.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-delta.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-delta.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-ctype.o -c -MF ./.depend/test-ctype.o.d -MQ test-ctype.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-ctype.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-ctype.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-dump-cache-tree.o -c -MF ./.depend/test-dump-cache-tree.o.d -MQ test-dump-cache-tree.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-dump-cache-tree.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-dump-cache-tree.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-date.o -c -MF ./.depend/test-date.o.d -MQ test-date.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-date.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-date.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-genrandom.o -c -MF ./.depend/test-genrandom.o.d -MQ test-genrandom.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-genrandom.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-genrandom.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-delta.o -c -MF ./.depend/test-delta.o.d -MQ test-delta.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-delta.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-delta.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-hashmap.o -c -MF ./.depend/test-hashmap.o.d -MQ test-hashmap.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-hashmap.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-hashmap.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-dump-cache-tree.o -c -MF ./.depend/test-dump-cache-tree.o.d -MQ test-dump-cache-tree.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-dump-cache-tree.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-dump-cache-tree.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-index-version.o -c -MF ./.depend/test-index-version.o.d -MQ test-index-version.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-index-version.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-index-version.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-dump-split-index.o -c -MF ./.depend/test-dump-split-index.o.d -MQ test-dump-split-index.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-dump-split-index.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-dump-split-index.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-line-buffer.o -c -MF ./.depend/test-line-buffer.o.d -MQ test-line-buffer.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-line-buffer.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-line-buffer.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-genrandom.o -c -MF ./.depend/test-genrandom.o.d -MQ test-genrandom.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-genrandom.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-genrandom.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-match-trees.o -c -MF ./.depend/test-match-trees.o.d -MQ test-match-trees.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-match-trees.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-match-trees.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-hashmap.o -c -MF ./.depend/test-hashmap.o.d -MQ test-hashmap.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-hashmap.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-hashmap.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-mergesort.o -c -MF ./.depend/test-mergesort.o.d -MQ test-mergesort.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-mergesort.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-mergesort.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-index-version.o -c -MF ./.depend/test-index-version.o.d -MQ test-index-version.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-index-version.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-index-version.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-mktemp.o -c -MF ./.depend/test-mktemp.o.d -MQ test-mktemp.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-mktemp.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-mktemp.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-line-buffer.o -c -MF ./.depend/test-line-buffer.o.d -MQ test-line-buffer.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-line-buffer.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-line-buffer.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-parse-options.o -c -MF ./.depend/test-parse-options.o.d -MQ test-parse-options.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-parse-options.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-parse-options.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-match-trees.o -c -MF ./.depend/test-match-trees.o.d -MQ test-match-trees.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-match-trees.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-match-trees.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-path-utils.o -c -MF ./.depend/test-path-utils.o.d -MQ test-path-utils.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-path-utils.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-path-utils.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-mergesort.o -c -MF ./.depend/test-mergesort.o.d -MQ test-mergesort.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-mergesort.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-mergesort.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-prio-queue.o -c -MF ./.depend/test-prio-queue.o.d -MQ test-prio-queue.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-prio-queue.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-prio-queue.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-mktemp.o -c -MF ./.depend/test-mktemp.o.d -MQ test-mktemp.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-mktemp.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-mktemp.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-read-cache.o -c -MF ./.depend/test-read-cache.o.d -MQ test-read-cache.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-read-cache.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-read-cache.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-parse-options.o -c -MF ./.depend/test-parse-options.o.d -MQ test-parse-options.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-parse-options.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-parse-options.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-regex.o -c -MF ./.depend/test-regex.o.d -MQ test-regex.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-regex.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-regex.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-path-utils.o -c -MF ./.depend/test-path-utils.o.d -MQ test-path-utils.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-path-utils.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-path-utils.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-revision-walking.o -c -MF ./.depend/test-revision-walking.o.d -MQ test-revision-walking.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-revision-walking.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-revision-walking.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-prio-queue.o -c -MF ./.depend/test-prio-queue.o.d -MQ test-prio-queue.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-prio-queue.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-prio-queue.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-run-command.o -c -MF ./.depend/test-run-command.o.d -MQ test-run-command.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-run-command.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-run-command.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-read-cache.o -c -MF ./.depend/test-read-cache.o.d -MQ test-read-cache.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-read-cache.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-read-cache.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-scrap-cache-tree.o -c -MF ./.depend/test-scrap-cache-tree.o.d -MQ test-scrap-cache-tree.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-scrap-cache-tree.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-scrap-cache-tree.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-regex.o -c -MF ./.depend/test-regex.o.d -MQ test-regex.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-regex.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-regex.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-sha1.o -c -MF ./.depend/test-sha1.o.d -MQ test-sha1.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-sha1.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-sha1.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-revision-walking.o -c -MF ./.depend/test-revision-walking.o.d -MQ test-revision-walking.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-revision-walking.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-revision-walking.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-sigchain.o -c -MF ./.depend/test-sigchain.o.d -MQ test-sigchain.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-sigchain.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-sigchain.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-run-command.o -c -MF ./.depend/test-run-command.o.d -MQ test-run-command.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-run-command.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-run-command.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-string-list.o -c -MF ./.depend/test-string-list.o.d -MQ test-string-list.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-string-list.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-string-list.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-scrap-cache-tree.o -c -MF ./.depend/test-scrap-cache-tree.o.d -MQ test-scrap-cache-tree.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-scrap-cache-tree.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-scrap-cache-tree.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-subprocess.o -c -MF ./.depend/test-subprocess.o.d -MQ test-subprocess.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-subprocess.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-subprocess.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-sha1.o -c -MF ./.depend/test-sha1.o.d -MQ test-sha1.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-sha1.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-sha1.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-svn-fe.o -c -MF ./.depend/test-svn-fe.o.d -MQ test-svn-fe.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-svn-fe.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-svn-fe.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-sigchain.o -c -MF ./.depend/test-sigchain.o.d -MQ test-sigchain.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-sigchain.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-sigchain.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-urlmatch-normalization.o -c -MF ./.depend/test-urlmatch-normalization.o.d -MQ test-urlmatch-normalization.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-urlmatch-normalization.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-urlmatch-normalization.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-string-list.o -c -MF ./.depend/test-string-list.o.d -MQ test-string-list.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-string-list.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-string-list.c"
 }
 ,
 {
-  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5",
-  "command": "cc -o test-wildmatch.o -c -MF ./.depend/test-wildmatch.o.d -MQ test-wildmatch.o -MMD -MP -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-wildmatch.c",
-  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-wildmatch.c"
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-subprocess.o -c -MF ./.depend/test-subprocess.o.d -MQ test-subprocess.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-subprocess.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-subprocess.c"
+}
+,
+{
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-svn-fe.o -c -MF ./.depend/test-svn-fe.o.d -MQ test-svn-fe.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-svn-fe.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-svn-fe.c"
+}
+,
+{
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-urlmatch-normalization.o -c -MF ./.depend/test-urlmatch-normalization.o.d -MQ test-urlmatch-normalization.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-urlmatch-normalization.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-urlmatch-normalization.c"
+}
+,
+{
+  "directory": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0",
+  "command": "gcc -o test-wildmatch.o -c -MF ./.depend/test-wildmatch.o.d -MQ test-wildmatch.o -MMD -MP -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER=\"block-sha1/sha1.h\" -DNO_STRLCPY -DSHELL_PATH=\"/bin/sh\" test-wildmatch.c",
+  "file": "/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-wildmatch.c"
 }
 ]
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compiled_files.def /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compiled_files.def
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compiled_files.def	2017-10-10 09:55:10.871174512 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compiled_files.def	2017-10-10 09:58:41.365866794 +0800
@@ -1,304 +1,307 @@
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-store.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/abspath.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/advice.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/alias.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/alloc.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive-tar.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/archive-zip.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/argv-array.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/attr.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/base85.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bisect.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/blob.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/branch.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bulk-checkin.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/bundle.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/cache-tree.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/color.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/column.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/combine-diff.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/commit.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/obstack.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/terminal.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/config.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/connect.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/connected.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/convert.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/copy.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/csum-file.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ctype.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/date.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/decorate.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-break.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-delta.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-order.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-pickaxe.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-rename.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-delta.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-lib.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-no-index.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/dir.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/editor.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/entry.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/environment.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/bitmap.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_bitmap.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_io.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_rlw.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/exec_cmd.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fetch-pack.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fsck.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gettext.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gpg-interface.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/graph.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/grep.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/hashmap.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/help.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/hex.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ident.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/kwset.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/levenshtein.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/line-log.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/line-range.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/list-objects.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ll-merge.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/lockfile.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/log-tree.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/mailmap.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/match-trees.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge-blobs.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge-recursive.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/mergesort.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/name-hash.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-cache.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-merge.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-utils.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/object.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-bitmap.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-bitmap-write.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-check.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-objects.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-revindex.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-write.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pager.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/parse-options.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/parse-options-cb.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/patch-delta.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/patch-ids.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/path.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pathspec.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pkt-line.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/preload-index.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pretty.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/prio-queue.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/progress.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/prompt.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/quote.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/reachable.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/read-cache.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/reflog-walk.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/refs.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/replace_object.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/rerere.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/resolve-undo.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/revision.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/run-command.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/send-pack.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sequencer.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/server-info.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/setup.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1-array.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1-lookup.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1_file.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1_name.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/shallow.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sideband.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sigchain.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/strbuf.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/streaming.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/string-list.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/submodule.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/symlinks.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tag.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/trace.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/transport.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/transport-helper.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree-diff.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree-walk.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/unpack-trees.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/url.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/urlmatch.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/usage.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/userdiff.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/utf8.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/varint.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/version.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/versioncmp.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/walker.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wildmatch.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wrapper.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/write_or_die.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ws.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wt-status.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff-interface.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/zlib.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/unix-socket.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/block-sha1/sha1.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/thread-utils.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/compat/strlcpy.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xdiffi.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xprepare.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xutils.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xemit.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xmerge.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xpatience.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xhistogram.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/daemon.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fast-import.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/http-backend.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/imap-send.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sh-i18n--envsubst.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/shell.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/show-index.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/upload-pack.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote-testsvn.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/line_buffer.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/sliding_window.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/repo_tree.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/fast_export.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/svndiff.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/svndump.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-cache.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-cache--daemon.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/add.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/annotate.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/apply.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/archive.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/bisect--helper.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/blame.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/branch.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/bundle.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/cat-file.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-attr.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-ignore.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-mailmap.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/check-ref-format.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/checkout-index.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/checkout.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/clean.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/clone.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/column.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/commit-tree.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/commit.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/config.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/count-objects.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/credential.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/describe.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-files.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-index.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff-tree.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/diff.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fast-export.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fetch-pack.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fetch.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fmt-merge-msg.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/for-each-ref.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/fsck.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/gc.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/get-tar-commit-id.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/grep.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/hash-object.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/help.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/index-pack.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/init-db.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/log.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-files.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-remote.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/ls-tree.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mailinfo.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mailsplit.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-base.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-file.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-index.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-ours.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-recursive.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/merge-tree.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mktag.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mktree.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/mv.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/name-rev.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/notes.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-objects.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-redundant.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/pack-refs.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/patch-id.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/prune-packed.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/prune.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/push.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/read-tree.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/receive-pack.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/reflog.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote-ext.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/remote-fd.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/repack.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/replace.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rerere.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/reset.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rev-list.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rev-parse.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/revert.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/rm.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/send-pack.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/shortlog.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/show-branch.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/show-ref.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/stripspace.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/symbolic-ref.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/tag.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/unpack-file.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/unpack-objects.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-index.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-ref.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/update-server-info.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/upload-archive.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/var.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/verify-pack.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/verify-tag.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/builtin/write-tree.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-chmtime.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-ctype.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-date.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-delta.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-dump-cache-tree.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-genrandom.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-hashmap.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-index-version.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-line-buffer.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-match-trees.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-mergesort.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-mktemp.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-parse-options.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-path-utils.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-prio-queue.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-read-cache.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-regex.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-revision-walking.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-run-command.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-scrap-cache-tree.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-sha1.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-sigchain.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-string-list.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-subprocess.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-svn-fe.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-urlmatch-normalization.c
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-wildmatch.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-store.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/abspath.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/advice.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/alias.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/alloc.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive-tar.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/archive-zip.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/argv-array.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/attr.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/base85.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bisect.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/blob.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/branch.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bulk-checkin.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/bundle.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/cache-tree.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/color.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/column.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/combine-diff.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/commit.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/obstack.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/terminal.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/config.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/connect.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/connected.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/convert.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/copy.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/csum-file.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ctype.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/date.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/decorate.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-break.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-delta.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-order.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-pickaxe.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-rename.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-delta.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-lib.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-no-index.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/dir.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/editor.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/entry.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/environment.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/bitmap.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_bitmap.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_io.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_rlw.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/exec_cmd.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fetch-pack.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fsck.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gettext.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gpg-interface.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/graph.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/grep.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/hashmap.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/help.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/hex.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ident.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/kwset.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/levenshtein.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/line-log.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/line-range.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/list-objects.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ll-merge.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/lockfile.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/log-tree.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/mailmap.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/match-trees.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge-blobs.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge-recursive.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/mergesort.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/name-hash.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-cache.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-merge.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-utils.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/object.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-bitmap.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-bitmap-write.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-check.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-objects.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-revindex.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-write.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pager.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/parse-options.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/parse-options-cb.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/patch-delta.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/patch-ids.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/path.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pathspec.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pkt-line.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/preload-index.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pretty.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/prio-queue.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/progress.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/prompt.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/quote.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/reachable.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/read-cache.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/reflog-walk.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/refs.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/replace_object.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/rerere.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/resolve-undo.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/revision.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/run-command.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/send-pack.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sequencer.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/server-info.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/setup.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1-array.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1-lookup.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1_file.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1_name.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/shallow.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sideband.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sigchain.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/split-index.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/strbuf.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/streaming.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/string-list.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/submodule.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/symlinks.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tag.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/trace.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/transport.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/transport-helper.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree-diff.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree-walk.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/unpack-trees.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/url.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/urlmatch.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/usage.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/userdiff.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/utf8.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/varint.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/version.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/versioncmp.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/walker.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wildmatch.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wrapper.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/write_or_die.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ws.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wt-status.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff-interface.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/zlib.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/unix-socket.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/block-sha1/sha1.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/thread-utils.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/compat/strlcpy.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xdiffi.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xprepare.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xutils.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xemit.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xmerge.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xpatience.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xhistogram.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/daemon.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fast-import.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/http-backend.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/imap-send.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sh-i18n--envsubst.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/shell.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/show-index.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/upload-pack.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote-testsvn.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/line_buffer.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/sliding_window.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/repo_tree.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/fast_export.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/svndiff.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/svndump.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-cache.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-cache--daemon.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/add.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/annotate.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/apply.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/archive.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/bisect--helper.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/blame.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/branch.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/bundle.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/cat-file.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-attr.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-ignore.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-mailmap.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/check-ref-format.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/checkout-index.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/checkout.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/clean.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/clone.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/column.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/commit-tree.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/commit.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/config.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/count-objects.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/credential.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/describe.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-files.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-index.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff-tree.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/diff.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fast-export.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fetch-pack.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fetch.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fmt-merge-msg.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/for-each-ref.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/fsck.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/gc.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/get-tar-commit-id.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/grep.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/hash-object.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/help.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/index-pack.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/init-db.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/log.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-files.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-remote.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/ls-tree.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mailinfo.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mailsplit.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-base.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-file.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-index.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-ours.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-recursive.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/merge-tree.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mktag.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mktree.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/mv.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/name-rev.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/notes.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-objects.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-redundant.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/pack-refs.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/patch-id.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/prune-packed.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/prune.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/push.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/read-tree.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/receive-pack.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/reflog.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote-ext.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/remote-fd.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/repack.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/replace.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rerere.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/reset.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rev-list.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rev-parse.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/revert.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/rm.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/send-pack.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/shortlog.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/show-branch.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/show-ref.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/stripspace.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/symbolic-ref.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/tag.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/unpack-file.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/unpack-objects.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-index.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-ref.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/update-server-info.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/upload-archive.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/var.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-commit.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-pack.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/verify-tag.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/builtin/write-tree.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-chmtime.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-ctype.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-date.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-delta.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-dump-cache-tree.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-dump-split-index.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-genrandom.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-hashmap.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-index-version.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-line-buffer.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-match-trees.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-mergesort.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-mktemp.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-parse-options.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-path-utils.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-prio-queue.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-read-cache.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-regex.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-revision-walking.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-run-command.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-scrap-cache-tree.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-sha1.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-sigchain.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-string-list.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-subprocess.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-svn-fe.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-urlmatch-normalization.c
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-wildmatch.c
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/config.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/config.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/config.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/config.c	2014-08-16 06:26:55.000000000 +0800
@@ -135,27 +135,20 @@
 	 * possible to query information on the includes themselves.
 	 */
 	ret = inc->fn(var, value, inc->data);
 	if (ret < 0)
 		return ret;
 
-	type = skip_prefix(var, "include.");
-	if (!type)
+	if (!skip_prefix(var, "include.", &type))
 		return ret;
 
 	if (!strcmp(type, "path"))
 		ret = handle_path_include(value, inc);
 	return ret;
 }
 
-static void lowercase(char *p)
-{
-	for (; *p; p++)
-		*p = tolower(*p);
-}
-
 void git_config_push_parameter(const char *text)
 {
 	struct strbuf env = STRBUF_INIT;
 	const char *old = getenv(CONFIG_DATA_ENVIRONMENT);
 	if (old) {
 		strbuf_addstr(&env, old);
@@ -177,13 +170,13 @@
 		strbuf_setlen(pair[0], pair[0]->len - 1);
 	strbuf_trim(pair[0]);
 	if (!pair[0]->len) {
 		strbuf_list_free(pair);
 		return error("bogus config parameter: %s", text);
 	}
-	lowercase(pair[0]->buf);
+	strbuf_tolower(pair[0]);
 	if (fn(pair[0]->buf, pair[1] ? pair[1]->buf : NULL, data) < 0) {
 		strbuf_list_free(pair);
 		return -1;
 	}
 	strbuf_list_free(pair);
 	return 0;
@@ -821,17 +814,22 @@
 		return git_config_string(&pager_program, var, value);
 
 	if (!strcmp(var, "core.editor"))
 		return git_config_string(&editor_program, var, value);
 
 	if (!strcmp(var, "core.commentchar")) {
-		const char *comment;
-		int ret = git_config_string(&comment, var, value);
-		if (!ret)
-			comment_line_char = comment[0];
-		return ret;
+		if (!value)
+			return config_error_nonbool(var);
+		else if (!strcasecmp(value, "auto"))
+			auto_comment_line_char = 1;
+		else if (value[0] && !value[1]) {
+			comment_line_char = value[0];
+			auto_comment_line_char = 0;
+		} else
+			return error("core.commentChar should only be one character");
+		return 0;
 	}
 
 	if (!strcmp(var, "core.askpass"))
 		return git_config_string(&askpass_program, var, value);
 
 	if (!strcmp(var, "core.excludesfile"))
@@ -871,22 +869,12 @@
 
 	if (!strcmp(var, "core.precomposeunicode")) {
 		precomposed_unicode = git_config_bool(var, value);
 		return 0;
 	}
 
-	if (!strcmp(var, "core.protecthfs")) {
-		protect_hfs = git_config_bool(var, value);
-		return 0;
-	}
-
-	if (!strcmp(var, "core.protectntfs")) {
-		protect_ntfs = git_config_bool(var, value);
-		return 0;
-	}
-
 	/* Add other config variables here and to Documentation/config.txt. */
 	return 0;
 }
 
 static int git_default_i18n_config(const char *var, const char *value)
 {
@@ -1643,12 +1631,19 @@
 		fstat(in_fd, &st);
 		contents_sz = xsize_t(st.st_size);
 		contents = xmmap(NULL, contents_sz, PROT_READ,
 			MAP_PRIVATE, in_fd, 0);
 		close(in_fd);
 
+		if (chmod(lock->filename, st.st_mode & 07777) < 0) {
+			error("chmod on %s failed: %s",
+				lock->filename, strerror(errno));
+			ret = CONFIG_NO_WRITE;
+			goto out_free;
+		}
+
 		if (store.seen == 0)
 			store.seen = 1;
 
 		for (i = 0, copy_begin = 0; i < store.seen; i++) {
 			if (store.offset[i] == 0) {
 				store.offset[i] = copy_end = contents_sz;
@@ -1791,12 +1786,13 @@
 	int ret = 0, remove = 0;
 	char *filename_buf = NULL;
 	struct lock_file *lock;
 	int out_fd;
 	char buf[1024];
 	FILE *config_file;
+	struct stat st;
 
 	if (new_name && !section_name_is_ok(new_name)) {
 		ret = error("invalid section name: %s", new_name);
 		goto out;
 	}
 
@@ -1812,12 +1808,20 @@
 
 	if (!(config_file = fopen(config_filename, "rb"))) {
 		/* no config file means nothing to rename, no error */
 		goto unlock_and_out;
 	}
 
+	fstat(fileno(config_file), &st);
+
+	if (chmod(lock->filename, st.st_mode & 07777) < 0) {
+		ret = error("chmod on %s failed: %s",
+				lock->filename, strerror(errno));
+		goto out;
+	}
+
 	while (fgets(buf, sizeof(buf), config_file)) {
 		int i;
 		int length;
 		char *output = buf;
 		for (i = 0; buf[i] && isspace(buf[i]); i++)
 			; /* do nothing */
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/config.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/config.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/config.log /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/config.log
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/config.log	2017-10-10 09:54:19.760744386 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/config.log	2017-10-10 09:57:49.951588679 +0800
@@ -1,11 +1,11 @@
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by git configure 2.0.5, which was
-generated by GNU Autoconf 2.69.  Invocation command line was
+It was created by git configure 2.1.0, which was
+generated by GNU Autoconf 2.68.  Invocation command line was
 
   $ ./configure 
 
 ## --------- ##
 ## Platform. ##
 ## --------- ##
@@ -40,141 +40,362 @@
 
 
 ## ----------- ##
 ## Core tests. ##
 ## ----------- ##
 
-configure:2336: Setting lib to 'lib' (the default)
-configure:2359: Will try -pthread then -lpthread to enable POSIX Threads.
-configure:2393: CHECKS for site configuration
-configure:2776: CHECKS for programs
-configure:2833: checking for cc
-configure:2849: found /usr/bin/cc
-configure:2860: result: cc
-configure:2891: checking for C compiler version
-configure:2900: cc --version >&5
-cc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
+configure:2319: Setting lib to 'lib' (the default)
+configure:2342: Will try -pthread then -lpthread to enable POSIX Threads.
+configure:2376: CHECKS for site configuration
+configure:2483: checking for gcc
+configure:2499: found /usr/bin/gcc
+configure:2510: result: gcc
+configure:2739: checking for C compiler version
+configure:2748: gcc --version >&5
+gcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
 Copyright (C) 2013 Free Software Foundation, Inc.
 This is free software; see the source for copying conditions.  There is NO
 warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 
-configure:2911: $? = 0
-configure:2900: cc -v >&5
+configure:2759: $? = 0
+configure:2748: gcc -v >&5
 Using built-in specs.
-COLLECT_GCC=cc
+COLLECT_GCC=gcc
 COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.8/lto-wrapper
 Target: x86_64-linux-gnu
 Configured with: ../src/configure -v --with-pkgversion='Ubuntu 4.8.4-2ubuntu1~14.04.3' --with-bugurl=file:///usr/share/doc/gcc-4.8/README.Bugs --enable-languages=c,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.8 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.8 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --disable-libmudflap --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-4.8-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
 Thread model: posix
 gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.3) 
-configure:2911: $? = 0
-configure:2900: cc -V >&5
-cc: error: unrecognized command line option '-V'
-cc: fatal error: no input files
+configure:2759: $? = 0
+configure:2748: gcc -V >&5
+gcc: error: unrecognized command line option '-V'
+gcc: fatal error: no input files
 compilation terminated.
-configure:2911: $? = 4
-configure:2900: cc -qversion >&5
-cc: error: unrecognized command line option '-qversion'
-cc: fatal error: no input files
+configure:2759: $? = 4
+configure:2748: gcc -qversion >&5
+gcc: error: unrecognized command line option '-qversion'
+gcc: fatal error: no input files
 compilation terminated.
-configure:2911: $? = 4
-configure:2931: checking whether the C compiler works
-configure:2953: cc    conftest.c  >&5
-configure:2957: $? = 0
-configure:3005: result: yes
-configure:3008: checking for C compiler default output file name
-configure:3010: result: a.out
-configure:3016: checking for suffix of executables
-configure:3023: cc -o conftest    conftest.c  >&5
-configure:3027: $? = 0
-configure:3049: result: 
-configure:3071: checking whether we are cross compiling
-configure:3079: cc -o conftest    conftest.c  >&5
-configure:3083: $? = 0
-configure:3090: ./conftest
-configure:3094: $? = 0
-configure:3109: result: no
-configure:3114: checking for suffix of object files
-configure:3136: cc -c   conftest.c >&5
-configure:3140: $? = 0
-configure:3161: result: o
-configure:3165: checking whether we are using the GNU C compiler
-configure:3184: cc -c   conftest.c >&5
-configure:3184: $? = 0
-configure:3193: result: yes
-configure:3202: checking whether cc accepts -g
-configure:3222: cc -c -g  conftest.c >&5
-configure:3222: $? = 0
-configure:3263: result: yes
-configure:3280: checking for cc option to accept ISO C89
-configure:3343: cc  -c -g -O2  conftest.c >&5
-configure:3343: $? = 0
-configure:3356: result: none needed
-configure:3377: checking for inline
-configure:3393: cc -c -g -O2  conftest.c >&5
-configure:3393: $? = 0
-configure:3401: result: inline
-configure:3427: checking if linker supports -R
-configure:3446: cc -o conftest -g -O2   -R / conftest.c  >&5
-cc: error: unrecognized command line option '-R'
-configure:3446: $? = 1
+configure:2759: $? = 4
+configure:2779: checking whether the C compiler works
+configure:2801: gcc    conftest.c  >&5
+configure:2805: $? = 0
+configure:2853: result: yes
+configure:2856: checking for C compiler default output file name
+configure:2858: result: a.out
+configure:2864: checking for suffix of executables
+configure:2871: gcc -o conftest    conftest.c  >&5
+configure:2875: $? = 0
+configure:2897: result: 
+configure:2919: checking whether we are cross compiling
+configure:2927: gcc -o conftest    conftest.c  >&5
+configure:2931: $? = 0
+configure:2938: ./conftest
+configure:2942: $? = 0
+configure:2957: result: no
+configure:2962: checking for suffix of object files
+configure:2984: gcc -c   conftest.c >&5
+configure:2988: $? = 0
+configure:3009: result: o
+configure:3013: checking whether we are using the GNU C compiler
+configure:3032: gcc -c   conftest.c >&5
+configure:3032: $? = 0
+configure:3041: result: yes
+configure:3050: checking whether gcc accepts -g
+configure:3070: gcc -c -g  conftest.c >&5
+configure:3070: $? = 0
+configure:3111: result: yes
+configure:3128: checking for gcc option to accept ISO C89
+configure:3192: gcc  -c -g -O2  conftest.c >&5
+configure:3192: $? = 0
+configure:3205: result: none needed
+configure:3231: checking how to run the C preprocessor
+configure:3262: gcc -E  conftest.c
+configure:3262: $? = 0
+configure:3276: gcc -E  conftest.c
+conftest.c:9:28: fatal error: ac_nonexistent.h: No such file or directory
+ #include <ac_nonexistent.h>
+                            ^
+compilation terminated.
+configure:3276: $? = 1
+configure: failed program was:
+| /* confdefs.h */
+| #define PACKAGE_NAME "git"
+| #define PACKAGE_TARNAME "git"
+| #define PACKAGE_VERSION "2.1.0"
+| #define PACKAGE_STRING "git 2.1.0"
+| #define PACKAGE_BUGREPORT "git@vger.kernel.org"
+| #define PACKAGE_URL ""
+| /* end confdefs.h.  */
+| #include <ac_nonexistent.h>
+configure:3301: result: gcc -E
+configure:3321: gcc -E  conftest.c
+configure:3321: $? = 0
+configure:3335: gcc -E  conftest.c
+conftest.c:9:28: fatal error: ac_nonexistent.h: No such file or directory
+ #include <ac_nonexistent.h>
+                            ^
+compilation terminated.
+configure:3335: $? = 1
 configure: failed program was:
 | /* confdefs.h */
 | #define PACKAGE_NAME "git"
 | #define PACKAGE_TARNAME "git"
-| #define PACKAGE_VERSION "2.0.5"
-| #define PACKAGE_STRING "git 2.0.5"
+| #define PACKAGE_VERSION "2.1.0"
+| #define PACKAGE_STRING "git 2.1.0"
 | #define PACKAGE_BUGREPORT "git@vger.kernel.org"
 | #define PACKAGE_URL ""
 | /* end confdefs.h.  */
+| #include <ac_nonexistent.h>
+configure:3364: checking for grep that handles long lines and -e
+configure:3422: result: /bin/grep
+configure:3427: checking for egrep
+configure:3489: result: /bin/grep -E
+configure:3494: checking for ANSI C header files
+configure:3514: gcc -c -g -O2  conftest.c >&5
+configure:3514: $? = 0
+configure:3587: gcc -o conftest -g -O2   conftest.c  >&5
+configure:3587: $? = 0
+configure:3587: ./conftest
+configure:3587: $? = 0
+configure:3598: result: yes
+configure:3611: checking for sys/types.h
+configure:3611: gcc -c -g -O2  conftest.c >&5
+configure:3611: $? = 0
+configure:3611: result: yes
+configure:3611: checking for sys/stat.h
+configure:3611: gcc -c -g -O2  conftest.c >&5
+configure:3611: $? = 0
+configure:3611: result: yes
+configure:3611: checking for stdlib.h
+configure:3611: gcc -c -g -O2  conftest.c >&5
+configure:3611: $? = 0
+configure:3611: result: yes
+configure:3611: checking for string.h
+configure:3611: gcc -c -g -O2  conftest.c >&5
+configure:3611: $? = 0
+configure:3611: result: yes
+configure:3611: checking for memory.h
+configure:3611: gcc -c -g -O2  conftest.c >&5
+configure:3611: $? = 0
+configure:3611: result: yes
+configure:3611: checking for strings.h
+configure:3611: gcc -c -g -O2  conftest.c >&5
+configure:3611: $? = 0
+configure:3611: result: yes
+configure:3611: checking for inttypes.h
+configure:3611: gcc -c -g -O2  conftest.c >&5
+configure:3611: $? = 0
+configure:3611: result: yes
+configure:3611: checking for stdint.h
+configure:3611: gcc -c -g -O2  conftest.c >&5
+configure:3611: $? = 0
+configure:3611: result: yes
+configure:3611: checking for unistd.h
+configure:3611: gcc -c -g -O2  conftest.c >&5
+configure:3611: $? = 0
+configure:3611: result: yes
+configure:3623: checking for size_t
+configure:3623: gcc -c -g -O2  conftest.c >&5
+configure:3623: $? = 0
+configure:3623: gcc -c -g -O2  conftest.c >&5
+conftest.c: In function 'main':
+conftest.c:55:21: error: expected expression before ')' token
+ if (sizeof ((size_t)))
+                     ^
+configure:3623: $? = 1
+configure: failed program was:
+| /* confdefs.h */
+| #define PACKAGE_NAME "git"
+| #define PACKAGE_TARNAME "git"
+| #define PACKAGE_VERSION "2.1.0"
+| #define PACKAGE_STRING "git 2.1.0"
+| #define PACKAGE_BUGREPORT "git@vger.kernel.org"
+| #define PACKAGE_URL ""
+| #define STDC_HEADERS 1
+| #define HAVE_SYS_TYPES_H 1
+| #define HAVE_SYS_STAT_H 1
+| #define HAVE_STDLIB_H 1
+| #define HAVE_STRING_H 1
+| #define HAVE_MEMORY_H 1
+| #define HAVE_STRINGS_H 1
+| #define HAVE_INTTYPES_H 1
+| #define HAVE_STDINT_H 1
+| #define HAVE_UNISTD_H 1
+| /* end confdefs.h.  */
+| #include <stdio.h>
+| #ifdef HAVE_SYS_TYPES_H
+| # include <sys/types.h>
+| #endif
+| #ifdef HAVE_SYS_STAT_H
+| # include <sys/stat.h>
+| #endif
+| #ifdef STDC_HEADERS
+| # include <stdlib.h>
+| # include <stddef.h>
+| #else
+| # ifdef HAVE_STDLIB_H
+| #  include <stdlib.h>
+| # endif
+| #endif
+| #ifdef HAVE_STRING_H
+| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
+| #  include <memory.h>
+| # endif
+| # include <string.h>
+| #endif
+| #ifdef HAVE_STRINGS_H
+| # include <strings.h>
+| #endif
+| #ifdef HAVE_INTTYPES_H
+| # include <inttypes.h>
+| #endif
+| #ifdef HAVE_STDINT_H
+| # include <stdint.h>
+| #endif
+| #ifdef HAVE_UNISTD_H
+| # include <unistd.h>
+| #endif
+| int
+| main ()
+| {
+| if (sizeof ((size_t)))
+| 	    return 0;
+|   ;
+|   return 0;
+| }
+configure:3623: result: yes
+configure:3636: checking for working alloca.h
+configure:3653: gcc -o conftest -g -O2   conftest.c  >&5
+configure:3653: $? = 0
+configure:3661: result: yes
+configure:3669: checking for alloca
+configure:3706: gcc -o conftest -g -O2   conftest.c  >&5
+configure:3706: $? = 0
+configure:3714: result: yes
+configure:4155: CHECKS for programs
+configure:4270: checking for C compiler version
+configure:4279: gcc --version >&5
+gcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
+Copyright (C) 2013 Free Software Foundation, Inc.
+This is free software; see the source for copying conditions.  There is NO
+warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+
+configure:4290: $? = 0
+configure:4279: gcc -v >&5
+Using built-in specs.
+COLLECT_GCC=gcc
+COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.8/lto-wrapper
+Target: x86_64-linux-gnu
+Configured with: ../src/configure -v --with-pkgversion='Ubuntu 4.8.4-2ubuntu1~14.04.3' --with-bugurl=file:///usr/share/doc/gcc-4.8/README.Bugs --enable-languages=c,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.8 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.8 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --disable-libmudflap --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-4.8-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
+Thread model: posix
+gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.3) 
+configure:4290: $? = 0
+configure:4279: gcc -V >&5
+gcc: error: unrecognized command line option '-V'
+gcc: fatal error: no input files
+compilation terminated.
+configure:4290: $? = 4
+configure:4279: gcc -qversion >&5
+gcc: error: unrecognized command line option '-qversion'
+gcc: fatal error: no input files
+compilation terminated.
+configure:4290: $? = 4
+configure:4294: checking whether we are using the GNU C compiler
+configure:4322: result: yes
+configure:4331: checking whether gcc accepts -g
+configure:4392: result: yes
+configure:4409: checking for gcc option to accept ISO C89
+configure:4486: result: none needed
+configure:4506: checking for inline
+configure:4522: gcc -c -g -O2  conftest.c >&5
+configure:4522: $? = 0
+configure:4530: result: inline
+configure:4556: checking if linker supports -R
+configure:4575: gcc -o conftest -g -O2   -R / conftest.c  >&5
+gcc: error: unrecognized command line option '-R'
+configure:4575: $? = 1
+configure: failed program was:
+| /* confdefs.h */
+| #define PACKAGE_NAME "git"
+| #define PACKAGE_TARNAME "git"
+| #define PACKAGE_VERSION "2.1.0"
+| #define PACKAGE_STRING "git 2.1.0"
+| #define PACKAGE_BUGREPORT "git@vger.kernel.org"
+| #define PACKAGE_URL ""
+| #define STDC_HEADERS 1
+| #define HAVE_SYS_TYPES_H 1
+| #define HAVE_SYS_STAT_H 1
+| #define HAVE_STDLIB_H 1
+| #define HAVE_STRING_H 1
+| #define HAVE_MEMORY_H 1
+| #define HAVE_STRINGS_H 1
+| #define HAVE_INTTYPES_H 1
+| #define HAVE_STDINT_H 1
+| #define HAVE_UNISTD_H 1
+| #define HAVE_ALLOCA_H 1
+| #define HAVE_ALLOCA 1
+| /* end confdefs.h.  */
 | 
 | int
 | main ()
 | {
 | 
 |   ;
 |   return 0;
 | }
-configure:3456: result: no
-configure:3461: checking if linker supports -Wl,-rpath,
-configure:3480: cc -o conftest -g -O2   -Wl,-rpath,/ conftest.c  >&5
-configure:3480: $? = 0
-configure:3490: result: yes
-configure:3587: checking for gar
-configure:3617: result: no
-configure:3587: checking for ar
-configure:3603: found /usr/bin/ar
-configure:3614: result: ar
-configure:3642: checking for gtar
-configure:3672: result: no
-configure:3642: checking for tar
-configure:3658: found /bin/tar
-configure:3669: result: tar
-configure:3684: checking for gnudiff
-configure:3714: result: no
-configure:3684: checking for gdiff
-configure:3714: result: no
-configure:3684: checking for diff
-configure:3700: found /usr/bin/diff
-configure:3711: result: diff
-configure:3786: checking for asciidoc
-configure:3816: result: no
-configure:3842: CHECKS for libraries
-configure:3857: checking for SHA1_Init in -lcrypto
-configure:3882: cc -o conftest -g -O2   conftest.c -lcrypto   >&5
+configure:4585: result: no
+configure:4590: checking if linker supports -Wl,-rpath,
+configure:4609: gcc -o conftest -g -O2   -Wl,-rpath,/ conftest.c  >&5
+configure:4609: $? = 0
+configure:4619: result: yes
+configure:4716: checking for gar
+configure:4746: result: no
+configure:4716: checking for ar
+configure:4732: found /usr/bin/ar
+configure:4743: result: ar
+configure:4771: checking for gtar
+configure:4801: result: no
+configure:4771: checking for tar
+configure:4787: found /bin/tar
+configure:4798: result: tar
+configure:4813: checking for gnudiff
+configure:4843: result: no
+configure:4813: checking for gdiff
+configure:4843: result: no
+configure:4813: checking for diff
+configure:4829: found /usr/bin/diff
+configure:4840: result: diff
+configure:4915: checking for asciidoc
+configure:4945: result: no
+configure:4971: CHECKS for libraries
+configure:4986: checking for SHA1_Init in -lcrypto
+configure:5011: gcc -o conftest -g -O2   conftest.c -lcrypto   >&5
 /usr/bin/ld: cannot find -lcrypto
 collect2: error: ld returned 1 exit status
-configure:3882: $? = 1
+configure:5011: $? = 1
 configure: failed program was:
 | /* confdefs.h */
 | #define PACKAGE_NAME "git"
 | #define PACKAGE_TARNAME "git"
-| #define PACKAGE_VERSION "2.0.5"
-| #define PACKAGE_STRING "git 2.0.5"
+| #define PACKAGE_VERSION "2.1.0"
+| #define PACKAGE_STRING "git 2.1.0"
 | #define PACKAGE_BUGREPORT "git@vger.kernel.org"
 | #define PACKAGE_URL ""
+| #define STDC_HEADERS 1
+| #define HAVE_SYS_TYPES_H 1
+| #define HAVE_SYS_STAT_H 1
+| #define HAVE_STDLIB_H 1
+| #define HAVE_STRING_H 1
+| #define HAVE_MEMORY_H 1
+| #define HAVE_STRINGS_H 1
+| #define HAVE_INTTYPES_H 1
+| #define HAVE_STDINT_H 1
+| #define HAVE_UNISTD_H 1
+| #define HAVE_ALLOCA_H 1
+| #define HAVE_ALLOCA 1
 | /* end confdefs.h.  */
 | 
 | /* Override any GCC internal prototype to avoid an error.
 |    Use char because int might match the return type of a GCC
 |    builtin and then its argument prototype would still apply.  */
 | #ifdef __cplusplus
@@ -185,26 +406,38 @@
 | main ()
 | {
 | return SHA1_Init ();
 |   ;
 |   return 0;
 | }
-configure:3891: result: no
-configure:3896: checking for SHA1_Init in -lssl
-configure:3921: cc -o conftest -g -O2   conftest.c -lssl   >&5
+configure:5020: result: no
+configure:5025: checking for SHA1_Init in -lssl
+configure:5050: gcc -o conftest -g -O2   conftest.c -lssl   >&5
 /usr/bin/ld: cannot find -lssl
 collect2: error: ld returned 1 exit status
-configure:3921: $? = 1
+configure:5050: $? = 1
 configure: failed program was:
 | /* confdefs.h */
 | #define PACKAGE_NAME "git"
 | #define PACKAGE_TARNAME "git"
-| #define PACKAGE_VERSION "2.0.5"
-| #define PACKAGE_STRING "git 2.0.5"
+| #define PACKAGE_VERSION "2.1.0"
+| #define PACKAGE_STRING "git 2.1.0"
 | #define PACKAGE_BUGREPORT "git@vger.kernel.org"
 | #define PACKAGE_URL ""
+| #define STDC_HEADERS 1
+| #define HAVE_SYS_TYPES_H 1
+| #define HAVE_SYS_STAT_H 1
+| #define HAVE_STDLIB_H 1
+| #define HAVE_STRING_H 1
+| #define HAVE_MEMORY_H 1
+| #define HAVE_STRINGS_H 1
+| #define HAVE_INTTYPES_H 1
+| #define HAVE_STDINT_H 1
+| #define HAVE_UNISTD_H 1
+| #define HAVE_ALLOCA_H 1
+| #define HAVE_ALLOCA 1
 | /* end confdefs.h.  */
 | 
 | /* Override any GCC internal prototype to avoid an error.
 |    Use char because int might match the return type of a GCC
 |    builtin and then its argument prototype would still apply.  */
 | #ifdef __cplusplus
@@ -215,26 +448,38 @@
 | main ()
 | {
 | return SHA1_Init ();
 |   ;
 |   return 0;
 | }
-configure:3930: result: no
-configure:4038: checking for curl_global_init in -lcurl
-configure:4063: cc -o conftest -g -O2   conftest.c -lcurl   >&5
+configure:5059: result: no
+configure:5167: checking for curl_global_init in -lcurl
+configure:5192: gcc -o conftest -g -O2   conftest.c -lcurl   >&5
 /usr/bin/ld: cannot find -lcurl
 collect2: error: ld returned 1 exit status
-configure:4063: $? = 1
+configure:5192: $? = 1
 configure: failed program was:
 | /* confdefs.h */
 | #define PACKAGE_NAME "git"
 | #define PACKAGE_TARNAME "git"
-| #define PACKAGE_VERSION "2.0.5"
-| #define PACKAGE_STRING "git 2.0.5"
+| #define PACKAGE_VERSION "2.1.0"
+| #define PACKAGE_STRING "git 2.1.0"
 | #define PACKAGE_BUGREPORT "git@vger.kernel.org"
 | #define PACKAGE_URL ""
+| #define STDC_HEADERS 1
+| #define HAVE_SYS_TYPES_H 1
+| #define HAVE_SYS_STAT_H 1
+| #define HAVE_STDLIB_H 1
+| #define HAVE_STRING_H 1
+| #define HAVE_MEMORY_H 1
+| #define HAVE_STRINGS_H 1
+| #define HAVE_INTTYPES_H 1
+| #define HAVE_STDINT_H 1
+| #define HAVE_UNISTD_H 1
+| #define HAVE_ALLOCA_H 1
+| #define HAVE_ALLOCA 1
 | /* end confdefs.h.  */
 | 
 | /* Override any GCC internal prototype to avoid an error.
 |    Use char because int might match the return type of a GCC
 |    builtin and then its argument prototype would still apply.  */
 | #ifdef __cplusplus
@@ -245,255 +490,173 @@
 | main ()
 | {
 | return curl_global_init ();
 |   ;
 |   return 0;
 | }
-configure:4072: result: no
-configure:4104: checking for XML_ParserCreate in -lexpat
-configure:4129: cc -o conftest -g -O2   conftest.c -lexpat   >&5
-configure:4129: $? = 0
-configure:4138: result: yes
-configure:4192: checking for iconv in -lc
-configure:4205: cc -o conftest -g -O2   conftest.c  -lc >&5
-configure:4205: $? = 0
-configure:4206: result: yes
-configure:4253: checking for deflateBound in -lz
-configure:4269: cc -o conftest -g -O2   conftest.c  -lz >&5
-configure:4269: $? = 0
-configure:4270: result: yes
-configure:4294: checking for socket in -lc
-configure:4319: cc -o conftest -g -O2   conftest.c -lc   >&5
-configure:4319: $? = 0
-configure:4328: result: yes
-configure:4349: checking for inet_ntop
-configure:4349: cc -o conftest -g -O2   conftest.c  >&5
-configure:4349: $? = 0
-configure:4349: result: yes
-configure:4404: checking for inet_pton
-configure:4404: cc -o conftest -g -O2   conftest.c  >&5
-configure:4404: $? = 0
-configure:4404: result: yes
-configure:4459: checking for hstrerror
-configure:4459: cc -o conftest -g -O2   conftest.c  >&5
-configure:4459: $? = 0
-configure:4459: result: yes
-configure:4518: checking for basename in -lc
-configure:4543: cc -o conftest -g -O2   conftest.c -lc   >&5
-configure:4543: $? = 0
-configure:4552: result: yes
-configure:4564: checking for gettext in -lc
-configure:4589: cc -o conftest -g -O2   conftest.c -lc   >&5
-conftest.c:16:6: warning: conflicting types for built-in function 'gettext' [enabled by default]
+configure:5201: result: no
+configure:5233: checking for XML_ParserCreate in -lexpat
+configure:5258: gcc -o conftest -g -O2   conftest.c -lexpat   >&5
+configure:5258: $? = 0
+configure:5267: result: yes
+configure:5321: checking for iconv in -lc
+configure:5334: gcc -o conftest -g -O2   conftest.c  -lc >&5
+configure:5334: $? = 0
+configure:5335: result: yes
+configure:5382: checking for deflateBound in -lz
+configure:5398: gcc -o conftest -g -O2   conftest.c  -lz >&5
+configure:5398: $? = 0
+configure:5399: result: yes
+configure:5423: checking for socket in -lc
+configure:5448: gcc -o conftest -g -O2   conftest.c -lc   >&5
+configure:5448: $? = 0
+configure:5457: result: yes
+configure:5478: checking for inet_ntop
+configure:5478: gcc -o conftest -g -O2   conftest.c  >&5
+configure:5478: $? = 0
+configure:5478: result: yes
+configure:5533: checking for inet_pton
+configure:5533: gcc -o conftest -g -O2   conftest.c  >&5
+configure:5533: $? = 0
+configure:5533: result: yes
+configure:5588: checking for hstrerror
+configure:5588: gcc -o conftest -g -O2   conftest.c  >&5
+configure:5588: $? = 0
+configure:5588: result: yes
+configure:5647: checking for basename in -lc
+configure:5672: gcc -o conftest -g -O2   conftest.c -lc   >&5
+configure:5672: $? = 0
+configure:5681: result: yes
+configure:5693: checking for gettext in -lc
+configure:5718: gcc -o conftest -g -O2   conftest.c -lc   >&5
+conftest.c:28:6: warning: conflicting types for built-in function 'gettext' [enabled by default]
  char gettext ();
       ^
-configure:4589: $? = 0
-configure:4598: result: yes
-configure:4617: checking how to run the C preprocessor
-configure:4648: cc -E  conftest.c
-configure:4648: $? = 0
-configure:4662: cc -E  conftest.c
-conftest.c:9:28: fatal error: ac_nonexistent.h: No such file or directory
- #include <ac_nonexistent.h>
-                            ^
-compilation terminated.
-configure:4662: $? = 1
-configure: failed program was:
-| /* confdefs.h */
-| #define PACKAGE_NAME "git"
-| #define PACKAGE_TARNAME "git"
-| #define PACKAGE_VERSION "2.0.5"
-| #define PACKAGE_STRING "git 2.0.5"
-| #define PACKAGE_BUGREPORT "git@vger.kernel.org"
-| #define PACKAGE_URL ""
-| /* end confdefs.h.  */
-| #include <ac_nonexistent.h>
-configure:4687: result: cc -E
-configure:4707: cc -E  conftest.c
-configure:4707: $? = 0
-configure:4721: cc -E  conftest.c
-conftest.c:9:28: fatal error: ac_nonexistent.h: No such file or directory
- #include <ac_nonexistent.h>
-                            ^
-compilation terminated.
-configure:4721: $? = 1
-configure: failed program was:
-| /* confdefs.h */
-| #define PACKAGE_NAME "git"
-| #define PACKAGE_TARNAME "git"
-| #define PACKAGE_VERSION "2.0.5"
-| #define PACKAGE_STRING "git 2.0.5"
-| #define PACKAGE_BUGREPORT "git@vger.kernel.org"
-| #define PACKAGE_URL ""
-| /* end confdefs.h.  */
-| #include <ac_nonexistent.h>
-configure:4750: checking for grep that handles long lines and -e
-configure:4808: result: /bin/grep
-configure:4813: checking for egrep
-configure:4875: result: /bin/grep -E
-configure:4880: checking for ANSI C header files
-configure:4900: cc -c -g -O2  conftest.c >&5
-configure:4900: $? = 0
-configure:4973: cc -o conftest -g -O2   conftest.c  >&5
-configure:4973: $? = 0
-configure:4973: ./conftest
-configure:4973: $? = 0
-configure:4984: result: yes
-configure:4997: checking for sys/types.h
-configure:4997: cc -c -g -O2  conftest.c >&5
-configure:4997: $? = 0
-configure:4997: result: yes
-configure:4997: checking for sys/stat.h
-configure:4997: cc -c -g -O2  conftest.c >&5
-configure:4997: $? = 0
-configure:4997: result: yes
-configure:4997: checking for stdlib.h
-configure:4997: cc -c -g -O2  conftest.c >&5
-configure:4997: $? = 0
-configure:4997: result: yes
-configure:4997: checking for string.h
-configure:4997: cc -c -g -O2  conftest.c >&5
-configure:4997: $? = 0
-configure:4997: result: yes
-configure:4997: checking for memory.h
-configure:4997: cc -c -g -O2  conftest.c >&5
-configure:4997: $? = 0
-configure:4997: result: yes
-configure:4997: checking for strings.h
-configure:4997: cc -c -g -O2  conftest.c >&5
-configure:4997: $? = 0
-configure:4997: result: yes
-configure:4997: checking for inttypes.h
-configure:4997: cc -c -g -O2  conftest.c >&5
-configure:4997: $? = 0
-configure:4997: result: yes
-configure:4997: checking for stdint.h
-configure:4997: cc -c -g -O2  conftest.c >&5
-configure:4997: $? = 0
-configure:4997: result: yes
-configure:4997: checking for unistd.h
-configure:4997: cc -c -g -O2  conftest.c >&5
-configure:4997: $? = 0
-configure:4997: result: yes
-configure:5009: checking libintl.h usability
-configure:5009: cc -c -g -O2  conftest.c >&5
-configure:5009: $? = 0
-configure:5009: result: yes
-configure:5009: checking libintl.h presence
-configure:5009: cc -E  conftest.c
-configure:5009: $? = 0
-configure:5009: result: yes
-configure:5009: checking for libintl.h
-configure:5009: result: yes
-configure:5025: CHECKS for header files
-configure:5029: checking sys/select.h usability
-configure:5029: cc -c -g -O2  conftest.c >&5
-configure:5029: $? = 0
-configure:5029: result: yes
-configure:5029: checking sys/select.h presence
-configure:5029: cc -E  conftest.c
-configure:5029: $? = 0
-configure:5029: result: yes
-configure:5029: checking for sys/select.h
-configure:5029: result: yes
-configure:5041: checking sys/poll.h usability
-configure:5041: cc -c -g -O2  conftest.c >&5
-configure:5041: $? = 0
-configure:5041: result: yes
-configure:5041: checking sys/poll.h presence
-configure:5041: cc -E  conftest.c
-configure:5041: $? = 0
-configure:5041: result: yes
-configure:5041: checking for sys/poll.h
-configure:5041: result: yes
-configure:5053: checking for inttypes.h
-configure:5053: result: yes
-configure:5077: checking for old iconv()
-configure:5097: cc -c -g -O2  conftest.c >&5
-configure:5097: $? = 0
-configure:5098: result: no
-configure:5118: CHECKS for typedefs, structures, and compiler characteristics
-configure:5122: checking for socklen_t
-configure:5122: cc -c -g -O2  conftest.c >&5
-configure:5122: $? = 0
-configure:5122: cc -c -g -O2  conftest.c >&5
+configure:5718: $? = 0
+configure:5727: result: yes
+configure:5741: checking libintl.h usability
+configure:5741: gcc -c -g -O2  conftest.c >&5
+configure:5741: $? = 0
+configure:5741: result: yes
+configure:5741: checking libintl.h presence
+configure:5741: gcc -E  conftest.c
+configure:5741: $? = 0
+configure:5741: result: yes
+configure:5741: checking for libintl.h
+configure:5741: result: yes
+configure:5757: CHECKS for header files
+configure:5761: checking sys/select.h usability
+configure:5761: gcc -c -g -O2  conftest.c >&5
+configure:5761: $? = 0
+configure:5761: result: yes
+configure:5761: checking sys/select.h presence
+configure:5761: gcc -E  conftest.c
+configure:5761: $? = 0
+configure:5761: result: yes
+configure:5761: checking for sys/select.h
+configure:5761: result: yes
+configure:5773: checking sys/poll.h usability
+configure:5773: gcc -c -g -O2  conftest.c >&5
+configure:5773: $? = 0
+configure:5773: result: yes
+configure:5773: checking sys/poll.h presence
+configure:5773: gcc -E  conftest.c
+configure:5773: $? = 0
+configure:5773: result: yes
+configure:5773: checking for sys/poll.h
+configure:5773: result: yes
+configure:5785: checking for inttypes.h
+configure:5785: result: yes
+configure:5809: checking for old iconv()
+configure:5829: gcc -c -g -O2  conftest.c >&5
+configure:5829: $? = 0
+configure:5830: result: no
+configure:5850: CHECKS for typedefs, structures, and compiler characteristics
+configure:5854: checking for socklen_t
+configure:5854: gcc -c -g -O2  conftest.c >&5
+configure:5854: $? = 0
+configure:5854: gcc -c -g -O2  conftest.c >&5
 conftest.c: In function 'main':
-conftest.c:25:24: error: expected expression before ')' token
+conftest.c:27:24: error: expected expression before ')' token
  if (sizeof ((socklen_t)))
                         ^
-configure:5122: $? = 1
+configure:5854: $? = 1
 configure: failed program was:
 | /* confdefs.h */
 | #define PACKAGE_NAME "git"
 | #define PACKAGE_TARNAME "git"
-| #define PACKAGE_VERSION "2.0.5"
-| #define PACKAGE_STRING "git 2.0.5"
+| #define PACKAGE_VERSION "2.1.0"
+| #define PACKAGE_STRING "git 2.1.0"
 | #define PACKAGE_BUGREPORT "git@vger.kernel.org"
 | #define PACKAGE_URL ""
 | #define STDC_HEADERS 1
 | #define HAVE_SYS_TYPES_H 1
 | #define HAVE_SYS_STAT_H 1
 | #define HAVE_STDLIB_H 1
 | #define HAVE_STRING_H 1
 | #define HAVE_MEMORY_H 1
 | #define HAVE_STRINGS_H 1
 | #define HAVE_INTTYPES_H 1
 | #define HAVE_STDINT_H 1
 | #define HAVE_UNISTD_H 1
+| #define HAVE_ALLOCA_H 1
+| #define HAVE_ALLOCA 1
 | /* end confdefs.h.  */
 | #include <sys/types.h>
 | #include <sys/socket.h>
 | 
 | int
 | main ()
 | {
 | if (sizeof ((socklen_t)))
 | 	    return 0;
 |   ;
 |   return 0;
 | }
-configure:5122: result: yes
-configure:5193: checking for struct dirent.d_ino
-configure:5193: cc -c -g -O2  conftest.c >&5
-configure:5193: $? = 0
-configure:5193: result: yes
-configure:5206: checking for struct dirent.d_type
-configure:5206: cc -c -g -O2  conftest.c >&5
-configure:5206: $? = 0
-configure:5206: result: yes
-configure:5219: checking for struct passwd.pw_gecos
-configure:5219: cc -c -g -O2  conftest.c >&5
-configure:5219: $? = 0
-configure:5219: result: yes
-configure:5232: checking for struct sockaddr_storage
-configure:5232: cc -c -g -O2  conftest.c >&5
-configure:5232: $? = 0
-configure:5232: cc -c -g -O2  conftest.c >&5
+configure:5854: result: yes
+configure:5925: checking for struct dirent.d_ino
+configure:5925: gcc -c -g -O2  conftest.c >&5
+configure:5925: $? = 0
+configure:5925: result: yes
+configure:5938: checking for struct dirent.d_type
+configure:5938: gcc -c -g -O2  conftest.c >&5
+configure:5938: $? = 0
+configure:5938: result: yes
+configure:5951: checking for struct passwd.pw_gecos
+configure:5951: gcc -c -g -O2  conftest.c >&5
+configure:5951: $? = 0
+configure:5951: result: yes
+configure:5964: checking for struct sockaddr_storage
+configure:5964: gcc -c -g -O2  conftest.c >&5
+configure:5964: $? = 0
+configure:5964: gcc -c -g -O2  conftest.c >&5
 conftest.c: In function 'main':
-conftest.c:27:38: error: expected expression before ')' token
+conftest.c:29:38: error: expected expression before ')' token
  if (sizeof ((struct sockaddr_storage)))
                                       ^
-configure:5232: $? = 1
+configure:5964: $? = 1
 configure: failed program was:
 | /* confdefs.h */
 | #define PACKAGE_NAME "git"
 | #define PACKAGE_TARNAME "git"
-| #define PACKAGE_VERSION "2.0.5"
-| #define PACKAGE_STRING "git 2.0.5"
+| #define PACKAGE_VERSION "2.1.0"
+| #define PACKAGE_STRING "git 2.1.0"
 | #define PACKAGE_BUGREPORT "git@vger.kernel.org"
 | #define PACKAGE_URL ""
 | #define STDC_HEADERS 1
 | #define HAVE_SYS_TYPES_H 1
 | #define HAVE_SYS_STAT_H 1
 | #define HAVE_STDLIB_H 1
 | #define HAVE_STRING_H 1
 | #define HAVE_MEMORY_H 1
 | #define HAVE_STRINGS_H 1
 | #define HAVE_INTTYPES_H 1
 | #define HAVE_STDINT_H 1
 | #define HAVE_UNISTD_H 1
+| #define HAVE_ALLOCA_H 1
+| #define HAVE_ALLOCA 1
 | /* end confdefs.h.  */
 | 
 | #include <sys/types.h>
 | #include <sys/socket.h>
 | 
 | 
@@ -502,40 +665,42 @@
 | {
 | if (sizeof ((struct sockaddr_storage)))
 | 	    return 0;
 |   ;
 |   return 0;
 | }
-configure:5232: result: yes
-configure:5247: checking for struct addrinfo
-configure:5247: cc -c -g -O2  conftest.c >&5
-configure:5247: $? = 0
-configure:5247: cc -c -g -O2  conftest.c >&5
+configure:5964: result: yes
+configure:5979: checking for struct addrinfo
+configure:5979: gcc -c -g -O2  conftest.c >&5
+configure:5979: $? = 0
+configure:5979: gcc -c -g -O2  conftest.c >&5
 conftest.c: In function 'main':
-conftest.c:28:30: error: expected expression before ')' token
+conftest.c:30:30: error: expected expression before ')' token
  if (sizeof ((struct addrinfo)))
                               ^
-configure:5247: $? = 1
+configure:5979: $? = 1
 configure: failed program was:
 | /* confdefs.h */
 | #define PACKAGE_NAME "git"
 | #define PACKAGE_TARNAME "git"
-| #define PACKAGE_VERSION "2.0.5"
-| #define PACKAGE_STRING "git 2.0.5"
+| #define PACKAGE_VERSION "2.1.0"
+| #define PACKAGE_STRING "git 2.1.0"
 | #define PACKAGE_BUGREPORT "git@vger.kernel.org"
 | #define PACKAGE_URL ""
 | #define STDC_HEADERS 1
 | #define HAVE_SYS_TYPES_H 1
 | #define HAVE_SYS_STAT_H 1
 | #define HAVE_STDLIB_H 1
 | #define HAVE_STRING_H 1
 | #define HAVE_MEMORY_H 1
 | #define HAVE_STRINGS_H 1
 | #define HAVE_INTTYPES_H 1
 | #define HAVE_STDINT_H 1
 | #define HAVE_UNISTD_H 1
+| #define HAVE_ALLOCA_H 1
+| #define HAVE_ALLOCA 1
 | /* end confdefs.h.  */
 | 
 | #include <sys/types.h>
 | #include <sys/socket.h>
 | #include <netdb.h>
 | 
@@ -545,81 +710,83 @@
 | {
 | if (sizeof ((struct addrinfo)))
 | 	    return 0;
 |   ;
 |   return 0;
 | }
-configure:5247: result: yes
-configure:5255: checking for getaddrinfo
-configure:5255: cc -o conftest -g -O2   conftest.c  >&5
-configure:5255: $? = 0
-configure:5255: result: yes
-configure:5258: checking for library containing getaddrinfo
-configure:5289: cc -o conftest -g -O2   conftest.c  >&5
-configure:5289: $? = 0
-configure:5306: result: none required
-configure:5330: checking whether the platform regex can handle null bytes
-configure:5362: result: yes
-configure:5374: checking whether system succeeds to read fopen'ed directory
-configure:5399: cc -o conftest -g -O2   conftest.c  >&5
-configure:5399: $? = 0
-configure:5399: ./conftest
-configure:5399: $? = 0
-configure:5410: result: no
-configure:5423: checking whether snprintf() and/or vsnprintf() return bogus value
-configure:5461: cc -o conftest -g -O2   conftest.c  >&5
-configure:5461: $? = 0
-configure:5461: ./conftest
-configure:5461: $? = 0
-configure:5472: result: no
-configure:5485: CHECKS for library functions
-configure:5489: checking libgen.h usability
-configure:5489: cc -c -g -O2  conftest.c >&5
-configure:5489: $? = 0
-configure:5489: result: yes
-configure:5489: checking libgen.h presence
-configure:5489: cc -E  conftest.c
-configure:5489: $? = 0
-configure:5489: result: yes
-configure:5489: checking for libgen.h
-configure:5489: result: yes
-configure:5501: checking paths.h usability
-configure:5501: cc -c -g -O2  conftest.c >&5
-configure:5501: $? = 0
-configure:5501: result: yes
-configure:5501: checking paths.h presence
-configure:5501: cc -E  conftest.c
-configure:5501: $? = 0
-configure:5501: result: yes
-configure:5501: checking for paths.h
-configure:5501: result: yes
-configure:5513: checking libcharset.h usability
-configure:5513: cc -c -g -O2  conftest.c >&5
-conftest.c:52:24: fatal error: libcharset.h: No such file or directory
+configure:5979: result: yes
+configure:5987: checking for getaddrinfo
+configure:5987: gcc -o conftest -g -O2   conftest.c  >&5
+configure:5987: $? = 0
+configure:5987: result: yes
+configure:5990: checking for library containing getaddrinfo
+configure:6021: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6021: $? = 0
+configure:6038: result: none required
+configure:6062: checking whether the platform regex can handle null bytes
+configure:6094: result: yes
+configure:6106: checking whether system succeeds to read fopen'ed directory
+configure:6131: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6131: $? = 0
+configure:6131: ./conftest
+configure:6131: $? = 0
+configure:6142: result: no
+configure:6155: checking whether snprintf() and/or vsnprintf() return bogus value
+configure:6193: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6193: $? = 0
+configure:6193: ./conftest
+configure:6193: $? = 0
+configure:6204: result: no
+configure:6217: CHECKS for library functions
+configure:6221: checking libgen.h usability
+configure:6221: gcc -c -g -O2  conftest.c >&5
+configure:6221: $? = 0
+configure:6221: result: yes
+configure:6221: checking libgen.h presence
+configure:6221: gcc -E  conftest.c
+configure:6221: $? = 0
+configure:6221: result: yes
+configure:6221: checking for libgen.h
+configure:6221: result: yes
+configure:6233: checking paths.h usability
+configure:6233: gcc -c -g -O2  conftest.c >&5
+configure:6233: $? = 0
+configure:6233: result: yes
+configure:6233: checking paths.h presence
+configure:6233: gcc -E  conftest.c
+configure:6233: $? = 0
+configure:6233: result: yes
+configure:6233: checking for paths.h
+configure:6233: result: yes
+configure:6245: checking libcharset.h usability
+configure:6245: gcc -c -g -O2  conftest.c >&5
+conftest.c:54:24: fatal error: libcharset.h: No such file or directory
  #include <libcharset.h>
                         ^
 compilation terminated.
-configure:5513: $? = 1
+configure:6245: $? = 1
 configure: failed program was:
 | /* confdefs.h */
 | #define PACKAGE_NAME "git"
 | #define PACKAGE_TARNAME "git"
-| #define PACKAGE_VERSION "2.0.5"
-| #define PACKAGE_STRING "git 2.0.5"
+| #define PACKAGE_VERSION "2.1.0"
+| #define PACKAGE_STRING "git 2.1.0"
 | #define PACKAGE_BUGREPORT "git@vger.kernel.org"
 | #define PACKAGE_URL ""
 | #define STDC_HEADERS 1
 | #define HAVE_SYS_TYPES_H 1
 | #define HAVE_SYS_STAT_H 1
 | #define HAVE_STDLIB_H 1
 | #define HAVE_STRING_H 1
 | #define HAVE_MEMORY_H 1
 | #define HAVE_STRINGS_H 1
 | #define HAVE_INTTYPES_H 1
 | #define HAVE_STDINT_H 1
 | #define HAVE_UNISTD_H 1
+| #define HAVE_ALLOCA_H 1
+| #define HAVE_ALLOCA 1
 | /* end confdefs.h.  */
 | #include <stdio.h>
 | #ifdef HAVE_SYS_TYPES_H
 | # include <sys/types.h>
 | #endif
 | #ifdef HAVE_SYS_STAT_H
@@ -649,68 +816,72 @@
 | # include <stdint.h>
 | #endif
 | #ifdef HAVE_UNISTD_H
 | # include <unistd.h>
 | #endif
 | #include <libcharset.h>
-configure:5513: result: no
-configure:5513: checking libcharset.h presence
-configure:5513: cc -E  conftest.c
-conftest.c:19:24: fatal error: libcharset.h: No such file or directory
+configure:6245: result: no
+configure:6245: checking libcharset.h presence
+configure:6245: gcc -E  conftest.c
+conftest.c:21:24: fatal error: libcharset.h: No such file or directory
  #include <libcharset.h>
                         ^
 compilation terminated.
-configure:5513: $? = 1
+configure:6245: $? = 1
 configure: failed program was:
 | /* confdefs.h */
 | #define PACKAGE_NAME "git"
 | #define PACKAGE_TARNAME "git"
-| #define PACKAGE_VERSION "2.0.5"
-| #define PACKAGE_STRING "git 2.0.5"
+| #define PACKAGE_VERSION "2.1.0"
+| #define PACKAGE_STRING "git 2.1.0"
 | #define PACKAGE_BUGREPORT "git@vger.kernel.org"
 | #define PACKAGE_URL ""
 | #define STDC_HEADERS 1
 | #define HAVE_SYS_TYPES_H 1
 | #define HAVE_SYS_STAT_H 1
 | #define HAVE_STDLIB_H 1
 | #define HAVE_STRING_H 1
 | #define HAVE_MEMORY_H 1
 | #define HAVE_STRINGS_H 1
 | #define HAVE_INTTYPES_H 1
 | #define HAVE_STDINT_H 1
 | #define HAVE_UNISTD_H 1
+| #define HAVE_ALLOCA_H 1
+| #define HAVE_ALLOCA 1
 | /* end confdefs.h.  */
 | #include <libcharset.h>
-configure:5513: result: no
-configure:5513: checking for libcharset.h
-configure:5513: result: no
-configure:5525: checking for strings.h
-configure:5525: result: yes
-configure:5538: checking for locale_charset in -liconv
-configure:5563: cc -o conftest -g -O2   conftest.c -liconv   >&5
+configure:6245: result: no
+configure:6245: checking for libcharset.h
+configure:6245: result: no
+configure:6257: checking for strings.h
+configure:6257: result: yes
+configure:6270: checking for locale_charset in -liconv
+configure:6295: gcc -o conftest -g -O2   conftest.c -liconv   >&5
 /usr/bin/ld: cannot find -liconv
 collect2: error: ld returned 1 exit status
-configure:5563: $? = 1
+configure:6295: $? = 1
 configure: failed program was:
 | /* confdefs.h */
 | #define PACKAGE_NAME "git"
 | #define PACKAGE_TARNAME "git"
-| #define PACKAGE_VERSION "2.0.5"
-| #define PACKAGE_STRING "git 2.0.5"
+| #define PACKAGE_VERSION "2.1.0"
+| #define PACKAGE_STRING "git 2.1.0"
 | #define PACKAGE_BUGREPORT "git@vger.kernel.org"
 | #define PACKAGE_URL ""
 | #define STDC_HEADERS 1
 | #define HAVE_SYS_TYPES_H 1
 | #define HAVE_SYS_STAT_H 1
 | #define HAVE_STDLIB_H 1
 | #define HAVE_STRING_H 1
 | #define HAVE_MEMORY_H 1
 | #define HAVE_STRINGS_H 1
 | #define HAVE_INTTYPES_H 1
 | #define HAVE_STDINT_H 1
 | #define HAVE_UNISTD_H 1
+| #define HAVE_ALLOCA_H 1
+| #define HAVE_ALLOCA 1
 | /* end confdefs.h.  */
 | 
 | /* Override any GCC internal prototype to avoid an error.
 |    Use char because int might match the return type of a GCC
 |    builtin and then its argument prototype would still apply.  */
 | #ifdef __cplusplus
@@ -721,36 +892,38 @@
 | main ()
 | {
 | return locale_charset ();
 |   ;
 |   return 0;
 | }
-configure:5572: result: no
-configure:5577: checking for locale_charset in -lcharset
-configure:5602: cc -o conftest -g -O2   conftest.c -lcharset   >&5
+configure:6304: result: no
+configure:6309: checking for locale_charset in -lcharset
+configure:6334: gcc -o conftest -g -O2   conftest.c -lcharset   >&5
 /usr/bin/ld: cannot find -lcharset
 collect2: error: ld returned 1 exit status
-configure:5602: $? = 1
+configure:6334: $? = 1
 configure: failed program was:
 | /* confdefs.h */
 | #define PACKAGE_NAME "git"
 | #define PACKAGE_TARNAME "git"
-| #define PACKAGE_VERSION "2.0.5"
-| #define PACKAGE_STRING "git 2.0.5"
+| #define PACKAGE_VERSION "2.1.0"
+| #define PACKAGE_STRING "git 2.1.0"
 | #define PACKAGE_BUGREPORT "git@vger.kernel.org"
 | #define PACKAGE_URL ""
 | #define STDC_HEADERS 1
 | #define HAVE_SYS_TYPES_H 1
 | #define HAVE_SYS_STAT_H 1
 | #define HAVE_STDLIB_H 1
 | #define HAVE_STRING_H 1
 | #define HAVE_MEMORY_H 1
 | #define HAVE_STRINGS_H 1
 | #define HAVE_INTTYPES_H 1
 | #define HAVE_STDINT_H 1
 | #define HAVE_UNISTD_H 1
+| #define HAVE_ALLOCA_H 1
+| #define HAVE_ALLOCA 1
 | /* end confdefs.h.  */
 | 
 | /* Override any GCC internal prototype to avoid an error.
 |    Use char because int might match the return type of a GCC
 |    builtin and then its argument prototype would still apply.  */
 | #ifdef __cplusplus
@@ -761,53 +934,55 @@
 | main ()
 | {
 | return locale_charset ();
 |   ;
 |   return 0;
 | }
-configure:5611: result: no
-configure:5623: checking for strcasestr
-configure:5623: cc -o conftest -g -O2   conftest.c  >&5
-configure:5623: $? = 0
-configure:5623: result: yes
-configure:5626: checking for library containing strcasestr
-configure:5657: cc -o conftest -g -O2   conftest.c  >&5
-configure:5657: $? = 0
-configure:5674: result: none required
-configure:5693: checking for memmem
-configure:5693: cc -o conftest -g -O2   conftest.c  >&5
-configure:5693: $? = 0
-configure:5693: result: yes
-configure:5696: checking for library containing memmem
-configure:5727: cc -o conftest -g -O2   conftest.c  >&5
-configure:5727: $? = 0
-configure:5744: result: none required
-configure:5763: checking for strlcpy
-configure:5763: cc -o conftest -g -O2   conftest.c  >&5
-/tmp/ccWwcqdF.o: In function `main':
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/conftest.c:53: undefined reference to `strlcpy'
+configure:6343: result: no
+configure:6355: checking for strcasestr
+configure:6355: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6355: $? = 0
+configure:6355: result: yes
+configure:6358: checking for library containing strcasestr
+configure:6389: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6389: $? = 0
+configure:6406: result: none required
+configure:6425: checking for memmem
+configure:6425: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6425: $? = 0
+configure:6425: result: yes
+configure:6428: checking for library containing memmem
+configure:6459: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6459: $? = 0
+configure:6476: result: none required
+configure:6495: checking for strlcpy
+configure:6495: gcc -o conftest -g -O2   conftest.c  >&5
+/tmp/ccG3Idch.o: In function `main':
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/conftest.c:55: undefined reference to `strlcpy'
 collect2: error: ld returned 1 exit status
-configure:5763: $? = 1
+configure:6495: $? = 1
 configure: failed program was:
 | /* confdefs.h */
 | #define PACKAGE_NAME "git"
 | #define PACKAGE_TARNAME "git"
-| #define PACKAGE_VERSION "2.0.5"
-| #define PACKAGE_STRING "git 2.0.5"
+| #define PACKAGE_VERSION "2.1.0"
+| #define PACKAGE_STRING "git 2.1.0"
 | #define PACKAGE_BUGREPORT "git@vger.kernel.org"
 | #define PACKAGE_URL ""
 | #define STDC_HEADERS 1
 | #define HAVE_SYS_TYPES_H 1
 | #define HAVE_SYS_STAT_H 1
 | #define HAVE_STDLIB_H 1
 | #define HAVE_STRING_H 1
 | #define HAVE_MEMORY_H 1
 | #define HAVE_STRINGS_H 1
 | #define HAVE_INTTYPES_H 1
 | #define HAVE_STDINT_H 1
 | #define HAVE_UNISTD_H 1
+| #define HAVE_ALLOCA_H 1
+| #define HAVE_ALLOCA 1
 | /* end confdefs.h.  */
 | /* Define strlcpy to an innocuous variant, in case <limits.h> declares strlcpy.
 |    For example, HP-UX 11i <limits.h> declares gettimeofday.  */
 | #define strlcpy innocuous_strlcpy
 | 
 | /* System header to define __stub macros and hopefully few prototypes,
@@ -841,40 +1016,42 @@
 | main ()
 | {
 | return strlcpy ();
 |   ;
 |   return 0;
 | }
-configure:5763: result: no
-configure:5833: checking for uintmax_t
-configure:5833: cc -c -g -O2  conftest.c >&5
-configure:5833: $? = 0
-configure:5833: cc -c -g -O2  conftest.c >&5
+configure:6495: result: no
+configure:6565: checking for uintmax_t
+configure:6565: gcc -c -g -O2  conftest.c >&5
+configure:6565: $? = 0
+configure:6565: gcc -c -g -O2  conftest.c >&5
 conftest.c: In function 'main':
-conftest.c:26:24: error: expected expression before ')' token
+conftest.c:28:24: error: expected expression before ')' token
  if (sizeof ((uintmax_t)))
                         ^
-configure:5833: $? = 1
+configure:6565: $? = 1
 configure: failed program was:
 | /* confdefs.h */
 | #define PACKAGE_NAME "git"
 | #define PACKAGE_TARNAME "git"
-| #define PACKAGE_VERSION "2.0.5"
-| #define PACKAGE_STRING "git 2.0.5"
+| #define PACKAGE_VERSION "2.1.0"
+| #define PACKAGE_STRING "git 2.1.0"
 | #define PACKAGE_BUGREPORT "git@vger.kernel.org"
 | #define PACKAGE_URL ""
 | #define STDC_HEADERS 1
 | #define HAVE_SYS_TYPES_H 1
 | #define HAVE_SYS_STAT_H 1
 | #define HAVE_STDLIB_H 1
 | #define HAVE_STRING_H 1
 | #define HAVE_MEMORY_H 1
 | #define HAVE_STRINGS_H 1
 | #define HAVE_INTTYPES_H 1
 | #define HAVE_STDINT_H 1
 | #define HAVE_UNISTD_H 1
+| #define HAVE_ALLOCA_H 1
+| #define HAVE_ALLOCA 1
 | /* end confdefs.h.  */
 | 
 | #include <inttypes.h>
 | 
 | 
 | int
@@ -882,85 +1059,87 @@
 | {
 | if (sizeof ((uintmax_t)))
 | 	    return 0;
 |   ;
 |   return 0;
 | }
-configure:5833: result: yes
-configure:5847: checking for strtoumax
-configure:5847: cc -o conftest -g -O2   conftest.c  >&5
-configure:5847: $? = 0
-configure:5847: result: yes
-configure:5850: checking for library containing strtoumax
-configure:5881: cc -o conftest -g -O2   conftest.c  >&5
-configure:5881: $? = 0
-configure:5898: result: none required
-configure:5917: checking for setenv
-configure:5917: cc -o conftest -g -O2   conftest.c  >&5
-configure:5917: $? = 0
-configure:5917: result: yes
-configure:5920: checking for library containing setenv
-configure:5951: cc -o conftest -g -O2   conftest.c  >&5
-configure:5951: $? = 0
-configure:5968: result: none required
-configure:5987: checking for unsetenv
-configure:5987: cc -o conftest -g -O2   conftest.c  >&5
-configure:5987: $? = 0
-configure:5987: result: yes
-configure:5990: checking for library containing unsetenv
-configure:6021: cc -o conftest -g -O2   conftest.c  >&5
-configure:6021: $? = 0
-configure:6038: result: none required
-configure:6057: checking for mkdtemp
-configure:6057: cc -o conftest -g -O2   conftest.c  >&5
-configure:6057: $? = 0
-configure:6057: result: yes
-configure:6060: checking for library containing mkdtemp
-configure:6091: cc -o conftest -g -O2   conftest.c  >&5
-configure:6091: $? = 0
-configure:6108: result: none required
-configure:6127: checking for mkstemps
-configure:6127: cc -o conftest -g -O2   conftest.c  >&5
-configure:6127: $? = 0
-configure:6127: result: yes
-configure:6130: checking for library containing mkstemps
-configure:6161: cc -o conftest -g -O2   conftest.c  >&5
-configure:6161: $? = 0
-configure:6178: result: none required
-configure:6197: checking for initgroups
-configure:6197: cc -o conftest -g -O2   conftest.c  >&5
-configure:6197: $? = 0
-configure:6197: result: yes
-configure:6200: checking for library containing initgroups
-configure:6231: cc -o conftest -g -O2   conftest.c  >&5
-configure:6231: $? = 0
-configure:6248: result: none required
-configure:6308: checking for POSIX Threads with ''
-configure:6333: cc -o conftest  -g -O2   conftest.c  >&5
-/tmp/ccT2No74.o: In function `main':
-/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/conftest.c:30: undefined reference to `pthread_key_create'
+configure:6565: result: yes
+configure:6579: checking for strtoumax
+configure:6579: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6579: $? = 0
+configure:6579: result: yes
+configure:6582: checking for library containing strtoumax
+configure:6613: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6613: $? = 0
+configure:6630: result: none required
+configure:6649: checking for setenv
+configure:6649: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6649: $? = 0
+configure:6649: result: yes
+configure:6652: checking for library containing setenv
+configure:6683: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6683: $? = 0
+configure:6700: result: none required
+configure:6719: checking for unsetenv
+configure:6719: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6719: $? = 0
+configure:6719: result: yes
+configure:6722: checking for library containing unsetenv
+configure:6753: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6753: $? = 0
+configure:6770: result: none required
+configure:6789: checking for mkdtemp
+configure:6789: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6789: $? = 0
+configure:6789: result: yes
+configure:6792: checking for library containing mkdtemp
+configure:6823: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6823: $? = 0
+configure:6840: result: none required
+configure:6859: checking for mkstemps
+configure:6859: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6859: $? = 0
+configure:6859: result: yes
+configure:6862: checking for library containing mkstemps
+configure:6893: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6893: $? = 0
+configure:6910: result: none required
+configure:6929: checking for initgroups
+configure:6929: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6929: $? = 0
+configure:6929: result: yes
+configure:6932: checking for library containing initgroups
+configure:6963: gcc -o conftest -g -O2   conftest.c  >&5
+configure:6963: $? = 0
+configure:6980: result: none required
+configure:7040: checking for POSIX Threads with ''
+configure:7065: gcc -o conftest  -g -O2   conftest.c  >&5
+/tmp/ccKSMagG.o: In function `main':
+/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/conftest.c:32: undefined reference to `pthread_key_create'
 collect2: error: ld returned 1 exit status
-configure:6333: $? = 1
+configure:7065: $? = 1
 configure: failed program was:
 | /* confdefs.h */
 | #define PACKAGE_NAME "git"
 | #define PACKAGE_TARNAME "git"
-| #define PACKAGE_VERSION "2.0.5"
-| #define PACKAGE_STRING "git 2.0.5"
+| #define PACKAGE_VERSION "2.1.0"
+| #define PACKAGE_STRING "git 2.1.0"
 | #define PACKAGE_BUGREPORT "git@vger.kernel.org"
 | #define PACKAGE_URL ""
 | #define STDC_HEADERS 1
 | #define HAVE_SYS_TYPES_H 1
 | #define HAVE_SYS_STAT_H 1
 | #define HAVE_STDLIB_H 1
 | #define HAVE_STRING_H 1
 | #define HAVE_MEMORY_H 1
 | #define HAVE_STRINGS_H 1
 | #define HAVE_INTTYPES_H 1
 | #define HAVE_STDINT_H 1
 | #define HAVE_UNISTD_H 1
+| #define HAVE_ALLOCA_H 1
+| #define HAVE_ALLOCA 1
 | /* end confdefs.h.  */
 | 
 | 
 | #include <pthread.h>
 | 
 | int
@@ -976,35 +1155,37 @@
 | 	retcode |= pthread_mutex_unlock(&test_mutex);
 | 	return retcode;
 | 
 |   ;
 |   return 0;
 | }
-configure:6343: result: no
-configure:6308: checking for POSIX Threads with '-mt'
-configure:6333: cc -o conftest -mt -g -O2   conftest.c  >&5
-cc: error: unrecognized command line option '-mt'
-configure:6333: $? = 1
+configure:7075: result: no
+configure:7040: checking for POSIX Threads with '-mt'
+configure:7065: gcc -o conftest -mt -g -O2   conftest.c  >&5
+gcc: error: unrecognized command line option '-mt'
+configure:7065: $? = 1
 configure: failed program was:
 | /* confdefs.h */
 | #define PACKAGE_NAME "git"
 | #define PACKAGE_TARNAME "git"
-| #define PACKAGE_VERSION "2.0.5"
-| #define PACKAGE_STRING "git 2.0.5"
+| #define PACKAGE_VERSION "2.1.0"
+| #define PACKAGE_STRING "git 2.1.0"
 | #define PACKAGE_BUGREPORT "git@vger.kernel.org"
 | #define PACKAGE_URL ""
 | #define STDC_HEADERS 1
 | #define HAVE_SYS_TYPES_H 1
 | #define HAVE_SYS_STAT_H 1
 | #define HAVE_STDLIB_H 1
 | #define HAVE_STRING_H 1
 | #define HAVE_MEMORY_H 1
 | #define HAVE_STRINGS_H 1
 | #define HAVE_INTTYPES_H 1
 | #define HAVE_STDINT_H 1
 | #define HAVE_UNISTD_H 1
+| #define HAVE_ALLOCA_H 1
+| #define HAVE_ALLOCA 1
 | /* end confdefs.h.  */
 | 
 | 
 | #include <pthread.h>
 | 
 | int
@@ -1020,36 +1201,36 @@
 | 	retcode |= pthread_mutex_unlock(&test_mutex);
 | 	return retcode;
 | 
 |   ;
 |   return 0;
 | }
-configure:6343: result: no
-configure:6308: checking for POSIX Threads with '-pthread'
-configure:6333: cc -o conftest -pthread -g -O2   conftest.c  >&5
-configure:6333: $? = 0
-configure:6334: result: yes
-configure:6600: creating ./config.status
+configure:7075: result: no
+configure:7040: checking for POSIX Threads with '-pthread'
+configure:7065: gcc -o conftest -pthread -g -O2   conftest.c  >&5
+configure:7065: $? = 0
+configure:7066: result: yes
+configure:7332: creating ./config.status
 
 ## ---------------------- ##
 ## Running config.status. ##
 ## ---------------------- ##
 
-This file was extended by git config.status 2.0.5, which was
-generated by GNU Autoconf 2.69.  Invocation command line was
+This file was extended by git config.status 2.1.0, which was
+generated by GNU Autoconf 2.68.  Invocation command line was
 
   CONFIG_FILES    = 
   CONFIG_HEADERS  = 
   CONFIG_LINKS    = 
   CONFIG_COMMANDS = 
   $ ./config.status 
 
 on sarah-Erazer-X310
 
-config.status:791: creating config.mak.autogen
-config.status:952: executing config.mak.autogen commands
+config.status:805: creating config.mak.autogen
+config.status:966: executing config.mak.autogen commands
 
 ## ---------------- ##
 ## Cache variables. ##
 ## ---------------- ##
 
 ac_cv_c_compiler_gnu=yes
@@ -1071,12 +1252,13 @@
 ac_cv_env_build_alias_value=
 ac_cv_env_host_alias_set=
 ac_cv_env_host_alias_value=
 ac_cv_env_target_alias_set=
 ac_cv_env_target_alias_value=
 ac_cv_fread_reads_directories=no
+ac_cv_func_alloca_works=yes
 ac_cv_func_getaddrinfo=yes
 ac_cv_func_hstrerror=yes
 ac_cv_func_inet_ntop=yes
 ac_cv_func_inet_pton=yes
 ac_cv_func_initgroups=yes
 ac_cv_func_memmem=yes
@@ -1115,47 +1297,50 @@
 ac_cv_member_struct_dirent_d_ino=yes
 ac_cv_member_struct_dirent_d_type=yes
 ac_cv_member_struct_passwd_pw_gecos=yes
 ac_cv_objext=o
 ac_cv_path_EGREP='/bin/grep -E'
 ac_cv_path_GREP=/bin/grep
-ac_cv_prog_CPP='cc -E'
+ac_cv_prog_CPP='gcc -E'
 ac_cv_prog_DIFF=diff
 ac_cv_prog_TAR=tar
 ac_cv_prog_ac_ct_AR=ar
-ac_cv_prog_ac_ct_CC=cc
+ac_cv_prog_ac_ct_CC=gcc
 ac_cv_prog_cc_c89=
 ac_cv_prog_cc_g=yes
 ac_cv_search_getaddrinfo='none required'
 ac_cv_search_initgroups='none required'
 ac_cv_search_memmem='none required'
 ac_cv_search_mkdtemp='none required'
 ac_cv_search_mkstemps='none required'
 ac_cv_search_setenv='none required'
 ac_cv_search_strcasestr='none required'
 ac_cv_search_strtoumax='none required'
 ac_cv_search_unsetenv='none required'
 ac_cv_snprintf_returns_bogus=no
+ac_cv_type_size_t=yes
 ac_cv_type_socklen_t=yes
 ac_cv_type_struct_addrinfo=yes
 ac_cv_type_struct_sockaddr_storage=yes
 ac_cv_type_uintmax_t=yes
+ac_cv_working_alloca_h=yes
 git_cv_ld_dashr=no
 git_cv_ld_wl_rpath=yes
 
 ## ----------------- ##
 ## Output variables. ##
 ## ----------------- ##
 
+ALLOCA=''
 AR='ar'
 ASCIIDOC=''
-CC='cc'
+CC='gcc'
 CFLAGS='-g -O2'
-CPP='cc -E'
+CPP='gcc -E'
 CPPFLAGS=''
-DEFS='-DPACKAGE_NAME=\"git\" -DPACKAGE_TARNAME=\"git\" -DPACKAGE_VERSION=\"2.0.5\" -DPACKAGE_STRING=\"git\ 2.0.5\" -DPACKAGE_BUGREPORT=\"git@vger.kernel.org\" -DPACKAGE_URL=\"\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1'
+DEFS='-DPACKAGE_NAME=\"git\" -DPACKAGE_TARNAME=\"git\" -DPACKAGE_VERSION=\"2.1.0\" -DPACKAGE_STRING=\"git\ 2.1.0\" -DPACKAGE_BUGREPORT=\"git@vger.kernel.org\" -DPACKAGE_URL=\"\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_ALLOCA_H=1 -DHAVE_ALLOCA=1'
 DIFF='diff'
 ECHO_C=''
 ECHO_N='-n'
 ECHO_T=''
 EGREP='/bin/grep -E'
 EXEEXT=''
@@ -1164,22 +1349,22 @@
 LIBOBJS=''
 LIBS=''
 LTLIBOBJS=''
 OBJEXT='o'
 PACKAGE_BUGREPORT='git@vger.kernel.org'
 PACKAGE_NAME='git'
-PACKAGE_STRING='git 2.0.5'
+PACKAGE_STRING='git 2.1.0'
 PACKAGE_TARNAME='git'
 PACKAGE_URL=''
-PACKAGE_VERSION='2.0.5'
+PACKAGE_VERSION='2.1.0'
 PATH_SEPARATOR=':'
 SHELL='/bin/bash'
 TAR='tar'
 TCLTK_PATH='wish'
 ac_ct_AR='ar'
-ac_ct_CC='cc'
+ac_ct_CC='gcc'
 bindir='${exec_prefix}/bin'
 build_alias=''
 datadir='${datarootdir}'
 datarootdir='${prefix}/share'
 docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
 dvidir='${docdir}'
@@ -1207,22 +1392,24 @@
 ## confdefs.h. ##
 ## ----------- ##
 
 /* confdefs.h */
 #define PACKAGE_NAME "git"
 #define PACKAGE_TARNAME "git"
-#define PACKAGE_VERSION "2.0.5"
-#define PACKAGE_STRING "git 2.0.5"
+#define PACKAGE_VERSION "2.1.0"
+#define PACKAGE_STRING "git 2.1.0"
 #define PACKAGE_BUGREPORT "git@vger.kernel.org"
 #define PACKAGE_URL ""
 #define STDC_HEADERS 1
 #define HAVE_SYS_TYPES_H 1
 #define HAVE_SYS_STAT_H 1
 #define HAVE_STDLIB_H 1
 #define HAVE_STRING_H 1
 #define HAVE_MEMORY_H 1
 #define HAVE_STRINGS_H 1
 #define HAVE_INTTYPES_H 1
 #define HAVE_STDINT_H 1
 #define HAVE_UNISTD_H 1
+#define HAVE_ALLOCA_H 1
+#define HAVE_ALLOCA 1
 
 configure: exit 0
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/config.mak.autogen /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/config.mak.autogen
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/config.mak.autogen	2017-10-10 09:54:19.748750387 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/config.mak.autogen	2017-10-10 09:57:49.939594679 +0800
@@ -1,10 +1,10 @@
 # git Makefile configuration, included in main Makefile
 # config.mak.autogen.  Generated from config.mak.in by configure.
 
-CC = cc
+CC = gcc
 CFLAGS = -g -O2
 CPPFLAGS = 
 LDFLAGS = 
 AR = ar
 TAR = tar
 DIFF = diff
@@ -21,12 +21,13 @@
 docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
 
 mandir = ${datarootdir}/man
 htmldir = ${docdir}
 
 AUTOCONFIGURED=YesPlease
+HAVE_ALLOCA_H=YesPlease
 INLINE=
 CC_LD_DYNPATH=-Wl,-rpath,
 TCLTK_PATH=wish
 NEEDS_SSL_WITH_CRYPTO=
 NO_OPENSSL=YesPlease
 NO_CURL=YesPlease
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/config.mak.uname /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/config.mak.uname
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/config.mak.uname	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/config.mak.uname	2014-08-16 06:26:55.000000000 +0800
@@ -25,19 +25,22 @@
 	BASIC_CFLAGS += -D_OSF_SOURCE
 	SOCKLEN_T = int
 	NO_STRTOULL = YesPlease
 	NO_NSEC = YesPlease
 endif
 ifeq ($(uname_S),Linux)
+	HAVE_ALLOCA_H = YesPlease
 	NO_STRLCPY = YesPlease
 	NO_MKSTEMPS = YesPlease
 	HAVE_PATHS_H = YesPlease
 	LIBC_CONTAINS_LIBINTL = YesPlease
 	HAVE_DEV_TTY = YesPlease
+	HAVE_CLOCK_GETTIME = YesPlease
 endif
 ifeq ($(uname_S),GNU/kFreeBSD)
+	HAVE_ALLOCA_H = YesPlease
 	NO_STRLCPY = YesPlease
 	NO_MKSTEMPS = YesPlease
 	HAVE_PATHS_H = YesPlease
 	DIR_HAS_BSD_GROUP_SEMANTICS = YesPlease
 	LIBC_CONTAINS_LIBINTL = YesPlease
 endif
@@ -94,19 +97,19 @@
 	endif
 	NO_MEMMEM = YesPlease
 	USE_ST_TIMESPEC = YesPlease
 	HAVE_DEV_TTY = YesPlease
 	COMPAT_OBJS += compat/precompose_utf8.o
 	BASIC_CFLAGS += -DPRECOMPOSE_UNICODE
-	BASIC_CFLAGS += -DPROTECT_HFS_DEFAULT=1
 endif
 ifeq ($(uname_S),SunOS)
 	NEEDS_SOCKET = YesPlease
 	NEEDS_NSL = YesPlease
 	SHELL_PATH = /bin/bash
 	SANE_TOOL_PATH = /usr/xpg6/bin:/usr/xpg4/bin
+	HAVE_ALLOCA_H = YesPlease
 	NO_STRCASESTR = YesPlease
 	NO_MEMMEM = YesPlease
 	NO_MKDTEMP = YesPlease
 	NO_MKSTEMPS = YesPlease
 	NO_REGEX = YesPlease
 	NO_MSGFMT_EXTENDED_OPTIONS = YesPlease
@@ -143,13 +146,13 @@
 		NO_SETENV = YesPlease
 		NO_STRTOUMAX = YesPlease
 		GIT_TEST_CMP = cmp
 	endif
 	INSTALL = /usr/ucb/install
 	TAR = gtar
-	BASIC_CFLAGS += -D__EXTENSIONS__ -D__sun__ -DHAVE_ALLOCA_H
+	BASIC_CFLAGS += -D__EXTENSIONS__ -D__sun__
 endif
 ifeq ($(uname_O),Cygwin)
 	ifeq ($(shell expr "$(uname_R)" : '1\.[1-6]\.'),4)
 		NO_D_TYPE_IN_DIRENT = YesPlease
 		NO_D_INO_IN_DIRENT = YesPlease
 		NO_STRCASESTR = YesPlease
@@ -162,12 +165,13 @@
 		# On some boxes NO_MMAP is needed, and not so elsewhere.
 		# Try commenting this out if you suspect MMAP is more efficient
 		NO_MMAP = YesPlease
 	else
 		NO_REGEX = UnfortunatelyYes
 	endif
+	HAVE_ALLOCA_H = YesPlease
 	NEEDS_LIBICONV = YesPlease
 	NO_FAST_WORKING_DIRECTORY = UnfortunatelyYes
 	NO_ST_BLOCKS_IN_STRUCT_STAT = YesPlease
 	X = .exe
 	UNRELIABLE_FSTAT = UnfortunatelyYes
 	SPARSE_FLAGS = -isystem /usr/include/w32api -Wno-one-bit-signed-bitfield
@@ -236,12 +240,13 @@
 		INLINE = ''
 	endif
 	GIT_TEST_CMP = cmp
 endif
 ifeq ($(uname_S),GNU)
 	# GNU/Hurd
+	HAVE_ALLOCA_H = YesPlease
 	NO_STRLCPY = YesPlease
 	NO_MKSTEMPS = YesPlease
 	HAVE_PATHS_H = YesPlease
 	LIBC_CONTAINS_LIBINTL = YesPlease
 endif
 ifeq ($(uname_S),IRIX)
@@ -310,21 +315,21 @@
 	endif
 	GIT_TEST_CMP = cmp
 endif
 ifeq ($(uname_S),Windows)
 	GIT_VERSION := $(GIT_VERSION).MSVC
 	pathsep = ;
+	HAVE_ALLOCA_H = YesPlease
 	NO_PREAD = YesPlease
 	NEEDS_CRYPTO_WITH_SSL = YesPlease
 	NO_LIBGEN_H = YesPlease
 	NO_POLL = YesPlease
 	NO_SYMLINK_HEAD = YesPlease
 	NO_IPV6 = YesPlease
 	NO_UNIX_SOCKETS = YesPlease
 	NO_SETENV = YesPlease
-	NO_UNSETENV = YesPlease
 	NO_STRCASESTR = YesPlease
 	NO_STRLCPY = YesPlease
 	NO_MEMMEM = YesPlease
 	# NEEDS_LIBICONV = YesPlease
 	NO_ICONV = YesPlease
 	NO_STRTOUMAX = YesPlease
@@ -346,32 +351,32 @@
 	ETAGS_TARGET = ETAGS
 	NO_INET_PTON = YesPlease
 	NO_INET_NTOP = YesPlease
 	NO_POSIX_GOODIES = UnfortunatelyYes
 	NATIVE_CRLF = YesPlease
 	DEFAULT_HELP_FORMAT = html
+	NO_D_INO_IN_DIRENT = YesPlease
 
 	CC = compat/vcbuild/scripts/clink.pl
 	AR = compat/vcbuild/scripts/lib.pl
 	CFLAGS =
 	BASIC_CFLAGS = -nologo -I. -I../zlib -Icompat/vcbuild -Icompat/vcbuild/include -DWIN32 -D_CONSOLE -DHAVE_STRING_H -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE
 	COMPAT_OBJS = compat/msvc.o compat/winansi.o \
 		compat/win32/pthread.o compat/win32/syslog.o \
 		compat/win32/dirent.o
-	COMPAT_CFLAGS = -D__USE_MINGW_ACCESS -DNOGDI -DHAVE_STRING_H -DHAVE_ALLOCA_H -Icompat -Icompat/regex -Icompat/win32 -DSTRIP_EXTENSION=\".exe\"
-	BASIC_LDFLAGS = -IGNORE:4217 -IGNORE:4049 -NOLOGO -SUBSYSTEM:CONSOLE -NODEFAULTLIB:MSVCRT.lib
+	COMPAT_CFLAGS = -D__USE_MINGW_ACCESS -DNOGDI -DHAVE_STRING_H -Icompat -Icompat/regex -Icompat/win32 -DSTRIP_EXTENSION=\".exe\"
+	BASIC_LDFLAGS = -IGNORE:4217 -IGNORE:4049 -NOLOGO -SUBSYSTEM:CONSOLE
 	EXTLIBS = user32.lib advapi32.lib shell32.lib wininet.lib ws2_32.lib invalidcontinue.obj
 	PTHREAD_LIBS =
 	lib =
-	BASIC_CFLAGS += -DPROTECT_NTFS_DEFAULT=1
 ifndef DEBUG
-	BASIC_CFLAGS += -GL -Os -MT
+	BASIC_CFLAGS += -GL -Os -MD
 	BASIC_LDFLAGS += -LTCG
 	AR += -LTCG
 else
-	BASIC_CFLAGS += -Zi -MTd
+	BASIC_CFLAGS += -Zi -MDd
 endif
 	X = .exe
 endif
 ifeq ($(uname_S),Interix)
 	NO_INITGROUPS = YesPlease
 	NO_IPV6 = YesPlease
@@ -463,20 +468,20 @@
 	SHELL_PATH = /usr/local/bin/bash
 	# as of H06.25/J06.14, we might better use this
 	#SHELL_PATH = /usr/coreutils/bin/bash
 endif
 ifneq (,$(findstring MINGW,$(uname_S)))
 	pathsep = ;
+	HAVE_ALLOCA_H = YesPlease
 	NO_PREAD = YesPlease
 	NEEDS_CRYPTO_WITH_SSL = YesPlease
 	NO_LIBGEN_H = YesPlease
 	NO_POLL = YesPlease
 	NO_SYMLINK_HEAD = YesPlease
 	NO_UNIX_SOCKETS = YesPlease
 	NO_SETENV = YesPlease
-	NO_UNSETENV = YesPlease
 	NO_STRCASESTR = YesPlease
 	NO_STRLCPY = YesPlease
 	NO_MEMMEM = YesPlease
 	NEEDS_LIBICONV = YesPlease
 	NO_STRTOUMAX = YesPlease
 	NO_MKDTEMP = YesPlease
@@ -495,18 +500,18 @@
 	BLK_SHA1 = YesPlease
 	ETAGS_TARGET = ETAGS
 	NO_INET_PTON = YesPlease
 	NO_INET_NTOP = YesPlease
 	NO_POSIX_GOODIES = UnfortunatelyYes
 	DEFAULT_HELP_FORMAT = html
+	NO_D_INO_IN_DIRENT = YesPlease
 	COMPAT_CFLAGS += -D__USE_MINGW_ACCESS -D_USE_32BIT_TIME_T -DNOGDI -Icompat -Icompat/win32
 	COMPAT_CFLAGS += -DSTRIP_EXTENSION=\".exe\"
 	COMPAT_OBJS += compat/mingw.o compat/winansi.o \
 		compat/win32/pthread.o compat/win32/syslog.o \
 		compat/win32/dirent.o
-	BASIC_CFLAGS += -DPROTECT_NTFS_DEFAULT=1
 	BASIC_LDFLAGS += -Wl,--large-address-aware
 	EXTLIBS += -lws2_32
 	GITLIBS += git.res
 	PTHREAD_LIBS =
 	RC = windres -O coff
 	NATIVE_CRLF = YesPlease
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/config.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/config.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/config.status /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/config.status
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/config.status	2017-10-10 09:54:19.708770389 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/config.status	2017-10-10 09:57:49.911608681 +0800
@@ -282,22 +282,22 @@
 if (echo >conf$$.file) 2>/dev/null; then
   if ln -s conf$$.file conf$$ 2>/dev/null; then
     as_ln_s='ln -s'
     # ... but there are two gotchas:
     # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
     # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
-    # In both cases, we have to default to `cp -pR'.
+    # In both cases, we have to default to `cp -p'.
     ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
-      as_ln_s='cp -pR'
+      as_ln_s='cp -p'
   elif ln conf$$.file conf$$ 2>/dev/null; then
     as_ln_s=ln
   else
-    as_ln_s='cp -pR'
+    as_ln_s='cp -p'
   fi
 else
-  as_ln_s='cp -pR'
+  as_ln_s='cp -p'
 fi
 rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
 rmdir conf$$.dir 2>/dev/null
 
 
 # as_fn_mkdir_p
@@ -351,22 +351,34 @@
   as_mkdir_p='mkdir -p "$as_dir"'
 else
   test -d ./-p && rmdir ./-p
   as_mkdir_p=false
 fi
 
-
-# as_fn_executable_p FILE
-# -----------------------
-# Test if FILE is an executable regular file.
-as_fn_executable_p ()
-{
-  test -f "$1" && test -x "$1"
-} # as_fn_executable_p
-as_test_x='test -x'
-as_executable_p=as_fn_executable_p
+if test -x / >/dev/null 2>&1; then
+  as_test_x='test -x'
+else
+  if ls -dL / >/dev/null 2>&1; then
+    as_ls_L_option=L
+  else
+    as_ls_L_option=
+  fi
+  as_test_x='
+    eval sh -c '\''
+      if test -d "$1"; then
+	test -d "$1/.";
+      else
+	case $1 in #(
+	-*)set "./$1";;
+	esac;
+	case `ls -ld'$as_ls_L_option' "$1" 2>/dev/null` in #((
+	???[sx]*):;;*)false;;esac;fi
+    '\'' sh
+  '
+fi
+as_executable_p=$as_test_x
 
 # Sed expression to map a string onto a valid CPP name.
 as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"
 
 # Sed expression to map a string onto a valid variable name.
 as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"
@@ -377,14 +389,14 @@
 ## Main body of $CONFIG_STATUS script. ##
 ## ----------------------------------- ##
 # Save the log message, to keep $0 and so on meaningful, and to
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by git $as_me 2.0.5, which was
-generated by GNU Autoconf 2.69.  Invocation command line was
+This file was extended by git $as_me 2.1.0, which was
+generated by GNU Autoconf 2.68.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
   CONFIG_HEADERS  = $CONFIG_HEADERS
   CONFIG_LINKS    = $CONFIG_LINKS
   CONFIG_COMMANDS = $CONFIG_COMMANDS
   $ $0 $@
@@ -420,21 +432,21 @@
 $config_commands
 
 Report bugs to <git@vger.kernel.org>."
 
 ac_cs_config=""
 ac_cs_version="\
-git config.status 2.0.5
-configured by ./configure, generated by GNU Autoconf 2.69,
+git config.status 2.1.0
+configured by ./configure, generated by GNU Autoconf 2.68,
   with options \"$ac_cs_config\"
 
-Copyright (C) 2012 Free Software Foundation, Inc.
+Copyright (C) 2010 Free Software Foundation, Inc.
 This config.status script is free software; the Free Software Foundation
 gives unlimited permission to copy, distribute and modify it."
 
-ac_pwd='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5'
+ac_pwd='/usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0'
 srcdir='.'
 test -n "$AWK" || AWK=awk
 # The default lists apply if the user does not specify any file.
 ac_need_defaults=:
 while test $# != 0
 do
@@ -496,13 +508,13 @@
 if $ac_cs_silent; then
   exec 6>/dev/null
   ac_configure_extra_args="$ac_configure_extra_args --silent"
 fi
 
 if $ac_cs_recheck; then
-  set X /bin/bash './configure'  $ac_configure_extra_args --no-create --no-recursion
+  set X '/bin/bash' './configure'  $ac_configure_extra_args --no-create --no-recursion
   shift
   $as_echo "running CONFIG_SHELL=/bin/bash $*" >&6
   CONFIG_SHELL='/bin/bash'
   export CONFIG_SHELL
   exec "$@"
 fi
@@ -519,12 +531,13 @@
 #
 # INIT-COMMANDS
 #
 config_file=config.mak.autogen
                         config_appended_defs="
 AUTOCONFIGURED=YesPlease
+HAVE_ALLOCA_H=YesPlease
 INLINE=
 CC_LD_DYNPATH=-Wl,-rpath,
 TCLTK_PATH=wish
 NEEDS_SSL_WITH_CRYPTO=
 NO_OPENSSL=YesPlease
 NO_CURL=YesPlease
@@ -642,38 +655,39 @@
 fi
 
 echo 'BEGIN {' >"$ac_tmp/subs1.awk" &&
 cat >>"$ac_tmp/subs1.awk" <<\_ACAWK &&
 S["LTLIBOBJS"]=""
 S["LIBOBJS"]=""
-S["EGREP"]="/bin/grep -E"
-S["GREP"]="/bin/grep"
-S["CPP"]="cc -E"
 S["ASCIIDOC"]=""
 S["TCLTK_PATH"]="wish"
 S["DIFF"]="diff"
 S["TAR"]="tar"
 S["ac_ct_AR"]="ar"
 S["AR"]="ar"
+S["ALLOCA"]=""
+S["EGREP"]="/bin/grep -E"
+S["GREP"]="/bin/grep"
+S["CPP"]="gcc -E"
 S["OBJEXT"]="o"
 S["EXEEXT"]=""
-S["ac_ct_CC"]="cc"
+S["ac_ct_CC"]="gcc"
 S["CPPFLAGS"]=""
 S["LDFLAGS"]=""
 S["CFLAGS"]="-g -O2"
-S["CC"]="cc"
+S["CC"]="gcc"
 S["target_alias"]=""
 S["host_alias"]=""
 S["build_alias"]=""
 S["LIBS"]=""
 S["ECHO_T"]=""
 S["ECHO_N"]="-n"
 S["ECHO_C"]=""
-S["DEFS"]="-DPACKAGE_NAME=\\\"git\\\" -DPACKAGE_TARNAME=\\\"git\\\" -DPACKAGE_VERSION=\\\"2.0.5\\\" -DPACKAGE_STRING=\\\"git\\ 2.0.5\\\" -DPACKAGE_BUGREPORT=\\\"git@vger.kernel.o"\
+S["DEFS"]="-DPACKAGE_NAME=\\\"git\\\" -DPACKAGE_TARNAME=\\\"git\\\" -DPACKAGE_VERSION=\\\"2.1.0\\\" -DPACKAGE_STRING=\\\"git\\ 2.1.0\\\" -DPACKAGE_BUGREPORT=\\\"git@vger.kernel.o"\
 "rg\\\" -DPACKAGE_URL=\\\"\\\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRIN"\
-"GS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1"
+"GS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_ALLOCA_H=1 -DHAVE_ALLOCA=1"
 S["mandir"]="${datarootdir}/man"
 S["localedir"]="${datarootdir}/locale"
 S["libdir"]="${exec_prefix}/lib"
 S["psdir"]="${docdir}"
 S["pdfdir"]="${docdir}"
 S["dvidir"]="${docdir}"
@@ -692,14 +706,14 @@
 S["bindir"]="${exec_prefix}/bin"
 S["program_transform_name"]="s,x,x,"
 S["prefix"]="/usr/local"
 S["exec_prefix"]="${prefix}"
 S["PACKAGE_URL"]=""
 S["PACKAGE_BUGREPORT"]="git@vger.kernel.org"
-S["PACKAGE_STRING"]="git 2.0.5"
-S["PACKAGE_VERSION"]="2.0.5"
+S["PACKAGE_STRING"]="git 2.1.0"
+S["PACKAGE_VERSION"]="2.1.0"
 S["PACKAGE_TARNAME"]="git"
 S["PACKAGE_NAME"]="git"
 S["PATH_SEPARATOR"]=":"
 S["SHELL"]="/bin/bash"
 _ACAWK
 cat >>"$ac_tmp/subs1.awk" <<_ACAWK &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/configure /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/configure
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/configure	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/configure	2014-08-16 06:26:55.000000000 +0800
@@ -1,14 +1,16 @@
 #! /bin/sh
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.69 for git 2.0.5.
+# Generated by GNU Autoconf 2.68 for git 2.1.0.
 #
 # Report bugs to <git@vger.kernel.org>.
 #
 #
-# Copyright (C) 1992-1996, 1998-2012 Free Software Foundation, Inc.
+# Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001,
+# 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010 Free Software
+# Foundation, Inc.
 #
 #
 # This configure script is free software; the Free Software Foundation
 # gives unlimited permission to copy, distribute and modify it.
 ## -------------------- ##
 ## M4sh Initialization. ##
@@ -131,37 +133,12 @@
 LANGUAGE=C
 export LANGUAGE
 
 # CDPATH.
 (unset CDPATH) >/dev/null 2>&1 && unset CDPATH
 
-# Use a proper internal environment variable to ensure we don't fall
-  # into an infinite loop, continuously re-executing ourselves.
-  if test x"${_as_can_reexec}" != xno && test "x$CONFIG_SHELL" != x; then
-    _as_can_reexec=no; export _as_can_reexec;
-    # We cannot yet assume a decent shell, so we have to provide a
-# neutralization value for shells without unset; and this also
-# works around shells that cannot unset nonexistent variables.
-# Preserve -v and -x to the replacement shell.
-BASH_ENV=/dev/null
-ENV=/dev/null
-(unset BASH_ENV) >/dev/null 2>&1 && unset BASH_ENV ENV
-case $- in # ((((
-  *v*x* | *x*v* ) as_opts=-vx ;;
-  *v* ) as_opts=-v ;;
-  *x* ) as_opts=-x ;;
-  * ) as_opts= ;;
-esac
-exec $CONFIG_SHELL $as_opts "$as_myself" ${1+"$@"}
-# Admittedly, this is quite paranoid, since all the known shells bail
-# out after a failed `exec'.
-$as_echo "$0: could not re-execute with $CONFIG_SHELL" >&2
-as_fn_exit 255
-  fi
-  # We don't want this to propagate to other subprocesses.
-          { _as_can_reexec=; unset _as_can_reexec;}
 if test "x$CONFIG_SHELL" = x; then
   as_bourne_compatible="if test -n \"\${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :
   emulate sh
   NULLCMD=:
   # Pre-4.2 versions of Zsh do word splitting on \${1+\"\$@\"}, which
   # is contrary to our usage.  Disable this feature.
@@ -189,14 +166,13 @@
 as_fn_ret_failure && { exitcode=1; echo as_fn_ret_failure succeeded.; }
 if ( set x; as_fn_ret_success y && test x = \"\$1\" ); then :
 
 else
   exitcode=1; echo positional parameters were not saved.
 fi
-test x\$exitcode = x0 || exit 1
-test -x / || exit 1"
+test x\$exitcode = x0 || exit 1"
   as_suggested="  as_lineno_1=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_1a=\$LINENO
   as_lineno_2=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_2a=\$LINENO
   eval 'test \"x\$as_lineno_1'\$as_run'\" != \"x\$as_lineno_2'\$as_run'\" &&
   test \"x\`expr \$as_lineno_1'\$as_run' + 1\`\" = \"x\$as_lineno_2'\$as_run'\"' || exit 1
 test \$(( 1 + 1 )) = 2 || exit 1"
   if (eval "$as_required") 2>/dev/null; then :
@@ -235,31 +211,27 @@
   CONFIG_SHELL=$SHELL as_have_required=yes
 fi; }
 IFS=$as_save_IFS
 
 
       if test "x$CONFIG_SHELL" != x; then :
-  export CONFIG_SHELL
-             # We cannot yet assume a decent shell, so we have to provide a
-# neutralization value for shells without unset; and this also
-# works around shells that cannot unset nonexistent variables.
-# Preserve -v and -x to the replacement shell.
-BASH_ENV=/dev/null
-ENV=/dev/null
-(unset BASH_ENV) >/dev/null 2>&1 && unset BASH_ENV ENV
-case $- in # ((((
-  *v*x* | *x*v* ) as_opts=-vx ;;
-  *v* ) as_opts=-v ;;
-  *x* ) as_opts=-x ;;
-  * ) as_opts= ;;
-esac
-exec $CONFIG_SHELL $as_opts "$as_myself" ${1+"$@"}
-# Admittedly, this is quite paranoid, since all the known shells bail
-# out after a failed `exec'.
-$as_echo "$0: could not re-execute with $CONFIG_SHELL" >&2
-exit 255
+  # We cannot yet assume a decent shell, so we have to provide a
+	# neutralization value for shells without unset; and this also
+	# works around shells that cannot unset nonexistent variables.
+	# Preserve -v and -x to the replacement shell.
+	BASH_ENV=/dev/null
+	ENV=/dev/null
+	(unset BASH_ENV) >/dev/null 2>&1 && unset BASH_ENV ENV
+	export CONFIG_SHELL
+	case $- in # ((((
+	  *v*x* | *x*v* ) as_opts=-vx ;;
+	  *v* ) as_opts=-v ;;
+	  *x* ) as_opts=-x ;;
+	  * ) as_opts= ;;
+	esac
+	exec "$CONFIG_SHELL" $as_opts "$as_myself" ${1+"$@"}
 fi
 
     if test x$as_have_required = xno; then :
   $as_echo "$0: This script requires a shell more modern than all"
   $as_echo "$0: the shells that I found on your system."
   if test x${ZSH_VERSION+set} = xset ; then
@@ -356,20 +328,12 @@
     done
     test -z "$as_dirs" || eval "mkdir $as_dirs"
   } || test -d "$as_dir" || as_fn_error $? "cannot create directory $as_dir"
 
 
 } # as_fn_mkdir_p
-
-# as_fn_executable_p FILE
-# -----------------------
-# Test if FILE is an executable regular file.
-as_fn_executable_p ()
-{
-  test -f "$1" && test -x "$1"
-} # as_fn_executable_p
 # as_fn_append VAR VALUE
 # ----------------------
 # Append the text in VALUE to the end of the definition contained in VAR. Take
 # advantage of any shell optimizations that allow amortized linear growth over
 # repeated appends, instead of the typical quadratic growth present in naive
 # implementations.
@@ -485,16 +449,12 @@
       t loop
       s/-\n.*//
     ' >$as_me.lineno &&
   chmod +x "$as_me.lineno" ||
     { $as_echo "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2; as_fn_exit 1; }
 
-  # If we had to re-execute with $CONFIG_SHELL, we're ensured to have
-  # already done that, so ensure we don't try to do so again and fall
-  # in an infinite loop.  This has already happened in practice.
-  _as_can_reexec=no; export _as_can_reexec
   # Don't try to exec as it changes $[0], causing all sort of problems
   # (the dirname of $[0] is not the place where we might find the
   # original and so on.  Autoconf is especially sensitive to this).
   . "./$as_me.lineno"
   # Exit status is that of the last command.
   exit
@@ -523,35 +483,55 @@
 if (echo >conf$$.file) 2>/dev/null; then
   if ln -s conf$$.file conf$$ 2>/dev/null; then
     as_ln_s='ln -s'
     # ... but there are two gotchas:
     # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
     # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
-    # In both cases, we have to default to `cp -pR'.
+    # In both cases, we have to default to `cp -p'.
     ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
-      as_ln_s='cp -pR'
+      as_ln_s='cp -p'
   elif ln conf$$.file conf$$ 2>/dev/null; then
     as_ln_s=ln
   else
-    as_ln_s='cp -pR'
+    as_ln_s='cp -p'
   fi
 else
-  as_ln_s='cp -pR'
+  as_ln_s='cp -p'
 fi
 rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
 rmdir conf$$.dir 2>/dev/null
 
 if mkdir -p . 2>/dev/null; then
   as_mkdir_p='mkdir -p "$as_dir"'
 else
   test -d ./-p && rmdir ./-p
   as_mkdir_p=false
 fi
 
-as_test_x='test -x'
-as_executable_p=as_fn_executable_p
+if test -x / >/dev/null 2>&1; then
+  as_test_x='test -x'
+else
+  if ls -dL / >/dev/null 2>&1; then
+    as_ls_L_option=L
+  else
+    as_ls_L_option=
+  fi
+  as_test_x='
+    eval sh -c '\''
+      if test -d "$1"; then
+	test -d "$1/.";
+      else
+	case $1 in #(
+	-*)set "./$1";;
+	esac;
+	case `ls -ld'$as_ls_L_option' "$1" 2>/dev/null` in #((
+	???[sx]*):;;*)false;;esac;fi
+    '\'' sh
+  '
+fi
+as_executable_p=$as_test_x
 
 # Sed expression to map a string onto a valid CPP name.
 as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"
 
 # Sed expression to map a string onto a valid variable name.
 as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"
@@ -577,14 +557,14 @@
 MFLAGS=
 MAKEFLAGS=
 
 # Identity of this package.
 PACKAGE_NAME='git'
 PACKAGE_TARNAME='git'
-PACKAGE_VERSION='2.0.5'
-PACKAGE_STRING='git 2.0.5'
+PACKAGE_VERSION='2.1.0'
+PACKAGE_STRING='git 2.1.0'
 PACKAGE_BUGREPORT='git@vger.kernel.org'
 PACKAGE_URL=''
 
 ac_unique_file="git.c"
 # Factoring default headers for most tests.
 ac_includes_default="\
@@ -621,21 +601,22 @@
 #ifdef HAVE_UNISTD_H
 # include <unistd.h>
 #endif"
 
 ac_subst_vars='LTLIBOBJS
 LIBOBJS
-EGREP
-GREP
-CPP
 ASCIIDOC
 TCLTK_PATH
 DIFF
 TAR
 ac_ct_AR
 AR
+ALLOCA
+EGREP
+GREP
+CPP
 OBJEXT
 EXEEXT
 ac_ct_CC
 CPPFLAGS
 LDFLAGS
 CFLAGS
@@ -1162,12 +1143,14 @@
 target=$target_alias
 
 # FIXME: To remove some day.
 if test "x$host_alias" != x; then
   if test "x$build_alias" = x; then
     cross_compiling=maybe
+    $as_echo "$as_me: WARNING: if you wanted to set the --build type, don't use --host.
+    If a cross compiler is detected then cross compile mode will be used" >&2
   elif test "x$build_alias" != "x$host_alias"; then
     cross_compiling=yes
   fi
 fi
 
 ac_tool_prefix=
@@ -1247,13 +1230,13 @@
 # Report the --help message.
 #
 if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures git 2.0.5 to adapt to many kinds of systems.
+\`configure' configures git 2.1.0 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
 To assign environment variables (e.g., CC, CFLAGS...), specify them as
 VAR=VALUE.  See below for descriptions of some of the useful variables.
 
@@ -1308,13 +1291,13 @@
   cat <<\_ACEOF
 _ACEOF
 fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of git 2.0.5:";;
+     short | recursive ) echo "Configuration of git 2.1.0:";;
    esac
   cat <<\_ACEOF
 
 Optional Features:
   --disable-option-checking  ignore unrecognized --enable/--with options
   --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
@@ -1447,16 +1430,16 @@
   done
 fi
 
 test -n "$ac_init_help" && exit $ac_status
 if $ac_init_version; then
   cat <<\_ACEOF
-git configure 2.0.5
-generated by GNU Autoconf 2.69
+git configure 2.1.0
+generated by GNU Autoconf 2.68
 
-Copyright (C) 2012 Free Software Foundation, Inc.
+Copyright (C) 2010 Free Software Foundation, Inc.
 This configure script is free software; the Free Software Foundation
 gives unlimited permission to copy, distribute and modify it.
 _ACEOF
   exit
 fi
 
@@ -1499,12 +1482,176 @@
 fi
   eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
   as_fn_set_status $ac_retval
 
 } # ac_fn_c_try_compile
 
+# ac_fn_c_check_type LINENO TYPE VAR INCLUDES
+# -------------------------------------------
+# Tests whether TYPE exists after having included INCLUDES, setting cache
+# variable VAR accordingly.
+ac_fn_c_check_type ()
+{
+  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2" >&5
+$as_echo_n "checking for $2... " >&6; }
+if eval \${$3+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  eval "$3=no"
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+$4
+int
+main ()
+{
+if (sizeof ($2))
+	 return 0;
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+$4
+int
+main ()
+{
+if (sizeof (($2)))
+	    return 0;
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+
+else
+  eval "$3=yes"
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+eval ac_res=\$$3
+	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
+$as_echo "$ac_res" >&6; }
+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
+
+} # ac_fn_c_check_type
+
+# ac_fn_c_try_cpp LINENO
+# ----------------------
+# Try to preprocess conftest.$ac_ext, and return whether this succeeded.
+ac_fn_c_try_cpp ()
+{
+  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+  if { { ac_try="$ac_cpp conftest.$ac_ext"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_cpp conftest.$ac_ext") 2>conftest.err
+  ac_status=$?
+  if test -s conftest.err; then
+    grep -v '^ *+' conftest.err >conftest.er1
+    cat conftest.er1 >&5
+    mv -f conftest.er1 conftest.err
+  fi
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; } > conftest.i && {
+	 test -z "$ac_c_preproc_warn_flag$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       }; then :
+  ac_retval=0
+else
+  $as_echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+    ac_retval=1
+fi
+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
+  as_fn_set_status $ac_retval
+
+} # ac_fn_c_try_cpp
+
+# ac_fn_c_try_run LINENO
+# ----------------------
+# Try to link conftest.$ac_ext, and return whether this succeeded. Assumes
+# that executables *can* be run.
+ac_fn_c_try_run ()
+{
+  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+  if { { ac_try="$ac_link"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_link") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; } && { ac_try='./conftest$ac_exeext'
+  { { case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_try") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; }; then :
+  ac_retval=0
+else
+  $as_echo "$as_me: program exited with status $ac_status" >&5
+       $as_echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+       ac_retval=$ac_status
+fi
+  rm -rf conftest.dSYM conftest_ipa8_conftest.oo
+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
+  as_fn_set_status $ac_retval
+
+} # ac_fn_c_try_run
+
+# ac_fn_c_check_header_compile LINENO HEADER VAR INCLUDES
+# -------------------------------------------------------
+# Tests whether HEADER exists and can be compiled using the include files in
+# INCLUDES, setting the cache variable VAR accordingly.
+ac_fn_c_check_header_compile ()
+{
+  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2" >&5
+$as_echo_n "checking for $2... " >&6; }
+if eval \${$3+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+$4
+#include <$2>
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  eval "$3=yes"
+else
+  eval "$3=no"
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+eval ac_res=\$$3
+	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
+$as_echo "$ac_res" >&6; }
+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
+
+} # ac_fn_c_check_header_compile
+
 # ac_fn_c_try_link LINENO
 # -----------------------
 # Try to link conftest.$ac_ext, and return whether this succeeded.
 ac_fn_c_try_link ()
 {
   as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
@@ -1526,13 +1673,13 @@
   $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
   test $ac_status = 0; } && {
 	 test -z "$ac_c_werror_flag" ||
 	 test ! -s conftest.err
        } && test -s conftest$ac_exeext && {
 	 test "$cross_compiling" = yes ||
-	 test -x conftest$ac_exeext
+	 $as_test_x conftest$ac_exeext
        }; then :
   ac_retval=0
 else
   $as_echo "$as_me: failed program was:" >&5
 sed 's/^/| /' conftest.$ac_ext >&5
 
@@ -1612,49 +1759,12 @@
 	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
 $as_echo "$ac_res" >&6; }
   eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
 
 } # ac_fn_c_check_func
 
-# ac_fn_c_try_cpp LINENO
-# ----------------------
-# Try to preprocess conftest.$ac_ext, and return whether this succeeded.
-ac_fn_c_try_cpp ()
-{
-  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
-  if { { ac_try="$ac_cpp conftest.$ac_ext"
-case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
-$as_echo "$ac_try_echo"; } >&5
-  (eval "$ac_cpp conftest.$ac_ext") 2>conftest.err
-  ac_status=$?
-  if test -s conftest.err; then
-    grep -v '^ *+' conftest.err >conftest.er1
-    cat conftest.er1 >&5
-    mv -f conftest.er1 conftest.err
-  fi
-  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
-  test $ac_status = 0; } > conftest.i && {
-	 test -z "$ac_c_preproc_warn_flag$ac_c_werror_flag" ||
-	 test ! -s conftest.err
-       }; then :
-  ac_retval=0
-else
-  $as_echo "$as_me: failed program was:" >&5
-sed 's/^/| /' conftest.$ac_ext >&5
-
-    ac_retval=1
-fi
-  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
-  as_fn_set_status $ac_retval
-
-} # ac_fn_c_try_cpp
-
 # ac_fn_c_check_header_mongrel LINENO HEADER VAR INCLUDES
 # -------------------------------------------------------
 # Tests whether HEADER exists, giving a warning if it cannot be compiled using
 # the include files in INCLUDES and setting the cache variable VAR
 # accordingly.
 ac_fn_c_check_header_mongrel ()
@@ -1740,150 +1850,23 @@
 $as_echo "$ac_res" >&6; }
 fi
   eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
 
 } # ac_fn_c_check_header_mongrel
 
-# ac_fn_c_try_run LINENO
-# ----------------------
-# Try to link conftest.$ac_ext, and return whether this succeeded. Assumes
-# that executables *can* be run.
-ac_fn_c_try_run ()
+# ac_fn_c_check_member LINENO AGGR MEMBER VAR INCLUDES
+# ----------------------------------------------------
+# Tries to find if the field MEMBER exists in type AGGR, after including
+# INCLUDES, setting cache variable VAR accordingly.
+ac_fn_c_check_member ()
 {
   as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
-  if { { ac_try="$ac_link"
-case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
-$as_echo "$ac_try_echo"; } >&5
-  (eval "$ac_link") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
-  test $ac_status = 0; } && { ac_try='./conftest$ac_exeext'
-  { { case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
-$as_echo "$ac_try_echo"; } >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
-  test $ac_status = 0; }; }; then :
-  ac_retval=0
-else
-  $as_echo "$as_me: program exited with status $ac_status" >&5
-       $as_echo "$as_me: failed program was:" >&5
-sed 's/^/| /' conftest.$ac_ext >&5
-
-       ac_retval=$ac_status
-fi
-  rm -rf conftest.dSYM conftest_ipa8_conftest.oo
-  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
-  as_fn_set_status $ac_retval
-
-} # ac_fn_c_try_run
-
-# ac_fn_c_check_header_compile LINENO HEADER VAR INCLUDES
-# -------------------------------------------------------
-# Tests whether HEADER exists and can be compiled using the include files in
-# INCLUDES, setting the cache variable VAR accordingly.
-ac_fn_c_check_header_compile ()
-{
-  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
-  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2" >&5
-$as_echo_n "checking for $2... " >&6; }
-if eval \${$3+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-$4
-#include <$2>
-_ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
-  eval "$3=yes"
-else
-  eval "$3=no"
-fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
-fi
-eval ac_res=\$$3
-	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
-$as_echo "$ac_res" >&6; }
-  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
-
-} # ac_fn_c_check_header_compile
-
-# ac_fn_c_check_type LINENO TYPE VAR INCLUDES
-# -------------------------------------------
-# Tests whether TYPE exists after having included INCLUDES, setting cache
-# variable VAR accordingly.
-ac_fn_c_check_type ()
-{
-  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
-  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2" >&5
-$as_echo_n "checking for $2... " >&6; }
-if eval \${$3+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
-  eval "$3=no"
-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-$4
-int
-main ()
-{
-if (sizeof ($2))
-	 return 0;
-  ;
-  return 0;
-}
-_ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-$4
-int
-main ()
-{
-if (sizeof (($2)))
-	    return 0;
-  ;
-  return 0;
-}
-_ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
-
-else
-  eval "$3=yes"
-fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
-fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
-fi
-eval ac_res=\$$3
-	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
-$as_echo "$ac_res" >&6; }
-  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno
-
-} # ac_fn_c_check_type
-
-# ac_fn_c_check_member LINENO AGGR MEMBER VAR INCLUDES
-# ----------------------------------------------------
-# Tries to find if the field MEMBER exists in type AGGR, after including
-# INCLUDES, setting cache variable VAR accordingly.
-ac_fn_c_check_member ()
-{
-  as_lineno=${as_lineno-"$1"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
-  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2.$3" >&5
-$as_echo_n "checking for $2.$3... " >&6; }
-if eval \${$4+:} false; then :
-  $as_echo_n "(cached) " >&6
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $2.$3" >&5
+$as_echo_n "checking for $2.$3... " >&6; }
+if eval \${$4+:} false; then :
+  $as_echo_n "(cached) " >&6
 else
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 $5
 int
 main ()
@@ -1927,14 +1910,14 @@
 
 } # ac_fn_c_check_member
 cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by git $as_me 2.0.5, which was
-generated by GNU Autoconf 2.69.  Invocation command line was
+It was created by git $as_me 2.1.0, which was
+generated by GNU Autoconf 2.68.  Invocation command line was
 
   $ $0 $@
 
 _ACEOF
 exec 5>>config.log
 {
@@ -2445,2570 +2428,3319 @@
 
 config_appended_defs="$config_appended_defs${newline}LIBPCREDIR=${LIBPCREDIR}"
     fi
 fi
 
 #
-# Define NO_CURL if you do not have curl installed.  git-http-pull and
-# git-http-push are not built, and you cannot use http:// and https://
-# transports.
-#
-# Define CURLDIR=/foo/bar if your curl header and library files are in
-# /foo/bar/include and /foo/bar/lib directories.
+# Define HAVE_ALLOCA_H if you have working alloca(3) defined in that header.
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+if test -n "$ac_tool_prefix"; then
+  # Extract the first word of "${ac_tool_prefix}gcc", so it can be a program name with args.
+set dummy ${ac_tool_prefix}gcc; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if ${ac_cv_prog_CC+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$CC"; then
+  ac_cv_prog_CC="$CC" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_CC="${ac_tool_prefix}gcc"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
 
-# Check whether --with-curl was given.
-if test "${with_curl+set}" = set; then :
-  withval=$with_curl;     if test "$withval" = "no"; then
-	NO_CURL=YesPlease
-    elif test "$withval" = "yes"; then
-	NO_CURL=
-    else
-	NO_CURL=
-	CURLDIR=$withval
-	{ $as_echo "$as_me:${as_lineno-$LINENO}: Setting CURLDIR to $withval" >&5
-$as_echo "$as_me: Setting CURLDIR to $withval" >&6;}
+fi
+fi
+CC=$ac_cv_prog_CC
+if test -n "$CC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CC" >&5
+$as_echo "$CC" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
 
-config_appended_defs="$config_appended_defs${newline}CURLDIR=$withval"
-    fi
 
 fi
+if test -z "$ac_cv_prog_CC"; then
+  ac_ct_CC=$CC
+  # Extract the first word of "gcc", so it can be a program name with args.
+set dummy gcc; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if ${ac_cv_prog_ac_ct_CC+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_CC"; then
+  ac_cv_prog_ac_ct_CC="$ac_ct_CC" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_CC="gcc"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
 
-#
-# Define NO_EXPAT if you do not have expat installed.  git-http-push is
-# not built, and you cannot push using http:// and https:// transports.
-#
-# Define EXPATDIR=/foo/bar if your expat header and library files are in
-# /foo/bar/include and /foo/bar/lib directories.
+fi
+fi
+ac_ct_CC=$ac_cv_prog_ac_ct_CC
+if test -n "$ac_ct_CC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_CC" >&5
+$as_echo "$ac_ct_CC" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
 
-# Check whether --with-expat was given.
-if test "${with_expat+set}" = set; then :
-  withval=$with_expat;     if test "$withval" = "no"; then
-	NO_EXPAT=YesPlease
-    elif test "$withval" = "yes"; then
-	NO_EXPAT=
-    else
-	NO_EXPAT=
-	EXPATDIR=$withval
-	{ $as_echo "$as_me:${as_lineno-$LINENO}: Setting EXPATDIR to $withval" >&5
-$as_echo "$as_me: Setting EXPATDIR to $withval" >&6;}
+  if test "x$ac_ct_CC" = x; then
+    CC=""
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    CC=$ac_ct_CC
+  fi
+else
+  CC="$ac_cv_prog_CC"
+fi
 
-config_appended_defs="$config_appended_defs${newline}EXPATDIR=$withval"
-    fi
+if test -z "$CC"; then
+          if test -n "$ac_tool_prefix"; then
+    # Extract the first word of "${ac_tool_prefix}cc", so it can be a program name with args.
+set dummy ${ac_tool_prefix}cc; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if ${ac_cv_prog_CC+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$CC"; then
+  ac_cv_prog_CC="$CC" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_CC="${ac_tool_prefix}cc"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
 
 fi
+fi
+CC=$ac_cv_prog_CC
+if test -n "$CC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CC" >&5
+$as_echo "$CC" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
 
-#
-# Define NO_FINK if you are building on Darwin/Mac OS X, have Fink
-# installed in /sw, but don't want GIT to link against any libraries
-# installed there.  If defined you may specify your own (or Fink's)
-# include directories and library directories by defining CFLAGS
-# and LDFLAGS appropriately.
-#
-# Define NO_DARWIN_PORTS if you are building on Darwin/Mac OS X,
-# have DarwinPorts installed in /opt/local, but don't want GIT to
-# link against any libraries installed there.  If defined you may
-# specify your own (or DarwinPort's) include directories and
-# library directories by defining CFLAGS and LDFLAGS appropriately.
-#
-# Define NO_MMAP if you want to avoid mmap.
-#
-# Define NO_ICONV if your libc does not properly support iconv.
-
-# Check whether --with-iconv was given.
-if test "${with_iconv+set}" = set; then :
-  withval=$with_iconv;     if test "$withval" = "no"; then
-	NO_ICONV=YesPlease
-    elif test "$withval" = "yes"; then
-	NO_ICONV=
-    else
-	NO_ICONV=
-	ICONVDIR=$withval
-	{ $as_echo "$as_me:${as_lineno-$LINENO}: Setting ICONVDIR to $withval" >&5
-$as_echo "$as_me: Setting ICONVDIR to $withval" >&6;}
-
-config_appended_defs="$config_appended_defs${newline}ICONVDIR=$withval"
-    fi
 
+  fi
 fi
+if test -z "$CC"; then
+  # Extract the first word of "cc", so it can be a program name with args.
+set dummy cc; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if ${ac_cv_prog_CC+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$CC"; then
+  ac_cv_prog_CC="$CC" # Let the user override the test.
+else
+  ac_prog_rejected=no
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    if test "$as_dir/$ac_word$ac_exec_ext" = "/usr/ucb/cc"; then
+       ac_prog_rejected=yes
+       continue
+     fi
+    ac_cv_prog_CC="cc"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
 
+if test $ac_prog_rejected = yes; then
+  # We found a bogon in the path, so make sure we never use it.
+  set dummy $ac_cv_prog_CC
+  shift
+  if test $# != 0; then
+    # We chose a different compiler from the bogus one.
+    # However, it has the same basename, so the bogon will be chosen
+    # first if we set CC to just the basename; use the full file name.
+    shift
+    ac_cv_prog_CC="$as_dir/$ac_word${1+' '}$@"
+  fi
+fi
+fi
+fi
+CC=$ac_cv_prog_CC
+if test -n "$CC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CC" >&5
+$as_echo "$CC" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
 
-## --enable-FEATURE[=ARG] and --disable-FEATURE
-#
-# Define USE_NSEC below if you want git to care about sub-second file mtimes
-# and ctimes. Note that you need recent glibc (at least 2.2.4) for this, and
-# it will BREAK YOUR LOCAL DIFFS! show-diff and anything using it will likely
-# randomly break unless your underlying filesystem supports those sub-second
-# times (my ext3 doesn't).
-#
-# Define USE_STDEV below if you want git to care about the underlying device
-# change being considered an inode change from the update-index perspective.
-
-#
-# Allow user to set ETC_GITCONFIG variable
 
-# Check whether --with-gitconfig was given.
-if test "${with_gitconfig+set}" = set; then :
-  withval=$with_gitconfig; if test -n "$withval"; then
-  if test "$withval" = "yes" -o "$withval" = "no"; then
-    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: You likely do not want either 'yes' or 'no' as
-		     a value for gitconfig (ETC_GITCONFIG).  Maybe you do...?" >&5
-$as_echo "$as_me: WARNING: You likely do not want either 'yes' or 'no' as
-		     a value for gitconfig (ETC_GITCONFIG).  Maybe you do...?" >&2;}
+fi
+if test -z "$CC"; then
+  if test -n "$ac_tool_prefix"; then
+  for ac_prog in cl.exe
+  do
+    # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
+set dummy $ac_tool_prefix$ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if ${ac_cv_prog_CC+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$CC"; then
+  ac_cv_prog_CC="$CC" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_CC="$ac_tool_prefix$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
   fi
-  { $as_echo "$as_me:${as_lineno-$LINENO}: Setting ETC_GITCONFIG to $withval" >&5
-$as_echo "$as_me: Setting ETC_GITCONFIG to $withval" >&6;}
+done
+  done
+IFS=$as_save_IFS
 
-config_appended_defs="$config_appended_defs${newline}ETC_GITCONFIG=$withval"
- fi
+fi
+fi
+CC=$ac_cv_prog_CC
+if test -n "$CC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CC" >&5
+$as_echo "$CC" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
 fi
 
 
-#
-# Allow user to set ETC_GITATTRIBUTES variable
-
-# Check whether --with-gitattributes was given.
-if test "${with_gitattributes+set}" = set; then :
-  withval=$with_gitattributes; if test -n "$withval"; then
-  if test "$withval" = "yes" -o "$withval" = "no"; then
-    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: You likely do not want either 'yes' or 'no' as
-		     a value for gitattributes (ETC_GITATTRIBUTES).  Maybe you do...?" >&5
-$as_echo "$as_me: WARNING: You likely do not want either 'yes' or 'no' as
-		     a value for gitattributes (ETC_GITATTRIBUTES).  Maybe you do...?" >&2;}
+    test -n "$CC" && break
+  done
+fi
+if test -z "$CC"; then
+  ac_ct_CC=$CC
+  for ac_prog in cl.exe
+do
+  # Extract the first word of "$ac_prog", so it can be a program name with args.
+set dummy $ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if ${ac_cv_prog_ac_ct_CC+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_CC"; then
+  ac_cv_prog_ac_ct_CC="$ac_ct_CC" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_CC="$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
   fi
-  { $as_echo "$as_me:${as_lineno-$LINENO}: Setting ETC_GITATTRIBUTES to $withval" >&5
-$as_echo "$as_me: Setting ETC_GITATTRIBUTES to $withval" >&6;}
+done
+  done
+IFS=$as_save_IFS
 
-config_appended_defs="$config_appended_defs${newline}ETC_GITATTRIBUTES=$withval"
- fi
+fi
+fi
+ac_ct_CC=$ac_cv_prog_ac_ct_CC
+if test -n "$ac_ct_CC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_CC" >&5
+$as_echo "$ac_ct_CC" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
 fi
 
 
-#
-# Allow user to set the default pager
+  test -n "$ac_ct_CC" && break
+done
 
-# Check whether --with-pager was given.
-if test "${with_pager+set}" = set; then :
-  withval=$with_pager; if test -n "$withval"; then
-  if test "$withval" = "yes" -o "$withval" = "no"; then
-    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: You likely do not want either 'yes' or 'no' as
-		     a value for pager (DEFAULT_PAGER).  Maybe you do...?" >&5
-$as_echo "$as_me: WARNING: You likely do not want either 'yes' or 'no' as
-		     a value for pager (DEFAULT_PAGER).  Maybe you do...?" >&2;}
+  if test "x$ac_ct_CC" = x; then
+    CC=""
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    CC=$ac_ct_CC
   fi
-  { $as_echo "$as_me:${as_lineno-$LINENO}: Setting DEFAULT_PAGER to $withval" >&5
-$as_echo "$as_me: Setting DEFAULT_PAGER to $withval" >&6;}
+fi
 
-config_appended_defs="$config_appended_defs${newline}DEFAULT_PAGER=$withval"
- fi
 fi
 
-#
-# Allow user to set the default editor
 
-# Check whether --with-editor was given.
-if test "${with_editor+set}" = set; then :
-  withval=$with_editor; if test -n "$withval"; then
-  if test "$withval" = "yes" -o "$withval" = "no"; then
-    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: You likely do not want either 'yes' or 'no' as
-		     a value for editor (DEFAULT_EDITOR).  Maybe you do...?" >&5
-$as_echo "$as_me: WARNING: You likely do not want either 'yes' or 'no' as
-		     a value for editor (DEFAULT_EDITOR).  Maybe you do...?" >&2;}
-  fi
-  { $as_echo "$as_me:${as_lineno-$LINENO}: Setting DEFAULT_EDITOR to $withval" >&5
-$as_echo "$as_me: Setting DEFAULT_EDITOR to $withval" >&6;}
+test -z "$CC" && { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "no acceptable C compiler found in \$PATH
+See \`config.log' for more details" "$LINENO" 5; }
 
-config_appended_defs="$config_appended_defs${newline}DEFAULT_EDITOR=$withval"
- fi
-fi
+# Provide some information about the compiler.
+$as_echo "$as_me:${as_lineno-$LINENO}: checking for C compiler version" >&5
+set X $ac_compile
+ac_compiler=$2
+for ac_option in --version -v -V -qversion; do
+  { { ac_try="$ac_compiler $ac_option >&5"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_compiler $ac_option >&5") 2>conftest.err
+  ac_status=$?
+  if test -s conftest.err; then
+    sed '10a\
+... rest of stderr output deleted ...
+         10q' conftest.err >conftest.er1
+    cat conftest.er1 >&5
+  fi
+  rm -f conftest.er1 conftest.err
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }
+done
 
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
 
-#
-# Define SHELL_PATH to provide path to shell.
+int
+main ()
+{
 
-# Check whether --with-shell was given.
-if test "${with_shell+set}" = set; then :
-  withval=$with_shell;     if test "$withval" = "no"; then
-	if test -n ""; then
-		SHELL_PATH=$withval
-		{ $as_echo "$as_me:${as_lineno-$LINENO}: Disabling use of SHELL" >&5
-$as_echo "$as_me: Disabling use of SHELL" >&6;}
+  ;
+  return 0;
+}
+_ACEOF
+ac_clean_files_save=$ac_clean_files
+ac_clean_files="$ac_clean_files a.out a.out.dSYM a.exe b.out"
+# Try to create an executable without -o first, disregard a.out.
+# It will help us diagnose broken compilers, and finding out an intuition
+# of exeext.
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the C compiler works" >&5
+$as_echo_n "checking whether the C compiler works... " >&6; }
+ac_link_default=`$as_echo "$ac_link" | sed 's/ -o *conftest[^ ]*//'`
 
-config_appended_defs="$config_appended_defs${newline}NO_SHELL=YesPlease"
+# The possible output files:
+ac_files="a.out conftest.exe conftest a.exe a_out.exe b.out conftest.*"
 
-config_appended_defs="$config_appended_defs${newline}SHELL_PATH="
-	else
-		as_fn_error $? "You cannot use git without shell" "$LINENO" 5
-	fi
-    else
-	if test "$withval" = "yes"; then
-		{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: You should provide path for --with-shell=PATH" >&5
-$as_echo "$as_me: WARNING: You should provide path for --with-shell=PATH" >&2;}
-	else
-		SHELL_PATH=$withval
-		{ $as_echo "$as_me:${as_lineno-$LINENO}: Setting SHELL_PATH to $withval" >&5
-$as_echo "$as_me: Setting SHELL_PATH to $withval" >&6;}
+ac_rmfiles=
+for ac_file in $ac_files
+do
+  case $ac_file in
+    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM | *.o | *.obj ) ;;
+    * ) ac_rmfiles="$ac_rmfiles $ac_file";;
+  esac
+done
+rm -f $ac_rmfiles
 
-config_appended_defs="$config_appended_defs${newline}SHELL_PATH=$withval"
+if { { ac_try="$ac_link_default"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_link_default") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; then :
+  # Autoconf-2.13 could set the ac_cv_exeext variable to `no'.
+# So ignore a value of `no', otherwise this would lead to `EXEEXT = no'
+# in a Makefile.  We should not override ac_cv_exeext if it was cached,
+# so that the user can short-circuit this test for compilers unknown to
+# Autoconf.
+for ac_file in $ac_files ''
+do
+  test -f "$ac_file" || continue
+  case $ac_file in
+    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM | *.o | *.obj )
+	;;
+    [ab].out )
+	# We found the default executable, but exeext='' is most
+	# certainly right.
+	break;;
+    *.* )
+	if test "${ac_cv_exeext+set}" = set && test "$ac_cv_exeext" != no;
+	then :; else
+	   ac_cv_exeext=`expr "$ac_file" : '[^.]*\(\..*\)'`
 	fi
-    fi
+	# We set ac_cv_exeext here because the later test for it is not
+	# safe: cross compilers may not add the suffix if given an `-o'
+	# argument, so we may need to know it at that point already.
+	# Even if this section looks crufty: it has the advantage of
+	# actually working.
+	break;;
+    * )
+	break;;
+  esac
+done
+test "$ac_cv_exeext" = no && ac_cv_exeext=
 
+else
+  ac_file=''
 fi
+if test -z "$ac_file"; then :
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+$as_echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
 
-#
-# Define PERL_PATH to provide path to Perl.
+{ { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error 77 "C compiler cannot create executables
+See \`config.log' for more details" "$LINENO" 5; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for C compiler default output file name" >&5
+$as_echo_n "checking for C compiler default output file name... " >&6; }
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_file" >&5
+$as_echo "$ac_file" >&6; }
+ac_exeext=$ac_cv_exeext
 
-# Check whether --with-perl was given.
-if test "${with_perl+set}" = set; then :
-  withval=$with_perl;     if test "$withval" = "no"; then
-	if test -n ""; then
-		PERL_PATH=$withval
-		{ $as_echo "$as_me:${as_lineno-$LINENO}: Disabling use of PERL" >&5
-$as_echo "$as_me: Disabling use of PERL" >&6;}
+rm -f -r a.out a.out.dSYM a.exe conftest$ac_cv_exeext b.out
+ac_clean_files=$ac_clean_files_save
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for suffix of executables" >&5
+$as_echo_n "checking for suffix of executables... " >&6; }
+if { { ac_try="$ac_link"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_link") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; then :
+  # If both `conftest.exe' and `conftest' are `present' (well, observable)
+# catch `conftest.exe'.  For instance with Cygwin, `ls conftest' will
+# work properly (i.e., refer to `conftest.exe'), while it won't with
+# `rm'.
+for ac_file in conftest.exe conftest conftest.*; do
+  test -f "$ac_file" || continue
+  case $ac_file in
+    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM | *.o | *.obj ) ;;
+    *.* ) ac_cv_exeext=`expr "$ac_file" : '[^.]*\(\..*\)'`
+	  break;;
+    * ) break;;
+  esac
+done
+else
+  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "cannot compute suffix of executables: cannot compile and link
+See \`config.log' for more details" "$LINENO" 5; }
+fi
+rm -f conftest conftest$ac_cv_exeext
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_exeext" >&5
+$as_echo "$ac_cv_exeext" >&6; }
 
-config_appended_defs="$config_appended_defs${newline}NO_PERL=YesPlease"
+rm -f conftest.$ac_ext
+EXEEXT=$ac_cv_exeext
+ac_exeext=$EXEEXT
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <stdio.h>
+int
+main ()
+{
+FILE *f = fopen ("conftest.out", "w");
+ return ferror (f) || fclose (f) != 0;
 
-config_appended_defs="$config_appended_defs${newline}PERL_PATH="
-	else
-		as_fn_error $? "You cannot use git without perl" "$LINENO" 5
-	fi
+  ;
+  return 0;
+}
+_ACEOF
+ac_clean_files="$ac_clean_files conftest.out"
+# Check that the compiler produces executables we can run.  If not, either
+# the compiler is broken, or we cross compile.
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we are cross compiling" >&5
+$as_echo_n "checking whether we are cross compiling... " >&6; }
+if test "$cross_compiling" != yes; then
+  { { ac_try="$ac_link"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_link") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }
+  if { ac_try='./conftest$ac_cv_exeext'
+  { { case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_try") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; }; then
+    cross_compiling=no
+  else
+    if test "$cross_compiling" = maybe; then
+	cross_compiling=yes
     else
-	if test "$withval" = "yes"; then
-		{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: You should provide path for --with-perl=PATH" >&5
-$as_echo "$as_me: WARNING: You should provide path for --with-perl=PATH" >&2;}
-	else
-		PERL_PATH=$withval
-		{ $as_echo "$as_me:${as_lineno-$LINENO}: Setting PERL_PATH to $withval" >&5
-$as_echo "$as_me: Setting PERL_PATH to $withval" >&6;}
-
-config_appended_defs="$config_appended_defs${newline}PERL_PATH=$withval"
-	fi
+	{ { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "cannot run C compiled programs.
+If you meant to cross compile, use \`--host'.
+See \`config.log' for more details" "$LINENO" 5; }
     fi
-
+  fi
 fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $cross_compiling" >&5
+$as_echo "$cross_compiling" >&6; }
 
-#
-# Define PYTHON_PATH to provide path to Python.
-
-# Check whether --with-python was given.
-if test "${with_python+set}" = set; then :
-  withval=$with_python;     if test "$withval" = "no"; then
-	if test -n "allow-without"; then
-		PYTHON_PATH=$withval
-		{ $as_echo "$as_me:${as_lineno-$LINENO}: Disabling use of PYTHON" >&5
-$as_echo "$as_me: Disabling use of PYTHON" >&6;}
+rm -f conftest.$ac_ext conftest$ac_cv_exeext conftest.out
+ac_clean_files=$ac_clean_files_save
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for suffix of object files" >&5
+$as_echo_n "checking for suffix of object files... " >&6; }
+if ${ac_cv_objext+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
 
-config_appended_defs="$config_appended_defs${newline}NO_PYTHON=YesPlease"
+int
+main ()
+{
 
-config_appended_defs="$config_appended_defs${newline}PYTHON_PATH="
-	else
-		as_fn_error $? "You cannot use git without python" "$LINENO" 5
-	fi
-    else
-	if test "$withval" = "yes"; then
-		{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: You should provide path for --with-python=PATH" >&5
-$as_echo "$as_me: WARNING: You should provide path for --with-python=PATH" >&2;}
-	else
-		PYTHON_PATH=$withval
-		{ $as_echo "$as_me:${as_lineno-$LINENO}: Setting PYTHON_PATH to $withval" >&5
-$as_echo "$as_me: Setting PYTHON_PATH to $withval" >&6;}
+  ;
+  return 0;
+}
+_ACEOF
+rm -f conftest.o conftest.obj
+if { { ac_try="$ac_compile"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_compile") 2>&5
+  ac_status=$?
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }; then :
+  for ac_file in conftest.o conftest.obj conftest.*; do
+  test -f "$ac_file" || continue;
+  case $ac_file in
+    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM ) ;;
+    *) ac_cv_objext=`expr "$ac_file" : '.*\.\(.*\)'`
+       break;;
+  esac
+done
+else
+  $as_echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
 
-config_appended_defs="$config_appended_defs${newline}PYTHON_PATH=$withval"
-	fi
-    fi
+{ { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "cannot compute suffix of object files: cannot compile
+See \`config.log' for more details" "$LINENO" 5; }
+fi
+rm -f conftest.$ac_cv_objext conftest.$ac_ext
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_objext" >&5
+$as_echo "$ac_cv_objext" >&6; }
+OBJEXT=$ac_cv_objext
+ac_objext=$OBJEXT
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we are using the GNU C compiler" >&5
+$as_echo_n "checking whether we are using the GNU C compiler... " >&6; }
+if ${ac_cv_c_compiler_gnu+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+#ifndef __GNUC__
+       choke me
+#endif
 
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_compiler_gnu=yes
+else
+  ac_compiler_gnu=no
 fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+ac_cv_c_compiler_gnu=$ac_compiler_gnu
 
-#
-# Define ZLIB_PATH to provide path to zlib.
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_c_compiler_gnu" >&5
+$as_echo "$ac_cv_c_compiler_gnu" >&6; }
+if test $ac_compiler_gnu = yes; then
+  GCC=yes
+else
+  GCC=
+fi
+ac_test_CFLAGS=${CFLAGS+set}
+ac_save_CFLAGS=$CFLAGS
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CC accepts -g" >&5
+$as_echo_n "checking whether $CC accepts -g... " >&6; }
+if ${ac_cv_prog_cc_g+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_save_c_werror_flag=$ac_c_werror_flag
+   ac_c_werror_flag=yes
+   ac_cv_prog_cc_g=no
+   CFLAGS="-g"
+   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
 
-# Check whether --with-zlib was given.
-if test "${with_zlib+set}" = set; then :
-  withval=$with_zlib;     if test "$withval" = "no"; then
-	if test -n ""; then
-		ZLIB_PATH=$withval
-		{ $as_echo "$as_me:${as_lineno-$LINENO}: Disabling use of ZLIB" >&5
-$as_echo "$as_me: Disabling use of ZLIB" >&6;}
+int
+main ()
+{
 
-config_appended_defs="$config_appended_defs${newline}NO_ZLIB=YesPlease"
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_prog_cc_g=yes
+else
+  CFLAGS=""
+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
 
-config_appended_defs="$config_appended_defs${newline}ZLIB_PATH="
-	else
-		as_fn_error $? "You cannot use git without zlib" "$LINENO" 5
-	fi
-    else
-	if test "$withval" = "yes"; then
-		{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: You should provide path for --with-zlib=PATH" >&5
-$as_echo "$as_me: WARNING: You should provide path for --with-zlib=PATH" >&2;}
-	else
-		ZLIB_PATH=$withval
-		{ $as_echo "$as_me:${as_lineno-$LINENO}: Setting ZLIB_PATH to $withval" >&5
-$as_echo "$as_me: Setting ZLIB_PATH to $withval" >&6;}
+int
+main ()
+{
 
-config_appended_defs="$config_appended_defs${newline}ZLIB_PATH=$withval"
-	fi
-    fi
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+
+else
+  ac_c_werror_flag=$ac_save_c_werror_flag
+	 CFLAGS="-g"
+	 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_prog_cc_g=yes
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+   ac_c_werror_flag=$ac_save_c_werror_flag
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cc_g" >&5
+$as_echo "$ac_cv_prog_cc_g" >&6; }
+if test "$ac_test_CFLAGS" = set; then
+  CFLAGS=$ac_save_CFLAGS
+elif test $ac_cv_prog_cc_g = yes; then
+  if test "$GCC" = yes; then
+    CFLAGS="-g -O2"
+  else
+    CFLAGS="-g"
+  fi
+else
+  if test "$GCC" = yes; then
+    CFLAGS="-O2"
+  else
+    CFLAGS=
+  fi
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $CC option to accept ISO C89" >&5
+$as_echo_n "checking for $CC option to accept ISO C89... " >&6; }
+if ${ac_cv_prog_cc_c89+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_cv_prog_cc_c89=no
+ac_save_CC=$CC
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <stdarg.h>
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+/* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
+struct buf { int x; };
+FILE * (*rcsopen) (struct buf *, struct stat *, int);
+static char *e (p, i)
+     char **p;
+     int i;
+{
+  return p[i];
+}
+static char *f (char * (*g) (char **, int), char **p, ...)
+{
+  char *s;
+  va_list v;
+  va_start (v,p);
+  s = g (p, va_arg (v,int));
+  va_end (v);
+  return s;
+}
+
+/* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
+   function prototypes and stuff, but not '\xHH' hex character constants.
+   These don't provoke an error unfortunately, instead are silently treated
+   as 'x'.  The following induces an error, until -std is added to get
+   proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
+   array size at least.  It's necessary to write '\x00'==0 to get something
+   that's true only with -std.  */
+int osf4_cc_array ['\x00' == 0 ? 1 : -1];
+
+/* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
+   inside strings and character constants.  */
+#define FOO(x) 'x'
+int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
+
+int test (int i, double x);
+struct s1 {int (*f) (int a);};
+struct s2 {int (*f) (double a);};
+int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
+int argc;
+char **argv;
+int
+main ()
+{
+return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
+  ;
+  return 0;
+}
+_ACEOF
+for ac_arg in '' -qlanglvl=extc89 -qlanglvl=ansi -std \
+	-Ae "-Aa -D_HPUX_SOURCE" "-Xc -D__EXTENSIONS__"
+do
+  CC="$ac_save_CC $ac_arg"
+  if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_prog_cc_c89=$ac_arg
+fi
+rm -f core conftest.err conftest.$ac_objext
+  test "x$ac_cv_prog_cc_c89" != "xno" && break
+done
+rm -f conftest.$ac_ext
+CC=$ac_save_CC
+
+fi
+# AC_CACHE_VAL
+case "x$ac_cv_prog_cc_c89" in
+  x)
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: none needed" >&5
+$as_echo "none needed" >&6; } ;;
+  xno)
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: unsupported" >&5
+$as_echo "unsupported" >&6; } ;;
+  *)
+    CC="$CC $ac_cv_prog_cc_c89"
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cc_c89" >&5
+$as_echo "$ac_cv_prog_cc_c89" >&6; } ;;
+esac
+if test "x$ac_cv_prog_cc_c89" != xno; then :
+
+fi
+
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
+
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking how to run the C preprocessor" >&5
+$as_echo_n "checking how to run the C preprocessor... " >&6; }
+# On Suns, sometimes $CPP names a directory.
+if test -n "$CPP" && test -d "$CPP"; then
+  CPP=
+fi
+if test -z "$CPP"; then
+  if ${ac_cv_prog_CPP+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+      # Double quotes because CPP needs to be expanded
+    for CPP in "$CC -E" "$CC -E -traditional-cpp" "/lib/cpp"
+    do
+      ac_preproc_ok=false
+for ac_c_preproc_warn_flag in '' yes
+do
+  # Use a header file that comes with gcc, so configuring glibc
+  # with a fresh cross-compiler works.
+  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
+  # <limits.h> exists even on freestanding compilers.
+  # On the NeXT, cc -E runs the code through the compiler's parser,
+  # not just through cpp. "Syntax error" is here to catch this case.
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#ifdef __STDC__
+# include <limits.h>
+#else
+# include <assert.h>
+#endif
+		     Syntax error
+_ACEOF
+if ac_fn_c_try_cpp "$LINENO"; then :
+
+else
+  # Broken: fails on valid input.
+continue
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+
+  # OK, works on sane cases.  Now check whether nonexistent headers
+  # can be detected and how.
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <ac_nonexistent.h>
+_ACEOF
+if ac_fn_c_try_cpp "$LINENO"; then :
+  # Broken: success on invalid input.
+continue
+else
+  # Passes both tests.
+ac_preproc_ok=:
+break
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
+
+done
+# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.
+rm -f conftest.i conftest.err conftest.$ac_ext
+if $ac_preproc_ok; then :
+  break
+fi
+
+    done
+    ac_cv_prog_CPP=$CPP
 
 fi
+  CPP=$ac_cv_prog_CPP
+else
+  ac_cv_prog_CPP=$CPP
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $CPP" >&5
+$as_echo "$CPP" >&6; }
+ac_preproc_ok=false
+for ac_c_preproc_warn_flag in '' yes
+do
+  # Use a header file that comes with gcc, so configuring glibc
+  # with a fresh cross-compiler works.
+  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
+  # <limits.h> exists even on freestanding compilers.
+  # On the NeXT, cc -E runs the code through the compiler's parser,
+  # not just through cpp. "Syntax error" is here to catch this case.
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#ifdef __STDC__
+# include <limits.h>
+#else
+# include <assert.h>
+#endif
+		     Syntax error
+_ACEOF
+if ac_fn_c_try_cpp "$LINENO"; then :
 
-#
-# Declare the with-tcltk/without-tcltk options.
-
-# Check whether --with-tcltk was given.
-if test "${with_tcltk+set}" = set; then :
-  withval=$with_tcltk;     if test "$withval" = "no"; then
-	NO_TCLTK=YesPlease
-    elif test "$withval" = "yes"; then
-	NO_TCLTK=
-    else
-	NO_TCLTK=
-	TCLTKDIR=$withval
-	{ $as_echo "$as_me:${as_lineno-$LINENO}: Setting TCLTKDIR to $withval" >&5
-$as_echo "$as_me: Setting TCLTKDIR to $withval" >&6;}
-
-config_appended_defs="$config_appended_defs${newline}TCLTKDIR=$withval"
-    fi
+else
+  # Broken: fails on valid input.
+continue
+fi
+rm -f conftest.err conftest.i conftest.$ac_ext
 
+  # OK, works on sane cases.  Now check whether nonexistent headers
+  # can be detected and how.
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <ac_nonexistent.h>
+_ACEOF
+if ac_fn_c_try_cpp "$LINENO"; then :
+  # Broken: success on invalid input.
+continue
+else
+  # Passes both tests.
+ac_preproc_ok=:
+break
 fi
+rm -f conftest.err conftest.i conftest.$ac_ext
 
-#
+done
+# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.
+rm -f conftest.i conftest.err conftest.$ac_ext
+if $ac_preproc_ok; then :
 
+else
+  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "C preprocessor \"$CPP\" fails sanity check
+See \`config.log' for more details" "$LINENO" 5; }
+fi
 
-## Checks for programs.
-{ $as_echo "$as_me:${as_lineno-$LINENO}: CHECKS for programs" >&5
-$as_echo "$as_me: CHECKS for programs" >&6;}
-#
 ac_ext=c
 ac_cpp='$CPP $CPPFLAGS'
 ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
 ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
 ac_compiler_gnu=$ac_cv_c_compiler_gnu
-if test -n "$ac_tool_prefix"; then
-  for ac_prog in cc gcc
-  do
-    # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
-set dummy $ac_tool_prefix$ac_prog; ac_word=$2
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
-$as_echo_n "checking for $ac_word... " >&6; }
-if ${ac_cv_prog_CC+:} false; then :
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for grep that handles long lines and -e" >&5
+$as_echo_n "checking for grep that handles long lines and -e... " >&6; }
+if ${ac_cv_path_GREP+:} false; then :
   $as_echo_n "(cached) " >&6
 else
-  if test -n "$CC"; then
-  ac_cv_prog_CC="$CC" # Let the user override the test.
-else
-as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in $PATH
+  if test -z "$GREP"; then
+  ac_path_GREP_found=false
+  # Loop through the user's path and test for each of PROGNAME-LIST
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH$PATH_SEPARATOR/usr/xpg4/bin
 do
   IFS=$as_save_IFS
   test -z "$as_dir" && as_dir=.
+    for ac_prog in grep ggrep; do
     for ac_exec_ext in '' $ac_executable_extensions; do
-  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
-    ac_cv_prog_CC="$ac_tool_prefix$ac_prog"
-    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
-    break 2
-  fi
-done
+      ac_path_GREP="$as_dir/$ac_prog$ac_exec_ext"
+      { test -f "$ac_path_GREP" && $as_test_x "$ac_path_GREP"; } || continue
+# Check for GNU ac_path_GREP and select it if it is found.
+  # Check for GNU $ac_path_GREP
+case `"$ac_path_GREP" --version 2>&1` in
+*GNU*)
+  ac_cv_path_GREP="$ac_path_GREP" ac_path_GREP_found=:;;
+*)
+  ac_count=0
+  $as_echo_n 0123456789 >"conftest.in"
+  while :
+  do
+    cat "conftest.in" "conftest.in" >"conftest.tmp"
+    mv "conftest.tmp" "conftest.in"
+    cp "conftest.in" "conftest.nl"
+    $as_echo 'GREP' >> "conftest.nl"
+    "$ac_path_GREP" -e 'GREP$' -e '-(cannot match)-' < "conftest.nl" >"conftest.out" 2>/dev/null || break
+    diff "conftest.out" "conftest.nl" >/dev/null 2>&1 || break
+    as_fn_arith $ac_count + 1 && ac_count=$as_val
+    if test $ac_count -gt ${ac_path_GREP_max-0}; then
+      # Best one so far, save it but keep looking for a better one
+      ac_cv_path_GREP="$ac_path_GREP"
+      ac_path_GREP_max=$ac_count
+    fi
+    # 10*(2^10) chars as input seems more than enough
+    test $ac_count -gt 10 && break
   done
-IFS=$as_save_IFS
+  rm -f conftest.in conftest.tmp conftest.nl conftest.out;;
+esac
 
-fi
-fi
-CC=$ac_cv_prog_CC
-if test -n "$CC"; then
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CC" >&5
-$as_echo "$CC" >&6; }
+      $ac_path_GREP_found && break 3
+    done
+  done
+  done
+IFS=$as_save_IFS
+  if test -z "$ac_cv_path_GREP"; then
+    as_fn_error $? "no acceptable grep could be found in $PATH$PATH_SEPARATOR/usr/xpg4/bin" "$LINENO" 5
+  fi
 else
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
-$as_echo "no" >&6; }
+  ac_cv_path_GREP=$GREP
 fi
 
-
-    test -n "$CC" && break
-  done
 fi
-if test -z "$CC"; then
-  ac_ct_CC=$CC
-  for ac_prog in cc gcc
-do
-  # Extract the first word of "$ac_prog", so it can be a program name with args.
-set dummy $ac_prog; ac_word=$2
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
-$as_echo_n "checking for $ac_word... " >&6; }
-if ${ac_cv_prog_ac_ct_CC+:} false; then :
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_path_GREP" >&5
+$as_echo "$ac_cv_path_GREP" >&6; }
+ GREP="$ac_cv_path_GREP"
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for egrep" >&5
+$as_echo_n "checking for egrep... " >&6; }
+if ${ac_cv_path_EGREP+:} false; then :
   $as_echo_n "(cached) " >&6
 else
-  if test -n "$ac_ct_CC"; then
-  ac_cv_prog_ac_ct_CC="$ac_ct_CC" # Let the user override the test.
-else
-as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in $PATH
+  if echo a | $GREP -E '(a|b)' >/dev/null 2>&1
+   then ac_cv_path_EGREP="$GREP -E"
+   else
+     if test -z "$EGREP"; then
+  ac_path_EGREP_found=false
+  # Loop through the user's path and test for each of PROGNAME-LIST
+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH$PATH_SEPARATOR/usr/xpg4/bin
 do
   IFS=$as_save_IFS
   test -z "$as_dir" && as_dir=.
+    for ac_prog in egrep; do
     for ac_exec_ext in '' $ac_executable_extensions; do
-  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
-    ac_cv_prog_ac_ct_CC="$ac_prog"
-    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
-    break 2
-  fi
-done
+      ac_path_EGREP="$as_dir/$ac_prog$ac_exec_ext"
+      { test -f "$ac_path_EGREP" && $as_test_x "$ac_path_EGREP"; } || continue
+# Check for GNU ac_path_EGREP and select it if it is found.
+  # Check for GNU $ac_path_EGREP
+case `"$ac_path_EGREP" --version 2>&1` in
+*GNU*)
+  ac_cv_path_EGREP="$ac_path_EGREP" ac_path_EGREP_found=:;;
+*)
+  ac_count=0
+  $as_echo_n 0123456789 >"conftest.in"
+  while :
+  do
+    cat "conftest.in" "conftest.in" >"conftest.tmp"
+    mv "conftest.tmp" "conftest.in"
+    cp "conftest.in" "conftest.nl"
+    $as_echo 'EGREP' >> "conftest.nl"
+    "$ac_path_EGREP" 'EGREP$' < "conftest.nl" >"conftest.out" 2>/dev/null || break
+    diff "conftest.out" "conftest.nl" >/dev/null 2>&1 || break
+    as_fn_arith $ac_count + 1 && ac_count=$as_val
+    if test $ac_count -gt ${ac_path_EGREP_max-0}; then
+      # Best one so far, save it but keep looking for a better one
+      ac_cv_path_EGREP="$ac_path_EGREP"
+      ac_path_EGREP_max=$ac_count
+    fi
+    # 10*(2^10) chars as input seems more than enough
+    test $ac_count -gt 10 && break
   done
-IFS=$as_save_IFS
+  rm -f conftest.in conftest.tmp conftest.nl conftest.out;;
+esac
 
+      $ac_path_EGREP_found && break 3
+    done
+  done
+  done
+IFS=$as_save_IFS
+  if test -z "$ac_cv_path_EGREP"; then
+    as_fn_error $? "no acceptable egrep could be found in $PATH$PATH_SEPARATOR/usr/xpg4/bin" "$LINENO" 5
+  fi
+else
+  ac_cv_path_EGREP=$EGREP
 fi
+
+   fi
 fi
-ac_ct_CC=$ac_cv_prog_ac_ct_CC
-if test -n "$ac_ct_CC"; then
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_CC" >&5
-$as_echo "$ac_ct_CC" >&6; }
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_path_EGREP" >&5
+$as_echo "$ac_cv_path_EGREP" >&6; }
+ EGREP="$ac_cv_path_EGREP"
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for ANSI C header files" >&5
+$as_echo_n "checking for ANSI C header files... " >&6; }
+if ${ac_cv_header_stdc+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <stdlib.h>
+#include <stdarg.h>
+#include <string.h>
+#include <float.h>
+
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_header_stdc=yes
 else
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
-$as_echo "no" >&6; }
+  ac_cv_header_stdc=no
 fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
 
+if test $ac_cv_header_stdc = yes; then
+  # SunOS 4.x string.h does not declare mem*, contrary to ANSI.
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <string.h>
 
-  test -n "$ac_ct_CC" && break
-done
+_ACEOF
+if (eval "$ac_cpp conftest.$ac_ext") 2>&5 |
+  $EGREP "memchr" >/dev/null 2>&1; then :
 
-  if test "x$ac_ct_CC" = x; then
-    CC=""
-  else
-    case $cross_compiling:$ac_tool_warned in
-yes:)
-{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
-$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
-ac_tool_warned=yes ;;
-esac
-    CC=$ac_ct_CC
-  fi
+else
+  ac_cv_header_stdc=no
 fi
+rm -f conftest*
 
+fi
 
-test -z "$CC" && { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
-$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
-as_fn_error $? "no acceptable C compiler found in \$PATH
-See \`config.log' for more details" "$LINENO" 5; }
+if test $ac_cv_header_stdc = yes; then
+  # ISC 2.0.2 stdlib.h does not declare free, contrary to ANSI.
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <stdlib.h>
 
-# Provide some information about the compiler.
-$as_echo "$as_me:${as_lineno-$LINENO}: checking for C compiler version" >&5
-set X $ac_compile
-ac_compiler=$2
-for ac_option in --version -v -V -qversion; do
-  { { ac_try="$ac_compiler $ac_option >&5"
-case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
-$as_echo "$ac_try_echo"; } >&5
-  (eval "$ac_compiler $ac_option >&5") 2>conftest.err
-  ac_status=$?
-  if test -s conftest.err; then
-    sed '10a\
-... rest of stderr output deleted ...
-         10q' conftest.err >conftest.er1
-    cat conftest.er1 >&5
-  fi
-  rm -f conftest.er1 conftest.err
-  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
-  test $ac_status = 0; }
-done
+_ACEOF
+if (eval "$ac_cpp conftest.$ac_ext") 2>&5 |
+  $EGREP "free" >/dev/null 2>&1; then :
 
-cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+else
+  ac_cv_header_stdc=no
+fi
+rm -f conftest*
+
+fi
+
+if test $ac_cv_header_stdc = yes; then
+  # /bin/cc in Irix-4.0.5 gets non-ANSI ctype macros unless using -ansi.
+  if test "$cross_compiling" = yes; then :
+  :
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
+#include <ctype.h>
+#include <stdlib.h>
+#if ((' ' & 0x0FF) == 0x020)
+# define ISLOWER(c) ('a' <= (c) && (c) <= 'z')
+# define TOUPPER(c) (ISLOWER(c) ? 'A' + ((c) - 'a') : (c))
+#else
+# define ISLOWER(c) \
+		   (('a' <= (c) && (c) <= 'i') \
+		     || ('j' <= (c) && (c) <= 'r') \
+		     || ('s' <= (c) && (c) <= 'z'))
+# define TOUPPER(c) (ISLOWER(c) ? ((c) | 0x40) : (c))
+#endif
 
+#define XOR(e, f) (((e) && !(f)) || (!(e) && (f)))
 int
 main ()
 {
-
-  ;
+  int i;
+  for (i = 0; i < 256; i++)
+    if (XOR (islower (i), ISLOWER (i))
+	|| toupper (i) != TOUPPER (i))
+      return 2;
   return 0;
 }
 _ACEOF
-ac_clean_files_save=$ac_clean_files
-ac_clean_files="$ac_clean_files a.out a.out.dSYM a.exe b.out"
-# Try to create an executable without -o first, disregard a.out.
-# It will help us diagnose broken compilers, and finding out an intuition
-# of exeext.
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the C compiler works" >&5
-$as_echo_n "checking whether the C compiler works... " >&6; }
-ac_link_default=`$as_echo "$ac_link" | sed 's/ -o *conftest[^ ]*//'`
+if ac_fn_c_try_run "$LINENO"; then :
 
-# The possible output files:
-ac_files="a.out conftest.exe conftest a.exe a_out.exe b.out conftest.*"
+else
+  ac_cv_header_stdc=no
+fi
+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
+  conftest.$ac_objext conftest.beam conftest.$ac_ext
+fi
 
-ac_rmfiles=
-for ac_file in $ac_files
-do
-  case $ac_file in
-    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM | *.o | *.obj ) ;;
-    * ) ac_rmfiles="$ac_rmfiles $ac_file";;
-  esac
-done
-rm -f $ac_rmfiles
+fi
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_header_stdc" >&5
+$as_echo "$ac_cv_header_stdc" >&6; }
+if test $ac_cv_header_stdc = yes; then
 
-if { { ac_try="$ac_link_default"
-case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
-$as_echo "$ac_try_echo"; } >&5
-  (eval "$ac_link_default") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
-  test $ac_status = 0; }; then :
-  # Autoconf-2.13 could set the ac_cv_exeext variable to `no'.
-# So ignore a value of `no', otherwise this would lead to `EXEEXT = no'
-# in a Makefile.  We should not override ac_cv_exeext if it was cached,
-# so that the user can short-circuit this test for compilers unknown to
-# Autoconf.
-for ac_file in $ac_files ''
-do
-  test -f "$ac_file" || continue
-  case $ac_file in
-    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM | *.o | *.obj )
-	;;
-    [ab].out )
-	# We found the default executable, but exeext='' is most
-	# certainly right.
-	break;;
-    *.* )
-	if test "${ac_cv_exeext+set}" = set && test "$ac_cv_exeext" != no;
-	then :; else
-	   ac_cv_exeext=`expr "$ac_file" : '[^.]*\(\..*\)'`
-	fi
-	# We set ac_cv_exeext here because the later test for it is not
-	# safe: cross compilers may not add the suffix if given an `-o'
-	# argument, so we may need to know it at that point already.
-	# Even if this section looks crufty: it has the advantage of
-	# actually working.
-	break;;
-    * )
-	break;;
-  esac
-done
-test "$ac_cv_exeext" = no && ac_cv_exeext=
+$as_echo "#define STDC_HEADERS 1" >>confdefs.h
 
-else
-  ac_file=''
 fi
-if test -z "$ac_file"; then :
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
-$as_echo "no" >&6; }
-$as_echo "$as_me: failed program was:" >&5
-sed 's/^/| /' conftest.$ac_ext >&5
 
-{ { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
-$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
-as_fn_error 77 "C compiler cannot create executables
-See \`config.log' for more details" "$LINENO" 5; }
-else
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
-$as_echo "yes" >&6; }
+# On IRIX 5.3, sys/types and inttypes.h are conflicting.
+for ac_header in sys/types.h sys/stat.h stdlib.h string.h memory.h strings.h \
+		  inttypes.h stdint.h unistd.h
+do :
+  as_ac_Header=`$as_echo "ac_cv_header_$ac_header" | $as_tr_sh`
+ac_fn_c_check_header_compile "$LINENO" "$ac_header" "$as_ac_Header" "$ac_includes_default
+"
+if eval test \"x\$"$as_ac_Header"\" = x"yes"; then :
+  cat >>confdefs.h <<_ACEOF
+#define `$as_echo "HAVE_$ac_header" | $as_tr_cpp` 1
+_ACEOF
+
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for C compiler default output file name" >&5
-$as_echo_n "checking for C compiler default output file name... " >&6; }
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_file" >&5
-$as_echo "$ac_file" >&6; }
-ac_exeext=$ac_cv_exeext
 
-rm -f -r a.out a.out.dSYM a.exe conftest$ac_cv_exeext b.out
-ac_clean_files=$ac_clean_files_save
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for suffix of executables" >&5
-$as_echo_n "checking for suffix of executables... " >&6; }
-if { { ac_try="$ac_link"
-case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
-$as_echo "$ac_try_echo"; } >&5
-  (eval "$ac_link") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
-  test $ac_status = 0; }; then :
-  # If both `conftest.exe' and `conftest' are `present' (well, observable)
-# catch `conftest.exe'.  For instance with Cygwin, `ls conftest' will
-# work properly (i.e., refer to `conftest.exe'), while it won't with
-# `rm'.
-for ac_file in conftest.exe conftest conftest.*; do
-  test -f "$ac_file" || continue
-  case $ac_file in
-    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM | *.o | *.obj ) ;;
-    *.* ) ac_cv_exeext=`expr "$ac_file" : '[^.]*\(\..*\)'`
-	  break;;
-    * ) break;;
-  esac
 done
+
+
+ac_fn_c_check_type "$LINENO" "size_t" "ac_cv_type_size_t" "$ac_includes_default"
+if test "x$ac_cv_type_size_t" = xyes; then :
+
 else
-  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
-$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
-as_fn_error $? "cannot compute suffix of executables: cannot compile and link
-See \`config.log' for more details" "$LINENO" 5; }
+
+cat >>confdefs.h <<_ACEOF
+#define size_t unsigned int
+_ACEOF
+
 fi
-rm -f conftest conftest$ac_cv_exeext
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_exeext" >&5
-$as_echo "$ac_cv_exeext" >&6; }
 
-rm -f conftest.$ac_ext
-EXEEXT=$ac_cv_exeext
-ac_exeext=$EXEEXT
-cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+# The Ultrix 4.2 mips builtin alloca declared by alloca.h only works
+# for constant arguments.  Useless!
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for working alloca.h" >&5
+$as_echo_n "checking for working alloca.h... " >&6; }
+if ${ac_cv_working_alloca_h+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
-#include <stdio.h>
+#include <alloca.h>
 int
 main ()
 {
-FILE *f = fopen ("conftest.out", "w");
- return ferror (f) || fclose (f) != 0;
-
+char *p = (char *) alloca (2 * sizeof (int));
+			  if (p) return 0;
   ;
   return 0;
 }
 _ACEOF
-ac_clean_files="$ac_clean_files conftest.out"
-# Check that the compiler produces executables we can run.  If not, either
-# the compiler is broken, or we cross compile.
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we are cross compiling" >&5
-$as_echo_n "checking whether we are cross compiling... " >&6; }
-if test "$cross_compiling" != yes; then
-  { { ac_try="$ac_link"
-case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
-$as_echo "$ac_try_echo"; } >&5
-  (eval "$ac_link") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
-  test $ac_status = 0; }
-  if { ac_try='./conftest$ac_cv_exeext'
-  { { case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
-$as_echo "$ac_try_echo"; } >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
-  test $ac_status = 0; }; }; then
-    cross_compiling=no
-  else
-    if test "$cross_compiling" = maybe; then
-	cross_compiling=yes
-    else
-	{ { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
-$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
-as_fn_error $? "cannot run C compiled programs.
-If you meant to cross compile, use \`--host'.
-See \`config.log' for more details" "$LINENO" 5; }
-    fi
-  fi
+if ac_fn_c_try_link "$LINENO"; then :
+  ac_cv_working_alloca_h=yes
+else
+  ac_cv_working_alloca_h=no
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $cross_compiling" >&5
-$as_echo "$cross_compiling" >&6; }
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_working_alloca_h" >&5
+$as_echo "$ac_cv_working_alloca_h" >&6; }
+if test $ac_cv_working_alloca_h = yes; then
 
-rm -f conftest.$ac_ext conftest$ac_cv_exeext conftest.out
-ac_clean_files=$ac_clean_files_save
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for suffix of object files" >&5
-$as_echo_n "checking for suffix of object files... " >&6; }
-if ${ac_cv_objext+:} false; then :
+$as_echo "#define HAVE_ALLOCA_H 1" >>confdefs.h
+
+fi
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for alloca" >&5
+$as_echo_n "checking for alloca... " >&6; }
+if ${ac_cv_func_alloca_works+:} false; then :
   $as_echo_n "(cached) " >&6
 else
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
+#ifdef __GNUC__
+# define alloca __builtin_alloca
+#else
+# ifdef _MSC_VER
+#  include <malloc.h>
+#  define alloca _alloca
+# else
+#  ifdef HAVE_ALLOCA_H
+#   include <alloca.h>
+#  else
+#   ifdef _AIX
+ #pragma alloca
+#   else
+#    ifndef alloca /* predefined by HP cc +Olibcalls */
+void *alloca (size_t);
+#    endif
+#   endif
+#  endif
+# endif
+#endif
 
 int
 main ()
 {
-
+char *p = (char *) alloca (1);
+				    if (p) return 0;
   ;
   return 0;
 }
 _ACEOF
-rm -f conftest.o conftest.obj
-if { { ac_try="$ac_compile"
-case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
-$as_echo "$ac_try_echo"; } >&5
-  (eval "$ac_compile") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
-  test $ac_status = 0; }; then :
-  for ac_file in conftest.o conftest.obj conftest.*; do
-  test -f "$ac_file" || continue;
-  case $ac_file in
-    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM ) ;;
-    *) ac_cv_objext=`expr "$ac_file" : '.*\.\(.*\)'`
-       break;;
-  esac
-done
+if ac_fn_c_try_link "$LINENO"; then :
+  ac_cv_func_alloca_works=yes
 else
-  $as_echo "$as_me: failed program was:" >&5
-sed 's/^/| /' conftest.$ac_ext >&5
+  ac_cv_func_alloca_works=no
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_func_alloca_works" >&5
+$as_echo "$ac_cv_func_alloca_works" >&6; }
 
-{ { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
-$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
-as_fn_error $? "cannot compute suffix of object files: cannot compile
-See \`config.log' for more details" "$LINENO" 5; }
+if test $ac_cv_func_alloca_works = yes; then
+
+$as_echo "#define HAVE_ALLOCA 1" >>confdefs.h
+
+else
+  # The SVR3 libPW and SVR4 libucb both contain incompatible functions
+# that cause trouble.  Some versions do not even contain alloca or
+# contain a buggy version.  If you still want to use their alloca,
+# use ar to extract alloca.o from them instead of compiling alloca.c.
+
+ALLOCA=\${LIBOBJDIR}alloca.$ac_objext
+
+$as_echo "#define C_ALLOCA 1" >>confdefs.h
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether \`alloca.c' needs Cray hooks" >&5
+$as_echo_n "checking whether \`alloca.c' needs Cray hooks... " >&6; }
+if ${ac_cv_os_cray+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#if defined CRAY && ! defined CRAY2
+webecray
+#else
+wenotbecray
+#endif
+
+_ACEOF
+if (eval "$ac_cpp conftest.$ac_ext") 2>&5 |
+  $EGREP "webecray" >/dev/null 2>&1; then :
+  ac_cv_os_cray=yes
+else
+  ac_cv_os_cray=no
 fi
-rm -f conftest.$ac_cv_objext conftest.$ac_ext
+rm -f conftest*
+
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_objext" >&5
-$as_echo "$ac_cv_objext" >&6; }
-OBJEXT=$ac_cv_objext
-ac_objext=$OBJEXT
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we are using the GNU C compiler" >&5
-$as_echo_n "checking whether we are using the GNU C compiler... " >&6; }
-if ${ac_cv_c_compiler_gnu+:} false; then :
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_os_cray" >&5
+$as_echo "$ac_cv_os_cray" >&6; }
+if test $ac_cv_os_cray = yes; then
+  for ac_func in _getb67 GETB67 getb67; do
+    as_ac_var=`$as_echo "ac_cv_func_$ac_func" | $as_tr_sh`
+ac_fn_c_check_func "$LINENO" "$ac_func" "$as_ac_var"
+if eval test \"x\$"$as_ac_var"\" = x"yes"; then :
+
+cat >>confdefs.h <<_ACEOF
+#define CRAY_STACKSEG_END $ac_func
+_ACEOF
+
+    break
+fi
+
+  done
+fi
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking stack direction for C alloca" >&5
+$as_echo_n "checking stack direction for C alloca... " >&6; }
+if ${ac_cv_c_stack_direction+:} false; then :
   $as_echo_n "(cached) " >&6
 else
+  if test "$cross_compiling" = yes; then :
+  ac_cv_c_stack_direction=0
+else
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
+$ac_includes_default
+int
+find_stack_direction ()
+{
+  static char *addr = 0;
+  auto char dummy;
+  if (addr == 0)
+    {
+      addr = &dummy;
+      return find_stack_direction ();
+    }
+  else
+    return (&dummy > addr) ? 1 : -1;
+}
+
+int
+main ()
+{
+  return find_stack_direction () < 0;
+}
+_ACEOF
+if ac_fn_c_try_run "$LINENO"; then :
+  ac_cv_c_stack_direction=1
+else
+  ac_cv_c_stack_direction=-1
+fi
+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
+  conftest.$ac_objext conftest.beam conftest.$ac_ext
+fi
+
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_c_stack_direction" >&5
+$as_echo "$ac_cv_c_stack_direction" >&6; }
+cat >>confdefs.h <<_ACEOF
+#define STACK_DIRECTION $ac_cv_c_stack_direction
+_ACEOF
+
+
+fi
+
+case $ac_cv_working_alloca_h in
+    yes)    HAVE_ALLOCA_H=YesPlease;;
+    *)      HAVE_ALLOCA_H='';;
+esac
+
+config_appended_defs="$config_appended_defs${newline}HAVE_ALLOCA_H=${HAVE_ALLOCA_H}"
+#
+# Define NO_CURL if you do not have curl installed.  git-http-pull and
+# git-http-push are not built, and you cannot use http:// and https://
+# transports.
+#
+# Define CURLDIR=/foo/bar if your curl header and library files are in
+# /foo/bar/include and /foo/bar/lib directories.
+
+# Check whether --with-curl was given.
+if test "${with_curl+set}" = set; then :
+  withval=$with_curl;     if test "$withval" = "no"; then
+	NO_CURL=YesPlease
+    elif test "$withval" = "yes"; then
+	NO_CURL=
+    else
+	NO_CURL=
+	CURLDIR=$withval
+	{ $as_echo "$as_me:${as_lineno-$LINENO}: Setting CURLDIR to $withval" >&5
+$as_echo "$as_me: Setting CURLDIR to $withval" >&6;}
+
+config_appended_defs="$config_appended_defs${newline}CURLDIR=$withval"
+    fi
+
+fi
+
+#
+# Define NO_EXPAT if you do not have expat installed.  git-http-push is
+# not built, and you cannot push using http:// and https:// transports.
+#
+# Define EXPATDIR=/foo/bar if your expat header and library files are in
+# /foo/bar/include and /foo/bar/lib directories.
+
+# Check whether --with-expat was given.
+if test "${with_expat+set}" = set; then :
+  withval=$with_expat;     if test "$withval" = "no"; then
+	NO_EXPAT=YesPlease
+    elif test "$withval" = "yes"; then
+	NO_EXPAT=
+    else
+	NO_EXPAT=
+	EXPATDIR=$withval
+	{ $as_echo "$as_me:${as_lineno-$LINENO}: Setting EXPATDIR to $withval" >&5
+$as_echo "$as_me: Setting EXPATDIR to $withval" >&6;}
+
+config_appended_defs="$config_appended_defs${newline}EXPATDIR=$withval"
+    fi
+
+fi
+
+#
+# Define NO_FINK if you are building on Darwin/Mac OS X, have Fink
+# installed in /sw, but don't want GIT to link against any libraries
+# installed there.  If defined you may specify your own (or Fink's)
+# include directories and library directories by defining CFLAGS
+# and LDFLAGS appropriately.
+#
+# Define NO_DARWIN_PORTS if you are building on Darwin/Mac OS X,
+# have DarwinPorts installed in /opt/local, but don't want GIT to
+# link against any libraries installed there.  If defined you may
+# specify your own (or DarwinPort's) include directories and
+# library directories by defining CFLAGS and LDFLAGS appropriately.
+#
+# Define NO_MMAP if you want to avoid mmap.
+#
+# Define NO_ICONV if your libc does not properly support iconv.
+
+# Check whether --with-iconv was given.
+if test "${with_iconv+set}" = set; then :
+  withval=$with_iconv;     if test "$withval" = "no"; then
+	NO_ICONV=YesPlease
+    elif test "$withval" = "yes"; then
+	NO_ICONV=
+    else
+	NO_ICONV=
+	ICONVDIR=$withval
+	{ $as_echo "$as_me:${as_lineno-$LINENO}: Setting ICONVDIR to $withval" >&5
+$as_echo "$as_me: Setting ICONVDIR to $withval" >&6;}
+
+config_appended_defs="$config_appended_defs${newline}ICONVDIR=$withval"
+    fi
+
+fi
+
+
+## --enable-FEATURE[=ARG] and --disable-FEATURE
+#
+# Define USE_NSEC below if you want git to care about sub-second file mtimes
+# and ctimes. Note that you need recent glibc (at least 2.2.4) for this, and
+# it will BREAK YOUR LOCAL DIFFS! show-diff and anything using it will likely
+# randomly break unless your underlying filesystem supports those sub-second
+# times (my ext3 doesn't).
+#
+# Define USE_STDEV below if you want git to care about the underlying device
+# change being considered an inode change from the update-index perspective.
+
+#
+# Allow user to set ETC_GITCONFIG variable
 
-int
-main ()
-{
-#ifndef __GNUC__
-       choke me
-#endif
+# Check whether --with-gitconfig was given.
+if test "${with_gitconfig+set}" = set; then :
+  withval=$with_gitconfig; if test -n "$withval"; then
+  if test "$withval" = "yes" -o "$withval" = "no"; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: You likely do not want either 'yes' or 'no' as
+		     a value for gitconfig (ETC_GITCONFIG).  Maybe you do...?" >&5
+$as_echo "$as_me: WARNING: You likely do not want either 'yes' or 'no' as
+		     a value for gitconfig (ETC_GITCONFIG).  Maybe you do...?" >&2;}
+  fi
+  { $as_echo "$as_me:${as_lineno-$LINENO}: Setting ETC_GITCONFIG to $withval" >&5
+$as_echo "$as_me: Setting ETC_GITCONFIG to $withval" >&6;}
 
-  ;
-  return 0;
-}
-_ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
-  ac_compiler_gnu=yes
-else
-  ac_compiler_gnu=no
+config_appended_defs="$config_appended_defs${newline}ETC_GITCONFIG=$withval"
+ fi
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
-ac_cv_c_compiler_gnu=$ac_compiler_gnu
 
-fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_c_compiler_gnu" >&5
-$as_echo "$ac_cv_c_compiler_gnu" >&6; }
-if test $ac_compiler_gnu = yes; then
-  GCC=yes
-else
-  GCC=
-fi
-ac_test_CFLAGS=${CFLAGS+set}
-ac_save_CFLAGS=$CFLAGS
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CC accepts -g" >&5
-$as_echo_n "checking whether $CC accepts -g... " >&6; }
-if ${ac_cv_prog_cc_g+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
-  ac_save_c_werror_flag=$ac_c_werror_flag
-   ac_c_werror_flag=yes
-   ac_cv_prog_cc_g=no
-   CFLAGS="-g"
-   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
 
-int
-main ()
-{
+#
+# Allow user to set ETC_GITATTRIBUTES variable
 
-  ;
-  return 0;
-}
-_ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
-  ac_cv_prog_cc_g=yes
-else
-  CFLAGS=""
-      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
+# Check whether --with-gitattributes was given.
+if test "${with_gitattributes+set}" = set; then :
+  withval=$with_gitattributes; if test -n "$withval"; then
+  if test "$withval" = "yes" -o "$withval" = "no"; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: You likely do not want either 'yes' or 'no' as
+		     a value for gitattributes (ETC_GITATTRIBUTES).  Maybe you do...?" >&5
+$as_echo "$as_me: WARNING: You likely do not want either 'yes' or 'no' as
+		     a value for gitattributes (ETC_GITATTRIBUTES).  Maybe you do...?" >&2;}
+  fi
+  { $as_echo "$as_me:${as_lineno-$LINENO}: Setting ETC_GITATTRIBUTES to $withval" >&5
+$as_echo "$as_me: Setting ETC_GITATTRIBUTES to $withval" >&6;}
 
-int
-main ()
-{
+config_appended_defs="$config_appended_defs${newline}ETC_GITATTRIBUTES=$withval"
+ fi
+fi
 
-  ;
-  return 0;
-}
-_ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
 
-else
-  ac_c_werror_flag=$ac_save_c_werror_flag
-	 CFLAGS="-g"
-	 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
+#
+# Allow user to set the default pager
 
-int
-main ()
-{
+# Check whether --with-pager was given.
+if test "${with_pager+set}" = set; then :
+  withval=$with_pager; if test -n "$withval"; then
+  if test "$withval" = "yes" -o "$withval" = "no"; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: You likely do not want either 'yes' or 'no' as
+		     a value for pager (DEFAULT_PAGER).  Maybe you do...?" >&5
+$as_echo "$as_me: WARNING: You likely do not want either 'yes' or 'no' as
+		     a value for pager (DEFAULT_PAGER).  Maybe you do...?" >&2;}
+  fi
+  { $as_echo "$as_me:${as_lineno-$LINENO}: Setting DEFAULT_PAGER to $withval" >&5
+$as_echo "$as_me: Setting DEFAULT_PAGER to $withval" >&6;}
 
-  ;
-  return 0;
-}
-_ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
-  ac_cv_prog_cc_g=yes
-fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
-fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
-fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
-   ac_c_werror_flag=$ac_save_c_werror_flag
+config_appended_defs="$config_appended_defs${newline}DEFAULT_PAGER=$withval"
+ fi
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cc_g" >&5
-$as_echo "$ac_cv_prog_cc_g" >&6; }
-if test "$ac_test_CFLAGS" = set; then
-  CFLAGS=$ac_save_CFLAGS
-elif test $ac_cv_prog_cc_g = yes; then
-  if test "$GCC" = yes; then
-    CFLAGS="-g -O2"
-  else
-    CFLAGS="-g"
-  fi
-else
-  if test "$GCC" = yes; then
-    CFLAGS="-O2"
-  else
-    CFLAGS=
+
+#
+# Allow user to set the default editor
+
+# Check whether --with-editor was given.
+if test "${with_editor+set}" = set; then :
+  withval=$with_editor; if test -n "$withval"; then
+  if test "$withval" = "yes" -o "$withval" = "no"; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: You likely do not want either 'yes' or 'no' as
+		     a value for editor (DEFAULT_EDITOR).  Maybe you do...?" >&5
+$as_echo "$as_me: WARNING: You likely do not want either 'yes' or 'no' as
+		     a value for editor (DEFAULT_EDITOR).  Maybe you do...?" >&2;}
   fi
+  { $as_echo "$as_me:${as_lineno-$LINENO}: Setting DEFAULT_EDITOR to $withval" >&5
+$as_echo "$as_me: Setting DEFAULT_EDITOR to $withval" >&6;}
+
+config_appended_defs="$config_appended_defs${newline}DEFAULT_EDITOR=$withval"
+ fi
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $CC option to accept ISO C89" >&5
-$as_echo_n "checking for $CC option to accept ISO C89... " >&6; }
-if ${ac_cv_prog_cc_c89+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
-  ac_cv_prog_cc_c89=no
-ac_save_CC=$CC
-cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-#include <stdarg.h>
-#include <stdio.h>
-struct stat;
-/* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
-struct buf { int x; };
-FILE * (*rcsopen) (struct buf *, struct stat *, int);
-static char *e (p, i)
-     char **p;
-     int i;
-{
-  return p[i];
-}
-static char *f (char * (*g) (char **, int), char **p, ...)
-{
-  char *s;
-  va_list v;
-  va_start (v,p);
-  s = g (p, va_arg (v,int));
-  va_end (v);
-  return s;
-}
 
-/* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
-   function prototypes and stuff, but not '\xHH' hex character constants.
-   These don't provoke an error unfortunately, instead are silently treated
-   as 'x'.  The following induces an error, until -std is added to get
-   proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
-   array size at least.  It's necessary to write '\x00'==0 to get something
-   that's true only with -std.  */
-int osf4_cc_array ['\x00' == 0 ? 1 : -1];
 
-/* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
-   inside strings and character constants.  */
-#define FOO(x) 'x'
-int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
+#
+# Define SHELL_PATH to provide path to shell.
 
-int test (int i, double x);
-struct s1 {int (*f) (int a);};
-struct s2 {int (*f) (double a);};
-int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
-int argc;
-char **argv;
-int
-main ()
-{
-return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
-  ;
-  return 0;
-}
-_ACEOF
-for ac_arg in '' -qlanglvl=extc89 -qlanglvl=ansi -std \
-	-Ae "-Aa -D_HPUX_SOURCE" "-Xc -D__EXTENSIONS__"
-do
-  CC="$ac_save_CC $ac_arg"
-  if ac_fn_c_try_compile "$LINENO"; then :
-  ac_cv_prog_cc_c89=$ac_arg
-fi
-rm -f core conftest.err conftest.$ac_objext
-  test "x$ac_cv_prog_cc_c89" != "xno" && break
-done
-rm -f conftest.$ac_ext
-CC=$ac_save_CC
+# Check whether --with-shell was given.
+if test "${with_shell+set}" = set; then :
+  withval=$with_shell;     if test "$withval" = "no"; then
+	if test -n ""; then
+		SHELL_PATH=$withval
+		{ $as_echo "$as_me:${as_lineno-$LINENO}: Disabling use of SHELL" >&5
+$as_echo "$as_me: Disabling use of SHELL" >&6;}
 
-fi
-# AC_CACHE_VAL
-case "x$ac_cv_prog_cc_c89" in
-  x)
-    { $as_echo "$as_me:${as_lineno-$LINENO}: result: none needed" >&5
-$as_echo "none needed" >&6; } ;;
-  xno)
-    { $as_echo "$as_me:${as_lineno-$LINENO}: result: unsupported" >&5
-$as_echo "unsupported" >&6; } ;;
-  *)
-    CC="$CC $ac_cv_prog_cc_c89"
-    { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cc_c89" >&5
-$as_echo "$ac_cv_prog_cc_c89" >&6; } ;;
-esac
-if test "x$ac_cv_prog_cc_c89" != xno; then :
+config_appended_defs="$config_appended_defs${newline}NO_SHELL=YesPlease"
+
+config_appended_defs="$config_appended_defs${newline}SHELL_PATH="
+	else
+		as_fn_error $? "You cannot use git without shell" "$LINENO" 5
+	fi
+    else
+	if test "$withval" = "yes"; then
+		{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: You should provide path for --with-shell=PATH" >&5
+$as_echo "$as_me: WARNING: You should provide path for --with-shell=PATH" >&2;}
+	else
+		SHELL_PATH=$withval
+		{ $as_echo "$as_me:${as_lineno-$LINENO}: Setting SHELL_PATH to $withval" >&5
+$as_echo "$as_me: Setting SHELL_PATH to $withval" >&6;}
+
+config_appended_defs="$config_appended_defs${newline}SHELL_PATH=$withval"
+	fi
+    fi
 
 fi
 
-ac_ext=c
-ac_cpp='$CPP $CPPFLAGS'
-ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
-ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
-ac_compiler_gnu=$ac_cv_c_compiler_gnu
+#
+# Define PERL_PATH to provide path to Perl.
 
+# Check whether --with-perl was given.
+if test "${with_perl+set}" = set; then :
+  withval=$with_perl;     if test "$withval" = "no"; then
+	if test -n ""; then
+		PERL_PATH=$withval
+		{ $as_echo "$as_me:${as_lineno-$LINENO}: Disabling use of PERL" >&5
+$as_echo "$as_me: Disabling use of PERL" >&6;}
 
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for inline" >&5
-$as_echo_n "checking for inline... " >&6; }
-if ${ac_cv_c_inline+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
-  ac_cv_c_inline=no
-for ac_kw in inline __inline__ __inline; do
-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-#ifndef __cplusplus
-typedef int foo_t;
-static $ac_kw foo_t static_foo () {return 0; }
-$ac_kw foo_t foo () {return 0; }
-#endif
+config_appended_defs="$config_appended_defs${newline}NO_PERL=YesPlease"
 
-_ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
-  ac_cv_c_inline=$ac_kw
-fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
-  test "$ac_cv_c_inline" != no && break
-done
+config_appended_defs="$config_appended_defs${newline}PERL_PATH="
+	else
+		as_fn_error $? "You cannot use git without perl" "$LINENO" 5
+	fi
+    else
+	if test "$withval" = "yes"; then
+		{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: You should provide path for --with-perl=PATH" >&5
+$as_echo "$as_me: WARNING: You should provide path for --with-perl=PATH" >&2;}
+	else
+		PERL_PATH=$withval
+		{ $as_echo "$as_me:${as_lineno-$LINENO}: Setting PERL_PATH to $withval" >&5
+$as_echo "$as_me: Setting PERL_PATH to $withval" >&6;}
 
-fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_c_inline" >&5
-$as_echo "$ac_cv_c_inline" >&6; }
+config_appended_defs="$config_appended_defs${newline}PERL_PATH=$withval"
+	fi
+    fi
 
-case $ac_cv_c_inline in
-  inline | yes) ;;
-  *)
-    case $ac_cv_c_inline in
-      no) ac_val=;;
-      *) ac_val=$ac_cv_c_inline;;
-    esac
-    cat >>confdefs.h <<_ACEOF
-#ifndef __cplusplus
-#define inline $ac_val
-#endif
-_ACEOF
-    ;;
-esac
+fi
 
-case $ac_cv_c_inline in
-  inline | yes | no) INLINE='';;
-  *)                 INLINE=$ac_cv_c_inline ;;
-esac
+#
+# Define PYTHON_PATH to provide path to Python.
 
-config_appended_defs="$config_appended_defs${newline}INLINE=${INLINE}"
+# Check whether --with-python was given.
+if test "${with_python+set}" = set; then :
+  withval=$with_python;     if test "$withval" = "no"; then
+	if test -n "allow-without"; then
+		PYTHON_PATH=$withval
+		{ $as_echo "$as_me:${as_lineno-$LINENO}: Disabling use of PYTHON" >&5
+$as_echo "$as_me: Disabling use of PYTHON" >&6;}
 
-# which switch to pass runtime path to dynamic libraries to the linker
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking if linker supports -R" >&5
-$as_echo_n "checking if linker supports -R... " >&6; }
-if ${git_cv_ld_dashr+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
+config_appended_defs="$config_appended_defs${newline}NO_PYTHON=YesPlease"
 
-   SAVE_LDFLAGS="${LDFLAGS}"
-   LDFLAGS="${SAVE_LDFLAGS} -R /"
-   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
+config_appended_defs="$config_appended_defs${newline}PYTHON_PATH="
+	else
+		as_fn_error $? "You cannot use git without python" "$LINENO" 5
+	fi
+    else
+	if test "$withval" = "yes"; then
+		{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: You should provide path for --with-python=PATH" >&5
+$as_echo "$as_me: WARNING: You should provide path for --with-python=PATH" >&2;}
+	else
+		PYTHON_PATH=$withval
+		{ $as_echo "$as_me:${as_lineno-$LINENO}: Setting PYTHON_PATH to $withval" >&5
+$as_echo "$as_me: Setting PYTHON_PATH to $withval" >&6;}
 
-int
-main ()
-{
+config_appended_defs="$config_appended_defs${newline}PYTHON_PATH=$withval"
+	fi
+    fi
 
-  ;
-  return 0;
-}
-_ACEOF
-if ac_fn_c_try_link "$LINENO"; then :
-  git_cv_ld_dashr=yes
-else
-  git_cv_ld_dashr=no
 fi
-rm -f core conftest.err conftest.$ac_objext \
-    conftest$ac_exeext conftest.$ac_ext
-   LDFLAGS="${SAVE_LDFLAGS}"
 
-fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $git_cv_ld_dashr" >&5
-$as_echo "$git_cv_ld_dashr" >&6; }
-if test "$git_cv_ld_dashr" = "yes"; then
-   CC_LD_DYNPATH=-R
-else
-   { $as_echo "$as_me:${as_lineno-$LINENO}: checking if linker supports -Wl,-rpath," >&5
-$as_echo_n "checking if linker supports -Wl,-rpath,... " >&6; }
-if ${git_cv_ld_wl_rpath+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
+#
+# Define ZLIB_PATH to provide path to zlib.
 
-      SAVE_LDFLAGS="${LDFLAGS}"
-      LDFLAGS="${SAVE_LDFLAGS} -Wl,-rpath,/"
-      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
+# Check whether --with-zlib was given.
+if test "${with_zlib+set}" = set; then :
+  withval=$with_zlib;     if test "$withval" = "no"; then
+	if test -n ""; then
+		ZLIB_PATH=$withval
+		{ $as_echo "$as_me:${as_lineno-$LINENO}: Disabling use of ZLIB" >&5
+$as_echo "$as_me: Disabling use of ZLIB" >&6;}
 
-int
-main ()
-{
+config_appended_defs="$config_appended_defs${newline}NO_ZLIB=YesPlease"
 
-  ;
-  return 0;
-}
-_ACEOF
-if ac_fn_c_try_link "$LINENO"; then :
-  git_cv_ld_wl_rpath=yes
-else
-  git_cv_ld_wl_rpath=no
-fi
-rm -f core conftest.err conftest.$ac_objext \
-    conftest$ac_exeext conftest.$ac_ext
-      LDFLAGS="${SAVE_LDFLAGS}"
+config_appended_defs="$config_appended_defs${newline}ZLIB_PATH="
+	else
+		as_fn_error $? "You cannot use git without zlib" "$LINENO" 5
+	fi
+    else
+	if test "$withval" = "yes"; then
+		{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: You should provide path for --with-zlib=PATH" >&5
+$as_echo "$as_me: WARNING: You should provide path for --with-zlib=PATH" >&2;}
+	else
+		ZLIB_PATH=$withval
+		{ $as_echo "$as_me:${as_lineno-$LINENO}: Setting ZLIB_PATH to $withval" >&5
+$as_echo "$as_me: Setting ZLIB_PATH to $withval" >&6;}
+
+config_appended_defs="$config_appended_defs${newline}ZLIB_PATH=$withval"
+	fi
+    fi
 
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $git_cv_ld_wl_rpath" >&5
-$as_echo "$git_cv_ld_wl_rpath" >&6; }
-   if test "$git_cv_ld_wl_rpath" = "yes"; then
-      CC_LD_DYNPATH=-Wl,-rpath,
-   else
-      { $as_echo "$as_me:${as_lineno-$LINENO}: checking if linker supports -rpath" >&5
-$as_echo_n "checking if linker supports -rpath... " >&6; }
-if ${git_cv_ld_rpath+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
 
-         SAVE_LDFLAGS="${LDFLAGS}"
-         LDFLAGS="${SAVE_LDFLAGS} -rpath /"
-         cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
+#
+# Declare the with-tcltk/without-tcltk options.
 
-int
-main ()
-{
+# Check whether --with-tcltk was given.
+if test "${with_tcltk+set}" = set; then :
+  withval=$with_tcltk;     if test "$withval" = "no"; then
+	NO_TCLTK=YesPlease
+    elif test "$withval" = "yes"; then
+	NO_TCLTK=
+    else
+	NO_TCLTK=
+	TCLTKDIR=$withval
+	{ $as_echo "$as_me:${as_lineno-$LINENO}: Setting TCLTKDIR to $withval" >&5
+$as_echo "$as_me: Setting TCLTKDIR to $withval" >&6;}
 
-  ;
-  return 0;
-}
-_ACEOF
-if ac_fn_c_try_link "$LINENO"; then :
-  git_cv_ld_rpath=yes
-else
-  git_cv_ld_rpath=no
-fi
-rm -f core conftest.err conftest.$ac_objext \
-    conftest$ac_exeext conftest.$ac_ext
-         LDFLAGS="${SAVE_LDFLAGS}"
+config_appended_defs="$config_appended_defs${newline}TCLTKDIR=$withval"
+    fi
 
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $git_cv_ld_rpath" >&5
-$as_echo "$git_cv_ld_rpath" >&6; }
-      if test "$git_cv_ld_rpath" = "yes"; then
-         CC_LD_DYNPATH=-rpath
-      else
-         CC_LD_DYNPATH=
-         { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: linker does not support runtime path to dynamic libraries" >&5
-$as_echo "$as_me: WARNING: linker does not support runtime path to dynamic libraries" >&2;}
-      fi
-   fi
-fi
 
-config_appended_defs="$config_appended_defs${newline}CC_LD_DYNPATH=${CC_LD_DYNPATH}"
-#AC_PROG_INSTALL		# needs install-sh or install.sh in sources
+#
+
+
+## Checks for programs.
+{ $as_echo "$as_me:${as_lineno-$LINENO}: CHECKS for programs" >&5
+$as_echo "$as_me: CHECKS for programs" >&6;}
+#
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
 if test -n "$ac_tool_prefix"; then
-  for ac_prog in gar ar
+  for ac_prog in cc gcc
   do
     # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
 set dummy $ac_tool_prefix$ac_prog; ac_word=$2
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
 $as_echo_n "checking for $ac_word... " >&6; }
-if ${ac_cv_prog_AR+:} false; then :
+if ${ac_cv_prog_CC+:} false; then :
   $as_echo_n "(cached) " >&6
 else
-  if test -n "$AR"; then
-  ac_cv_prog_AR="$AR" # Let the user override the test.
+  if test -n "$CC"; then
+  ac_cv_prog_CC="$CC" # Let the user override the test.
 else
 as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
 for as_dir in $PATH
 do
   IFS=$as_save_IFS
   test -z "$as_dir" && as_dir=.
     for ac_exec_ext in '' $ac_executable_extensions; do
-  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
-    ac_cv_prog_AR="$ac_tool_prefix$ac_prog"
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_CC="$ac_tool_prefix$ac_prog"
     $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
     break 2
   fi
 done
   done
 IFS=$as_save_IFS
 
 fi
 fi
-AR=$ac_cv_prog_AR
-if test -n "$AR"; then
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $AR" >&5
-$as_echo "$AR" >&6; }
+CC=$ac_cv_prog_CC
+if test -n "$CC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $CC" >&5
+$as_echo "$CC" >&6; }
 else
   { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
 $as_echo "no" >&6; }
 fi
 
 
-    test -n "$AR" && break
+    test -n "$CC" && break
   done
 fi
-if test -z "$AR"; then
-  ac_ct_AR=$AR
-  for ac_prog in gar ar
+if test -z "$CC"; then
+  ac_ct_CC=$CC
+  for ac_prog in cc gcc
 do
   # Extract the first word of "$ac_prog", so it can be a program name with args.
 set dummy $ac_prog; ac_word=$2
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
 $as_echo_n "checking for $ac_word... " >&6; }
-if ${ac_cv_prog_ac_ct_AR+:} false; then :
+if ${ac_cv_prog_ac_ct_CC+:} false; then :
   $as_echo_n "(cached) " >&6
 else
-  if test -n "$ac_ct_AR"; then
-  ac_cv_prog_ac_ct_AR="$ac_ct_AR" # Let the user override the test.
+  if test -n "$ac_ct_CC"; then
+  ac_cv_prog_ac_ct_CC="$ac_ct_CC" # Let the user override the test.
 else
 as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
 for as_dir in $PATH
 do
   IFS=$as_save_IFS
   test -z "$as_dir" && as_dir=.
     for ac_exec_ext in '' $ac_executable_extensions; do
-  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
-    ac_cv_prog_ac_ct_AR="$ac_prog"
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_CC="$ac_prog"
     $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
     break 2
   fi
 done
   done
 IFS=$as_save_IFS
 
 fi
 fi
-ac_ct_AR=$ac_cv_prog_ac_ct_AR
-if test -n "$ac_ct_AR"; then
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_AR" >&5
-$as_echo "$ac_ct_AR" >&6; }
+ac_ct_CC=$ac_cv_prog_ac_ct_CC
+if test -n "$ac_ct_CC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_CC" >&5
+$as_echo "$ac_ct_CC" >&6; }
 else
   { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
 $as_echo "no" >&6; }
 fi
 
 
-  test -n "$ac_ct_AR" && break
+  test -n "$ac_ct_CC" && break
 done
 
-  if test "x$ac_ct_AR" = x; then
-    AR=":"
+  if test "x$ac_ct_CC" = x; then
+    CC=""
   else
     case $cross_compiling:$ac_tool_warned in
 yes:)
 { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
 $as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
 ac_tool_warned=yes ;;
 esac
-    AR=$ac_ct_AR
-  fi
-fi
-
-for ac_prog in gtar tar
-do
-  # Extract the first word of "$ac_prog", so it can be a program name with args.
-set dummy $ac_prog; ac_word=$2
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
-$as_echo_n "checking for $ac_word... " >&6; }
-if ${ac_cv_prog_TAR+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
-  if test -n "$TAR"; then
-  ac_cv_prog_TAR="$TAR" # Let the user override the test.
-else
-as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in $PATH
-do
-  IFS=$as_save_IFS
-  test -z "$as_dir" && as_dir=.
-    for ac_exec_ext in '' $ac_executable_extensions; do
-  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
-    ac_cv_prog_TAR="$ac_prog"
-    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
-    break 2
+    CC=$ac_ct_CC
   fi
-done
-  done
-IFS=$as_save_IFS
-
-fi
-fi
-TAR=$ac_cv_prog_TAR
-if test -n "$TAR"; then
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $TAR" >&5
-$as_echo "$TAR" >&6; }
-else
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
-$as_echo "no" >&6; }
 fi
 
 
-  test -n "$TAR" && break
-done
+test -z "$CC" && { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
+$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
+as_fn_error $? "no acceptable C compiler found in \$PATH
+See \`config.log' for more details" "$LINENO" 5; }
 
-for ac_prog in gnudiff gdiff diff
-do
-  # Extract the first word of "$ac_prog", so it can be a program name with args.
-set dummy $ac_prog; ac_word=$2
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
-$as_echo_n "checking for $ac_word... " >&6; }
-if ${ac_cv_prog_DIFF+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
-  if test -n "$DIFF"; then
-  ac_cv_prog_DIFF="$DIFF" # Let the user override the test.
-else
-as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in $PATH
-do
-  IFS=$as_save_IFS
-  test -z "$as_dir" && as_dir=.
-    for ac_exec_ext in '' $ac_executable_extensions; do
-  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
-    ac_cv_prog_DIFF="$ac_prog"
-    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
-    break 2
+# Provide some information about the compiler.
+$as_echo "$as_me:${as_lineno-$LINENO}: checking for C compiler version" >&5
+set X $ac_compile
+ac_compiler=$2
+for ac_option in --version -v -V -qversion; do
+  { { ac_try="$ac_compiler $ac_option >&5"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
+$as_echo "$ac_try_echo"; } >&5
+  (eval "$ac_compiler $ac_option >&5") 2>conftest.err
+  ac_status=$?
+  if test -s conftest.err; then
+    sed '10a\
+... rest of stderr output deleted ...
+         10q' conftest.err >conftest.er1
+    cat conftest.er1 >&5
   fi
-done
-  done
-IFS=$as_save_IFS
-
-fi
-fi
-DIFF=$ac_cv_prog_DIFF
-if test -n "$DIFF"; then
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $DIFF" >&5
-$as_echo "$DIFF" >&6; }
-else
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
-$as_echo "no" >&6; }
-fi
-
-
-  test -n "$DIFF" && break
+  rm -f conftest.er1 conftest.err
+  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+  test $ac_status = 0; }
 done
 
-# TCLTK_PATH will be set to some value if we want Tcl/Tk
-# or will be empty otherwise.
-if test -n "$NO_TCLTK"; then
-  TCLTK_PATH=
-else
-  if test "$with_tcltk" = ""; then
-  # No Tcl/Tk switches given. Do not check for Tcl/Tk, use bare 'wish'.
-    TCLTK_PATH=wish
-  elif test "$with_tcltk" = "yes"; then
-  # Tcl/Tk check requested.
-    for ac_prog in wish
-do
-  # Extract the first word of "$ac_prog", so it can be a program name with args.
-set dummy $ac_prog; ac_word=$2
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
-$as_echo_n "checking for $ac_word... " >&6; }
-if ${ac_cv_prog_TCLTK_PATH+:} false; then :
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we are using the GNU C compiler" >&5
+$as_echo_n "checking whether we are using the GNU C compiler... " >&6; }
+if ${ac_cv_c_compiler_gnu+:} false; then :
   $as_echo_n "(cached) " >&6
 else
-  if test -n "$TCLTK_PATH"; then
-  ac_cv_prog_TCLTK_PATH="$TCLTK_PATH" # Let the user override the test.
-else
-as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in $PATH
-do
-  IFS=$as_save_IFS
-  test -z "$as_dir" && as_dir=.
-    for ac_exec_ext in '' $ac_executable_extensions; do
-  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
-    ac_cv_prog_TCLTK_PATH="$ac_prog"
-    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
-    break 2
-  fi
-done
-  done
-IFS=$as_save_IFS
-
-fi
-fi
-TCLTK_PATH=$ac_cv_prog_TCLTK_PATH
-if test -n "$TCLTK_PATH"; then
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $TCLTK_PATH" >&5
-$as_echo "$TCLTK_PATH" >&6; }
-else
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
-$as_echo "no" >&6; }
-fi
-
-
-  test -n "$TCLTK_PATH" && break
-done
-
-  else
-    { $as_echo "$as_me:${as_lineno-$LINENO}: result: Using Tcl/Tk interpreter $with_tcltk" >&5
-$as_echo "Using Tcl/Tk interpreter $with_tcltk" >&6; }
-    TCLTK_PATH="$with_tcltk"
-  fi
-fi
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
 
-config_appended_defs="$config_appended_defs${newline}TCLTK_PATH=${TCLTK_PATH}"
-for ac_prog in asciidoc
-do
-  # Extract the first word of "$ac_prog", so it can be a program name with args.
-set dummy $ac_prog; ac_word=$2
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
-$as_echo_n "checking for $ac_word... " >&6; }
-if ${ac_cv_prog_ASCIIDOC+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
-  if test -n "$ASCIIDOC"; then
-  ac_cv_prog_ASCIIDOC="$ASCIIDOC" # Let the user override the test.
-else
-as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in $PATH
-do
-  IFS=$as_save_IFS
-  test -z "$as_dir" && as_dir=.
-    for ac_exec_ext in '' $ac_executable_extensions; do
-  if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
-    ac_cv_prog_ASCIIDOC="$ac_prog"
-    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
-    break 2
-  fi
-done
-  done
-IFS=$as_save_IFS
+int
+main ()
+{
+#ifndef __GNUC__
+       choke me
+#endif
 
-fi
-fi
-ASCIIDOC=$ac_cv_prog_ASCIIDOC
-if test -n "$ASCIIDOC"; then
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ASCIIDOC" >&5
-$as_echo "$ASCIIDOC" >&6; }
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_compiler_gnu=yes
 else
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
-$as_echo "no" >&6; }
+  ac_compiler_gnu=no
 fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+ac_cv_c_compiler_gnu=$ac_compiler_gnu
 
-
-  test -n "$ASCIIDOC" && break
-done
-
-if test -n "$ASCIIDOC"; then
-	{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for asciidoc version" >&5
-$as_echo_n "checking for asciidoc version... " >&6; }
-	asciidoc_version=`$ASCIIDOC --version 2>/dev/null`
-	case "${asciidoc_version}" in
-	asciidoc' '8*)
-		{ $as_echo "$as_me:${as_lineno-$LINENO}: result: ${asciidoc_version}" >&5
-$as_echo "${asciidoc_version}" >&6; }
-		;;
-	*)
-		{ $as_echo "$as_me:${as_lineno-$LINENO}: result: ${asciidoc_version} (unknown)" >&5
-$as_echo "${asciidoc_version} (unknown)" >&6; }
-		;;
-	esac
 fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_c_compiler_gnu" >&5
+$as_echo "$ac_cv_c_compiler_gnu" >&6; }
+if test $ac_compiler_gnu = yes; then
+  GCC=yes
+else
+  GCC=
+fi
+ac_test_CFLAGS=${CFLAGS+set}
+ac_save_CFLAGS=$CFLAGS
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $CC accepts -g" >&5
+$as_echo_n "checking whether $CC accepts -g... " >&6; }
+if ${ac_cv_prog_cc_g+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_save_c_werror_flag=$ac_c_werror_flag
+   ac_c_werror_flag=yes
+   ac_cv_prog_cc_g=no
+   CFLAGS="-g"
+   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
 
+int
+main ()
+{
 
-## Checks for libraries.
-{ $as_echo "$as_me:${as_lineno-$LINENO}: CHECKS for libraries" >&5
-$as_echo "$as_me: CHECKS for libraries" >&6;}
-#
-# Define NO_OPENSSL environment variable if you do not have OpenSSL.
-# Define NEEDS_SSL_WITH_CRYPTO if you need -lcrypto with -lssl (Darwin).
-
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_prog_cc_g=yes
+else
+  CFLAGS=""
+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
 
-if test -n "$OPENSSLDIR"; then
-   old_CPPFLAGS="$CPPFLAGS"
-   old_LDFLAGS="$LDFLAGS"
-   CPPFLAGS="-I$OPENSSLDIR/include $CPPFLAGS"
-   LDFLAGS="-L$OPENSSLDIR/$lib $LDFLAGS"
-fi
+int
+main ()
+{
 
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
 
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for SHA1_Init in -lcrypto" >&5
-$as_echo_n "checking for SHA1_Init in -lcrypto... " >&6; }
-if ${ac_cv_lib_crypto_SHA1_Init+:} false; then :
-  $as_echo_n "(cached) " >&6
 else
-  ac_check_lib_save_LIBS=$LIBS
-LIBS="-lcrypto  $LIBS"
-cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+  ac_c_werror_flag=$ac_save_c_werror_flag
+	 CFLAGS="-g"
+	 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
-/* Override any GCC internal prototype to avoid an error.
-   Use char because int might match the return type of a GCC
-   builtin and then its argument prototype would still apply.  */
-#ifdef __cplusplus
-extern "C"
-#endif
-char SHA1_Init ();
 int
 main ()
 {
-return SHA1_Init ();
+
   ;
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_link "$LINENO"; then :
-  ac_cv_lib_crypto_SHA1_Init=yes
-else
-  ac_cv_lib_crypto_SHA1_Init=no
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_prog_cc_g=yes
 fi
-rm -f core conftest.err conftest.$ac_objext \
-    conftest$ac_exeext conftest.$ac_ext
-LIBS=$ac_check_lib_save_LIBS
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_crypto_SHA1_Init" >&5
-$as_echo "$ac_cv_lib_crypto_SHA1_Init" >&6; }
-if test "x$ac_cv_lib_crypto_SHA1_Init" = xyes; then :
-  NEEDS_SSL_WITH_CRYPTO=
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+   ac_c_werror_flag=$ac_save_c_werror_flag
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cc_g" >&5
+$as_echo "$ac_cv_prog_cc_g" >&6; }
+if test "$ac_test_CFLAGS" = set; then
+  CFLAGS=$ac_save_CFLAGS
+elif test $ac_cv_prog_cc_g = yes; then
+  if test "$GCC" = yes; then
+    CFLAGS="-g -O2"
+  else
+    CFLAGS="-g"
+  fi
 else
-  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for SHA1_Init in -lssl" >&5
-$as_echo_n "checking for SHA1_Init in -lssl... " >&6; }
-if ${ac_cv_lib_ssl_SHA1_Init+:} false; then :
+  if test "$GCC" = yes; then
+    CFLAGS="-O2"
+  else
+    CFLAGS=
+  fi
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $CC option to accept ISO C89" >&5
+$as_echo_n "checking for $CC option to accept ISO C89... " >&6; }
+if ${ac_cv_prog_cc_c89+:} false; then :
   $as_echo_n "(cached) " >&6
 else
-  ac_check_lib_save_LIBS=$LIBS
-LIBS="-lssl  $LIBS"
+  ac_cv_prog_cc_c89=no
+ac_save_CC=$CC
 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
+#include <stdarg.h>
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+/* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */
+struct buf { int x; };
+FILE * (*rcsopen) (struct buf *, struct stat *, int);
+static char *e (p, i)
+     char **p;
+     int i;
+{
+  return p[i];
+}
+static char *f (char * (*g) (char **, int), char **p, ...)
+{
+  char *s;
+  va_list v;
+  va_start (v,p);
+  s = g (p, va_arg (v,int));
+  va_end (v);
+  return s;
+}
 
-/* Override any GCC internal prototype to avoid an error.
-   Use char because int might match the return type of a GCC
-   builtin and then its argument prototype would still apply.  */
-#ifdef __cplusplus
-extern "C"
-#endif
-char SHA1_Init ();
+/* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has
+   function prototypes and stuff, but not '\xHH' hex character constants.
+   These don't provoke an error unfortunately, instead are silently treated
+   as 'x'.  The following induces an error, until -std is added to get
+   proper ANSI mode.  Curiously '\x00'!='x' always comes out true, for an
+   array size at least.  It's necessary to write '\x00'==0 to get something
+   that's true only with -std.  */
+int osf4_cc_array ['\x00' == 0 ? 1 : -1];
+
+/* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters
+   inside strings and character constants.  */
+#define FOO(x) 'x'
+int xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];
+
+int test (int i, double x);
+struct s1 {int (*f) (int a);};
+struct s2 {int (*f) (double a);};
+int pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);
+int argc;
+char **argv;
 int
 main ()
 {
-return SHA1_Init ();
+return f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];
   ;
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_link "$LINENO"; then :
-  ac_cv_lib_ssl_SHA1_Init=yes
-else
-  ac_cv_lib_ssl_SHA1_Init=no
-fi
-rm -f core conftest.err conftest.$ac_objext \
-    conftest$ac_exeext conftest.$ac_ext
-LIBS=$ac_check_lib_save_LIBS
-fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_ssl_SHA1_Init" >&5
-$as_echo "$ac_cv_lib_ssl_SHA1_Init" >&6; }
-if test "x$ac_cv_lib_ssl_SHA1_Init" = xyes; then :
-  NEEDS_SSL_WITH_CRYPTO=YesPlease NO_OPENSSL=
-else
-  NEEDS_SSL_WITH_CRYPTO=          NO_OPENSSL=YesPlease
+for ac_arg in '' -qlanglvl=extc89 -qlanglvl=ansi -std \
+	-Ae "-Aa -D_HPUX_SOURCE" "-Xc -D__EXTENSIONS__"
+do
+  CC="$ac_save_CC $ac_arg"
+  if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_prog_cc_c89=$ac_arg
 fi
+rm -f core conftest.err conftest.$ac_objext
+  test "x$ac_cv_prog_cc_c89" != "xno" && break
+done
+rm -f conftest.$ac_ext
+CC=$ac_save_CC
 
 fi
+# AC_CACHE_VAL
+case "x$ac_cv_prog_cc_c89" in
+  x)
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: none needed" >&5
+$as_echo "none needed" >&6; } ;;
+  xno)
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: unsupported" >&5
+$as_echo "unsupported" >&6; } ;;
+  *)
+    CC="$CC $ac_cv_prog_cc_c89"
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cc_c89" >&5
+$as_echo "$ac_cv_prog_cc_c89" >&6; } ;;
+esac
+if test "x$ac_cv_prog_cc_c89" != xno; then :
 
-
-
-if test -n "$OPENSSLDIR"; then
-   CPPFLAGS="$old_CPPFLAGS"
-   LDFLAGS="$old_LDFLAGS"
 fi
 
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
 
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for inline" >&5
+$as_echo_n "checking for inline... " >&6; }
+if ${ac_cv_c_inline+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_cv_c_inline=no
+for ac_kw in inline __inline__ __inline; do
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#ifndef __cplusplus
+typedef int foo_t;
+static $ac_kw foo_t static_foo () {return 0; }
+$ac_kw foo_t foo () {return 0; }
+#endif
 
-config_appended_defs="$config_appended_defs${newline}NEEDS_SSL_WITH_CRYPTO=${NEEDS_SSL_WITH_CRYPTO}"
-
-config_appended_defs="$config_appended_defs${newline}NO_OPENSSL=${NO_OPENSSL}"
-
-#
-# Define USE_LIBPCRE if you have and want to use libpcre. git-grep will be
-# able to use Perl-compatible regular expressions.
-#
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_c_inline=$ac_kw
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+  test "$ac_cv_c_inline" != no && break
+done
 
-if test -n "$USE_LIBPCRE"; then
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_c_inline" >&5
+$as_echo "$ac_cv_c_inline" >&6; }
 
+case $ac_cv_c_inline in
+  inline | yes) ;;
+  *)
+    case $ac_cv_c_inline in
+      no) ac_val=;;
+      *) ac_val=$ac_cv_c_inline;;
+    esac
+    cat >>confdefs.h <<_ACEOF
+#ifndef __cplusplus
+#define inline $ac_val
+#endif
+_ACEOF
+    ;;
+esac
 
-if test -n "$LIBPCREDIR"; then
-   old_CPPFLAGS="$CPPFLAGS"
-   old_LDFLAGS="$LDFLAGS"
-   CPPFLAGS="-I$LIBPCREDIR/include $CPPFLAGS"
-   LDFLAGS="-L$LIBPCREDIR/$lib $LDFLAGS"
-fi
+case $ac_cv_c_inline in
+  inline | yes | no) INLINE='';;
+  *)                 INLINE=$ac_cv_c_inline ;;
+esac
 
+config_appended_defs="$config_appended_defs${newline}INLINE=${INLINE}"
 
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for pcre_version in -lpcre" >&5
-$as_echo_n "checking for pcre_version in -lpcre... " >&6; }
-if ${ac_cv_lib_pcre_pcre_version+:} false; then :
+# which switch to pass runtime path to dynamic libraries to the linker
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking if linker supports -R" >&5
+$as_echo_n "checking if linker supports -R... " >&6; }
+if ${git_cv_ld_dashr+:} false; then :
   $as_echo_n "(cached) " >&6
 else
-  ac_check_lib_save_LIBS=$LIBS
-LIBS="-lpcre  $LIBS"
-cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+
+   SAVE_LDFLAGS="${LDFLAGS}"
+   LDFLAGS="${SAVE_LDFLAGS} -R /"
+   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
-/* Override any GCC internal prototype to avoid an error.
-   Use char because int might match the return type of a GCC
-   builtin and then its argument prototype would still apply.  */
-#ifdef __cplusplus
-extern "C"
-#endif
-char pcre_version ();
 int
 main ()
 {
-return pcre_version ();
+
   ;
   return 0;
 }
 _ACEOF
 if ac_fn_c_try_link "$LINENO"; then :
-  ac_cv_lib_pcre_pcre_version=yes
+  git_cv_ld_dashr=yes
 else
-  ac_cv_lib_pcre_pcre_version=no
+  git_cv_ld_dashr=no
 fi
 rm -f core conftest.err conftest.$ac_objext \
     conftest$ac_exeext conftest.$ac_ext
-LIBS=$ac_check_lib_save_LIBS
-fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_pcre_pcre_version" >&5
-$as_echo "$ac_cv_lib_pcre_pcre_version" >&6; }
-if test "x$ac_cv_lib_pcre_pcre_version" = xyes; then :
-  USE_LIBPCRE=YesPlease
-else
-  USE_LIBPCRE=
-fi
-
-
-
-if test -n "$LIBPCREDIR"; then
-   CPPFLAGS="$old_CPPFLAGS"
-   LDFLAGS="$old_LDFLAGS"
-fi
-
-
-
-config_appended_defs="$config_appended_defs${newline}USE_LIBPCRE=${USE_LIBPCRE}"
-
-fi
-
-#
-# Define NO_CURL if you do not have libcurl installed.  git-http-pull and
-# git-http-push are not built, and you cannot use http:// and https://
-# transports.
-
+   LDFLAGS="${SAVE_LDFLAGS}"
 
-if test -n "$CURLDIR"; then
-   old_CPPFLAGS="$CPPFLAGS"
-   old_LDFLAGS="$LDFLAGS"
-   CPPFLAGS="-I$CURLDIR/include $CPPFLAGS"
-   LDFLAGS="-L$CURLDIR/$lib $LDFLAGS"
 fi
-
-
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for curl_global_init in -lcurl" >&5
-$as_echo_n "checking for curl_global_init in -lcurl... " >&6; }
-if ${ac_cv_lib_curl_curl_global_init+:} false; then :
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $git_cv_ld_dashr" >&5
+$as_echo "$git_cv_ld_dashr" >&6; }
+if test "$git_cv_ld_dashr" = "yes"; then
+   CC_LD_DYNPATH=-R
+else
+   { $as_echo "$as_me:${as_lineno-$LINENO}: checking if linker supports -Wl,-rpath," >&5
+$as_echo_n "checking if linker supports -Wl,-rpath,... " >&6; }
+if ${git_cv_ld_wl_rpath+:} false; then :
   $as_echo_n "(cached) " >&6
 else
-  ac_check_lib_save_LIBS=$LIBS
-LIBS="-lcurl  $LIBS"
-cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+
+      SAVE_LDFLAGS="${LDFLAGS}"
+      LDFLAGS="${SAVE_LDFLAGS} -Wl,-rpath,/"
+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
-/* Override any GCC internal prototype to avoid an error.
-   Use char because int might match the return type of a GCC
-   builtin and then its argument prototype would still apply.  */
-#ifdef __cplusplus
-extern "C"
-#endif
-char curl_global_init ();
 int
 main ()
 {
-return curl_global_init ();
+
   ;
   return 0;
 }
 _ACEOF
 if ac_fn_c_try_link "$LINENO"; then :
-  ac_cv_lib_curl_curl_global_init=yes
+  git_cv_ld_wl_rpath=yes
 else
-  ac_cv_lib_curl_curl_global_init=no
+  git_cv_ld_wl_rpath=no
 fi
 rm -f core conftest.err conftest.$ac_objext \
     conftest$ac_exeext conftest.$ac_ext
-LIBS=$ac_check_lib_save_LIBS
-fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_curl_curl_global_init" >&5
-$as_echo "$ac_cv_lib_curl_curl_global_init" >&6; }
-if test "x$ac_cv_lib_curl_curl_global_init" = xyes; then :
-  NO_CURL=
-else
-  NO_CURL=YesPlease
-fi
-
-
-
-if test -n "$CURLDIR"; then
-   CPPFLAGS="$old_CPPFLAGS"
-   LDFLAGS="$old_LDFLAGS"
-fi
-
-
-
-config_appended_defs="$config_appended_defs${newline}NO_CURL=${NO_CURL}"
-
-#
-# Define NO_EXPAT if you do not have expat installed.  git-http-push is
-# not built, and you cannot push using http:// and https:// transports.
-
+      LDFLAGS="${SAVE_LDFLAGS}"
 
-if test -n "$EXPATDIR"; then
-   old_CPPFLAGS="$CPPFLAGS"
-   old_LDFLAGS="$LDFLAGS"
-   CPPFLAGS="-I$EXPATDIR/include $CPPFLAGS"
-   LDFLAGS="-L$EXPATDIR/$lib $LDFLAGS"
 fi
-
-
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for XML_ParserCreate in -lexpat" >&5
-$as_echo_n "checking for XML_ParserCreate in -lexpat... " >&6; }
-if ${ac_cv_lib_expat_XML_ParserCreate+:} false; then :
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $git_cv_ld_wl_rpath" >&5
+$as_echo "$git_cv_ld_wl_rpath" >&6; }
+   if test "$git_cv_ld_wl_rpath" = "yes"; then
+      CC_LD_DYNPATH=-Wl,-rpath,
+   else
+      { $as_echo "$as_me:${as_lineno-$LINENO}: checking if linker supports -rpath" >&5
+$as_echo_n "checking if linker supports -rpath... " >&6; }
+if ${git_cv_ld_rpath+:} false; then :
   $as_echo_n "(cached) " >&6
 else
-  ac_check_lib_save_LIBS=$LIBS
-LIBS="-lexpat  $LIBS"
-cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+
+         SAVE_LDFLAGS="${LDFLAGS}"
+         LDFLAGS="${SAVE_LDFLAGS} -rpath /"
+         cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
-/* Override any GCC internal prototype to avoid an error.
-   Use char because int might match the return type of a GCC
-   builtin and then its argument prototype would still apply.  */
-#ifdef __cplusplus
-extern "C"
-#endif
-char XML_ParserCreate ();
 int
 main ()
 {
-return XML_ParserCreate ();
+
   ;
   return 0;
 }
 _ACEOF
 if ac_fn_c_try_link "$LINENO"; then :
-  ac_cv_lib_expat_XML_ParserCreate=yes
+  git_cv_ld_rpath=yes
 else
-  ac_cv_lib_expat_XML_ParserCreate=no
+  git_cv_ld_rpath=no
 fi
 rm -f core conftest.err conftest.$ac_objext \
     conftest$ac_exeext conftest.$ac_ext
-LIBS=$ac_check_lib_save_LIBS
+         LDFLAGS="${SAVE_LDFLAGS}"
+
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_expat_XML_ParserCreate" >&5
-$as_echo "$ac_cv_lib_expat_XML_ParserCreate" >&6; }
-if test "x$ac_cv_lib_expat_XML_ParserCreate" = xyes; then :
-  NO_EXPAT=
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $git_cv_ld_rpath" >&5
+$as_echo "$git_cv_ld_rpath" >&6; }
+      if test "$git_cv_ld_rpath" = "yes"; then
+         CC_LD_DYNPATH=-rpath
+      else
+         CC_LD_DYNPATH=
+         { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: linker does not support runtime path to dynamic libraries" >&5
+$as_echo "$as_me: WARNING: linker does not support runtime path to dynamic libraries" >&2;}
+      fi
+   fi
+fi
+
+config_appended_defs="$config_appended_defs${newline}CC_LD_DYNPATH=${CC_LD_DYNPATH}"
+#AC_PROG_INSTALL		# needs install-sh or install.sh in sources
+if test -n "$ac_tool_prefix"; then
+  for ac_prog in gar ar
+  do
+    # Extract the first word of "$ac_tool_prefix$ac_prog", so it can be a program name with args.
+set dummy $ac_tool_prefix$ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if ${ac_cv_prog_AR+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$AR"; then
+  ac_cv_prog_AR="$AR" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_AR="$ac_tool_prefix$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+AR=$ac_cv_prog_AR
+if test -n "$AR"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $AR" >&5
+$as_echo "$AR" >&6; }
 else
-  NO_EXPAT=YesPlease
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
 fi
 
 
-
-if test -n "$EXPATDIR"; then
-   CPPFLAGS="$old_CPPFLAGS"
-   LDFLAGS="$old_LDFLAGS"
+    test -n "$AR" && break
+  done
 fi
+if test -z "$AR"; then
+  ac_ct_AR=$AR
+  for ac_prog in gar ar
+do
+  # Extract the first word of "$ac_prog", so it can be a program name with args.
+set dummy $ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if ${ac_cv_prog_ac_ct_AR+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ac_ct_AR"; then
+  ac_cv_prog_ac_ct_AR="$ac_ct_AR" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ac_ct_AR="$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
 
+fi
+fi
+ac_ct_AR=$ac_cv_prog_ac_ct_AR
+if test -n "$ac_ct_AR"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_ct_AR" >&5
+$as_echo "$ac_ct_AR" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
 
 
-config_appended_defs="$config_appended_defs${newline}NO_EXPAT=${NO_EXPAT}"
-
-#
-# Define NEEDS_LIBICONV if linking with libc is not enough (Darwin and
-# some Solaris installations).
-# Define NO_ICONV if neither libc nor libiconv support iconv.
+  test -n "$ac_ct_AR" && break
+done
 
-if test -z "$NO_ICONV"; then
+  if test "x$ac_ct_AR" = x; then
+    AR=":"
+  else
+    case $cross_compiling:$ac_tool_warned in
+yes:)
+{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet" >&5
+$as_echo "$as_me: WARNING: using cross tools not prefixed with host triplet" >&2;}
+ac_tool_warned=yes ;;
+esac
+    AR=$ac_ct_AR
+  fi
+fi
 
+for ac_prog in gtar tar
+do
+  # Extract the first word of "$ac_prog", so it can be a program name with args.
+set dummy $ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if ${ac_cv_prog_TAR+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$TAR"; then
+  ac_cv_prog_TAR="$TAR" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_TAR="$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
 
-if test -n "$ICONVDIR"; then
-   old_CPPFLAGS="$CPPFLAGS"
-   old_LDFLAGS="$LDFLAGS"
-   CPPFLAGS="-I$ICONVDIR/include $CPPFLAGS"
-   LDFLAGS="-L$ICONVDIR/$lib $LDFLAGS"
+fi
+fi
+TAR=$ac_cv_prog_TAR
+if test -n "$TAR"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $TAR" >&5
+$as_echo "$TAR" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
 fi
 
 
+  test -n "$TAR" && break
+done
 
+for ac_prog in gnudiff gdiff diff
+do
+  # Extract the first word of "$ac_prog", so it can be a program name with args.
+set dummy $ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if ${ac_cv_prog_DIFF+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$DIFF"; then
+  ac_cv_prog_DIFF="$DIFF" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_DIFF="$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
 
-if test -n "$ICONVDIR"; then
-   lib_order="-liconv -lc"
+fi
+fi
+DIFF=$ac_cv_prog_DIFF
+if test -n "$DIFF"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $DIFF" >&5
+$as_echo "$DIFF" >&6; }
 else
-   lib_order="-lc -liconv"
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
 fi
 
-NO_ICONV=YesPlease
 
-for l in $lib_order; do
-    if test "$l" = "-liconv"; then
-       NEEDS_LIBICONV=YesPlease
-    else
-       NEEDS_LIBICONV=
-    fi
+  test -n "$DIFF" && break
+done
 
-    old_LIBS="$LIBS"
-    LIBS="$LIBS $l"
-    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for iconv in $l" >&5
-$as_echo_n "checking for iconv in $l... " >&6; }
-    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-#include <iconv.h>
-int
-main ()
-{
-iconv_open("", "");
-  ;
-  return 0;
-}
-_ACEOF
-if ac_fn_c_try_link "$LINENO"; then :
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
-$as_echo "yes" >&6; }
-	NO_ICONV=
-	break
+# TCLTK_PATH will be set to some value if we want Tcl/Tk
+# or will be empty otherwise.
+if test -n "$NO_TCLTK"; then
+  TCLTK_PATH=
+else
+  if test "$with_tcltk" = ""; then
+  # No Tcl/Tk switches given. Do not check for Tcl/Tk, use bare 'wish'.
+    TCLTK_PATH=wish
+  elif test "$with_tcltk" = "yes"; then
+  # Tcl/Tk check requested.
+    for ac_prog in wish
+do
+  # Extract the first word of "$ac_prog", so it can be a program name with args.
+set dummy $ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if ${ac_cv_prog_TCLTK_PATH+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$TCLTK_PATH"; then
+  ac_cv_prog_TCLTK_PATH="$TCLTK_PATH" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_TCLTK_PATH="$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
+
+fi
+fi
+TCLTK_PATH=$ac_cv_prog_TCLTK_PATH
+if test -n "$TCLTK_PATH"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $TCLTK_PATH" >&5
+$as_echo "$TCLTK_PATH" >&6; }
 else
   { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
 $as_echo "no" >&6; }
 fi
-rm -f core conftest.err conftest.$ac_objext \
-    conftest$ac_exeext conftest.$ac_ext
-    LIBS="$old_LIBS"
-done
 
-#in case of break
-LIBS="$old_LIBS"
 
+  test -n "$TCLTK_PATH" && break
+done
 
-if test -n "$ICONVDIR"; then
-   CPPFLAGS="$old_CPPFLAGS"
-   LDFLAGS="$old_LDFLAGS"
+  else
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: Using Tcl/Tk interpreter $with_tcltk" >&5
+$as_echo "Using Tcl/Tk interpreter $with_tcltk" >&6; }
+    TCLTK_PATH="$with_tcltk"
+  fi
 fi
 
+config_appended_defs="$config_appended_defs${newline}TCLTK_PATH=${TCLTK_PATH}"
+for ac_prog in asciidoc
+do
+  # Extract the first word of "$ac_prog", so it can be a program name with args.
+set dummy $ac_prog; ac_word=$2
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
+$as_echo_n "checking for $ac_word... " >&6; }
+if ${ac_cv_prog_ASCIIDOC+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  if test -n "$ASCIIDOC"; then
+  ac_cv_prog_ASCIIDOC="$ASCIIDOC" # Let the user override the test.
+else
+as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
+for as_dir in $PATH
+do
+  IFS=$as_save_IFS
+  test -z "$as_dir" && as_dir=.
+    for ac_exec_ext in '' $ac_executable_extensions; do
+  if { test -f "$as_dir/$ac_word$ac_exec_ext" && $as_test_x "$as_dir/$ac_word$ac_exec_ext"; }; then
+    ac_cv_prog_ASCIIDOC="$ac_prog"
+    $as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
+    break 2
+  fi
+done
+  done
+IFS=$as_save_IFS
 
+fi
+fi
+ASCIIDOC=$ac_cv_prog_ASCIIDOC
+if test -n "$ASCIIDOC"; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ASCIIDOC" >&5
+$as_echo "$ASCIIDOC" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
 
-config_appended_defs="$config_appended_defs${newline}NEEDS_LIBICONV=${NEEDS_LIBICONV}"
 
-config_appended_defs="$config_appended_defs${newline}NO_ICONV=${NO_ICONV}"
+  test -n "$ASCIIDOC" && break
+done
 
-if test -n "$NO_ICONV"; then
-    NEEDS_LIBICONV=
+if test -n "$ASCIIDOC"; then
+	{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for asciidoc version" >&5
+$as_echo_n "checking for asciidoc version... " >&6; }
+	asciidoc_version=`$ASCIIDOC --version 2>/dev/null`
+	case "${asciidoc_version}" in
+	asciidoc' '8*)
+		{ $as_echo "$as_me:${as_lineno-$LINENO}: result: ${asciidoc_version}" >&5
+$as_echo "${asciidoc_version}" >&6; }
+		;;
+	*)
+		{ $as_echo "$as_me:${as_lineno-$LINENO}: result: ${asciidoc_version} (unknown)" >&5
+$as_echo "${asciidoc_version} (unknown)" >&6; }
+		;;
+	esac
 fi
 
-fi
 
+## Checks for libraries.
+{ $as_echo "$as_me:${as_lineno-$LINENO}: CHECKS for libraries" >&5
+$as_echo "$as_me: CHECKS for libraries" >&6;}
 #
-# Define NO_DEFLATE_BOUND if deflateBound is missing from zlib.
+# Define NO_OPENSSL environment variable if you do not have OpenSSL.
+# Define NEEDS_SSL_WITH_CRYPTO if you need -lcrypto with -lssl (Darwin).
 
 
-if test -n "$ZLIB_PATH"; then
+if test -n "$OPENSSLDIR"; then
    old_CPPFLAGS="$CPPFLAGS"
    old_LDFLAGS="$LDFLAGS"
-   CPPFLAGS="-I$ZLIB_PATH/include $CPPFLAGS"
-   LDFLAGS="-L$ZLIB_PATH/$lib $LDFLAGS"
+   CPPFLAGS="-I$OPENSSLDIR/include $CPPFLAGS"
+   LDFLAGS="-L$OPENSSLDIR/$lib $LDFLAGS"
 fi
 
 
-
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for deflateBound in -lz" >&5
-$as_echo_n "checking for deflateBound in -lz... " >&6; }
-old_LIBS="$LIBS"
-LIBS="$LIBS -lz"
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for SHA1_Init in -lcrypto" >&5
+$as_echo_n "checking for SHA1_Init in -lcrypto... " >&6; }
+if ${ac_cv_lib_crypto_SHA1_Init+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-lcrypto  $LIBS"
 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
-#include <zlib.h>
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+char SHA1_Init ();
 int
 main ()
 {
-deflateBound(0, 0);
+return SHA1_Init ();
   ;
   return 0;
 }
 _ACEOF
 if ac_fn_c_try_link "$LINENO"; then :
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
-$as_echo "yes" >&6; }
+  ac_cv_lib_crypto_SHA1_Init=yes
 else
-  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
-$as_echo "no" >&6; }
-	NO_DEFLATE_BOUND=yes
+  ac_cv_lib_crypto_SHA1_Init=no
 fi
 rm -f core conftest.err conftest.$ac_objext \
     conftest$ac_exeext conftest.$ac_ext
-LIBS="$old_LIBS"
-
-
-if test -n "$ZLIB_PATH"; then
-   CPPFLAGS="$old_CPPFLAGS"
-   LDFLAGS="$old_LDFLAGS"
+LIBS=$ac_check_lib_save_LIBS
 fi
-
-
-
-config_appended_defs="$config_appended_defs${newline}NO_DEFLATE_BOUND=${NO_DEFLATE_BOUND}"
-
-#
-# Define NEEDS_SOCKET if linking with libc is not enough (SunOS,
-# Patrick Mauritz).
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for socket in -lc" >&5
-$as_echo_n "checking for socket in -lc... " >&6; }
-if ${ac_cv_lib_c_socket+:} false; then :
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_crypto_SHA1_Init" >&5
+$as_echo "$ac_cv_lib_crypto_SHA1_Init" >&6; }
+if test "x$ac_cv_lib_crypto_SHA1_Init" = xyes; then :
+  NEEDS_SSL_WITH_CRYPTO=
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for SHA1_Init in -lssl" >&5
+$as_echo_n "checking for SHA1_Init in -lssl... " >&6; }
+if ${ac_cv_lib_ssl_SHA1_Init+:} false; then :
   $as_echo_n "(cached) " >&6
 else
   ac_check_lib_save_LIBS=$LIBS
-LIBS="-lc  $LIBS"
+LIBS="-lssl  $LIBS"
 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
 /* Override any GCC internal prototype to avoid an error.
    Use char because int might match the return type of a GCC
    builtin and then its argument prototype would still apply.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-char socket ();
+char SHA1_Init ();
 int
 main ()
 {
-return socket ();
+return SHA1_Init ();
   ;
   return 0;
 }
 _ACEOF
 if ac_fn_c_try_link "$LINENO"; then :
-  ac_cv_lib_c_socket=yes
+  ac_cv_lib_ssl_SHA1_Init=yes
 else
-  ac_cv_lib_c_socket=no
+  ac_cv_lib_ssl_SHA1_Init=no
 fi
 rm -f core conftest.err conftest.$ac_objext \
     conftest$ac_exeext conftest.$ac_ext
 LIBS=$ac_check_lib_save_LIBS
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_c_socket" >&5
-$as_echo "$ac_cv_lib_c_socket" >&6; }
-if test "x$ac_cv_lib_c_socket" = xyes; then :
-  NEEDS_SOCKET=
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_ssl_SHA1_Init" >&5
+$as_echo "$ac_cv_lib_ssl_SHA1_Init" >&6; }
+if test "x$ac_cv_lib_ssl_SHA1_Init" = xyes; then :
+  NEEDS_SSL_WITH_CRYPTO=YesPlease NO_OPENSSL=
 else
-  NEEDS_SOCKET=YesPlease
+  NEEDS_SSL_WITH_CRYPTO=          NO_OPENSSL=YesPlease
+fi
+
 fi
 
 
-config_appended_defs="$config_appended_defs${newline}NEEDS_SOCKET=${NEEDS_SOCKET}"
-test -n "$NEEDS_SOCKET" && LIBS="$LIBS -lsocket"
+
+if test -n "$OPENSSLDIR"; then
+   CPPFLAGS="$old_CPPFLAGS"
+   LDFLAGS="$old_LDFLAGS"
+fi
+
+
+
+config_appended_defs="$config_appended_defs${newline}NEEDS_SSL_WITH_CRYPTO=${NEEDS_SSL_WITH_CRYPTO}"
+
+config_appended_defs="$config_appended_defs${newline}NO_OPENSSL=${NO_OPENSSL}"
 
 #
-# The next few tests will define NEEDS_RESOLV if linking with
-# libresolv provides some of the functions we would normally get
-# from libc.
-NEEDS_RESOLV=
+# Define USE_LIBPCRE if you have and want to use libpcre. git-grep will be
+# able to use Perl-compatible regular expressions.
 #
-# Define NO_INET_NTOP if linking with -lresolv is not enough.
-# Solaris 2.7 in particular hos inet_ntop in -lresolv.
-NO_INET_NTOP=
-ac_fn_c_check_func "$LINENO" "inet_ntop" "ac_cv_func_inet_ntop"
-if test "x$ac_cv_func_inet_ntop" = xyes; then :
 
-else
-  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for inet_ntop in -lresolv" >&5
-$as_echo_n "checking for inet_ntop in -lresolv... " >&6; }
-if ${ac_cv_lib_resolv_inet_ntop+:} false; then :
+if test -n "$USE_LIBPCRE"; then
+
+
+if test -n "$LIBPCREDIR"; then
+   old_CPPFLAGS="$CPPFLAGS"
+   old_LDFLAGS="$LDFLAGS"
+   CPPFLAGS="-I$LIBPCREDIR/include $CPPFLAGS"
+   LDFLAGS="-L$LIBPCREDIR/$lib $LDFLAGS"
+fi
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for pcre_version in -lpcre" >&5
+$as_echo_n "checking for pcre_version in -lpcre... " >&6; }
+if ${ac_cv_lib_pcre_pcre_version+:} false; then :
   $as_echo_n "(cached) " >&6
 else
   ac_check_lib_save_LIBS=$LIBS
-LIBS="-lresolv  $LIBS"
+LIBS="-lpcre  $LIBS"
 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
 /* Override any GCC internal prototype to avoid an error.
    Use char because int might match the return type of a GCC
    builtin and then its argument prototype would still apply.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-char inet_ntop ();
+char pcre_version ();
 int
 main ()
 {
-return inet_ntop ();
+return pcre_version ();
   ;
   return 0;
 }
 _ACEOF
 if ac_fn_c_try_link "$LINENO"; then :
-  ac_cv_lib_resolv_inet_ntop=yes
+  ac_cv_lib_pcre_pcre_version=yes
 else
-  ac_cv_lib_resolv_inet_ntop=no
+  ac_cv_lib_pcre_pcre_version=no
 fi
 rm -f core conftest.err conftest.$ac_objext \
     conftest$ac_exeext conftest.$ac_ext
 LIBS=$ac_check_lib_save_LIBS
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_resolv_inet_ntop" >&5
-$as_echo "$ac_cv_lib_resolv_inet_ntop" >&6; }
-if test "x$ac_cv_lib_resolv_inet_ntop" = xyes; then :
-  NEEDS_RESOLV=YesPlease
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_pcre_pcre_version" >&5
+$as_echo "$ac_cv_lib_pcre_pcre_version" >&6; }
+if test "x$ac_cv_lib_pcre_pcre_version" = xyes; then :
+  USE_LIBPCRE=YesPlease
 else
-  NO_INET_NTOP=YesPlease
+  USE_LIBPCRE=
 fi
 
 
+
+if test -n "$LIBPCREDIR"; then
+   CPPFLAGS="$old_CPPFLAGS"
+   LDFLAGS="$old_LDFLAGS"
 fi
 
 
-config_appended_defs="$config_appended_defs${newline}NO_INET_NTOP=${NO_INET_NTOP}"
+
+config_appended_defs="$config_appended_defs${newline}USE_LIBPCRE=${USE_LIBPCRE}"
+
+fi
+
 #
-# Define NO_INET_PTON if linking with -lresolv is not enough.
-# Solaris 2.7 in particular hos inet_pton in -lresolv.
-NO_INET_PTON=
-ac_fn_c_check_func "$LINENO" "inet_pton" "ac_cv_func_inet_pton"
-if test "x$ac_cv_func_inet_pton" = xyes; then :
+# Define NO_CURL if you do not have libcurl installed.  git-http-pull and
+# git-http-push are not built, and you cannot use http:// and https://
+# transports.
 
-else
-  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for inet_pton in -lresolv" >&5
-$as_echo_n "checking for inet_pton in -lresolv... " >&6; }
-if ${ac_cv_lib_resolv_inet_pton+:} false; then :
+
+if test -n "$CURLDIR"; then
+   old_CPPFLAGS="$CPPFLAGS"
+   old_LDFLAGS="$LDFLAGS"
+   CPPFLAGS="-I$CURLDIR/include $CPPFLAGS"
+   LDFLAGS="-L$CURLDIR/$lib $LDFLAGS"
+fi
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for curl_global_init in -lcurl" >&5
+$as_echo_n "checking for curl_global_init in -lcurl... " >&6; }
+if ${ac_cv_lib_curl_curl_global_init+:} false; then :
   $as_echo_n "(cached) " >&6
 else
   ac_check_lib_save_LIBS=$LIBS
-LIBS="-lresolv  $LIBS"
+LIBS="-lcurl  $LIBS"
 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
 /* Override any GCC internal prototype to avoid an error.
    Use char because int might match the return type of a GCC
    builtin and then its argument prototype would still apply.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-char inet_pton ();
+char curl_global_init ();
 int
 main ()
 {
-return inet_pton ();
+return curl_global_init ();
   ;
   return 0;
 }
 _ACEOF
 if ac_fn_c_try_link "$LINENO"; then :
-  ac_cv_lib_resolv_inet_pton=yes
+  ac_cv_lib_curl_curl_global_init=yes
 else
-  ac_cv_lib_resolv_inet_pton=no
+  ac_cv_lib_curl_curl_global_init=no
 fi
 rm -f core conftest.err conftest.$ac_objext \
     conftest$ac_exeext conftest.$ac_ext
 LIBS=$ac_check_lib_save_LIBS
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_resolv_inet_pton" >&5
-$as_echo "$ac_cv_lib_resolv_inet_pton" >&6; }
-if test "x$ac_cv_lib_resolv_inet_pton" = xyes; then :
-  NEEDS_RESOLV=YesPlease
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_curl_curl_global_init" >&5
+$as_echo "$ac_cv_lib_curl_curl_global_init" >&6; }
+if test "x$ac_cv_lib_curl_curl_global_init" = xyes; then :
+  NO_CURL=
 else
-  NO_INET_PTON=YesPlease
+  NO_CURL=YesPlease
 fi
 
 
+
+if test -n "$CURLDIR"; then
+   CPPFLAGS="$old_CPPFLAGS"
+   LDFLAGS="$old_LDFLAGS"
 fi
 
 
-config_appended_defs="$config_appended_defs${newline}NO_INET_PTON=${NO_INET_PTON}"
-#
-# Define NO_HSTRERROR if linking with -lresolv is not enough.
-# Solaris 2.6 in particular has no hstrerror, even in -lresolv.
-NO_HSTRERROR=
-ac_fn_c_check_func "$LINENO" "hstrerror" "ac_cv_func_hstrerror"
-if test "x$ac_cv_func_hstrerror" = xyes; then :
 
-else
-  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for hstrerror in -lresolv" >&5
-$as_echo_n "checking for hstrerror in -lresolv... " >&6; }
-if ${ac_cv_lib_resolv_hstrerror+:} false; then :
+config_appended_defs="$config_appended_defs${newline}NO_CURL=${NO_CURL}"
+
+#
+# Define NO_EXPAT if you do not have expat installed.  git-http-push is
+# not built, and you cannot push using http:// and https:// transports.
+
+
+if test -n "$EXPATDIR"; then
+   old_CPPFLAGS="$CPPFLAGS"
+   old_LDFLAGS="$LDFLAGS"
+   CPPFLAGS="-I$EXPATDIR/include $CPPFLAGS"
+   LDFLAGS="-L$EXPATDIR/$lib $LDFLAGS"
+fi
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for XML_ParserCreate in -lexpat" >&5
+$as_echo_n "checking for XML_ParserCreate in -lexpat... " >&6; }
+if ${ac_cv_lib_expat_XML_ParserCreate+:} false; then :
   $as_echo_n "(cached) " >&6
 else
   ac_check_lib_save_LIBS=$LIBS
-LIBS="-lresolv  $LIBS"
+LIBS="-lexpat  $LIBS"
 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
 /* Override any GCC internal prototype to avoid an error.
    Use char because int might match the return type of a GCC
    builtin and then its argument prototype would still apply.  */
 #ifdef __cplusplus
 extern "C"
 #endif
-char hstrerror ();
+char XML_ParserCreate ();
 int
 main ()
 {
-return hstrerror ();
+return XML_ParserCreate ();
   ;
   return 0;
 }
 _ACEOF
 if ac_fn_c_try_link "$LINENO"; then :
-  ac_cv_lib_resolv_hstrerror=yes
+  ac_cv_lib_expat_XML_ParserCreate=yes
 else
-  ac_cv_lib_resolv_hstrerror=no
+  ac_cv_lib_expat_XML_ParserCreate=no
 fi
 rm -f core conftest.err conftest.$ac_objext \
     conftest$ac_exeext conftest.$ac_ext
 LIBS=$ac_check_lib_save_LIBS
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_resolv_hstrerror" >&5
-$as_echo "$ac_cv_lib_resolv_hstrerror" >&6; }
-if test "x$ac_cv_lib_resolv_hstrerror" = xyes; then :
-  NEEDS_RESOLV=YesPlease
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_expat_XML_ParserCreate" >&5
+$as_echo "$ac_cv_lib_expat_XML_ParserCreate" >&6; }
+if test "x$ac_cv_lib_expat_XML_ParserCreate" = xyes; then :
+  NO_EXPAT=
 else
-  NO_HSTRERROR=YesPlease
+  NO_EXPAT=YesPlease
 fi
 
 
+
+if test -n "$EXPATDIR"; then
+   CPPFLAGS="$old_CPPFLAGS"
+   LDFLAGS="$old_LDFLAGS"
 fi
 
 
-config_appended_defs="$config_appended_defs${newline}NO_HSTRERROR=${NO_HSTRERROR}"
 
+config_appended_defs="$config_appended_defs${newline}NO_EXPAT=${NO_EXPAT}"
 
-config_appended_defs="$config_appended_defs${newline}NEEDS_RESOLV=${NEEDS_RESOLV}"
 #
-# If any of the above tests determined that -lresolv is needed at
-# build-time, also set it here for remaining configure-time checks.
-test -n "$NEEDS_RESOLV" && LIBS="$LIBS -lresolv"
+# Define NEEDS_LIBICONV if linking with libc is not enough (Darwin and
+# some Solaris installations).
+# Define NO_ICONV if neither libc nor libiconv support iconv.
 
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for basename in -lc" >&5
-$as_echo_n "checking for basename in -lc... " >&6; }
-if ${ac_cv_lib_c_basename+:} false; then :
-  $as_echo_n "(cached) " >&6
+if test -z "$NO_ICONV"; then
+
+
+if test -n "$ICONVDIR"; then
+   old_CPPFLAGS="$CPPFLAGS"
+   old_LDFLAGS="$LDFLAGS"
+   CPPFLAGS="-I$ICONVDIR/include $CPPFLAGS"
+   LDFLAGS="-L$ICONVDIR/$lib $LDFLAGS"
+fi
+
+
+
+
+if test -n "$ICONVDIR"; then
+   lib_order="-liconv -lc"
 else
-  ac_check_lib_save_LIBS=$LIBS
-LIBS="-lc  $LIBS"
-cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
+   lib_order="-lc -liconv"
+fi
 
-/* Override any GCC internal prototype to avoid an error.
-   Use char because int might match the return type of a GCC
-   builtin and then its argument prototype would still apply.  */
-#ifdef __cplusplus
-extern "C"
-#endif
-char basename ();
+NO_ICONV=YesPlease
+
+for l in $lib_order; do
+    if test "$l" = "-liconv"; then
+       NEEDS_LIBICONV=YesPlease
+    else
+       NEEDS_LIBICONV=
+    fi
+
+    old_LIBS="$LIBS"
+    LIBS="$LIBS $l"
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for iconv in $l" >&5
+$as_echo_n "checking for iconv in $l... " >&6; }
+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <iconv.h>
 int
 main ()
 {
-return basename ();
+iconv_open("", "");
   ;
   return 0;
 }
 _ACEOF
 if ac_fn_c_try_link "$LINENO"; then :
-  ac_cv_lib_c_basename=yes
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+	NO_ICONV=
+	break
 else
-  ac_cv_lib_c_basename=no
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
 fi
 rm -f core conftest.err conftest.$ac_objext \
     conftest$ac_exeext conftest.$ac_ext
-LIBS=$ac_check_lib_save_LIBS
+    LIBS="$old_LIBS"
+done
+
+#in case of break
+LIBS="$old_LIBS"
+
+
+if test -n "$ICONVDIR"; then
+   CPPFLAGS="$old_CPPFLAGS"
+   LDFLAGS="$old_LDFLAGS"
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_c_basename" >&5
-$as_echo "$ac_cv_lib_c_basename" >&6; }
-if test "x$ac_cv_lib_c_basename" = xyes; then :
-  NEEDS_LIBGEN=
-else
-  NEEDS_LIBGEN=YesPlease
+
+
+
+config_appended_defs="$config_appended_defs${newline}NEEDS_LIBICONV=${NEEDS_LIBICONV}"
+
+config_appended_defs="$config_appended_defs${newline}NO_ICONV=${NO_ICONV}"
+
+if test -n "$NO_ICONV"; then
+    NEEDS_LIBICONV=
 fi
 
+fi
 
-config_appended_defs="$config_appended_defs${newline}NEEDS_LIBGEN=${NEEDS_LIBGEN}"
-test -n "$NEEDS_LIBGEN" && LIBS="$LIBS -lgen"
+#
+# Define NO_DEFLATE_BOUND if deflateBound is missing from zlib.
 
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for gettext in -lc" >&5
-$as_echo_n "checking for gettext in -lc... " >&6; }
-if ${ac_cv_lib_c_gettext+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
-  ac_check_lib_save_LIBS=$LIBS
-LIBS="-lc  $LIBS"
+
+if test -n "$ZLIB_PATH"; then
+   old_CPPFLAGS="$CPPFLAGS"
+   old_LDFLAGS="$LDFLAGS"
+   CPPFLAGS="-I$ZLIB_PATH/include $CPPFLAGS"
+   LDFLAGS="-L$ZLIB_PATH/$lib $LDFLAGS"
+fi
+
+
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for deflateBound in -lz" >&5
+$as_echo_n "checking for deflateBound in -lz... " >&6; }
+old_LIBS="$LIBS"
+LIBS="$LIBS -lz"
 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
-/* Override any GCC internal prototype to avoid an error.
-   Use char because int might match the return type of a GCC
-   builtin and then its argument prototype would still apply.  */
-#ifdef __cplusplus
-extern "C"
-#endif
-char gettext ();
+#include <zlib.h>
 int
 main ()
 {
-return gettext ();
+deflateBound(0, 0);
   ;
   return 0;
 }
 _ACEOF
 if ac_fn_c_try_link "$LINENO"; then :
-  ac_cv_lib_c_gettext=yes
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
 else
-  ac_cv_lib_c_gettext=no
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+	NO_DEFLATE_BOUND=yes
 fi
 rm -f core conftest.err conftest.$ac_objext \
     conftest$ac_exeext conftest.$ac_ext
-LIBS=$ac_check_lib_save_LIBS
-fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_c_gettext" >&5
-$as_echo "$ac_cv_lib_c_gettext" >&6; }
-if test "x$ac_cv_lib_c_gettext" = xyes; then :
-  LIBC_CONTAINS_LIBINTL=YesPlease
-else
-  LIBC_CONTAINS_LIBINTL=
-fi
-
-
-config_appended_defs="$config_appended_defs${newline}LIBC_CONTAINS_LIBINTL=${LIBC_CONTAINS_LIBINTL}"
-
-#
-# Define NO_GETTEXT if you don't want Git output to be translated.
-# A translated Git requires GNU libintl or another gettext implementation
-ac_ext=c
-ac_cpp='$CPP $CPPFLAGS'
-ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
-ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
-ac_compiler_gnu=$ac_cv_c_compiler_gnu
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking how to run the C preprocessor" >&5
-$as_echo_n "checking how to run the C preprocessor... " >&6; }
-# On Suns, sometimes $CPP names a directory.
-if test -n "$CPP" && test -d "$CPP"; then
-  CPP=
-fi
-if test -z "$CPP"; then
-  if ${ac_cv_prog_CPP+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
-      # Double quotes because CPP needs to be expanded
-    for CPP in "$CC -E" "$CC -E -traditional-cpp" "/lib/cpp"
-    do
-      ac_preproc_ok=false
-for ac_c_preproc_warn_flag in '' yes
-do
-  # Use a header file that comes with gcc, so configuring glibc
-  # with a fresh cross-compiler works.
-  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
-  # <limits.h> exists even on freestanding compilers.
-  # On the NeXT, cc -E runs the code through the compiler's parser,
-  # not just through cpp. "Syntax error" is here to catch this case.
-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-#ifdef __STDC__
-# include <limits.h>
-#else
-# include <assert.h>
-#endif
-		     Syntax error
-_ACEOF
-if ac_fn_c_try_cpp "$LINENO"; then :
+LIBS="$old_LIBS"
 
-else
-  # Broken: fails on valid input.
-continue
-fi
-rm -f conftest.err conftest.i conftest.$ac_ext
 
-  # OK, works on sane cases.  Now check whether nonexistent headers
-  # can be detected and how.
-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-#include <ac_nonexistent.h>
-_ACEOF
-if ac_fn_c_try_cpp "$LINENO"; then :
-  # Broken: success on invalid input.
-continue
-else
-  # Passes both tests.
-ac_preproc_ok=:
-break
+if test -n "$ZLIB_PATH"; then
+   CPPFLAGS="$old_CPPFLAGS"
+   LDFLAGS="$old_LDFLAGS"
 fi
-rm -f conftest.err conftest.i conftest.$ac_ext
 
-done
-# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.
-rm -f conftest.i conftest.err conftest.$ac_ext
-if $ac_preproc_ok; then :
-  break
-fi
 
-    done
-    ac_cv_prog_CPP=$CPP
 
-fi
-  CPP=$ac_cv_prog_CPP
+config_appended_defs="$config_appended_defs${newline}NO_DEFLATE_BOUND=${NO_DEFLATE_BOUND}"
+
+#
+# Define NEEDS_SOCKET if linking with libc is not enough (SunOS,
+# Patrick Mauritz).
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for socket in -lc" >&5
+$as_echo_n "checking for socket in -lc... " >&6; }
+if ${ac_cv_lib_c_socket+:} false; then :
+  $as_echo_n "(cached) " >&6
 else
-  ac_cv_prog_CPP=$CPP
-fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $CPP" >&5
-$as_echo "$CPP" >&6; }
-ac_preproc_ok=false
-for ac_c_preproc_warn_flag in '' yes
-do
-  # Use a header file that comes with gcc, so configuring glibc
-  # with a fresh cross-compiler works.
-  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
-  # <limits.h> exists even on freestanding compilers.
-  # On the NeXT, cc -E runs the code through the compiler's parser,
-  # not just through cpp. "Syntax error" is here to catch this case.
-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-lc  $LIBS"
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
-#ifdef __STDC__
-# include <limits.h>
-#else
-# include <assert.h>
+
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
 #endif
-		     Syntax error
+char socket ();
+int
+main ()
+{
+return socket ();
+  ;
+  return 0;
+}
 _ACEOF
-if ac_fn_c_try_cpp "$LINENO"; then :
-
+if ac_fn_c_try_link "$LINENO"; then :
+  ac_cv_lib_c_socket=yes
 else
-  # Broken: fails on valid input.
-continue
+  ac_cv_lib_c_socket=no
 fi
-rm -f conftest.err conftest.i conftest.$ac_ext
-
-  # OK, works on sane cases.  Now check whether nonexistent headers
-  # can be detected and how.
-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-#include <ac_nonexistent.h>
-_ACEOF
-if ac_fn_c_try_cpp "$LINENO"; then :
-  # Broken: success on invalid input.
-continue
-else
-  # Passes both tests.
-ac_preproc_ok=:
-break
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
 fi
-rm -f conftest.err conftest.i conftest.$ac_ext
-
-done
-# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.
-rm -f conftest.i conftest.err conftest.$ac_ext
-if $ac_preproc_ok; then :
-
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_c_socket" >&5
+$as_echo "$ac_cv_lib_c_socket" >&6; }
+if test "x$ac_cv_lib_c_socket" = xyes; then :
+  NEEDS_SOCKET=
 else
-  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
-$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
-as_fn_error $? "C preprocessor \"$CPP\" fails sanity check
-See \`config.log' for more details" "$LINENO" 5; }
+  NEEDS_SOCKET=YesPlease
 fi
 
-ac_ext=c
-ac_cpp='$CPP $CPPFLAGS'
-ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
-ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
-ac_compiler_gnu=$ac_cv_c_compiler_gnu
 
+config_appended_defs="$config_appended_defs${newline}NEEDS_SOCKET=${NEEDS_SOCKET}"
+test -n "$NEEDS_SOCKET" && LIBS="$LIBS -lsocket"
+
+#
+# The next few tests will define NEEDS_RESOLV if linking with
+# libresolv provides some of the functions we would normally get
+# from libc.
+NEEDS_RESOLV=
+#
+# Define NO_INET_NTOP if linking with -lresolv is not enough.
+# Solaris 2.7 in particular hos inet_ntop in -lresolv.
+NO_INET_NTOP=
+ac_fn_c_check_func "$LINENO" "inet_ntop" "ac_cv_func_inet_ntop"
+if test "x$ac_cv_func_inet_ntop" = xyes; then :
 
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for grep that handles long lines and -e" >&5
-$as_echo_n "checking for grep that handles long lines and -e... " >&6; }
-if ${ac_cv_path_GREP+:} false; then :
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for inet_ntop in -lresolv" >&5
+$as_echo_n "checking for inet_ntop in -lresolv... " >&6; }
+if ${ac_cv_lib_resolv_inet_ntop+:} false; then :
   $as_echo_n "(cached) " >&6
 else
-  if test -z "$GREP"; then
-  ac_path_GREP_found=false
-  # Loop through the user's path and test for each of PROGNAME-LIST
-  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in $PATH$PATH_SEPARATOR/usr/xpg4/bin
-do
-  IFS=$as_save_IFS
-  test -z "$as_dir" && as_dir=.
-    for ac_prog in grep ggrep; do
-    for ac_exec_ext in '' $ac_executable_extensions; do
-      ac_path_GREP="$as_dir/$ac_prog$ac_exec_ext"
-      as_fn_executable_p "$ac_path_GREP" || continue
-# Check for GNU ac_path_GREP and select it if it is found.
-  # Check for GNU $ac_path_GREP
-case `"$ac_path_GREP" --version 2>&1` in
-*GNU*)
-  ac_cv_path_GREP="$ac_path_GREP" ac_path_GREP_found=:;;
-*)
-  ac_count=0
-  $as_echo_n 0123456789 >"conftest.in"
-  while :
-  do
-    cat "conftest.in" "conftest.in" >"conftest.tmp"
-    mv "conftest.tmp" "conftest.in"
-    cp "conftest.in" "conftest.nl"
-    $as_echo 'GREP' >> "conftest.nl"
-    "$ac_path_GREP" -e 'GREP$' -e '-(cannot match)-' < "conftest.nl" >"conftest.out" 2>/dev/null || break
-    diff "conftest.out" "conftest.nl" >/dev/null 2>&1 || break
-    as_fn_arith $ac_count + 1 && ac_count=$as_val
-    if test $ac_count -gt ${ac_path_GREP_max-0}; then
-      # Best one so far, save it but keep looking for a better one
-      ac_cv_path_GREP="$ac_path_GREP"
-      ac_path_GREP_max=$ac_count
-    fi
-    # 10*(2^10) chars as input seems more than enough
-    test $ac_count -gt 10 && break
-  done
-  rm -f conftest.in conftest.tmp conftest.nl conftest.out;;
-esac
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-lresolv  $LIBS"
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
 
-      $ac_path_GREP_found && break 3
-    done
-  done
-  done
-IFS=$as_save_IFS
-  if test -z "$ac_cv_path_GREP"; then
-    as_fn_error $? "no acceptable grep could be found in $PATH$PATH_SEPARATOR/usr/xpg4/bin" "$LINENO" 5
-  fi
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+char inet_ntop ();
+int
+main ()
+{
+return inet_ntop ();
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  ac_cv_lib_resolv_inet_ntop=yes
 else
-  ac_cv_path_GREP=$GREP
+  ac_cv_lib_resolv_inet_ntop=no
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_resolv_inet_ntop" >&5
+$as_echo "$ac_cv_lib_resolv_inet_ntop" >&6; }
+if test "x$ac_cv_lib_resolv_inet_ntop" = xyes; then :
+  NEEDS_RESOLV=YesPlease
+else
+  NO_INET_NTOP=YesPlease
 fi
 
+
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_path_GREP" >&5
-$as_echo "$ac_cv_path_GREP" >&6; }
- GREP="$ac_cv_path_GREP"
 
 
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for egrep" >&5
-$as_echo_n "checking for egrep... " >&6; }
-if ${ac_cv_path_EGREP+:} false; then :
+config_appended_defs="$config_appended_defs${newline}NO_INET_NTOP=${NO_INET_NTOP}"
+#
+# Define NO_INET_PTON if linking with -lresolv is not enough.
+# Solaris 2.7 in particular hos inet_pton in -lresolv.
+NO_INET_PTON=
+ac_fn_c_check_func "$LINENO" "inet_pton" "ac_cv_func_inet_pton"
+if test "x$ac_cv_func_inet_pton" = xyes; then :
+
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for inet_pton in -lresolv" >&5
+$as_echo_n "checking for inet_pton in -lresolv... " >&6; }
+if ${ac_cv_lib_resolv_inet_pton+:} false; then :
   $as_echo_n "(cached) " >&6
 else
-  if echo a | $GREP -E '(a|b)' >/dev/null 2>&1
-   then ac_cv_path_EGREP="$GREP -E"
-   else
-     if test -z "$EGREP"; then
-  ac_path_EGREP_found=false
-  # Loop through the user's path and test for each of PROGNAME-LIST
-  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in $PATH$PATH_SEPARATOR/usr/xpg4/bin
-do
-  IFS=$as_save_IFS
-  test -z "$as_dir" && as_dir=.
-    for ac_prog in egrep; do
-    for ac_exec_ext in '' $ac_executable_extensions; do
-      ac_path_EGREP="$as_dir/$ac_prog$ac_exec_ext"
-      as_fn_executable_p "$ac_path_EGREP" || continue
-# Check for GNU ac_path_EGREP and select it if it is found.
-  # Check for GNU $ac_path_EGREP
-case `"$ac_path_EGREP" --version 2>&1` in
-*GNU*)
-  ac_cv_path_EGREP="$ac_path_EGREP" ac_path_EGREP_found=:;;
-*)
-  ac_count=0
-  $as_echo_n 0123456789 >"conftest.in"
-  while :
-  do
-    cat "conftest.in" "conftest.in" >"conftest.tmp"
-    mv "conftest.tmp" "conftest.in"
-    cp "conftest.in" "conftest.nl"
-    $as_echo 'EGREP' >> "conftest.nl"
-    "$ac_path_EGREP" 'EGREP$' < "conftest.nl" >"conftest.out" 2>/dev/null || break
-    diff "conftest.out" "conftest.nl" >/dev/null 2>&1 || break
-    as_fn_arith $ac_count + 1 && ac_count=$as_val
-    if test $ac_count -gt ${ac_path_EGREP_max-0}; then
-      # Best one so far, save it but keep looking for a better one
-      ac_cv_path_EGREP="$ac_path_EGREP"
-      ac_path_EGREP_max=$ac_count
-    fi
-    # 10*(2^10) chars as input seems more than enough
-    test $ac_count -gt 10 && break
-  done
-  rm -f conftest.in conftest.tmp conftest.nl conftest.out;;
-esac
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-lresolv  $LIBS"
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
 
-      $ac_path_EGREP_found && break 3
-    done
-  done
-  done
-IFS=$as_save_IFS
-  if test -z "$ac_cv_path_EGREP"; then
-    as_fn_error $? "no acceptable egrep could be found in $PATH$PATH_SEPARATOR/usr/xpg4/bin" "$LINENO" 5
-  fi
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+char inet_pton ();
+int
+main ()
+{
+return inet_pton ();
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  ac_cv_lib_resolv_inet_pton=yes
 else
-  ac_cv_path_EGREP=$EGREP
+  ac_cv_lib_resolv_inet_pton=no
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_resolv_inet_pton" >&5
+$as_echo "$ac_cv_lib_resolv_inet_pton" >&6; }
+if test "x$ac_cv_lib_resolv_inet_pton" = xyes; then :
+  NEEDS_RESOLV=YesPlease
+else
+  NO_INET_PTON=YesPlease
 fi
 
-   fi
+
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_path_EGREP" >&5
-$as_echo "$ac_cv_path_EGREP" >&6; }
- EGREP="$ac_cv_path_EGREP"
 
 
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for ANSI C header files" >&5
-$as_echo_n "checking for ANSI C header files... " >&6; }
-if ${ac_cv_header_stdc+:} false; then :
+config_appended_defs="$config_appended_defs${newline}NO_INET_PTON=${NO_INET_PTON}"
+#
+# Define NO_HSTRERROR if linking with -lresolv is not enough.
+# Solaris 2.6 in particular has no hstrerror, even in -lresolv.
+NO_HSTRERROR=
+ac_fn_c_check_func "$LINENO" "hstrerror" "ac_cv_func_hstrerror"
+if test "x$ac_cv_func_hstrerror" = xyes; then :
+
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for hstrerror in -lresolv" >&5
+$as_echo_n "checking for hstrerror in -lresolv... " >&6; }
+if ${ac_cv_lib_resolv_hstrerror+:} false; then :
   $as_echo_n "(cached) " >&6
 else
-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-lresolv  $LIBS"
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
-#include <stdlib.h>
-#include <stdarg.h>
-#include <string.h>
-#include <float.h>
 
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+char hstrerror ();
 int
 main ()
 {
-
+return hstrerror ();
   ;
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
-  ac_cv_header_stdc=yes
+if ac_fn_c_try_link "$LINENO"; then :
+  ac_cv_lib_resolv_hstrerror=yes
 else
-  ac_cv_header_stdc=no
+  ac_cv_lib_resolv_hstrerror=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
-
-if test $ac_cv_header_stdc = yes; then
-  # SunOS 4.x string.h does not declare mem*, contrary to ANSI.
-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-#include <string.h>
-
-_ACEOF
-if (eval "$ac_cpp conftest.$ac_ext") 2>&5 |
-  $EGREP "memchr" >/dev/null 2>&1; then :
-
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_resolv_hstrerror" >&5
+$as_echo "$ac_cv_lib_resolv_hstrerror" >&6; }
+if test "x$ac_cv_lib_resolv_hstrerror" = xyes; then :
+  NEEDS_RESOLV=YesPlease
 else
-  ac_cv_header_stdc=no
+  NO_HSTRERROR=YesPlease
 fi
-rm -f conftest*
+
 
 fi
 
-if test $ac_cv_header_stdc = yes; then
-  # ISC 2.0.2 stdlib.h does not declare free, contrary to ANSI.
-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-#include <stdlib.h>
 
-_ACEOF
-if (eval "$ac_cpp conftest.$ac_ext") 2>&5 |
-  $EGREP "free" >/dev/null 2>&1; then :
+config_appended_defs="$config_appended_defs${newline}NO_HSTRERROR=${NO_HSTRERROR}"
 
-else
-  ac_cv_header_stdc=no
-fi
-rm -f conftest*
 
-fi
+config_appended_defs="$config_appended_defs${newline}NEEDS_RESOLV=${NEEDS_RESOLV}"
+#
+# If any of the above tests determined that -lresolv is needed at
+# build-time, also set it here for remaining configure-time checks.
+test -n "$NEEDS_RESOLV" && LIBS="$LIBS -lresolv"
 
-if test $ac_cv_header_stdc = yes; then
-  # /bin/cc in Irix-4.0.5 gets non-ANSI ctype macros unless using -ansi.
-  if test "$cross_compiling" = yes; then :
-  :
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for basename in -lc" >&5
+$as_echo_n "checking for basename in -lc... " >&6; }
+if ${ac_cv_lib_c_basename+:} false; then :
+  $as_echo_n "(cached) " >&6
 else
-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-lc  $LIBS"
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
-#include <ctype.h>
-#include <stdlib.h>
-#if ((' ' & 0x0FF) == 0x020)
-# define ISLOWER(c) ('a' <= (c) && (c) <= 'z')
-# define TOUPPER(c) (ISLOWER(c) ? 'A' + ((c) - 'a') : (c))
-#else
-# define ISLOWER(c) \
-		   (('a' <= (c) && (c) <= 'i') \
-		     || ('j' <= (c) && (c) <= 'r') \
-		     || ('s' <= (c) && (c) <= 'z'))
-# define TOUPPER(c) (ISLOWER(c) ? ((c) | 0x40) : (c))
-#endif
 
-#define XOR(e, f) (((e) && !(f)) || (!(e) && (f)))
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+char basename ();
 int
 main ()
 {
-  int i;
-  for (i = 0; i < 256; i++)
-    if (XOR (islower (i), ISLOWER (i))
-	|| toupper (i) != TOUPPER (i))
-      return 2;
+return basename ();
+  ;
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_run "$LINENO"; then :
-
+if ac_fn_c_try_link "$LINENO"; then :
+  ac_cv_lib_c_basename=yes
 else
-  ac_cv_header_stdc=no
-fi
-rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \
-  conftest.$ac_objext conftest.beam conftest.$ac_ext
+  ac_cv_lib_c_basename=no
 fi
-
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
 fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_c_basename" >&5
+$as_echo "$ac_cv_lib_c_basename" >&6; }
+if test "x$ac_cv_lib_c_basename" = xyes; then :
+  NEEDS_LIBGEN=
+else
+  NEEDS_LIBGEN=YesPlease
 fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_header_stdc" >&5
-$as_echo "$ac_cv_header_stdc" >&6; }
-if test $ac_cv_header_stdc = yes; then
 
-$as_echo "#define STDC_HEADERS 1" >>confdefs.h
 
-fi
+config_appended_defs="$config_appended_defs${newline}NEEDS_LIBGEN=${NEEDS_LIBGEN}"
+test -n "$NEEDS_LIBGEN" && LIBS="$LIBS -lgen"
 
-# On IRIX 5.3, sys/types and inttypes.h are conflicting.
-for ac_header in sys/types.h sys/stat.h stdlib.h string.h memory.h strings.h \
-		  inttypes.h stdint.h unistd.h
-do :
-  as_ac_Header=`$as_echo "ac_cv_header_$ac_header" | $as_tr_sh`
-ac_fn_c_check_header_compile "$LINENO" "$ac_header" "$as_ac_Header" "$ac_includes_default
-"
-if eval test \"x\$"$as_ac_Header"\" = x"yes"; then :
-  cat >>confdefs.h <<_ACEOF
-#define `$as_echo "HAVE_$ac_header" | $as_tr_cpp` 1
-_ACEOF
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for gettext in -lc" >&5
+$as_echo_n "checking for gettext in -lc... " >&6; }
+if ${ac_cv_lib_c_gettext+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-lc  $LIBS"
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
 
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+char gettext ();
+int
+main ()
+{
+return gettext ();
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  ac_cv_lib_c_gettext=yes
+else
+  ac_cv_lib_c_gettext=no
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_c_gettext" >&5
+$as_echo "$ac_cv_lib_c_gettext" >&6; }
+if test "x$ac_cv_lib_c_gettext" = xyes; then :
+  LIBC_CONTAINS_LIBINTL=YesPlease
+else
+  LIBC_CONTAINS_LIBINTL=
 fi
 
-done
 
+config_appended_defs="$config_appended_defs${newline}LIBC_CONTAINS_LIBINTL=${LIBC_CONTAINS_LIBINTL}"
 
+#
+# Define NO_GETTEXT if you don't want Git output to be translated.
+# A translated Git requires GNU libintl or another gettext implementation
 ac_fn_c_check_header_mongrel "$LINENO" "libintl.h" "ac_cv_header_libintl_h" "$ac_includes_default"
 if test "x$ac_cv_header_libintl_h" = xyes; then :
   NO_GETTEXT=
 else
   NO_GETTEXT=YesPlease
 fi
@@ -6887,22 +7619,22 @@
 if (echo >conf$$.file) 2>/dev/null; then
   if ln -s conf$$.file conf$$ 2>/dev/null; then
     as_ln_s='ln -s'
     # ... but there are two gotchas:
     # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
     # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
-    # In both cases, we have to default to `cp -pR'.
+    # In both cases, we have to default to `cp -p'.
     ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
-      as_ln_s='cp -pR'
+      as_ln_s='cp -p'
   elif ln conf$$.file conf$$ 2>/dev/null; then
     as_ln_s=ln
   else
-    as_ln_s='cp -pR'
+    as_ln_s='cp -p'
   fi
 else
-  as_ln_s='cp -pR'
+  as_ln_s='cp -p'
 fi
 rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
 rmdir conf$$.dir 2>/dev/null
 
 
 # as_fn_mkdir_p
@@ -6956,22 +7688,34 @@
   as_mkdir_p='mkdir -p "$as_dir"'
 else
   test -d ./-p && rmdir ./-p
   as_mkdir_p=false
 fi
 
-
-# as_fn_executable_p FILE
-# -----------------------
-# Test if FILE is an executable regular file.
-as_fn_executable_p ()
-{
-  test -f "$1" && test -x "$1"
-} # as_fn_executable_p
-as_test_x='test -x'
-as_executable_p=as_fn_executable_p
+if test -x / >/dev/null 2>&1; then
+  as_test_x='test -x'
+else
+  if ls -dL / >/dev/null 2>&1; then
+    as_ls_L_option=L
+  else
+    as_ls_L_option=
+  fi
+  as_test_x='
+    eval sh -c '\''
+      if test -d "$1"; then
+	test -d "$1/.";
+      else
+	case $1 in #(
+	-*)set "./$1";;
+	esac;
+	case `ls -ld'$as_ls_L_option' "$1" 2>/dev/null` in #((
+	???[sx]*):;;*)false;;esac;fi
+    '\'' sh
+  '
+fi
+as_executable_p=$as_test_x
 
 # Sed expression to map a string onto a valid CPP name.
 as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"
 
 # Sed expression to map a string onto a valid variable name.
 as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"
@@ -6986,14 +7730,14 @@
 
 cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
 # Save the log message, to keep $0 and so on meaningful, and to
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by git $as_me 2.0.5, which was
-generated by GNU Autoconf 2.69.  Invocation command line was
+This file was extended by git $as_me 2.1.0, which was
+generated by GNU Autoconf 2.68.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
   CONFIG_HEADERS  = $CONFIG_HEADERS
   CONFIG_LINKS    = $CONFIG_LINKS
   CONFIG_COMMANDS = $CONFIG_COMMANDS
   $ $0 $@
@@ -7043,17 +7787,17 @@
 Report bugs to <git@vger.kernel.org>."
 
 _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
 ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
 ac_cs_version="\\
-git config.status 2.0.5
-configured by $0, generated by GNU Autoconf 2.69,
+git config.status 2.1.0
+configured by $0, generated by GNU Autoconf 2.68,
   with options \\"\$ac_cs_config\\"
 
-Copyright (C) 2012 Free Software Foundation, Inc.
+Copyright (C) 2010 Free Software Foundation, Inc.
 This config.status script is free software; the Free Software Foundation
 gives unlimited permission to copy, distribute and modify it."
 
 ac_pwd='$ac_pwd'
 srcdir='$srcdir'
 test -n "\$AWK" || AWK=awk
@@ -7124,13 +7868,13 @@
   ac_configure_extra_args="$ac_configure_extra_args --silent"
 fi
 
 _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
 if \$ac_cs_recheck; then
-  set X $SHELL '$0' $ac_configure_args \$ac_configure_extra_args --no-create --no-recursion
+  set X '$SHELL' '$0' $ac_configure_args \$ac_configure_extra_args --no-create --no-recursion
   shift
   \$as_echo "running CONFIG_SHELL=$SHELL \$*" >&6
   CONFIG_SHELL='$SHELL'
   export CONFIG_SHELL
   exec "\$@"
 fi
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/configure.ac /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/configure.ac
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/configure.ac	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/configure.ac	2014-08-16 06:26:55.000000000 +0800
@@ -269,12 +269,20 @@
 	AC_MSG_NOTICE([Setting LIBPCREDIR to $LIBPCREDIR])
         dnl USE_LIBPCRE can still be modified below, so don't substitute
         dnl it yet.
 	GIT_CONF_SUBST([LIBPCREDIR])
     fi)
 #
+# Define HAVE_ALLOCA_H if you have working alloca(3) defined in that header.
+AC_FUNC_ALLOCA
+case $ac_cv_working_alloca_h in
+    yes)    HAVE_ALLOCA_H=YesPlease;;
+    *)      HAVE_ALLOCA_H='';;
+esac
+GIT_CONF_SUBST([HAVE_ALLOCA_H])
+#
 # Define NO_CURL if you do not have curl installed.  git-http-pull and
 # git-http-push are not built, and you cannot use http:// and https://
 # transports.
 #
 # Define CURLDIR=/foo/bar if your curl header and library files are in
 # /foo/bar/include and /foo/bar/lib directories.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/connect.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/connect.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/connect.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/connect.c	2014-08-16 06:26:55.000000000 +0800
@@ -124,29 +124,30 @@
 	for (;;) {
 		struct ref *ref;
 		unsigned char old_sha1[20];
 		char *name;
 		int len, name_len;
 		char *buffer = packet_buffer;
+		const char *arg;
 
 		len = packet_read(in, &src_buf, &src_len,
 				  packet_buffer, sizeof(packet_buffer),
 				  PACKET_READ_GENTLE_ON_EOF |
 				  PACKET_READ_CHOMP_NEWLINE);
 		if (len < 0)
 			die_initial_contact(got_at_least_one_head);
 
 		if (!len)
 			break;
 
-		if (len > 4 && starts_with(buffer, "ERR "))
-			die("remote error: %s", buffer + 4);
+		if (len > 4 && skip_prefix(buffer, "ERR ", &arg))
+			die("remote error: %s", arg);
 
-		if (len == 48 && starts_with(buffer, "shallow ")) {
-			if (get_sha1_hex(buffer + 8, old_sha1))
-				die("protocol error: expected shallow sha-1, got '%s'", buffer + 8);
+		if (len == 48 && skip_prefix(buffer, "shallow ", &arg)) {
+			if (get_sha1_hex(arg, old_sha1))
+				die("protocol error: expected shallow sha-1, got '%s'", arg);
 			if (!shallow_points)
 				die("repository on the other end cannot be shallow");
 			sha1_array_append(shallow_points, old_sha1);
 			continue;
 		}
 
@@ -529,28 +530,24 @@
 	return (git_proxy_command && *git_proxy_command);
 }
 
 static struct child_process *git_proxy_connect(int fd[2], char *host)
 {
 	const char *port = STR(DEFAULT_GIT_PORT);
-	const char **argv;
 	struct child_process *proxy;
 
 	get_host_and_port(&host, &port);
 
-	argv = xmalloc(sizeof(*argv) * 4);
-	argv[0] = git_proxy_command;
-	argv[1] = host;
-	argv[2] = port;
-	argv[3] = NULL;
 	proxy = xcalloc(1, sizeof(*proxy));
-	proxy->argv = argv;
+	argv_array_push(&proxy->args, git_proxy_command);
+	argv_array_push(&proxy->args, host);
+	argv_array_push(&proxy->args, port);
 	proxy->in = -1;
 	proxy->out = -1;
 	if (start_command(proxy))
-		die("cannot start proxy %s", argv[0]);
+		die("cannot start proxy %s", git_proxy_command);
 	fd[0] = proxy->out; /* read from proxy stdout */
 	fd[1] = proxy->in;  /* write to proxy stdin */
 	return proxy;
 }
 
 static const char *get_port_numeric(const char *p)
@@ -658,13 +655,12 @@
 struct child_process *git_connect(int fd[2], const char *url,
 				  const char *prog, int flags)
 {
 	char *hostandport, *path;
 	struct child_process *conn = &no_fork;
 	enum protocol protocol;
-	const char **arg;
 	struct strbuf cmd = STRBUF_INIT;
 
 	/* Without this we cannot rely on waitpid() to tell
 	 * what happened to our children.
 	 */
 	signal(SIGCHLD, SIG_DFL);
@@ -702,39 +698,37 @@
 
 		strbuf_addstr(&cmd, prog);
 		strbuf_addch(&cmd, ' ');
 		sq_quote_buf(&cmd, path);
 
 		conn->in = conn->out = -1;
-		conn->argv = arg = xcalloc(7, sizeof(*arg));
 		if (protocol == PROTO_SSH) {
 			const char *ssh = getenv("GIT_SSH");
 			int putty = ssh && strcasestr(ssh, "plink");
 			char *ssh_host = hostandport;
 			const char *port = NULL;
 			get_host_and_port(&ssh_host, &port);
 			port = get_port_numeric(port);
 
 			if (!ssh) ssh = "ssh";
 
-			*arg++ = ssh;
+			argv_array_push(&conn->args, ssh);
 			if (putty && !strcasestr(ssh, "tortoiseplink"))
-				*arg++ = "-batch";
+				argv_array_push(&conn->args, "-batch");
 			if (port) {
 				/* P is for PuTTY, p is for OpenSSH */
-				*arg++ = putty ? "-P" : "-p";
-				*arg++ = port;
+				argv_array_push(&conn->args, putty ? "-P" : "-p");
+				argv_array_push(&conn->args, port);
 			}
-			*arg++ = ssh_host;
+			argv_array_push(&conn->args, ssh_host);
 		} else {
 			/* remove repo-local variables from the environment */
 			conn->env = local_repo_env;
 			conn->use_shell = 1;
 		}
-		*arg++ = cmd.buf;
-		*arg = NULL;
+		argv_array_push(&conn->args, cmd.buf);
 
 		if (start_command(conn))
 			die("unable to fork");
 
 		fd[0] = conn->out; /* read from child's stdout */
 		fd[1] = conn->in;  /* write to child's stdin */
@@ -754,10 +748,9 @@
 {
 	int code;
 	if (!conn || git_connection_is_socket(conn))
 		return 0;
 
 	code = finish_command(conn);
-	free(conn->argv);
 	free(conn);
 	return code;
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/connect.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/connect.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/connected.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/connected.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/connected.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/connected.c	2014-08-16 06:26:55.000000000 +0800
@@ -28,23 +28,23 @@
 	struct child_process rev_list;
 	const char *argv[9];
 	char commit[41];
 	unsigned char sha1[20];
 	int err = 0, ac = 0;
 	struct packed_git *new_pack = NULL;
+	size_t base_len;
 
 	if (fn(cb_data, sha1))
 		return err;
 
 	if (transport && transport->smart_options &&
 	    transport->smart_options->self_contained_and_connected &&
 	    transport->pack_lockfile &&
-	    ends_with(transport->pack_lockfile, ".keep")) {
+	    strip_suffix(transport->pack_lockfile, ".keep", &base_len)) {
 		struct strbuf idx_file = STRBUF_INIT;
-		strbuf_addstr(&idx_file, transport->pack_lockfile);
-		strbuf_setlen(&idx_file, idx_file.len - 5); /* ".keep" */
+		strbuf_add(&idx_file, transport->pack_lockfile, base_len);
 		strbuf_addstr(&idx_file, ".idx");
 		new_pack = add_packed_git(idx_file.buf, idx_file.len, 1);
 		strbuf_release(&idx_file);
 	}
 
 	if (shallow_file) {
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/connected.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/connected.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/connected.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/connected.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/connect.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/connect.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/completion/git-completion.bash /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/completion/git-completion.bash
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/completion/git-completion.bash	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/completion/git-completion.bash	2014-08-16 06:26:55.000000000 +0800
@@ -18,12 +18,18 @@
 #
 #    1) Copy this file to somewhere (e.g. ~/.git-completion.sh).
 #    2) Add the following line to your .bashrc/.zshrc:
 #        source ~/.git-completion.sh
 #    3) Consider changing your PS1 to also show the current branch,
 #       see git-prompt.sh for details.
+#
+# If you use complex aliases of form '!f() { ... }; f', you can use the null
+# command ':' as the first command in the function body to declare the desired
+# completion style.  For example '!f() { : git commit ; ... }; f' will
+# tell the completion to use commit completion.  This also works with aliases
+# of form "!sh -c '...'".  For example, "!sh -c ': git commit ; ... '".
 
 case "$COMP_WORDBREAKS" in
 *:*) : great ;;
 *)   COMP_WORDBREAKS="$COMP_WORDBREAKS:"
 esac
 
@@ -778,12 +784,16 @@
 			return
 			;;
 		\!*)	: shell command alias ;;
 		-*)	: option ;;
 		*=*)	: setting env ;;
 		git)	: git itself ;;
+		\(\))   : skip parens of shell function definition ;;
+		{)	: skip start of shell helper function ;;
+		:)	: skip null command ;;
+		\'*)	: skip opening quote after sh -c ;;
 		*)
 			echo "$word"
 			return
 		esac
 	done
 }
@@ -1608,33 +1618,59 @@
 	esac
 	__git_complete_remote_or_refspec
 }
 
 __git_push_recurse_submodules="check on-demand"
 
+__git_complete_force_with_lease ()
+{
+	local cur_=$1
+
+	case "$cur_" in
+	--*=)
+		;;
+	*:*)
+		__gitcomp_nl "$(__git_refs)" "" "${cur_#*:}"
+		;;
+	*)
+		__gitcomp_nl "$(__git_refs)" "" "$cur_"
+		;;
+	esac
+}
+
 _git_push ()
 {
 	case "$prev" in
 	--repo)
 		__gitcomp_nl "$(__git_remotes)"
 		return
+		;;
+	--recurse-submodules)
+		__gitcomp "$__git_push_recurse_submodules"
+		return
+		;;
 	esac
 	case "$cur" in
 	--repo=*)
 		__gitcomp_nl "$(__git_remotes)" "" "${cur##--repo=}"
 		return
 		;;
 	--recurse-submodules=*)
 		__gitcomp "$__git_push_recurse_submodules" "" "${cur##--recurse-submodules=}"
 		return
 		;;
+	--force-with-lease=*)
+		__git_complete_force_with_lease "${cur##--force-with-lease=}"
+		return
+		;;
 	--*)
 		__gitcomp "
 			--all --mirror --tags --dry-run --force --verbose
+			--quiet --prune --delete --follow-tags
 			--receive-pack= --repo= --set-upstream
-			--recurse-submodules=
+			--force-with-lease --force-with-lease= --recurse-submodules=
 		"
 		return
 		;;
 	esac
 	__git_complete_remote_or_refspec
 }
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib: convert-grafts-to-replace-refs.sh
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/convert-objects/git-convert-objects.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/convert-objects/git-convert-objects.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/convert-objects/git-convert-objects.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/convert-objects/git-convert-objects.txt	2014-08-16 06:26:55.000000000 +0800
@@ -23,7 +23,7 @@
 Documentation
 --------------
 Documentation by David Greaves, Junio C Hamano and the git-list <git@vger.kernel.org>.
 
 GIT
 ---
-Part of the gitlink:git[7] suite
+Part of the linkgit:git[7] suite
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/credential/wincred/Makefile /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/credential/wincred/Makefile
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/credential/wincred/Makefile	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/credential/wincred/Makefile	2014-08-16 06:26:55.000000000 +0800
@@ -1,14 +1,22 @@
 all: git-credential-wincred.exe
 
-CC = gcc
-RM = rm -f
-CFLAGS = -O2 -Wall
-
 -include ../../../config.mak.autogen
 -include ../../../config.mak
 
+CC ?= gcc
+RM ?= rm -f
+CFLAGS ?= -O2 -Wall
+
+prefix ?= /usr/local
+libexecdir ?= $(prefix)/libexec/git-core
+
+INSTALL ?= install
+
 git-credential-wincred.exe : git-credential-wincred.c
 	$(LINK.c) $^ $(LOADLIBES) $(LDLIBS) -o $@
 
+install: git-credential-wincred.exe
+	$(INSTALL) -m 755 $^ $(libexecdir)
+
 clean:
 	$(RM) git-credential-wincred.exe
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib: diffall
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/examples/builtin-fetch--tool.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/examples/builtin-fetch--tool.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/examples/builtin-fetch--tool.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/examples/builtin-fetch--tool.c	2014-08-16 06:26:55.000000000 +0800
@@ -28,13 +28,14 @@
 	const char *rla = getenv("GIT_REFLOG_ACTION");
 
 	if (!rla)
 		rla = "(reflog update)";
 	if (snprintf(msg, sizeof(msg), "%s: %s", rla, action) >= sizeof(msg))
 		warning("reflog message too long: %.*s...", 50, msg);
-	return update_ref(msg, refname, sha1, oldval, 0, QUIET_ON_ERR);
+	return update_ref(msg, refname, sha1, oldval, 0,
+			  UPDATE_REFS_QUIET_ON_ERR);
 }
 
 static int update_local_ref(const char *name,
 			    const char *new_head,
 			    const char *note,
 			    int verbose, int force)
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/examples/git-clone.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/examples/git-clone.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/examples/git-clone.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/examples/git-clone.sh	2014-08-16 06:26:55.000000000 +0800
@@ -513,13 +513,13 @@
 		fi
 		;;
 	esac
 
 	case "$no_checkout" in
 	'')
-		test "z$quiet" = z -a "z$no_progress" = z && v=-v || v=
+		test "z$quiet" = z && test "z$no_progress" = z && v=-v || v=
 		git read-tree -m -u $v HEAD HEAD
 	esac
 fi
 rm -f "$GIT_DIR/CLONE_HEAD" "$GIT_DIR/REMOTE_HEAD"
 
 trap - 0
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/examples/git-commit.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/examples/git-commit.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/examples/git-commit.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/examples/git-commit.sh	2014-08-16 06:26:55.000000000 +0800
@@ -48,13 +48,13 @@
 	elif test -f "$NEXT_INDEX"
 	then
 		GIT_INDEX_FILE="$NEXT_INDEX"
 		export GIT_INDEX_FILE
 	fi
 
-	if test "$status_only" = "t" -o "$use_status_color" = "t"; then
+	if test "$status_only" = "t" || test "$use_status_color" = "t"; then
 		color=
 	else
 		color=--nocolor
 	fi
 	git runstatus ${color} \
 		${verbose:+--verbose} \
@@ -293,13 +293,13 @@
 ,t,,[1-9]*)
 	die "Paths with --interactive does not make sense." ;;
 ,,t,0)
 	die "No paths with -i does not make sense." ;;
 esac
 
-if test ! -z "$templatefile" -a -z "$log_given"
+if test ! -z "$templatefile" && test -z "$log_given"
 then
 	if test ! -f "$templatefile"
 	then
 		die "Commit template file does not exist."
 	fi
 fi
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/examples/git-merge.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/examples/git-merge.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/examples/git-merge.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/examples/git-merge.sh	2014-08-16 06:26:55.000000000 +0800
@@ -158,13 +158,13 @@
 		elif test "${found_ref#refs/remotes/}" != "$found_ref"
 		then
 			echo "$rh		remote branch '$expanded' of ."
 			return
 		fi
 	fi
-	if test "$remote" = "FETCH_HEAD" -a -r "$GIT_DIR/FETCH_HEAD"
+	if test "$remote" = "FETCH_HEAD" && test -r "$GIT_DIR/FETCH_HEAD"
 	then
 		sed -e 's/	not-for-merge	/		/' -e 1q \
 			"$GIT_DIR/FETCH_HEAD"
 		return
 	fi
 	echo "$rh		commit '$remote'"
@@ -524,13 +524,13 @@
 	if test "$exit" -eq 1
 	then
 	    cnt=`{
 		git diff-files --name-only
 		git ls-files --unmerged
 	    } | wc -l`
-	    if test $best_cnt -le 0 -o $cnt -le $best_cnt
+	    if test $best_cnt -le 0 || test $cnt -le $best_cnt
 	    then
 		best_strategy=$strategy
 		best_cnt=$cnt
 	    fi
 	fi
 	continue
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/examples/git-repack.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/examples/git-repack.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/examples/git-repack.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/examples/git-repack.sh	2014-08-16 06:26:55.000000000 +0800
@@ -73,14 +73,14 @@
 			if [ -e "$PACKDIR/$e.keep" ]; then
 				: keep
 			else
 				existing="$existing $e"
 			fi
 		done
-		if test -n "$existing" -a -n "$unpack_unreachable" -a \
-			-n "$remove_redundant"
+		if test -n "$existing" && test -n "$unpack_unreachable" && \
+			test -n "$remove_redundant"
 		then
 			# This may have arbitrary user arguments, so we
 			# have to protect it against whitespace splitting
 			# when it gets run as "pack-objects $args" later.
 			# Fortunately, we know it's an approxidate, so we
 			# can just use dots instead.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/examples/git-resolve.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/examples/git-resolve.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/examples/git-resolve.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/examples/git-resolve.sh	2014-08-16 06:26:55.000000000 +0800
@@ -73,13 +73,13 @@
 	do
 		rm -f $G
 		GIT_INDEX_FILE=$G git read-tree -m $c $head $merge \
 			2>/dev/null || continue
 		# Count the paths that are unmerged.
 		cnt=$(GIT_INDEX_FILE=$G git ls-files --unmerged | wc -l)
-		if test $best_cnt -le 0 -o $cnt -le $best_cnt
+		if test $best_cnt -le 0 || test $cnt -le $best_cnt
 		then
 			best=$c
 			best_cnt=$cnt
 			if test "$best_cnt" -eq 0
 			then
 				# Cannot do any better than all trivial merge.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/examples/git-svnimport.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/examples/git-svnimport.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/examples/git-svnimport.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/examples/git-svnimport.txt	2014-08-16 06:26:55.000000000 +0800
@@ -173,7 +173,7 @@
 Documentation
 --------------
 Documentation by Matthias Urlichs <smurf@smurf.noris.de>.
 
 GIT
 ---
-Part of the gitlink:git[7] suite
+Part of the linkgit:git[7] suite
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/gitview/gitview.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/gitview/gitview.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/gitview/gitview.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/gitview/gitview.txt	2014-08-16 06:26:55.000000000 +0800
@@ -25,13 +25,13 @@
 
 	If the user doesn't want to list the commit diffs in the main window.
 	This may speed up the repository browsing.
 
 <args>::
 
-	All the valid option for gitlink:git-rev-list[1].
+	All the valid option for linkgit:git-rev-list[1].
 
 Key Bindings
 ------------
 F4::
 	To maximize the window
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/mw-to-git/git-remote-mediawiki.perl /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/mw-to-git/git-remote-mediawiki.perl
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/mw-to-git/git-remote-mediawiki.perl	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/mw-to-git/git-remote-mediawiki.perl	2014-08-16 06:26:55.000000000 +0800
@@ -458,13 +458,18 @@
 
 sub download_mw_mediafile {
 	my $download_url = shift;
 
 	my $response = $mediawiki->{ua}->get($download_url);
 	if ($response->code == HTTP_CODE_OK) {
-		return $response->decoded_content;
+		# It is tempting to return
+		# $response->decoded_content({charset => "none"}), but
+		# when doing so, utf8::downgrade($content) fails with
+		# "Wide character in subroutine entry".
+		$response->decode();
+		return $response->content();
 	} else {
 		print {*STDERR} "Error downloading mediafile from :\n";
 		print {*STDERR} "URL: ${download_url}\n";
 		print {*STDERR} 'Server response: ' . $response->code . q{ } . $response->message . "\n";
 		exit 1;
 	}
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/mw-to-git/t/install-wiki.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/mw-to-git/t/install-wiki.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/mw-to-git/t/install-wiki.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/mw-to-git/t/install-wiki.sh	2014-08-16 06:26:55.000000000 +0800
@@ -17,12 +17,14 @@
 usage () {
 	echo "usage: "
 	echo "	./install-wiki.sh <install | delete | --help>"
 	echo "		install | -i :	Install a wiki on your computer."
 	echo "		delete | -d : Delete the wiki and all its pages and "
 	echo "			content."
+	echo "		start  | -s : Start the previously configured lighttpd daemon"
+	echo "		stop        : Stop lighttpd daemon."
 }
 
 
 # Argument: install, delete, --help | -h
 case "$1" in
 	"install" | "-i")
@@ -30,12 +32,20 @@
 		exit 0
 		;;
 	"delete" | "-d")
 		wiki_delete
 		exit 0
 		;;
+	"start" | "-s")
+		start_lighttpd
+		exit
+		;;
+	"stop")
+		stop_lighttpd
+		exit
+		;;
 	"--help" | "-h")
 		usage
 		exit 0
 		;;
 	*)
 		echo "Invalid argument: $1"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/mw-to-git/t/t9363-mw-to-git-export-import.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/mw-to-git/t/t9363-mw-to-git-export-import.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/mw-to-git/t/t9363-mw-to-git-export-import.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/mw-to-git/t/t9363-mw-to-git-export-import.sh	2014-08-16 06:26:55.000000000 +0800
@@ -55,12 +55,31 @@
 	test_cmp mw_dir_clone/Foo.txt mw_dir/Foo.txt &&
 	(cd mw_dir_clone && git checkout HEAD^) &&
 	(cd mw_dir && git checkout HEAD^) &&
 	test_cmp mw_dir_clone/Foo.txt mw_dir/Foo.txt
 '
 
+test_expect_success 'git push can upload media (File:) files containing valid UTF-8' '
+	wiki_reset &&
+	git clone mediawiki::'"$WIKI_URL"' mw_dir &&
+	(
+		cd mw_dir &&
+		"$PERL_PATH" -e "print STDOUT \"UTF-8 content: éèàéê€.\";" >Bar.txt &&
+		git add Bar.txt &&
+		git commit -m "add a text file with UTF-8 content" &&
+		git push
+	)
+'
+
+test_expect_success 'git clone works on previously created wiki with media files containing valid UTF-8' '
+	test_when_finished "rm -rf mw_dir mw_dir_clone" &&
+	git clone -c remote.origin.mediaimport=true \
+		mediawiki::'"$WIKI_URL"' mw_dir_clone &&
+	test_cmp mw_dir_clone/Bar.txt mw_dir/Bar.txt
+'
+
 test_expect_success 'git push & pull work with locally renamed media files' '
 	wiki_reset &&
 	git clone mediawiki::'"$WIKI_URL"' mw_dir &&
 	test_when_finished "rm -fr mw_dir" &&
 	(
 		cd mw_dir &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/mw-to-git/t/t9365-continuing-queries.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/mw-to-git/t/t9365-continuing-queries.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/mw-to-git/t/t9365-continuing-queries.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/mw-to-git/t/t9365-continuing-queries.sh	2014-08-16 06:26:55.000000000 +0800
@@ -6,13 +6,13 @@
 . $TEST_DIRECTORY/test-lib.sh
 
 test_check_precond
 
 test_expect_success 'creating page w/ >500 revisions' '
 	wiki_reset &&
-	for i in `test_seq 501`
+	for i in $(test_seq 501)
 	do
 		echo "creating revision $i" &&
 		wiki_editpage foo "revision $i<br/>" true
 	done
 '
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/mw-to-git/t/test-gitmw-lib.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/mw-to-git/t/test-gitmw-lib.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/mw-to-git/t/test-gitmw-lib.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/mw-to-git/t/test-gitmw-lib.sh	2014-08-16 06:26:55.000000000 +0800
@@ -87,13 +87,13 @@
 
 # $1=<dir>
 # $2=<N>
 #
 # Check that <dir> contains exactly <N> files
 test_contains_N_files () {
-	if test `ls -- "$1" | wc -l` -ne "$2"; then
+	if test $(ls -- "$1" | wc -l) -ne "$2"; then
 		echo "directory $1 should contain $2 files"
 		echo "it contains these files:"
 		ls "$1"
 		false
 	fi
 }
@@ -286,13 +286,12 @@
 
 # stop_lighttpd
 #
 # Kill daemon lighttpd and removes files and folders associated.
 stop_lighttpd () {
 	test -f "$WEB_TMP/pid" && kill $(cat "$WEB_TMP/pid")
-	rm -rf "$WEB"
 }
 
 # Create the SQLite database of the MediaWiki. If the database file already
 # exists, it will be deleted.
 # This script should be runned from the directory where $FILES_FOLDER is
 # located.
@@ -338,16 +337,16 @@
 		echo "Downloading $MW_VERSION_MAJOR.$MW_VERSION_MINOR sources ..."
 		wget "http://download.wikimedia.org/mediawiki/$MW_VERSION_MAJOR/$MW_FILENAME" ||
 			error "Unable to download "\
 			"http://download.wikimedia.org/mediawiki/$MW_VERSION_MAJOR/"\
 			"$MW_FILENAME. "\
 			"Please fix your connection and launch the script again."
-		echo "$MW_FILENAME downloaded in `pwd`. "\
+		echo "$MW_FILENAME downloaded in $(pwd). "\
 			"You can delete it later if you want."
 	else
-		echo "Reusing existing $MW_FILENAME downloaded in `pwd`."
+		echo "Reusing existing $MW_FILENAME downloaded in $(pwd)."
 	fi
 	archive_abs_path=$(pwd)/$MW_FILENAME
 	cd "$WIKI_DIR_INST/$WIKI_DIR_NAME/" ||
 		error "can't cd to $WIKI_DIR_INST/$WIKI_DIR_NAME/"
 	tar xzf "$archive_abs_path" --strip-components=1 ||
 		error "Unable to extract WikiMedia's files from $archive_abs_path to "\
@@ -412,12 +411,13 @@
 
 # Delete the wiki created in the web server's directory and all its content
 # saved in the database.
 wiki_delete () {
 	if test $LIGHTTPD = "true"; then
 		stop_lighttpd
+		rm -fr "$WEB"
 	else
 		# Delete the wiki's directory.
 		rm -rf "$WIKI_DIR_INST/$WIKI_DIR_NAME" ||
 			error "Wiki's directory $WIKI_DIR_INST/" \
 			"$WIKI_DIR_NAME could not be deleted"
 		# Delete the wiki's SQLite database.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/subtree/git-subtree.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/subtree/git-subtree.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/subtree/git-subtree.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/subtree/git-subtree.sh	2014-08-16 06:26:55.000000000 +0800
@@ -555,14 +555,15 @@
 	
 	if [ -n "$squash" ]; then
 		rev=$(new_squash_commit "" "" "$rev") || exit $?
 		commit=$(add_squashed_msg "$rev" "$dir" |
 			 git commit-tree $tree $headp -p "$rev") || exit $?
 	else
+		revp=$(peel_committish "$rev") &&
 		commit=$(add_msg "$dir" "$headrev" "$rev" |
-			 git commit-tree $tree $headp -p "$rev") || exit $?
+			 git commit-tree $tree $headp -p "$revp") || exit $?
 	fi
 	git reset "$commit" || exit $?
 	
 	say "Added dir '$dir'"
 }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/subtree/Makefile /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/subtree/Makefile
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/subtree/Makefile	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/subtree/Makefile	2014-08-16 06:26:55.000000000 +0800
@@ -1,59 +1,73 @@
 -include ../../config.mak.autogen
 -include ../../config.mak
 
 prefix ?= /usr/local
 mandir ?= $(prefix)/share/man
-libexecdir ?= $(prefix)/libexec/git-core
-gitdir ?= $(shell git --exec-path)
+gitexecdir ?= $(prefix)/libexec/git-core
 man1dir ?= $(mandir)/man1
 
-gitver ?= $(word 3,$(shell git --version))
+../../GIT-VERSION-FILE: FORCE
+	$(MAKE) -C ../../ GIT-VERSION-FILE
+
+-include ../../GIT-VERSION-FILE
 
 # this should be set to a 'standard' bsd-type install program
-INSTALL ?= install
+INSTALL  ?= install
+RM       ?= rm -f
+
+ASCIIDOC = asciidoc
+XMLTO    = xmlto
 
-ASCIIDOC_CONF      = ../../Documentation/asciidoc.conf
-MANPAGE_NORMAL_XSL =  ../../Documentation/manpage-normal.xsl
+ifndef SHELL_PATH
+	SHELL_PATH = /bin/sh
+endif
+SHELL_PATH_SQ = $(subst ','\'',$(SHELL_PATH))
+
+ASCIIDOC_CONF = ../../Documentation/asciidoc.conf
+MANPAGE_XSL   = ../../Documentation/manpage-normal.xsl
 
 GIT_SUBTREE_SH := git-subtree.sh
 GIT_SUBTREE    := git-subtree
 
 GIT_SUBTREE_DOC := git-subtree.1
 GIT_SUBTREE_XML := git-subtree.xml
 GIT_SUBTREE_TXT := git-subtree.txt
 GIT_SUBTREE_HTML := git-subtree.html
 
 all: $(GIT_SUBTREE)
 
 $(GIT_SUBTREE): $(GIT_SUBTREE_SH)
-	cp $< $@ && chmod +x $@
+	sed -e '1s|#!.*/sh|#!$(SHELL_PATH_SQ)|' $< >$@
+	chmod +x $@
 
 doc: $(GIT_SUBTREE_DOC) $(GIT_SUBTREE_HTML)
 
 install: $(GIT_SUBTREE)
-	$(INSTALL) -d -m 755 $(DESTDIR)$(libexecdir)
-	$(INSTALL) -m 755 $(GIT_SUBTREE) $(DESTDIR)$(libexecdir)
+	$(INSTALL) -d -m 755 $(DESTDIR)$(gitexecdir)
+	$(INSTALL) -m 755 $(GIT_SUBTREE) $(DESTDIR)$(gitexecdir)
 
 install-doc: install-man
 
 install-man: $(GIT_SUBTREE_DOC)
 	$(INSTALL) -d -m 755 $(DESTDIR)$(man1dir)
 	$(INSTALL) -m 644 $^ $(DESTDIR)$(man1dir)
 
 $(GIT_SUBTREE_DOC): $(GIT_SUBTREE_XML)
-	xmlto -m $(MANPAGE_NORMAL_XSL)  man $^
+	$(XMLTO) -m $(MANPAGE_XSL) man $^
 
 $(GIT_SUBTREE_XML): $(GIT_SUBTREE_TXT)
-	asciidoc -b docbook -d manpage -f $(ASCIIDOC_CONF) \
-		-agit_version=$(gitver) $^
+	$(ASCIIDOC) -b docbook -d manpage -f $(ASCIIDOC_CONF) \
+		-agit_version=$(GIT_VERSION) $^
 
 $(GIT_SUBTREE_HTML): $(GIT_SUBTREE_TXT)
-	asciidoc -b xhtml11 -d manpage -f $(ASCIIDOC_CONF) \
-		-agit_version=$(gitver) $^
+	$(ASCIIDOC) -b xhtml11 -d manpage -f $(ASCIIDOC_CONF) \
+		-agit_version=$(GIT_VERSION) $^
 
 test:
 	$(MAKE) -C t/ test
 
 clean:
-	rm -f *~ *.xml *.html *.1
-	rm -rf subproj mainline
+	$(RM) $(GIT_SUBTREE)
+	$(RM) *.xml *.html *.1
+
+.PHONY: FORCE
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/subtree/t/t7900-subtree.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/subtree/t/t7900-subtree.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/subtree/t/t7900-subtree.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/subtree/t/t7900-subtree.sh	2014-08-16 06:26:55.000000000 +0800
@@ -74,13 +74,13 @@
         git branch sub1 &&
         git branch -m master subproj
 '
 
 # Save this hash for testing later.
 
-subdir_hash=`git rev-parse HEAD`
+subdir_hash=$(git rev-parse HEAD)
 
 test_expect_success 'add sub2' '
         create sub2 &&
         git commit -m "sub2" &&
         git branch sub2
 '
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/svn-fe/svnrdump_sim.py /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/svn-fe/svnrdump_sim.py
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/svn-fe/svnrdump_sim.py	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/svn-fe/svnrdump_sim.py	2014-08-16 06:26:55.000000000 +0800
@@ -2,56 +2,67 @@
 """
 Simulates svnrdump by replaying an existing dump from a file, taking care
 of the specified revision range.
 To simulate incremental imports the environment variable SVNRMAX can be set
 to the highest revision that should be available.
 """
-import sys, os
+import sys
+import os
 
 if sys.hexversion < 0x02040000:
-        # The limiter is the ValueError() calls. This may be too conservative
-        sys.stderr.write("svnrdump-sim.py: requires Python 2.4 or later.\n")
-        sys.exit(1)
+    # The limiter is the ValueError() calls. This may be too conservative
+    sys.stderr.write("svnrdump-sim.py: requires Python 2.4 or later.\n")
+    sys.exit(1)
+
 
 def getrevlimit():
-        var = 'SVNRMAX'
-        if var in os.environ:
-                return os.environ[var]
-        return None
+    var = 'SVNRMAX'
+    if var in os.environ:
+        return os.environ[var]
+    return None
+
 
 def writedump(url, lower, upper):
-        if url.startswith('sim://'):
-                filename = url[6:]
-                if filename[-1] == '/': filename = filename[:-1] #remove terminating slash
-        else:
-                raise ValueError('sim:// url required')
-        f = open(filename, 'r');
-        state = 'header'
-        wroterev = False
-        while(True):
-                l = f.readline()
-                if l == '': break
-                if state == 'header' and l.startswith('Revision-number: '):
-                        state = 'prefix'
-                if state == 'prefix' and l == 'Revision-number: %s\n' % lower:
-                        state = 'selection'
-                if not upper == 'HEAD' and state == 'selection' and l == 'Revision-number: %s\n' % upper:
-                        break;
-
-                if state == 'header' or state == 'selection':
-                        if state == 'selection': wroterev = True
-                        sys.stdout.write(l)
-        return wroterev
+    if url.startswith('sim://'):
+        filename = url[6:]
+        if filename[-1] == '/':
+            filename = filename[:-1]  # remove terminating slash
+    else:
+        raise ValueError('sim:// url required')
+    f = open(filename, 'r')
+    state = 'header'
+    wroterev = False
+    while(True):
+        l = f.readline()
+        if l == '':
+            break
+        if state == 'header' and l.startswith('Revision-number: '):
+            state = 'prefix'
+        if state == 'prefix' and l == 'Revision-number: %s\n' % lower:
+            state = 'selection'
+        if not upper == 'HEAD' and state == 'selection' and \
+                l == 'Revision-number: %s\n' % upper:
+            break
+
+        if state == 'header' or state == 'selection':
+            if state == 'selection':
+                wroterev = True
+            sys.stdout.write(l)
+    return wroterev
 
 if __name__ == "__main__":
-        if not (len(sys.argv) in (3, 4, 5)):
-                print("usage: %s dump URL -rLOWER:UPPER")
-                sys.exit(1)
-        if not sys.argv[1] == 'dump': raise NotImplementedError('only "dump" is suppported.')
-        url = sys.argv[2]
-        r = ('0', 'HEAD')
-        if len(sys.argv) == 4 and sys.argv[3][0:2] == '-r':
-                r = sys.argv[3][2:].lstrip().split(':')
-        if not getrevlimit() is None: r[1] = getrevlimit()
-        if writedump(url, r[0], r[1]): ret = 0
-        else: ret = 1
-        sys.exit(ret)
+    if not (len(sys.argv) in (3, 4, 5)):
+        print("usage: %s dump URL -rLOWER:UPPER")
+        sys.exit(1)
+    if not sys.argv[1] == 'dump':
+        raise NotImplementedError('only "dump" is suppported.')
+    url = sys.argv[2]
+    r = ('0', 'HEAD')
+    if len(sys.argv) == 4 and sys.argv[3][0:2] == '-r':
+        r = sys.argv[3][2:].lstrip().split(':')
+    if not getrevlimit() is None:
+        r[1] = getrevlimit()
+    if writedump(url, r[0], r[1]):
+        ret = 0
+    else:
+        ret = 1
+    sys.exit(ret)
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/thunderbird-patch-inline/appp.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/thunderbird-patch-inline/appp.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib/thunderbird-patch-inline/appp.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/contrib/thunderbird-patch-inline/appp.sh	2014-08-16 06:26:55.000000000 +0800
@@ -7,13 +7,13 @@
 # ExternalEditor can be downloaded at http://globs.org/articles.php?lng=en&pg=2
 
 CONFFILE=~/.appprc
 
 SEP="-=-=-=-=-=-=-=-=-=# Don't remove this line #=-=-=-=-=-=-=-=-=-"
 if [ -e "$CONFFILE" ] ; then
-	LAST_DIR=`grep -m 1 "^LAST_DIR=" "${CONFFILE}"|sed -e 's/^LAST_DIR=//'`
+	LAST_DIR=$(grep -m 1 "^LAST_DIR=" "${CONFFILE}"|sed -e 's/^LAST_DIR=//')
 	cd "${LAST_DIR}"
 else
 	cd > /dev/null
 fi
 
 PATCH=$(zenity --file-selection)
@@ -22,17 +22,17 @@
 	#zenity --error --text "No patchfile given."
 	exit 1
 fi
 
 cd - > /dev/null
 
-SUBJECT=`sed -n -e '/^Subject: /p' "${PATCH}"`
-HEADERS=`sed -e '/^'"${SEP}"'$/,$d' $1`
-BODY=`sed -e "1,/${SEP}/d" $1`
-CMT_MSG=`sed -e '1,/^$/d' -e '/^---$/,$d' "${PATCH}"`
-DIFF=`sed -e '1,/^---$/d' "${PATCH}"`
+SUBJECT=$(sed -n -e '/^Subject: /p' "${PATCH}")
+HEADERS=$(sed -e '/^'"${SEP}"'$/,$d' $1)
+BODY=$(sed -e "1,/${SEP}/d" $1)
+CMT_MSG=$(sed -e '1,/^$/d' -e '/^---$/,$d' "${PATCH}")
+DIFF=$(sed -e '1,/^---$/d' "${PATCH}")
 
 CCS=`echo -e "$CMT_MSG\n$HEADERS" | sed -n -e 's/^Cc: \(.*\)$/\1,/gp' \
 	-e 's/^Signed-off-by: \(.*\)/\1,/gp'`
 
 echo "$SUBJECT" > $1
 echo "Cc: $CCS" >> $1
@@ -45,11 +45,11 @@
 	echo >> $1
 	echo "$BODY" >> $1
 	echo >> $1
 fi
 echo "$DIFF" >> $1
 
-LAST_DIR=`dirname "${PATCH}"`
+LAST_DIR=$(dirname "${PATCH}")
 
 grep -v "^LAST_DIR=" "${CONFFILE}" > "${CONFFILE}_"
 echo "LAST_DIR=${LAST_DIR}" >> "${CONFFILE}_"
 mv "${CONFFILE}_" "${CONFFILE}"
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/contrib: vim
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/convert.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/convert.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/convert.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/convert.c	2014-08-16 06:26:55.000000000 +0800
@@ -1118,15 +1118,15 @@
 };
 
 static int is_foreign_ident(const char *str)
 {
 	int i;
 
-	if (!starts_with(str, "$Id: "))
+	if (!skip_prefix(str, "$Id: ", &str))
 		return 0;
-	for (i = 5; str[i]; i++) {
+	for (i = 0; str[i]; i++) {
 		if (isspace(str[i]) && str[i+1] != '$')
 			return 1;
 	}
 	return 0;
 }
 
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/convert.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/convert.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/convert.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/convert.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/copy.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/copy.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/copy.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/copy.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential.c	2014-08-16 06:26:55.000000000 +0800
@@ -37,14 +37,13 @@
 static int credential_config_callback(const char *var, const char *value,
 				      void *data)
 {
 	struct credential *c = data;
 	const char *key, *dot;
 
-	key = skip_prefix(var, "credential.");
-	if (!key)
+	if (!skip_prefix(var, "credential.", &key))
 		return 0;
 
 	if (!value)
 		return config_error_nonbool(var);
 
 	dot = strrchr(key, '.');
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-cache.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-cache.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-cache--daemon.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-cache--daemon.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-cache--daemon.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-cache--daemon.c	2014-08-16 06:26:55.000000000 +0800
@@ -106,20 +106,18 @@
 static int read_request(FILE *fh, struct credential *c,
 			struct strbuf *action, int *timeout) {
 	static struct strbuf item = STRBUF_INIT;
 	const char *p;
 
 	strbuf_getline(&item, fh, '\n');
-	p = skip_prefix(item.buf, "action=");
-	if (!p)
+	if (!skip_prefix(item.buf, "action=", &p))
 		return error("client sent bogus action line: %s", item.buf);
 	strbuf_addstr(action, p);
 
 	strbuf_getline(&item, fh, '\n');
-	p = skip_prefix(item.buf, "timeout=");
-	if (!p)
+	if (!skip_prefix(item.buf, "timeout=", &p))
 		return error("client sent bogus timeout line: %s", item.buf);
 	*timeout = atoi(p);
 
 	if (credential_read(c, fh) < 0)
 		return -1;
 	return 0;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-cache--daemon.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-cache--daemon.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-cache--daemon.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-cache--daemon.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-cache.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-cache.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-store.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-store.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/credential-store.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/credential-store.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/csum-file.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/csum-file.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/csum-file.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/csum-file.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ctype.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ctype.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ctype.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ctype.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/daemon.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/daemon.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/daemon.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/daemon.c	2014-08-16 06:26:55.000000000 +0800
@@ -36,14 +36,14 @@
 static int strict_paths;
 
 /* If this is set, git-daemon-export-ok is not required */
 static int export_all_trees;
 
 /* Take all paths relative to this one if non-NULL */
-static char *base_path;
-static char *interpolated_path;
+static const char *base_path;
+static const char *interpolated_path;
 static int base_path_relaxed;
 
 /* Flag indicating client sent extra args. */
 static int saw_extended_args;
 
 /* If defined, ~user notation is allowed and the string is inserted
@@ -103,18 +103,18 @@
 static void NORETURN daemon_die(const char *err, va_list params)
 {
 	logreport(LOG_ERR, err, params);
 	exit(1);
 }
 
-static const char *path_ok(char *directory)
+static const char *path_ok(const char *directory)
 {
 	static char rpath[PATH_MAX];
 	static char interp_path[PATH_MAX];
 	const char *path;
-	char *dir;
+	const char *dir;
 
 	dir = directory;
 
 	if (daemon_avoid_alias(dir)) {
 		logerror("'%s': aliased", dir);
 		return NULL;
@@ -128,13 +128,13 @@
 		if (*user_path) {
 			/* Got either "~alice" or "~alice/foo";
 			 * rewrite them to "~alice/%s" or
 			 * "~alice/%s/foo".
 			 */
 			int namlen, restlen = strlen(dir);
-			char *slash = strchr(dir, '/');
+			const char *slash = strchr(dir, '/');
 			if (!slash)
 				slash = dir + restlen;
 			namlen = slash - dir;
 			restlen -= namlen;
 			loginfo("userpath <%s>, request <%s>, namlen %d, restlen %d, slash <%s>", user_path, dir, namlen, restlen, slash);
 			snprintf(rpath, PATH_MAX, "%.*s/%s%.*s",
@@ -232,14 +232,16 @@
 
 static struct daemon_service *service_looking_at;
 static int service_enabled;
 
 static int git_daemon_config(const char *var, const char *value, void *cb)
 {
-	if (starts_with(var, "daemon.") &&
-	    !strcmp(var + 7, service_looking_at->config_name)) {
+	const char *service;
+
+	if (skip_prefix(var, "daemon.", &service) &&
+	    !strcmp(service, service_looking_at->config_name)) {
 		service_enabled = git_config_bool(var, value);
 		return 0;
 	}
 
 	/* we are not interested in parsing any other configuration here */
 	return 0;
@@ -250,13 +252,13 @@
 	if (!informative_errors)
 		msg = "access denied or repository not exported";
 	packet_write(1, "ERR %s: %s", msg, dir);
 	return -1;
 }
 
-static char *access_hook;
+static const char *access_hook;
 
 static int run_access_hook(struct daemon_service *service, const char *dir, const char *path)
 {
 	struct child_process child;
 	struct strbuf buf = STRBUF_INIT;
 	const char *argv[8];
@@ -315,13 +317,13 @@
 	errno = EACCES;
 	daemon_error(dir, buf.buf);
 	strbuf_release(&buf);
 	return -1;
 }
 
-static int run_service(char *dir, struct daemon_service *service)
+static int run_service(const char *dir, struct daemon_service *service)
 {
 	const char *path;
 	int enabled = service->enabled;
 
 	loginfo("Request %s for '%s'", service->name, dir);
 
@@ -472,20 +474,12 @@
 			return;
 		}
 	}
 	die("No such service %s", name);
 }
 
-static char *xstrdup_tolower(const char *str)
-{
-	char *p, *dup = xstrdup(str);
-	for (p = dup; *p; p++)
-		*p = tolower(*p);
-	return dup;
-}
-
 static void parse_host_and_port(char *hostport, char **host,
 	char **port)
 {
 	if (*hostport == '[') {
 		char *end;
 
@@ -629,21 +623,22 @@
 
 	if (len != pktlen)
 		parse_host_arg(line + len + 1, pktlen - len - 1);
 
 	for (i = 0; i < ARRAY_SIZE(daemon_service); i++) {
 		struct daemon_service *s = &(daemon_service[i]);
-		int namelen = strlen(s->name);
-		if (starts_with(line, "git-") &&
-		    !strncmp(s->name, line + 4, namelen) &&
-		    line[namelen + 4] == ' ') {
+		const char *arg;
+
+		if (skip_prefix(line, "git-", &arg) &&
+		    skip_prefix(arg, s->name, &arg) &&
+		    *arg++ == ' ') {
 			/*
 			 * Note: The directory here is probably context sensitive,
 			 * and might depend on the actual service being performed.
 			 */
-			return run_service(line + namelen + 5, s);
+			return run_service(arg, s);
 		}
 	}
 
 	logerror("Protocol error: '%s'", line);
 	return -1;
 }
@@ -780,13 +775,12 @@
 	cld.out = dup(incoming);
 
 	if (start_command(&cld))
 		logerror("unable to fork");
 	else
 		add_child(&cld, addr, addrlen);
-	close(incoming);
 }
 
 static void child_handler(int signo)
 {
 	/*
 	 * Otherwise empty handler because systemcalls will get interrupted
@@ -1138,22 +1132,23 @@
 	git_setup_gettext();
 
 	git_extract_argv0_path(argv[0]);
 
 	for (i = 1; i < argc; i++) {
 		char *arg = argv[i];
+		const char *v;
 
-		if (starts_with(arg, "--listen=")) {
-			string_list_append(&listen_addr, xstrdup_tolower(arg + 9));
+		if (skip_prefix(arg, "--listen=", &v)) {
+			string_list_append(&listen_addr, xstrdup_tolower(v));
 			continue;
 		}
-		if (starts_with(arg, "--port=")) {
+		if (skip_prefix(arg, "--port=", &v)) {
 			char *end;
 			unsigned long n;
-			n = strtoul(arg+7, &end, 0);
-			if (arg[7] && !*end) {
+			n = strtoul(v, &end, 0);
+			if (*v && !*end) {
 				listen_port = n;
 				continue;
 			}
 		}
 		if (!strcmp(arg, "--serve")) {
 			serve_mode = 1;
@@ -1173,89 +1168,89 @@
 			continue;
 		}
 		if (!strcmp(arg, "--export-all")) {
 			export_all_trees = 1;
 			continue;
 		}
-		if (starts_with(arg, "--access-hook=")) {
-			access_hook = arg + 14;
+		if (skip_prefix(arg, "--access-hook=", &v)) {
+			access_hook = v;
 			continue;
 		}
-		if (starts_with(arg, "--timeout=")) {
-			timeout = atoi(arg+10);
+		if (skip_prefix(arg, "--timeout=", &v)) {
+			timeout = atoi(v);
 			continue;
 		}
-		if (starts_with(arg, "--init-timeout=")) {
-			init_timeout = atoi(arg+15);
+		if (skip_prefix(arg, "--init-timeout=", &v)) {
+			init_timeout = atoi(v);
 			continue;
 		}
-		if (starts_with(arg, "--max-connections=")) {
-			max_connections = atoi(arg+18);
+		if (skip_prefix(arg, "--max-connections=", &v)) {
+			max_connections = atoi(v);
 			if (max_connections < 0)
 				max_connections = 0;	        /* unlimited */
 			continue;
 		}
 		if (!strcmp(arg, "--strict-paths")) {
 			strict_paths = 1;
 			continue;
 		}
-		if (starts_with(arg, "--base-path=")) {
-			base_path = arg+12;
+		if (skip_prefix(arg, "--base-path=", &v)) {
+			base_path = v;
 			continue;
 		}
 		if (!strcmp(arg, "--base-path-relaxed")) {
 			base_path_relaxed = 1;
 			continue;
 		}
-		if (starts_with(arg, "--interpolated-path=")) {
-			interpolated_path = arg+20;
+		if (skip_prefix(arg, "--interpolated-path=", &v)) {
+			interpolated_path = v;
 			continue;
 		}
 		if (!strcmp(arg, "--reuseaddr")) {
 			reuseaddr = 1;
 			continue;
 		}
 		if (!strcmp(arg, "--user-path")) {
 			user_path = "";
 			continue;
 		}
-		if (starts_with(arg, "--user-path=")) {
-			user_path = arg + 12;
+		if (skip_prefix(arg, "--user-path=", &v)) {
+			user_path = v;
 			continue;
 		}
-		if (starts_with(arg, "--pid-file=")) {
-			pid_file = arg + 11;
+		if (skip_prefix(arg, "--pid-file=", &v)) {
+			pid_file = v;
 			continue;
 		}
 		if (!strcmp(arg, "--detach")) {
 			detach = 1;
 			log_syslog = 1;
 			continue;
 		}
-		if (starts_with(arg, "--user=")) {
-			user_name = arg + 7;
+		if (skip_prefix(arg, "--user=", &v)) {
+			user_name = v;
 			continue;
 		}
-		if (starts_with(arg, "--group=")) {
-			group_name = arg + 8;
+		if (skip_prefix(arg, "--group=", &v)) {
+			group_name = v;
 			continue;
 		}
-		if (starts_with(arg, "--enable=")) {
-			enable_service(arg + 9, 1);
+		if (skip_prefix(arg, "--enable=", &v)) {
+			enable_service(v, 1);
 			continue;
 		}
-		if (starts_with(arg, "--disable=")) {
-			enable_service(arg + 10, 0);
+		if (skip_prefix(arg, "--disable=", &v)) {
+			enable_service(v, 0);
 			continue;
 		}
-		if (starts_with(arg, "--allow-override=")) {
-			make_service_overridable(arg + 17, 1);
+		if (skip_prefix(arg, "--allow-override=", &v)) {
+			make_service_overridable(v, 1);
 			continue;
 		}
-		if (starts_with(arg, "--forbid-override=")) {
-			make_service_overridable(arg + 18, 0);
+		if (skip_prefix(arg, "--forbid-override=", &v)) {
+			make_service_overridable(v, 0);
 			continue;
 		}
 		if (!strcmp(arg, "--informative-errors")) {
 			informative_errors = 1;
 			continue;
 		}
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/daemon.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/daemon.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/daemon.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/daemon.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/date.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/date.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/date.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/date.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/decorate.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/decorate.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/decorate.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/decorate.c	2014-08-16 06:26:55.000000000 +0800
@@ -5,16 +5,13 @@
 #include "cache.h"
 #include "object.h"
 #include "decorate.h"
 
 static unsigned int hash_obj(const struct object *obj, unsigned int n)
 {
-	unsigned int hash;
-
-	memcpy(&hash, obj->sha1, sizeof(unsigned int));
-	return hash % n;
+	return sha1hash(obj->sha1) % n;
 }
 
 static void *insert_decoration(struct decoration *n, const struct object *base, void *decoration)
 {
 	int size = n->size;
 	struct object_decoration *hash = n->hash;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/decorate.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/decorate.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/decorate.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/decorate.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/abspath.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/abspath.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/abspath.o.d	2017-10-10 09:54:19.964642379 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/abspath.o.d	2017-10-10 09:57:50.155486671 +0800
@@ -1,8 +1,9 @@
 abspath.o: abspath.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -16,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/advice.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/advice.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/advice.o.d	2017-10-10 09:54:20.024612376 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/advice.o.d	2017-10-10 09:57:50.215456670 +0800
@@ -1,8 +1,9 @@
 advice.o: advice.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -16,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/alias.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/alias.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/alias.o.d	2017-10-10 09:54:20.088580374 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/alias.o.d	2017-10-10 09:57:50.279424667 +0800
@@ -1,8 +1,9 @@
 alias.o: alias.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -16,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/alloc.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/alloc.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/alloc.o.d	2017-10-10 09:54:20.156546372 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/alloc.o.d	2017-10-10 09:57:50.351388665 +0800
@@ -1,10 +1,10 @@
 alloc.o: alloc.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- object.h blob.h tree.h commit.h decorate.h gpg-interface.h string-list.h \
- tag.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h object.h blob.h tree.h commit.h decorate.h \
+ gpg-interface.h string-list.h tag.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 object.h:
 
 blob.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/archive.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/archive.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/archive.o.d	2017-10-10 09:54:20.304472366 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/archive.o.d	2017-10-10 09:57:50.499314659 +0800
@@ -1,10 +1,11 @@
 archive.o: archive.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- commit.h object.h tree.h decorate.h gpg-interface.h string-list.h \
- tree-walk.h attr.h archive.h pathspec.h parse-options.h unpack-trees.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h commit.h object.h tree.h decorate.h gpg-interface.h \
+ string-list.h tree-walk.h attr.h archive.h pathspec.h parse-options.h \
+ unpack-trees.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,12 +19,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 commit.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/archive-tar.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/archive-tar.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/archive-tar.o.d	2017-10-10 09:54:20.436406362 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/archive-tar.o.d	2017-10-10 09:57:50.631248654 +0800
@@ -1,9 +1,10 @@
 archive-tar.o: archive-tar.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
- block-sha1/sha1.h tar.h archive.h pathspec.h streaming.h run-command.h
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h tar.h archive.h pathspec.h streaming.h run-command.h \
+ argv-array.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,17 +18,21 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 tar.h:
 
 archive.h:
 
 pathspec.h:
 
 streaming.h:
 
 run-command.h:
+
+argv-array.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/archive-zip.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/archive-zip.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/archive-zip.o.d	2017-10-10 09:54:20.564342357 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/archive-zip.o.d	2017-10-10 09:57:50.759184650 +0800
@@ -1,8 +1,8 @@
 archive-zip.o: archive-zip.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h archive.h pathspec.h streaming.h utf8.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,12 +17,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 archive.h:
 
 pathspec.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/argv-array.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/argv-array.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/argv-array.o.d	2017-10-10 09:54:20.636306354 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/argv-array.o.d	2017-10-10 09:57:50.827150647 +0800
@@ -1,8 +1,8 @@
 argv-array.o: argv-array.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h argv-array.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 argv-array.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/attr.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/attr.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/attr.o.d	2017-10-10 09:54:20.808220348 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/attr.o.d	2017-10-10 09:57:50.991068641 +0800
@@ -1,9 +1,9 @@
 attr.o: attr.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- exec_cmd.h attr.h dir.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h exec_cmd.h attr.h dir.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,12 +17,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 exec_cmd.h:
 
 attr.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/base85.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/base85.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/base85.o.d	2017-10-10 09:54:20.876186346 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/base85.o.d	2017-10-10 09:57:51.059034638 +0800
@@ -1,8 +1,9 @@
 base85.o: base85.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -16,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/bisect.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/bisect.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/bisect.o.d	2017-10-10 09:54:21.072088338 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/bisect.o.d	2017-10-10 09:57:51.238944632 +0800
@@ -1,13 +1,13 @@
 bisect.o: bisect.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- commit.h object.h tree.h decorate.h gpg-interface.h string-list.h diff.h \
- tree-walk.h pathspec.h revision.h parse-options.h grep.h color.h kwset.h \
- thread-utils.h userdiff.h notes-cache.h notes.h refs.h list-objects.h \
- quote.h sha1-lookup.h run-command.h log-tree.h bisect.h sha1-array.h \
- argv-array.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h commit.h object.h tree.h decorate.h gpg-interface.h \
+ string-list.h diff.h tree-walk.h pathspec.h revision.h parse-options.h \
+ grep.h color.h kwset.h thread-utils.h userdiff.h notes-cache.h notes.h \
+ refs.h list-objects.h quote.h sha1-lookup.h run-command.h argv-array.h \
+ log-tree.h bisect.h sha1-array.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -21,12 +21,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 commit.h:
 
 object.h:
 
@@ -69,13 +71,13 @@
 quote.h:
 
 sha1-lookup.h:
 
 run-command.h:
 
+argv-array.h:
+
 log-tree.h:
 
 bisect.h:
 
 sha1-array.h:
-
-argv-array.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/blob.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/blob.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/blob.o.d	2017-10-10 09:54:21.132058336 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/blob.o.d	2017-10-10 09:57:51.290918630 +0800
@@ -1,9 +1,9 @@
 blob.o: blob.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h blob.h \
- object.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h blob.h object.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,11 +17,13 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 blob.h:
 
 object.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/branch.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/branch.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/branch.o.d	2017-10-10 09:54:21.236006332 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/branch.o.d	2017-10-10 09:57:51.390868626 +0800
@@ -1,10 +1,10 @@
 branch.o: branch.c git-compat-util.h compat/bswap.h wildmatch.h cache.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- branch.h refs.h remote.h parse-options.h commit.h object.h tree.h \
- decorate.h gpg-interface.h string-list.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h branch.h refs.h remote.h parse-options.h commit.h \
+ object.h tree.h decorate.h gpg-interface.h string-list.h
 
 git-compat-util.h:
 
 compat/bswap.h:
 
 wildmatch.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 branch.h:
 
 refs.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/bulk-checkin.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/bulk-checkin.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/bulk-checkin.o.d	2017-10-10 09:54:21.331958328 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/bulk-checkin.o.d	2017-10-10 09:57:51.502812623 +0800
@@ -1,9 +1,9 @@
 bulk-checkin.o: bulk-checkin.c bulk-checkin.h cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h csum-file.h pack.h object.h
+ convert.h trace.h block-sha1/sha1.h csum-file.h pack.h object.h
 
 bulk-checkin.h:
 
 cache.h:
 
 git-compat-util.h:
@@ -19,12 +19,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 csum-file.h:
 
 pack.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/bundle.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/bundle.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/bundle.o.d	2017-10-10 09:54:21.483882323 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/bundle.o.d	2017-10-10 09:57:51.666730616 +0800
@@ -1,12 +1,12 @@
 bundle.o: bundle.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- bundle.h object.h commit.h tree.h decorate.h gpg-interface.h \
- string-list.h diff.h tree-walk.h pathspec.h revision.h parse-options.h \
- grep.h color.h kwset.h thread-utils.h userdiff.h notes-cache.h notes.h \
- list-objects.h run-command.h refs.h argv-array.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h bundle.h object.h commit.h tree.h decorate.h \
+ gpg-interface.h string-list.h diff.h tree-walk.h pathspec.h revision.h \
+ parse-options.h grep.h color.h kwset.h thread-utils.h userdiff.h \
+ notes-cache.h notes.h list-objects.h run-command.h argv-array.h refs.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -20,12 +20,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 bundle.h:
 
 object.h:
 
@@ -64,9 +66,9 @@
 notes.h:
 
 list-objects.h:
 
 run-command.h:
 
-refs.h:
-
 argv-array.h:
+
+refs.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/cache-tree.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/cache-tree.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/cache-tree.o.d	2017-10-10 09:54:21.667790317 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/cache-tree.o.d	2017-10-10 09:57:51.866630609 +0800
@@ -1,8 +1,8 @@
 cache-tree.o: cache-tree.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h tree.h object.h tree-walk.h cache-tree.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,12 +17,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 tree.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/color.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/color.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/color.o.d	2017-10-10 09:54:21.767740313 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/color.o.d	2017-10-10 09:57:51.982572605 +0800
@@ -1,9 +1,9 @@
 color.o: color.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- color.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h color.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 color.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/column.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/column.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/column.o.d	2017-10-10 09:54:21.899674308 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/column.o.d	2017-10-10 09:57:52.106510600 +0800
@@ -1,9 +1,10 @@
 column.o: column.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- column.h string-list.h parse-options.h run-command.h utf8.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h column.h string-list.h parse-options.h run-command.h \
+ argv-array.h utf8.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,17 +18,21 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 column.h:
 
 string-list.h:
 
 parse-options.h:
 
 run-command.h:
 
+argv-array.h:
+
 utf8.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/combine-diff.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/combine-diff.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/combine-diff.o.d	2017-10-10 09:54:22.335456292 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/combine-diff.o.d	2017-10-10 09:57:52.530298585 +0800
@@ -1,8 +1,8 @@
 combine-diff.o: combine-diff.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h commit.h object.h tree.h decorate.h gpg-interface.h \
  string-list.h blob.h diff.h tree-walk.h pathspec.h diffcore.h quote.h \
  xdiff-interface.h xdiff/xdiff.h xdiff/xmacros.h log-tree.h revision.h \
  parse-options.h grep.h color.h kwset.h thread-utils.h userdiff.h \
  notes-cache.h notes.h refs.h sha1-array.h
 
@@ -21,12 +21,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 commit.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/commit.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/commit.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/commit.o.d	2017-10-10 09:54:22.763242276 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/commit.o.d	2017-10-10 09:57:52.966080569 +0800
@@ -1,13 +1,13 @@
 commit.o: commit.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h tag.h \
- object.h commit.h tree.h decorate.h gpg-interface.h string-list.h \
- pkt-line.h utf8.h diff.h tree-walk.h pathspec.h revision.h \
- parse-options.h grep.h color.h kwset.h thread-utils.h userdiff.h \
- notes-cache.h notes.h mergesort.h commit-slab.h prio-queue.h \
- sha1-lookup.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h tag.h object.h commit.h tree.h decorate.h \
+ gpg-interface.h string-list.h pkt-line.h utf8.h diff.h tree-walk.h \
+ pathspec.h revision.h parse-options.h grep.h color.h kwset.h \
+ thread-utils.h userdiff.h notes-cache.h notes.h mergesort.h \
+ commit-slab.h prio-queue.h sha1-lookup.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -21,12 +21,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 tag.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/config.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/config.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/config.o.d	2017-10-10 09:54:23.278984257 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/config.o.d	2017-10-10 09:57:53.497814549 +0800
@@ -1,9 +1,9 @@
 config.o: config.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- exec_cmd.h quote.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h exec_cmd.h quote.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,11 +17,13 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 exec_cmd.h:
 
 quote.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/connected.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/connected.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/connected.o.d	2017-10-10 09:54:23.522862248 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/connected.o.d	2017-10-10 09:57:53.737694540 +0800
@@ -1,10 +1,10 @@
 connected.o: connected.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
- block-sha1/sha1.h run-command.h sigchain.h connected.h transport.h \
- remote.h parse-options.h
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h run-command.h argv-array.h sigchain.h connected.h \
+ transport.h remote.h parse-options.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,16 +18,20 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 run-command.h:
 
+argv-array.h:
+
 sigchain.h:
 
 connected.h:
 
 transport.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/connect.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/connect.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/connect.o.d	2017-10-10 09:54:23.446900251 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/connect.o.d	2017-10-10 09:57:53.665730543 +0800
@@ -1,10 +1,10 @@
 connect.o: connect.c git-compat-util.h compat/bswap.h wildmatch.h cache.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- pkt-line.h quote.h refs.h run-command.h remote.h parse-options.h \
- connect.h url.h string-list.h sha1-array.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h pkt-line.h quote.h refs.h run-command.h argv-array.h \
+ remote.h parse-options.h connect.h url.h string-list.h sha1-array.h
 
 git-compat-util.h:
 
 compat/bswap.h:
 
 wildmatch.h:
@@ -18,22 +18,26 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 pkt-line.h:
 
 quote.h:
 
 refs.h:
 
 run-command.h:
 
+argv-array.h:
+
 remote.h:
 
 parse-options.h:
 
 connect.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/convert.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/convert.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/convert.o.d	2017-10-10 09:54:23.750748240 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/convert.o.d	2017-10-10 09:57:53.969578532 +0800
@@ -1,9 +1,9 @@
 convert.o: convert.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h attr.h \
- run-command.h quote.h sigchain.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h attr.h run-command.h argv-array.h quote.h sigchain.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,15 +17,19 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 attr.h:
 
 run-command.h:
 
+argv-array.h:
+
 quote.h:
 
 sigchain.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/copy.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/copy.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/copy.o.d	2017-10-10 09:54:23.814716238 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/copy.o.d	2017-10-10 09:57:54.053536529 +0800
@@ -1,8 +1,9 @@
 copy.o: copy.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -16,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/credential-cache--daemon.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/credential-cache--daemon.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/credential-cache--daemon.o.d	2017-10-10 09:54:48.874179319 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/credential-cache--daemon.o.d	2017-10-10 09:58:19.512799596 +0800
@@ -1,9 +1,9 @@
 credential-cache--daemon.o: credential-cache--daemon.c cache.h \
  git-compat-util.h compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h \
- gettext.h convert.h block-sha1/sha1.h credential.h string-list.h \
+ gettext.h convert.h trace.h block-sha1/sha1.h credential.h string-list.h \
  unix-socket.h sigchain.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 credential.h:
 
 string-list.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/credential-cache.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/credential-cache.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/credential-cache.o.d	2017-10-10 09:54:48.690271326 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/credential-cache.o.d	2017-10-10 09:58:19.348881601 +0800
@@ -1,10 +1,10 @@
 credential-cache.o: credential-cache.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h credential.h string-list.h parse-options.h \
- unix-socket.h run-command.h
+ convert.h trace.h block-sha1/sha1.h credential.h string-list.h \
+ parse-options.h unix-socket.h run-command.h argv-array.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,17 +18,21 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 credential.h:
 
 string-list.h:
 
 parse-options.h:
 
 unix-socket.h:
 
 run-command.h:
+
+argv-array.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/credential.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/credential.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/credential.o.d	2017-10-10 09:54:23.946650233 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/credential.o.d	2017-10-10 09:57:54.221452523 +0800
@@ -1,10 +1,10 @@
 credential.o: credential.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
- block-sha1/sha1.h credential.h string-list.h run-command.h url.h \
- prompt.h
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h credential.h string-list.h run-command.h argv-array.h \
+ url.h prompt.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,17 +18,21 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 credential.h:
 
 string-list.h:
 
 run-command.h:
 
+argv-array.h:
+
 url.h:
 
 prompt.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/credential-store.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/credential-store.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/credential-store.o.d	2017-10-10 09:54:19.884682382 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/credential-store.o.d	2017-10-10 09:57:50.075526675 +0800
@@ -1,9 +1,10 @@
 credential-store.o: credential-store.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h credential.h string-list.h parse-options.h
+ convert.h trace.h block-sha1/sha1.h credential.h string-list.h \
+ parse-options.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 credential.h:
 
 string-list.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/csum-file.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/csum-file.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/csum-file.o.d	2017-10-10 09:54:24.026610230 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/csum-file.o.d	2017-10-10 09:57:54.309408519 +0800
@@ -1,8 +1,8 @@
 csum-file.o: csum-file.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h progress.h csum-file.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,11 +17,13 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 progress.h:
 
 csum-file.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/daemon.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/daemon.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/daemon.o.d	2017-10-10 09:54:45.731751434 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/daemon.o.d	2017-10-10 09:58:16.178467718 +0800
@@ -1,9 +1,10 @@
 daemon.o: daemon.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- pkt-line.h exec_cmd.h run-command.h string-list.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h pkt-line.h exec_cmd.h run-command.h argv-array.h \
+ string-list.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,15 +18,19 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 pkt-line.h:
 
 exec_cmd.h:
 
 run-command.h:
 
+argv-array.h:
+
 string-list.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/date.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/date.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/date.o.d	2017-10-10 09:54:24.294476220 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/date.o.d	2017-10-10 09:57:54.581272510 +0800
@@ -1,8 +1,9 @@
 date.o: date.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -16,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/decorate.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/decorate.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/decorate.o.d	2017-10-10 09:54:24.366440217 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/decorate.o.d	2017-10-10 09:57:54.669228506 +0800
@@ -1,8 +1,8 @@
 decorate.o: decorate.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h object.h decorate.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,11 +17,13 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 object.h:
 
 decorate.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/diffcore-break.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/diffcore-break.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/diffcore-break.o.d	2017-10-10 09:54:24.462392214 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/diffcore-break.o.d	2017-10-10 09:57:54.769178503 +0800
@@ -1,9 +1,10 @@
 diffcore-break.o: diffcore-break.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h diff.h tree-walk.h pathspec.h diffcore.h
+ convert.h trace.h block-sha1/sha1.h diff.h tree-walk.h pathspec.h \
+ diffcore.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 diff.h:
 
 tree-walk.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/diffcore-delta.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/diffcore-delta.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/diffcore-delta.o.d	2017-10-10 09:54:24.554346210 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/diffcore-delta.o.d	2017-10-10 09:57:54.877124499 +0800
@@ -1,9 +1,10 @@
 diffcore-delta.o: diffcore-delta.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h diff.h tree-walk.h pathspec.h diffcore.h
+ convert.h trace.h block-sha1/sha1.h diff.h tree-walk.h pathspec.h \
+ diffcore.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 diff.h:
 
 tree-walk.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/diffcore-order.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/diffcore-order.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/diffcore-order.o.d	2017-10-10 09:54:24.630308208 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/diffcore-order.o.d	2017-10-10 09:57:54.969078495 +0800
@@ -1,9 +1,10 @@
 diffcore-order.o: diffcore-order.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h diff.h tree-walk.h pathspec.h diffcore.h
+ convert.h trace.h block-sha1/sha1.h diff.h tree-walk.h pathspec.h \
+ diffcore.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 diff.h:
 
 tree-walk.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/diffcore-pickaxe.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/diffcore-pickaxe.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/diffcore-pickaxe.o.d	2017-10-10 09:54:24.718264205 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/diffcore-pickaxe.o.d	2017-10-10 09:57:55.057034492 +0800
@@ -1,10 +1,10 @@
 diffcore-pickaxe.o: diffcore-pickaxe.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h diff.h tree-walk.h pathspec.h diffcore.h \
- xdiff-interface.h xdiff/xdiff.h kwset.h
+ convert.h trace.h block-sha1/sha1.h diff.h tree-walk.h pathspec.h \
+ diffcore.h xdiff-interface.h xdiff/xdiff.h kwset.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 diff.h:
 
 tree-walk.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/diffcore-rename.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/diffcore-rename.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/diffcore-rename.o.d	2017-10-10 09:54:24.886180199 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/diffcore-rename.o.d	2017-10-10 09:57:55.248938485 +0800
@@ -1,10 +1,10 @@
 diffcore-rename.o: diffcore-rename.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h diff.h tree-walk.h pathspec.h diffcore.h \
- progress.h
+ convert.h trace.h block-sha1/sha1.h diff.h tree-walk.h pathspec.h \
+ diffcore.h progress.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 diff.h:
 
 tree-walk.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/diff-lib.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/diff-lib.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/diff-lib.o.d	2017-10-10 09:54:25.182032188 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/diff-lib.o.d	2017-10-10 09:57:55.560782474 +0800
@@ -1,8 +1,8 @@
 diff-lib.o: diff-lib.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h quote.h commit.h object.h tree.h decorate.h \
  gpg-interface.h string-list.h diff.h tree-walk.h pathspec.h diffcore.h \
  revision.h parse-options.h grep.h color.h kwset.h thread-utils.h \
  userdiff.h notes-cache.h notes.h cache-tree.h unpack-trees.h refs.h \
  submodule.h dir.h
 
@@ -21,12 +21,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 quote.h:
 
 commit.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/diff-no-index.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/diff-no-index.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/diff-no-index.o.d	2017-10-10 09:54:25.301972183 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/diff-no-index.o.d	2017-10-10 09:57:55.688718469 +0800
@@ -1,8 +1,8 @@
 diff-no-index.o: diff-no-index.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h color.h commit.h object.h tree.h decorate.h \
  gpg-interface.h string-list.h blob.h tag.h diff.h tree-walk.h pathspec.h \
  diffcore.h revision.h parse-options.h grep.h kwset.h thread-utils.h \
  userdiff.h notes-cache.h notes.h log-tree.h builtin.h dir.h
 
 cache.h:
@@ -20,12 +20,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 color.h:
 
 commit.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/diff.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/diff.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/diff.o.d	2017-10-10 09:54:26.525360138 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/diff.o.d	2017-10-10 09:57:56.892116424 +0800
@@ -1,12 +1,12 @@
 diff.o: diff.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- quote.h diff.h tree-walk.h pathspec.h diffcore.h delta.h \
- xdiff-interface.h xdiff/xdiff.h color.h attr.h run-command.h utf8.h \
- userdiff.h notes-cache.h notes.h string-list.h sigchain.h submodule.h \
- ll-merge.h argv-array.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h quote.h diff.h tree-walk.h pathspec.h diffcore.h \
+ delta.h xdiff-interface.h xdiff/xdiff.h color.h attr.h run-command.h \
+ argv-array.h utf8.h userdiff.h notes-cache.h notes.h string-list.h \
+ sigchain.h submodule.h ll-merge.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -20,12 +20,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 quote.h:
 
 diff.h:
 
@@ -44,12 +46,14 @@
 color.h:
 
 attr.h:
 
 run-command.h:
 
+argv-array.h:
+
 utf8.h:
 
 userdiff.h:
 
 notes-cache.h:
 
@@ -59,8 +63,6 @@
 
 sigchain.h:
 
 submodule.h:
 
 ll-merge.h:
-
-argv-array.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/dir.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/dir.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/dir.o.d	2017-10-10 09:54:26.965140122 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/dir.o.d	2017-10-10 09:57:57.331896407 +0800
@@ -1,9 +1,9 @@
 dir.o: dir.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h dir.h \
- refs.h pathspec.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h dir.h refs.h pathspec.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,12 +17,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 dir.h:
 
 refs.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/editor.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/editor.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/editor.o.d	2017-10-10 09:54:27.041102119 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/editor.o.d	2017-10-10 09:57:57.419852405 +0800
@@ -1,9 +1,9 @@
 editor.o: editor.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- run-command.h sigchain.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h run-command.h argv-array.h sigchain.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,11 +17,15 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 run-command.h:
 
+argv-array.h:
+
 sigchain.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/entry.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/entry.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/entry.o.d	2017-10-10 09:54:27.133056116 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/entry.o.d	2017-10-10 09:57:57.535794401 +0800
@@ -1,9 +1,9 @@
 entry.o: entry.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h blob.h \
- object.h dir.h streaming.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h blob.h object.h dir.h streaming.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,12 +17,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 blob.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/environment.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/environment.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/environment.o.d	2017-10-10 09:54:27.229008112 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/environment.o.d	2017-10-10 09:57:57.651736397 +0800
@@ -1,8 +1,8 @@
 environment.o: environment.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h refs.h fmt-merge-msg.h commit.h object.h tree.h \
  decorate.h gpg-interface.h string-list.h
 
 cache.h:
 
 git-compat-util.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 refs.h:
 
 fmt-merge-msg.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/exec_cmd.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/exec_cmd.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/exec_cmd.o.d	2017-10-10 09:54:27.804720091 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/exec_cmd.o.d	2017-10-10 09:57:58.195464377 +0800
@@ -1,8 +1,8 @@
 exec_cmd.o: exec_cmd.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h exec_cmd.h quote.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,11 +17,13 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 exec_cmd.h:
 
 quote.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/fast-import.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/fast-import.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/fast-import.o.d	2017-10-10 09:54:46.487373407 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/fast-import.o.d	2017-10-10 09:58:17.018047687 +0800
@@ -1,11 +1,11 @@
 fast-import.o: fast-import.c builtin.h git-compat-util.h compat/bswap.h \
  wildmatch.h strbuf.h cache.h hashmap.h advice.h gettext.h convert.h \
- block-sha1/sha1.h commit.h object.h tree.h decorate.h gpg-interface.h \
- string-list.h blob.h delta.h pack.h csum-file.h refs.h quote.h \
- exec_cmd.h dir.h
+ trace.h block-sha1/sha1.h commit.h object.h tree.h decorate.h \
+ gpg-interface.h string-list.h blob.h delta.h pack.h csum-file.h refs.h \
+ quote.h exec_cmd.h dir.h
 
 builtin.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -21,12 +21,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 commit.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/fetch-pack.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/fetch-pack.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/fetch-pack.o.d	2017-10-10 09:54:28.080582082 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/fetch-pack.o.d	2017-10-10 09:57:58.523300365 +0800
@@ -1,12 +1,13 @@
 fetch-pack.o: fetch-pack.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h refs.h pkt-line.h commit.h object.h tree.h decorate.h \
  gpg-interface.h string-list.h tag.h exec_cmd.h pack.h csum-file.h \
- sideband.h fetch-pack.h run-command.h remote.h parse-options.h connect.h \
- transport.h version.h prio-queue.h sha1-array.h
+ sideband.h fetch-pack.h run-command.h argv-array.h remote.h \
+ parse-options.h connect.h transport.h version.h prio-queue.h \
+ sha1-array.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -20,12 +21,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 refs.h:
 
 pkt-line.h:
 
@@ -52,12 +55,14 @@
 sideband.h:
 
 fetch-pack.h:
 
 run-command.h:
 
+argv-array.h:
+
 remote.h:
 
 parse-options.h:
 
 connect.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/fsck.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/fsck.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/fsck.o.d	2017-10-10 09:54:28.212516076 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/fsck.o.d	2017-10-10 09:57:58.651236360 +0800
@@ -1,10 +1,10 @@
 fsck.o: fsck.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- object.h blob.h tree.h tree-walk.h commit.h decorate.h gpg-interface.h \
- string-list.h tag.h fsck.h utf8.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h object.h blob.h tree.h tree-walk.h commit.h decorate.h \
+ gpg-interface.h string-list.h tag.h fsck.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 object.h:
 
 blob.h:
 
@@ -39,8 +41,6 @@
 
 string-list.h:
 
 tag.h:
 
 fsck.h:
-
-utf8.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/git.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/git.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/git.o.d	2017-10-10 09:54:49.521855295 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/git.o.d	2017-10-10 09:58:20.092509574 +0800
@@ -1,10 +1,10 @@
 git.o: git.c builtin.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h cache.h hashmap.h advice.h gettext.h convert.h \
+ strbuf.h cache.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h commit.h object.h tree.h decorate.h gpg-interface.h \
- string-list.h exec_cmd.h help.h quote.h run-command.h
+ string-list.h exec_cmd.h help.h quote.h run-command.h argv-array.h
 
 builtin.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -20,12 +20,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 commit.h:
 
 object.h:
 
@@ -41,6 +43,8 @@
 
 help.h:
 
 quote.h:
 
 run-command.h:
+
+argv-array.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/gpg-interface.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/gpg-interface.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/gpg-interface.o.d	2017-10-10 09:54:28.364440071 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/gpg-interface.o.d	2017-10-10 09:57:58.779172355 +0800
@@ -1,9 +1,9 @@
 gpg-interface.o: gpg-interface.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
- block-sha1/sha1.h run-command.h gpg-interface.h sigchain.h
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h run-command.h argv-array.h gpg-interface.h sigchain.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,13 +17,17 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 run-command.h:
 
+argv-array.h:
+
 gpg-interface.h:
 
 sigchain.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/graph.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/graph.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/graph.o.d	2017-10-10 09:54:28.616314062 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/graph.o.d	2017-10-10 09:57:58.983070348 +0800
@@ -1,11 +1,12 @@
 graph.o: graph.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- commit.h object.h tree.h decorate.h gpg-interface.h string-list.h \
- color.h graph.h diff.h tree-walk.h pathspec.h revision.h parse-options.h \
- grep.h kwset.h thread-utils.h userdiff.h notes-cache.h notes.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h commit.h object.h tree.h decorate.h gpg-interface.h \
+ string-list.h color.h graph.h diff.h tree-walk.h pathspec.h revision.h \
+ parse-options.h grep.h kwset.h thread-utils.h userdiff.h notes-cache.h \
+ notes.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -19,12 +20,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 commit.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/grep.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/grep.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/grep.o.d	2017-10-10 09:54:28.964140049 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/grep.o.d	2017-10-10 09:57:59.322900335 +0800
@@ -1,11 +1,11 @@
 grep.o: grep.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h grep.h \
- color.h kwset.h thread-utils.h userdiff.h notes-cache.h notes.h \
- string-list.h xdiff-interface.h xdiff/xdiff.h diff.h tree-walk.h \
- pathspec.h diffcore.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h grep.h color.h kwset.h thread-utils.h userdiff.h \
+ notes-cache.h notes.h string-list.h xdiff-interface.h xdiff/xdiff.h \
+ diff.h tree-walk.h pathspec.h diffcore.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -19,12 +19,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 grep.h:
 
 color.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/hashmap.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/hashmap.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/hashmap.o.d	2017-10-10 09:54:29.076084045 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/hashmap.o.d	2017-10-10 09:57:59.442840331 +0800
@@ -1,8 +1,9 @@
 hashmap.o: hashmap.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -16,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/help.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/help.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/help.o.d	2017-10-10 09:54:29.287978037 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/help.o.d	2017-10-10 09:57:59.618752325 +0800
@@ -1,11 +1,11 @@
 help.o: help.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- builtin.h commit.h object.h tree.h decorate.h gpg-interface.h \
- string-list.h exec_cmd.h levenshtein.h help.h common-cmds.h column.h \
- version.h refs.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h builtin.h commit.h object.h tree.h decorate.h \
+ gpg-interface.h string-list.h exec_cmd.h levenshtein.h help.h \
+ common-cmds.h column.h version.h refs.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -19,12 +19,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 builtin.h:
 
 commit.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/hex.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/hex.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/hex.o.d	2017-10-10 09:54:29.363940034 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/hex.o.d	2017-10-10 09:57:59.674724323 +0800
@@ -1,8 +1,9 @@
 hex.o: hex.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -16,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/http-backend.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/http-backend.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/http-backend.o.d	2017-10-10 09:54:46.735249398 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/http-backend.o.d	2017-10-10 09:58:17.289911677 +0800
@@ -1,10 +1,10 @@
 http-backend.o: http-backend.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h refs.h pkt-line.h object.h tag.h exec_cmd.h \
- run-command.h string-list.h url.h argv-array.h
+ run-command.h argv-array.h string-list.h url.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 refs.h:
 
 pkt-line.h:
 
@@ -32,11 +34,11 @@
 tag.h:
 
 exec_cmd.h:
 
 run-command.h:
 
+argv-array.h:
+
 string-list.h:
 
 url.h:
-
-argv-array.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/ident.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/ident.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/ident.o.d	2017-10-10 09:54:29.511866029 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/ident.o.d	2017-10-10 09:57:59.798662318 +0800
@@ -1,8 +1,9 @@
 ident.o: ident.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -16,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/imap-send.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/imap-send.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/imap-send.o.d	2017-10-10 09:54:47.043095386 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/imap-send.o.d	2017-10-10 09:58:17.641735664 +0800
@@ -1,9 +1,10 @@
 imap-send.o: imap-send.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
- block-sha1/sha1.h exec_cmd.h run-command.h prompt.h
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h credential.h string-list.h exec_cmd.h run-command.h \
+ argv-array.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,13 +18,19 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
+credential.h:
+
+string-list.h:
+
 exec_cmd.h:
 
 run-command.h:
 
-prompt.h:
+argv-array.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/kwset.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/kwset.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/kwset.o.d	2017-10-10 09:54:29.691776022 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/kwset.o.d	2017-10-10 09:57:59.978572311 +0800
@@ -1,9 +1,9 @@
 kwset.o: kwset.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- kwset.h compat/obstack.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h kwset.h compat/obstack.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,11 +17,13 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 kwset.h:
 
 compat/obstack.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/levenshtein.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/levenshtein.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/levenshtein.o.d	2017-10-10 09:54:29.755744020 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/levenshtein.o.d	2017-10-10 09:58:00.038542309 +0800
@@ -1,8 +1,8 @@
 levenshtein.o: levenshtein.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h levenshtein.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 levenshtein.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/line-log.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/line-log.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/line-log.o.d	2017-10-10 09:54:30.095574007 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/line-log.o.d	2017-10-10 09:58:00.342390299 +0800
@@ -1,13 +1,13 @@
 line-log.o: line-log.c git-compat-util.h compat/bswap.h wildmatch.h \
  line-range.h cache.h strbuf.h hashmap.h advice.h gettext.h convert.h \
- block-sha1/sha1.h tag.h object.h blob.h tree.h diff.h tree-walk.h \
- pathspec.h commit.h decorate.h gpg-interface.h string-list.h revision.h \
- parse-options.h grep.h color.h kwset.h thread-utils.h userdiff.h \
- notes-cache.h notes.h xdiff-interface.h xdiff/xdiff.h log-tree.h graph.h \
- line-log.h diffcore.h
+ trace.h block-sha1/sha1.h tag.h object.h blob.h tree.h diff.h \
+ tree-walk.h pathspec.h commit.h decorate.h gpg-interface.h string-list.h \
+ revision.h parse-options.h grep.h color.h kwset.h thread-utils.h \
+ userdiff.h notes-cache.h notes.h xdiff-interface.h xdiff/xdiff.h \
+ log-tree.h graph.h line-log.h diffcore.h
 
 git-compat-util.h:
 
 compat/bswap.h:
 
 wildmatch.h:
@@ -23,12 +23,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 tag.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/list-objects.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/list-objects.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/list-objects.o.d	2017-10-10 09:54:30.283480001 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/list-objects.o.d	2017-10-10 09:58:00.534294291 +0800
@@ -1,8 +1,8 @@
 list-objects.o: list-objects.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h tag.h object.h commit.h tree.h decorate.h \
  gpg-interface.h string-list.h blob.h diff.h tree-walk.h pathspec.h \
  revision.h parse-options.h grep.h color.h kwset.h thread-utils.h \
  userdiff.h notes-cache.h notes.h list-objects.h
 
 cache.h:
@@ -20,12 +20,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 tag.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/ll-merge.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/ll-merge.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/ll-merge.o.d	2017-10-10 09:54:30.391425997 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/ll-merge.o.d	2017-10-10 09:58:00.642240287 +0800
@@ -1,10 +1,10 @@
 ll-merge.o: ll-merge.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h attr.h xdiff-interface.h xdiff/xdiff.h run-command.h \
- ll-merge.h
+ argv-array.h ll-merge.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,17 +18,21 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 attr.h:
 
 xdiff-interface.h:
 
 xdiff/xdiff.h:
 
 run-command.h:
 
+argv-array.h:
+
 ll-merge.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/lockfile.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/lockfile.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/lockfile.o.d	2017-10-10 09:54:30.491375993 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/lockfile.o.d	2017-10-10 09:58:00.730196284 +0800
@@ -1,8 +1,8 @@
 lockfile.o: lockfile.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h sigchain.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 sigchain.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/log-tree.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/log-tree.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/log-tree.o.d	2017-10-10 09:54:30.719261985 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/log-tree.o.d	2017-10-10 09:58:00.914104277 +0800
@@ -1,8 +1,8 @@
 log-tree.o: log-tree.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h diff.h tree-walk.h pathspec.h commit.h object.h tree.h \
  decorate.h gpg-interface.h string-list.h tag.h graph.h log-tree.h \
  revision.h parse-options.h grep.h color.h kwset.h thread-utils.h \
  userdiff.h notes-cache.h notes.h reflog-walk.h refs.h sequencer.h \
  line-log.h diffcore.h
 
@@ -21,12 +21,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 diff.h:
 
 tree-walk.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/mailmap.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/mailmap.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/mailmap.o.d	2017-10-10 09:54:30.819211981 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/mailmap.o.d	2017-10-10 09:58:01.014054274 +0800
@@ -1,9 +1,9 @@
 mailmap.o: mailmap.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- string-list.h mailmap.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h string-list.h mailmap.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,11 +17,13 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 string-list.h:
 
 mailmap.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/match-trees.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/match-trees.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/match-trees.o.d	2017-10-10 09:54:30.911165978 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/match-trees.o.d	2017-10-10 09:58:01.106008270 +0800
@@ -1,8 +1,8 @@
 match-trees.o: match-trees.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h tree.h object.h tree-walk.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,12 +17,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 tree.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/merge-blobs.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/merge-blobs.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/merge-blobs.o.d	2017-10-10 09:54:31.051095973 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/merge-blobs.o.d	2017-10-10 09:58:01.237942265 +0800
@@ -1,10 +1,10 @@
 merge-blobs.o: merge-blobs.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
- block-sha1/sha1.h run-command.h xdiff-interface.h xdiff/xdiff.h \
- ll-merge.h blob.h object.h merge-blobs.h
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h run-command.h argv-array.h xdiff-interface.h \
+ xdiff/xdiff.h ll-merge.h blob.h object.h merge-blobs.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,16 +18,20 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 run-command.h:
 
+argv-array.h:
+
 xdiff-interface.h:
 
 xdiff/xdiff.h:
 
 ll-merge.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/merge.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/merge.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/merge.o.d	2017-10-10 09:54:30.991125975 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/merge.o.d	2017-10-10 09:58:01.173974267 +0800
@@ -1,10 +1,11 @@
 merge.o: merge.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- commit.h object.h tree.h decorate.h gpg-interface.h string-list.h \
- run-command.h resolve-undo.h tree-walk.h unpack-trees.h dir.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h commit.h object.h tree.h decorate.h gpg-interface.h \
+ string-list.h run-command.h argv-array.h resolve-undo.h tree-walk.h \
+ unpack-trees.h dir.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,12 +19,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 commit.h:
 
 object.h:
 
@@ -34,12 +37,14 @@
 gpg-interface.h:
 
 string-list.h:
 
 run-command.h:
 
+argv-array.h:
+
 resolve-undo.h:
 
 tree-walk.h:
 
 unpack-trees.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/merge-recursive.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/merge-recursive.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/merge-recursive.o.d	2017-10-10 09:54:31.502869956 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/merge-recursive.o.d	2017-10-10 09:58:01.701710248 +0800
@@ -1,12 +1,13 @@
 merge-recursive.o: merge-recursive.c advice.h git-compat-util.h \
  compat/bswap.h wildmatch.h cache.h strbuf.h hashmap.h gettext.h \
- convert.h block-sha1/sha1.h cache-tree.h tree.h object.h tree-walk.h \
- commit.h decorate.h gpg-interface.h string-list.h blob.h builtin.h \
- diff.h pathspec.h diffcore.h tag.h unpack-trees.h xdiff-interface.h \
- xdiff/xdiff.h ll-merge.h attr.h merge-recursive.h dir.h submodule.h
+ convert.h trace.h block-sha1/sha1.h cache-tree.h tree.h object.h \
+ tree-walk.h commit.h decorate.h gpg-interface.h string-list.h blob.h \
+ builtin.h diff.h pathspec.h diffcore.h tag.h unpack-trees.h \
+ xdiff-interface.h xdiff/xdiff.h ll-merge.h attr.h merge-recursive.h \
+ dir.h submodule.h
 
 advice.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -20,12 +21,14 @@
 hashmap.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 cache-tree.h:
 
 tree.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/mergesort.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/mergesort.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/mergesort.o.d	2017-10-10 09:54:31.582829952 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/mergesort.o.d	2017-10-10 09:58:01.781670245 +0800
@@ -1,8 +1,8 @@
 mergesort.o: mergesort.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h mergesort.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 mergesort.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/name-hash.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/name-hash.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/name-hash.o.d	2017-10-10 09:54:31.666787950 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/name-hash.o.d	2017-10-10 09:58:01.865628243 +0800
@@ -1,8 +1,8 @@
 name-hash.o: name-hash.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/notes-cache.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/notes-cache.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/notes-cache.o.d	2017-10-10 09:54:32.022609937 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/notes-cache.o.d	2017-10-10 09:58:02.241440229 +0800
@@ -1,8 +1,8 @@
 notes-cache.o: notes-cache.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h notes-cache.h notes.h string-list.h commit.h object.h \
  tree.h decorate.h gpg-interface.h refs.h
 
 cache.h:
 
 git-compat-util.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 notes-cache.h:
 
 notes.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/notes-merge.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/notes-merge.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/notes-merge.o.d	2017-10-10 09:54:32.258491928 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/notes-merge.o.d	2017-10-10 09:58:02.477322219 +0800
@@ -1,8 +1,8 @@
 notes-merge.o: notes-merge.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h commit.h object.h tree.h decorate.h gpg-interface.h \
  string-list.h refs.h diff.h tree-walk.h pathspec.h diffcore.h \
  xdiff-interface.h xdiff/xdiff.h ll-merge.h dir.h notes.h notes-merge.h \
  notes-utils.h
 
 cache.h:
@@ -20,12 +20,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 commit.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/notes.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/notes.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/notes.o.d	2017-10-10 09:54:31.950645940 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/notes.o.d	2017-10-10 09:58:02.153484232 +0800
@@ -1,9 +1,10 @@
 notes.o: notes.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- notes.h string-list.h blob.h object.h tree.h utf8.h tree-walk.h refs.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h notes.h string-list.h blob.h object.h tree.h utf8.h \
+ tree-walk.h refs.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 notes.h:
 
 string-list.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/notes-utils.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/notes-utils.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/notes-utils.o.d	2017-10-10 09:54:32.346447924 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/notes-utils.o.d	2017-10-10 09:58:02.569276217 +0800
@@ -1,8 +1,8 @@
 notes-utils.o: notes-utils.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h commit.h object.h tree.h decorate.h gpg-interface.h \
  string-list.h refs.h notes-utils.h notes.h
 
 cache.h:
 
 git-compat-util.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 commit.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/object.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/object.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/object.o.d	2017-10-10 09:54:32.470385920 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/object.o.d	2017-10-10 09:58:02.693214211 +0800
@@ -1,10 +1,10 @@
 object.o: object.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- object.h blob.h tree.h commit.h decorate.h gpg-interface.h string-list.h \
- tag.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h object.h blob.h tree.h commit.h decorate.h \
+ gpg-interface.h string-list.h tag.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 object.h:
 
 blob.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pack-bitmap.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pack-bitmap.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pack-bitmap.o.d	2017-10-10 09:54:32.862189906 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pack-bitmap.o.d	2017-10-10 09:58:03.081020198 +0800
@@ -1,8 +1,8 @@
 pack-bitmap.o: pack-bitmap.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h commit.h object.h tree.h decorate.h gpg-interface.h \
  string-list.h tag.h diff.h tree-walk.h pathspec.h revision.h \
  parse-options.h grep.h color.h kwset.h thread-utils.h userdiff.h \
  notes-cache.h notes.h progress.h list-objects.h pack.h csum-file.h \
  pack-bitmap.h ewah/ewok.h khash.h pack-objects.h pack-revindex.h
 
@@ -21,12 +21,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 commit.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pack-bitmap-write.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pack-bitmap-write.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pack-bitmap-write.o.d	2017-10-10 09:54:33.086077898 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pack-bitmap-write.o.d	2017-10-10 09:58:03.300910190 +0800
@@ -1,9 +1,9 @@
 pack-bitmap-write.o: pack-bitmap-write.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h commit.h object.h tree.h decorate.h \
+ convert.h trace.h block-sha1/sha1.h commit.h object.h tree.h decorate.h \
  gpg-interface.h string-list.h tag.h diff.h tree-walk.h pathspec.h \
  revision.h parse-options.h grep.h color.h kwset.h thread-utils.h \
  userdiff.h notes-cache.h notes.h list-objects.h progress.h \
  pack-revindex.h pack.h csum-file.h pack-bitmap.h ewah/ewok.h khash.h \
  pack-objects.h sha1-lookup.h
 
@@ -22,12 +22,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 commit.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pack-check.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pack-check.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pack-check.o.d	2017-10-10 09:54:33.174033894 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pack-check.o.d	2017-10-10 09:58:03.392864187 +0800
@@ -1,8 +1,8 @@
 pack-check.o: pack-check.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h pack.h object.h csum-file.h pack-revindex.h progress.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,12 +17,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 pack.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pack-objects.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pack-objects.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pack-objects.o.d	2017-10-10 09:54:33.241999892 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pack-objects.o.d	2017-10-10 09:58:03.460830184 +0800
@@ -1,8 +1,8 @@
 pack-objects.o: pack-objects.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h object.h pack.h csum-file.h pack-objects.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,12 +17,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 object.h:
 
 pack.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pack-revindex.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pack-revindex.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pack-revindex.o.d	2017-10-10 09:54:33.321959888 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pack-revindex.o.d	2017-10-10 09:58:03.540790181 +0800
@@ -1,8 +1,8 @@
 pack-revindex.o: pack-revindex.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h pack-revindex.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 pack-revindex.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pack-write.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pack-write.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pack-write.o.d	2017-10-10 09:54:33.433903885 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pack-write.o.d	2017-10-10 09:58:03.652734177 +0800
@@ -1,8 +1,8 @@
 pack-write.o: pack-write.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h pack.h object.h csum-file.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,12 +17,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 pack.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pager.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pager.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pager.o.d	2017-10-10 09:54:33.509865883 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pager.o.d	2017-10-10 09:58:03.728696174 +0800
@@ -1,9 +1,9 @@
 pager.o: pager.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- run-command.h sigchain.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h run-command.h argv-array.h sigchain.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,11 +17,15 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 run-command.h:
 
+argv-array.h:
+
 sigchain.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/parse-options-cb.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/parse-options-cb.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/parse-options-cb.o.d	2017-10-10 09:54:33.765737873 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/parse-options-cb.o.d	2017-10-10 09:58:03.988566164 +0800
@@ -1,9 +1,9 @@
 parse-options-cb.o: parse-options-cb.c git-compat-util.h compat/bswap.h \
  wildmatch.h parse-options.h cache.h strbuf.h hashmap.h advice.h \
- gettext.h convert.h block-sha1/sha1.h commit.h object.h tree.h \
+ gettext.h convert.h trace.h block-sha1/sha1.h commit.h object.h tree.h \
  decorate.h gpg-interface.h string-list.h color.h
 
 git-compat-util.h:
 
 compat/bswap.h:
 
@@ -20,12 +20,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 commit.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/parse-options.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/parse-options.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/parse-options.o.d	2017-10-10 09:54:33.693773876 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/parse-options.o.d	2017-10-10 09:58:03.912604167 +0800
@@ -1,9 +1,9 @@
 parse-options.o: parse-options.c git-compat-util.h compat/bswap.h \
  wildmatch.h parse-options.h cache.h strbuf.h hashmap.h advice.h \
- gettext.h convert.h block-sha1/sha1.h commit.h object.h tree.h \
+ gettext.h convert.h trace.h block-sha1/sha1.h commit.h object.h tree.h \
  decorate.h gpg-interface.h string-list.h color.h utf8.h
 
 git-compat-util.h:
 
 compat/bswap.h:
 
@@ -20,12 +20,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 commit.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/patch-ids.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/patch-ids.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/patch-ids.o.d	2017-10-10 09:54:33.893673868 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/patch-ids.o.d	2017-10-10 09:58:04.112504160 +0800
@@ -1,8 +1,8 @@
 patch-ids.o: patch-ids.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h diff.h tree-walk.h pathspec.h commit.h object.h tree.h \
  decorate.h gpg-interface.h string-list.h sha1-lookup.h patch-ids.h
 
 cache.h:
 
 git-compat-util.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 diff.h:
 
 tree-walk.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/path.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/path.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/path.o.d	2017-10-10 09:54:34.081579861 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/path.o.d	2017-10-10 09:58:04.292414154 +0800
@@ -1,9 +1,9 @@
 path.o: path.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- string-list.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h string-list.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 string-list.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pathspec.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pathspec.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pathspec.o.d	2017-10-10 09:54:34.225507856 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pathspec.o.d	2017-10-10 09:58:04.440340148 +0800
@@ -1,8 +1,8 @@
 pathspec.o: pathspec.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h dir.h pathspec.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,11 +17,13 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 dir.h:
 
 pathspec.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pkt-line.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pkt-line.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pkt-line.o.d	2017-10-10 09:54:34.313463853 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pkt-line.o.d	2017-10-10 09:58:04.528296145 +0800
@@ -1,8 +1,8 @@
 pkt-line.o: pkt-line.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h pkt-line.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 pkt-line.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/preload-index.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/preload-index.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/preload-index.o.d	2017-10-10 09:54:34.381429851 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/preload-index.o.d	2017-10-10 09:58:04.592264142 +0800
@@ -1,8 +1,8 @@
 preload-index.o: preload-index.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h pathspec.h dir.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,11 +17,13 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 pathspec.h:
 
 dir.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pretty.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pretty.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/pretty.o.d	2017-10-10 09:54:34.729255837 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/pretty.o.d	2017-10-10 09:58:04.952084129 +0800
@@ -1,12 +1,12 @@
 pretty.o: pretty.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- commit.h object.h tree.h decorate.h gpg-interface.h string-list.h utf8.h \
- diff.h tree-walk.h pathspec.h revision.h parse-options.h grep.h color.h \
- kwset.h thread-utils.h userdiff.h notes-cache.h notes.h mailmap.h \
- log-tree.h reflog-walk.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h commit.h object.h tree.h decorate.h gpg-interface.h \
+ string-list.h utf8.h diff.h tree-walk.h pathspec.h revision.h \
+ parse-options.h grep.h color.h kwset.h thread-utils.h userdiff.h \
+ notes-cache.h notes.h mailmap.h log-tree.h reflog-walk.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -20,12 +20,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 commit.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/prio-queue.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/prio-queue.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/prio-queue.o.d	2017-10-10 09:54:34.809215834 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/prio-queue.o.d	2017-10-10 09:58:05.032044126 +0800
@@ -1,10 +1,9 @@
 prio-queue.o: prio-queue.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
- block-sha1/sha1.h commit.h object.h tree.h decorate.h gpg-interface.h \
- string-list.h prio-queue.h
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h prio-queue.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,21 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
-block-sha1/sha1.h:
-
-commit.h:
-
-object.h:
-
-tree.h:
+trace.h:
 
-decorate.h:
-
-gpg-interface.h:
-
-string-list.h:
+block-sha1/sha1.h:
 
 prio-queue.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/progress.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/progress.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/progress.o.d	2017-10-10 09:54:34.881179831 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/progress.o.d	2017-10-10 09:58:05.104008124 +0800
@@ -1,14 +1,16 @@
 progress.o: progress.c git-compat-util.h compat/bswap.h wildmatch.h \
- gettext.h progress.h strbuf.h
+ gettext.h progress.h strbuf.h trace.h
 
 git-compat-util.h:
 
 compat/bswap.h:
 
 wildmatch.h:
 
 gettext.h:
 
 progress.h:
 
 strbuf.h:
+
+trace.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/prompt.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/prompt.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/prompt.o.d	2017-10-10 09:54:34.945147829 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/prompt.o.d	2017-10-10 09:58:05.163978122 +0800
@@ -1,9 +1,9 @@
 prompt.o: prompt.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- run-command.h prompt.h compat/terminal.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h run-command.h argv-array.h prompt.h compat/terminal.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,13 +17,17 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 run-command.h:
 
+argv-array.h:
+
 prompt.h:
 
 compat/terminal.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/quote.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/quote.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/quote.o.d	2017-10-10 09:54:35.105067824 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/quote.o.d	2017-10-10 09:58:05.315902116 +0800
@@ -1,9 +1,9 @@
 quote.o: quote.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- quote.h argv-array.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h quote.h argv-array.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,11 +17,13 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 quote.h:
 
 argv-array.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/reachable.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/reachable.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/reachable.o.d	2017-10-10 09:54:35.197021820 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/reachable.o.d	2017-10-10 09:58:05.403858112 +0800
@@ -1,8 +1,8 @@
 reachable.o: reachable.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h refs.h tag.h object.h commit.h tree.h decorate.h \
  gpg-interface.h string-list.h blob.h diff.h tree-walk.h pathspec.h \
  revision.h parse-options.h grep.h color.h kwset.h thread-utils.h \
  userdiff.h notes-cache.h notes.h reachable.h cache-tree.h progress.h
 
 cache.h:
@@ -20,12 +20,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 refs.h:
 
 tag.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/read-cache.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/read-cache.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/read-cache.o.d	2017-10-10 09:54:35.600819805 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/read-cache.o.d	2017-10-10 09:58:05.835642097 +0800
@@ -1,11 +1,11 @@
 read-cache.o: read-cache.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h cache-tree.h tree.h object.h tree-walk.h refs.h dir.h \
  commit.h decorate.h gpg-interface.h string-list.h blob.h resolve-undo.h \
- varint.h utf8.h
+ varint.h split-index.h sigchain.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -19,12 +19,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 cache-tree.h:
 
 tree.h:
 
@@ -47,7 +49,9 @@
 blob.h:
 
 resolve-undo.h:
 
 varint.h:
 
-utf8.h:
+split-index.h:
+
+sigchain.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/reflog-walk.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/reflog-walk.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/reflog-walk.o.d	2017-10-10 09:54:35.716761802 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/reflog-walk.o.d	2017-10-10 09:58:05.955582092 +0800
@@ -1,8 +1,8 @@
 reflog-walk.o: reflog-walk.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h commit.h object.h tree.h decorate.h gpg-interface.h \
  string-list.h refs.h diff.h tree-walk.h pathspec.h revision.h \
  parse-options.h grep.h color.h kwset.h thread-utils.h userdiff.h \
  notes-cache.h notes.h reflog-walk.h
 
 cache.h:
@@ -20,12 +20,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 commit.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/refs.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/refs.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/refs.o.d	2017-10-10 09:54:36.364437777 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/refs.o.d	2017-10-10 09:58:06.603258068 +0800
@@ -1,9 +1,9 @@
 refs.o: refs.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h refs.h \
- object.h tag.h dir.h string-list.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h refs.h object.h tag.h dir.h string-list.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,12 +17,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 refs.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/remote.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/remote.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/remote.o.d	2017-10-10 09:54:36.892173758 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/remote.o.d	2017-10-10 09:58:07.126996050 +0800
@@ -1,12 +1,12 @@
 remote.o: remote.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- remote.h parse-options.h refs.h commit.h object.h tree.h decorate.h \
- gpg-interface.h string-list.h diff.h tree-walk.h pathspec.h revision.h \
- grep.h color.h kwset.h thread-utils.h userdiff.h notes-cache.h notes.h \
- dir.h tag.h mergesort.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h remote.h parse-options.h refs.h commit.h object.h \
+ tree.h decorate.h gpg-interface.h string-list.h diff.h tree-walk.h \
+ pathspec.h revision.h grep.h color.h kwset.h thread-utils.h userdiff.h \
+ notes-cache.h notes.h dir.h tag.h mergesort.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -20,12 +20,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 remote.h:
 
 parse-options.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/remote-testsvn.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/remote-testsvn.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/remote-testsvn.o.d	2017-10-10 09:54:48.010611351 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/remote-testsvn.o.d	2017-10-10 09:58:18.681215626 +0800
@@ -1,10 +1,11 @@
 remote-testsvn.o: remote-testsvn.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h remote.h parse-options.h url.h exec_cmd.h \
- run-command.h vcs-svn/svndump.h notes.h string-list.h argv-array.h
+ convert.h trace.h block-sha1/sha1.h remote.h parse-options.h url.h \
+ exec_cmd.h run-command.h argv-array.h vcs-svn/svndump.h notes.h \
+ string-list.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,25 +19,27 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 remote.h:
 
 parse-options.h:
 
 url.h:
 
 exec_cmd.h:
 
 run-command.h:
 
+argv-array.h:
+
 vcs-svn/svndump.h:
 
 notes.h:
 
 string-list.h:
-
-argv-array.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/replace_object.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/replace_object.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/replace_object.o.d	2017-10-10 09:54:36.972133755 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/replace_object.o.d	2017-10-10 09:58:07.206956046 +0800
@@ -1,10 +1,10 @@
 replace_object.o: replace_object.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h sha1-lookup.h refs.h commit.h object.h \
- tree.h decorate.h gpg-interface.h string-list.h
+ convert.h trace.h block-sha1/sha1.h sha1-lookup.h refs.h commit.h \
+ object.h tree.h decorate.h gpg-interface.h string-list.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 sha1-lookup.h:
 
 refs.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/rerere.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/rerere.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/rerere.o.d	2017-10-10 09:54:37.176031748 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/rerere.o.d	2017-10-10 09:58:07.406856040 +0800
@@ -1,10 +1,10 @@
 rerere.o: rerere.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- string-list.h rerere.h xdiff-interface.h xdiff/xdiff.h dir.h \
- resolve-undo.h ll-merge.h attr.h pathspec.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h string-list.h rerere.h xdiff-interface.h xdiff/xdiff.h \
+ dir.h resolve-undo.h ll-merge.h attr.h pathspec.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 string-list.h:
 
 rerere.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/resolve-undo.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/resolve-undo.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/resolve-undo.o.d	2017-10-10 09:54:37.271983743 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/resolve-undo.o.d	2017-10-10 09:58:07.502808035 +0800
@@ -1,8 +1,8 @@
 resolve-undo.o: resolve-undo.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h dir.h resolve-undo.h string-list.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,12 +17,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 dir.h:
 
 resolve-undo.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/revision.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/revision.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/revision.o.d	2017-10-10 09:54:37.927655721 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/revision.o.d	2017-10-10 09:58:08.150484012 +0800
@@ -1,8 +1,8 @@
 revision.o: revision.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h tag.h object.h blob.h tree.h commit.h decorate.h \
  gpg-interface.h string-list.h diff.h tree-walk.h pathspec.h refs.h \
  revision.h parse-options.h grep.h color.h kwset.h thread-utils.h \
  userdiff.h notes-cache.h notes.h graph.h reflog-walk.h patch-ids.h \
  log-tree.h line-log.h diffcore.h mailmap.h commit-slab.h dir.h
 
@@ -21,12 +21,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 tag.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/run-command.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/run-command.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/run-command.o.d	2017-10-10 09:54:38.115561714 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/run-command.o.d	2017-10-10 09:58:08.338390005 +0800
@@ -1,9 +1,9 @@
 run-command.o: run-command.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
- block-sha1/sha1.h run-command.h exec_cmd.h sigchain.h argv-array.h
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h run-command.h argv-array.h exec_cmd.h sigchain.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,15 +17,17 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 run-command.h:
 
+argv-array.h:
+
 exec_cmd.h:
 
 sigchain.h:
-
-argv-array.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/send-pack.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/send-pack.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/send-pack.o.d	2017-10-10 09:54:38.235501709 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/send-pack.o.d	2017-10-10 09:58:08.458330001 +0800
@@ -1,12 +1,12 @@
 send-pack.o: send-pack.c builtin.h git-compat-util.h compat/bswap.h \
  wildmatch.h strbuf.h cache.h hashmap.h advice.h gettext.h convert.h \
- block-sha1/sha1.h commit.h object.h tree.h decorate.h gpg-interface.h \
- string-list.h refs.h pkt-line.h sideband.h run-command.h remote.h \
- parse-options.h connect.h send-pack.h quote.h transport.h version.h \
- sha1-array.h
+ trace.h block-sha1/sha1.h commit.h object.h tree.h decorate.h \
+ gpg-interface.h string-list.h refs.h pkt-line.h sideband.h run-command.h \
+ argv-array.h remote.h parse-options.h connect.h send-pack.h quote.h \
+ transport.h version.h sha1-array.h
 
 builtin.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -22,12 +22,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 commit.h:
 
 object.h:
 
@@ -44,12 +46,14 @@
 pkt-line.h:
 
 sideband.h:
 
 run-command.h:
 
+argv-array.h:
+
 remote.h:
 
 parse-options.h:
 
 connect.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/sequencer.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/sequencer.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/sequencer.o.d	2017-10-10 09:54:38.507365699 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/sequencer.o.d	2017-10-10 09:58:08.726195991 +0800
@@ -1,13 +1,13 @@
 sequencer.o: sequencer.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h sequencer.h dir.h object.h commit.h tree.h decorate.h \
- gpg-interface.h string-list.h tag.h run-command.h exec_cmd.h utf8.h \
- cache-tree.h tree-walk.h diff.h pathspec.h revision.h parse-options.h \
- grep.h color.h kwset.h thread-utils.h userdiff.h notes-cache.h notes.h \
- rerere.h merge-recursive.h refs.h argv-array.h
+ gpg-interface.h string-list.h tag.h run-command.h argv-array.h \
+ exec_cmd.h utf8.h cache-tree.h tree-walk.h diff.h pathspec.h revision.h \
+ parse-options.h grep.h color.h kwset.h thread-utils.h userdiff.h \
+ notes-cache.h notes.h rerere.h merge-recursive.h refs.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -21,12 +21,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 sequencer.h:
 
 dir.h:
 
@@ -43,12 +45,14 @@
 string-list.h:
 
 tag.h:
 
 run-command.h:
 
+argv-array.h:
+
 exec_cmd.h:
 
 utf8.h:
 
 cache-tree.h:
 
@@ -78,8 +82,6 @@
 
 rerere.h:
 
 merge-recursive.h:
 
 refs.h:
-
-argv-array.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/server-info.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/server-info.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/server-info.o.d	2017-10-10 09:54:38.603317695 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/server-info.o.d	2017-10-10 09:58:08.822147988 +0800
@@ -1,8 +1,8 @@
 server-info.o: server-info.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h refs.h object.h commit.h tree.h decorate.h \
  gpg-interface.h string-list.h tag.h
 
 cache.h:
 
 git-compat-util.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 refs.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/setup.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/setup.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/setup.o.d	2017-10-10 09:54:38.775231689 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/setup.o.d	2017-10-10 09:58:08.990063981 +0800
@@ -1,9 +1,9 @@
 setup.o: setup.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h dir.h \
- string-list.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h dir.h string-list.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,11 +17,13 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 dir.h:
 
 string-list.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/sha1-array.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/sha1-array.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/sha1-array.o.d	2017-10-10 09:54:38.847195687 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/sha1-array.o.d	2017-10-10 09:58:09.058029979 +0800
@@ -1,8 +1,8 @@
 sha1-array.o: sha1-array.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h sha1-array.h sha1-lookup.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,11 +17,13 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 sha1-array.h:
 
 sha1-lookup.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/sha1_file.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/sha1_file.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/sha1_file.o.d	2017-10-10 09:54:39.510863662 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/sha1_file.o.d	2017-10-10 09:58:09.729693954 +0800
@@ -1,12 +1,12 @@
 sha1_file.o: sha1_file.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h string-list.h delta.h pack.h object.h csum-file.h \
- blob.h commit.h tree.h decorate.h gpg-interface.h run-command.h tag.h \
- tree-walk.h refs.h pack-revindex.h sha1-lookup.h bulk-checkin.h \
- streaming.h dir.h
+ blob.h commit.h tree.h decorate.h gpg-interface.h run-command.h \
+ argv-array.h tag.h tree-walk.h refs.h pack-revindex.h sha1-lookup.h \
+ bulk-checkin.h streaming.h dir.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -20,12 +20,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 string-list.h:
 
 delta.h:
 
@@ -44,12 +46,14 @@
 decorate.h:
 
 gpg-interface.h:
 
 run-command.h:
 
+argv-array.h:
+
 tag.h:
 
 tree-walk.h:
 
 refs.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/sha1-lookup.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/sha1-lookup.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/sha1-lookup.o.d	2017-10-10 09:54:38.923157684 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/sha1-lookup.o.d	2017-10-10 09:58:09.137989975 +0800
@@ -1,8 +1,8 @@
 sha1-lookup.o: sha1-lookup.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h sha1-lookup.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 sha1-lookup.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/sha1_name.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/sha1_name.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/sha1_name.o.d	2017-10-10 09:54:39.822707651 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/sha1_name.o.d	2017-10-10 09:58:10.045535942 +0800
@@ -1,8 +1,8 @@
 sha1_name.o: sha1_name.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h tag.h object.h commit.h tree.h decorate.h \
  gpg-interface.h string-list.h blob.h tree-walk.h refs.h remote.h \
  parse-options.h
 
 cache.h:
 
@@ -19,12 +19,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 tag.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/shallow.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/shallow.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/shallow.o.d	2017-10-10 09:54:40.038599643 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/shallow.o.d	2017-10-10 09:58:10.261427934 +0800
@@ -1,12 +1,13 @@
 shallow.o: shallow.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- commit.h object.h tree.h decorate.h gpg-interface.h string-list.h tag.h \
- pkt-line.h remote.h parse-options.h refs.h sha1-array.h diff.h \
- tree-walk.h pathspec.h revision.h grep.h color.h kwset.h thread-utils.h \
- userdiff.h notes-cache.h notes.h commit-slab.h sigchain.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h commit.h object.h tree.h decorate.h gpg-interface.h \
+ string-list.h tag.h pkt-line.h remote.h parse-options.h refs.h \
+ sha1-array.h diff.h tree-walk.h pathspec.h revision.h grep.h color.h \
+ kwset.h thread-utils.h userdiff.h notes-cache.h notes.h commit-slab.h \
+ sigchain.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -20,12 +21,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 commit.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/shell.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/shell.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/shell.o.d	2017-10-10 09:54:47.338947375 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/shell.o.d	2017-10-10 09:58:18.021545650 +0800
@@ -1,9 +1,9 @@
 shell.o: shell.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- quote.h exec_cmd.h run-command.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h quote.h exec_cmd.h run-command.h argv-array.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,13 +17,17 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 quote.h:
 
 exec_cmd.h:
 
 run-command.h:
+
+argv-array.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/show-index.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/show-index.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/show-index.o.d	2017-10-10 09:54:47.498867370 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/show-index.o.d	2017-10-10 09:58:18.209451643 +0800
@@ -1,8 +1,8 @@
 show-index.o: show-index.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h pack.h object.h csum-file.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,12 +17,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 pack.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/sideband.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/sideband.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/sideband.o.d	2017-10-10 09:54:40.110563640 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/sideband.o.d	2017-10-10 09:58:10.337389931 +0800
@@ -1,8 +1,8 @@
 sideband.o: sideband.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h pkt-line.h sideband.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,11 +17,13 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 pkt-line.h:
 
 sideband.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/sigchain.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/sigchain.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/sigchain.o.d	2017-10-10 09:54:40.166535638 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/sigchain.o.d	2017-10-10 09:58:10.393361930 +0800
@@ -1,9 +1,9 @@
 sigchain.o: sigchain.c sigchain.h cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h
+ convert.h trace.h block-sha1/sha1.h
 
 sigchain.h:
 
 cache.h:
 
 git-compat-util.h:
@@ -19,7 +19,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend: split-index.o.d
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/strbuf.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/strbuf.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/strbuf.o.d	2017-10-10 09:54:40.362437631 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/strbuf.o.d	2017-10-10 09:58:10.709203918 +0800
@@ -1,8 +1,9 @@
 strbuf.o: strbuf.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h refs.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h refs.h utf8.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -16,9 +17,13 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 refs.h:
+
+utf8.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/streaming.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/streaming.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/streaming.o.d	2017-10-10 09:54:40.478379627 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/streaming.o.d	2017-10-10 09:58:10.825145914 +0800
@@ -1,8 +1,8 @@
 streaming.o: streaming.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h streaming.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 streaming.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/string-list.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/string-list.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/string-list.o.d	2017-10-10 09:54:40.602317622 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/string-list.o.d	2017-10-10 09:58:10.949083909 +0800
@@ -1,8 +1,8 @@
 string-list.o: string-list.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h string-list.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 string-list.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/submodule.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/submodule.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/submodule.o.d	2017-10-10 09:54:40.870183613 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/submodule.o.d	2017-10-10 09:58:11.212951900 +0800
@@ -1,13 +1,13 @@
 submodule.o: submodule.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h submodule.h dir.h diff.h tree-walk.h pathspec.h \
  commit.h object.h tree.h decorate.h gpg-interface.h string-list.h \
  revision.h parse-options.h grep.h color.h kwset.h thread-utils.h \
- userdiff.h notes-cache.h notes.h run-command.h diffcore.h refs.h \
- sha1-array.h argv-array.h blob.h
+ userdiff.h notes-cache.h notes.h run-command.h argv-array.h diffcore.h \
+ refs.h sha1-array.h blob.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -21,12 +21,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 submodule.h:
 
 dir.h:
 
@@ -65,15 +67,15 @@
 notes-cache.h:
 
 notes.h:
 
 run-command.h:
 
+argv-array.h:
+
 diffcore.h:
 
 refs.h:
 
 sha1-array.h:
 
-argv-array.h:
-
 blob.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/symlinks.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/symlinks.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/symlinks.o.d	2017-10-10 09:54:40.998119607 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/symlinks.o.d	2017-10-10 09:58:11.308903896 +0800
@@ -1,8 +1,8 @@
 symlinks.o: symlinks.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/tag.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/tag.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/tag.o.d	2017-10-10 09:54:41.090073604 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/tag.o.d	2017-10-10 09:58:11.388863892 +0800
@@ -1,9 +1,10 @@
 tag.o: tag.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h tag.h \
- object.h commit.h tree.h decorate.h gpg-interface.h string-list.h blob.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h tag.h object.h commit.h tree.h decorate.h \
+ gpg-interface.h string-list.h blob.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 tag.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-ctype.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-ctype.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-ctype.o.d	2017-10-10 09:55:07.752734627 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-ctype.o.d	2017-10-10 09:58:37.020040953 +0800
@@ -1,8 +1,8 @@
 test-ctype.o: test-ctype.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-date.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-date.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-date.o.d	2017-10-10 09:55:07.820700624 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-date.o.d	2017-10-10 09:58:37.092004951 +0800
@@ -1,8 +1,8 @@
 test-date.o: test-date.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-delta.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-delta.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-delta.o.d	2017-10-10 09:55:07.940640620 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-delta.o.d	2017-10-10 09:58:37.215942946 +0800
@@ -1,8 +1,8 @@
 test-delta.o: test-delta.c git-compat-util.h compat/bswap.h wildmatch.h \
- delta.h cache.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ delta.h cache.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h
 
 git-compat-util.h:
 
 compat/bswap.h:
 
@@ -19,7 +19,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-dump-cache-tree.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-dump-cache-tree.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-dump-cache-tree.o.d	2017-10-10 09:55:08.064578615 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-dump-cache-tree.o.d	2017-10-10 09:58:37.371864941 +0800
@@ -1,9 +1,10 @@
 test-dump-cache-tree.o: test-dump-cache-tree.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h tree.h object.h cache-tree.h tree-walk.h
+ convert.h trace.h block-sha1/sha1.h tree.h object.h cache-tree.h \
+ tree-walk.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 tree.h:
 
 object.h:
 
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend: test-dump-split-index.o.d
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-index-version.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-index-version.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-index-version.o.d	2017-10-10 09:55:08.404408603 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-index-version.o.d	2017-10-10 09:58:37.943578919 +0800
@@ -1,9 +1,9 @@
 test-index-version.o: test-index-version.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h
+ convert.h trace.h block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-match-trees.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-match-trees.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-match-trees.o.d	2017-10-10 09:55:08.624298595 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-match-trees.o.d	2017-10-10 09:58:38.183458911 +0800
@@ -1,9 +1,9 @@
 test-match-trees.o: test-match-trees.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h tree.h object.h
+ convert.h trace.h block-sha1/sha1.h tree.h object.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,11 +17,13 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 tree.h:
 
 object.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-mergesort.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-mergesort.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-mergesort.o.d	2017-10-10 09:55:08.736242591 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-mergesort.o.d	2017-10-10 09:58:38.315392906 +0800
@@ -1,9 +1,9 @@
 test-mergesort.o: test-mergesort.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h mergesort.h
+ convert.h trace.h block-sha1/sha1.h mergesort.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 mergesort.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-parse-options.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-parse-options.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-parse-options.o.d	2017-10-10 09:55:08.992114581 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-parse-options.o.d	2017-10-10 09:58:38.623238894 +0800
@@ -1,9 +1,9 @@
 test-parse-options.o: test-parse-options.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h parse-options.h string-list.h
+ convert.h trace.h block-sha1/sha1.h parse-options.h string-list.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,11 +17,13 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 parse-options.h:
 
 string-list.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-path-utils.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-path-utils.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-path-utils.o.d	2017-10-10 09:55:09.132044576 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-path-utils.o.d	2017-10-10 09:58:38.775162889 +0800
@@ -1,9 +1,9 @@
 test-path-utils.o: test-path-utils.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h string-list.h
+ convert.h trace.h block-sha1/sha1.h string-list.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 string-list.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-prio-queue.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-prio-queue.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-prio-queue.o.d	2017-10-10 09:55:09.251984572 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-prio-queue.o.d	2017-10-10 09:58:38.899100885 +0800
@@ -1,9 +1,9 @@
 test-prio-queue.o: test-prio-queue.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h prio-queue.h
+ convert.h trace.h block-sha1/sha1.h prio-queue.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 prio-queue.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-read-cache.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-read-cache.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-read-cache.o.d	2017-10-10 09:55:09.363928567 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-read-cache.o.d	2017-10-10 09:58:39.019040880 +0800
@@ -1,9 +1,9 @@
 test-read-cache.o: test-read-cache.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h
+ convert.h trace.h block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-revision-walking.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-revision-walking.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-revision-walking.o.d	2017-10-10 09:55:09.591814560 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-revision-walking.o.d	2017-10-10 09:58:39.258920871 +0800
@@ -1,9 +1,9 @@
 test-revision-walking.o: test-revision-walking.c cache.h \
  git-compat-util.h compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h \
- gettext.h convert.h block-sha1/sha1.h commit.h object.h tree.h \
+ gettext.h convert.h trace.h block-sha1/sha1.h commit.h object.h tree.h \
  decorate.h gpg-interface.h string-list.h diff.h tree-walk.h pathspec.h \
  revision.h parse-options.h grep.h color.h kwset.h thread-utils.h \
  userdiff.h notes-cache.h notes.h
 
 cache.h:
 
@@ -20,12 +20,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 commit.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-run-command.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-run-command.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-run-command.o.d	2017-10-10 09:55:09.703758555 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-run-command.o.d	2017-10-10 09:58:39.830634850 +0800
@@ -1,10 +1,12 @@
 test-run-command.o: test-run-command.c git-compat-util.h compat/bswap.h \
- wildmatch.h run-command.h
+ wildmatch.h run-command.h argv-array.h
 
 git-compat-util.h:
 
 compat/bswap.h:
 
 wildmatch.h:
 
 run-command.h:
+
+argv-array.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-scrap-cache-tree.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-scrap-cache-tree.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-scrap-cache-tree.o.d	2017-10-10 09:55:09.815702551 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-scrap-cache-tree.o.d	2017-10-10 09:58:40.038530842 +0800
@@ -1,10 +1,10 @@
 test-scrap-cache-tree.o: test-scrap-cache-tree.c cache.h \
  git-compat-util.h compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h \
- gettext.h convert.h block-sha1/sha1.h tree.h object.h cache-tree.h \
- tree-walk.h
+ gettext.h convert.h trace.h block-sha1/sha1.h tree.h object.h \
+ cache-tree.h tree-walk.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 tree.h:
 
 object.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-sha1.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-sha1.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-sha1.o.d	2017-10-10 09:55:09.935642547 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-sha1.o.d	2017-10-10 09:58:40.162468838 +0800
@@ -1,8 +1,8 @@
 test-sha1.o: test-sha1.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-sigchain.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-sigchain.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-sigchain.o.d	2017-10-10 09:55:10.051584542 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-sigchain.o.d	2017-10-10 09:58:40.378360830 +0800
@@ -1,9 +1,9 @@
 test-sigchain.o: test-sigchain.c sigchain.h cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h
+ convert.h trace.h block-sha1/sha1.h
 
 sigchain.h:
 
 cache.h:
 
 git-compat-util.h:
@@ -19,7 +19,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-string-list.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-string-list.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-string-list.o.d	2017-10-10 09:55:10.183518538 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-string-list.o.d	2017-10-10 09:58:40.554272823 +0800
@@ -1,9 +1,9 @@
 test-string-list.o: test-string-list.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h string-list.h
+ convert.h trace.h block-sha1/sha1.h string-list.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 string-list.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-subprocess.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-subprocess.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-subprocess.o.d	2017-10-10 09:55:10.295462533 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-subprocess.o.d	2017-10-10 09:58:40.714192818 +0800
@@ -1,9 +1,9 @@
 test-subprocess.o: test-subprocess.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h run-command.h
+ convert.h trace.h block-sha1/sha1.h run-command.h argv-array.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,9 +17,13 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 run-command.h:
+
+argv-array.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-wildmatch.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-wildmatch.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/test-wildmatch.o.d	2017-10-10 09:55:10.651284521 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/test-wildmatch.o.d	2017-10-10 09:58:41.149974802 +0800
@@ -1,9 +1,9 @@
 test-wildmatch.o: test-wildmatch.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h
+ convert.h trace.h block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/thread-utils.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/thread-utils.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/thread-utils.o.d	2017-10-10 09:54:44.600317476 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/thread-utils.o.d	2017-10-10 09:58:14.967073762 +0800
@@ -1,8 +1,8 @@
 thread-utils.o: thread-utils.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h thread-utils.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 thread-utils.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/trace.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/trace.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/trace.o.d	2017-10-10 09:54:41.174031601 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/trace.o.d	2017-10-10 09:58:11.496809888 +0800
@@ -1,9 +1,9 @@
 trace.o: trace.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- quote.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h quote.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -17,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 quote.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/transport-helper.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/transport-helper.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/transport-helper.o.d	2017-10-10 09:54:41.769733580 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/transport-helper.o.d	2017-10-10 09:58:12.100507867 +0800
@@ -1,13 +1,13 @@
 transport-helper.o: transport-helper.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h transport.h run-command.h remote.h \
- parse-options.h quote.h commit.h object.h tree.h decorate.h \
- gpg-interface.h string-list.h diff.h tree-walk.h pathspec.h revision.h \
- grep.h color.h kwset.h thread-utils.h userdiff.h notes-cache.h notes.h \
- sigchain.h argv-array.h refs.h
+ convert.h trace.h block-sha1/sha1.h transport.h run-command.h \
+ argv-array.h remote.h parse-options.h quote.h commit.h object.h tree.h \
+ decorate.h gpg-interface.h string-list.h diff.h tree-walk.h pathspec.h \
+ revision.h grep.h color.h kwset.h thread-utils.h userdiff.h \
+ notes-cache.h notes.h sigchain.h refs.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -21,18 +21,22 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 transport.h:
 
 run-command.h:
 
+argv-array.h:
+
 remote.h:
 
 parse-options.h:
 
 quote.h:
 
@@ -69,9 +73,7 @@
 notes-cache.h:
 
 notes.h:
 
 sigchain.h:
 
-argv-array.h:
-
 refs.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/transport.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/transport.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/transport.o.d	2017-10-10 09:54:41.493871590 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/transport.o.d	2017-10-10 09:58:11.820647877 +0800
@@ -1,11 +1,12 @@
 transport.o: transport.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
- block-sha1/sha1.h transport.h run-command.h remote.h parse-options.h \
- pkt-line.h fetch-pack.h string-list.h connect.h send-pack.h walker.h \
- bundle.h dir.h refs.h branch.h url.h submodule.h sha1-array.h
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h transport.h run-command.h argv-array.h remote.h \
+ parse-options.h pkt-line.h fetch-pack.h string-list.h connect.h \
+ send-pack.h walker.h bundle.h dir.h refs.h branch.h url.h submodule.h \
+ sha1-array.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -19,18 +20,22 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 transport.h:
 
 run-command.h:
 
+argv-array.h:
+
 remote.h:
 
 parse-options.h:
 
 pkt-line.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/tree-diff.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/tree-diff.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/tree-diff.o.d	2017-10-10 09:54:41.873681575 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/tree-diff.o.d	2017-10-10 09:58:12.252431861 +0800
@@ -1,8 +1,8 @@
 tree-diff.o: tree-diff.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h diff.h tree-walk.h pathspec.h diffcore.h tree.h \
  object.h
 
 cache.h:
 
 git-compat-util.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 diff.h:
 
 tree-walk.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/tree.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/tree.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/tree.o.d	2017-10-10 09:54:41.965635572 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/tree.o.d	2017-10-10 09:58:12.344385858 +0800
@@ -1,10 +1,10 @@
 tree.o: tree.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- cache-tree.h tree.h object.h tree-walk.h blob.h commit.h decorate.h \
- gpg-interface.h string-list.h tag.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h cache-tree.h tree.h object.h tree-walk.h blob.h \
+ commit.h decorate.h gpg-interface.h string-list.h tag.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 cache-tree.h:
 
 tree.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/tree-walk.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/tree-walk.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/tree-walk.o.d	2017-10-10 09:54:42.141547566 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/tree-walk.o.d	2017-10-10 09:58:12.516299852 +0800
@@ -1,8 +1,8 @@
 tree-walk.o: tree-walk.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h tree-walk.h unpack-trees.h string-list.h dir.h tree.h \
  object.h pathspec.h
 
 cache.h:
 
 git-compat-util.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 tree-walk.h:
 
 unpack-trees.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/unix-socket.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/unix-socket.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/unix-socket.o.d	2017-10-10 09:54:44.404415483 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/unix-socket.o.d	2017-10-10 09:58:14.767173770 +0800
@@ -1,8 +1,8 @@
 unix-socket.o: unix-socket.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h unix-socket.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 unix-socket.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/unpack-trees.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/unpack-trees.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/unpack-trees.o.d	2017-10-10 09:54:42.493371553 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/unpack-trees.o.d	2017-10-10 09:58:12.868123839 +0800
@@ -1,10 +1,10 @@
 unpack-trees.o: unpack-trees.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h dir.h tree.h object.h tree-walk.h cache-tree.h \
- unpack-trees.h string-list.h progress.h refs.h attr.h
+ unpack-trees.h string-list.h progress.h refs.h attr.h split-index.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 dir.h:
 
 tree.h:
 
@@ -39,6 +41,8 @@
 
 progress.h:
 
 refs.h:
 
 attr.h:
+
+split-index.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/upload-pack.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/upload-pack.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/upload-pack.o.d	2017-10-10 09:54:47.818707358 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/upload-pack.o.d	2017-10-10 09:58:18.509301632 +0800
@@ -1,13 +1,13 @@
 upload-pack.o: upload-pack.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h refs.h pkt-line.h sideband.h tag.h object.h commit.h \
  tree.h decorate.h gpg-interface.h string-list.h exec_cmd.h diff.h \
  tree-walk.h pathspec.h revision.h parse-options.h grep.h color.h kwset.h \
  thread-utils.h userdiff.h notes-cache.h notes.h list-objects.h \
- run-command.h connect.h sigchain.h version.h
+ run-command.h argv-array.h connect.h sigchain.h version.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -21,12 +21,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 refs.h:
 
 pkt-line.h:
 
@@ -73,11 +75,13 @@
 notes.h:
 
 list-objects.h:
 
 run-command.h:
 
+argv-array.h:
+
 connect.h:
 
 sigchain.h:
 
 version.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/urlmatch.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/urlmatch.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/urlmatch.o.d	2017-10-10 09:54:42.721257545 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/urlmatch.o.d	2017-10-10 09:58:13.100007831 +0800
@@ -1,8 +1,8 @@
 urlmatch.o: urlmatch.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h urlmatch.h string-list.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,11 +17,13 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 urlmatch.h:
 
 string-list.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/url.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/url.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/url.o.d	2017-10-10 09:54:42.577329550 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/url.o.d	2017-10-10 09:58:12.956079836 +0800
@@ -1,8 +1,9 @@
 url.o: url.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h url.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h url.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -16,9 +17,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 url.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/usage.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/usage.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/usage.o.d	2017-10-10 09:54:42.797219542 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/usage.o.d	2017-10-10 09:58:13.175969828 +0800
@@ -1,8 +1,9 @@
 usage.o: usage.c git-compat-util.h compat/bswap.h wildmatch.h cache.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h
 
 git-compat-util.h:
 
 compat/bswap.h:
 
 wildmatch.h:
@@ -16,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/userdiff.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/userdiff.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/userdiff.o.d	2017-10-10 09:54:42.877179539 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/userdiff.o.d	2017-10-10 09:58:13.255929825 +0800
@@ -1,8 +1,8 @@
 userdiff.o: userdiff.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h userdiff.h notes-cache.h notes.h string-list.h attr.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,12 +17,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 userdiff.h:
 
 notes-cache.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/utf8.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/utf8.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/utf8.o.d	2017-10-10 09:54:43.017109534 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/utf8.o.d	2017-10-10 09:58:13.391861820 +0800
@@ -1,12 +1,14 @@
 utf8.o: utf8.c git-compat-util.h compat/bswap.h wildmatch.h strbuf.h \
- utf8.h
+ utf8.h unicode_width.h
 
 git-compat-util.h:
 
 compat/bswap.h:
 
 wildmatch.h:
 
 strbuf.h:
 
 utf8.h:
+
+unicode_width.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/versioncmp.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/versioncmp.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/versioncmp.o.d	2017-10-10 09:54:43.173031528 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/versioncmp.o.d	2017-10-10 09:58:13.543785814 +0800
@@ -1,8 +1,8 @@
 versioncmp.o: versioncmp.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/walker.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/walker.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/walker.o.d	2017-10-10 09:54:43.276979524 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/walker.o.d	2017-10-10 09:58:13.647733810 +0800
@@ -1,10 +1,11 @@
 walker.o: walker.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h \
- walker.h remote.h parse-options.h commit.h object.h tree.h decorate.h \
- gpg-interface.h string-list.h tree-walk.h tag.h blob.h refs.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h walker.h remote.h parse-options.h commit.h object.h \
+ tree.h decorate.h gpg-interface.h string-list.h tree-walk.h tag.h blob.h \
+ refs.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -18,12 +19,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 walker.h:
 
 remote.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/wildmatch.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/wildmatch.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/wildmatch.o.d	2017-10-10 09:54:43.396919519 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/wildmatch.o.d	2017-10-10 09:58:13.771671806 +0800
@@ -1,8 +1,8 @@
 wildmatch.o: wildmatch.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/wrapper.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/wrapper.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/wrapper.o.d	2017-10-10 09:54:43.532851515 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/wrapper.o.d	2017-10-10 09:58:13.907603801 +0800
@@ -1,8 +1,9 @@
 wrapper.o: wrapper.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -16,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/write_or_die.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/write_or_die.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/write_or_die.o.d	2017-10-10 09:54:43.596819512 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/write_or_die.o.d	2017-10-10 09:58:13.971571799 +0800
@@ -1,8 +1,8 @@
 write_or_die.o: write_or_die.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -17,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/ws.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/ws.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/ws.o.d	2017-10-10 09:54:43.716759508 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/ws.o.d	2017-10-10 09:58:14.091511794 +0800
@@ -1,8 +1,8 @@
 ws.o: ws.c cache.h git-compat-util.h compat/bswap.h wildmatch.h strbuf.h \
- hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h attr.h
+ hashmap.h advice.h gettext.h convert.h trace.h block-sha1/sha1.h attr.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -16,9 +16,11 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 attr.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/wt-status.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/wt-status.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/wt-status.o.d	2017-10-10 09:54:44.108563494 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/wt-status.o.d	2017-10-10 09:58:14.471321780 +0800
@@ -1,8 +1,8 @@
 wt-status.o: wt-status.c cache.h git-compat-util.h compat/bswap.h \
- wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h \
+ wildmatch.h strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
  block-sha1/sha1.h pathspec.h wt-status.h string-list.h color.h object.h \
  dir.h commit.h tree.h decorate.h gpg-interface.h diff.h tree-walk.h \
  revision.h parse-options.h grep.h kwset.h thread-utils.h userdiff.h \
  notes-cache.h notes.h diffcore.h quote.h run-command.h argv-array.h \
  remote.h refs.h submodule.h column.h utf8.h
 
@@ -21,12 +21,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 pathspec.h:
 
 wt-status.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/xdiff-interface.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/xdiff-interface.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/xdiff-interface.o.d	2017-10-10 09:54:44.244495489 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/xdiff-interface.o.d	2017-10-10 09:58:14.603255775 +0800
@@ -1,9 +1,9 @@
 xdiff-interface.o: xdiff-interface.c cache.h git-compat-util.h \
  compat/bswap.h wildmatch.h strbuf.h hashmap.h advice.h gettext.h \
- convert.h block-sha1/sha1.h xdiff-interface.h xdiff/xdiff.h \
+ convert.h trace.h block-sha1/sha1.h xdiff-interface.h xdiff/xdiff.h \
  xdiff/xtypes.h xdiff/xdiffi.h xdiff/xemit.h xdiff/xmacros.h
 
 cache.h:
 
 git-compat-util.h:
 
@@ -18,12 +18,14 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
 
 xdiff-interface.h:
 
 xdiff/xdiff.h:
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/zlib.o.d /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/zlib.o.d
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.depend/zlib.o.d	2017-10-10 09:54:44.340447485 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.depend/zlib.o.d	2017-10-10 09:58:14.699207772 +0800
@@ -1,8 +1,9 @@
 zlib.o: zlib.c cache.h git-compat-util.h compat/bswap.h wildmatch.h \
- strbuf.h hashmap.h advice.h gettext.h convert.h block-sha1/sha1.h
+ strbuf.h hashmap.h advice.h gettext.h convert.h trace.h \
+ block-sha1/sha1.h
 
 cache.h:
 
 git-compat-util.h:
 
 compat/bswap.h:
@@ -16,7 +17,9 @@
 advice.h:
 
 gettext.h:
 
 convert.h:
 
+trace.h:
+
 block-sha1/sha1.h:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff.c	2014-08-16 06:26:55.000000000 +0800
@@ -49,29 +49,29 @@
 	GIT_COLOR_GREEN,	/* NEW */
 	GIT_COLOR_YELLOW,	/* COMMIT */
 	GIT_COLOR_BG_RED,	/* WHITESPACE */
 	GIT_COLOR_NORMAL,	/* FUNCINFO */
 };
 
-static int parse_diff_color_slot(const char *var, int ofs)
+static int parse_diff_color_slot(const char *var)
 {
-	if (!strcasecmp(var+ofs, "plain"))
+	if (!strcasecmp(var, "plain"))
 		return DIFF_PLAIN;
-	if (!strcasecmp(var+ofs, "meta"))
+	if (!strcasecmp(var, "meta"))
 		return DIFF_METAINFO;
-	if (!strcasecmp(var+ofs, "frag"))
+	if (!strcasecmp(var, "frag"))
 		return DIFF_FRAGINFO;
-	if (!strcasecmp(var+ofs, "old"))
+	if (!strcasecmp(var, "old"))
 		return DIFF_FILE_OLD;
-	if (!strcasecmp(var+ofs, "new"))
+	if (!strcasecmp(var, "new"))
 		return DIFF_FILE_NEW;
-	if (!strcasecmp(var+ofs, "commit"))
+	if (!strcasecmp(var, "commit"))
 		return DIFF_COMMIT;
-	if (!strcasecmp(var+ofs, "whitespace"))
+	if (!strcasecmp(var, "whitespace"))
 		return DIFF_WHITESPACE;
-	if (!strcasecmp(var+ofs, "func"))
+	if (!strcasecmp(var, "func"))
 		return DIFF_FUNCINFO;
 	return -1;
 }
 
 static int parse_dirstat_params(struct diff_options *options, const char *params_string,
 				struct strbuf *errmsg)
@@ -228,22 +228,25 @@
 
 	return git_diff_basic_config(var, value, cb);
 }
 
 int git_diff_basic_config(const char *var, const char *value, void *cb)
 {
+	const char *name;
+
 	if (!strcmp(var, "diff.renamelimit")) {
 		diff_rename_limit_default = git_config_int(var, value);
 		return 0;
 	}
 
 	if (userdiff_config(var, value) < 0)
 		return -1;
 
-	if (starts_with(var, "diff.color.") || starts_with(var, "color.diff.")) {
-		int slot = parse_diff_color_slot(var, 11);
+	if (skip_prefix(var, "diff.color.", &name) ||
+	    skip_prefix(var, "color.diff.", &name)) {
+		int slot = parse_diff_color_slot(name);
 		if (slot < 0)
 			return 0;
 		if (!value)
 			return config_error_nonbool(var);
 		color_parse(value, var, diff_colors[slot]);
 		return 0;
@@ -519,15 +522,15 @@
 		emit_line(ecbdata->opt, plain, reset, line, len);
 		return;
 	}
 	ep += 2; /* skip over @@ */
 
 	/* The hunk header in fraginfo color */
-	strbuf_add(&msgbuf, frag, strlen(frag));
+	strbuf_addstr(&msgbuf, frag);
 	strbuf_add(&msgbuf, line, ep - line);
-	strbuf_add(&msgbuf, reset, strlen(reset));
+	strbuf_addstr(&msgbuf, reset);
 
 	/*
 	 * trailing "\r\n"
 	 */
 	for ( ; i < 3; i++)
 		if (line[len - i] == '\r' || line[len - i] == '\n')
@@ -535,21 +538,21 @@
 
 	/* blank before the func header */
 	for (cp = ep; ep - line < len; ep++)
 		if (*ep != ' ' && *ep != '\t')
 			break;
 	if (ep != cp) {
-		strbuf_add(&msgbuf, plain, strlen(plain));
+		strbuf_addstr(&msgbuf, plain);
 		strbuf_add(&msgbuf, cp, ep - cp);
-		strbuf_add(&msgbuf, reset, strlen(reset));
+		strbuf_addstr(&msgbuf, reset);
 	}
 
 	if (ep < line + len) {
-		strbuf_add(&msgbuf, func, strlen(func));
+		strbuf_addstr(&msgbuf, func);
 		strbuf_add(&msgbuf, ep, line + len - ep);
-		strbuf_add(&msgbuf, reset, strlen(reset));
+		strbuf_addstr(&msgbuf, reset);
 	}
 
 	strbuf_add(&msgbuf, line + len, org_len - len);
 	emit_line(ecbdata->opt, "", "", msgbuf.buf, msgbuf.len);
 	strbuf_release(&msgbuf);
 }
@@ -2338,12 +2341,13 @@
 			fprintf(o->file, "%sBinary files %s and %s differ\n",
 				line_prefix, lbl[0], lbl[1]);
 		o->found_changes = 1;
 	} else {
 		/* Crazy xdl interfaces.. */
 		const char *diffopts = getenv("GIT_DIFF_OPTS");
+		const char *v;
 		xpparam_t xpp;
 		xdemitconf_t xecfg;
 		struct emit_callback ecbdata;
 		const struct userdiff_funcname *pe;
 
 		if (must_show_header) {
@@ -2376,16 +2380,16 @@
 		if (DIFF_OPT_TST(o, FUNCCONTEXT))
 			xecfg.flags |= XDL_EMIT_FUNCCONTEXT;
 		if (pe)
 			xdiff_set_find_func(&xecfg, pe->pattern, pe->cflags);
 		if (!diffopts)
 			;
-		else if (starts_with(diffopts, "--unified="))
-			xecfg.ctxlen = strtoul(diffopts + 10, NULL, 10);
-		else if (starts_with(diffopts, "-u"))
-			xecfg.ctxlen = strtoul(diffopts + 2, NULL, 10);
+		else if (skip_prefix(diffopts, "--unified=", &v))
+			xecfg.ctxlen = strtoul(v, NULL, 10);
+		else if (skip_prefix(diffopts, "-u", &v))
+			xecfg.ctxlen = strtoul(v, NULL, 10);
 		if (o->word_diff)
 			init_diff_words_data(&ecbdata, o, one, two);
 		xdi_diff_outf(&mf1, &mf2, fn_out_consume, &ecbdata,
 			      &xpp, &xecfg);
 		if (o->word_diff)
 			free_diff_words_data(&ecbdata);
@@ -2877,12 +2881,22 @@
 		prep_temp_blob(name, temp, one->data, one->size,
 			       one->sha1, one->mode);
 	}
 	return temp;
 }
 
+static void add_external_diff_name(struct argv_array *argv,
+				   const char *name,
+				   struct diff_filespec *df)
+{
+	struct diff_tempfile *temp = prepare_temp_file(name, df);
+	argv_array_push(argv, temp->name);
+	argv_array_push(argv, temp->hex);
+	argv_array_push(argv, temp->mode);
+}
+
 /* An external diff command takes:
  *
  * diff-cmd name infile1 infile1-sha1 infile1-mode \
  *               infile2 infile2-sha1 infile2-mode [ rename-to ]
  *
  */
@@ -2893,54 +2907,38 @@
 			      struct diff_filespec *two,
 			      const char *xfrm_msg,
 			      int complete_rewrite,
 			      struct diff_options *o)
 {
 	struct argv_array argv = ARGV_ARRAY_INIT;
-	int retval;
+	struct argv_array env = ARGV_ARRAY_INIT;
 	struct diff_queue_struct *q = &diff_queued_diff;
-	const char *env[3] = { NULL };
-	char env_counter[50];
-	char env_total[50];
+
+	argv_array_push(&argv, pgm);
+	argv_array_push(&argv, name);
 
 	if (one && two) {
-		struct diff_tempfile *temp_one, *temp_two;
-		const char *othername = (other ? other : name);
-		temp_one = prepare_temp_file(name, one);
-		temp_two = prepare_temp_file(othername, two);
-		argv_array_push(&argv, pgm);
-		argv_array_push(&argv, name);
-		argv_array_push(&argv, temp_one->name);
-		argv_array_push(&argv, temp_one->hex);
-		argv_array_push(&argv, temp_one->mode);
-		argv_array_push(&argv, temp_two->name);
-		argv_array_push(&argv, temp_two->hex);
-		argv_array_push(&argv, temp_two->mode);
-		if (other) {
+		add_external_diff_name(&argv, name, one);
+		if (!other)
+			add_external_diff_name(&argv, name, two);
+		else {
+			add_external_diff_name(&argv, other, two);
 			argv_array_push(&argv, other);
 			argv_array_push(&argv, xfrm_msg);
 		}
-	} else {
-		argv_array_push(&argv, pgm);
-		argv_array_push(&argv, name);
 	}
-	fflush(NULL);
 
-	env[0] = env_counter;
-	snprintf(env_counter, sizeof(env_counter), "GIT_DIFF_PATH_COUNTER=%d",
-		 ++o->diff_path_counter);
-	env[1] = env_total;
-	snprintf(env_total, sizeof(env_total), "GIT_DIFF_PATH_TOTAL=%d", q->nr);
+	argv_array_pushf(&env, "GIT_DIFF_PATH_COUNTER=%d", ++o->diff_path_counter);
+	argv_array_pushf(&env, "GIT_DIFF_PATH_TOTAL=%d", q->nr);
+
+	if (run_command_v_opt_cd_env(argv.argv, RUN_USING_SHELL, NULL, env.argv))
+		die(_("external diff died, stopping at %s"), name);
 
-	retval = run_command_v_opt_cd_env(argv.argv, RUN_USING_SHELL, NULL, env);
 	remove_tempfile();
 	argv_array_clear(&argv);
-	if (retval) {
-		fprintf(stderr, "external diff died, stopping at %s.\n", name);
-		exit(1);
-	}
+	argv_array_clear(&env);
 }
 
 static int similarity_index(struct diff_filepair *p)
 {
 	return p->score * 100 / MAX_SCORE;
 }
@@ -3202,12 +3200,13 @@
 	options->break_opt = -1;
 	options->rename_limit = -1;
 	options->dirstat_permille = diff_dirstat_permille_default;
 	options->context = diff_context_default;
 	DIFF_OPT_SET(options, RENAME_EMPTY);
 
+	/* pathchange left =NULL by default */
 	options->change = diff_change;
 	options->add_remove = diff_addremove;
 	options->use_color = diff_use_color_default;
 	options->detect_rename = diff_detect_rename_default;
 	options->xdl_opts |= diff_algorithm;
 
@@ -3393,18 +3392,16 @@
 }
 
 int parse_long_opt(const char *opt, const char **argv,
 		   const char **optarg)
 {
 	const char *arg = argv[0];
-	if (arg[0] != '-' || arg[1] != '-')
+	if (!skip_prefix(arg, "--", &arg))
 		return 0;
-	arg += strlen("--");
-	if (!starts_with(arg, opt))
+	if (!skip_prefix(arg, opt, &arg))
 		return 0;
-	arg += strlen(opt);
 	if (*arg == '=') { /* stuck form: --option=value */
 		*optarg = arg + 1;
 		return 1;
 	}
 	if (*arg != '\0')
 		return 0;
@@ -3422,49 +3419,46 @@
 	int width = options->stat_width;
 	int name_width = options->stat_name_width;
 	int graph_width = options->stat_graph_width;
 	int count = options->stat_count;
 	int argcount = 1;
 
-	arg += strlen("--stat");
+	if (!skip_prefix(arg, "--stat", &arg))
+		die("BUG: stat option does not begin with --stat: %s", arg);
 	end = (char *)arg;
 
 	switch (*arg) {
 	case '-':
-		if (starts_with(arg, "-width")) {
-			arg += strlen("-width");
+		if (skip_prefix(arg, "-width", &arg)) {
 			if (*arg == '=')
 				width = strtoul(arg + 1, &end, 10);
 			else if (!*arg && !av[1])
 				die("Option '--stat-width' requires a value");
 			else if (!*arg) {
 				width = strtoul(av[1], &end, 10);
 				argcount = 2;
 			}
-		} else if (starts_with(arg, "-name-width")) {
-			arg += strlen("-name-width");
+		} else if (skip_prefix(arg, "-name-width", &arg)) {
 			if (*arg == '=')
 				name_width = strtoul(arg + 1, &end, 10);
 			else if (!*arg && !av[1])
 				die("Option '--stat-name-width' requires a value");
 			else if (!*arg) {
 				name_width = strtoul(av[1], &end, 10);
 				argcount = 2;
 			}
-		} else if (starts_with(arg, "-graph-width")) {
-			arg += strlen("-graph-width");
+		} else if (skip_prefix(arg, "-graph-width", &arg)) {
 			if (*arg == '=')
 				graph_width = strtoul(arg + 1, &end, 10);
 			else if (!*arg && !av[1])
 				die("Option '--stat-graph-width' requires a value");
 			else if (!*arg) {
 				graph_width = strtoul(av[1], &end, 10);
 				argcount = 2;
 			}
-		} else if (starts_with(arg, "-count")) {
-			arg += strlen("-count");
+		} else if (skip_prefix(arg, "-count", &arg)) {
 			if (*arg == '=')
 				count = strtoul(arg + 1, &end, 10);
 			else if (!*arg && !av[1])
 				die("Option '--stat-count' requires a value");
 			else if (!*arg) {
 				count = strtoul(av[1], &end, 10);
@@ -3611,23 +3605,23 @@
 	} else if (!strcmp(arg, "--numstat"))
 		options->output_format |= DIFF_FORMAT_NUMSTAT;
 	else if (!strcmp(arg, "--shortstat"))
 		options->output_format |= DIFF_FORMAT_SHORTSTAT;
 	else if (!strcmp(arg, "-X") || !strcmp(arg, "--dirstat"))
 		return parse_dirstat_opt(options, "");
-	else if (starts_with(arg, "-X"))
-		return parse_dirstat_opt(options, arg + 2);
-	else if (starts_with(arg, "--dirstat="))
-		return parse_dirstat_opt(options, arg + 10);
+	else if (skip_prefix(arg, "-X", &arg))
+		return parse_dirstat_opt(options, arg);
+	else if (skip_prefix(arg, "--dirstat=", &arg))
+		return parse_dirstat_opt(options, arg);
 	else if (!strcmp(arg, "--cumulative"))
 		return parse_dirstat_opt(options, "cumulative");
 	else if (!strcmp(arg, "--dirstat-by-file"))
 		return parse_dirstat_opt(options, "files");
-	else if (starts_with(arg, "--dirstat-by-file=")) {
+	else if (skip_prefix(arg, "--dirstat-by-file=", &arg)) {
 		parse_dirstat_opt(options, "files");
-		return parse_dirstat_opt(options, arg + 18);
+		return parse_dirstat_opt(options, arg);
 	}
 	else if (!strcmp(arg, "--check"))
 		options->output_format |= DIFF_FORMAT_CHECKDIFF;
 	else if (!strcmp(arg, "--summary"))
 		options->output_format |= DIFF_FORMAT_SUMMARY;
 	else if (!strcmp(arg, "--patch-with-stat")) {
@@ -3671,15 +3665,15 @@
 	else if (!strcmp(arg, "--rename-empty"))
 		DIFF_OPT_SET(options, RENAME_EMPTY);
 	else if (!strcmp(arg, "--no-rename-empty"))
 		DIFF_OPT_CLR(options, RENAME_EMPTY);
 	else if (!strcmp(arg, "--relative"))
 		DIFF_OPT_SET(options, RELATIVE_NAME);
-	else if (starts_with(arg, "--relative=")) {
+	else if (skip_prefix(arg, "--relative=", &arg)) {
 		DIFF_OPT_SET(options, RELATIVE_NAME);
-		options->prefix = arg + 11;
+		options->prefix = arg;
 	}
 
 	/* xdiff options */
 	else if (!strcmp(arg, "--minimal"))
 		DIFF_XDL_SET(options, NEED_MINIMAL);
 	else if (!strcmp(arg, "--no-minimal"))
@@ -3724,47 +3718,46 @@
 	else if (!strcmp(arg, "--follow"))
 		DIFF_OPT_SET(options, FOLLOW_RENAMES);
 	else if (!strcmp(arg, "--no-follow"))
 		DIFF_OPT_CLR(options, FOLLOW_RENAMES);
 	else if (!strcmp(arg, "--color"))
 		options->use_color = 1;
-	else if (starts_with(arg, "--color=")) {
-		int value = git_config_colorbool(NULL, arg+8);
+	else if (skip_prefix(arg, "--color=", &arg)) {
+		int value = git_config_colorbool(NULL, arg);
 		if (value < 0)
 			return error("option `color' expects \"always\", \"auto\", or \"never\"");
 		options->use_color = value;
 	}
 	else if (!strcmp(arg, "--no-color"))
 		options->use_color = 0;
 	else if (!strcmp(arg, "--color-words")) {
 		options->use_color = 1;
 		options->word_diff = DIFF_WORDS_COLOR;
 	}
-	else if (starts_with(arg, "--color-words=")) {
+	else if (skip_prefix(arg, "--color-words=", &arg)) {
 		options->use_color = 1;
 		options->word_diff = DIFF_WORDS_COLOR;
-		options->word_regex = arg + 14;
+		options->word_regex = arg;
 	}
 	else if (!strcmp(arg, "--word-diff")) {
 		if (options->word_diff == DIFF_WORDS_NONE)
 			options->word_diff = DIFF_WORDS_PLAIN;
 	}
-	else if (starts_with(arg, "--word-diff=")) {
-		const char *type = arg + 12;
-		if (!strcmp(type, "plain"))
+	else if (skip_prefix(arg, "--word-diff=", &arg)) {
+		if (!strcmp(arg, "plain"))
 			options->word_diff = DIFF_WORDS_PLAIN;
-		else if (!strcmp(type, "color")) {
+		else if (!strcmp(arg, "color")) {
 			options->use_color = 1;
 			options->word_diff = DIFF_WORDS_COLOR;
 		}
-		else if (!strcmp(type, "porcelain"))
+		else if (!strcmp(arg, "porcelain"))
 			options->word_diff = DIFF_WORDS_PORCELAIN;
-		else if (!strcmp(type, "none"))
+		else if (!strcmp(arg, "none"))
 			options->word_diff = DIFF_WORDS_NONE;
 		else
-			die("bad --word-diff argument: %s", type);
+			die("bad --word-diff argument: %s", arg);
 	}
 	else if ((argcount = parse_long_opt("word-diff-regex", av, &optarg))) {
 		if (options->word_diff == DIFF_WORDS_NONE)
 			options->word_diff = DIFF_WORDS_PLAIN;
 		options->word_regex = optarg;
 		return argcount;
@@ -3781,19 +3774,19 @@
 		DIFF_OPT_SET(options, ALLOW_TEXTCONV);
 	else if (!strcmp(arg, "--no-textconv"))
 		DIFF_OPT_CLR(options, ALLOW_TEXTCONV);
 	else if (!strcmp(arg, "--ignore-submodules")) {
 		DIFF_OPT_SET(options, OVERRIDE_SUBMODULE_CONFIG);
 		handle_ignore_submodules_arg(options, "all");
-	} else if (starts_with(arg, "--ignore-submodules=")) {
+	} else if (skip_prefix(arg, "--ignore-submodules=", &arg)) {
 		DIFF_OPT_SET(options, OVERRIDE_SUBMODULE_CONFIG);
-		handle_ignore_submodules_arg(options, arg + 20);
+		handle_ignore_submodules_arg(options, arg);
 	} else if (!strcmp(arg, "--submodule"))
 		DIFF_OPT_SET(options, SUBMODULE_LOG);
-	else if (starts_with(arg, "--submodule="))
-		return parse_submodule_opt(options, arg + 12);
+	else if (skip_prefix(arg, "--submodule=", &arg))
+		return parse_submodule_opt(options, arg);
 
 	/* misc options */
 	else if (!strcmp(arg, "-z"))
 		options->line_termination = 0;
 	else if ((argcount = short_opt('l', av, &optarg))) {
 		options->rename_limit = strtoul(optarg, NULL, 10);
@@ -3822,14 +3815,14 @@
 			die("unknown change class '%c' in --diff-filter=%s",
 			    offending, optarg);
 		return argcount;
 	}
 	else if (!strcmp(arg, "--abbrev"))
 		options->abbrev = DEFAULT_ABBREV;
-	else if (starts_with(arg, "--abbrev=")) {
-		options->abbrev = strtoul(arg + 9, NULL, 10);
+	else if (skip_prefix(arg, "--abbrev=", &arg)) {
+		options->abbrev = strtoul(arg, NULL, 10);
 		if (options->abbrev < MINIMUM_ABBREV)
 			options->abbrev = MINIMUM_ABBREV;
 		else if (40 < options->abbrev)
 			options->abbrev = 40;
 	}
 	else if ((argcount = parse_long_opt("src-prefix", av, &optarg))) {
@@ -3904,22 +3897,19 @@
 
 	if (*opt++ != '-')
 		return -1;
 	cmd = *opt++;
 	if (cmd == '-') {
 		/* convert the long-form arguments into short-form versions */
-		if (starts_with(opt, "break-rewrites")) {
-			opt += strlen("break-rewrites");
+		if (skip_prefix(opt, "break-rewrites", &opt)) {
 			if (*opt == 0 || *opt++ == '=')
 				cmd = 'B';
-		} else if (starts_with(opt, "find-copies")) {
-			opt += strlen("find-copies");
+		} else if (skip_prefix(opt, "find-copies", &opt)) {
 			if (*opt == 0 || *opt++ == '=')
 				cmd = 'C';
-		} else if (starts_with(opt, "find-renames")) {
-			opt += strlen("find-renames");
+		} else if (skip_prefix(opt, "find-renames", &opt)) {
 			if (*opt == 0 || *opt++ == '=')
 				cmd = 'M';
 		}
 	}
 	if (cmd != 'M' && cmd != 'C' && cmd != 'B')
 		return -1; /* that is not a -M, -C, or -B option */
@@ -4749,12 +4739,13 @@
 	struct diff_queue_struct *q = &diff_queued_diff;
 	qsort(q->queue, q->nr, sizeof(q->queue[0]), diffnamecmp);
 }
 
 void diffcore_std(struct diff_options *options)
 {
+	/* NOTE please keep the following in sync with diff_tree_combined() */
 	if (options->skip_stat_unmatch)
 		diffcore_skip_stat_unmatch(options);
 	if (!options->found_follow) {
 		/* See try_to_follow_renames() in tree-diff.c */
 		if (options->break_opt != -1)
 			diffcore_break(options->break_opt);
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-break.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-break.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-break.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-break.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-delta.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-delta.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-delta.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-delta.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-order.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-order.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-order.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-order.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-pickaxe.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-pickaxe.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-pickaxe.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-pickaxe.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-rename.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-rename.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-rename.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-rename.c	2014-08-16 06:26:55.000000000 +0800
@@ -239,38 +239,35 @@
 	int index;
 	struct diff_filespec *filespec;
 };
 
 static unsigned int hash_filespec(struct diff_filespec *filespec)
 {
-	unsigned int hash;
 	if (!filespec->sha1_valid) {
 		if (diff_populate_filespec(filespec, 0))
 			return 0;
 		hash_sha1_file(filespec->data, filespec->size, "blob", filespec->sha1);
 	}
-	memcpy(&hash, filespec->sha1, sizeof(hash));
-	return hash;
+	return sha1hash(filespec->sha1);
 }
 
 static int find_identical_files(struct hashmap *srcs,
 				int dst_index,
 				struct diff_options *options)
 {
 	int renames = 0;
 
 	struct diff_filespec *target = rename_dst[dst_index].two;
-	struct file_similarity *p, *best, dst;
+	struct file_similarity *p, *best = NULL;
 	int i = 100, best_score = -1;
 
 	/*
 	 * Find the best source match for specified destination.
 	 */
-	best = NULL;
-	hashmap_entry_init(&dst, hash_filespec(target));
-	for (p = hashmap_get(srcs, &dst, NULL); p; p = hashmap_get_next(srcs, p)) {
+	p = hashmap_get_from_hash(srcs, hash_filespec(target), NULL);
+	for (; p; p = hashmap_get_next(srcs, p)) {
 		int score;
 		struct diff_filespec *source = p->filespec;
 
 		/* False hash collision? */
 		if (hashcmp(source->sha1, target->sha1))
 			continue;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-rename.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-rename.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diffcore-rename.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diffcore-rename.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-delta.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-delta.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-delta.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-delta.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff.h	2014-08-16 06:26:55.000000000 +0800
@@ -12,12 +12,16 @@
 struct diff_queue_struct;
 struct strbuf;
 struct diff_filespec;
 struct userdiff_driver;
 struct sha1_array;
 struct commit;
+struct combine_diff_path;
+
+typedef int (*pathchange_fn_t)(struct diff_options *options,
+		 struct combine_diff_path *path);
 
 typedef void (*change_fn_t)(struct diff_options *options,
 		 unsigned old_mode, unsigned new_mode,
 		 const unsigned char *old_sha1,
 		 const unsigned char *new_sha1,
 		 int old_sha1_valid, int new_sha1_valid,
@@ -154,12 +158,13 @@
 	void (*set_default)(struct diff_options *);
 
 	FILE *file;
 	int close_file;
 
 	struct pathspec pathspec;
+	pathchange_fn_t pathchange;
 	change_fn_t change;
 	add_remove_fn_t add_remove;
 	diff_format_fn_t format_callback;
 	void *format_callback_data;
 	diff_prefix_fn_t output_prefix;
 	int output_prefix_length;
@@ -186,14 +191,16 @@
 
 const char *diff_line_prefix(struct diff_options *);
 
 
 extern const char mime_boundary_leader[];
 
-extern int diff_tree(struct tree_desc *t1, struct tree_desc *t2,
-		     const char *base, struct diff_options *opt);
+extern struct combine_diff_path *diff_tree_paths(
+	struct combine_diff_path *p, const unsigned char *sha1,
+	const unsigned char **parent_sha1, int nparent,
+	struct strbuf *base, struct diff_options *opt);
 extern int diff_tree_sha1(const unsigned char *old, const unsigned char *new,
 			  const char *base, struct diff_options *opt);
 extern int diff_root_tree_sha1(const unsigned char *new, const char *base,
                                struct diff_options *opt);
 
 struct combine_diff_path {
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-lib.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-lib.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-lib.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-lib.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-no-index.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-no-index.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff-no-index.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff-no-index.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/diff.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/diff.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/dir.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/dir.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/dir.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/dir.c	2014-08-16 06:26:55.000000000 +0800
@@ -554,14 +554,13 @@
 			return 0;
 		}
 		if (buf[size-1] != '\n') {
 			buf = xrealloc(buf, size+1);
 			buf[size++] = '\n';
 		}
-	}
-	else {
+	} else {
 		size = xsize_t(st.st_size);
 		if (size == 0) {
 			close(fd);
 			return 0;
 		}
 		buf = xmalloc(size+1);
@@ -790,94 +789,103 @@
 	struct exclude_list *el;
 	struct exclude_stack *stk = NULL;
 	int current;
 
 	group = &dir->exclude_list_group[EXC_DIRS];
 
-	/* Pop the exclude lists from the EXCL_DIRS exclude_list_group
+	/*
+	 * Pop the exclude lists from the EXCL_DIRS exclude_list_group
 	 * which originate from directories not in the prefix of the
-	 * path being checked. */
+	 * path being checked.
+	 */
 	while ((stk = dir->exclude_stack) != NULL) {
 		if (stk->baselen <= baselen &&
-		    !strncmp(dir->basebuf, base, stk->baselen))
+		    !strncmp(dir->basebuf.buf, base, stk->baselen))
 			break;
 		el = &group->el[dir->exclude_stack->exclude_ix];
 		dir->exclude_stack = stk->prev;
 		dir->exclude = NULL;
-		free((char *)el->src); /* see strdup() below */
+		free((char *)el->src); /* see strbuf_detach() below */
 		clear_exclude_list(el);
 		free(stk);
 		group->nr--;
 	}
 
 	/* Skip traversing into sub directories if the parent is excluded */
 	if (dir->exclude)
 		return;
 
+	/*
+	 * Lazy initialization. All call sites currently just
+	 * memset(dir, 0, sizeof(*dir)) before use. Changing all of
+	 * them seems lots of work for little benefit.
+	 */
+	if (!dir->basebuf.buf)
+		strbuf_init(&dir->basebuf, PATH_MAX);
+
 	/* Read from the parent directories and push them down. */
 	current = stk ? stk->baselen : -1;
+	strbuf_setlen(&dir->basebuf, current < 0 ? 0 : current);
 	while (current < baselen) {
 		struct exclude_stack *stk = xcalloc(1, sizeof(*stk));
 		const char *cp;
 
 		if (current < 0) {
 			cp = base;
 			current = 0;
-		}
-		else {
+		} else {
 			cp = strchr(base + current + 1, '/');
 			if (!cp)
 				die("oops in prep_exclude");
 			cp++;
 		}
 		stk->prev = dir->exclude_stack;
 		stk->baselen = cp - base;
 		stk->exclude_ix = group->nr;
 		el = add_exclude_list(dir, EXC_DIRS, NULL);
-		memcpy(dir->basebuf + current, base + current,
-		       stk->baselen - current);
+		strbuf_add(&dir->basebuf, base + current, stk->baselen - current);
+		assert(stk->baselen == dir->basebuf.len);
 
 		/* Abort if the directory is excluded */
 		if (stk->baselen) {
 			int dt = DT_DIR;
-			dir->basebuf[stk->baselen - 1] = 0;
+			dir->basebuf.buf[stk->baselen - 1] = 0;
 			dir->exclude = last_exclude_matching_from_lists(dir,
-				dir->basebuf, stk->baselen - 1,
-				dir->basebuf + current, &dt);
-			dir->basebuf[stk->baselen - 1] = '/';
+				dir->basebuf.buf, stk->baselen - 1,
+				dir->basebuf.buf + current, &dt);
+			dir->basebuf.buf[stk->baselen - 1] = '/';
 			if (dir->exclude &&
 			    dir->exclude->flags & EXC_FLAG_NEGATIVE)
 				dir->exclude = NULL;
 			if (dir->exclude) {
-				dir->basebuf[stk->baselen] = 0;
 				dir->exclude_stack = stk;
 				return;
 			}
 		}
 
-		/* Try to read per-directory file unless path is too long */
-		if (dir->exclude_per_dir &&
-		    stk->baselen + strlen(dir->exclude_per_dir) < PATH_MAX) {
-			strcpy(dir->basebuf + stk->baselen,
-					dir->exclude_per_dir);
+		/* Try to read per-directory file */
+		if (dir->exclude_per_dir) {
 			/*
 			 * dir->basebuf gets reused by the traversal, but we
 			 * need fname to remain unchanged to ensure the src
 			 * member of each struct exclude correctly
 			 * back-references its source file.  Other invocations
 			 * of add_exclude_list provide stable strings, so we
-			 * strdup() and free() here in the caller.
+			 * strbuf_detach() and free() here in the caller.
 			 */
-			el->src = strdup(dir->basebuf);
-			add_excludes_from_file_to_list(dir->basebuf,
-					dir->basebuf, stk->baselen, el, 1);
+			struct strbuf sb = STRBUF_INIT;
+			strbuf_addbuf(&sb, &dir->basebuf);
+			strbuf_addstr(&sb, dir->exclude_per_dir);
+			el->src = strbuf_detach(&sb, NULL);
+			add_excludes_from_file_to_list(el->src, el->src,
+						       stk->baselen, el, 1);
 		}
 		dir->exclude_stack = stk;
 		current = stk->baselen;
 	}
-	dir->basebuf[baselen] = '\0';
+	strbuf_setlen(&dir->basebuf, baselen);
 }
 
 /*
  * Loads the exclude lists for the directory containing pathname, then
  * scans all exclude lists to determine whether pathname is excluded.
  * Returns the exclude_list element which matched, or NULL for
@@ -1351,14 +1359,13 @@
 
 static int cmp_name(const void *p1, const void *p2)
 {
 	const struct dir_entry *e1 = *(const struct dir_entry **)p1;
 	const struct dir_entry *e2 = *(const struct dir_entry **)p2;
 
-	return cache_name_compare(e1->name, e1->len,
-				  e2->name, e2->len);
+	return name_compare(e1->name, e1->len, e2->name, e2->len);
 }
 
 static struct path_simplify *create_simplify(const char **pathspec)
 {
 	int nr, alloc = 0;
 	struct path_simplify *simplify = NULL;
@@ -1669,7 +1676,8 @@
 	stk = dir->exclude_stack;
 	while (stk) {
 		struct exclude_stack *prev = stk->prev;
 		free(stk);
 		stk = prev;
 	}
+	strbuf_release(&dir->basebuf);
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/dir.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/dir.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/dir.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/dir.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/dir.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/dir.h	2014-08-16 06:26:55.000000000 +0800
@@ -12,12 +12,33 @@
 
 #define EXC_FLAG_NODIR 1
 #define EXC_FLAG_ENDSWITH 4
 #define EXC_FLAG_MUSTBEDIR 8
 #define EXC_FLAG_NEGATIVE 16
 
+struct exclude {
+	/*
+	 * This allows callers of last_exclude_matching() etc.
+	 * to determine the origin of the matching pattern.
+	 */
+	struct exclude_list *el;
+
+	const char *pattern;
+	int patternlen;
+	int nowildcardlen;
+	const char *base;
+	int baselen;
+	int flags;
+
+	/*
+	 * Counting starts from 1 for line numbers in ignore files,
+	 * and from -1 decrementing for patterns from CLI args.
+	 */
+	int srcpos;
+};
+
 /*
  * Each excludes file will be parsed into a fresh exclude_list which
  * is appended to the relevant exclude_list_group (either EXC_DIRS or
  * EXC_FILE).  An exclude_list within the EXC_CMDL exclude_list_group
  * can also be used to represent the list of --exclude values passed
  * via CLI args.
@@ -29,32 +50,13 @@
 	/* remember pointer to exclude file contents so we can free() */
 	char *filebuf;
 
 	/* origin of list, e.g. path to filename, or descriptive string */
 	const char *src;
 
-	struct exclude {
-		/*
-		 * This allows callers of last_exclude_matching() etc.
-		 * to determine the origin of the matching pattern.
-		 */
-		struct exclude_list *el;
-
-		const char *pattern;
-		int patternlen;
-		int nowildcardlen;
-		const char *base;
-		int baselen;
-		int flags;
-
-		/*
-		 * Counting starts from 1 for line numbers in ignore files,
-		 * and from -1 decrementing for patterns from CLI args.
-		 */
-		int srcpos;
-	} **excludes;
+	struct exclude **excludes;
 };
 
 /*
  * The contents of the per-directory exclude files are lazily read on
  * demand and then cached in memory, one per exclude_stack struct, in
  * order to avoid opening and parsing each one every time that
@@ -114,13 +116,13 @@
 	 * basebuf contains the full path to the current
 	 * (sub)directory in the traversal. Exclude points to the
 	 * matching exclude struct if the directory is excluded.
 	 */
 	struct exclude_stack *exclude_stack;
 	struct exclude *exclude;
-	char basebuf[PATH_MAX];
+	struct strbuf basebuf;
 };
 
 /*
  * The ordering of these constants is significant, with
  * higher-numbered match types signifying "closer" (i.e. more
  * specific) matches which will override lower-numbered match types
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/dir.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/dir.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/CodingGuidelines /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/CodingGuidelines
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/CodingGuidelines	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/CodingGuidelines	2014-08-16 06:26:55.000000000 +0800
@@ -15,12 +15,20 @@
    let's use it".
 
    Again, we live in the real world, and it is sometimes a
    judgement call, the decision based more on real world
    constraints people face than what the paper standard says.
 
+ - Fixing style violations while working on a real change as a
+   preparatory clean-up step is good, but otherwise avoid useless code
+   churn for the sake of conforming to the style.
+
+   "Once it _is_ in the tree, it's not really worth the patch noise to
+   go and fix it up."
+   Cf. http://article.gmane.org/gmane.linux.kernel/943020
+
 Make your code readable and sensible, and don't try to be clever.
 
 As for more concrete guidelines, just imitate the existing code
 (this is a good guideline, no matter which project you are
 contributing to). It is always preferable to match the _local_
 convention. New code added to Git suite is expected to match
@@ -31,21 +39,39 @@
 But if you must have a list of rules, here they are.
 
 For shell scripts specifically (not exhaustive):
 
  - We use tabs for indentation.
 
- - Case arms are indented at the same depth as case and esac lines.
+ - Case arms are indented at the same depth as case and esac lines,
+   like this:
+
+	case "$variable" in
+	pattern1)
+		do this
+		;;
+	pattern2)
+		do that
+		;;
+	esac
 
  - Redirection operators should be written with space before, but no
    space after them.  In other words, write 'echo test >"$file"'
    instead of 'echo test> $file' or 'echo test > $file'.  Note that
    even though it is not required by POSIX to double-quote the
    redirection target in a variable (as shown above), our code does so
    because some versions of bash issue a warning without the quotes.
 
+	(incorrect)
+	cat hello > world < universe
+	echo hello >$world
+
+	(correct)
+	cat hello >world <universe
+	echo hello >"$world"
+
  - We prefer $( ... ) for command substitution; unlike ``, it
    properly nests.  It should have been the way Bourne spelled
    it from day one, but unfortunately isn't.
 
  - If you want to find out if a command is available on the user's
    $PATH, you should use 'type <command>', instead of 'which <command>'.
@@ -78,20 +104,39 @@
  - We do not use Process Substitution <(list) or >(list).
 
  - Do not write control structures on a single line with semicolon.
    "then" should be on the next line for if statements, and "do"
    should be on the next line for "while" and "for".
 
+	(incorrect)
+	if test -f hello; then
+		do this
+	fi
+
+	(correct)
+	if test -f hello
+	then
+		do this
+	fi
+
  - We prefer "test" over "[ ... ]".
 
  - We do not write the noiseword "function" in front of shell
    functions.
 
- - We prefer a space between the function name and the parentheses. The
-   opening "{" should also be on the same line.
-   E.g.: my_function () {
+ - We prefer a space between the function name and the parentheses,
+   and no space inside the parentheses. The opening "{" should also
+   be on the same line.
+
+	(incorrect)
+	my_function(){
+		...
+
+	(correct)
+	my_function () {
+		...
 
  - As to use of grep, stick to a subset of BRE (namely, no \{m,n\},
    [::], [==], or [..]) for portability.
 
    - We do not use \{m,n\};
 
@@ -103,12 +148,25 @@
      of BRE -- making them accessible from BRE is a GNU extension).
 
  - Use Git's gettext wrappers in git-sh-i18n to make the user
    interface translatable. See "Marking strings for translation" in
    po/README.
 
+ - We do not write our "test" command with "-a" and "-o" and use "&&"
+   or "||" to concatenate multiple "test" commands instead, because
+   the use of "-a/-o" is often error-prone.  E.g.
+
+     test -n "$x" -a "$a" = "$b"
+
+   is buggy and breaks when $x is "=", but
+
+     test -n "$x" && test "$a" = "$b"
+
+   does not have such a problem.
+
+
 For C programs:
 
  - We use tabs to indent, and interpret tabs as taking up to
    8 spaces.
 
  - We try to keep to at most 80 characters per line.
@@ -146,13 +204,13 @@
    is frowned upon.  A gray area is when the statement extends
    over a few lines, and/or you have a lengthy comment atop of
    it.  Also, like in the Linux kernel, if there is a long list
    of "else if" statements, it can make sense to add braces to
    single line blocks.
 
- - We try to avoid assignments inside if().
+ - We try to avoid assignments in the condition of an "if" statement.
 
  - Try to make your code understandable.  You may put comments
    in, but comments invariably tend to stale out when the code
    they were describing changes.  Often splitting a function
    into two makes the intention of the code much clearer.
 
@@ -174,12 +232,94 @@
 	   to be translated, that follows immediately after it */
 	_("Here is a translatable string explained by the above.");
 
  - Double negation is often harder to understand than no negation
    at all.
 
+ - There are two schools of thought when it comes to comparison,
+   especially inside a loop. Some people prefer to have the less stable
+   value on the left hand side and the more stable value on the right hand
+   side, e.g. if you have a loop that counts variable i down to the
+   lower bound,
+
+	while (i > lower_bound) {
+		do something;
+		i--;
+	}
+
+   Other people prefer to have the textual order of values match the
+   actual order of values in their comparison, so that they can
+   mentally draw a number line from left to right and place these
+   values in order, i.e.
+
+	while (lower_bound < i) {
+		do something;
+		i--;
+	}
+
+   Both are valid, and we use both.  However, the more "stable" the
+   stable side becomes, the more we tend to prefer the former
+   (comparison with a constant, "i > 0", is an extreme example).
+   Just do not mix styles in the same part of the code and mimic
+   existing styles in the neighbourhood.
+
+ - There are two schools of thought when it comes to splitting a long
+   logical line into multiple lines.  Some people push the second and
+   subsequent lines far enough to the right with tabs and align them:
+
+        if (the_beginning_of_a_very_long_expression_that_has_to ||
+		span_more_than_a_single_line_of ||
+		the_source_text) {
+                ...
+
+   while other people prefer to align the second and the subsequent
+   lines with the column immediately inside the opening parenthesis,
+   with tabs and spaces, following our "tabstop is always a multiple
+   of 8" convention:
+
+        if (the_beginning_of_a_very_long_expression_that_has_to ||
+	    span_more_than_a_single_line_of ||
+	    the_source_text) {
+                ...
+
+   Both are valid, and we use both.  Again, just do not mix styles in
+   the same part of the code and mimic existing styles in the
+   neighbourhood.
+
+ - When splitting a long logical line, some people change line before
+   a binary operator, so that the result looks like a parse tree when
+   you turn your head 90-degrees counterclockwise:
+
+        if (the_beginning_of_a_very_long_expression_that_has_to
+	    || span_more_than_a_single_line_of_the_source_text) {
+
+   while other people prefer to leave the operator at the end of the
+   line:
+
+        if (the_beginning_of_a_very_long_expression_that_has_to ||
+	    span_more_than_a_single_line_of_the_source_text) {
+
+   Both are valid, but we tend to use the latter more, unless the
+   expression gets fairly complex, in which case the former tends to
+   be easier to read.  Again, just do not mix styles in the same part
+   of the code and mimic existing styles in the neighbourhood.
+
+ - When splitting a long logical line, with everything else being
+   equal, it is preferable to split after the operator at higher
+   level in the parse tree.  That is, this is more preferable:
+
+	if (a_very_long_variable * that_is_used_in +
+	    a_very_long_expression) {
+		...
+
+   than
+
+	if (a_very_long_variable *
+	    that_is_used_in + a_very_long_expression) {
+		...
+
  - Some clever tricks, like using the !! operator with arithmetic
    constructs, can be extremely confusing to others.  Avoid them,
    unless there is a compelling reason to use them.
 
  - Use the API.  No, really.  We have a strbuf (variable length
    string), several arrays with the ALLOC_GROW() macro, a
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/config.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/config.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/config.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/config.txt	2014-08-16 06:26:55.000000000 +0800
@@ -230,23 +230,12 @@
 	of filenames done by Mac OS. This is useful when sharing a repository
 	between Mac OS and Linux or Windows.
 	(Git for Windows 1.7.10 or higher is needed, or Git under cygwin 1.7).
 	When false, file names are handled fully transparent by Git,
 	which is backward compatible with older versions of Git.
 
-core.protectHFS::
-	If set to true, do not allow checkout of paths that would
-	be considered equivalent to `.git` on an HFS+ filesystem.
-	Defaults to `true` on Mac OS, and `false` elsewhere.
-
-core.protectNTFS::
-	If set to true, do not allow checkout of paths that would
-	cause problems with the NTFS filesystem, e.g. conflict with
-	8.3 "short" names.
-	Defaults to `true` on Windows, and `false` elsewhere.
-
 core.trustctime::
 	If false, the ctime differences between the index and the
 	working tree are ignored; useful when the inode change time
 	is regularly modified by something outside Git (file system
 	crawlers and some backup systems).
 	See linkgit:git-update-index[1]. True by default.
@@ -389,13 +378,13 @@
 false), while all other repositories are assumed to be bare (bare
 = true).
 
 core.worktree::
 	Set the path to the root of the working tree.
 	This can be overridden by the GIT_WORK_TREE environment
-	variable and the '--work-tree' command line option.
+	variable and the '--work-tree' command-line option.
 	The value can be an absolute path or relative to the path to
 	the .git directory, which is either specified by --git-dir
 	or GIT_DIR, or automatically discovered.
 	If --git-dir or GIT_DIR is specified but none of
 	--work-tree, GIT_WORK_TREE and core.worktree is specified,
 	the current working directory is regarded as the top level
@@ -497,13 +486,13 @@
 	Maximum number of bytes to reserve for caching base objects
 	that may be referenced by multiple deltified objects.  By storing the
 	entire decompressed base objects in a cache Git is able
 	to avoid unpacking and decompressing frequently used base
 	objects multiple times.
 +
-Default is 16 MiB on all platforms.  This should be reasonable
+Default is 96 MiB on all platforms.  This should be reasonable
 for all users/operating systems, except on the largest projects.
 You probably do not need to adjust this value.
 +
 Common unit suffixes of 'k', 'm', or 'g' are supported.
 
 core.bigFileThreshold::
@@ -531,13 +520,13 @@
 	Some commands (e.g. svn and http interfaces) that interactively
 	ask for a password can be told to use an external program given
 	via the value of this variable. Can be overridden by the 'GIT_ASKPASS'
 	environment variable. If not set, fall back to the value of the
 	'SSH_ASKPASS' environment variable or, failing that, a simple password
 	prompt. The external program shall be given a suitable prompt as
-	command line argument and write the password on its STDOUT.
+	command-line argument and write the password on its STDOUT.
 
 core.attributesfile::
 	In addition to '.gitattributes' (per-directory) and
 	'.git/info/attributes', Git looks into this file for attributes
 	(see linkgit:gitattributes[5]). Path expansions are made the same
 	way as for `core.excludesfile`. Its default value is
@@ -552,12 +541,15 @@
 
 core.commentchar::
 	Commands such as `commit` and `tag` that lets you edit
 	messages consider a line that begins with this character
 	commented, and removes them after the editor returns
 	(default '#').
++
+If set to "auto", `git-commit` would select a character that is not
+the beginning character of any line in existing commit messages.
 
 sequence.editor::
 	Text editor used by `git rebase -i` for editing the rebase instruction file.
 	The value is meant to be interpreted by the shell when it is used.
 	It can be overridden by the `GIT_SEQUENCE_EDITOR` environment variable.
 	When not configured the default commit message editor is used instead.
@@ -566,20 +558,25 @@
 	Text viewer for use by Git commands (e.g., 'less').  The value
 	is meant to be interpreted by the shell.  The order of preference
 	is the `$GIT_PAGER` environment variable, then `core.pager`
 	configuration, then `$PAGER`, and then the default chosen at
 	compile time (usually 'less').
 +
-When the `LESS` environment variable is unset, Git sets it to `FRSX`
+When the `LESS` environment variable is unset, Git sets it to `FRX`
 (if `LESS` environment variable is set, Git does not change it at
 all).  If you want to selectively override Git's default setting
-for `LESS`, you can set `core.pager` to e.g. `less -+S`.  This will
+for `LESS`, you can set `core.pager` to e.g. `less -S`.  This will
 be passed to the shell by Git, which will translate the final
-command to `LESS=FRSX less -+S`. The environment tells the command
-to set the `S` option to chop long lines but the command line
-resets it to the default to fold long lines.
+command to `LESS=FRX less -S`. The environment does not set the
+`S` option but the command line does, instructing less to truncate
+long lines. Similarly, setting `core.pager` to `less -+F` will
+deactivate the `F` option specified by the environment from the
+command-line, deactivating the "quit if one screen" behavior of
+`less`.  One can specifically activate some flags for particular
+commands: for example, setting `pager.blame` to `less -S` enables
+line truncation only for `git blame`.
 +
 Likewise, when the `LV` environment variable is unset, Git sets it
 to `-c`.  You can override this setting by exporting `LV` with
 another value or setting `core.pager` to `lv +c`.
 
 core.whitespace::
@@ -621,15 +618,15 @@
 
 core.preloadindex::
 	Enable parallel index preload for operations like 'git diff'
 +
 This can speed up operations like 'git diff' and 'git status' especially
 on filesystems like NFS that have weak caching semantics and thus
-relatively high IO latencies.  With this set to 'true', Git will do the
+relatively high IO latencies.  When enabled, Git will do the
 index comparison to the filesystem data in parallel, allowing
-overlapping IO's.
+overlapping IO's.  Defaults to true.
 
 core.createObject::
 	You can set this to 'link', in which case a hardlink followed by
 	a delete of the source are used to make sure that object creation
 	will not overwrite existing objects.
 +
@@ -1122,12 +1119,16 @@
 format.signature::
 	The default for format-patch is to output a signature containing
 	the Git version number. Use this variable to change that default.
 	Set this variable to the empty string ("") to suppress
 	signature generation.
 
+format.signaturefile::
+	Works just like format.signature except the contents of the
+	file specified by this variable will be used as the signature.
+
 format.suffix::
 	The default for format-patch is to output files with the suffix
 	`.patch`. Use this variable to change that suffix (make sure to
 	include the dot if you want it).
 
 format.pretty::
@@ -1332,13 +1333,13 @@
 	option is ignored when the 'grep.patternType' option is set to a value
 	other than 'default'.
 
 gpg.program::
 	Use this custom program instead of "gpg" found on $PATH when
 	making or verifying a PGP signature. The program must support the
-	same command line interface as GPG, namely, to verify a detached
+	same command-line interface as GPG, namely, to verify a detached
 	signature, "gpg --verify $file - <$signature" is run, and the
 	program is expected to signal a good signature by exiting with
 	code 0, and to generate an ascii-armored detached signature, the
 	standard input of "gpg -bsau $key" is fed with the contents to be
 	signed, and the program is expected to send the result to its
 	standard output.
@@ -1901,18 +1902,13 @@
 	When true, git will use pack bitmaps (if available) when packing
 	to stdout (e.g., during the server side of a fetch). Defaults to
 	true. You should not generally need to turn this off unless
 	you are debugging pack bitmaps.
 
 pack.writebitmaps::
-	When true, git will write a bitmap index when packing all
-	objects to disk (e.g., when `git repack -a` is run).  This
-	index can speed up the "counting objects" phase of subsequent
-	packs created for clones and fetches, at the cost of some disk
-	space and extra time spent on the initial repack.  Defaults to
-	false.
+	This is a deprecated synonym for `repack.writeBitmaps`.
 
 pack.writeBitmapHashCache::
 	When true, git will include a "hash cache" section in the bitmap
 	index (if one is written). This cache can be used to feed git's
 	delta heuristics, potentially leading to better deltas between
 	bitmapped and non-bitmapped objects (e.g., when serving a fetch
@@ -2183,13 +2179,21 @@
 
 repack.packKeptObjects::
 	If set to true, makes `git repack` act as if
 	`--pack-kept-objects` was passed. See linkgit:git-repack[1] for
 	details. Defaults to `false` normally, but `true` if a bitmap
 	index is being written (either via `--write-bitmap-index` or
-	`pack.writeBitmaps`).
+	`repack.writeBitmaps`).
+
+repack.writeBitmaps::
+	When true, git will write a bitmap index when packing all
+	objects to disk (e.g., when `git repack -a` is run).  This
+	index can speed up the "counting objects" phase of subsequent
+	packs created for clones and fetches, at the cost of some disk
+	space and extra time spent on the initial repack.  Defaults to
+	false.
 
 rerere.autoupdate::
 	When set to true, `git-rerere` updates the index with the
 	resulting contents after it cleanly resolves conflicts using
 	previously recorded resolution.  Defaults to false.
 
@@ -2305,13 +2309,13 @@
 	that the summary output command will be suppressed for all
 	submodules when `diff.ignoreSubmodules` is set to 'all' or only
 	for those submodules where `submodule.<name>.ignore=all`. The only
 	exception to that rule is that status and commit will show staged
 	submodule changes. To
 	also view the summary for ignored submodules you can either use
-	the --ignore-submodules=dirty command line option or the 'git
+	the --ignore-submodules=dirty command-line option or the 'git
 	submodule summary' command, which shows a similar output but does
 	not honor these settings.
 
 submodule.<name>.path::
 submodule.<name>.url::
 submodule.<name>.update::
@@ -2327,13 +2331,13 @@
 	the `.gitmodules` file.  See linkgit:git-submodule[1] and
 	linkgit:gitmodules[5] for details.
 
 submodule.<name>.fetchRecurseSubmodules::
 	This option can be used to control recursive fetching of this
 	submodule. It can be overridden by using the --[no-]recurse-submodules
-	command line option to "git fetch" and "git pull".
+	command-line option to "git fetch" and "git pull".
 	This setting will override that from in the linkgit:gitmodules[5]
 	file.
 
 submodule.<name>.ignore::
 	Defines under what circumstances "git status" and the diff family show
 	a submodule as modified. When set to "all", it will never be considered
@@ -2347,12 +2351,17 @@
 	submodules that have untracked files in their work tree as changed.
 	This setting overrides any setting made in .gitmodules for this submodule,
 	both settings can be overridden on the command line by using the
 	"--ignore-submodules" option. The 'git submodule' commands are not
 	affected by this setting.
 
+tag.sort::
+	This variable controls the sort ordering of tags when displayed by
+	linkgit:git-tag[1]. Without the "--sort=<value>" option provided, the
+	value of this variable will be used as the default.
+
 tar.umask::
 	This variable can be used to restrict the permission bits of
 	tar archive entries.  The default is 0002, which turns off the
 	world write bit.  The special value "user" indicates that the
 	archiving user's umask will be used instead.  See umask(2) and
 	linkgit:git-archive[1].
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/diff-config.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/diff-config.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/diff-config.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/diff-config.txt	2014-08-16 06:26:55.000000000 +0800
@@ -73,13 +73,13 @@
 	Sets the default value of --ignore-submodules. Note that this
 	affects only 'git diff' Porcelain, and not lower level 'diff'
 	commands such as 'git diff-files'. 'git checkout' also honors
 	this setting when reporting uncommitted changes. Setting it to
 	'all' disables the submodule summary normally shown by 'git commit'
 	and 'git status' when 'status.submodulesummary' is set unless it is
-	overridden by using the --ignore-submodules command line option.
+	overridden by using the --ignore-submodules command-line option.
 	The 'git submodule' commands are not affected by this setting.
 
 diff.mnemonicprefix::
 	If set, 'git diff' uses a prefix pair that is different from the
 	standard "a/" and "b/" depending on what is being compared.  When
 	this configuration is in effect, reverse diff output also swaps
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/fetch-options.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/fetch-options.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/fetch-options.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/fetch-options.txt	2014-08-16 06:26:55.000000000 +0800
@@ -69,12 +69,20 @@
 	from the remote repository are fetched and stored locally.
 	This option disables this automatic tag following. The default
 	behavior for a remote may be specified with the remote.<name>.tagopt
 	setting. See linkgit:git-config[1].
 
 ifndef::git-pull[]
+--refmap=<refspec>::
+	When fetching refs listed on the command line, use the
+	specified refspec (can be given more than once) to map the
+	refs to remote-tracking branches, instead of the values of
+	`remote.*.fetch` configuration variables for the remote
+	repository.  See section on "Configured Remote-tracking
+	Branches" for details.
+
 -t::
 --tags::
 	Fetch all tags from the remote (i.e., fetch remote tags
 	`refs/tags/*` into local tags with the same name), in addition
 	to whatever else would otherwise be fetched.  Using this
 	option alone does not subject tags to pruning, even if --prune
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-bisect.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-bisect.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-bisect.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-bisect.txt	2014-08-16 06:26:55.000000000 +0800
@@ -114,13 +114,13 @@
 $ git bisect visualize
 ------------
 
 `view` may also be used as a synonym for `visualize`.
 
 If the 'DISPLAY' environment variable is not set, 'git log' is used
-instead.  You can also give command line options such as `-p` and
+instead.  You can also give command-line options such as `-p` and
 `--stat`.
 
 ------------
 $ git bisect view --stat
 ------------
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/gitcli.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/gitcli.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/gitcli.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/gitcli.txt	2014-08-16 06:26:55.000000000 +0800
@@ -1,12 +1,12 @@
 gitcli(7)
 =========
 
 NAME
 ----
-gitcli - Git command line interface and conventions
+gitcli - Git command-line interface and conventions
 
 SYNOPSIS
 --------
 gitcli
 
 
@@ -63,19 +63,19 @@
    using a '.' as a repository name in Git (a dot-repository) is a relative
    path and means your current repository.
 
 Here are the rules regarding the "flags" that you should follow when you are
 scripting Git:
 
- * it's preferred to use the non dashed form of Git commands, which means that
+ * it's preferred to use the non-dashed form of Git commands, which means that
    you should prefer `git foo` to `git-foo`.
 
  * splitting short options to separate words (prefer `git foo -a -b`
    to `git foo -ab`, the latter may not even work).
 
- * when a command line option takes an argument, use the 'stuck' form.  In
+ * when a command-line option takes an argument, use the 'stuck' form.  In
    other words, write `git foo -oArg` instead of `git foo -o Arg` for short
    options, and `git foo --long-opt=Arg` instead of `git foo --long-opt Arg`
    for long options.  An option that takes optional option-argument must be
    written in the 'stuck' form.
 
  * when you give a revision parameter to a command, make sure the parameter is
@@ -100,13 +100,13 @@
 Here is a list of the facilities provided by this option parser.
 
 
 Magic Options
 ~~~~~~~~~~~~~
 Commands which have the enhanced option parser activated all understand a
-couple of magic command line options:
+couple of magic command-line options:
 
 -h::
 	gives a pretty printed usage of the command.
 +
 ---------------------------------------------
 $ git describe -h
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-config.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-config.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-config.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-config.txt	2014-08-16 06:26:55.000000000 +0800
@@ -253,13 +253,13 @@
 values of a key from all files will be used.
 
 All writing options will per default write to the repository specific
 configuration file. Note that this also affects options like '--replace-all'
 and '--unset'. *'git config' will only ever change one file at a time*.
 
-You can override these rules either by command line options or by environment
+You can override these rules either by command-line options or by environment
 variables. The '--global' and the '--system' options will limit the file used
 to the global or system-wide file respectively. The GIT_CONFIG environment
 variable has a similar effect, but you can specify any filename you want.
 
 
 ENVIRONMENT
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-daemon.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-daemon.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-daemon.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-daemon.txt	2014-08-16 06:26:55.000000000 +0800
@@ -166,13 +166,13 @@
 	item.
 
 --allow-override=<service>::
 --forbid-override=<service>::
 	Allow/forbid overriding the site-wide default with per
 	repository configuration.  By default, all the services
-	are overridable.
+	may be overridden.
 
 --[no-]informative-errors::
 	When informative errors are turned on, git-daemon will report
 	more verbose errors to the client, differentiating conditions
 	like "no such repository" from "repository not exported". This
 	is more convenient for clients, but may leak information about
@@ -181,13 +181,13 @@
 	client. The default is --no-informative-errors.
 
 --access-hook=<path>::
 	Every time a client connects, first run an external command
 	specified by the <path> with service name (e.g. "upload-pack"),
 	path to the repository, hostname (%H), canonical hostname
-	(%CH), ip address (%IP), and tcp port (%P) as its command line
+	(%CH), IP address (%IP), and TCP port (%P) as its command-line
 	arguments. The external command can decide to decline the
 	service by exiting with a non-zero status (or to allow it by
 	exiting with a zero status).  It can also look at the $REMOTE_ADDR
 	and $REMOTE_PORT environment variables to learn about the
 	requestor when making this decision.
 +
@@ -201,13 +201,13 @@
 	of each named directory.
 
 SERVICES
 --------
 
 These services can be globally enabled/disabled using the
-command line options of this command.  If a finer-grained
+command-line options of this command.  If finer-grained
 control is desired (e.g. to allow 'git archive' to be run
 against only in a few selected repositories the daemon serves),
 the per-repository configuration file can be used to enable or
 disable them.
 
 upload-pack::
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-fast-export.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-fast-export.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-fast-export.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-fast-export.txt	2014-08-16 06:26:55.000000000 +0800
@@ -102,12 +102,16 @@
 --full-tree::
 	This option will cause fast-export to issue a "deleteall"
 	directive for each commit followed by a full list of all files
 	in the commit (as opposed to just listing the files which are
 	different from the commit's first parent).
 
+--refspec::
+	Apply the specified refspec to each ref exported. Multiple of them can
+	be specified.
+
 [<git-rev-list-args>...]::
 	A list of arguments, acceptable to 'git rev-parse' and
 	'git rev-list', that specifies the specific objects and references
 	to export.  For example, `master~10..master` causes the
 	current master reference to be exported along with all objects
 	added since its 10th ancestor commit.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-fast-import.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-fast-import.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-fast-import.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-fast-import.txt	2014-08-16 06:26:55.000000000 +0800
@@ -228,13 +228,13 @@
 frontend and useful when inspecting a fast-import data stream.
 
 Date Formats
 ~~~~~~~~~~~~
 The following date formats are supported.  A frontend should select
 the format it will use for this import by passing the format name
-in the \--date-format=<fmt> command line option.
+in the \--date-format=<fmt> command-line option.
 
 `raw`::
 	This is the Git native format and is `<time> SP <offutc>`.
 	It is also fast-import's default format, if \--date-format was
 	not specified.
 +
@@ -345,13 +345,13 @@
 	standard output.  This command is optional and is not needed
 	to perform an import.
 
 `done`::
 	Marks the end of the stream. This command is optional
 	unless the `done` feature was requested using the
-	`--done` command line option or `feature done` command.
+	`--done` command-line option or `feature done` command.
 
 `cat-blob`::
 	Causes fast-import to print a blob in 'cat-file --batch'
 	format to the file descriptor set with `--cat-blob-fd` or
 	`stdout` if unspecified.
 
@@ -434,13 +434,13 @@
 and greater-than (\x3e) symbols.  These are required to delimit
 the email address from the other fields in the line.  Note that
 `<name>` and `<email>` are free-form and may contain any sequence
 of bytes, except `LT`, `GT` and `LF`.  `<name>` is typically UTF-8 encoded.
 
 The time of the change is specified by `<when>` using the date format
-that was selected by the \--date-format=<fmt> command line option.
+that was selected by the \--date-format=<fmt> command-line option.
 See ``Date Formats'' above for the set of supported formats, and
 their syntax.
 
 `from`
 ^^^^^^
 The `from` command is used to specify the commit to initialize
@@ -480,12 +480,15 @@
 
 * A complete 40 byte or abbreviated commit SHA-1 in hex.
 
 * Any valid Git SHA-1 expression that resolves to a commit.  See
   ``SPECIFYING REVISIONS'' in linkgit:gitrevisions[7] for details.
 
+* The special null SHA-1 (40 zeros) specifies that the branch is to be
+  removed.
+
 The special case of restarting an incremental import from the
 current branch value should be written as:
 ----
 	from refs/heads/branch^0
 ----
 The `^0` suffix is necessary as fast-import does not permit a branch to
@@ -1082,13 +1085,13 @@
 without the leading '--' and is treated in the same way.
 
 Option commands must be the first commands on the input (not counting
 feature commands), to give an option command after any non-option
 command is an error.
 
-The following commandline options change import semantics and may therefore
+The following command-line options change import semantics and may therefore
 not be passed as option:
 
 * date-format
 * import-marks
 * export-marks
 * cat-blob-fd
@@ -1096,13 +1099,13 @@
 
 `done`
 ~~~~~~
 If the `done` feature is not in use, treated as if EOF was read.
 This can be used to tell fast-import to finish early.
 
-If the `--done` command line option or `feature done` command is
+If the `--done` command-line option or `feature done` command is
 in use, the `done` command is mandatory and marks the end of the
 stream.
 
 Responses To Commands
 ---------------------
 New objects written by fast-import are not available immediately.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-fetch.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-fetch.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-fetch.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-fetch.txt	2014-08-16 06:26:55.000000000 +0800
@@ -14,44 +14,95 @@
 'git fetch' --multiple [<options>] [(<repository> | <group>)...]
 'git fetch' --all [<options>]
 
 
 DESCRIPTION
 -----------
-Fetches named heads or tags from one or more other repositories,
-along with the objects necessary to complete them.
+Fetch branches and/or tags (collectively, "refs") from one or more
+other repositories, along with the objects necessary to complete their
+histories.  Remote-tracking branches are updated (see the description
+of <refspec> below for ways to control this behavior).
 
-The ref names and their object names of fetched refs are stored
-in `.git/FETCH_HEAD`.  This information is left for a later merge
-operation done by 'git merge'.
-
-By default, tags are auto-followed.  This means that when fetching
-from a remote, any tags on the remote that point to objects that exist
-in the local repository are fetched.  The effect is to fetch tags that
+By default, any tag that points into the histories being fetched is
+also fetched; the effect is to fetch tags that
 point at branches that you are interested in.  This default behavior
-can be changed by using the --tags or --no-tags options, by
-configuring remote.<name>.tagopt, or by using a refspec that fetches
-tags explicitly.
+can be changed by using the --tags or --no-tags options or by
+configuring remote.<name>.tagopt.  By using a refspec that fetches tags
+explicitly, you can fetch tags that do not point into branches you
+are interested in as well.
 
-'git fetch' can fetch from either a single named repository,
+'git fetch' can fetch from either a single named repository or URL,
 or from several repositories at once if <group> is given and
 there is a remotes.<group> entry in the configuration file.
 (See linkgit:git-config[1]).
 
 When no remote is specified, by default the `origin` remote will be used,
 unless there's an upstream branch configured for the current branch.
 
+The names of refs that are fetched, together with the object names
+they point at, are written to `.git/FETCH_HEAD`.  This information
+may be used by scripts or other git commands, such as linkgit:git-pull[1].
+
 OPTIONS
 -------
 include::fetch-options.txt[]
 
 include::pull-fetch-param.txt[]
 
 include::urls-remotes.txt[]
 
 
+CONFIGURED REMOTE-TRACKING BRANCHES[[CRTB]]
+-------------------------------------------
+
+You often interact with the same remote repository by
+regularly and repeatedly fetching from it.  In order to keep track
+of the progress of such a remote repository, `git fetch` allows you
+to configure `remote.<repository>.fetch` configuration variables.
+
+Typically such a variable may look like this:
+
+------------------------------------------------
+[remote "origin"]
+	fetch = +refs/heads/*:refs/remotes/origin/*
+------------------------------------------------
+
+This configuration is used in two ways:
+
+* When `git fetch` is run without specifying what branches
+  and/or tags to fetch on the command line, e.g. `git fetch origin`
+  or `git fetch`, `remote.<repository>.fetch` values are used as
+  the refspecs---they specify which refs to fetch and which local refs
+  to update.  The example above will fetch
+  all branches that exist in the `origin` (i.e. any ref that matches
+  the left-hand side of the value, `refs/heads/*`) and update the
+  corresponding remote-tracking branches in the `refs/remotes/origin/*`
+  hierarchy.
+
+* When `git fetch` is run with explicit branches and/or tags
+  to fetch on the command line, e.g. `git fetch origin master`, the
+  <refspec>s given on the command line determine what are to be
+  fetched (e.g. `master` in the example,
+  which is a short-hand for `master:`, which in turn means
+  "fetch the 'master' branch but I do not explicitly say what
+  remote-tracking branch to update with it from the command line"),
+  and the example command will
+  fetch _only_ the 'master' branch.  The `remote.<repository>.fetch`
+  values determine which
+  remote-tracking branch, if any, is updated.  When used in this
+  way, the `remote.<repository>.fetch` values do not have any
+  effect in deciding _what_ gets fetched (i.e. the values are not
+  used as refspecs when the command-line lists refspecs); they are
+  only used to decide _where_ the refs that are fetched are stored
+  by acting as a mapping.
+
+The latter use of the `remote.<repository>.fetch` values can be
+overridden by giving the `--refmap=<refspec>` parameter(s) on the
+command line.
+
+
 EXAMPLES
 --------
 
 * Update the remote-tracking branches:
 +
 ------------------------------------------------
@@ -73,12 +124,25 @@
 the local repository by fetching from the branches (respectively)
 `pu` and `maint` from the remote repository.
 +
 The `pu` branch will be updated even if it is does not fast-forward,
 because it is prefixed with a plus sign; `tmp` will not be.
 
+* Peek at a remote's branch, without configuring the remote in your local
+repository:
++
+------------------------------------------------
+$ git fetch git://git.kernel.org/pub/scm/git/git.git maint
+$ git log FETCH_HEAD
+------------------------------------------------
++
+The first command fetches the `maint` branch from the repository at
+`git://git.kernel.org/pub/scm/git/git.git` and the second command uses
+`FETCH_HEAD` to examine the branch with linkgit:git-log[1].  The fetched
+objects will eventually be removed by git's built-in housekeeping (see
+linkgit:git-gc[1]).
 
 BUGS
 ----
 Using --recurse-submodules can only fetch new commits in already checked
 out submodules right now. When e.g. upstream added a new submodule in the
 just fetched commits of the superproject the submodule itself can not be
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-format-patch.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-format-patch.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-format-patch.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-format-patch.txt	2014-08-16 06:26:55.000000000 +0800
@@ -11,12 +11,13 @@
 [verse]
 'git format-patch' [-k] [(-o|--output-directory) <dir> | --stdout]
 		   [--no-thread | --thread[=<style>]]
 		   [(--attach|--inline)[=<boundary>] | --no-attach]
 		   [-s | --signoff]
 		   [--signature=<signature> | --no-signature]
+		   [--signature-file=<file>]
 		   [-n | --numbered | -N | --no-numbered]
 		   [--start-number <n>] [--numbered-files]
 		   [--in-reply-to=Message-Id] [--suffix=.<sfx>]
 		   [--ignore-if-in-upstream]
 		   [--subject-prefix=Subject-Prefix] [(--reroll-count|-v) <n>]
 		   [--to=<email>] [--cc=<email>]
@@ -230,12 +231,15 @@
 --[no]-signature=<signature>::
 	Add a signature to each message produced. Per RFC 3676 the signature
 	is separated from the body by a line with '-- ' on it. If the
 	signature option is omitted the signature defaults to the Git version
 	number.
 
+--signature-file=<file>::
+	Works just like --signature except the signature is read from a file.
+
 --suffix=.<sfx>::
 	Instead of using `.patch` as the suffix for generated
 	filenames, use specified suffix.  A common alternative is
 	`--suffix=.txt`.  Leaving this empty will remove the `.patch`
 	suffix.
 +
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-grep.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-grep.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-grep.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-grep.txt	2014-08-16 06:26:55.000000000 +0800
@@ -50,12 +50,15 @@
 
 grep.extendedRegexp::
 	If set to true, enable '--extended-regexp' option by default. This
 	option is ignored when the 'grep.patternType' option is set to a value
 	other than 'default'.
 
+grep.fullName::
+	If set to true, enable '--full-name' option by default.
+
 
 OPTIONS
 -------
 --cached::
 	Instead of searching tracked files in the working tree, search
 	blobs registered in the index file.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-help.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-help.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-help.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-help.txt	2014-08-16 06:26:55.000000000 +0800
@@ -77,34 +77,34 @@
 CONFIGURATION VARIABLES
 -----------------------
 
 help.format
 ~~~~~~~~~~~
 
-If no command line option is passed, the 'help.format' configuration
+If no command-line option is passed, the 'help.format' configuration
 variable will be checked. The following values are supported for this
-variable; they make 'git help' behave as their corresponding command
+variable; they make 'git help' behave as their corresponding command-
 line option:
 
 * "man" corresponds to '-m|--man',
 * "info" corresponds to '-i|--info',
 * "web" or "html" correspond to '-w|--web'.
 
 help.browser, web.browser and browser.<tool>.path
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 The 'help.browser', 'web.browser' and 'browser.<tool>.path' will also
-be checked if the 'web' format is chosen (either by command line
+be checked if the 'web' format is chosen (either by command-line
 option or configuration variable). See '-w|--web' in the OPTIONS
 section above and linkgit:git-web{litdd}browse[1].
 
 man.viewer
 ~~~~~~~~~~
 
-The 'man.viewer' config variable will be checked if the 'man' format
-is chosen. The following values are currently supported:
+The 'man.viewer' configuration variable will be checked if the 'man'
+format is chosen. The following values are currently supported:
 
 * "man": use the 'man' program as usual,
 * "woman": use 'emacsclient' to launch the "woman" mode in emacs
 (this only works starting with emacsclient versions 22),
 * "konqueror": use 'kfmclient' to open the man page in a new konqueror
 tab (see 'Note about konqueror' below).
@@ -121,13 +121,13 @@
 ------------------------------------------------
 	[man]
 		viewer = konqueror
 		viewer = woman
 ------------------------------------------------
 
-will try to use konqueror first. But this may fail (for example if
+will try to use konqueror first. But this may fail (for example, if
 DISPLAY is not set) and in that case emacs' woman mode will be tried.
 
 If everything fails, or if no viewer is configured, the viewer specified
 in the GIT_MAN_VIEWER environment variable will be tried.  If that
 fails too, the 'man' program will be tried anyway.
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/gitk.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/gitk.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/gitk.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/gitk.txt	2014-08-16 06:26:55.000000000 +0800
@@ -24,13 +24,13 @@
 options applicable to the 'git diff-*' commands to control how the
 changes each commit introduces are shown.  Finally, it supports some
 gitk-specific options.
 
 gitk generally only understands options with arguments in the
 'sticked' form (see linkgit:gitcli[7]) due to limitations in the
-command line parser.
+command-line parser.
 
 rev-list options and arguments
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 This manual page describes only the most frequently used options.  See
 linkgit:git-rev-list[1] for a complete list.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-ls-files.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-ls-files.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-ls-files.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-ls-files.txt	2014-08-16 06:26:55.000000000 +0800
@@ -182,21 +182,21 @@
 traversing the directory tree and finding files to show when the
 flags --others or --ignored are specified.  linkgit:gitignore[5]
 specifies the format of exclude patterns.
 
 These exclude patterns come from these places, in order:
 
-  1. The command line flag --exclude=<pattern> specifies a
+  1. The command-line flag --exclude=<pattern> specifies a
      single pattern.  Patterns are ordered in the same order
      they appear in the command line.
 
-  2. The command line flag --exclude-from=<file> specifies a
+  2. The command-line flag --exclude-from=<file> specifies a
      file containing a list of patterns.  Patterns are ordered
      in the same order they appear in the file.
 
-  3. The command line flag --exclude-per-directory=<name> specifies
+  3. The command-line flag --exclude-per-directory=<name> specifies
      a name of the file in each directory 'git ls-files'
      examines, normally `.gitignore`.  Files in deeper
      directories take precedence.  Patterns are ordered in the
      same order they appear in the files.
 
 A pattern specified on the command line with --exclude or read
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-mergetool.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-mergetool.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-mergetool.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-mergetool.txt	2014-08-16 06:26:55.000000000 +0800
@@ -68,17 +68,19 @@
 	Print a list of merge tools that may be used with `--tool`.
 
 -y::
 --no-prompt::
 	Don't prompt before each invocation of the merge resolution
 	program.
+	This is the default if the merge resolution program is
+	explicitly specified with the `--tool` option or with the
+	`merge.tool` configuration variable.
 
 --prompt::
-	Prompt before each invocation of the merge resolution program.
-	This is the default behaviour; the option is provided to
-	override any configuration settings.
+	Prompt before each invocation of the merge resolution program
+	to give the user a chance to skip the path.
 
 TEMPORARY FILES
 ---------------
 `git mergetool` creates `*.orig` backup files while resolving merges.
 These are safe to remove once a file has been merged and its
 `git mergetool` session has completed.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-merge.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-merge.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-merge.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-merge.txt	2014-08-16 06:26:55.000000000 +0800
@@ -98,15 +98,14 @@
 
 <commit>...::
 	Commits, usually other branch heads, to merge into our branch.
 	Specifying more than one commit will create a merge with
 	more than two parents (affectionately called an Octopus merge).
 +
-If no commit is given from the command line, and if `merge.defaultToUpstream`
-configuration variable is set, merge the remote-tracking branches
-that the current branch is configured to use as its upstream.
+If no commit is given from the command line, merge the remote-tracking
+branches that the current branch is configured to use as its upstream.
 See also the configuration section of this manual page.
 
 
 PRE-MERGE CHECKS
 ----------------
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-patch-id.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-patch-id.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-patch-id.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-patch-id.txt	2014-08-16 06:26:55.000000000 +0800
@@ -5,31 +5,58 @@
 ----
 git-patch-id - Compute unique ID for a patch
 
 SYNOPSIS
 --------
 [verse]
-'git patch-id' < <patch>
+'git patch-id' [--stable | --unstable] < <patch>
 
 DESCRIPTION
 -----------
-A "patch ID" is nothing but a SHA-1 of the diff associated with a patch, with
-whitespace and line numbers ignored.  As such, it's "reasonably stable", but at
-the same time also reasonably unique, i.e., two patches that have the same "patch
-ID" are almost guaranteed to be the same thing.
+A "patch ID" is nothing but a sum of SHA-1 of the file diffs associated with a
+patch, with whitespace and line numbers ignored.  As such, it's "reasonably
+stable", but at the same time also reasonably unique, i.e., two patches that
+have the same "patch ID" are almost guaranteed to be the same thing.
 
 IOW, you can use this thing to look for likely duplicate commits.
 
 When dealing with 'git diff-tree' output, it takes advantage of
 the fact that the patch is prefixed with the object name of the
 commit, and outputs two 40-byte hexadecimal strings.  The first
 string is the patch ID, and the second string is the commit ID.
 This can be used to make a mapping from patch ID to commit ID.
 
 OPTIONS
 -------
+
+--stable::
+	Use a "stable" sum of hashes as the patch ID. With this option:
+	 - Reordering file diffs that make up a patch does not affect the ID.
+	   In particular, two patches produced by comparing the same two trees
+	   with two different settings for "-O<orderfile>" result in the same
+	   patch ID signature, thereby allowing the computed result to be used
+	   as a key to index some meta-information about the change between
+	   the two trees;
+
+	 - Result is different from the value produced by git 1.9 and older
+	   or produced when an "unstable" hash (see --unstable below) is
+	   configured - even when used on a diff output taken without any use
+	   of "-O<orderfile>", thereby making existing databases storing such
+	   "unstable" or historical patch-ids unusable.
+
+	This is the default if patchid.stable is set to true.
+
+--unstable::
+	Use an "unstable" hash as the patch ID. With this option,
+	the result produced is compatible with the patch-id value produced
+	by git 1.9 and older.  Users with pre-existing databases storing
+	patch-ids produced by git 1.9 and older (who do not deal with reordered
+	patches) may want to use this option.
+
+	This is the default.
+
 <patch>::
 	The diff to create the ID of.
 
 GIT
 ---
 Part of the linkgit:git[1] suite
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-push.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-push.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-push.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-push.txt	2014-08-16 06:26:55.000000000 +0800
@@ -30,13 +30,13 @@
 configuration is missing, it defaults to 'origin'.
 
 When the command line does not specify what to push with `<refspec>...`
 arguments or `--all`, `--mirror`, `--tags` options, the command finds
 the default `<refspec>` by consulting `remote.*.push` configuration,
 and if it is not found, honors `push.default` configuration to decide
-what to push (See gitlink:git-config[1] for the meaning of `push.default`).
+what to push (See linkgit:git-config[1] for the meaning of `push.default`).
 
 
 OPTIONS[[OPTIONS]]
 ------------------
 <repository>::
 	The "remote" repository that is destination of a push
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-read-tree.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-read-tree.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-read-tree.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-read-tree.txt	2014-08-16 06:26:55.000000000 +0800
@@ -280,13 +280,13 @@
 but it's actually exactly what you want in order to do a fast
 merge. The different stages represent the "result tree" (stage 0, aka
 "merged"), the original tree (stage 1, aka "orig"), and the two trees
 you are trying to merge (stage 2 and 3 respectively).
 
 The order of stages 1, 2 and 3 (hence the order of three
-<tree-ish> command line arguments) are significant when you
+<tree-ish> command-line arguments) are significant when you
 start a 3-way merge with an index file that is already
 populated.  Here is an outline of how the algorithm works:
 
 - if a file exists in identical format in all three trees, it will
   automatically collapse to "merged" state by 'git read-tree'.
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-replace.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-replace.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-replace.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-replace.txt	2014-08-16 06:26:55.000000000 +0800
@@ -6,12 +6,14 @@
 git-replace - Create, list, delete refs to replace objects
 
 SYNOPSIS
 --------
 [verse]
 'git replace' [-f] <object> <replacement>
+'git replace' [-f] --edit <object>
+'git replace' [-f] --graft <commit> [<parent>...]
 'git replace' -d <object>...
 'git replace' [--format=<format>] [-l [<pattern>]]
 
 DESCRIPTION
 -----------
 Adds a 'replace' reference in `refs/replace/` namespace.
@@ -60,12 +62,38 @@
 	be overwritten (instead of failing).
 
 -d::
 --delete::
 	Delete existing replace refs for the given objects.
 
+--edit <object>::
+	Edit an object's content interactively. The existing content
+	for <object> is pretty-printed into a temporary file, an
+	editor is launched on the file, and the result is parsed to
+	create a new object of the same type as <object>. A
+	replacement ref is then created to replace <object> with the
+	newly created object. See linkgit:git-var[1] for details about
+	how the editor will be chosen.
+
+--raw::
+	When editing, provide the raw object contents rather than
+	pretty-printed ones. Currently this only affects trees, which
+	will be shown in their binary form. This is harder to work with,
+	but can help when repairing a tree that is so corrupted it
+	cannot be pretty-printed. Note that you may need to configure
+	your editor to cleanly read and write binary data.
+
+--graft <commit> [<parent>...]::
+	Create a graft commit. A new commit is created with the same
+	content as <commit> except that its parents will be
+	[<parent>...] instead of <commit>'s parents. A replacement ref
+	is then created to replace <commit> with the newly created
+	commit. See contrib/convert-grafts-to-replace-refs.sh for an
+	example script based on this option that can convert grafts to
+	replace refs.
+
 -l <pattern>::
 --list <pattern>::
 	List replace refs for objects that match the given pattern (or
 	all if no pattern is given).
 	Typing "git replace" without arguments, also lists all replace
 	refs.
@@ -89,13 +117,15 @@
 
 CREATING REPLACEMENT OBJECTS
 ----------------------------
 
 linkgit:git-filter-branch[1], linkgit:git-hash-object[1] and
 linkgit:git-rebase[1], among other git commands, can be used to create
-replacement objects from existing objects.
+replacement objects from existing objects. The `--edit` option can
+also be used with 'git replace' to create a replacement object by
+editing an existing object.
 
 If you want to replace many blobs, trees or commits that are part of a
 string of commits, you may just want to create a replacement string of
 commits and then only replace the commit at the tip of the target
 string of commits with the commit at the tip of the replacement string
 of commits.
@@ -114,11 +144,13 @@
 --------
 linkgit:git-hash-object[1]
 linkgit:git-filter-branch[1]
 linkgit:git-rebase[1]
 linkgit:git-tag[1]
 linkgit:git-branch[1]
+linkgit:git-commit[1]
+linkgit:git-var[1]
 linkgit:git[1]
 
 GIT
 ---
 Part of the linkgit:git[1] suite
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/gitrepository-layout.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/gitrepository-layout.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/gitrepository-layout.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/gitrepository-layout.txt	2014-08-16 06:26:55.000000000 +0800
@@ -152,12 +152,16 @@
 	each hook.
 
 index::
 	The current index file for the repository.  It is
 	usually not found in a bare repository.
 
+sharedindex.<SHA-1>::
+	The shared index part, to be referenced by $GIT_DIR/index and
+	other temporary index files. Only valid in split index mode.
+
 info::
 	Additional information about the repository is recorded
 	in this directory.
 
 info/refs::
 	This file helps dumb transports discover what refs are
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-rev-parse.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-rev-parse.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-rev-parse.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-rev-parse.txt	2014-08-16 06:26:55.000000000 +0800
@@ -242,12 +242,16 @@
 	path of the current directory relative to the top-level
 	directory.
 
 --show-toplevel::
 	Show the absolute path of the top-level directory.
 
+--shared-index-path::
+	Show the path to the shared index file in split index mode, or
+	empty if not in split-index mode.
+
 Other Options
 ~~~~~~~~~~~~~
 
 --since=datestring::
 --after=datestring::
 	Parse the date string, and output the corresponding
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-send-email.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-send-email.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-send-email.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-send-email.txt	2014-08-16 06:26:55.000000000 +0800
@@ -17,13 +17,13 @@
 Takes the patches given on the command line and emails them out.
 Patches can be specified as files, directories (which will send all
 files in the directory), or directly as a revision list.  In the
 last case, any format accepted by linkgit:git-format-patch[1] can
 be passed to git send-email.
 
-The header of the email is configurable by command line options.  If not
+The header of the email is configurable via command-line options.  If not
 specified on the command line, the user will be prompted with a ReadLine
 enabled interface to provide the necessary information.
 
 There are two formats accepted for patch files:
 
 1. mbox format files
@@ -65,23 +65,23 @@
 	Invoke a text editor (see GIT_EDITOR in linkgit:git-var[1])
 	to edit an introductory message for the patch series.
 +
 When '--compose' is used, git send-email will use the From, Subject, and
 In-Reply-To headers specified in the message. If the body of the message
 (what you type after the headers and a blank line) only contains blank
-(or Git: prefixed) lines the summary won't be sent, but From, Subject,
+(or Git: prefixed) lines, the summary won't be sent, but From, Subject,
 and In-Reply-To headers will be used unless they are removed.
 +
 Missing From or In-Reply-To headers will be prompted for.
 +
 See the CONFIGURATION section for 'sendemail.multiedit'.
 
 --from=<address>::
 	Specify the sender of the emails.  If not specified on the command line,
 	the value of the 'sendemail.from' configuration option is used.  If
-	neither the command line option nor 'sendemail.from' are set, then the
+	neither the command-line option nor 'sendemail.from' are set, then the
 	user will be prompted for the value.  The default for the prompt will be
 	the value of GIT_AUTHOR_IDENT, or GIT_COMMITTER_IDENT if that is not
 	set, as returned by "git var -l".
 
 --in-reply-to=<identifier>::
 	Make the first mail (or all the mails with `--no-thread`) appear as a
@@ -245,12 +245,24 @@
 
 --[no-]signed-off-by-cc::
 	If this is set, add emails found in Signed-off-by: or Cc: lines to the
 	cc list. Default is the value of 'sendemail.signedoffbycc' configuration
 	value; if that is unspecified, default to --signed-off-by-cc.
 
+--[no-]cc-cover::
+	If this is set, emails found in Cc: headers in the first patch of
+	the series (typically the cover letter) are added to the cc list
+	for each email set. Default is the value of 'sendemail.cccover'
+	configuration value; if that is unspecified, default to --no-cc-cover.
+
+--[no-]to-cover::
+	If this is set, emails found in To: headers in the first patch of
+	the series (typically the cover letter) are added to the to list
+	for each email set. Default is the value of 'sendemail.tocover'
+	configuration value; if that is unspecified, default to --no-to-cover.
+
 --suppress-cc=<category>::
 	Specify an additional category of recipients to suppress the
 	auto-cc of:
 +
 --
 - 'author' will avoid including the patch author
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-svn.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-svn.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-svn.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-svn.txt	2014-08-16 06:26:55.000000000 +0800
@@ -145,14 +145,14 @@
 	(including automatic fetches due to 'clone', 'dcommit',
 	'rebase', etc) on a given repository.
 +
 [verse]
 config key: svn-remote.<name>.ignore-paths
 +
-If the ignore-paths config key is set and the command line option is
-also given, both regular expressions will be used.
+If the ignore-paths configuration key is set, and the command-line
+option is also given, both regular expressions will be used.
 +
 Examples:
 +
 --
 Skip "doc*" directory for every fetch;;
 +
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-tag.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-tag.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-tag.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-tag.txt	2014-08-16 06:26:55.000000000 +0800
@@ -39,13 +39,13 @@
 A GnuPG signed tag object will be created when `-s` or `-u
 <key-id>` is used.  When `-u <key-id>` is not used, the
 committer identity for the current user is used to find the
 GnuPG key for signing. 	The configuration variable `gpg.program`
 is used to specify custom GnuPG binary.
 
-Tag objects (created with `-a`, `-s`, or `-u`) are called "annotated"
+Tag objects (created with `-a`, `s`, or `-u`) are called "annotated"
 tags; they contain a creation date, the tagger name and e-mail, a
 tagging message, and an optional GnuPG signature. Whereas a
 "lightweight" tag is simply a name for an object (usually a commit
 object).
 
 Annotated tags are meant for release while lightweight tags are meant
@@ -96,13 +96,15 @@
 	them matches, the tag is shown.
 
 --sort=<type>::
 	Sort in a specific order. Supported type is "refname"
 	(lexicographic order), "version:refname" or "v:refname" (tag
 	names are treated as versions). Prepend "-" to reverse sort
-	order.
+	order. When this option is not given, the sort order defaults to the
+	value configured for the 'tag.sort' variable if it exists, or
+	lexicographic order otherwise. See linkgit:git-config[1].
 
 --column[=<options>]::
 --no-column::
 	Display tag listing in columns. See configuration variable
 	column.tag for option syntax.`--column` and `--no-column`
 	without options are equivalent to 'always' and 'never' respectively.
@@ -314,10 +316,11 @@
 
 include::date-formats.txt[]
 
 SEE ALSO
 --------
 linkgit:git-check-ref-format[1].
+linkgit:git-config[1].
 
 GIT
 ---
 Part of the linkgit:git[1] suite
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git.txt	2014-08-16 06:26:55.000000000 +0800
@@ -26,50 +26,52 @@
 commands.  The link:user-manual.html[Git User's Manual] has a more
 in-depth introduction.
 
 After you mastered the basic concepts, you can come back to this
 page to learn what commands Git offers.  You can learn more about
 individual Git commands with "git help command".  linkgit:gitcli[7]
-manual page gives you an overview of the command line command syntax.
+manual page gives you an overview of the command-line command syntax.
 
 Formatted and hyperlinked version of the latest Git documentation
 can be viewed at `http://git-htmldocs.googlecode.com/git/git.html`.
 
 ifdef::stalenotes[]
 [NOTE]
 ============
 
 You are reading the documentation for the latest (possibly
-unreleased) version of Git, that is available from 'master'
+unreleased) version of Git, that is available from the 'master'
 branch of the `git.git` repository.
 Documentation for older releases are available here:
 
-* link:v2.0.5/git.html[documentation for release 2.0.5]
+* link:v2.1.0/git.html[documentation for release 2.1]
+
+* release notes for
+  link:RelNotes/2.1.0.txt[2.1].
+
+* link:v2.0.4/git.html[documentation for release 2.0.4]
 
 * release notes for
-  link:RelNotes/2.0.5.txt[2.0.5],
   link:RelNotes/2.0.4.txt[2.0.4],
   link:RelNotes/2.0.3.txt[2.0.3],
   link:RelNotes/2.0.2.txt[2.0.2],
   link:RelNotes/2.0.1.txt[2.0.1],
   link:RelNotes/2.0.0.txt[2.0.0].
 
-* link:v1.9.5/git.html[documentation for release 1.9.5]
+* link:v1.9.4/git.html[documentation for release 1.9.4]
 
 * release notes for
-  link:RelNotes/1.9.5.txt[1.9.5],
   link:RelNotes/1.9.4.txt[1.9.4],
   link:RelNotes/1.9.3.txt[1.9.3],
   link:RelNotes/1.9.2.txt[1.9.2],
   link:RelNotes/1.9.1.txt[1.9.1],
   link:RelNotes/1.9.0.txt[1.9.0].
 
-* link:v1.8.5.6/git.html[documentation for release 1.8.5.6]
+* link:v1.8.5.5/git.html[documentation for release 1.8.5.5]
 
 * release notes for
-  link:RelNotes/1.8.5.6.txt[1.8.5.6],
   link:RelNotes/1.8.5.5.txt[1.8.5.5],
   link:RelNotes/1.8.5.4.txt[1.8.5.4],
   link:RelNotes/1.8.5.3.txt[1.8.5.3],
   link:RelNotes/1.8.5.2.txt[1.8.5.2],
   link:RelNotes/1.8.5.1.txt[1.8.5.1],
   link:RelNotes/1.8.5.txt[1.8.5].
@@ -759,13 +761,13 @@
 	specifies a path to use instead of the default `.git`
 	for the base of the repository.
 	The '--git-dir' command-line option also sets this value.
 
 'GIT_WORK_TREE'::
 	Set the path to the root of the working tree.
-	This can also be controlled by the '--work-tree' command line
+	This can also be controlled by the '--work-tree' command-line
 	option and the core.worktree configuration variable.
 
 'GIT_NAMESPACE'::
 	Set the Git namespace; see linkgit:gitnamespaces[7] for details.
 	The '--namespace' command-line option also sets this value.
 
@@ -884,13 +886,13 @@
 personal `.ssh/config` file.  Please consult your ssh documentation
 for further details.
 
 'GIT_ASKPASS'::
 	If this environment variable is set, then Git commands which need to
 	acquire passwords or passphrases (e.g. for HTTP or IMAP authentication)
-	will call this program with a suitable prompt as command line argument
+	will call this program with a suitable prompt as command-line argument
 	and read the password from its STDOUT. See also the 'core.askpass'
 	option in linkgit:git-config[1].
 
 'GIT_CONFIG_NOSYSTEM'::
 	Whether to skip reading settings from the system-wide
 	`$(prefix)/etc/gitconfig` file.  This environment variable can
@@ -908,37 +910,60 @@
 	variable is set to "0", the output of these commands will be done
 	using completely buffered I/O.   If this environment variable is
 	not set, Git will choose buffered or record-oriented flushing
 	based on whether stdout appears to be redirected to a file or not.
 
 'GIT_TRACE'::
-	If this variable is set to "1", "2" or "true" (comparison
-	is case insensitive), Git will print `trace:` messages on
-	stderr telling about alias expansion, built-in command
-	execution and external command execution.
-	If this variable is set to an integer value greater than 1
-	and lower than 10 (strictly) then Git will interpret this
-	value as an open file descriptor and will try to write the
-	trace messages into this file descriptor.
-	Alternatively, if this variable is set to an absolute path
-	(starting with a '/' character), Git will interpret this
-	as a file path and will try to write the trace messages
-	into it.
+	Enables general trace messages, e.g. alias expansion, built-in
+	command execution and external command execution.
++
+If this variable is set to "1", "2" or "true" (comparison
+is case insensitive), trace messages will be printed to
+stderr.
++
+If the variable is set to an integer value greater than 2
+and lower than 10 (strictly) then Git will interpret this
+value as an open file descriptor and will try to write the
+trace messages into this file descriptor.
++
+Alternatively, if the variable is set to an absolute path
+(starting with a '/' character), Git will interpret this
+as a file path and will try to write the trace messages
+into it.
++
+Unsetting the variable, or setting it to empty, "0" or
+"false" (case insensitive) disables trace messages.
 
 'GIT_TRACE_PACK_ACCESS'::
-	If this variable is set to a path, a file will be created at
-	the given path logging all accesses to any packs. For each
+	Enables trace messages for all accesses to any packs. For each
 	access, the pack file name and an offset in the pack is
 	recorded. This may be helpful for troubleshooting some
 	pack-related performance problems.
+	See 'GIT_TRACE' for available trace output options.
 
 'GIT_TRACE_PACKET'::
-	If this variable is set, it shows a trace of all packets
-	coming in or out of a given program. This can help with
-	debugging object negotiation or other protocol issues. Tracing
-	is turned off at a packet starting with "PACK".
+	Enables trace messages for all packets coming in or out of a
+	given program. This can help with debugging object negotiation
+	or other protocol issues. Tracing is turned off at a packet
+	starting with "PACK".
+	See 'GIT_TRACE' for available trace output options.
+
+'GIT_TRACE_PERFORMANCE'::
+	Enables performance related trace messages, e.g. total execution
+	time of each Git command.
+	See 'GIT_TRACE' for available trace output options.
+
+'GIT_TRACE_SETUP'::
+	Enables trace messages printing the .git, working tree and current
+	working directory after Git has completed its setup phase.
+	See 'GIT_TRACE' for available trace output options.
+
+'GIT_TRACE_SHALLOW'::
+	Enables trace messages that can help debugging fetching /
+	cloning of shallow repositories.
+	See 'GIT_TRACE' for available trace output options.
 
 GIT_LITERAL_PATHSPECS::
 	Setting this variable to `1` will cause Git to treat all
 	pathspecs literally, rather than as glob patterns. For example,
 	running `GIT_LITERAL_PATHSPECS=1 git log -- '*.c'` will search
 	for commits that touch the path `*.c`, not any paths that the
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-update-index.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-update-index.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-update-index.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-update-index.txt	2014-08-16 06:26:55.000000000 +0800
@@ -158,12 +158,23 @@
 may not support it yet.
 
 -z::
 	Only meaningful with `--stdin` or `--index-info`; paths are
 	separated with NUL character instead of LF.
 
+--split-index::
+--no-split-index::
+	Enable or disable split index mode. If enabled, the index is
+	split into two files, $GIT_DIR/index and $GIT_DIR/sharedindex.<SHA-1>.
+	Changes are accumulated in $GIT_DIR/index while the shared
+	index file contains all index entries stays unchanged. If
+	split-index mode is already enabled and `--split-index` is
+	given again, all changes in $GIT_DIR/index are pushed back to
+	the shared index file. This mode is designed for very large
+	indexes that take a signficant amount of time to read or write.
+
 \--::
 	Do not interpret any more arguments as options.
 
 <file>::
 	Files to act on.
 	Note that files beginning with '.' are discarded. This includes
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-update-ref.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-update-ref.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-update-ref.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-update-ref.txt	2014-08-16 06:26:55.000000000 +0800
@@ -65,22 +65,31 @@
 	create SP <ref> SP <newvalue> LF
 	delete SP <ref> [SP <oldvalue>] LF
 	verify SP <ref> [SP <oldvalue>] LF
 	option SP <opt> LF
 
 Quote fields containing whitespace as if they were strings in C source
-code.  Alternatively, use `-z` to specify commands without quoting:
+code; i.e., surrounded by double-quotes and with backslash escapes.
+Use 40 "0" characters or the empty string to specify a zero value.  To
+specify a missing value, omit the value and its preceding SP entirely.
+
+Alternatively, use `-z` to specify in NUL-terminated format, without
+quoting:
 
 	update SP <ref> NUL <newvalue> NUL [<oldvalue>] NUL
 	create SP <ref> NUL <newvalue> NUL
 	delete SP <ref> NUL [<oldvalue>] NUL
 	verify SP <ref> NUL [<oldvalue>] NUL
 	option SP <opt> NUL
 
-Lines of any other format or a repeated <ref> produce an error.
-Command meanings are:
+In this format, use 40 "0" to specify a zero value, and use the empty
+string to specify a missing value.
+
+In either format, values can be specified in any form that Git
+recognizes as an object name.  Commands in any other format or a
+repeated <ref> produce an error.  Command meanings are:
 
 update::
 	Set <ref> to <newvalue> after verifying <oldvalue>, if given.
 	Specify a zero <newvalue> to ensure the ref does not exist
 	after the update and/or a zero <oldvalue> to make sure the
 	ref does not exist before the update.
@@ -99,15 +108,12 @@
 
 option::
 	Modify behavior of the next command naming a <ref>.
 	The only valid option is `no-deref` to avoid dereferencing
 	a symbolic ref.
 
-Use 40 "0" or the empty string to specify a zero value, except that
-with `-z` an empty <oldvalue> is considered missing.
-
 If all <ref>s can be locked with matching <oldvalue>s
 simultaneously, all modifications are performed.  Otherwise, no
 modifications are performed.  Note that while each individual
 <ref> is updated or deleted atomically, a concurrent reader may
 still see a subset of the modifications.
 
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation: git-verify-commit.txt
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-web--browse.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-web--browse.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/git-web--browse.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/git-web--browse.txt	2014-08-16 06:26:55.000000000 +0800
@@ -59,13 +59,13 @@
 -----------------------
 
 CONF.VAR (from -c option) and web.browser
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 The web browser can be specified using a configuration variable passed
-with the -c (or --config) command line option, or the 'web.browser'
+with the -c (or --config) command-line option, or the 'web.browser'
 configuration variable if the former is not used.
 
 browser.<tool>.path
 ~~~~~~~~~~~~~~~~~~~
 
 You can explicitly provide a full path to your preferred browser by
@@ -84,13 +84,13 @@
 as a custom command and will use a shell eval to run the command with
 the URLs passed as arguments.
 
 Note about konqueror
 --------------------
 
-When 'konqueror' is specified by a command line option or a
+When 'konqueror' is specified by a command-line option or a
 configuration variable, we launch 'kfmclient' to try to open the HTML
 man page on an already opened konqueror in a new tab if possible.
 
 For consistency, we also try such a trick if 'browser.konqueror.path' is
 set to something like 'A_PATH_TO/konqueror'. That means we will try to
 launch 'A_PATH_TO/kfmclient' instead.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/gitweb.conf.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/gitweb.conf.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/gitweb.conf.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/gitweb.conf.txt	2014-08-16 06:26:55.000000000 +0800
@@ -901,13 +901,13 @@
 	$feature{'pickaxe'}{'override'} = 1;
 
 	$feature{'snapshot'}{'default'} = ['zip', 'tgz'];
 	$feature{'snapshot'}{'override'} = 1;
 
 If you allow overriding for the snapshot feature, you can specify which
-snapshot formats are globally disabled. You can also add any command line
+snapshot formats are globally disabled. You can also add any command-line
 options you want (such as setting the compression level). For instance, you
 can disable Zip compressed snapshots and set *gzip*(1) to run at level 6 by
 adding the following lines to your gitweb configuration file:
 
 	$known_snapshot_formats{'zip'}{'disabled'} = 1;
 	$known_snapshot_formats{'tgz'}{'compressor'} = ['gzip','-6'];
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/howto: keep-canonical-history-correct.txt
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/howto/setup-git-server-over-http.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/howto/setup-git-server-over-http.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/howto/setup-git-server-over-http.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/howto/setup-git-server-over-http.txt	2014-08-16 06:26:55.000000000 +0800
@@ -178,13 +178,13 @@
 
    $ apt-get install litmus
    $ litmus http://<servername>/my-new-repo.git <username> <password>
 
    Most tests should pass.
 
-A command line tool to test WebDAV is cadaver. If you prefer GUIs, for
+A command-line tool to test WebDAV is cadaver. If you prefer GUIs, for
 example, konqueror can open WebDAV URLs as "webdav://..." or
 "webdavs://...".
 
 If you're into Windows, from XP onwards Internet Explorer supports
 WebDAV. For this, do Internet Explorer -> Open Location ->
 http://<servername>/my-new-repo.git [x] Open as webfolder -> login .
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/Makefile /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/Makefile
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/Makefile	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/Makefile	2014-08-16 06:26:55.000000000 +0800
@@ -56,12 +56,13 @@
 SP_ARTICLES += howto/separating-topic-branches
 SP_ARTICLES += howto/revert-a-faulty-merge
 SP_ARTICLES += howto/recover-corrupted-blob-object
 SP_ARTICLES += howto/recover-corrupted-object-harder
 SP_ARTICLES += howto/rebuild-from-update-hook
 SP_ARTICLES += howto/rebase-from-internal-branch
+SP_ARTICLES += howto/keep-canonical-history-correct
 SP_ARTICLES += howto/maintain-git
 API_DOCS = $(patsubst %.txt,%,$(filter-out technical/api-index-skel.txt technical/api-index.txt, $(wildcard technical/api-*.txt)))
 SP_ARTICLES += $(API_DOCS)
 
 TECH_DOCS += technical/http-protocol
 TECH_DOCS += technical/index-format
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/pull-fetch-param.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/pull-fetch-param.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/pull-fetch-param.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/pull-fetch-param.txt	2014-08-16 06:26:55.000000000 +0800
@@ -9,70 +9,63 @@
 	A name referring to a list of repositories as the value
 	of remotes.<group> in the configuration file.
 	(See linkgit:git-config[1]).
 endif::git-pull[]
 
 <refspec>::
-	The format of a <refspec> parameter is an optional plus
-	`+`, followed by the source ref <src>, followed
-	by a colon `:`, followed by the destination ref <dst>.
+	Specifies which refs to fetch and which local refs to update.
+	When no <refspec>s appear on the command line, the refs to fetch
+	are read from `remote.<repository>.fetch` variables instead
+ifndef::git-pull[]
+	(see <<CRTB,CONFIGURED REMOTE-TRACKING BRANCHES>> below).
+endif::git-pull[]
+ifdef::git-pull[]
+	(see linkgit:git-fetch[1]).
+endif::git-pull[]
++
+The format of a <refspec> parameter is an optional plus
+`+`, followed by the source ref <src>, followed
+by a colon `:`, followed by the destination ref <dst>.
+The colon can be omitted when <dst> is empty.
++
+`tag <tag>` means the same as `refs/tags/<tag>:refs/tags/<tag>`;
+it requests fetching everything up to the given tag.
 +
 The remote ref that matches <src>
 is fetched, and if <dst> is not empty string, the local
 ref that matches it is fast-forwarded using <src>.
 If the optional plus `+` is used, the local ref
 is updated even if it does not result in a fast-forward
 update.
 +
 [NOTE]
-If the remote branch from which you want to pull is
-modified in non-linear ways such as being rewound and
-rebased frequently, then a pull will attempt a merge with
-an older version of itself, likely conflict, and fail.
-It is under these conditions that you would want to use
-the `+` sign to indicate non-fast-forward updates will
-be needed.  There is currently no easy way to determine
-or declare that a branch will be made available in a
-repository with this behavior; the pulling user simply
+When the remote branch you want to fetch is known to
+be rewound and rebased regularly, it is expected that
+its new tip will not be descendant of its previous tip
+(as stored in your remote-tracking branch the last time
+you fetched).  You would want
+to use the `+` sign to indicate non-fast-forward updates
+will be needed for such branches.  There is no way to
+determine or declare that a branch will be made available
+in a repository with this behavior; the pulling user simply
 must know this is the expected usage pattern for a branch.
-+
-[NOTE]
-You never do your own development on branches that appear
-on the right hand side of a <refspec> colon on `Pull:` lines;
-they are to be updated by 'git fetch'.  If you intend to do
-development derived from a remote branch `B`, have a `Pull:`
-line to track it (i.e. `Pull: B:remote-B`), and have a separate
-branch `my-B` to do your development on top of it.  The latter
-is created by `git branch my-B remote-B` (or its equivalent `git
-checkout -b my-B remote-B`).  Run `git fetch` to keep track of
-the progress of the remote side, and when you see something new
-on the remote branch, merge it into your development branch with
-`git pull . remote-B`, while you are on `my-B` branch.
+ifdef::git-pull[]
 +
 [NOTE]
 There is a difference between listing multiple <refspec>
 directly on 'git pull' command line and having multiple
-`Pull:` <refspec> lines for a <repository> and running
+`remote.<repository>.fetch` entries in your configuration
+for a <repository> and running a
 'git pull' command without any explicit <refspec> parameters.
-<refspec> listed explicitly on the command line are always
+<refspec>s listed explicitly on the command line are always
 merged into the current branch after fetching.  In other words,
-if you list more than one remote refs, you would be making
-an Octopus.  While 'git pull' run without any explicit <refspec>
-parameter takes default <refspec>s from `Pull:` lines, it
-merges only the first <refspec> found into the current branch,
-after fetching all the remote refs.  This is because making an
+if you list more than one remote ref, 'git pull' will create
+an Octopus merge.  On the other hand, if you do not list any
+explicit <refspec> parameter on the command line, 'git pull'
+will fetch all the <refspec>s it finds in the
+`remote.<repository>.fetch` configuration and merge
+only the first <refspec> found into the current branch.
+This is because making an
 Octopus from remote refs is rarely done, while keeping track
 of multiple remote heads in one-go by fetching more than one
 is often useful.
-+
-Some short-cut notations are also supported.
-+
-* `tag <tag>` means the same as `refs/tags/<tag>:refs/tags/<tag>`;
-  it requests fetching everything up to the given tag.
-ifndef::git-pull[]
-* A parameter <ref> without a colon fetches that ref into FETCH_HEAD,
-endif::git-pull[]
-ifdef::git-pull[]
-* A parameter <ref> without a colon merges <ref> into the current
-  branch,
 endif::git-pull[]
-  and updates the remote-tracking branches (if any).
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/RelNotes: 1.8.5.6.txt
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/RelNotes: 1.9.5.txt
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/RelNotes: 2.0.5.txt
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/RelNotes: 2.1.0.txt
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/revisions.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/revisions.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/revisions.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/revisions.txt	2014-08-16 06:26:55.000000000 +0800
@@ -91,13 +91,15 @@
   The construct '@\{-<n>\}' means the <n>th branch/commit checked out
   before the current one.
 
 '<branchname>@\{upstream\}', e.g. 'master@\{upstream\}', '@\{u\}'::
   The suffix '@\{upstream\}' to a branchname (short form '<branchname>@\{u\}')
   refers to the branch that the branch specified by branchname is set to build on
-  top of.  A missing branchname defaults to the current one.
+  top of (configured with `branch.<name>.remote` and
+  `branch.<name>.merge`).  A missing branchname defaults to the
+  current one.
 
 '<rev>{caret}', e.g. 'HEAD{caret}, v1.5.1{caret}0'::
   A suffix '{caret}' to a revision parameter means the first parent of
   that commit object.  '{caret}<n>' means the <n>th parent (i.e.
   '<rev>{caret}'
   is equivalent to '<rev>{caret}1').  As a special rule,
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/technical/api-argv-array.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical/api-argv-array.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/technical/api-argv-array.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical/api-argv-array.txt	2014-08-16 06:26:55.000000000 +0800
@@ -50,14 +50,6 @@
 	Remove the final element from the array. If there are no
 	elements in the array, do nothing.
 
 `argv_array_clear`::
 	Free all memory associated with the array and return it to the
 	initial, empty state.
-
-`argv_array_detach`::
-	Detach the argv array from the `struct argv_array`, transferring
-	ownership of the allocated array and strings.
-
-`argv_array_free_detached`::
-	Free the memory allocated by a `struct argv_array` that was later
-	detached and is now no longer needed.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/technical/api-builtin.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical/api-builtin.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/technical/api-builtin.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical/api-builtin.txt	2014-08-16 06:26:55.000000000 +0800
@@ -19,17 +19,20 @@
 
 	{ "foo", cmd_foo, <options> },
 +
 where options is the bitwise-or of:
 
 `RUN_SETUP`::
-
-	Make sure there is a Git directory to work on, and if there is a
-	work tree, chdir to the top of it if the command was invoked
-	in a subdirectory.  If there is no work tree, no chdir() is
-	done.
+	If there is not a Git directory to work on, abort.  If there
+	is a work tree, chdir to the top of it if the command was
+	invoked in a subdirectory.  If there is no work tree, no
+	chdir() is done.
+
+`RUN_SETUP_GENTLY`::
+	If there is a Git directory, chdir as per RUN_SETUP, otherwise,
+	don't chdir anywhere.
 
 `USE_PAGER`::
 
 	If the standard output is connected to a tty, spawn a pager and
 	feed our output to it.
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/technical/api-config.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical/api-config.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/technical/api-config.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical/api-config.txt	2014-08-16 06:26:55.000000000 +0800
@@ -134,7 +134,36 @@
 `git_config` respects includes automatically. The lower-level
 `git_config_from_file` does not.
 
 Writing Config Files
 --------------------
 
-TODO
+Git gives multiple entry points in the Config API to write config values to
+files namely `git_config_set_in_file` and `git_config_set`, which write to
+a specific config file or to `.git/config` respectively. They both take a
+key/value pair as parameter.
+In the end they both call `git_config_set_multivar_in_file` which takes four
+parameters:
+
+- the name of the file, as a string, to which key/value pairs will be written.
+
+- the name of key, as a string. This is in canonical "flat" form: the section,
+  subsection, and variable segments will be separated by dots, and the section
+  and variable segments will be all lowercase.
+  E.g., `core.ignorecase`, `diff.SomeType.textconv`.
+
+- the value of the variable, as a string. If value is equal to NULL, it will
+  remove the matching key from the config file.
+
+- the value regex, as a string. It will disregard key/value pairs where value
+  does not match.
+
+- a multi_replace value, as an int. If value is equal to zero, nothing or only
+  one matching key/value is replaced, else all matching key/values (regardless
+  how many) are removed, before the new pair is written.
+
+It returns 0 on success.
+
+Also, there are functions `git_config_rename_section` and
+`git_config_rename_section_in_file` with parameters `old_name` and `new_name`
+for renaming or removing sections in the config files. If NULL is passed
+through `new_name` parameter, the section will be removed from the config file.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/technical/api-hashmap.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical/api-hashmap.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/technical/api-hashmap.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical/api-hashmap.txt	2014-08-16 06:26:55.000000000 +0800
@@ -5,17 +5,25 @@
 
 Data Structures
 ---------------
 
 `struct hashmap`::
 
-	The hash table structure.
+	The hash table structure. Members can be used as follows, but should
+	not be modified directly:
 +
-The `size` member keeps track of the total number of entries. The `cmpfn`
-member is a function used to compare two entries for equality. The `table` and
-`tablesize` members store the hash table and its size, respectively.
+The `size` member keeps track of the total number of entries (0 means the
+hashmap is empty).
++
+`tablesize` is the allocated size of the hash table. A non-0 value indicates
+that the hashmap is initialized. It may also be useful for statistical purposes
+(i.e. `size / tablesize` is the current load factor).
++
+`cmpfn` stores the comparison function specified in `hashmap_init()`. In
+advanced scenarios, it may be useful to change this, e.g. to switch between
+case-sensitive and case-insensitive lookup.
 
 `struct hashmap_entry`::
 
 	An opaque structure representing an entry in the hash table, which must
 	be used as first member of user data structures. Ideally it should be
 	followed by an int-sized member to prevent unused memory on 64-bit
@@ -55,12 +63,21 @@
 +
 `strhash` and `strihash` take 0-terminated strings, while `memhash` and
 `memihash` operate on arbitrary-length memory.
 +
 `strihash` and `memihash` are case insensitive versions.
 
+`unsigned int sha1hash(const unsigned char *sha1)`::
+
+	Converts a cryptographic hash (e.g. SHA-1) into an int-sized hash code
+	for use in hash tables. Cryptographic hashes are supposed to have
+	uniform distribution, so in contrast to `memhash()`, this just copies
+	the first `sizeof(int)` bytes without shuffling any bits. Note that
+	the results will be different on big-endian and little-endian
+	platforms, so they should not be stored or transferred over the net.
+
 `void hashmap_init(struct hashmap *map, hashmap_cmp_fn equals_function, size_t initial_size)`::
 
 	Initializes a hashmap structure.
 +
 `map` is the hashmap to initialize.
 +
@@ -98,12 +115,26 @@
 hashmap_entry) that has at least been initialized with the proper hash code
 (via `hashmap_entry_init`).
 +
 If an entry with matching hash code is found, `key` and `keydata` are passed
 to `hashmap_cmp_fn` to decide whether the entry matches the key.
 
+`void *hashmap_get_from_hash(const struct hashmap *map, unsigned int hash, const void *keydata)`::
+
+	Returns the hashmap entry for the specified hash code and key data,
+	or NULL if not found.
++
+`map` is the hashmap structure.
++
+`hash` is the hash code of the entry to look up.
++
+If an entry with matching hash code is found, `keydata` is passed to
+`hashmap_cmp_fn` to decide whether the entry matches the key. The
+`entry_or_key` parameter points to a bogus hashmap_entry structure that
+should not be used in the comparison.
+
 `void *hashmap_get_next(const struct hashmap *map, const void *entry)`::
 
 	Returns the next equal hashmap entry, or NULL if not found. This can be
 	used to iterate over duplicate entries (see `hashmap_add`).
 +
 `map` is the hashmap structure.
@@ -159,12 +190,27 @@
 `hashmap_iter_next` returns the next hashmap_entry, or NULL if there are no
 more entries.
 +
 `hashmap_iter_first` is a combination of both (i.e. initializes the iterator
 and returns the first entry, if any).
 
+`const char *strintern(const char *string)`::
+`const void *memintern(const void *data, size_t len)`::
+
+	Returns the unique, interned version of the specified string or data,
+	similar to the `String.intern` API in Java and .NET, respectively.
+	Interned strings remain valid for the entire lifetime of the process.
++
+Can be used as `[x]strdup()` or `xmemdupz` replacement, except that interned
+strings / data must not be modified or freed.
++
+Interned strings are best used for short strings with high probability of
+duplicates.
++
+Uses a hashmap to store the pool of interned strings.
+
 Usage example
 -------------
 
 Here's a simple usage example that maps long keys to double values.
 ------------
 struct hashmap map;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/technical/api-run-command.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical/api-run-command.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/technical/api-run-command.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical/api-run-command.txt	2014-08-16 06:26:55.000000000 +0800
@@ -106,12 +106,19 @@
 
 The .argv member is set up as an array of string pointers (NULL
 terminated), of which .argv[0] is the program name to run (usually
 without a path). If the command to run is a git command, set argv[0] to
 the command name without the 'git-' prefix and set .git_cmd = 1.
 
+Note that the ownership of the memory pointed to by .argv stays with the
+caller, but it should survive until `finish_command` completes. If the
+.argv member is NULL, `start_command` will point it at the .args
+`argv_array` (so you may use one or the other, but you must use exactly
+one). The memory in .args will be cleaned up automatically during
+`finish_command` (or during `start_command` when it is unsuccessful).
+
 The members .in, .out, .err are used to redirect stdin, stdout,
 stderr as follows:
 
 . Specify 0 to request no special redirection. No new file descriptor
   is allocated. The child process simply inherits the channel from the
   parent.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/technical/api-strbuf.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical/api-strbuf.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/technical/api-strbuf.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical/api-strbuf.txt	2014-08-16 06:26:55.000000000 +0800
@@ -118,16 +118,34 @@
 `strbuf_reset`::
 
 	Empty the buffer by setting the size of it to zero.
 
 * Related to the contents of the buffer
 
+`strbuf_trim`::
+
+	Strip whitespace from the beginning and end of a string.
+	Equivalent to performing `strbuf_rtrim()` followed by `strbuf_ltrim()`.
+
 `strbuf_rtrim`::
 
 	Strip whitespace from the end of a string.
 
+`strbuf_ltrim`::
+
+	Strip whitespace from the beginning of a string.
+
+`strbuf_reencode`::
+
+	Replace the contents of the strbuf with a reencoded form.  Returns -1
+	on error, 0 on success.
+
+`strbuf_tolower`::
+
+	Lowercase each character in the buffer using `tolower`.
+
 `strbuf_cmp`::
 
 	Compare two buffers. Returns an integer less than, equal to, or greater
 	than zero if the first buffer is found, respectively, to be less than,
 	to match, or be greater than the second buffer.
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/technical/api-string-list.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical/api-string-list.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/technical/api-string-list.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical/api-string-list.txt	2014-08-16 06:26:55.000000000 +0800
@@ -65,12 +65,17 @@
 
 Functions
 ---------
 
 * General ones (works with sorted and unsorted lists as well)
 
+`string_list_init`::
+
+	Initialize the members of the string_list, set `strdup_strings`
+	member according to the value of the second parameter.
+
 `filter_string_list`::
 
 	Apply a function to each item in a list, retaining only the
 	items for which the function returns true.  If free_util is
 	true, call free() on the util members of any items that have
 	to be deleted.  Preserve the order of the items that are
@@ -197,6 +202,8 @@
 . The array of items are available via the `items` member.
 . The `nr` member contains the number of items stored in the list.
 . The `alloc` member is used to avoid reallocating at every insertion.
   You should not tamper with it.
 . Setting the `strdup_strings` member to 1 will strdup() the strings
   before adding them, see above.
+. The `compare_strings_fn` member is used to specify a custom compare
+  function, otherwise `strcmp()` is used as the default function.
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical: api-trace.txt
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/technical/http-protocol.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical/http-protocol.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/technical/http-protocol.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical/http-protocol.txt	2014-08-16 06:26:55.000000000 +0800
@@ -371,13 +371,13 @@
    C: 0032have <have #1>...............................
    C: 0032have <have #2>...............................
    ....
    C: 0000
 
 The stream is organized into "commands", with each command
-appearing by itself in a pkt-line.  Within a command line
+appearing by itself in a pkt-line.  Within a command line,
 the text leading up to the first space is the command name,
 and the remainder of the line to the first LF is the value.
 Command lines are terminated with an LF as the last byte of
 the pkt-line value.
 
 Commands MUST appear in the following order, if they appear
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/technical/index-format.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical/index-format.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/technical/index-format.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/technical/index-format.txt	2014-08-16 06:26:55.000000000 +0800
@@ -126,12 +126,15 @@
   1-8 nul bytes as necessary to pad the entry to a multiple of eight bytes
   while keeping the name NUL-terminated.
 
   (Version 4) In version 4, the padding after the pathname does not
   exist.
 
+  Interpretation of index entries in split index mode is completely
+  different. See below for details.
+
 == Extensions
 
 === Cached tree
 
   Cached tree extension contains pre-computed hashes for trees that can
   be derived from the index. It helps speed up tree object generation
@@ -195,6 +198,38 @@
     stage 1 to 3 (a missing stage is represented by "0" in this field);
     and
 
   - At most three 160-bit object names of the entry in stages from 1 to 3
     (nothing is written for a missing stage).
 
+=== Split index
+
+  In split index mode, the majority of index entries could be stored
+  in a separate file. This extension records the changes to be made on
+  top of that to produce the final index.
+
+  The signature for this extension is { 'l', 'i, 'n', 'k' }.
+
+  The extension consists of:
+
+  - 160-bit SHA-1 of the shared index file. The shared index file path
+    is $GIT_DIR/sharedindex.<SHA-1>. If all 160 bits are zero, the
+    index does not require a shared index file.
+
+  - An ewah-encoded delete bitmap, each bit represents an entry in the
+    shared index. If a bit is set, its corresponding entry in the
+    shared index will be removed from the final index.  Note, because
+    a delete operation changes index entry positions, but we do need
+    original positions in replace phase, it's best to just mark
+    entries for removal, then do a mass deletion after replacement.
+
+  - An ewah-encoded replace bitmap, each bit represents an entry in
+    the shared index. If a bit is set, its corresponding entry in the
+    shared index will be replaced with an entry in this index
+    file. All replaced entries are stored in sorted order in this
+    index. The first "1" bit in the replace bitmap corresponds to the
+    first index entry, the second "1" bit to the second entry and so
+    on. Replaced entries may have empty path names to save space.
+
+  The remaining index entries after replaced ones will be added to the
+  final index. These added entries are also sorted by entry namme then
+  stage.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/user-manual.txt /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/user-manual.txt
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Documentation/user-manual.txt	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Documentation/user-manual.txt	2014-08-16 06:26:55.000000000 +0800
@@ -4227,15 +4227,15 @@
 
 Most of what `git rev-list` did is contained in `revision.c` and
 `revision.h`.  It wraps the options in a struct named `rev_info`, which
 controls how and what revisions are walked, and more.
 
 The original job of `git rev-parse` is now taken by the function
-`setup_revisions()`, which parses the revisions and the common command line
+`setup_revisions()`, which parses the revisions and the common command-line
 options for the revision walker. This information is stored in the struct
-`rev_info` for later consumption. You can do your own command line option
+`rev_info` for later consumption. You can do your own command-line option
 parsing after calling `setup_revisions()`. After that, you have to call
 `prepare_revision_walk()` for initialization, and then you can get the
 commits one by one with the function `get_revision()`.
 
 If you are interested in more details of the revision walking process,
 just have a look at the first implementation of `cmd_log()`; call
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/editor.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/editor.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/editor.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/editor.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/entry.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/entry.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/entry.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/entry.c	2014-08-16 06:26:55.000000000 +0800
@@ -207,15 +207,18 @@
 	default:
 		return error("unknown file mode for %s in index", path);
 	}
 
 finish:
 	if (state->refresh_cache) {
+		assert(state->istate);
 		if (!fstat_done)
 			lstat(ce->name, &st);
 		fill_stat_cache_info(ce, &st);
+		ce->ce_flags |= CE_UPDATE_IN_BASE;
+		state->istate->cache_changed |= CE_ENTRY_CHANGED;
 	}
 	return 0;
 }
 
 /*
  * This is like 'lstat()', except it refuses to follow symlinks
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/entry.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/entry.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/entry.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/entry.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/environment.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/environment.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/environment.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/environment.c	2014-08-16 06:26:55.000000000 +0800
@@ -34,13 +34,13 @@
 int zlib_compression_level = Z_BEST_SPEED;
 int core_compression_level;
 int core_compression_seen;
 int fsync_object_files;
 size_t packed_git_window_size = DEFAULT_PACKED_GIT_WINDOW_SIZE;
 size_t packed_git_limit = DEFAULT_PACKED_GIT_LIMIT;
-size_t delta_base_cache_limit = 16 * 1024 * 1024;
+size_t delta_base_cache_limit = 96 * 1024 * 1024;
 unsigned long big_file_threshold = 512 * 1024 * 1024;
 const char *pager_program;
 int pager_use_color = 1;
 const char *editor_program;
 const char *askpass_program;
 const char *excludes_file;
@@ -61,30 +61,21 @@
 int core_apply_sparse_checkout;
 int merge_log_config = -1;
 int precomposed_unicode = -1; /* see probe_utf8_pathname_composition() */
 struct startup_info *startup_info;
 unsigned long pack_size_limit_cfg;
 
-#ifndef PROTECT_HFS_DEFAULT
-#define PROTECT_HFS_DEFAULT 0
-#endif
-int protect_hfs = PROTECT_HFS_DEFAULT;
-
-#ifndef PROTECT_NTFS_DEFAULT
-#define PROTECT_NTFS_DEFAULT 0
-#endif
-int protect_ntfs = PROTECT_NTFS_DEFAULT;
-
 /*
  * The character that begins a commented line in user-editable file
  * that is subject to stripspace.
  */
 char comment_line_char = '#';
+int auto_comment_line_char;
 
 /* Parallel index stat data preload? */
-int core_preload_index = 0;
+int core_preload_index = 1;
 
 /* This is set by setup_git_dir_gently() and/or git_default_config() */
 char *git_work_tree_cfg;
 static char *work_tree;
 
 static const char *namespace;
@@ -130,35 +121,31 @@
 	if (check_refname_format(buf.buf, 0))
 		die("bad git namespace path \"%s\"", raw_namespace);
 	strbuf_addch(&buf, '/');
 	return strbuf_detach(&buf, NULL);
 }
 
+static char *git_path_from_env(const char *envvar, const char *path)
+{
+	const char *value = getenv(envvar);
+	return value ? xstrdup(value) : git_pathdup("%s", path);
+}
+
 static void setup_git_env(void)
 {
 	const char *gitfile;
 	const char *shallow_file;
 
 	git_dir = getenv(GIT_DIR_ENVIRONMENT);
 	if (!git_dir)
 		git_dir = DEFAULT_GIT_DIR_ENVIRONMENT;
 	gitfile = read_gitfile(git_dir);
 	git_dir = xstrdup(gitfile ? gitfile : git_dir);
-	git_object_dir = getenv(DB_ENVIRONMENT);
-	if (!git_object_dir) {
-		git_object_dir = xmalloc(strlen(git_dir) + 9);
-		sprintf(git_object_dir, "%s/objects", git_dir);
-	}
-	git_index_file = getenv(INDEX_ENVIRONMENT);
-	if (!git_index_file) {
-		git_index_file = xmalloc(strlen(git_dir) + 7);
-		sprintf(git_index_file, "%s/index", git_dir);
-	}
-	git_graft_file = getenv(GRAFT_ENVIRONMENT);
-	if (!git_graft_file)
-		git_graft_file = git_pathdup("info/grafts");
+	git_object_dir = git_path_from_env(DB_ENVIRONMENT, "objects");
+	git_index_file = git_path_from_env(INDEX_ENVIRONMENT, "index");
+	git_graft_file = git_path_from_env(GRAFT_ENVIRONMENT, "info/grafts");
 	if (getenv(NO_REPLACE_OBJECTS_ENVIRONMENT))
 		check_replace_refs = 0;
 	namespace = expand_namespace(getenv(GIT_NAMESPACE_ENVIRONMENT));
 	namespace_len = strlen(namespace);
 	shallow_file = getenv(GIT_SHALLOW_FILE_ENVIRONMENT);
 	if (shallow_file)
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/environment.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/environment.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/environment.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/environment.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/bitmap.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/bitmap.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/bitmap.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/bitmap.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_bitmap.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_bitmap.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_bitmap.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_bitmap.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_io.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_io.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_io.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_io.c	2014-08-16 06:26:55.000000000 +0800
@@ -107,15 +107,15 @@
 
 int ewah_serialize(struct ewah_bitmap *self, int fd)
 {
 	return ewah_serialize_to(self, write_helper, (void *)(intptr_t)fd);
 }
 
-int ewah_read_mmap(struct ewah_bitmap *self, void *map, size_t len)
+int ewah_read_mmap(struct ewah_bitmap *self, const void *map, size_t len)
 {
-	uint8_t *ptr = map;
+	const uint8_t *ptr = map;
 	size_t i;
 
 	self->bit_size = get_be32(ptr);
 	ptr += sizeof(uint32_t);
 
 	self->buffer_size = self->alloc_size = get_be32(ptr);
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_io.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_io.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_io.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_io.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_rlw.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_rlw.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewah_rlw.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewah_rlw.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewok.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewok.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ewah/ewok.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ewah/ewok.h	2014-08-16 06:26:55.000000000 +0800
@@ -96,14 +96,13 @@
 		      int (*write_fun)(void *out, const void *buf, size_t len),
 		      void *out);
 int ewah_serialize(struct ewah_bitmap *self, int fd);
 int ewah_serialize_native(struct ewah_bitmap *self, int fd);
 
 int ewah_deserialize(struct ewah_bitmap *self, int fd);
-int ewah_read_mmap(struct ewah_bitmap *self, void *map, size_t len);
-int ewah_read_mmap_native(struct ewah_bitmap *self, void *map, size_t len);
+int ewah_read_mmap(struct ewah_bitmap *self, const void *map, size_t len);
 
 uint32_t ewah_checksum(struct ewah_bitmap *self);
 
 /**
  * Logical not (bitwise negation) in-place on the bitmap
  *
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/exec_cmd.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/exec_cmd.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/exec_cmd.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/exec_cmd.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fast-import.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fast-import.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fast-import.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fast-import.c	2014-08-16 06:26:55.000000000 +0800
@@ -245,12 +245,13 @@
 	struct branch *active_next_branch;
 	const char *name;
 	struct tree_entry branch_tree;
 	uintmax_t last_commit;
 	uintmax_t num_notes;
 	unsigned active : 1;
+	unsigned delete : 1;
 	unsigned pack_id : PACK_ID_BITS;
 	unsigned char sha1[20];
 };
 
 struct tag {
 	struct tag *next_tag;
@@ -367,14 +368,14 @@
 static volatile sig_atomic_t checkpoint_requested;
 
 /* Where to write output of cat-blob commands */
 static int cat_blob_fd = STDOUT_FILENO;
 
 static void parse_argv(void);
-static void parse_cat_blob(void);
-static void parse_ls(struct branch *b);
+static void parse_cat_blob(const char *p);
+static void parse_ls(const char *p, struct branch *b);
 
 static void write_branch_report(FILE *rpt, struct branch *b)
 {
 	fprintf(rpt, "%s:\n", b->name);
 
 	fprintf(rpt, "  status      :");
@@ -1678,16 +1679,19 @@
 static int update_branch(struct branch *b)
 {
 	static const char *msg = "fast-import";
 	struct ref_lock *lock;
 	unsigned char old_sha1[20];
 
-	if (is_null_sha1(b->sha1))
-		return 0;
 	if (read_ref(b->name, old_sha1))
 		hashclr(old_sha1);
+	if (is_null_sha1(b->sha1)) {
+		if (b->delete)
+			delete_ref(b->name, old_sha1, 0);
+		return 0;
+	}
 	lock = lock_any_ref_for_update(b->name, old_sha1, 0, NULL);
 	if (!lock)
 		return error("Unable to lock %s", b->name);
 	if (!force_update && !is_null_sha1(old_sha1)) {
 		struct commit *old_cmit, *new_cmit;
 
@@ -1854,12 +1858,14 @@
 	if (stdin_eof) {
 		unread_command_buf = 0;
 		return EOF;
 	}
 
 	for (;;) {
+		const char *p;
+
 		if (unread_command_buf) {
 			unread_command_buf = 0;
 		} else {
 			struct recent_command *rc;
 
 			strbuf_detach(&command_buf, NULL);
@@ -1886,14 +1892,14 @@
 			rc->buf = command_buf.buf;
 			rc->prev = cmd_tail;
 			rc->next = cmd_hist.prev;
 			rc->prev->next = rc;
 			cmd_tail = rc;
 		}
-		if (starts_with(command_buf.buf, "cat-blob ")) {
-			parse_cat_blob();
+		if (skip_prefix(command_buf.buf, "cat-blob ", &p)) {
+			parse_cat_blob(p);
 			continue;
 		}
 		if (command_buf.buf[0] == '#')
 			continue;
 		return 0;
 	}
@@ -1905,30 +1911,32 @@
 	if (term_char != '\n' && term_char != EOF)
 		ungetc(term_char, stdin);
 }
 
 static void parse_mark(void)
 {
-	if (starts_with(command_buf.buf, "mark :")) {
-		next_mark = strtoumax(command_buf.buf + 6, NULL, 10);
+	const char *v;
+	if (skip_prefix(command_buf.buf, "mark :", &v)) {
+		next_mark = strtoumax(v, NULL, 10);
 		read_next_command();
 	}
 	else
 		next_mark = 0;
 }
 
 static int parse_data(struct strbuf *sb, uintmax_t limit, uintmax_t *len_res)
 {
+	const char *data;
 	strbuf_reset(sb);
 
-	if (!starts_with(command_buf.buf, "data "))
+	if (!skip_prefix(command_buf.buf, "data ", &data))
 		die("Expected 'data n' command, found: %s", command_buf.buf);
 
-	if (starts_with(command_buf.buf + 5, "<<")) {
-		char *term = xstrdup(command_buf.buf + 5 + 2);
-		size_t term_len = command_buf.len - 5 - 2;
+	if (skip_prefix(data, "<<", &data)) {
+		char *term = xstrdup(data);
+		size_t term_len = command_buf.len - (data - command_buf.buf);
 
 		strbuf_detach(&command_buf, NULL);
 		for (;;) {
 			if (strbuf_getline(&command_buf, stdin, '\n') == EOF)
 				die("EOF in data (terminator '%s' not found)", term);
 			if (term_len == command_buf.len
@@ -1937,13 +1945,13 @@
 			strbuf_addbuf(sb, &command_buf);
 			strbuf_addch(sb, '\n');
 		}
 		free(term);
 	}
 	else {
-		uintmax_t len = strtoumax(command_buf.buf + 5, NULL, 10);
+		uintmax_t len = strtoumax(data, NULL, 10);
 		size_t n = 0, length = (size_t)len;
 
 		if (limit && limit < len) {
 			*len_res = len;
 			return 0;
 		}
@@ -2258,21 +2266,20 @@
 static uintmax_t parse_mark_ref_space(const char **p)
 {
 	uintmax_t mark;
 	char *end;
 
 	mark = parse_mark_ref(*p, &end);
-	if (*end != ' ')
+	if (*end++ != ' ')
 		die("Missing space after mark: %s", command_buf.buf);
 	*p = end;
 	return mark;
 }
 
-static void file_change_m(struct branch *b)
+static void file_change_m(const char *p, struct branch *b)
 {
-	const char *p = command_buf.buf + 2;
 	static struct strbuf uq = STRBUF_INIT;
 	const char *endp;
 	struct object_entry *oe;
 	unsigned char sha1[20];
 	uint16_t mode, inline_data = 0;
 
@@ -2294,36 +2301,33 @@
 		die("Corrupt mode: %s", command_buf.buf);
 	}
 
 	if (*p == ':') {
 		oe = find_mark(parse_mark_ref_space(&p));
 		hashcpy(sha1, oe->idx.sha1);
-	} else if (starts_with(p, "inline ")) {
+	} else if (skip_prefix(p, "inline ", &p)) {
 		inline_data = 1;
 		oe = NULL; /* not used with inline_data, but makes gcc happy */
-		p += strlen("inline");  /* advance to space */
 	} else {
 		if (get_sha1_hex(p, sha1))
 			die("Invalid dataref: %s", command_buf.buf);
 		oe = find_object(sha1);
 		p += 40;
-		if (*p != ' ')
+		if (*p++ != ' ')
 			die("Missing space after SHA1: %s", command_buf.buf);
 	}
-	assert(*p == ' ');
-	p++;  /* skip space */
 
 	strbuf_reset(&uq);
 	if (!unquote_c_style(&uq, p, &endp)) {
 		if (*endp)
 			die("Garbage after path in: %s", command_buf.buf);
 		p = uq.buf;
 	}
 
 	/* Git does not track empty, non-toplevel directories. */
-	if (S_ISDIR(mode) && !memcmp(sha1, EMPTY_TREE_SHA1_BIN, 20) && *p) {
+	if (S_ISDIR(mode) && !hashcmp(sha1, EMPTY_TREE_SHA1_BIN) && *p) {
 		tree_content_remove(&b->branch_tree, p, NULL, 0);
 		return;
 	}
 
 	if (S_ISGITLINK(mode)) {
 		if (inline_data)
@@ -2367,36 +2371,34 @@
 		tree_content_replace(&b->branch_tree, sha1, mode, NULL);
 		return;
 	}
 	tree_content_set(&b->branch_tree, p, sha1, mode, NULL);
 }
 
-static void file_change_d(struct branch *b)
+static void file_change_d(const char *p, struct branch *b)
 {
-	const char *p = command_buf.buf + 2;
 	static struct strbuf uq = STRBUF_INIT;
 	const char *endp;
 
 	strbuf_reset(&uq);
 	if (!unquote_c_style(&uq, p, &endp)) {
 		if (*endp)
 			die("Garbage after path in: %s", command_buf.buf);
 		p = uq.buf;
 	}
 	tree_content_remove(&b->branch_tree, p, NULL, 1);
 }
 
-static void file_change_cr(struct branch *b, int rename)
+static void file_change_cr(const char *s, struct branch *b, int rename)
 {
-	const char *s, *d;
+	const char *d;
 	static struct strbuf s_uq = STRBUF_INIT;
 	static struct strbuf d_uq = STRBUF_INIT;
 	const char *endp;
 	struct tree_entry leaf;
 
-	s = command_buf.buf + 2;
 	strbuf_reset(&s_uq);
 	if (!unquote_c_style(&s_uq, s, &endp)) {
 		if (*endp != ' ')
 			die("Missing space after source: %s", command_buf.buf);
 	} else {
 		endp = strchr(s, ' ');
@@ -2435,15 +2437,14 @@
 	tree_content_set(&b->branch_tree, d,
 		leaf.versions[1].sha1,
 		leaf.versions[1].mode,
 		leaf.tree);
 }
 
-static void note_change_n(struct branch *b, unsigned char *old_fanout)
+static void note_change_n(const char *p, struct branch *b, unsigned char *old_fanout)
 {
-	const char *p = command_buf.buf + 2;
 	static struct strbuf uq = STRBUF_INIT;
 	struct object_entry *oe;
 	struct branch *s;
 	unsigned char sha1[20], commit_sha1[20];
 	char path[60];
 	uint16_t inline_data = 0;
@@ -2467,26 +2468,23 @@
 
 	/* Now parse the notemodify command. */
 	/* <dataref> or 'inline' */
 	if (*p == ':') {
 		oe = find_mark(parse_mark_ref_space(&p));
 		hashcpy(sha1, oe->idx.sha1);
-	} else if (starts_with(p, "inline ")) {
+	} else if (skip_prefix(p, "inline ", &p)) {
 		inline_data = 1;
 		oe = NULL; /* not used with inline_data, but makes gcc happy */
-		p += strlen("inline");  /* advance to space */
 	} else {
 		if (get_sha1_hex(p, sha1))
 			die("Invalid dataref: %s", command_buf.buf);
 		oe = find_object(sha1);
 		p += 40;
-		if (*p != ' ')
+		if (*p++ != ' ')
 			die("Missing space after SHA1: %s", command_buf.buf);
 	}
-	assert(*p == ' ');
-	p++;  /* skip space */
 
 	/* <commit-ish> */
 	s = lookup_branch(p);
 	if (s) {
 		if (is_null_sha1(s->sha1))
 			die("Can't add a note on empty branch.");
@@ -2578,21 +2576,20 @@
 
 static int parse_from(struct branch *b)
 {
 	const char *from;
 	struct branch *s;
 
-	if (!starts_with(command_buf.buf, "from "))
+	if (!skip_prefix(command_buf.buf, "from ", &from))
 		return 0;
 
 	if (b->branch_tree.tree) {
 		release_tree_content_recursive(b->branch_tree.tree);
 		b->branch_tree.tree = NULL;
 	}
 
-	from = strchr(command_buf.buf, ' ') + 1;
 	s = lookup_branch(from);
 	if (b == s)
 		die("Can't create a branch from itself: %s", b->name);
 	else if (s) {
 		unsigned char *t = s->branch_tree.versions[1].sha1;
 		hashcpy(b->sha1, s->sha1);
@@ -2608,14 +2605,17 @@
 			unsigned long size;
 			char *buf = gfi_unpack_entry(oe, &size);
 			parse_from_commit(b, buf, size);
 			free(buf);
 		} else
 			parse_from_existing(b);
-	} else if (!get_sha1(from, b->sha1))
+	} else if (!get_sha1(from, b->sha1)) {
 		parse_from_existing(b);
+		if (is_null_sha1(b->sha1))
+			b->delete = 1;
+	}
 	else
 		die("Invalid ref name or SHA1 expression: %s", from);
 
 	read_next_command();
 	return 1;
 }
@@ -2624,14 +2624,13 @@
 {
 	struct hash_list *list = NULL, **tail = &list, *n;
 	const char *from;
 	struct branch *s;
 
 	*count = 0;
-	while (starts_with(command_buf.buf, "merge ")) {
-		from = strchr(command_buf.buf, ' ') + 1;
+	while (skip_prefix(command_buf.buf, "merge ", &from)) {
 		n = xmalloc(sizeof(*n));
 		s = lookup_branch(from);
 		if (s)
 			hashcpy(n->sha1, s->sha1);
 		else if (*from == ':') {
 			uintmax_t idnum = parse_mark_ref_eol(from);
@@ -2656,37 +2655,35 @@
 		(*count)++;
 		read_next_command();
 	}
 	return list;
 }
 
-static void parse_new_commit(void)
+static void parse_new_commit(const char *arg)
 {
 	static struct strbuf msg = STRBUF_INIT;
 	struct branch *b;
-	char *sp;
 	char *author = NULL;
 	char *committer = NULL;
 	struct hash_list *merge_list = NULL;
 	unsigned int merge_count;
 	unsigned char prev_fanout, new_fanout;
+	const char *v;
 
-	/* Obtain the branch name from the rest of our command */
-	sp = strchr(command_buf.buf, ' ') + 1;
-	b = lookup_branch(sp);
+	b = lookup_branch(arg);
 	if (!b)
-		b = new_branch(sp);
+		b = new_branch(arg);
 
 	read_next_command();
 	parse_mark();
-	if (starts_with(command_buf.buf, "author ")) {
-		author = parse_ident(command_buf.buf + 7);
+	if (skip_prefix(command_buf.buf, "author ", &v)) {
+		author = parse_ident(v);
 		read_next_command();
 	}
-	if (starts_with(command_buf.buf, "committer ")) {
-		committer = parse_ident(command_buf.buf + 10);
+	if (skip_prefix(command_buf.buf, "committer ", &v)) {
+		committer = parse_ident(v);
 		read_next_command();
 	}
 	if (!committer)
 		die("Expected committer but didn't get one");
 	parse_data(&msg, 0, NULL);
 	read_next_command();
@@ -2700,26 +2697,26 @@
 	}
 
 	prev_fanout = convert_num_notes_to_fanout(b->num_notes);
 
 	/* file_change* */
 	while (command_buf.len > 0) {
-		if (starts_with(command_buf.buf, "M "))
-			file_change_m(b);
-		else if (starts_with(command_buf.buf, "D "))
-			file_change_d(b);
-		else if (starts_with(command_buf.buf, "R "))
-			file_change_cr(b, 1);
-		else if (starts_with(command_buf.buf, "C "))
-			file_change_cr(b, 0);
-		else if (starts_with(command_buf.buf, "N "))
-			note_change_n(b, &prev_fanout);
+		if (skip_prefix(command_buf.buf, "M ", &v))
+			file_change_m(v, b);
+		else if (skip_prefix(command_buf.buf, "D ", &v))
+			file_change_d(v, b);
+		else if (skip_prefix(command_buf.buf, "R ", &v))
+			file_change_cr(v, b, 1);
+		else if (skip_prefix(command_buf.buf, "C ", &v))
+			file_change_cr(v, b, 0);
+		else if (skip_prefix(command_buf.buf, "N ", &v))
+			note_change_n(v, b, &prev_fanout);
 		else if (!strcmp("deleteall", command_buf.buf))
 			file_change_deleteall(b);
-		else if (starts_with(command_buf.buf, "ls "))
-			parse_ls(b);
+		else if (skip_prefix(command_buf.buf, "ls ", &v))
+			parse_ls(v, b);
 		else {
 			unread_command_buf = 1;
 			break;
 		}
 		if (read_next_command() == EOF)
 			break;
@@ -2756,40 +2753,37 @@
 
 	if (!store_object(OBJ_COMMIT, &new_data, NULL, b->sha1, next_mark))
 		b->pack_id = pack_id;
 	b->last_commit = object_count_by_type[OBJ_COMMIT];
 }
 
-static void parse_new_tag(void)
+static void parse_new_tag(const char *arg)
 {
 	static struct strbuf msg = STRBUF_INIT;
-	char *sp;
 	const char *from;
 	char *tagger;
 	struct branch *s;
 	struct tag *t;
 	uintmax_t from_mark = 0;
 	unsigned char sha1[20];
 	enum object_type type;
+	const char *v;
 
-	/* Obtain the new tag name from the rest of our command */
-	sp = strchr(command_buf.buf, ' ') + 1;
 	t = pool_alloc(sizeof(struct tag));
 	memset(t, 0, sizeof(struct tag));
-	t->name = pool_strdup(sp);
+	t->name = pool_strdup(arg);
 	if (last_tag)
 		last_tag->next_tag = t;
 	else
 		first_tag = t;
 	last_tag = t;
 	read_next_command();
 
 	/* from ... */
-	if (!starts_with(command_buf.buf, "from "))
+	if (!skip_prefix(command_buf.buf, "from ", &from))
 		die("Expected from command, got %s", command_buf.buf);
-	from = strchr(command_buf.buf, ' ') + 1;
 	s = lookup_branch(from);
 	if (s) {
 		if (is_null_sha1(s->sha1))
 			die("Can't tag an empty branch.");
 		hashcpy(sha1, s->sha1);
 		type = OBJ_COMMIT;
@@ -2809,14 +2803,14 @@
 			type = oe->type;
 	} else
 		die("Invalid ref name or SHA1 expression: %s", from);
 	read_next_command();
 
 	/* tagger ... */
-	if (starts_with(command_buf.buf, "tagger ")) {
-		tagger = parse_ident(command_buf.buf + 7);
+	if (skip_prefix(command_buf.buf, "tagger ", &v)) {
+		tagger = parse_ident(v);
 		read_next_command();
 	} else
 		tagger = NULL;
 
 	/* tag payload/message */
 	parse_data(&msg, 0, NULL);
@@ -2839,31 +2833,28 @@
 	if (store_object(OBJ_TAG, &new_data, NULL, t->sha1, 0))
 		t->pack_id = MAX_PACK_ID;
 	else
 		t->pack_id = pack_id;
 }
 
-static void parse_reset_branch(void)
+static void parse_reset_branch(const char *arg)
 {
 	struct branch *b;
-	char *sp;
 
-	/* Obtain the branch name from the rest of our command */
-	sp = strchr(command_buf.buf, ' ') + 1;
-	b = lookup_branch(sp);
+	b = lookup_branch(arg);
 	if (b) {
 		hashclr(b->sha1);
 		hashclr(b->branch_tree.versions[0].sha1);
 		hashclr(b->branch_tree.versions[1].sha1);
 		if (b->branch_tree.tree) {
 			release_tree_content_recursive(b->branch_tree.tree);
 			b->branch_tree.tree = NULL;
 		}
 	}
 	else
-		b = new_branch(sp);
+		b = new_branch(arg);
 	read_next_command();
 	parse_from(b);
 	if (command_buf.len > 0)
 		unread_command_buf = 1;
 }
 
@@ -2915,20 +2906,18 @@
 		strbuf_attach(&last_blob.data, buf, size, size);
 		last_blob.depth = oe->depth;
 	} else
 		free(buf);
 }
 
-static void parse_cat_blob(void)
+static void parse_cat_blob(const char *p)
 {
-	const char *p;
 	struct object_entry *oe = oe;
 	unsigned char sha1[20];
 
 	/* cat-blob SP <object> LF */
-	p = command_buf.buf + strlen("cat-blob ");
 	if (*p == ':') {
 		oe = find_mark(parse_mark_ref_eol(p));
 		if (!oe)
 			die("Unknown mark: %s", command_buf.buf);
 		hashcpy(sha1, oe->idx.sha1);
 	} else {
@@ -3005,12 +2994,14 @@
 		hashcpy(sha1, e->idx.sha1);
 	} else {	/* <sha1> */
 		if (get_sha1_hex(*p, sha1))
 			die("Invalid dataref: %s", command_buf.buf);
 		e = find_object(sha1);
 		*p += 40;
+		if (*(*p)++ != ' ')
+			die("Missing space after tree-ish: %s", command_buf.buf);
 	}
 
 	while (!e || e->type != OBJ_TREE)
 		e = dereference(e, sha1);
 	return e;
 }
@@ -3039,33 +3030,29 @@
 		quote_c_style(path, &line, NULL, 0);
 		strbuf_addch(&line, '\n');
 	}
 	cat_blob_write(line.buf, line.len);
 }
 
-static void parse_ls(struct branch *b)
+static void parse_ls(const char *p, struct branch *b)
 {
-	const char *p;
 	struct tree_entry *root = NULL;
 	struct tree_entry leaf = {NULL};
 
 	/* ls SP (<tree-ish> SP)? <path> */
-	p = command_buf.buf + strlen("ls ");
 	if (*p == '"') {
 		if (!b)
 			die("Not in a commit: %s", command_buf.buf);
 		root = &b->branch_tree;
 	} else {
 		struct object_entry *e = parse_treeish_dataref(&p);
 		root = new_tree_entry();
 		hashcpy(root->versions[1].sha1, e->idx.sha1);
 		if (!is_null_sha1(root->versions[1].sha1))
 			root->versions[1].mode = S_IFDIR;
 		load_tree(root);
-		if (*p++ != ' ')
-			die("Missing space after tree-ish: %s", command_buf.buf);
 	}
 	if (*p == '"') {
 		static struct strbuf uq = STRBUF_INIT;
 		const char *endp;
 		strbuf_reset(&uq);
 		if (unquote_c_style(&uq, p, &endp))
@@ -3197,35 +3184,35 @@
 	if (!pack_edges)
 		die_errno("Cannot open '%s'", edges);
 }
 
 static int parse_one_option(const char *option)
 {
-	if (starts_with(option, "max-pack-size=")) {
+	if (skip_prefix(option, "max-pack-size=", &option)) {
 		unsigned long v;
-		if (!git_parse_ulong(option + 14, &v))
+		if (!git_parse_ulong(option, &v))
 			return 0;
 		if (v < 8192) {
 			warning("max-pack-size is now in bytes, assuming --max-pack-size=%lum", v);
 			v *= 1024 * 1024;
 		} else if (v < 1024 * 1024) {
 			warning("minimum max-pack-size is 1 MiB");
 			v = 1024 * 1024;
 		}
 		max_packsize = v;
-	} else if (starts_with(option, "big-file-threshold=")) {
+	} else if (skip_prefix(option, "big-file-threshold=", &option)) {
 		unsigned long v;
-		if (!git_parse_ulong(option + 19, &v))
+		if (!git_parse_ulong(option, &v))
 			return 0;
 		big_file_threshold = v;
-	} else if (starts_with(option, "depth=")) {
-		option_depth(option + 6);
-	} else if (starts_with(option, "active-branches=")) {
-		option_active_branches(option + 16);
-	} else if (starts_with(option, "export-pack-edges=")) {
-		option_export_pack_edges(option + 18);
+	} else if (skip_prefix(option, "depth=", &option)) {
+		option_depth(option);
+	} else if (skip_prefix(option, "active-branches=", &option)) {
+		option_active_branches(option);
+	} else if (skip_prefix(option, "export-pack-edges=", &option)) {
+		option_export_pack_edges(option);
 	} else if (starts_with(option, "quiet")) {
 		show_stats = 0;
 	} else if (starts_with(option, "stats")) {
 		show_stats = 1;
 	} else {
 		return 0;
@@ -3233,21 +3220,22 @@
 
 	return 1;
 }
 
 static int parse_one_feature(const char *feature, int from_stream)
 {
-	if (starts_with(feature, "date-format=")) {
-		option_date_format(feature + 12);
-	} else if (starts_with(feature, "import-marks=")) {
-		option_import_marks(feature + 13, from_stream, 0);
-	} else if (starts_with(feature, "import-marks-if-exists=")) {
-		option_import_marks(feature + strlen("import-marks-if-exists="),
-					from_stream, 1);
-	} else if (starts_with(feature, "export-marks=")) {
-		option_export_marks(feature + 13);
+	const char *arg;
+
+	if (skip_prefix(feature, "date-format=", &arg)) {
+		option_date_format(arg);
+	} else if (skip_prefix(feature, "import-marks=", &arg)) {
+		option_import_marks(arg, from_stream, 0);
+	} else if (skip_prefix(feature, "import-marks-if-exists=", &arg)) {
+		option_import_marks(arg, from_stream, 1);
+	} else if (skip_prefix(feature, "export-marks=", &arg)) {
+		option_export_marks(arg);
 	} else if (!strcmp(feature, "cat-blob")) {
 		; /* Don't die - this feature is supported */
 	} else if (!strcmp(feature, "relative-marks")) {
 		relative_marks_paths = 1;
 	} else if (!strcmp(feature, "no-relative-marks")) {
 		relative_marks_paths = 0;
@@ -3261,29 +3249,25 @@
 		return 0;
 	}
 
 	return 1;
 }
 
-static void parse_feature(void)
+static void parse_feature(const char *feature)
 {
-	char *feature = command_buf.buf + 8;
-
 	if (seen_data_command)
 		die("Got feature command '%s' after data command", feature);
 
 	if (parse_one_feature(feature, 1))
 		return;
 
 	die("This version of fast-import does not support feature %s.", feature);
 }
 
-static void parse_option(void)
+static void parse_option(const char *option)
 {
-	char *option = command_buf.buf + 11;
-
 	if (seen_data_command)
 		die("Got option command '%s' after data command", option);
 
 	if (parse_one_option(option))
 		return;
 
@@ -3332,24 +3316,27 @@
 	for (i = 1; i < global_argc; i++) {
 		const char *a = global_argv[i];
 
 		if (*a != '-' || !strcmp(a, "--"))
 			break;
 
-		if (parse_one_option(a + 2))
+		if (!skip_prefix(a, "--", &a))
+			die("unknown option %s", a);
+
+		if (parse_one_option(a))
 			continue;
 
-		if (parse_one_feature(a + 2, 0))
+		if (parse_one_feature(a, 0))
 			continue;
 
-		if (starts_with(a + 2, "cat-blob-fd=")) {
-			option_cat_blob_fd(a + 2 + strlen("cat-blob-fd="));
+		if (skip_prefix(a, "cat-blob-fd=", &a)) {
+			option_cat_blob_fd(a);
 			continue;
 		}
 
-		die("unknown option %s", a);
+		die("unknown option --%s", a);
 	}
 	if (i != global_argc)
 		usage(fast_import_usage);
 
 	seen_data_command = 1;
 	if (import_marks_file)
@@ -3390,32 +3377,33 @@
 
 	prepare_packed_git();
 	start_packfile();
 	set_die_routine(die_nicely);
 	set_checkpoint_signal();
 	while (read_next_command() != EOF) {
+		const char *v;
 		if (!strcmp("blob", command_buf.buf))
 			parse_new_blob();
-		else if (starts_with(command_buf.buf, "ls "))
-			parse_ls(NULL);
-		else if (starts_with(command_buf.buf, "commit "))
-			parse_new_commit();
-		else if (starts_with(command_buf.buf, "tag "))
-			parse_new_tag();
-		else if (starts_with(command_buf.buf, "reset "))
-			parse_reset_branch();
+		else if (skip_prefix(command_buf.buf, "ls ", &v))
+			parse_ls(v, NULL);
+		else if (skip_prefix(command_buf.buf, "commit ", &v))
+			parse_new_commit(v);
+		else if (skip_prefix(command_buf.buf, "tag ", &v))
+			parse_new_tag(v);
+		else if (skip_prefix(command_buf.buf, "reset ", &v))
+			parse_reset_branch(v);
 		else if (!strcmp("checkpoint", command_buf.buf))
 			parse_checkpoint();
 		else if (!strcmp("done", command_buf.buf))
 			break;
 		else if (starts_with(command_buf.buf, "progress "))
 			parse_progress();
-		else if (starts_with(command_buf.buf, "feature "))
-			parse_feature();
-		else if (starts_with(command_buf.buf, "option git "))
-			parse_option();
+		else if (skip_prefix(command_buf.buf, "feature ", &v))
+			parse_feature(v);
+		else if (skip_prefix(command_buf.buf, "option git ", &v))
+			parse_option(v);
 		else if (starts_with(command_buf.buf, "option "))
 			/* ignore non-git options*/;
 		else
 			die("Unsupported command: %s", command_buf.buf);
 
 		if (checkpoint_requested)
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fast-import.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fast-import.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fast-import.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fast-import.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fetch-pack.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fetch-pack.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fetch-pack.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fetch-pack.c	2014-08-16 06:26:55.000000000 +0800
@@ -186,26 +186,29 @@
 }
 
 static enum ack_type get_ack(int fd, unsigned char *result_sha1)
 {
 	int len;
 	char *line = packet_read_line(fd, &len);
+	const char *arg;
 
 	if (!len)
 		die("git fetch-pack: expected ACK/NAK, got EOF");
 	if (!strcmp(line, "NAK"))
 		return NAK;
-	if (starts_with(line, "ACK ")) {
-		if (!get_sha1_hex(line+4, result_sha1)) {
-			if (len < 45)
+	if (skip_prefix(line, "ACK ", &arg)) {
+		if (!get_sha1_hex(arg, result_sha1)) {
+			arg += 40;
+			len -= arg - line;
+			if (len < 1)
 				return ACK;
-			if (strstr(line+45, "continue"))
+			if (strstr(arg, "continue"))
 				return ACK_continue;
-			if (strstr(line+45, "common"))
+			if (strstr(arg, "common"))
 				return ACK_common;
-			if (strstr(line+45, "ready"))
+			if (strstr(arg, "ready"))
 				return ACK_ready;
 			return ACK;
 		}
 	}
 	die("git fetch_pack: expected ACK/NAK, got '%s'", line);
 }
@@ -316,24 +319,25 @@
 		packet_buf_write(&req_buf, "deepen %d", args->depth);
 	packet_buf_flush(&req_buf);
 	state_len = req_buf.len;
 
 	if (args->depth > 0) {
 		char *line;
+		const char *arg;
 		unsigned char sha1[20];
 
 		send_request(args, fd[1], &req_buf);
 		while ((line = packet_read_line(fd[0], NULL))) {
-			if (starts_with(line, "shallow ")) {
-				if (get_sha1_hex(line + 8, sha1))
+			if (skip_prefix(line, "shallow ", &arg)) {
+				if (get_sha1_hex(arg, sha1))
 					die("invalid shallow line: %s", line);
 				register_shallow(sha1);
 				continue;
 			}
-			if (starts_with(line, "unshallow ")) {
-				if (get_sha1_hex(line + 10, sha1))
+			if (skip_prefix(line, "unshallow ", &arg)) {
+				if (get_sha1_hex(arg, sha1))
 					die("invalid unshallow line: %s", line);
 				if (!lookup_object(sha1))
 					die("object not found: %s", line);
 				/* make sure that it is parsed as shallow */
 				if (!parse_object(sha1))
 					die("error in object: %s", line);
@@ -504,13 +508,13 @@
 
 	i = 0;
 	for (ref = *refs; ref; ref = next) {
 		int keep = 0;
 		next = ref->next;
 
-		if (!memcmp(ref->name, "refs/", 5) &&
+		if (starts_with(ref->name, "refs/") &&
 		    check_refname_format(ref->name, 0))
 			; /* trash */
 		else {
 			while (i < nr_sought) {
 				int cmp = strcmp(ref->name, sought[i]->name);
 				if (cmp < 0)
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fetch-pack.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fetch-pack.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fetch-pack.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fetch-pack.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fsck.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fsck.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fsck.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fsck.c	2014-08-16 06:26:55.000000000 +0800
@@ -3,13 +3,12 @@
 #include "blob.h"
 #include "tree.h"
 #include "tree-walk.h"
 #include "commit.h"
 #include "tag.h"
 #include "fsck.h"
-#include "utf8.h"
 
 static int fsck_walk_tree(struct tree *tree, fsck_walk_func walk, void *data)
 {
 	struct tree_desc desc;
 	struct name_entry entry;
 	int res = 0;
@@ -168,15 +167,13 @@
 
 		has_null_sha1 |= is_null_sha1(sha1);
 		has_full_path |= !!strchr(name, '/');
 		has_empty_name |= !*name;
 		has_dot |= !strcmp(name, ".");
 		has_dotdot |= !strcmp(name, "..");
-		has_dotgit |= (!strcmp(name, ".git") ||
-			       is_hfs_dotgit(name) ||
-			       is_ntfs_dotgit(name));
+		has_dotgit |= !strcmp(name, ".git");
 		has_zero_pad |= *(char *)desc.buffer == '0';
 		update_tree_entry(&desc);
 
 		switch (mode) {
 		/*
 		 * Standard modes..
@@ -279,60 +276,45 @@
 	return 0;
 }
 
 static int fsck_commit_buffer(struct commit *commit, const char *buffer,
 			      fsck_error error_func)
 {
-	const char *tmp;
 	unsigned char tree_sha1[20], sha1[20];
 	struct commit_graft *graft;
-	int parents = 0;
+	unsigned parent_count, parent_line_count = 0;
 	int err;
 
-	buffer = skip_prefix(buffer, "tree ");
-	if (!buffer)
+	if (!skip_prefix(buffer, "tree ", &buffer))
 		return error_func(&commit->object, FSCK_ERROR, "invalid format - expected 'tree' line");
 	if (get_sha1_hex(buffer, tree_sha1) || buffer[40] != '\n')
 		return error_func(&commit->object, FSCK_ERROR, "invalid 'tree' line format - bad sha1");
 	buffer += 41;
-	while ((tmp = skip_prefix(buffer, "parent "))) {
-		buffer = tmp;
+	while (skip_prefix(buffer, "parent ", &buffer)) {
 		if (get_sha1_hex(buffer, sha1) || buffer[40] != '\n')
 			return error_func(&commit->object, FSCK_ERROR, "invalid 'parent' line format - bad sha1");
 		buffer += 41;
-		parents++;
+		parent_line_count++;
 	}
 	graft = lookup_commit_graft(commit->object.sha1);
+	parent_count = commit_list_count(commit->parents);
 	if (graft) {
-		struct commit_list *p = commit->parents;
-		parents = 0;
-		while (p) {
-			p = p->next;
-			parents++;
-		}
-		if (graft->nr_parent == -1 && !parents)
+		if (graft->nr_parent == -1 && !parent_count)
 			; /* shallow commit */
-		else if (graft->nr_parent != parents)
+		else if (graft->nr_parent != parent_count)
 			return error_func(&commit->object, FSCK_ERROR, "graft objects missing");
 	} else {
-		struct commit_list *p = commit->parents;
-		while (p && parents) {
-			p = p->next;
-			parents--;
-		}
-		if (p || parents)
+		if (parent_count != parent_line_count)
 			return error_func(&commit->object, FSCK_ERROR, "parent objects missing");
 	}
-	buffer = skip_prefix(buffer, "author ");
-	if (!buffer)
+	if (!skip_prefix(buffer, "author ", &buffer))
 		return error_func(&commit->object, FSCK_ERROR, "invalid format - expected 'author' line");
 	err = fsck_ident(&buffer, &commit->object, error_func);
 	if (err)
 		return err;
-	buffer = skip_prefix(buffer, "committer ");
-	if (!buffer)
+	if (!skip_prefix(buffer, "committer ", &buffer))
 		return error_func(&commit->object, FSCK_ERROR, "invalid format - expected 'committer' line");
 	err = fsck_ident(&buffer, &commit->object, error_func);
 	if (err)
 		return err;
 	if (!commit->tree)
 		return error_func(&commit->object, FSCK_ERROR, "could not load commit's tree %s", sha1_to_hex(tree_sha1));
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fsck.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fsck.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/fsck.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/fsck.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gettext.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gettext.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gettext.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gettext.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-add and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-add differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-annotate and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-annotate differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-apply and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-apply differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-archive and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-archive differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-bisect /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-bisect
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-bisect	2017-10-10 09:54:48.982125315 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-bisect	2017-10-10 09:58:19.612749591 +0800
@@ -405,13 +405,13 @@
 	file="$1"
 	test "$#" -eq 1 || die "$(gettext "No logfile given")"
 	test -r "$file" || die "$(eval_gettext "cannot read \$file for replaying")"
 	bisect_reset
 	while read git bisect command rev
 	do
-		test "$git $bisect" = "git bisect" -o "$git" = "git-bisect" || continue
+		test "$git $bisect" = "git bisect" || test "$git" = "git-bisect" || continue
 		if test "$git" = "git-bisect"
 		then
 			rev="$command"
 			command="$bisect"
 		fi
 		case "$command" in
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-bisect--helper and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-bisect--helper differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-bisect.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-bisect.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-bisect.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-bisect.sh	2014-08-16 06:26:55.000000000 +0800
@@ -405,13 +405,13 @@
 	file="$1"
 	test "$#" -eq 1 || die "$(gettext "No logfile given")"
 	test -r "$file" || die "$(eval_gettext "cannot read \$file for replaying")"
 	bisect_reset
 	while read git bisect command rev
 	do
-		test "$git $bisect" = "git bisect" -o "$git" = "git-bisect" || continue
+		test "$git $bisect" = "git bisect" || test "$git" = "git-bisect" || continue
 		if test "$git" = "git-bisect"
 		then
 			rev="$command"
 			command="$bisect"
 		fi
 		case "$command" in
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-blame and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-blame differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-branch and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-branch differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-bundle and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-bundle differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git.c	2014-08-16 06:26:55.000000000 +0800
@@ -17,12 +17,49 @@
 	N_("'git help -a' and 'git help -g' lists available subcommands and some\n"
 	   "concept guides. See 'git help <command>' or 'git help <concept>'\n"
 	   "to read about a specific subcommand or concept.");
 
 static struct startup_info git_startup_info;
 static int use_pager = -1;
+static char orig_cwd[PATH_MAX];
+static const char *env_names[] = {
+	GIT_DIR_ENVIRONMENT,
+	GIT_WORK_TREE_ENVIRONMENT,
+	GIT_IMPLICIT_WORK_TREE_ENVIRONMENT,
+	GIT_PREFIX_ENVIRONMENT
+};
+static char *orig_env[4];
+static int saved_environment;
+
+static void save_env(void)
+{
+	int i;
+	if (saved_environment)
+		return;
+	saved_environment = 1;
+	if (!getcwd(orig_cwd, sizeof(orig_cwd)))
+		die_errno("cannot getcwd");
+	for (i = 0; i < ARRAY_SIZE(env_names); i++) {
+		orig_env[i] = getenv(env_names[i]);
+		if (orig_env[i])
+			orig_env[i] = xstrdup(orig_env[i]);
+	}
+}
+
+static void restore_env(void)
+{
+	int i;
+	if (*orig_cwd && chdir(orig_cwd))
+		die_errno("could not move to %s", orig_cwd);
+	for (i = 0; i < ARRAY_SIZE(env_names); i++) {
+		if (orig_env[i])
+			setenv(env_names[i], orig_env[i], 1);
+		else
+			unsetenv(env_names[i]);
+	}
+}
 
 static void commit_pager_choice(void) {
 	switch (use_pager) {
 	case 0:
 		setenv("GIT_PAGER", "cat", 1);
 		break;
@@ -51,14 +88,13 @@
 		if (!strcmp(cmd, "--help") || !strcmp(cmd, "--version"))
 			break;
 
 		/*
 		 * Check remaining flags.
 		 */
-		if (starts_with(cmd, "--exec-path")) {
-			cmd += 11;
+		if (skip_prefix(cmd, "--exec-path", &cmd)) {
 			if (*cmd == '=')
 				git_set_argv_exec_path(cmd + 1);
 			else {
 				puts(git_exec_path());
 				exit(0);
 			}
@@ -89,42 +125,42 @@
 			}
 			setenv(GIT_DIR_ENVIRONMENT, (*argv)[1], 1);
 			if (envchanged)
 				*envchanged = 1;
 			(*argv)++;
 			(*argc)--;
-		} else if (starts_with(cmd, "--git-dir=")) {
-			setenv(GIT_DIR_ENVIRONMENT, cmd + 10, 1);
+		} else if (skip_prefix(cmd, "--git-dir=", &cmd)) {
+			setenv(GIT_DIR_ENVIRONMENT, cmd, 1);
 			if (envchanged)
 				*envchanged = 1;
 		} else if (!strcmp(cmd, "--namespace")) {
 			if (*argc < 2) {
 				fprintf(stderr, "No namespace given for --namespace.\n" );
 				usage(git_usage_string);
 			}
 			setenv(GIT_NAMESPACE_ENVIRONMENT, (*argv)[1], 1);
 			if (envchanged)
 				*envchanged = 1;
 			(*argv)++;
 			(*argc)--;
-		} else if (starts_with(cmd, "--namespace=")) {
-			setenv(GIT_NAMESPACE_ENVIRONMENT, cmd + 12, 1);
+		} else if (skip_prefix(cmd, "--namespace=", &cmd)) {
+			setenv(GIT_NAMESPACE_ENVIRONMENT, cmd, 1);
 			if (envchanged)
 				*envchanged = 1;
 		} else if (!strcmp(cmd, "--work-tree")) {
 			if (*argc < 2) {
 				fprintf(stderr, "No directory given for --work-tree.\n" );
 				usage(git_usage_string);
 			}
 			setenv(GIT_WORK_TREE_ENVIRONMENT, (*argv)[1], 1);
 			if (envchanged)
 				*envchanged = 1;
 			(*argv)++;
 			(*argc)--;
-		} else if (starts_with(cmd, "--work-tree=")) {
-			setenv(GIT_WORK_TREE_ENVIRONMENT, cmd + 12, 1);
+		} else if (skip_prefix(cmd, "--work-tree=", &cmd)) {
+			setenv(GIT_WORK_TREE_ENVIRONMENT, cmd, 1);
 			if (envchanged)
 				*envchanged = 1;
 		} else if (!strcmp(cmd, "--bare")) {
 			static char git_dir[PATH_MAX+1];
 			is_bare_repository_cfg = 1;
 			setenv(GIT_DIR_ENVIRONMENT, getcwd(git_dir, sizeof(git_dir)), 0);
@@ -269,12 +305,13 @@
 #define USE_PAGER		(1<<2)
 /*
  * require working tree to be present -- anything uses this needs
  * RUN_SETUP for reading from the configuration file.
  */
 #define NEED_WORK_TREE		(1<<3)
+#define NO_SETUP		(1<<4)
 
 struct cmd_struct {
 	const char *cmd;
 	int (*fn)(int, const char **, const char *);
 	int option;
 };
@@ -287,13 +324,13 @@
 
 	prefix = NULL;
 	help = argc == 2 && !strcmp(argv[1], "-h");
 	if (!help) {
 		if (p->option & RUN_SETUP)
 			prefix = setup_git_directory();
-		if (p->option & RUN_SETUP_GENTLY) {
+		else if (p->option & RUN_SETUP_GENTLY) {
 			int nongit_ok;
 			prefix = setup_git_directory_gently(&nongit_ok);
 		}
 
 		if (use_pager == -1 && p->option & (RUN_SETUP | RUN_SETUP_GENTLY))
 			use_pager = check_pager_config(p->cmd);
@@ -349,13 +386,13 @@
 	{ "checkout", cmd_checkout, RUN_SETUP | NEED_WORK_TREE },
 	{ "checkout-index", cmd_checkout_index,
 		RUN_SETUP | NEED_WORK_TREE},
 	{ "cherry", cmd_cherry, RUN_SETUP },
 	{ "cherry-pick", cmd_cherry_pick, RUN_SETUP | NEED_WORK_TREE },
 	{ "clean", cmd_clean, RUN_SETUP | NEED_WORK_TREE },
-	{ "clone", cmd_clone },
+	{ "clone", cmd_clone, NO_SETUP },
 	{ "column", cmd_column, RUN_SETUP_GENTLY },
 	{ "commit", cmd_commit, RUN_SETUP | NEED_WORK_TREE },
 	{ "commit-tree", cmd_commit_tree, RUN_SETUP },
 	{ "config", cmd_config, RUN_SETUP_GENTLY },
 	{ "count-objects", cmd_count_objects, RUN_SETUP },
 	{ "credential", cmd_credential, RUN_SETUP_GENTLY },
@@ -375,14 +412,14 @@
 	{ "gc", cmd_gc, RUN_SETUP },
 	{ "get-tar-commit-id", cmd_get_tar_commit_id },
 	{ "grep", cmd_grep, RUN_SETUP_GENTLY },
 	{ "hash-object", cmd_hash_object },
 	{ "help", cmd_help },
 	{ "index-pack", cmd_index_pack, RUN_SETUP_GENTLY },
-	{ "init", cmd_init_db },
-	{ "init-db", cmd_init_db },
+	{ "init", cmd_init_db, NO_SETUP },
+	{ "init-db", cmd_init_db, NO_SETUP },
 	{ "log", cmd_log, RUN_SETUP },
 	{ "ls-files", cmd_ls_files, RUN_SETUP },
 	{ "ls-remote", cmd_ls_remote, RUN_SETUP_GENTLY },
 	{ "ls-tree", cmd_ls_tree, RUN_SETUP },
 	{ "mailinfo", cmd_mailinfo },
 	{ "mailsplit", cmd_mailsplit },
@@ -438,12 +475,13 @@
 	{ "update-index", cmd_update_index, RUN_SETUP },
 	{ "update-ref", cmd_update_ref, RUN_SETUP },
 	{ "update-server-info", cmd_update_server_info, RUN_SETUP },
 	{ "upload-archive", cmd_upload_archive },
 	{ "upload-archive--writer", cmd_upload_archive_writer },
 	{ "var", cmd_var, RUN_SETUP_GENTLY },
+	{ "verify-commit", cmd_verify_commit, RUN_SETUP },
 	{ "verify-pack", cmd_verify_pack },
 	{ "verify-tag", cmd_verify_tag, RUN_SETUP },
 	{ "version", cmd_version },
 	{ "whatchanged", cmd_whatchanged, RUN_SETUP },
 	{ "write-tree", cmd_write_tree, RUN_SETUP },
 };
@@ -481,12 +519,16 @@
 	}
 
 	for (i = 0; i < ARRAY_SIZE(commands); i++) {
 		struct cmd_struct *p = commands+i;
 		if (strcmp(p->cmd, cmd))
 			continue;
+		if (saved_environment && (p->option & NO_SETUP)) {
+			restore_env();
+			break;
+		}
 		exit(run_builtin(p, argc, argv));
 	}
 }
 
 static void execv_dashed_external(const char **argv)
 {
@@ -536,13 +578,16 @@
 		execv_dashed_external(*argv);
 
 		/* It could be an alias -- this works around the insanity
 		 * of overriding "git log" with "git show" by having
 		 * alias.log = show
 		 */
-		if (done_alias || !handle_alias(argcp, argv))
+		if (done_alias)
+			break;
+		save_env();
+		if (!handle_alias(argcp, argv))
 			break;
 		done_alias = 1;
 	}
 
 	return done_alias;
 }
@@ -565,36 +610,37 @@
 	 * onto stdin/stdout/stderr in the child processes we spawn.
 	 */
 	sanitize_stdfds();
 
 	git_setup_gettext();
 
+	trace_command_performance(argv);
+
 	/*
 	 * "git-xxxx" is the same as "git xxxx", but we obviously:
 	 *
 	 *  - cannot take flags in between the "git" and the "xxxx".
 	 *  - cannot execute it externally (since it would just do
 	 *    the same thing over again)
 	 *
 	 * So we just directly call the builtin handler, and die if
 	 * that one cannot handle it.
 	 */
-	if (starts_with(cmd, "git-")) {
-		cmd += 4;
+	if (skip_prefix(cmd, "git-", &cmd)) {
 		argv[0] = cmd;
 		handle_builtin(argc, argv);
 		die("cannot handle %s as a builtin", cmd);
 	}
 
 	/* Look for flags.. */
 	argv++;
 	argc--;
 	handle_options(&argv, &argc, NULL);
 	if (argc > 0) {
-		if (starts_with(argv[0], "--"))
-			argv[0] += 2;
+		/* translate --help and --version into commands */
+		skip_prefix(argv[0], "--", &argv[0]);
 	} else {
 		/* The user didn't specify a command; give them help */
 		commit_pager_choice();
 		printf("usage: %s\n\n", git_usage_string);
 		list_common_cmds_help();
 		printf("\n%s\n", _(git_more_info_string));
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-cat-file and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-cat-file differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/GIT-CFLAGS /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/GIT-CFLAGS
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/GIT-CFLAGS	2017-10-10 09:54:19.812718385 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/GIT-CFLAGS	2017-10-10 09:57:50.007560677 +0800
@@ -1 +1 @@
-cc: -g -O2 -I. -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DSHA1_HEADER='"block-sha1/sha1.h"'  -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"':
+gcc: -g -O2 -I. -DHAVE_ALLOCA_H -DNO_CURL -DNO_OPENSSL -pthread -DHAVE_PATHS_H -DHAVE_STRINGS_H -DHAVE_DEV_TTY -DXDL_FAST_HASH -DHAVE_CLOCK_GETTIME -DSHA1_HEADER='"block-sha1/sha1.h"'  -DNO_STRLCPY -DSHELL_PATH='"/bin/sh"':
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-check-attr and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-check-attr differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-check-ignore and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-check-ignore differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-check-mailmap and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-check-mailmap differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-checkout and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-checkout differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-checkout-index and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-checkout-index differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-check-ref-format and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-check-ref-format differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-cherry and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-cherry differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-cherry-pick and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-cherry-pick differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-clean and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-clean differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-clone and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-clone differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-column and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-column differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-commit and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-commit differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-commit-tree and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-commit-tree differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-compat-util.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-compat-util.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-compat-util.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-compat-util.h	2014-08-16 06:26:55.000000000 +0800
@@ -264,12 +264,16 @@
 #endif
 
 #ifndef has_dos_drive_prefix
 #define has_dos_drive_prefix(path) 0
 #endif
 
+#ifndef offset_1st_component
+#define offset_1st_component(path) (is_dir_sep((path)[0]))
+#endif
+
 #ifndef is_dir_sep
 #define is_dir_sep(c) ((c) == '/')
 #endif
 
 #ifndef find_last_dir_sep
 #define find_last_dir_sep(path) strrchr(path, '/')
@@ -284,16 +288,18 @@
 #elif defined(_MSC_VER)
 #define NORETURN __declspec(noreturn)
 #define NORETURN_PTR
 #else
 #define NORETURN
 #define NORETURN_PTR
+#ifndef __GNUC__
 #ifndef __attribute__
 #define __attribute__(x)
 #endif
 #endif
+#endif
 
 /* The sentinel attribute is valid from gcc version 4.0 */
 #if defined(__GNUC__) && (__GNUC__ >= 4)
 #define LAST_ARG_MUST_BE_NULL __attribute__((sentinel))
 #else
 #define LAST_ARG_MUST_BE_NULL
@@ -327,30 +333,85 @@
  * Let callers be aware of the constant return value; this can help
  * gcc with -Wuninitialized analysis. We restrict this trick to gcc, though,
  * because some compilers may not support variadic macros. Since we're only
  * trying to help gcc, anyway, it's OK; other compilers will fall back to
  * using the function as usual.
  */
-#if defined(__GNUC__) && ! defined(__clang__)
-#define error(...) (error(__VA_ARGS__), -1)
+#if defined(__GNUC__)
+static inline int const_error(void)
+{
+	return -1;
+}
+#define error(...) (error(__VA_ARGS__), const_error())
 #endif
 
 extern void set_die_routine(NORETURN_PTR void (*routine)(const char *err, va_list params));
 extern void set_error_routine(void (*routine)(const char *err, va_list params));
 extern void set_die_is_recursing_routine(int (*routine)(void));
 
 extern int starts_with(const char *str, const char *prefix);
-extern int ends_with(const char *str, const char *suffix);
 
-static inline const char *skip_prefix(const char *str, const char *prefix)
+/*
+ * If the string "str" begins with the string found in "prefix", return 1.
+ * The "out" parameter is set to "str + strlen(prefix)" (i.e., to the point in
+ * the string right after the prefix).
+ *
+ * Otherwise, return 0 and leave "out" untouched.
+ *
+ * Examples:
+ *
+ *   [extract branch name, fail if not a branch]
+ *   if (!skip_prefix(ref, "refs/heads/", &branch)
+ *	return -1;
+ *
+ *   [skip prefix if present, otherwise use whole string]
+ *   skip_prefix(name, "refs/heads/", &name);
+ */
+static inline int skip_prefix(const char *str, const char *prefix,
+			      const char **out)
 {
 	do {
-		if (!*prefix)
-			return str;
+		if (!*prefix) {
+			*out = str;
+			return 1;
+		}
 	} while (*str++ == *prefix++);
-	return NULL;
+	return 0;
+}
+
+/*
+ * If buf ends with suffix, return 1 and subtract the length of the suffix
+ * from *len. Otherwise, return 0 and leave *len untouched.
+ */
+static inline int strip_suffix_mem(const char *buf, size_t *len,
+				   const char *suffix)
+{
+	size_t suflen = strlen(suffix);
+	if (*len < suflen || memcmp(buf + (*len - suflen), suffix, suflen))
+		return 0;
+	*len -= suflen;
+	return 1;
+}
+
+/*
+ * If str ends with suffix, return 1 and set *len to the size of the string
+ * without the suffix. Otherwise, return 0 and set *len to the size of the
+ * string.
+ *
+ * Note that we do _not_ NUL-terminate str to the new length.
+ */
+static inline int strip_suffix(const char *str, const char *suffix, size_t *len)
+{
+	*len = strlen(str);
+	return strip_suffix_mem(str, len, suffix);
+}
+
+static inline int ends_with(const char *str, const char *suffix)
+{
+	size_t len;
+	return strip_suffix(str, suffix, &len);
 }
 
 #if defined(NO_MMAP) || defined(USE_WIN32_MMAP)
 
 #ifndef PROT_READ
 #define PROT_READ 1
@@ -518,12 +579,20 @@
 
 extern void release_pack_memory(size_t);
 
 typedef void (*try_to_free_t)(size_t);
 extern try_to_free_t set_try_to_free_routine(try_to_free_t);
 
+#ifdef HAVE_ALLOCA_H
+# include <alloca.h>
+# define xalloca(size)      (alloca(size))
+# define xalloca_free(p)    do {} while (0)
+#else
+# define xalloca(size)      (xmalloc(size))
+# define xalloca_free(p)    (free(p))
+#endif
 extern char *xstrdup(const char *str);
 extern void *xmalloc(size_t size);
 extern void *xmallocz(size_t size);
 extern void *xmemdupz(const void *data, size_t len);
 extern char *xstrndup(const char *str, size_t len);
 extern void *xrealloc(void *ptr, size_t size);
@@ -543,19 +612,12 @@
 {
 	if (len > (size_t) len)
 		die("Cannot handle files this big");
 	return (size_t)len;
 }
 
-static inline int has_extension(const char *filename, const char *ext)
-{
-	size_t len = strlen(filename);
-	size_t extlen = strlen(ext);
-	return len > extlen && !memcmp(filename + len - extlen, ext, extlen);
-}
-
 /* in ctype.c, for kwset users */
 extern const char tolower_trans_tbl[256];
 
 /* Sane ctype - no locale, and works with signed chars */
 #undef isascii
 #undef isspace
@@ -685,12 +747,16 @@
 #define va_copy(dst, src) __va_copy(dst, src)
 #else
 #define va_copy(dst, src) ((dst) = (src))
 #endif
 #endif
 
+#if defined(__GNUC__) || (_MSC_VER >= 1400)
+#define HAVE_VARIADIC_MACROS 1
+#endif
+
 /*
  * Preserves errno, prints a message, but gives no warning for ENOENT.
  * Always returns the return value of unlink(2).
  */
 int unlink_or_warn(const char *path);
 /*
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-config and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-config differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-count-objects and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-count-objects differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-credential and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-credential differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-credential-cache and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-credential-cache differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-credential-cache--daemon and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-credential-cache--daemon differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-credential-store and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-credential-store differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-cvsserver /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-cvsserver
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-cvsserver	2017-10-10 09:54:49.237997306 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-cvsserver	2017-10-10 09:58:19.828641583 +0800
@@ -24,13 +24,13 @@
 use Fcntl;
 use File::Temp qw/tempdir tempfile/;
 use File::Path qw/rmtree/;
 use File::Basename;
 use Getopt::Long qw(:config require_order no_ignore_case);
 
-my $VERSION = '2.0.5';
+my $VERSION = '2.1.0';
 
 my $log = GITCVS::log->new();
 my $cfg;
 
 my $DATE_LIST = {
     Jan => "01",
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-daemon and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-daemon differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-describe and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-describe differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-diff and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-diff differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-diff-files and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-diff-files differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-diff-index and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-diff-index differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-diff-tree and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-diff-tree differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-fast-export and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-fast-export differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-fast-import and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-fast-import differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-fetch and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-fetch differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-fetch-pack and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-fetch-pack differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-fmt-merge-msg and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-fmt-merge-msg differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-for-each-ref and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-for-each-ref differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-format-patch and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-format-patch differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-fsck and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-fsck differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-fsck-objects and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-fsck-objects differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-gc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-gc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-get-tar-commit-id and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-get-tar-commit-id differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-grep and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-grep differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-gui/git-gui /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-gui/git-gui
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-gui/git-gui	2017-10-10 09:55:06.885168659 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-gui/git-gui	2017-10-10 09:58:36.252424982 +0800
@@ -1,18 +1,18 @@
 #!/bin/sh
 # Tcl ignores the next line -*- tcl -*- \
  if test "z$*" = zversion \
  || test "z$*" = z--version; \
  then \
-	echo 'git-gui version 0.19.0.1.gb3f0c'; \
+	echo 'git-gui version 0.19.0.2.g3decb8e'; \
 	exit; \
  fi; \
  argv0=$0; \
  exec 'wish' "$argv0" -- "$@"
 
-set appvers {0.19.0.1.gb3f0c}
+set appvers {0.19.0.2.g3decb8e}
 set copyright [string map [list (c) \u00a9] {
 Copyright (c) 2006-2010 Shawn Pearce, et. al.
 
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
@@ -1555,13 +1555,17 @@
 	set buf_rdi {}
 	set buf_rdf {}
 	set buf_rlo {}
 
 	set rescan_active 2
 	ui_status [mc "Scanning for modified files ..."]
-	set fd_di [git_read diff-index --cached -z [PARENT]]
+	if {[git-version >= "1.7.2"]} {
+		set fd_di [git_read diff-index --cached --ignore-submodules=dirty -z [PARENT]]
+	} else {
+		set fd_di [git_read diff-index --cached -z [PARENT]]
+	}
 	set fd_df [git_read diff-files -z]
 
 	fconfigure $fd_di -blocking 0 -translation binary -encoding binary
 	fconfigure $fd_df -blocking 0 -translation binary -encoding binary
 
 	fileevent $fd_di readable [list read_diff_index $fd_di $after]
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-gui/git-gui.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-gui/git-gui.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-gui/git-gui.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-gui/git-gui.sh	2014-08-16 06:26:55.000000000 +0800
@@ -1555,13 +1555,17 @@
 	set buf_rdi {}
 	set buf_rdf {}
 	set buf_rlo {}
 
 	set rescan_active 2
 	ui_status [mc "Scanning for modified files ..."]
-	set fd_di [git_read diff-index --cached -z [PARENT]]
+	if {[git-version >= "1.7.2"]} {
+		set fd_di [git_read diff-index --cached --ignore-submodules=dirty -z [PARENT]]
+	} else {
+		set fd_di [git_read diff-index --cached -z [PARENT]]
+	}
 	set fd_df [git_read diff-files -z]
 
 	fconfigure $fd_di -blocking 0 -translation binary -encoding binary
 	fconfigure $fd_df -blocking 0 -translation binary -encoding binary
 
 	fileevent $fd_di readable [list read_diff_index $fd_di $after]
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-gui/GIT-VERSION-FILE /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-gui/GIT-VERSION-FILE
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-gui/GIT-VERSION-FILE	2017-10-10 09:55:06.865178659 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-gui/GIT-VERSION-FILE	2017-10-10 09:58:36.228436982 +0800
@@ -1 +1 @@
-GITGUI_VERSION = 0.19.0.1.gb3f0c
+GITGUI_VERSION = 0.19.0.2.g3decb8e
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-gui/lib/diff.tcl /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-gui/lib/diff.tcl
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-gui/lib/diff.tcl	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-gui/lib/diff.tcl	2014-08-16 06:26:55.000000000 +0800
@@ -284,12 +284,15 @@
 	set conflict_size [get_conflict_marker_size $path]
 
 	set cmd [list]
 	if {$w eq $ui_index} {
 		lappend cmd diff-index
 		lappend cmd --cached
+		if {[git-version >= "1.7.2"]} {
+			lappend cmd --ignore-submodules=dirty
+		}
 	} elseif {$w eq $ui_workdir} {
 		if {[string first {U} $m] >= 0} {
 			lappend cmd diff
 		} else {
 			lappend cmd diff-files
 		}
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-gui/version /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-gui/version
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-gui/version	2014-12-19 02:39:18.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-gui/version	2014-08-16 06:26:56.000000000 +0800
@@ -1 +1 @@
-0.19.0.1.gb3f0c
+0.19.0.2.g3decb8e
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-hash-object and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-hash-object differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-help and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-help differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-http-backend and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-http-backend differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.gitignore /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.gitignore
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.gitignore	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.gitignore	2014-08-16 06:26:55.000000000 +0800
@@ -162,12 +162,13 @@
 /git-update-index
 /git-update-ref
 /git-update-server-info
 /git-upload-archive
 /git-upload-pack
 /git-var
+/git-verify-commit
 /git-verify-pack
 /git-verify-tag
 /git-web--browse
 /git-whatchanged
 /git-write-tree
 /git-core-*/?*
@@ -177,12 +178,13 @@
 /gitweb/static/gitweb.min.*
 /test-chmtime
 /test-ctype
 /test-date
 /test-delta
 /test-dump-cache-tree
+/test-dump-split-index
 /test-scrap-cache-tree
 /test-genrandom
 /test-hashmap
 /test-index-version
 /test-line-buffer
 /test-match-trees
@@ -223,12 +225,13 @@
 /config.cache
 /config.log
 /config.status
 /config.mak.autogen
 /config.mak.append
 /configure
+/unicode
 /tags
 /TAGS
 /cscope*
 *.obj
 *.lib
 *.res
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-imap-send and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-imap-send differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-index-pack and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-index-pack differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-init and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-init differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-init-db and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-init-db differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gitk-git/gitk /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gitk-git/gitk
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gitk-git/gitk	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gitk-git/gitk	2014-08-16 06:26:55.000000000 +0800
@@ -2582,20 +2582,24 @@
     wm protocol . WM_DELETE_WINDOW doquit
     bind . <Destroy> {stop_backends}
     bind . <Button-1> "click %W"
     bind $fstring <Key-Return> {dofind 1 1}
     bind $sha1entry <Key-Return> {gotocommit; break}
     bind $sha1entry <<PasteSelection>> clearsha1
+    bind $sha1entry <<Paste>> clearsha1
     bind $cflist <1> {sel_flist %W %x %y; break}
     bind $cflist <B1-Motion> {sel_flist %W %x %y; break}
     bind $cflist <ButtonRelease-1> {treeclick %W %x %y}
     global ctxbut
     bind $cflist $ctxbut {pop_flist_menu %W %X %Y %x %y}
     bind $ctext $ctxbut {pop_diff_menu %W %X %Y %x %y}
     bind $ctext <Button-1> {focus %W}
     bind $ctext <<Selection>> rehighlight_search_results
+    for {set i 1} {$i < 10} {incr i} {
+	bind . <$M1B-Key-$i> [list go_to_parent $i]
+    }
 
     set maincursor [. cget -cursor]
     set textcursor [$ctext cget -cursor]
     set curtextcursor $textcursor
 
     set rowctxmenu .rowctxmenu
@@ -2783,13 +2787,13 @@
     global reflinecolor filesepbgcolor filesepfgcolor
     global mergecolors foundbgcolor currentsearchhitbgcolor
     global linehoverbgcolor linehoverfgcolor linehoveroutlinecolor circlecolors
     global mainheadcirclecolor workingfilescirclecolor indexcirclecolor
     global linkfgcolor circleoutlinecolor
     global autoselect autosellen extdifftool perfile_attrs markbgcolor use_ttk
-    global hideremotes want_ttk maxrefs
+    global hideremotes want_ttk maxrefs visiblerefs
     global config_file config_file_tmp
 
     if {$stuffsaved} return
     if {![winfo viewable .]} return
     catch {
 	if {[file exists $config_file_tmp]} {
@@ -2809,12 +2813,13 @@
 	puts $f [list set cmitmode $cmitmode]
 	puts $f [list set wrapcomment $wrapcomment]
 	puts $f [list set autoselect $autoselect]
 	puts $f [list set autosellen $autosellen]
 	puts $f [list set showneartags $showneartags]
 	puts $f [list set maxrefs $maxrefs]
+	puts $f [list set visiblerefs $visiblerefs]
 	puts $f [list set hideremotes $hideremotes]
 	puts $f [list set showlocalchanges $showlocalchanges]
 	puts $f [list set datetimeformat $datetimeformat]
 	puts $f [list set limitdiffs $limitdiffs]
 	puts $f [list set uicolor $uicolor]
 	puts $f [list set want_ttk $want_ttk]
@@ -3012,12 +3017,13 @@
 [mc "<Home>		Move to first commit"]
 [mc "<End>		Move to last commit"]
 [mc "<Up>, p, k	Move up one commit"]
 [mc "<Down>, n, j	Move down one commit"]
 [mc "<Left>, z, h	Go back in history list"]
 [mc "<Right>, x, l	Go forward in history list"]
+[mc "<%s-n>	Go to n-th parent of current commit in history list" $M1T]
 [mc "<PageUp>	Move up one page in commit list"]
 [mc "<PageDown>	Move down one page in commit list"]
 [mc "<%s-Home>	Scroll to top of commit list" $M1T]
 [mc "<%s-End>	Scroll to bottom of commit list" $M1T]
 [mc "<%s-Up>	Scroll commit list up one line" $M1T]
 [mc "<%s-Down>	Scroll commit list down one line" $M1T]
@@ -3489,16 +3495,26 @@
 	append findstring " " $x
     }
     set gdttype [mc "touching paths:"]
 }
 
 proc gitknewtmpdir {} {
-    global diffnum gitktmpdir gitdir
+    global diffnum gitktmpdir gitdir env
 
     if {![info exists gitktmpdir]} {
-	set gitktmpdir [file join $gitdir [format ".gitk-tmp.%s" [pid]]]
+	if {[info exists env(GITK_TMPDIR)]} {
+	    set tmpdir $env(GITK_TMPDIR)
+	} elseif {[info exists env(TMPDIR)]} {
+	    set tmpdir $env(TMPDIR)
+	} else {
+	    set tmpdir $gitdir
+	}
+	set gitktmpformat [file join $tmpdir ".gitk-tmp.XXXXXX"]
+	if {[catch {set gitktmpdir [exec mktemp -d $gitktmpformat]}]} {
+	    set gitktmpdir [file join $gitdir [format ".gitk-tmp.%s" [pid]]]
+	}
 	if {[catch {file mkdir $gitktmpdir} err]} {
 	    error_popup "[mc "Error creating temporary directory %s:" $gitktmpdir] $err"
 	    unset gitktmpdir
 	    return {}
 	}
 	set diffnum 0
@@ -3867,13 +3883,13 @@
 	if {$id eq $nullid} {
 	    # blame uses all-zeroes to mean not committed,
 	    # which would mean a change in the index
 	    set id $nullid2
 	}
 	if {[commitinview $id $curview]} {
-	    selectline [rowofcommit $id] 1 [list $fname $lnum]
+	    selectline [rowofcommit $id] 1 [list $fname $lnum] 1
 	} else {
 	    error_popup [mc "That line comes from commit %s, \
 			     which is not in this view" [shortids $id]]
 	}
     } else {
 	puts "oops couldn't parse git blame output"
@@ -5202,17 +5218,21 @@
     incr lserial
 }
 
 # spawn off a process to do git diff-index --cached HEAD
 proc dodiffindex {} {
     global lserial showlocalchanges vfilelimit curview
-    global hasworktree
+    global hasworktree git_version
 
     if {!$showlocalchanges || !$hasworktree} return
     incr lserial
-    set cmd "|git diff-index --cached HEAD"
+    if {[package vcompare $git_version "1.7.2"] >= 0} {
+	set cmd "|git diff-index --cached --ignore-submodules=dirty HEAD"
+    } else {
+	set cmd "|git diff-index --cached HEAD"
+    }
     if {$vfilelimit($curview) ne {}} {
 	set cmd [concat $cmd -- $vfilelimit($curview)]
     }
     set fd [open $cmd r]
     fconfigure $fd -blocking 0
     set i [reg_instance $fd]
@@ -7017,13 +7037,13 @@
     allcanvs yview moveto [expr {$newtop * 1.0 / $ymax}]
 }
 
 # add a list of tag or branch names at position pos
 # returns the number of names inserted
 proc appendrefs {pos ids var} {
-    global ctext linknum curview $var maxrefs mainheadid
+    global ctext linknum curview $var maxrefs visiblerefs mainheadid
 
     if {[catch {$ctext index $pos}]} {
 	return 0
     }
     $ctext conf -state normal
     $ctext delete $pos "$pos lineend"
@@ -7038,20 +7058,20 @@
     set tags [lsort -index 0 -decreasing $tags]
     set nutags 0
 
     if {[llength $tags] > $maxrefs} {
 	# If we are displaying heads, and there are too many,
 	# see if there are some important heads to display.
-	# Currently this means "master" and the current head.
+	# Currently that are the current head and heads listed in $visiblerefs option
 	set itags {}
 	if {$var eq "idheads"} {
 	    set utags {}
 	    foreach ti $tags {
 		set hname [lindex $ti 0]
 		set id [lindex $ti 1]
-		if {($hname eq "master" || $id eq $mainheadid) &&
+		if {([lsearch -exact $visiblerefs $hname] != -1 || $id eq $mainheadid) &&
 		    [llength $itags] < $maxrefs} {
 		    lappend itags $ti
 		} else {
 		    lappend utags $ti
 		}
 	    }
@@ -7158,13 +7178,13 @@
     $canv delete markid
     set t [eval $canv create rect [$canv bbox $linehtag($id)] \
 	       -tags markid -outline $fgcolor]
     $canv raise $t
 }
 
-proc selectline {l isnew {desired_loc {}}} {
+proc selectline {l isnew {desired_loc {}} {switch_to_patch 0}} {
     global canv ctext commitinfo selectedline
     global canvy0 linespc parents children curview
     global currentid sha1entry
     global commentend idtags linknum
     global mergemax numcommits pending_select
     global cmitmode showneartags allcommits
@@ -7184,12 +7204,16 @@
     set selectedline $l
     set currentid $id
     if {$lastscrollrows < $numcommits} {
 	setcanvscroll
     }
 
+    if {$cmitmode ne "patch" && $switch_to_patch} {
+        set cmitmode "patch"
+    }
+
     set y [expr {$canvy0 + $l * $linespc}]
     set ymax [lindex [$canv cget -scrollregion] 3]
     set ytop [expr {$y - $linespc - 1}]
     set ybot [expr {$y + $linespc + 1}]
     set wnow [$canv yview]
     set wtop [expr {[lindex $wnow 0] * $ymax}]
@@ -7474,12 +7498,20 @@
     }
     if {$historyindex >= [llength $history]} {
 	.tf.bar.rightbut conf -state disabled
     }
 }
 
+proc go_to_parent {i} {
+    global parents curview targetid
+    set ps $parents($curview,$targetid)
+    if {[llength $ps] >= $i} {
+	selbyid [lindex $ps [expr $i - 1]]
+    }
+}
+
 proc gettree {id} {
     global treefilelist treeidlist diffids diffmergeid treepending
     global nullid nullid2
 
     set diffids $id
     catch {unset diffmergeid}
@@ -7702,13 +7734,13 @@
 
     add_flist $treediffs($ids)
     getblobdiffs $ids
 }
 
 proc diffcmd {ids flags} {
-    global log_showroot nullid nullid2
+    global log_showroot nullid nullid2 git_version
 
     set i [lsearch -exact $ids $nullid]
     set j [lsearch -exact $ids $nullid2]
     if {$i >= 0} {
 	if {[llength $ids] > 1 && $j < 0} {
 	    # comparing working directory with some specific revision
@@ -7723,12 +7755,15 @@
 	    set cmd [concat | git diff-files $flags]
 	    if {$j == 1} {
 		lappend cmd -R
 	    }
 	}
     } elseif {$j >= 0} {
+	if {[package vcompare $git_version "1.7.2"] >= 0} {
+	    set flags "$flags --ignore-submodules=dirty"
+	}
 	set cmd [concat | git diff-index --cached $flags]
 	if {[llength $ids] > 1} {
 	    # comparing index with specific revision
 	    if {$j == 0} {
 		lappend cmd -R [lindex $ids 1]
 	    } else {
@@ -11572,13 +11607,35 @@
     }
 }
 
 proc formatdate {d} {
     global datetimeformat
     if {$d ne {}} {
-	set d [clock format [lindex $d 0] -format $datetimeformat]
+	# If $datetimeformat includes a timezone, display in the
+	# timezone of the argument.  Otherwise, display in local time.
+	if {[string match {*%[zZ]*} $datetimeformat]} {
+	    if {[catch {set d [clock format [lindex $d 0] -timezone [lindex $d 1] -format $datetimeformat]}]} {
+		# Tcl < 8.5 does not support -timezone.  Emulate it by
+		# setting TZ (e.g. TZ=<-0430>+04:30).
+		global env
+		if {[info exists env(TZ)]} {
+		    set savedTZ $env(TZ)
+		}
+		set zone [lindex $d 1]
+		set sign [string map {+ - - +} [string index $zone 0]]
+		set env(TZ) <$zone>$sign[string range $zone 1 2]:[string range $zone 3 4]
+		set d [clock format [lindex $d 0] -format $datetimeformat]
+		if {[info exists savedTZ]} {
+		    set env(TZ) $savedTZ
+		} else {
+		    unset env(TZ)
+		}
+	    }
+	} else {
+	    set d [clock format [lindex $d 0] -format $datetimeformat]
+	}
     }
     return $d
 }
 
 # This list of encoding names and aliases is distilled from
 # http://www.iana.org/assignments/character-sets.
@@ -11998,12 +12055,13 @@
 set mingaplen 100
 set cmitmode "patch"
 set wrapcomment "none"
 set showneartags 1
 set hideremotes 0
 set maxrefs 20
+set visiblerefs {"master"}
 set maxlinelen 200
 set showlocalchanges 1
 set limitdiffs 1
 set datetimeformat "%Y-%m-%d %H:%M:%S"
 set autoselect 1
 set autosellen 40
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gitk-git/gitk-wish /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gitk-git/gitk-wish
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gitk-git/gitk-wish	2017-10-10 09:55:07.045088652 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gitk-git/gitk-wish	2017-10-10 09:58:36.372364977 +0800
@@ -2582,20 +2582,24 @@
     wm protocol . WM_DELETE_WINDOW doquit
     bind . <Destroy> {stop_backends}
     bind . <Button-1> "click %W"
     bind $fstring <Key-Return> {dofind 1 1}
     bind $sha1entry <Key-Return> {gotocommit; break}
     bind $sha1entry <<PasteSelection>> clearsha1
+    bind $sha1entry <<Paste>> clearsha1
     bind $cflist <1> {sel_flist %W %x %y; break}
     bind $cflist <B1-Motion> {sel_flist %W %x %y; break}
     bind $cflist <ButtonRelease-1> {treeclick %W %x %y}
     global ctxbut
     bind $cflist $ctxbut {pop_flist_menu %W %X %Y %x %y}
     bind $ctext $ctxbut {pop_diff_menu %W %X %Y %x %y}
     bind $ctext <Button-1> {focus %W}
     bind $ctext <<Selection>> rehighlight_search_results
+    for {set i 1} {$i < 10} {incr i} {
+	bind . <$M1B-Key-$i> [list go_to_parent $i]
+    }
 
     set maincursor [. cget -cursor]
     set textcursor [$ctext cget -cursor]
     set curtextcursor $textcursor
 
     set rowctxmenu .rowctxmenu
@@ -2783,13 +2787,13 @@
     global reflinecolor filesepbgcolor filesepfgcolor
     global mergecolors foundbgcolor currentsearchhitbgcolor
     global linehoverbgcolor linehoverfgcolor linehoveroutlinecolor circlecolors
     global mainheadcirclecolor workingfilescirclecolor indexcirclecolor
     global linkfgcolor circleoutlinecolor
     global autoselect autosellen extdifftool perfile_attrs markbgcolor use_ttk
-    global hideremotes want_ttk maxrefs
+    global hideremotes want_ttk maxrefs visiblerefs
     global config_file config_file_tmp
 
     if {$stuffsaved} return
     if {![winfo viewable .]} return
     catch {
 	if {[file exists $config_file_tmp]} {
@@ -2809,12 +2813,13 @@
 	puts $f [list set cmitmode $cmitmode]
 	puts $f [list set wrapcomment $wrapcomment]
 	puts $f [list set autoselect $autoselect]
 	puts $f [list set autosellen $autosellen]
 	puts $f [list set showneartags $showneartags]
 	puts $f [list set maxrefs $maxrefs]
+	puts $f [list set visiblerefs $visiblerefs]
 	puts $f [list set hideremotes $hideremotes]
 	puts $f [list set showlocalchanges $showlocalchanges]
 	puts $f [list set datetimeformat $datetimeformat]
 	puts $f [list set limitdiffs $limitdiffs]
 	puts $f [list set uicolor $uicolor]
 	puts $f [list set want_ttk $want_ttk]
@@ -3012,12 +3017,13 @@
 [mc "<Home>		Move to first commit"]
 [mc "<End>		Move to last commit"]
 [mc "<Up>, p, k	Move up one commit"]
 [mc "<Down>, n, j	Move down one commit"]
 [mc "<Left>, z, h	Go back in history list"]
 [mc "<Right>, x, l	Go forward in history list"]
+[mc "<%s-n>	Go to n-th parent of current commit in history list" $M1T]
 [mc "<PageUp>	Move up one page in commit list"]
 [mc "<PageDown>	Move down one page in commit list"]
 [mc "<%s-Home>	Scroll to top of commit list" $M1T]
 [mc "<%s-End>	Scroll to bottom of commit list" $M1T]
 [mc "<%s-Up>	Scroll commit list up one line" $M1T]
 [mc "<%s-Down>	Scroll commit list down one line" $M1T]
@@ -3489,16 +3495,26 @@
 	append findstring " " $x
     }
     set gdttype [mc "touching paths:"]
 }
 
 proc gitknewtmpdir {} {
-    global diffnum gitktmpdir gitdir
+    global diffnum gitktmpdir gitdir env
 
     if {![info exists gitktmpdir]} {
-	set gitktmpdir [file join $gitdir [format ".gitk-tmp.%s" [pid]]]
+	if {[info exists env(GITK_TMPDIR)]} {
+	    set tmpdir $env(GITK_TMPDIR)
+	} elseif {[info exists env(TMPDIR)]} {
+	    set tmpdir $env(TMPDIR)
+	} else {
+	    set tmpdir $gitdir
+	}
+	set gitktmpformat [file join $tmpdir ".gitk-tmp.XXXXXX"]
+	if {[catch {set gitktmpdir [exec mktemp -d $gitktmpformat]}]} {
+	    set gitktmpdir [file join $gitdir [format ".gitk-tmp.%s" [pid]]]
+	}
 	if {[catch {file mkdir $gitktmpdir} err]} {
 	    error_popup "[mc "Error creating temporary directory %s:" $gitktmpdir] $err"
 	    unset gitktmpdir
 	    return {}
 	}
 	set diffnum 0
@@ -3867,13 +3883,13 @@
 	if {$id eq $nullid} {
 	    # blame uses all-zeroes to mean not committed,
 	    # which would mean a change in the index
 	    set id $nullid2
 	}
 	if {[commitinview $id $curview]} {
-	    selectline [rowofcommit $id] 1 [list $fname $lnum]
+	    selectline [rowofcommit $id] 1 [list $fname $lnum] 1
 	} else {
 	    error_popup [mc "That line comes from commit %s, \
 			     which is not in this view" [shortids $id]]
 	}
     } else {
 	puts "oops couldn't parse git blame output"
@@ -5202,17 +5218,21 @@
     incr lserial
 }
 
 # spawn off a process to do git diff-index --cached HEAD
 proc dodiffindex {} {
     global lserial showlocalchanges vfilelimit curview
-    global hasworktree
+    global hasworktree git_version
 
     if {!$showlocalchanges || !$hasworktree} return
     incr lserial
-    set cmd "|git diff-index --cached HEAD"
+    if {[package vcompare $git_version "1.7.2"] >= 0} {
+	set cmd "|git diff-index --cached --ignore-submodules=dirty HEAD"
+    } else {
+	set cmd "|git diff-index --cached HEAD"
+    }
     if {$vfilelimit($curview) ne {}} {
 	set cmd [concat $cmd -- $vfilelimit($curview)]
     }
     set fd [open $cmd r]
     fconfigure $fd -blocking 0
     set i [reg_instance $fd]
@@ -7017,13 +7037,13 @@
     allcanvs yview moveto [expr {$newtop * 1.0 / $ymax}]
 }
 
 # add a list of tag or branch names at position pos
 # returns the number of names inserted
 proc appendrefs {pos ids var} {
-    global ctext linknum curview $var maxrefs mainheadid
+    global ctext linknum curview $var maxrefs visiblerefs mainheadid
 
     if {[catch {$ctext index $pos}]} {
 	return 0
     }
     $ctext conf -state normal
     $ctext delete $pos "$pos lineend"
@@ -7038,20 +7058,20 @@
     set tags [lsort -index 0 -decreasing $tags]
     set nutags 0
 
     if {[llength $tags] > $maxrefs} {
 	# If we are displaying heads, and there are too many,
 	# see if there are some important heads to display.
-	# Currently this means "master" and the current head.
+	# Currently that are the current head and heads listed in $visiblerefs option
 	set itags {}
 	if {$var eq "idheads"} {
 	    set utags {}
 	    foreach ti $tags {
 		set hname [lindex $ti 0]
 		set id [lindex $ti 1]
-		if {($hname eq "master" || $id eq $mainheadid) &&
+		if {([lsearch -exact $visiblerefs $hname] != -1 || $id eq $mainheadid) &&
 		    [llength $itags] < $maxrefs} {
 		    lappend itags $ti
 		} else {
 		    lappend utags $ti
 		}
 	    }
@@ -7158,13 +7178,13 @@
     $canv delete markid
     set t [eval $canv create rect [$canv bbox $linehtag($id)] \
 	       -tags markid -outline $fgcolor]
     $canv raise $t
 }
 
-proc selectline {l isnew {desired_loc {}}} {
+proc selectline {l isnew {desired_loc {}} {switch_to_patch 0}} {
     global canv ctext commitinfo selectedline
     global canvy0 linespc parents children curview
     global currentid sha1entry
     global commentend idtags linknum
     global mergemax numcommits pending_select
     global cmitmode showneartags allcommits
@@ -7184,12 +7204,16 @@
     set selectedline $l
     set currentid $id
     if {$lastscrollrows < $numcommits} {
 	setcanvscroll
     }
 
+    if {$cmitmode ne "patch" && $switch_to_patch} {
+        set cmitmode "patch"
+    }
+
     set y [expr {$canvy0 + $l * $linespc}]
     set ymax [lindex [$canv cget -scrollregion] 3]
     set ytop [expr {$y - $linespc - 1}]
     set ybot [expr {$y + $linespc + 1}]
     set wnow [$canv yview]
     set wtop [expr {[lindex $wnow 0] * $ymax}]
@@ -7474,12 +7498,20 @@
     }
     if {$historyindex >= [llength $history]} {
 	.tf.bar.rightbut conf -state disabled
     }
 }
 
+proc go_to_parent {i} {
+    global parents curview targetid
+    set ps $parents($curview,$targetid)
+    if {[llength $ps] >= $i} {
+	selbyid [lindex $ps [expr $i - 1]]
+    }
+}
+
 proc gettree {id} {
     global treefilelist treeidlist diffids diffmergeid treepending
     global nullid nullid2
 
     set diffids $id
     catch {unset diffmergeid}
@@ -7702,13 +7734,13 @@
 
     add_flist $treediffs($ids)
     getblobdiffs $ids
 }
 
 proc diffcmd {ids flags} {
-    global log_showroot nullid nullid2
+    global log_showroot nullid nullid2 git_version
 
     set i [lsearch -exact $ids $nullid]
     set j [lsearch -exact $ids $nullid2]
     if {$i >= 0} {
 	if {[llength $ids] > 1 && $j < 0} {
 	    # comparing working directory with some specific revision
@@ -7723,12 +7755,15 @@
 	    set cmd [concat | git diff-files $flags]
 	    if {$j == 1} {
 		lappend cmd -R
 	    }
 	}
     } elseif {$j >= 0} {
+	if {[package vcompare $git_version "1.7.2"] >= 0} {
+	    set flags "$flags --ignore-submodules=dirty"
+	}
 	set cmd [concat | git diff-index --cached $flags]
 	if {[llength $ids] > 1} {
 	    # comparing index with specific revision
 	    if {$j == 0} {
 		lappend cmd -R [lindex $ids 1]
 	    } else {
@@ -11572,13 +11607,35 @@
     }
 }
 
 proc formatdate {d} {
     global datetimeformat
     if {$d ne {}} {
-	set d [clock format [lindex $d 0] -format $datetimeformat]
+	# If $datetimeformat includes a timezone, display in the
+	# timezone of the argument.  Otherwise, display in local time.
+	if {[string match {*%[zZ]*} $datetimeformat]} {
+	    if {[catch {set d [clock format [lindex $d 0] -timezone [lindex $d 1] -format $datetimeformat]}]} {
+		# Tcl < 8.5 does not support -timezone.  Emulate it by
+		# setting TZ (e.g. TZ=<-0430>+04:30).
+		global env
+		if {[info exists env(TZ)]} {
+		    set savedTZ $env(TZ)
+		}
+		set zone [lindex $d 1]
+		set sign [string map {+ - - +} [string index $zone 0]]
+		set env(TZ) <$zone>$sign[string range $zone 1 2]:[string range $zone 3 4]
+		set d [clock format [lindex $d 0] -format $datetimeformat]
+		if {[info exists savedTZ]} {
+		    set env(TZ) $savedTZ
+		} else {
+		    unset env(TZ)
+		}
+	    }
+	} else {
+	    set d [clock format [lindex $d 0] -format $datetimeformat]
+	}
     }
     return $d
 }
 
 # This list of encoding names and aliases is distilled from
 # http://www.iana.org/assignments/character-sets.
@@ -11998,12 +12055,13 @@
 set mingaplen 100
 set cmitmode "patch"
 set wrapcomment "none"
 set showneartags 1
 set hideremotes 0
 set maxrefs 20
+set visiblerefs {"master"}
 set maxlinelen 200
 set showlocalchanges 1
 set limitdiffs 1
 set datetimeformat "%Y-%m-%d %H:%M:%S"
 set autoselect 1
 set autosellen 40
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gitk-git/po/bg.msg /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gitk-git/po/bg.msg
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gitk-git/po/bg.msg	2017-10-10 09:55:07.053084651 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gitk-git/po/bg.msg	2017-10-10 09:58:36.376362977 +0800
@@ -1,7 +1,7 @@
-set ::msgcat::header "Project-Id-Version: gitk master\nReport-Msgid-Bugs-To: \nPOT-Creation-Date: 2010-01-26 15:47-0800\nPO-Revision-Date: 2014-01-08 08:03+0200\nLast-Translator: Alexander Shopov <ash@kambanaria.org>\nLanguage-Team: Bulgarian <dict@fsa-bg.org>\nLanguage: bg\nMIME-Version: 1.0\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\nPlural-Forms: nplurals=2; plural=(n != 1);\n"
+set ::msgcat::header "Project-Id-Version: gitk master\nReport-Msgid-Bugs-To: \nPOT-Creation-Date: 2014-08-03 11:17+0300\nPO-Revision-Date: 2014-07-28 07:32+0300\nLast-Translator: Alexander Shopov <ash@kambanaria.org>\nLanguage-Team: Bulgarian <dict@fsa-bg.org>\nLanguage: bg\nMIME-Version: 1.0\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\nPlural-Forms: nplurals=2; plural=(n != 1);\n"
 ::msgcat::mcset bg "Couldn't get list of unmerged files:" "\u0421\u043f\u0438\u0441\u044a\u043a\u044a\u0442 \u0441 \u043d\u0435\u0441\u043b\u0435\u0442\u0438 \u0444\u0430\u0439\u043b\u043e\u0432\u0435 \u043d\u0435 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0431\u044a\u0434\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d:"
 ::msgcat::mcset bg "Color words" "\u041e\u0446\u0432\u0435\u0442\u044f\u0432\u0430\u043d\u0435 \u043d\u0430 \u0434\u0443\u043c\u0438\u0442\u0435"
 ::msgcat::mcset bg "Markup words" "\u041e\u0442\u0431\u0435\u043b\u044f\u0437\u0432\u0430\u043d\u0435 \u043d\u0430 \u0434\u0443\u043c\u0438\u0442\u0435"
 ::msgcat::mcset bg "Error parsing revisions:" "\u0413\u0440\u0435\u0448\u043a\u0430 \u043f\u0440\u0438 \u0440\u0430\u0437\u0431\u043e\u0440 \u043d\u0430 \u0432\u0435\u0440\u0441\u0438\u0438\u0442\u0435:"
 ::msgcat::mcset bg "Error executing --argscmd command:" "\u0413\u0440\u0435\u0448\u043a\u0430 \u043f\u0440\u0438 \u0438\u0437\u043f\u044a\u043b\u043d\u0435\u043d\u0438\u0435 \u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u0442\u0430 \u0441 \u201e--argscmd\u201c."
 ::msgcat::mcset bg "No files selected: --merge specified but no files are unmerged." "\u041d\u0435 \u0441\u0430 \u0438\u0437\u0431\u0440\u0430\u043d\u0438 \u0444\u0430\u0439\u043b\u043e\u0432\u0435 \u2014 \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u0435 \u043e\u043f\u0446\u0438\u044f\u0442\u0430 \u201e--merge\u201c, \u043d\u043e \u043d\u044f\u043c\u0430 \u043d\u0435\u0441\u043b\u0435\u0442\u0438 \u0444\u0430\u0439\u043b\u043e\u0432\u0435."
@@ -16,13 +16,13 @@
 ::msgcat::mcset bg "OK" "\u0414\u043e\u0431\u0440\u0435"
 ::msgcat::mcset bg "Cancel" "\u041e\u0442\u043a\u0430\u0437"
 ::msgcat::mcset bg "Update" "\u041e\u0431\u043d\u043e\u0432\u044f\u0432\u0430\u043d\u0435"
 ::msgcat::mcset bg "Reload" "\u041f\u0440\u0435\u0437\u0430\u0440\u0435\u0436\u0434\u0430\u043d\u0435"
 ::msgcat::mcset bg "Reread references" "\u041d\u0430\u043d\u043e\u0432\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u0435 \u043d\u0430 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438\u0442\u0435"
 ::msgcat::mcset bg "List references" "\u0418\u0437\u0431\u0440\u043e\u044f\u0432\u0430\u043d\u0435 \u043d\u0430 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438\u0442\u0435"
-::msgcat::mcset bg "Start git gui" "\u0421\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 git gui"
+::msgcat::mcset bg "Start git gui" "\u0421\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u201egit gui\u201c"
 ::msgcat::mcset bg "Quit" "\u0421\u043f\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430\u0442\u0430"
 ::msgcat::mcset bg "File" "\u0424\u0430\u0439\u043b"
 ::msgcat::mcset bg "Preferences" "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438"
 ::msgcat::mcset bg "Edit" "\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0430\u043d\u0435"
 ::msgcat::mcset bg "New view..." "\u041d\u043e\u0432 \u0438\u0437\u0433\u043b\u0435\u0434\u2026"
 ::msgcat::mcset bg "Edit view..." "\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u0438\u0437\u0433\u043b\u0435\u0434\u0430\u2026"
@@ -32,22 +32,20 @@
 ::msgcat::mcset bg "About gitk" "\u041e\u0442\u043d\u043e\u0441\u043d\u043e gitk"
 ::msgcat::mcset bg "Key bindings" "\u041a\u043b\u0430\u0432\u0438\u0448\u043d\u0438 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438"
 ::msgcat::mcset bg "Help" "\u041f\u043e\u043c\u043e\u0449"
 ::msgcat::mcset bg "SHA1 ID:" "SHA1:"
 ::msgcat::mcset bg "Row" "\u0420\u0435\u0434"
 ::msgcat::mcset bg "Find" "\u0422\u044a\u0440\u0441\u0435\u043d\u0435"
-::msgcat::mcset bg "next" "\u0441\u043b\u0435\u0434\u0432\u0430\u0449\u043e"
-::msgcat::mcset bg "prev" "\u043f\u0440\u0435\u0434\u0438\u0448\u043d\u043e"
 ::msgcat::mcset bg "commit" "\u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0435"
 ::msgcat::mcset bg "containing:" "\u0441\u044a\u0434\u044a\u0440\u0436\u0430\u0449\u043e:"
 ::msgcat::mcset bg "touching paths:" "\u0437\u0430\u0441\u044f\u0433\u0430\u0449\u043e \u043f\u044a\u0442\u0438\u0449\u0430\u0442\u0430:"
 ::msgcat::mcset bg "adding/removing string:" "\u0434\u043e\u0431\u0430\u0432\u044f\u0449\u043e/\u043f\u0440\u0435\u043c\u0430\u0445\u0432\u0430\u0449\u043e \u043d\u0438\u0437"
 ::msgcat::mcset bg "changing lines matching:" "\u043f\u0440\u043e\u043c\u0435\u043d\u044f\u0449\u043e \u0440\u0435\u0434\u043e\u0432\u0435 \u043d\u0430\u043f\u0430\u0441\u0432\u0430\u0449\u0438:"
 ::msgcat::mcset bg "Exact" "\u0422\u043e\u0447\u043d\u043e"
 ::msgcat::mcset bg "IgnCase" "\u0411\u0435\u0437 \u0440\u0435\u0433\u0438\u0441\u0442\u044a\u0440"
-::msgcat::mcset bg "Regexp" "\u0420\u0435\u0433. \u0438\u0437\u0440."
+::msgcat::mcset bg "Regexp" "\u0420\u0435\u0433. \u0438\u0437\u0440\u0430\u0437"
 ::msgcat::mcset bg "All fields" "\u0412\u0441\u0438\u0447\u043a\u0438 \u043f\u043e\u043b\u0435\u0442\u0430"
 ::msgcat::mcset bg "Headline" "\u041f\u044a\u0440\u0432\u0438 \u0440\u0435\u0434"
 ::msgcat::mcset bg "Comments" "\u041a\u043e\u043c\u0435\u043d\u0442\u0430\u0440\u0438"
 ::msgcat::mcset bg "Author" "\u0410\u0432\u0442\u043e\u0440"
 ::msgcat::mcset bg "Committer" "\u041f\u043e\u0434\u0430\u0432\u0430\u0449"
 ::msgcat::mcset bg "Search" "\u0422\u044a\u0440\u0441\u0435\u043d\u0435"
@@ -79,57 +77,57 @@
 ::msgcat::mcset bg "Highlight this too" "\u041e\u0442\u0431\u0435\u043b\u044f\u0437\u0432\u0430\u043d\u0435 \u0438 \u043d\u0430 \u0442\u043e\u0432\u0430"
 ::msgcat::mcset bg "Highlight this only" "\u041e\u0442\u0431\u0435\u043b\u044f\u0437\u0432\u0430\u043d\u0435 \u0441\u0430\u043c\u043e \u043d\u0430 \u0442\u043e\u0432\u0430"
 ::msgcat::mcset bg "External diff" "\u0412\u044a\u043d\u0448\u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430 \u0437\u0430 \u0440\u0430\u0437\u043b\u0438\u043a\u0438"
 ::msgcat::mcset bg "Blame parent commit" "\u0410\u043d\u043e\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u0441\u043a\u043e\u0442\u043e \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0435"
 ::msgcat::mcset bg "Show origin of this line" "\u041f\u043e\u043a\u0430\u0437\u0432\u0430\u043d\u0435 \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0445\u043e\u0434\u0430 \u043d\u0430 \u0442\u043e\u0437\u0438 \u0440\u0435\u0434"
 ::msgcat::mcset bg "Run git gui blame on this line" "\u0418\u0437\u043f\u044a\u043b\u043d\u0435\u043d\u0438\u0435 \u043d\u0430 \u201egit gui blame\u201c \u0432\u044a\u0440\u0445\u0443 \u0442\u043e\u0437\u0438 \u0440\u0435\u0434"
-::msgcat::mcset bg "\nGitk - a commit viewer for git\n\nCopyright \u00a9 2005-2011 Paul Mackerras\n\nUse and redistribute under the terms of the GNU General Public License" "\nGitk \u2014 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f\u0442\u0430 \u0432 Git\n\n\u0410\u0432\u0442\u043e\u0440\u0441\u043a\u0438 \u043f\u0440\u0430\u0432\u0430: \u00a9 2005-2011 Paul Mackerras\n\n\u0418\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0439\u0442\u0435 \u0438 \u0440\u0430\u0437\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u044f\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0442\u0430 \u043d\u0430 \u041e\u041f\u041b \u043d\u0430 \u0413\u041d\u0423"
+::msgcat::mcset bg "\nGitk - a commit viewer for git\n\nCopyright \u00a9 2005-2014 Paul Mackerras\n\nUse and redistribute under the terms of the GNU General Public License" "\nGitk \u2014 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f\u0442\u0430 \u0432 Git\n\n\u0410\u0432\u0442\u043e\u0440\u0441\u043a\u0438 \u043f\u0440\u0430\u0432\u0430: \u00a9 2005-2014 Paul Mackerras\n\n\u0418\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0439\u0442\u0435 \u0438 \u0440\u0430\u0437\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u044f\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0442\u0430 \u043d\u0430 \u041e\u041f\u041b \u043d\u0430 \u0413\u041d\u0423"
 ::msgcat::mcset bg "Close" "\u0417\u0430\u0442\u0432\u0430\u0440\u044f\u043d\u0435"
 ::msgcat::mcset bg "Gitk key bindings" "\u041a\u043b\u0430\u0432\u0438\u0448\u043d\u0438 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438"
 ::msgcat::mcset bg "Gitk key bindings:" "\u041a\u043b\u0430\u0432\u0438\u0448\u043d\u0438 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438:"
 ::msgcat::mcset bg "<%s-Q>\u0009\u0009Quit" "<%s-Q>\u0009\u0009\u0421\u043f\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430\u0442\u0430"
 ::msgcat::mcset bg "<%s-W>\u0009\u0009Close window" "<%s-W>\u0009\u0009\u0417\u0430\u0442\u0432\u0430\u0440\u044f\u043d\u0435 \u043d\u0430 \u043f\u0440\u043e\u0437\u043e\u0440\u0435\u0446\u0430"
 ::msgcat::mcset bg "<Home>\u0009\u0009Move to first commit" "<Home>\u0009\u0009\u041a\u044a\u043c \u043f\u044a\u0440\u0432\u043e\u0442\u043e \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0435"
 ::msgcat::mcset bg "<End>\u0009\u0009Move to last commit" "<End>\u0009\u0009\u041a\u044a\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u043e\u0442\u043e \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0435"
 ::msgcat::mcset bg "<Up>, p, k\u0009Move up one commit" "<Up>, p, k\u0009\u0415\u0434\u043d\u043e \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0435 \u043d\u0430\u0433\u043e\u0440\u0435"
 ::msgcat::mcset bg "<Down>, n, j\u0009Move down one commit" "<Down>, n, j\u0009\u0415\u0434\u043d\u043e \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0435 \u043d\u0430\u0434\u043e\u043b\u0443"
 ::msgcat::mcset bg "<Left>, z, h\u0009Go back in history list" "<Left>, z, h\u0009\u041d\u0430\u0437\u0430\u0434 \u0432 \u0438\u0441\u0442\u043e\u0440\u0438\u044f\u0442\u0430"
 ::msgcat::mcset bg "<Right>, x, l\u0009Go forward in history list" "<Right>, x, l\u0009\u041d\u0430\u043f\u0440\u0435\u0434 \u0432 \u0438\u0441\u0442\u043e\u0440\u0438\u044f\u0442\u0430"
-::msgcat::mcset bg "<PageUp>\u0009Move up one page in commit list" "<PageUp>\u0009\u0415\u0434\u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0430\u0433\u043e\u0440\u0435 \u0432 \u0441\u043f\u0438\u0441\u044a\u043a\u0430 \u0441 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f\u0442\u0430"
-::msgcat::mcset bg "<PageDown>\u0009Move down one page in commit list" "<PageDown>\u0009\u0415\u0434\u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0430\u0434\u043e\u043b\u0443 \u0432 \u0441\u043f\u0438\u0441\u044a\u043a\u0430 \u0441 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f\u0442\u0430"
+::msgcat::mcset bg "<PageUp>\u0009Move up one page in commit list" "<PageUp>\u0009\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0430\u0433\u043e\u0440\u0435 \u0432 \u0441\u043f\u0438\u0441\u044a\u043a\u0430 \u0441 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f\u0442\u0430"
+::msgcat::mcset bg "<PageDown>\u0009Move down one page in commit list" "<PageDown>\u0009\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0430\u0434\u043e\u043b\u0443 \u0432 \u0441\u043f\u0438\u0441\u044a\u043a\u0430 \u0441 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f\u0442\u0430"
 ::msgcat::mcset bg "<%s-Home>\u0009Scroll to top of commit list" "<%s-Home>\u0009\u041a\u044a\u043c \u043d\u0430\u0447\u0430\u043b\u043e\u0442\u043e \u043d\u0430 \u0441\u043f\u0438\u0441\u044a\u043a\u0430 \u0441 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f\u0442\u0430"
 ::msgcat::mcset bg "<%s-End>\u0009Scroll to bottom of commit list" "<%s-End>\u0009\u041a\u044a\u043c \u043a\u0440\u0430\u044f \u043d\u0430 \u0441\u043f\u0438\u0441\u044a\u043a\u0430 \u0441 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f\u0442\u0430"
-::msgcat::mcset bg "<%s-Up>\u0009Scroll commit list up one line" "<%s-Up>\u0009\u041f\u0440\u0438\u0434\u0432\u0438\u0436\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u043f\u0438\u0441\u044a\u043a\u0430 \u0441 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f \u0441 \u0435\u0434\u0438\u043d \u0440\u0435\u0434 \u043d\u0430\u0433\u043e\u0440\u0435"
-::msgcat::mcset bg "<%s-Down>\u0009Scroll commit list down one line" "<%s-Down>\u0009\u041f\u0440\u0438\u0434\u0432\u0438\u0436\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u043f\u0438\u0441\u044a\u043a\u0430 \u0441 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f \u0441 \u0435\u0434\u0438\u043d \u0440\u0435\u0434 \u043d\u0430\u0434\u043e\u043b\u0443"
-::msgcat::mcset bg "<%s-PageUp>\u0009Scroll commit list up one page" "<%s-PageUp>\u0009\u041f\u0440\u0438\u0434\u0432\u0438\u0436\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u043f\u0438\u0441\u044a\u043a\u0430 \u0441 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f \u0441 \u0435\u0434\u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0430\u0433\u043e\u0440\u0435"
-::msgcat::mcset bg "<%s-PageDown>\u0009Scroll commit list down one page" "<%s-PageDown>\u0009\u041f\u0440\u0438\u0434\u0432\u0438\u0436\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u043f\u0438\u0441\u044a\u043a\u0430 \u0441 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f \u0441 \u0435\u0434\u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0430\u0434\u043e\u043b\u0443"
+::msgcat::mcset bg "<%s-Up>\u0009Scroll commit list up one line" "<%s-Up>\u0009\u0420\u0435\u0434 \u043d\u0430\u0433\u043e\u0440\u0435 \u0432 \u0441\u043f\u0438\u0441\u044a\u043a\u0430 \u0441 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f"
+::msgcat::mcset bg "<%s-Down>\u0009Scroll commit list down one line" "<%s-Down>\u0009\u0420\u0435\u0434 \u043d\u0430\u0434\u043e\u043b\u0443 \u0432 \u0441\u043f\u0438\u0441\u044a\u043a\u0430 \u0441 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f"
+::msgcat::mcset bg "<%s-PageUp>\u0009Scroll commit list up one page" "<%s-PageUp>\u0009\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0430\u0433\u043e\u0440\u0435 \u0432 \u0441\u043f\u0438\u0441\u044a\u043a\u0430 \u0441 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f"
+::msgcat::mcset bg "<%s-PageDown>\u0009Scroll commit list down one page" "<%s-PageDown>\u0009\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0430\u0434\u043e\u043b\u0443 \u0432 \u0441\u043f\u0438\u0441\u044a\u043a\u0430 \u0441 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f"
 ::msgcat::mcset bg "<Shift-Up>\u0009Find backwards (upwards, later commits)" "<Shift-Up>\u0009\u0422\u044a\u0440\u0441\u0435\u043d\u0435 \u043d\u0430\u0437\u0430\u0434 (\u0432\u0438\u0437\u0443\u0430\u043b\u043d\u043e \u043d\u0430\u0433\u043e\u0440\u0435, \u0438\u0441\u0442\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0438 \u2014 \u043f\u043e\u0441\u043b\u0435\u0434\u0432\u0430\u0449\u0438)"
 ::msgcat::mcset bg "<Shift-Down>\u0009Find forwards (downwards, earlier commits)" "<Shift-Down>\u0009\u0422\u044a\u0440\u0441\u0435\u043d\u0435 \u043d\u0430\u043f\u0440\u0435\u0434 (\u0432\u0438\u0437\u0443\u0430\u043b\u043d\u043e \u043d\u0430\u0434\u043e\u043b\u0443, \u0438\u0441\u0442\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0438 \u2014 \u043f\u0440\u0435\u0434\u0445\u043e\u0436\u0434\u0430\u0449\u0438)"
-::msgcat::mcset bg "<Delete>, b\u0009Scroll diff view up one page" "<Delete>, b\u0009\u041f\u0440\u0438\u0434\u0432\u0438\u0436\u0432\u0430\u043d\u0435 \u043d\u0430 \u0438\u0437\u0433\u043b\u0435\u0434\u0430 \u0437\u0430 \u0440\u0430\u0437\u043b\u0438\u043a\u0438 \u0435\u0434\u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0430\u0433\u043e\u0440\u0435"
-::msgcat::mcset bg "<Backspace>\u0009Scroll diff view up one page" "<Backspace>\u0009\u041f\u0440\u0438\u0434\u0432\u0438\u0436\u0432\u0430\u043d\u0435 \u043d\u0430 \u0438\u0437\u0433\u043b\u0435\u0434\u0430 \u0437\u0430 \u0440\u0430\u0437\u043b\u0438\u043a\u0438 \u0435\u0434\u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0430\u0433\u043e\u0440\u0435"
-::msgcat::mcset bg "<Space>\u0009\u0009Scroll diff view down one page" "<Space>\u0009\u0009\u041f\u0440\u0438\u0434\u0432\u0438\u0436\u0432\u0430\u043d\u0435 \u043d\u0430 \u0438\u0437\u0433\u043b\u0435\u0434\u0430 \u0437\u0430 \u0440\u0430\u0437\u043b\u0438\u043a\u0438 \u0435\u0434\u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0430\u0434\u043e\u043b\u0443"
-::msgcat::mcset bg "u\u0009\u0009Scroll diff view up 18 lines" "u\u0009\u0009\u041f\u0440\u0438\u0434\u0432\u0438\u0436\u0432\u0430\u043d\u0435 \u043d\u0430 \u0438\u0437\u0433\u043b\u0435\u0434\u0430 \u0437\u0430 \u0440\u0430\u0437\u043b\u0438\u043a\u0438 18 \u0440\u0435\u0434\u0430 \u043d\u0430\u0433\u043e\u0440\u0435"
-::msgcat::mcset bg "d\u0009\u0009Scroll diff view down 18 lines" "d\u0009\u0009\u041f\u0440\u0438\u0434\u0432\u0438\u0436\u0432\u0430\u043d\u0435 \u043d\u0430 \u0438\u0437\u0433\u043b\u0435\u0434\u0430 \u0437\u0430 \u0440\u0430\u0437\u043b\u0438\u043a\u0438 18 \u0440\u0435\u0434\u0430 \u043d\u0430\u0434\u043e\u043b\u0443"
+::msgcat::mcset bg "<Delete>, b\u0009Scroll diff view up one page" "<Delete>, b\u0009\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0430\u0433\u043e\u0440\u0435 \u0432 \u0438\u0437\u0433\u043b\u0435\u0434\u0430 \u0437\u0430 \u0440\u0430\u0437\u043b\u0438\u043a\u0438"
+::msgcat::mcset bg "<Backspace>\u0009Scroll diff view up one page" "<Backspace>\u0009\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0430\u0434\u043e\u043b\u0443 \u0432 \u0438\u0437\u0433\u043b\u0435\u0434\u0430 \u0437\u0430 \u0440\u0430\u0437\u043b\u0438\u043a\u0438"
+::msgcat::mcset bg "<Space>\u0009\u0009Scroll diff view down one page" "<Space>\u0009\u0009\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0430\u0434\u043e\u043b\u0443 \u0432 \u0438\u0437\u0433\u043b\u0435\u0434\u0430 \u0437\u0430 \u0440\u0430\u0437\u043b\u0438\u043a\u0438"
+::msgcat::mcset bg "u\u0009\u0009Scroll diff view up 18 lines" "u\u0009\u000918 \u0440\u0435\u0434\u0430 \u043d\u0430\u0433\u043e\u0440\u0435 \u0432 \u0438\u0437\u0433\u043b\u0435\u0434\u0430 \u0437\u0430 \u0440\u0430\u0437\u043b\u0438\u043a\u0438"
+::msgcat::mcset bg "d\u0009\u0009Scroll diff view down 18 lines" "d\u0009\u000918 \u0440\u0435\u0434\u0430 \u043d\u0430\u0434\u043e\u043b\u0443 \u0432 \u0438\u0437\u0433\u043b\u0435\u0434\u0430 \u0437\u0430 \u0440\u0430\u0437\u043b\u0438\u043a\u0438"
 ::msgcat::mcset bg "<%s-F>\u0009\u0009Find" "<%s-F>\u0009\u0009\u0422\u044a\u0440\u0441\u0435\u043d\u0435"
 ::msgcat::mcset bg "<%s-G>\u0009\u0009Move to next find hit" "<%s-G>\u0009\u0009\u041a\u044a\u043c \u0441\u043b\u0435\u0434\u0432\u0430\u0449\u0430\u0442\u0430 \u043f\u043e\u044f\u0432\u0430"
 ::msgcat::mcset bg "<Return>\u0009Move to next find hit" "<Return>\u0009\u041a\u044a\u043c \u0441\u043b\u0435\u0434\u0432\u0430\u0449\u0430\u0442\u0430 \u043f\u043e\u044f\u0432\u0430"
 ::msgcat::mcset bg "/\u0009\u0009Focus the search box" "/\u0009\u0009\u0424\u043e\u043a\u0443\u0441 \u0432\u044a\u0440\u0445\u0443 \u043f\u043e\u043b\u0435\u0442\u043e \u0437\u0430 \u0442\u044a\u0440\u0441\u0435\u043d\u0435"
 ::msgcat::mcset bg "?\u0009\u0009Move to previous find hit" "?\u0009\u0009\u041a\u044a\u043c \u043f\u0440\u0435\u0434\u0438\u0448\u043d\u0430\u0442\u0430 \u043f\u043e\u044f\u0432\u0430"
-::msgcat::mcset bg "f\u0009\u0009Scroll diff view to next file" "f\u0009\u0009\u041f\u0440\u0438\u0434\u0432\u0438\u0436\u0432\u0430\u043d\u0435 \u043d\u0430 \u0438\u0437\u0433\u043b\u0435\u0434\u0430 \u0437\u0430 \u0440\u0430\u0437\u043b\u0438\u043a\u0438 \u043a\u044a\u043c \u0441\u043b\u0435\u0434\u0432\u0430\u0449\u0438\u044f \u0440\u0435\u0434"
+::msgcat::mcset bg "f\u0009\u0009Scroll diff view to next file" "f\u0009\u0009\u0421\u043b\u0435\u0434\u0432\u0430\u0449 \u0444\u0430\u0439\u043b \u0432 \u0438\u0437\u0433\u043b\u0435\u0434\u0430 \u0437\u0430 \u0440\u0430\u0437\u043b\u0438\u043a\u0438"
 ::msgcat::mcset bg "<%s-S>\u0009\u0009Search for next hit in diff view" "<%s-S>\u0009\u0009\u0422\u044a\u0440\u0441\u0435\u043d\u0435 \u043d\u0430 \u0441\u043b\u0435\u0434\u0432\u0430\u0449\u0430\u0442\u0430 \u043f\u043e\u044f\u0432\u0430 \u0432 \u0438\u0437\u0433\u043b\u0435\u0434\u0430 \u0437\u0430 \u0440\u0430\u0437\u043b\u0438\u043a\u0438"
 ::msgcat::mcset bg "<%s-R>\u0009\u0009Search for previous hit in diff view" "<%s-R>\u0009\u0009\u0422\u044a\u0440\u0441\u0435\u043d\u0435 \u043d\u0430 \u043f\u0440\u0435\u0434\u0438\u0448\u043d\u0430\u0442\u0430 \u043f\u043e\u044f\u0432\u0430 \u0432 \u0438\u0437\u0433\u043b\u0435\u0434\u0430 \u0437\u0430 \u0440\u0430\u0437\u043b\u0438\u043a\u0438"
 ::msgcat::mcset bg "<%s-KP+>\u0009Increase font size" "<%s-KP+>\u0009\u041f\u043e-\u0433\u043e\u043b\u044f\u043c \u0440\u0430\u0437\u043c\u0435\u0440 \u043d\u0430 \u0448\u0440\u0438\u0444\u0442\u0430"
 ::msgcat::mcset bg "<%s-plus>\u0009Increase font size" "<%s-plus>\u0009\u041f\u043e-\u0433\u043e\u043b\u044f\u043c \u0440\u0430\u0437\u043c\u0435\u0440 \u043d\u0430 \u0448\u0440\u0438\u0444\u0442\u0430"
 ::msgcat::mcset bg "<%s-KP->\u0009Decrease font size" "<%s-KP->\u0009\u041f\u043e-\u043c\u0430\u043b\u044a\u043a \u0440\u0430\u0437\u043c\u0435\u0440 \u043d\u0430 \u0448\u0440\u0438\u0444\u0442\u0430"
 ::msgcat::mcset bg "<%s-minus>\u0009Decrease font size" "<%s-minus>\u0009\u041f\u043e-\u043c\u0430\u043b\u044a\u043a \u0440\u0430\u0437\u043c\u0435\u0440 \u043d\u0430 \u0448\u0440\u0438\u0444\u0442\u0430"
 ::msgcat::mcset bg "<F5>\u0009\u0009Update" "<F5>\u0009\u0009\u041e\u0431\u043d\u043e\u0432\u044f\u0432\u0430\u043d\u0435"
 ::msgcat::mcset bg "Error creating temporary directory %s:" "\u0413\u0440\u0435\u0448\u043a\u0430 \u043f\u0440\u0438 \u0441\u044a\u0437\u0434\u0430\u0432\u0430\u043d\u0435\u0442\u043e \u043d\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u0442\u0430 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u201e%s\u201c:"
 ::msgcat::mcset bg "Error getting \"%s\" from %s:" "\u0413\u0440\u0435\u0448\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0432\u0430\u043d\u0435\u0442\u043e \u043d\u0430 \u201e%s\u201c \u043e\u0442 %s:"
 ::msgcat::mcset bg "command failed:" "\u043d\u0435\u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0438\u0437\u043f\u044a\u043b\u043d\u0435\u043d\u0438\u0435 \u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430:"
 ::msgcat::mcset bg "No such commit" "\u0422\u0430\u043a\u043e\u0432\u0430 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0435 \u043d\u044f\u043c\u0430"
-::msgcat::mcset bg "git gui blame: command failed:" "git gui blame: \u043d\u0435\u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0438\u0437\u043f\u044a\u043b\u043d\u0435\u043d\u0438\u0435 \u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430:"
+::msgcat::mcset bg "git gui blame: command failed:" "\u201egit gui blame\u201c: \u043d\u0435\u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0438\u0437\u043f\u044a\u043b\u043d\u0435\u043d\u0438\u0435 \u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430:"
 ::msgcat::mcset bg "Couldn't read merge head: %s" "\u0412\u044a\u0440\u0445\u044a\u0442 \u0437\u0430 \u0441\u043b\u0438\u0432\u0430\u043d\u0435 \u043d\u0435 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0431\u044a\u0434\u0435 \u043f\u0440\u043e\u0447\u0435\u0442\u0435\u043d: %s"
 ::msgcat::mcset bg "Error reading index: %s" "\u0413\u0440\u0435\u0448\u043a\u0430 \u043f\u0440\u0438 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u0435 \u043d\u0430 \u0438\u043d\u0434\u0435\u043a\u0441\u0430: %s"
 ::msgcat::mcset bg "Couldn't start git blame: %s" "\u041a\u043e\u043c\u0430\u043d\u0434\u0430\u0442\u0430 \u201egit blame\u201c \u043d\u0435 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0431\u044a\u0434\u0435 \u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0430: %s"
 ::msgcat::mcset bg "Searching" "\u0422\u044a\u0440\u0441\u0435\u043d\u0435"
 ::msgcat::mcset bg "Error running git blame: %s" "\u0413\u0440\u0435\u0448\u043a\u0430 \u043f\u0440\u0438 \u0438\u0437\u043f\u044a\u043b\u043d\u0435\u043d\u0438\u0435\u0442\u043e \u043d\u0430 \u201egit blame\u201c: %s"
 ::msgcat::mcset bg "That line comes from commit %s,  which is not in this view" "\u0422\u043e\u0437\u0438 \u0440\u0435\u0434 \u0438\u0434\u0432\u0430 \u043e\u0442 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0435\u0442\u043e %s,  \u043a\u043e\u0435\u0442\u043e \u043d\u0435 \u0435 \u0432 \u0438\u0437\u0433\u043b\u0435\u0434\u0430"
@@ -157,13 +155,13 @@
 ::msgcat::mcset bg "Limit and/or skip a number of revisions (positive integer):" "\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0430\u0432\u0430\u043d\u0435 \u0438/\u0438\u043b\u0438 \u043f\u0440\u0435\u0441\u043a\u0430\u0447\u0430\u043d\u0435 \u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0431\u0440\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 (\u043d\u0435\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u043d\u043e \u0446\u044f\u043b\u043e \u0447\u0438\u0441\u043b\u043e):"
 ::msgcat::mcset bg "Number to show:" "\u0411\u0440\u043e\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u0438:"
 ::msgcat::mcset bg "Number to skip:" "\u0411\u0440\u043e\u0439 \u043f\u0440\u0435\u0441\u043a\u043e\u0447\u0435\u043d\u0438:"
 ::msgcat::mcset bg "Miscellaneous options:" "\u0420\u0430\u0437\u043d\u0438:"
 ::msgcat::mcset bg "Strictly sort by date" "\u041f\u043e\u0434\u0440\u0435\u0436\u0434\u0430\u043d\u0435 \u043f\u043e \u0434\u0430\u0442\u0430"
 ::msgcat::mcset bg "Mark branch sides" "\u041e\u0442\u0431\u0435\u043b\u044f\u0437\u0432\u0430\u043d\u0435 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0442\u0435 \u043f\u043e \u043a\u043b\u043e\u043d\u0430"
-::msgcat::mcset bg "Limit to first parent" "\u0421\u0430\u043c\u043e \u043f\u044a\u0440\u0432\u0438\u044f\u0442 \u0440\u043e\u0434\u0438\u0442\u0435\u043b"
+::msgcat::mcset bg "Limit to first parent" "\u0421\u0430\u043c\u043e \u043f\u044a\u0440\u0432\u0438\u044f \u0440\u043e\u0434\u0438\u0442\u0435\u043b"
 ::msgcat::mcset bg "Simple history" "\u041e\u043f\u0440\u043e\u0441\u0442\u0435\u043d\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u044f"
 ::msgcat::mcset bg "Additional arguments to git log:" "\u0414\u043e\u043f\u044a\u043b\u043d\u0438\u0442\u0435\u043b\u043d\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0438 \u043a\u044a\u043c \u201egit log\u201c:"
 ::msgcat::mcset bg "Enter files and directories to include, one per line:" "\u0412\u044a\u0432\u0435\u0434\u0435\u0442\u0435 \u0444\u0430\u0439\u043b\u043e\u0432\u0435\u0442\u0435 \u0438 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438\u0442\u0435 \u0437\u0430 \u0432\u043a\u043b\u044e\u0447\u0432\u0430\u043d\u0435, \u043f\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0430 \u0440\u0435\u0434"
 ::msgcat::mcset bg "Command to generate more commits to include:" "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0437\u0430 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0430\u043d\u0435\u0442\u043e \u043d\u0430 \u0434\u043e\u043f\u044a\u043b\u043d\u0438\u0442\u0435\u043b\u043d\u0438 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f, \u043a\u043e\u0438\u0442\u043e \u0434\u0430 \u0431\u044a\u0434\u0430\u0442 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438:"
 ::msgcat::mcset bg "Gitk: edit view" "Gitk: \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u0438\u0437\u0433\u043b\u0435\u0434"
 ::msgcat::mcset bg "-- criteria for selecting revisions" "\u2014 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u0437\u0430 \u0438\u0437\u0431\u043e\u0440 \u043d\u0430 \u0432\u0435\u0440\u0441\u0438\u0438"
@@ -184,15 +182,15 @@
 ::msgcat::mcset bg "Child" "\u0414\u0435\u0442\u0435"
 ::msgcat::mcset bg "Branch" "\u041a\u043b\u043e\u043d"
 ::msgcat::mcset bg "Follows" "\u0421\u043b\u0435\u0434\u0432\u0430"
 ::msgcat::mcset bg "Precedes" "\u041f\u0440\u0435\u0434\u0448\u0435\u0441\u0442\u0432\u0430"
 ::msgcat::mcset bg "Error getting diffs: %s" "\u0413\u0440\u0435\u0448\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0432\u0430\u043d\u0435\u0442\u043e \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u043a\u0438\u0442\u0435: %s"
 ::msgcat::mcset bg "Goto:" "\u041a\u044a\u043c \u0440\u0435\u0434:"
-::msgcat::mcset bg "Short SHA1 id %s is ambiguous" "\u0421\u044a\u043a\u0440\u0430\u0442\u0435\u043d\u0430\u0442\u0430 SHA1 %s \u043d\u0435 \u0435 \u0435\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u0430"
+::msgcat::mcset bg "Short SHA1 id %s is ambiguous" "\u0421\u044a\u043a\u0440\u0430\u0442\u0435\u043d\u0430\u0442\u0430 \u0441\u0443\u043c\u0430 \u043f\u043e SHA1 %s \u043d\u0435 \u0435 \u0435\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u0430"
 ::msgcat::mcset bg "Revision %s is not known" "\u041d\u0435\u043f\u043e\u0437\u043d\u0430\u0442\u0430 \u0432\u0435\u0440\u0441\u0438\u044f %s"
-::msgcat::mcset bg "SHA1 id %s is not known" "\u041d\u0435\u043f\u043e\u0437\u043d\u0430\u0442\u0430 SHA1 %s"
+::msgcat::mcset bg "SHA1 id %s is not known" "\u041d\u0435\u043f\u043e\u0437\u043d\u0430\u0442\u0430 \u0441\u0443\u043c\u0430 \u043f\u043e SHA1 %s"
 ::msgcat::mcset bg "Revision %s is not in the current view" "\u0412\u0435\u0440\u0441\u0438\u044f %s \u043d\u0435 \u0435 \u0432 \u0442\u0435\u043a\u0443\u0449\u0438\u044f \u0438\u0437\u0433\u043b\u0435\u0434"
 ::msgcat::mcset bg "Date" "\u0414\u0430\u0442\u0430"
 ::msgcat::mcset bg "Children" "\u0414\u0435\u0446\u0430"
 ::msgcat::mcset bg "Reset %s branch to here" "\u0417\u0430\u043d\u0443\u043b\u044f\u0432\u0430\u043d\u0435 \u043d\u0430 \u043a\u043b\u043e\u043d\u0430 \u201e%s\u201c \u043a\u044a\u043c \u0442\u0435\u043a\u0443\u0449\u043e\u0442\u043e \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0435"
 ::msgcat::mcset bg "Detached head: can't reset" "\u041d\u0435\u0441\u0432\u044a\u0440\u0437\u0430\u043d \u0432\u0440\u044a\u0445: \u043d\u0435\u0432\u044a\u0437\u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043d\u0443\u043b\u044f\u0432\u0430\u043d\u0435"
 ::msgcat::mcset bg "Skipping merge commit " "\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043d\u0435 \u043d\u0430 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0435\u0442\u043e \u043d\u0430 \u0441\u043b\u0438\u0432\u0430\u043d\u0435\u0442\u043e"
@@ -221,13 +219,13 @@
 ::msgcat::mcset bg "Tag message:" "\u0421\u044a\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0437\u0430 \u0435\u0442\u0438\u043a\u0435\u0442:"
 ::msgcat::mcset bg "Create" "\u0421\u044a\u0437\u0434\u0430\u0432\u0430\u043d\u0435"
 ::msgcat::mcset bg "No tag name specified" "\u041b\u0438\u043f\u0441\u0432\u0430 \u0438\u043c\u0435 \u043d\u0430 \u0435\u0442\u0438\u043a\u0435\u0442"
 ::msgcat::mcset bg "Tag \"%s\" already exists" "\u0415\u0442\u0438\u043a\u0435\u0442\u044a\u0442 \u201e%s\u201c \u0432\u0435\u0447\u0435 \u0441\u044a\u0449\u0435\u0441\u0442\u0432\u0443\u0432\u0430"
 ::msgcat::mcset bg "Error creating tag:" "\u0413\u0440\u0435\u0448\u043a\u0430 \u043f\u0440\u0438 \u0441\u044a\u0437\u0434\u0430\u0432\u0430\u043d\u0435\u0442\u043e \u043d\u0430 \u0435\u0442\u0438\u043a\u0435\u0442:"
 ::msgcat::mcset bg "Command:" "\u041a\u043e\u043c\u0430\u043d\u0434\u0430:"
-::msgcat::mcset bg "Write" "Pdmdpldke"
+::msgcat::mcset bg "Write" "\u0417\u0430\u043f\u0430\u0437\u0432\u0430\u043d\u0435"
 ::msgcat::mcset bg "Error writing commit:" "\u0413\u0440\u0435\u0448\u043a\u0430 \u043f\u0440\u0438 \u0437\u0430\u043f\u0430\u0437\u0432\u0430\u043d\u0435\u0442\u043e \u043d\u0430 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0435\u0442\u043e:"
 ::msgcat::mcset bg "Name:" "\u0418\u043c\u0435:"
 ::msgcat::mcset bg "Please specify a name for the new branch" "\u0423\u043a\u0430\u0436\u0435\u0442\u0435 \u0438\u043c\u0435 \u0437\u0430 \u043d\u043e\u0432\u0438\u044f \u043a\u043b\u043e\u043d"
 ::msgcat::mcset bg "Branch '%s' already exists. Overwrite?" "\u041a\u043b\u043e\u043d\u044a\u0442 \u201e%s\u201c \u0432\u0435\u0447\u0435 \u0441\u044a\u0449\u0435\u0441\u0442\u0432\u0443\u0432\u0430. \u0414\u0430 \u0431\u044a\u0434\u0435 \u043b\u0438 \u043f\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u0430\u043d?"
 ::msgcat::mcset bg "Commit %s is already included in branch %s -- really re-apply it?" "\u041f\u043e\u0434\u0430\u0432\u0430\u043d\u0435\u0442\u043e \u201e%s\u201c \u0432\u0435\u0447\u0435 \u0435 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u0432 \u043a\u043b\u043e\u043d\u0430 \u201e%s\u201c \u2014 \u0434\u0430 \u0431\u044a\u0434\u0435 \u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u043e \u043e\u0442\u043d\u043e\u0432\u043e?"
 ::msgcat::mcset bg "Cherry-picking" "\u041e\u0442\u0431\u0438\u0440\u0430\u043d\u0435"
@@ -236,21 +234,21 @@
 ::msgcat::mcset bg "No changes committed" "\u041d\u0435 \u0441\u0430 \u043f\u043e\u0434\u0430\u0434\u0435\u043d\u0438 \u043f\u0440\u043e\u043c\u0435\u043d\u0438"
 ::msgcat::mcset bg "Commit %s is not included in branch %s -- really revert it?" "\u041f\u043e\u0434\u0430\u0432\u0430\u043d\u0435\u0442\u043e \u201e%s\u201c \u043d\u0435 \u0435 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u0432 \u043a\u043b\u043e\u043d\u0430 \u201e%s\u201c. \u0414\u0430 \u0431\u044a\u0434\u0435 \u043b\u0438 \u043e\u0442\u043c\u0435\u043d\u0435\u043d\u043e?"
 ::msgcat::mcset bg "Reverting" "\u041e\u0442\u043c\u044f\u043d\u0430"
 ::msgcat::mcset bg "Revert failed because of local changes to the following files:%s Please commit, reset or stash  your changes and try again." "\u041d\u0435\u0443\u0441\u043f\u0435\u0448\u043d\u0430 \u043e\u0442\u043c\u044f\u043d\u0430, \u0437\u0430\u0449\u043e\u0442\u043e \u0432\u044a\u0432 \u0444\u0430\u0439\u043b\u0430 \u201e%s\u201c \u0438\u043c\u0430 \u043b\u043e\u043a\u0430\u043b\u043d\u0438 \u043f\u0440\u043e\u043c\u0435\u043d\u0438.\n\u041f\u043e\u0434\u0430\u0439\u0442\u0435, \u0437\u0430\u043d\u0443\u043b\u0435\u0442\u0435 \u0438\u043b\u0438 \u0433\u0438 \u0441\u043a\u0430\u0442\u0430\u0439\u0442\u0435 \u0438 \u043f\u0440\u043e\u0431\u0432\u0430\u0439\u0442\u0435 \u043e\u0442\u043d\u043e\u0432\u043e.<"
 ::msgcat::mcset bg "Revert failed because of merge conflict.\n Do you wish to run git citool to resolve it?" "\u041d\u0435\u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043e\u0442\u043c\u044f\u043d\u0430 \u043f\u043e\u0440\u0430\u0434\u0438 \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u0438 \u043f\u0440\u0438 \u0441\u043b\u0438\u0432\u0430\u043d\u0435.\n\u0418\u0441\u043a\u0430\u0442\u0435 \u043b\u0438 \u0434\u0430 \u0433\u0438 \u043a\u043e\u0440\u0438\u0433\u0438\u0440\u0430\u0442\u0435 \u0447\u0440\u0435\u0437 \u201egit citool\u201c?"
 ::msgcat::mcset bg "Confirm reset" "\u041f\u043e\u0442\u0432\u044a\u0440\u0436\u0434\u0430\u0432\u0430\u043d\u0435 \u043d\u0430 \u0437\u0430\u043d\u0443\u043b\u044f\u0432\u0430\u043d\u0435\u0442\u043e"
-::msgcat::mcset bg "Reset branch %s to %s?" "\u0414\u0430 \u0441\u0435 \u0437\u0430\u043d\u0443\u043b\u0438 \u043b\u0438 \u043a\u043b\u043e\u043d\u0430 \u201e%s\u201c \u043a\u044a\u043c \u201e%s\u201c?"
+::msgcat::mcset bg "Reset branch %s to %s?" "\u0414\u0430 \u0441\u0435 \u0437\u0430\u043d\u0443\u043b\u0438 \u043b\u0438 \u043a\u043b\u043e\u043d\u044a\u0442 \u201e%s\u201c \u043a\u044a\u043c \u201e%s\u201c?"
 ::msgcat::mcset bg "Reset type:" "\u0412\u0438\u0434 \u0437\u0430\u043d\u0443\u043b\u044f\u0432\u0430\u043d\u0435:"
 ::msgcat::mcset bg "Soft: Leave working tree and index untouched" "\u0421\u043b\u0430\u0431\u043e: \u0440\u0430\u0431\u043e\u0442\u043d\u043e\u0442\u043e \u0434\u044a\u0440\u0432\u043e \u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043e\u0441\u0442\u0430\u0432\u0430\u0442 \u0441\u044a\u0449\u0438\u0442\u0435"
 ::msgcat::mcset bg "Mixed: Leave working tree untouched, reset index" "\u0421\u043c\u0435\u0441\u0435\u043d\u043e: \u0440\u0430\u0431\u043e\u0442\u043d\u043e\u0442\u043e \u0434\u044a\u0440\u0432\u043e \u043e\u0441\u0442\u0430\u0432\u0430 \u0441\u044a\u0449\u043e\u0442\u043e, \u0438\u043d\u0434\u0435\u043a\u0441\u044a\u0442 \u0441\u0435 \u0437\u0430\u043d\u0443\u043b\u044f\u0432\u0430"
 ::msgcat::mcset bg "Hard: Reset working tree and index\n(discard ALL local changes)" "\u0421\u0438\u043b\u043d\u043e: \u0437\u0430\u043d\u0443\u043b\u044f\u0432\u0430\u043d\u0435 \u0438 \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u043d\u043e\u0442\u043e \u0434\u044a\u0440\u0432\u043e, \u0438 \u043d\u0430 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\n(*\u0412\u0421\u0418\u0427\u041a\u0418* \u043b\u043e\u043a\u0430\u043b\u043d\u0438 \u043f\u0440\u043e\u043c\u0435\u043d\u0438 \u0449\u0435 \u0431\u044a\u0434\u0430\u0442 \u0431\u0435\u0437\u0432\u044a\u0437\u0432\u0440\u0430\u0442\u043d\u043e \u0437\u0430\u0433\u0443\u0431\u0435\u043d\u0438)"
 ::msgcat::mcset bg "Resetting" "\u0417\u0430\u043d\u0443\u043b\u044f\u0432\u0430\u043d\u0435"
 ::msgcat::mcset bg "Checking out" "\u0418\u0437\u0442\u0435\u0433\u043b\u044f\u043d\u0435"
 ::msgcat::mcset bg "Cannot delete the currently checked-out branch" "\u0422\u0435\u043a\u0443\u0449\u043e \u0438\u0437\u0442\u0435\u0433\u043b\u0435\u043d\u0438\u044f\u0442 \u043a\u043b\u043e\u043d \u043d\u0435 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0431\u044a\u0434\u0435 \u0438\u0437\u0442\u0440\u0438\u0442"
-::msgcat::mcset bg "The commits on branch %s aren't on any other branch.\nReally delete branch %s?" "\u041f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f\u0442\u0430 \u043d\u0430 \u043a\u043b\u043e\u043d\u0430 \u201e%s\u201c \u043d\u0435 \u0441\u0430 \u043d\u0430 \u043d\u0438\u043a\u043e\u0439 \u0434\u0440\u0443\u0433 \u043a\u043b\u043e\u043d.\n\u041d\u0430\u0438\u0441\u0442\u0438\u043d\u0430 \u043b\u0438 \u0434\u0430 \u0441\u0435 \u0438\u0437\u0442\u0440\u0438\u0435 \u043a\u043b\u043e\u043d\u0430 \u201e%s\u201c?"
+::msgcat::mcset bg "The commits on branch %s aren't on any other branch.\nReally delete branch %s?" "\u041f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f\u0442\u0430 \u043d\u0430 \u043a\u043b\u043e\u043d\u0430 \u201e%s\u201c \u043d\u0435 \u0441\u0430 \u043d\u0430 \u043d\u0438\u043a\u043e\u0439 \u0434\u0440\u0443\u0433 \u043a\u043b\u043e\u043d.\n\u041d\u0430\u0438\u0441\u0442\u0438\u043d\u0430 \u043b\u0438 \u0434\u0430 \u0441\u0435 \u0438\u0437\u0442\u0440\u0438\u0435 \u043a\u043b\u043e\u043d\u044a\u0442 \u201e%s\u201c?"
 ::msgcat::mcset bg "Tags and heads: %s" "\u0415\u0442\u0438\u043a\u0435\u0442\u0438 \u0438 \u0432\u044a\u0440\u0445\u043e\u0432\u0435: %s"
 ::msgcat::mcset bg "Filter" "\u0424\u0438\u043b\u0442\u0440\u0438\u0440\u0430\u043d\u0435"
 ::msgcat::mcset bg "Error reading commit topology information; branch and preceding/following tag information will be incomplete." "\u0413\u0440\u0435\u0448\u043a\u0430 \u043f\u0440\u0438 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043d\u0435\u0442\u043e \u043d\u0430 \u0442\u043e\u043f\u043e\u043b\u043e\u0433\u0438\u044f\u0442\u0430 \u043d\u0430 \u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f\u0442\u0430. \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f\u0442\u0430 \u0437\u0430 \u043a\u043b\u043e\u043d\u0430 \u0438 \u043f\u0440\u0435\u0434\u0448\u0435\u0441\u0442\u0432\u0430\u0449\u0438\u0442\u0435/\u0441\u043b\u0435\u0434\u0432\u0430\u0449\u0438\u0442\u0435 \u0435\u0442\u0438\u043a\u0435\u0442\u0438 \u0449\u0435 \u0435 \u043d\u0435\u043f\u044a\u043b\u043d\u0430."
 ::msgcat::mcset bg "Tag" "\u0415\u0442\u0438\u043a\u0435\u0442"
 ::msgcat::mcset bg "Id" "\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440"
 ::msgcat::mcset bg "Gitk font chooser" "\u0418\u0437\u0431\u043e\u0440 \u043d\u0430 \u0448\u0440\u0438\u0444\u0442 \u0437\u0430 Gitk"
@@ -275,31 +273,31 @@
 ::msgcat::mcset bg "(change requires restart)" "(\u043f\u0440\u043e\u043c\u044f\u043d\u0430\u0442\u0430 \u0438\u0437\u0438\u0441\u043a\u0432\u0430 \u0440\u0435\u0441\u0442\u0430\u0440\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 Gitk)"
 ::msgcat::mcset bg "(currently unavailable)" "(\u0432 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043d\u0435\u0434\u043e\u0441\u0442\u044a\u043f\u043d\u043e)"
 ::msgcat::mcset bg "Colors: press to choose" "\u0426\u0432\u0435\u0442\u043e\u0432\u0435: \u0438\u0437\u0431\u0438\u0440\u0430 \u0441\u0435 \u0441 \u043d\u0430\u0442\u0438\u0441\u043a\u0430\u043d\u0435"
 ::msgcat::mcset bg "Interface" "\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441"
 ::msgcat::mcset bg "interface" "\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441"
 ::msgcat::mcset bg "Background" "\u0424\u043e\u043d"
-::msgcat::mcset bg "background" "\u0424\u043e\u043d"
+::msgcat::mcset bg "background" "\u0444\u043e\u043d"
 ::msgcat::mcset bg "Foreground" "\u0417\u043d\u0430\u0446\u0438"
 ::msgcat::mcset bg "foreground" "\u0437\u043d\u0430\u0446\u0438"
 ::msgcat::mcset bg "Diff: old lines" "\u0420\u0430\u0437\u043b\u0438\u043a\u0430: \u0441\u0442\u0430\u0440\u0438 \u0440\u0435\u0434\u043e\u0432\u0435"
 ::msgcat::mcset bg "diff old lines" "\u0440\u0430\u0437\u043b\u0438\u043a\u0430, \u0441\u0442\u0430\u0440\u0438 \u0440\u0435\u0434\u043e\u0432\u0435"
 ::msgcat::mcset bg "Diff: new lines" "\u0420\u0430\u0437\u043b\u0438\u043a\u0430: \u043d\u043e\u0432\u0438 \u0440\u0435\u0434\u043e\u0432\u0435"
 ::msgcat::mcset bg "diff new lines" "\u0440\u0430\u0437\u043b\u0438\u043a\u0430, \u043d\u043e\u0432\u0438 \u0440\u0435\u0434\u043e\u0432\u0435"
 ::msgcat::mcset bg "Diff: hunk header" "\u0420\u0430\u0437\u043b\u0438\u043a\u0430: \u043d\u0430\u0447\u0430\u043b\u043e \u043d\u0430 \u043f\u0430\u0440\u0447\u0435"
 ::msgcat::mcset bg "diff hunk header" "\u0440\u0430\u0437\u043b\u0438\u043a\u0430, \u043d\u0430\u0447\u0430\u043b\u043e \u043d\u0430 \u043f\u0430\u0440\u0447\u0435"
 ::msgcat::mcset bg "Marked line bg" "\u0424\u043e\u043d \u043d\u0430 \u043e\u0442\u0431\u0435\u043b\u044f\u0437\u0430\u043d \u0440\u0435\u0434"
-::msgcat::mcset bg "marked line background" "\u0424\u043e\u043d \u043d\u0430 \u043e\u0442\u0431\u0435\u043b\u044f\u0437\u0430\u043d \u0440\u0435\u0434"
+::msgcat::mcset bg "marked line background" "\u0444\u043e\u043d \u043d\u0430 \u043e\u0442\u0431\u0435\u043b\u044f\u0437\u0430\u043d \u0440\u0435\u0434"
 ::msgcat::mcset bg "Select bg" "\u0418\u0437\u0431\u043e\u0440 \u043d\u0430 \u0444\u043e\u043d"
 ::msgcat::mcset bg "Fonts: press to choose" "\u0428\u0440\u0438\u0444\u0442\u043e\u0432\u0435: \u0438\u0437\u0431\u0438\u0440\u0430 \u0441\u0435 \u0441 \u043d\u0430\u0442\u0438\u0441\u043a\u0430\u043d\u0435"
 ::msgcat::mcset bg "Main font" "\u041e\u0441\u043d\u043e\u0432\u0435\u043d \u0448\u0440\u0438\u0444\u0442"
 ::msgcat::mcset bg "Diff display font" "\u0428\u0440\u0438\u0444\u0442 \u0437\u0430 \u0440\u0430\u0437\u043b\u0438\u043a\u0438\u0442\u0435"
 ::msgcat::mcset bg "User interface font" "\u0428\u0440\u0438\u0444\u0442 \u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430"
 ::msgcat::mcset bg "Gitk preferences" "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043d\u0430 Gitk"
 ::msgcat::mcset bg "General" "\u041e\u0431\u0449\u0438"
 ::msgcat::mcset bg "Colors" "\u0426\u0432\u0435\u0442\u043e\u0432\u0435"
 ::msgcat::mcset bg "Fonts" "\u0428\u0440\u0438\u0444\u0442\u043e\u0432\u0435"
-::msgcat::mcset bg "Gitk: choose color for %s" "Gitk: \u0438\u0437\u0431\u043e\u0440 \u043d\u0430 \u0446\u0432\u044f\u0442 \u043d\u0430 %s"
+::msgcat::mcset bg "Gitk: choose color for %s" "Gitk: \u0438\u0437\u0431\u043e\u0440 \u043d\u0430 \u0446\u0432\u044f\u0442 \u043d\u0430 \u201e%s\u201c"
 ::msgcat::mcset bg "Cannot find a git repository here." "\u0422\u0443\u043a \u043b\u0438\u043f\u0441\u0432\u0430 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u043d\u0430 Git."
 ::msgcat::mcset bg "Ambiguous argument '%s': both revision and filename" "\u041d\u0435\u0435\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u0435\u043d \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u201e%s\u201c: \u0438\u043c\u0430 \u0438 \u0442\u0430\u043a\u0430\u0432\u0430 \u0432\u0435\u0440\u0441\u0438\u044f, \u0438 \u0442\u0430\u043a\u044a\u0432 \u0444\u0430\u0439\u043b"
 ::msgcat::mcset bg "Bad arguments to gitk:" "\u041d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u043d\u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0438 \u043d\u0430 gitk:"
 ::msgcat::mcset bg "Command line" "\u041a\u043e\u043c\u0430\u043d\u0434\u0435\u043d \u0440\u0435\u0434"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gitk-git/po/bg.po /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gitk-git/po/bg.po
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gitk-git/po/bg.po	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gitk-git/po/bg.po	2014-08-16 06:26:55.000000000 +0800
@@ -5,31 +5,31 @@
 #
 #
 msgid ""
 msgstr ""
 "Project-Id-Version: gitk master\n"
 "Report-Msgid-Bugs-To: \n"
-"POT-Creation-Date: 2010-01-26 15:47-0800\n"
-"PO-Revision-Date: 2014-01-08 08:03+0200\n"
+"POT-Creation-Date: 2014-08-03 11:17+0300\n"
+"PO-Revision-Date: 2014-07-28 07:32+0300\n"
 "Last-Translator: Alexander Shopov <ash@kambanaria.org>\n"
 "Language-Team: Bulgarian <dict@fsa-bg.org>\n"
 "Language: bg\n"
 "MIME-Version: 1.0\n"
 "Content-Type: text/plain; charset=UTF-8\n"
 "Content-Transfer-Encoding: 8bit\n"
 "Plural-Forms: nplurals=2; plural=(n != 1);\n"
 
 #: gitk:140
 msgid "Couldn't get list of unmerged files:"
 msgstr "Списъкът с неслети файлове не може да бъде получен:"
 
-#: gitk:212 gitk:2353
+#: gitk:212 gitk:2379
 msgid "Color words"
 msgstr "Оцветяване на думите"
 
-#: gitk:217 gitk:2353 gitk:8103 gitk:8136
+#: gitk:217 gitk:2379 gitk:8155 gitk:8188
 msgid "Markup words"
 msgstr "Отбелязване на думите"
 
 #: gitk:322
 msgid "Error parsing revisions:"
 msgstr "Грешка при разбор на версиите:"
@@ -37,33 +37,36 @@
 #: gitk:378
 msgid "Error executing --argscmd command:"
 msgstr "Грешка при изпълнение на командата с „--argscmd“."
 
 #: gitk:391
 msgid "No files selected: --merge specified but no files are unmerged."
-msgstr "Не са избрани файлове — указана е опцията „--merge“, но няма неслети файлове."
+msgstr ""
+"Не са избрани файлове — указана е опцията „--merge“, но няма неслети файлове."
 
 #: gitk:394
 msgid ""
 "No files selected: --merge specified but no unmerged files are within file "
 "limit."
-msgstr "Не са избрани файлове — указана е опцията „--merge“, но няма неслети файлове в ограниченията."
+msgstr ""
+"Не са избрани файлове — указана е опцията „--merge“, но няма неслети файлове "
+"в ограниченията."
 
 #: gitk:416 gitk:564
 msgid "Error executing git log:"
 msgstr "Грешка при изпълнение на „git log“:"
 
 #: gitk:434 gitk:580
 msgid "Reading"
 msgstr "Прочитане"
 
-#: gitk:494 gitk:4429
+#: gitk:494 gitk:4470
 msgid "Reading commits..."
 msgstr "Прочитане на подаванията…"
 
-#: gitk:497 gitk:1635 gitk:4432
+#: gitk:497 gitk:1635 gitk:4473
 msgid "No commits selected"
 msgstr "Не са избрани подавания"
 
 #: gitk:1509
 msgid "Can't parse git log output:"
 msgstr "Изходът от „git log“ не може да се анализира:"
@@ -73,18 +76,18 @@
 msgstr "Липсва информация за подавания"
 
 #: gitk:1895
 msgid "mc"
 msgstr "mc"
 
-#: gitk:1930 gitk:4222 gitk:9552 gitk:11122 gitk:11401
+#: gitk:1930 gitk:4263 gitk:9604 gitk:11174 gitk:11453
 msgid "OK"
 msgstr "Добре"
 
-#: gitk:1932 gitk:4224 gitk:9079 gitk:9158 gitk:9274 gitk:9323 gitk:9554
-#: gitk:11123 gitk:11402
+#: gitk:1932 gitk:4265 gitk:9131 gitk:9210 gitk:9326 gitk:9375 gitk:9606
+#: gitk:11175 gitk:11454
 msgid "Cancel"
 msgstr "Отказ"
 
 #: gitk:2067
 msgid "Update"
 msgstr "Обновяване"
@@ -100,13 +103,13 @@
 #: gitk:2070
 msgid "List references"
 msgstr "Изброяване на указателите"
 
 #: gitk:2072
 msgid "Start git gui"
-msgstr "Стартиране на git gui"
+msgstr "Стартиране на „git gui“"
 
 #: gitk:2074
 msgid "Quit"
 msgstr "Спиране на програмата"
 
 #: gitk:2066
@@ -134,1201 +137,1204 @@
 msgstr "Изтриване на изгледа"
 
 #: gitk:2086
 msgid "All files"
 msgstr "Всички файлове"
 
-#: gitk:2081 gitk:3975
+#: gitk:2081 gitk:4016
 msgid "View"
 msgstr "Изглед"
 
-#: gitk:2091 gitk:2101 gitk:2945
+#: gitk:2091 gitk:2101 gitk:2976
 msgid "About gitk"
 msgstr "Относно gitk"
 
 #: gitk:2092 gitk:2106
 msgid "Key bindings"
 msgstr "Клавишни комбинации"
 
 #: gitk:2090 gitk:2105
 msgid "Help"
 msgstr "Помощ"
 
-#: gitk:2183 gitk:8535
+#: gitk:2183 gitk:8587
 msgid "SHA1 ID:"
 msgstr "SHA1:"
 
 #: gitk:2227
 msgid "Row"
 msgstr "Ред"
 
 #: gitk:2265
 msgid "Find"
 msgstr "Търсене"
 
-#: gitk:2266
-msgid "next"
-msgstr "следващо"
-
-#: gitk:2267
-msgid "prev"
-msgstr "предишно"
-
-#: gitk:2268
+#: gitk:2293
 msgid "commit"
 msgstr "подаване"
 
-#: gitk:2271 gitk:2273 gitk:4590 gitk:4613 gitk:4637 gitk:6653 gitk:6725
-#: gitk:6810
+#: gitk:2297 gitk:2299 gitk:4631 gitk:4654 gitk:4678 gitk:6698 gitk:6770
+#: gitk:6855
 msgid "containing:"
 msgstr "съдържащо:"
 
-#: gitk:2274 gitk:3457 gitk:3462 gitk:4666
+#: gitk:2300 gitk:3488 gitk:3493 gitk:4707
 msgid "touching paths:"
 msgstr "засягащо пътищата:"
 
-#: gitk:2275 gitk:4680
+#: gitk:2301 gitk:4721
 msgid "adding/removing string:"
 msgstr "добавящо/премахващо низ"
 
-#: gitk:2276 gitk:4682
+#: gitk:2302 gitk:4723
 msgid "changing lines matching:"
 msgstr "променящо редове напасващи:"
 
-#: gitk:2285 gitk:2287 gitk:4669
+#: gitk:2311 gitk:2313 gitk:4710
 msgid "Exact"
 msgstr "Точно"
 
-#: gitk:2287 gitk:4757 gitk:6621
+#: gitk:2313 gitk:4798 gitk:6666
 msgid "IgnCase"
 msgstr "Без регистър"
 
-#: gitk:2287 gitk:4639 gitk:4755 gitk:6617
+#: gitk:2313 gitk:4680 gitk:4796 gitk:6662
 msgid "Regexp"
-msgstr "Рег. изр."
+msgstr "Рег. израз"
 
-#: gitk:2289 gitk:2290 gitk:4777 gitk:4807 gitk:4814 gitk:6746 gitk:6814
+#: gitk:2315 gitk:2316 gitk:4818 gitk:4848 gitk:4855 gitk:6791 gitk:6859
 msgid "All fields"
 msgstr "Всички полета"
 
-#: gitk:2290 gitk:4774 gitk:4807 gitk:6684
+#: gitk:2316 gitk:4815 gitk:4848 gitk:6729
 msgid "Headline"
 msgstr "Първи ред"
 
-#: gitk:2291 gitk:4774 gitk:6684 gitk:6814 gitk:7283
+#: gitk:2317 gitk:4815 gitk:6729 gitk:6859 gitk:7332
 msgid "Comments"
 msgstr "Коментари"
 
-#: gitk:2291 gitk:4774 gitk:4779 gitk:4814 gitk:6684 gitk:7218 gitk:8713
-#: gitk:8728
+#: gitk:2317 gitk:4815 gitk:4820 gitk:4855 gitk:6729 gitk:7267 gitk:8765
+#: gitk:8780
 msgid "Author"
 msgstr "Автор"
 
-#: gitk:2291 gitk:4774 gitk:6684 gitk:7220
+#: gitk:2317 gitk:4815 gitk:6729 gitk:7269
 msgid "Committer"
 msgstr "Подаващ"
 
-#: gitk:2322
+#: gitk:2348
 msgid "Search"
 msgstr "Търсене"
 
-#: gitk:2330
+#: gitk:2356
 msgid "Diff"
 msgstr "Разлики"
 
-#: gitk:2332
+#: gitk:2358
 msgid "Old version"
 msgstr "Стара версия"
 
-#: gitk:2334
+#: gitk:2360
 msgid "New version"
 msgstr "Нова версия"
 
-#: gitk:2336
+#: gitk:2362
 msgid "Lines of context"
 msgstr "Контекст в редове"
 
-#: gitk:2346
+#: gitk:2372
 msgid "Ignore space change"
 msgstr "Празните знаци без значение"
 
-#: gitk:2350 gitk:2352 gitk:7842 gitk:8089
+#: gitk:2376 gitk:2378 gitk:7894 gitk:8141
 msgid "Line diff"
 msgstr "Поредови разлики"
 
-#: gitk:2417
+#: gitk:2443
 msgid "Patch"
 msgstr "Кръпка"
 
-#: gitk:2419
+#: gitk:2445
 msgid "Tree"
 msgstr "Дърво"
 
-#: gitk:2577 gitk:2597
+#: gitk:2604 gitk:2624
 msgid "Diff this -> selected"
 msgstr "Разлики между това и избраното"
 
-#: gitk:2578 gitk:2598
+#: gitk:2605 gitk:2625
 msgid "Diff selected -> this"
 msgstr "Разлики между избраното и това"
 
-#: gitk:2579 gitk:2599
+#: gitk:2606 gitk:2626
 msgid "Make patch"
 msgstr "Създаване на кръпка"
 
-#: gitk:2580 gitk:9137
+#: gitk:2607 gitk:9189
 msgid "Create tag"
 msgstr "Създаване на етикет"
 
-#: gitk:2581 gitk:9254
+#: gitk:2608 gitk:9306
 msgid "Write commit to file"
 msgstr "Запазване на подаването във файл"
 
-#: gitk:2582 gitk:9311
+#: gitk:2609 gitk:9363
 msgid "Create new branch"
 msgstr "Създаване на нов клон"
 
-#: gitk:2583
+#: gitk:2610
 msgid "Cherry-pick this commit"
 msgstr "Отбиране на това подаване"
 
-#: gitk:2584
+#: gitk:2611
 msgid "Reset HEAD branch to here"
 msgstr "Привеждане на върха на клона към текущото подаване"
 
-#: gitk:2585
+#: gitk:2612
 msgid "Mark this commit"
 msgstr "Отбелязване на това подаване"
 
-#: gitk:2586
+#: gitk:2613
 msgid "Return to mark"
 msgstr "Връщане към отбелязаното подаване"
 
-#: gitk:2587
+#: gitk:2614
 msgid "Find descendant of this and mark"
 msgstr "Откриване и отбелязване на наследниците"
 
-#: gitk:2588
+#: gitk:2615
 msgid "Compare with marked commit"
 msgstr "Сравнение с отбелязаното подаване"
 
-#: gitk:2589 gitk:2600
+#: gitk:2616 gitk:2627
 msgid "Diff this -> marked commit"
 msgstr "Разлики между това и отбелязаното"
 
-#: gitk:2590 gitk:2601
+#: gitk:2617 gitk:2628
 msgid "Diff marked commit -> this"
 msgstr "Разлики между отбелязаното и това"
 
-#: gitk:2591
+#: gitk:2618
 msgid "Revert this commit"
 msgstr "Отмяна на това подаване"
 
-#: gitk:2607
+#: gitk:2634
 msgid "Check out this branch"
 msgstr "Изтегляне на този клон"
 
-#: gitk:2608
+#: gitk:2635
 msgid "Remove this branch"
 msgstr "Изтриване на този клон"
 
-#: gitk:2615
+#: gitk:2642
 msgid "Highlight this too"
 msgstr "Отбелязване и на това"
 
-#: gitk:2616
+#: gitk:2643
 msgid "Highlight this only"
 msgstr "Отбелязване само на това"
 
-#: gitk:2617
+#: gitk:2644
 msgid "External diff"
 msgstr "Външна програма за разлики"
 
-#: gitk:2618
+#: gitk:2645
 msgid "Blame parent commit"
 msgstr "Анотиране на родителското подаване"
 
-#: gitk:2625
+#: gitk:2652
 msgid "Show origin of this line"
 msgstr "Показване на произхода на този ред"
 
-#: gitk:2626
+#: gitk:2653
 msgid "Run git gui blame on this line"
 msgstr "Изпълнение на „git gui blame“ върху този ред"
 
-#: gitk:2947
+#: gitk:2978
 msgid ""
 "\n"
 "Gitk - a commit viewer for git\n"
 "\n"
-"Copyright © 2005-2011 Paul Mackerras\n"
+"Copyright © 2005-2014 Paul Mackerras\n"
 "\n"
 "Use and redistribute under the terms of the GNU General Public License"
 msgstr ""
 "\n"
 "Gitk — визуализация на подаванията в Git\n"
 "\n"
-"Авторски права: © 2005-2011 Paul Mackerras\n"
+"Авторски права: © 2005-2014 Paul Mackerras\n"
 "\n"
 "Използвайте и разпространявайте при условията на ОПЛ на ГНУ"
 
-#: gitk:2955 gitk:3020 gitk:9738
+#: gitk:2986 gitk:3051 gitk:9790
 msgid "Close"
 msgstr "Затваряне"
 
-#: gitk:2976
+#: gitk:3007
 msgid "Gitk key bindings"
 msgstr "Клавишни комбинации"
 
-#: gitk:2979
+#: gitk:3010
 msgid "Gitk key bindings:"
 msgstr "Клавишни комбинации:"
 
-#: gitk:2981
+#: gitk:3012
 #, tcl-format
 msgid "<%s-Q>\t\tQuit"
 msgstr "<%s-Q>\t\tСпиране на програмата"
 
-#: gitk:2982
+#: gitk:3013
 #, tcl-format
 msgid "<%s-W>\t\tClose window"
 msgstr "<%s-W>\t\tЗатваряне на прозореца"
 
-#: gitk:2983
+#: gitk:3014
 msgid "<Home>\t\tMove to first commit"
 msgstr "<Home>\t\tКъм първото подаване"
 
-#: gitk:2984
+#: gitk:3015
 msgid "<End>\t\tMove to last commit"
 msgstr "<End>\t\tКъм последното подаване"
 
-#: gitk:2985
+#: gitk:3016
 msgid "<Up>, p, k\tMove up one commit"
 msgstr "<Up>, p, k\tЕдно подаване нагоре"
 
-#: gitk:2986
+#: gitk:3017
 msgid "<Down>, n, j\tMove down one commit"
 msgstr "<Down>, n, j\tЕдно подаване надолу"
 
-#: gitk:2987
+#: gitk:3018
 msgid "<Left>, z, h\tGo back in history list"
 msgstr "<Left>, z, h\tНазад в историята"
 
-#: gitk:2988
+#: gitk:3019
 msgid "<Right>, x, l\tGo forward in history list"
 msgstr "<Right>, x, l\tНапред в историята"
 
-#: gitk:2989
+#: gitk:3020
 msgid "<PageUp>\tMove up one page in commit list"
-msgstr "<PageUp>\tЕдна страница нагоре в списъка с подаванията"
+msgstr "<PageUp>\tСтраница нагоре в списъка с подаванията"
 
-#: gitk:2990
+#: gitk:3021
 msgid "<PageDown>\tMove down one page in commit list"
-msgstr "<PageDown>\tЕдна страница надолу в списъка с подаванията"
+msgstr "<PageDown>\tСтраница надолу в списъка с подаванията"
 
-#: gitk:2991
+#: gitk:3022
 #, tcl-format
 msgid "<%s-Home>\tScroll to top of commit list"
 msgstr "<%s-Home>\tКъм началото на списъка с подаванията"
 
-#: gitk:2992
+#: gitk:3023
 #, tcl-format
 msgid "<%s-End>\tScroll to bottom of commit list"
 msgstr "<%s-End>\tКъм края на списъка с подаванията"
 
-#: gitk:2993
+#: gitk:3024
 #, tcl-format
 msgid "<%s-Up>\tScroll commit list up one line"
-msgstr "<%s-Up>\tПридвижване на списъка с подавания с един ред нагоре"
+msgstr "<%s-Up>\tРед нагоре в списъка с подавания"
 
-#: gitk:2994
+#: gitk:3025
 #, tcl-format
 msgid "<%s-Down>\tScroll commit list down one line"
-msgstr "<%s-Down>\tПридвижване на списъка с подавания с един ред надолу"
+msgstr "<%s-Down>\tРед надолу в списъка с подавания"
 
-#: gitk:2995
+#: gitk:3026
 #, tcl-format
 msgid "<%s-PageUp>\tScroll commit list up one page"
-msgstr "<%s-PageUp>\tПридвижване на списъка с подавания с една страница нагоре"
+msgstr "<%s-PageUp>\tСтраница нагоре в списъка с подавания"
 
-#: gitk:2996
+#: gitk:3027
 #, tcl-format
 msgid "<%s-PageDown>\tScroll commit list down one page"
-msgstr "<%s-PageDown>\tПридвижване на списъка с подавания с една страница надолу"
+msgstr "<%s-PageDown>\tСтраница надолу в списъка с подавания"
 
-#: gitk:2997
+#: gitk:3028
 msgid "<Shift-Up>\tFind backwards (upwards, later commits)"
 msgstr "<Shift-Up>\tТърсене назад (визуално нагоре, исторически — последващи)"
 
-#: gitk:2998
+#: gitk:3029
 msgid "<Shift-Down>\tFind forwards (downwards, earlier commits)"
-msgstr "<Shift-Down>\tТърсене напред (визуално надолу, исторически — предхождащи)"
+msgstr ""
+"<Shift-Down>\tТърсене напред (визуално надолу, исторически — предхождащи)"
 
-#: gitk:2999
+#: gitk:3030
 msgid "<Delete>, b\tScroll diff view up one page"
-msgstr "<Delete>, b\tПридвижване на изгледа за разлики една страница нагоре"
+msgstr "<Delete>, b\tСтраница нагоре в изгледа за разлики"
 
-#: gitk:3000
+#: gitk:3031
 msgid "<Backspace>\tScroll diff view up one page"
-msgstr "<Backspace>\tПридвижване на изгледа за разлики една страница нагоре"
+msgstr "<Backspace>\tСтраница надолу в изгледа за разлики"
 
-#: gitk:3001
+#: gitk:3032
 msgid "<Space>\t\tScroll diff view down one page"
-msgstr "<Space>\t\tПридвижване на изгледа за разлики една страница надолу"
+msgstr "<Space>\t\tСтраница надолу в изгледа за разлики"
 
-#: gitk:3002
+#: gitk:3033
 msgid "u\t\tScroll diff view up 18 lines"
-msgstr "u\t\tПридвижване на изгледа за разлики 18 реда нагоре"
+msgstr "u\t\t18 реда нагоре в изгледа за разлики"
 
-#: gitk:3003
+#: gitk:3034
 msgid "d\t\tScroll diff view down 18 lines"
-msgstr "d\t\tПридвижване на изгледа за разлики 18 реда надолу"
+msgstr "d\t\t18 реда надолу в изгледа за разлики"
 
-#: gitk:3004
+#: gitk:3035
 #, tcl-format
 msgid "<%s-F>\t\tFind"
 msgstr "<%s-F>\t\tТърсене"
 
-#: gitk:3005
+#: gitk:3036
 #, tcl-format
 msgid "<%s-G>\t\tMove to next find hit"
 msgstr "<%s-G>\t\tКъм следващата поява"
 
-#: gitk:3006
+#: gitk:3037
 msgid "<Return>\tMove to next find hit"
 msgstr "<Return>\tКъм следващата поява"
 
-#: gitk:3007
+#: gitk:3038
 msgid "/\t\tFocus the search box"
 msgstr "/\t\tФокус върху полето за търсене"
 
-#: gitk:3008
+#: gitk:3039
 msgid "?\t\tMove to previous find hit"
 msgstr "?\t\tКъм предишната поява"
 
-#: gitk:3009
+#: gitk:3040
 msgid "f\t\tScroll diff view to next file"
-msgstr "f\t\tПридвижване на изгледа за разлики към следващия ред"
+msgstr "f\t\tСледващ файл в изгледа за разлики"
 
-#: gitk:3010
+#: gitk:3041
 #, tcl-format
 msgid "<%s-S>\t\tSearch for next hit in diff view"
 msgstr "<%s-S>\t\tТърсене на следващата поява в изгледа за разлики"
 
-#: gitk:3011
+#: gitk:3042
 #, tcl-format
 msgid "<%s-R>\t\tSearch for previous hit in diff view"
 msgstr "<%s-R>\t\tТърсене на предишната поява в изгледа за разлики"
 
-#: gitk:3012
+#: gitk:3043
 #, tcl-format
 msgid "<%s-KP+>\tIncrease font size"
 msgstr "<%s-KP+>\tПо-голям размер на шрифта"
 
-#: gitk:3013
+#: gitk:3044
 #, tcl-format
 msgid "<%s-plus>\tIncrease font size"
 msgstr "<%s-plus>\tПо-голям размер на шрифта"
 
-#: gitk:3014
+#: gitk:3045
 #, tcl-format
 msgid "<%s-KP->\tDecrease font size"
 msgstr "<%s-KP->\tПо-малък размер на шрифта"
 
-#: gitk:3015
+#: gitk:3046
 #, tcl-format
 msgid "<%s-minus>\tDecrease font size"
 msgstr "<%s-minus>\tПо-малък размер на шрифта"
 
-#: gitk:3016
+#: gitk:3047
 msgid "<F5>\t\tUpdate"
 msgstr "<F5>\t\tОбновяване"
 
-#: gitk:3471 gitk:3480
+#: gitk:3512 gitk:3521
 #, tcl-format
 msgid "Error creating temporary directory %s:"
 msgstr "Грешка при създаването на временната директория „%s“:"
 
-#: gitk:3493
+#: gitk:3534
 #, tcl-format
 msgid "Error getting \"%s\" from %s:"
 msgstr "Грешка при получаването на „%s“ от %s:"
 
-#: gitk:3556
+#: gitk:3597
 msgid "command failed:"
 msgstr "неуспешно изпълнение на команда:"
 
-#: gitk:3705
+#: gitk:3746
 msgid "No such commit"
 msgstr "Такова подаване няма"
 
-#: gitk:3719
+#: gitk:3760
 msgid "git gui blame: command failed:"
-msgstr "git gui blame: неуспешно изпълнение на команда:"
+msgstr "„git gui blame“: неуспешно изпълнение на команда:"
 
-#: gitk:3750
+#: gitk:3791
 #, tcl-format
 msgid "Couldn't read merge head: %s"
 msgstr "Върхът за сливане не може да бъде прочетен: %s"
 
-#: gitk:3758
+#: gitk:3799
 #, tcl-format
 msgid "Error reading index: %s"
 msgstr "Грешка при прочитане на индекса: %s"
 
-#: gitk:3783
+#: gitk:3824
 #, tcl-format
 msgid "Couldn't start git blame: %s"
 msgstr "Командата „git blame“ не може да бъде стартирана: %s"
 
-#: gitk:3786 gitk:6652
+#: gitk:3827 gitk:6697
 msgid "Searching"
 msgstr "Търсене"
 
-#: gitk:3818
+#: gitk:3859
 #, tcl-format
 msgid "Error running git blame: %s"
 msgstr "Грешка при изпълнението на „git blame“: %s"
 
-#: gitk:3846
+#: gitk:3887
 #, tcl-format
 msgid "That line comes from commit %s,  which is not in this view"
 msgstr "Този ред идва от подаването %s,  което не е в изгледа"
 
-#: gitk:3860
+#: gitk:3901
 msgid "External diff viewer failed:"
 msgstr "Неуспешно изпълнение на външната програма за разлики:"
 
-#: gitk:3978
+#: gitk:4019
 msgid "Gitk view definition"
 msgstr "Дефиниция на изглед в Gitk"
 
-#: gitk:3982
+#: gitk:4023
 msgid "Remember this view"
 msgstr "Запазване на този изглед"
 
-#: gitk:3983
+#: gitk:4024
 msgid "References (space separated list):"
 msgstr "Указатели (списък с разделител интервал):"
 
-#: gitk:3984
+#: gitk:4025
 msgid "Branches & tags:"
 msgstr "Клони и етикети:"
 
-#: gitk:3985
+#: gitk:4026
 msgid "All refs"
 msgstr "Всички указатели"
 
-#: gitk:3986
+#: gitk:4027
 msgid "All (local) branches"
 msgstr "Всички (локални) клони"
 
-#: gitk:3987
+#: gitk:4028
 msgid "All tags"
 msgstr "Всички етикети"
 
-#: gitk:3988
+#: gitk:4029
 msgid "All remote-tracking branches"
 msgstr "Всички следящи клони"
 
-#: gitk:3989
+#: gitk:4030
 msgid "Commit Info (regular expressions):"
 msgstr "Информация за подаване (рег. изр.):"
 
-#: gitk:3990
+#: gitk:4031
 msgid "Author:"
 msgstr "Автор:"
 
-#: gitk:3991
+#: gitk:4032
 msgid "Committer:"
 msgstr "Подал:"
 
-#: gitk:3992
+#: gitk:4033
 msgid "Commit Message:"
 msgstr "Съобщение при подаване:"
 
-#: gitk:3993
+#: gitk:4034
 msgid "Matches all Commit Info criteria"
 msgstr "Съвпадение по коя да е информация за подаването"
 
-#: gitk:3994
+#: gitk:4035
 msgid "Changes to Files:"
 msgstr "Промени по файловете:"
 
-#: gitk:3995
+#: gitk:4036
 msgid "Fixed String"
 msgstr "Дословен низ"
 
-#: gitk:3996
+#: gitk:4037
 msgid "Regular Expression"
 msgstr "Регулярен израз"
 
-#: gitk:3997
+#: gitk:4038
 msgid "Search string:"
 msgstr "Низ за търсене:"
 
-#: gitk:3998
+#: gitk:4039
 msgid ""
 "Commit Dates (\"2 weeks ago\", \"2009-03-17 15:27:38\", \"March 17, 2009 "
 "15:27:38\"):"
-msgstr "Дата на подаване („2 weeks ago“ (преди 2 седмици), „2009-03-17 15:27:38“, „March 17, 2009 15:27:38“):"
+msgstr ""
+"Дата на подаване („2 weeks ago“ (преди 2 седмици), „2009-03-17 15:27:38“, "
+"„March 17, 2009 15:27:38“):"
 
-#: gitk:3999
+#: gitk:4040
 msgid "Since:"
 msgstr "От:"
 
-#: gitk:4000
+#: gitk:4041
 msgid "Until:"
 msgstr "До:"
 
-#: gitk:4001
+#: gitk:4042
 msgid "Limit and/or skip a number of revisions (positive integer):"
-msgstr "Ограничаване и/или прескачане на определен брой версии (неотрицателно цяло число):"
+msgstr ""
+"Ограничаване и/или прескачане на определен брой версии (неотрицателно цяло "
+"число):"
 
-#: gitk:4002
+#: gitk:4043
 msgid "Number to show:"
 msgstr "Брой показани:"
 
-#: gitk:4003
+#: gitk:4044
 msgid "Number to skip:"
 msgstr "Брой прескочени:"
 
-#: gitk:4004
+#: gitk:4045
 msgid "Miscellaneous options:"
 msgstr "Разни:"
 
-#: gitk:4005
+#: gitk:4046
 msgid "Strictly sort by date"
 msgstr "Подреждане по дата"
 
-#: gitk:4006
+#: gitk:4047
 msgid "Mark branch sides"
 msgstr "Отбелязване на страните по клона"
 
-#: gitk:4007
+#: gitk:4048
 msgid "Limit to first parent"
-msgstr "Само първият родител"
+msgstr "Само първия родител"
 
-#: gitk:4008
+#: gitk:4049
 msgid "Simple history"
 msgstr "Опростена история"
 
-#: gitk:4009
+#: gitk:4050
 msgid "Additional arguments to git log:"
 msgstr "Допълнителни аргументи към „git log“:"
 
-#: gitk:4010
+#: gitk:4051
 msgid "Enter files and directories to include, one per line:"
 msgstr "Въведете файловете и директориите за включване, по елемент на ред"
 
-#: gitk:4011
+#: gitk:4052
 msgid "Command to generate more commits to include:"
-msgstr "Команда за генерирането на допълнителни подавания, които да бъдат включени:"
+msgstr ""
+"Команда за генерирането на допълнителни подавания, които да бъдат включени:"
 
-#: gitk:4135
+#: gitk:4176
 msgid "Gitk: edit view"
 msgstr "Gitk: редактиране на изглед"
 
-#: gitk:4143
+#: gitk:4184
 msgid "-- criteria for selecting revisions"
 msgstr "— критерии за избор на версии"
 
-#: gitk:4148
+#: gitk:4189
 msgid "View Name"
 msgstr "Име на изглед"
 
-#: gitk:4223
+#: gitk:4264
 msgid "Apply (F5)"
 msgstr "Прилагане (F5)"
 
-#: gitk:4261
+#: gitk:4302
 msgid "Error in commit selection arguments:"
 msgstr "Грешка в аргументите за избор на подавания:"
 
-#: gitk:4314 gitk:4366 gitk:4827 gitk:4841 gitk:6107 gitk:12184 gitk:12185
+#: gitk:4355 gitk:4407 gitk:4868 gitk:4882 gitk:6152 gitk:12281 gitk:12282
 msgid "None"
 msgstr "Няма"
 
-#: gitk:4924 gitk:4929
+#: gitk:4965 gitk:4970
 msgid "Descendant"
 msgstr "Наследник"
 
-#: gitk:4925
+#: gitk:4966
 msgid "Not descendant"
 msgstr "Не е наследник"
 
-#: gitk:4932 gitk:4937
+#: gitk:4973 gitk:4978
 msgid "Ancestor"
 msgstr "Предшественик"
 
-#: gitk:4933
+#: gitk:4974
 msgid "Not ancestor"
 msgstr "Не е предшественик"
 
-#: gitk:5223
+#: gitk:5268
 msgid "Local changes checked in to index but not committed"
 msgstr "Локални промени добавени към индекса, но неподадени"
 
-#: gitk:5259
+#: gitk:5304
 msgid "Local uncommitted changes, not checked in to index"
 msgstr "Локални промени извън индекса"
 
-#: gitk:7032
+#: gitk:7077
 msgid "and many more"
 msgstr "и още много"
 
-#: gitk:7035
+#: gitk:7080
 msgid "many"
 msgstr "много"
 
-#: gitk:7222
+#: gitk:7271
 msgid "Tags:"
 msgstr "Етикети:"
 
-#: gitk:7239 gitk:7245 gitk:8708
+#: gitk:7288 gitk:7294 gitk:8760
 msgid "Parent"
 msgstr "Родител"
 
-#: gitk:7250
+#: gitk:7299
 msgid "Child"
 msgstr "Дете"
 
-#: gitk:7259
+#: gitk:7308
 msgid "Branch"
 msgstr "Клон"
 
-#: gitk:7262
+#: gitk:7311
 msgid "Follows"
 msgstr "Следва"
 
-#: gitk:7265
+#: gitk:7314
 msgid "Precedes"
 msgstr "Предшества"
 
-#: gitk:7849
+#: gitk:7901
 #, tcl-format
 msgid "Error getting diffs: %s"
 msgstr "Грешка при получаването на разликите: %s"
 
-#: gitk:8533
+#: gitk:8585
 msgid "Goto:"
 msgstr "Към ред:"
 
-#: gitk:8554
+#: gitk:8606
 #, tcl-format
 msgid "Short SHA1 id %s is ambiguous"
-msgstr "Съкратената SHA1 %s не е еднозначна"
+msgstr "Съкратената сума по SHA1 %s не е еднозначна"
 
-#: gitk:8561
+#: gitk:8613
 #, tcl-format
 msgid "Revision %s is not known"
 msgstr "Непозната версия %s"
 
-#: gitk:8571
+#: gitk:8623
 #, tcl-format
 msgid "SHA1 id %s is not known"
-msgstr "Непозната SHA1 %s"
+msgstr "Непозната сума по SHA1 %s"
 
-#: gitk:8573
+#: gitk:8625
 #, tcl-format
 msgid "Revision %s is not in the current view"
 msgstr "Версия %s не е в текущия изглед"
 
-#: gitk:8715 gitk:8730
+#: gitk:8767 gitk:8782
 msgid "Date"
 msgstr "Дата"
 
-#: gitk:8718
+#: gitk:8770
 msgid "Children"
 msgstr "Деца"
 
-#: gitk:8781
+#: gitk:8833
 #, tcl-format
 msgid "Reset %s branch to here"
 msgstr "Зануляване на клона „%s“ към текущото подаване"
 
-#: gitk:8783
+#: gitk:8835
 msgid "Detached head: can't reset"
 msgstr "Несвързан връх: невъзможно зануляване"
 
-#: gitk:8888 gitk:8894
+#: gitk:8940 gitk:8946
 msgid "Skipping merge commit "
 msgstr "Пропускане на подаването на сливането"
 
-#: gitk:8903 gitk:8908
+#: gitk:8955 gitk:8960
 msgid "Error getting patch ID for "
 msgstr "Грешка при получаването на идентификатора на "
 
-#: gitk:8904 gitk:8909
+#: gitk:8956 gitk:8961
 msgid " - stopping\n"
 msgstr " — спиране\n"
 
-#: gitk:8914 gitk:8917 gitk:8925 gitk:8939 gitk:8948
+#: gitk:8966 gitk:8969 gitk:8977 gitk:8991 gitk:9000
 msgid "Commit "
 msgstr "Подаване"
 
-#: gitk:8918
+#: gitk:8970
 msgid ""
 " is the same patch as\n"
 "       "
 msgstr ""
 " е същата кръпка като\n"
 "       "
 
-#: gitk:8926
+#: gitk:8978
 msgid ""
 " differs from\n"
 "       "
 msgstr ""
 " се различава от\n"
 "       "
 
-#: gitk:8928
+#: gitk:8980
 msgid ""
 "Diff of commits:\n"
 "\n"
-msgstr "Разлика между подаванията:\n\n"
+msgstr ""
+"Разлика между подаванията:\n"
+"\n"
 
-#: gitk:8940 gitk:8949
+#: gitk:8992 gitk:9001
 #, tcl-format
 msgid " has %s children - stopping\n"
 msgstr " има %s деца — спиране\n"
 
-#: gitk:8968
+#: gitk:9020
 #, tcl-format
 msgid "Error writing commit to file: %s"
 msgstr "Грешка при запазването на подаването във файл: %s"
 
-#: gitk:8974
+#: gitk:9026
 #, tcl-format
 msgid "Error diffing commits: %s"
 msgstr "Грешка при изчисляването на разликите между подаванията: %s"
 
-#: gitk:9020
+#: gitk:9072
 msgid "Top"
 msgstr "Най-горе"
 
-#: gitk:9021
+#: gitk:9073
 msgid "From"
 msgstr "От"
 
-#: gitk:9026
+#: gitk:9078
 msgid "To"
 msgstr "До"
 
-#: gitk:9050
+#: gitk:9102
 msgid "Generate patch"
 msgstr "Генериране на кръпка"
 
-#: gitk:9052
+#: gitk:9104
 msgid "From:"
 msgstr "От:"
 
-#: gitk:9061
+#: gitk:9113
 msgid "To:"
 msgstr "До:"
 
-#: gitk:9070
+#: gitk:9122
 msgid "Reverse"
 msgstr "Обръщане"
 
-#: gitk:9072 gitk:9268
+#: gitk:9124 gitk:9320
 msgid "Output file:"
 msgstr "Запазване във файла:"
 
-#: gitk:9078
+#: gitk:9130
 msgid "Generate"
 msgstr "Генериране"
 
-#: gitk:9116
+#: gitk:9168
 msgid "Error creating patch:"
 msgstr "Грешка при създаването на кръпка:"
 
-#: gitk:9139 gitk:9256 gitk:9313
+#: gitk:9191 gitk:9308 gitk:9365
 msgid "ID:"
 msgstr "Идентификатор:"
 
-#: gitk:9148
+#: gitk:9200
 msgid "Tag name:"
 msgstr "Име на етикет:"
 
-#: gitk:9151
+#: gitk:9203
 msgid "Tag message is optional"
 msgstr "Съобщението за етикет е незадължително"
 
-#: gitk:9153
+#: gitk:9205
 msgid "Tag message:"
 msgstr "Съобщение за етикет:"
 
-#: gitk:9157 gitk:9322
+#: gitk:9209 gitk:9374
 msgid "Create"
 msgstr "Създаване"
 
-#: gitk:9175
+#: gitk:9227
 msgid "No tag name specified"
 msgstr "Липсва име на етикет"
 
-#: gitk:9179
+#: gitk:9231
 #, tcl-format
 msgid "Tag \"%s\" already exists"
 msgstr "Етикетът „%s“ вече съществува"
 
-#: gitk:9189
+#: gitk:9241
 msgid "Error creating tag:"
 msgstr "Грешка при създаването на етикет:"
 
-#: gitk:9265
+#: gitk:9317
 msgid "Command:"
 msgstr "Команда:"
 
-#: gitk:9273
+#: gitk:9325
 msgid "Write"
-msgstr "Pdmdpldke"
+msgstr "Запазване"
 
-#: gitk:9291
+#: gitk:9343
 msgid "Error writing commit:"
 msgstr "Грешка при запазването на подаването:"
 
-#: gitk:9318
+#: gitk:9370
 msgid "Name:"
 msgstr "Име:"
 
-#: gitk:9341
+#: gitk:9393
 msgid "Please specify a name for the new branch"
 msgstr "Укажете име за новия клон"
 
-#: gitk:9346
+#: gitk:9398
 #, tcl-format
 msgid "Branch '%s' already exists. Overwrite?"
 msgstr "Клонът „%s“ вече съществува. Да бъде ли презаписан?"
 
-#: gitk:9413
+#: gitk:9465
 #, tcl-format
 msgid "Commit %s is already included in branch %s -- really re-apply it?"
-msgstr "Подаването „%s“ вече е включено в клона „%s“ — да бъде ли приложено отново?"
+msgstr ""
+"Подаването „%s“ вече е включено в клона „%s“ — да бъде ли приложено отново?"
 
-#: gitk:9418
+#: gitk:9470
 msgid "Cherry-picking"
 msgstr "Отбиране"
 
-#: gitk:9427
+#: gitk:9479
 #, tcl-format
 msgid ""
 "Cherry-pick failed because of local changes to file '%s'.\n"
 "Please commit, reset or stash your changes and try again."
 msgstr ""
 "Неуспешно отбиране, защото във файла „%s“ има локални промени.\n"
 "Подайте, занулете или ги скатайте и пробвайте отново."
 
-#: gitk:9433
+#: gitk:9485
 msgid ""
 "Cherry-pick failed because of merge conflict.\n"
 "Do you wish to run git citool to resolve it?"
 msgstr ""
 "Неуспешно отбиране поради конфликти при сливане.\n"
 "Искате ли да ги коригирате чрез „git citool“?"
 
-#: gitk:9449 gitk:9507
+#: gitk:9501 gitk:9559
 msgid "No changes committed"
 msgstr "Не са подадени промени"
 
-#: gitk:9476
+#: gitk:9528
 #, tcl-format
 msgid "Commit %s is not included in branch %s -- really revert it?"
 msgstr "Подаването „%s“ не е включено в клона „%s“. Да бъде ли отменено?"
 
-#: gitk:9481
+#: gitk:9533
 msgid "Reverting"
 msgstr "Отмяна"
 
-#: gitk:9489
+#: gitk:9541
 #, tcl-format
 msgid ""
 "Revert failed because of local changes to the following files:%s Please "
 "commit, reset or stash  your changes and try again."
 msgstr ""
 "Неуспешна отмяна, защото във файла „%s“ има локални промени.\n"
 "Подайте, занулете или ги скатайте и пробвайте отново.<"
 
-#: gitk:9493
+#: gitk:9545
 msgid ""
 "Revert failed because of merge conflict.\n"
 " Do you wish to run git citool to resolve it?"
 msgstr ""
 "Неуспешно отмяна поради конфликти при сливане.\n"
 "Искате ли да ги коригирате чрез „git citool“?"
 
-#: gitk:9536
+#: gitk:9588
 msgid "Confirm reset"
 msgstr "Потвърждаване на зануляването"
 
-#: gitk:9538
+#: gitk:9590
 #, tcl-format
 msgid "Reset branch %s to %s?"
-msgstr "Да се занули ли клона „%s“ към „%s“?"
+msgstr "Да се занули ли клонът „%s“ към „%s“?"
 
-#: gitk:9540
+#: gitk:9592
 msgid "Reset type:"
 msgstr "Вид зануляване:"
 
-#: gitk:9543
+#: gitk:9595
 msgid "Soft: Leave working tree and index untouched"
 msgstr "Слабо: работното дърво и индекса остават същите"
 
-#: gitk:9546
+#: gitk:9598
 msgid "Mixed: Leave working tree untouched, reset index"
 msgstr "Смесено: работното дърво остава същото, индексът се занулява"
 
-#: gitk:9549
+#: gitk:9601
 msgid ""
 "Hard: Reset working tree and index\n"
 "(discard ALL local changes)"
 msgstr ""
 "Силно: зануляване и на работното дърво, и на индекса\n"
 "(*ВСИЧКИ* локални промени ще бъдат безвъзвратно загубени)"
 
-#: gitk:9566
+#: gitk:9618
 msgid "Resetting"
 msgstr "Зануляване"
 
-#: gitk:9626
+#: gitk:9678
 msgid "Checking out"
 msgstr "Изтегляне"
 
-#: gitk:9679
+#: gitk:9731
 msgid "Cannot delete the currently checked-out branch"
 msgstr "Текущо изтегленият клон не може да бъде изтрит"
 
-#: gitk:9685
+#: gitk:9737
 #, tcl-format
 msgid ""
 "The commits on branch %s aren't on any other branch.\n"
 "Really delete branch %s?"
 msgstr ""
 "Подаванията на клона „%s“ не са на никой друг клон.\n"
-"Наистина ли да се изтрие клона „%s“?"
+"Наистина ли да се изтрие клонът „%s“?"
 
-#: gitk:9716
+#: gitk:9768
 #, tcl-format
 msgid "Tags and heads: %s"
 msgstr "Етикети и върхове: %s"
 
-#: gitk:9731
+#: gitk:9783
 msgid "Filter"
 msgstr "Филтриране"
 
-#: gitk:10027
+#: gitk:10079
 msgid ""
 "Error reading commit topology information; branch and preceding/following "
 "tag information will be incomplete."
-msgstr "Грешка при прочитането на топологията на подаванията. Информацията за клона и предшестващите/следващите етикети ще е непълна."
+msgstr ""
+"Грешка при прочитането на топологията на подаванията. Информацията за клона "
+"и предшестващите/следващите етикети ще е непълна."
 
-#: gitk:11004
+#: gitk:11056
 msgid "Tag"
 msgstr "Етикет"
 
-#: gitk:11008
+#: gitk:11060
 msgid "Id"
 msgstr "Идентификатор"
 
-#: gitk:11091
+#: gitk:11143
 msgid "Gitk font chooser"
 msgstr "Избор на шрифт за Gitk"
 
-#: gitk:11108
+#: gitk:11160
 msgid "B"
 msgstr "Ч"
 
-#: gitk:11111
+#: gitk:11163
 msgid "I"
 msgstr "К"
 
-#: gitk:11229
+#: gitk:11281
 msgid "Commit list display options"
 msgstr "Настройки на списъка с подавания"
 
-#: gitk:11232
+#: gitk:11284
 msgid "Maximum graph width (lines)"
 msgstr "Максимална широчина на графа (в редове)"
 
-#: gitk:11235
+#: gitk:11287
 #, tcl-format
 msgid "Maximum graph width (% of pane)"
 msgstr "Максимална широчина на графа (% от панела)"
 
-#: gitk:11238
+#: gitk:11290
 msgid "Show local changes"
 msgstr "Показване на локалните промени"
 
-#: gitk:11241
+#: gitk:11293
 msgid "Auto-select SHA1 (length)"
 msgstr "Автоматично избиране на SHA1 (дължина)"
 
-#: gitk:11245
+#: gitk:11297
 msgid "Hide remote refs"
 msgstr "Скриване на отдалечените указатели"
 
-#: gitk:11249
+#: gitk:11301
 msgid "Diff display options"
 msgstr "Настройки на показването на разликите"
 
-#: gitk:11251
+#: gitk:11303
 msgid "Tab spacing"
 msgstr "Широчина на табулатора"
 
-#: gitk:11254
+#: gitk:11306
 msgid "Display nearby tags/heads"
 msgstr "Извеждане на близките етикети и върхове"
 
-#: gitk:11257
+#: gitk:11309
 msgid "Maximum # tags/heads to show"
 msgstr "Максимален брой етикети/върхове за показване"
 
-#: gitk:11260
+#: gitk:11312
 msgid "Limit diffs to listed paths"
 msgstr "Разлика само в избраните пътища"
 
-#: gitk:11263
+#: gitk:11315
 msgid "Support per-file encodings"
 msgstr "Поддръжка на различни кодирания за всеки файл"
 
-#: gitk:11269 gitk:11416
+#: gitk:11321 gitk:11468
 msgid "External diff tool"
 msgstr "Външен инструмент за разлики"
 
-#: gitk:11270
+#: gitk:11322
 msgid "Choose..."
 msgstr "Избор…"
 
-#: gitk:11275
+#: gitk:11327
 msgid "General options"
 msgstr "Общи настройки"
 
-#: gitk:11278
+#: gitk:11330
 msgid "Use themed widgets"
 msgstr "Използване на тема за графичните обекти"
 
-#: gitk:11280
+#: gitk:11332
 msgid "(change requires restart)"
 msgstr "(промяната изисква рестартиране на Gitk)"
 
-#: gitk:11282
+#: gitk:11334
 msgid "(currently unavailable)"
 msgstr "(в момента недостъпно)"
 
-#: gitk:11293
+#: gitk:11345
 msgid "Colors: press to choose"
 msgstr "Цветове: избира се с натискане"
 
-#: gitk:11296
+#: gitk:11348
 msgid "Interface"
 msgstr "Интерфейс"
 
-#: gitk:11297
+#: gitk:11349
 msgid "interface"
 msgstr "интерфейс"
 
-#: gitk:11300
+#: gitk:11352
 msgid "Background"
 msgstr "Фон"
 
-#: gitk:11301 gitk:11331
+#: gitk:11353 gitk:11383
 msgid "background"
-msgstr "Фон"
+msgstr "фон"
 
-#: gitk:11304
+#: gitk:11356
 msgid "Foreground"
 msgstr "Знаци"
 
-#: gitk:11305
+#: gitk:11357
 msgid "foreground"
 msgstr "знаци"
 
-#: gitk:11308
+#: gitk:11360
 msgid "Diff: old lines"
 msgstr "Разлика: стари редове"
 
-#: gitk:11309
+#: gitk:11361
 msgid "diff old lines"
 msgstr "разлика, стари редове"
 
-#: gitk:11313
+#: gitk:11365
 msgid "Diff: new lines"
 msgstr "Разлика: нови редове"
 
-#: gitk:11314
+#: gitk:11366
 msgid "diff new lines"
 msgstr "разлика, нови редове"
 
-#: gitk:11318
+#: gitk:11370
 msgid "Diff: hunk header"
 msgstr "Разлика: начало на парче"
 
-#: gitk:11320
+#: gitk:11372
 msgid "diff hunk header"
 msgstr "разлика, начало на парче"
 
-#: gitk:11324
+#: gitk:11376
 msgid "Marked line bg"
 msgstr "Фон на отбелязан ред"
 
-#: gitk:11326
+#: gitk:11378
 msgid "marked line background"
-msgstr "Фон на отбелязан ред"
+msgstr "фон на отбелязан ред"
 
-#: gitk:11330
+#: gitk:11382
 msgid "Select bg"
 msgstr "Избор на фон"
 
-#: gitk:11339
+#: gitk:11391
 msgid "Fonts: press to choose"
 msgstr "Шрифтове: избира се с натискане"
 
-#: gitk:11341
+#: gitk:11393
 msgid "Main font"
 msgstr "Основен шрифт"
 
-#: gitk:11342
+#: gitk:11394
 msgid "Diff display font"
 msgstr "Шрифт за разликите"
 
-#: gitk:11343
+#: gitk:11395
 msgid "User interface font"
 msgstr "Шрифт на интерфейса"
 
-#: gitk:11365
+#: gitk:11417
 msgid "Gitk preferences"
 msgstr "Настройки на Gitk"
 
-#: gitk:11374
+#: gitk:11426
 msgid "General"
 msgstr "Общи"
 
-#: gitk:11375
+#: gitk:11427
 msgid "Colors"
 msgstr "Цветове"
 
-#: gitk:11376
+#: gitk:11428
 msgid "Fonts"
 msgstr "Шрифтове"
 
-#: gitk:11426
+#: gitk:11478
 #, tcl-format
 msgid "Gitk: choose color for %s"
-msgstr "Gitk: избор на цвят на %s"
+msgstr "Gitk: избор на цвят на „%s“"
 
-#: gitk:12080
+#: gitk:12177
 msgid "Cannot find a git repository here."
 msgstr "Тук липсва хранилище на Git."
 
-#: gitk:12127
+#: gitk:12224
 #, tcl-format
 msgid "Ambiguous argument '%s': both revision and filename"
 msgstr "Нееднозначен аргумент „%s“: има и такава версия, и такъв файл"
 
-#: gitk:12139
+#: gitk:12236
 msgid "Bad arguments to gitk:"
 msgstr "Неправилни аргументи на gitk:"
 
-#: gitk:12242
+#: gitk:12339
 msgid "Command line"
 msgstr "Команден ред"
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gitk-git/po: vi.msg
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gitk-git/po: vi.po
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-log and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-log differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-ls-files and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-ls-files differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-ls-remote and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-ls-remote differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-ls-tree and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-ls-tree differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-mailinfo and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-mailinfo differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-mailsplit and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-mailsplit differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-merge and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-merge differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-merge-base and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-merge-base differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-merge-file and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-merge-file differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-merge-index and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-merge-index differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-merge-ours and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-merge-ours differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-merge-recursive and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-merge-recursive differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-merge-subtree and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-merge-subtree differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-mergetool /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-mergetool
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-mergetool	2017-10-10 09:54:49.010111313 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-mergetool	2017-10-10 09:58:19.640735590 +0800
@@ -202,13 +202,13 @@
 
 checkout_staged_file () {
 	tmpfile=$(expr \
 		"$(git checkout-index --temp --stage="$1" "$2" 2>/dev/null)" \
 		: '\([^	]*\)	')
 
-	if test $? -eq 0 -a -n "$tmpfile"
+	if test $? -eq 0 && test -n "$tmpfile"
 	then
 		mv -- "$(git rev-parse --show-cdup)$tmpfile" "$3"
 	else
 		>"$3"
 	fi
 }
@@ -253,13 +253,13 @@
 	cp -- "$BACKUP" "$MERGED"
 
 	checkout_staged_file 1 "$MERGED" "$BASE"
 	checkout_staged_file 2 "$MERGED" "$LOCAL"
 	checkout_staged_file 3 "$MERGED" "$REMOTE"
 
-	if test -z "$local_mode" -o -z "$remote_mode"
+	if test -z "$local_mode" || test -z "$remote_mode"
 	then
 		echo "Deleted merge conflict for '$MERGED':"
 		describe_file "$local_mode" "local" "$LOCAL"
 		describe_file "$remote_mode" "remote" "$REMOTE"
 		resolve_deleted_merge
 		return
@@ -274,13 +274,13 @@
 		return
 	fi
 
 	echo "Normal merge conflict for '$MERGED':"
 	describe_file "$local_mode" "local" "$LOCAL"
 	describe_file "$remote_mode" "remote" "$REMOTE"
-	if "$prompt" = true
+	if test "$guessed_merge_tool" = true || test "$prompt" = true
 	then
 		printf "Hit return to start merge resolution tool (%s): " "$merge_tool"
 		read ans || return 1
 	fi
 
 	if base_present
@@ -312,13 +312,14 @@
 
 	git add -- "$MERGED"
 	cleanup_temp_files
 	return 0
 }
 
-prompt=$(git config --bool mergetool.prompt || echo true)
+prompt=$(git config --bool mergetool.prompt)
+guessed_merge_tool=false
 
 while test $# != 0
 do
 	case "$1" in
 	--tool-help)
 		show_tool_help
@@ -370,13 +371,20 @@
 		esac
 	done
 }
 
 if test -z "$merge_tool"
 then
-	merge_tool=$(get_merge_tool "$merge_tool") || exit
+	# Check if a merge tool has been configured
+	merge_tool=$(get_configured_merge_tool)
+	# Try to guess an appropriate merge tool if no tool has been set.
+	if test -z "$merge_tool"
+	then
+		merge_tool=$(guess_merge_tool) || exit
+		guessed_merge_tool=true
+	fi
 fi
 merge_keep_backup="$(git config --bool mergetool.keepBackup || echo true)"
 merge_keep_temporaries="$(git config --bool mergetool.keepTemporaries || echo false)"
 
 last_status=0
 rollup_status=0
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-mergetool.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-mergetool.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-mergetool.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-mergetool.sh	2014-08-16 06:26:55.000000000 +0800
@@ -202,13 +202,13 @@
 
 checkout_staged_file () {
 	tmpfile=$(expr \
 		"$(git checkout-index --temp --stage="$1" "$2" 2>/dev/null)" \
 		: '\([^	]*\)	')
 
-	if test $? -eq 0 -a -n "$tmpfile"
+	if test $? -eq 0 && test -n "$tmpfile"
 	then
 		mv -- "$(git rev-parse --show-cdup)$tmpfile" "$3"
 	else
 		>"$3"
 	fi
 }
@@ -253,13 +253,13 @@
 	cp -- "$BACKUP" "$MERGED"
 
 	checkout_staged_file 1 "$MERGED" "$BASE"
 	checkout_staged_file 2 "$MERGED" "$LOCAL"
 	checkout_staged_file 3 "$MERGED" "$REMOTE"
 
-	if test -z "$local_mode" -o -z "$remote_mode"
+	if test -z "$local_mode" || test -z "$remote_mode"
 	then
 		echo "Deleted merge conflict for '$MERGED':"
 		describe_file "$local_mode" "local" "$LOCAL"
 		describe_file "$remote_mode" "remote" "$REMOTE"
 		resolve_deleted_merge
 		return
@@ -274,13 +274,13 @@
 		return
 	fi
 
 	echo "Normal merge conflict for '$MERGED':"
 	describe_file "$local_mode" "local" "$LOCAL"
 	describe_file "$remote_mode" "remote" "$REMOTE"
-	if "$prompt" = true
+	if test "$guessed_merge_tool" = true || test "$prompt" = true
 	then
 		printf "Hit return to start merge resolution tool (%s): " "$merge_tool"
 		read ans || return 1
 	fi
 
 	if base_present
@@ -312,13 +312,14 @@
 
 	git add -- "$MERGED"
 	cleanup_temp_files
 	return 0
 }
 
-prompt=$(git config --bool mergetool.prompt || echo true)
+prompt=$(git config --bool mergetool.prompt)
+guessed_merge_tool=false
 
 while test $# != 0
 do
 	case "$1" in
 	--tool-help)
 		show_tool_help
@@ -370,13 +371,20 @@
 		esac
 	done
 }
 
 if test -z "$merge_tool"
 then
-	merge_tool=$(get_merge_tool "$merge_tool") || exit
+	# Check if a merge tool has been configured
+	merge_tool=$(get_configured_merge_tool)
+	# Try to guess an appropriate merge tool if no tool has been set.
+	if test -z "$merge_tool"
+	then
+		merge_tool=$(guess_merge_tool) || exit
+		guessed_merge_tool=true
+	fi
 fi
 merge_keep_backup="$(git config --bool mergetool.keepBackup || echo true)"
 merge_keep_temporaries="$(git config --bool mergetool.keepTemporaries || echo false)"
 
 last_status=0
 rollup_status=0
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-merge-tree and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-merge-tree differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-mktag and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-mktag differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-mktree and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-mktree differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-mv and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-mv differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-name-rev and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-name-rev differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-notes and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-notes differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-p4 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-p4
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-p4	2017-10-10 09:54:49.281975304 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-p4	2017-10-10 09:58:19.852629583 +0800
@@ -1235,12 +1235,34 @@
             response = raw_input("Submit template unchanged. Submit anyway? [y]es, [n]o (skip this patch) ")
             if response == 'y':
                 return True
             if response == 'n':
                 return False
 
+    def get_diff_description(self, editedFiles, filesToAdd):
+        # diff
+        if os.environ.has_key("P4DIFF"):
+            del(os.environ["P4DIFF"])
+        diff = ""
+        for editedFile in editedFiles:
+            diff += p4_read_pipe(['diff', '-du',
+                                  wildcard_encode(editedFile)])
+
+        # new file diff
+        newdiff = ""
+        for newFile in filesToAdd:
+            newdiff += "==== new file ====\n"
+            newdiff += "--- /dev/null\n"
+            newdiff += "+++ %s\n" % newFile
+            f = open(newFile, "r")
+            for line in f.readlines():
+                newdiff += "+" + line
+            f.close()
+
+        return (diff + newdiff).replace('\r\n', '\n')
+
     def applyCommit(self, id):
         """Apply one commit, return True if it succeeded."""
 
         print "Applying", read_pipe(["git", "show", "-s",
                                      "--format=format:%h %s", id])
 
@@ -1395,40 +1417,21 @@
         if self.checkAuthorship and not self.p4UserIsMe(p4User):
             submitTemplate += "######## git author %s does not match your p4 account.\n" % gitEmail
             submitTemplate += "######## Use option --preserve-user to modify authorship.\n"
             submitTemplate += "######## Variable git-p4.skipUserNameCheck hides this message.\n"
 
         separatorLine = "######## everything below this line is just the diff #######\n"
+        if not self.prepare_p4_only:
+            submitTemplate += separatorLine
+            submitTemplate += self.get_diff_description(editedFiles, filesToAdd)
 
-        # diff
-        if os.environ.has_key("P4DIFF"):
-            del(os.environ["P4DIFF"])
-        diff = ""
-        for editedFile in editedFiles:
-            diff += p4_read_pipe(['diff', '-du',
-                                  wildcard_encode(editedFile)])
-
-        # new file diff
-        newdiff = ""
-        for newFile in filesToAdd:
-            newdiff += "==== new file ====\n"
-            newdiff += "--- /dev/null\n"
-            newdiff += "+++ %s\n" % newFile
-            f = open(newFile, "r")
-            for line in f.readlines():
-                newdiff += "+" + line
-            f.close()
-
-        # change description file: submitTemplate, separatorLine, diff, newdiff
         (handle, fileName) = tempfile.mkstemp()
-        tmpFile = os.fdopen(handle, "w+")
+        tmpFile = os.fdopen(handle, "w+b")
         if self.isWindows:
             submitTemplate = submitTemplate.replace("\n", "\r\n")
-            separatorLine = separatorLine.replace("\n", "\r\n")
-            newdiff = newdiff.replace("\n", "\r\n")
-        tmpFile.write(submitTemplate + separatorLine + diff + newdiff)
+        tmpFile.write(submitTemplate)
         tmpFile.close()
 
         if self.prepare_p4_only:
             #
             # Leave the p4 tree prepared, and the submit template around
             # and let the user decide what to do next
@@ -1469,15 +1472,15 @@
         if self.edit_template(fileName):
             # read the edited message and submit
             ret = True
             tmpFile = open(fileName, "rb")
             message = tmpFile.read()
             tmpFile.close()
-            submitTemplate = message[:message.index(separatorLine)]
             if self.isWindows:
-                submitTemplate = submitTemplate.replace("\r\n", "\n")
+                message = message.replace("\r\n", "\n")
+            submitTemplate = message[:message.index(separatorLine)]
             p4_write_pipe(['submit', '-i'], submitTemplate)
 
             if self.preserveUser:
                 if p4User:
                     # Get last changelist number. Cannot easily get it from
                     # the submit command output as the output is
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-p4.py /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-p4.py
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-p4.py	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-p4.py	2014-08-16 06:26:55.000000000 +0800
@@ -1235,12 +1235,34 @@
             response = raw_input("Submit template unchanged. Submit anyway? [y]es, [n]o (skip this patch) ")
             if response == 'y':
                 return True
             if response == 'n':
                 return False
 
+    def get_diff_description(self, editedFiles, filesToAdd):
+        # diff
+        if os.environ.has_key("P4DIFF"):
+            del(os.environ["P4DIFF"])
+        diff = ""
+        for editedFile in editedFiles:
+            diff += p4_read_pipe(['diff', '-du',
+                                  wildcard_encode(editedFile)])
+
+        # new file diff
+        newdiff = ""
+        for newFile in filesToAdd:
+            newdiff += "==== new file ====\n"
+            newdiff += "--- /dev/null\n"
+            newdiff += "+++ %s\n" % newFile
+            f = open(newFile, "r")
+            for line in f.readlines():
+                newdiff += "+" + line
+            f.close()
+
+        return (diff + newdiff).replace('\r\n', '\n')
+
     def applyCommit(self, id):
         """Apply one commit, return True if it succeeded."""
 
         print "Applying", read_pipe(["git", "show", "-s",
                                      "--format=format:%h %s", id])
 
@@ -1395,40 +1417,21 @@
         if self.checkAuthorship and not self.p4UserIsMe(p4User):
             submitTemplate += "######## git author %s does not match your p4 account.\n" % gitEmail
             submitTemplate += "######## Use option --preserve-user to modify authorship.\n"
             submitTemplate += "######## Variable git-p4.skipUserNameCheck hides this message.\n"
 
         separatorLine = "######## everything below this line is just the diff #######\n"
+        if not self.prepare_p4_only:
+            submitTemplate += separatorLine
+            submitTemplate += self.get_diff_description(editedFiles, filesToAdd)
 
-        # diff
-        if os.environ.has_key("P4DIFF"):
-            del(os.environ["P4DIFF"])
-        diff = ""
-        for editedFile in editedFiles:
-            diff += p4_read_pipe(['diff', '-du',
-                                  wildcard_encode(editedFile)])
-
-        # new file diff
-        newdiff = ""
-        for newFile in filesToAdd:
-            newdiff += "==== new file ====\n"
-            newdiff += "--- /dev/null\n"
-            newdiff += "+++ %s\n" % newFile
-            f = open(newFile, "r")
-            for line in f.readlines():
-                newdiff += "+" + line
-            f.close()
-
-        # change description file: submitTemplate, separatorLine, diff, newdiff
         (handle, fileName) = tempfile.mkstemp()
-        tmpFile = os.fdopen(handle, "w+")
+        tmpFile = os.fdopen(handle, "w+b")
         if self.isWindows:
             submitTemplate = submitTemplate.replace("\n", "\r\n")
-            separatorLine = separatorLine.replace("\n", "\r\n")
-            newdiff = newdiff.replace("\n", "\r\n")
-        tmpFile.write(submitTemplate + separatorLine + diff + newdiff)
+        tmpFile.write(submitTemplate)
         tmpFile.close()
 
         if self.prepare_p4_only:
             #
             # Leave the p4 tree prepared, and the submit template around
             # and let the user decide what to do next
@@ -1469,15 +1472,15 @@
         if self.edit_template(fileName):
             # read the edited message and submit
             ret = True
             tmpFile = open(fileName, "rb")
             message = tmpFile.read()
             tmpFile.close()
-            submitTemplate = message[:message.index(separatorLine)]
             if self.isWindows:
-                submitTemplate = submitTemplate.replace("\r\n", "\n")
+                message = message.replace("\r\n", "\n")
+            submitTemplate = message[:message.index(separatorLine)]
             p4_write_pipe(['submit', '-i'], submitTemplate)
 
             if self.preserveUser:
                 if p4User:
                     # Get last changelist number. Cannot easily get it from
                     # the submit command output as the output is
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-pack-objects and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-pack-objects differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-pack-redundant and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-pack-redundant differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-pack-refs and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-pack-refs differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-patch-id and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-patch-id differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-prune and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-prune differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-prune-packed and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-prune-packed differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-pull /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-pull
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-pull	2017-10-10 09:54:49.010111313 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-pull	2017-10-10 09:58:19.644733590 +0800
@@ -103,13 +103,13 @@
 		ff_only=--ff-only ;;
 	-s=*|--s=*|--st=*|--str=*|--stra=*|--strat=*|--strate=*|\
 		--strateg=*|--strategy=*|\
 	-s|--s|--st|--str|--stra|--strat|--strate|--strateg|--strategy)
 		case "$#,$1" in
 		*,*=*)
-			strategy=`expr "z$1" : 'z-[^=]*=\(.*\)'` ;;
+			strategy=$(expr "z$1" : 'z-[^=]*=\(.*\)') ;;
 		1,*)
 			usage ;;
 		*)
 			strategy="$2"
 			shift ;;
 		esac
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-pull.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-pull.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-pull.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-pull.sh	2014-08-16 06:26:55.000000000 +0800
@@ -103,13 +103,13 @@
 		ff_only=--ff-only ;;
 	-s=*|--s=*|--st=*|--str=*|--stra=*|--strat=*|--strate=*|\
 		--strateg=*|--strategy=*|\
 	-s|--s|--st|--str|--stra|--strat|--strate|--strateg|--strategy)
 		case "$#,$1" in
 		*,*=*)
-			strategy=`expr "z$1" : 'z-[^=]*=\(.*\)'` ;;
+			strategy=$(expr "z$1" : 'z-[^=]*=\(.*\)') ;;
 		1,*)
 			usage ;;
 		*)
 			strategy="$2"
 			shift ;;
 		esac
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-push and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-push differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-read-tree and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-read-tree differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rebase /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rebase
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rebase	2017-10-10 09:54:49.018107314 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rebase	2017-10-10 09:58:19.652729590 +0800
@@ -56,12 +56,13 @@
 resolvemsg="
 $(gettext 'When you have resolved this problem, run "git rebase --continue".
 If you prefer to skip this patch, run "git rebase --skip" instead.
 To check out the original branch and stop rebasing, run "git rebase --abort".')
 "
 unset onto
+unset restrict_revision
 cmd=
 strategy=
 strategy_opts=
 do_merge=
 merge_dir="$GIT_DIR"/rebase-merge
 apply_dir="$GIT_DIR"/rebase-apply
@@ -463,14 +464,14 @@
 	upstream=$(peel_committish "${upstream_name}") ||
 	die "$(eval_gettext "invalid upstream \$upstream_name")"
 	upstream_arg="$upstream_name"
 else
 	if test -z "$onto"
 	then
-		empty_tree=`git hash-object -t tree /dev/null`
-		onto=`git commit-tree $empty_tree </dev/null`
+		empty_tree=$(git hash-object -t tree /dev/null)
+		onto=$(git commit-tree $empty_tree </dev/null)
 		squash_onto="$onto"
 	fi
 	unset upstream_name
 	unset upstream
 	test $# -gt 1 && usage
 	upstream_arg=--root
@@ -522,16 +523,16 @@
 	else
 		die "$(eval_gettext "fatal: no such branch: \$branch_name")"
 	fi
 	;;
 0)
 	# Do not need to switch branches, we are already on it.
-	if branch_name=`git symbolic-ref -q HEAD`
+	if branch_name=$(git symbolic-ref -q HEAD)
 	then
 		head_name=$branch_name
-		branch_name=`expr "z$branch_name" : 'zrefs/heads/\(.*\)'`
+		branch_name=$(expr "z$branch_name" : 'zrefs/heads/\(.*\)')
 	else
 		head_name="detached HEAD"
 		branch_name=HEAD ;# detached
 	fi
 	orig_head=$(git rev-parse --verify HEAD) || exit
 	;;
@@ -543,13 +544,13 @@
 if test "$fork_point" = t
 then
 	new_upstream=$(git merge-base --fork-point "$upstream_name" \
 			"${switch_to:-HEAD}")
 	if test -n "$new_upstream"
 	then
-		upstream=$new_upstream
+		restrict_revision=$new_upstream
 	fi
 fi
 
 if test "$autostash" = true && ! (require_clean_work_tree) 2>/dev/null
 then
 	stash_sha1=$(git stash create "autostash") ||
@@ -569,13 +570,13 @@
 
 # Check if we are already based on $onto with linear history,
 # but this should be done only when upstream and onto are the same
 # and if this is not an interactive rebase.
 mb=$(git merge-base "$onto" "$orig_head")
 if test "$type" != interactive && test "$upstream" = "$onto" &&
-	test "$mb" = "$onto" &&
+	test "$mb" = "$onto" && test -z "$restrict_revision" &&
 	# linear history?
 	! (git rev-list --parents "$onto".."$orig_head" | sane_grep " .* ") > /dev/null
 then
 	if test -z "$force_rebase"
 	then
 		# Lazily switch to the target branch if needed...
@@ -623,10 +624,10 @@
 fi
 
 if test -n "$rebase_root"
 then
 	revisions="$onto..$orig_head"
 else
-	revisions="$upstream..$orig_head"
+	revisions="${restrict_revision-$upstream}..$orig_head"
 fi
 
 run_specific_rebase
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rebase--am /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rebase--am
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rebase--am	2017-10-10 09:54:49.369931300 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rebase--am	2017-10-10 09:58:19.932589580 +0800
@@ -26,29 +26,38 @@
 	git am --skip --resolvemsg="$resolvemsg" &&
 	move_to_original_branch
 	return
 	;;
 esac
 
-test -n "$rebase_root" && root_flag=--root
+if test -z "$rebase_root"
+	# this is now equivalent to ! -z "$upstream"
+then
+	revisions=$upstream...$orig_head
+else
+	revisions=$onto...$orig_head
+fi
 
 ret=0
 if test -n "$keep_empty"
 then
 	# we have to do this the hard way.  git format-patch completely squashes
 	# empty commits and even if it didn't the format doesn't really lend
 	# itself well to recording empty patches.  fortunately, cherry-pick
 	# makes this easy
-	git cherry-pick ${gpg_sign_opt:+"$gpg_sign_opt"} --allow-empty "$revisions"
+	git cherry-pick ${gpg_sign_opt:+"$gpg_sign_opt"} --allow-empty \
+		--right-only "$revisions" \
+		${restrict_revision+^$restrict_revision}
 	ret=$?
 else
 	rm -f "$GIT_DIR/rebased-patches"
 
-	git format-patch -k --stdout --full-index --ignore-if-in-upstream \
+	git format-patch -k --stdout --full-index --cherry-pick --right-only \
 		--src-prefix=a/ --dst-prefix=b/ --no-renames --no-cover-letter \
-		$root_flag "$revisions" >"$GIT_DIR/rebased-patches"
+		"$revisions" ${restrict_revision+^$restrict_revision} \
+		>"$GIT_DIR/rebased-patches"
 	ret=$?
 
 	if test 0 != $ret
 	then
 		rm -f "$GIT_DIR/rebased-patches"
 		case "$head_name" in
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rebase--am.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rebase--am.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rebase--am.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rebase--am.sh	2014-08-16 06:26:55.000000000 +0800
@@ -26,29 +26,38 @@
 	git am --skip --resolvemsg="$resolvemsg" &&
 	move_to_original_branch
 	return
 	;;
 esac
 
-test -n "$rebase_root" && root_flag=--root
+if test -z "$rebase_root"
+	# this is now equivalent to ! -z "$upstream"
+then
+	revisions=$upstream...$orig_head
+else
+	revisions=$onto...$orig_head
+fi
 
 ret=0
 if test -n "$keep_empty"
 then
 	# we have to do this the hard way.  git format-patch completely squashes
 	# empty commits and even if it didn't the format doesn't really lend
 	# itself well to recording empty patches.  fortunately, cherry-pick
 	# makes this easy
-	git cherry-pick ${gpg_sign_opt:+"$gpg_sign_opt"} --allow-empty "$revisions"
+	git cherry-pick ${gpg_sign_opt:+"$gpg_sign_opt"} --allow-empty \
+		--right-only "$revisions" \
+		${restrict_revision+^$restrict_revision}
 	ret=$?
 else
 	rm -f "$GIT_DIR/rebased-patches"
 
-	git format-patch -k --stdout --full-index --ignore-if-in-upstream \
+	git format-patch -k --stdout --full-index --cherry-pick --right-only \
 		--src-prefix=a/ --dst-prefix=b/ --no-renames --no-cover-letter \
-		$root_flag "$revisions" >"$GIT_DIR/rebased-patches"
+		"$revisions" ${restrict_revision+^$restrict_revision} \
+		>"$GIT_DIR/rebased-patches"
 	ret=$?
 
 	if test 0 != $ret
 	then
 		rm -f "$GIT_DIR/rebased-patches"
 		case "$head_name" in
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rebase--interactive /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rebase--interactive
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rebase--interactive	2017-10-10 09:54:49.373929300 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rebase--interactive	2017-10-10 09:58:19.936587579 +0800
@@ -960,13 +960,13 @@
 else
 	revisions=$onto...$orig_head
 	shortrevisions=$shorthead
 fi
 git rev-list $merges_option --pretty=oneline --abbrev-commit \
 	--abbrev=7 --reverse --left-right --topo-order \
-	$revisions | \
+	$revisions ${restrict_revision+^$restrict_revision} | \
 	sed -n "s/^>//p" |
 while read -r shortsha1 rest
 do
 
 	if test -z "$keep_empty" && is_empty_commit $shortsha1 && ! is_merge_commit $shortsha1
 	then
@@ -1010,13 +1010,13 @@
 		sed -n "s/^>//p" > "$state_dir"/not-cherry-picks
 	# Now all commits and note which ones are missing in
 	# not-cherry-picks and hence being dropped
 	git rev-list $revisions |
 	while read rev
 	do
-		if test -f "$rewritten"/$rev -a "$(sane_grep "$rev" "$state_dir"/not-cherry-picks)" = ""
+		if test -f "$rewritten"/$rev && test "$(sane_grep "$rev" "$state_dir"/not-cherry-picks)" = ""
 		then
 			# Use -f2 because if rev-list is telling us this commit is
 			# not worthwhile, we don't want to track its multiple heads,
 			# just the history of its first-parent for others that will
 			# be rebasing on top of it
 			git rev-list --parents -1 $rev | cut -d' ' -s -f2 > "$dropped"/$rev
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rebase--interactive.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rebase--interactive.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rebase--interactive.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rebase--interactive.sh	2014-08-16 06:26:55.000000000 +0800
@@ -960,13 +960,13 @@
 else
 	revisions=$onto...$orig_head
 	shortrevisions=$shorthead
 fi
 git rev-list $merges_option --pretty=oneline --abbrev-commit \
 	--abbrev=7 --reverse --left-right --topo-order \
-	$revisions | \
+	$revisions ${restrict_revision+^$restrict_revision} | \
 	sed -n "s/^>//p" |
 while read -r shortsha1 rest
 do
 
 	if test -z "$keep_empty" && is_empty_commit $shortsha1 && ! is_merge_commit $shortsha1
 	then
@@ -1010,13 +1010,13 @@
 		sed -n "s/^>//p" > "$state_dir"/not-cherry-picks
 	# Now all commits and note which ones are missing in
 	# not-cherry-picks and hence being dropped
 	git rev-list $revisions |
 	while read rev
 	do
-		if test -f "$rewritten"/$rev -a "$(sane_grep "$rev" "$state_dir"/not-cherry-picks)" = ""
+		if test -f "$rewritten"/$rev && test "$(sane_grep "$rev" "$state_dir"/not-cherry-picks)" = ""
 		then
 			# Use -f2 because if rev-list is telling us this commit is
 			# not worthwhile, we don't want to track its multiple heads,
 			# just the history of its first-parent for others that will
 			# be rebasing on top of it
 			git rev-list --parents -1 $rev | cut -d' ' -s -f2 > "$dropped"/$rev
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rebase--merge /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rebase--merge
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rebase--merge	2017-10-10 09:54:49.377927301 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rebase--merge	2017-10-10 09:58:19.940585579 +0800
@@ -21,13 +21,13 @@
 	then
 		echo "You still have unmerged paths in your index"
 		echo "did you forget to use git add?"
 		die "$resolvemsg"
 	fi
 
-	cmt=`cat "$state_dir/current"`
+	cmt=$(cat "$state_dir/current")
 	if ! git diff-index --quiet --ignore-submodules HEAD --
 	then
 		if ! git commit ${gpg_sign_opt:+"$gpg_sign_opt"} --no-verify -C "$cmt"
 		then
 			echo "Commit failed, please do not call \"git commit\""
 			echo "directly, but instead do one of the following: "
@@ -141,13 +141,13 @@
 
 mkdir -p "$state_dir"
 echo "$onto_name" > "$state_dir/onto_name"
 write_basic_state
 
 msgnum=0
-for cmt in `git rev-list --reverse --no-merges "$revisions"`
+for cmt in $(git rev-list --reverse --no-merges "$revisions")
 do
 	msgnum=$(($msgnum + 1))
 	echo "$cmt" > "$state_dir/cmt.$msgnum"
 done
 
 echo 1 >"$state_dir/msgnum"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rebase--merge.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rebase--merge.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rebase--merge.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rebase--merge.sh	2014-08-16 06:26:55.000000000 +0800
@@ -21,13 +21,13 @@
 	then
 		echo "You still have unmerged paths in your index"
 		echo "did you forget to use git add?"
 		die "$resolvemsg"
 	fi
 
-	cmt=`cat "$state_dir/current"`
+	cmt=$(cat "$state_dir/current")
 	if ! git diff-index --quiet --ignore-submodules HEAD --
 	then
 		if ! git commit ${gpg_sign_opt:+"$gpg_sign_opt"} --no-verify -C "$cmt"
 		then
 			echo "Commit failed, please do not call \"git commit\""
 			echo "directly, but instead do one of the following: "
@@ -141,13 +141,13 @@
 
 mkdir -p "$state_dir"
 echo "$onto_name" > "$state_dir/onto_name"
 write_basic_state
 
 msgnum=0
-for cmt in `git rev-list --reverse --no-merges "$revisions"`
+for cmt in $(git rev-list --reverse --no-merges "$revisions")
 do
 	msgnum=$(($msgnum + 1))
 	echo "$cmt" > "$state_dir/cmt.$msgnum"
 done
 
 echo 1 >"$state_dir/msgnum"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rebase.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rebase.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rebase.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rebase.sh	2014-08-16 06:26:55.000000000 +0800
@@ -56,12 +56,13 @@
 resolvemsg="
 $(gettext 'When you have resolved this problem, run "git rebase --continue".
 If you prefer to skip this patch, run "git rebase --skip" instead.
 To check out the original branch and stop rebasing, run "git rebase --abort".')
 "
 unset onto
+unset restrict_revision
 cmd=
 strategy=
 strategy_opts=
 do_merge=
 merge_dir="$GIT_DIR"/rebase-merge
 apply_dir="$GIT_DIR"/rebase-apply
@@ -463,14 +464,14 @@
 	upstream=$(peel_committish "${upstream_name}") ||
 	die "$(eval_gettext "invalid upstream \$upstream_name")"
 	upstream_arg="$upstream_name"
 else
 	if test -z "$onto"
 	then
-		empty_tree=`git hash-object -t tree /dev/null`
-		onto=`git commit-tree $empty_tree </dev/null`
+		empty_tree=$(git hash-object -t tree /dev/null)
+		onto=$(git commit-tree $empty_tree </dev/null)
 		squash_onto="$onto"
 	fi
 	unset upstream_name
 	unset upstream
 	test $# -gt 1 && usage
 	upstream_arg=--root
@@ -522,16 +523,16 @@
 	else
 		die "$(eval_gettext "fatal: no such branch: \$branch_name")"
 	fi
 	;;
 0)
 	# Do not need to switch branches, we are already on it.
-	if branch_name=`git symbolic-ref -q HEAD`
+	if branch_name=$(git symbolic-ref -q HEAD)
 	then
 		head_name=$branch_name
-		branch_name=`expr "z$branch_name" : 'zrefs/heads/\(.*\)'`
+		branch_name=$(expr "z$branch_name" : 'zrefs/heads/\(.*\)')
 	else
 		head_name="detached HEAD"
 		branch_name=HEAD ;# detached
 	fi
 	orig_head=$(git rev-parse --verify HEAD) || exit
 	;;
@@ -543,13 +544,13 @@
 if test "$fork_point" = t
 then
 	new_upstream=$(git merge-base --fork-point "$upstream_name" \
 			"${switch_to:-HEAD}")
 	if test -n "$new_upstream"
 	then
-		upstream=$new_upstream
+		restrict_revision=$new_upstream
 	fi
 fi
 
 if test "$autostash" = true && ! (require_clean_work_tree) 2>/dev/null
 then
 	stash_sha1=$(git stash create "autostash") ||
@@ -569,13 +570,13 @@
 
 # Check if we are already based on $onto with linear history,
 # but this should be done only when upstream and onto are the same
 # and if this is not an interactive rebase.
 mb=$(git merge-base "$onto" "$orig_head")
 if test "$type" != interactive && test "$upstream" = "$onto" &&
-	test "$mb" = "$onto" &&
+	test "$mb" = "$onto" && test -z "$restrict_revision" &&
 	# linear history?
 	! (git rev-list --parents "$onto".."$orig_head" | sane_grep " .* ") > /dev/null
 then
 	if test -z "$force_rebase"
 	then
 		# Lazily switch to the target branch if needed...
@@ -623,10 +624,10 @@
 fi
 
 if test -n "$rebase_root"
 then
 	revisions="$onto..$orig_head"
 else
-	revisions="$upstream..$orig_head"
+	revisions="${restrict_revision-$upstream}..$orig_head"
 fi
 
 run_specific_rebase
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-receive-pack and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-receive-pack differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-reflog and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-reflog differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-remote and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-remote differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-remote-ext and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-remote-ext differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-remote-fd and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-remote-fd differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-remote-testsvn and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-remote-testsvn differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-repack and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-repack differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-replace and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-replace differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rerere and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rerere differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-reset and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-reset differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-revert and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-revert differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rev-list and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rev-list differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rev-parse and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rev-parse differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-rm and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-rm differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/GIT-SCRIPT-DEFINES /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/GIT-SCRIPT-DEFINES
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/GIT-SCRIPT-DEFINES	2017-10-10 09:54:48.966133315 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/GIT-SCRIPT-DEFINES	2017-10-10 09:58:19.592759592 +0800
@@ -1 +1 @@
-/bin/sh:diff:2.0.5: /usr/local/share/locale:YesPlease::: /usr/local/share/gitweb:/usr/bin/perl
+/bin/sh:diff:2.1.0: /usr/local/share/locale:YesPlease::: /usr/local/share/gitweb:/usr/bin/perl
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-send-email /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-send-email
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-send-email	2017-10-10 09:54:49.261985304 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-send-email	2017-10-10 09:58:19.840635583 +0800
@@ -78,12 +78,14 @@
 
   Automating:
     --identity              <str>  * Use the sendemail.<id> options.
     --to-cmd                <str>  * Email To: via `<str> \$patch_path`
     --cc-cmd                <str>  * Email Cc: via `<str> \$patch_path`
     --suppress-cc           <str>  * author, self, sob, cc, cccmd, body, bodycc, all.
+    --[no-]cc-cover                * Email Cc: addresses in the cover letter.
+    --[no-]to-cover                * Email To: addresses in the cover letter.
     --[no-]signed-off-by-cc        * Send to Signed-off-by: addresses. Default on.
     --[no-]suppress-from           * Send to self. Default off.
     --[no-]chain-reply-to          * Chain In-Reply-To: fields. Default off.
     --[no-]thread                  * Use In-Reply-To: field. Default on.
 
   Administering:
@@ -193,12 +195,13 @@
 		}
 	}
 }
 
 # Variables with corresponding config settings
 my ($thread, $chain_reply_to, $suppress_from, $signed_off_by_cc);
+my ($cover_cc, $cover_to);
 my ($to_cmd, $cc_cmd);
 my ($smtp_server, $smtp_server_port, @smtp_server_options);
 my ($smtp_authuser, $smtp_encryption, $smtp_ssl_cert_path);
 my ($identity, $aliasfiletype, @alias_files, $smtp_domain);
 my ($validate, $confirm);
 my (@suppress_cc);
@@ -209,12 +212,14 @@
 
 my %config_bool_settings = (
     "thread" => [\$thread, 1],
     "chainreplyto" => [\$chain_reply_to, 0],
     "suppressfrom" => [\$suppress_from, undef],
     "signedoffbycc" => [\$signed_off_by_cc, undef],
+    "cccover" => [\$cover_cc, undef],
+    "tocover" => [\$cover_to, undef],
     "signedoffcc" => [\$signed_off_by_cc, undef],      # Deprecated
     "validate" => [\$validate, 1],
     "multiedit" => [\$multiedit, undef],
     "annotate" => [\$annotate, undef]
 );
 
@@ -300,12 +305,14 @@
 		    "compose" => \$compose,
 		    "quiet" => \$quiet,
 		    "cc-cmd=s" => \$cc_cmd,
 		    "suppress-from!" => \$suppress_from,
 		    "suppress-cc=s" => \@suppress_cc,
 		    "signed-off-cc|signed-off-by-cc!" => \$signed_off_by_cc,
+		    "cc-cover|cc-cover!" => \$cover_cc,
+		    "to-cover|to-cover!" => \$cover_to,
 		    "confirm=s" => \$confirm,
 		    "dry-run" => \$dry_run,
 		    "envelope-sender=s" => \$envelope_sender,
 		    "thread!" => \$thread,
 		    "validate!" => \$validate,
 		    "format-patch!" => \$format_patch,
@@ -1111,12 +1118,24 @@
 	} else {
 		print STDERR "Not using SSL_VERIFY_PEER because the CA path does not exist.\n";
 		return (SSL_verify_mode => SSL_VERIFY_NONE());
 	}
 }
 
+sub file_name_is_absolute {
+	my ($path) = @_;
+
+	# msys does not grok DOS drive-prefixes
+	if ($^O eq 'msys') {
+		return ($path =~ m#^/# || $path =~ m#^[a-zA-Z]\:#)
+	}
+
+	require File::Spec::Functions;
+	return File::Spec::Functions::file_name_is_absolute($path);
+}
+
 # Returns 1 if the message was sent, and 0 otherwise.
 # In actuality, the whole program dies when there
 # is an error sending a message.
 
 sub send_message {
 	my @recipients = unique_email_list(@to);
@@ -1125,13 +1144,13 @@
 		    }
 	       @cc);
 	my $to = join (",\n\t", @recipients);
 	@recipients = unique_email_list(@recipients,@cc,@bcclist);
 	@recipients = (map { extract_valid_address_or_die($_) } @recipients);
 	my $date = format_2822_time($time++);
-	my $gitversion = '2.0.5';
+	my $gitversion = '2.1.0';
 	if ($gitversion =~ m/..GIT_VERSION../) {
 	    $gitversion = Git::version();
 	}
 
 	my $cc = join(",\n\t", unique_email_list(@cc));
 	my $ccline = "";
@@ -1195,13 +1214,13 @@
 	}
 
 	unshift (@sendmail_parameters, @smtp_server_options);
 
 	if ($dry_run) {
 		# We don't want to send the email.
-	} elsif ($smtp_server =~ m#^/#) {
+	} elsif (file_name_is_absolute($smtp_server)) {
 		my $pid = open my $sm, '|-';
 		defined $pid or die $!;
 		if (!$pid) {
 			exec($smtp_server, @sendmail_parameters) or die $!;
 		}
 		print $sm "$header\n$message";
@@ -1269,13 +1288,13 @@
 		$smtp->code =~ /250|200/ or die "Failed to send $subject\n".$smtp->message;
 	}
 	if ($quiet) {
 		printf (($dry_run ? "Dry-" : "")."Sent %s\n", $subject);
 	} else {
 		print (($dry_run ? "Dry-" : "")."OK. Log says:\n");
-		if ($smtp_server !~ m#^/#) {
+		if (!file_name_is_absolute($smtp_server)) {
 			print "Server: $smtp_server\n";
 			print "MAIL FROM:<$raw_from>\n";
 			foreach my $entry (@recipients) {
 			    print "RCPT TO:<$entry>\n";
 			}
 		} else {
@@ -1467,12 +1486,21 @@
 	@to = validate_address_list(sanitize_address_list(@to));
 	@cc = validate_address_list(sanitize_address_list(@cc));
 
 	@to = (@initial_to, @to);
 	@cc = (@initial_cc, @cc);
 
+	if ($message_num == 1) {
+		if (defined $cover_cc and $cover_cc) {
+			@initial_cc = @cc;
+		}
+		if (defined $cover_to and $cover_to) {
+			@initial_to = @to;
+		}
+	}
+
 	my $message_was_sent = send_message();
 
 	# set up for the next message
 	if ($thread && $message_was_sent &&
 		($chain_reply_to || !defined $reply_to || length($reply_to) == 0 ||
 		$message_num == 1)) {
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-send-email.perl /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-send-email.perl
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-send-email.perl	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-send-email.perl	2014-08-16 06:26:55.000000000 +0800
@@ -77,12 +77,14 @@
 
   Automating:
     --identity              <str>  * Use the sendemail.<id> options.
     --to-cmd                <str>  * Email To: via `<str> \$patch_path`
     --cc-cmd                <str>  * Email Cc: via `<str> \$patch_path`
     --suppress-cc           <str>  * author, self, sob, cc, cccmd, body, bodycc, all.
+    --[no-]cc-cover                * Email Cc: addresses in the cover letter.
+    --[no-]to-cover                * Email To: addresses in the cover letter.
     --[no-]signed-off-by-cc        * Send to Signed-off-by: addresses. Default on.
     --[no-]suppress-from           * Send to self. Default off.
     --[no-]chain-reply-to          * Chain In-Reply-To: fields. Default off.
     --[no-]thread                  * Use In-Reply-To: field. Default on.
 
   Administering:
@@ -192,12 +194,13 @@
 		}
 	}
 }
 
 # Variables with corresponding config settings
 my ($thread, $chain_reply_to, $suppress_from, $signed_off_by_cc);
+my ($cover_cc, $cover_to);
 my ($to_cmd, $cc_cmd);
 my ($smtp_server, $smtp_server_port, @smtp_server_options);
 my ($smtp_authuser, $smtp_encryption, $smtp_ssl_cert_path);
 my ($identity, $aliasfiletype, @alias_files, $smtp_domain);
 my ($validate, $confirm);
 my (@suppress_cc);
@@ -208,12 +211,14 @@
 
 my %config_bool_settings = (
     "thread" => [\$thread, 1],
     "chainreplyto" => [\$chain_reply_to, 0],
     "suppressfrom" => [\$suppress_from, undef],
     "signedoffbycc" => [\$signed_off_by_cc, undef],
+    "cccover" => [\$cover_cc, undef],
+    "tocover" => [\$cover_to, undef],
     "signedoffcc" => [\$signed_off_by_cc, undef],      # Deprecated
     "validate" => [\$validate, 1],
     "multiedit" => [\$multiedit, undef],
     "annotate" => [\$annotate, undef]
 );
 
@@ -299,12 +304,14 @@
 		    "compose" => \$compose,
 		    "quiet" => \$quiet,
 		    "cc-cmd=s" => \$cc_cmd,
 		    "suppress-from!" => \$suppress_from,
 		    "suppress-cc=s" => \@suppress_cc,
 		    "signed-off-cc|signed-off-by-cc!" => \$signed_off_by_cc,
+		    "cc-cover|cc-cover!" => \$cover_cc,
+		    "to-cover|to-cover!" => \$cover_to,
 		    "confirm=s" => \$confirm,
 		    "dry-run" => \$dry_run,
 		    "envelope-sender=s" => \$envelope_sender,
 		    "thread!" => \$thread,
 		    "validate!" => \$validate,
 		    "format-patch!" => \$format_patch,
@@ -1110,12 +1117,24 @@
 	} else {
 		print STDERR "Not using SSL_VERIFY_PEER because the CA path does not exist.\n";
 		return (SSL_verify_mode => SSL_VERIFY_NONE());
 	}
 }
 
+sub file_name_is_absolute {
+	my ($path) = @_;
+
+	# msys does not grok DOS drive-prefixes
+	if ($^O eq 'msys') {
+		return ($path =~ m#^/# || $path =~ m#^[a-zA-Z]\:#)
+	}
+
+	require File::Spec::Functions;
+	return File::Spec::Functions::file_name_is_absolute($path);
+}
+
 # Returns 1 if the message was sent, and 0 otherwise.
 # In actuality, the whole program dies when there
 # is an error sending a message.
 
 sub send_message {
 	my @recipients = unique_email_list(@to);
@@ -1194,13 +1213,13 @@
 	}
 
 	unshift (@sendmail_parameters, @smtp_server_options);
 
 	if ($dry_run) {
 		# We don't want to send the email.
-	} elsif ($smtp_server =~ m#^/#) {
+	} elsif (file_name_is_absolute($smtp_server)) {
 		my $pid = open my $sm, '|-';
 		defined $pid or die $!;
 		if (!$pid) {
 			exec($smtp_server, @sendmail_parameters) or die $!;
 		}
 		print $sm "$header\n$message";
@@ -1268,13 +1287,13 @@
 		$smtp->code =~ /250|200/ or die "Failed to send $subject\n".$smtp->message;
 	}
 	if ($quiet) {
 		printf (($dry_run ? "Dry-" : "")."Sent %s\n", $subject);
 	} else {
 		print (($dry_run ? "Dry-" : "")."OK. Log says:\n");
-		if ($smtp_server !~ m#^/#) {
+		if (!file_name_is_absolute($smtp_server)) {
 			print "Server: $smtp_server\n";
 			print "MAIL FROM:<$raw_from>\n";
 			foreach my $entry (@recipients) {
 			    print "RCPT TO:<$entry>\n";
 			}
 		} else {
@@ -1466,12 +1485,21 @@
 	@to = validate_address_list(sanitize_address_list(@to));
 	@cc = validate_address_list(sanitize_address_list(@cc));
 
 	@to = (@initial_to, @to);
 	@cc = (@initial_cc, @cc);
 
+	if ($message_num == 1) {
+		if (defined $cover_cc and $cover_cc) {
+			@initial_cc = @cc;
+		}
+		if (defined $cover_to and $cover_to) {
+			@initial_to = @to;
+		}
+	}
+
 	my $message_was_sent = send_message();
 
 	# set up for the next message
 	if ($thread && $message_was_sent &&
 		($chain_reply_to || !defined $reply_to || length($reply_to) == 0 ||
 		$message_num == 1)) {
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-send-pack and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-send-pack differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-shell and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-shell differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-sh-i18n--envsubst and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-sh-i18n--envsubst differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-shortlog and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-shortlog differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-show and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-show differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-show-branch and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-show-branch differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-show-index and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-show-index differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-show-ref and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-show-ref differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-sh-setup /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-sh-setup
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-sh-setup	2017-10-10 09:54:49.381925301 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-sh-setup	2017-10-10 09:58:19.944583580 +0800
@@ -156,13 +156,13 @@
 	if test -t 1
 	then
 		GIT_PAGER=$(git var GIT_PAGER)
 	else
 		GIT_PAGER=cat
 	fi
-	: ${LESS=-FRSX}
+	: ${LESS=-FRX}
 	: ${LV=-c}
 	export LESS LV
 
 	eval "$GIT_PAGER" '"$@"'
 }
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-sh-setup.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-sh-setup.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-sh-setup.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-sh-setup.sh	2014-08-16 06:26:55.000000000 +0800
@@ -157,13 +157,13 @@
 	if test -t 1
 	then
 		GIT_PAGER=$(git var GIT_PAGER)
 	else
 		GIT_PAGER=cat
 	fi
-	: ${LESS=-FRSX}
+	: ${LESS=-FRX}
 	: ${LV=-c}
 	export LESS LV
 
 	eval "$GIT_PAGER" '"$@"'
 }
 
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-stage and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-stage differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-stash /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-stash
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-stash	2017-10-10 09:54:49.034099313 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-stash	2017-10-10 09:58:19.660725590 +0800
@@ -10,13 +10,13 @@
    or: $dashless [save [--patch] [-k|--[no-]keep-index] [-q|--quiet]
 		       [-u|--include-untracked] [-a|--all] [<message>]]
    or: $dashless clear"
 
 SUBDIRECTORY_OK=Yes
 OPTIONS_SPEC=
-START_DIR=`pwd`
+START_DIR=$(pwd)
 . git-sh-setup
 . git-sh-i18n
 require_work_tree
 cd_to_toplevel
 
 TMP="$GIT_DIR/.git-stash.$$"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-stash.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-stash.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-stash.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-stash.sh	2014-08-16 06:26:55.000000000 +0800
@@ -10,13 +10,13 @@
    or: $dashless [save [--patch] [-k|--[no-]keep-index] [-q|--quiet]
 		       [-u|--include-untracked] [-a|--all] [<message>]]
    or: $dashless clear"
 
 SUBDIRECTORY_OK=Yes
 OPTIONS_SPEC=
-START_DIR=`pwd`
+START_DIR=$(pwd)
 . git-sh-setup
 . git-sh-i18n
 require_work_tree
 cd_to_toplevel
 
 TMP="$GIT_DIR/.git-stash.$$"
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-status and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-status differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-stripspace and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-stripspace differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-submodule /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-submodule
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-submodule	2017-10-10 09:54:49.038097313 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-submodule	2017-10-10 09:58:19.664723590 +0800
@@ -232,13 +232,13 @@
 	sm_path="$1"
 	re=$(printf '%s\n' "$1" | sed -e 's/[].[^$\\*]/\\&/g')
 	name=$( git config -f .gitmodules --get-regexp '^submodule\..*\.path$' |
 		sed -n -e 's|^submodule\.\(.*\)\.path '"$re"'$|\1|p' )
 	test -z "$name" &&
 	die "$(eval_gettext "No submodule mapping found in .gitmodules for path '\$sm_path'")"
-	echo "$name"
+	printf '%s\n' "$name"
 }
 
 #
 # Clone a submodule
 #
 # $1 = submodule path
@@ -288,15 +288,12 @@
 	fi
 
 	# We already are at the root of the work tree but cd_to_toplevel will
 	# resolve any symlinks that might be present in $PWD
 	a=$(cd_to_toplevel && cd "$gitdir" && pwd)/
 	b=$(cd_to_toplevel && cd "$sm_path" && pwd)/
-	# normalize Windows-style absolute paths to POSIX-style absolute paths
-	case $a in [a-zA-Z]:/*) a=/${a%%:*}${a#*:} ;; esac
-	case $b in [a-zA-Z]:/*) b=/${b%%:*}${b#*:} ;; esac
 	# Remove all common leading directories after a sanity check
 	if test "${a#$b}" != "$a" || test "${b#$a}" != "$b"; then
 		die "$(eval_gettext "Gitdir '\$a' is part of the submodule path '\$b' or vice versa")"
 	fi
 	while test "${a%%/*}" = "${b%%/*}"
 	do
@@ -305,16 +302,16 @@
 	done
 	# Now chop off the trailing '/'s that were added in the beginning
 	a=${a%/}
 	b=${b%/}
 
 	# Turn each leading "*/" component into "../"
-	rel=$(echo $b | sed -e 's|[^/][^/]*|..|g')
-	echo "gitdir: $rel/$a" >"$sm_path/.git"
+	rel=$(printf '%s\n' "$b" | sed -e 's|[^/][^/]*|..|g')
+	printf '%s\n' "gitdir: $rel/$a" >"$sm_path/.git"
 
-	rel=$(echo $a | sed -e 's|[^/][^/]*|..|g')
+	rel=$(printf '%s\n' "$a" | sed -e 's|[^/][^/]*|..|g')
 	(clear_local_git_env; cd "$sm_path" && GIT_WORK_TREE=. git config core.worktree "$rel/$b")
 }
 
 isnumber()
 {
 	n=$(($1 + 0)) 2>/dev/null && test "$n" = "$1"
@@ -389,17 +386,17 @@
 	fi
 
 	repo=$1
 	sm_path=$2
 
 	if test -z "$sm_path"; then
-		sm_path=$(echo "$repo" |
+		sm_path=$(printf '%s\n' "$repo" |
 			sed -e 's|/$||' -e 's|:*/*\.git$||' -e 's|.*[/:]||g')
 	fi
 
-	if test -z "$repo" -o -z "$sm_path"; then
+	if test -z "$repo" || test -z "$sm_path"; then
 		usage
 	fi
 
 	is_absolute_path "$sm_path" || sm_path="$wt_prefix$sm_path"
 
 	# assure repo is absolute or relative to parent
@@ -450,13 +447,13 @@
 		sm_name="$sm_path"
 	fi
 
 	# perhaps the path exists and is already a git repo, else clone it
 	if test -e "$sm_path"
 	then
-		if test -d "$sm_path"/.git -o -f "$sm_path"/.git
+		if test -d "$sm_path"/.git || test -f "$sm_path"/.git
 		then
 			eval_gettextln "Adding existing repo at '\$sm_path' to the index"
 		else
 			die "$(eval_gettext "'\$sm_path' already exists and is not a valid git repo")"
 		fi
 
@@ -832,13 +829,13 @@
 			test "$#" != "0" &&
 			say "$(eval_gettext "Submodule path '\$displaypath' not initialized
 Maybe you want to use 'update --init'?")"
 			continue
 		fi
 
-		if ! test -d "$sm_path"/.git -o -f "$sm_path"/.git
+		if ! test -d "$sm_path"/.git && ! test -f "$sm_path"/.git
 		then
 			module_clone "$sm_path" "$name" "$url" "$reference" "$depth" || exit
 			cloned_modules="$cloned_modules;$name"
 			subsha1=
 		else
 			subsha1=$(clear_local_git_env; cd "$sm_path" &&
@@ -857,17 +854,17 @@
 			remote_name=$(clear_local_git_env; cd "$sm_path" && get_default_remote)
 			sha1=$(clear_local_git_env; cd "$sm_path" &&
 				git rev-parse --verify "${remote_name}/${branch}") ||
 			die "$(eval_gettext "Unable to find current ${remote_name}/${branch} revision in submodule path '\$sm_path'")"
 		fi
 
-		if test "$subsha1" != "$sha1" -o -n "$force"
+		if test "$subsha1" != "$sha1" || test -n "$force"
 		then
 			subforce=$force
 			# If we don't already have a -f flag and the submodule has never been checked out
-			if test -z "$subsha1" -a -z "$force"
+			if test -z "$subsha1" && test -z "$force"
 			then
 				subforce="-f"
 			fi
 
 			if test -z "$nofetch"
 			then
@@ -1031,13 +1028,13 @@
 	test $summary_limit = 0 && return
 
 	if rev=$(git rev-parse -q --verify --default HEAD ${1+"$1"})
 	then
 		head=$rev
 		test $# = 0 || shift
-	elif test -z "$1" -o "$1" = "HEAD"
+	elif test -z "$1" || test "$1" = "HEAD"
 	then
 		# before the first commit: compare with an empty tree
 		head=$(git hash-object -w -t tree --stdin </dev/null)
 		test -z "$1" || shift
 	else
 		head="HEAD"
@@ -1056,23 +1053,27 @@
 	# Get modified modules cared by user
 	modules=$(git $diff_cmd $cached --ignore-submodules=dirty --raw $head -- "$@" |
 		sane_egrep '^:([0-7]* )?160000' |
 		while read mod_src mod_dst sha1_src sha1_dst status sm_path
 		do
 			# Always show modules deleted or type-changed (blob<->module)
-			test $status = D -o $status = T && echo "$sm_path" && continue
+			if test "$status" = D || test "$status" = T
+			then
+				printf '%s\n' "$sm_path"
+				continue
+			fi
 			# Respect the ignore setting for --for-status.
 			if test -n "$for_status"
 			then
 				name=$(module_name "$sm_path")
 				ignore_config=$(get_submodule_config "$name" ignore none)
-				test $status != A -a $ignore_config = all && continue
+				test $status != A && test $ignore_config = all && continue
 			fi
 			# Also show added or modified modules which are checked out
 			GIT_DIR="$sm_path/.git" git-rev-parse --git-dir >/dev/null 2>&1 &&
-			echo "$sm_path"
+			printf '%s\n' "$sm_path"
 		done
 	)
 
 	test -z "$modules" && return
 
 	git $diff_cmd $cached --ignore-submodules=dirty --raw $head -- $modules |
@@ -1122,13 +1123,13 @@
 		t,t)
 			errmsg="$(eval_gettext "  Warn: \$display_name doesn't contain commits \$sha1_src and \$sha1_dst")"
 			;;
 		*)
 			errmsg=
 			total_commits=$(
-			if test $mod_src = 160000 -a $mod_dst = 160000
+			if test $mod_src = 160000 && test $mod_dst = 160000
 			then
 				range="$sha1_src...$sha1_dst"
 			elif test $mod_src = 160000
 			then
 				range=$sha1_src
 			else
@@ -1159,13 +1160,13 @@
 		if test -n "$errmsg"
 		then
 			# Don't give error msg for modification whose dst is not submodule
 			# i.e. deleted or changed to blob
 			test $mod_dst = 160000 && echo "$errmsg"
 		else
-			if test $mod_src = 160000 -a $mod_dst = 160000
+			if test $mod_src = 160000 && test $mod_dst = 160000
 			then
 				limit=
 				test $summary_limit -gt 0 && limit="-$summary_limit"
 				GIT_DIR="$name/.git" \
 				git log $limit --pretty='format:  %m %s' \
 				--first-parent $sha1_src...$sha1_dst
@@ -1230,13 +1231,17 @@
 		displaypath=$(relative_path "$prefix$sm_path")
 		if test "$stage" = U
 		then
 			say "U$sha1 $displaypath"
 			continue
 		fi
-		if test -z "$url" || ! test -d "$sm_path"/.git -o -f "$sm_path"/.git
+		if test -z "$url" ||
+		{
+			! test -d "$sm_path"/.git &&
+			! test -f "$sm_path"/.git
+		}
 		then
 			say "-$sha1 $displaypath"
 			continue;
 		fi
 		if git diff-files --ignore-submodules=dirty --quiet -- "$sm_path"
 		then
@@ -1303,13 +1308,13 @@
 
 		# Possibly a url relative to parent
 		case "$url" in
 		./*|../*)
 			# rewrite foo/bar as ../.. to find path from
 			# submodule work tree to superproject work tree
-			up_path="$(echo "$sm_path" | sed "s/[^/][^/]*/../g")" &&
+			up_path="$(printf '%s\n' "$sm_path" | sed "s/[^/][^/]*/../g")" &&
 			# guarantee a trailing /
 			up_path=${up_path%/}/ &&
 			# path from submodule work tree to submodule origin repo
 			sub_origin_url=$(resolve_relative_url "$url" "$up_path") &&
 			# path from superproject work tree to submodule origin repo
 			super_config_url=$(resolve_relative_url "$url") || exit
@@ -1399,12 +1404,12 @@
 if test -n "$branch" && test "$command" != add
 then
 	usage
 fi
 
 # "--cached" is accepted only by "status" and "summary"
-if test -n "$cached" && test "$command" != status -a "$command" != summary
+if test -n "$cached" && test "$command" != status && test "$command" != summary
 then
 	usage
 fi
 
 "cmd_$command" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-submodule.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-submodule.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-submodule.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-submodule.sh	2014-08-16 06:26:55.000000000 +0800
@@ -232,13 +232,13 @@
 	sm_path="$1"
 	re=$(printf '%s\n' "$1" | sed -e 's/[].[^$\\*]/\\&/g')
 	name=$( git config -f .gitmodules --get-regexp '^submodule\..*\.path$' |
 		sed -n -e 's|^submodule\.\(.*\)\.path '"$re"'$|\1|p' )
 	test -z "$name" &&
 	die "$(eval_gettext "No submodule mapping found in .gitmodules for path '\$sm_path'")"
-	echo "$name"
+	printf '%s\n' "$name"
 }
 
 #
 # Clone a submodule
 #
 # $1 = submodule path
@@ -288,15 +288,12 @@
 	fi
 
 	# We already are at the root of the work tree but cd_to_toplevel will
 	# resolve any symlinks that might be present in $PWD
 	a=$(cd_to_toplevel && cd "$gitdir" && pwd)/
 	b=$(cd_to_toplevel && cd "$sm_path" && pwd)/
-	# normalize Windows-style absolute paths to POSIX-style absolute paths
-	case $a in [a-zA-Z]:/*) a=/${a%%:*}${a#*:} ;; esac
-	case $b in [a-zA-Z]:/*) b=/${b%%:*}${b#*:} ;; esac
 	# Remove all common leading directories after a sanity check
 	if test "${a#$b}" != "$a" || test "${b#$a}" != "$b"; then
 		die "$(eval_gettext "Gitdir '\$a' is part of the submodule path '\$b' or vice versa")"
 	fi
 	while test "${a%%/*}" = "${b%%/*}"
 	do
@@ -305,16 +302,16 @@
 	done
 	# Now chop off the trailing '/'s that were added in the beginning
 	a=${a%/}
 	b=${b%/}
 
 	# Turn each leading "*/" component into "../"
-	rel=$(echo $b | sed -e 's|[^/][^/]*|..|g')
-	echo "gitdir: $rel/$a" >"$sm_path/.git"
+	rel=$(printf '%s\n' "$b" | sed -e 's|[^/][^/]*|..|g')
+	printf '%s\n' "gitdir: $rel/$a" >"$sm_path/.git"
 
-	rel=$(echo $a | sed -e 's|[^/][^/]*|..|g')
+	rel=$(printf '%s\n' "$a" | sed -e 's|[^/][^/]*|..|g')
 	(clear_local_git_env; cd "$sm_path" && GIT_WORK_TREE=. git config core.worktree "$rel/$b")
 }
 
 isnumber()
 {
 	n=$(($1 + 0)) 2>/dev/null && test "$n" = "$1"
@@ -389,17 +386,17 @@
 	fi
 
 	repo=$1
 	sm_path=$2
 
 	if test -z "$sm_path"; then
-		sm_path=$(echo "$repo" |
+		sm_path=$(printf '%s\n' "$repo" |
 			sed -e 's|/$||' -e 's|:*/*\.git$||' -e 's|.*[/:]||g')
 	fi
 
-	if test -z "$repo" -o -z "$sm_path"; then
+	if test -z "$repo" || test -z "$sm_path"; then
 		usage
 	fi
 
 	is_absolute_path "$sm_path" || sm_path="$wt_prefix$sm_path"
 
 	# assure repo is absolute or relative to parent
@@ -450,13 +447,13 @@
 		sm_name="$sm_path"
 	fi
 
 	# perhaps the path exists and is already a git repo, else clone it
 	if test -e "$sm_path"
 	then
-		if test -d "$sm_path"/.git -o -f "$sm_path"/.git
+		if test -d "$sm_path"/.git || test -f "$sm_path"/.git
 		then
 			eval_gettextln "Adding existing repo at '\$sm_path' to the index"
 		else
 			die "$(eval_gettext "'\$sm_path' already exists and is not a valid git repo")"
 		fi
 
@@ -832,13 +829,13 @@
 			test "$#" != "0" &&
 			say "$(eval_gettext "Submodule path '\$displaypath' not initialized
 Maybe you want to use 'update --init'?")"
 			continue
 		fi
 
-		if ! test -d "$sm_path"/.git -o -f "$sm_path"/.git
+		if ! test -d "$sm_path"/.git && ! test -f "$sm_path"/.git
 		then
 			module_clone "$sm_path" "$name" "$url" "$reference" "$depth" || exit
 			cloned_modules="$cloned_modules;$name"
 			subsha1=
 		else
 			subsha1=$(clear_local_git_env; cd "$sm_path" &&
@@ -857,17 +854,17 @@
 			remote_name=$(clear_local_git_env; cd "$sm_path" && get_default_remote)
 			sha1=$(clear_local_git_env; cd "$sm_path" &&
 				git rev-parse --verify "${remote_name}/${branch}") ||
 			die "$(eval_gettext "Unable to find current ${remote_name}/${branch} revision in submodule path '\$sm_path'")"
 		fi
 
-		if test "$subsha1" != "$sha1" -o -n "$force"
+		if test "$subsha1" != "$sha1" || test -n "$force"
 		then
 			subforce=$force
 			# If we don't already have a -f flag and the submodule has never been checked out
-			if test -z "$subsha1" -a -z "$force"
+			if test -z "$subsha1" && test -z "$force"
 			then
 				subforce="-f"
 			fi
 
 			if test -z "$nofetch"
 			then
@@ -1031,13 +1028,13 @@
 	test $summary_limit = 0 && return
 
 	if rev=$(git rev-parse -q --verify --default HEAD ${1+"$1"})
 	then
 		head=$rev
 		test $# = 0 || shift
-	elif test -z "$1" -o "$1" = "HEAD"
+	elif test -z "$1" || test "$1" = "HEAD"
 	then
 		# before the first commit: compare with an empty tree
 		head=$(git hash-object -w -t tree --stdin </dev/null)
 		test -z "$1" || shift
 	else
 		head="HEAD"
@@ -1056,23 +1053,27 @@
 	# Get modified modules cared by user
 	modules=$(git $diff_cmd $cached --ignore-submodules=dirty --raw $head -- "$@" |
 		sane_egrep '^:([0-7]* )?160000' |
 		while read mod_src mod_dst sha1_src sha1_dst status sm_path
 		do
 			# Always show modules deleted or type-changed (blob<->module)
-			test $status = D -o $status = T && echo "$sm_path" && continue
+			if test "$status" = D || test "$status" = T
+			then
+				printf '%s\n' "$sm_path"
+				continue
+			fi
 			# Respect the ignore setting for --for-status.
 			if test -n "$for_status"
 			then
 				name=$(module_name "$sm_path")
 				ignore_config=$(get_submodule_config "$name" ignore none)
-				test $status != A -a $ignore_config = all && continue
+				test $status != A && test $ignore_config = all && continue
 			fi
 			# Also show added or modified modules which are checked out
 			GIT_DIR="$sm_path/.git" git-rev-parse --git-dir >/dev/null 2>&1 &&
-			echo "$sm_path"
+			printf '%s\n' "$sm_path"
 		done
 	)
 
 	test -z "$modules" && return
 
 	git $diff_cmd $cached --ignore-submodules=dirty --raw $head -- $modules |
@@ -1122,13 +1123,13 @@
 		t,t)
 			errmsg="$(eval_gettext "  Warn: \$display_name doesn't contain commits \$sha1_src and \$sha1_dst")"
 			;;
 		*)
 			errmsg=
 			total_commits=$(
-			if test $mod_src = 160000 -a $mod_dst = 160000
+			if test $mod_src = 160000 && test $mod_dst = 160000
 			then
 				range="$sha1_src...$sha1_dst"
 			elif test $mod_src = 160000
 			then
 				range=$sha1_src
 			else
@@ -1159,13 +1160,13 @@
 		if test -n "$errmsg"
 		then
 			# Don't give error msg for modification whose dst is not submodule
 			# i.e. deleted or changed to blob
 			test $mod_dst = 160000 && echo "$errmsg"
 		else
-			if test $mod_src = 160000 -a $mod_dst = 160000
+			if test $mod_src = 160000 && test $mod_dst = 160000
 			then
 				limit=
 				test $summary_limit -gt 0 && limit="-$summary_limit"
 				GIT_DIR="$name/.git" \
 				git log $limit --pretty='format:  %m %s' \
 				--first-parent $sha1_src...$sha1_dst
@@ -1230,13 +1231,17 @@
 		displaypath=$(relative_path "$prefix$sm_path")
 		if test "$stage" = U
 		then
 			say "U$sha1 $displaypath"
 			continue
 		fi
-		if test -z "$url" || ! test -d "$sm_path"/.git -o -f "$sm_path"/.git
+		if test -z "$url" ||
+		{
+			! test -d "$sm_path"/.git &&
+			! test -f "$sm_path"/.git
+		}
 		then
 			say "-$sha1 $displaypath"
 			continue;
 		fi
 		if git diff-files --ignore-submodules=dirty --quiet -- "$sm_path"
 		then
@@ -1303,13 +1308,13 @@
 
 		# Possibly a url relative to parent
 		case "$url" in
 		./*|../*)
 			# rewrite foo/bar as ../.. to find path from
 			# submodule work tree to superproject work tree
-			up_path="$(echo "$sm_path" | sed "s/[^/][^/]*/../g")" &&
+			up_path="$(printf '%s\n' "$sm_path" | sed "s/[^/][^/]*/../g")" &&
 			# guarantee a trailing /
 			up_path=${up_path%/}/ &&
 			# path from submodule work tree to submodule origin repo
 			sub_origin_url=$(resolve_relative_url "$url" "$up_path") &&
 			# path from superproject work tree to submodule origin repo
 			super_config_url=$(resolve_relative_url "$url") || exit
@@ -1399,12 +1404,12 @@
 if test -n "$branch" && test "$command" != add
 then
 	usage
 fi
 
 # "--cached" is accepted only by "status" and "summary"
-if test -n "$cached" && test "$command" != status -a "$command" != summary
+if test -n "$cached" && test "$command" != status && test "$command" != summary
 then
 	usage
 fi
 
 "cmd_$command" "$@"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-svn /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-svn
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-svn	2017-10-10 09:54:49.269981305 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-svn	2017-10-10 09:58:19.848631583 +0800
@@ -6,13 +6,13 @@
 use warnings;
 use strict;
 use vars qw/	$AUTHOR $VERSION
 		$sha1 $sha1_short $_revision $_repository
 		$_q $_authors $_authors_prog %users/;
 $AUTHOR = 'Eric Wong <normalperson@yhbt.net>';
-$VERSION = '2.0.5';
+$VERSION = '2.1.0';
 
 use Carp qw/croak/;
 use Digest::MD5;
 use IO::File qw//;
 use File::Basename qw/dirname basename/;
 use File::Path qw/mkpath/;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-symbolic-ref and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-symbolic-ref differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-tag and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-tag differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-unpack-file and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-unpack-file differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-unpack-objects and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-unpack-objects differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-update-index and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-update-index differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-update-ref and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-update-ref differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-update-server-info and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-update-server-info differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-upload-archive and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-upload-archive differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-upload-pack and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-upload-pack differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/GIT-USER-AGENT /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/GIT-USER-AGENT
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/GIT-USER-AGENT	2017-10-10 09:54:43.077079532 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/GIT-USER-AGENT	2017-10-10 09:58:13.447833817 +0800
@@ -1 +1 @@
-git/2.0.5
+git/2.1.0
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-var and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-var differ
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0: git-verify-commit
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-verify-pack and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-verify-pack differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-verify-tag and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-verify-tag differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/GIT-VERSION-FILE /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/GIT-VERSION-FILE
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/GIT-VERSION-FILE	2017-10-10 09:54:19.788730385 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/GIT-VERSION-FILE	2017-10-10 09:57:49.975576678 +0800
@@ -1 +1 @@
-GIT_VERSION = 2.0.5
+GIT_VERSION = 2.1.0
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/GIT-VERSION-GEN /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/GIT-VERSION-GEN
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/GIT-VERSION-GEN	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/GIT-VERSION-GEN	2014-08-16 06:26:55.000000000 +0800
@@ -1,10 +1,10 @@
 #!/bin/sh
 
 GVF=GIT-VERSION-FILE
-DEF_VER=v2.0.5
+DEF_VER=v2.1.0
 
 LF='
 '
 
 # First see if there is a version file (included in release tarballs),
 # then try git-describe, then default.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gitweb/GITWEB-BUILD-OPTIONS /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gitweb/GITWEB-BUILD-OPTIONS
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gitweb/GITWEB-BUILD-OPTIONS	2017-10-10 09:54:49.325953302 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gitweb/GITWEB-BUILD-OPTIONS	2017-10-10 09:58:19.888611581 +0800
@@ -1 +1 @@
-x /usr/bin/perl -e s|++GIT_VERSION++|2.0.5|g -e s|++GIT_BINDIR++|/usr/local/bin|g -e s|++GITWEB_CONFIG++|gitweb_config.perl|g -e s|++GITWEB_CONFIG_SYSTEM++|/etc/gitweb.conf|g -e s|++GITWEB_CONFIG_COMMON++|/etc/gitweb-common.conf|g -e s|++GITWEB_HOME_LINK_STR++|projects|g -e s|++GITWEB_SITENAME++||g -e s|++GITWEB_PROJECTROOT++|/pub/git|g -e s|"++GITWEB_PROJECT_MAXDEPTH++"|2007|g -e s|++GITWEB_EXPORT_OK++||g -e s|++GITWEB_STRICT_EXPORT++||g -e s|++GITWEB_BASE_URL++||g -e s|++GITWEB_LIST++||g -e s|++GITWEB_HOMETEXT++|indextext.html|g -e s|++GITWEB_CSS++|static/gitweb.css|g -e s|++GITWEB_LOGO++|static/git-logo.png|g -e s|++GITWEB_FAVICON++|static/git-favicon.png|g -e s|++GITWEB_JS++|static/gitweb.js|g -e s|++GITWEB_SITE_HTML_HEAD_STRING++||g -e s|++GITWEB_SITE_HEADER++||g -e s|++GITWEB_SITE_FOOTER++||g -e s|++HIGHLIGHT_BIN++|highlight|g |
+x /usr/bin/perl -e s|++GIT_VERSION++|2.1.0|g -e s|++GIT_BINDIR++|/usr/local/bin|g -e s|++GITWEB_CONFIG++|gitweb_config.perl|g -e s|++GITWEB_CONFIG_SYSTEM++|/etc/gitweb.conf|g -e s|++GITWEB_CONFIG_COMMON++|/etc/gitweb-common.conf|g -e s|++GITWEB_HOME_LINK_STR++|projects|g -e s|++GITWEB_SITENAME++||g -e s|++GITWEB_PROJECTROOT++|/pub/git|g -e s|"++GITWEB_PROJECT_MAXDEPTH++"|2007|g -e s|++GITWEB_EXPORT_OK++||g -e s|++GITWEB_STRICT_EXPORT++||g -e s|++GITWEB_BASE_URL++||g -e s|++GITWEB_LIST++||g -e s|++GITWEB_HOMETEXT++|indextext.html|g -e s|++GITWEB_CSS++|static/gitweb.css|g -e s|++GITWEB_LOGO++|static/git-logo.png|g -e s|++GITWEB_FAVICON++|static/git-favicon.png|g -e s|++GITWEB_JS++|static/gitweb.js|g -e s|++GITWEB_SITE_HTML_HEAD_STRING++||g -e s|++GITWEB_SITE_HEADER++||g -e s|++GITWEB_SITE_FOOTER++||g -e s|++HIGHLIGHT_BIN++|highlight|g |
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gitweb/gitweb.cgi /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gitweb/gitweb.cgi
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gitweb/gitweb.cgi	2017-10-10 09:54:49.353939301 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gitweb/gitweb.cgi	2017-10-10 09:58:19.912599581 +0800
@@ -24,13 +24,13 @@
 our $number_of_git_cmds = 0;
 
 BEGIN {
 	CGI->compile() if $ENV{'MOD_PERL'};
 }
 
-our $version = "2.0.5";
+our $version = "2.1.0";
 
 our ($my_url, $my_uri, $base_url, $path_info, $home_link);
 sub evaluate_uri {
 	our $cgi;
 
 	our $my_url = $cgi->url();
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-web--browse /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-web--browse
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-web--browse	2017-10-10 09:54:49.050091313 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-web--browse	2017-10-10 09:58:19.684713588 +0800
@@ -56,25 +56,25 @@
 while test $# != 0
 do
 	case "$1" in
 	-b|--browser*|-t|--tool*)
 		case "$#,$1" in
 		*,*=*)
-			browser=`expr "z$1" : 'z-[^=]*=\(.*\)'`
+			browser=$(expr "z$1" : 'z-[^=]*=\(.*\)')
 			;;
 		1,*)
 			usage ;;
 		*)
 			browser="$2"
 			shift ;;
 		esac
 		;;
 	-c|--config*)
 		case "$#,$1" in
 		*,*=*)
-			conf=`expr "z$1" : 'z-[^=]*=\(.*\)'`
+			conf=$(expr "z$1" : 'z-[^=]*=\(.*\)')
 			;;
 		1,*)
 			usage ;;
 		*)
 			conf="$2"
 			shift ;;
@@ -97,13 +97,13 @@
 
 if test -z "$browser"
 then
 	for opt in "$conf" "web.browser"
 	do
 		test -z "$opt" && continue
-		browser="`git config $opt`"
+		browser="$(git config $opt)"
 		test -z "$browser" || break
 	done
 	if test -n "$browser" && ! valid_tool "$browser"; then
 		echo >&2 "git config option $opt set to unknown browser: $browser"
 		echo >&2 "Resetting to default..."
 		unset browser
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-web--browse.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-web--browse.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-web--browse.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-web--browse.sh	2014-08-16 06:26:55.000000000 +0800
@@ -56,25 +56,25 @@
 while test $# != 0
 do
 	case "$1" in
 	-b|--browser*|-t|--tool*)
 		case "$#,$1" in
 		*,*=*)
-			browser=`expr "z$1" : 'z-[^=]*=\(.*\)'`
+			browser=$(expr "z$1" : 'z-[^=]*=\(.*\)')
 			;;
 		1,*)
 			usage ;;
 		*)
 			browser="$2"
 			shift ;;
 		esac
 		;;
 	-c|--config*)
 		case "$#,$1" in
 		*,*=*)
-			conf=`expr "z$1" : 'z-[^=]*=\(.*\)'`
+			conf=$(expr "z$1" : 'z-[^=]*=\(.*\)')
 			;;
 		1,*)
 			usage ;;
 		*)
 			conf="$2"
 			shift ;;
@@ -97,13 +97,13 @@
 
 if test -z "$browser"
 then
 	for opt in "$conf" "web.browser"
 	do
 		test -z "$opt" && continue
-		browser="`git config $opt`"
+		browser="$(git config $opt)"
 		test -z "$browser" || break
 	done
 	if test -n "$browser" && ! valid_tool "$browser"; then
 		echo >&2 "git config option $opt set to unknown browser: $browser"
 		echo >&2 "Resetting to default..."
 		unset browser
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-whatchanged and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-whatchanged differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/git-write-tree and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/git-write-tree differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gpg-interface.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gpg-interface.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gpg-interface.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gpg-interface.c	2014-08-16 06:26:55.000000000 +0800
@@ -4,12 +4,26 @@
 #include "gpg-interface.h"
 #include "sigchain.h"
 
 static char *configured_signing_key;
 static const char *gpg_program = "gpg";
 
+void signature_check_clear(struct signature_check *sigc)
+{
+	free(sigc->payload);
+	free(sigc->gpg_output);
+	free(sigc->gpg_status);
+	free(sigc->signer);
+	free(sigc->key);
+	sigc->payload = NULL;
+	sigc->gpg_output = NULL;
+	sigc->gpg_status = NULL;
+	sigc->signer = NULL;
+	sigc->key = NULL;
+}
+
 void set_signing_key(const char *key)
 {
 	free(configured_signing_key);
 	configured_signing_key = xstrdup(key);
 }
 
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gpg-interface.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gpg-interface.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gpg-interface.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gpg-interface.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gpg-interface.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gpg-interface.h	2014-08-16 06:26:55.000000000 +0800
@@ -1,21 +1,23 @@
 #ifndef GPG_INTERFACE_H
 #define GPG_INTERFACE_H
 
 struct signature_check {
+	char *payload;
 	char *gpg_output;
 	char *gpg_status;
 	char result; /* 0 (not checked),
 		      * N (checked but no further result),
 		      * U (untrusted good),
 		      * G (good)
 		      * B (bad) */
 	char *signer;
 	char *key;
 };
 
+extern void signature_check_clear(struct signature_check *sigc);
 extern int sign_buffer(struct strbuf *buffer, struct strbuf *signature, const char *signing_key);
 extern int verify_signed_buffer(const char *payload, size_t payload_size, const char *signature, size_t signature_size, struct strbuf *gpg_output, struct strbuf *gpg_status);
 extern int git_gpg_config(const char *, const char *, void *);
 extern void set_signing_key(const char *);
 extern const char *get_signing_key(void);
 
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/gpg-interface.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/gpg-interface.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/graph.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/graph.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/graph.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/graph.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/grep.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/grep.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/grep.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/grep.c	2014-08-16 06:26:55.000000000 +0800
@@ -83,12 +83,17 @@
 
 	if (!strcmp(var, "grep.linenumber")) {
 		opt->linenum = git_config_bool(var, value);
 		return 0;
 	}
 
+	if (!strcmp(var, "grep.fullname")) {
+		opt->relative = !git_config_bool(var, value);
+		return 0;
+	}
+
 	if (!strcmp(var, "color.grep"))
 		opt->color = git_config_colorbool(var, value);
 	else if (!strcmp(var, "color.grep.context"))
 		color = opt->color_context;
 	else if (!strcmp(var, "color.grep.filename"))
 		color = opt->color_filename;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/grep.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/grep.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/grep.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/grep.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/hashmap.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/hashmap.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/hashmap.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/hashmap.c	2014-08-16 06:26:55.000000000 +0800
@@ -223,6 +223,44 @@
 		if (iter->tablepos >= iter->map->tablesize)
 			return NULL;
 
 		current = iter->map->table[iter->tablepos++];
 	}
 }
+
+struct pool_entry {
+	struct hashmap_entry ent;
+	size_t len;
+	unsigned char data[FLEX_ARRAY];
+};
+
+static int pool_entry_cmp(const struct pool_entry *e1,
+			  const struct pool_entry *e2,
+			  const unsigned char *keydata)
+{
+	return e1->data != keydata &&
+	       (e1->len != e2->len || memcmp(e1->data, keydata, e1->len));
+}
+
+const void *memintern(const void *data, size_t len)
+{
+	static struct hashmap map;
+	struct pool_entry key, *e;
+
+	/* initialize string pool hashmap */
+	if (!map.tablesize)
+		hashmap_init(&map, (hashmap_cmp_fn) pool_entry_cmp, 0);
+
+	/* lookup interned string in pool */
+	hashmap_entry_init(&key, memhash(data, len));
+	key.len = len;
+	e = hashmap_get(&map, &key, data);
+	if (!e) {
+		/* not found: create it */
+		e = xmallocz(sizeof(struct pool_entry) + len);
+		hashmap_entry_init(e, key.ent.hash);
+		e->len = len;
+		memcpy(e->data, data, len);
+		hashmap_add(&map, e);
+	}
+	return e->data;
+}
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/hashmap.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/hashmap.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/hashmap.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/hashmap.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/hashmap.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/hashmap.h	2014-08-16 06:26:55.000000000 +0800
@@ -10,12 +10,23 @@
 
 extern unsigned int strhash(const char *buf);
 extern unsigned int strihash(const char *buf);
 extern unsigned int memhash(const void *buf, size_t len);
 extern unsigned int memihash(const void *buf, size_t len);
 
+static inline unsigned int sha1hash(const unsigned char *sha1)
+{
+	/*
+	 * Equivalent to 'return *(unsigned int *)sha1;', but safe on
+	 * platforms that don't support unaligned reads.
+	 */
+	unsigned int hash;
+	memcpy(&hash, sha1, sizeof(hash));
+	return hash;
+}
+
 /* data structures */
 
 struct hashmap_entry {
 	struct hashmap_entry *next;
 	unsigned int hash;
 };
@@ -54,18 +65,34 @@
 extern void *hashmap_get_next(const struct hashmap *map, const void *entry);
 extern void hashmap_add(struct hashmap *map, void *entry);
 extern void *hashmap_put(struct hashmap *map, void *entry);
 extern void *hashmap_remove(struct hashmap *map, const void *key,
 		const void *keydata);
 
+static inline void *hashmap_get_from_hash(const struct hashmap *map,
+		unsigned int hash, const void *keydata)
+{
+	struct hashmap_entry key;
+	hashmap_entry_init(&key, hash);
+	return hashmap_get(map, &key, keydata);
+}
+
 /* hashmap_iter functions */
 
 extern void hashmap_iter_init(struct hashmap *map, struct hashmap_iter *iter);
 extern void *hashmap_iter_next(struct hashmap_iter *iter);
 static inline void *hashmap_iter_first(struct hashmap *map,
 		struct hashmap_iter *iter)
 {
 	hashmap_iter_init(map, iter);
 	return hashmap_iter_next(iter);
 }
 
+/* string interning */
+
+extern const void *memintern(const void *data, size_t len);
+static inline const char *strintern(const char *string)
+{
+	return memintern(string, strlen(string));
+}
+
 #endif
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/hashmap.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/hashmap.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/help.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/help.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/help.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/help.c	2014-08-16 06:26:55.000000000 +0800
@@ -126,43 +126,41 @@
 }
 
 static void list_commands_in_dir(struct cmdnames *cmds,
 					 const char *path,
 					 const char *prefix)
 {
-	int prefix_len;
 	DIR *dir = opendir(path);
 	struct dirent *de;
 	struct strbuf buf = STRBUF_INIT;
 	int len;
 
 	if (!dir)
 		return;
 	if (!prefix)
 		prefix = "git-";
-	prefix_len = strlen(prefix);
 
 	strbuf_addf(&buf, "%s/", path);
 	len = buf.len;
 
 	while ((de = readdir(dir)) != NULL) {
-		int entlen;
+		const char *ent;
+		size_t entlen;
 
-		if (!starts_with(de->d_name, prefix))
+		if (!skip_prefix(de->d_name, prefix, &ent))
 			continue;
 
 		strbuf_setlen(&buf, len);
 		strbuf_addstr(&buf, de->d_name);
 		if (!is_executable(buf.buf))
 			continue;
 
-		entlen = strlen(de->d_name) - prefix_len;
-		if (has_extension(de->d_name, ".exe"))
-			entlen -= 4;
+		entlen = strlen(ent);
+		strip_suffix(ent, ".exe", &entlen);
 
-		add_cmdname(cmds, de->d_name + prefix_len, entlen);
+		add_cmdname(cmds, ent, entlen);
 	}
 	closedir(dir);
 	strbuf_release(&buf);
 }
 
 void load_command_list(const char *prefix,
@@ -248,17 +246,19 @@
 
 static int autocorrect;
 static struct cmdnames aliases;
 
 static int git_unknown_cmd_config(const char *var, const char *value, void *cb)
 {
+	const char *p;
+
 	if (!strcmp(var, "help.autocorrect"))
 		autocorrect = git_config_int(var,value);
 	/* Also use aliases for command lookup */
-	if (starts_with(var, "alias."))
-		add_cmdname(&aliases, var + 6, strlen(var + 6));
+	if (skip_prefix(var, "alias.", &p))
+		add_cmdname(&aliases, p, strlen(p));
 
 	return git_default_config(var, value, cb);
 }
 
 static int levenshtein_compare(const void *p1, const void *p2)
 {
@@ -409,17 +409,18 @@
 
 static int append_similar_ref(const char *refname, const unsigned char *sha1,
 			      int flags, void *cb_data)
 {
 	struct similar_ref_cb *cb = (struct similar_ref_cb *)(cb_data);
 	char *branch = strrchr(refname, '/') + 1;
+	const char *remote;
+
 	/* A remote branch of the same name is deemed similar */
-	if (starts_with(refname, "refs/remotes/") &&
+	if (skip_prefix(refname, "refs/remotes/", &remote) &&
 	    !strcmp(branch, cb->base_ref))
-		string_list_append(cb->similar_refs,
-				   refname + strlen("refs/remotes/"));
+		string_list_append(cb->similar_refs, remote);
 	return 0;
 }
 
 static struct string_list guess_refs(const char *ref)
 {
 	struct similar_ref_cb ref_cb;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/help.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/help.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/help.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/help.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/hex.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/hex.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/hex.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/hex.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/http-backend.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/http-backend.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/http-backend.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/http-backend.c	2014-08-16 06:26:55.000000000 +0800
@@ -218,44 +218,47 @@
 	hdr_cache_forever();
 	send_local_file("application/x-git-packed-objects-toc", name);
 }
 
 static int http_config(const char *var, const char *value, void *cb)
 {
+	const char *p;
+
 	if (!strcmp(var, "http.getanyfile")) {
 		getanyfile = git_config_bool(var, value);
 		return 0;
 	}
 
-	if (starts_with(var, "http.")) {
+	if (skip_prefix(var, "http.", &p)) {
 		int i;
 
 		for (i = 0; i < ARRAY_SIZE(rpc_service); i++) {
 			struct rpc_service *svc = &rpc_service[i];
-			if (!strcmp(var + 5, svc->config_name)) {
+			if (!strcmp(p, svc->config_name)) {
 				svc->enabled = git_config_bool(var, value);
 				return 0;
 			}
 		}
 	}
 
 	/* we are not interested in parsing any other configuration here */
 	return 0;
 }
 
 static struct rpc_service *select_service(const char *name)
 {
+	const char *svc_name;
 	struct rpc_service *svc = NULL;
 	int i;
 
-	if (!starts_with(name, "git-"))
+	if (!skip_prefix(name, "git-", &svc_name))
 		forbidden("Unsupported service: '%s'", name);
 
 	for (i = 0; i < ARRAY_SIZE(rpc_service); i++) {
 		struct rpc_service *s = &rpc_service[i];
-		if (!strcmp(s->name, name + 4)) {
+		if (!strcmp(s->name, svc_name)) {
 			svc = s;
 			break;
 		}
 	}
 
 	if (!svc)
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/http-backend.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/http-backend.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/http-backend.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/http-backend.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/http.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/http.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/http.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/http.c	2014-08-16 06:26:55.000000000 +0800
@@ -903,12 +903,89 @@
 	ret = curl_easy_getinfo(curl, info, &ptr);
 	if (!ret && ptr)
 		strbuf_addstr(buf, ptr);
 	return ret;
 }
 
+/*
+ * Check for and extract a content-type parameter. "raw"
+ * should be positioned at the start of the potential
+ * parameter, with any whitespace already removed.
+ *
+ * "name" is the name of the parameter. The value is appended
+ * to "out".
+ */
+static int extract_param(const char *raw, const char *name,
+			 struct strbuf *out)
+{
+	size_t len = strlen(name);
+
+	if (strncasecmp(raw, name, len))
+		return -1;
+	raw += len;
+
+	if (*raw != '=')
+		return -1;
+	raw++;
+
+	while (*raw && !isspace(*raw) && *raw != ';')
+		strbuf_addch(out, *raw++);
+	return 0;
+}
+
+/*
+ * Extract a normalized version of the content type, with any
+ * spaces suppressed, all letters lowercased, and no trailing ";"
+ * or parameters.
+ *
+ * Note that we will silently remove even invalid whitespace. For
+ * example, "text / plain" is specifically forbidden by RFC 2616,
+ * but "text/plain" is the only reasonable output, and this keeps
+ * our code simple.
+ *
+ * If the "charset" argument is not NULL, store the value of any
+ * charset parameter there.
+ *
+ * Example:
+ *   "TEXT/PLAIN; charset=utf-8" -> "text/plain", "utf-8"
+ *   "text / plain" -> "text/plain"
+ */
+static void extract_content_type(struct strbuf *raw, struct strbuf *type,
+				 struct strbuf *charset)
+{
+	const char *p;
+
+	strbuf_reset(type);
+	strbuf_grow(type, raw->len);
+	for (p = raw->buf; *p; p++) {
+		if (isspace(*p))
+			continue;
+		if (*p == ';') {
+			p++;
+			break;
+		}
+		strbuf_addch(type, tolower(*p));
+	}
+
+	if (!charset)
+		return;
+
+	strbuf_reset(charset);
+	while (*p) {
+		while (isspace(*p) || *p == ';')
+			p++;
+		if (!extract_param(p, "charset", charset))
+			return;
+		while (*p && !isspace(*p))
+			p++;
+	}
+
+	if (!charset->len && starts_with(type->buf, "text/"))
+		strbuf_addstr(charset, "ISO-8859-1");
+}
+
 /* http_request() targets */
 #define HTTP_REQUEST_STRBUF	0
 #define HTTP_REQUEST_FILE	1
 
 static int http_request(const char *url,
 			void *result, int target,
@@ -954,15 +1031,19 @@
 	curl_easy_setopt(slot->curl, CURLOPT_URL, url);
 	curl_easy_setopt(slot->curl, CURLOPT_HTTPHEADER, headers);
 	curl_easy_setopt(slot->curl, CURLOPT_ENCODING, "gzip");
 
 	ret = run_one_slot(slot, &results);
 
-	if (options && options->content_type)
-		curlinfo_strbuf(slot->curl, CURLINFO_CONTENT_TYPE,
-				options->content_type);
+	if (options && options->content_type) {
+		struct strbuf raw = STRBUF_INIT;
+		curlinfo_strbuf(slot->curl, CURLINFO_CONTENT_TYPE, &raw);
+		extract_content_type(&raw, options->content_type,
+				     options->charset);
+		strbuf_release(&raw);
+	}
 
 	if (options && options->effective_url)
 		curlinfo_strbuf(slot->curl, CURLINFO_EFFECTIVE_URL,
 				options->effective_url);
 
 	curl_slist_free_all(headers);
@@ -1003,17 +1084,16 @@
 	const char *tail;
 	size_t tail_len;
 
 	if (!strcmp(asked, got->buf))
 		return 0;
 
-	if (!starts_with(asked, base->buf))
+	if (!skip_prefix(asked, base->buf, &tail))
 		die("BUG: update_url_from_redirect: %s is not a superset of %s",
 		    asked, base->buf);
 
-	tail = asked + base->len;
 	tail_len = strlen(tail);
 
 	if (got->len < tail_len ||
 	    strcmp(tail, got->buf + got->len - tail_len))
 		return 0; /* insane redirect scheme */
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/http.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/http.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/http.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/http.h	2014-08-16 06:26:55.000000000 +0800
@@ -141,12 +141,19 @@
 		 keep_error:1;
 
 	/* If non-NULL, returns the content-type of the response. */
 	struct strbuf *content_type;
 
 	/*
+	 * If non-NULL, and content_type above is non-NULL, returns
+	 * the charset parameter from the content-type. If none is
+	 * present, returns an empty string.
+	 */
+	struct strbuf *charset;
+
+	/*
 	 * If non-NULL, returns the URL we ended up at, including any
 	 * redirects we followed.
 	 */
 	struct strbuf *effective_url;
 
 	/*
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/http-push.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/http-push.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/http-push.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/http-push.c	2014-08-16 06:26:55.000000000 +0800
@@ -716,20 +716,16 @@
 		ret = -1;
 	}
 
 	return ret;
 }
 
-static void one_remote_object(const char *hex)
+static void one_remote_object(const unsigned char *sha1)
 {
-	unsigned char sha1[20];
 	struct object *obj;
 
-	if (get_sha1_hex(hex, sha1) != 0)
-		return;
-
 	obj = lookup_object(sha1);
 	if (!obj)
 		obj = parse_object(sha1);
 
 	/* Ignore remote objects that don't exist locally */
 	if (!obj)
@@ -764,21 +760,19 @@
 	struct remote_lock *lock = (struct remote_lock *)ctx->userData;
 	git_SHA_CTX sha_ctx;
 	unsigned char lock_token_sha1[20];
 
 	if (tag_closed && ctx->cdata) {
 		if (!strcmp(ctx->name, DAV_ACTIVELOCK_OWNER)) {
-			lock->owner = xmalloc(strlen(ctx->cdata) + 1);
-			strcpy(lock->owner, ctx->cdata);
+			lock->owner = xstrdup(ctx->cdata);
 		} else if (!strcmp(ctx->name, DAV_ACTIVELOCK_TIMEOUT)) {
-			if (starts_with(ctx->cdata, "Second-"))
-				lock->timeout =
-					strtol(ctx->cdata + 7, NULL, 10);
+			const char *arg;
+			if (skip_prefix(ctx->cdata, "Second-", &arg))
+				lock->timeout = strtol(arg, NULL, 10);
 		} else if (!strcmp(ctx->name, DAV_ACTIVELOCK_TOKEN)) {
-			lock->token = xmalloc(strlen(ctx->cdata) + 1);
-			strcpy(lock->token, ctx->cdata);
+			lock->token = xstrdup(ctx->cdata);
 
 			git_SHA1_Init(&sha_ctx);
 			git_SHA1_Update(&sha_ctx, lock->token, strlen(lock->token));
 			git_SHA1_Final(lock_token_sha1, &sha_ctx);
 
 			lock->tmpfile_suffix[0] = '_';
@@ -853,14 +847,13 @@
 	char timeout_header[25];
 	struct remote_lock *lock = NULL;
 	struct curl_slist *dav_headers = NULL;
 	struct xml_ctx ctx;
 	char *escaped;
 
-	url = xmalloc(strlen(repo->url) + strlen(path) + 1);
-	sprintf(url, "%s%s", repo->url, path);
+	url = xstrfmt("%s%s", repo->url, path);
 
 	/* Make sure leading directories exist for the remote ref */
 	ep = strchr(url + strlen(repo->url) + 1, '/');
 	while (ep) {
 		char saved_character = ep[1];
 		ep[1] = '\0';
@@ -1017,32 +1010,44 @@
 }
 
 static void remote_ls(const char *path, int flags,
 		      void (*userFunc)(struct remote_ls_ctx *ls),
 		      void *userData);
 
+/* extract hex from sharded "xx/x{40}" filename */
+static int get_sha1_hex_from_objpath(const char *path, unsigned char *sha1)
+{
+	char hex[40];
+
+	if (strlen(path) != 41)
+		return -1;
+
+	memcpy(hex, path, 2);
+	path += 2;
+	path++; /* skip '/' */
+	memcpy(hex, path, 38);
+
+	return get_sha1_hex(hex, sha1);
+}
+
 static void process_ls_object(struct remote_ls_ctx *ls)
 {
 	unsigned int *parent = (unsigned int *)ls->userData;
-	char *path = ls->dentry_name;
-	char *obj_hex;
+	const char *path = ls->dentry_name;
+	unsigned char sha1[20];
 
 	if (!strcmp(ls->path, ls->dentry_name) && (ls->flags & IS_DIR)) {
 		remote_dir_exists[*parent] = 1;
 		return;
 	}
 
-	if (strlen(path) != 49)
+	if (!skip_prefix(path, "objects/", &path) ||
+	    get_sha1_hex_from_objpath(path, sha1))
 		return;
-	path += 8;
-	obj_hex = xmalloc(strlen(path));
-	/* NB: path is not null-terminated, can not use strlcpy here */
-	memcpy(obj_hex, path, 2);
-	strcpy(obj_hex + 2, path + 3);
-	one_remote_object(obj_hex);
-	free(obj_hex);
+
+	one_remote_object(sha1);
 }
 
 static void process_ls_ref(struct remote_ls_ctx *ls)
 {
 	if (!strcmp(ls->path, ls->dentry_name) && (ls->dentry_flags & IS_DIR)) {
 		fprintf(stderr, "  %s\n", ls->dentry_name);
@@ -1114,13 +1119,13 @@
  * know about packed-refs).
  */
 static void remote_ls(const char *path, int flags,
 		      void (*userFunc)(struct remote_ls_ctx *ls),
 		      void *userData)
 {
-	char *url = xmalloc(strlen(repo->url) + strlen(path) + 1);
+	char *url = xstrfmt("%s%s", repo->url, path);
 	struct active_request_slot *slot;
 	struct slot_results results;
 	struct strbuf in_buffer = STRBUF_INIT;
 	struct buffer out_buffer = { STRBUF_INIT, 0 };
 	struct curl_slist *dav_headers = NULL;
 	struct xml_ctx ctx;
@@ -1130,14 +1135,12 @@
 	ls.path = xstrdup(path);
 	ls.dentry_name = NULL;
 	ls.dentry_flags = 0;
 	ls.userData = userData;
 	ls.userFunc = userFunc;
 
-	sprintf(url, "%s%s", repo->url, path);
-
 	strbuf_addf(&out_buffer.buf, PROPFIND_ALL_REQUEST);
 
 	dav_headers = curl_slist_append(dav_headers, "Depth: 1");
 	dav_headers = curl_slist_append(dav_headers, "Content-Type: text/xml");
 
 	slot = get_active_slot();
@@ -1533,16 +1536,15 @@
 	}
 	strbuf_release(&buffer.buf);
 }
 
 static int remote_exists(const char *path)
 {
-	char *url = xmalloc(strlen(repo->url) + strlen(path) + 1);
+	char *url = xstrfmt("%s%s", repo->url, path);
 	int ret;
 
-	sprintf(url, "%s%s", repo->url, path);
 
 	switch (http_get_strbuf(url, NULL, NULL)) {
 	case HTTP_OK:
 		ret = 1;
 		break;
 	case HTTP_MISSING_TARGET:
@@ -1556,17 +1558,15 @@
 	free(url);
 	return ret;
 }
 
 static void fetch_symref(const char *path, char **symref, unsigned char *sha1)
 {
-	char *url;
+	char *url = xstrfmt("%s%s", repo->url, path);
 	struct strbuf buffer = STRBUF_INIT;
-
-	url = xmalloc(strlen(repo->url) + strlen(path) + 1);
-	sprintf(url, "%s%s", repo->url, path);
+	const char *name;
 
 	if (http_get_strbuf(url, &buffer, NULL) != HTTP_OK)
 		die("Couldn't get %s for remote symref\n%s", url,
 		    curl_errorstr);
 	free(url);
 
@@ -1575,14 +1575,14 @@
 	hashclr(sha1);
 
 	if (buffer.len == 0)
 		return;
 
 	/* If it's a symref, set the refname; otherwise try for a sha1 */
-	if (starts_with((char *)buffer.buf, "ref: ")) {
-		*symref = xmemdupz((char *)buffer.buf + 5, buffer.len - 6);
+	if (skip_prefix(buffer.buf, "ref: ", &name)) {
+		*symref = xmemdupz(name, buffer.len - (name - buffer.buf));
 	} else {
 		get_sha1_hex(buffer.buf, sha1);
 	}
 
 	strbuf_release(&buffer);
 }
@@ -1670,14 +1670,13 @@
 	}
 
 	/* Send delete request */
 	fprintf(stderr, "Removing remote branch '%s'\n", remote_ref->name);
 	if (dry_run)
 		return 0;
-	url = xmalloc(strlen(repo->url) + strlen(remote_ref->name) + 1);
-	sprintf(url, "%s%s", repo->url, remote_ref->name);
+	url = xstrfmt("%s%s", repo->url, remote_ref->name);
 	slot = get_active_slot();
 	slot->results = &results;
 	curl_setup_http_get(slot->curl, url, DAV_DELETE);
 	if (start_active_slot(slot)) {
 		run_active_slot(slot);
 		free(url);
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/http-walker.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/http-walker.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/http-walker.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/http-walker.c	2014-08-16 06:26:55.000000000 +0800
@@ -338,14 +338,13 @@
 	/* Start the fetch */
 	cdata->got_alternates = 0;
 
 	if (walker->get_verbosely)
 		fprintf(stderr, "Getting alternates list for %s\n", base);
 
-	url = xmalloc(strlen(base) + 31);
-	sprintf(url, "%s/objects/info/http-alternates", base);
+	url = xstrfmt("%s/objects/info/http-alternates", base);
 
 	/*
 	 * Use a callback to process the result, since another request
 	 * may fail and need to have alternates loaded before continuing
 	 */
 	slot = get_active_slot();
@@ -563,14 +562,13 @@
 {
 	char *s;
 	struct walker_data *data = xmalloc(sizeof(struct walker_data));
 	struct walker *walker = xmalloc(sizeof(struct walker));
 
 	data->alt = xmalloc(sizeof(*data->alt));
-	data->alt->base = xmalloc(strlen(url) + 1);
-	strcpy(data->alt->base, url);
+	data->alt->base = xstrdup(url);
 	for (s = data->alt->base + strlen(data->alt->base) - 1; *s == '/'; --s)
 		*s = 0;
 
 	data->alt->got_indices = 0;
 	data->alt->packs = NULL;
 	data->alt->next = NULL;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ident.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ident.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ident.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ident.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/imap-send.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/imap-send.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/imap-send.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/imap-send.c	2014-08-16 06:26:55.000000000 +0800
@@ -20,15 +20,15 @@
  *  You should have received a copy of the GNU General Public License
  *  along with this program; if not, write to the Free Software
  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
 #include "cache.h"
+#include "credential.h"
 #include "exec_cmd.h"
 #include "run-command.h"
-#include "prompt.h"
 #ifdef NO_OPENSSL
 typedef void *SSL;
 #endif
 
 static const char imap_send_usage[] = "git imap-send < <mbox>";
 
@@ -943,12 +943,13 @@
 
 	return 0;
 }
 
 static struct imap_store *imap_open_store(struct imap_server_conf *srvc)
 {
+	struct credential cred = CREDENTIAL_INIT;
 	struct imap_store *ctx;
 	struct imap *imap;
 	char *arg, *rsp;
 	int s = -1, preauth;
 
 	ctx = xcalloc(1, sizeof(*ctx));
@@ -1093,31 +1094,29 @@
 			/* capabilities may have changed, so get the new capabilities */
 			if (imap_exec(ctx, NULL, "CAPABILITY") != RESP_OK)
 				goto bail;
 		}
 #endif
 		imap_info("Logging in...\n");
-		if (!srvc->user) {
-			fprintf(stderr, "Skipping server %s, no user\n", srvc->host);
-			goto bail;
-		}
-		if (!srvc->pass) {
-			struct strbuf prompt = STRBUF_INIT;
-			strbuf_addf(&prompt, "Password (%s@%s): ", srvc->user, srvc->host);
-			arg = git_getpass(prompt.buf);
-			strbuf_release(&prompt);
-			if (!*arg) {
-				fprintf(stderr, "Skipping account %s@%s, no password\n", srvc->user, srvc->host);
-				goto bail;
-			}
-			/*
-			 * getpass() returns a pointer to a static buffer.  make a copy
-			 * for long term storage.
-			 */
-			srvc->pass = xstrdup(arg);
+		if (!srvc->user || !srvc->pass) {
+			cred.protocol = xstrdup(srvc->use_ssl ? "imaps" : "imap");
+			cred.host = xstrdup(srvc->host);
+
+			if (srvc->user)
+				cred.username = xstrdup(srvc->user);
+			if (srvc->pass)
+				cred.password = xstrdup(srvc->pass);
+
+			credential_fill(&cred);
+
+			if (!srvc->user)
+				srvc->user = xstrdup(cred.username);
+			if (!srvc->pass)
+				srvc->pass = xstrdup(cred.password);
 		}
+
 		if (CAP(NOLOGIN)) {
 			fprintf(stderr, "Skipping account %s@%s, server forbids LOGIN\n", srvc->user, srvc->host);
 			goto bail;
 		}
 
 		if (srvc->auth_method) {
@@ -1150,16 +1149,24 @@
 				fprintf(stderr, "IMAP error: LOGIN failed\n");
 				goto bail;
 			}
 		}
 	} /* !preauth */
 
+	if (cred.username)
+		credential_approve(&cred);
+	credential_clear(&cred);
+
 	ctx->prefix = "";
 	return ctx;
 
 bail:
+	if (cred.username)
+		credential_reject(&cred);
+	credential_clear(&cred);
+
 	imap_close_store(ctx);
 	return NULL;
 }
 
 /*
  * Insert CR characters as necessary in *msg to ensure that every LF
@@ -1318,19 +1325,15 @@
 }
 
 static char *imap_folder;
 
 static int git_imap_config(const char *key, const char *val, void *cb)
 {
-	char imap_key[] = "imap.";
-
-	if (strncmp(key, imap_key, sizeof imap_key - 1))
+	if (!skip_prefix(key, "imap.", &key))
 		return 0;
 
-	key += sizeof imap_key - 1;
-
 	/* check booleans first, and barf on others */
 	if (!strcmp("sslverify", key))
 		server.ssl_verify = git_config_bool(key, val);
 	else if (!strcmp("preformattedhtml", key))
 		server.use_html = git_config_bool(key, val);
 	else if (!val)
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/imap-send.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/imap-send.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/imap-send.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/imap-send.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/INSTALL /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/INSTALL
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/INSTALL	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/INSTALL	2014-08-16 06:26:55.000000000 +0800
@@ -25,24 +25,34 @@
 	$ make all doc ;# as yourself
 	# make install install-doc install-html;# as root
 
 If you're willing to trade off (much) longer build time for a later
 faster git you can also do a profile feedback build with
 
-	$ make prefix=/usr PROFILE=BUILD all
+	$ make prefix=/usr profile
 	# make prefix=/usr PROFILE=BUILD install
 
 This will run the complete test suite as training workload and then
 rebuild git with the generated profile feedback. This results in a git
 which is a few percent faster on CPU intensive workloads.  This
 may be a good tradeoff for distribution packagers.
 
+Alternatively you can run profile feedback only with the git benchmark
+suite. This runs significantly faster than the full test suite, but
+has less coverage:
+
+	$ make prefix=/usr profile-fast
+	# make prefix=/usr PROFILE=BUILD install
+
 Or if you just want to install a profile-optimized version of git into
 your home directory, you could run:
 
-	$ make PROFILE=BUILD install
+	$ make profile-install
+
+or
+	$ make profile-fast-install
 
 As a caveat: a profile-optimized build takes a *lot* longer since the
 git tree must be built twice, and in order for the profiling
 measurements to work properly, ccache must be disabled and the test
 suite has to be run using only a single CPU.  In addition, the profile
 feedback build stage currently generates a lot of additional compiler
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/khash.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/khash.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/khash.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/khash.h	2014-08-16 06:26:55.000000000 +0800
@@ -317,22 +317,15 @@
 	for (__i = kh_begin(h); __i != kh_end(h); ++__i) {		\
 		if (!kh_exist(h,__i)) continue;						\
 		(vvar) = kh_val(h,__i);								\
 		code;												\
 	} }
 
-static inline khint_t __kh_oid_hash(const unsigned char *oid)
-{
-	khint_t hash;
-	memcpy(&hash, oid, sizeof(hash));
-	return hash;
-}
-
 #define __kh_oid_cmp(a, b) (hashcmp(a, b) == 0)
 
-KHASH_INIT(sha1, const unsigned char *, void *, 1, __kh_oid_hash, __kh_oid_cmp)
+KHASH_INIT(sha1, const unsigned char *, void *, 1, sha1hash, __kh_oid_cmp)
 typedef kh_sha1_t khash_sha1;
 
-KHASH_INIT(sha1_pos, const unsigned char *, int, 1, __kh_oid_hash, __kh_oid_cmp)
+KHASH_INIT(sha1_pos, const unsigned char *, int, 1, sha1hash, __kh_oid_cmp)
 typedef kh_sha1_pos_t khash_sha1_pos;
 
 #endif /* __AC_KHASH_H */
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/kwset.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/kwset.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/kwset.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/kwset.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/levenshtein.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/levenshtein.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/levenshtein.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/levenshtein.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/libgit.a and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/libgit.a differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/line-log.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/line-log.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/line-log.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/line-log.c	2014-08-16 06:26:55.000000000 +0800
@@ -763,23 +763,12 @@
 		parse_pathspec(&rev->diffopt.pathspec, 0,
 			       PATHSPEC_PREFER_FULL, "", paths);
 		free(paths);
 	}
 }
 
-static int count_parents(struct commit *commit)
-{
-	struct commit_list *parents = commit->parents;
-	int count = 0;
-	while (parents) {
-		count++;
-		parents = parents->next;
-	}
-	return count;
-}
-
 static void move_diff_queue(struct diff_queue_struct *dst,
 			    struct diff_queue_struct *src)
 {
 	assert(src != dst);
 	memcpy(dst, src, sizeof(struct diff_queue_struct));
 	DIFF_QUEUE_CLEAR(src);
@@ -1147,13 +1136,13 @@
 {
 	struct diff_queue_struct *diffqueues;
 	struct line_log_data **cand;
 	struct commit **parents;
 	struct commit_list *p;
 	int i;
-	int nparents = count_parents(commit);
+	int nparents = commit_list_count(commit->parents);
 
 	diffqueues = xmalloc(nparents * sizeof(*diffqueues));
 	cand = xmalloc(nparents * sizeof(*cand));
 	parents = xmalloc(nparents * sizeof(*parents));
 
 	p = commit->parents;
@@ -1171,15 +1160,13 @@
 			/*
 			 * This parent can take all the blame, so we
 			 * don't follow any other path in history
 			 */
 			add_line_range(rev, parents[i], cand[i]);
 			clear_commit_line_range(rev, commit);
-			commit->parents = xmalloc(sizeof(struct commit_list));
-			commit->parents->item = parents[i];
-			commit->parents->next = NULL;
+			commit_list_append(parents[i], &commit->parents);
 			free(parents);
 			free(cand);
 			free_diffqueues(nparents, diffqueues);
 			/* NEEDSWORK leaking like a sieve */
 			return 0;
 		}
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/line-log.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/line-log.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/line-log.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/line-log.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/line-range.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/line-range.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/line-range.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/line-range.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/list-objects.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/list-objects.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/list-objects.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/list-objects.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ll-merge.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ll-merge.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ll-merge.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ll-merge.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/lockfile.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/lockfile.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/lockfile.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/lockfile.c	2014-08-16 06:26:55.000000000 +0800
@@ -2,13 +2,12 @@
  * Copyright (c) 2005, Junio C Hamano
  */
 #include "cache.h"
 #include "sigchain.h"
 
 static struct lock_file *lock_file_list;
-static const char *alternate_index_output;
 
 static void remove_lock_file(void)
 {
 	pid_t me = getpid();
 
 	while (lock_file_list) {
@@ -118,23 +117,25 @@
 			}
 		}
 	}
 	return p;
 }
 
-
+/* Make sure errno contains a meaningful value on error */
 static int lock_file(struct lock_file *lk, const char *path, int flags)
 {
 	/*
 	 * subtract 5 from size to make sure there's room for adding
 	 * ".lock" for the lock file name
 	 */
 	static const size_t max_path_len = sizeof(lk->filename) - 5;
 
-	if (strlen(path) >= max_path_len)
+	if (strlen(path) >= max_path_len) {
+		errno = ENAMETOOLONG;
 		return -1;
+	}
 	strcpy(lk->filename, path);
 	if (!(flags & LOCK_NODEREF))
 		resolve_symlink(lk->filename, max_path_len);
 	strcat(lk->filename, ".lock");
 	lk->fd = open(lk->filename, O_RDWR | O_CREAT | O_EXCL, 0666);
 	if (0 <= lk->fd) {
@@ -145,50 +146,57 @@
 		lk->owner = getpid();
 		if (!lk->on_list) {
 			lk->next = lock_file_list;
 			lock_file_list = lk;
 			lk->on_list = 1;
 		}
-		if (adjust_shared_perm(lk->filename))
-			return error("cannot fix permission bits on %s",
-				     lk->filename);
+		if (adjust_shared_perm(lk->filename)) {
+			int save_errno = errno;
+			error("cannot fix permission bits on %s",
+			      lk->filename);
+			errno = save_errno;
+			return -1;
+		}
 	}
 	else
 		lk->filename[0] = 0;
 	return lk->fd;
 }
 
-static char *unable_to_lock_message(const char *path, int err)
+void unable_to_lock_message(const char *path, int err, struct strbuf *buf)
 {
-	struct strbuf buf = STRBUF_INIT;
-
 	if (err == EEXIST) {
-		strbuf_addf(&buf, "Unable to create '%s.lock': %s.\n\n"
+		strbuf_addf(buf, "Unable to create '%s.lock': %s.\n\n"
 		    "If no other git process is currently running, this probably means a\n"
 		    "git process crashed in this repository earlier. Make sure no other git\n"
 		    "process is running and remove the file manually to continue.",
 			    absolute_path(path), strerror(err));
 	} else
-		strbuf_addf(&buf, "Unable to create '%s.lock': %s",
+		strbuf_addf(buf, "Unable to create '%s.lock': %s",
 			    absolute_path(path), strerror(err));
-	return strbuf_detach(&buf, NULL);
 }
 
 int unable_to_lock_error(const char *path, int err)
 {
-	char *msg = unable_to_lock_message(path, err);
-	error("%s", msg);
-	free(msg);
+	struct strbuf buf = STRBUF_INIT;
+
+	unable_to_lock_message(path, err, &buf);
+	error("%s", buf.buf);
+	strbuf_release(&buf);
 	return -1;
 }
 
 NORETURN void unable_to_lock_index_die(const char *path, int err)
 {
-	die("%s", unable_to_lock_message(path, err));
+	struct strbuf buf = STRBUF_INIT;
+
+	unable_to_lock_message(path, err, &buf);
+	die("%s", buf.buf);
 }
 
+/* This should return a meaningful errno on failure */
 int hold_lock_file_for_update(struct lock_file *lk, const char *path, int flags)
 {
 	int fd = lock_file(lk, path, flags);
 	if (fd < 0 && (flags & LOCK_DIE_ON_ERROR))
 		unable_to_lock_index_die(path, errno);
 	return fd;
@@ -249,31 +257,12 @@
 	return hold_lock_file_for_update(lk, get_index_file(),
 					 die_on_error
 					 ? LOCK_DIE_ON_ERROR
 					 : 0);
 }
 
-void set_alternate_index_output(const char *name)
-{
-	alternate_index_output = name;
-}
-
-int commit_locked_index(struct lock_file *lk)
-{
-	if (alternate_index_output) {
-		if (lk->fd >= 0 && close_lock_file(lk))
-			return -1;
-		if (rename(lk->filename, alternate_index_output))
-			return -1;
-		lk->filename[0] = 0;
-		return 0;
-	}
-	else
-		return commit_lock_file(lk);
-}
-
 void rollback_lock_file(struct lock_file *lk)
 {
 	if (lk->filename[0]) {
 		if (lk->fd >= 0)
 			close(lk->fd);
 		unlink_or_warn(lk->filename);
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/lockfile.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/lockfile.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/lockfile.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/lockfile.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/log-tree.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/log-tree.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/log-tree.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/log-tree.c	2014-08-16 06:26:55.000000000 +0800
@@ -411,16 +411,17 @@
 {
 	return (commit->parents
 		&& commit->parents->next
 		&& !commit->parents->next->next);
 }
 
-static void show_one_mergetag(struct rev_info *opt,
+static void show_one_mergetag(struct commit *commit,
 			      struct commit_extra_header *extra,
-			      struct commit *commit)
+			      void *data)
 {
+	struct rev_info *opt = (struct rev_info *)data;
 	unsigned char sha1[20];
 	struct tag *tag;
 	struct strbuf verify_message;
 	int status, nth;
 	size_t payload_size, gpg_message_offset;
 
@@ -462,21 +463,13 @@
 	show_sig_lines(opt, status, verify_message.buf);
 	strbuf_release(&verify_message);
 }
 
 static void show_mergetag(struct rev_info *opt, struct commit *commit)
 {
-	struct commit_extra_header *extra, *to_free;
-
-	to_free = read_commit_extra_headers(commit, NULL);
-	for (extra = to_free; extra; extra = extra->next) {
-		if (strcmp(extra->key, "mergetag"))
-			continue; /* not a merge tag */
-		show_one_mergetag(opt, extra, commit);
-	}
-	free_commit_extra_headers(to_free);
+	for_each_mergetag(show_one_mergetag, commit, opt);
 }
 
 void show_log(struct rev_info *opt)
 {
 	struct strbuf msgbuf = STRBUF_INIT;
 	struct log_info *log = opt->loginfo;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/log-tree.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/log-tree.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/log-tree.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/log-tree.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.mailmap /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.mailmap
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/.mailmap	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/.mailmap	2014-08-16 06:26:55.000000000 +0800
@@ -82,12 +82,13 @@
 Jason Riedy <ejr@eecs.berkeley.edu> <ejr@cs.berkeley.edu>
 Jay Soffian <jaysoffian@gmail.com> <jaysoffian+git@gmail.com>
 Jeff King <peff@peff.net> <peff@github.com>
 Jeff Muizelaar <jmuizelaar@mozilla.com> <jeff@infidigm.net>
 Jens Axboe <axboe@kernel.dk> <axboe@suse.de>
 Jens Axboe <axboe@kernel.dk> <jens.axboe@oracle.com>
+Jens Lindström <jl@opera.com> Jens Lindstrom <jl@opera.com>
 Jim Meyering <jim@meyering.net> <meyering@redhat.com>
 Joachim Berdal Haga <cjhaga@fys.uio.no>
 Johannes Schindelin <Johannes.Schindelin@gmx.de> <johannes.schindelin@gmx.de>
 Johannes Sixt <j6t@kdbg.org> <J.Sixt@eudaptics.com>
 Johannes Sixt <j6t@kdbg.org> <j.sixt@viscovery.net>
 Johannes Sixt <j6t@kdbg.org> <johannes.sixt@telecom.at>
@@ -110,12 +111,13 @@
 Karl Wiberg <kha@treskal.com> Karl  Hasselström
 Karl Wiberg <kha@treskal.com> <kha@yoghurt.hemma.treskal.com>
 Karsten Blees <blees@dcon.de> <karsten.blees@dcon.de>
 Karsten Blees <blees@dcon.de> <karsten.blees@gmail.com>
 Kay Sievers <kay.sievers@vrfy.org> <kay.sievers@suse.de>
 Kay Sievers <kay.sievers@vrfy.org> <kay@mam.(none)>
+Kazuki Saitoh <ksaitoh560@gmail.com> kazuki saitoh <ksaitoh560@gmail.com>
 Keith Cascio <keith@CS.UCLA.EDU> <keith@cs.ucla.edu>
 Kent Engstrom <kent@lysator.liu.se>
 Kevin Leung <kevinlsk@gmail.com>
 Kirill Smelkov <kirr@navytux.spb.ru> <kirr@landau.phys.spbu.ru>
 Kirill Smelkov <kirr@navytux.spb.ru> <kirr@mns.spb.ru>
 Knut Franke <Knut.Franke@gmx.de> <k.franke@science-computing.de>
@@ -227,12 +229,13 @@
 Tom Grennan <tmgrennan@gmail.com> <tgrennan@redback.com>
 Tommi Virtanen <tv@debian.org> <tv@eagain.net>
 Tommi Virtanen <tv@debian.org> <tv@inoi.fi>
 Tommy Thorn <tommy-git@thorn.ws> <tt1729@yahoo.com>
 Tony Luck <tony.luck@intel.com>
 Tor Arne Vestbø <torarnv@gmail.com> <tavestbo@trolltech.com>
+Trần Ngọc Quân <vnwildman@gmail.com> Tran Ngoc Quan <vnwildman@gmail.com>
 Trent Piepho <tpiepho@gmail.com> <tpiepho@freescale.com>
 Trent Piepho <tpiepho@gmail.com> <xyzzy@speakeasy.org>
 Uwe Kleine-König <u.kleine-koenig@pengutronix.de> <Uwe.Kleine-Koenig@digi.com>
 Uwe Kleine-König <u.kleine-koenig@pengutronix.de> <ukleinek@informatik.uni-freiburg.de>
 Uwe Kleine-König <u.kleine-koenig@pengutronix.de> <uzeisberger@io.fsforth.de>
 Uwe Kleine-König <u.kleine-koenig@pengutronix.de> <zeisberg@informatik.uni-freiburg.de>
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/mailmap.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/mailmap.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/mailmap.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/mailmap.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Makefile /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Makefile
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/Makefile	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/Makefile	2014-08-16 06:26:55.000000000 +0800
@@ -27,12 +27,14 @@
 # Define USE_LIBPCRE if you have and want to use libpcre. git-grep will be
 # able to use Perl-compatible regular expressions.
 #
 # Define LIBPCREDIR=/foo/bar if your libpcre header and library files are in
 # /foo/bar/include and /foo/bar/lib directories.
 #
+# Define HAVE_ALLOCA_H if you have working alloca(3) defined in that header.
+#
 # Define NO_CURL if you do not have libcurl installed.  git-http-fetch and
 # git-http-push are not built, and you cannot use http:// and https://
 # transports (neither smart nor dumb).
 #
 # Define CURLDIR=/foo/bar if your curl header and library files are in
 # /foo/bar/include and /foo/bar/lib directories.
@@ -335,12 +337,14 @@
 # Define TEST_GIT_INDEX_VERSION to 2, 3 or 4 to run the test suite
 # with a different indexfile format version.  If it isn't set the index
 # file format used is index-v[23].
 #
 # Define GMTIME_UNRELIABLE_ERRORS if your gmtime() function does not
 # return NULL when it receives a bogus time_t.
+#
+# Define HAVE_CLOCK_GETTIME if your platform has clock_gettime in librt.
 
 GIT-VERSION-FILE: FORCE
 	@$(SHELL_PATH) ./GIT-VERSION-GEN
 -include GIT-VERSION-FILE
 
 # CFLAGS and LDFLAGS are for the users to override from the command line.
@@ -547,12 +551,13 @@
 
 TEST_PROGRAMS_NEED_X += test-chmtime
 TEST_PROGRAMS_NEED_X += test-ctype
 TEST_PROGRAMS_NEED_X += test-date
 TEST_PROGRAMS_NEED_X += test-delta
 TEST_PROGRAMS_NEED_X += test-dump-cache-tree
+TEST_PROGRAMS_NEED_X += test-dump-split-index
 TEST_PROGRAMS_NEED_X += test-genrandom
 TEST_PROGRAMS_NEED_X += test-hashmap
 TEST_PROGRAMS_NEED_X += test-index-version
 TEST_PROGRAMS_NEED_X += test-line-buffer
 TEST_PROGRAMS_NEED_X += test-match-trees
 TEST_PROGRAMS_NEED_X += test-mergesort
@@ -724,12 +729,13 @@
 LIB_H += tar.h
 LIB_H += thread-utils.h
 LIB_H += transport.h
 LIB_H += tree-walk.h
 LIB_H += tree.h
 LIB_H += unpack-trees.h
+LIB_H += unicode_width.h
 LIB_H += url.h
 LIB_H += urlmatch.h
 LIB_H += userdiff.h
 LIB_H += utf8.h
 LIB_H += varint.h
 LIB_H += vcs-svn/fast_export.h
@@ -869,12 +875,13 @@
 LIB_OBJS += sha1-lookup.o
 LIB_OBJS += sha1_file.o
 LIB_OBJS += sha1_name.o
 LIB_OBJS += shallow.o
 LIB_OBJS += sideband.o
 LIB_OBJS += sigchain.o
+LIB_OBJS += split-index.o
 LIB_OBJS += strbuf.o
 LIB_OBJS += streaming.o
 LIB_OBJS += string-list.o
 LIB_OBJS += submodule.o
 LIB_OBJS += symlinks.o
 LIB_OBJS += tag.o
@@ -993,12 +1000,13 @@
 BUILTIN_OBJS += builtin/unpack-objects.o
 BUILTIN_OBJS += builtin/update-index.o
 BUILTIN_OBJS += builtin/update-ref.o
 BUILTIN_OBJS += builtin/update-server-info.o
 BUILTIN_OBJS += builtin/upload-archive.o
 BUILTIN_OBJS += builtin/var.o
+BUILTIN_OBJS += builtin/verify-commit.o
 BUILTIN_OBJS += builtin/verify-pack.o
 BUILTIN_OBJS += builtin/verify-tag.o
 BUILTIN_OBJS += builtin/write-tree.o
 
 GITLIBS = $(LIB_FILE) $(XDIFF_LIB)
 EXTLIBS =
@@ -1105,12 +1113,16 @@
 		BASIC_CFLAGS += -I$(LIBPCREDIR)/include
 		EXTLIBS += -L$(LIBPCREDIR)/$(lib) $(CC_LD_DYNPATH)$(LIBPCREDIR)/$(lib)
 	endif
 	EXTLIBS += -lpcre
 endif
 
+ifdef HAVE_ALLOCA_H
+	BASIC_CFLAGS += -DHAVE_ALLOCA_H
+endif
+
 ifdef NO_CURL
 	BASIC_CFLAGS += -DNO_CURL
 	REMOTE_CURL_PRIMARY =
 	REMOTE_CURL_ALIASES =
 	REMOTE_CURL_NAMES =
 else
@@ -1487,12 +1499,17 @@
 
 ifdef GMTIME_UNRELIABLE_ERRORS
 	COMPAT_OBJS += compat/gmtime.o
 	BASIC_CFLAGS += -DGMTIME_UNRELIABLE_ERRORS
 endif
 
+ifdef HAVE_CLOCK_GETTIME
+	BASIC_CFLAGS += -DHAVE_CLOCK_GETTIME
+	EXTLIBS += -lrt
+endif
+
 ifeq ($(TCLTK_PATH),)
 NO_TCLTK = NoThanks
 endif
 
 ifeq ($(PERL_PATH),)
 NO_PERL = NoThanks
@@ -1542,19 +1559,19 @@
 
 # Can adjust this to be a global directory if you want to do extended
 # data gathering
 PROFILE_DIR := $(CURDIR)
 
 ifeq ("$(PROFILE)","GEN")
-	CFLAGS += -fprofile-generate=$(PROFILE_DIR) -DNO_NORETURN=1
+	BASIC_CFLAGS += -fprofile-generate=$(PROFILE_DIR) -DNO_NORETURN=1
 	EXTLIBS += -lgcov
 	export CCACHE_DISABLE = t
 	V = 1
 else
 ifneq ("$(PROFILE)","")
-	CFLAGS += -fprofile-use=$(PROFILE_DIR) -fprofile-correction -DNO_NORETURN=1
+	BASIC_CFLAGS += -fprofile-use=$(PROFILE_DIR) -fprofile-correction -DNO_NORETURN=1
 	export CCACHE_DISABLE = t
 	V = 1
 endif
 endif
 
 # Shell quote (do not use $(call) to accommodate ancient setups);
@@ -1633,18 +1650,26 @@
 
 SHELL = $(SHELL_PATH)
 
 all:: shell_compatibility_test
 
 ifeq "$(PROFILE)" "BUILD"
-ifeq ($(filter all,$(MAKECMDGOALS)),all)
-all:: profile-clean
+all:: profile
+endif
+
+profile:: profile-clean
 	$(MAKE) PROFILE=GEN all
 	$(MAKE) PROFILE=GEN -j1 test
-endif
-endif
+	$(MAKE) PROFILE=GEN -j1 perf
+	$(MAKE) PROFILE=USE all
+
+profile-fast: profile-clean
+	$(MAKE) PROFILE=GEN all
+	$(MAKE) PROFILE=GEN -j1 perf
+	$(MAKE) PROFILE=USE all
+
 
 all:: $(ALL_PROGRAMS) $(SCRIPT_LIB) $(BUILT_INS) $(OTHER_PROGRAMS) GIT-BUILD-OPTIONS
 ifneq (,$X)
 	$(QUIET_BUILT_IN)$(foreach p,$(patsubst %$X,%,$(filter %$X,$(ALL_PROGRAMS) $(BUILT_INS) git$X)), test -d '$p' -o '$p' -ef '$p$X' || $(RM) '$p';)
 endif
 
@@ -2325,12 +2350,18 @@
 mergetools_instdir = $(prefix)/$(mergetoolsdir)
 endif
 mergetools_instdir_SQ = $(subst ','\'',$(mergetools_instdir))
 
 install_bindir_programs := $(patsubst %,%$X,$(BINDIR_PROGRAMS_NEED_X)) $(BINDIR_PROGRAMS_NO_X)
 
+profile-install: profile
+	$(MAKE) install
+
+profile-fast-install: profile-fast
+	$(MAKE) install
+
 install: all
 	$(INSTALL) -d -m 755 '$(DESTDIR_SQ)$(bindir_SQ)'
 	$(INSTALL) -d -m 755 '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'
 	$(INSTALL) $(ALL_PROGRAMS) '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'
 	$(INSTALL) -m 644 $(SCRIPT_LIB) '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'
 	$(INSTALL) $(install_bindir_programs) '$(DESTDIR_SQ)$(bindir_SQ)'
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/match-trees.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/match-trees.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/match-trees.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/match-trees.c	2014-08-16 06:26:55.000000000 +0800
@@ -137,23 +137,18 @@
 
 		elem = tree_entry_extract(&one, &path, &mode);
 		if (!S_ISDIR(mode))
 			goto next;
 		score = score_trees(elem, hash2);
 		if (*best_score < score) {
-			char *newpath;
-			newpath = xmalloc(strlen(base) + strlen(path) + 1);
-			sprintf(newpath, "%s%s", base, path);
 			free(*best_match);
-			*best_match = newpath;
+			*best_match = xstrfmt("%s%s", base, path);
 			*best_score = score;
 		}
 		if (recurse_limit) {
-			char *newbase;
-			newbase = xmalloc(strlen(base) + strlen(path) + 2);
-			sprintf(newbase, "%s%s/", base, path);
+			char *newbase = xstrfmt("%s%s/", base, path);
 			match_trees(elem, hash2, best_score, best_match,
 				    newbase, recurse_limit - 1);
 			free(newbase);
 		}
 
 	next:
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/match-trees.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/match-trees.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/match-trees.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/match-trees.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge-blobs.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge-blobs.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge-blobs.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge-blobs.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge.c	2014-08-16 06:26:55.000000000 +0800
@@ -15,45 +15,29 @@
 }
 
 int try_merge_command(const char *strategy, size_t xopts_nr,
 		      const char **xopts, struct commit_list *common,
 		      const char *head_arg, struct commit_list *remotes)
 {
-	const char **args;
-	int i = 0, x = 0, ret;
+	struct argv_array args = ARGV_ARRAY_INIT;
+	int i, ret;
 	struct commit_list *j;
-	struct strbuf buf = STRBUF_INIT;
 
-	args = xmalloc((4 + xopts_nr + commit_list_count(common) +
-			commit_list_count(remotes)) * sizeof(char *));
-	strbuf_addf(&buf, "merge-%s", strategy);
-	args[i++] = buf.buf;
-	for (x = 0; x < xopts_nr; x++) {
-		char *s = xmalloc(strlen(xopts[x])+2+1);
-		strcpy(s, "--");
-		strcpy(s+2, xopts[x]);
-		args[i++] = s;
-	}
-	for (j = common; j; j = j->next)
-		args[i++] = xstrdup(merge_argument(j->item));
-	args[i++] = "--";
-	args[i++] = head_arg;
-	for (j = remotes; j; j = j->next)
-		args[i++] = xstrdup(merge_argument(j->item));
-	args[i] = NULL;
-	ret = run_command_v_opt(args, RUN_GIT_CMD);
-	strbuf_release(&buf);
-	i = 1;
-	for (x = 0; x < xopts_nr; x++)
-		free((void *)args[i++]);
+	argv_array_pushf(&args, "merge-%s", strategy);
+	for (i = 0; i < xopts_nr; i++)
+		argv_array_pushf(&args, "--%s", xopts[i]);
 	for (j = common; j; j = j->next)
-		free((void *)args[i++]);
-	i += 2;
+		argv_array_push(&args, merge_argument(j->item));
+	argv_array_push(&args, "--");
+	argv_array_push(&args, head_arg);
 	for (j = remotes; j; j = j->next)
-		free((void *)args[i++]);
-	free(args);
+		argv_array_push(&args, merge_argument(j->item));
+
+	ret = run_command_v_opt(args.argv, RUN_GIT_CMD);
+	argv_array_clear(&args);
+
 	discard_cache();
 	if (read_cache() < 0)
 		die(_("failed to read the cache"));
 	resolve_undo_clear();
 
 	return ret;
@@ -63,19 +47,19 @@
 			  const unsigned char *remote,
 			  int overwrite_ignore)
 {
 	struct tree *trees[MAX_UNPACK_TREES];
 	struct unpack_trees_options opts;
 	struct tree_desc t[MAX_UNPACK_TREES];
-	int i, fd, nr_trees = 0;
+	int i, nr_trees = 0;
 	struct dir_struct dir;
 	struct lock_file *lock_file = xcalloc(1, sizeof(struct lock_file));
 
 	refresh_cache(REFRESH_QUIET);
 
-	fd = hold_locked_index(lock_file, 1);
+	hold_locked_index(lock_file, 1);
 
 	memset(&trees, 0, sizeof(trees));
 	memset(&opts, 0, sizeof(opts));
 	memset(&t, 0, sizeof(t));
 	if (overwrite_ignore) {
 		memset(&dir, 0, sizeof(dir));
@@ -102,11 +86,10 @@
 	for (i = 0; i < nr_trees; i++) {
 		parse_tree(trees[i]);
 		init_tree_desc(t+i, trees[i]->buffer, trees[i]->size);
 	}
 	if (unpack_trees(nr_trees, t, &opts))
 		return -1;
-	if (write_cache(fd, active_cache, active_nr) ||
-		commit_locked_index(lock_file))
+	if (write_locked_index(&the_index, lock_file, COMMIT_LOCK))
 		die(_("unable to write new index file"));
 	return 0;
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge-recursive.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge-recursive.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge-recursive.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge-recursive.c	2014-08-16 06:26:55.000000000 +0800
@@ -168,13 +168,13 @@
 	strbuf_setlen(&o->obuf, o->obuf.len + o->call_depth * 2);
 
 	va_start(ap, fmt);
 	strbuf_vaddf(&o->obuf, fmt, ap);
 	va_end(ap);
 
-	strbuf_add(&o->obuf, "\n", 1);
+	strbuf_addch(&o->obuf, '\n');
 	if (!o->buffer_output)
 		flush_output(o);
 }
 
 static void output_commit_title(struct merge_options *o, struct commit *commit)
 {
@@ -264,15 +264,13 @@
 	}
 
 	if (!active_cache_tree)
 		active_cache_tree = cache_tree();
 
 	if (!cache_tree_fully_valid(active_cache_tree) &&
-	    cache_tree_update(active_cache_tree,
-			      (const struct cache_entry * const *)active_cache,
-			      active_nr, 0) < 0)
+	    cache_tree_update(&the_index, 0) < 0)
 		die(_("error building trees"));
 
 	result = lookup_tree(active_cache_tree->sha1);
 
 	return result;
 }
@@ -600,31 +598,42 @@
 		if (remove_path(path))
 			return -1;
 	}
 	return 0;
 }
 
+/* add a string to a strbuf, but converting "/" to "_" */
+static void add_flattened_path(struct strbuf *out, const char *s)
+{
+	size_t i = out->len;
+	strbuf_addstr(out, s);
+	for (; i < out->len; i++)
+		if (out->buf[i] == '/')
+			out->buf[i] = '_';
+}
+
 static char *unique_path(struct merge_options *o, const char *path, const char *branch)
 {
-	char *newpath = xmalloc(strlen(path) + 1 + strlen(branch) + 8 + 1);
+	struct strbuf newpath = STRBUF_INIT;
 	int suffix = 0;
 	struct stat st;
-	char *p = newpath + strlen(path);
-	strcpy(newpath, path);
-	*(p++) = '~';
-	strcpy(p, branch);
-	for (; *p; ++p)
-		if ('/' == *p)
-			*p = '_';
-	while (string_list_has_string(&o->current_file_set, newpath) ||
-	       string_list_has_string(&o->current_directory_set, newpath) ||
-	       lstat(newpath, &st) == 0)
-		sprintf(p, "_%d", suffix++);
+	size_t base_len;
 
-	string_list_insert(&o->current_file_set, newpath);
-	return newpath;
+	strbuf_addf(&newpath, "%s~", path);
+	add_flattened_path(&newpath, branch);
+
+	base_len = newpath.len;
+	while (string_list_has_string(&o->current_file_set, newpath.buf) ||
+	       string_list_has_string(&o->current_directory_set, newpath.buf) ||
+	       lstat(newpath.buf, &st) == 0) {
+		strbuf_setlen(&newpath, base_len);
+		strbuf_addf(&newpath, "_%d", suffix++);
+	}
+
+	string_list_insert(&o->current_file_set, newpath.buf);
+	return strbuf_detach(&newpath, NULL);
 }
 
 static int dir_in_way(const char *path, int check_working_copy)
 {
 	int pos, pathlen = strlen(path);
 	char *dirpath = xmalloc(pathlen + 2);
@@ -968,20 +977,16 @@
 			   const char *filename2)
 {
 	char *side1 = NULL;
 	char *side2 = NULL;
 	struct merge_file_info mfi;
 
-	if (filename1) {
-		side1 = xmalloc(strlen(branch1) + strlen(filename1) + 2);
-		sprintf(side1, "%s:%s", branch1, filename1);
-	}
-	if (filename2) {
-		side2 = xmalloc(strlen(branch2) + strlen(filename2) + 2);
-		sprintf(side2, "%s:%s", branch2, filename2);
-	}
+	if (filename1)
+		side1 = xstrfmt("%s:%s", branch1, filename1);
+	if (filename2)
+		side2 = xstrfmt("%s:%s", branch2, filename2);
 
 	mfi = merge_file_1(o, one, a, b,
 			   side1 ? side1 : branch1, side2 ? side2 : branch2);
 	free(side1);
 	free(side2);
 	return mfi;
@@ -1991,13 +1996,13 @@
 			    const unsigned char *head,
 			    const unsigned char *merge,
 			    int num_base_list,
 			    const unsigned char **base_list,
 			    struct commit **result)
 {
-	int clean, index_fd;
+	int clean;
 	struct lock_file *lock = xcalloc(1, sizeof(struct lock_file));
 	struct commit *head_commit = get_ref(head, o->branch1);
 	struct commit *next_commit = get_ref(merge, o->branch2);
 	struct commit_list *ca = NULL;
 
 	if (base_list) {
@@ -2008,18 +2013,17 @@
 				return error(_("Could not parse object '%s'"),
 					sha1_to_hex(base_list[i]));
 			commit_list_insert(base, &ca);
 		}
 	}
 
-	index_fd = hold_locked_index(lock, 1);
+	hold_locked_index(lock, 1);
 	clean = merge_recursive(o, head_commit, next_commit, ca,
 			result);
 	if (active_cache_changed &&
-			(write_cache(index_fd, active_cache, active_nr) ||
-			 commit_locked_index(lock)))
+	    write_locked_index(&the_index, lock, COMMIT_LOCK))
 		return error(_("Unable to write index."));
 
 	return clean ? 0 : 1;
 }
 
 static int merge_recursive_config(const char *var, const char *value, void *cb)
@@ -2052,38 +2056,37 @@
 	if (getenv("GIT_MERGE_VERBOSITY"))
 		o->verbosity =
 			strtol(getenv("GIT_MERGE_VERBOSITY"), NULL, 10);
 	if (o->verbosity >= 5)
 		o->buffer_output = 0;
 	strbuf_init(&o->obuf, 0);
-	memset(&o->current_file_set, 0, sizeof(struct string_list));
-	o->current_file_set.strdup_strings = 1;
-	memset(&o->current_directory_set, 0, sizeof(struct string_list));
-	o->current_directory_set.strdup_strings = 1;
-	memset(&o->df_conflict_file_set, 0, sizeof(struct string_list));
-	o->df_conflict_file_set.strdup_strings = 1;
+	string_list_init(&o->current_file_set, 1);
+	string_list_init(&o->current_directory_set, 1);
+	string_list_init(&o->df_conflict_file_set, 1);
 }
 
 int parse_merge_opt(struct merge_options *o, const char *s)
 {
+	const char *arg;
+
 	if (!s || !*s)
 		return -1;
 	if (!strcmp(s, "ours"))
 		o->recursive_variant = MERGE_RECURSIVE_OURS;
 	else if (!strcmp(s, "theirs"))
 		o->recursive_variant = MERGE_RECURSIVE_THEIRS;
 	else if (!strcmp(s, "subtree"))
 		o->subtree_shift = "";
-	else if (starts_with(s, "subtree="))
-		o->subtree_shift = s + strlen("subtree=");
+	else if (skip_prefix(s, "subtree=", &arg))
+		o->subtree_shift = arg;
 	else if (!strcmp(s, "patience"))
 		o->xdl_opts = DIFF_WITH_ALG(o, PATIENCE_DIFF);
 	else if (!strcmp(s, "histogram"))
 		o->xdl_opts = DIFF_WITH_ALG(o, HISTOGRAM_DIFF);
-	else if (starts_with(s, "diff-algorithm=")) {
-		long value = parse_algorithm_value(s + strlen("diff-algorithm="));
+	else if (skip_prefix(s, "diff-algorithm=", &arg)) {
+		long value = parse_algorithm_value(arg);
 		if (value < 0)
 			return -1;
 		/* clear out previous settings */
 		DIFF_XDL_CLR(o, NEED_MINIMAL);
 		o->xdl_opts &= ~XDF_DIFF_ALGORITHM_MASK;
 		o->xdl_opts |= value;
@@ -2095,15 +2098,14 @@
 	else if (!strcmp(s, "ignore-space-at-eol"))
 		o->xdl_opts |= XDF_IGNORE_WHITESPACE_AT_EOL;
 	else if (!strcmp(s, "renormalize"))
 		o->renormalize = 1;
 	else if (!strcmp(s, "no-renormalize"))
 		o->renormalize = 0;
-	else if (starts_with(s, "rename-threshold=")) {
-		const char *score = s + strlen("rename-threshold=");
-		if ((o->rename_score = parse_rename_score(&score)) == -1 || *score != 0)
+	else if (skip_prefix(s, "rename-threshold=", &arg)) {
+		if ((o->rename_score = parse_rename_score(&arg)) == -1 || *arg != 0)
 			return -1;
 	}
 	else
 		return -1;
 	return 0;
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge-recursive.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge-recursive.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/merge-recursive.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/merge-recursive.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/mergesort.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/mergesort.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/mergesort.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/mergesort.o differ
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/mergetools: gvimdiff3
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/mergetools/vimdiff /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/mergetools/vimdiff
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/mergetools/vimdiff	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/mergetools/vimdiff	2014-08-16 06:26:55.000000000 +0800
@@ -17,20 +17,30 @@
 		fi
 		;;
 	gvimdiff2|vimdiff2)
 		"$merge_tool_path" -f -d -c 'wincmd l' \
 			"$LOCAL" "$MERGED" "$REMOTE"
 		;;
+	gvimdiff3|vimdiff3)
+		if $base_present
+		then
+			"$merge_tool_path" -f -d -c 'hid | hid | hid' \
+				"$LOCAL" "$REMOTE" "$BASE" "$MERGED"
+		else
+			"$merge_tool_path" -f -d -c 'hid | hid' \
+				"$LOCAL" "$REMOTE" "$MERGED"
+		fi
+		;;
 	esac
 	check_unchanged
 }
 
 translate_merge_tool_path() {
 	case "$1" in
-	gvimdiff|gvimdiff2)
+	gvimdiff|gvimdiff2|gvimdiff3)
 		echo gvim
 		;;
-	vimdiff|vimdiff2)
+	vimdiff|vimdiff2|vimdiff3)
 		echo vim
 		;;
 	esac
 }
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/mergetools: vimdiff3
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/name-hash.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/name-hash.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/name-hash.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/name-hash.c	2014-08-16 06:26:55.000000000 +0800
@@ -176,13 +176,13 @@
 	int len = ce_namelen(ce);
 
 	/*
 	 * Always do exact compare, even if we want a case-ignoring comparison;
 	 * we do the quick exact one first, because it will be the common case.
 	 */
-	if (len == namelen && !cache_name_compare(name, namelen, ce->name, len))
+	if (len == namelen && !memcmp(name, ce->name, len))
 		return 1;
 
 	if (!icase)
 		return 0;
 
 	return slow_same_name(name, namelen, ce->name, len);
@@ -210,18 +210,17 @@
 	return NULL;
 }
 
 struct cache_entry *index_file_exists(struct index_state *istate, const char *name, int namelen, int icase)
 {
 	struct cache_entry *ce;
-	struct hashmap_entry key;
 
 	lazy_init_name_hash(istate);
 
-	hashmap_entry_init(&key, memihash(name, namelen));
-	ce = hashmap_get(&istate->name_hash, &key, NULL);
+	ce = hashmap_get_from_hash(&istate->name_hash,
+				   memihash(name, namelen), NULL);
 	while (ce) {
 		if (same_name(ce, name, namelen, icase))
 			return ce;
 		ce = hashmap_get_next(&istate->name_hash, ce);
 	}
 	return NULL;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/name-hash.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/name-hash.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/name-hash.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/name-hash.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-cache.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-cache.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-cache.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-cache.c	2014-08-16 06:26:55.000000000 +0800
@@ -57,13 +57,13 @@
 	if (write_notes_tree(&c->tree, tree_sha1))
 		return -1;
 	if (commit_tree(c->validity, strlen(c->validity), tree_sha1, NULL,
 			commit_sha1, NULL, NULL) < 0)
 		return -1;
 	if (update_ref("update notes cache", c->tree.ref, commit_sha1, NULL,
-		       0, QUIET_ON_ERR) < 0)
+		       0, UPDATE_REFS_QUIET_ON_ERR) < 0)
 		return -1;
 
 	return 0;
 }
 
 char *notes_cache_get(struct notes_cache *c, unsigned char key_sha1[20],
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-cache.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-cache.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-cache.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-cache.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-merge.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-merge.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-merge.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-merge.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-utils.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-utils.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-utils.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-utils.c	2014-08-16 06:26:55.000000000 +0800
@@ -46,13 +46,14 @@
 	strbuf_addstr(&buf, msg);
 	if (buf.buf[buf.len - 1] != '\n')
 		strbuf_addch(&buf, '\n'); /* Make sure msg ends with newline */
 
 	create_notes_commit(t, NULL, buf.buf, buf.len, commit_sha1);
 	strbuf_insert(&buf, 0, "notes: ", 7); /* commit message starts at index 7 */
-	update_ref(buf.buf, t->ref, commit_sha1, NULL, 0, DIE_ON_ERR);
+	update_ref(buf.buf, t->ref, commit_sha1, NULL, 0,
+		   UPDATE_REFS_DIE_ON_ERR);
 
 	strbuf_release(&buf);
 }
 
 static combine_notes_fn parse_combine_notes_fn(const char *v)
 {
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-utils.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-utils.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/notes-utils.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/notes-utils.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/object.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/object.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/object.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/object.c	2014-08-16 06:26:55.000000000 +0800
@@ -47,24 +47,13 @@
  * Return a numerical hash value between 0 and n-1 for the object with
  * the specified sha1.  n must be a power of 2.  Please note that the
  * return value is *not* consistent across computer architectures.
  */
 static unsigned int hash_obj(const unsigned char *sha1, unsigned int n)
 {
-	unsigned int hash;
-
-	/*
-	 * Since the sha1 is essentially random, we just take the
-	 * required number of bits directly from the first
-	 * sizeof(unsigned int) bytes of sha1.  First we have to copy
-	 * the bytes into a properly aligned integer.  If we cared
-	 * about getting consistent results across architectures, we
-	 * would have to call ntohl() here, too.
-	 */
-	memcpy(&hash, sha1, sizeof(unsigned int));
-	return hash & (n - 1);
+	return sha1hash(sha1) & (n - 1);
 }
 
 /*
  * Insert obj into the hash table hash, which has length size (which
  * must be a power of 2).  On collisions, simply overflow to the next
  * empty bucket.
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/object.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/object.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/object.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/object.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-bitmap.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-bitmap.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-bitmap.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-bitmap.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-bitmap-write.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-bitmap-write.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-bitmap-write.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-bitmap-write.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-check.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-check.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-check.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-check.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-objects.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-objects.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-objects.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-objects.c	2014-08-16 06:26:55.000000000 +0800
@@ -4,16 +4,15 @@
 #include "pack-objects.h"
 
 static uint32_t locate_object_entry_hash(struct packing_data *pdata,
 					 const unsigned char *sha1,
 					 int *found)
 {
-	uint32_t i, hash, mask = (pdata->index_size - 1);
+	uint32_t i, mask = (pdata->index_size - 1);
 
-	memcpy(&hash, sha1, sizeof(uint32_t));
-	i = hash & mask;
+	i = sha1hash(sha1) & mask;
 
 	while (pdata->index[i] > 0) {
 		uint32_t pos = pdata->index[i] - 1;
 
 		if (!hashcmp(sha1, pdata->objects[pos].idx.sha1)) {
 			*found = 1;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-objects.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-objects.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-objects.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-objects.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-revindex.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-revindex.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-revindex.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-revindex.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-write.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-write.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pack-write.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pack-write.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pager.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pager.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pager.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pager.c	2014-08-16 06:26:55.000000000 +0800
@@ -82,13 +82,13 @@
 	pager_process.in = -1;
 	if (!getenv("LESS") || !getenv("LV")) {
 		static const char *env[3];
 		int i = 0;
 
 		if (!getenv("LESS"))
-			env[i++] = "LESS=FRSX";
+			env[i++] = "LESS=FRX";
 		if (!getenv("LV"))
 			env[i++] = "LV=-c";
 		env[i] = NULL;
 		pager_process.env = env;
 	}
 	if (start_command(&pager_process))
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pager.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pager.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pager.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pager.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/parse-options.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/parse-options.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/parse-options.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/parse-options.c	2014-08-16 06:26:55.000000000 +0800
@@ -228,13 +228,14 @@
 		int flags = 0, opt_flags = 0;
 
 		if (!long_name)
 			continue;
 
 again:
-		rest = skip_prefix(arg, long_name);
+		if (!skip_prefix(arg, long_name, &rest))
+			rest = NULL;
 		if (options->type == OPTION_ARGUMENT) {
 			if (!rest)
 				continue;
 			if (*rest == '=')
 				return opterror(options, "takes no value", flags);
 			if (*rest)
@@ -277,18 +278,19 @@
 					opt_flags |= OPT_UNSET;
 					goto again;
 				}
 				continue;
 			}
 			flags |= OPT_UNSET;
-			rest = skip_prefix(arg + 3, long_name);
-			/* abbreviated and negated? */
-			if (!rest && starts_with(long_name, arg + 3))
-				goto is_abbreviated;
-			if (!rest)
-				continue;
+			if (!skip_prefix(arg + 3, long_name, &rest)) {
+				/* abbreviated and negated? */
+				if (starts_with(long_name, arg + 3))
+					goto is_abbreviated;
+				else
+					continue;
+			}
 		}
 		if (*rest) {
 			if (*rest != '=')
 				continue;
 			p->opt = rest + 1;
 		}
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/parse-options.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/parse-options.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/parse-options-cb.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/parse-options-cb.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/parse-options-cb.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/parse-options-cb.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/parse-options.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/parse-options.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/parse-options.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/parse-options.h	2014-08-16 06:26:55.000000000 +0800
@@ -173,14 +173,14 @@
 extern NORETURN void usage_msg_opt(const char *msg,
 				   const char * const *usagestr,
 				   const struct option *options);
 
 extern int optbug(const struct option *opt, const char *reason);
 extern int opterror(const struct option *opt, const char *reason, int flags);
-#if defined(__GNUC__) && ! defined(__clang__)
-#define opterror(o,r,f) (opterror((o),(r),(f)), -1)
+#if defined(__GNUC__)
+#define opterror(o,r,f) (opterror((o),(r),(f)), const_error())
 #endif
 
 /*----- incremental advanced APIs -----*/
 
 enum {
 	PARSE_OPT_HELP = -1,
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/parse-options.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/parse-options.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/patch-delta.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/patch-delta.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/patch-delta.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/patch-delta.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/patch-ids.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/patch-ids.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/patch-ids.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/patch-ids.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/path.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/path.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/path.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/path.c	2014-08-16 06:26:55.000000000 +0800
@@ -272,22 +272,22 @@
 		const char *username = path + 1;
 		size_t username_len = first_slash - username;
 		if (username_len == 0) {
 			const char *home = getenv("HOME");
 			if (!home)
 				goto return_null;
-			strbuf_add(&user_path, home, strlen(home));
+			strbuf_addstr(&user_path, home);
 		} else {
 			struct passwd *pw = getpw_str(username, username_len);
 			if (!pw)
 				goto return_null;
-			strbuf_add(&user_path, pw->pw_dir, strlen(pw->pw_dir));
+			strbuf_addstr(&user_path, pw->pw_dir);
 		}
 		to_copy = first_slash;
 	}
-	strbuf_add(&user_path, to_copy, strlen(to_copy));
+	strbuf_addstr(&user_path, to_copy);
 	return strbuf_detach(&user_path, NULL);
 return_null:
 	strbuf_release(&user_path);
 	return NULL;
 }
 
@@ -818,46 +818,6 @@
 		else if (ch == '/') {
 			sl = 1;
 			ndot = 0;
 		}
 	}
 }
-
-int offset_1st_component(const char *path)
-{
-	if (has_dos_drive_prefix(path))
-		return 2 + is_dir_sep(path[2]);
-	return is_dir_sep(path[0]);
-}
-
-static int only_spaces_and_periods(const char *path, size_t len, size_t skip)
-{
-	if (len < skip)
-		return 0;
-	len -= skip;
-	path += skip;
-	while (len-- > 0) {
-		char c = *(path++);
-		if (c != ' ' && c != '.')
-			return 0;
-	}
-	return 1;
-}
-
-int is_ntfs_dotgit(const char *name)
-{
-	int len;
-
-	for (len = 0; ; len++)
-		if (!name[len] || name[len] == '\\' || is_dir_sep(name[len])) {
-			if (only_spaces_and_periods(name, len, 4) &&
-					!strncasecmp(name, ".git", 4))
-				return 1;
-			if (only_spaces_and_periods(name, len, 5) &&
-					!strncasecmp(name, "git~1", 5))
-				return 1;
-			if (name[len] != '\\')
-				return 0;
-			name += len + 1;
-			len = -1;
-		}
-}
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/path.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/path.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/path.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/path.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pathspec.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pathspec.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pathspec.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pathspec.c	2014-08-16 06:26:55.000000000 +0800
@@ -335,13 +335,13 @@
 	int i, n;
 	for (n = i = 0; i < ARRAY_SIZE(pathspec_magic); i++) {
 		const struct pathspec_magic *m = pathspec_magic + i;
 		if (!(magic & m->bit))
 			continue;
 		if (sb.len)
-			strbuf_addstr(&sb, " ");
+			strbuf_addch(&sb, ' ');
 		if (short_magic & m->bit)
 			strbuf_addf(&sb, "'%c'", m->mnemonic);
 		else
 			strbuf_addf(&sb, "'%s'", m->name);
 		n++;
 	}
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pathspec.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pathspec.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pathspec.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pathspec.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib/Git/SVN/Log.pm /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib/Git/SVN/Log.pm
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib/Git/SVN/Log.pm	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib/Git/SVN/Log.pm	2014-08-16 06:26:55.000000000 +0800
@@ -113,13 +113,13 @@
 	if (!$pid) {
 		open STDOUT, '>&', $wfd or
 		                     fatal "Can't redirect to stdout: $!";
 		return;
 	}
 	open STDIN, '<&', $rfd or fatal "Can't redirect stdin: $!";
-	$ENV{LESS} ||= 'FRSX';
+	$ENV{LESS} ||= 'FRX';
 	$ENV{LV} ||= '-c';
 	exec $pager or fatal "Can't run pager: $! ($pager)";
 }
 
 sub format_svn_date {
 	my $t = shift || time;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib/Git/SVN.pm /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib/Git/SVN.pm
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/lib/Git/SVN.pm	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/lib/Git/SVN.pm	2014-08-16 06:26:55.000000000 +0800
@@ -1318,13 +1318,13 @@
 #
 # By default the parsed date will be in UTC; if $Git::SVN::_localtime
 # is true we'll convert it to the local timezone instead.
 sub parse_svn_date {
 	my $date = shift || return '+0000 1970-01-01 00:00:00';
 	my ($Y,$m,$d,$H,$M,$S) = ($date =~ /^(\d{4})\-(\d\d)\-(\d\d)T
-	                                    (\d\d)\:(\d\d)\:(\d\d)\.\d*Z$/x) or
+	                                    (\d\d?)\:(\d\d)\:(\d\d)\.\d*Z$/x) or
 	                                 croak "Unable to parse date: $date\n";
 	my $parsed_date;    # Set next.
 
 	if ($Git::SVN::_localtime) {
 		# Translate the Subversion datetime to an epoch time.
 		# Begin by switching ourselves to $date's timezone, UTC.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/man3/Git.3pm /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/man3/Git.3pm
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/man3/Git.3pm	2017-10-10 09:55:07.380920641 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/man3/Git.3pm	2017-10-10 09:58:36.672214966 +0800
@@ -130,13 +130,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "Git 3pm"
-.TH Git 3pm "2014-12-19" "perl v5.18.2" "User Contributed Perl Documentation"
+.TH Git 3pm "2014-08-16" "perl v5.18.2" "User Contributed Perl Documentation"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 Git \- Perl interface to the Git version control system
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/man3/Git::I18N.3pm /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/man3/Git::I18N.3pm
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/man3/Git::I18N.3pm	2017-10-10 09:55:07.380920641 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/man3/Git::I18N.3pm	2017-10-10 09:58:36.632234967 +0800
@@ -130,13 +130,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "Git::I18N 3pm"
-.TH Git::I18N 3pm "2014-12-19" "perl v5.18.2" "User Contributed Perl Documentation"
+.TH Git::I18N 3pm "2014-08-16" "perl v5.18.2" "User Contributed Perl Documentation"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 Git::I18N \- Perl interface to Git's Gettext localizations
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/man3/Git::SVN::Editor.3pm /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/man3/Git::SVN::Editor.3pm
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/man3/Git::SVN::Editor.3pm	2017-10-10 09:55:07.328946642 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/man3/Git::SVN::Editor.3pm	2017-10-10 09:58:36.676212965 +0800
@@ -130,13 +130,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "Git::SVN::Editor 3pm"
-.TH Git::SVN::Editor 3pm "2014-12-19" "perl v5.18.2" "User Contributed Perl Documentation"
+.TH Git::SVN::Editor 3pm "2014-08-16" "perl v5.18.2" "User Contributed Perl Documentation"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 Git::SVN::Editor \- commit driver for "git svn set\-tree" and dcommit
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/man3/Git::SVN::Fetcher.3pm /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/man3/Git::SVN::Fetcher.3pm
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/man3/Git::SVN::Fetcher.3pm	2017-10-10 09:55:07.336942642 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/man3/Git::SVN::Fetcher.3pm	2017-10-10 09:58:36.640230966 +0800
@@ -130,13 +130,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "Git::SVN::Fetcher 3pm"
-.TH Git::SVN::Fetcher 3pm "2014-12-19" "perl v5.18.2" "User Contributed Perl Documentation"
+.TH Git::SVN::Fetcher 3pm "2014-08-16" "perl v5.18.2" "User Contributed Perl Documentation"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 Git::SVN::Fetcher \- tree delta consumer for "git svn fetch"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/man3/Git::SVN::Memoize::YAML.3pm /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/man3/Git::SVN::Memoize::YAML.3pm
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/man3/Git::SVN::Memoize::YAML.3pm	2017-10-10 09:55:07.332944642 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/man3/Git::SVN::Memoize::YAML.3pm	2017-10-10 09:58:36.676212965 +0800
@@ -130,13 +130,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "Git::SVN::Memoize::YAML 3pm"
-.TH Git::SVN::Memoize::YAML 3pm "2014-12-19" "perl v5.18.2" "User Contributed Perl Documentation"
+.TH Git::SVN::Memoize::YAML 3pm "2014-08-16" "perl v5.18.2" "User Contributed Perl Documentation"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 Git::SVN::Memoize::YAML \- store Memoized data in YAML format
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/man3/Git::SVN::Prompt.3pm /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/man3/Git::SVN::Prompt.3pm
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/man3/Git::SVN::Prompt.3pm	2017-10-10 09:55:07.340940641 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/man3/Git::SVN::Prompt.3pm	2017-10-10 09:58:36.640230966 +0800
@@ -130,13 +130,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "Git::SVN::Prompt 3pm"
-.TH Git::SVN::Prompt 3pm "2014-12-19" "perl v5.18.2" "User Contributed Perl Documentation"
+.TH Git::SVN::Prompt 3pm "2014-08-16" "perl v5.18.2" "User Contributed Perl Documentation"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 Git::SVN::Prompt \- authentication callbacks for git\-svn
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/man3/Git::SVN::Ra.3pm /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/man3/Git::SVN::Ra.3pm
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/man3/Git::SVN::Ra.3pm	2017-10-10 09:55:07.344938642 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/man3/Git::SVN::Ra.3pm	2017-10-10 09:58:36.636232967 +0800
@@ -130,13 +130,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "Git::SVN::Ra 3pm"
-.TH Git::SVN::Ra 3pm "2014-12-19" "perl v5.18.2" "User Contributed Perl Documentation"
+.TH Git::SVN::Ra 3pm "2014-08-16" "perl v5.18.2" "User Contributed Perl Documentation"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 Git::SVN::Ra \- Subversion remote access functions for git\-svn
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/man3/Git::SVN::Utils.3pm /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/man3/Git::SVN::Utils.3pm
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/blib/man3/Git::SVN::Utils.3pm	2017-10-10 09:55:07.324948642 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/blib/man3/Git::SVN::Utils.3pm	2017-10-10 09:58:36.644228967 +0800
@@ -130,13 +130,13 @@
 .    ds Ae AE
 .\}
 .rm #[ #] #H #V #F C
 .\" ========================================================================
 .\"
 .IX Title "Git::SVN::Utils 3pm"
-.TH Git::SVN::Utils 3pm "2014-12-19" "perl v5.18.2" "User Contributed Perl Documentation"
+.TH Git::SVN::Utils 3pm "2014-08-16" "perl v5.18.2" "User Contributed Perl Documentation"
 .\" For nroff, turn off justification.  Always turn off hyphenation; it makes
 .\" way too many mistakes in technical documents.
 .if n .ad l
 .nh
 .SH "NAME"
 Git::SVN::Utils \- utility functions used across Git::SVN
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/Git/SVN/Log.pm /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/Git/SVN/Log.pm
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/Git/SVN/Log.pm	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/Git/SVN/Log.pm	2014-08-16 06:26:55.000000000 +0800
@@ -113,13 +113,13 @@
 	if (!$pid) {
 		open STDOUT, '>&', $wfd or
 		                     fatal "Can't redirect to stdout: $!";
 		return;
 	}
 	open STDIN, '<&', $rfd or fatal "Can't redirect stdin: $!";
-	$ENV{LESS} ||= 'FRSX';
+	$ENV{LESS} ||= 'FRX';
 	$ENV{LV} ||= '-c';
 	exec $pager or fatal "Can't run pager: $! ($pager)";
 }
 
 sub format_svn_date {
 	my $t = shift || time;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/Git/SVN.pm /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/Git/SVN.pm
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/Git/SVN.pm	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/Git/SVN.pm	2014-08-16 06:26:55.000000000 +0800
@@ -1318,13 +1318,13 @@
 #
 # By default the parsed date will be in UTC; if $Git::SVN::_localtime
 # is true we'll convert it to the local timezone instead.
 sub parse_svn_date {
 	my $date = shift || return '+0000 1970-01-01 00:00:00';
 	my ($Y,$m,$d,$H,$M,$S) = ($date =~ /^(\d{4})\-(\d\d)\-(\d\d)T
-	                                    (\d\d)\:(\d\d)\:(\d\d)\.\d*Z$/x) or
+	                                    (\d\d?)\:(\d\d)\:(\d\d)\.\d*Z$/x) or
 	                                 croak "Unable to parse date: $date\n";
 	my $parsed_date;    # Set next.
 
 	if ($Git::SVN::_localtime) {
 		# Translate the Subversion datetime to an epoch time.
 		# Begin by switching ourselves to $date's timezone, UTC.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/perl.mak /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/perl.mak
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/perl/perl.mak	2017-10-10 09:54:49.166033308 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/perl/perl.mak	2017-10-10 09:58:19.776667586 +0800
@@ -13,13 +13,13 @@
 
 #     BUILD_REQUIRES => {  }
 #     CONFIGURE_REQUIRES => {  }
 #     INSTALLSITEMAN3DIR => q[$(SITEPREFIX)/share/man/man3]
 #     MAKEFILE => q[perl.mak]
 #     NAME => q[Git]
-#     PM => { Git/SVN/GlobSpec.pm=>q[$(INST_LIBDIR)/Git/SVN/GlobSpec.pm], Git/SVN/Utils.pm=>q[$(INST_LIBDIR)/Git/SVN/Utils.pm], Git/IndexInfo.pm=>q[$(INST_LIBDIR)/Git/IndexInfo.pm], Git/SVN.pm=>q[$(INST_LIBDIR)/Git/SVN.pm], Git/SVN/Editor.pm=>q[$(INST_LIBDIR)/Git/SVN/Editor.pm], Git/SVN/Memoize/YAML.pm=>q[$(INST_LIBDIR)/Git/SVN/Memoize/YAML.pm], Git/SVN/Prompt.pm=>q[$(INST_LIBDIR)/Git/SVN/Prompt.pm], Git/SVN/Fetcher.pm=>q[$(INST_LIBDIR)/Git/SVN/Fetcher.pm], Git/SVN/Ra.pm=>q[$(INST_LIBDIR)/Git/SVN/Ra.pm], Git.pm=>q[$(INST_LIBDIR)/Git.pm], Git/SVN/Migration.pm=>q[$(INST_LIBDIR)/Git/SVN/Migration.pm], Git/SVN/Log.pm=>q[$(INST_LIBDIR)/Git/SVN/Log.pm], Git/I18N.pm=>q[$(INST_LIBDIR)/Git/I18N.pm] }
+#     PM => { Git/I18N.pm=>q[$(INST_LIBDIR)/Git/I18N.pm], Git/IndexInfo.pm=>q[$(INST_LIBDIR)/Git/IndexInfo.pm], Git/SVN/Ra.pm=>q[$(INST_LIBDIR)/Git/SVN/Ra.pm], Git/SVN/Migration.pm=>q[$(INST_LIBDIR)/Git/SVN/Migration.pm], Git/SVN.pm=>q[$(INST_LIBDIR)/Git/SVN.pm], Git/SVN/Fetcher.pm=>q[$(INST_LIBDIR)/Git/SVN/Fetcher.pm], Git/SVN/Utils.pm=>q[$(INST_LIBDIR)/Git/SVN/Utils.pm], Git/SVN/Prompt.pm=>q[$(INST_LIBDIR)/Git/SVN/Prompt.pm], Git.pm=>q[$(INST_LIBDIR)/Git.pm], Git/SVN/Editor.pm=>q[$(INST_LIBDIR)/Git/SVN/Editor.pm], Git/SVN/GlobSpec.pm=>q[$(INST_LIBDIR)/Git/SVN/GlobSpec.pm], Git/SVN/Log.pm=>q[$(INST_LIBDIR)/Git/SVN/Log.pm], Git/SVN/Memoize/YAML.pm=>q[$(INST_LIBDIR)/Git/SVN/Memoize/YAML.pm] }
 #     PM_FILTER => q[$(PERL) -pe "s<\Q++LOCALEDIR++\E></usr/local/share/locale>"]
 #     PREREQ_PM => {  }
 #     TEST_REQUIRES => {  }
 #     VERSION_FROM => q[Git.pm]
 
 # --- MakeMaker post_initialize section:
@@ -204,38 +204,38 @@
 	Git/SVN/Memoize/YAML.pm \
 	Git/SVN/Migration.pm \
 	Git/SVN/Prompt.pm \
 	Git/SVN/Ra.pm \
 	Git/SVN/Utils.pm
 
-PM_TO_BLIB = Git/SVN/GlobSpec.pm \
-	$(INST_LIBDIR)/Git/SVN/GlobSpec.pm \
-	Git/SVN/Utils.pm \
-	$(INST_LIBDIR)/Git/SVN/Utils.pm \
+PM_TO_BLIB = Git/I18N.pm \
+	$(INST_LIBDIR)/Git/I18N.pm \
 	Git/IndexInfo.pm \
 	$(INST_LIBDIR)/Git/IndexInfo.pm \
+	Git/SVN/Ra.pm \
+	$(INST_LIBDIR)/Git/SVN/Ra.pm \
+	Git/SVN/Migration.pm \
+	$(INST_LIBDIR)/Git/SVN/Migration.pm \
 	Git/SVN.pm \
 	$(INST_LIBDIR)/Git/SVN.pm \
-	Git/SVN/Editor.pm \
-	$(INST_LIBDIR)/Git/SVN/Editor.pm \
-	Git/SVN/Memoize/YAML.pm \
-	$(INST_LIBDIR)/Git/SVN/Memoize/YAML.pm \
-	Git/SVN/Prompt.pm \
-	$(INST_LIBDIR)/Git/SVN/Prompt.pm \
 	Git/SVN/Fetcher.pm \
 	$(INST_LIBDIR)/Git/SVN/Fetcher.pm \
-	Git/SVN/Ra.pm \
-	$(INST_LIBDIR)/Git/SVN/Ra.pm \
+	Git/SVN/Utils.pm \
+	$(INST_LIBDIR)/Git/SVN/Utils.pm \
+	Git/SVN/Prompt.pm \
+	$(INST_LIBDIR)/Git/SVN/Prompt.pm \
 	Git.pm \
 	$(INST_LIBDIR)/Git.pm \
-	Git/SVN/Migration.pm \
-	$(INST_LIBDIR)/Git/SVN/Migration.pm \
+	Git/SVN/Editor.pm \
+	$(INST_LIBDIR)/Git/SVN/Editor.pm \
+	Git/SVN/GlobSpec.pm \
+	$(INST_LIBDIR)/Git/SVN/GlobSpec.pm \
 	Git/SVN/Log.pm \
 	$(INST_LIBDIR)/Git/SVN/Log.pm \
-	Git/I18N.pm \
-	$(INST_LIBDIR)/Git/I18N.pm
+	Git/SVN/Memoize/YAML.pm \
+	$(INST_LIBDIR)/Git/SVN/Memoize/YAML.pm
 
 
 # --- MakeMaker platform_constants section:
 MM_Unix_VERSION = 6.66
 PERL_MALLOC_DEF = -DPERL_EXTMALLOC_DEF -Dmalloc=Perl_malloc -Dfree=Perl_mfree -Drealloc=Perl_realloc -Dcalloc=Perl_calloc
 
@@ -454,29 +454,29 @@
 
 POD2MAN_EXE = $(PERLRUN) "-MExtUtils::Command::MM" -e pod2man "--"
 POD2MAN = $(POD2MAN_EXE)
 
 
 manifypods : pure_all  \
-	Git/SVN/Utils.pm \
-	Git/SVN/Editor.pm \
-	Git/SVN/Memoize/YAML.pm \
+	Git/I18N.pm \
+	Git/SVN/Ra.pm \
 	Git/SVN/Fetcher.pm \
 	Git/SVN/Prompt.pm \
-	Git/SVN/Ra.pm \
+	Git/SVN/Utils.pm \
 	Git.pm \
-	Git/I18N.pm
+	Git/SVN/Editor.pm \
+	Git/SVN/Memoize/YAML.pm
 	$(NOECHO) $(POD2MAN) --section=$(MAN3EXT) --perm_rw=$(PERM_RW) \
-	  Git/SVN/Utils.pm $(INST_MAN3DIR)/Git::SVN::Utils.$(MAN3EXT) \
-	  Git/SVN/Editor.pm $(INST_MAN3DIR)/Git::SVN::Editor.$(MAN3EXT) \
-	  Git/SVN/Memoize/YAML.pm $(INST_MAN3DIR)/Git::SVN::Memoize::YAML.$(MAN3EXT) \
+	  Git/I18N.pm $(INST_MAN3DIR)/Git::I18N.$(MAN3EXT) \
+	  Git/SVN/Ra.pm $(INST_MAN3DIR)/Git::SVN::Ra.$(MAN3EXT) \
 	  Git/SVN/Fetcher.pm $(INST_MAN3DIR)/Git::SVN::Fetcher.$(MAN3EXT) \
 	  Git/SVN/Prompt.pm $(INST_MAN3DIR)/Git::SVN::Prompt.$(MAN3EXT) \
-	  Git/SVN/Ra.pm $(INST_MAN3DIR)/Git::SVN::Ra.$(MAN3EXT) \
+	  Git/SVN/Utils.pm $(INST_MAN3DIR)/Git::SVN::Utils.$(MAN3EXT) \
 	  Git.pm $(INST_MAN3DIR)/Git.$(MAN3EXT) \
-	  Git/I18N.pm $(INST_MAN3DIR)/Git::I18N.$(MAN3EXT) 
+	  Git/SVN/Editor.pm $(INST_MAN3DIR)/Git::SVN::Editor.$(MAN3EXT) \
+	  Git/SVN/Memoize/YAML.pm $(INST_MAN3DIR)/Git::SVN::Memoize::YAML.$(MAN3EXT) 
 
 
 
 
 # --- MakeMaker processPL section:
 
@@ -497,28 +497,28 @@
 
 # Delete temporary files but do not touch installed files. We don't delete
 # the Makefile here so a later make realclean still has a makefile to use.
 
 clean :: clean_subdirs
 	- $(RM_F) \
-	  perl$(EXE_EXT) $(INST_ARCHAUTODIR)/extralibs.ld \
-	  pm_to_blib $(BOOTSTRAP) \
-	  *perl.core pm_to_blib.ts \
-	  core.[0-9][0-9][0-9][0-9] lib$(BASEEXT).def \
-	  $(BASEEXT).x blibdirs.ts \
-	  $(MAKE_APERL_FILE) perlmain.c \
-	  core.[0-9][0-9] perl \
-	  so_locations $(BASEEXT).exp \
-	  tmon.out perl.exe \
+	  $(BASEEXT).bso $(BASEEXT).x \
+	  *$(LIB_EXT) core.[0-9][0-9][0-9] \
+	  $(BASEEXT).def $(INST_ARCHAUTODIR)/extralibs.all \
+	  core.[0-9] perl \
+	  $(INST_ARCHAUTODIR)/extralibs.ld $(BOOTSTRAP) \
+	  MYMETA.json core.[0-9][0-9][0-9][0-9] \
+	  pm_to_blib.ts perl.exe \
+	  pm_to_blib lib$(BASEEXT).def \
+	  $(BASEEXT).exp perlmain.c \
+	  core.*perl.*.? so_locations \
 	  MYMETA.yml core \
-	  mon.out *$(LIB_EXT) \
-	  core.[0-9] MYMETA.json \
-	  core.*perl.*.? $(BASEEXT).def \
-	  core.[0-9][0-9][0-9][0-9][0-9] core.[0-9][0-9][0-9] \
-	  $(INST_ARCHAUTODIR)/extralibs.all *$(OBJ_EXT) \
-	  $(BASEEXT).bso 
+	  *perl.core tmon.out \
+	  blibdirs.ts mon.out \
+	  perl$(EXE_EXT) *$(OBJ_EXT) \
+	  core.[0-9][0-9][0-9][0-9][0-9] $(MAKE_APERL_FILE) \
+	  core.[0-9][0-9] 
 	- $(RM_RF) \
 	  blib 
 	- $(MV) $(FIRST_MAKEFILE) $(MAKEFILE_OLD) $(DEV_NULL)
 
 
 # --- MakeMaker realclean_subdirs section:
@@ -527,13 +527,13 @@
 
 
 # --- MakeMaker realclean section:
 # Delete temporary files (via clean) and also delete dist files
 realclean purge ::  clean realclean_subdirs
 	- $(RM_F) \
-	  $(FIRST_MAKEFILE) $(MAKEFILE_OLD) 
+	  $(MAKEFILE_OLD) $(FIRST_MAKEFILE) 
 	- $(RM_RF) \
 	  $(DISTVNAME) 
 
 
 # --- MakeMaker metafile section:
 metafile : create_distdir
@@ -884,25 +884,25 @@
 
 
 # --- MakeMaker pm_to_blib section:
 
 pm_to_blib : $(FIRST_MAKEFILE) $(TO_INST_PM)
 	$(NOECHO) $(ABSPERLRUN) -MExtUtils::Install -e 'pm_to_blib({@ARGV}, '\''$(INST_LIB)/auto'\'', q[$(PM_FILTER)], '\''$(PERM_DIR)'\'')' -- \
-	  Git/SVN/GlobSpec.pm $(INST_LIBDIR)/Git/SVN/GlobSpec.pm \
-	  Git/SVN/Utils.pm $(INST_LIBDIR)/Git/SVN/Utils.pm \
+	  Git/I18N.pm $(INST_LIBDIR)/Git/I18N.pm \
 	  Git/IndexInfo.pm $(INST_LIBDIR)/Git/IndexInfo.pm \
+	  Git/SVN/Ra.pm $(INST_LIBDIR)/Git/SVN/Ra.pm \
+	  Git/SVN/Migration.pm $(INST_LIBDIR)/Git/SVN/Migration.pm \
 	  Git/SVN.pm $(INST_LIBDIR)/Git/SVN.pm \
-	  Git/SVN/Editor.pm $(INST_LIBDIR)/Git/SVN/Editor.pm \
-	  Git/SVN/Memoize/YAML.pm $(INST_LIBDIR)/Git/SVN/Memoize/YAML.pm \
-	  Git/SVN/Prompt.pm $(INST_LIBDIR)/Git/SVN/Prompt.pm \
 	  Git/SVN/Fetcher.pm $(INST_LIBDIR)/Git/SVN/Fetcher.pm \
-	  Git/SVN/Ra.pm $(INST_LIBDIR)/Git/SVN/Ra.pm \
+	  Git/SVN/Utils.pm $(INST_LIBDIR)/Git/SVN/Utils.pm \
+	  Git/SVN/Prompt.pm $(INST_LIBDIR)/Git/SVN/Prompt.pm \
 	  Git.pm $(INST_LIBDIR)/Git.pm \
-	  Git/SVN/Migration.pm $(INST_LIBDIR)/Git/SVN/Migration.pm \
+	  Git/SVN/Editor.pm $(INST_LIBDIR)/Git/SVN/Editor.pm \
+	  Git/SVN/GlobSpec.pm $(INST_LIBDIR)/Git/SVN/GlobSpec.pm \
 	  Git/SVN/Log.pm $(INST_LIBDIR)/Git/SVN/Log.pm \
-	  Git/I18N.pm $(INST_LIBDIR)/Git/I18N.pm 
+	  Git/SVN/Memoize/YAML.pm $(INST_LIBDIR)/Git/SVN/Memoize/YAML.pm 
 	$(NOECHO) $(TOUCH) pm_to_blib
 
 
 # --- MakeMaker selfdocument section:
 
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pkt-line.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pkt-line.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pkt-line.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pkt-line.c	2014-08-16 06:26:55.000000000 +0800
@@ -1,36 +1,36 @@
 #include "cache.h"
 #include "pkt-line.h"
 
 char packet_buffer[LARGE_PACKET_MAX];
 static const char *packet_trace_prefix = "git";
-static const char trace_key[] = "GIT_TRACE_PACKET";
+static struct trace_key trace_packet = TRACE_KEY_INIT(PACKET);
 
 void packet_trace_identity(const char *prog)
 {
 	packet_trace_prefix = xstrdup(prog);
 }
 
 static void packet_trace(const char *buf, unsigned int len, int write)
 {
 	int i;
 	struct strbuf out;
 
-	if (!trace_want(trace_key))
+	if (!trace_want(&trace_packet))
 		return;
 
 	/* +32 is just a guess for header + quoting */
 	strbuf_init(&out, len+32);
 
 	strbuf_addf(&out, "packet: %12s%c ",
 		    packet_trace_prefix, write ? '>' : '<');
 
 	if ((len >= 4 && starts_with(buf, "PACK")) ||
 	    (len >= 5 && starts_with(buf+1, "PACK"))) {
 		strbuf_addstr(&out, "PACK ...");
-		unsetenv(trace_key);
+		trace_disable(&trace_packet);
 	}
 	else {
 		/* XXX we should really handle printable utf8 */
 		for (i = 0; i < len; i++) {
 			/* suppress newlines */
 			if (buf[i] == '\n')
@@ -40,13 +40,13 @@
 			else
 				strbuf_addf(&out, "\\%o", buf[i]);
 		}
 	}
 
 	strbuf_addch(&out, '\n');
-	trace_strbuf(trace_key, &out);
+	trace_strbuf(&trace_packet, &out);
 	strbuf_release(&out);
 }
 
 /*
  * If we buffered things up above (we don't, but we should),
  * we'd flush it here
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pkt-line.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pkt-line.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pkt-line.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pkt-line.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/preload-index.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/preload-index.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/preload-index.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/preload-index.c	2014-08-16 06:26:55.000000000 +0800
@@ -34,15 +34,14 @@
 static void *preload_thread(void *_data)
 {
 	int nr;
 	struct thread_data *p = _data;
 	struct index_state *index = p->index;
 	struct cache_entry **cep = index->cache + p->offset;
-	struct cache_def cache;
+	struct cache_def cache = CACHE_DEF_INIT;
 
-	memset(&cache, 0, sizeof(cache));
 	nr = p->nr;
 	if (nr + p->offset > index->cache_nr)
 		nr = index->cache_nr - p->offset;
 
 	do {
 		struct cache_entry *ce = *cep++;
@@ -61,12 +60,13 @@
 		if (lstat(ce->name, &st))
 			continue;
 		if (ie_match_stat(index, ce, &st, CE_MATCH_RACY_IS_DIRTY))
 			continue;
 		ce_mark_uptodate(ce);
 	} while (--nr > 0);
+	cache_def_clear(&cache);
 	return NULL;
 }
 
 static void preload_index(struct index_state *index,
 			  const struct pathspec *pathspec)
 {
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/preload-index.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/preload-index.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/preload-index.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/preload-index.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pretty.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pretty.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pretty.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pretty.c	2014-08-16 06:26:55.000000000 +0800
@@ -37,16 +37,15 @@
 {
 	struct cmt_fmt_map *commit_format = NULL;
 	const char *name;
 	const char *fmt;
 	int i;
 
-	if (!starts_with(var, "pretty."))
+	if (!skip_prefix(var, "pretty.", &name))
 		return 0;
 
-	name = var + strlen("pretty.");
 	for (i = 0; i < builtin_formats_len; i++) {
 		if (!strcmp(commit_formats[i].name, name))
 			return 0;
 	}
 
 	for (i = builtin_formats_len; i < commit_formats_len; i++) {
@@ -390,14 +389,14 @@
 			strbuf_addf(sb, encoded_fmt, p[i]);
 		line_len += encoded_len;
 	}
 	strbuf_addstr(sb, "?=");
 }
 
-static const char *show_ident_date(const struct ident_split *ident,
-				   enum date_mode mode)
+const char *show_ident_date(const struct ident_split *ident,
+			    enum date_mode mode)
 {
 	unsigned long date = 0;
 	long tz = 0;
 
 	if (ident->date_begin && ident->date_end)
 		date = strtoul(ident->date_begin, NULL, 10);
@@ -1374,13 +1373,13 @@
 					    padding - 2, len - (padding - 2),
 					    "..");
 			break;
 		case trunc_none:
 			break;
 		}
-		strbuf_addstr(sb, local_sb.buf);
+		strbuf_addbuf(sb, &local_sb);
 	} else {
 		int sb_len = sb->len, offset = 0;
 		if (c->flush_type == flush_left)
 			offset = padding - len;
 		else if (c->flush_type == flush_both)
 			offset = (padding - len) / 2;
@@ -1518,14 +1517,12 @@
 		if (out)
 			strbuf_attach(sb, out, outsz, outsz + 1);
 	}
 
 	free(context.commit_encoding);
 	unuse_commit_buffer(commit, context.message);
-	free(context.signature_check.gpg_output);
-	free(context.signature_check.signer);
 }
 
 static void pp_header(struct pretty_print_context *pp,
 		      const char *encoding,
 		      const struct commit *commit,
 		      const char **msg_p,
@@ -1554,18 +1551,13 @@
 			if (linelen != 48)
 				die("bad parent line in commit");
 			continue;
 		}
 
 		if (!parents_shown) {
-			struct commit_list *parent;
-			int num;
-			for (parent = commit->parents, num = 0;
-			     parent;
-			     parent = parent->next, num++)
-				;
+			unsigned num = commit_list_count(commit->parents);
 			/* with enough slop */
 			strbuf_grow(sb, num * 50 + 20);
 			add_merge_info(pp, sb, commit);
 			parents_shown = 1;
 		}
 
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pretty.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pretty.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/pretty.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/pretty.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/prio-queue.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/prio-queue.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/prio-queue.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/prio-queue.c	2014-08-16 06:26:55.000000000 +0800
@@ -1,84 +1,90 @@
 #include "cache.h"
-#include "commit.h"
 #include "prio-queue.h"
 
+static inline int compare(struct prio_queue *queue, int i, int j)
+{
+	int cmp = queue->compare(queue->array[i].data, queue->array[j].data,
+				 queue->cb_data);
+	if (!cmp)
+		cmp = queue->array[i].ctr - queue->array[j].ctr;
+	return cmp;
+}
+
+static inline void swap(struct prio_queue *queue, int i, int j)
+{
+	struct prio_queue_entry tmp = queue->array[i];
+	queue->array[i] = queue->array[j];
+	queue->array[j] = tmp;
+}
+
 void prio_queue_reverse(struct prio_queue *queue)
 {
 	int i, j;
 
 	if (queue->compare != NULL)
 		die("BUG: prio_queue_reverse() on non-LIFO queue");
-	for (i = 0; i <= (j = (queue->nr - 1) - i); i++) {
-		struct commit *swap = queue->array[i];
-		queue->array[i] = queue->array[j];
-		queue->array[j] = swap;
-	}
+	for (i = 0; i <= (j = (queue->nr - 1) - i); i++)
+		swap(queue, i, j);
 }
 
 void clear_prio_queue(struct prio_queue *queue)
 {
 	free(queue->array);
 	queue->nr = 0;
 	queue->alloc = 0;
 	queue->array = NULL;
+	queue->insertion_ctr = 0;
 }
 
 void prio_queue_put(struct prio_queue *queue, void *thing)
 {
-	prio_queue_compare_fn compare = queue->compare;
 	int ix, parent;
 
 	/* Append at the end */
 	ALLOC_GROW(queue->array, queue->nr + 1, queue->alloc);
-	queue->array[queue->nr++] = thing;
-	if (!compare)
+	queue->array[queue->nr].ctr = queue->insertion_ctr++;
+	queue->array[queue->nr].data = thing;
+	queue->nr++;
+	if (!queue->compare)
 		return; /* LIFO */
 
 	/* Bubble up the new one */
 	for (ix = queue->nr - 1; ix; ix = parent) {
 		parent = (ix - 1) / 2;
-		if (compare(queue->array[parent], queue->array[ix],
-			    queue->cb_data) <= 0)
+		if (compare(queue, parent, ix) <= 0)
 			break;
 
-		thing = queue->array[parent];
-		queue->array[parent] = queue->array[ix];
-		queue->array[ix] = thing;
+		swap(queue, parent, ix);
 	}
 }
 
 void *prio_queue_get(struct prio_queue *queue)
 {
-	void *result, *swap;
+	void *result;
 	int ix, child;
-	prio_queue_compare_fn compare = queue->compare;
 
 	if (!queue->nr)
 		return NULL;
-	if (!compare)
-		return queue->array[--queue->nr]; /* LIFO */
+	if (!queue->compare)
+		return queue->array[--queue->nr].data; /* LIFO */
 
-	result = queue->array[0];
+	result = queue->array[0].data;
 	if (!--queue->nr)
 		return result;
 
 	queue->array[0] = queue->array[queue->nr];
 
 	/* Push down the one at the root */
 	for (ix = 0; ix * 2 + 1 < queue->nr; ix = child) {
 		child = ix * 2 + 1; /* left */
-		if ((child + 1 < queue->nr) &&
-		    (compare(queue->array[child], queue->array[child + 1],
-			     queue->cb_data) >= 0))
+		if (child + 1 < queue->nr &&
+		    compare(queue, child, child + 1) >= 0)
 			child++; /* use right child */
 
-		if (compare(queue->array[ix], queue->array[child],
-			    queue->cb_data) <= 0)
+		if (compare(queue, ix, child) <= 0)
 			break;
 
-		swap = queue->array[child];
-		queue->array[child] = queue->array[ix];
-		queue->array[ix] = swap;
+		swap(queue, child, ix);
 	}
 	return result;
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/prio-queue.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/prio-queue.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/prio-queue.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/prio-queue.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/prio-queue.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/prio-queue.h	2014-08-16 06:26:55.000000000 +0800
@@ -18,17 +18,23 @@
  * the return value, being the same as the sign of the result of
  * subtracting "two" from "one" (i.e. negative if "one" sorts earlier
  * than "two").
  */
 typedef int (*prio_queue_compare_fn)(const void *one, const void *two, void *cb_data);
 
+struct prio_queue_entry {
+	unsigned ctr;
+	void *data;
+};
+
 struct prio_queue {
 	prio_queue_compare_fn compare;
+	unsigned insertion_ctr;
 	void *cb_data;
 	int alloc, nr;
-	void **array;
+	struct prio_queue_entry *array;
 };
 
 /*
  * Add the "thing" to the queue.
  */
 extern void prio_queue_put(struct prio_queue *, void *thing);
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/prio-queue.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/prio-queue.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/progress.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/progress.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/progress.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/progress.c	2014-08-16 06:26:55.000000000 +0800
@@ -9,19 +9,20 @@
  */
 
 #include "git-compat-util.h"
 #include "gettext.h"
 #include "progress.h"
 #include "strbuf.h"
+#include "trace.h"
 
 #define TP_IDX_MAX      8
 
 struct throughput {
 	off_t curr_total;
 	off_t prev_total;
-	struct timeval prev_tv;
+	uint64_t prev_ns;
 	unsigned int avg_bytes;
 	unsigned int avg_misecs;
 	unsigned int last_bytes[TP_IDX_MAX];
 	unsigned int last_misecs[TP_IDX_MAX];
 	unsigned int idx;
 	char display[32];
@@ -124,71 +125,71 @@
 	strbuf_addstr(buf, "/s");
 }
 
 void display_throughput(struct progress *progress, off_t total)
 {
 	struct throughput *tp;
-	struct timeval tv;
-	unsigned int misecs;
+	uint64_t now_ns;
+	unsigned int misecs, count, rate;
+	struct strbuf buf = STRBUF_INIT;
 
 	if (!progress)
 		return;
 	tp = progress->throughput;
 
-	gettimeofday(&tv, NULL);
+	now_ns = getnanotime();
 
 	if (!tp) {
 		progress->throughput = tp = calloc(1, sizeof(*tp));
 		if (tp) {
 			tp->prev_total = tp->curr_total = total;
-			tp->prev_tv = tv;
+			tp->prev_ns = now_ns;
 		}
 		return;
 	}
 	tp->curr_total = total;
 
+	/* only update throughput every 0.5 s */
+	if (now_ns - tp->prev_ns <= 500000000)
+		return;
+
 	/*
-	 * We have x = bytes and y = microsecs.  We want z = KiB/s:
+	 * We have x = bytes and y = nanosecs.  We want z = KiB/s:
 	 *
-	 *	z = (x / 1024) / (y / 1000000)
-	 *	z = x / y * 1000000 / 1024
-	 *	z = x / (y * 1024 / 1000000)
+	 *	z = (x / 1024) / (y / 1000000000)
+	 *	z = x / y * 1000000000 / 1024
+	 *	z = x / (y * 1024 / 1000000000)
 	 *	z = x / y'
 	 *
 	 * To simplify things we'll keep track of misecs, or 1024th of a sec
 	 * obtained with:
 	 *
-	 *	y' = y * 1024 / 1000000
-	 *	y' = y / (1000000 / 1024)
-	 *	y' = y / 977
+	 *	y' = y * 1024 / 1000000000
+	 *	y' = y * (2^10 / 2^42) * (2^42 / 1000000000)
+	 *	y' = y / 2^32 * 4398
+	 *	y' = (y * 4398) >> 32
 	 */
-	misecs = (tv.tv_sec - tp->prev_tv.tv_sec) * 1024;
-	misecs += (int)(tv.tv_usec - tp->prev_tv.tv_usec) / 977;
+	misecs = ((now_ns - tp->prev_ns) * 4398) >> 32;
 
-	if (misecs > 512) {
-		struct strbuf buf = STRBUF_INIT;
-		unsigned int count, rate;
-
-		count = total - tp->prev_total;
-		tp->prev_total = total;
-		tp->prev_tv = tv;
-		tp->avg_bytes += count;
-		tp->avg_misecs += misecs;
-		rate = tp->avg_bytes / tp->avg_misecs;
-		tp->avg_bytes -= tp->last_bytes[tp->idx];
-		tp->avg_misecs -= tp->last_misecs[tp->idx];
-		tp->last_bytes[tp->idx] = count;
-		tp->last_misecs[tp->idx] = misecs;
-		tp->idx = (tp->idx + 1) % TP_IDX_MAX;
-
-		throughput_string(&buf, total, rate);
-		strncpy(tp->display, buf.buf, sizeof(tp->display));
-		strbuf_release(&buf);
-		if (progress->last_value != -1 && progress_update)
-			display(progress, progress->last_value, NULL);
-	}
+	count = total - tp->prev_total;
+	tp->prev_total = total;
+	tp->prev_ns = now_ns;
+	tp->avg_bytes += count;
+	tp->avg_misecs += misecs;
+	rate = tp->avg_bytes / tp->avg_misecs;
+	tp->avg_bytes -= tp->last_bytes[tp->idx];
+	tp->avg_misecs -= tp->last_misecs[tp->idx];
+	tp->last_bytes[tp->idx] = count;
+	tp->last_misecs[tp->idx] = misecs;
+	tp->idx = (tp->idx + 1) % TP_IDX_MAX;
+
+	throughput_string(&buf, total, rate);
+	strncpy(tp->display, buf.buf, sizeof(tp->display));
+	strbuf_release(&buf);
+	if (progress->last_value != -1 && progress_update)
+		display(progress, progress->last_value, NULL);
 }
 
 int display_progress(struct progress *progress, unsigned n)
 {
 	return progress ? display(progress, n, NULL) : 0;
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/progress.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/progress.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/progress.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/progress.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/prompt.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/prompt.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/prompt.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/prompt.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/quote.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/quote.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/quote.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/quote.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/reachable.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/reachable.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/reachable.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/reachable.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/read-cache.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/read-cache.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/read-cache.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/read-cache.c	2014-08-16 06:26:55.000000000 +0800
@@ -11,13 +11,14 @@
 #include "tree.h"
 #include "commit.h"
 #include "blob.h"
 #include "resolve-undo.h"
 #include "strbuf.h"
 #include "varint.h"
-#include "utf8.h"
+#include "split-index.h"
+#include "sigchain.h"
 
 static struct cache_entry *refresh_cache_entry(struct cache_entry *ce,
 					       unsigned int options);
 
 /* Mask for the name length in ce_flags in the on-disk index */
 
@@ -32,43 +33,53 @@
  * is outside the range, to cause the reader to abort.
  */
 
 #define CACHE_EXT(s) ( (s[0]<<24)|(s[1]<<16)|(s[2]<<8)|(s[3]) )
 #define CACHE_EXT_TREE 0x54524545	/* "TREE" */
 #define CACHE_EXT_RESOLVE_UNDO 0x52455543 /* "REUC" */
+#define CACHE_EXT_LINK 0x6c696e6b	  /* "link" */
+
+/* changes that can be kept in $GIT_DIR/index (basically all extensions) */
+#define EXTMASK (RESOLVE_UNDO_CHANGED | CACHE_TREE_CHANGED | \
+		 CE_ENTRY_ADDED | CE_ENTRY_REMOVED | CE_ENTRY_CHANGED | \
+		 SPLIT_INDEX_ORDERED)
 
 struct index_state the_index;
+static const char *alternate_index_output;
 
 static void set_index_entry(struct index_state *istate, int nr, struct cache_entry *ce)
 {
 	istate->cache[nr] = ce;
 	add_name_hash(istate, ce);
 }
 
 static void replace_index_entry(struct index_state *istate, int nr, struct cache_entry *ce)
 {
 	struct cache_entry *old = istate->cache[nr];
 
+	replace_index_entry_in_base(istate, old, ce);
 	remove_name_hash(istate, old);
 	free(old);
 	set_index_entry(istate, nr, ce);
-	istate->cache_changed = 1;
+	ce->ce_flags |= CE_UPDATE_IN_BASE;
+	istate->cache_changed |= CE_ENTRY_CHANGED;
 }
 
 void rename_index_entry_at(struct index_state *istate, int nr, const char *new_name)
 {
 	struct cache_entry *old = istate->cache[nr], *new;
 	int namelen = strlen(new_name);
 
 	new = xmalloc(cache_entry_size(namelen));
 	copy_cache_entry(new, old);
 	new->ce_flags &= ~CE_HASHED;
 	new->ce_namelen = namelen;
+	new->index = 0;
 	memcpy(new->name, new_name, namelen + 1);
 
-	cache_tree_invalidate_path(istate->cache_tree, old->name);
+	cache_tree_invalidate_path(istate, old->name);
 	remove_index_entry_at(istate, nr);
 	add_index_entry(istate, new, ADD_CACHE_OK_TO_ADD|ADD_CACHE_OK_TO_REPLACE);
 }
 
 void fill_stat_data(struct stat_data *sd, struct stat *st)
 {
@@ -420,37 +431,40 @@
 		return 0;
 	if (c2 == '/' && !c1)
 		return 0;
 	return c1 - c2;
 }
 
-int cache_name_stage_compare(const char *name1, int len1, int stage1, const char *name2, int len2, int stage2)
+int name_compare(const char *name1, size_t len1, const char *name2, size_t len2)
 {
-	int len = len1 < len2 ? len1 : len2;
-	int cmp;
-
-	cmp = memcmp(name1, name2, len);
+	size_t min_len = (len1 < len2) ? len1 : len2;
+	int cmp = memcmp(name1, name2, min_len);
 	if (cmp)
 		return cmp;
 	if (len1 < len2)
 		return -1;
 	if (len1 > len2)
 		return 1;
+	return 0;
+}
+
+int cache_name_stage_compare(const char *name1, int len1, int stage1, const char *name2, int len2, int stage2)
+{
+	int cmp;
+
+	cmp = name_compare(name1, len1, name2, len2);
+	if (cmp)
+		return cmp;
 
 	if (stage1 < stage2)
 		return -1;
 	if (stage1 > stage2)
 		return 1;
 	return 0;
 }
 
-int cache_name_compare(const char *name1, int len1, const char *name2, int len2)
-{
-	return cache_name_stage_compare(name1, len1, 0, name2, len2, 0);
-}
-
 static int index_name_stage_pos(const struct index_state *istate, const char *name, int namelen, int stage)
 {
 	int first, last;
 
 	first = 0;
 	last = istate->cache_nr;
@@ -478,14 +492,14 @@
 int remove_index_entry_at(struct index_state *istate, int pos)
 {
 	struct cache_entry *ce = istate->cache[pos];
 
 	record_resolve_undo(istate, ce);
 	remove_name_hash(istate, ce);
-	free(ce);
-	istate->cache_changed = 1;
+	save_or_free_index_entry(istate, ce);
+	istate->cache_changed |= CE_ENTRY_REMOVED;
 	istate->cache_nr--;
 	if (pos >= istate->cache_nr)
 		return 0;
 	memmove(istate->cache + pos,
 		istate->cache + pos + 1,
 		(istate->cache_nr - pos) * sizeof(struct cache_entry *));
@@ -502,27 +516,29 @@
 	struct cache_entry **ce_array = istate->cache;
 	unsigned int i, j;
 
 	for (i = j = 0; i < istate->cache_nr; i++) {
 		if (ce_array[i]->ce_flags & CE_REMOVE) {
 			remove_name_hash(istate, ce_array[i]);
-			free(ce_array[i]);
+			save_or_free_index_entry(istate, ce_array[i]);
 		}
 		else
 			ce_array[j++] = ce_array[i];
 	}
-	istate->cache_changed = 1;
+	if (j == istate->cache_nr)
+		return;
+	istate->cache_changed |= CE_ENTRY_REMOVED;
 	istate->cache_nr = j;
 }
 
 int remove_file_from_index(struct index_state *istate, const char *path)
 {
 	int pos = index_name_pos(istate, path, strlen(path));
 	if (pos < 0)
 		pos = -pos-1;
-	cache_tree_invalidate_path(istate->cache_tree, path);
+	cache_tree_invalidate_path(istate, path);
 	while (pos < istate->cache_nr && !strcmp(istate->cache[pos]->name, path))
 		remove_index_entry_at(istate, pos);
 	return 0;
 }
 
 static int compare_name(struct cache_entry *ce, const char *path, int namelen)
@@ -565,26 +581,28 @@
  * alias twice, because that implies that there were actually two
  * different files with aliasing names!
  *
  * So we use the CE_ADDED flag to verify that the alias was an old
  * one before we accept it as
  */
-static struct cache_entry *create_alias_ce(struct cache_entry *ce, struct cache_entry *alias)
+static struct cache_entry *create_alias_ce(struct index_state *istate,
+					   struct cache_entry *ce,
+					   struct cache_entry *alias)
 {
 	int len;
 	struct cache_entry *new;
 
 	if (alias->ce_flags & CE_ADDED)
 		die("Will not add file alias '%s' ('%s' already exists in index)", ce->name, alias->name);
 
 	/* Ok, create the new entry using the name of the existing alias */
 	len = ce_namelen(alias);
 	new = xcalloc(1, cache_entry_size(len));
 	memcpy(new->name, alias->name, len);
 	copy_cache_entry(new, ce);
-	free(ce);
+	save_or_free_index_entry(istate, ce);
 	return new;
 }
 
 void set_object_name_for_intent_to_add_entry(struct cache_entry *ce)
 {
 	unsigned char sha1[20];
@@ -671,13 +689,13 @@
 		if (index_path(ce->sha1, path, st, HASH_WRITE_OBJECT))
 			return error("unable to index file %s", path);
 	} else
 		set_object_name_for_intent_to_add_entry(ce);
 
 	if (ignore_case && alias && different_name(ce, alias))
-		ce = create_alias_ce(ce, alias);
+		ce = create_alias_ce(istate, ce, alias);
 	ce->ce_flags |= CE_ADDED;
 
 	/* It was suspected to be racily clean, but it turns out to be Ok */
 	was_same = (alias &&
 		    !ce_stage(alias) &&
 		    !hashcmp(alias->sha1, ce->sha1) &&
@@ -754,16 +772,15 @@
 	switch (*rest) {
 	/*
 	 * ".git" followed by  NUL or slash is bad. This
 	 * shares the path end test with the ".." case.
 	 */
 	case 'g':
-	case 'G':
-		if (rest[1] != 'i' && rest[1] != 'I')
+		if (rest[1] != 'i')
 			break;
-		if (rest[2] != 't' && rest[2] != 'T')
+		if (rest[2] != 't')
 			break;
 		rest += 2;
 	/* fallthrough */
 	case '.':
 		if (rest[1] == '\0' || is_dir_sep(rest[1]))
 			return 0;
@@ -781,16 +798,12 @@
 	goto inside;
 	for (;;) {
 		if (!c)
 			return 1;
 		if (is_dir_sep(c)) {
 inside:
-			if (protect_hfs && is_hfs_dotgit(path))
-				return 0;
-			if (protect_ntfs && is_ntfs_dotgit(path))
-				return 0;
 			c = *path++;
 			if ((c == '.' && !verify_dotfile(path)) ||
 			    is_dir_sep(c) || c == '\0')
 				return 0;
 		}
 		c = *path++;
@@ -939,13 +952,14 @@
 	int pos;
 	int ok_to_add = option & ADD_CACHE_OK_TO_ADD;
 	int ok_to_replace = option & ADD_CACHE_OK_TO_REPLACE;
 	int skip_df_check = option & ADD_CACHE_SKIP_DFCHECK;
 	int new_only = option & ADD_CACHE_NEW_ONLY;
 
-	cache_tree_invalidate_path(istate->cache_tree, ce->name);
+	if (!(option & ADD_CACHE_KEEP_CACHE_TREE))
+		cache_tree_invalidate_path(istate, ce->name);
 	pos = index_name_stage_pos(istate, ce->name, ce_namelen(ce), ce_stage(ce));
 
 	/* existing match? Just replace it. */
 	if (pos >= 0) {
 		if (!new_only)
 			replace_index_entry(istate, pos, ce);
@@ -1002,13 +1016,13 @@
 	istate->cache_nr++;
 	if (istate->cache_nr > pos + 1)
 		memmove(istate->cache + pos + 1,
 			istate->cache + pos,
 			(istate->cache_nr - pos - 1) * sizeof(ce));
 	set_index_entry(istate, pos, ce);
-	istate->cache_changed = 1;
+	istate->cache_changed |= CE_ENTRY_ADDED;
 	return 0;
 }
 
 /*
  * "refresh" does not calculate a new sha1 file or bring the
  * cache up-to-date for mode/content changes. But what it
@@ -1101,12 +1115,13 @@
 	 * automatically, which is not really what we want.
 	 */
 	if (!ignore_valid && assume_unchanged &&
 	    !(ce->ce_flags & CE_VALID))
 		updated->ce_flags &= ~CE_VALID;
 
+	/* istate->cache_changed is updated in the caller */
 	return updated;
 }
 
 static void show_file(const char * fmt, const char * name, int in_porcelain,
 		      int * first, const char *header_msg)
 {
@@ -1182,13 +1197,14 @@
 
 			if (really && cache_errno == EINVAL) {
 				/* If we are doing --really-refresh that
 				 * means the index is not valid anymore.
 				 */
 				ce->ce_flags &= ~CE_VALID;
-				istate->cache_changed = 1;
+				ce->ce_flags |= CE_UPDATE_IN_BASE;
+				istate->cache_changed |= CE_ENTRY_CHANGED;
 			}
 			if (quiet)
 				continue;
 
 			if (cache_errno == ENOENT)
 				fmt = deleted_fmt;
@@ -1334,12 +1350,16 @@
 	case CACHE_EXT_TREE:
 		istate->cache_tree = cache_tree_read(data, sz);
 		break;
 	case CACHE_EXT_RESOLVE_UNDO:
 		istate->resolve_undo = resolve_undo_read(data, sz);
 		break;
+	case CACHE_EXT_LINK:
+		if (read_link_extension(istate, data, sz))
+			return -1;
+		break;
 	default:
 		if (*ext < 'A' || 'Z' < *ext)
 			return error("index uses %.4s extension, which we do not understand",
 				     ext);
 		fprintf(stderr, "ignoring %.4s extension\n", ext);
 		break;
@@ -1368,12 +1388,13 @@
 	ce->ce_mode  = get_be32(&ondisk->mode);
 	ce->ce_stat_data.sd_uid   = get_be32(&ondisk->uid);
 	ce->ce_stat_data.sd_gid   = get_be32(&ondisk->gid);
 	ce->ce_stat_data.sd_size  = get_be32(&ondisk->size);
 	ce->ce_flags = flags & ~CE_NAMEMASK;
 	ce->ce_namelen = len;
+	ce->index = 0;
 	hashcpy(ce->sha1, ondisk->sha1);
 	memcpy(ce->name, name, len);
 	ce->name[len] = '\0';
 	return ce;
 }
 
@@ -1442,13 +1463,13 @@
 		*ent_size = (name - ((char *)ondisk)) + consumed;
 	}
 	return ce;
 }
 
 /* remember to discard_cache() before reading a different cache! */
-int read_index_from(struct index_state *istate, const char *path)
+int do_read_index(struct index_state *istate, const char *path, int must_exist)
 {
 	int fd, i;
 	struct stat st;
 	unsigned long src_offset;
 	struct cache_header *hdr;
 	void *mmap;
@@ -1459,15 +1480,15 @@
 		return istate->cache_nr;
 
 	istate->timestamp.sec = 0;
 	istate->timestamp.nsec = 0;
 	fd = open(path, O_RDONLY);
 	if (fd < 0) {
-		if (errno == ENOENT)
+		if (!must_exist && errno == ENOENT)
 			return 0;
-		die_errno("index file open failed");
+		die_errno("%s: index file open failed", path);
 	}
 
 	if (fstat(fd, &st))
 		die_errno("cannot stat the open index");
 
 	mmap_size = xsize_t(st.st_size);
@@ -1480,13 +1501,13 @@
 	close(fd);
 
 	hdr = mmap;
 	if (verify_hdr(hdr, mmap_size) < 0)
 		goto unmap;
 
-	hashcpy(istate->sha1, (unsigned char *)hdr + mmap_size - 20);
+	hashcpy(istate->sha1, (const unsigned char *)hdr + mmap_size - 20);
 	istate->version = ntohl(hdr->hdr_version);
 	istate->cache_nr = ntohl(hdr->hdr_entries);
 	istate->cache_alloc = alloc_nr(istate->cache_nr);
 	istate->cache = xcalloc(istate->cache_alloc, sizeof(*istate->cache));
 	istate->initialized = 1;
 
@@ -1534,34 +1555,76 @@
 
 unmap:
 	munmap(mmap, mmap_size);
 	die("index file corrupt");
 }
 
+int read_index_from(struct index_state *istate, const char *path)
+{
+	struct split_index *split_index;
+	int ret;
+
+	/* istate->initialized covers both .git/index and .git/sharedindex.xxx */
+	if (istate->initialized)
+		return istate->cache_nr;
+
+	ret = do_read_index(istate, path, 0);
+	split_index = istate->split_index;
+	if (!split_index)
+		return ret;
+
+	if (is_null_sha1(split_index->base_sha1))
+		return ret;
+
+	if (split_index->base)
+		discard_index(split_index->base);
+	else
+		split_index->base = xcalloc(1, sizeof(*split_index->base));
+	ret = do_read_index(split_index->base,
+			    git_path("sharedindex.%s",
+				     sha1_to_hex(split_index->base_sha1)), 1);
+	if (hashcmp(split_index->base_sha1, split_index->base->sha1))
+		die("broken index, expect %s in %s, got %s",
+		    sha1_to_hex(split_index->base_sha1),
+		    git_path("sharedindex.%s",
+				     sha1_to_hex(split_index->base_sha1)),
+		    sha1_to_hex(split_index->base->sha1));
+	merge_base_index(istate);
+	return ret;
+}
+
 int is_index_unborn(struct index_state *istate)
 {
 	return (!istate->cache_nr && !istate->timestamp.sec);
 }
 
 int discard_index(struct index_state *istate)
 {
 	int i;
 
-	for (i = 0; i < istate->cache_nr; i++)
+	for (i = 0; i < istate->cache_nr; i++) {
+		if (istate->cache[i]->index &&
+		    istate->split_index &&
+		    istate->split_index->base &&
+		    istate->cache[i]->index <= istate->split_index->base->cache_nr &&
+		    istate->cache[i] == istate->split_index->base->cache[istate->cache[i]->index - 1])
+			continue;
 		free(istate->cache[i]);
+	}
 	resolve_undo_clear_index(istate);
 	istate->cache_nr = 0;
 	istate->cache_changed = 0;
 	istate->timestamp.sec = 0;
 	istate->timestamp.nsec = 0;
 	free_name_hash(istate);
 	cache_tree_free(&(istate->cache_tree));
 	istate->initialized = 0;
 	free(istate->cache);
 	istate->cache = NULL;
 	istate->cache_alloc = 0;
+	discard_split_index(istate);
 	return 0;
 }
 
 int unmerged_index(const struct index_state *istate)
 {
 	int i;
@@ -1616,13 +1679,13 @@
 	ext = htonl(ext);
 	sz = htonl(sz);
 	return ((ce_write(context, fd, &ext, 4) < 0) ||
 		(ce_write(context, fd, &sz, 4) < 0)) ? -1 : 0;
 }
 
-static int ce_flush(git_SHA_CTX *context, int fd)
+static int ce_flush(git_SHA_CTX *context, int fd, unsigned char *sha1)
 {
 	unsigned int left = write_buffer_len;
 
 	if (left) {
 		write_buffer_len = 0;
 		git_SHA1_Update(context, write_buffer, left);
@@ -1634,12 +1697,13 @@
 			return -1;
 		left = 0;
 	}
 
 	/* Append the SHA1 signature at the end */
 	git_SHA1_Final(write_buffer + left, context);
+	hashcpy(sha1, write_buffer + left);
 	left += 20;
 	return (write_in_full(fd, write_buffer, left) != left) ? -1 : 0;
 }
 
 static void ce_smudge_racily_clean_entry(struct cache_entry *ce)
 {
@@ -1705,13 +1769,13 @@
 	ondisk->mode = htonl(ce->ce_mode);
 	ondisk->uid  = htonl(ce->ce_stat_data.sd_uid);
 	ondisk->gid  = htonl(ce->ce_stat_data.sd_gid);
 	ondisk->size = htonl(ce->ce_stat_data.sd_size);
 	hashcpy(ondisk->sha1, ce->sha1);
 
-	flags = ce->ce_flags;
+	flags = ce->ce_flags & ~CE_NAMEMASK;
 	flags |= (ce_namelen(ce) >= CE_NAMEMASK ? CE_NAMEMASK : ce_namelen(ce));
 	ondisk->flags = htons(flags);
 	if (ce->ce_flags & CE_EXTENDED) {
 		struct ondisk_cache_entry_extended *ondisk2;
 		ondisk2 = (struct ondisk_cache_entry_extended *)ondisk;
 		ondisk2->flags2 = htons((ce->ce_flags & CE_EXTENDED_FLAGS) >> 16);
@@ -1724,15 +1788,21 @@
 
 static int ce_write_entry(git_SHA_CTX *c, int fd, struct cache_entry *ce,
 			  struct strbuf *previous_name)
 {
 	int size;
 	struct ondisk_cache_entry *ondisk;
+	int saved_namelen = saved_namelen; /* compiler workaround */
 	char *name;
 	int result;
 
+	if (ce->ce_flags & CE_STRIP_NAME) {
+		saved_namelen = ce_namelen(ce);
+		ce->ce_namelen = 0;
+	}
+
 	if (!previous_name) {
 		size = ondisk_ce_size(ce);
 		ondisk = xcalloc(1, size);
 		name = copy_cache_entry_to_ondisk(ondisk, ce);
 		memcpy(name, ce->name, ce_namelen(ce));
 	} else {
@@ -1758,12 +1828,16 @@
 		memcpy(name, to_remove_vi, prefix_size);
 		memcpy(name + prefix_size, ce->name + common, ce_namelen(ce) - common);
 
 		strbuf_splice(previous_name, common, to_remove,
 			      ce->name + common, ce_namelen(ce) - common);
 	}
+	if (ce->ce_flags & CE_STRIP_NAME) {
+		ce->ce_namelen = saved_namelen;
+		ce->ce_flags &= ~CE_STRIP_NAME;
+	}
 
 	result = ce_write(c, fd, ondisk, size);
 	free(ondisk);
 	return result;
 }
 
@@ -1827,19 +1901,19 @@
 /*
  * Opportunistically update the index but do not complain if we can't
  */
 void update_index_if_able(struct index_state *istate, struct lock_file *lockfile)
 {
 	if ((istate->cache_changed || has_racy_timestamp(istate)) &&
-	    verify_index(istate) && !write_index(istate, lockfile->fd))
-		commit_locked_index(lockfile);
-	else
+	    verify_index(istate) &&
+	    write_locked_index(istate, lockfile, COMMIT_LOCK))
 		rollback_lock_file(lockfile);
 }
 
-int write_index(struct index_state *istate, int newfd)
+static int do_write_index(struct index_state *istate, int newfd,
+			  int strip_extensions)
 {
 	git_SHA_CTX c;
 	struct cache_header hdr;
 	int i, err, removed, extended, hdr_version;
 	struct cache_entry **cache = istate->cache;
 	int entries = istate->cache_nr;
@@ -1855,14 +1929,17 @@
 		if (cache[i]->ce_flags & CE_EXTENDED_FLAGS) {
 			extended++;
 			cache[i]->ce_flags |= CE_EXTENDED;
 		}
 	}
 
-	if (!istate->version)
+	if (!istate->version) {
 		istate->version = get_index_format_default();
+		if (getenv("GIT_TEST_SPLIT_INDEX"))
+			init_split_index(istate);
+	}
 
 	/* demote version 3 to version 2 when the latter suffices */
 	if (istate->version == 3 || istate->version == 2)
 		istate->version = extended ? 3 : 2;
 
 	hdr_version = istate->version;
@@ -1896,41 +1973,177 @@
 		if (ce_write_entry(&c, newfd, ce, previous_name) < 0)
 			return -1;
 	}
 	strbuf_release(&previous_name_buf);
 
 	/* Write extension data here */
-	if (istate->cache_tree) {
+	if (!strip_extensions && istate->split_index) {
+		struct strbuf sb = STRBUF_INIT;
+
+		err = write_link_extension(&sb, istate) < 0 ||
+			write_index_ext_header(&c, newfd, CACHE_EXT_LINK,
+					       sb.len) < 0 ||
+			ce_write(&c, newfd, sb.buf, sb.len) < 0;
+		strbuf_release(&sb);
+		if (err)
+			return -1;
+	}
+	if (!strip_extensions && istate->cache_tree) {
 		struct strbuf sb = STRBUF_INIT;
 
 		cache_tree_write(&sb, istate->cache_tree);
 		err = write_index_ext_header(&c, newfd, CACHE_EXT_TREE, sb.len) < 0
 			|| ce_write(&c, newfd, sb.buf, sb.len) < 0;
 		strbuf_release(&sb);
 		if (err)
 			return -1;
 	}
-	if (istate->resolve_undo) {
+	if (!strip_extensions && istate->resolve_undo) {
 		struct strbuf sb = STRBUF_INIT;
 
 		resolve_undo_write(&sb, istate->resolve_undo);
 		err = write_index_ext_header(&c, newfd, CACHE_EXT_RESOLVE_UNDO,
 					     sb.len) < 0
 			|| ce_write(&c, newfd, sb.buf, sb.len) < 0;
 		strbuf_release(&sb);
 		if (err)
 			return -1;
 	}
 
-	if (ce_flush(&c, newfd) || fstat(newfd, &st))
+	if (ce_flush(&c, newfd, istate->sha1) || fstat(newfd, &st))
 		return -1;
 	istate->timestamp.sec = (unsigned int)st.st_mtime;
 	istate->timestamp.nsec = ST_MTIME_NSEC(st);
 	return 0;
 }
 
+void set_alternate_index_output(const char *name)
+{
+	alternate_index_output = name;
+}
+
+static int commit_locked_index(struct lock_file *lk)
+{
+	if (alternate_index_output) {
+		if (lk->fd >= 0 && close_lock_file(lk))
+			return -1;
+		if (rename(lk->filename, alternate_index_output))
+			return -1;
+		lk->filename[0] = 0;
+		return 0;
+	} else {
+		return commit_lock_file(lk);
+	}
+}
+
+static int do_write_locked_index(struct index_state *istate, struct lock_file *lock,
+				 unsigned flags)
+{
+	int ret = do_write_index(istate, lock->fd, 0);
+	if (ret)
+		return ret;
+	assert((flags & (COMMIT_LOCK | CLOSE_LOCK)) !=
+	       (COMMIT_LOCK | CLOSE_LOCK));
+	if (flags & COMMIT_LOCK)
+		return commit_locked_index(lock);
+	else if (flags & CLOSE_LOCK)
+		return close_lock_file(lock);
+	else
+		return ret;
+}
+
+static int write_split_index(struct index_state *istate,
+			     struct lock_file *lock,
+			     unsigned flags)
+{
+	int ret;
+	prepare_to_write_split_index(istate);
+	ret = do_write_locked_index(istate, lock, flags);
+	finish_writing_split_index(istate);
+	return ret;
+}
+
+static char *temporary_sharedindex;
+
+static void remove_temporary_sharedindex(void)
+{
+	if (temporary_sharedindex) {
+		unlink_or_warn(temporary_sharedindex);
+		free(temporary_sharedindex);
+		temporary_sharedindex = NULL;
+	}
+}
+
+static void remove_temporary_sharedindex_on_signal(int signo)
+{
+	remove_temporary_sharedindex();
+	sigchain_pop(signo);
+	raise(signo);
+}
+
+static int write_shared_index(struct index_state *istate,
+			      struct lock_file *lock, unsigned flags)
+{
+	struct split_index *si = istate->split_index;
+	static int installed_handler;
+	int fd, ret;
+
+	temporary_sharedindex = git_pathdup("sharedindex_XXXXXX");
+	fd = mkstemp(temporary_sharedindex);
+	if (fd < 0) {
+		free(temporary_sharedindex);
+		temporary_sharedindex = NULL;
+		hashclr(si->base_sha1);
+		return do_write_locked_index(istate, lock, flags);
+	}
+	if (!installed_handler) {
+		atexit(remove_temporary_sharedindex);
+		sigchain_push_common(remove_temporary_sharedindex_on_signal);
+	}
+	move_cache_to_base_index(istate);
+	ret = do_write_index(si->base, fd, 1);
+	close(fd);
+	if (ret) {
+		remove_temporary_sharedindex();
+		return ret;
+	}
+	ret = rename(temporary_sharedindex,
+		     git_path("sharedindex.%s", sha1_to_hex(si->base->sha1)));
+	free(temporary_sharedindex);
+	temporary_sharedindex = NULL;
+	if (!ret)
+		hashcpy(si->base_sha1, si->base->sha1);
+	return ret;
+}
+
+int write_locked_index(struct index_state *istate, struct lock_file *lock,
+		       unsigned flags)
+{
+	struct split_index *si = istate->split_index;
+
+	if (!si || alternate_index_output ||
+	    (istate->cache_changed & ~EXTMASK)) {
+		if (si)
+			hashclr(si->base_sha1);
+		return do_write_locked_index(istate, lock, flags);
+	}
+
+	if (getenv("GIT_TEST_SPLIT_INDEX")) {
+		int v = si->base_sha1[0];
+		if ((v & 15) < 6)
+			istate->cache_changed |= SPLIT_INDEX_ORDERED;
+	}
+	if (istate->cache_changed & SPLIT_INDEX_ORDERED) {
+		int ret = write_shared_index(istate, lock, flags);
+		if (ret)
+			return ret;
+	}
+
+	return write_split_index(istate, lock, flags);
+}
+
 /*
  * Read the index file that is potentially unmerged into given
  * index_state, dropping any unmerged entries.  Returns true if
  * the index is unmerged.  Callers who want to refuse to work
  * from an unmerged state can call this and check its return value,
  * instead of calling read_cache().
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/read-cache.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/read-cache.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/read-cache.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/read-cache.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/reflog-walk.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/reflog-walk.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/reflog-walk.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/reflog-walk.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/refs.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/refs.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/refs.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/refs.c	2014-08-16 06:26:55.000000000 +0800
@@ -3,57 +3,68 @@
 #include "object.h"
 #include "tag.h"
 #include "dir.h"
 #include "string-list.h"
 
 /*
- * Make sure "ref" is something reasonable to have under ".git/refs/";
- * We do not like it if:
+ * How to handle various characters in refnames:
+ * 0: An acceptable character for refs
+ * 1: End-of-component
+ * 2: ., look for a preceding . to reject .. in refs
+ * 3: {, look for a preceding @ to reject @{ in refs
+ * 4: A bad character: ASCII control characters, "~", "^", ":" or SP
+ */
+static unsigned char refname_disposition[256] = {
+	1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
+	4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
+	4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 1,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 4
+};
+
+/*
+ * Try to read one refname component from the front of refname.
+ * Return the length of the component found, or -1 if the component is
+ * not legal.  It is legal if it is something reasonable to have under
+ * ".git/refs/"; We do not like it if:
  *
  * - any path component of it begins with ".", or
  * - it has double dots "..", or
  * - it has ASCII control character, "~", "^", ":" or SP, anywhere, or
  * - it ends with a "/".
  * - it ends with ".lock"
  * - it contains a "\" (backslash)
  */
-
-/* Return true iff ch is not allowed in reference names. */
-static inline int bad_ref_char(int ch)
-{
-	if (((unsigned) ch) <= ' ' || ch == 0x7f ||
-	    ch == '~' || ch == '^' || ch == ':' || ch == '\\')
-		return 1;
-	/* 2.13 Pattern Matching Notation */
-	if (ch == '*' || ch == '?' || ch == '[') /* Unsupported */
-		return 1;
-	return 0;
-}
-
-/*
- * Try to read one refname component from the front of refname.  Return
- * the length of the component found, or -1 if the component is not
- * legal.
- */
 static int check_refname_component(const char *refname, int flags)
 {
 	const char *cp;
 	char last = '\0';
 
 	for (cp = refname; ; cp++) {
-		char ch = *cp;
-		if (ch == '\0' || ch == '/')
+		int ch = *cp & 255;
+		unsigned char disp = refname_disposition[ch];
+		switch (disp) {
+		case 1:
+			goto out;
+		case 2:
+			if (last == '.')
+				return -1; /* Refname contains "..". */
+			break;
+		case 3:
+			if (last == '@')
+				return -1; /* Refname contains "@{". */
 			break;
-		if (bad_ref_char(ch))
-			return -1; /* Illegal character in refname. */
-		if (last == '.' && ch == '.')
-			return -1; /* Refname contains "..". */
-		if (last == '@' && ch == '{')
-			return -1; /* Refname contains "@{". */
+		case 4:
+			return -1;
+		}
 		last = ch;
 	}
+out:
 	if (cp == refname)
 		return 0; /* Component has zero length. */
 	if (refname[0] == '.') {
 		if (!(flags & REFNAME_DOT_COMPONENT))
 			return -1; /* Component starts with '.'. */
 		/*
@@ -1148,13 +1159,13 @@
 		struct stat st;
 		int flag;
 		const char *refdir;
 
 		if (de->d_name[0] == '.')
 			continue;
-		if (has_extension(de->d_name, ".lock"))
+		if (ends_with(de->d_name, ".lock"))
 			continue;
 		strbuf_addstr(&refname, de->d_name);
 		refdir = *refs->name
 			? git_path_submodule(refs->name, "%s", refname.buf)
 			: git_path("%s", refname.buf);
 		if (stat(refdir, &st) < 0) {
@@ -1320,33 +1331,38 @@
 	} else {
 		hashclr(sha1);
 		return refname;
 	}
 }
 
+/* This function needs to return a meaningful errno on failure */
 const char *resolve_ref_unsafe(const char *refname, unsigned char *sha1, int reading, int *flag)
 {
 	int depth = MAXDEPTH;
 	ssize_t len;
 	char buffer[256];
 	static char refname_buffer[256];
 
 	if (flag)
 		*flag = 0;
 
-	if (check_refname_format(refname, REFNAME_ALLOW_ONELEVEL))
+	if (check_refname_format(refname, REFNAME_ALLOW_ONELEVEL)) {
+		errno = EINVAL;
 		return NULL;
+	}
 
 	for (;;) {
 		char path[PATH_MAX];
 		struct stat st;
 		char *buf;
 		int fd;
 
-		if (--depth < 0)
+		if (--depth < 0) {
+			errno = ELOOP;
 			return NULL;
+		}
 
 		git_snpath(path, sizeof(path), "%s", refname);
 
 		/*
 		 * We might have to loop back here to avoid a race
 		 * condition: first we lstat() the file, then we try
@@ -1402,15 +1418,19 @@
 				/* inconsistent with lstat; retry */
 				goto stat_ref;
 			else
 				return NULL;
 		}
 		len = read_in_full(fd, buffer, sizeof(buffer)-1);
-		close(fd);
-		if (len < 0)
+		if (len < 0) {
+			int save_errno = errno;
+			close(fd);
+			errno = save_errno;
 			return NULL;
+		}
+		close(fd);
 		while (len && isspace(buffer[len-1]))
 			len--;
 		buffer[len] = '\0';
 
 		/*
 		 * Is it a symbolic ref?
@@ -1421,24 +1441,26 @@
 			 * line containing other data.
 			 */
 			if (get_sha1_hex(buffer, sha1) ||
 			    (buffer[40] != '\0' && !isspace(buffer[40]))) {
 				if (flag)
 					*flag |= REF_ISBROKEN;
+				errno = EINVAL;
 				return NULL;
 			}
 			return refname;
 		}
 		if (flag)
 			*flag |= REF_ISSYMREF;
 		buf = buffer + 4;
 		while (isspace(*buf))
 			buf++;
 		if (check_refname_format(buf, REFNAME_ALLOW_ONELEVEL)) {
 			if (flag)
 				*flag |= REF_ISBROKEN;
+			errno = EINVAL;
 			return NULL;
 		}
 		refname = strcpy(refname_buffer, buf);
 	}
 }
 
@@ -1917,44 +1939,50 @@
 		}
 	}
 
 	return 0;
 }
 
+/* This function should make sure errno is meaningful on error */
 static struct ref_lock *verify_lock(struct ref_lock *lock,
 	const unsigned char *old_sha1, int mustexist)
 {
 	if (read_ref_full(lock->ref_name, lock->old_sha1, mustexist, NULL)) {
+		int save_errno = errno;
 		error("Can't verify ref %s", lock->ref_name);
 		unlock_ref(lock);
+		errno = save_errno;
 		return NULL;
 	}
 	if (hashcmp(lock->old_sha1, old_sha1)) {
 		error("Ref %s is at %s but expected %s", lock->ref_name,
 			sha1_to_hex(lock->old_sha1), sha1_to_hex(old_sha1));
 		unlock_ref(lock);
+		errno = EBUSY;
 		return NULL;
 	}
 	return lock;
 }
 
 static int remove_empty_directories(const char *file)
 {
 	/* we want to create a file but there is a directory there;
 	 * if that is an empty directory (or a directory that contains
 	 * only empty directories), remove them.
 	 */
 	struct strbuf path;
-	int result;
+	int result, save_errno;
 
 	strbuf_init(&path, 20);
 	strbuf_addstr(&path, file);
 
 	result = remove_dir_recursively(&path, REMOVE_DIR_EMPTY_ONLY);
+	save_errno = errno;
 
 	strbuf_release(&path);
+	errno = save_errno;
 
 	return result;
 }
 
 /*
  * *string and *len will only be substituted, and *string returned (for
@@ -2012,27 +2040,23 @@
 	char *last_branch = substitute_branch_name(&str, &len);
 	const char **p;
 	int logs_found = 0;
 
 	*log = NULL;
 	for (p = ref_rev_parse_rules; *p; p++) {
-		struct stat st;
 		unsigned char hash[20];
 		char path[PATH_MAX];
 		const char *ref, *it;
 
 		mksnpath(path, sizeof(path), *p, len, str);
 		ref = resolve_ref_unsafe(path, hash, 1, NULL);
 		if (!ref)
 			continue;
-		if (!stat(git_path("logs/%s", path), &st) &&
-		    S_ISREG(st.st_mode))
+		if (reflog_exists(path))
 			it = path;
-		else if (strcmp(ref, path) &&
-			 !stat(git_path("logs/%s", ref), &st) &&
-			 S_ISREG(st.st_mode))
+		else if (strcmp(ref, path) && reflog_exists(ref))
 			it = ref;
 		else
 			continue;
 		if (!logs_found++) {
 			*log = xstrdup(it);
 			hashcpy(sha1, hash);
@@ -2041,12 +2065,13 @@
 			break;
 	}
 	free(last_branch);
 	return logs_found;
 }
 
+/* This function should make sure errno is meaningful on error */
 static struct ref_lock *lock_ref_sha1_basic(const char *refname,
 					    const unsigned char *old_sha1,
 					    int flags, int *type_p)
 {
 	char *ref_file;
 	const char *orig_refname = refname;
@@ -2201,12 +2226,13 @@
 	write_packed_entry(*fd, entry->name, entry->u.value.sha1,
 			   peel_status == PEEL_PEELED ?
 			   entry->u.value.peeled : NULL);
 	return 0;
 }
 
+/* This should return a meaningful errno on failure */
 int lock_packed_refs(int flags)
 {
 	struct packed_ref_cache *packed_ref_cache;
 
 	if (hold_lock_file_for_update(&packlock, git_path("packed-refs"), flags) < 0)
 		return -1;
@@ -2220,30 +2246,38 @@
 	packed_ref_cache->lock = &packlock;
 	/* Increment the reference count to prevent it from being freed: */
 	acquire_packed_ref_cache(packed_ref_cache);
 	return 0;
 }
 
+/*
+ * Commit the packed refs changes.
+ * On error we must make sure that errno contains a meaningful value.
+ */
 int commit_packed_refs(void)
 {
 	struct packed_ref_cache *packed_ref_cache =
 		get_packed_ref_cache(&ref_cache);
 	int error = 0;
+	int save_errno = 0;
 
 	if (!packed_ref_cache->lock)
 		die("internal error: packed-refs not locked");
 	write_or_die(packed_ref_cache->lock->fd,
 		     PACKED_REFS_HEADER, strlen(PACKED_REFS_HEADER));
 
 	do_for_each_entry_in_dir(get_packed_ref_dir(packed_ref_cache),
 				 0, write_packed_entry_fn,
 				 &packed_ref_cache->lock->fd);
-	if (commit_lock_file(packed_ref_cache->lock))
+	if (commit_lock_file(packed_ref_cache->lock)) {
+		save_errno = errno;
 		error = -1;
+	}
 	packed_ref_cache->lock = NULL;
 	release_packed_ref_cache(packed_ref_cache);
+	errno = save_errno;
 	return error;
 }
 
 void rollback_packed_refs(void)
 {
 	struct packed_ref_cache *packed_ref_cache =
@@ -2444,29 +2478,34 @@
 		return 0;
 	}
 
 	return 0;
 }
 
-int repack_without_refs(const char **refnames, int n)
+int repack_without_refs(const char **refnames, int n, struct strbuf *err)
 {
 	struct ref_dir *packed;
 	struct string_list refs_to_delete = STRING_LIST_INIT_DUP;
 	struct string_list_item *ref_to_delete;
-	int i, removed = 0;
+	int i, ret, removed = 0;
 
 	/* Look for a packed ref */
 	for (i = 0; i < n; i++)
 		if (get_packed_ref(refnames[i]))
 			break;
 
 	/* Avoid locking if we have nothing to do */
 	if (i == n)
 		return 0; /* no refname exists in packed refs */
 
 	if (lock_packed_refs(0)) {
+		if (err) {
+			unable_to_lock_message(git_path("packed-refs"), errno,
+					       err);
+			return -1;
+		}
 		unable_to_lock_error(git_path("packed-refs"), errno);
 		return error("cannot delete '%s' from packed refs", refnames[i]);
 	}
 	packed = get_packed_refs(&ref_cache);
 
 	/* Remove refnames from the cache */
@@ -2487,18 +2526,22 @@
 	for_each_string_list_item(ref_to_delete, &refs_to_delete) {
 		if (remove_entry(packed, ref_to_delete->string) == -1)
 			die("internal error");
 	}
 
 	/* Write what remains */
-	return commit_packed_refs();
+	ret = commit_packed_refs();
+	if (ret && err)
+		strbuf_addf(err, "unable to overwrite old ref-pack file: %s",
+			    strerror(errno));
+	return ret;
 }
 
 static int repack_without_ref(const char *refname)
 {
-	return repack_without_refs(&refname, 1);
+	return repack_without_refs(&refname, 1, NULL);
 }
 
 static int delete_ref_loose(struct ref_lock *lock, int flag)
 {
 	if (!(flag & REF_ISPACKED) || flag & REF_ISSYMREF) {
 		/* loose */
@@ -2730,44 +2773,55 @@
 	while (buf < cp && isspace(cp[-1]))
 		cp--;
 	*cp++ = '\n';
 	return cp - buf;
 }
 
+/* This function must set a meaningful errno on failure */
 int log_ref_setup(const char *refname, char *logfile, int bufsize)
 {
 	int logfd, oflags = O_APPEND | O_WRONLY;
 
 	git_snpath(logfile, bufsize, "logs/%s", refname);
 	if (log_all_ref_updates &&
 	    (starts_with(refname, "refs/heads/") ||
 	     starts_with(refname, "refs/remotes/") ||
 	     starts_with(refname, "refs/notes/") ||
 	     !strcmp(refname, "HEAD"))) {
-		if (safe_create_leading_directories(logfile) < 0)
-			return error("unable to create directory for %s",
-				     logfile);
+		if (safe_create_leading_directories(logfile) < 0) {
+			int save_errno = errno;
+			error("unable to create directory for %s", logfile);
+			errno = save_errno;
+			return -1;
+		}
 		oflags |= O_CREAT;
 	}
 
 	logfd = open(logfile, oflags, 0666);
 	if (logfd < 0) {
 		if (!(oflags & O_CREAT) && errno == ENOENT)
 			return 0;
 
 		if ((oflags & O_CREAT) && errno == EISDIR) {
 			if (remove_empty_directories(logfile)) {
-				return error("There are still logs under '%s'",
-					     logfile);
+				int save_errno = errno;
+				error("There are still logs under '%s'",
+				      logfile);
+				errno = save_errno;
+				return -1;
 			}
 			logfd = open(logfile, oflags, 0666);
 		}
 
-		if (logfd < 0)
-			return error("Unable to append to %s: %s",
-				     logfile, strerror(errno));
+		if (logfd < 0) {
+			int save_errno = errno;
+			error("Unable to append to %s: %s", logfile,
+			      strerror(errno));
+			errno = save_errno;
+			return -1;
+		}
 	}
 
 	adjust_shared_perm(logfile);
 	close(logfd);
 	return 0;
 }
@@ -2801,52 +2855,70 @@
 		      sha1_to_hex(new_sha1),
 		      committer);
 	if (msglen)
 		len += copy_msg(logrec + len - 1, msg) - 1;
 	written = len <= maxlen ? write_in_full(logfd, logrec, len) : -1;
 	free(logrec);
-	if (close(logfd) != 0 || written != len)
-		return error("Unable to append to %s", log_file);
+	if (written != len) {
+		int save_errno = errno;
+		close(logfd);
+		error("Unable to append to %s", log_file);
+		errno = save_errno;
+		return -1;
+	}
+	if (close(logfd)) {
+		int save_errno = errno;
+		error("Unable to append to %s", log_file);
+		errno = save_errno;
+		return -1;
+	}
 	return 0;
 }
 
-static int is_branch(const char *refname)
+int is_branch(const char *refname)
 {
 	return !strcmp(refname, "HEAD") || starts_with(refname, "refs/heads/");
 }
 
+/* This function must return a meaningful errno */
 int write_ref_sha1(struct ref_lock *lock,
 	const unsigned char *sha1, const char *logmsg)
 {
 	static char term = '\n';
 	struct object *o;
 
-	if (!lock)
+	if (!lock) {
+		errno = EINVAL;
 		return -1;
+	}
 	if (!lock->force_write && !hashcmp(lock->old_sha1, sha1)) {
 		unlock_ref(lock);
 		return 0;
 	}
 	o = parse_object(sha1);
 	if (!o) {
 		error("Trying to write ref %s with nonexistent object %s",
 			lock->ref_name, sha1_to_hex(sha1));
 		unlock_ref(lock);
+		errno = EINVAL;
 		return -1;
 	}
 	if (o->type != OBJ_COMMIT && is_branch(lock->ref_name)) {
 		error("Trying to write non-commit object %s to branch %s",
 			sha1_to_hex(sha1), lock->ref_name);
 		unlock_ref(lock);
+		errno = EINVAL;
 		return -1;
 	}
 	if (write_in_full(lock->lock_fd, sha1_to_hex(sha1), 40) != 40 ||
-	    write_in_full(lock->lock_fd, &term, 1) != 1
-		|| close_ref(lock) < 0) {
+	    write_in_full(lock->lock_fd, &term, 1) != 1 ||
+	    close_ref(lock) < 0) {
+		int save_errno = errno;
 		error("Couldn't write %s", lock->lk->filename);
 		unlock_ref(lock);
+		errno = save_errno;
 		return -1;
 	}
 	clear_loose_ref_cache(&ref_cache);
 	if (log_ref_write(lock->ref_name, lock->old_sha1, sha1, logmsg) < 0 ||
 	    (strcmp(lock->ref_name, lock->orig_ref_name) &&
 	     log_ref_write(lock->orig_ref_name, lock->old_sha1, sha1, logmsg) < 0)) {
@@ -2943,128 +3015,139 @@
 		log_ref_write(ref_target, old_sha1, new_sha1, logmsg);
 
 	free(git_HEAD);
 	return 0;
 }
 
-static char *ref_msg(const char *line, const char *endp)
-{
-	const char *ep;
-	line += 82;
-	ep = memchr(line, '\n', endp - line);
-	if (!ep)
-		ep = endp;
-	return xmemdupz(line, ep - line);
+struct read_ref_at_cb {
+	const char *refname;
+	unsigned long at_time;
+	int cnt;
+	int reccnt;
+	unsigned char *sha1;
+	int found_it;
+
+	unsigned char osha1[20];
+	unsigned char nsha1[20];
+	int tz;
+	unsigned long date;
+	char **msg;
+	unsigned long *cutoff_time;
+	int *cutoff_tz;
+	int *cutoff_cnt;
+};
+
+static int read_ref_at_ent(unsigned char *osha1, unsigned char *nsha1,
+		const char *email, unsigned long timestamp, int tz,
+		const char *message, void *cb_data)
+{
+	struct read_ref_at_cb *cb = cb_data;
+
+	cb->reccnt++;
+	cb->tz = tz;
+	cb->date = timestamp;
+
+	if (timestamp <= cb->at_time || cb->cnt == 0) {
+		if (cb->msg)
+			*cb->msg = xstrdup(message);
+		if (cb->cutoff_time)
+			*cb->cutoff_time = timestamp;
+		if (cb->cutoff_tz)
+			*cb->cutoff_tz = tz;
+		if (cb->cutoff_cnt)
+			*cb->cutoff_cnt = cb->reccnt - 1;
+		/*
+		 * we have not yet updated cb->[n|o]sha1 so they still
+		 * hold the values for the previous record.
+		 */
+		if (!is_null_sha1(cb->osha1)) {
+			hashcpy(cb->sha1, nsha1);
+			if (hashcmp(cb->osha1, nsha1))
+				warning("Log for ref %s has gap after %s.",
+					cb->refname, show_date(cb->date, cb->tz, DATE_RFC2822));
+		}
+		else if (cb->date == cb->at_time)
+			hashcpy(cb->sha1, nsha1);
+		else if (hashcmp(nsha1, cb->sha1))
+			warning("Log for ref %s unexpectedly ended on %s.",
+				cb->refname, show_date(cb->date, cb->tz,
+						   DATE_RFC2822));
+		hashcpy(cb->osha1, osha1);
+		hashcpy(cb->nsha1, nsha1);
+		cb->found_it = 1;
+		return 1;
+	}
+	hashcpy(cb->osha1, osha1);
+	hashcpy(cb->nsha1, nsha1);
+	if (cb->cnt > 0)
+		cb->cnt--;
+	return 0;
+}
+
+static int read_ref_at_ent_oldest(unsigned char *osha1, unsigned char *nsha1,
+				  const char *email, unsigned long timestamp,
+				  int tz, const char *message, void *cb_data)
+{
+	struct read_ref_at_cb *cb = cb_data;
+
+	if (cb->msg)
+		*cb->msg = xstrdup(message);
+	if (cb->cutoff_time)
+		*cb->cutoff_time = timestamp;
+	if (cb->cutoff_tz)
+		*cb->cutoff_tz = tz;
+	if (cb->cutoff_cnt)
+		*cb->cutoff_cnt = cb->reccnt;
+	hashcpy(cb->sha1, osha1);
+	if (is_null_sha1(cb->sha1))
+		hashcpy(cb->sha1, nsha1);
+	/* We just want the first entry */
+	return 1;
 }
 
 int read_ref_at(const char *refname, unsigned long at_time, int cnt,
 		unsigned char *sha1, char **msg,
 		unsigned long *cutoff_time, int *cutoff_tz, int *cutoff_cnt)
 {
-	const char *logfile, *logdata, *logend, *rec, *lastgt, *lastrec;
-	char *tz_c;
-	int logfd, tz, reccnt = 0;
-	struct stat st;
-	unsigned long date;
-	unsigned char logged_sha1[20];
-	void *log_mapped;
-	size_t mapsz;
+	struct read_ref_at_cb cb;
 
-	logfile = git_path("logs/%s", refname);
-	logfd = open(logfile, O_RDONLY, 0);
-	if (logfd < 0)
-		die_errno("Unable to read log '%s'", logfile);
-	fstat(logfd, &st);
-	if (!st.st_size)
-		die("Log %s is empty.", logfile);
-	mapsz = xsize_t(st.st_size);
-	log_mapped = xmmap(NULL, mapsz, PROT_READ, MAP_PRIVATE, logfd, 0);
-	logdata = log_mapped;
-	close(logfd);
+	memset(&cb, 0, sizeof(cb));
+	cb.refname = refname;
+	cb.at_time = at_time;
+	cb.cnt = cnt;
+	cb.msg = msg;
+	cb.cutoff_time = cutoff_time;
+	cb.cutoff_tz = cutoff_tz;
+	cb.cutoff_cnt = cutoff_cnt;
+	cb.sha1 = sha1;
+
+	for_each_reflog_ent_reverse(refname, read_ref_at_ent, &cb);
+
+	if (!cb.reccnt)
+		die("Log for %s is empty.", refname);
+	if (cb.found_it)
+		return 0;
+
+	for_each_reflog_ent(refname, read_ref_at_ent_oldest, &cb);
 
-	lastrec = NULL;
-	rec = logend = logdata + st.st_size;
-	while (logdata < rec) {
-		reccnt++;
-		if (logdata < rec && *(rec-1) == '\n')
-			rec--;
-		lastgt = NULL;
-		while (logdata < rec && *(rec-1) != '\n') {
-			rec--;
-			if (*rec == '>')
-				lastgt = rec;
-		}
-		if (!lastgt)
-			die("Log %s is corrupt.", logfile);
-		date = strtoul(lastgt + 1, &tz_c, 10);
-		if (date <= at_time || cnt == 0) {
-			tz = strtoul(tz_c, NULL, 10);
-			if (msg)
-				*msg = ref_msg(rec, logend);
-			if (cutoff_time)
-				*cutoff_time = date;
-			if (cutoff_tz)
-				*cutoff_tz = tz;
-			if (cutoff_cnt)
-				*cutoff_cnt = reccnt - 1;
-			if (lastrec) {
-				if (get_sha1_hex(lastrec, logged_sha1))
-					die("Log %s is corrupt.", logfile);
-				if (get_sha1_hex(rec + 41, sha1))
-					die("Log %s is corrupt.", logfile);
-				if (hashcmp(logged_sha1, sha1)) {
-					warning("Log %s has gap after %s.",
-						logfile, show_date(date, tz, DATE_RFC2822));
-				}
-			}
-			else if (date == at_time) {
-				if (get_sha1_hex(rec + 41, sha1))
-					die("Log %s is corrupt.", logfile);
-			}
-			else {
-				if (get_sha1_hex(rec + 41, logged_sha1))
-					die("Log %s is corrupt.", logfile);
-				if (hashcmp(logged_sha1, sha1)) {
-					warning("Log %s unexpectedly ended on %s.",
-						logfile, show_date(date, tz, DATE_RFC2822));
-				}
-			}
-			munmap(log_mapped, mapsz);
-			return 0;
-		}
-		lastrec = rec;
-		if (cnt > 0)
-			cnt--;
-	}
-
-	rec = logdata;
-	while (rec < logend && *rec != '>' && *rec != '\n')
-		rec++;
-	if (rec == logend || *rec == '\n')
-		die("Log %s is corrupt.", logfile);
-	date = strtoul(rec + 1, &tz_c, 10);
-	tz = strtoul(tz_c, NULL, 10);
-	if (get_sha1_hex(logdata, sha1))
-		die("Log %s is corrupt.", logfile);
-	if (is_null_sha1(sha1)) {
-		if (get_sha1_hex(logdata + 41, sha1))
-			die("Log %s is corrupt.", logfile);
-	}
-	if (msg)
-		*msg = ref_msg(logdata, logend);
-	munmap(log_mapped, mapsz);
-
-	if (cutoff_time)
-		*cutoff_time = date;
-	if (cutoff_tz)
-		*cutoff_tz = tz;
-	if (cutoff_cnt)
-		*cutoff_cnt = reccnt;
 	return 1;
 }
 
+int reflog_exists(const char *refname)
+{
+	struct stat st;
+
+	return !lstat(git_path("logs/%s", refname), &st) &&
+		S_ISREG(st.st_mode);
+}
+
+int delete_reflog(const char *refname)
+{
+	return remove_path(git_path("logs/%s", refname));
+}
+
 static int show_one_reflog_ent(struct strbuf *sb, each_reflog_ent_fn fn, void *cb_data)
 {
 	unsigned char osha1[20], nsha1[20];
 	char *email_end, *message;
 	unsigned long timestamp;
 	int tz;
@@ -3211,13 +3294,13 @@
 
 	while ((de = readdir(d)) != NULL) {
 		struct stat st;
 
 		if (de->d_name[0] == '.')
 			continue;
-		if (has_extension(de->d_name, ".lock"))
+		if (ends_with(de->d_name, ".lock"))
 			continue;
 		strbuf_addstr(name, de->d_name);
 		if (stat(git_path("logs/%s", name->buf), &st) < 0) {
 			; /* silently ignore */
 		} else {
 			if (S_ISDIR(st.st_mode)) {
@@ -3256,143 +3339,255 @@
 {
 	struct ref_lock *lock;
 	lock = lock_any_ref_for_update(refname, oldval, flags, type_p);
 	if (!lock) {
 		const char *str = "Cannot lock the ref '%s'.";
 		switch (onerr) {
-		case MSG_ON_ERR: error(str, refname); break;
-		case DIE_ON_ERR: die(str, refname); break;
-		case QUIET_ON_ERR: break;
+		case UPDATE_REFS_MSG_ON_ERR: error(str, refname); break;
+		case UPDATE_REFS_DIE_ON_ERR: die(str, refname); break;
+		case UPDATE_REFS_QUIET_ON_ERR: break;
 		}
 	}
 	return lock;
 }
 
 static int update_ref_write(const char *action, const char *refname,
 			    const unsigned char *sha1, struct ref_lock *lock,
-			    enum action_on_err onerr)
+			    struct strbuf *err, enum action_on_err onerr)
 {
 	if (write_ref_sha1(lock, sha1, action) < 0) {
 		const char *str = "Cannot update the ref '%s'.";
+		if (err)
+			strbuf_addf(err, str, refname);
+
 		switch (onerr) {
-		case MSG_ON_ERR: error(str, refname); break;
-		case DIE_ON_ERR: die(str, refname); break;
-		case QUIET_ON_ERR: break;
+		case UPDATE_REFS_MSG_ON_ERR: error(str, refname); break;
+		case UPDATE_REFS_DIE_ON_ERR: die(str, refname); break;
+		case UPDATE_REFS_QUIET_ON_ERR: break;
 		}
 		return 1;
 	}
 	return 0;
 }
 
+/**
+ * Information needed for a single ref update.  Set new_sha1 to the
+ * new value or to zero to delete the ref.  To check the old value
+ * while locking the ref, set have_old to 1 and set old_sha1 to the
+ * value or to zero to ensure the ref does not exist before update.
+ */
+struct ref_update {
+	unsigned char new_sha1[20];
+	unsigned char old_sha1[20];
+	int flags; /* REF_NODEREF? */
+	int have_old; /* 1 if old_sha1 is valid, 0 otherwise */
+	struct ref_lock *lock;
+	int type;
+	const char refname[FLEX_ARRAY];
+};
+
+/*
+ * Data structure for holding a reference transaction, which can
+ * consist of checks and updates to multiple references, carried out
+ * as atomically as possible.  This structure is opaque to callers.
+ */
+struct ref_transaction {
+	struct ref_update **updates;
+	size_t alloc;
+	size_t nr;
+};
+
+struct ref_transaction *ref_transaction_begin(void)
+{
+	return xcalloc(1, sizeof(struct ref_transaction));
+}
+
+void ref_transaction_free(struct ref_transaction *transaction)
+{
+	int i;
+
+	if (!transaction)
+		return;
+
+	for (i = 0; i < transaction->nr; i++)
+		free(transaction->updates[i]);
+
+	free(transaction->updates);
+	free(transaction);
+}
+
+static struct ref_update *add_update(struct ref_transaction *transaction,
+				     const char *refname)
+{
+	size_t len = strlen(refname);
+	struct ref_update *update = xcalloc(1, sizeof(*update) + len + 1);
+
+	strcpy((char *)update->refname, refname);
+	ALLOC_GROW(transaction->updates, transaction->nr + 1, transaction->alloc);
+	transaction->updates[transaction->nr++] = update;
+	return update;
+}
+
+int ref_transaction_update(struct ref_transaction *transaction,
+			   const char *refname,
+			   const unsigned char *new_sha1,
+			   const unsigned char *old_sha1,
+			   int flags, int have_old,
+			   struct strbuf *err)
+{
+	struct ref_update *update;
+
+	if (have_old && !old_sha1)
+		die("BUG: have_old is true but old_sha1 is NULL");
+
+	update = add_update(transaction, refname);
+	hashcpy(update->new_sha1, new_sha1);
+	update->flags = flags;
+	update->have_old = have_old;
+	if (have_old)
+		hashcpy(update->old_sha1, old_sha1);
+	return 0;
+}
+
+void ref_transaction_create(struct ref_transaction *transaction,
+			    const char *refname,
+			    const unsigned char *new_sha1,
+			    int flags)
+{
+	struct ref_update *update = add_update(transaction, refname);
+
+	assert(!is_null_sha1(new_sha1));
+	hashcpy(update->new_sha1, new_sha1);
+	hashclr(update->old_sha1);
+	update->flags = flags;
+	update->have_old = 1;
+}
+
+void ref_transaction_delete(struct ref_transaction *transaction,
+			    const char *refname,
+			    const unsigned char *old_sha1,
+			    int flags, int have_old)
+{
+	struct ref_update *update = add_update(transaction, refname);
+
+	update->flags = flags;
+	update->have_old = have_old;
+	if (have_old) {
+		assert(!is_null_sha1(old_sha1));
+		hashcpy(update->old_sha1, old_sha1);
+	}
+}
+
 int update_ref(const char *action, const char *refname,
 	       const unsigned char *sha1, const unsigned char *oldval,
 	       int flags, enum action_on_err onerr)
 {
 	struct ref_lock *lock;
 	lock = update_ref_lock(refname, oldval, flags, NULL, onerr);
 	if (!lock)
 		return 1;
-	return update_ref_write(action, refname, sha1, lock, onerr);
+	return update_ref_write(action, refname, sha1, lock, NULL, onerr);
 }
 
 static int ref_update_compare(const void *r1, const void *r2)
 {
 	const struct ref_update * const *u1 = r1;
 	const struct ref_update * const *u2 = r2;
-	return strcmp((*u1)->ref_name, (*u2)->ref_name);
+	return strcmp((*u1)->refname, (*u2)->refname);
 }
 
 static int ref_update_reject_duplicates(struct ref_update **updates, int n,
-					enum action_on_err onerr)
+					struct strbuf *err)
 {
 	int i;
 	for (i = 1; i < n; i++)
-		if (!strcmp(updates[i - 1]->ref_name, updates[i]->ref_name)) {
+		if (!strcmp(updates[i - 1]->refname, updates[i]->refname)) {
 			const char *str =
 				"Multiple updates for ref '%s' not allowed.";
-			switch (onerr) {
-			case MSG_ON_ERR:
-				error(str, updates[i]->ref_name); break;
-			case DIE_ON_ERR:
-				die(str, updates[i]->ref_name); break;
-			case QUIET_ON_ERR:
-				break;
-			}
+			if (err)
+				strbuf_addf(err, str, updates[i]->refname);
+
 			return 1;
 		}
 	return 0;
 }
 
-int update_refs(const char *action, const struct ref_update **updates_orig,
-		int n, enum action_on_err onerr)
+int ref_transaction_commit(struct ref_transaction *transaction,
+			   const char *msg, struct strbuf *err)
 {
 	int ret = 0, delnum = 0, i;
-	struct ref_update **updates;
-	int *types;
-	struct ref_lock **locks;
 	const char **delnames;
+	int n = transaction->nr;
+	struct ref_update **updates = transaction->updates;
 
-	if (!updates_orig || !n)
+	if (!n)
 		return 0;
 
 	/* Allocate work space */
-	updates = xmalloc(sizeof(*updates) * n);
-	types = xmalloc(sizeof(*types) * n);
-	locks = xcalloc(n, sizeof(*locks));
 	delnames = xmalloc(sizeof(*delnames) * n);
 
 	/* Copy, sort, and reject duplicate refs */
-	memcpy(updates, updates_orig, sizeof(*updates) * n);
 	qsort(updates, n, sizeof(*updates), ref_update_compare);
-	ret = ref_update_reject_duplicates(updates, n, onerr);
+	ret = ref_update_reject_duplicates(updates, n, err);
 	if (ret)
 		goto cleanup;
 
 	/* Acquire all locks while verifying old values */
 	for (i = 0; i < n; i++) {
-		locks[i] = update_ref_lock(updates[i]->ref_name,
-					   (updates[i]->have_old ?
-					    updates[i]->old_sha1 : NULL),
-					   updates[i]->flags,
-					   &types[i], onerr);
-		if (!locks[i]) {
+		struct ref_update *update = updates[i];
+
+		update->lock = update_ref_lock(update->refname,
+					       (update->have_old ?
+						update->old_sha1 : NULL),
+					       update->flags,
+					       &update->type,
+					       UPDATE_REFS_QUIET_ON_ERR);
+		if (!update->lock) {
+			if (err)
+				strbuf_addf(err, "Cannot lock the ref '%s'.",
+					    update->refname);
 			ret = 1;
 			goto cleanup;
 		}
 	}
 
 	/* Perform updates first so live commits remain referenced */
-	for (i = 0; i < n; i++)
-		if (!is_null_sha1(updates[i]->new_sha1)) {
-			ret = update_ref_write(action,
-					       updates[i]->ref_name,
-					       updates[i]->new_sha1,
-					       locks[i], onerr);
-			locks[i] = NULL; /* freed by update_ref_write */
+	for (i = 0; i < n; i++) {
+		struct ref_update *update = updates[i];
+
+		if (!is_null_sha1(update->new_sha1)) {
+			ret = update_ref_write(msg,
+					       update->refname,
+					       update->new_sha1,
+					       update->lock, err,
+					       UPDATE_REFS_QUIET_ON_ERR);
+			update->lock = NULL; /* freed by update_ref_write */
 			if (ret)
 				goto cleanup;
 		}
+	}
 
 	/* Perform deletes now that updates are safely completed */
-	for (i = 0; i < n; i++)
-		if (locks[i]) {
-			delnames[delnum++] = locks[i]->ref_name;
-			ret |= delete_ref_loose(locks[i], types[i]);
+	for (i = 0; i < n; i++) {
+		struct ref_update *update = updates[i];
+
+		if (update->lock) {
+			delnames[delnum++] = update->lock->ref_name;
+			ret |= delete_ref_loose(update->lock, update->type);
 		}
-	ret |= repack_without_refs(delnames, delnum);
+	}
+
+	ret |= repack_without_refs(delnames, delnum, err);
 	for (i = 0; i < delnum; i++)
 		unlink_or_warn(git_path("logs/%s", delnames[i]));
 	clear_loose_ref_cache(&ref_cache);
 
 cleanup:
 	for (i = 0; i < n; i++)
-		if (locks[i])
-			unlock_ref(locks[i]);
-	free(updates);
-	free(types);
-	free(locks);
+		if (updates[i]->lock)
+			unlock_ref(updates[i]->lock);
 	free(delnames);
 	return ret;
 }
 
 char *shorten_unambiguous_ref(const char *refname, int strict)
 {
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/refs.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/refs.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/refs.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/refs.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/refs.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/refs.h	2014-08-16 06:26:55.000000000 +0800
@@ -7,25 +7,13 @@
 	struct lock_file *lk;
 	unsigned char old_sha1[20];
 	int lock_fd;
 	int force_write;
 };
 
-/**
- * Information needed for a single ref update.  Set new_sha1 to the
- * new value or to zero to delete the ref.  To check the old value
- * while locking the ref, set have_old to 1 and set old_sha1 to the
- * value or to zero to ensure the ref does not exist before update.
- */
-struct ref_update {
-	const char *ref_name;
-	unsigned char new_sha1[20];
-	unsigned char old_sha1[20];
-	int flags; /* REF_NODEREF? */
-	int have_old; /* 1 if old_sha1 is valid, 0 otherwise */
-};
+struct ref_transaction;
 
 /*
  * Bit values set in the flags argument passed to each_ref_fn():
  */
 
 /* Reference is a symbolic reference. */
@@ -91,12 +79,13 @@
 extern void warn_dangling_symref(FILE *fp, const char *msg_fmt, const char *refname);
 extern void warn_dangling_symrefs(FILE *fp, const char *msg_fmt, const struct string_list* refnames);
 
 /*
  * Lock the packed-refs file for writing.  Flags is passed to
  * hold_lock_file_for_update().  Return 0 on success.
+ * Errno is set to something meaningful on error.
  */
 extern int lock_packed_refs(int flags);
 
 /*
  * Add a reference to the in-memory packed reference cache.  This may
  * only be called while the packed-refs file is locked (see
@@ -106,12 +95,13 @@
 extern void add_packed_ref(const char *refname, const unsigned char *sha1);
 
 /*
  * Write the current version of the packed refs cache from memory to
  * disk.  The packed-refs file must already be locked for writing (see
  * lock_packed_refs()).  Return zero on success.
+ * Sets errno to something meaningful on error.
  */
 extern int commit_packed_refs(void);
 
 /*
  * Rollback the lockfile for the packed-refs file, and discard the
  * in-memory packed reference cache.  (The packed-refs file will be
@@ -130,31 +120,38 @@
 /*
  * Write a packed-refs file for the current repository.
  * flags: Combination of the above PACK_REFS_* flags.
  */
 int pack_refs(unsigned int flags);
 
-extern int repack_without_refs(const char **refnames, int n);
+extern int repack_without_refs(const char **refnames, int n,
+			       struct strbuf *err);
 
 extern int ref_exists(const char *);
 
+extern int is_branch(const char *refname);
+
 /*
  * If refname is a non-symbolic reference that refers to a tag object,
  * and the tag can be (recursively) dereferenced to a non-tag object,
  * store the SHA1 of the referred-to object to sha1 and return 0.  If
  * any of these conditions are not met, return a non-zero value.
  * Symbolic references are considered unpeelable, even if they
  * ultimately resolve to a peelable tag.
  */
 extern int peel_ref(const char *refname, unsigned char *sha1);
 
-/** Locks a "refs/" ref returning the lock on success and NULL on failure. **/
+/*
+ * Locks a "refs/" ref returning the lock on success and NULL on failure.
+ * On failure errno is set to something meaningful.
+ */
 extern struct ref_lock *lock_ref_sha1(const char *refname, const unsigned char *old_sha1);
 
 /** Locks any ref (for 'HEAD' type refs). */
 #define REF_NODEREF	0x01
+/* errno is set to something meaningful on failure */
 extern struct ref_lock *lock_any_ref_for_update(const char *refname,
 						const unsigned char *old_sha1,
 						int flags, int *type_p);
 
 /** Close the file descriptor owned by a lock and return the status */
 extern int close_ref(struct ref_lock *lock);
@@ -165,20 +162,28 @@
 /** Release any lock taken but not written. **/
 extern void unlock_ref(struct ref_lock *lock);
 
 /** Writes sha1 into the ref specified by the lock. **/
 extern int write_ref_sha1(struct ref_lock *lock, const unsigned char *sha1, const char *msg);
 
-/** Setup reflog before using. **/
-int log_ref_setup(const char *ref_name, char *logfile, int bufsize);
+/*
+ * Setup reflog before using. Set errno to something meaningful on failure.
+ */
+int log_ref_setup(const char *refname, char *logfile, int bufsize);
 
 /** Reads log for the value of ref during at_time. **/
 extern int read_ref_at(const char *refname, unsigned long at_time, int cnt,
 		       unsigned char *sha1, char **msg,
 		       unsigned long *cutoff_time, int *cutoff_tz, int *cutoff_cnt);
 
+/** Check if a particular reflog exists */
+extern int reflog_exists(const char *refname);
+
+/** Delete a reflog */
+extern int delete_reflog(const char *refname);
+
 /* iterate over reflog entries */
 typedef int each_reflog_ent_fn(unsigned char *osha1, unsigned char *nsha1, const char *, unsigned long, int, const char *, void *);
 int for_each_reflog_ent(const char *refname, each_reflog_ent_fn fn, void *cb_data);
 int for_each_reflog_ent_reverse(const char *refname, each_reflog_ent_fn fn, void *cb_data);
 
 /*
@@ -214,22 +219,88 @@
  * Resolve refname in the nested "gitlink" repository that is located
  * at path.  If the resolution is successful, return 0 and set sha1 to
  * the name of the object; otherwise, return a non-zero value.
  */
 extern int resolve_gitlink_ref(const char *path, const char *refname, unsigned char *sha1);
 
-/** lock a ref and then write its file */
-enum action_on_err { MSG_ON_ERR, DIE_ON_ERR, QUIET_ON_ERR };
+enum action_on_err {
+	UPDATE_REFS_MSG_ON_ERR,
+	UPDATE_REFS_DIE_ON_ERR,
+	UPDATE_REFS_QUIET_ON_ERR
+};
+
+/*
+ * Begin a reference transaction.  The reference transaction must
+ * be freed by calling ref_transaction_free().
+ */
+struct ref_transaction *ref_transaction_begin(void);
+
+/*
+ * The following functions add a reference check or update to a
+ * ref_transaction.  In all of them, refname is the name of the
+ * reference to be affected.  The functions make internal copies of
+ * refname, so the caller retains ownership of the parameter.  flags
+ * can be REF_NODEREF; it is passed to update_ref_lock().
+ */
+
+/*
+ * Add a reference update to transaction.  new_sha1 is the value that
+ * the reference should have after the update, or zeros if it should
+ * be deleted.  If have_old is true, then old_sha1 holds the value
+ * that the reference should have had before the update, or zeros if
+ * it must not have existed beforehand.
+ * Function returns 0 on success and non-zero on failure. A failure to update
+ * means that the transaction as a whole has failed and will need to be
+ * rolled back. On failure the err buffer will be updated.
+ */
+int ref_transaction_update(struct ref_transaction *transaction,
+			   const char *refname,
+			   const unsigned char *new_sha1,
+			   const unsigned char *old_sha1,
+			   int flags, int have_old,
+			   struct strbuf *err);
+
+/*
+ * Add a reference creation to transaction.  new_sha1 is the value
+ * that the reference should have after the update; it must not be the
+ * null SHA-1.  It is verified that the reference does not exist
+ * already.
+ */
+void ref_transaction_create(struct ref_transaction *transaction,
+			    const char *refname,
+			    const unsigned char *new_sha1,
+			    int flags);
+
+/*
+ * Add a reference deletion to transaction.  If have_old is true, then
+ * old_sha1 holds the value that the reference should have had before
+ * the update (which must not be the null SHA-1).
+ */
+void ref_transaction_delete(struct ref_transaction *transaction,
+			    const char *refname,
+			    const unsigned char *old_sha1,
+			    int flags, int have_old);
+
+/*
+ * Commit all of the changes that have been queued in transaction, as
+ * atomically as possible.  Return a nonzero value if there is a
+ * problem.
+ * If err is non-NULL we will add an error string to it to explain why
+ * the transaction failed. The string does not end in newline.
+ */
+int ref_transaction_commit(struct ref_transaction *transaction,
+			   const char *msg, struct strbuf *err);
+
+/*
+ * Free an existing transaction and all associated data.
+ */
+void ref_transaction_free(struct ref_transaction *transaction);
+
+/** Lock a ref and then write its file */
 int update_ref(const char *action, const char *refname,
 		const unsigned char *sha1, const unsigned char *oldval,
 		int flags, enum action_on_err onerr);
 
-/**
- * Lock all refs and then perform all modifications.
- */
-int update_refs(const char *action, const struct ref_update **updates,
-		int n, enum action_on_err onerr);
-
 extern int parse_hide_refs_config(const char *var, const char *value, const char *);
 extern int ref_is_hidden(const char *);
 
 #endif /* REFS_H */
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/refs.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/refs.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/RelNotes /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/RelNotes
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/RelNotes	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/RelNotes	2014-08-16 06:26:55.000000000 +0800
@@ -1,34 +1,391 @@
-Git v2.0.5 Release Notes
-========================
+Git v2.1 Release Notes
+======================
 
-Fixes since v2.0.4
+Backward compatibility notes
+----------------------------
+
+ * The default value we give to the environment variable LESS has been
+   changed from "FRSX" to "FRX", losing "S" (chop long lines instead
+   of wrapping).  Existing users who prefer not to see line-wrapped
+   output may want to set
+
+     $ git config core.pager "less -S"
+
+   to restore the traditional behaviour.  It is expected that people
+   find output from most subcommands easier to read with the new
+   default, except for "blame" which tends to produce really long
+   lines.  To override the new default only for "git blame", you can
+   do this:
+
+     $ git config pager.blame "less -S"
+
+ * A few disused directories in contrib/ have been retired.
+
+
+Updates since v2.0
 ------------------
 
- * We used to allow committing a path ".Git/config" with Git that is
-   running on a case sensitive filesystem, but an attempt to check out
-   such a path with Git that runs on a case insensitive filesystem
-   would have clobbered ".git/config", which is definitely not what
-   the user would have expected.  Git now prevents you from tracking
-   a path with ".Git" (in any case combination) as a path component.
-
- * On Windows, certain path components that are different from ".git"
-   are mapped to ".git", e.g. "git~1/config" is treated as if it were
-   ".git/config".  HFS+ has a similar issue, where certain unicode
-   codepoints are ignored, e.g. ".g\u200cit/config" is treated as if
-   it were ".git/config".  Pathnames with these potential issues are
-   rejected on the affected systems.  Git on systems that are not
-   affected by this issue (e.g. Linux) can also be configured to
-   reject them to ensure cross platform interoperability of the hosted
-   projects.
-
- * "git fsck" notices a tree object that records such a path that can
-   be confused with ".git", and with receive.fsckObjects configuration
-   set to true, an attempt to "git push" such a tree object will be
-   rejected.  Such a path may not be a problem on a well behaving
-   filesystem but in order to protect those on HFS+ and on case
-   insensitive filesystems, this check is enabled on all platforms.
+UI, Workflows & Features
+
+ * Since the very beginning of Git, we gave the LESS environment a
+   default value "FRSX" when we spawn "less" as the pager.  "S" (chop
+   long lines instead of wrapping) has been removed from this default
+   set of options, because it is more or less a personal taste thing,
+   as opposed to the others that have good justifications (i.e. "R" is
+   very much justified because many kinds of output we produce are
+   colored and "FX" is justified because output we produce is often
+   shorter than a page).
+
+ * The logic and data used to compute the display width needed for
+   UTF-8 strings have been updated to match Unicode 7.0 better.
+
+ * HTTP-based transports learned to better propagate the error messages from
+   the webserver to the client coming over the HTTP transport.
+
+ * The completion script for bash (in contrib/) has been updated to
+   better handle aliases that define a complex sequence of commands.
+
+ * The "core.preloadindex" configuration variable is enabled by default,
+   allowing modern platforms to take advantage of their
+   multiple cores.
+
+ * "git clone" applies the "if cloning from a local disk, physically
+   copy the repository using hardlinks, unless otherwise told not to with
+   --no-local" optimization when the url.*.insteadOf mechanism rewrites a
+   remote-repository "git clone $URL" into a
+   clone from a local disk.
+
+ * "git commit --date=<date>" option learned more
+   timestamp formats, including "--date=now".
+
+ * The `core.commentChar` configuration variable is used to specify a
+   custom comment character (other than the default "#") for
+   the commit message editor.  This can be set to `auto` to attempt to
+   choose a different character that does not conflict with any that
+   already starts a line in the message being edited, for cases like
+   "git commit --amend".
+
+ * "git format-patch" learned --signature-file=<file> to add the contents
+   of a file as a signature to the mail message it produces.
+
+ * "git grep" learned the grep.fullname configuration variable to force
+   "--full-name" to be the default.  This may cause regressions for
+   scripted users who do not expect this new behaviour.
+
+ * "git imap-send" learned to ask the credential helper for auth
+   material.
+
+ * "git log" and friends now understand the value "auto" for the
+   "log.decorate" configuration variable to enable the "--decorate"
+   option automatically when the output is sent to tty.
+
+ * "git merge" without an argument, even when there is an upstream
+   defined for the current branch, refused to run until
+   merge.defaultToUpstream is set to true.  Flip the default of that
+   configuration variable to true.
+
+ * "git mergetool" learned to drive the vimdiff3 backend.
+
+ * mergetool.prompt used to default to 'true', always asking "do you
+   really want to run the tool on this path?".  The default has been
+   changed to 'false'.  However, the prompt will still appear if
+   mergetool used its autodetection system to guess which tool to use.
+   Users who explicitly specify or configure a tool will no longer see
+   the prompt by default.
+
+   Strictly speaking, this is a backward incompatible change and
+   users need to explicitly set the variable to 'true' if they want
+   to be prompted to confirm running the tool on each path.
+
+ * "git replace" learned the "--edit" subcommand to create a
+   replacement by editing an existing object.
+
+ * "git replace" learned a "--graft" option to rewrite the parents of a
+   commit.
+
+ * "git send-email" learned "--to-cover" and "--cc-cover" options, to
+   tell it to copy To: and Cc: headers found in the first input file
+   when emitting later input files.
+
+ * "git svn" learned to cope with malformed timestamps with only one
+   digit in the hour part, e.g. 2014-01-07T5:01:02.048176Z, emitted
+   by some broken subversion server implementations.
+
+ * "git tag" when editing the tag message shows the name of the tag
+   being edited as a comment in the editor.
+
+ * "git tag" learned to pay attention to "tag.sort" configuration, to
+   be used as the default sort order when no --sort=<value> option
+   is given.
+
+ * A new "git verify-commit" command, to check GPG signatures in signed
+   commits, in a way similar to "git verify-tag" is used to check
+   signed tags, was added.
+
+
+Performance, Internal Implementation, etc.
+
+ * Build procedure for 'subtree' (in contrib/) has been cleaned up.
+
+ * Support for the profile-feedback build, which has
+   bit-rotted for quite a while, has been updated.
+
+ * An experimental format to use two files (the base file and
+   incremental changes relative to it) to represent the index has been
+   introduced; this may reduce I/O cost of rewriting a large index
+   when only small part of the working tree changes.
+
+ * Effort to shrink the size of patches Windows folks maintain on top
+   by upstreaming them continues.  More tests that are not applicable
+   to the Windows environment are identified and either skipped or
+   made more portable.
+
+ * Eradication of "test $condition -a $condition" from our scripts
+   continues.
+
+ * The `core.deltabasecachelimit` used to default to 16 MiB , but this
+   proved to be too small, and has been bumped to 96 MiB.
+
+ * "git blame" has been optimized greatly by reorganising the data
+   structure that is used to keep track of the work to be done.
+
+ * "git diff" that compares 3-or-more trees (e.g. parents and the
+   result of a merge) has been optimized.
+
+ * The API to update/delete references are being converted to handle
+   updates to multiple references in a transactional way.  As an
+   example, "update-ref --stdin [-z]" has been updated to use this
+   API.
+
+ * skip_prefix() and strip_suffix() API functions are used a lot more
+   widely throughout the codebase now.
+
+ * Parts of the test scripts can be skipped by using a range notation,
+   e.g. "sh t1234-test.sh --run='1-4 6 8-'" to omit test piece 5 and 7
+   and run everything else.
+
+
+Also contains various documentation updates and code clean-ups.
+
+
+Fixes since v2.0
+----------------
+
+Unless otherwise noted, all the fixes since v2.0 in the maintenance
+track are contained in this release (see the maintenance releases'
+notes for details).
+
+ * We used to unconditionally disable the pager in the pager process
+   we spawn to feed out output, but that prevented people who want to
+   run "less" within "less" from doing so.
+   (merge c0459ca je/pager-do-not-recurse later to maint).
+
+ * Tools that read diagnostic output in our standard error stream do
+   not want to see terminal control sequence (e.g. erase-to-eol).
+   Detect them by checking if the standard error stream is connected
+   to a tty.
+   (merge 38de156 mn/sideband-no-ansi later to maint).
+
+ * Mishandling of patterns in .gitignore that have trailing SPs quoted
+   with backslashes (e.g. ones that end with "\ ") has been
+   corrected.
+   (merge 97c1364be6b pb/trim-trailing-spaces later to maint).
+
+ * Reworded the error message given upon a failure to open an existing
+   loose object file due to e.g. permission issues; it was reported as
+   the object being corrupt, but that is not quite true.
+   (merge d6c8a05 jk/report-fail-to-read-objects-better later to maint).
+
+ * "git log -2master" is a common typo that shows two commits starting
+   from whichever random branch that is not 'master' that happens to
+   be checked out currently.
+   (merge e3fa568 jc/revision-dash-count-parsing later to maint).
+
+ * Code to avoid adding the same alternate object store twice was
+   subtly broken for a long time, but nobody seems to have noticed.
+   (merge 80b4785 rs/fix-alt-odb-path-comparison later to maint).
+   (merge 539e750 ek/alt-odb-entry-fix later to maint).
+
+ * The "%<(10,trunc)%s" pretty format specifier in the log family of
+   commands is used to truncate the string to a given length (e.g. 10
+   in the example) with padding to column-align the output, but did
+   not take into account that number of bytes and number of display
+   columns are different.
+   (merge 7d50987 as/pretty-truncate later to maint).
+
+ * "%G" (nothing after G) is an invalid pretty format specifier, but
+   the parser did not notice it as garbage.
+   (merge 958b2eb jk/pretty-G-format-fixes later to maint).
+
+ * A handful of code paths had to read the commit object more than
+   once when showing header fields that are usually not parsed.  The
+   internal data structure to keep track of the contents of the commit
+   object has been updated to reduce the need for this double-reading,
+   and to allow the caller find the length of the object.
+   (merge 218aa3a jk/commit-buffer-length later to maint).
+
+ * The "mailmap.file" configuration option did not support tilde
+   expansion (i.e. ~user/path and ~/path).
+   (merge 9352fd5 ow/config-mailmap-pathname later to maint).
+
+ * The completion scripts (in contrib/) did not know about quite a few
+   options that are common between "git merge" and "git pull", and a
+   couple of options unique to "git merge".
+   (merge 8fee872 jk/complete-merge-pull later to maint).
+
+ * The unix-domain socket used by the sample credential cache daemon
+   tried to unlink an existing stale one at a wrong path, if the path
+   to the socket was given as an overlong path that does not fit in
+   the sun_path member of the sockaddr_un structure.
+   (merge 2869b3e rs/fix-unlink-unix-socket later to maint).
+
+ * An ancient rewrite passed a wrong pointer to a curl library
+   function in a rarely used code path.
+   (merge 479eaa8 ah/fix-http-push later to maint).
+
+ * "--ignore-space-change" option of "git apply" ignored the spaces
+   at the beginning of lines too aggressively, which is inconsistent
+   with the option of the same name that "diff" and "git diff" have.
+   (merge 14d3bb4 jc/apply-ignore-whitespace later to maint).
+
+ * "git blame" miscounted the number of columns needed to show localized
+   timestamps, resulting in a jaggy left-side-edge for the source code
+   lines in its output.
+   (merge dd75553 jx/blame-align-relative-time later to maint).
+
+ * "git blame" assigned the blame to the copy in the working-tree if
+   the repository is set to core.autocrlf=input and the file used CRLF
+   line endings.
+   (merge 4d4813a bc/blame-crlf-test later to maint).
+
+ * "git clone -b brefs/tags/bar" would have mistakenly thought we were
+   following a single tag, even though it was a name of the branch,
+   because it incorrectly used strstr().
+   (merge 60a5f5f jc/fix-clone-single-starting-at-a-tag later to maint).
+
+ * "git commit --allow-empty-message -C $commit" did not work when the
+   commit did not have any log message.
+   (merge 076cbd6 jk/commit-C-pick-empty later to maint).
+
+ * "git diff --find-copies-harder" sometimes pretended as if the mode
+   bits have changed for paths that are marked with the assume-unchanged
+   bit.
+   (merge 5304810 jk/diff-files-assume-unchanged later to maint).
+
+ * "filter-branch" left an empty single-parent commit that results when
+   all parents of a merge commit get mapped to the same commit, even
+   under "--prune-empty".
+   (merge 79bc4ef cb/filter-branch-prune-empty-degenerate-merges later to maint).
+
+ * "git format-patch" did not enforce the rule that the "--follow"
+   option from the log/diff family of commands must be used with
+   exactly one pathspec.
+   (merge dd63f16 jk/diff-follow-must-take-one-pathspec later to maint).
+
+ * "git gc --auto" was recently changed to run in the background to
+   give control back early to the end-user sitting in front of the
+   terminal, but it forgot that housekeeping involving reflogs should
+   be done without other processes competing for accesses to the refs.
+   (merge 62aad18 nd/daemonize-gc later to maint).
+
+ * "git grep -O" to show the lines that hit in the pager did not work
+   well with case insensitive search.  We now spawn "less" with its
+   "-I" option when it is used as the pager (which is the default).
+   (merge f7febbe sk/spawn-less-case-insensitively-from-grep-O-i later to maint).
+
+ * We used to disable threaded "git index-pack" on platforms without
+   thread-safe pread(); use a different workaround for such
+   platforms to allow threaded "git index-pack".
+   (merge 3953949 nd/index-pack-one-fd-per-thread later to maint).
+
+ * The error reporting from "git index-pack" has been improved to
+   distinguish missing objects from type errors.
+   (merge 77583e7 jk/index-pack-report-missing later to maint).
+
+ * "log --show-signature" incorrectly decided the color to paint a
+   mergetag that was and was not correctly validated.
+   (merge 42c55ce mg/fix-log-mergetag-color later to maint).
+
+ * "log --show-signature" did not pay attention to the "--graph" option.
+   (merge cf3983d zk/log-graph-showsig later to maint).
+
+ * "git mailinfo" used to read beyond the ends of header strings while
+   parsing an incoming e-mail message to extract the patch.
+   (merge b1a013d rs/mailinfo-header-cmp later to maint).
+
+ * On a case insensitive filesystem, merge-recursive incorrectly
+   deleted the file that is to be renamed to a name that is the same
+   except for case differences.
+   (merge baa37bf dt/merge-recursive-case-insensitive later to maint).
+
+ * Merging changes into a file that ends in an incomplete line made the
+   last line into a complete one, even when the other branch did not
+   change anything around the end of file.
+   (merge ba31180 mk/merge-incomplete-files later to maint).
+
+ * "git pack-objects" unnecessarily copied the previous contents when
+   extending the hashtable, even though it will populate the table
+   from scratch anyway.
+   (merge fb79947 rs/pack-objects-no-unnecessary-realloc later to maint).
+
+ * Recent updates to "git repack" started to duplicate objects that
+   are in packfiles marked with the .keep flag into the new packfile by
+   mistake.
+   (merge d078d85 jk/repack-pack-keep-objects later to maint).
+
+ * "git rerere forget" did not work well when merge.conflictstyle
+   was set to a non-default value.
+   (merge de3d8bb fc/rerere-conflict-style later to maint).
+
+ * "git remote rm" and "git remote prune" can involve removing many
+   refs at once, which is not a very efficient thing to do when very
+   many refs exist in the packed-refs file.
+   (merge e6bea66 jl/remote-rm-prune later to maint).
+
+ * "git log --exclude=<glob> --all | git shortlog" worked as expected,
+   but "git shortlog --exclude=<glob> --all", which is supposed to be
+   identical to the above pipeline, was not accepted at the command
+   line argument parser level.
+   (merge eb07774 jc/shortlog-ref-exclude later to maint).
+
+ * The autostash mode of "git rebase -i" did not restore the dirty
+   working tree state if the user aborted the interactive rebase by
+   emptying the insn sheet.
+   (merge ddb5432 rr/rebase-autostash-fix later to maint).
+
+ * "git rebase --fork-point" did not filter out patch-identical
+   commits correctly.
+
+ * During "git rebase --merge", a conflicted patch could not be
+   skipped with "--skip" if the next one also conflicted.
+   (merge 95104c7 bc/fix-rebase-merge-skip later to maint).
+
+ * "git show -s" (i.e. show log message only) used to incorrectly emit
+   an extra blank line after a merge commit.
+   (merge ad2f725 mk/show-s-no-extra-blank-line-for-merges later to maint).
+
+ * "git status", even though it is a read-only operation, tries to
+   update the index with refreshed lstat(2) info to optimize future
+   accesses to the working tree opportunistically, but this could
+   race with a "read-write" operation that modifies the index while it
+   is running.  Detect such a race and avoid overwriting the index.
+   (merge 426ddee ym/fix-opportunistic-index-update-race later to maint).
+
+ * "git status" (and "git commit") behaved as if changes in a modified
+   submodule are not there if submodule.*.ignore configuration is set,
+   which was misleading.  The configuration is only to unclutter diff
+   output during the course of development, and not to hide
+   changes in the "status" output to cause the users forget to commit
+   them.
+   (merge c215d3d jl/status-added-submodule-is-never-ignored later to maint).
+
+ * Documentation for "git submodule sync" forgot to say that the subcommand
+   can take the "--recursive" option.
+   (merge 9393ae7 mc/doc-submodule-sync-recurse later to maint).
 
-A big "thanks!" for bringing this issue to us goes to our friends in
-the Mercurial land, namely, Matt Mackall and Augie Fackler.
+ * "git update-index --cacheinfo" in 2.0 release crashed on a
+   malformed command line.
+   (merge c8e1ee4 jc/rev-parse-argh-dashed-multi-words later to maint).
 
-Also contains typofixes, documentation updates and trivial code clean-ups.
+ * The mode to run tests with HTTP server tests disabled was broken.
+   (merge afa53fe na/no-http-test-in-the-middle later to maint).
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote.c	2014-08-16 06:26:55.000000000 +0800
@@ -167,13 +167,12 @@
 }
 
 static struct branch *make_branch(const char *name, int len)
 {
 	struct branch *ret;
 	int i;
-	char *refname;
 
 	for (i = 0; i < branches_nr; i++) {
 		if (len ? (!strncmp(name, branches[i]->name, len) &&
 			   !branches[i]->name[len]) :
 		    !strcmp(name, branches[i]->name))
 			return branches[i];
@@ -183,16 +182,13 @@
 	ret = xcalloc(1, sizeof(struct branch));
 	branches[branches_nr++] = ret;
 	if (len)
 		ret->name = xstrndup(name, len);
 	else
 		ret->name = xstrdup(name);
-	refname = xmalloc(strlen(name) + strlen("refs/heads/") + 1);
-	strcpy(refname, "refs/heads/");
-	strcpy(refname + strlen("refs/heads/"), ret->name);
-	ret->refname = refname;
+	ret->refname = xstrfmt("refs/heads/%s", ret->name);
 
 	return ret;
 }
 
 static struct rewrite *make_rewrite(struct rewrites *r, const char *base, int len)
 {
@@ -485,15 +481,14 @@
 	if (default_remote_name) /* did this already */
 		return;
 	default_remote_name = "origin";
 	current_branch = NULL;
 	head_ref = resolve_ref_unsafe("HEAD", sha1, 0, &flag);
 	if (head_ref && (flag & REF_ISSYMREF) &&
-	    starts_with(head_ref, "refs/heads/")) {
-		current_branch =
-			make_branch(head_ref + strlen("refs/heads/"), 0);
+	    skip_prefix(head_ref, "refs/heads/", &head_ref)) {
+		current_branch = make_branch(head_ref, 0);
 	}
 	git_config(handle_config, NULL);
 	if (branch_pushremote_name) {
 		free((char *)pushremote_name);
 		pushremote_name = branch_pushremote_name;
 	}
@@ -1191,13 +1186,13 @@
 	}
 
 	switch (count_refspec_match(dst_value, dst, &matched_dst)) {
 	case 1:
 		break;
 	case 0:
-		if (!memcmp(dst_value, "refs/", 5))
+		if (starts_with(dst_value, "refs/"))
 			matched_dst = make_linked_ref(dst_value, dst_tail);
 		else if (is_null_sha1(matched_src->new_sha1))
 			error("unable to delete '%s': remote ref does not exist",
 			      dst_value);
 		else if ((dst_guess = guess_ref(dst_value, matched_src)))
 			matched_dst = make_linked_ref(dst_guess, dst_tail);
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote-curl.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote-curl.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote-curl.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote-curl.c	2014-08-16 06:26:55.000000000 +0800
@@ -191,25 +191,25 @@
 		free(d->buf_alloc);
 		free_refs(d->refs);
 		free(d);
 	}
 }
 
-static int show_http_message(struct strbuf *type, struct strbuf *msg)
+static int show_http_message(struct strbuf *type, struct strbuf *charset,
+			     struct strbuf *msg)
 {
 	const char *p, *eol;
 
 	/*
 	 * We only show text/plain parts, as other types are likely
 	 * to be ugly to look at on the user's terminal.
-	 *
-	 * TODO should handle "; charset=XXX", and re-encode into
-	 * logoutputencoding
 	 */
-	if (strcasecmp(type->buf, "text/plain"))
+	if (strcmp(type->buf, "text/plain"))
 		return -1;
+	if (charset->len)
+		strbuf_reencode(msg, charset->buf, get_log_output_encoding());
 
 	strbuf_trim(msg);
 	if (!msg->len)
 		return -1;
 
 	p = msg->buf;
@@ -222,12 +222,13 @@
 }
 
 static struct discovery* discover_refs(const char *service, int for_push)
 {
 	struct strbuf exp = STRBUF_INIT;
 	struct strbuf type = STRBUF_INIT;
+	struct strbuf charset = STRBUF_INIT;
 	struct strbuf buffer = STRBUF_INIT;
 	struct strbuf refs_url = STRBUF_INIT;
 	struct strbuf effective_url = STRBUF_INIT;
 	struct discovery *last = last_discovery;
 	int http_ret, maybe_smart = 0;
 	struct http_get_options options;
@@ -246,29 +247,30 @@
 			strbuf_addch(&refs_url, '&');
 		strbuf_addf(&refs_url, "service=%s", service);
 	}
 
 	memset(&options, 0, sizeof(options));
 	options.content_type = &type;
+	options.charset = &charset;
 	options.effective_url = &effective_url;
 	options.base_url = &url;
 	options.no_cache = 1;
 	options.keep_error = 1;
 
 	http_ret = http_get_strbuf(refs_url.buf, &buffer, &options);
 	switch (http_ret) {
 	case HTTP_OK:
 		break;
 	case HTTP_MISSING_TARGET:
-		show_http_message(&type, &buffer);
+		show_http_message(&type, &charset, &buffer);
 		die("repository '%s' not found", url.buf);
 	case HTTP_NOAUTH:
-		show_http_message(&type, &buffer);
+		show_http_message(&type, &charset, &buffer);
 		die("Authentication failed for '%s'", url.buf);
 	default:
-		show_http_message(&type, &buffer);
+		show_http_message(&type, &charset, &buffer);
 		die("unable to access '%s': %s", url.buf, curl_errorstr);
 	}
 
 	last= xcalloc(1, sizeof(*last_discovery));
 	last->service = service;
 	last->buf_alloc = strbuf_detach(&buffer, &last->len);
@@ -307,12 +309,13 @@
 	else
 		last->refs = parse_info_refs(last);
 
 	strbuf_release(&refs_url);
 	strbuf_release(&exp);
 	strbuf_release(&type);
+	strbuf_release(&charset);
 	strbuf_release(&effective_url);
 	strbuf_release(&buffer);
 	last_discovery = last;
 	return last;
 }
 
@@ -393,13 +396,13 @@
 
 	case CURLIOCMD_RESTARTREAD:
 		if (rpc->initial_buffer) {
 			rpc->pos = 0;
 			return CURLIOE_OK;
 		}
-		fprintf(stderr, "Unable to rewind rpc post data - try increasing http.postBuffer\n");
+		error("unable to rewind rpc post data - try increasing http.postBuffer");
 		return CURLIOE_FAILRESTART;
 
 	default:
 		return CURLIOE_UNKNOWNCMD;
 	}
 }
@@ -703,13 +706,13 @@
 	walker_free(walker);
 
 	for (i = 0; i < nr_heads; i++)
 		free(targets[i]);
 	free(targets);
 
-	return ret ? error("Fetch failed.") : 0;
+	return ret ? error("fetch failed.") : 0;
 }
 
 static int fetch_git(struct discovery *heads,
 	int nr_heads, struct ref **to_fetch)
 {
 	struct rpc_state rpc;
@@ -785,15 +788,15 @@
 	struct ref **to_fetch = NULL;
 	struct ref *list_head = NULL;
 	struct ref **list = &list_head;
 	int alloc_heads = 0, nr_heads = 0;
 
 	do {
-		if (starts_with(buf->buf, "fetch ")) {
-			char *p = buf->buf + strlen("fetch ");
-			char *name;
+		const char *p;
+		if (skip_prefix(buf->buf, "fetch ", &p)) {
+			const char *name;
 			struct ref *ref;
 			unsigned char old_sha1[20];
 
 			if (strlen(p) < 40 || get_sha1_hex(p, old_sha1))
 				die("protocol error: expected sha/ref, got %s'", p);
 			if (p[40] == ' ')
@@ -943,13 +946,13 @@
 	struct strbuf buf = STRBUF_INIT;
 	int nongit;
 
 	git_extract_argv0_path(argv[0]);
 	setup_git_directory_gently(&nongit);
 	if (argc < 2) {
-		fprintf(stderr, "Remote needed\n");
+		error("remote-curl: usage: git remote-curl <remote> [<url>]");
 		return 1;
 	}
 
 	options.verbosity = 1;
 	options.progress = !!isatty(2);
 	options.thin = 1;
@@ -962,44 +965,43 @@
 		end_url_with_slash(&url, remote->url[0]);
 	}
 
 	http_init(remote, url.buf, 0);
 
 	do {
+		const char *arg;
+
 		if (strbuf_getline(&buf, stdin, '\n') == EOF) {
 			if (ferror(stdin))
-				fprintf(stderr, "Error reading command stream\n");
-			else
-				fprintf(stderr, "Unexpected end of command stream\n");
+				error("remote-curl: error reading command stream from git");
 			return 1;
 		}
 		if (buf.len == 0)
 			break;
 		if (starts_with(buf.buf, "fetch ")) {
 			if (nongit)
-				die("Fetch attempted without a local repo");
+				die("remote-curl: fetch attempted without a local repo");
 			parse_fetch(&buf);
 
 		} else if (!strcmp(buf.buf, "list") || starts_with(buf.buf, "list ")) {
 			int for_push = !!strstr(buf.buf + 4, "for-push");
 			output_refs(get_refs(for_push));
 
 		} else if (starts_with(buf.buf, "push ")) {
 			parse_push(&buf);
 
-		} else if (starts_with(buf.buf, "option ")) {
-			char *name = buf.buf + strlen("option ");
-			char *value = strchr(name, ' ');
+		} else if (skip_prefix(buf.buf, "option ", &arg)) {
+			char *value = strchr(arg, ' ');
 			int result;
 
 			if (value)
 				*value++ = '\0';
 			else
 				value = "true";
 
-			result = set_option(name, value);
+			result = set_option(arg, value);
 			if (!result)
 				printf("ok\n");
 			else if (result < 0)
 				printf("error invalid value\n");
 			else
 				printf("unsupported\n");
@@ -1010,13 +1012,13 @@
 			printf("option\n");
 			printf("push\n");
 			printf("check-connectivity\n");
 			printf("\n");
 			fflush(stdout);
 		} else {
-			fprintf(stderr, "Unknown command '%s'\n", buf.buf);
+			error("remote-curl: unknown command '%s' from git", buf.buf);
 			return 1;
 		}
 		strbuf_reset(&buf);
 	} while (1);
 
 	http_cleanup();
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote-testsvn.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote-testsvn.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote-testsvn.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote-testsvn.c	2014-08-16 06:26:55.000000000 +0800
@@ -172,14 +172,14 @@
 {
 	int code;
 	int dumpin_fd;
 	char *note_msg;
 	unsigned char head_sha1[20];
 	unsigned int startrev;
-	struct argv_array svndump_argv = ARGV_ARRAY_INIT;
 	struct child_process svndump_proc;
+	const char *command = "svnrdump";
 
 	if (read_ref(private_ref, head_sha1))
 		startrev = 0;
 	else {
 		note_msg = read_ref_note(head_sha1);
 		if(note_msg == NULL) {
@@ -199,21 +199,20 @@
 		dumpin_fd = open(url, O_RDONLY);
 		if(dumpin_fd < 0)
 			die_errno("Couldn't open svn dump file %s.", url);
 	} else {
 		memset(&svndump_proc, 0, sizeof(struct child_process));
 		svndump_proc.out = -1;
-		argv_array_push(&svndump_argv, "svnrdump");
-		argv_array_push(&svndump_argv, "dump");
-		argv_array_push(&svndump_argv, url);
-		argv_array_pushf(&svndump_argv, "-r%u:HEAD", startrev);
-		svndump_proc.argv = svndump_argv.argv;
+		argv_array_push(&svndump_proc.args, command);
+		argv_array_push(&svndump_proc.args, "dump");
+		argv_array_push(&svndump_proc.args, url);
+		argv_array_pushf(&svndump_proc.args, "-r%u:HEAD", startrev);
 
 		code = start_command(&svndump_proc);
 		if (code)
-			die("Unable to start %s, code %d", svndump_proc.argv[0], code);
+			die("Unable to start %s, code %d", command, code);
 		dumpin_fd = svndump_proc.out;
 	}
 	/* setup marks file import/export */
 	printf("feature import-marks-if-exists=%s\n"
 			"feature export-marks=%s\n", marksfilename, marksfilename);
 
@@ -223,14 +222,13 @@
 	svndump_reset();
 
 	close(dumpin_fd);
 	if (!dump_from_file) {
 		code = finish_command(&svndump_proc);
 		if (code)
-			warning("%s, returned %d", svndump_proc.argv[0], code);
-		argv_array_clear(&svndump_argv);
+			warning("%s, returned %d", command, code);
 	}
 
 	return 0;
 }
 
 static int cmd_list(const char *line)
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote-testsvn.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote-testsvn.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/remote-testsvn.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/remote-testsvn.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/replace_object.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/replace_object.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/replace_object.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/replace_object.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/rerere.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/rerere.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/rerere.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/rerere.c	2014-08-16 06:26:55.000000000 +0800
@@ -204,17 +204,17 @@
 				git_SHA1_Update(&ctx, two.buf ? two.buf : "",
 					    two.len + 1);
 			}
 			strbuf_reset(&one);
 			strbuf_reset(&two);
 		} else if (hunk == RR_SIDE_1)
-			strbuf_addstr(&one, buf.buf);
+			strbuf_addbuf(&one, &buf);
 		else if (hunk == RR_ORIGINAL)
 			; /* discard */
 		else if (hunk == RR_SIDE_2)
-			strbuf_addstr(&two, buf.buf);
+			strbuf_addbuf(&two, &buf);
 		else
 			rerere_io_putstr(buf.buf, io);
 		continue;
 	bad:
 		hunk = 99; /* force error exit */
 		break;
@@ -489,14 +489,13 @@
 		struct string_list_item *item = &update->items[i];
 		if (add_file_to_cache(item->string, ADD_CACHE_IGNORE_ERRORS))
 			status = -1;
 	}
 
 	if (!status && active_cache_changed) {
-		if (write_cache(fd, active_cache, active_nr) ||
-		    commit_locked_index(&index_lock))
+		if (write_locked_index(&the_index, &index_lock, COMMIT_LOCK))
 			die("Unable to write new index file");
 	} else if (fd >= 0)
 		rollback_lock_file(&index_lock);
 	return status;
 }
 
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/rerere.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/rerere.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/rerere.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/rerere.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/resolve-undo.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/resolve-undo.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/resolve-undo.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/resolve-undo.c	2014-08-16 06:26:55.000000000 +0800
@@ -107,13 +107,13 @@
 	struct string_list *resolve_undo = istate->resolve_undo;
 	if (!resolve_undo)
 		return;
 	string_list_clear(resolve_undo, 1);
 	free(resolve_undo);
 	istate->resolve_undo = NULL;
-	istate->cache_changed = 1;
+	istate->cache_changed |= RESOLVE_UNDO_CHANGED;
 }
 
 int unmerge_index_entry_at(struct index_state *istate, int pos)
 {
 	const struct cache_entry *ce;
 	struct string_list_item *item;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/resolve-undo.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/resolve-undo.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/resolve-undo.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/resolve-undo.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/revision.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/revision.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/revision.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/revision.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/run-command.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/run-command.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/run-command.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/run-command.c	2014-08-16 06:26:55.000000000 +0800
@@ -276,12 +276,15 @@
 {
 	int need_in, need_out, need_err;
 	int fdin[2], fdout[2], fderr[2];
 	int failed_errno;
 	char *str;
 
+	if (!cmd->argv)
+		cmd->argv = cmd->args.argv;
+
 	/*
 	 * In case of errors we must keep the promise to close FDs
 	 * that have been passed in via ->in and ->out.
 	 */
 
 	need_in = !cmd->no_stdin && cmd->in < 0;
@@ -325,12 +328,13 @@
 			else if (cmd->out)
 				close(cmd->out);
 			str = "standard error";
 fail_pipe:
 			error("cannot create %s pipe for %s: %s",
 				str, cmd->argv[0], strerror(failed_errno));
+			argv_array_clear(&cmd->args);
 			errno = failed_errno;
 			return -1;
 		}
 		cmd->err = fderr[0];
 	}
 
@@ -447,13 +451,12 @@
 	close(notify_pipe[0]);
 }
 #else
 {
 	int fhin = 0, fhout = 1, fherr = 2;
 	const char **sargv = cmd->argv;
-	char **env = environ;
 
 	if (cmd->no_stdin)
 		fhin = open("/dev/null", O_RDWR);
 	else if (need_in)
 		fhin = dup(fdin[0]);
 	else if (cmd->in)
@@ -472,30 +475,25 @@
 		fhout = dup(fherr);
 	else if (need_out)
 		fhout = dup(fdout[1]);
 	else if (cmd->out > 1)
 		fhout = dup(cmd->out);
 
-	if (cmd->env)
-		env = make_augmented_environ(cmd->env);
-
 	if (cmd->git_cmd)
 		cmd->argv = prepare_git_cmd(cmd->argv);
 	else if (cmd->use_shell)
 		cmd->argv = prepare_shell_cmd(cmd->argv);
 
-	cmd->pid = mingw_spawnvpe(cmd->argv[0], cmd->argv, env, cmd->dir,
-				  fhin, fhout, fherr);
+	cmd->pid = mingw_spawnvpe(cmd->argv[0], cmd->argv, (char**) cmd->env,
+			cmd->dir, fhin, fhout, fherr);
 	failed_errno = errno;
 	if (cmd->pid < 0 && (!cmd->silent_exec_failure || errno != ENOENT))
 		error("cannot spawn %s: %s", cmd->argv[0], strerror(errno));
 	if (cmd->clean_on_exit && cmd->pid >= 0)
 		mark_child_for_cleanup(cmd->pid);
 
-	if (cmd->env)
-		free_environ(env);
 	if (cmd->git_cmd)
 		free(cmd->argv);
 
 	cmd->argv = sargv;
 	if (fhin != 0)
 		close(fhin);
@@ -516,12 +514,13 @@
 		else if (cmd->out)
 			close(cmd->out);
 		if (need_err)
 			close_pair(fderr);
 		else if (cmd->err)
 			close(cmd->err);
+		argv_array_clear(&cmd->args);
 		errno = failed_errno;
 		return -1;
 	}
 
 	if (need_in)
 		close(fdin[0]);
@@ -540,13 +539,15 @@
 
 	return 0;
 }
 
 int finish_command(struct child_process *cmd)
 {
-	return wait_or_whine(cmd->pid, cmd->argv[0]);
+	int ret = wait_or_whine(cmd->pid, cmd->argv[0]);
+	argv_array_clear(&cmd->args);
+	return ret;
 }
 
 int run_command(struct child_process *cmd)
 {
 	int code = start_command(cmd);
 	if (code)
@@ -760,34 +761,27 @@
 	return path;
 }
 
 int run_hook_ve(const char *const *env, const char *name, va_list args)
 {
 	struct child_process hook;
-	struct argv_array argv = ARGV_ARRAY_INIT;
 	const char *p;
-	int ret;
 
 	p = find_hook(name);
 	if (!p)
 		return 0;
 
-	argv_array_push(&argv, p);
-
-	while ((p = va_arg(args, const char *)))
-		argv_array_push(&argv, p);
-
 	memset(&hook, 0, sizeof(hook));
-	hook.argv = argv.argv;
+	argv_array_push(&hook.args, p);
+	while ((p = va_arg(args, const char *)))
+		argv_array_push(&hook.args, p);
 	hook.env = env;
 	hook.no_stdin = 1;
 	hook.stdout_to_stderr = 1;
 
-	ret = run_command(&hook);
-	argv_array_clear(&argv);
-	return ret;
+	return run_command(&hook);
 }
 
 int run_hook_le(const char *const *env, const char *name, ...)
 {
 	va_list args;
 	int ret;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/run-command.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/run-command.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/run-command.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/run-command.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/run-command.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/run-command.h	2014-08-16 06:26:55.000000000 +0800
@@ -2,14 +2,17 @@
 #define RUN_COMMAND_H
 
 #ifndef NO_PTHREADS
 #include <pthread.h>
 #endif
 
+#include "argv-array.h"
+
 struct child_process {
 	const char **argv;
+	struct argv_array args;
 	pid_t pid;
 	/*
 	 * Using .in, .out, .err:
 	 * - Specify 0 for no redirections (child inherits stdin, stdout,
 	 *   stderr from parent).
 	 * - Specify -1 to have a pipe allocated as follows:
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/run-command.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/run-command.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/send-pack.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/send-pack.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/send-pack.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/send-pack.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sequencer.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sequencer.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sequencer.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sequencer.c	2014-08-16 06:26:55.000000000 +0800
@@ -240,17 +240,21 @@
 	struct ref_lock *ref_lock;
 	struct strbuf sb = STRBUF_INIT;
 	int ret;
 
 	read_cache();
 	if (checkout_fast_forward(from, to, 1))
-		exit(1); /* the callee should have complained already */
+		exit(128); /* the callee should have complained already */
 	ref_lock = lock_any_ref_for_update("HEAD", unborn ? null_sha1 : from,
 					   0, NULL);
+	if (!ref_lock)
+		return error(_("Failed to lock HEAD during fast_forward_to"));
+
 	strbuf_addf(&sb, "%s: fast-forward", action_name(opts));
 	ret = write_ref_sha1(ref_lock, to, sb.buf);
+
 	strbuf_release(&sb);
 	return ret;
 }
 
 static int do_recursive_merge(struct commit *base, struct commit *next,
 			      const char *base_label, const char *next_label,
@@ -256,17 +260,17 @@
 			      const char *base_label, const char *next_label,
 			      unsigned char *head, struct strbuf *msgbuf,
 			      struct replay_opts *opts)
 {
 	struct merge_options o;
 	struct tree *result, *next_tree, *base_tree, *head_tree;
-	int clean, index_fd;
+	int clean;
 	const char **xopt;
 	static struct lock_file index_lock;
 
-	index_fd = hold_locked_index(&index_lock, 1);
+	hold_locked_index(&index_lock, 1);
 
 	read_cache();
 
 	init_merge_options(&o);
 	o.ancestor = base ? base_label : "(empty tree)";
 	o.branch1 = "HEAD";
@@ -281,14 +285,13 @@
 
 	clean = merge_trees(&o,
 			    head_tree,
 			    next_tree, base_tree, &result);
 
 	if (active_cache_changed &&
-	    (write_cache(index_fd, active_cache, active_nr) ||
-	     commit_locked_index(&index_lock)))
+	    write_locked_index(&the_index, &index_lock, COMMIT_LOCK))
 		/* TRANSLATORS: %s will be "revert" or "cherry-pick" */
 		die(_("%s: Unable to write new index file"), action_name(opts));
 	rollback_lock_file(&index_lock);
 
 	if (opts->signoff)
 		append_signoff(msgbuf, 0, 0);
@@ -334,15 +337,13 @@
 		return -1;
 
 	if (!active_cache_tree)
 		active_cache_tree = cache_tree();
 
 	if (!cache_tree_fully_valid(active_cache_tree))
-		if (cache_tree_update(active_cache_tree,
-				      (const struct cache_entry * const *)active_cache,
-				      active_nr, 0))
+		if (cache_tree_update(&the_index, 0))
 			return error(_("Unable to update cache tree\n"));
 
 	return !hashcmp(active_cache_tree->sha1, head_commit->tree->object.sha1);
 }
 
 /*
@@ -354,24 +355,19 @@
  */
 static int run_git_commit(const char *defmsg, struct replay_opts *opts,
 			  int allow_empty)
 {
 	struct argv_array array;
 	int rc;
-	char *gpg_sign;
 
 	argv_array_init(&array);
 	argv_array_push(&array, "commit");
 	argv_array_push(&array, "-n");
 
-	if (opts->gpg_sign) {
-		gpg_sign = xmalloc(3 + strlen(opts->gpg_sign));
-		sprintf(gpg_sign, "-S%s", opts->gpg_sign);
-		argv_array_push(&array, gpg_sign);
-		free(gpg_sign);
-	}
+	if (opts->gpg_sign)
+		argv_array_pushf(&array, "-S%s", opts->gpg_sign);
 	if (opts->signoff)
 		argv_array_push(&array, "-s");
 	if (!opts->edit) {
 		argv_array_push(&array, "-F");
 		argv_array_push(&array, defmsg);
 	}
@@ -641,15 +637,14 @@
 {
 	static struct lock_file index_lock;
 	int index_fd = hold_locked_index(&index_lock, 0);
 	if (read_index_preload(&the_index, NULL) < 0)
 		die(_("git %s: failed to read the index"), action_name(opts));
 	refresh_index(&the_index, REFRESH_QUIET|REFRESH_UNMERGED, NULL, NULL, NULL);
-	if (the_index.cache_changed) {
-		if (write_index(&the_index, index_fd) ||
-		    commit_locked_index(&index_lock))
+	if (the_index.cache_changed && index_fd >= 0) {
+		if (write_locked_index(&the_index, &index_lock, COMMIT_LOCK))
 			die(_("git %s: failed to refresh the index"), action_name(opts));
 	}
 	rollback_lock_file(&index_lock);
 }
 
 static int format_todo(struct strbuf *buf, struct commit_list *todo_list,
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sequencer.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sequencer.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sequencer.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sequencer.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/server-info.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/server-info.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/server-info.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/server-info.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/setup.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/setup.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/setup.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/setup.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1-array.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1-array.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1-array.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1-array.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1_file.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1_file.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1_file.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1_file.c	2014-08-16 06:26:55.000000000 +0800
@@ -33,15 +33,12 @@
 
 #define SZ_FMT PRIuMAX
 static inline uintmax_t sz_fmt(size_t s) { return s; }
 
 const unsigned char null_sha1[20];
 
-static const char *no_log_pack_access = "no_log_pack_access";
-static const char *log_pack_access;
-
 /*
  * This is meant to hold a *small* number of objects that you would
  * want read_sha1_file() to be able to return, but yet you do not want
  * to write them into the object store (e.g. a browse-only
  * application).
  */
@@ -265,15 +262,15 @@
  * contains "/the/directory/corresponding/to/.git/objects/...", while
  * its name points just after the slash at the end of ".git/objects/"
  * in the example above, and has enough space to hold 40-byte hex
  * SHA1, an extra slash for the first level indirection, and the
  * terminating NUL.
  */
-static int link_alt_odb_entry(const char *entry, const char *relative_base, int depth)
+static int link_alt_odb_entry(const char *entry, const char *relative_base,
+	int depth, const char *normalized_objdir)
 {
-	const char *objdir = get_object_directory();
 	struct alternate_object_database *ent;
 	struct alternate_object_database *alt;
 	int pfxlen, entlen;
 	struct strbuf pathbuf = STRBUF_INIT;
 
 	if (!is_absolute_path(entry) && relative_base) {
@@ -318,13 +315,13 @@
 		if (pfxlen == alt->name - alt->base - 1 &&
 		    !memcmp(ent->base, alt->base, pfxlen)) {
 			free(ent);
 			return -1;
 		}
 	}
-	if (!strcmp(ent->base, objdir)) {
+	if (!strcmp_icase(ent->base, normalized_objdir)) {
 		free(ent);
 		return -1;
 	}
 
 	/* add the alternate entry */
 	*alt_odb_tail = ent;
@@ -342,34 +339,39 @@
 static void link_alt_odb_entries(const char *alt, int len, int sep,
 				 const char *relative_base, int depth)
 {
 	struct string_list entries = STRING_LIST_INIT_NODUP;
 	char *alt_copy;
 	int i;
+	struct strbuf objdirbuf = STRBUF_INIT;
 
 	if (depth > 5) {
 		error("%s: ignoring alternate object stores, nesting too deep.",
 				relative_base);
 		return;
 	}
 
+	strbuf_addstr(&objdirbuf, absolute_path(get_object_directory()));
+	normalize_path_copy(objdirbuf.buf, objdirbuf.buf);
+
 	alt_copy = xmemdupz(alt, len);
 	string_list_split_in_place(&entries, alt_copy, sep, -1);
 	for (i = 0; i < entries.nr; i++) {
 		const char *entry = entries.items[i].string;
 		if (entry[0] == '\0' || entry[0] == '#')
 			continue;
 		if (!is_absolute_path(entry) && depth) {
 			error("%s: ignoring relative alternate object store %s",
 					relative_base, entry);
 		} else {
-			link_alt_odb_entry(entry, relative_base, depth);
+			link_alt_odb_entry(entry, relative_base, depth, objdirbuf.buf);
 		}
 	}
 	string_list_clear(&entries, 0);
 	free(alt_copy);
+	strbuf_release(&objdirbuf);
 }
 
 void read_info_alternates(const char * relative_base, int depth)
 {
 	char *map;
 	size_t mapsz;
@@ -1175,79 +1177,74 @@
 	}
 	report_helper(list, seen_bits, first, list->nr);
 }
 
 static void prepare_packed_git_one(char *objdir, int local)
 {
-	/* Ensure that this buffer is large enough so that we can
-	   append "/pack/" without clobbering the stack even if
-	   strlen(objdir) were PATH_MAX.  */
-	char path[PATH_MAX + 1 + 4 + 1 + 1];
-	int len;
+	struct strbuf path = STRBUF_INIT;
+	size_t dirnamelen;
 	DIR *dir;
 	struct dirent *de;
 	struct string_list garbage = STRING_LIST_INIT_DUP;
 
-	sprintf(path, "%s/pack", objdir);
-	len = strlen(path);
-	dir = opendir(path);
+	strbuf_addstr(&path, objdir);
+	strbuf_addstr(&path, "/pack");
+	dir = opendir(path.buf);
 	if (!dir) {
 		if (errno != ENOENT)
 			error("unable to open object pack directory: %s: %s",
-			      path, strerror(errno));
+			      path.buf, strerror(errno));
+		strbuf_release(&path);
 		return;
 	}
-	path[len++] = '/';
+	strbuf_addch(&path, '/');
+	dirnamelen = path.len;
 	while ((de = readdir(dir)) != NULL) {
-		int namelen = strlen(de->d_name);
 		struct packed_git *p;
-
-		if (len + namelen + 1 > sizeof(path)) {
-			if (report_garbage) {
-				struct strbuf sb = STRBUF_INIT;
-				strbuf_addf(&sb, "%.*s/%s", len - 1, path, de->d_name);
-				report_garbage("path too long", sb.buf);
-				strbuf_release(&sb);
-			}
-			continue;
-		}
+		size_t base_len;
 
 		if (is_dot_or_dotdot(de->d_name))
 			continue;
 
-		strcpy(path + len, de->d_name);
+		strbuf_setlen(&path, dirnamelen);
+		strbuf_addstr(&path, de->d_name);
 
-		if (has_extension(de->d_name, ".idx")) {
+		base_len = path.len;
+		if (strip_suffix_mem(path.buf, &base_len, ".idx")) {
 			/* Don't reopen a pack we already have. */
 			for (p = packed_git; p; p = p->next) {
-				if (!memcmp(path, p->pack_name, len + namelen - 4))
+				size_t len;
+				if (strip_suffix(p->pack_name, ".pack", &len) &&
+				    len == base_len &&
+				    !memcmp(p->pack_name, path.buf, len))
 					break;
 			}
 			if (p == NULL &&
 			    /*
 			     * See if it really is a valid .idx file with
 			     * corresponding .pack file that we can map.
 			     */
-			    (p = add_packed_git(path, len + namelen, local)) != NULL)
+			    (p = add_packed_git(path.buf, path.len, local)) != NULL)
 				install_packed_git(p);
 		}
 
 		if (!report_garbage)
 			continue;
 
-		if (has_extension(de->d_name, ".idx") ||
-		    has_extension(de->d_name, ".pack") ||
-		    has_extension(de->d_name, ".bitmap") ||
-		    has_extension(de->d_name, ".keep"))
-			string_list_append(&garbage, path);
+		if (ends_with(de->d_name, ".idx") ||
+		    ends_with(de->d_name, ".pack") ||
+		    ends_with(de->d_name, ".bitmap") ||
+		    ends_with(de->d_name, ".keep"))
+			string_list_append(&garbage, path.buf);
 		else
-			report_garbage("garbage found", path);
+			report_garbage("garbage found", path.buf);
 	}
 	closedir(dir);
 	report_pack_garbage(&garbage);
 	string_list_clear(&garbage, 0);
+	strbuf_release(&path);
 }
 
 static int sort_pack(const void *a_, const void *b_)
 {
 	struct packed_git *a = *((struct packed_git **)a_);
 	struct packed_git *b = *((struct packed_git **)b_);
@@ -2083,33 +2080,15 @@
 
 static void *read_object(const unsigned char *sha1, enum object_type *type,
 			 unsigned long *size);
 
 static void write_pack_access_log(struct packed_git *p, off_t obj_offset)
 {
-	static FILE *log_file;
-
-	if (!log_pack_access)
-		log_pack_access = getenv("GIT_TRACE_PACK_ACCESS");
-	if (!log_pack_access)
-		log_pack_access = no_log_pack_access;
-	if (log_pack_access == no_log_pack_access)
-		return;
-
-	if (!log_file) {
-		log_file = fopen(log_pack_access, "w");
-		if (!log_file) {
-			error("cannot open pack access log '%s' for writing: %s",
-			      log_pack_access, strerror(errno));
-			log_pack_access = no_log_pack_access;
-			return;
-		}
-	}
-	fprintf(log_file, "%s %"PRIuMAX"\n",
-		p->pack_name, (uintmax_t)obj_offset);
-	fflush(log_file);
+	static struct trace_key pack_access = TRACE_KEY_INIT(PACK_ACCESS);
+	trace_printf_key(&pack_access, "%s %"PRIuMAX"\n",
+			 p->pack_name, (uintmax_t)obj_offset);
 }
 
 int do_check_packed_object_crc;
 
 #define UNPACK_ENTRY_STACK_PREALLOC 64
 struct unpack_entry_stack_ent {
@@ -2128,14 +2107,13 @@
 	enum object_type type;
 	struct unpack_entry_stack_ent small_delta_stack[UNPACK_ENTRY_STACK_PREALLOC];
 	struct unpack_entry_stack_ent *delta_stack = small_delta_stack;
 	int delta_stack_nr = 0, delta_stack_alloc = UNPACK_ENTRY_STACK_PREALLOC;
 	int base_from_cache = 0;
 
-	if (log_pack_access != no_log_pack_access)
-		write_pack_access_log(p, obj_offset);
+	write_pack_access_log(p, obj_offset);
 
 	/* PHASE 1: drill down to the innermost base object */
 	for (;;) {
 		off_t base_offset;
 		int i;
 		struct delta_base_cache_entry *ent;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1_file.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1_file.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1_file.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1_file.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1-lookup.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1-lookup.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1-lookup.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1-lookup.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1_name.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1_name.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1_name.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1_name.c	2014-08-16 06:26:55.000000000 +0800
@@ -537,14 +537,16 @@
 			at_time = 0;
 		else {
 			int errors = 0;
 			char *tmp = xstrndup(str + at + 2, reflog_len);
 			at_time = approxidate_careful(tmp, &errors);
 			free(tmp);
-			if (errors)
+			if (errors) {
+				free(real_ref);
 				return -1;
+			}
 		}
 		if (read_ref_at(real_ref, at_time, nth, sha1, NULL,
 				&co_time, &co_tz, &co_cnt)) {
 			if (!len) {
 				if (starts_with(real_ref, "refs/heads/")) {
 					str = real_ref + 11;
@@ -898,16 +900,14 @@
 				  const char *message, void *cb_data)
 {
 	struct grab_nth_branch_switch_cbdata *cb = cb_data;
 	const char *match = NULL, *target = NULL;
 	size_t len;
 
-	if (starts_with(message, "checkout: moving from ")) {
-		match = message + strlen("checkout: moving from ");
+	if (skip_prefix(message, "checkout: moving from ", &match))
 		target = strstr(match, " to ");
-	}
 
 	if (!match || !target)
 		return 0;
 	if (--(cb->remaining) == 0) {
 		len = target - match;
 		strbuf_reset(&cb->buf);
@@ -945,13 +945,13 @@
 	cb.remaining = nth;
 	strbuf_init(&cb.buf, 20);
 
 	retval = 0;
 	if (0 < for_each_reflog_ent_reverse("HEAD", grab_nth_branch_switch, &cb)) {
 		strbuf_reset(buf);
-		strbuf_add(buf, cb.buf.buf, cb.buf.len);
+		strbuf_addbuf(buf, &cb.buf);
 		retval = brace - name + 1;
 	}
 
 	strbuf_release(&cb.buf);
 	return retval;
 }
@@ -1239,16 +1239,13 @@
 		prefix = "";
 
 	if (!lstat(filename, &st))
 		die("Path '%s' exists on disk, but not in '%.*s'.",
 		    filename, object_name_len, object_name);
 	if (errno == ENOENT || errno == ENOTDIR) {
-		char *fullname = xmalloc(strlen(filename)
-					     + strlen(prefix) + 1);
-		strcpy(fullname, prefix);
-		strcat(fullname, filename);
+		char *fullname = xstrfmt("%s%s", prefix, filename);
 
 		if (!get_tree_entry(tree_sha1, fullname,
 				    sha1, &mode)) {
 			die("Path '%s' exists, but not '%s'.\n"
 			    "Did you mean '%.*s:%s' aka '%.*s:./%s'?",
 			    fullname,
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1_name.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1_name.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sha1_name.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sha1_name.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/shallow.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/shallow.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/shallow.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/shallow.c	2014-08-16 06:26:55.000000000 +0800
@@ -322,22 +322,22 @@
 		unlink(git_path("shallow"));
 		rollback_lock_file(&shallow_lock);
 	}
 	strbuf_release(&sb);
 }
 
-#define TRACE_KEY "GIT_TRACE_SHALLOW"
+struct trace_key trace_shallow = TRACE_KEY_INIT(SHALLOW);
 
 /*
  * Step 1, split sender shallow commits into "ours" and "theirs"
  * Step 2, clean "ours" based on .git/shallow
  */
 void prepare_shallow_info(struct shallow_info *info, struct sha1_array *sa)
 {
 	int i;
-	trace_printf_key(TRACE_KEY, "shallow: prepare_shallow_info\n");
+	trace_printf_key(&trace_shallow, "shallow: prepare_shallow_info\n");
 	memset(info, 0, sizeof(*info));
 	info->shallow = sa;
 	if (!sa)
 		return;
 	info->ours = xmalloc(sizeof(*info->ours) * sa->nr);
 	info->theirs = xmalloc(sizeof(*info->theirs) * sa->nr);
@@ -362,13 +362,13 @@
 /* Step 4, remove non-existent ones in "theirs" after getting the pack */
 
 void remove_nonexistent_theirs_shallow(struct shallow_info *info)
 {
 	unsigned char (*sha1)[20] = info->shallow->sha1;
 	int i, dst;
-	trace_printf_key(TRACE_KEY, "shallow: remove_nonexistent_theirs_shallow\n");
+	trace_printf_key(&trace_shallow, "shallow: remove_nonexistent_theirs_shallow\n");
 	for (i = dst = 0; i < info->nr_theirs; i++) {
 		if (i != dst)
 			info->theirs[dst] = info->theirs[i];
 		if (has_sha1_file(sha1[info->theirs[i]]))
 			dst++;
 	}
@@ -513,13 +513,13 @@
 	unsigned char (*sha1)[20] = info->shallow->sha1;
 	struct sha1_array *ref = info->ref;
 	unsigned int i, nr;
 	int *shallow, nr_shallow = 0;
 	struct paint_info pi;
 
-	trace_printf_key(TRACE_KEY, "shallow: assign_shallow_commits_to_refs\n");
+	trace_printf_key(&trace_shallow, "shallow: assign_shallow_commits_to_refs\n");
 	shallow = xmalloc(sizeof(*shallow) * (info->nr_ours + info->nr_theirs));
 	for (i = 0; i < info->nr_ours; i++)
 		shallow[nr_shallow++] = info->ours[i];
 	for (i = 0; i < info->nr_theirs; i++)
 		shallow[nr_shallow++] = info->theirs[i];
 
@@ -619,13 +619,13 @@
 	struct commit *c;
 	uint32_t **bitmap;
 	int dst, i, j;
 	int bitmap_nr = (info->ref->nr + 31) / 32;
 	struct commit_array ca;
 
-	trace_printf_key(TRACE_KEY, "shallow: post_assign_shallow\n");
+	trace_printf_key(&trace_shallow, "shallow: post_assign_shallow\n");
 	if (ref_status)
 		memset(ref_status, 0, sizeof(*ref_status) * info->ref->nr);
 
 	/* Remove unreachable shallow commits from "theirs" */
 	for (i = dst = 0; i < info->nr_theirs; i++) {
 		if (i != dst)
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/shallow.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/shallow.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/shallow.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/shallow.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/shell.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/shell.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/shell.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/shell.c	2014-08-16 06:26:55.000000000 +0800
@@ -43,17 +43,13 @@
 	/* Test command contains no . or / characters */
 	return cmd[strcspn(cmd, "./")] == '\0';
 }
 
 static char *make_cmd(const char *prog)
 {
-	char *prefix = xmalloc((strlen(prog) + strlen(COMMAND_DIR) + 2));
-	strcpy(prefix, COMMAND_DIR);
-	strcat(prefix, "/");
-	strcat(prefix, prog);
-	return prefix;
+	return xstrfmt("%s/%s", COMMAND_DIR, prog);
 }
 
 static void cd_to_homedir(void)
 {
 	const char *home = getenv("HOME");
 	if (!home)
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/shell.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/shell.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/shell.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/shell.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sh-i18n--envsubst.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sh-i18n--envsubst.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sh-i18n--envsubst.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sh-i18n--envsubst.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/show-index.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/show-index.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/show-index.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/show-index.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sideband.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sideband.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sideband.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sideband.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sigchain.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sigchain.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/sigchain.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/sigchain.o differ
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0: split-index.c
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0: split-index.c.bc
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0: split-index.h
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0: split-index.o
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/strbuf.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/strbuf.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/strbuf.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/strbuf.c	2014-08-16 06:26:55.000000000 +0800
@@ -1,27 +1,19 @@
 #include "cache.h"
 #include "refs.h"
+#include "utf8.h"
 
 int starts_with(const char *str, const char *prefix)
 {
 	for (; ; str++, prefix++)
 		if (!*prefix)
 			return 1;
 		else if (*str != *prefix)
 			return 0;
 }
 
-int ends_with(const char *str, const char *suffix)
-{
-	int len = strlen(str), suflen = strlen(suffix);
-	if (len < suflen)
-		return 0;
-	else
-		return !strcmp(str + len - suflen, suffix);
-}
-
 /*
  * Used as the default ->buf value, so that people can always assume
  * buf is non NULL and ->buf is NUL terminated even for a freshly
  * initialized strbuf.
  */
 char strbuf_slopbuf[1];
@@ -75,21 +67,14 @@
 	if (new_buf)
 		sb->buf[0] = '\0';
 }
 
 void strbuf_trim(struct strbuf *sb)
 {
-	char *b = sb->buf;
-	while (sb->len > 0 && isspace((unsigned char)sb->buf[sb->len - 1]))
-		sb->len--;
-	while (sb->len > 0 && isspace(*b)) {
-		b++;
-		sb->len--;
-	}
-	memmove(sb->buf, b, sb->len);
-	sb->buf[sb->len] = '\0';
+	strbuf_rtrim(sb);
+	strbuf_ltrim(sb);
 }
 void strbuf_rtrim(struct strbuf *sb)
 {
 	while (sb->len > 0 && isspace((unsigned char)sb->buf[sb->len - 1]))
 		sb->len--;
 	sb->buf[sb->len] = '\0';
@@ -103,12 +88,35 @@
 		sb->len--;
 	}
 	memmove(sb->buf, b, sb->len);
 	sb->buf[sb->len] = '\0';
 }
 
+int strbuf_reencode(struct strbuf *sb, const char *from, const char *to)
+{
+	char *out;
+	int len;
+
+	if (same_encoding(from, to))
+		return 0;
+
+	out = reencode_string_len(sb->buf, sb->len, to, from, &len);
+	if (!out)
+		return -1;
+
+	strbuf_attach(sb, out, len, len);
+	return 0;
+}
+
+void strbuf_tolower(struct strbuf *sb)
+{
+	char *p = sb->buf, *end = sb->buf + sb->len;
+	for (; p < end; p++)
+		*p = tolower(*p);
+}
+
 struct strbuf **strbuf_split_buf(const char *str, size_t slen,
 				 int terminator, int max)
 {
 	struct strbuf **ret = NULL;
 	size_t nr = 0, alloc = 0;
 	struct strbuf *t;
@@ -567,6 +575,38 @@
 	ret = vfprintf(fp, fmt, ap);
 	va_end(ap);
 	if (ret < 0 || putc('\n', fp) == EOF)
 		return -1;
 	return ret + 1;
 }
+
+char *xstrdup_tolower(const char *string)
+{
+	char *result;
+	size_t len, i;
+
+	len = strlen(string);
+	result = xmalloc(len + 1);
+	for (i = 0; i < len; i++)
+		result[i] = tolower(string[i]);
+	result[i] = '\0';
+	return result;
+}
+
+char *xstrvfmt(const char *fmt, va_list ap)
+{
+	struct strbuf buf = STRBUF_INIT;
+	strbuf_vaddf(&buf, fmt, ap);
+	return strbuf_detach(&buf, NULL);
+}
+
+char *xstrfmt(const char *fmt, ...)
+{
+	va_list ap;
+	char *ret;
+
+	va_start(ap, fmt);
+	ret = xstrvfmt(fmt, ap);
+	va_end(ap);
+
+	return ret;
+}
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/strbuf.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/strbuf.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/strbuf.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/strbuf.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/strbuf.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/strbuf.h	2014-08-16 06:26:55.000000000 +0800
@@ -42,14 +42,25 @@
 #define strbuf_reset(sb)  strbuf_setlen(sb, 0)
 
 /*----- content related -----*/
 extern void strbuf_trim(struct strbuf *);
 extern void strbuf_rtrim(struct strbuf *);
 extern void strbuf_ltrim(struct strbuf *);
+extern int strbuf_reencode(struct strbuf *sb, const char *from, const char *to);
+extern void strbuf_tolower(struct strbuf *sb);
 extern int strbuf_cmp(const struct strbuf *, const struct strbuf *);
 
+static inline int strbuf_strip_suffix(struct strbuf *sb, const char *suffix)
+{
+	if (strip_suffix_mem(sb->buf, &sb->len, suffix)) {
+		strbuf_setlen(sb, sb->len);
+		return 1;
+	} else
+		return 0;
+}
+
 /*
  * Split str (of length slen) at the specified terminator character.
  * Return a null-terminated array of pointers to strbuf objects
  * holding the substrings.  The substrings include the terminator,
  * except for the last substring, which might be unterminated if the
  * original string did not end with a terminator.  If max is positive,
@@ -180,7 +191,18 @@
 
 __attribute__((format (printf,1,2)))
 extern int printf_ln(const char *fmt, ...);
 __attribute__((format (printf,2,3)))
 extern int fprintf_ln(FILE *fp, const char *fmt, ...);
 
+char *xstrdup_tolower(const char *);
+
+/*
+ * Create a newly allocated string using printf format. You can do this easily
+ * with a strbuf, but this provides a shortcut to save a few lines.
+ */
+__attribute__((format (printf, 1, 0)))
+char *xstrvfmt(const char *fmt, va_list ap);
+__attribute__((format (printf, 1, 2)))
+char *xstrfmt(const char *fmt, ...);
+
 #endif /* STRBUF_H */
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/strbuf.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/strbuf.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/streaming.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/streaming.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/streaming.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/streaming.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/string-list.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/string-list.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/string-list.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/string-list.c	2014-08-16 06:26:55.000000000 +0800
@@ -1,9 +1,15 @@
 #include "cache.h"
 #include "string-list.h"
 
+void string_list_init(struct string_list *list, int strdup_strings)
+{
+	memset(list, 0, sizeof(*list));
+	list->strdup_strings = strdup_strings;
+}
+
 /* if there is no exact match, point to the index where the entry could be
  * inserted */
 static int get_entry_index(const struct string_list *list, const char *string,
 		int *exact_match)
 {
 	int left = -1, right = list->nr;
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/string-list.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/string-list.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/string-list.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/string-list.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/string-list.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/string-list.h	2014-08-16 06:26:55.000000000 +0800
@@ -12,14 +12,16 @@
 	struct string_list_item *items;
 	unsigned int nr, alloc;
 	unsigned int strdup_strings:1;
 	compare_strings_fn cmp; /* NULL uses strcmp() */
 };
 
-#define STRING_LIST_INIT_NODUP { NULL, 0, 0, 0 }
-#define STRING_LIST_INIT_DUP   { NULL, 0, 0, 1 }
+#define STRING_LIST_INIT_NODUP { NULL, 0, 0, 0, NULL }
+#define STRING_LIST_INIT_DUP   { NULL, 0, 0, 1, NULL }
+
+void string_list_init(struct string_list *list, int strdup_strings);
 
 void print_string_list(const struct string_list *p, const char *text);
 void string_list_clear(struct string_list *list, int free_util);
 
 /* Use this function to call a custom clear function on each util pointer */
 /* The string associated with the util pointer is passed as the second argument */
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/string-list.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/string-list.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/submodule.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/submodule.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/submodule.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/submodule.c	2014-08-16 06:26:55.000000000 +0800
@@ -541,16 +541,13 @@
 	return 1;
 }
 
 int push_unpushed_submodules(unsigned char new_sha1[20], const char *remotes_name)
 {
 	int i, ret = 1;
-	struct string_list needs_pushing;
-
-	memset(&needs_pushing, 0, sizeof(struct string_list));
-	needs_pushing.strdup_strings = 1;
+	struct string_list needs_pushing = STRING_LIST_INIT_DUP;
 
 	if (!find_unpushed_submodules(new_sha1, remotes_name, &needs_pushing))
 		return 1;
 
 	for (i = 0; i < needs_pushing.nr; i++) {
 		const char *path = needs_pushing.items[i].string;
@@ -962,13 +959,13 @@
 
 	/* get all revisions that merge commit a */
 	snprintf(merged_revision, sizeof(merged_revision), "^%s",
 			sha1_to_hex(a->object.sha1));
 	init_revisions(&revs, NULL);
 	rev_opts.submodule = path;
-	setup_revisions(sizeof(rev_args)/sizeof(char *)-1, rev_args, &revs, &rev_opts);
+	setup_revisions(ARRAY_SIZE(rev_args)-1, rev_args, &revs, &rev_opts);
 
 	/* save all revisions from the above list that contain b */
 	if (prepare_revision_walk(&revs))
 		die("revision walk setup failed");
 	while ((commit = get_revision(&revs)) != NULL) {
 		struct object *o = &(commit->object);
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/submodule.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/submodule.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/submodule.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/submodule.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/symlinks.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/symlinks.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/symlinks.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/symlinks.c	2014-08-16 06:26:55.000000000 +0800
@@ -32,18 +32,17 @@
 		match_len = i;
 	}
 	*previous_slash = match_len_prev;
 	return match_len;
 }
 
-static struct cache_def default_cache;
+static struct cache_def default_cache = CACHE_DEF_INIT;
 
 static inline void reset_lstat_cache(struct cache_def *cache)
 {
-	cache->path[0] = '\0';
-	cache->len = 0;
+	strbuf_reset(&cache->path);
 	cache->flags = 0;
 	/*
 	 * The track_flags and prefix_len_stat_func members is only
 	 * set by the safeguard rule inside lstat_cache()
 	 */
 }
@@ -70,13 +69,13 @@
 static int lstat_cache_matchlen(struct cache_def *cache,
 				const char *name, int len,
 				int *ret_flags, int track_flags,
 				int prefix_len_stat_func)
 {
 	int match_len, last_slash, last_slash_dir, previous_slash;
-	int save_flags, max_len, ret;
+	int save_flags, ret;
 	struct stat st;
 
 	if (cache->track_flags != track_flags ||
 	    cache->prefix_len_stat_func != prefix_len_stat_func) {
 		/*
 		 * As a safeguard rule we clear the cache if the
@@ -90,20 +89,20 @@
 	} else {
 		/*
 		 * Check to see if we have a match from the cache for
 		 * the 2 "excluding" path types.
 		 */
 		match_len = last_slash =
-			longest_path_match(name, len, cache->path, cache->len,
-					   &previous_slash);
+			longest_path_match(name, len, cache->path.buf,
+					   cache->path.len, &previous_slash);
 		*ret_flags = cache->flags & track_flags & (FL_NOENT|FL_SYMLINK);
 
 		if (!(track_flags & FL_FULLPATH) && match_len == len)
 			match_len = last_slash = previous_slash;
 
-		if (*ret_flags && match_len == cache->len)
+		if (*ret_flags && match_len == cache->path.len)
 			return match_len;
 		/*
 		 * If we now have match_len > 0, we would know that
 		 * the matched part will always be a directory.
 		 *
 		 * Also, if we are tracking directories and 'name' is
@@ -118,27 +117,28 @@
 	/*
 	 * Okay, no match from the cache so far, so now we have to
 	 * check the rest of the path components.
 	 */
 	*ret_flags = FL_DIR;
 	last_slash_dir = last_slash;
-	max_len = len < PATH_MAX ? len : PATH_MAX;
-	while (match_len < max_len) {
+	if (len > cache->path.len)
+		strbuf_grow(&cache->path, len - cache->path.len);
+	while (match_len < len) {
 		do {
-			cache->path[match_len] = name[match_len];
+			cache->path.buf[match_len] = name[match_len];
 			match_len++;
-		} while (match_len < max_len && name[match_len] != '/');
-		if (match_len >= max_len && !(track_flags & FL_FULLPATH))
+		} while (match_len < len && name[match_len] != '/');
+		if (match_len >= len && !(track_flags & FL_FULLPATH))
 			break;
 		last_slash = match_len;
-		cache->path[last_slash] = '\0';
+		cache->path.buf[last_slash] = '\0';
 
 		if (last_slash <= prefix_len_stat_func)
-			ret = stat(cache->path, &st);
+			ret = stat(cache->path.buf, &st);
 		else
-			ret = lstat(cache->path, &st);
+			ret = lstat(cache->path.buf, &st);
 
 		if (ret) {
 			*ret_flags = FL_LSTATERR;
 			if (errno == ENOENT)
 				*ret_flags |= FL_NOENT;
 		} else if (S_ISDIR(st.st_mode)) {
@@ -155,31 +155,30 @@
 	/*
 	 * At the end update the cache.  Note that max 3 different
 	 * path types, FL_NOENT, FL_SYMLINK and FL_DIR, can be cached
 	 * for the moment!
 	 */
 	save_flags = *ret_flags & track_flags & (FL_NOENT|FL_SYMLINK);
-	if (save_flags && last_slash > 0 && last_slash <= PATH_MAX) {
-		cache->path[last_slash] = '\0';
-		cache->len = last_slash;
+	if (save_flags && last_slash > 0) {
+		cache->path.buf[last_slash] = '\0';
+		cache->path.len = last_slash;
 		cache->flags = save_flags;
-	} else if ((track_flags & FL_DIR) &&
-		   last_slash_dir > 0 && last_slash_dir <= PATH_MAX) {
+	} else if ((track_flags & FL_DIR) && last_slash_dir > 0) {
 		/*
 		 * We have a separate test for the directory case,
 		 * since it could be that we have found a symlink or a
 		 * non-existing directory and the track_flags says
 		 * that we cannot cache this fact, so the cache would
 		 * then have been left empty in this case.
 		 *
 		 * But if we are allowed to track real directories, we
 		 * can still cache the path components before the last
 		 * one (the found symlink or non-existing component).
 		 */
-		cache->path[last_slash_dir] = '\0';
-		cache->len = last_slash_dir;
+		cache->path.buf[last_slash_dir] = '\0';
+		cache->path.len = last_slash_dir;
 		cache->flags = FL_DIR;
 	} else {
 		reset_lstat_cache(cache);
 	}
 	return match_len;
 }
@@ -270,37 +269,34 @@
 {
 	return lstat_cache(cache, name, len,
 			   FL_DIR|FL_FULLPATH, prefix_len) &
 		FL_DIR;
 }
 
-static struct removal_def {
-	char path[PATH_MAX];
-	int len;
-} removal;
+static struct strbuf removal = STRBUF_INIT;
 
 static void do_remove_scheduled_dirs(int new_len)
 {
 	while (removal.len > new_len) {
-		removal.path[removal.len] = '\0';
-		if (rmdir(removal.path))
+		removal.buf[removal.len] = '\0';
+		if (rmdir(removal.buf))
 			break;
 		do {
 			removal.len--;
 		} while (removal.len > new_len &&
-			 removal.path[removal.len] != '/');
+			 removal.buf[removal.len] != '/');
 	}
 	removal.len = new_len;
 }
 
 void schedule_dir_for_removal(const char *name, int len)
 {
 	int match_len, last_slash, i, previous_slash;
 
 	match_len = last_slash = i =
-		longest_path_match(name, len, removal.path, removal.len,
+		longest_path_match(name, len, removal.buf, removal.len,
 				   &previous_slash);
 	/* Find last slash inside 'name' */
 	while (i < len) {
 		if (name[i] == '/')
 			last_slash = i;
 		i++;
@@ -314,17 +310,14 @@
 	if (match_len < last_slash && match_len < removal.len)
 		do_remove_scheduled_dirs(match_len);
 	/*
 	 * If we go deeper down the directory tree, we only need to
 	 * save the new path components as we go down.
 	 */
-	if (match_len < last_slash) {
-		memcpy(&removal.path[match_len], &name[match_len],
-		       last_slash - match_len);
-		removal.len = last_slash;
-	}
+	if (match_len < last_slash)
+		strbuf_add(&removal, &name[match_len], last_slash - match_len);
 }
 
 void remove_scheduled_dirs(void)
 {
 	do_remove_scheduled_dirs(0);
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/symlinks.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/symlinks.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/symlinks.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/symlinks.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/annotate-tests.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/annotate-tests.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/annotate-tests.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/annotate-tests.sh	2014-08-16 06:26:55.000000000 +0800
@@ -1,18 +1,30 @@
 # This file isn't used as a test script directly, instead it is
 # sourced from t8001-annotate.sh and t8002-blame.sh.
 
+if test_have_prereq MINGW
+then
+  sanitize_L () {
+	echo "$1" | sed 'sX\(^-L\|,\)\^\?/X&\\;*Xg'
+  }
+else
+  sanitize_L () {
+	echo "$1"
+  }
+fi
+
 check_count () {
 	head= &&
 	file='file' &&
 	options= &&
 	while :
 	do
 		case "$1" in
 		-h) head="$2"; shift; shift ;;
 		-f) file="$2"; shift; shift ;;
+		-L*) options="$options $(sanitize_L "$1")"; shift ;;
 		-*) options="$options $1"; shift ;;
 		*) break ;;
 		esac
 	done &&
 	echo "$PROG $options $file $head" >&4 &&
 	$PROG $options $file $head >actual &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/check-non-portable-shell.pl /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/check-non-portable-shell.pl
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/check-non-portable-shell.pl	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/check-non-portable-shell.pl	2014-08-16 06:26:55.000000000 +0800
@@ -13,16 +13,16 @@
 	print "$ARGV:$.: error: $msg: $_\n";
 	$exit_code = 1;
 }
 
 while (<>) {
 	chomp;
-	/^\s*sed\s+-i/ and err 'sed -i is not portable';
-	/^\s*echo\s+-n/ and err 'echo -n is not portable (please use printf)';
+	/\bsed\s+-i/ and err 'sed -i is not portable';
+	/\becho\s+-n/ and err 'echo -n is not portable (please use printf)';
 	/^\s*declare\s+/ and err 'arrays/declare not portable';
 	/^\s*[^#]\s*which\s/ and err 'which is not portable (please use type)';
-	/test\s+[^=]*==/ and err '"test a == b" is not portable (please use =)';
-	/^\s*export\s+[^=]*=/ and err '"export FOO=bar" is not portable (please use FOO=bar && export FOO)';
+	/\btest\s+[^=]*==/ and err '"test a == b" is not portable (please use =)';
+	/\bexport\s+[A-Za-z0-9_]*=/ and err '"export FOO=bar" is not portable (please use FOO=bar && export FOO)';
 	# this resets our $. for each file
 	close ARGV if eof;
 }
 exit $exit_code;
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/lib-credential.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/lib-credential.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/lib-credential.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/lib-credential.sh	2014-08-16 06:26:55.000000000 +0800
@@ -278,12 +278,12 @@
 	'
 }
 
 cat >askpass <<\EOF
 #!/bin/sh
 echo >&2 askpass: $*
-what=`echo $1 | cut -d" " -f1 | tr A-Z a-z | tr -cd a-z`
+what=$(echo $1 | cut -d" " -f1 | tr A-Z a-z | tr -cd a-z)
 echo "askpass-$what"
 EOF
 chmod +x askpass
 GIT_ASKPASS="$PWD/askpass"
 export GIT_ASKPASS
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/lib-cvs.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/lib-cvs.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/lib-cvs.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/lib-cvs.sh	2014-08-16 06:26:55.000000000 +0800
@@ -10,13 +10,13 @@
 	test_done
 fi
 
 CVS="cvs -f"
 export CVS
 
-cvsps_version=`cvsps -h 2>&1 | sed -ne 's/cvsps version //p'`
+cvsps_version=$(cvsps -h 2>&1 | sed -ne 's/cvsps version //p')
 case "$cvsps_version" in
 2.1 | 2.2*)
 	;;
 '')
 	skip_all='skipping cvsimport tests, cvsps not found'
 	test_done
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/lib-gpg.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/lib-gpg.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/lib-gpg.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/lib-gpg.sh	2014-08-16 06:26:55.000000000 +0800
@@ -1,9 +1,9 @@
 #!/bin/sh
 
-gpg_version=`gpg --version 2>&1`
+gpg_version=$(gpg --version 2>&1)
 if test $? = 127; then
 	say "You do not seem to have gpg installed"
 else
 	# As said here: http://www.gnupg.org/documentation/faqs.html#q6.19
 	# the gpg version 1.0.6 didn't parse trust packets correctly, so for
 	# that version, creation of signed tags using the generated key fails.
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/lib-httpd/apache.conf /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/lib-httpd/apache.conf
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/lib-httpd/apache.conf	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/lib-httpd/apache.conf	2014-08-16 06:26:55.000000000 +0800
@@ -94,18 +94,22 @@
 	SetEnv GIT_EXEC_PATH ${GIT_EXEC_PATH}
 	SetEnv GIT_HTTP_EXPORT_ALL
 	Header set Set-Cookie name=value
 </LocationMatch>
 ScriptAliasMatch /smart_*[^/]*/(.*) ${GIT_EXEC_PATH}/git-http-backend/$1
 ScriptAlias /broken_smart/ broken-smart-http.sh/
+ScriptAlias /error/ error.sh/
 <Directory ${GIT_EXEC_PATH}>
 	Options FollowSymlinks
 </Directory>
 <Files broken-smart-http.sh>
 	Options ExecCGI
 </Files>
+<Files error.sh>
+  Options ExecCGI
+</Files>
 <Files ${GIT_EXEC_PATH}/git-http-backend>
 	Options ExecCGI
 </Files>
 
 RewriteEngine on
 RewriteRule ^/smart-redir-perm/(.*)$ /smart/$1 [R=301]
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/lib-httpd/broken-smart-http.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/lib-httpd/broken-smart-http.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/lib-httpd/broken-smart-http.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/lib-httpd/broken-smart-http.sh	2014-08-16 06:26:55.000000000 +0800
@@ -1,7 +1,6 @@
-#!/bin/sh
 printf "Content-Type: text/%s\n" "html"
 echo
 printf "%s\n" "001e# service=git-upload-pack"
 printf "%s"   "0000"
 printf "%s%c%s%s\n" \
 	"00a58681d9f286a48b08f37b3a095330da16689e3693 HEAD" \
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/lib-httpd: error.sh
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/lib-httpd.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/lib-httpd.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/lib-httpd.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/lib-httpd.sh	2014-08-16 06:26:55.000000000 +0800
@@ -34,12 +34,17 @@
 if test "$GIT_TEST_HTTPD" = false
 then
 	skip_all="Network testing disabled (unset GIT_TEST_HTTPD to enable)"
 	test_done
 fi
 
+if ! test_have_prereq SANITY; then
+	test_skip_or_die $GIT_TEST_HTTPD \
+		"Cannot run httpd tests as root"
+fi
+
 HTTPD_PARA=""
 
 for DEFAULT_HTTPD_PATH in '/usr/sbin/httpd' '/usr/sbin/apache2'
 do
 	if test -x "$DEFAULT_HTTPD_PATH"
 	then
@@ -102,16 +107,21 @@
 	fi
 else
 	test_skip_or_die $GIT_TEST_HTTPD \
 		"Could not identify web server at '$LIB_HTTPD_PATH'"
 fi
 
+install_script () {
+	write_script "$HTTPD_ROOT_PATH/$1" <"$TEST_PATH/$1"
+}
+
 prepare_httpd() {
 	mkdir -p "$HTTPD_DOCUMENT_ROOT_PATH"
 	cp "$TEST_PATH"/passwd "$HTTPD_ROOT_PATH"
-	cp "$TEST_PATH"/broken-smart-http.sh "$HTTPD_ROOT_PATH"
+	install_script broken-smart-http.sh
+	install_script error.sh
 
 	ln -s "$LIB_HTTPD_MODULE_PATH" "$HTTPD_ROOT_PATH/modules"
 
 	if test -n "$LIB_HTTPD_SSL"
 	then
 		HTTPD_PROTO=https
@@ -129,13 +139,13 @@
 	fi
 	HTTPD_DEST=127.0.0.1:$LIB_HTTPD_PORT
 	HTTPD_URL=$HTTPD_PROTO://$HTTPD_DEST
 	HTTPD_URL_USER=$HTTPD_PROTO://user%40host@$HTTPD_DEST
 	HTTPD_URL_USER_PASS=$HTTPD_PROTO://user%40host:pass%40host@$HTTPD_DEST
 
-	if test -n "$LIB_HTTPD_DAV" -o -n "$LIB_HTTPD_SVN"
+	if test -n "$LIB_HTTPD_DAV" || test -n "$LIB_HTTPD_SVN"
 	then
 		HTTPD_PARA="$HTTPD_PARA -DDAV"
 
 		if test -n "$LIB_HTTPD_SVN"
 		then
 			HTTPD_PARA="$HTTPD_PARA -DSVN"
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t: lib-submodule-update.sh
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/Makefile /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/Makefile
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/Makefile	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/Makefile	2014-08-16 06:26:55.000000000 +0800
@@ -10,13 +10,13 @@
 SHELL_PATH ?= $(SHELL)
 PERL_PATH ?= /usr/bin/perl
 TAR ?= $(TAR)
 RM ?= rm -f
 PROVE ?= prove
 DEFAULT_TEST_TARGET ?= test
-TEST_LINT ?= test-lint-duplicates test-lint-executable
+TEST_LINT ?= test-lint
 
 ifdef TEST_OUTPUT_DIRECTORY
 TEST_RESULTS_DIRECTORY = $(TEST_OUTPUT_DIRECTORY)/test-results
 else
 TEST_RESULTS_DIRECTORY = test-results
 endif
@@ -26,12 +26,13 @@
 PERL_PATH_SQ = $(subst ','\'',$(PERL_PATH))
 TEST_RESULTS_DIRECTORY_SQ = $(subst ','\'',$(TEST_RESULTS_DIRECTORY))
 
 T = $(sort $(wildcard t[0-9][0-9][0-9][0-9]-*.sh))
 TSVN = $(sort $(wildcard t91[0-9][0-9]-*.sh))
 TGITWEB = $(sort $(wildcard t95[0-9][0-9]-*.sh))
+THELPERS = $(sort $(filter-out $(T),$(wildcard *.sh)))
 
 all: $(DEFAULT_TEST_TARGET)
 
 test: pre-clean $(TEST_LINT)
 	$(MAKE) aggregate-results-and-cleanup
 
@@ -62,13 +63,13 @@
 test-lint-executable:
 	@bad=`for i in $(T); do test -x "$$i" || echo $$i; done` && \
 		test -z "$$bad" || { \
 		echo >&2 "non-executable tests:" $$bad; exit 1; }
 
 test-lint-shell-syntax:
-	@'$(PERL_PATH_SQ)' check-non-portable-shell.pl $(T)
+	@'$(PERL_PATH_SQ)' check-non-portable-shell.pl $(T) $(THELPERS)
 
 aggregate-results-and-cleanup: $(T)
 	$(MAKE) aggregate-results
 	$(MAKE) clean
 
 aggregate-results:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/perf/p5302-pack-index.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/perf/p5302-pack-index.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/perf/p5302-pack-index.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/perf/p5302-pack-index.sh	2014-08-16 06:26:55.000000000 +0800
@@ -5,13 +5,13 @@
 . ./perf-lib.sh
 
 test_perf_large_repo
 
 test_expect_success 'repack' '
 	git repack -ad &&
-	PACK=`ls .git/objects/pack/*.pack | head -n1` &&
+	PACK=$(ls .git/objects/pack/*.pack | head -n1) &&
 	test -f "$PACK" &&
 	export PACK
 '
 
 test_perf 'index-pack 0 threads' '
 	GIT_DIR=t1 git index-pack --threads=1 --stdin < $PACK
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/perf/p5310-pack-bitmaps.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/perf/p5310-pack-bitmaps.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/perf/p5310-pack-bitmaps.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/perf/p5310-pack-bitmaps.sh	2014-08-16 06:26:55.000000000 +0800
@@ -5,12 +5,15 @@
 
 test_perf_large_repo
 
 # note that we do everything through config,
 # since we want to be able to compare bitmap-aware
 # git versus non-bitmap git
+#
+# We intentionally use the deprecated pack.writebitmaps
+# config so that we can test against older versions of git.
 test_expect_success 'setup bitmap config' '
 	git config pack.writebitmaps true &&
 	git config pack.writebitmaphashcache true
 '
 
 test_perf 'repack to disk' '
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/README /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/README
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/README	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/README	2014-08-16 06:26:55.000000000 +0800
@@ -68,41 +68,51 @@
     1..5
 
 You can pass --verbose (or -v), --debug (or -d), and --immediate
 (or -i) command line argument to the test, or by setting GIT_TEST_OPTS
 appropriately before running "make".
 
+-v::
 --verbose::
 	This makes the test more verbose.  Specifically, the
 	command being run and their output if any are also
 	output.
 
 --verbose-only=<pattern>::
 	Like --verbose, but the effect is limited to tests with
 	numbers matching <pattern>.  The number matched against is
 	simply the running count of the test within the file.
 
+-d::
 --debug::
 	This may help the person who is developing a new test.
 	It causes the command defined with test_debug to run.
 	The "trash" directory (used to store all temporary data
 	during testing) is not deleted even if there are no
 	failed tests so that you can inspect its contents after
 	the test finished.
 
+-i::
 --immediate::
 	This causes the test to immediately exit upon the first
 	failed test. Cleanup commands requested with
 	test_when_finished are not executed if the test failed,
 	in order to keep the state for inspection by the tester
 	to diagnose the bug.
 
+-l::
 --long-tests::
 	This causes additional long-running tests to be run (where
 	available), for more exhaustive testing.
 
+-r::
+--run=<test-selector>::
+	Run only the subset of tests indicated by
+	<test-selector>.  See section "Skipping Tests" below for
+	<test-selector> syntax.
+
 --valgrind=<tool>::
 	Execute all Git binaries under valgrind tool <tool> and exit
 	with status 126 on errors (just like regular tests, this will
 	only stop the test script when running under -i).
 
 	Since it makes no sense to run the tests with --valgrind and
@@ -184,16 +194,83 @@
 to omit such tests.  The value of the environment variable is a
 SP separated list of patterns that tells which tests to skip,
 and either can match the "t[0-9]{4}" part to skip the whole
 test, or t[0-9]{4} followed by ".$number" to say which
 particular test to skip.
 
-Note that some tests in the existing test suite rely on previous
-test item, so you cannot arbitrarily disable one and expect the
-remainder of test to check what the test originally was intended
-to check.
+For an individual test suite --run could be used to specify that
+only some tests should be run or that some tests should be
+excluded from a run.
+
+The argument for --run is a list of individual test numbers or
+ranges with an optional negation prefix that define what tests in
+a test suite to include in the run.  A range is two numbers
+separated with a dash and matches a range of tests with both ends
+been included.  You may omit the first or the second number to
+mean "from the first test" or "up to the very last test"
+respectively.
+
+Optional prefix of '!' means that the test or a range of tests
+should be excluded from the run.
+
+If --run starts with an unprefixed number or range the initial
+set of tests to run is empty. If the first item starts with '!'
+all the tests are added to the initial set.  After initial set is
+determined every test number or range is added or excluded from
+the set one by one, from left to right.
+
+Individual numbers or ranges could be separated either by a space
+or a comma.
+
+For example, to run only tests up to a specific test (21), one
+could do this:
+
+    $ sh ./t9200-git-cvsexport-commit.sh --run='1-21'
+
+or this:
+
+    $ sh ./t9200-git-cvsexport-commit.sh --run='-21'
+
+Common case is to run several setup tests (1, 2, 3) and then a
+specific test (21) that relies on that setup:
+
+    $ sh ./t9200-git-cvsexport-commit.sh --run='1 2 3 21'
+
+or:
+
+    $ sh ./t9200-git-cvsexport-commit.sh --run=1,2,3,21
+
+or:
+
+    $ sh ./t9200-git-cvsexport-commit.sh --run='-3 21'
+
+As noted above, the test set is built going though items left to
+right, so this:
+
+    $ sh ./t9200-git-cvsexport-commit.sh --run='1-4 !3'
+
+will run tests 1, 2, and 4.  Items that comes later have higher
+precendence.  It means that this:
+
+    $ sh ./t9200-git-cvsexport-commit.sh --run='!3 1-4'
+
+would just run tests from 1 to 4, including 3.
+
+You may use negation with ranges.  The following will run all
+test in the test suite except from 7 up to 11:
+
+    $ sh ./t9200-git-cvsexport-commit.sh --run='!7-11'
+
+Some tests in a test suite rely on the previous tests performing
+certain actions, specifically some tests are designated as
+"setup" test, so you cannot _arbitrarily_ disable one test and
+expect the rest to function correctly.
+
+--run is mostly useful when you want to focus on a specific test
+and know what setup is needed for it.  Or when you want to run
+everything up to a certain test.
 
 
 Naming Tests
 ------------
 
 The test files are named as:
@@ -593,12 +670,33 @@
 	test_expect_success 'branch pointing to non-commit' '
 		git rev-parse HEAD^{tree} >.git/refs/heads/invalid &&
 		test_when_finished "git update-ref -d refs/heads/invalid" &&
 		...
 	'
 
+ - test_write_lines <lines>
+
+   Write <lines> on standard output, one line per argument.
+   Useful to prepare multi-line files in a compact form.
+
+   Example:
+
+	test_write_lines a b c d e f g >foo
+
+   Is a more compact equivalent of:
+	cat >foo <<-EOF
+	a
+	b
+	c
+	d
+	e
+	f
+	g
+	EOF
+
+
  - test_pause
 
 	This command is useful for writing and debugging tests and must be
 	removed before submitting. It halts the execution of the test and
 	spawns a shell in the trash directory. Exit the shell to continue
 	the test. Example:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0000-basic.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0000-basic.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0000-basic.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0000-basic.sh	2014-08-16 06:26:55.000000000 +0800
@@ -39,15 +39,15 @@
 ################################################################
 # Test harness
 test_expect_success 'success is reported like this' '
 	:
 '
 
-run_sub_test_lib_test () {
-	name="$1" descr="$2" # stdin is the body of the test code
-	shift 2
+_run_sub_test_lib_test_common () {
+	neg="$1" name="$2" descr="$3" # stdin is the body of the test code
+	shift 3
 	mkdir "$name" &&
 	(
 		# Pretend we're not running under a test harness, whether we
 		# are or not. The test-lib output depends on the setting of
 		# this variable, so we need a stable setting under which to run
 		# the sub-test.
@@ -67,26 +67,51 @@
 		EOF
 		cat >>"$name.sh" &&
 		chmod +x "$name.sh" &&
 		export TEST_DIRECTORY &&
 		TEST_OUTPUT_DIRECTORY=$(pwd) &&
 		export TEST_OUTPUT_DIRECTORY &&
-		./"$name.sh" "$@" >out 2>err
+		if test -z "$neg"
+		then
+			./"$name.sh" "$@" >out 2>err
+		else
+			!  ./"$name.sh" "$@" >out 2>err
+		fi
 	)
 }
 
+run_sub_test_lib_test () {
+	_run_sub_test_lib_test_common '' "$@"
+}
+
+run_sub_test_lib_test_err () {
+	_run_sub_test_lib_test_common '!' "$@"
+}
+
 check_sub_test_lib_test () {
 	name="$1" # stdin is the expected output from the test
 	(
 		cd "$name" &&
 		! test -s err &&
 		sed -e 's/^> //' -e 's/Z$//' >expect &&
 		test_cmp expect out
 	)
 }
 
+check_sub_test_lib_test_err () {
+	name="$1" # stdin is the expected output output from the test
+	# expected error output is in descriptior 3
+	(
+		cd "$name" &&
+		sed -e 's/^> //' -e 's/Z$//' >expect.out &&
+		test_cmp expect.out out &&
+		sed -e 's/^> //' -e 's/Z$//' <&3 >expect.err &&
+		test_cmp expect.err err
+	)
+}
+
 test_expect_success 'pretend we have a fully passing test suite' "
 	run_sub_test_lib_test full-pass '3 passing tests' <<-\\EOF &&
 	for i in 1 2 3
 	do
 		test_expect_success \"passing test #\$i\" 'true'
 	done
@@ -267,12 +292,404 @@
 	> #	false
 	> # failed 1 among 3 test(s)
 	> 1..3
 	EOF
 '
 
+test_expect_success 'GIT_SKIP_TESTS' "
+	(
+		GIT_SKIP_TESTS='git.2' && export GIT_SKIP_TESTS &&
+		run_sub_test_lib_test git-skip-tests-basic \
+			'GIT_SKIP_TESTS' <<-\\EOF &&
+		for i in 1 2 3
+		do
+			test_expect_success \"passing test #\$i\" 'true'
+		done
+		test_done
+		EOF
+		check_sub_test_lib_test git-skip-tests-basic <<-\\EOF
+		> ok 1 - passing test #1
+		> ok 2 # skip passing test #2 (GIT_SKIP_TESTS)
+		> ok 3 - passing test #3
+		> # passed all 3 test(s)
+		> 1..3
+		EOF
+	)
+"
+
+test_expect_success 'GIT_SKIP_TESTS several tests' "
+	(
+		GIT_SKIP_TESTS='git.2 git.5' && export GIT_SKIP_TESTS &&
+		run_sub_test_lib_test git-skip-tests-several \
+			'GIT_SKIP_TESTS several tests' <<-\\EOF &&
+		for i in 1 2 3 4 5 6
+		do
+			test_expect_success \"passing test #\$i\" 'true'
+		done
+		test_done
+		EOF
+		check_sub_test_lib_test git-skip-tests-several <<-\\EOF
+		> ok 1 - passing test #1
+		> ok 2 # skip passing test #2 (GIT_SKIP_TESTS)
+		> ok 3 - passing test #3
+		> ok 4 - passing test #4
+		> ok 5 # skip passing test #5 (GIT_SKIP_TESTS)
+		> ok 6 - passing test #6
+		> # passed all 6 test(s)
+		> 1..6
+		EOF
+	)
+"
+
+test_expect_success 'GIT_SKIP_TESTS sh pattern' "
+	(
+		GIT_SKIP_TESTS='git.[2-5]' && export GIT_SKIP_TESTS &&
+		run_sub_test_lib_test git-skip-tests-sh-pattern \
+			'GIT_SKIP_TESTS sh pattern' <<-\\EOF &&
+		for i in 1 2 3 4 5 6
+		do
+			test_expect_success \"passing test #\$i\" 'true'
+		done
+		test_done
+		EOF
+		check_sub_test_lib_test git-skip-tests-sh-pattern <<-\\EOF
+		> ok 1 - passing test #1
+		> ok 2 # skip passing test #2 (GIT_SKIP_TESTS)
+		> ok 3 # skip passing test #3 (GIT_SKIP_TESTS)
+		> ok 4 # skip passing test #4 (GIT_SKIP_TESTS)
+		> ok 5 # skip passing test #5 (GIT_SKIP_TESTS)
+		> ok 6 - passing test #6
+		> # passed all 6 test(s)
+		> 1..6
+		EOF
+	)
+"
+
+test_expect_success '--run basic' "
+	run_sub_test_lib_test run-basic \
+		'--run basic' --run='1 3 5' <<-\\EOF &&
+	for i in 1 2 3 4 5 6
+	do
+		test_expect_success \"passing test #\$i\" 'true'
+	done
+	test_done
+	EOF
+	check_sub_test_lib_test run-basic <<-\\EOF
+	> ok 1 - passing test #1
+	> ok 2 # skip passing test #2 (--run)
+	> ok 3 - passing test #3
+	> ok 4 # skip passing test #4 (--run)
+	> ok 5 - passing test #5
+	> ok 6 # skip passing test #6 (--run)
+	> # passed all 6 test(s)
+	> 1..6
+	EOF
+"
+
+test_expect_success '--run with a range' "
+	run_sub_test_lib_test run-range \
+		'--run with a range' --run='1-3' <<-\\EOF &&
+	for i in 1 2 3 4 5 6
+	do
+		test_expect_success \"passing test #\$i\" 'true'
+	done
+	test_done
+	EOF
+	check_sub_test_lib_test run-range <<-\\EOF
+	> ok 1 - passing test #1
+	> ok 2 - passing test #2
+	> ok 3 - passing test #3
+	> ok 4 # skip passing test #4 (--run)
+	> ok 5 # skip passing test #5 (--run)
+	> ok 6 # skip passing test #6 (--run)
+	> # passed all 6 test(s)
+	> 1..6
+	EOF
+"
+
+test_expect_success '--run with two ranges' "
+	run_sub_test_lib_test run-two-ranges \
+		'--run with two ranges' --run='1-2 5-6' <<-\\EOF &&
+	for i in 1 2 3 4 5 6
+	do
+		test_expect_success \"passing test #\$i\" 'true'
+	done
+	test_done
+	EOF
+	check_sub_test_lib_test run-two-ranges <<-\\EOF
+	> ok 1 - passing test #1
+	> ok 2 - passing test #2
+	> ok 3 # skip passing test #3 (--run)
+	> ok 4 # skip passing test #4 (--run)
+	> ok 5 - passing test #5
+	> ok 6 - passing test #6
+	> # passed all 6 test(s)
+	> 1..6
+	EOF
+"
+
+test_expect_success '--run with a left open range' "
+	run_sub_test_lib_test run-left-open-range \
+		'--run with a left open range' --run='-3' <<-\\EOF &&
+	for i in 1 2 3 4 5 6
+	do
+		test_expect_success \"passing test #\$i\" 'true'
+	done
+	test_done
+	EOF
+	check_sub_test_lib_test run-left-open-range <<-\\EOF
+	> ok 1 - passing test #1
+	> ok 2 - passing test #2
+	> ok 3 - passing test #3
+	> ok 4 # skip passing test #4 (--run)
+	> ok 5 # skip passing test #5 (--run)
+	> ok 6 # skip passing test #6 (--run)
+	> # passed all 6 test(s)
+	> 1..6
+	EOF
+"
+
+test_expect_success '--run with a right open range' "
+	run_sub_test_lib_test run-right-open-range \
+		'--run with a right open range' --run='4-' <<-\\EOF &&
+	for i in 1 2 3 4 5 6
+	do
+		test_expect_success \"passing test #\$i\" 'true'
+	done
+	test_done
+	EOF
+	check_sub_test_lib_test run-right-open-range <<-\\EOF
+	> ok 1 # skip passing test #1 (--run)
+	> ok 2 # skip passing test #2 (--run)
+	> ok 3 # skip passing test #3 (--run)
+	> ok 4 - passing test #4
+	> ok 5 - passing test #5
+	> ok 6 - passing test #6
+	> # passed all 6 test(s)
+	> 1..6
+	EOF
+"
+
+test_expect_success '--run with basic negation' "
+	run_sub_test_lib_test run-basic-neg \
+		'--run with basic negation' --run='"'!3'"' <<-\\EOF &&
+	for i in 1 2 3 4 5 6
+	do
+		test_expect_success \"passing test #\$i\" 'true'
+	done
+	test_done
+	EOF
+	check_sub_test_lib_test run-basic-neg <<-\\EOF
+	> ok 1 - passing test #1
+	> ok 2 - passing test #2
+	> ok 3 # skip passing test #3 (--run)
+	> ok 4 - passing test #4
+	> ok 5 - passing test #5
+	> ok 6 - passing test #6
+	> # passed all 6 test(s)
+	> 1..6
+	EOF
+"
+
+test_expect_success '--run with two negations' "
+	run_sub_test_lib_test run-two-neg \
+		'--run with two negations' --run='"'!3 !6'"' <<-\\EOF &&
+	for i in 1 2 3 4 5 6
+	do
+		test_expect_success \"passing test #\$i\" 'true'
+	done
+	test_done
+	EOF
+	check_sub_test_lib_test run-two-neg <<-\\EOF
+	> ok 1 - passing test #1
+	> ok 2 - passing test #2
+	> ok 3 # skip passing test #3 (--run)
+	> ok 4 - passing test #4
+	> ok 5 - passing test #5
+	> ok 6 # skip passing test #6 (--run)
+	> # passed all 6 test(s)
+	> 1..6
+	EOF
+"
+
+test_expect_success '--run a range and negation' "
+	run_sub_test_lib_test run-range-and-neg \
+		'--run a range and negation' --run='"'-4 !2'"' <<-\\EOF &&
+	for i in 1 2 3 4 5 6
+	do
+		test_expect_success \"passing test #\$i\" 'true'
+	done
+	test_done
+	EOF
+	check_sub_test_lib_test run-range-and-neg <<-\\EOF
+	> ok 1 - passing test #1
+	> ok 2 # skip passing test #2 (--run)
+	> ok 3 - passing test #3
+	> ok 4 - passing test #4
+	> ok 5 # skip passing test #5 (--run)
+	> ok 6 # skip passing test #6 (--run)
+	> # passed all 6 test(s)
+	> 1..6
+	EOF
+"
+
+test_expect_success '--run range negation' "
+	run_sub_test_lib_test run-range-neg \
+		'--run range negation' --run='"'!1-3'"' <<-\\EOF &&
+	for i in 1 2 3 4 5 6
+	do
+		test_expect_success \"passing test #\$i\" 'true'
+	done
+	test_done
+	EOF
+	check_sub_test_lib_test run-range-neg <<-\\EOF
+	> ok 1 # skip passing test #1 (--run)
+	> ok 2 # skip passing test #2 (--run)
+	> ok 3 # skip passing test #3 (--run)
+	> ok 4 - passing test #4
+	> ok 5 - passing test #5
+	> ok 6 - passing test #6
+	> # passed all 6 test(s)
+	> 1..6
+	EOF
+"
+
+test_expect_success '--run include, exclude and include' "
+	run_sub_test_lib_test run-inc-neg-inc \
+		'--run include, exclude and include' \
+		--run='"'1-5 !1-3 2'"' <<-\\EOF &&
+	for i in 1 2 3 4 5 6
+	do
+		test_expect_success \"passing test #\$i\" 'true'
+	done
+	test_done
+	EOF
+	check_sub_test_lib_test run-inc-neg-inc <<-\\EOF
+	> ok 1 # skip passing test #1 (--run)
+	> ok 2 - passing test #2
+	> ok 3 # skip passing test #3 (--run)
+	> ok 4 - passing test #4
+	> ok 5 - passing test #5
+	> ok 6 # skip passing test #6 (--run)
+	> # passed all 6 test(s)
+	> 1..6
+	EOF
+"
+
+test_expect_success '--run include, exclude and include, comma separated' "
+	run_sub_test_lib_test run-inc-neg-inc-comma \
+		'--run include, exclude and include, comma separated' \
+		--run=1-5,\!1-3,2 <<-\\EOF &&
+	for i in 1 2 3 4 5 6
+	do
+		test_expect_success \"passing test #\$i\" 'true'
+	done
+	test_done
+	EOF
+	check_sub_test_lib_test run-inc-neg-inc-comma <<-\\EOF
+	> ok 1 # skip passing test #1 (--run)
+	> ok 2 - passing test #2
+	> ok 3 # skip passing test #3 (--run)
+	> ok 4 - passing test #4
+	> ok 5 - passing test #5
+	> ok 6 # skip passing test #6 (--run)
+	> # passed all 6 test(s)
+	> 1..6
+	EOF
+"
+
+test_expect_success '--run exclude and include' "
+	run_sub_test_lib_test run-neg-inc \
+		'--run exclude and include' \
+		--run='"'!3- 5'"' <<-\\EOF &&
+	for i in 1 2 3 4 5 6
+	do
+		test_expect_success \"passing test #\$i\" 'true'
+	done
+	test_done
+	EOF
+	check_sub_test_lib_test run-neg-inc <<-\\EOF
+	> ok 1 - passing test #1
+	> ok 2 - passing test #2
+	> ok 3 # skip passing test #3 (--run)
+	> ok 4 # skip passing test #4 (--run)
+	> ok 5 - passing test #5
+	> ok 6 # skip passing test #6 (--run)
+	> # passed all 6 test(s)
+	> 1..6
+	EOF
+"
+
+test_expect_success '--run empty selectors' "
+	run_sub_test_lib_test run-empty-sel \
+		'--run empty selectors' \
+		--run='1,,3,,,5' <<-\\EOF &&
+	for i in 1 2 3 4 5 6
+	do
+		test_expect_success \"passing test #\$i\" 'true'
+	done
+	test_done
+	EOF
+	check_sub_test_lib_test run-empty-sel <<-\\EOF
+	> ok 1 - passing test #1
+	> ok 2 # skip passing test #2 (--run)
+	> ok 3 - passing test #3
+	> ok 4 # skip passing test #4 (--run)
+	> ok 5 - passing test #5
+	> ok 6 # skip passing test #6 (--run)
+	> # passed all 6 test(s)
+	> 1..6
+	EOF
+"
+
+test_expect_success '--run invalid range start' "
+	run_sub_test_lib_test_err run-inv-range-start \
+		'--run invalid range start' \
+		--run='a-5' <<-\\EOF &&
+	test_expect_success \"passing test #1\" 'true'
+	test_done
+	EOF
+	check_sub_test_lib_test_err run-inv-range-start \
+		<<-\\EOF_OUT 3<<-\\EOF_ERR
+	> FATAL: Unexpected exit with code 1
+	EOF_OUT
+	> error: --run: invalid non-numeric in range start: 'a-5'
+	EOF_ERR
+"
+
+test_expect_success '--run invalid range end' "
+	run_sub_test_lib_test_err run-inv-range-end \
+		'--run invalid range end' \
+		--run='1-z' <<-\\EOF &&
+	test_expect_success \"passing test #1\" 'true'
+	test_done
+	EOF
+	check_sub_test_lib_test_err run-inv-range-end \
+		<<-\\EOF_OUT 3<<-\\EOF_ERR
+	> FATAL: Unexpected exit with code 1
+	EOF_OUT
+	> error: --run: invalid non-numeric in range end: '1-z'
+	EOF_ERR
+"
+
+test_expect_success '--run invalid selector' "
+	run_sub_test_lib_test_err run-inv-selector \
+		'--run invalid selector' \
+		--run='1?' <<-\\EOF &&
+	test_expect_success \"passing test #1\" 'true'
+	test_done
+	EOF
+	check_sub_test_lib_test_err run-inv-selector \
+		<<-\\EOF_OUT 3<<-\\EOF_ERR
+	> FATAL: Unexpected exit with code 1
+	EOF_OUT
+	> error: --run: invalid non-numeric in test selector: '1?'
+	EOF_ERR
+"
+
+
 test_set_prereq HAVEIT
 haveit=no
 test_expect_success HAVEIT 'test runs if prerequisite is satisfied' '
 	test_have_prereq HAVEIT &&
 	haveit=yes
 '
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0001-init.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0001-init.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0001-init.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0001-init.sh	2014-08-16 06:26:55.000000000 +0800
@@ -53,25 +53,25 @@
 		cd plain-aliased &&
 		git aliasedinit
 	) &&
 	check_config plain-aliased/.git false unset
 '
 
-test_expect_failure 'plain nested through aliased command' '
+test_expect_success 'plain nested through aliased command' '
 	(
 		git init plain-ancestor-aliased &&
 		cd plain-ancestor-aliased &&
 		echo "[alias] aliasedinit = init" >>.git/config &&
 		mkdir plain-nested &&
 		cd plain-nested &&
 		git aliasedinit
 	) &&
 	check_config plain-ancestor-aliased/plain-nested/.git false unset
 '
 
-test_expect_failure 'plain nested in bare through aliased command' '
+test_expect_success 'plain nested in bare through aliased command' '
 	(
 		git init --bare bare-ancestor-aliased.git &&
 		cd bare-ancestor-aliased.git &&
 		echo "[alias] aliasedinit = init" >>config &&
 		mkdir plain-nested &&
 		cd plain-nested &&
@@ -182,20 +182,20 @@
 test_expect_success 'init --bare/--shared overrides system/global config' '
 	test_config_global core.bare false &&
 	test_config_global core.sharedRepository 0640 &&
 	git init --bare --shared=0666 init-bare-shared-override &&
 	check_config init-bare-shared-override true unset &&
 	test x0666 = \
-	x`git config -f init-bare-shared-override/config core.sharedRepository`
+	x$(git config -f init-bare-shared-override/config core.sharedRepository)
 '
 
 test_expect_success 'init honors global core.sharedRepository' '
 	test_config_global core.sharedRepository 0666 &&
 	git init shared-honor-global &&
 	test x0666 = \
-	x`git config -f shared-honor-global/.git/config core.sharedRepository`
+	x$(git config -f shared-honor-global/.git/config core.sharedRepository)
 '
 
 test_expect_success 'init rejects insanely long --template' '
 	test_must_fail git init --template=$(printf "x%09999dx" 1) test
 '
 
@@ -282,13 +282,13 @@
 	test_path_is_missing otherdir/refs
 '
 
 test_expect_success 'init with separate gitdir' '
 	rm -rf newdir &&
 	git init --separate-git-dir realgitdir newdir &&
-	echo "gitdir: `pwd`/realgitdir" >expected &&
+	echo "gitdir: $(pwd)/realgitdir" >expected &&
 	test_cmp expected newdir/.git &&
 	test_path_is_dir realgitdir/refs
 '
 
 test_expect_success 're-init on .git file' '
 	( cd newdir && git init )
@@ -296,26 +296,26 @@
 
 test_expect_success 're-init to update git link' '
 	(
 	cd newdir &&
 	git init --separate-git-dir ../surrealgitdir
 	) &&
-	echo "gitdir: `pwd`/surrealgitdir" >expected &&
+	echo "gitdir: $(pwd)/surrealgitdir" >expected &&
 	test_cmp expected newdir/.git &&
 	test_path_is_dir surrealgitdir/refs &&
 	test_path_is_missing realgitdir/refs
 '
 
 test_expect_success 're-init to move gitdir' '
 	rm -rf newdir realgitdir surrealgitdir &&
 	git init newdir &&
 	(
 	cd newdir &&
 	git init --separate-git-dir ../realgitdir
 	) &&
-	echo "gitdir: `pwd`/realgitdir" >expected &&
+	echo "gitdir: $(pwd)/realgitdir" >expected &&
 	test_cmp expected newdir/.git &&
 	test_path_is_dir realgitdir/refs
 '
 
 test_expect_success SYMLINKS 're-init to move gitdir symlink' '
 	rm -rf newdir realgitdir &&
@@ -323,13 +323,13 @@
 	(
 	cd newdir &&
 	mv .git here &&
 	ln -s here .git &&
 	git init --separate-git-dir ../realgitdir
 	) &&
-	echo "gitdir: `pwd`/realgitdir" >expected &&
+	echo "gitdir: $(pwd)/realgitdir" >expected &&
 	test_cmp expected newdir/.git &&
 	test_cmp expected newdir/here &&
 	test_path_is_dir realgitdir/refs
 '
 
 test_done
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0010-racy-git.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0010-racy-git.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0010-racy-git.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0010-racy-git.sh	2014-08-16 06:26:55.000000000 +0800
@@ -11,22 +11,22 @@
 do
 	rm -f .git/index
 	echo frotz >infocom
 	git update-index --add infocom
 	echo xyzzy >infocom
 
-	files=`git diff-files -p`
+	files=$(git diff-files -p)
 	test_expect_success \
 	"Racy GIT trial #$trial part A" \
 	'test "" != "$files"'
 
 	sleep 1
 	echo xyzzy >cornerstone
 	git update-index --add cornerstone
 
-	files=`git diff-files -p`
+	files=$(git diff-files -p)
 	test_expect_success \
 	"Racy GIT trial #$trial part B" \
 	'test "" != "$files"'
 
 done
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0011-hashmap.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0011-hashmap.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0011-hashmap.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0011-hashmap.sh	2014-08-16 06:26:55.000000000 +0800
@@ -234,7 +234,20 @@
 	echo 64 39 >> expect &&
 	cat in | test-hashmap > out &&
 	test_cmp expect out
 
 '
 
+test_expect_success 'string interning' '
+
+test_hashmap "intern value1
+intern Value1
+intern value2
+intern value2
+" "value1
+Value1
+value2
+value2"
+
+'
+
 test_done
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0020-crlf.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0020-crlf.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0020-crlf.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0020-crlf.sh	2014-08-16 06:26:55.000000000 +0800
@@ -17,20 +17,20 @@
 	for w in I am very very fine thank you; do echo $w; done >dir/two &&
 	for w in Oh here is NULQin text here; do echo $w; done | q_to_nul >three &&
 	git add . &&
 
 	git commit -m initial &&
 
-	one=`git rev-parse HEAD:one` &&
-	dir=`git rev-parse HEAD:dir` &&
-	two=`git rev-parse HEAD:dir/two` &&
-	three=`git rev-parse HEAD:three` &&
+	one=$(git rev-parse HEAD:one) &&
+	dir=$(git rev-parse HEAD:dir) &&
+	two=$(git rev-parse HEAD:dir/two) &&
+	three=$(git rev-parse HEAD:three) &&
 
 	for w in Some extra lines here; do echo $w; done >>one &&
 	git diff >patch.file &&
-	patched=`git hash-object --stdin <one` &&
+	patched=$(git hash-object --stdin <one) &&
 	git read-tree --reset -u HEAD &&
 
 	echo happy.
 '
 
 test_expect_success 'safecrlf: autocrlf=input, all CRLF' '
@@ -108,13 +108,13 @@
 			echo Oops
 			false
 			break
 		}
 	done &&
 
-	differs=`git diff-index --cached HEAD` &&
+	differs=$(git diff-index --cached HEAD) &&
 	test -z "$differs" || {
 		echo Oops "$differs"
 		false
 	}
 
 '
@@ -132,13 +132,13 @@
 			echo "Oops $f"
 			false
 			break
 		}
 	done &&
 
-	differs=`git diff-index --cached HEAD` &&
+	differs=$(git diff-index --cached HEAD) &&
 	test -z "$differs" || {
 		echo Oops "$differs"
 		false
 	}
 
 '
@@ -155,15 +155,15 @@
 		git update-index -- $f || {
 			echo "Eh? $f"
 			false
 			break
 		}
 	done &&
-	test "$one" = `git hash-object --stdin <one` &&
-	test "$two" = `git hash-object --stdin <dir/two` &&
-	differs=`git diff-index --cached HEAD` &&
+	test "$one" = $(git hash-object --stdin <one) &&
+	test "$two" = $(git hash-object --stdin <dir/two) &&
+	differs=$(git diff-index --cached HEAD) &&
 	test -z "$differs" || {
 		echo Oops "$differs"
 		false
 	}
 '
 
@@ -181,15 +181,15 @@
 			false
 			break
 		else
 			git update-index -- $f
 		fi
 	done &&
-	test "$one" = `git hash-object --stdin <one` &&
-	test "$two" = `git hash-object --stdin <dir/two` &&
-	differs=`git diff-index --cached HEAD` &&
+	test "$one" = $(git hash-object --stdin <one) &&
+	test "$two" = $(git hash-object --stdin <dir/two) &&
+	differs=$(git diff-index --cached HEAD) &&
 	test -z "$differs" || {
 		echo Oops "$differs"
 		false
 	}
 '
 
@@ -197,80 +197,80 @@
 
 	rm -f tmp one dir/two three &&
 	git config core.autocrlf input &&
 	git read-tree --reset -u HEAD &&
 
 	git apply patch.file &&
-	test "$patched" = "`git hash-object --stdin <one`" || {
+	test "$patched" = "$(git hash-object --stdin <one)" || {
 		echo "Eh?  apply without index"
 		false
 	}
 '
 
 test_expect_success 'apply patch --cached (autocrlf=input)' '
 
 	rm -f tmp one dir/two three &&
 	git config core.autocrlf input &&
 	git read-tree --reset -u HEAD &&
 
 	git apply --cached patch.file &&
-	test "$patched" = `git rev-parse :one` || {
+	test "$patched" = $(git rev-parse :one) || {
 		echo "Eh?  apply with --cached"
 		false
 	}
 '
 
 test_expect_success 'apply patch --index (autocrlf=input)' '
 
 	rm -f tmp one dir/two three &&
 	git config core.autocrlf input &&
 	git read-tree --reset -u HEAD &&
 
 	git apply --index patch.file &&
-	test "$patched" = `git rev-parse :one` &&
-	test "$patched" = `git hash-object --stdin <one` || {
+	test "$patched" = $(git rev-parse :one) &&
+	test "$patched" = $(git hash-object --stdin <one) || {
 		echo "Eh?  apply with --index"
 		false
 	}
 '
 
 test_expect_success 'apply patch (autocrlf=true)' '
 
 	rm -f tmp one dir/two three &&
 	git config core.autocrlf true &&
 	git read-tree --reset -u HEAD &&
 
 	git apply patch.file &&
-	test "$patched" = "`remove_cr <one | git hash-object --stdin`" || {
+	test "$patched" = "$(remove_cr <one | git hash-object --stdin)" || {
 		echo "Eh?  apply without index"
 		false
 	}
 '
 
 test_expect_success 'apply patch --cached (autocrlf=true)' '
 
 	rm -f tmp one dir/two three &&
 	git config core.autocrlf true &&
 	git read-tree --reset -u HEAD &&
 
 	git apply --cached patch.file &&
-	test "$patched" = `git rev-parse :one` || {
+	test "$patched" = $(git rev-parse :one) || {
 		echo "Eh?  apply without index"
 		false
 	}
 '
 
 test_expect_success 'apply patch --index (autocrlf=true)' '
 
 	rm -f tmp one dir/two three &&
 	git config core.autocrlf true &&
 	git read-tree --reset -u HEAD &&
 
 	git apply --index patch.file &&
-	test "$patched" = `git rev-parse :one` &&
-	test "$patched" = "`remove_cr <one | git hash-object --stdin`" || {
+	test "$patched" = $(git rev-parse :one) &&
+	test "$patched" = "$(remove_cr <one | git hash-object --stdin)" || {
 		echo "Eh?  apply with --index"
 		false
 	}
 '
 
 test_expect_success '.gitattributes says two is binary' '
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0021-conversion.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0021-conversion.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0021-conversion.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0021-conversion.sh	2014-08-16 06:26:55.000000000 +0800
@@ -187,14 +187,12 @@
 	echo "*.fc filter=failclean" >.gitattributes &&
 
 	echo test >test.fc &&
 	test_must_fail git add test.fc
 '
 
-test -n "$GIT_TEST_LONG" && test_set_prereq EXPENSIVE
-
 test_expect_success EXPENSIVE 'filter large file' '
 	git config filter.largefile.smudge cat &&
 	git config filter.largefile.clean cat &&
 	for i in $(test_seq 1 2048); do printf "%1048576d" 1; done >2GB &&
 	echo "2GB filter=largefile" >.gitattributes &&
 	git add 2GB 2>err &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0025-crlf-auto.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0025-crlf-auto.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0025-crlf-auto.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0025-crlf-auto.sh	2014-08-16 06:26:55.000000000 +0800
@@ -9,147 +9,147 @@
 }
 
 test_expect_success setup '
 
 	git config core.autocrlf false &&
 
-	for w in Hello world how are you; do echo $w; done >one &&
-	for w in I am very very fine thank you; do echo ${w}Q; done | q_to_cr >two &&
-	for w in Oh here is a QNUL byte how alarming; do echo ${w}; done | q_to_nul >three &&
+	for w in Hello world how are you; do echo $w; done >LFonly &&
+	for w in I am very very fine thank you; do echo ${w}Q; done | q_to_cr >CRLFonly &&
+	for w in Oh here is a QNUL byte how alarming; do echo ${w}; done | q_to_nul >LFwithNUL &&
 	git add . &&
 
 	git commit -m initial &&
 
-	one=`git rev-parse HEAD:one` &&
-	two=`git rev-parse HEAD:two` &&
-	three=`git rev-parse HEAD:three` &&
+	LFonly=$(git rev-parse HEAD:LFonly) &&
+	CRLFonly=$(git rev-parse HEAD:CRLFonly) &&
+	LFwithNUL=$(git rev-parse HEAD:LFwithNUL) &&
 
 	echo happy.
 '
 
 test_expect_success 'default settings cause no changes' '
 
-	rm -f .gitattributes tmp one two three &&
+	rm -f .gitattributes tmp LFonly CRLFonly LFwithNUL &&
 	git read-tree --reset -u HEAD &&
 
-	! has_cr one &&
-	has_cr two &&
-	onediff=`git diff one` &&
-	twodiff=`git diff two` &&
-	threediff=`git diff three` &&
-	test -z "$onediff" -a -z "$twodiff" -a -z "$threediff"
+	! has_cr LFonly &&
+	has_cr CRLFonly &&
+	LFonlydiff=$(git diff LFonly) &&
+	CRLFonlydiff=$(git diff CRLFonly) &&
+	LFwithNULdiff=$(git diff LFwithNUL) &&
+	test -z "$LFonlydiff" -a -z "$CRLFonlydiff" -a -z "$LFwithNULdiff"
 '
 
 test_expect_success 'crlf=true causes a CRLF file to be normalized' '
 
 	# Backwards compatibility check
-	rm -f .gitattributes tmp one two three &&
-	echo "two crlf" > .gitattributes &&
+	rm -f .gitattributes tmp LFonly CRLFonly LFwithNUL &&
+	echo "CRLFonly crlf" > .gitattributes &&
 	git read-tree --reset -u HEAD &&
 
 	# Note, "normalized" means that git will normalize it if added
-	has_cr two &&
-	twodiff=`git diff two` &&
-	test -n "$twodiff"
+	has_cr CRLFonly &&
+	CRLFonlydiff=$(git diff CRLFonly) &&
+	test -n "$CRLFonlydiff"
 '
 
 test_expect_success 'text=true causes a CRLF file to be normalized' '
 
-	rm -f .gitattributes tmp one two three &&
-	echo "two text" > .gitattributes &&
+	rm -f .gitattributes tmp LFonly CRLFonly LFwithNUL &&
+	echo "CRLFonly text" > .gitattributes &&
 	git read-tree --reset -u HEAD &&
 
 	# Note, "normalized" means that git will normalize it if added
-	has_cr two &&
-	twodiff=`git diff two` &&
-	test -n "$twodiff"
+	has_cr CRLFonly &&
+	CRLFonlydiff=$(git diff CRLFonly) &&
+	test -n "$CRLFonlydiff"
 '
 
 test_expect_success 'eol=crlf gives a normalized file CRLFs with autocrlf=false' '
 
-	rm -f .gitattributes tmp one two three &&
+	rm -f .gitattributes tmp LFonly CRLFonly LFwithNUL &&
 	git config core.autocrlf false &&
-	echo "one eol=crlf" > .gitattributes &&
+	echo "LFonly eol=crlf" > .gitattributes &&
 	git read-tree --reset -u HEAD &&
 
-	has_cr one &&
-	onediff=`git diff one` &&
-	test -z "$onediff"
+	has_cr LFonly &&
+	LFonlydiff=$(git diff LFonly) &&
+	test -z "$LFonlydiff"
 '
 
 test_expect_success 'eol=crlf gives a normalized file CRLFs with autocrlf=input' '
 
-	rm -f .gitattributes tmp one two three &&
+	rm -f .gitattributes tmp LFonly CRLFonly LFwithNUL &&
 	git config core.autocrlf input &&
-	echo "one eol=crlf" > .gitattributes &&
+	echo "LFonly eol=crlf" > .gitattributes &&
 	git read-tree --reset -u HEAD &&
 
-	has_cr one &&
-	onediff=`git diff one` &&
-	test -z "$onediff"
+	has_cr LFonly &&
+	LFonlydiff=$(git diff LFonly) &&
+	test -z "$LFonlydiff"
 '
 
 test_expect_success 'eol=lf gives a normalized file LFs with autocrlf=true' '
 
-	rm -f .gitattributes tmp one two three &&
+	rm -f .gitattributes tmp LFonly CRLFonly LFwithNUL &&
 	git config core.autocrlf true &&
-	echo "one eol=lf" > .gitattributes &&
+	echo "LFonly eol=lf" > .gitattributes &&
 	git read-tree --reset -u HEAD &&
 
-	! has_cr one &&
-	onediff=`git diff one` &&
-	test -z "$onediff"
+	! has_cr LFonly &&
+	LFonlydiff=$(git diff LFonly) &&
+	test -z "$LFonlydiff"
 '
 
 test_expect_success 'autocrlf=true does not normalize CRLF files' '
 
-	rm -f .gitattributes tmp one two three &&
+	rm -f .gitattributes tmp LFonly CRLFonly LFwithNUL &&
 	git config core.autocrlf true &&
 	git read-tree --reset -u HEAD &&
 
-	has_cr one &&
-	has_cr two &&
-	onediff=`git diff one` &&
-	twodiff=`git diff two` &&
-	threediff=`git diff three` &&
-	test -z "$onediff" -a -z "$twodiff" -a -z "$threediff"
+	has_cr LFonly &&
+	has_cr CRLFonly &&
+	LFonlydiff=$(git diff LFonly) &&
+	CRLFonlydiff=$(git diff CRLFonly) &&
+	LFwithNULdiff=$(git diff LFwithNUL) &&
+	test -z "$LFonlydiff" -a -z "$CRLFonlydiff" -a -z "$LFwithNULdiff"
 '
 
 test_expect_success 'text=auto, autocrlf=true _does_ normalize CRLF files' '
 
-	rm -f .gitattributes tmp one two three &&
+	rm -f .gitattributes tmp LFonly CRLFonly LFwithNUL &&
 	git config core.autocrlf true &&
 	echo "* text=auto" > .gitattributes &&
 	git read-tree --reset -u HEAD &&
 
-	has_cr one &&
-	has_cr two &&
-	onediff=`git diff one` &&
-	twodiff=`git diff two` &&
-	threediff=`git diff three` &&
-	test -z "$onediff" -a -n "$twodiff" -a -z "$threediff"
+	has_cr LFonly &&
+	has_cr CRLFonly &&
+	LFonlydiff=$(git diff LFonly) &&
+	CRLFonlydiff=$(git diff CRLFonly) &&
+	LFwithNULdiff=$(git diff LFwithNUL) &&
+	test -z "$LFonlydiff" -a -n "$CRLFonlydiff" -a -z "$LFwithNULdiff"
 '
 
 test_expect_success 'text=auto, autocrlf=true does not normalize binary files' '
 
-	rm -f .gitattributes tmp one two three &&
+	rm -f .gitattributes tmp LFonly CRLFonly LFwithNUL &&
 	git config core.autocrlf true &&
 	echo "* text=auto" > .gitattributes &&
 	git read-tree --reset -u HEAD &&
 
-	! has_cr three &&
-	threediff=`git diff three` &&
-	test -z "$threediff"
+	! has_cr LFwithNUL &&
+	LFwithNULdiff=$(git diff LFwithNUL) &&
+	test -z "$LFwithNULdiff"
 '
 
 test_expect_success 'eol=crlf _does_ normalize binary files' '
 
-	rm -f .gitattributes tmp one two three &&
-	echo "three eol=crlf" > .gitattributes &&
+	rm -f .gitattributes tmp LFonly CRLFonly LFwithNUL &&
+	echo "LFwithNUL eol=crlf" > .gitattributes &&
 	git read-tree --reset -u HEAD &&
 
-	has_cr three &&
-	threediff=`git diff three` &&
-	test -z "$threediff"
+	has_cr LFwithNUL &&
+	LFwithNULdiff=$(git diff LFwithNUL) &&
+	test -z "$LFwithNULdiff"
 '
 
 test_done
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0026-eol-config.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0026-eol-config.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0026-eol-config.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0026-eol-config.sh	2014-08-16 06:26:55.000000000 +0800
@@ -17,67 +17,67 @@
 	for w in Hello world how are you; do echo $w; done >one &&
 	for w in I am very very fine thank you; do echo $w; done >two &&
 	git add . &&
 
 	git commit -m initial &&
 
-	one=`git rev-parse HEAD:one` &&
-	two=`git rev-parse HEAD:two` &&
+	one=$(git rev-parse HEAD:one) &&
+	two=$(git rev-parse HEAD:two) &&
 
 	echo happy.
 '
 
 test_expect_success 'eol=lf puts LFs in normalized file' '
 
 	rm -f .gitattributes tmp one two &&
 	git config core.eol lf &&
 	git read-tree --reset -u HEAD &&
 
 	! has_cr one &&
 	! has_cr two &&
-	onediff=`git diff one` &&
-	twodiff=`git diff two` &&
-	test -z "$onediff" -a -z "$twodiff"
+	onediff=$(git diff one) &&
+	twodiff=$(git diff two) &&
+	test -z "$onediff" && test -z "$twodiff"
 '
 
 test_expect_success 'eol=crlf puts CRLFs in normalized file' '
 
 	rm -f .gitattributes tmp one two &&
 	git config core.eol crlf &&
 	git read-tree --reset -u HEAD &&
 
 	has_cr one &&
 	! has_cr two &&
-	onediff=`git diff one` &&
-	twodiff=`git diff two` &&
-	test -z "$onediff" -a -z "$twodiff"
+	onediff=$(git diff one) &&
+	twodiff=$(git diff two) &&
+	test -z "$onediff" && test -z "$twodiff"
 '
 
 test_expect_success 'autocrlf=true overrides eol=lf' '
 
 	rm -f .gitattributes tmp one two &&
 	git config core.eol lf &&
 	git config core.autocrlf true &&
 	git read-tree --reset -u HEAD &&
 
 	has_cr one &&
 	has_cr two &&
-	onediff=`git diff one` &&
-	twodiff=`git diff two` &&
-	test -z "$onediff" -a -z "$twodiff"
+	onediff=$(git diff one) &&
+	twodiff=$(git diff two) &&
+	test -z "$onediff" && test -z "$twodiff"
 '
 
 test_expect_success 'autocrlf=true overrides unset eol' '
 
 	rm -f .gitattributes tmp one two &&
 	git config --unset-all core.eol &&
 	git config core.autocrlf true &&
 	git read-tree --reset -u HEAD &&
 
 	has_cr one &&
 	has_cr two &&
-	onediff=`git diff one` &&
-	twodiff=`git diff two` &&
-	test -z "$onediff" -a -z "$twodiff"
+	onediff=$(git diff one) &&
+	twodiff=$(git diff two) &&
+	test -z "$onediff" && test -z "$twodiff"
 '
 
 test_done
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t: t0027-auto-crlf.sh
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0030-stripspace.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0030-stripspace.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0030-stripspace.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0030-stripspace.sh	2014-08-16 06:26:55.000000000 +0800
@@ -222,28 +222,28 @@
     printf "$ttt\n\n\n$sss$sss$sss\n" | git stripspace >actual &&
     test_cmp expect actual
 '
 
 test_expect_success \
     'text without newline at end should end with newline' '
-    test `printf "$ttt" | git stripspace | wc -l` -gt 0 &&
-    test `printf "$ttt$ttt" | git stripspace | wc -l` -gt 0 &&
-    test `printf "$ttt$ttt$ttt" | git stripspace | wc -l` -gt 0 &&
-    test `printf "$ttt$ttt$ttt$ttt" | git stripspace | wc -l` -gt 0
+    test $(printf "$ttt" | git stripspace | wc -l) -gt 0 &&
+    test $(printf "$ttt$ttt" | git stripspace | wc -l) -gt 0 &&
+    test $(printf "$ttt$ttt$ttt" | git stripspace | wc -l) -gt 0 &&
+    test $(printf "$ttt$ttt$ttt$ttt" | git stripspace | wc -l) -gt 0
 '
 
 # text plus spaces at the end:
 
 test_expect_success \
     'text plus spaces without newline at end should end with newline' '
-    test `printf "$ttt$sss" | git stripspace | wc -l` -gt 0 &&
-    test `printf "$ttt$ttt$sss" | git stripspace | wc -l` -gt 0 &&
-    test `printf "$ttt$ttt$ttt$sss" | git stripspace | wc -l` -gt 0 &&
-    test `printf "$ttt$sss$sss" | git stripspace | wc -l` -gt 0 &&
-    test `printf "$ttt$ttt$sss$sss" | git stripspace | wc -l` -gt 0 &&
-    test `printf "$ttt$sss$sss$sss" | git stripspace | wc -l` -gt 0
+    test $(printf "$ttt$sss" | git stripspace | wc -l) -gt 0 &&
+    test $(printf "$ttt$ttt$sss" | git stripspace | wc -l) -gt 0 &&
+    test $(printf "$ttt$ttt$ttt$sss" | git stripspace | wc -l) -gt 0 &&
+    test $(printf "$ttt$sss$sss" | git stripspace | wc -l) -gt 0 &&
+    test $(printf "$ttt$ttt$sss$sss" | git stripspace | wc -l) -gt 0 &&
+    test $(printf "$ttt$sss$sss$sss" | git stripspace | wc -l) -gt 0
 '
 
 test_expect_success \
     'text plus spaces without newline at end should not show spaces' '
     ! (printf "$ttt$sss" | git stripspace | grep "  " >/dev/null) &&
     ! (printf "$ttt$ttt$sss" | git stripspace | grep "  " >/dev/null) &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0081-line-buffer.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0081-line-buffer.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0081-line-buffer.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0081-line-buffer.sh	2014-08-16 06:26:55.000000000 +0800
@@ -26,13 +26,13 @@
 	copy 6
 	HELLO
 	EOF
 	test_cmp expect actual
 '
 
-test_expect_success 'read from file descriptor' '
+test_expect_success NOT_MINGW 'read from file descriptor' '
 	rm -f input &&
 	echo hello >expect &&
 	echo hello >input &&
 	echo copy 6 |
 	test-line-buffer "&4" 4<input >actual &&
 	test_cmp expect actual
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0110-urlmatch-normalization.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0110-urlmatch-normalization.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0110-urlmatch-normalization.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0110-urlmatch-normalization.sh	2014-08-16 06:26:55.000000000 +0800
@@ -114,23 +114,26 @@
 	test "$(test-urlmatch-normalization -p "X://W/:/?#[]@")" = "x://w/:/?#[]@" &&
 	test "$(test-urlmatch-normalization -p "X://W/$&()*+,;=")" = "x://w/$&()*+,;=" &&
 	test "$(test-urlmatch-normalization -p "X://W/'\''")" = "x://w/'\''" &&
 	test "$(test-urlmatch-normalization -p "X://W?'\!'")" = "x://w/?'\!'"
 '
 
-test_expect_success 'url high-bit escapes' '
+test_expect_success !MINGW 'url high-bit escapes' '
 	test "$(test-urlmatch-normalization -p "$(cat "$tu-1")")" = "x://q/%01%02%03%04%05%06%07%08%0E%0F%10%11%12" &&
 	test "$(test-urlmatch-normalization -p "$(cat "$tu-2")")" = "x://q/%13%14%15%16%17%18%19%1B%1C%1D%1E%1F%7F" &&
 	test "$(test-urlmatch-normalization -p "$(cat "$tu-3")")" = "x://q/%80%81%82%83%84%85%86%87%88%89%8A%8B%8C%8D%8E%8F" &&
 	test "$(test-urlmatch-normalization -p "$(cat "$tu-4")")" = "x://q/%90%91%92%93%94%95%96%97%98%99%9A%9B%9C%9D%9E%9F" &&
 	test "$(test-urlmatch-normalization -p "$(cat "$tu-5")")" = "x://q/%A0%A1%A2%A3%A4%A5%A6%A7%A8%A9%AA%AB%AC%AD%AE%AF" &&
 	test "$(test-urlmatch-normalization -p "$(cat "$tu-6")")" = "x://q/%B0%B1%B2%B3%B4%B5%B6%B7%B8%B9%BA%BB%BC%BD%BE%BF" &&
 	test "$(test-urlmatch-normalization -p "$(cat "$tu-7")")" = "x://q/%C0%C1%C2%C3%C4%C5%C6%C7%C8%C9%CA%CB%CC%CD%CE%CF" &&
 	test "$(test-urlmatch-normalization -p "$(cat "$tu-8")")" = "x://q/%D0%D1%D2%D3%D4%D5%D6%D7%D8%D9%DA%DB%DC%DD%DE%DF" &&
 	test "$(test-urlmatch-normalization -p "$(cat "$tu-9")")" = "x://q/%E0%E1%E2%E3%E4%E5%E6%E7%E8%E9%EA%EB%EC%ED%EE%EF" &&
-	test "$(test-urlmatch-normalization -p "$(cat "$tu-10")")" = "x://q/%F0%F1%F2%F3%F4%F5%F6%F7%F8%F9%FA%FB%FC%FD%FE%FF" &&
+	test "$(test-urlmatch-normalization -p "$(cat "$tu-10")")" = "x://q/%F0%F1%F2%F3%F4%F5%F6%F7%F8%F9%FA%FB%FC%FD%FE%FF"
+'
+
+test_expect_success 'url utf-8 escapes' '
 	test "$(test-urlmatch-normalization -p "$(cat "$tu-11")")" = "x://q/%C2%80%DF%BF%E0%A0%80%EF%BF%BD%F0%90%80%80%F0%AF%BF%BD"
 '
 
 test_expect_success 'url username/password escapes' '
 	test "$(test-urlmatch-normalization -p "x://%41%62(^):%70+d@foo")" = "x://Ab(%5E):p+d@foo/"
 '
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0300-credentials.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0300-credentials.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t0300-credentials.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t0300-credentials.sh	2014-08-16 06:26:55.000000000 +0800
@@ -3,13 +3,13 @@
 test_description='basic credential helper tests'
 . ./test-lib.sh
 . "$TEST_DIRECTORY"/lib-credential.sh
 
 test_expect_success 'setup helper scripts' '
 	cat >dump <<-\EOF &&
-	whoami=`echo $0 | sed s/.*git-credential-//`
+	whoami=$(echo $0 | sed s/.*git-credential-//)
 	echo >&2 "$whoami: $*"
 	OIFS=$IFS
 	IFS==
 	while read key value; do
 		echo >&2 "$whoami: $key=$value"
 		eval "$key=$value"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1000-read-tree-m-3way.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1000-read-tree-m-3way.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1000-read-tree-m-3way.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1000-read-tree-m-3way.sh	2014-08-16 06:26:55.000000000 +0800
@@ -516,14 +516,14 @@
 # #16
 test_expect_success \
     '16 - A matches in one and B matches in another.' \
     'rm -f .git/index F16 &&
     echo F16 >F16 &&
     git update-index --add F16 &&
-    tree0=`git write-tree` &&
+    tree0=$(git write-tree) &&
     echo E16 >F16 &&
     git update-index F16 &&
-    tree1=`git write-tree` &&
+    tree1=$(git write-tree) &&
     read_tree_must_succeed -m $tree0 $tree1 $tree1 $tree0 &&
     git ls-files --stage'
 
 test_done
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1001-read-tree-m-2way.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1001-read-tree-m-2way.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1001-read-tree-m-2way.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1001-read-tree-m-2way.sh	2014-08-16 06:26:55.000000000 +0800
@@ -33,13 +33,13 @@
 	    -e 's/^\([-+][0-7][0-7][0-7][0-7][0-7][0-7]\) '"$_x40"' /\1 X /p' \
 	    "$1"
 	test_cmp expected current
 }
 
 check_cache_at () {
-	clean_if_empty=`git diff-files -- "$1"`
+	clean_if_empty=$(git diff-files -- "$1")
 	case "$clean_if_empty" in
 	'')  echo "$1: clean" ;;
 	?*)  echo "$1: dirty" ;;
 	esac
 	case "$2,$clean_if_empty" in
 	clean,)		:     ;;
@@ -65,20 +65,20 @@
     'echo frotz >frotz &&
      echo nitfol >nitfol &&
      cat bozbar-old >bozbar &&
      echo rezrov >rezrov &&
      echo yomin >yomin &&
      git update-index --add nitfol bozbar rezrov &&
-     treeH=`git write-tree` &&
+     treeH=$(git write-tree) &&
      echo treeH $treeH &&
      git ls-tree $treeH &&
 
      cat bozbar-new >bozbar &&
      git update-index --add frotz bozbar --force-remove rezrov &&
      git ls-files --stage >M.out &&
-     treeM=`git write-tree` &&
+     treeM=$(git write-tree) &&
      echo treeM $treeM &&
      git ls-tree $treeM &&
      git diff-tree $treeH $treeM'
 
 test_expect_success \
     '1, 2, 3 - no carry forward' \
@@ -312,21 +312,21 @@
 # Also make sure we did not break DF vs DF/DF case.
 test_expect_success \
     'DF vs DF/DF case setup.' \
     'rm -f .git/index &&
      echo DF >DF &&
      git update-index --add DF &&
-     treeDF=`git write-tree` &&
+     treeDF=$(git write-tree) &&
      echo treeDF $treeDF &&
      git ls-tree $treeDF &&
 
      rm -f DF &&
      mkdir DF &&
      echo DF/DF >DF/DF &&
      git update-index --add --remove DF DF/DF &&
-     treeDFDF=`git write-tree` &&
+     treeDFDF=$(git write-tree) &&
      echo treeDFDF $treeDFDF &&
      git ls-tree $treeDFDF &&
      git ls-files --stage >DFDF.out'
 
 test_expect_success \
     'DF vs DF/DF case test.' \
@@ -342,22 +342,22 @@
 
 test_expect_success \
     'a/b (untracked) vs a case setup.' \
     'rm -f .git/index &&
      : >a &&
      git update-index --add a &&
-     treeM=`git write-tree` &&
+     treeM=$(git write-tree) &&
      echo treeM $treeM &&
      git ls-tree $treeM &&
      git ls-files --stage >treeM.out &&
 
      rm -f a &&
      git update-index --remove a &&
      mkdir a &&
      : >a/b &&
-     treeH=`git write-tree` &&
+     treeH=$(git write-tree) &&
      echo treeH $treeH &&
      git ls-tree $treeH'
 
 test_expect_success \
     'a/b (untracked) vs a, plus c/d case test.' \
     'read_tree_u_must_fail -u -m "$treeH" "$treeM" &&
@@ -369,22 +369,22 @@
     'rm -f .git/index &&
      rm -fr a &&
      : >a &&
      mkdir c &&
      : >c/d &&
      git update-index --add a c/d &&
-     treeM=`git write-tree` &&
+     treeM=$(git write-tree) &&
      echo treeM $treeM &&
      git ls-tree $treeM &&
      git ls-files --stage >treeM.out &&
 
      rm -f a &&
      mkdir a &&
      : >a/b &&
      git update-index --add --remove a a/b &&
-     treeH=`git write-tree` &&
+     treeH=$(git write-tree) &&
      echo treeH $treeH &&
      git ls-tree $treeH'
 
 test_expect_success \
     'a/b vs a, plus c/d case test.' \
     'read_tree_u_must_succeed -u -m "$treeH" "$treeM" &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1002-read-tree-m-u-2way.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1002-read-tree-m-u-2way.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1002-read-tree-m-u-2way.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1002-read-tree-m-u-2way.sh	2014-08-16 06:26:55.000000000 +0800
@@ -18,13 +18,13 @@
 	    -e '/^--- /d; /^+++ /d; /^@@ /d;' \
 	    -e 's/^\(.[0-7][0-7][0-7][0-7][0-7][0-7]\) '"$_x40"' /\1 X /' "$1"
 	test_cmp expected current
 }
 
 check_cache_at () {
-	clean_if_empty=`git diff-files -- "$1"`
+	clean_if_empty=$(git diff-files -- "$1")
 	case "$clean_if_empty" in
 	'')  echo "$1: clean" ;;
 	?*)  echo "$1: dirty" ;;
 	esac
 	case "$2,$clean_if_empty" in
 	clean,)		:     ;;
@@ -38,20 +38,20 @@
     setup \
     'echo frotz >frotz &&
      echo nitfol >nitfol &&
      echo bozbar >bozbar &&
      echo rezrov >rezrov &&
      git update-index --add nitfol bozbar rezrov &&
-     treeH=`git write-tree` &&
+     treeH=$(git write-tree) &&
      echo treeH $treeH &&
      git ls-tree $treeH &&
 
      echo gnusto >bozbar &&
      git update-index --add frotz bozbar --force-remove rezrov &&
      git ls-files --stage >M.out &&
-     treeM=`git write-tree` &&
+     treeM=$(git write-tree) &&
      echo treeM $treeM &&
      git ls-tree $treeM &&
      sum bozbar frotz nitfol >M.sum &&
      git diff-tree $treeH $treeM'
 
 test_expect_success \
@@ -315,21 +315,21 @@
 # Also make sure we did not break DF vs DF/DF case.
 test_expect_success \
     'DF vs DF/DF case setup.' \
     'rm -f .git/index &&
      echo DF >DF &&
      git update-index --add DF &&
-     treeDF=`git write-tree` &&
+     treeDF=$(git write-tree) &&
      echo treeDF $treeDF &&
      git ls-tree $treeDF &&
 
      rm -f DF &&
      mkdir DF &&
      echo DF/DF >DF/DF &&
      git update-index --add --remove DF DF/DF &&
-     treeDFDF=`git write-tree` &&
+     treeDFDF=$(git write-tree) &&
      echo treeDFDF $treeDFDF &&
      git ls-tree $treeDFDF &&
      git ls-files --stage >DFDF.out'
 
 test_expect_success \
     'DF vs DF/DF case test.' \
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1003-read-tree-prefix.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1003-read-tree-prefix.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1003-read-tree-prefix.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1003-read-tree-prefix.sh	2014-08-16 06:26:55.000000000 +0800
@@ -8,13 +8,13 @@
 
 . ./test-lib.sh
 
 test_expect_success setup '
 	echo hello >one &&
 	git update-index --add one &&
-	tree=`git write-tree` &&
+	tree=$(git write-tree) &&
 	echo tree is $tree
 '
 
 echo 'one
 two/one' >expect
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1004-read-tree-m-u-wf.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1004-read-tree-m-u-wf.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1004-read-tree-m-u-wf.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1004-read-tree-m-u-wf.sh	2014-08-16 06:26:55.000000000 +0800
@@ -27,37 +27,37 @@
 '
 
 test_expect_success 'two-way not clobbering' '
 
 	echo >file2 master creates untracked file2 &&
 	echo >subdir/file2 master creates untracked subdir/file2 &&
-	if err=`read_tree_u_must_succeed -m -u master side 2>&1`
+	if err=$(read_tree_u_must_succeed -m -u master side 2>&1)
 	then
 		echo should have complained
 		false
 	else
 		echo "happy to see $err"
 	fi
 '
 
 echo file2 >.gitignore
 
 test_expect_success 'two-way with incorrect --exclude-per-directory (1)' '
 
-	if err=`read_tree_u_must_succeed -m --exclude-per-directory=.gitignore master side 2>&1`
+	if err=$(read_tree_u_must_succeed -m --exclude-per-directory=.gitignore master side 2>&1)
 	then
 		echo should have complained
 		false
 	else
 		echo "happy to see $err"
 	fi
 '
 
 test_expect_success 'two-way with incorrect --exclude-per-directory (2)' '
 
-	if err=`read_tree_u_must_succeed -m -u --exclude-per-directory=foo --exclude-per-directory=.gitignore master side 2>&1`
+	if err=$(read_tree_u_must_succeed -m -u --exclude-per-directory=foo --exclude-per-directory=.gitignore master side 2>&1)
 	then
 		echo should have complained
 		false
 	else
 		echo "happy to see $err"
 	fi
@@ -92,13 +92,13 @@
 
 	git reset --hard &&
 	rm -f file2 subdir/file2 file3 subdir/file3 &&
 	git checkout master &&
 	echo >file3 file three created in master, untracked &&
 	echo >subdir/file3 file three created in master, untracked &&
-	if err=`read_tree_u_must_succeed -m -u branch-point master side 2>&1`
+	if err=$(read_tree_u_must_succeed -m -u branch-point master side 2>&1)
 	then
 		echo should have complained
 		false
 	else
 		echo "happy to see $err"
 	fi
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t: t1013-read-tree-submodule.sh
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t: t1014-read-tree-confusing.sh
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1020-subdirectory.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1020-subdirectory.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1020-subdirectory.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1020-subdirectory.sh	2014-08-16 06:26:55.000000000 +0800
@@ -17,33 +17,33 @@
 	cp one original.one &&
 	cp dir/two original.two
 '
 
 test_expect_success 'update-index and ls-files' '
 	git update-index --add one &&
-	case "`git ls-files`" in
+	case "$(git ls-files)" in
 	one) echo pass one ;;
 	*) echo bad one; exit 1 ;;
 	esac &&
 	(
 		cd dir &&
 		git update-index --add two &&
-		case "`git ls-files`" in
+		case "$(git ls-files)" in
 		two) echo pass two ;;
 		*) echo bad two; exit 1 ;;
 		esac
 	) &&
-	case "`git ls-files`" in
+	case "$(git ls-files)" in
 	dir/two"$LF"one) echo pass both ;;
 	*) echo bad; exit 1 ;;
 	esac
 '
 
 test_expect_success 'cat-file' '
-	two=`git ls-files -s dir/two` &&
-	two=`expr "$two" : "[0-7]* \\([0-9a-f]*\\)"` &&
+	two=$(git ls-files -s dir/two) &&
+	two=$(expr "$two" : "[0-7]* \\([0-9a-f]*\\)") &&
 	echo "$two" &&
 	git cat-file -p "$two" >actual &&
 	cmp dir/two actual &&
 	(
 		cd dir &&
 		git cat-file -p "$two" >actual &&
@@ -52,36 +52,36 @@
 '
 rm -f actual dir/actual
 
 test_expect_success 'diff-files' '
 	echo a >>one &&
 	echo d >>dir/two &&
-	case "`git diff-files --name-only`" in
+	case "$(git diff-files --name-only)" in
 	dir/two"$LF"one) echo pass top ;;
 	*) echo bad top; exit 1 ;;
 	esac &&
 	# diff should not omit leading paths
 	(
 		cd dir &&
-		case "`git diff-files --name-only`" in
+		case "$(git diff-files --name-only)" in
 		dir/two"$LF"one) echo pass subdir ;;
 		*) echo bad subdir; exit 1 ;;
 		esac &&
-		case "`git diff-files --name-only .`" in
+		case "$(git diff-files --name-only .)" in
 		dir/two) echo pass subdir limited ;;
 		*) echo bad subdir limited; exit 1 ;;
 		esac
 	)
 '
 
 test_expect_success 'write-tree' '
-	top=`git write-tree` &&
+	top=$(git write-tree) &&
 	echo $top &&
 	(
 		cd dir &&
-		sub=`git write-tree` &&
+		sub=$(git write-tree) &&
 		echo $sub &&
 		test "z$top" = "z$sub"
 	)
 '
 
 test_expect_success 'checkout-index' '
@@ -93,13 +93,13 @@
 		cmp two ../original.two
 	)
 '
 
 test_expect_success 'read-tree' '
 	rm -f one dir/two &&
-	tree=`git write-tree` &&
+	tree=$(git write-tree) &&
 	read_tree_u_must_succeed --reset -u "$tree" &&
 	cmp one original.one &&
 	cmp dir/two original.two &&
 	(
 		cd dir &&
 		rm -f two &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1050-large.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1050-large.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1050-large.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1050-large.sh	2014-08-16 06:26:55.000000000 +0800
@@ -128,22 +128,22 @@
 test_expect_success 'git-show a large file' '
 	git show :large1 >/dev/null
 
 '
 
 test_expect_success 'index-pack' '
-	git clone file://"`pwd`"/.git foo &&
+	git clone file://"$(pwd)"/.git foo &&
 	GIT_DIR=non-existent git index-pack --strict --verify foo/.git/objects/pack/*.pack
 '
 
 test_expect_success 'repack' '
 	git repack -ad
 '
 
 test_expect_success 'pack-objects with large loose object' '
-	SHA1=`git hash-object huge` &&
+	SHA1=$(git hash-object huge) &&
 	test_create_repo loose &&
 	echo $SHA1 | git pack-objects --stdout |
 		GIT_ALLOC_LIMIT=0 GIT_DIR=loose/.git git unpack-objects &&
 	echo $SHA1 | GIT_DIR=loose/.git git pack-objects pack &&
 	test_create_repo packed &&
 	mv pack-* packed/.git/objects/pack &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1300-repo-config.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1300-repo-config.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1300-repo-config.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1300-repo-config.sh	2014-08-16 06:26:55.000000000 +0800
@@ -1155,7 +1155,17 @@
 	EOF
 
 	git config section.key value
 	test_cmp expect .git/config
 '
 
+test_expect_success POSIXPERM,PERL 'preserves existing permissions' '
+	chmod 0600 .git/config &&
+	git config imap.pass Hunter2 &&
+	perl -e \
+	  "die q(badset) if ((stat(q(.git/config)))[2] & 07777) != 0600" &&
+	git config --rename-section imap pop &&
+	perl -e \
+	  "die q(badrename) if ((stat(q(.git/config)))[2] & 07777) != 0600"
+'
+
 test_done
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1400-update-ref.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1400-update-ref.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1400-update-ref.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1400-update-ref.sh	2014-08-16 06:26:55.000000000 +0800
@@ -232,13 +232,13 @@
 	 test "" = "$(cat e)"'
 test_expect_success \
 	'Query "master@{2005-05-26 23:33:01}" (middle of history with gap)' \
 	'rm -f o e &&
 	 git rev-parse --verify "master@{2005-05-26 23:33:01}" >o 2>e &&
 	 test '"$B"' = $(cat o) &&
-	 test "warning: Log .git/logs/'"$m has gap after $gd"'." = "$(cat e)"'
+	 test "warning: Log for ref '"$m has gap after $gd"'." = "$(cat e)"'
 test_expect_success \
 	'Query "master@{2005-05-26 23:38:00}" (middle of history)' \
 	'rm -f o e &&
 	 git rev-parse --verify "master@{2005-05-26 23:38:00}" >o 2>e &&
 	 test '"$Z"' = $(cat o) &&
 	 test "" = "$(cat e)"'
@@ -250,13 +250,13 @@
 	 test "" = "$(cat e)"'
 test_expect_success \
 	'Query "master@{2005-05-28}" (past end of history)' \
 	'rm -f o e &&
 	 git rev-parse --verify "master@{2005-05-28}" >o 2>e &&
 	 test '"$D"' = $(cat o) &&
-	 test "warning: Log .git/logs/'"$m unexpectedly ended on $ld"'." = "$(cat e)"'
+	 test "warning: Log for ref '"$m unexpectedly ended on $ld"'." = "$(cat e)"'
 
 
 rm -f .git/$m .git/logs/$m expect
 
 test_expect_success \
     'creating initial files' \
@@ -347,94 +347,100 @@
 test_expect_success 'stdin fails on unknown command' '
 	echo "unknown $a" >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
 	grep "fatal: unknown command: unknown $a" err
 '
 
-test_expect_success 'stdin fails on badly quoted input' '
+test_expect_success 'stdin fails on unbalanced quotes' '
 	echo "create $a \"master" >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
 	grep "fatal: badly quoted argument: \\\"master" err
 '
 
-test_expect_success 'stdin fails on arguments not separated by space' '
+test_expect_success 'stdin fails on invalid escape' '
+	echo "create $a \"ma\zter\"" >stdin &&
+	test_must_fail git update-ref --stdin <stdin 2>err &&
+	grep "fatal: badly quoted argument: \\\"ma\\\\zter\\\"" err
+'
+
+test_expect_success 'stdin fails on junk after quoted argument' '
 	echo "create \"$a\"master" >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
-	grep "fatal: expected SP but got: master" err
+	grep "fatal: unexpected character after quoted argument: \\\"$a\\\"master" err
 '
 
 test_expect_success 'stdin fails create with no ref' '
 	echo "create " >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
-	grep "fatal: create line missing <ref>" err
+	grep "fatal: create: missing <ref>" err
 '
 
 test_expect_success 'stdin fails create with bad ref name' '
 	echo "create ~a $m" >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
 	grep "fatal: invalid ref format: ~a" err
 '
 
 test_expect_success 'stdin fails create with no new value' '
 	echo "create $a" >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
-	grep "fatal: create $a missing <newvalue>" err
+	grep "fatal: create $a: missing <newvalue>" err
 '
 
 test_expect_success 'stdin fails create with too many arguments' '
 	echo "create $a $m $m" >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
-	grep "fatal: create $a has extra input:  $m" err
+	grep "fatal: create $a: extra input:  $m" err
 '
 
 test_expect_success 'stdin fails update with no ref' '
 	echo "update " >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
-	grep "fatal: update line missing <ref>" err
+	grep "fatal: update: missing <ref>" err
 '
 
 test_expect_success 'stdin fails update with bad ref name' '
 	echo "update ~a $m" >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
 	grep "fatal: invalid ref format: ~a" err
 '
 
 test_expect_success 'stdin fails update with no new value' '
 	echo "update $a" >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
-	grep "fatal: update $a missing <newvalue>" err
+	grep "fatal: update $a: missing <newvalue>" err
 '
 
 test_expect_success 'stdin fails update with too many arguments' '
 	echo "update $a $m $m $m" >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
-	grep "fatal: update $a has extra input:  $m" err
+	grep "fatal: update $a: extra input:  $m" err
 '
 
 test_expect_success 'stdin fails delete with no ref' '
 	echo "delete " >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
-	grep "fatal: delete line missing <ref>" err
+	grep "fatal: delete: missing <ref>" err
 '
 
 test_expect_success 'stdin fails delete with bad ref name' '
 	echo "delete ~a $m" >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
 	grep "fatal: invalid ref format: ~a" err
 '
 
 test_expect_success 'stdin fails delete with too many arguments' '
 	echo "delete $a $m $m" >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
-	grep "fatal: delete $a has extra input:  $m" err
+	grep "fatal: delete $a: extra input:  $m" err
 '
 
 test_expect_success 'stdin fails verify with too many arguments' '
 	echo "verify $a $m $m" >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
-	grep "fatal: verify $a has extra input:  $m" err
+	grep "fatal: verify $a: extra input:  $m" err
 '
 
 test_expect_success 'stdin fails option with unknown name' '
 	echo "option unknown" >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
 	grep "fatal: option unknown: unknown" err
@@ -455,12 +461,30 @@
 	git update-ref --stdin <stdin &&
 	git rev-parse $m >expect &&
 	git rev-parse $a >actual &&
 	test_cmp expect actual
 '
 
+test_expect_success 'stdin succeeds with quoted argument' '
+	git update-ref -d $a &&
+	echo "create $a \"$m\"" >stdin &&
+	git update-ref --stdin <stdin &&
+	git rev-parse $m >expect &&
+	git rev-parse $a >actual &&
+	test_cmp expect actual
+'
+
+test_expect_success 'stdin succeeds with escaped character' '
+	git update-ref -d $a &&
+	echo "create $a \"ma\\163ter\"" >stdin &&
+	git update-ref --stdin <stdin &&
+	git rev-parse $m >expect &&
+	git rev-parse $a >actual &&
+	test_cmp expect actual
+'
+
 test_expect_success 'stdin update ref creates with zero old value' '
 	echo "update $b $m $Z" >stdin &&
 	git update-ref --stdin <stdin &&
 	git rev-parse $m >expect &&
 	git rev-parse $b >actual &&
 	test_cmp expect actual &&
@@ -491,27 +515,27 @@
 	test_must_fail git rev-parse --verify -q $c
 '
 
 test_expect_success 'stdin update ref fails with bad old value' '
 	echo "update $c $m does-not-exist" >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
-	grep "fatal: invalid old value for ref $c: does-not-exist" err &&
+	grep "fatal: update $c: invalid <oldvalue>: does-not-exist" err &&
 	test_must_fail git rev-parse --verify -q $c
 '
 
 test_expect_success 'stdin create ref fails with bad new value' '
 	echo "create $c does-not-exist" >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
-	grep "fatal: invalid new value for ref $c: does-not-exist" err &&
+	grep "fatal: create $c: invalid <newvalue>: does-not-exist" err &&
 	test_must_fail git rev-parse --verify -q $c
 '
 
 test_expect_success 'stdin create ref fails with zero new value' '
 	echo "create $c " >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
-	grep "fatal: create $c given zero new value" err &&
+	grep "fatal: create $c: zero <newvalue>" err &&
 	test_must_fail git rev-parse --verify -q $c
 '
 
 test_expect_success 'stdin update ref works with right old value' '
 	echo "update $b $m~1 $m" >stdin &&
 	git update-ref --stdin <stdin &&
@@ -529,13 +553,13 @@
 	test_cmp expect actual
 '
 
 test_expect_success 'stdin delete ref fails with zero old value' '
 	echo "delete $a " >stdin &&
 	test_must_fail git update-ref --stdin <stdin 2>err &&
-	grep "fatal: delete $a given zero old value" err &&
+	grep "fatal: delete $a: zero <oldvalue>" err &&
 	git rev-parse $m >expect &&
 	git rev-parse $a >actual &&
 	test_cmp expect actual
 '
 
 test_expect_success 'stdin update symref works option no-deref' '
@@ -670,79 +694,93 @@
 	grep "fatal: unknown command: unknown $a" err
 '
 
 test_expect_success 'stdin -z fails create with no ref' '
 	printf $F "create " >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
-	grep "fatal: create line missing <ref>" err
+	grep "fatal: create: missing <ref>" err
 '
 
 test_expect_success 'stdin -z fails create with bad ref name' '
 	printf $F "create ~a " "$m" >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
 	grep "fatal: invalid ref format: ~a " err
 '
 
 test_expect_success 'stdin -z fails create with no new value' '
 	printf $F "create $a" >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
-	grep "fatal: create $a missing <newvalue>" err
+	grep "fatal: create $a: unexpected end of input when reading <newvalue>" err
 '
 
 test_expect_success 'stdin -z fails create with too many arguments' '
 	printf $F "create $a" "$m" "$m" >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
 	grep "fatal: unknown command: $m" err
 '
 
 test_expect_success 'stdin -z fails update with no ref' '
 	printf $F "update " >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
-	grep "fatal: update line missing <ref>" err
+	grep "fatal: update: missing <ref>" err
+'
+
+test_expect_success 'stdin -z fails update with too few args' '
+	printf $F "update $a" "$m" >stdin &&
+	test_must_fail git update-ref -z --stdin <stdin 2>err &&
+	grep "fatal: update $a: unexpected end of input when reading <oldvalue>" err
 '
 
 test_expect_success 'stdin -z fails update with bad ref name' '
-	printf $F "update ~a" "$m" >stdin &&
+	printf $F "update ~a" "$m" "" >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
 	grep "fatal: invalid ref format: ~a" err
 '
 
+test_expect_success 'stdin -z emits warning with empty new value' '
+	git update-ref $a $m &&
+	printf $F "update $a" "" "" >stdin &&
+	git update-ref -z --stdin <stdin 2>err &&
+	grep "warning: update $a: missing <newvalue>, treating as zero" err &&
+	test_must_fail git rev-parse --verify -q $a
+'
+
 test_expect_success 'stdin -z fails update with no new value' '
 	printf $F "update $a" >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
-	grep "fatal: update $a missing <newvalue>" err
+	grep "fatal: update $a: unexpected end of input when reading <newvalue>" err
 '
 
 test_expect_success 'stdin -z fails update with no old value' '
 	printf $F "update $a" "$m" >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
-	grep "fatal: update $a missing \\[<oldvalue>\\] NUL" err
+	grep "fatal: update $a: unexpected end of input when reading <oldvalue>" err
 '
 
 test_expect_success 'stdin -z fails update with too many arguments' '
 	printf $F "update $a" "$m" "$m" "$m" >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
 	grep "fatal: unknown command: $m" err
 '
 
 test_expect_success 'stdin -z fails delete with no ref' '
 	printf $F "delete " >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
-	grep "fatal: delete line missing <ref>" err
+	grep "fatal: delete: missing <ref>" err
 '
 
 test_expect_success 'stdin -z fails delete with bad ref name' '
 	printf $F "delete ~a" "$m" >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
 	grep "fatal: invalid ref format: ~a" err
 '
 
 test_expect_success 'stdin -z fails delete with no old value' '
 	printf $F "delete $a" >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
-	grep "fatal: delete $a missing \\[<oldvalue>\\] NUL" err
+	grep "fatal: delete $a: unexpected end of input when reading <oldvalue>" err
 '
 
 test_expect_success 'stdin -z fails delete with too many arguments' '
 	printf $F "delete $a" "$m" "$m" >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
 	grep "fatal: unknown command: $m" err
@@ -754,13 +792,13 @@
 	grep "fatal: unknown command: $m" err
 '
 
 test_expect_success 'stdin -z fails verify with no old value' '
 	printf $F "verify $a" >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
-	grep "fatal: verify $a missing \\[<oldvalue>\\] NUL" err
+	grep "fatal: verify $a: unexpected end of input when reading <oldvalue>" err
 '
 
 test_expect_success 'stdin -z fails option with unknown name' '
 	printf $F "option unknown" >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
 	grep "fatal: option unknown: unknown" err
@@ -813,13 +851,13 @@
 	test_must_fail git rev-parse --verify -q $c
 '
 
 test_expect_success 'stdin -z update ref fails with bad old value' '
 	printf $F "update $c" "$m" "does-not-exist" >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
-	grep "fatal: invalid old value for ref $c: does-not-exist" err &&
+	grep "fatal: update $c: invalid <oldvalue>: does-not-exist" err &&
 	test_must_fail git rev-parse --verify -q $c
 '
 
 test_expect_success 'stdin -z create ref fails when ref exists' '
 	git update-ref $c $m &&
 	git rev-parse "$c" >expect &&
@@ -831,20 +869,20 @@
 '
 
 test_expect_success 'stdin -z create ref fails with bad new value' '
 	git update-ref -d "$c" &&
 	printf $F "create $c" "does-not-exist" >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
-	grep "fatal: invalid new value for ref $c: does-not-exist" err &&
+	grep "fatal: create $c: invalid <newvalue>: does-not-exist" err &&
 	test_must_fail git rev-parse --verify -q $c
 '
 
-test_expect_success 'stdin -z create ref fails with zero new value' '
+test_expect_success 'stdin -z create ref fails with empty new value' '
 	printf $F "create $c" "" >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
-	grep "fatal: create $c given zero new value" err &&
+	grep "fatal: create $c: missing <newvalue>" err &&
 	test_must_fail git rev-parse --verify -q $c
 '
 
 test_expect_success 'stdin -z update ref works with right old value' '
 	printf $F "update $b" "$m~1" "$m" >stdin &&
 	git update-ref -z --stdin <stdin &&
@@ -862,13 +900,13 @@
 	test_cmp expect actual
 '
 
 test_expect_success 'stdin -z delete ref fails with zero old value' '
 	printf $F "delete $a" "$Z" >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
-	grep "fatal: delete $a given zero old value" err &&
+	grep "fatal: delete $a: zero <oldvalue>" err &&
 	git rev-parse $m >expect &&
 	git rev-parse $a >actual &&
 	test_cmp expect actual
 '
 
 test_expect_success 'stdin -z update symref works option no-deref' '
@@ -920,13 +958,13 @@
 	test_cmp expect actual &&
 	test_must_fail git rev-parse --verify -q $c
 '
 
 test_expect_success 'stdin -z update refs fails with wrong old value' '
 	git update-ref $c $m &&
-	printf $F "update $a" "$m" "$m" "update $b" "$m" "$m" "update $c" "" "$Z" >stdin &&
+	printf $F "update $a" "$m" "$m" "update $b" "$m" "$m" "update $c" "$m" "$Z" >stdin &&
 	test_must_fail git update-ref -z --stdin <stdin 2>err &&
 	grep "fatal: Cannot lock the ref '"'"'$c'"'"'" err &&
 	git rev-parse $m >expect &&
 	git rev-parse $a >actual &&
 	test_cmp expect actual &&
 	git rev-parse $b >actual &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1402-check-ref-format.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1402-check-ref-format.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1402-check-ref-format.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1402-check-ref-format.sh	2014-08-16 06:26:55.000000000 +0800
@@ -45,12 +45,13 @@
 valid_ref '///heads/foo' --normalize
 invalid_ref './foo'
 invalid_ref './foo/bar'
 invalid_ref 'foo/./bar'
 invalid_ref 'foo/bar/.'
 invalid_ref '.refs/foo'
+invalid_ref 'refs/heads/foo.'
 invalid_ref 'heads/foo..bar'
 invalid_ref 'heads/foo?bar'
 valid_ref 'foo./bar'
 invalid_ref 'heads/foo.lock'
 invalid_ref 'heads///foo.lock'
 invalid_ref 'foo.lock/bar'
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1410-reflog.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1410-reflog.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1410-reflog.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1410-reflog.sh	2014-08-16 06:26:55.000000000 +0800
@@ -242,7 +242,15 @@
 
 	git config --unset gc.reflogexpire &&
 	git config --unset gc.reflogexpireunreachable
 
 '
 
+test_expect_success 'checkout should not delete log for packed ref' '
+	test $(git reflog master | wc -l) = 4 &&
+	git branch foo &&
+	git pack-refs --all &&
+	git checkout foo &&
+	test $(git reflog master | wc -l) = 4
+'
+
 test_done
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1450-fsck.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1450-fsck.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t1450-fsck.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t1450-fsck.sh	2014-08-16 06:26:55.000000000 +0800
@@ -248,43 +248,38 @@
 	  git fsck 2>out &&
 	  cat out &&
 	  grep "warning.*null sha1" out
 	)
 '
 
-while read name path pretty; do
-	while read mode type; do
-		: ${pretty:=$path}
-		test_expect_success "fsck notices $pretty as $type" '
-		(
-			git init $name-$type &&
-			cd $name-$type &&
-			echo content >file &&
-			git add file &&
-			git commit -m base &&
-			blob=$(git rev-parse :file) &&
-			tree=$(git rev-parse HEAD^{tree}) &&
-			value=$(eval "echo \$$type") &&
-			printf "$mode $type %s\t%s" "$value" "$path" >bad &&
-			bad_tree=$(git mktree <bad) &&
-			git fsck 2>out &&
-			cat out &&
-			grep "warning.*tree $bad_tree" out
-		)'
-	done <<-\EOF
-	100644 blob
-	040000 tree
-	EOF
-done <<-EOF
-dot .
-dotdot ..
-dotgit .git
-dotgit-case .GIT
-dotgit-unicode .gI${u200c}T .gI{u200c}T
-dotgit-case2 .Git
-git-tilde1 git~1
-dotgitdot .git.
-dot-backslash-case .\\\\.GIT\\\\foobar
-dotgit-case-backslash .git\\\\foobar
-EOF
+test_expect_success 'fsck notices "." and ".." in trees' '
+	(
+		git init dots &&
+		cd dots &&
+		blob=$(echo foo | git hash-object -w --stdin) &&
+		tab=$(printf "\\t") &&
+		git mktree <<-EOF &&
+		100644 blob $blob$tab.
+		100644 blob $blob$tab..
+		EOF
+		git fsck 2>out &&
+		cat out &&
+		grep "warning.*\\." out
+	)
+'
+
+test_expect_success 'fsck notices ".git" in trees' '
+	(
+		git init dotgit &&
+		cd dotgit &&
+		blob=$(echo foo | git hash-object -w --stdin) &&
+		tab=$(printf "\\t") &&
+		git mktree <<-EOF &&
+		100644 blob $blob$tab.git
+		EOF
+		git fsck 2>out &&
+		cat out &&
+		grep "warning.*\\.git" out
+	)
+'
 
 test_done
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t: t1700-split-index.sh
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t2013-checkout-submodule.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t2013-checkout-submodule.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t2013-checkout-submodule.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t2013-checkout-submodule.sh	2014-08-16 06:26:55.000000000 +0800
@@ -1,11 +1,12 @@
 #!/bin/sh
 
 test_description='checkout can handle submodules'
 
 . ./test-lib.sh
+. "$TEST_DIRECTORY"/lib-submodule-update.sh
 
 test_expect_success 'setup' '
 	mkdir submodule &&
 	(cd submodule &&
 	 git init &&
 	 test_commit first) &&
@@ -59,7 +60,11 @@
 	git config submodule.submodule.path submodule &&
 	git config submodule.submodule.ignore all &&
 	git checkout HEAD >actual 2>&1 &&
 	! test -s actual
 '
 
+test_submodule_switch "git checkout"
+
+test_submodule_forced_switch "git checkout -f"
+
 test_done
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t2104-update-index-skip-worktree.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t2104-update-index-skip-worktree.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t2104-update-index-skip-worktree.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t2104-update-index-skip-worktree.sh	2014-08-16 06:26:55.000000000 +0800
@@ -4,12 +4,14 @@
 #
 
 test_description='skip-worktree bit test'
 
 . ./test-lib.sh
 
+sane_unset GIT_TEST_SPLIT_INDEX
+
 test_set_index_version 3
 
 cat >expect.full <<EOF
 H 1
 H 2
 H sub/1
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t3302-notes-index-expensive.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t3302-notes-index-expensive.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t3302-notes-index-expensive.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t3302-notes-index-expensive.sh	2014-08-16 06:26:55.000000000 +0800
@@ -4,123 +4,133 @@
 #
 
 test_description='Test commit notes index (expensive!)'
 
 . ./test-lib.sh
 
-test_set_prereq NOT_EXPENSIVE
 test -n "$GIT_NOTES_TIMING_TESTS" && test_set_prereq EXPENSIVE
-test -x /usr/bin/time && test_set_prereq USR_BIN_TIME
 
 create_repo () {
 	number_of_commits=$1
 	nr=0
 	test -d .git || {
 	git init &&
 	(
-		while [ $nr -lt $number_of_commits ]; do
+		while test $nr -lt $number_of_commits
+		do
 			nr=$(($nr+1))
 			mark=$(($nr+$nr))
 			notemark=$(($mark+1))
 			test_tick &&
-			cat <<INPUT_END &&
-commit refs/heads/master
-mark :$mark
-committer $GIT_COMMITTER_NAME <$GIT_COMMITTER_EMAIL> $GIT_COMMITTER_DATE
-data <<COMMIT
-commit #$nr
-COMMIT
-
-M 644 inline file
-data <<EOF
-file in commit #$nr
-EOF
-
-blob
-mark :$notemark
-data <<EOF
-note for commit #$nr
-EOF
+			cat <<-INPUT_END &&
+			commit refs/heads/master
+			mark :$mark
+			committer $GIT_COMMITTER_NAME <$GIT_COMMITTER_EMAIL> $GIT_COMMITTER_DATE
+			data <<COMMIT
+			commit #$nr
+			COMMIT
+
+			M 644 inline file
+			data <<EOF
+			file in commit #$nr
+			EOF
+
+			blob
+			mark :$notemark
+			data <<EOF
+			note for commit #$nr
+			EOF
 
-INPUT_END
-
-			echo "N :$notemark :$mark" >> note_commit
+			INPUT_END
+			echo "N :$notemark :$mark" >>note_commit
 		done &&
 		test_tick &&
-		cat <<INPUT_END &&
-commit refs/notes/commits
-committer $GIT_COMMITTER_NAME <$GIT_COMMITTER_EMAIL> $GIT_COMMITTER_DATE
-data <<COMMIT
-notes
-COMMIT
+		cat <<-INPUT_END &&
+		commit refs/notes/commits
+		committer $GIT_COMMITTER_NAME <$GIT_COMMITTER_EMAIL> $GIT_COMMITTER_DATE
+		data <<COMMIT
+		notes
+		COMMIT
 
-INPUT_END
+		INPUT_END
 
 		cat note_commit
 	) |
 	git fast-import --quiet &&
 	git config core.notesRef refs/notes/commits
 	}
 }
 
 test_notes () {
 	count=$1 &&
 	git config core.notesRef refs/notes/commits &&
-	git log | grep "^    " > output &&
+	git log | grep "^    " >output &&
 	i=$count &&
-	while [ $i -gt 0 ]; do
+	while test $i -gt 0
+	do
 		echo "    commit #$i" &&
 		echo "    note for commit #$i" &&
-		i=$(($i-1));
-	done > expect &&
+		i=$(($i-1))
+	done >expect &&
 	test_cmp expect output
 }
 
-cat > time_notes << \EOF
+write_script time_notes <<\EOF
 	mode=$1
 	i=1
-	while [ $i -lt $2 ]; do
+	while test $i -lt $2
+	do
 		case $1 in
 		no-notes)
-			GIT_NOTES_REF=non-existing; export GIT_NOTES_REF
-		;;
+			GIT_NOTES_REF=non-existing
+			export GIT_NOTES_REF
+			;;
 		notes)
 			unset GIT_NOTES_REF
-		;;
+			;;
 		esac
-		git log >/dev/null
+		git log
 		i=$(($i+1))
-	done
+	done >/dev/null
 EOF
 
 time_notes () {
 	for mode in no-notes notes
 	do
 		echo $mode
-		/usr/bin/time "$SHELL_PATH" ../time_notes $mode $1
+		/usr/bin/time ../time_notes $mode $1
 	done
 }
 
 do_tests () {
-	pr=$1
-	count=$2
+	count=$1 pr=${2-}
 
-	test_expect_success $pr 'setup / mkdir' '
-		mkdir $count &&
-		cd $count
+	test_expect_success $pr "setup $count" '
+		mkdir "$count" &&
+		(
+			cd "$count" &&
+			create_repo "$count"
+		)
 	'
 
-	test_expect_success $pr "setup $count" "create_repo $count"
-
-	test_expect_success $pr 'notes work' "test_notes $count"
-
-	test_expect_success USR_BIN_TIME,$pr 'notes timing with /usr/bin/time' "time_notes 100"
+	test_expect_success $pr 'notes work' '
+		(
+			cd "$count" &&
+			test_notes "$count"
+		)
+	'
 
-	test_expect_success $pr 'teardown / cd ..' 'cd ..'
+	test_expect_success "USR_BIN_TIME${pr:+,$pr}" 'notes timing with /usr/bin/time' '
+		(
+			cd "$count" &&
+			time_notes 100
+		)
+	'
 }
 
-do_tests NOT_EXPENSIVE 10
-for count in 100 1000 10000; do
-	do_tests EXPENSIVE $count
+do_tests 10
+for count in 100 1000 10000
+do
+	do_tests "$count" EXPENSIVE
 done
 
 test_done
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t3400-rebase.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t3400-rebase.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t3400-rebase.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t3400-rebase.sh	2014-08-16 06:26:55.000000000 +0800
@@ -166,12 +166,35 @@
 	git rebase &&
 	git rev-parse --verify default-base >expect &&
 	git rev-parse default~1 >actual &&
 	test_cmp expect actual
 '
 
+test_expect_success 'cherry-picked commits and fork-point work together' '
+	git checkout default-base &&
+	echo Amended >A &&
+	git commit -a --no-edit --amend &&
+	test_commit B B &&
+	test_commit new_B B "New B" &&
+	test_commit C C &&
+	git checkout default &&
+	git reset --hard default-base@{4} &&
+	test_commit D D &&
+	git cherry-pick -2 default-base^ &&
+	test_commit final_B B "Final B" &&
+	git rebase &&
+	echo Amended >expect &&
+	test_cmp A expect &&
+	echo "Final B" >expect &&
+	test_cmp B expect &&
+	echo C >expect &&
+	test_cmp C expect &&
+	echo D >expect &&
+	test_cmp D expect
+'
+
 test_expect_success 'rebase -q is quiet' '
 	git checkout -b quiet topic &&
 	git rebase -q master >output.out 2>&1 &&
 	test_must_be_empty output.out
 '
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t3404-rebase-interactive.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t3404-rebase-interactive.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t3404-rebase-interactive.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t3404-rebase-interactive.sh	2014-08-16 06:26:55.000000000 +0800
@@ -64,12 +64,20 @@
 # be non-POSIX. For example, if SHELL=zsh then ">file" doesn't work
 # to create a file. Unseting SHELL avoids such non-portable behavior
 # in tests. It must be exported for it to take effect where needed.
 SHELL=
 export SHELL
 
+test_expect_success 'rebase --keep-empty' '
+	git checkout -b emptybranch master &&
+	git commit --allow-empty -m "empty" &&
+	git rebase --keep-empty -i HEAD~2 &&
+	git log --oneline >actual &&
+	test_line_count = 6 actual
+'
+
 test_expect_success 'rebase -i with the exec command' '
 	git checkout master &&
 	(
 	set_fake_editor &&
 	FAKE_LINES="1 exec_>touch-one
 		2 exec_>touch-two exec_false exec_>touch-three
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t3419-rebase-patch-id.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t3419-rebase-patch-id.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t3419-rebase-patch-id.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t3419-rebase-patch-id.sh	2014-08-16 06:26:55.000000000 +0800
@@ -1,55 +1,48 @@
 #!/bin/sh
 
 test_description='git rebase - test patch id computation'
 
 . ./test-lib.sh
 
-test_set_prereq NOT_EXPENSIVE
 test -n "$GIT_PATCHID_TIMING_TESTS" && test_set_prereq EXPENSIVE
-test -x /usr/bin/time && test_set_prereq USR_BIN_TIME
 
-count()
-{
+count () {
 	i=0
 	while test $i -lt $1
 	do
 		echo "$i"
 		i=$(($i+1))
 	done
 }
 
-scramble()
-{
+scramble () {
 	i=0
 	while read x
 	do
 		if test $i -ne 0
 		then
 			echo "$x"
 		fi
 		i=$((($i+1) % 10))
-	done < "$1" > "$1.new"
+	done <"$1" >"$1.new"
 	mv -f "$1.new" "$1"
 }
 
-run()
-{
+run () {
 	echo \$ "$@"
 	/usr/bin/time "$@" >/dev/null
 }
 
 test_expect_success 'setup' '
 	git commit --allow-empty -m initial &&
 	git tag root
 '
 
-do_tests()
-{
-	pr=$1
-	nlines=$2
+do_tests () {
+	nlines=$1 pr=${2-}
 
 	test_expect_success $pr "setup: $nlines lines" "
 		rm -f .gitattributes &&
 		git checkout -q -f master &&
 		git reset --hard root &&
 		count $nlines >file &&
@@ -100,10 +93,10 @@
 		git checkout -q other^{} &&
 		test_must_fail git rebase squashed &&
 		rm -rf .git/rebase-apply
 	"
 }
 
-do_tests NOT_EXPENSIVE 500
-do_tests EXPENSIVE 50000
+do_tests 500
+do_tests 50000 EXPENSIVE
 
 test_done
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t: t3426-rebase-submodule.sh
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t3508-cherry-pick-many-commits.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t3508-cherry-pick-many-commits.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t3508-cherry-pick-many-commits.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t3508-cherry-pick-many-commits.sh	2014-08-16 06:26:55.000000000 +0800
@@ -62,18 +62,21 @@
 '
 
 test_expect_success 'output to keep user entertained during multi-pick' '
 	cat <<-\EOF >expected &&
 	[master OBJID] second
 	 Author: A U Thor <author@example.com>
+	 Date: Thu Apr 7 15:14:13 2005 -0700
 	 1 file changed, 1 insertion(+)
 	[master OBJID] third
 	 Author: A U Thor <author@example.com>
+	 Date: Thu Apr 7 15:15:13 2005 -0700
 	 1 file changed, 1 insertion(+)
 	[master OBJID] fourth
 	 Author: A U Thor <author@example.com>
+	 Date: Thu Apr 7 15:16:13 2005 -0700
 	 1 file changed, 1 insertion(+)
 	EOF
 
 	git checkout -f master &&
 	git reset --hard first &&
 	test_tick &&
@@ -95,20 +98,23 @@
 
 test_expect_success 'output during multi-pick indicates merge strategy' '
 	cat <<-\EOF >expected &&
 	Trying simple merge.
 	[master OBJID] second
 	 Author: A U Thor <author@example.com>
+	 Date: Thu Apr 7 15:14:13 2005 -0700
 	 1 file changed, 1 insertion(+)
 	Trying simple merge.
 	[master OBJID] third
 	 Author: A U Thor <author@example.com>
+	 Date: Thu Apr 7 15:15:13 2005 -0700
 	 1 file changed, 1 insertion(+)
 	Trying simple merge.
 	[master OBJID] fourth
 	 Author: A U Thor <author@example.com>
+	 Date: Thu Apr 7 15:16:13 2005 -0700
 	 1 file changed, 1 insertion(+)
 	EOF
 
 	git checkout -f master &&
 	git reset --hard first &&
 	test_tick &&
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t: t3512-cherry-pick-submodule.sh
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t: t3513-revert-submodule.sh
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t3901-i18n-patch.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t3901-i18n-patch.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t3901-i18n-patch.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t3901-i18n-patch.sh	2014-08-16 06:26:55.000000000 +0800
@@ -51,16 +51,19 @@
 	test_tick &&
 	git checkout -b side master^ &&
 	echo Another file >yours &&
 	git add yours &&
 	git commit -s -m "Second on side" &&
 
-	# the second one on the side branch is ISO-8859-1
-	git config i18n.commitencoding ISO8859-1 &&
-	# use author and committer name in ISO-8859-1 to match it.
-	. "$TEST_DIRECTORY"/t3901-8859-1.txt &&
+	if test_have_prereq NOT_MINGW
+	then
+		# the second one on the side branch is ISO-8859-1
+		git config i18n.commitencoding ISO8859-1 &&
+		# use author and committer name in ISO-8859-1 to match it.
+		. "$TEST_DIRECTORY"/t3901-8859-1.txt
+	fi &&
 	test_tick &&
 	echo Yet another >theirs &&
 	git add theirs &&
 	git commit -s -m "Third on side" &&
 
 	# Back to default
@@ -116,25 +119,25 @@
 	git reset --hard side &&
 	git rebase master &&
 
 	check_encoding 2
 '
 
-test_expect_success 'rebase (L/L)' '
+test_expect_success NOT_MINGW 'rebase (L/L)' '
 	# In this test we want ISO-8859-1 encoded commits as the result
 	git config i18n.commitencoding ISO8859-1 &&
 	git config i18n.logoutputencoding ISO8859-1 &&
 	. "$TEST_DIRECTORY"/t3901-8859-1.txt &&
 
 	git reset --hard side &&
 	git rebase master &&
 
 	check_encoding 2 8859
 '
 
-test_expect_success 'rebase (L/U)' '
+test_expect_success NOT_MINGW 'rebase (L/U)' '
 	# This is pathological -- use UTF-8 as intermediate form
 	# to get ISO-8859-1 results.
 	git config i18n.commitencoding ISO8859-1 &&
 	git config i18n.logoutputencoding UTF-8 &&
 	. "$TEST_DIRECTORY"/t3901-8859-1.txt &&
 
@@ -156,13 +159,13 @@
 	git cherry-pick side &&
 	git revert HEAD &&
 
 	check_encoding 3
 '
 
-test_expect_success 'cherry-pick(L/L)' '
+test_expect_success NOT_MINGW 'cherry-pick(L/L)' '
 	# Both the commitencoding and logoutputencoding is set to ISO-8859-1
 
 	git config i18n.commitencoding ISO8859-1 &&
 	git config i18n.logoutputencoding ISO8859-1 &&
 	. "$TEST_DIRECTORY"/t3901-8859-1.txt &&
 
@@ -186,13 +189,13 @@
 	git cherry-pick side &&
 	git revert HEAD &&
 
 	check_encoding 3
 '
 
-test_expect_success 'cherry-pick(L/U)' '
+test_expect_success NOT_MINGW 'cherry-pick(L/U)' '
 	# Again, the commitencoding is set to ISO-8859-1 but
 	# logoutputencoding is set to UTF-8.
 
 	git config i18n.commitencoding ISO8859-1 &&
 	git config i18n.logoutputencoding UTF-8 &&
 	. "$TEST_DIRECTORY"/t3901-8859-1.txt &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t3905-stash-include-untracked.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t3905-stash-include-untracked.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t3905-stash-include-untracked.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t3905-stash-include-untracked.sh	2014-08-16 06:26:55.000000000 +0800
@@ -93,14 +93,14 @@
 EOF
 
 test_expect_success 'stash pop after save --include-untracked leaves files untracked again' '
 	git stash pop &&
 	git status --porcelain >actual &&
 	test_cmp expect actual &&
-	test "1" = "`cat file2`" &&
-	test untracked = "`cat untracked/untracked`"
+	test "1" = "$(cat file2)" &&
+	test untracked = "$(cat untracked/untracked)"
 '
 
 git clean --force --quiet -d
 
 test_expect_success 'stash save -u dirty index' '
 	echo 4 > file3 &&
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t: t3906-stash-submodule.sh
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t3910-mac-os-precompose.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t3910-mac-os-precompose.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t3910-mac-os-precompose.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t3910-mac-os-precompose.sh	2014-08-16 06:26:55.000000000 +0800
@@ -11,19 +11,19 @@
 then
 	skip_all="filesystem does not corrupt utf-8"
 	test_done
 fi
 
 # create utf-8 variables
-Adiarnfc=`printf '\303\204'`
-Adiarnfd=`printf 'A\314\210'`
+Adiarnfc=$(printf '\303\204')
+Adiarnfd=$(printf 'A\314\210')
 
-Odiarnfc=`printf '\303\226'`
-Odiarnfd=`printf 'O\314\210'`
-AEligatu=`printf '\303\206'`
-Invalidu=`printf '\303\377'`
+Odiarnfc=$(printf '\303\226')
+Odiarnfd=$(printf 'O\314\210')
+AEligatu=$(printf '\303\206')
+Invalidu=$(printf '\303\377')
 
 
 #Create a string with 255 bytes (decomposed)
 Alongd=$Adiarnfd$Adiarnfd$Adiarnfd$Adiarnfd$Adiarnfd$Adiarnfd$Adiarnfd #21 Byte
 Alongd=$Alongd$Alongd$Alongd                                           #63 Byte
 Alongd=$Alongd$Alongd$Alongd$Alongd$Adiarnfd                           #255 Byte
@@ -32,13 +32,13 @@
 Alongc=$AEligatu$AEligatu$AEligatu$AEligatu$AEligatu #10 Byte
 Alongc=$Alongc$Alongc$Alongc$Alongc$Alongc           #50 Byte
 Alongc=$Alongc$Alongc$Alongc$Alongc$Alongc           #250 Byte
 Alongc=$Alongc$AEligatu$AEligatu                     #254 Byte
 
 test_expect_success "detect if nfd needed" '
-	precomposeunicode=`git config core.precomposeunicode` &&
+	precomposeunicode=$(git config core.precomposeunicode) &&
 	test "$precomposeunicode" = true &&
 	git config core.precomposeunicode true
 '
 test_expect_success "setup" '
 	>x &&
 	git add x &&
@@ -137,17 +137,27 @@
 '
 test_expect_success "Add long precomposed filename" '
 	echo longc >$Alongc &&
 	git add * &&
 	git commit -m "Long filename"
 '
+
+test_expect_failure 'handle existing decomposed filenames' '
+	echo content >"verbatim.$Adiarnfd" &&
+	git -c core.precomposeunicode=false add "verbatim.$Adiarnfd" &&
+	git commit -m "existing decomposed file" &&
+	>expect &&
+	git ls-files --exclude-standard -o "verbatim*" >untracked &&
+	test_cmp expect untracked
+'
+
 # Test if the global core.precomposeunicode stops autosensing
 # Must be the last test case
 test_expect_success "respect git config --global core.precomposeunicode" '
 	git config --global core.precomposeunicode true &&
 	rm -rf .git &&
 	git init &&
-	precomposeunicode=`git config core.precomposeunicode` &&
+	precomposeunicode=$(git config core.precomposeunicode) &&
 	test "$precomposeunicode" = "true"
 '
 
 test_done
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4006-diff-mode.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4006-diff-mode.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4006-diff-mode.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4006-diff-mode.sh	2014-08-16 06:26:55.000000000 +0800
@@ -10,13 +10,13 @@
 
 sed_script='s/\(:100644 100755\) \('"$_x40"'\) \2 /\1 X X /'
 
 test_expect_success 'setup' '
 	echo frotz >rezrov &&
 	git update-index --add rezrov &&
-	tree=`git write-tree` &&
+	tree=$(git write-tree) &&
 	echo $tree
 '
 
 test_expect_success 'chmod' '
 	test_chmod +x rezrov &&
 	git diff-index $tree >current &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4010-diff-pathspec.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4010-diff-pathspec.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4010-diff-pathspec.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4010-diff-pathspec.sh	2014-08-16 06:26:55.000000000 +0800
@@ -15,13 +15,13 @@
 test_expect_success \
     setup \
     'echo frotz >file0 &&
      mkdir path1 &&
      echo rezrov >path1/file1 &&
      git update-index --add file0 path1/file1 &&
-     tree=`git write-tree` &&
+     tree=$(git write-tree) &&
      echo "$tree" &&
      echo nitfol >file0 &&
      echo yomin >path1/file1 &&
      git update-index file0 path1/file1'
 
 cat >expected <<\EOF
@@ -128,13 +128,13 @@
 '
 
 test_expect_success 'diff multiple wildcard pathspecs' '
 	mkdir path2 &&
 	echo rezrov >path2/file1 &&
 	git update-index --add path2/file1 &&
-	tree3=`git write-tree` &&
+	tree3=$(git write-tree) &&
 	git diff --name-only $tree $tree3 -- "path2*1" "path1*1" >actual &&
 	cat <<-\EOF >expect &&
 	path1/file1
 	path2/file1
 	EOF
 	test_cmp expect actual
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4012-diff-binary.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4012-diff-binary.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4012-diff-binary.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4012-diff-binary.sh	2014-08-16 06:26:55.000000000 +0800
@@ -64,42 +64,42 @@
 # apply needs to be able to skip the binary material correctly
 # in order to report the line number of a corrupt patch.
 test_expect_success C_LOCALE_OUTPUT 'apply detecting corrupt patch correctly' '
 	git diff >output &&
 	sed -e "s/-CIT/xCIT/" <output >broken &&
 	test_must_fail git apply --stat --summary broken 2>detected &&
-	detected=`cat detected` &&
-	detected=`expr "$detected" : "fatal.*at line \\([0-9]*\\)\$"` &&
-	detected=`sed -ne "${detected}p" broken` &&
+	detected=$(cat detected) &&
+	detected=$(expr "$detected" : "fatal.*at line \\([0-9]*\\)\$") &&
+	detected=$(sed -ne "${detected}p" broken) &&
 	test "$detected" = xCIT
 '
 
 test_expect_success C_LOCALE_OUTPUT 'apply detecting corrupt patch correctly' '
 	git diff --binary | sed -e "s/-CIT/xCIT/" >broken &&
 	test_must_fail git apply --stat --summary broken 2>detected &&
-	detected=`cat detected` &&
-	detected=`expr "$detected" : "fatal.*at line \\([0-9]*\\)\$"` &&
-	detected=`sed -ne "${detected}p" broken` &&
+	detected=$(cat detected) &&
+	detected=$(expr "$detected" : "fatal.*at line \\([0-9]*\\)\$") &&
+	detected=$(sed -ne "${detected}p" broken) &&
 	test "$detected" = xCIT
 '
 
 test_expect_success 'initial commit' 'git commit -a -m initial'
 
 # Try removal (b), modification (d), and creation (e).
 test_expect_success 'diff-index with --binary' '
 	echo AIT >a && mv b e && echo CIT >c && cat e >d &&
 	git update-index --add --remove a b c d e &&
-	tree0=`git write-tree` &&
+	tree0=$(git write-tree) &&
 	git diff --cached --binary >current &&
 	git apply --stat --summary current
 '
 
 test_expect_success 'apply binary patch' '
 	git reset --hard &&
 	git apply --binary --index <current &&
-	tree1=`git write-tree` &&
+	tree1=$(git write-tree) &&
 	test "$tree1" = "$tree0"
 '
 
 test_expect_success 'diff --no-index with binary creation' '
 	echo Q | q_to_nul >binary &&
 	(: hide error code from diff, which just indicates differences
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4013-diff-various.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4013-diff-various.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4013-diff-various.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4013-diff-various.sh	2014-08-16 06:26:55.000000000 +0800
@@ -104,20 +104,20 @@
  * + [side] Side
  *   [master^] Third
  *   [master~2] Second
 +*++ [initial] Initial
 EOF
 
-V=`git version | sed -e 's/^git version //' -e 's/\./\\./g'`
+V=$(git version | sed -e 's/^git version //' -e 's/\./\\./g')
 while read cmd
 do
 	case "$cmd" in
 	'' | '#'*) continue ;;
 	esac
-	test=`echo "$cmd" | sed -e 's|[/ ][/ ]*|_|g'`
-	pfx=`printf "%04d" $test_count`
+	test=$(echo "$cmd" | sed -e 's|[/ ][/ ]*|_|g')
+	pfx=$(printf "%04d" $test_count)
 	expect="$TEST_DIRECTORY/t4013/diff.$test"
 	actual="$pfx-diff.$test"
 
 	test_expect_success "git $cmd" '
 		{
 			echo "\$ git $cmd"
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4014-format-patch.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4014-format-patch.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4014-format-patch.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4014-format-patch.sh	2014-08-16 06:26:55.000000000 +0800
@@ -40,22 +40,22 @@
 
 '
 
 test_expect_success "format-patch --ignore-if-in-upstream" '
 
 	git format-patch --stdout master..side >patch0 &&
-	cnt=`grep "^From " patch0 | wc -l` &&
+	cnt=$(grep "^From " patch0 | wc -l) &&
 	test $cnt = 3
 
 '
 
 test_expect_success "format-patch --ignore-if-in-upstream" '
 
 	git format-patch --stdout \
 		--ignore-if-in-upstream master..side >patch1 &&
-	cnt=`grep "^From " patch1 | wc -l` &&
+	cnt=$(grep "^From " patch1 | wc -l) &&
 	test $cnt = 2
 
 '
 
 test_expect_success "format-patch doesn't consider merge commits" '
 
@@ -66,29 +66,29 @@
 	echo "Yet another line" >>file &&
 	test_tick &&
 	git commit -am "Slave change #2" &&
 	git checkout -b merger master &&
 	test_tick &&
 	git merge --no-ff slave &&
-	cnt=`git format-patch -3 --stdout | grep "^From " | wc -l` &&
+	cnt=$(git format-patch -3 --stdout | grep "^From " | wc -l) &&
 	test $cnt = 3
 '
 
 test_expect_success "format-patch result applies" '
 
 	git checkout -b rebuild-0 master &&
 	git am -3 patch0 &&
-	cnt=`git rev-list master.. | wc -l` &&
+	cnt=$(git rev-list master.. | wc -l) &&
 	test $cnt = 2
 '
 
 test_expect_success "format-patch --ignore-if-in-upstream result applies" '
 
 	git checkout -b rebuild-1 master &&
 	git am -3 patch1 &&
-	cnt=`git rev-list master.. | wc -l` &&
+	cnt=$(git rev-list master.. | wc -l) &&
 	test $cnt = 2
 '
 
 test_expect_success 'commit did not screw up the log message' '
 
 	git cat-file commit side | grep "^Side .* with .* backslash-n"
@@ -759,12 +759,73 @@
 test_expect_success 'format-patch --signature="" suppresses signatures' '
 	git format-patch --stdout --signature="" -1 >output &&
 	check_patch output &&
 	! grep "^-- \$" output
 '
 
+test_expect_success 'prepare mail-signature input' '
+	cat >mail-signature <<-\EOF
+
+	Test User <test.email@kernel.org>
+	http://git.kernel.org/cgit/git/git.git
+
+	git.kernel.org/?p=git/git.git;a=summary
+
+	EOF
+'
+
+test_expect_success '--signature-file=file works' '
+	git format-patch --stdout --signature-file=mail-signature -1 >output &&
+	check_patch output &&
+	sed -e "1,/^-- \$/d" <output >actual &&
+	{
+		cat mail-signature && echo
+	} >expect &&
+	test_cmp expect actual
+'
+
+test_expect_success 'format.signaturefile works' '
+	test_config format.signaturefile mail-signature &&
+	git format-patch --stdout -1 >output &&
+	check_patch output &&
+	sed -e "1,/^-- \$/d" <output >actual &&
+	{
+		cat mail-signature && echo
+	} >expect &&
+	test_cmp expect actual
+'
+
+test_expect_success '--no-signature suppresses format.signaturefile ' '
+	test_config format.signaturefile mail-signature &&
+	git format-patch --stdout --no-signature -1 >output &&
+	check_patch output &&
+	! grep "^-- \$" output
+'
+
+test_expect_success '--signature-file overrides format.signaturefile' '
+	cat >other-mail-signature <<-\EOF
+	Use this other signature instead of mail-signature.
+	EOF
+	test_config format.signaturefile mail-signature &&
+	git format-patch --stdout \
+			--signature-file=other-mail-signature -1 >output &&
+	check_patch output &&
+	sed -e "1,/^-- \$/d" <output >actual &&
+	{
+		cat other-mail-signature && echo
+	} >expect &&
+	test_cmp expect actual
+'
+
+test_expect_success '--signature overrides format.signaturefile' '
+	test_config format.signaturefile mail-signature &&
+	git format-patch --stdout --signature="my sig" -1 >output &&
+	check_patch output &&
+	grep "my sig" output
+'
+
 test_expect_success TTY 'format-patch --stdout paginates' '
 	rm -f pager_used &&
 	test_terminal env GIT_PAGER="wc >pager_used" git format-patch --stdout --all &&
 	test_path_is_file pager_used
 '
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4018-diff-funcname.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4018-diff-funcname.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4018-diff-funcname.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4018-diff-funcname.sh	2014-08-16 06:26:55.000000000 +0800
@@ -49,21 +49,21 @@
 for p in $diffpatterns
 do
 	test_expect_success "builtin $p pattern compiles" '
 		echo "*.java diff=$p" >.gitattributes &&
 		test_expect_code 1 git diff --no-index \
 			A.java B.java 2>msg &&
-		! test_i18ngrep fatal msg &&
-		! test_i18ngrep error msg
+		test_i18ngrep ! fatal msg &&
+		test_i18ngrep ! error msg
 	'
 	test_expect_success "builtin $p wordRegex pattern compiles" '
 		echo "*.java diff=$p" >.gitattributes &&
 		test_expect_code 1 git diff --no-index --word-diff \
 			A.java B.java 2>msg &&
-		! test_i18ngrep fatal msg &&
-		! test_i18ngrep error msg
+		test_i18ngrep ! fatal msg &&
+		test_i18ngrep ! error msg
 	'
 done
 
 test_expect_success 'last regexp must not be negated' '
 	echo "*.java diff=java" >.gitattributes &&
 	test_config diff.java.funcname "!static" &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4036-format-patch-signer-mime.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4036-format-patch-signer-mime.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4036-format-patch-signer-mime.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4036-format-patch-signer-mime.sh	2014-08-16 06:26:55.000000000 +0800
@@ -39,12 +39,12 @@
 '
 
 test_expect_success 'attach and signoff do not duplicate mime headers' '
 
 	GIT_COMMITTER_NAME="はまの ふにおう" \
 	git format-patch -s --stdout -1 --attach >output &&
-	test `grep -ci ^MIME-Version: output` = 1
+	test $(grep -ci ^MIME-Version: output) = 1
 
 '
 
 test_done
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4038-diff-combined.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4038-diff-combined.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4038-diff-combined.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4038-diff-combined.sh	2014-08-16 06:26:55.000000000 +0800
@@ -91,13 +91,13 @@
 '
 
 test_expect_success 'setup for --cc --raw' '
 	blob=$(echo file | git hash-object --stdin -w) &&
 	base_tree=$(echo "100644 blob $blob	file" | git mktree) &&
 	trees= &&
-	for i in `test_seq 1 40`
+	for i in $(test_seq 1 40)
 	do
 		blob=$(echo file$i | git hash-object --stdin -w) &&
 		trees="$trees$(echo "100644 blob $blob	file" | git mktree)$LF"
 	done
 '
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4041-diff-submodule-option.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4041-diff-submodule-option.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4041-diff-submodule-option.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4041-diff-submodule-option.sh	2014-08-16 06:26:55.000000000 +0800
@@ -23,14 +23,16 @@
 		shift &&
 		for name
 		do
 			echo "$name" >"$name" &&
 			git add "$name" &&
 			test_tick &&
-			msg_added_iso88591=$(echo "Add $name ($added $name)" | iconv -f utf-8 -t $test_encoding) &&
-			git -c "i18n.commitEncoding=$test_encoding" commit -m "$msg_added_iso88591"
+			# "git commit -m" would break MinGW, as Windows refuse to pass
+			# $test_encoding encoded parameter to git.
+			echo "Add $name ($added $name)" | iconv -f utf-8 -t $test_encoding |
+			git -c "i18n.commitEncoding=$test_encoding" commit -F -
 		done >/dev/null &&
 		git rev-parse --short --verify HEAD
 	)
 }
 commit_file () {
 	test_tick &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4057-diff-combined-paths.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4057-diff-combined-paths.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4057-diff-combined-paths.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4057-diff-combined-paths.sh	2014-08-16 06:26:55.000000000 +0800
@@ -2,13 +2,13 @@
 
 test_description='combined diff show only paths that are different to all parents'
 
 . ./test-lib.sh
 
 # verify that diffc.expect matches output of
-# `git diff -c --name-only HEAD HEAD^ HEAD^2`
+# $(git diff -c --name-only HEAD HEAD^ HEAD^2)
 diffc_verify () {
 	git diff -c --name-only HEAD HEAD^ HEAD^2 >diffc.actual &&
 	test_cmp diffc.expect diffc.actual
 }
 
 test_expect_success 'trivial merge - combine-diff empty' '
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4102-apply-rename.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4102-apply-rename.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4102-apply-rename.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4102-apply-rename.sh	2014-08-16 06:26:55.000000000 +0800
@@ -49,9 +49,9 @@
 -This is foo
 +This is bar
 EOF
 
 test_expect_success 'apply copy' \
     'git apply --index --stat --summary --apply test-patch &&
-     test "$(cat bar)" = "This is bar" -a "$(cat foo)" = "This is foo"'
+     test "$(cat bar)" = "This is bar" && test "$(cat foo)" = "This is foo"'
 
 test_done
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4116-apply-reverse.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4116-apply-reverse.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4116-apply-reverse.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4116-apply-reverse.sh	2014-08-16 06:26:55.000000000 +0800
@@ -27,16 +27,16 @@
 	git diff --binary initial second >patch
 
 '
 
 test_expect_success 'apply in forward' '
 
-	T0=`git rev-parse "second^{tree}"` &&
+	T0=$(git rev-parse "second^{tree}") &&
 	git reset --hard initial &&
 	git apply --index --binary patch &&
-	T1=`git write-tree` &&
+	T1=$(git write-tree) &&
 	test "$T0" = "$T1"
 '
 
 test_expect_success 'apply in reverse' '
 
 	git reset --hard second &&
@@ -59,28 +59,28 @@
 	)
 
 '
 
 test_expect_success 'apply in forward without postimage' '
 
-	T0=`git rev-parse "second^{tree}"` &&
+	T0=$(git rev-parse "second^{tree}") &&
 	(
 		cd initial &&
 		git apply --index --binary ../patch &&
-		T1=`git write-tree` &&
+		T1=$(git write-tree) &&
 		test "$T0" = "$T1"
 	)
 '
 
 test_expect_success 'apply in reverse without postimage' '
 
-	T0=`git rev-parse "initial^{tree}"` &&
+	T0=$(git rev-parse "initial^{tree}") &&
 	(
 		cd second &&
 		git apply --index --binary --reverse ../patch &&
-		T1=`git write-tree` &&
+		T1=$(git write-tree) &&
 		test "$T0" = "$T1"
 	)
 '
 
 test_expect_success 'reversing a whitespace introduction' '
 	sed "s/a/a /" < file1 > file1.new &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4119-apply-config.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4119-apply-config.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4119-apply-config.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4119-apply-config.sh	2014-08-16 06:26:55.000000000 +0800
@@ -65,13 +65,13 @@
 
 	git config apply.whitespace strip &&
 	git apply patch.file &&
 	check_result sub/file1
 '
 
-D=`pwd`
+D=$(pwd)
 
 test_expect_success 'apply --whitespace=strip in subdir' '
 
 	cd "$D" &&
 	git config --unset-all apply.whitespace &&
 	rm -f sub/file1 &&
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t: t4137-apply-submodule.sh
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4201-shortlog.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4201-shortlog.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4201-shortlog.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4201-shortlog.sh	2014-08-16 06:26:55.000000000 +0800
@@ -90,13 +90,13 @@
 	sed "s/SUBJECT/two lines/" expect.template >expect &&
 	git shortlog --format="two%nlines" HEAD >log &&
 	fuzz log >log.predictable &&
 	test_cmp expect log.predictable
 '
 
-test_expect_success 'shortlog wrapping' '
+test_expect_success NOT_MINGW 'shortlog wrapping' '
 	cat >expect <<\EOF &&
 A U Thor (5):
       Test
       This is a very, very long first line for the commit message to see if
          it is wrapped correctly
       Th𝄞s 𝄞s a very, very long f𝄞rst l𝄞ne for the comm𝄞t message to see 𝄞f
@@ -111,13 +111,13 @@
 
 EOF
 	git shortlog -w HEAD >out &&
 	test_cmp expect out
 '
 
-test_expect_success 'shortlog from non-git directory' '
+test_expect_success NOT_MINGW 'shortlog from non-git directory' '
 	git log HEAD >log &&
 	GIT_DIR=non-existing git shortlog -w <log >out &&
 	test_cmp expect out
 '
 
 test_expect_success 'shortlog should add newline when input line matches wraplen' '
@@ -156,13 +156,13 @@
 $DSCHO (2):
       $MSG1
       $MSG2
 
 EOF
 
-test_expect_success 'shortlog encoding' '
+test_expect_success NOT_MINGW 'shortlog encoding' '
 	git reset --hard "$commit" &&
 	git config --unset i18n.commitencoding &&
 	echo 2 > a1 &&
 	git commit --quiet -m "$MSG1" --author="$DSCHOE" a1 &&
 	git config i18n.commitencoding "ISO8859-1" &&
 	echo 3 > a1 &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4204-patch-id.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4204-patch-id.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4204-patch-id.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4204-patch-id.sh	2014-08-16 06:26:55.000000000 +0800
@@ -2,33 +2,50 @@
 
 test_description='git patch-id'
 
 . ./test-lib.sh
 
 test_expect_success 'setup' '
-	test_commit initial foo a &&
-	test_commit first foo b &&
-	git checkout -b same HEAD^ &&
-	test_commit same-msg foo b &&
-	git checkout -b notsame HEAD^ &&
-	test_commit notsame-msg foo c
+	as="a a a a a a a a" && # eight a
+	test_write_lines $as >foo &&
+	test_write_lines $as >bar &&
+	git add foo bar &&
+	git commit -a -m initial &&
+	test_write_lines $as b >foo &&
+	test_write_lines $as b >bar &&
+	git commit -a -m first &&
+	git checkout -b same master &&
+	git commit --amend -m same-msg &&
+	git checkout -b notsame master &&
+	echo c >foo &&
+	echo c >bar &&
+	git commit --amend -a -m notsame-msg &&
+	test_write_lines bar foo >bar-then-foo &&
+	test_write_lines foo bar >foo-then-bar
 '
 
 test_expect_success 'patch-id output is well-formed' '
-	git log -p -1 | git patch-id > output &&
+	git log -p -1 | git patch-id >output &&
 	grep "^[a-f0-9]\{40\} $(git rev-parse HEAD)$" output
 '
 
+#calculate patch id. Make sure output is not empty.
 calc_patch_id () {
-	git patch-id |
-		sed "s# .*##" > patch-id_"$1"
+	name="$1"
+	shift
+	git patch-id "$@" |
+	sed "s/ .*//" >patch-id_"$name" &&
+	test_line_count -gt 0 patch-id_"$name"
+}
+
+get_top_diff () {
+	git log -p -1 "$@" -O bar-then-foo --
 }
 
 get_patch_id () {
-	git log -p -1 "$1" | git patch-id |
-		sed "s# .*##" > patch-id_"$1"
+	get_top_diff "$1" | calc_patch_id "$@"
 }
 
 test_expect_success 'patch-id detects equality' '
 	get_patch_id master &&
 	get_patch_id same &&
 	test_cmp patch-id_master patch-id_same
@@ -42,23 +59,86 @@
 
 test_expect_success 'patch-id supports git-format-patch output' '
 	get_patch_id master &&
 	git checkout same &&
 	git format-patch -1 --stdout | calc_patch_id same &&
 	test_cmp patch-id_master patch-id_same &&
-	set `git format-patch -1 --stdout | git patch-id` &&
-	test "$2" = `git rev-parse HEAD`
+	set $(git format-patch -1 --stdout | git patch-id) &&
+	test "$2" = $(git rev-parse HEAD)
 '
 
 test_expect_success 'whitespace is irrelevant in footer' '
 	get_patch_id master &&
 	git checkout same &&
 	git format-patch -1 --stdout | sed "s/ \$//" | calc_patch_id same &&
 	test_cmp patch-id_master patch-id_same
 '
 
+cmp_patch_id () {
+	if
+		test "$1" = "relevant"
+	then
+		! test_cmp patch-id_"$2" patch-id_"$3"
+	else
+		test_cmp patch-id_"$2" patch-id_"$3"
+	fi
+}
+
+test_patch_id_file_order () {
+	relevant="$1"
+	shift
+	name="order-${1}-$relevant"
+	shift
+	get_top_diff "master" | calc_patch_id "$name" "$@" &&
+	git checkout same &&
+	git format-patch -1 --stdout -O foo-then-bar |
+		calc_patch_id "ordered-$name" "$@" &&
+	cmp_patch_id $relevant "$name" "ordered-$name"
+
+}
+
+# combined test for options: add more tests here to make them
+# run with all options
+test_patch_id () {
+	test_patch_id_file_order "$@"
+}
+
+# small tests with detailed diagnostic for basic options.
+test_expect_success 'file order is irrelevant with --stable' '
+	test_patch_id_file_order irrelevant --stable --stable
+'
+
+test_expect_success 'file order is relevant with --unstable' '
+	test_patch_id_file_order relevant --unstable --unstable
+'
+
+#Now test various option combinations.
+test_expect_success 'default is unstable' '
+	test_patch_id relevant default
+'
+
+test_expect_success 'patchid.stable = true is stable' '
+	test_config patchid.stable true &&
+	test_patch_id irrelevant patchid.stable=true
+'
+
+test_expect_success 'patchid.stable = false is unstable' '
+	test_config patchid.stable false &&
+	test_patch_id relevant patchid.stable=false
+'
+
+test_expect_success '--unstable overrides patchid.stable = true' '
+	test_config patchid.stable true &&
+	test_patch_id relevant patchid.stable=true--unstable --unstable
+'
+
+test_expect_success '--stable overrides patchid.stable = false' '
+	test_config patchid.stable false &&
+	test_patch_id irrelevant patchid.stable=false--stable --stable
+'
+
 test_expect_success 'patch-id supports git-format-patch MIME output' '
 	get_patch_id master &&
 	git checkout same &&
 	git format-patch -1 --attach --stdout | calc_patch_id same &&
 	test_cmp patch-id_master patch-id_same
 '
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4205-log-pretty-formats.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4205-log-pretty-formats.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4205-log-pretty-formats.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4205-log-pretty-formats.sh	2014-08-16 06:26:55.000000000 +0800
@@ -28,13 +28,13 @@
 test_expect_success 'set up basic repos' '
 	>foo &&
 	>bar &&
 	git add foo &&
 	test_tick &&
 	git config i18n.commitEncoding $test_encoding &&
-	git commit -m "$(commit_msg $test_encoding)" &&
+	commit_msg $test_encoding | git commit -F - &&
 	git add bar &&
 	test_tick &&
 	git commit -m "add bar" &&
 	git config --unset i18n.commitEncoding
 '
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4210-log-i18n.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4210-log-i18n.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t4210-log-i18n.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t4210-log-i18n.sh	2014-08-16 06:26:55.000000000 +0800
@@ -31,22 +31,22 @@
 	utf8
 	EOF
 	git log --encoding=utf8 --format=%s --grep=$utf8_e >actual &&
 	test_cmp expect actual
 '
 
-test_expect_success 'log --grep searches in log output encoding (latin1)' '
+test_expect_success NOT_MINGW 'log --grep searches in log output encoding (latin1)' '
 	cat >expect <<-\EOF &&
 	latin1
 	utf8
 	EOF
 	git log --encoding=ISO-8859-1 --format=%s --grep=$latin1_e >actual &&
 	test_cmp expect actual
 '
 
-test_expect_success 'log --grep does not find non-reencoded values (utf8)' '
+test_expect_success NOT_MINGW 'log --grep does not find non-reencoded values (utf8)' '
 	>expect &&
 	git log --encoding=utf8 --format=%s --grep=$latin1_e >actual &&
 	test_cmp expect actual
 '
 
 test_expect_success 'log --grep does not find non-reencoded values (latin1)' '
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t: t4255-am-submodule.sh
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5000-tar-tree.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5000-tar-tree.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5000-tar-tree.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5000-tar-tree.sh	2014-08-16 06:26:55.000000000 +0800
@@ -69,13 +69,13 @@
 	test_expect_success TAR_NEEDS_PAX_FALLBACK ' interpret pax headers' '
 		(
 			cd $dir &&
 			for header in *.paxheader
 			do
 				data=${header%.paxheader}.data &&
-				if test -h $data -o -e $data
+				if test -h $data || test -e $data
 				then
 					path=$(get_pax_header $header path) &&
 					if test -n "$path"
 					then
 						mv "$data" "$path"
 					fi
@@ -116,20 +116,16 @@
 
 test_expect_success \
     'add ignored file' \
     'echo ignore me >a/ignored &&
      echo ignored export-ignore >.git/info/attributes'
 
-test_expect_success \
-    'add files to repository' \
-    'find a -type f | xargs git update-index --add &&
-     find a -type l | xargs git update-index --add &&
-     treeid=`git write-tree` &&
-     echo $treeid >treeid &&
-     git update-ref HEAD $(TZ=GMT GIT_COMMITTER_DATE="2005-05-27 22:00:00" \
-     git commit-tree $treeid </dev/null)'
+test_expect_success 'add files to repository' '
+	git add a &&
+	GIT_COMMITTER_DATE="2005-05-27 22:00" git commit -m initial
+'
 
 test_expect_success 'setup export-subst' '
 	echo "substfile?" export-subst >>.git/info/attributes &&
 	git log --max-count=1 "--pretty=format:A${SUBSTFORMAT}O" HEAD \
 		>a/substfile1
 '
@@ -204,21 +200,21 @@
 test_expect_success \
     'git archive --list outside of a git repo' \
     'GIT_DIR=some/non-existing/directory git archive --list'
 
 test_expect_success 'clients cannot access unreachable commits' '
 	test_commit unreachable &&
-	sha1=`git rev-parse HEAD` &&
+	sha1=$(git rev-parse HEAD) &&
 	git reset --hard HEAD^ &&
 	git archive $sha1 >remote.tar &&
 	test_must_fail git archive --remote=. $sha1 >remote.tar
 '
 
 test_expect_success 'upload-archive can allow unreachable commits' '
 	test_commit unreachable1 &&
-	sha1=`git rev-parse HEAD` &&
+	sha1=$(git rev-parse HEAD) &&
 	git reset --hard HEAD^ &&
 	git archive $sha1 >remote.tar &&
 	test_config uploadarchive.allowUnreachable true &&
 	git archive --remote=. $sha1 >remote.tar
 '
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5003-archive-zip.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5003-archive-zip.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5003-archive-zip.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5003-archive-zip.sh	2014-08-16 06:26:55.000000000 +0800
@@ -58,20 +58,16 @@
 
 test_expect_success \
     'add ignored file' \
     'echo ignore me >a/ignored &&
      echo ignored export-ignore >.git/info/attributes'
 
-test_expect_success \
-    'add files to repository' \
-    'find a -type f | xargs git update-index --add &&
-     find a -type l | xargs git update-index --add &&
-     treeid=`git write-tree` &&
-     echo $treeid >treeid &&
-     git update-ref HEAD $(TZ=GMT GIT_COMMITTER_DATE="2005-05-27 22:00:00" \
-     git commit-tree $treeid </dev/null)'
+test_expect_success 'add files to repository' '
+	git add a &&
+	GIT_COMMITTER_DATE="2005-05-27 22:00" git commit -m initial
+'
 
 test_expect_success 'setup export-subst' '
 	echo "substfile?" export-subst >>.git/info/attributes &&
 	git log --max-count=1 "--pretty=format:A${SUBSTFORMAT}O" HEAD \
 		>a/substfile1
 '
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5310-pack-bitmaps.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5310-pack-bitmaps.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5310-pack-bitmaps.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5310-pack-bitmaps.sh	2014-08-16 06:26:55.000000000 +0800
@@ -15,13 +15,13 @@
 	for i in $(test_seq 1 10); do
 		test_commit side-$i
 	done &&
 	git checkout master &&
 	blob=$(echo tagged-blob | git hash-object -w --stdin) &&
 	git tag tagged-blob $blob &&
-	git config pack.writebitmaps true &&
+	git config repack.writebitmaps true &&
 	git config pack.writebitmaphashcache true
 '
 
 test_expect_success 'full repack creates bitmaps' '
 	git repack -ad &&
 	ls .git/objects/pack/ | grep bitmap >output &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5403-post-checkout-hook.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5403-post-checkout-hook.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5403-post-checkout-hook.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5403-post-checkout-hook.sh	2014-08-16 06:26:55.000000000 +0800
@@ -36,42 +36,42 @@
 '
 
 test_expect_success 'post-checkout receives the right arguments with HEAD unchanged ' '
 	old=$(awk "{print \$1}" clone1/.git/post-checkout.args) &&
 	new=$(awk "{print \$2}" clone1/.git/post-checkout.args) &&
 	flag=$(awk "{print \$3}" clone1/.git/post-checkout.args) &&
-	test $old = $new -a $flag = 1
+	test $old = $new && test $flag = 1
 '
 
 test_expect_success 'post-checkout runs as expected ' '
 	GIT_DIR=clone1/.git git checkout master &&
 	test -e clone1/.git/post-checkout.args
 '
 
 test_expect_success 'post-checkout args are correct with git checkout -b ' '
 	GIT_DIR=clone1/.git git checkout -b new1 &&
 	old=$(awk "{print \$1}" clone1/.git/post-checkout.args) &&
 	new=$(awk "{print \$2}" clone1/.git/post-checkout.args) &&
 	flag=$(awk "{print \$3}" clone1/.git/post-checkout.args) &&
-	test $old = $new -a $flag = 1
+	test $old = $new && test $flag = 1
 '
 
 test_expect_success 'post-checkout receives the right args with HEAD changed ' '
 	GIT_DIR=clone2/.git git checkout new2 &&
 	old=$(awk "{print \$1}" clone2/.git/post-checkout.args) &&
 	new=$(awk "{print \$2}" clone2/.git/post-checkout.args) &&
 	flag=$(awk "{print \$3}" clone2/.git/post-checkout.args) &&
-	test $old != $new -a $flag = 1
+	test $old != $new && test $flag = 1
 '
 
 test_expect_success 'post-checkout receives the right args when not switching branches ' '
 	GIT_DIR=clone2/.git git checkout master b &&
 	old=$(awk "{print \$1}" clone2/.git/post-checkout.args) &&
 	new=$(awk "{print \$2}" clone2/.git/post-checkout.args) &&
 	flag=$(awk "{print \$3}" clone2/.git/post-checkout.args) &&
-	test $old = $new -a $flag = 0
+	test $old = $new && test $flag = 0
 '
 
 if test "$(git config --bool core.filemode)" = true; then
 mkdir -p templates/hooks
 cat >templates/hooks/post-checkout <<'EOF'
 #!/bin/sh
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5510-fetch.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5510-fetch.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5510-fetch.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5510-fetch.sh	2014-08-16 06:26:55.000000000 +0800
@@ -444,12 +444,49 @@
 		n=$(git rev-parse --verify refs/remotes/origin/master) &&
 		test "$o" != "$n" &&
 		test_must_fail git rev-parse --verify refs/remotes/origin/side
 	)
 '
 
+test_expect_success 'explicit --refmap is allowed only with command-line refspec' '
+	cd "$D" &&
+	(
+		cd three &&
+		test_must_fail git fetch --refmap="*:refs/remotes/none/*"
+	)
+'
+
+test_expect_success 'explicit --refmap option overrides remote.*.fetch' '
+	cd "$D" &&
+	git branch -f side &&
+	(
+		cd three &&
+		git update-ref refs/remotes/origin/master base-origin-master &&
+		o=$(git rev-parse --verify refs/remotes/origin/master) &&
+		git fetch --refmap="refs/heads/*:refs/remotes/other/*" origin master &&
+		n=$(git rev-parse --verify refs/remotes/origin/master) &&
+		test "$o" = "$n" &&
+		test_must_fail git rev-parse --verify refs/remotes/origin/side &&
+		git rev-parse --verify refs/remotes/other/master
+	)
+'
+
+test_expect_success 'explicitly empty --refmap option disables remote.*.fetch' '
+	cd "$D" &&
+	git branch -f side &&
+	(
+		cd three &&
+		git update-ref refs/remotes/origin/master base-origin-master &&
+		o=$(git rev-parse --verify refs/remotes/origin/master) &&
+		git fetch --refmap="" origin master &&
+		n=$(git rev-parse --verify refs/remotes/origin/master) &&
+		test "$o" = "$n" &&
+		test_must_fail git rev-parse --verify refs/remotes/origin/side
+	)
+'
+
 test_expect_success 'configured fetch updates tracking' '
 
 	cd "$D" &&
 	git branch -f side &&
 	(
 		cd three &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5511-refspec.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5511-refspec.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5511-refspec.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5511-refspec.sh	2014-08-16 06:26:55.000000000 +0800
@@ -81,7 +80,12 @@
 test_refspec fetch 'refs/heads/*/*/for-linus:refs/remotes/mine/*' invalid
 test_refspec push 'refs/heads/*/*/for-linus:refs/remotes/mine/*' invalid
 
 test_refspec fetch 'refs/heads/*/for-linus:refs/remotes/mine/*'
 test_refspec push 'refs/heads/*/for-linus:refs/remotes/mine/*'
 
+good=$(printf '\303\204')
+test_refspec fetch "refs/heads/${good}"
+bad=$(printf '\011tab')
+test_refspec fetch "refs/heads/${bad}"				invalid
+
 test_done
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5539-fetch-http-shallow.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5539-fetch-http-shallow.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5539-fetch-http-shallow.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5539-fetch-http-shallow.sh	2014-08-16 06:26:55.000000000 +0800
@@ -51,12 +51,13 @@
 # This test is tricky. We need large enough "have"s that fetch-pack
 # will put pkt-flush in between. Then we need a "have" the server
 # does not have, it'll send "ACK %s ready"
 test_expect_success 'no shallow lines after receiving ACK ready' '
 	(
 		cd shallow &&
+		test_tick &&
 		for i in $(test_seq 15)
 		do
 			git checkout --orphan unrelated$i &&
 			test_commit unrelated$i &&
 			git push -q "$HTTPD_DOCUMENT_ROOT_PATH/repo.git" \
 				refs/heads/unrelated$i:refs/heads/unrelated$i &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5550-http-fetch-dumb.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5550-http-fetch-dumb.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5550-http-fetch-dumb.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5550-http-fetch-dumb.sh	2014-08-16 06:26:55.000000000 +0800
@@ -168,8 +168,33 @@
 test_expect_success 'did not use upload-pack service' '
 	grep '/git-upload-pack' <"$HTTPD_ROOT_PATH"/access.log >act
 	: >exp
 	test_cmp exp act
 '
 
+test_expect_success 'git client shows text/plain errors' '
+	test_must_fail git clone "$HTTPD_URL/error/text" 2>stderr &&
+	grep "this is the error message" stderr
+'
+
+test_expect_success 'git client does not show html errors' '
+	test_must_fail git clone "$HTTPD_URL/error/html" 2>stderr &&
+	! grep "this is the error message" stderr
+'
+
+test_expect_success 'git client shows text/plain with a charset' '
+	test_must_fail git clone "$HTTPD_URL/error/charset" 2>stderr &&
+	grep "this is the error message" stderr
+'
+
+test_expect_success 'http error messages are reencoded' '
+	test_must_fail git clone "$HTTPD_URL/error/utf16" 2>stderr &&
+	grep "this is the error message" stderr
+'
+
+test_expect_success 'reencoding is robust to whitespace oddities' '
+	test_must_fail git clone "$HTTPD_URL/error/odd-spacing" 2>stderr &&
+	grep "this is the error message" stderr
+'
+
 stop_httpd
 test_done
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5551-http-fetch-smart.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5551-http-fetch-smart.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5551-http-fetch-smart.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5551-http-fetch-smart.sh	2014-08-16 06:26:55.000000000 +0800
@@ -210,14 +210,12 @@
 	git config http.savecookies true &&
 	git ls-remote $HTTPD_URL/smart_cookies/repo.git master &&
 	tail -3 cookies.txt > cookies_tail.txt
 	test_cmp expect_cookies.txt cookies_tail.txt
 '
 
-test -n "$GIT_TEST_LONG" && test_set_prereq EXPENSIVE
-
 test_expect_success EXPENSIVE 'create 50,000 tags in the repo' '
 	(
 	cd "$HTTPD_DOCUMENT_ROOT_PATH/repo.git" &&
 	for i in `test_seq 50000`
 	do
 		echo "commit refs/heads/too-many-refs"
@@ -237,14 +235,13 @@
 	tag=$(perl -e "print \"bla\" x 30") &&
 	sed -e "s|^:\([^ ]*\) \(.*\)$|\2 refs/tags/$tag-\1|" <marks >>packed-refs
 	)
 '
 
 test_expect_success EXPENSIVE 'clone the 50,000 tag repo to check OS command line overflow' '
-	git clone $HTTPD_URL/smart/repo.git too-many-refs 2>err &&
-	test_line_count = 0 err &&
+	git clone $HTTPD_URL/smart/repo.git too-many-refs &&
 	(
 		cd too-many-refs &&
 		test $(git for-each-ref refs/tags | wc -l) = 50000
 	)
 '
 
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t: t5572-pull-submodule.sh
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5801-remote-helpers.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5801-remote-helpers.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t5801-remote-helpers.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t5801-remote-helpers.sh	2014-08-16 06:26:55.000000000 +0800
@@ -84,19 +84,35 @@
 	 git commit -a -m seven &&
 	 git push origin new-name
 	) &&
 	compare_refs local HEAD server refs/heads/new-name
 '
 
-test_expect_failure 'push new branch with old:new refspec' '
+test_expect_success 'push new branch with old:new refspec' '
 	(cd local &&
 	 git push origin new-name:new-refspec
 	) &&
 	compare_refs local HEAD server refs/heads/new-refspec
 '
 
+test_expect_success 'push new branch with HEAD:new refspec' '
+	(cd local &&
+	 git checkout new-name
+	 git push origin HEAD:new-refspec-2
+	) &&
+	compare_refs local HEAD server refs/heads/new-refspec-2
+'
+
+test_expect_success 'push delete branch' '
+	(cd local &&
+	 git push origin :new-name
+	) &&
+	test_must_fail git --git-dir="server/.git" \
+	 rev-parse --verify refs/heads/new-name
+'
+
 test_expect_success 'forced push' '
 	(cd local &&
 	git checkout -b force-test &&
 	echo content >> file &&
 	git commit -a -m eight &&
 	git push origin force-test &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t6006-rev-list-format.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t6006-rev-list-format.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t6006-rev-list-format.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t6006-rev-list-format.sh	2014-08-16 06:26:55.000000000 +0800
@@ -32,19 +32,19 @@
 truncate_count=20
 
 test_expect_success 'setup' '
 	: >foo &&
 	git add foo &&
 	git config i18n.commitEncoding $test_encoding &&
-	git commit -m "$added_iso88591" &&
+	echo "$added_iso88591" | git commit -F - &&
 	head1=$(git rev-parse --verify HEAD) &&
 	head1_short=$(git rev-parse --verify --short $head1) &&
 	tree1=$(git rev-parse --verify HEAD:) &&
 	tree1_short=$(git rev-parse --verify --short $tree1) &&
 	echo "$changed" > foo &&
-	git commit -a -m "$changed_iso88591" &&
+	echo "$changed_iso88591" | git commit -a -F - &&
 	head2=$(git rev-parse --verify HEAD) &&
 	head2_short=$(git rev-parse --verify --short $head2) &&
 	tree2=$(git rev-parse --verify HEAD:) &&
 	tree2_short=$(git rev-parse --verify --short $tree2)
 	git config --unset i18n.commitEncoding
 '
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t6023-merge-file.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t6023-merge-file.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t6023-merge-file.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t6023-merge-file.sh	2014-08-16 06:26:55.000000000 +0800
@@ -74,18 +74,35 @@
 
 cp new1.txt test.txt
 test_expect_success "merge without conflict (--quiet)" \
 	"git merge-file --quiet test.txt orig.txt new2.txt"
 
 cp new1.txt test2.txt
-test_expect_success "merge without conflict (missing LF at EOF)" \
-	"git merge-file test2.txt orig.txt new2.txt"
+test_expect_failure "merge without conflict (missing LF at EOF)" \
+	"git merge-file test2.txt orig.txt new4.txt"
 
-test_expect_success "merge result added missing LF" \
+test_expect_failure "merge result added missing LF" \
 	"test_cmp test.txt test2.txt"
 
+cp new4.txt test3.txt
+test_expect_success "merge without conflict (missing LF at EOF, away from change in the other file)" \
+	"git merge-file --quiet test3.txt new2.txt new3.txt"
+
+cat > expect.txt << EOF
+DOMINUS regit me,
+et nihil mihi deerit.
+In loco pascuae ibi me collocavit,
+super aquam refectionis educavit me;
+animam meam convertit,
+deduxit me super semitas jusitiae,
+EOF
+printf "propter nomen suum." >> expect.txt
+
+test_expect_success "merge does not add LF away of change" \
+	"test_cmp test3.txt expect.txt"
+
 cp test.txt backup.txt
 test_expect_success "merge with conflicts" \
 	"test_must_fail git merge-file test.txt orig.txt new3.txt"
 
 cat > expect.txt << EOF
 <<<<<<< test.txt
@@ -104,12 +121,61 @@
 virga tua et baculus tuus ipsa me consolata sunt.
 EOF
 
 test_expect_success "expected conflict markers" "test_cmp test.txt expect.txt"
 
 cp backup.txt test.txt
+
+cat > expect.txt << EOF
+Dominus regit me, et nihil mihi deerit.
+In loco pascuae ibi me collocavit,
+super aquam refectionis educavit me;
+animam meam convertit,
+deduxit me super semitas jusitiae,
+propter nomen suum.
+Nam et si ambulavero in medio umbrae mortis,
+non timebo mala, quoniam tu mecum es:
+virga tua et baculus tuus ipsa me consolata sunt.
+EOF
+test_expect_success "merge conflicting with --ours" \
+	"git merge-file --ours test.txt orig.txt new3.txt && test_cmp test.txt expect.txt"
+cp backup.txt test.txt
+
+cat > expect.txt << EOF
+DOMINUS regit me,
+et nihil mihi deerit.
+In loco pascuae ibi me collocavit,
+super aquam refectionis educavit me;
+animam meam convertit,
+deduxit me super semitas jusitiae,
+propter nomen suum.
+Nam et si ambulavero in medio umbrae mortis,
+non timebo mala, quoniam tu mecum es:
+virga tua et baculus tuus ipsa me consolata sunt.
+EOF
+test_expect_success "merge conflicting with --theirs" \
+	"git merge-file --theirs test.txt orig.txt new3.txt && test_cmp test.txt expect.txt"
+cp backup.txt test.txt
+
+cat > expect.txt << EOF
+Dominus regit me, et nihil mihi deerit.
+DOMINUS regit me,
+et nihil mihi deerit.
+In loco pascuae ibi me collocavit,
+super aquam refectionis educavit me;
+animam meam convertit,
+deduxit me super semitas jusitiae,
+propter nomen suum.
+Nam et si ambulavero in medio umbrae mortis,
+non timebo mala, quoniam tu mecum es:
+virga tua et baculus tuus ipsa me consolata sunt.
+EOF
+test_expect_success "merge conflicting with --union" \
+	"git merge-file --union test.txt orig.txt new3.txt && test_cmp test.txt expect.txt"
+cp backup.txt test.txt
+
 test_expect_success "merge with conflicts, using -L" \
 	"test_must_fail git merge-file -L 1 -L 2 test.txt orig.txt new3.txt"
 
 cat > expect.txt << EOF
 <<<<<<< 1
 Dominus regit me, et nihil mihi deerit.
@@ -257,7 +323,26 @@
 test_expect_success 'marker size' '
 	test_must_fail git merge-file -p --marker-size=10 \
 		new8.txt new5.txt new9.txt >actual &&
 	test_cmp expect actual
 '
 
+printf "line1\nline2\nline3" >nolf-orig.txt
+printf "line1\nline2\nline3x" >nolf-diff1.txt
+printf "line1\nline2\nline3y" >nolf-diff2.txt
+
+test_expect_success 'conflict at EOF without LF resolved by --ours' \
+	'git merge-file -p --ours nolf-diff1.txt nolf-orig.txt nolf-diff2.txt >output.txt &&
+	 printf "line1\nline2\nline3x" >expect.txt &&
+	 test_cmp expect.txt output.txt'
+
+test_expect_success 'conflict at EOF without LF resolved by --theirs' \
+	'git merge-file -p --theirs nolf-diff1.txt nolf-orig.txt nolf-diff2.txt >output.txt &&
+	 printf "line1\nline2\nline3y" >expect.txt &&
+	 test_cmp expect.txt output.txt'
+
+test_expect_success 'conflict at EOF without LF resolved by --union' \
+	'git merge-file -p --union nolf-diff1.txt nolf-orig.txt nolf-diff2.txt >output.txt &&
+	 printf "line1\nline2\nline3x\nline3y" >expect.txt &&
+	 test_cmp expect.txt output.txt'
+
 test_done
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t: t6041-bisect-submodule.sh
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t6050-replace.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t6050-replace.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t6050-replace.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t6050-replace.sh	2014-08-16 06:26:55.000000000 +0800
@@ -4,62 +4,95 @@
 #
 test_description='Tests replace refs functionality'
 
 exec </dev/null
 
 . ./test-lib.sh
+. "$TEST_DIRECTORY/lib-gpg.sh"
 
-add_and_commit_file()
+add_and_commit_file ()
 {
     _file="$1"
     _msg="$2"
 
     git add $_file || return $?
     test_tick || return $?
     git commit --quiet -m "$_file: $_msg"
 }
 
+commit_buffer_contains_parents ()
+{
+    git cat-file commit "$1" >payload &&
+    sed -n -e '/^$/q' -e '/^parent /p' <payload >actual &&
+    shift &&
+    for _parent
+    do
+	echo "parent $_parent"
+    done >expected &&
+    test_cmp expected actual
+}
+
+commit_peeling_shows_parents ()
+{
+    _parent_number=1
+    _commit="$1"
+    shift &&
+    for _parent
+    do
+	_found=$(git rev-parse --verify $_commit^$_parent_number) || return 1
+	test "$_found" = "$_parent" || return 1
+	_parent_number=$(( $_parent_number + 1 ))
+    done &&
+    test_must_fail git rev-parse --verify $_commit^$_parent_number
+}
+
+commit_has_parents ()
+{
+    commit_buffer_contains_parents "$@" &&
+    commit_peeling_shows_parents "$@"
+}
+
 HASH1=
 HASH2=
 HASH3=
 HASH4=
 HASH5=
 HASH6=
 HASH7=
 
 test_expect_success 'set up buggy branch' '
-     echo "line 1" >> hello &&
-     echo "line 2" >> hello &&
-     echo "line 3" >> hello &&
-     echo "line 4" >> hello &&
+     echo "line 1" >>hello &&
+     echo "line 2" >>hello &&
+     echo "line 3" >>hello &&
+     echo "line 4" >>hello &&
      add_and_commit_file hello "4 lines" &&
      HASH1=$(git rev-parse --verify HEAD) &&
-     echo "line BUG" >> hello &&
-     echo "line 6" >> hello &&
-     echo "line 7" >> hello &&
-     echo "line 8" >> hello &&
+     echo "line BUG" >>hello &&
+     echo "line 6" >>hello &&
+     echo "line 7" >>hello &&
+     echo "line 8" >>hello &&
      add_and_commit_file hello "4 more lines with a BUG" &&
      HASH2=$(git rev-parse --verify HEAD) &&
-     echo "line 9" >> hello &&
-     echo "line 10" >> hello &&
+     echo "line 9" >>hello &&
+     echo "line 10" >>hello &&
      add_and_commit_file hello "2 more lines" &&
      HASH3=$(git rev-parse --verify HEAD) &&
-     echo "line 11" >> hello &&
+     echo "line 11" >>hello &&
      add_and_commit_file hello "1 more line" &&
      HASH4=$(git rev-parse --verify HEAD) &&
-     sed -e "s/BUG/5/" hello > hello.new &&
+     sed -e "s/BUG/5/" hello >hello.new &&
      mv hello.new hello &&
      add_and_commit_file hello "BUG fixed" &&
      HASH5=$(git rev-parse --verify HEAD) &&
-     echo "line 12" >> hello &&
-     echo "line 13" >> hello &&
+     echo "line 12" >>hello &&
+     echo "line 13" >>hello &&
      add_and_commit_file hello "2 more lines" &&
      HASH6=$(git rev-parse --verify HEAD) &&
-     echo "line 14" >> hello &&
-     echo "line 15" >> hello &&
-     echo "line 16" >> hello &&
+     echo "line 14" >>hello &&
+     echo "line 15" >>hello &&
+     echo "line 16" >>hello &&
      add_and_commit_file hello "again 3 more lines" &&
      HASH7=$(git rev-parse --verify HEAD)
 '
 
 test_expect_success 'replace the author' '
      git cat-file commit $HASH2 | grep "author A U Thor" &&
@@ -92,13 +125,13 @@
 
 test_expect_success 'tag replaced commit' '
      git mktag <tag.sig >.git/refs/tags/mytag 2>message
 '
 
 test_expect_success '"git fsck" works' '
-     git fsck master > fsck_master.out &&
+     git fsck master >fsck_master.out &&
      grep "dangling commit $R" fsck_master.out &&
      grep "dangling tag $(cat .git/refs/tags/mytag)" fsck_master.out &&
      test -z "$(git fsck)"
 '
 
 test_expect_success 'repack, clone and fetch work' '
@@ -214,20 +247,20 @@
 
 test_expect_success 'fetch branch with replacement' '
      git branch tofetch $HASH6 &&
      (
 	  cd clone_dir &&
 	  git fetch origin refs/heads/tofetch:refs/heads/parallel3 &&
-	  git log --pretty=oneline parallel3 > output.txt &&
+	  git log --pretty=oneline parallel3 >output.txt &&
 	  ! grep $PARA3 output.txt &&
-	  git show $PARA3 > para3.txt &&
+	  git show $PARA3 >para3.txt &&
 	  grep "A U Thor" para3.txt &&
 	  git fetch origin "refs/replace/*:refs/replace/*" &&
-	  git log --pretty=oneline parallel3 > output.txt &&
+	  git log --pretty=oneline parallel3 >output.txt &&
 	  grep $PARA3 output.txt &&
-	  git show $PARA3 > para3.txt &&
+	  git show $PARA3 >para3.txt &&
 	  grep "O Thor" para3.txt
      )
 '
 
 test_expect_success 'bisect and replacements' '
      git bisect start $HASH7 $HASH1 &&
@@ -299,29 +332,112 @@
 		echo "$H1 -> $BLOB" &&
 		echo "$BLOB -> $REPLACED" &&
 		echo "$HT -> $H1" &&
 		echo "$PARA3 -> $S" &&
 		echo "$MYTAG -> $HASH1"
 	} | sort >expected &&
-	git replace -l --format medium | sort > actual &&
+	git replace -l --format medium | sort >actual &&
 	test_cmp expected actual
 '
 
 test_expect_success 'test --format long' '
 	{
 		echo "$H1 (commit) -> $BLOB (blob)" &&
 		echo "$BLOB (blob) -> $REPLACED (blob)" &&
 		echo "$HT (tree) -> $H1 (commit)" &&
 		echo "$PARA3 (commit) -> $S (commit)" &&
 		echo "$MYTAG (tag) -> $HASH1 (commit)"
 	} | sort >expected &&
-	git replace --format=long | sort > actual &&
+	git replace --format=long | sort >actual &&
 	test_cmp expected actual
 '
 
+test_expect_success 'setup a fake editor' '
+	write_script fakeeditor <<-\EOF
+		sed -e "s/A U Thor/A fake Thor/" "$1" >"$1.new"
+		mv "$1.new" "$1"
+	EOF
+'
+
+test_expect_success '--edit with and without already replaced object' '
+	test_must_fail env GIT_EDITOR=./fakeeditor git replace --edit "$PARA3" &&
+	GIT_EDITOR=./fakeeditor git replace --force --edit "$PARA3" &&
+	git replace -l | grep "$PARA3" &&
+	git cat-file commit "$PARA3" | grep "A fake Thor" &&
+	git replace -d "$PARA3" &&
+	GIT_EDITOR=./fakeeditor git replace --edit "$PARA3" &&
+	git replace -l | grep "$PARA3" &&
+	git cat-file commit "$PARA3" | grep "A fake Thor"
+'
+
+test_expect_success '--edit and change nothing or command failed' '
+	git replace -d "$PARA3" &&
+	test_must_fail env GIT_EDITOR=true git replace --edit "$PARA3" &&
+	test_must_fail env GIT_EDITOR="./fakeeditor;false" git replace --edit "$PARA3" &&
+	GIT_EDITOR=./fakeeditor git replace --edit "$PARA3" &&
+	git replace -l | grep "$PARA3" &&
+	git cat-file commit "$PARA3" | grep "A fake Thor"
+'
+
 test_expect_success 'replace ref cleanup' '
 	test -n "$(git replace)" &&
 	git replace -d $(git replace) &&
 	test -z "$(git replace)"
 '
 
+test_expect_success '--graft with and without already replaced object' '
+	test $(git log --oneline | wc -l) = 7 &&
+	git replace --graft $HASH5 &&
+	test $(git log --oneline | wc -l) = 3 &&
+	commit_has_parents $HASH5 &&
+	test_must_fail git replace --graft $HASH5 $HASH4 $HASH3 &&
+	git replace --force -g $HASH5 $HASH4 $HASH3 &&
+	commit_has_parents $HASH5 $HASH4 $HASH3 &&
+	git replace -d $HASH5
+'
+
+test_expect_success GPG 'set up a signed commit' '
+	echo "line 17" >>hello &&
+	echo "line 18" >>hello &&
+	git add hello &&
+	test_tick &&
+	git commit --quiet -S -m "hello: 2 more lines in a signed commit" &&
+	HASH8=$(git rev-parse --verify HEAD) &&
+	git verify-commit $HASH8
+'
+
+test_expect_success GPG '--graft with a signed commit' '
+	git cat-file commit $HASH8 >orig &&
+	git replace --graft $HASH8 &&
+	git cat-file commit $HASH8 >repl &&
+	commit_has_parents $HASH8 &&
+	test_must_fail git verify-commit $HASH8 &&
+	sed -n -e "/^tree /p" -e "/^author /p" -e "/^committer /p" orig >expected &&
+	echo >>expected &&
+	sed -e "/^$/q" repl >actual &&
+	test_cmp expected actual &&
+	git replace -d $HASH8
+'
+
+test_expect_success GPG 'set up a merge commit with a mergetag' '
+	git reset --hard HEAD &&
+	git checkout -b test_branch HEAD~2 &&
+	echo "line 1 from test branch" >>hello &&
+	echo "line 2 from test branch" >>hello &&
+	git add hello &&
+	test_tick &&
+	git commit -m "hello: 2 more lines from a test branch" &&
+	HASH9=$(git rev-parse --verify HEAD) &&
+	git tag -s -m "tag for testing with a mergetag" test_tag HEAD &&
+	git checkout master &&
+	git merge -s ours test_tag &&
+	HASH10=$(git rev-parse --verify HEAD) &&
+	git cat-file commit $HASH10 | grep "^mergetag object"
+'
+
+test_expect_success GPG '--graft on a commit with a mergetag' '
+	test_must_fail git replace --graft $HASH10 $HASH8^1 &&
+	git replace --graft $HASH10 $HASH8^1 $HASH9 &&
+	git replace -d $HASH10
+'
+
 test_done
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t7004-tag.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t7004-tag.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t7004-tag.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t7004-tag.sh	2014-08-16 06:26:55.000000000 +0800
@@ -1382,45 +1382,107 @@
 
 test_expect_success 'lexical sort' '
 	git tag foo1.3 &&
 	git tag foo1.6 &&
 	git tag foo1.10 &&
 	git tag -l --sort=refname "foo*" >actual &&
-	cat >expect <<EOF &&
-foo1.10
-foo1.3
-foo1.6
-EOF
+	cat >expect <<-\EOF &&
+	foo1.10
+	foo1.3
+	foo1.6
+	EOF
 	test_cmp expect actual
 '
 
 test_expect_success 'version sort' '
 	git tag -l --sort=version:refname "foo*" >actual &&
-	cat >expect <<EOF &&
-foo1.3
-foo1.6
-foo1.10
-EOF
+	cat >expect <<-\EOF &&
+	foo1.3
+	foo1.6
+	foo1.10
+	EOF
 	test_cmp expect actual
 '
 
 test_expect_success 'reverse version sort' '
 	git tag -l --sort=-version:refname "foo*" >actual &&
-	cat >expect <<EOF &&
-foo1.10
-foo1.6
-foo1.3
-EOF
+	cat >expect <<-\EOF &&
+	foo1.10
+	foo1.6
+	foo1.3
+	EOF
 	test_cmp expect actual
 '
 
 test_expect_success 'reverse lexical sort' '
 	git tag -l --sort=-refname "foo*" >actual &&
-	cat >expect <<EOF &&
-foo1.6
-foo1.3
-foo1.10
-EOF
+	cat >expect <<-\EOF &&
+	foo1.6
+	foo1.3
+	foo1.10
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'configured lexical sort' '
+	git config tag.sort "v:refname" &&
+	git tag -l "foo*" >actual &&
+	cat >expect <<-\EOF &&
+	foo1.3
+	foo1.6
+	foo1.10
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'option override configured sort' '
+	git tag -l --sort=-refname "foo*" >actual &&
+	cat >expect <<-\EOF &&
+	foo1.6
+	foo1.3
+	foo1.10
+	EOF
+	test_cmp expect actual
+'
+
+test_expect_success 'invalid sort parameter on command line' '
+	test_must_fail git tag -l --sort=notvalid "foo*" >actual
+'
+
+test_expect_success 'invalid sort parameter in configuratoin' '
+	git config tag.sort "v:notvalid" &&
+	git tag -l "foo*" >actual &&
+	cat >expect <<-\EOF &&
+	foo1.10
+	foo1.3
+	foo1.6
+	EOF
+	test_cmp expect actual
+'
+
+run_with_limited_stack () {
+	(ulimit -s 64 && "$@")
+}
+
+test_lazy_prereq ULIMIT 'run_with_limited_stack true'
+
+# we require ulimit, this excludes Windows
+test_expect_success ULIMIT '--contains works in a deep repo' '
+	>expect &&
+	i=1 &&
+	while test $i -lt 4000
+	do
+		echo "commit refs/heads/master
+committer A U Thor <author@example.com> $((1000000000 + $i * 100)) +0200
+data <<EOF
+commit #$i
+EOF"
+		test $i = 1 && echo "from refs/heads/master^0"
+		i=$(($i + 1))
+	done | git fast-import &&
+	git checkout master &&
+	git tag far-far-away HEAD^ &&
+	run_with_limited_stack git tag --contains HEAD >actual &&
 	test_cmp expect actual
 '
 
 test_done
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t7102-reset.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t7102-reset.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t7102-reset.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t7102-reset.sh	2014-08-16 06:26:55.000000000 +0800
@@ -41,13 +41,15 @@
 	git rm first &&
 	git mv second secondfile &&
 	git commit -a -m "remove 1st and rename 2nd" &&
 
 	echo "1st line 2nd file" >secondfile &&
 	echo "2nd line 2nd file" >>secondfile &&
-	git -c "i18n.commitEncoding=$test_encoding" commit -a -m "$(commit_msg $test_encoding)" &&
+	# "git commit -m" would break MinGW, as Windows refuse to pass
+	# $test_encoding encoded parameter to git.
+	commit_msg $test_encoding | git -c "i18n.commitEncoding=$test_encoding" commit -a -F - &&
 	head5=$(git rev-parse --verify HEAD)
 '
 # git log --pretty=oneline # to see those SHA1 involved
 
 check_changes () {
 	test "$(git rev-parse HEAD)" = "$1" &&
@@ -331,13 +333,15 @@
 	git rm first &&
 	git mv second secondfile &&
 	git commit -a -m "remove 1st and rename 2nd" &&
 
 	echo "1st line 2nd file" >secondfile &&
 	echo "2nd line 2nd file" >>secondfile &&
-	git -c "i18n.commitEncoding=$test_encoding" commit -a -m "$(commit_msg $test_encoding)" &&
+	# "git commit -m" would break MinGW, as Windows refuse to pass
+	# $test_encoding encoded parameter to git.
+	commit_msg $test_encoding | git -c "i18n.commitEncoding=$test_encoding" commit -a -F - &&
 	check_changes $head5
 '
 
 >.diff_expect
 >.cached_expect
 cat >.cat_expect <<EOF
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t: t7112-reset-submodule.sh
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t7501-commit.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t7501-commit.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t7501-commit.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t7501-commit.sh	2014-08-16 06:26:55.000000000 +0800
@@ -343,14 +343,27 @@
 	git commit --amend --date="$newtick" &&
 	git cat-file -p HEAD > current &&
 	test_cmp expected current
 
 '
 
-test_expect_success 'commit complains about bogus date' '
-	test_must_fail git commit --amend --date=10.11.2010
+test_expect_success 'commit mentions forced date in output' '
+	git commit --amend --date=2010-01-02T03:04:05 >output &&
+	grep "Date: *Sat Jan 2 03:04:05 2010" output
+'
+
+test_expect_success 'commit complains about completely bogus dates' '
+	test_must_fail git commit --amend --date=seventeen
+'
+
+test_expect_success 'commit --date allows approxidate' '
+	git commit --amend \
+		--date="midnight the 12th of october, anno domini 1979" &&
+	echo "Fri Oct 12 00:00:00 1979 +0000" >expect &&
+	git log -1 --format=%ad >actual &&
+	test_cmp expect actual
 '
 
 test_expect_success 'sign off (1)' '
 
 	echo 1 >positive &&
 	git add positive &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t7502-commit.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t7502-commit.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t7502-commit.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t7502-commit.sh	2014-08-16 06:26:55.000000000 +0800
@@ -341,12 +341,19 @@
 	git commit -e -m "sample" -a &&
 	test_i18ngrep \
 	  "^# Author: *A U Thor <author@example.com>\$" \
 	  .git/COMMIT_EDITMSG
 '
 
+test_expect_success 'message shows date when it is explicitly set' '
+	git commit --allow-empty -e -m foo --date="2010-01-02T03:04:05" &&
+	test_i18ngrep \
+	  "^# Date: *Sat Jan 2 03:04:05 2010 +0000" \
+	  .git/COMMIT_EDITMSG
+'
+
 test_expect_success AUTOIDENT 'message shows committer when it is automatic' '
 
 	echo >>negative &&
 	(
 		sane_unset GIT_COMMITTER_EMAIL &&
 		sane_unset GIT_COMMITTER_NAME &&
@@ -560,7 +567,33 @@
 test_expect_success 'commit --status with custom comment character' '
 	test_config core.commentchar ";" &&
 	try_commit --status &&
 	test_i18ngrep "^; Changes to be committed:" .git/COMMIT_EDITMSG
 '
 
+test_expect_success 'switch core.commentchar' '
+	test_commit "#foo" foo &&
+	GIT_EDITOR=.git/FAKE_EDITOR git -c core.commentChar=auto commit --amend &&
+	test_i18ngrep "^; Changes to be committed:" .git/COMMIT_EDITMSG
+'
+
+test_expect_success 'switch core.commentchar but out of options' '
+	cat >text <<\EOF &&
+# 1
+; 2
+@ 3
+! 4
+$ 5
+% 6
+^ 7
+& 8
+| 9
+: 10
+EOF
+	git commit --amend -F text &&
+	(
+		test_set_editor .git/FAKE_EDITOR &&
+		test_must_fail git -c core.commentChar=auto commit --amend
+	)
+'
+
 test_done
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t7508-status.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t7508-status.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t7508-status.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t7508-status.sh	2014-08-16 06:26:55.000000000 +0800
@@ -1347,14 +1347,13 @@
 	git -c status.displayCommentPrefix=true status >output &&
 	test_i18ncmp expect output
 '
 
 test_expect_success "status (core.commentchar with two chars with submodule summary)" '
 	test_config core.commentchar ";;" &&
-	git -c status.displayCommentPrefix=true status >output &&
-	test_i18ncmp expect output
+	test_must_fail git -c status.displayCommentPrefix=true status
 '
 
 test_expect_success "--ignore-submodules=all suppresses submodule summary" '
 	cat > expect << EOF &&
 On branch master
 Changes not staged for commit:
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t7510-signed-commit.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t7510-signed-commit.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t7510-signed-commit.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t7510-signed-commit.sh	2014-08-16 06:26:55.000000000 +0800
@@ -45,25 +45,27 @@
 	git tag seventh-signed
 
 	echo 8 >file && test_tick && git commit -a -m eighth -SB7227189 &&
 	git tag eighth-signed-alt
 '
 
-test_expect_success GPG 'show signatures' '
+test_expect_success GPG 'verify and show signatures' '
 	(
 		for commit in initial second merge fourth-signed fifth-signed sixth-signed seventh-signed
 		do
+			git verify-commit $commit &&
 			git show --pretty=short --show-signature $commit >actual &&
 			grep "Good signature from" actual &&
 			! grep "BAD signature from" actual &&
 			echo $commit OK || exit 1
 		done
 	) &&
 	(
 		for commit in merge^2 fourth-unsigned sixth-unsigned seventh-unsigned
 		do
+			test_must_fail git verify-commit $commit &&
 			git show --pretty=short --show-signature $commit >actual &&
 			! grep "Good signature from" actual &&
 			! grep "BAD signature from" actual &&
 			echo $commit OK || exit 1
 		done
 	) &&
@@ -76,35 +78,51 @@
 			grep "not certified" actual &&
 			echo $commit OK || exit 1
 		done
 	)
 '
 
+test_expect_success GPG 'show signed commit with signature' '
+	git show -s initial >commit &&
+	git show -s --show-signature initial >show &&
+	git verify-commit -v initial >verify.1 2>verify.2 &&
+	git cat-file commit initial >cat &&
+	grep -v "gpg: " show >show.commit &&
+	grep "gpg: " show >show.gpg &&
+	grep -v "^ " cat | grep -v "^gpgsig " >cat.commit &&
+	test_cmp show.commit commit &&
+	test_cmp show.gpg verify.2 &&
+	test_cmp cat.commit verify.1
+'
+
 test_expect_success GPG 'detect fudged signature' '
 	git cat-file commit seventh-signed >raw &&
 
 	sed -e "s/seventh/7th forged/" raw >forged1 &&
 	git hash-object -w -t commit forged1 >forged1.commit &&
+	! git verify-commit $(cat forged1.commit) &&
 	git show --pretty=short --show-signature $(cat forged1.commit) >actual1 &&
 	grep "BAD signature from" actual1 &&
 	! grep "Good signature from" actual1
 '
 
 test_expect_success GPG 'detect fudged signature with NUL' '
 	git cat-file commit seventh-signed >raw &&
 	cat raw >forged2 &&
 	echo Qwik | tr "Q" "\000" >>forged2 &&
 	git hash-object -w -t commit forged2 >forged2.commit &&
+	! git verify-commit $(cat forged2.commit) &&
 	git show --pretty=short --show-signature $(cat forged2.commit) >actual2 &&
 	grep "BAD signature from" actual2 &&
 	! grep "Good signature from" actual2
 '
 
 test_expect_success GPG 'amending already signed commit' '
 	git checkout fourth-signed^0 &&
 	git commit --amend -S --no-edit &&
+	git verify-commit HEAD &&
 	git show -s --show-signature HEAD >actual &&
 	grep "Good signature from" actual &&
 	! grep "BAD signature from" actual
 '
 
 test_expect_success GPG 'show good signature with custom format' '
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t: t7613-merge-submodule.sh
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t7700-repack.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t7700-repack.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t7700-repack.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t7700-repack.sh	2014-08-16 06:26:55.000000000 +0800
@@ -18,13 +18,13 @@
 	packsha1=$(git rev-list --objects --all | grep file2 |
 		git pack-objects pack) &&
 	>pack-$packsha1.keep &&
 	objsha1=$(git verify-pack -v pack-$packsha1.idx | head -n 1 |
 		sed -e "s/^\([0-9a-f]\{40\}\).*/\1/") &&
 	mv pack-* .git/objects/pack/ &&
-	git repack --no-pack-kept-objects -A -d -l &&
+	git repack -A -d -l &&
 	git prune-packed &&
 	for p in .git/objects/pack/*.idx; do
 		idx=$(basename $p)
 		test "pack-$packsha1.idx" = "$idx" && continue
 		if git verify-pack -v $p | egrep "^$objsha1"; then
 			found_duplicate_object=1
@@ -50,13 +50,13 @@
 	done &&
 	test "$found_duplicate_object" = 1
 '
 
 test_expect_success 'writing bitmaps via config can duplicate .keep objects' '
 	# build on $objsha1, $packsha1, and .keep state from previous
-	git -c pack.writebitmaps=true repack -Adl &&
+	git -c repack.writebitmaps=true repack -Adl &&
 	test_when_finished "found_duplicate_object=" &&
 	for p in .git/objects/pack/*.idx; do
 		idx=$(basename $p)
 		test "pack-$packsha1.idx" = "$idx" && continue
 		if git verify-pack -v $p | egrep "^$objsha1"; then
 			found_duplicate_object=1
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t: t7702-repack-cyclic-alternate.sh
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t7800-difftool.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t7800-difftool.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t7800-difftool.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t7800-difftool.sh	2014-08-16 06:26:55.000000000 +0800
@@ -55,13 +55,13 @@
 	git difftool --tool vimdiff --no-prompt branch >actual &&
 	test_cmp expect actual
 '
 
 test_expect_success PERL 'difftool ignores bad --tool values' '
 	: >expect &&
-	test_expect_code 1 \
+	test_must_fail \
 		git difftool --no-prompt --tool=bad-tool branch >actual &&
 	test_cmp expect actual
 '
 
 test_expect_success PERL 'difftool forwards arguments to diff' '
 	difftool_test_setup &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t8005-blame-i18n.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t8005-blame-i18n.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t8005-blame-i18n.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t8005-blame-i18n.sh	2014-08-16 06:26:55.000000000 +0800
@@ -30,13 +30,13 @@
 author $SJIS_NAME
 summary $SJIS_MSG
 author $SJIS_NAME
 summary $SJIS_MSG
 EOF
 
-test_expect_success \
+test_expect_success NOT_MINGW \
 	'blame respects i18n.commitencoding' '
 	git blame --incremental file | \
 		egrep "^(author|summary) " > actual &&
 	test_cmp actual expected
 '
 
@@ -46,13 +46,13 @@
 author $EUC_JAPAN_NAME
 summary $EUC_JAPAN_MSG
 author $EUC_JAPAN_NAME
 summary $EUC_JAPAN_MSG
 EOF
 
-test_expect_success \
+test_expect_success NOT_MINGW \
 	'blame respects i18n.logoutputencoding' '
 	git config i18n.logoutputencoding eucJP &&
 	git blame --incremental file | \
 		egrep "^(author|summary) " > actual &&
 	test_cmp actual expected
 '
@@ -63,13 +63,13 @@
 author $UTF8_NAME
 summary $UTF8_MSG
 author $UTF8_NAME
 summary $UTF8_MSG
 EOF
 
-test_expect_success \
+test_expect_success NOT_MINGW \
 	'blame respects --encoding=UTF-8' '
 	git blame --incremental --encoding=UTF-8 file | \
 		egrep "^(author|summary) " > actual &&
 	test_cmp actual expected
 '
 
@@ -79,13 +79,13 @@
 author $EUC_JAPAN_NAME
 summary $EUC_JAPAN_MSG
 author $UTF8_NAME
 summary $UTF8_MSG
 EOF
 
-test_expect_success \
+test_expect_success NOT_MINGW \
 	'blame respects --encoding=none' '
 	git blame --incremental --encoding=none file | \
 		egrep "^(author|summary) " > actual &&
 	test_cmp actual expected
 '
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t9001-send-email.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t9001-send-email.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t9001-send-email.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t9001-send-email.sh	2014-08-16 06:26:55.000000000 +0800
@@ -1331,12 +1331,57 @@
 	  outdir/0001-*.patch \
 	  2>errors >out &&
 	! grep "SUBJECT HERE" errors &&
 	test -n "$(ls msgtxt*)"
 '
 
+test_cover_addresses () {
+	header="$1"
+	shift
+	clean_fake_sendmail &&
+	rm -fr outdir &&
+	git format-patch --cover-letter -2 -o outdir &&
+	cover=`echo outdir/0000-*.patch` &&
+	mv $cover cover-to-edit.patch &&
+	perl -pe "s/^From:/$header: extra\@address.com\nFrom:/" cover-to-edit.patch >"$cover" &&
+	git send-email \
+	  --force \
+	  --from="Example <nobody@example.com>" \
+	  --no-to --no-cc \
+	  "$@" \
+	  --smtp-server="$(pwd)/fake.sendmail" \
+	  outdir/0000-*.patch \
+	  outdir/0001-*.patch \
+	  outdir/0002-*.patch \
+	  2>errors >out &&
+	grep "^$header: extra@address.com" msgtxt1 >to1 &&
+	grep "^$header: extra@address.com" msgtxt2 >to2 &&
+	grep "^$header: extra@address.com" msgtxt3 >to3 &&
+	test_line_count = 1 to1 &&
+	test_line_count = 1 to2 &&
+	test_line_count = 1 to3
+}
+
+test_expect_success $PREREQ 'to-cover adds To to all mail' '
+	test_cover_addresses "To" --to-cover
+'
+
+test_expect_success $PREREQ 'cc-cover adds Cc to all mail' '
+	test_cover_addresses "Cc" --cc-cover
+'
+
+test_expect_success $PREREQ 'tocover adds To to all mail' '
+	test_config sendemail.tocover true &&
+	test_cover_addresses "To"
+'
+
+test_expect_success $PREREQ 'cccover adds Cc to all mail' '
+	test_config sendemail.cccover true &&
+	test_cover_addresses "Cc"
+'
+
 test_expect_success $PREREQ 'sendemail.aliasfiletype=mailrc' '
 	clean_fake_sendmail &&
 	echo "alias sbd  somebody@example.org" >.mailrc &&
 	git config --replace-all sendemail.aliasesfile "$(pwd)/.mailrc" &&
 	git config sendemail.aliasfiletype mailrc &&
 	git send-email \
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t9138-git-svn-authors-prog.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t9138-git-svn-authors-prog.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t9138-git-svn-authors-prog.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t9138-git-svn-authors-prog.sh	2014-08-16 06:26:55.000000000 +0800
@@ -4,46 +4,45 @@
 #
 
 test_description='git svn authors prog tests'
 
 . ./lib-git-svn.sh
 
-cat > svn-authors-prog <<'EOF'
-#!/usr/bin/perl
-$_ = shift;
-if (s/-sub$//)  {
-	print "$_ <$_\@sub.example.com>\n";
-}
-else {
-	print "$_ <$_\@example.com>\n";
-}
+write_script svn-authors-prog "$PERL_PATH" <<-\EOF
+	$_ = shift;
+	if (s/-sub$//)  {
+		print "$_ <$_\@sub.example.com>\n";
+	} else {
+		print "$_ <$_\@example.com>\n";
+	}
 EOF
-chmod +x svn-authors-prog
 
-cat > svn-authors <<'EOF'
-ff = FFFFFFF FFFFFFF <fFf@other.example.com>
-EOF
+test_expect_success 'svn-authors setup' '
+	cat >svn-authors <<-\EOF
+	ff = FFFFFFF FFFFFFF <fFf@other.example.com>
+	EOF
+'
 
 test_expect_success 'setup svnrepo' '
 	for i in aa bb cc-sub dd-sub ee-foo ff
 	do
 		svn mkdir -m $i --username $i "$svnrepo"/$i
 	done
-	'
+'
 
 test_expect_success 'import authors with prog and file' '
 	git svn clone --authors-prog=./svn-authors-prog \
 	    --authors-file=svn-authors "$svnrepo" x
-	'
+'
 
 test_expect_success 'imported 6 revisions successfully' '
 	(
 		cd x
 		test "`git rev-list refs/remotes/git-svn | wc -l`" -eq 6
 	)
-	'
+'
 
 test_expect_success 'authors-prog ran correctly' '
 	(
 		cd x
 		git rev-list -1 --pretty=raw refs/remotes/git-svn~1 | \
 		  grep "^author ee-foo <ee-foo@example\.com> " &&
@@ -53,21 +52,21 @@
 		  grep "^author cc <cc@sub\.example\.com> " &&
 		git rev-list -1 --pretty=raw refs/remotes/git-svn~4 | \
 		  grep "^author bb <bb@example\.com> " &&
 		git rev-list -1 --pretty=raw refs/remotes/git-svn~5 | \
 		  grep "^author aa <aa@example\.com> "
 	)
-	'
+'
 
 test_expect_success 'authors-file overrode authors-prog' '
 	(
 		cd x
 		git rev-list -1 --pretty=raw refs/remotes/git-svn | \
 		  grep "^author FFFFFFF FFFFFFF <fFf@other\.example\.com> "
 	)
-	'
+'
 
 git --git-dir=x/.git config --unset svn.authorsfile
 git --git-dir=x/.git config --unset svn.authorsprog
 
 test_expect_success 'authors-prog handled special characters in username' '
 	svn mkdir -m bad --username "xyz; touch evil" "$svnrepo"/bad &&
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t9300-fast-import.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t9300-fast-import.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t9300-fast-import.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t9300-fast-import.sh	2014-08-16 06:26:55.000000000 +0800
@@ -2996,7 +2996,25 @@
 	git fast-import --import-marks=marks <<-EOF >actual &&
 	ls $sha1 ""
 	EOF
 	test_cmp expect actual
 '
 
+test_expect_success 'T: delete branch' '
+	git branch to-delete &&
+	git fast-import <<-EOF &&
+	reset refs/heads/to-delete
+	from 0000000000000000000000000000000000000000
+	EOF
+	test_must_fail git rev-parse --verify refs/heads/to-delete
+'
+
+test_expect_success 'T: empty reset doesnt delete branch' '
+	git branch not-to-delete &&
+	git fast-import <<-EOF &&
+	reset refs/heads/not-to-delete
+	EOF
+	git show-ref &&
+	git rev-parse --verify refs/heads/not-to-delete
+'
+
 test_done
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t9350-fast-export.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t9350-fast-export.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t9350-fast-export.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t9350-fast-export.sh	2014-08-16 06:26:55.000000000 +0800
@@ -501,7 +501,25 @@
 		--export-marks=tmp-marks master > /dev/null &&
 	git fast-export --import-marks=tmp-marks \
 		--export-marks=tmp-marks master > actual &&
 	test_cmp expected actual
 '
 
+test_expect_success 'use refspec' '
+	git fast-export --refspec refs/heads/master:refs/heads/foobar master | \
+		grep "^commit " | sort | uniq > actual &&
+	echo "commit refs/heads/foobar" > expected &&
+	test_cmp expected actual
+'
+
+test_expect_success 'delete refspec' '
+	git branch to-delete &&
+	git fast-export --refspec :refs/heads/to-delete to-delete ^to-delete > actual &&
+	cat > expected <<-EOF &&
+	reset refs/heads/to-delete
+	from 0000000000000000000000000000000000000000
+
+	EOF
+	test_cmp expected actual
+'
+
 test_done
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t9800-git-p4-basic.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t9800-git-p4-basic.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t9800-git-p4-basic.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t9800-git-p4-basic.sh	2014-08-16 06:26:55.000000000 +0800
@@ -142,13 +142,13 @@
 	(
 		PATH="$TRASH_DIRECTORY/badp4dir:$PATH" &&
 		export PATH &&
 		test_expect_code 1 git p4 clone --dest="$git" //depot >errs 2>&1
 	) &&
 	cat errs &&
-	! test_i18ngrep Traceback errs
+	test_i18ngrep ! Traceback errs
 '
 
 # Hide a file from p4d, make sure we catch its complaint.  This won't fail in
 # p4 changes, files, or describe; just in p4 print.  If P4CLIENT is unset, the
 # message will include "Librarian checkout".
 test_expect_success 'exit gracefully for p4 server errors' '
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t9807-git-p4-submit.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t9807-git-p4-submit.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t9807-git-p4-submit.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t9807-git-p4-submit.sh	2014-08-16 06:26:55.000000000 +0800
@@ -400,13 +400,14 @@
 		cd "$git" &&
 		echo prep-only-add >prep-only-add &&
 		git add prep-only-add &&
 		git commit -m "prep only add" &&
 		git p4 submit --prepare-p4-only >out &&
 		test_i18ngrep "prepared for submission" out &&
-		test_i18ngrep "must be deleted" out
+		test_i18ngrep "must be deleted" out &&
+		test_i18ngrep ! "everything below this line is just the diff" out
 	) &&
 	(
 		cd "$cli" &&
 		test_path_is_file prep-only-add &&
 		p4 fstat -T action prep-only-add | grep -w add
 	)
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t9814-git-p4-rename.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t9814-git-p4-rename.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t9814-git-p4-rename.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t9814-git-p4-rename.sh	2014-08-16 06:26:55.000000000 +0800
@@ -174,13 +174,16 @@
 		git add file12 &&
 		git commit -a -m "Copy file2 to file12 with changes" &&
 		git diff-tree -r -C --find-copies-harder HEAD &&
 		level=$(git diff-tree -r -C --find-copies-harder HEAD | sed 1d | cut -f1 | cut -d" " -f5 | sed "s/C0*//") &&
 		test -n "$level" && test "$level" -gt 0 && test "$level" -lt 98 &&
 		src=$(git diff-tree -r -C --find-copies-harder HEAD | sed 1d | cut -f2) &&
-		test "$src" = file10 -o "$src" = file11 &&
+		case "$src" in
+		file10 | file11) : ;; # happy
+		*) false ;; # not
+		&&
 		git config git-p4.detectCopies $(($level + 2)) &&
 		git p4 submit &&
 		p4 filelog //depot/file12 &&
 		p4 filelog //depot/file12 | test_must_fail grep -q "branch from" &&
 
 		cp file2 file13 &&
@@ -188,13 +191,16 @@
 		git add file13 &&
 		git commit -a -m "Copy file2 to file13 with changes" &&
 		git diff-tree -r -C --find-copies-harder HEAD &&
 		level=$(git diff-tree -r -C --find-copies-harder HEAD | sed 1d | cut -f1 | cut -d" " -f5 | sed "s/C0*//") &&
 		test -n "$level" && test "$level" -gt 2 && test "$level" -lt 100 &&
 		src=$(git diff-tree -r -C --find-copies-harder HEAD | sed 1d | cut -f2) &&
-		test "$src" = file10 -o "$src" = file11 -o "$src" = file12 &&
+		case "$src" in
+		file10 | file11 | file12) : ;; # happy
+		*) false ;; # not
+		&&
 		git config git-p4.detectCopies $(($level - 2)) &&
 		git p4 submit &&
 		p4 filelog //depot/file13 &&
 		p4 filelog //depot/file13 | grep -q "branch from //depot/file"
 	)
 '
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t9902-completion.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t9902-completion.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/t9902-completion.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/t9902-completion.sh	2014-08-16 06:26:55.000000000 +0800
@@ -209,26 +209,35 @@
 		GIT_DIR="$TRASH_DIRECTORY/non-existing" &&
 		export GIT_DIR &&
 		test_must_fail __gitdir
 	)
 '
 
+function pwd_P_W () {
+	if test_have_prereq MINGW
+	then
+		pwd -W
+	else
+		pwd -P
+	fi
+}
+
 test_expect_success '__gitdir - gitfile in cwd' '
-	echo "$(pwd -P)/otherrepo/.git" >expected &&
-	echo "gitdir: $TRASH_DIRECTORY/otherrepo/.git" >subdir/.git &&
+	echo "$(pwd_P_W)/otherrepo/.git" >expected &&
+	echo "gitdir: $(pwd_P_W)/otherrepo/.git" >subdir/.git &&
 	test_when_finished "rm -f subdir/.git" &&
 	(
 		cd subdir &&
 		__gitdir >"$actual"
 	) &&
 	test_cmp expected "$actual"
 '
 
 test_expect_success '__gitdir - gitfile in parent' '
-	echo "$(pwd -P)/otherrepo/.git" >expected &&
-	echo "gitdir: $TRASH_DIRECTORY/otherrepo/.git" >subdir/.git &&
+	echo "$(pwd_P_W)/otherrepo/.git" >expected &&
+	echo "gitdir: $(pwd_P_W)/otherrepo/.git" >subdir/.git &&
 	test_when_finished "rm -f subdir/.git" &&
 	(
 		cd subdir/subsubdir &&
 		__gitdir >"$actual"
 	) &&
 	test_cmp expected "$actual"
@@ -547,12 +556,39 @@
 	EOF
 
 	touch momified &&
 	test_completion "git add mom" "momified"
 '
 
+test_expect_success "completion uses <cmd> completion for alias: !sh -c 'git <cmd> ...'" '
+	test_config alias.co "!sh -c '"'"'git checkout ...'"'"'" &&
+	test_completion "git co m" <<-\EOF
+	master Z
+	mybranch Z
+	mytag Z
+	EOF
+'
+
+test_expect_success 'completion uses <cmd> completion for alias: !f () { VAR=val git <cmd> ... }' '
+	test_config alias.co "!f () { VAR=val git checkout ... ; } f" &&
+	test_completion "git co m" <<-\EOF
+	master Z
+	mybranch Z
+	mytag Z
+	EOF
+'
+
+test_expect_success 'completion used <cmd> completion for alias: !f() { : git <cmd> ; ... }' '
+	test_config alias.co "!f() { : git checkout ; if ... } f" &&
+	test_completion "git co m" <<-\EOF
+	master Z
+	mybranch Z
+	mytag Z
+	EOF
+'
+
 test_expect_failure 'complete with tilde expansion' '
 	git init tmp && cd tmp &&
 	test_when_finished "cd .. && rm -rf tmp" &&
 
 	touch ~/tmp/file &&
 
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/test-lib-functions.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/test-lib-functions.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/test-lib-functions.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/test-lib-functions.sh	2014-08-16 06:26:55.000000000 +0800
@@ -486,12 +486,23 @@
 	then
 		echo "Directory $1 doesn't exist. $*"
 		false
 	fi
 }
 
+# Check if the directory exists and is empty as expected, barf otherwise.
+test_dir_is_empty () {
+	test_path_is_dir "$1" &&
+	if test -n "$(ls -a1 "$1" | egrep -v '^\.\.?$')"
+	then
+		echo "Directory '$1' is not empty, it contains:"
+		ls -la "$1"
+		return 1
+	fi
+}
+
 test_path_is_missing () {
 	if [ -e "$1" ]
 	then
 		echo "Path exists:"
 		ls -ld "$1"
 		if [ $# -ge 1 ]; then
@@ -539,13 +550,13 @@
 test_must_fail () {
 	"$@"
 	exit_code=$?
 	if test $exit_code = 0; then
 		echo >&2 "test_must_fail: command succeeded: $*"
 		return 1
-	elif test $exit_code -gt 129 -a $exit_code -le 192; then
+	elif test $exit_code -gt 129 && test $exit_code -le 192; then
 		echo >&2 "test_must_fail: died by signal: $*"
 		return 1
 	elif test $exit_code = 127; then
 		echo >&2 "test_must_fail: command not found: $*"
 		return 1
 	elif test $exit_code = 126; then
@@ -566,13 +577,13 @@
 # Writing "git config --unset all.configuration || :" would be wrong,
 # because we want to notice if it fails due to segv.
 
 test_might_fail () {
 	"$@"
 	exit_code=$?
-	if test $exit_code -gt 129 -a $exit_code -le 192; then
+	if test $exit_code -gt 129 && test $exit_code -le 192; then
 		echo >&2 "test_might_fail: died by signal: $*"
 		return 1
 	elif test $exit_code = 127; then
 		echo >&2 "test_might_fail: command not found: $*"
 		return 1
 	fi
@@ -720,12 +731,17 @@
 		printf '%s' "$1" >"$2" &&
 		ln_s_obj=$(git hash-object -w "$2") &&
 		git update-index --add --cacheinfo 120000 $ln_s_obj "$2"
 	fi
 }
 
+# This function writes out its parameters, one per line
+test_write_lines () {
+	printf "%s\n" "$@"
+}
+
 perl () {
 	command "$PERL_PATH" "$@"
 }
 
 # Is the value one of the various ways to spell a boolean true/false?
 test_normalize_bool () {
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/test-lib.sh /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/test-lib.sh
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/t/test-lib.sh	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/t/test-lib.sh	2014-08-16 06:26:55.000000000 +0800
@@ -88,12 +88,13 @@
 		TEST
 		.*_TEST
 		PROVE
 		VALGRIND
 		UNZIP
 		PERF_
+		CURL_VERBOSE
 	));
 	my @vars = grep(/^GIT_/ && !/^GIT_($ok)/o, @env);
 	print join("\n", @vars);
 ')
 unset XDG_CONFIG_HOME
 unset GITPERLLIB
@@ -105,12 +106,16 @@
 GIT_MERGE_AUTOEDIT=no
 export GIT_MERGE_VERBOSITY GIT_MERGE_AUTOEDIT
 export GIT_AUTHOR_EMAIL GIT_AUTHOR_NAME
 export GIT_COMMITTER_EMAIL GIT_COMMITTER_NAME
 export EDITOR
 
+# Tests using GIT_TRACE typically don't want <timestamp> <file>:<line> output
+GIT_TRACE_BARE=1
+export GIT_TRACE_BARE
+
 if test -n "${TEST_GIT_INDEX_VERSION:+isset}"
 then
 	GIT_INDEX_VERSION="$TEST_GIT_INDEX_VERSION"
 	export GIT_INDEX_VERSION
 fi
 
@@ -161,17 +166,13 @@
 _z40=0000000000000000000000000000000000000000
 
 # Line feed
 LF='
 '
 
-# UTF-8 ZERO WIDTH NON-JOINER, which HFS+ ignores
-# when case-folding filenames
-u200c=$(printf '\342\200\214')
-
-export _x05 _x40 _z40 LF u200c
+export _x05 _x40 _z40 LF
 
 # Each test should start with something like this, after copyright notices:
 #
 # test_description='Description of this test...
 # This test checks if command xyzzy does the right thing...
 # '
@@ -192,12 +193,20 @@
 	-d|--d|--de|--deb|--debu|--debug)
 		debug=t; shift ;;
 	-i|--i|--im|--imm|--imme|--immed|--immedi|--immedia|--immediat|--immediate)
 		immediate=t; shift ;;
 	-l|--l|--lo|--lon|--long|--long-|--long-t|--long-te|--long-tes|--long-test|--long-tests)
 		GIT_TEST_LONG=t; export GIT_TEST_LONG; shift ;;
+	-r)
+		shift; test "$#" -ne 0 || {
+			echo 'error: -r requires an argument' >&2;
+			exit 1;
+		}
+		run_list=$1; shift ;;
+	--run=*)
+		run_list=$(expr "z$1" : 'z[^=]*=\(.*\)'); shift ;;
 	-h|--h|--he|--hel|--help)
 		help=t; shift ;;
 	-v|--v|--ve|--ver|--verb|--verbo|--verbos|--verbose)
 		verbose=t; shift ;;
 	--verbose-only=*)
 		verbose_only=$(expr "z$1" : 'z[^=]*=\(.*\)')
@@ -367,12 +376,105 @@
 			return 0
 		esac
 	done
 	return 1
 }
 
+match_test_selector_list () {
+	title="$1"
+	shift
+	arg="$1"
+	shift
+	test -z "$1" && return 0
+
+	# Both commas and whitespace are accepted as separators.
+	OLDIFS=$IFS
+	IFS=' 	,'
+	set -- $1
+	IFS=$OLDIFS
+
+	# If the first selector is negative we include by default.
+	include=
+	case "$1" in
+		!*) include=t ;;
+	esac
+
+	for selector
+	do
+		orig_selector=$selector
+
+		positive=t
+		case "$selector" in
+			!*)
+				positive=
+				selector=${selector##?}
+				;;
+		esac
+
+		test -z "$selector" && continue
+
+		case "$selector" in
+			*-*)
+				if expr "z${selector%%-*}" : "z[0-9]*[^0-9]" >/dev/null
+				then
+					echo "error: $title: invalid non-numeric in range" \
+						"start: '$orig_selector'" >&2
+					exit 1
+				fi
+				if expr "z${selector#*-}" : "z[0-9]*[^0-9]" >/dev/null
+				then
+					echo "error: $title: invalid non-numeric in range" \
+						"end: '$orig_selector'" >&2
+					exit 1
+				fi
+				;;
+			*)
+				if expr "z$selector" : "z[0-9]*[^0-9]" >/dev/null
+				then
+					echo "error: $title: invalid non-numeric in test" \
+						"selector: '$orig_selector'" >&2
+					exit 1
+				fi
+		esac
+
+		# Short cut for "obvious" cases
+		test -z "$include" && test -z "$positive" && continue
+		test -n "$include" && test -n "$positive" && continue
+
+		case "$selector" in
+			-*)
+				if test $arg -le ${selector#-}
+				then
+					include=$positive
+				fi
+				;;
+			*-)
+				if test $arg -ge ${selector%-}
+				then
+					include=$positive
+				fi
+				;;
+			*-*)
+				if test ${selector%%-*} -le $arg \
+					&& test $arg -le ${selector#*-}
+				then
+					include=$positive
+				fi
+				;;
+			*)
+				if test $arg -eq $selector
+				then
+					include=$positive
+				fi
+				;;
+		esac
+	done
+
+	test -n "$include"
+}
+
 maybe_teardown_verbose () {
 	test -z "$verbose_only" && return
 	exec 4>/dev/null 3>/dev/null
 	verbose=
 }
 
@@ -453,31 +555,41 @@
 	maybe_teardown_valgrind
 	maybe_teardown_verbose
 }
 
 test_skip () {
 	to_skip=
+	skipped_reason=
 	if match_pattern_list $this_test.$test_count $GIT_SKIP_TESTS
 	then
 		to_skip=t
+		skipped_reason="GIT_SKIP_TESTS"
 	fi
 	if test -z "$to_skip" && test -n "$test_prereq" &&
 	   ! test_have_prereq "$test_prereq"
 	then
 		to_skip=t
-	fi
-	case "$to_skip" in
-	t)
+
 		of_prereq=
 		if test "$missing_prereq" != "$test_prereq"
 		then
 			of_prereq=" of $test_prereq"
 		fi
+		skipped_reason="missing $missing_prereq${of_prereq}"
+	fi
+	if test -z "$to_skip" && test -n "$run_list" &&
+		! match_test_selector_list '--run' $test_count "$run_list"
+	then
+		to_skip=t
+		skipped_reason="--run"
+	fi
 
+	case "$to_skip" in
+	t)
 		say_color skip >&3 "skipping test: $@"
-		say_color skip "ok $test_count # skip $1 (missing $missing_prereq${of_prereq})"
+		say_color skip "ok $test_count # skip $1 ($skipped_reason)"
 		: true
 		;;
 	*)
 		false
 		;;
 	esac
@@ -865,12 +977,20 @@
 test_lazy_prereq AUTOIDENT '
 	sane_unset GIT_AUTHOR_NAME &&
 	sane_unset GIT_AUTHOR_EMAIL &&
 	git var GIT_AUTHOR_IDENT
 '
 
+test_lazy_prereq EXPENSIVE '
+	test -n "$GIT_TEST_LONG"
+'
+
+test_lazy_prereq USR_BIN_TIME '
+	test -x /usr/bin/time
+'
+
 # When the tests are run as root, permission tests will report that
 # things are writable when they shouldn't be.
 test -w / || test_set_prereq SANITY
 
 GIT_UNZIP=${GIT_UNZIP:-unzip}
 test_lazy_prereq UNZIP '
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tag.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tag.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tag.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tag.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/boilerplates.made /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/boilerplates.made
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/templates/boilerplates.made	2017-10-10 09:55:07.456882638 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/templates/boilerplates.made	2017-10-10 09:58:36.732184964 +0800
@@ -1 +1 @@
-Tue Oct 10 09:55:07 CST 2017
+Tue Oct 10 09:58:36 CST 2017
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-chmtime and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-chmtime differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-chmtime.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-chmtime.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-chmtime.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-chmtime.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-ctype and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-ctype differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-ctype.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-ctype.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-ctype.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-ctype.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-date and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-date differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-date.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-date.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-date.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-date.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-delta and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-delta differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-delta.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-delta.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-delta.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-delta.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-dump-cache-tree and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-dump-cache-tree differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-dump-cache-tree.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-dump-cache-tree.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-dump-cache-tree.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-dump-cache-tree.c	2014-08-16 06:26:55.000000000 +0800
@@ -53,14 +53,15 @@
 	}
 	return errs;
 }
 
 int main(int ac, char **av)
 {
+	struct index_state istate;
 	struct cache_tree *another = cache_tree();
 	if (read_cache() < 0)
 		die("unable to read index file");
-	cache_tree_update(another,
-			  (const struct cache_entry * const *)active_cache,
-			  active_nr, WRITE_TREE_DRY_RUN);
+	istate = the_index;
+	istate.cache_tree = another;
+	cache_tree_update(&istate, WRITE_TREE_DRY_RUN);
 	return dump_cache_tree(active_cache_tree, another, "");
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-dump-cache-tree.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-dump-cache-tree.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-dump-cache-tree.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-dump-cache-tree.o differ
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0: test-dump-split-index
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0: test-dump-split-index.c
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0: test-dump-split-index.c.bc
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0: test-dump-split-index.o
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-genrandom and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-genrandom differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-genrandom.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-genrandom.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-genrandom.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-genrandom.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-hashmap and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-hashmap differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-hashmap.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-hashmap.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-hashmap.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-hashmap.c	2014-08-16 06:26:55.000000000 +0800
@@ -112,15 +112,14 @@
 			hashmap_entry_init(entries[i], hashes[i]);
 			hashmap_add(&map, entries[i]);
 		}
 
 		for (j = 0; j < rounds; j++) {
 			for (i = 0; i < TEST_SIZE; i++) {
-				struct hashmap_entry key;
-				hashmap_entry_init(&key, hashes[i]);
-				hashmap_get(&map, &key, entries[i]->key);
+				hashmap_get_from_hash(&map, hashes[i],
+						      entries[i]->key);
 			}
 		}
 
 		hashmap_free(&map, 0);
 	}
 }
@@ -196,18 +195,14 @@
 			/* print and free replaced entry, if any */
 			puts(entry ? get_value(entry) : "NULL");
 			free(entry);
 
 		} else if (!strcmp("get", cmd) && l1) {
 
-			/* setup static key */
-			struct hashmap_entry key;
-			hashmap_entry_init(&key, hash);
-
 			/* lookup entry in hashmap */
-			entry = hashmap_get(&map, &key, p1);
+			entry = hashmap_get_from_hash(&map, hash, p1);
 
 			/* print result */
 			if (!entry)
 				puts("NULL");
 			while (entry) {
 				puts(get_value(entry));
@@ -236,12 +231,26 @@
 
 		} else if (!strcmp("size", cmd)) {
 
 			/* print table sizes */
 			printf("%u %u\n", map.tablesize, map.size);
 
+		} else if (!strcmp("intern", cmd) && l1) {
+
+			/* test that strintern works */
+			const char *i1 = strintern(p1);
+			const char *i2 = strintern(p1);
+			if (strcmp(i1, p1))
+				printf("strintern(%s) returns %s\n", p1, i1);
+			else if (i1 == p1)
+				printf("strintern(%s) returns input pointer\n", p1);
+			else if (i1 != i2)
+				printf("strintern(%s) != strintern(%s)", i1, i2);
+			else
+				printf("%s\n", i1);
+
 		} else if (!strcmp("perfhashmap", cmd) && l1 && l2) {
 
 			perf_hashmap(atoi(p1), atoi(p2));
 
 		} else {
 
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-hashmap.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-hashmap.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-hashmap.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-hashmap.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-index-version and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-index-version differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-index-version.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-index-version.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-index-version.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-index-version.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-line-buffer and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-line-buffer differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-line-buffer.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-line-buffer.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-line-buffer.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-line-buffer.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-match-trees and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-match-trees differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-match-trees.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-match-trees.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-match-trees.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-match-trees.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-mergesort and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-mergesort differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-mergesort.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-mergesort.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-mergesort.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-mergesort.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-mktemp and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-mktemp differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-mktemp.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-mktemp.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-mktemp.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-mktemp.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-parse-options and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-parse-options differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-parse-options.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-parse-options.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-parse-options.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-parse-options.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-path-utils and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-path-utils differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-path-utils.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-path-utils.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-path-utils.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-path-utils.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-prio-queue and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-prio-queue differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-prio-queue.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-prio-queue.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-prio-queue.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-prio-queue.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-read-cache and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-read-cache differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-read-cache.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-read-cache.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-read-cache.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-read-cache.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-regex and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-regex differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-regex.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-regex.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-regex.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-regex.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-revision-walking and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-revision-walking differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-revision-walking.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-revision-walking.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-revision-walking.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-revision-walking.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-run-command and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-run-command differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-run-command.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-run-command.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-run-command.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-run-command.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-scrap-cache-tree and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-scrap-cache-tree differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-scrap-cache-tree.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-scrap-cache-tree.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-scrap-cache-tree.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-scrap-cache-tree.c	2014-08-16 06:26:55.000000000 +0800
@@ -3,15 +3,14 @@
 #include "cache-tree.h"
 
 static struct lock_file index_lock;
 
 int main(int ac, char **av)
 {
-	int fd = hold_locked_index(&index_lock, 1);
+	hold_locked_index(&index_lock, 1);
 	if (read_cache() < 0)
 		die("unable to read index file");
 	active_cache_tree = NULL;
-	if (write_cache(fd, active_cache, active_nr)
-	    || commit_lock_file(&index_lock))
+	if (write_locked_index(&the_index, &index_lock, COMMIT_LOCK))
 		die("unable to write index file");
 	return 0;
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-scrap-cache-tree.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-scrap-cache-tree.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-scrap-cache-tree.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-scrap-cache-tree.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-sha1 and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-sha1 differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-sha1.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-sha1.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-sha1.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-sha1.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-sigchain and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-sigchain differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-sigchain.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-sigchain.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-sigchain.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-sigchain.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-string-list and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-string-list differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-string-list.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-string-list.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-string-list.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-string-list.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-subprocess and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-subprocess differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-subprocess.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-subprocess.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-subprocess.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-subprocess.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-svn-fe and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-svn-fe differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-svn-fe.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-svn-fe.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-svn-fe.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-svn-fe.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-urlmatch-normalization and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-urlmatch-normalization differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-urlmatch-normalization.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-urlmatch-normalization.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-urlmatch-normalization.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-urlmatch-normalization.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-wildmatch and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-wildmatch differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-wildmatch.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-wildmatch.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/test-wildmatch.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/test-wildmatch.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/thread-utils.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/thread-utils.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/thread-utils.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/thread-utils.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/trace.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/trace.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/trace.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/trace.c	2014-08-16 06:26:55.000000000 +0800
@@ -23,116 +23,256 @@
  */
 
 #include "cache.h"
 #include "quote.h"
 
 /* Get a trace file descriptor from "key" env variable. */
-static int get_trace_fd(const char *key, int *need_close)
+static int get_trace_fd(struct trace_key *key)
 {
-	char *trace = getenv(key);
+	static struct trace_key trace_default = { "GIT_TRACE" };
+	const char *trace;
+
+	/* use default "GIT_TRACE" if NULL */
+	if (!key)
+		key = &trace_default;
+
+	/* don't open twice */
+	if (key->initialized)
+		return key->fd;
+
+	trace = getenv(key->key);
 
 	if (!trace || !strcmp(trace, "") ||
 	    !strcmp(trace, "0") || !strcasecmp(trace, "false"))
-		return 0;
-	if (!strcmp(trace, "1") || !strcasecmp(trace, "true"))
-		return STDERR_FILENO;
-	if (strlen(trace) == 1 && isdigit(*trace))
-		return atoi(trace);
-	if (is_absolute_path(trace)) {
+		key->fd = 0;
+	else if (!strcmp(trace, "1") || !strcasecmp(trace, "true"))
+		key->fd = STDERR_FILENO;
+	else if (strlen(trace) == 1 && isdigit(*trace))
+		key->fd = atoi(trace);
+	else if (is_absolute_path(trace)) {
 		int fd = open(trace, O_WRONLY | O_APPEND | O_CREAT, 0666);
 		if (fd == -1) {
 			fprintf(stderr,
 				"Could not open '%s' for tracing: %s\n"
 				"Defaulting to tracing on stderr...\n",
 				trace, strerror(errno));
-			return STDERR_FILENO;
+			key->fd = STDERR_FILENO;
+		} else {
+			key->fd = fd;
+			key->need_close = 1;
 		}
-		*need_close = 1;
-		return fd;
+	} else {
+		fprintf(stderr, "What does '%s' for %s mean?\n"
+			"If you want to trace into a file, then please set "
+			"%s to an absolute pathname (starting with /).\n"
+			"Defaulting to tracing on stderr...\n",
+			trace, key->key, key->key);
+		key->fd = STDERR_FILENO;
 	}
 
-	fprintf(stderr, "What does '%s' for %s mean?\n", trace, key);
-	fprintf(stderr, "If you want to trace into a file, "
-		"then please set %s to an absolute pathname "
-		"(starting with /).\n", key);
-	fprintf(stderr, "Defaulting to tracing on stderr...\n");
+	key->initialized = 1;
+	return key->fd;
+}
 
-	return STDERR_FILENO;
+void trace_disable(struct trace_key *key)
+{
+	if (key->need_close)
+		close(key->fd);
+	key->fd = 0;
+	key->initialized = 1;
+	key->need_close = 0;
 }
 
 static const char err_msg[] = "Could not trace into fd given by "
 	"GIT_TRACE environment variable";
 
-static void trace_vprintf(const char *key, const char *fmt, va_list ap)
+static int prepare_trace_line(const char *file, int line,
+			      struct trace_key *key, struct strbuf *buf)
 {
-	struct strbuf buf = STRBUF_INIT;
+	static struct trace_key trace_bare = TRACE_KEY_INIT(BARE);
+	struct timeval tv;
+	struct tm tm;
+	time_t secs;
 
 	if (!trace_want(key))
-		return;
+		return 0;
 
 	set_try_to_free_routine(NULL);	/* is never reset */
-	strbuf_vaddf(&buf, fmt, ap);
-	trace_strbuf(key, &buf);
-	strbuf_release(&buf);
+
+	/* unit tests may want to disable additional trace output */
+	if (trace_want(&trace_bare))
+		return 1;
+
+	/* print current timestamp */
+	gettimeofday(&tv, NULL);
+	secs = tv.tv_sec;
+	localtime_r(&secs, &tm);
+	strbuf_addf(buf, "%02d:%02d:%02d.%06ld ", tm.tm_hour, tm.tm_min,
+		    tm.tm_sec, (long) tv.tv_usec);
+
+#ifdef HAVE_VARIADIC_MACROS
+	/* print file:line */
+	strbuf_addf(buf, "%s:%d ", file, line);
+	/* align trace output (column 40 catches most files names in git) */
+	while (buf->len < 40)
+		strbuf_addch(buf, ' ');
+#endif
+
+	return 1;
+}
+
+static void print_trace_line(struct trace_key *key, struct strbuf *buf)
+{
+	/* append newline if missing */
+	if (buf->len && buf->buf[buf->len - 1] != '\n')
+		strbuf_addch(buf, '\n');
+
+	write_or_whine_pipe(get_trace_fd(key), buf->buf, buf->len, err_msg);
+	strbuf_release(buf);
+}
+
+static void trace_vprintf_fl(const char *file, int line, struct trace_key *key,
+			     const char *format, va_list ap)
+{
+	struct strbuf buf = STRBUF_INIT;
+
+	if (!prepare_trace_line(file, line, key, &buf))
+		return;
+
+	strbuf_vaddf(&buf, format, ap);
+	print_trace_line(key, &buf);
+}
+
+static void trace_argv_vprintf_fl(const char *file, int line,
+				  const char **argv, const char *format,
+				  va_list ap)
+{
+	struct strbuf buf = STRBUF_INIT;
+
+	if (!prepare_trace_line(file, line, NULL, &buf))
+		return;
+
+	strbuf_vaddf(&buf, format, ap);
+
+	sq_quote_argv(&buf, argv, 0);
+	print_trace_line(NULL, &buf);
+}
+
+void trace_strbuf_fl(const char *file, int line, struct trace_key *key,
+		     const struct strbuf *data)
+{
+	struct strbuf buf = STRBUF_INIT;
+
+	if (!prepare_trace_line(file, line, key, &buf))
+		return;
+
+	strbuf_addbuf(&buf, data);
+	print_trace_line(key, &buf);
+}
+
+static struct trace_key trace_perf_key = TRACE_KEY_INIT(PERFORMANCE);
+
+static void trace_performance_vprintf_fl(const char *file, int line,
+					 uint64_t nanos, const char *format,
+					 va_list ap)
+{
+	struct strbuf buf = STRBUF_INIT;
+
+	if (!prepare_trace_line(file, line, &trace_perf_key, &buf))
+		return;
+
+	strbuf_addf(&buf, "performance: %.9f s", (double) nanos / 1000000000);
+
+	if (format && *format) {
+		strbuf_addstr(&buf, ": ");
+		strbuf_vaddf(&buf, format, ap);
+	}
+
+	print_trace_line(&trace_perf_key, &buf);
 }
 
-__attribute__((format (printf, 2, 3)))
-void trace_printf_key(const char *key, const char *fmt, ...)
+#ifndef HAVE_VARIADIC_MACROS
+
+void trace_printf(const char *format, ...)
 {
 	va_list ap;
-	va_start(ap, fmt);
-	trace_vprintf(key, fmt, ap);
+	va_start(ap, format);
+	trace_vprintf_fl(NULL, 0, NULL, format, ap);
 	va_end(ap);
 }
 
-void trace_printf(const char *fmt, ...)
+void trace_printf_key(struct trace_key *key, const char *format, ...)
 {
 	va_list ap;
-	va_start(ap, fmt);
-	trace_vprintf("GIT_TRACE", fmt, ap);
+	va_start(ap, format);
+	trace_vprintf_fl(NULL, 0, key, format, ap);
 	va_end(ap);
 }
 
-void trace_strbuf(const char *key, const struct strbuf *buf)
+void trace_argv_printf(const char **argv, const char *format, ...)
 {
-	int fd, need_close = 0;
-
-	fd = get_trace_fd(key, &need_close);
-	if (!fd)
-		return;
+	va_list ap;
+	va_start(ap, format);
+	trace_argv_vprintf_fl(NULL, 0, argv, format, ap);
+	va_end(ap);
+}
 
-	write_or_whine_pipe(fd, buf->buf, buf->len, err_msg);
+void trace_strbuf(const char *key, const struct strbuf *data)
+{
+	trace_strbuf_fl(NULL, 0, key, data);
+}
 
-	if (need_close)
-		close(fd);
+void trace_performance(uint64_t nanos, const char *format, ...)
+{
+	va_list ap;
+	va_start(ap, format);
+	trace_performance_vprintf_fl(NULL, 0, nanos, format, ap);
+	va_end(ap);
 }
 
-void trace_argv_printf(const char **argv, const char *fmt, ...)
+void trace_performance_since(uint64_t start, const char *format, ...)
 {
-	struct strbuf buf = STRBUF_INIT;
 	va_list ap;
-	int fd, need_close = 0;
+	va_start(ap, format);
+	trace_performance_vprintf_fl(NULL, 0, getnanotime() - start,
+				     format, ap);
+	va_end(ap);
+}
 
-	fd = get_trace_fd("GIT_TRACE", &need_close);
-	if (!fd)
-		return;
+#else
 
-	set_try_to_free_routine(NULL);	/* is never reset */
-	va_start(ap, fmt);
-	strbuf_vaddf(&buf, fmt, ap);
+void trace_printf_key_fl(const char *file, int line, struct trace_key *key,
+			 const char *format, ...)
+{
+	va_list ap;
+	va_start(ap, format);
+	trace_vprintf_fl(file, line, key, format, ap);
 	va_end(ap);
+}
 
-	sq_quote_argv(&buf, argv, 0);
-	strbuf_addch(&buf, '\n');
-	write_or_whine_pipe(fd, buf.buf, buf.len, err_msg);
-	strbuf_release(&buf);
+void trace_argv_printf_fl(const char *file, int line, const char **argv,
+			  const char *format, ...)
+{
+	va_list ap;
+	va_start(ap, format);
+	trace_argv_vprintf_fl(file, line, argv, format, ap);
+	va_end(ap);
+}
 
-	if (need_close)
-		close(fd);
+void trace_performance_fl(const char *file, int line, uint64_t nanos,
+			      const char *format, ...)
+{
+	va_list ap;
+	va_start(ap, format);
+	trace_performance_vprintf_fl(file, line, nanos, format, ap);
+	va_end(ap);
 }
 
+#endif /* HAVE_VARIADIC_MACROS */
+
+
 static const char *quote_crnl(const char *path)
 {
 	static char new_path[PATH_MAX];
 	const char *p2 = path;
 	char *p1 = new_path;
 
@@ -153,37 +293,136 @@
 	return new_path;
 }
 
 /* FIXME: move prefix to startup_info struct and get rid of this arg */
 void trace_repo_setup(const char *prefix)
 {
-	static const char *key = "GIT_TRACE_SETUP";
+	static struct trace_key key = TRACE_KEY_INIT(SETUP);
 	const char *git_work_tree;
 	char cwd[PATH_MAX];
 
-	if (!trace_want(key))
+	if (!trace_want(&key))
 		return;
 
 	if (!getcwd(cwd, PATH_MAX))
 		die("Unable to get current working directory");
 
 	if (!(git_work_tree = get_git_work_tree()))
 		git_work_tree = "(null)";
 
 	if (!prefix)
 		prefix = "(null)";
 
-	trace_printf_key(key, "setup: git_dir: %s\n", quote_crnl(get_git_dir()));
-	trace_printf_key(key, "setup: worktree: %s\n", quote_crnl(git_work_tree));
-	trace_printf_key(key, "setup: cwd: %s\n", quote_crnl(cwd));
-	trace_printf_key(key, "setup: prefix: %s\n", quote_crnl(prefix));
+	trace_printf_key(&key, "setup: git_dir: %s\n", quote_crnl(get_git_dir()));
+	trace_printf_key(&key, "setup: worktree: %s\n", quote_crnl(git_work_tree));
+	trace_printf_key(&key, "setup: cwd: %s\n", quote_crnl(cwd));
+	trace_printf_key(&key, "setup: prefix: %s\n", quote_crnl(prefix));
 }
 
-int trace_want(const char *key)
+int trace_want(struct trace_key *key)
 {
-	const char *trace = getenv(key);
+	return !!get_trace_fd(key);
+}
 
-	if (!trace || !strcmp(trace, "") ||
-	    !strcmp(trace, "0") || !strcasecmp(trace, "false"))
+#ifdef HAVE_CLOCK_GETTIME
+
+static inline uint64_t highres_nanos(void)
+{
+	struct timespec ts;
+	if (clock_gettime(CLOCK_MONOTONIC, &ts))
 		return 0;
-	return 1;
+	return (uint64_t) ts.tv_sec * 1000000000 + ts.tv_nsec;
+}
+
+#elif defined (GIT_WINDOWS_NATIVE)
+
+static inline uint64_t highres_nanos(void)
+{
+	static uint64_t high_ns, scaled_low_ns;
+	static int scale;
+	LARGE_INTEGER cnt;
+
+	if (!scale) {
+		if (!QueryPerformanceFrequency(&cnt))
+			return 0;
+
+		/* high_ns = number of ns per cnt.HighPart */
+		high_ns = (1000000000LL << 32) / (uint64_t) cnt.QuadPart;
+
+		/*
+		 * Number of ns per cnt.LowPart is 10^9 / frequency (or
+		 * high_ns >> 32). For maximum precision, we scale this factor
+		 * so that it just fits within 32 bit (i.e. won't overflow if
+		 * multiplied with cnt.LowPart).
+		 */
+		scaled_low_ns = high_ns;
+		scale = 32;
+		while (scaled_low_ns >= 0x100000000LL) {
+			scaled_low_ns >>= 1;
+			scale--;
+		}
+	}
+
+	/* if QPF worked on initialization, we expect QPC to work as well */
+	QueryPerformanceCounter(&cnt);
+
+	return (high_ns * cnt.HighPart) +
+	       ((scaled_low_ns * cnt.LowPart) >> scale);
+}
+
+#else
+# define highres_nanos() 0
+#endif
+
+static inline uint64_t gettimeofday_nanos(void)
+{
+	struct timeval tv;
+	gettimeofday(&tv, NULL);
+	return (uint64_t) tv.tv_sec * 1000000000 + tv.tv_usec * 1000;
+}
+
+/*
+ * Returns nanoseconds since the epoch (01/01/1970), for performance tracing
+ * (i.e. favoring high precision over wall clock time accuracy).
+ */
+inline uint64_t getnanotime(void)
+{
+	static uint64_t offset;
+	if (offset > 1) {
+		/* initialization succeeded, return offset + high res time */
+		return offset + highres_nanos();
+	} else if (offset == 1) {
+		/* initialization failed, fall back to gettimeofday */
+		return gettimeofday_nanos();
+	} else {
+		/* initialize offset if high resolution timer works */
+		uint64_t now = gettimeofday_nanos();
+		uint64_t highres = highres_nanos();
+		if (highres)
+			offset = now - highres;
+		else
+			offset = 1;
+		return now;
+	}
+}
+
+static uint64_t command_start_time;
+static struct strbuf command_line = STRBUF_INIT;
+
+static void print_command_performance_atexit(void)
+{
+	trace_performance_since(command_start_time, "git command:%s",
+				command_line.buf);
+}
+
+void trace_command_performance(const char **argv)
+{
+	if (!trace_want(&trace_perf_key))
+		return;
+
+	if (!command_start_time)
+		atexit(print_command_performance_atexit);
+
+	strbuf_reset(&command_line);
+	sq_quote_argv(&command_line, argv, 0);
+	command_start_time = getnanotime();
 }
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/trace.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/trace.c.bc differ
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0: trace.h
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/trace.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/trace.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/transport.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/transport.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/transport.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/transport.c	2014-08-16 06:26:55.000000000 +0800
@@ -189,13 +189,15 @@
 				transport->remote->name);
 	}
 }
 
 static const char *rsync_url(const char *url)
 {
-	return !starts_with(url, "rsync://") ? skip_prefix(url, "rsync:") : url;
+	if (!starts_with(url, "rsync://"))
+		skip_prefix(url, "rsync:", &url);
+	return url;
 }
 
 static struct ref *get_refs_via_rsync(struct transport *transport, int for_push)
 {
 	struct strbuf buf = STRBUF_INIT, temp_dir = STRBUF_INIT;
 	struct ref dummy = {NULL}, *tail = &dummy;
@@ -258,38 +260,26 @@
 	return dummy.next;
 }
 
 static int fetch_objs_via_rsync(struct transport *transport,
 				int nr_objs, struct ref **to_fetch)
 {
-	struct strbuf buf = STRBUF_INIT;
 	struct child_process rsync;
-	const char *args[8];
-	int result;
-
-	strbuf_addstr(&buf, rsync_url(transport->url));
-	strbuf_addstr(&buf, "/objects/");
 
 	memset(&rsync, 0, sizeof(rsync));
-	rsync.argv = args;
 	rsync.stdout_to_stderr = 1;
-	args[0] = "rsync";
-	args[1] = (transport->verbose > 1) ? "-rv" : "-r";
-	args[2] = "--ignore-existing";
-	args[3] = "--exclude";
-	args[4] = "info";
-	args[5] = buf.buf;
-	args[6] = get_object_directory();
-	args[7] = NULL;
+	argv_array_push(&rsync.args, "rsync");
+	argv_array_push(&rsync.args, (transport->verbose > 1) ? "-rv" : "-r");
+	argv_array_push(&rsync.args, "--ignore-existing");
+	argv_array_push(&rsync.args, "--exclude");
+	argv_array_push(&rsync.args, "info");
+	argv_array_pushf(&rsync.args, "%s/objects/", rsync_url(transport->url));
+	argv_array_push(&rsync.args, get_object_directory());
 
 	/* NEEDSWORK: handle one level of alternates */
-	result = run_command(&rsync);
-
-	strbuf_release(&buf);
-
-	return result;
+	return run_command(&rsync);
 }
 
 static int write_one_ref(const char *name, const unsigned char *sha1,
 		int flags, void *data)
 {
 	struct strbuf *buf = data;
@@ -1183,16 +1173,14 @@
 				    die ("Failed to push all needed submodules!");
 		}
 
 		if ((flags & (TRANSPORT_RECURSE_SUBMODULES_ON_DEMAND |
 			      TRANSPORT_RECURSE_SUBMODULES_CHECK)) && !is_bare_repository()) {
 			struct ref *ref = remote_refs;
-			struct string_list needs_pushing;
+			struct string_list needs_pushing = STRING_LIST_INIT_DUP;
 
-			memset(&needs_pushing, 0, sizeof(struct string_list));
-			needs_pushing.strdup_strings = 1;
 			for (; ref; ref = ref->next)
 				if (!is_null_sha1(ref->new_sha1) &&
 				    find_unpushed_submodules(ref->new_sha1,
 					    transport->remote->name, &needs_pushing))
 					die_with_unpushed_submodules(&needs_pushing);
 		}
@@ -1366,25 +1354,26 @@
 	e->name[-1] = '/';
 	len = strlen(other);
 
 	while (other[len-1] == '/')
 		other[--len] = '\0';
 	if (len < 8 || memcmp(other + len - 8, "/objects", 8))
-		return 0;
+		goto out;
 	/* Is this a git repository with refs? */
 	memcpy(other + len - 8, "/refs", 6);
 	if (!is_directory(other))
-		return 0;
+		goto out;
 	other[len - 8] = '\0';
 	remote = remote_get(other);
 	transport = transport_get(remote, other);
 	for (extra = transport_get_remote_refs(transport);
 	     extra;
 	     extra = extra->next)
 		cb->fn(extra, cb->data);
 	transport_disconnect(transport);
+out:
 	free(other);
 	return 0;
 }
 
 void for_each_alternate_ref(alternate_ref_fn fn, void *data)
 {
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/transport.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/transport.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/transport-helper.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/transport-helper.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/transport-helper.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/transport-helper.c	2014-08-16 06:26:55.000000000 +0800
@@ -98,13 +98,12 @@
 	free(data);
 }
 
 static struct child_process *get_helper(struct transport *transport)
 {
 	struct helper_data *data = transport->data;
-	struct argv_array argv = ARGV_ARRAY_INIT;
 	struct strbuf buf = STRBUF_INIT;
 	struct child_process *helper;
 	const char **refspecs = NULL;
 	int refspec_nr = 0;
 	int refspec_alloc = 0;
 	int duped;
@@ -120,16 +119,15 @@
 		return data->helper;
 
 	helper = xcalloc(1, sizeof(*helper));
 	helper->in = -1;
 	helper->out = -1;
 	helper->err = 0;
-	argv_array_pushf(&argv, "git-remote-%s", data->name);
-	argv_array_push(&argv, transport->remote->name);
-	argv_array_push(&argv, remove_ext_force(transport->url));
-	helper->argv = argv_array_detach(&argv, NULL);
+	argv_array_pushf(&helper->args, "git-remote-%s", data->name);
+	argv_array_push(&helper->args, transport->remote->name);
+	argv_array_push(&helper->args, remove_ext_force(transport->url));
 	helper->git_cmd = 0;
 	helper->silent_exec_failure = 1;
 
 	snprintf(git_dir_buf, sizeof(git_dir_buf), "%s=%s", GIT_DIR_ENVIRONMENT, get_git_dir());
 	helper->env = helper_env;
 
@@ -152,13 +150,13 @@
 		die_errno("Can't dup helper output fd");
 	data->out = xfdopen(duped, "r");
 
 	write_constant(helper->in, "capabilities\n");
 
 	while (1) {
-		const char *capname;
+		const char *capname, *arg;
 		int mandatory = 0;
 		if (recvline(data, &buf))
 			exit(128);
 
 		if (!*buf.buf)
 			break;
@@ -182,25 +180,25 @@
 		else if (!strcmp(capname, "bidi-import"))
 			data->bidi_import = 1;
 		else if (!strcmp(capname, "export"))
 			data->export = 1;
 		else if (!strcmp(capname, "check-connectivity"))
 			data->check_connectivity = 1;
-		else if (!data->refspecs && starts_with(capname, "refspec ")) {
+		else if (!data->refspecs && skip_prefix(capname, "refspec ", &arg)) {
 			ALLOC_GROW(refspecs,
 				   refspec_nr + 1,
 				   refspec_alloc);
-			refspecs[refspec_nr++] = xstrdup(capname + strlen("refspec "));
+			refspecs[refspec_nr++] = xstrdup(arg);
 		} else if (!strcmp(capname, "connect")) {
 			data->connect = 1;
 		} else if (!strcmp(capname, "signed-tags")) {
 			data->signed_tags = 1;
-		} else if (starts_with(capname, "export-marks ")) {
-			data->export_marks = xstrdup(capname + strlen("export-marks "));
-		} else if (starts_with(capname, "import-marks")) {
-			data->import_marks = xstrdup(capname + strlen("import-marks "));
+		} else if (skip_prefix(capname, "export-marks ", &arg)) {
+			data->export_marks = xstrdup(arg);
+		} else if (skip_prefix(capname, "import-marks ", &arg)) {
+			data->import_marks = xstrdup(arg);
 		} else if (starts_with(capname, "no-private-update")) {
 			data->no_private_update = 1;
 		} else if (mandatory) {
 			die("Unknown mandatory capability %s. This remote "
 			    "helper probably needs newer version of Git.",
 			    capname);
@@ -242,13 +240,12 @@
 			sigchain_pop(SIGPIPE);
 		}
 		close(data->helper->in);
 		close(data->helper->out);
 		fclose(data->out);
 		res = finish_command(data->helper);
-		argv_array_free_detached(data->helper->argv);
 		free(data->helper);
 		data->helper = NULL;
 	}
 	return res;
 }
 
@@ -394,60 +391,52 @@
 }
 
 static int get_importer(struct transport *transport, struct child_process *fastimport)
 {
 	struct child_process *helper = get_helper(transport);
 	struct helper_data *data = transport->data;
-	struct argv_array argv = ARGV_ARRAY_INIT;
 	int cat_blob_fd, code;
 	memset(fastimport, 0, sizeof(*fastimport));
 	fastimport->in = helper->out;
-	argv_array_push(&argv, "fast-import");
-	argv_array_push(&argv, debug ? "--stats" : "--quiet");
+	argv_array_push(&fastimport->args, "fast-import");
+	argv_array_push(&fastimport->args, debug ? "--stats" : "--quiet");
 
 	if (data->bidi_import) {
 		cat_blob_fd = xdup(helper->in);
-		argv_array_pushf(&argv, "--cat-blob-fd=%d", cat_blob_fd);
+		argv_array_pushf(&fastimport->args, "--cat-blob-fd=%d", cat_blob_fd);
 	}
-	fastimport->argv = argv.argv;
 	fastimport->git_cmd = 1;
 
 	code = start_command(fastimport);
 	return code;
 }
 
 static int get_exporter(struct transport *transport,
 			struct child_process *fastexport,
 			struct string_list *revlist_args)
 {
 	struct helper_data *data = transport->data;
 	struct child_process *helper = get_helper(transport);
-	int argc = 0, i;
-	struct strbuf tmp = STRBUF_INIT;
+	int i;
 
 	memset(fastexport, 0, sizeof(*fastexport));
 
 	/* we need to duplicate helper->in because we want to use it after
 	 * fastexport is done with it. */
 	fastexport->out = dup(helper->in);
-	fastexport->argv = xcalloc(6 + revlist_args->nr, sizeof(*fastexport->argv));
-	fastexport->argv[argc++] = "fast-export";
-	fastexport->argv[argc++] = "--use-done-feature";
-	fastexport->argv[argc++] = data->signed_tags ?
-		"--signed-tags=verbatim" : "--signed-tags=warn-strip";
-	if (data->export_marks) {
-		strbuf_addf(&tmp, "--export-marks=%s.tmp", data->export_marks);
-		fastexport->argv[argc++] = strbuf_detach(&tmp, NULL);
-	}
-	if (data->import_marks) {
-		strbuf_addf(&tmp, "--import-marks=%s", data->import_marks);
-		fastexport->argv[argc++] = strbuf_detach(&tmp, NULL);
-	}
+	argv_array_push(&fastexport->args, "fast-export");
+	argv_array_push(&fastexport->args, "--use-done-feature");
+	argv_array_push(&fastexport->args, data->signed_tags ?
+		"--signed-tags=verbatim" : "--signed-tags=warn-strip");
+	if (data->export_marks)
+		argv_array_pushf(&fastexport->args, "--export-marks=%s.tmp", data->export_marks);
+	if (data->import_marks)
+		argv_array_pushf(&fastexport->args, "--import-marks=%s", data->import_marks);
 
 	for (i = 0; i < revlist_args->nr; i++)
-		fastexport->argv[argc++] = revlist_args->items[i].string;
+		argv_array_push(&fastexport->args, revlist_args->items[i].string);
 
 	fastexport->git_cmd = 1;
 	return start_command(fastexport);
 }
 
 static int fetch_with_import(struct transport *transport,
@@ -482,13 +471,12 @@
 	 * These helpers read back data from fast-import on their stdin, which could
 	 * be mixed with import commands, otherwise.
 	 */
 
 	if (finish_command(&fastimport))
 		die("Error while running fast-import");
-	argv_array_free_detached(fastimport.argv);
 
 	/*
 	 * The fast-import stream of a remote helper that advertises
 	 * the "refspec" capability writes to the refs named after the
 	 * right hand side of the first refspec matching each ref we
 	 * were fetching.
@@ -859,13 +847,13 @@
 static int push_refs_with_export(struct transport *transport,
 		struct ref *remote_refs, int flags)
 {
 	struct ref *ref;
 	struct child_process *helper, exporter;
 	struct helper_data *data = transport->data;
-	struct string_list revlist_args = STRING_LIST_INIT_NODUP;
+	struct string_list revlist_args = STRING_LIST_INIT_DUP;
 	struct strbuf buf = STRBUF_INIT;
 
 	if (!data->refspecs)
 		die("remote-helper doesn't support push; refspec needed");
 
 	if (flags & TRANSPORT_PUSH_DRY_RUN) {
@@ -879,39 +867,53 @@
 	}
 
 	helper = get_helper(transport);
 
 	write_constant(helper->in, "export\n");
 
-	strbuf_reset(&buf);
-
 	for (ref = remote_refs; ref; ref = ref->next) {
 		char *private;
 		unsigned char sha1[20];
 
-		if (ref->deletion)
-			die("remote-helpers do not support ref deletion");
-
 		private = apply_refspecs(data->refspecs, data->refspec_nr, ref->name);
 		if (private && !get_sha1(private, sha1)) {
 			strbuf_addf(&buf, "^%s", private);
 			string_list_append(&revlist_args, strbuf_detach(&buf, NULL));
 			hashcpy(ref->old_sha1, sha1);
 		}
 		free(private);
 
 		if (ref->peer_ref) {
-			if (strcmp(ref->peer_ref->name, ref->name))
-				die("remote-helpers do not support old:new syntax");
-			string_list_append(&revlist_args, ref->peer_ref->name);
+			if (strcmp(ref->name, ref->peer_ref->name)) {
+				if (!ref->deletion) {
+					const char *name;
+					int flag;
+
+					/* Follow symbolic refs (mainly for HEAD). */
+					name = resolve_ref_unsafe(ref->peer_ref->name, sha1, 1, &flag);
+					if (!name || !(flag & REF_ISSYMREF))
+						name = ref->peer_ref->name;
+
+					strbuf_addf(&buf, "%s:%s", name, ref->name);
+				} else
+					strbuf_addf(&buf, ":%s", ref->name);
+
+				string_list_append(&revlist_args, "--refspec");
+				string_list_append(&revlist_args, buf.buf);
+				strbuf_release(&buf);
+			}
+			if (!ref->deletion)
+				string_list_append(&revlist_args, ref->peer_ref->name);
 		}
 	}
 
 	if (get_exporter(transport, &exporter, &revlist_args))
 		die("Couldn't run fast-export");
 
+	string_list_clear(&revlist_args, 1);
+
 	if (finish_command(&exporter))
 		die("Error while running fast-export");
 	if (push_update_refs_status(data, remote_refs, flags))
 		return 1;
 
 	if (data->export_marks) {
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/transport-helper.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/transport-helper.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/transport-helper.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/transport-helper.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/transport.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/transport.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree-diff.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree-diff.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree-diff.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree-diff.c	2014-08-16 06:26:55.000000000 +0800
@@ -3,183 +3,560 @@
  */
 #include "cache.h"
 #include "diff.h"
 #include "diffcore.h"
 #include "tree.h"
 
-static void show_entry(struct diff_options *opt, const char *prefix,
-		       struct tree_desc *desc, struct strbuf *base);
+/*
+ * internal mode marker, saying a tree entry != entry of tp[imin]
+ * (see ll_diff_tree_paths for what it means there)
+ *
+ * we will update/use/emit entry for diff only with it unset.
+ */
+#define S_IFXMIN_NEQ	S_DIFFTREE_IFXMIN_NEQ
 
-static int compare_tree_entry(struct tree_desc *t1, struct tree_desc *t2,
-			      struct strbuf *base, struct diff_options *opt)
-{
-	unsigned mode1, mode2;
-	const char *path1, *path2;
-	const unsigned char *sha1, *sha2;
-	int cmp, pathlen1, pathlen2;
-	int old_baselen = base->len;
 
-	sha1 = tree_entry_extract(t1, &path1, &mode1);
-	sha2 = tree_entry_extract(t2, &path2, &mode2);
+static struct combine_diff_path *ll_diff_tree_paths(
+	struct combine_diff_path *p, const unsigned char *sha1,
+	const unsigned char **parents_sha1, int nparent,
+	struct strbuf *base, struct diff_options *opt);
+static int ll_diff_tree_sha1(const unsigned char *old, const unsigned char *new,
+			     struct strbuf *base, struct diff_options *opt);
 
-	pathlen1 = tree_entry_len(&t1->entry);
-	pathlen2 = tree_entry_len(&t2->entry);
-	cmp = base_name_compare(path1, pathlen1, mode1, path2, pathlen2, mode2);
-	if (cmp < 0) {
-		show_entry(opt, "-", t1, base);
+/*
+ * Compare two tree entries, taking into account only path/S_ISDIR(mode),
+ * but not their sha1's.
+ *
+ * NOTE files and directories *always* compare differently, even when having
+ *      the same name - thanks to base_name_compare().
+ *
+ * NOTE empty (=invalid) descriptor(s) take part in comparison as +infty,
+ *      so that they sort *after* valid tree entries.
+ *
+ *      Due to this convention, if trees are scanned in sorted order, all
+ *      non-empty descriptors will be processed first.
+ */
+static int tree_entry_pathcmp(struct tree_desc *t1, struct tree_desc *t2)
+{
+	struct name_entry *e1, *e2;
+	int cmp;
+
+	/* empty descriptors sort after valid tree entries */
+	if (!t1->size)
+		return t2->size ? 1 : 0;
+	else if (!t2->size)
 		return -1;
-	}
-	if (cmp > 0) {
-		show_entry(opt, "+", t2, base);
-		return 1;
-	}
-	if (!DIFF_OPT_TST(opt, FIND_COPIES_HARDER) && !hashcmp(sha1, sha2) && mode1 == mode2)
-		return 0;
 
-	/*
-	 * If the filemode has changed to/from a directory from/to a regular
-	 * file, we need to consider it a remove and an add.
-	 */
-	if (S_ISDIR(mode1) != S_ISDIR(mode2)) {
-		show_entry(opt, "-", t1, base);
-		show_entry(opt, "+", t2, base);
-		return 0;
-	}
+	e1 = &t1->entry;
+	e2 = &t2->entry;
+	cmp = base_name_compare(e1->path, tree_entry_len(e1), e1->mode,
+				e2->path, tree_entry_len(e2), e2->mode);
+	return cmp;
+}
+
 
-	strbuf_add(base, path1, pathlen1);
-	if (DIFF_OPT_TST(opt, RECURSIVE) && S_ISDIR(mode1)) {
-		if (DIFF_OPT_TST(opt, TREE_IN_RECURSIVE)) {
-			opt->change(opt, mode1, mode2,
-				    sha1, sha2, 1, 1, base->buf, 0, 0);
+/*
+ * convert path -> opt->diff_*() callbacks
+ *
+ * emits diff to first parent only, and tells diff tree-walker that we are done
+ * with p and it can be freed.
+ */
+static int emit_diff_first_parent_only(struct diff_options *opt, struct combine_diff_path *p)
+{
+	struct combine_diff_parent *p0 = &p->parent[0];
+	if (p->mode && p0->mode) {
+		opt->change(opt, p0->mode, p->mode, p0->sha1, p->sha1,
+			1, 1, p->path, 0, 0);
+	}
+	else {
+		const unsigned char *sha1;
+		unsigned int mode;
+		int addremove;
+
+		if (p->mode) {
+			addremove = '+';
+			sha1 = p->sha1;
+			mode = p->mode;
+		} else {
+			addremove = '-';
+			sha1 = p0->sha1;
+			mode = p0->mode;
 		}
-		strbuf_addch(base, '/');
-		diff_tree_sha1(sha1, sha2, base->buf, opt);
-	} else {
-		opt->change(opt, mode1, mode2, sha1, sha2, 1, 1, base->buf, 0, 0);
+
+		opt->add_remove(opt, addremove, mode, sha1, 1, p->path, 0);
 	}
-	strbuf_setlen(base, old_baselen);
-	return 0;
+
+	return 0;	/* we are done with p */
 }
 
-/* A whole sub-tree went away or appeared */
-static void show_tree(struct diff_options *opt, const char *prefix,
-		      struct tree_desc *desc, struct strbuf *base)
-{
-	enum interesting match = entry_not_interesting;
-	for (; desc->size; update_tree_entry(desc)) {
-		if (match != all_entries_interesting) {
-			match = tree_entry_interesting(&desc->entry, base, 0,
-						       &opt->pathspec);
-			if (match == all_entries_not_interesting)
-				break;
-			if (match == entry_not_interesting)
-				continue;
-		}
-		show_entry(opt, prefix, desc, base);
+
+/*
+ * Make a new combine_diff_path from path/mode/sha1
+ * and append it to paths list tail.
+ *
+ * Memory for created elements could be reused:
+ *
+ *	- if last->next == NULL, the memory is allocated;
+ *
+ *	- if last->next != NULL, it is assumed that p=last->next was returned
+ *	  earlier by this function, and p->next was *not* modified.
+ *	  The memory is then reused from p.
+ *
+ * so for clients,
+ *
+ * - if you do need to keep the element
+ *
+ *	p = path_appendnew(p, ...);
+ *	process(p);
+ *	p->next = NULL;
+ *
+ * - if you don't need to keep the element after processing
+ *
+ *	pprev = p;
+ *	p = path_appendnew(p, ...);
+ *	process(p);
+ *	p = pprev;
+ *	; don't forget to free tail->next in the end
+ *
+ * p->parent[] remains uninitialized.
+ */
+static struct combine_diff_path *path_appendnew(struct combine_diff_path *last,
+	int nparent, const struct strbuf *base, const char *path, int pathlen,
+	unsigned mode, const unsigned char *sha1)
+{
+	struct combine_diff_path *p;
+	int len = base->len + pathlen;
+	int alloclen = combine_diff_path_size(nparent, len);
+
+	/* if last->next is !NULL - it is a pre-allocated memory, we can reuse */
+	p = last->next;
+	if (p && (alloclen > (intptr_t)p->next)) {
+		free(p);
+		p = NULL;
 	}
+
+	if (!p) {
+		p = xmalloc(alloclen);
+
+		/*
+		 * until we go to it next round, .next holds how many bytes we
+		 * allocated (for faster realloc - we don't need copying old data).
+		 */
+		p->next = (struct combine_diff_path *)(intptr_t)alloclen;
+	}
+
+	last->next = p;
+
+	p->path = (char *)&(p->parent[nparent]);
+	memcpy(p->path, base->buf, base->len);
+	memcpy(p->path + base->len, path, pathlen);
+	p->path[len] = 0;
+	p->mode = mode;
+	hashcpy(p->sha1, sha1 ? sha1 : null_sha1);
+
+	return p;
 }
 
-/* A file entry went away or appeared */
-static void show_entry(struct diff_options *opt, const char *prefix,
-		       struct tree_desc *desc, struct strbuf *base)
+/*
+ * new path should be added to combine diff
+ *
+ * 3 cases on how/when it should be called and behaves:
+ *
+ *	 t, !tp		-> path added, all parents lack it
+ *	!t,  tp		-> path removed from all parents
+ *	 t,  tp		-> path modified/added
+ *			   (M for tp[i]=tp[imin], A otherwise)
+ */
+static struct combine_diff_path *emit_path(struct combine_diff_path *p,
+	struct strbuf *base, struct diff_options *opt, int nparent,
+	struct tree_desc *t, struct tree_desc *tp,
+	int imin)
 {
 	unsigned mode;
 	const char *path;
-	const unsigned char *sha1 = tree_entry_extract(desc, &path, &mode);
-	int pathlen = tree_entry_len(&desc->entry);
+	const unsigned char *sha1;
+	int pathlen;
 	int old_baselen = base->len;
+	int i, isdir, recurse = 0, emitthis = 1;
+
+	/* at least something has to be valid */
+	assert(t || tp);
 
-	strbuf_add(base, path, pathlen);
-	if (DIFF_OPT_TST(opt, RECURSIVE) && S_ISDIR(mode)) {
-		enum object_type type;
-		struct tree_desc inner;
-		void *tree;
-		unsigned long size;
-
-		tree = read_sha1_file(sha1, &type, &size);
-		if (!tree || type != OBJ_TREE)
-			die("corrupt tree sha %s", sha1_to_hex(sha1));
+	if (t) {
+		/* path present in resulting tree */
+		sha1 = tree_entry_extract(t, &path, &mode);
+		pathlen = tree_entry_len(&t->entry);
+		isdir = S_ISDIR(mode);
+	} else {
+		/*
+		 * a path was removed - take path from imin parent. Also take
+		 * mode from that parent, to decide on recursion(1).
+		 *
+		 * 1) all modes for tp[i]=tp[imin] should be the same wrt
+		 *    S_ISDIR, thanks to base_name_compare().
+		 */
+		tree_entry_extract(&tp[imin], &path, &mode);
+		pathlen = tree_entry_len(&tp[imin].entry);
 
-		if (DIFF_OPT_TST(opt, TREE_IN_RECURSIVE))
-			opt->add_remove(opt, *prefix, mode, sha1, 1, base->buf, 0);
+		isdir = S_ISDIR(mode);
+		sha1 = NULL;
+		mode = 0;
+	}
 
-		strbuf_addch(base, '/');
+	if (DIFF_OPT_TST(opt, RECURSIVE) && isdir) {
+		recurse = 1;
+		emitthis = DIFF_OPT_TST(opt, TREE_IN_RECURSIVE);
+	}
+
+	if (emitthis) {
+		int keep;
+		struct combine_diff_path *pprev = p;
+		p = path_appendnew(p, nparent, base, path, pathlen, mode, sha1);
+
+		for (i = 0; i < nparent; ++i) {
+			/*
+			 * tp[i] is valid, if present and if tp[i]==tp[imin] -
+			 * otherwise, we should ignore it.
+			 */
+			int tpi_valid = tp && !(tp[i].entry.mode & S_IFXMIN_NEQ);
+
+			const unsigned char *sha1_i;
+			unsigned mode_i;
+
+			p->parent[i].status =
+				!t ? DIFF_STATUS_DELETED :
+					tpi_valid ?
+						DIFF_STATUS_MODIFIED :
+						DIFF_STATUS_ADDED;
+
+			if (tpi_valid) {
+				sha1_i = tp[i].entry.sha1;
+				mode_i = tp[i].entry.mode;
+			}
+			else {
+				sha1_i = NULL;
+				mode_i = 0;
+			}
+
+			p->parent[i].mode = mode_i;
+			hashcpy(p->parent[i].sha1, sha1_i ? sha1_i : null_sha1);
+		}
+
+		keep = 1;
+		if (opt->pathchange)
+			keep = opt->pathchange(opt, p);
+
+		/*
+		 * If a path was filtered or consumed - we don't need to add it
+		 * to the list and can reuse its memory, leaving it as
+		 * pre-allocated element on the tail.
+		 *
+		 * On the other hand, if path needs to be kept, we need to
+		 * correct its .next to NULL, as it was pre-initialized to how
+		 * much memory was allocated.
+		 *
+		 * see path_appendnew() for details.
+		 */
+		if (!keep)
+			p = pprev;
+		else
+			p->next = NULL;
+	}
+
+	if (recurse) {
+		const unsigned char **parents_sha1;
+
+		parents_sha1 = xalloca(nparent * sizeof(parents_sha1[0]));
+		for (i = 0; i < nparent; ++i) {
+			/* same rule as in emitthis */
+			int tpi_valid = tp && !(tp[i].entry.mode & S_IFXMIN_NEQ);
+
+			parents_sha1[i] = tpi_valid ? tp[i].entry.sha1
+						    : NULL;
+		}
 
-		init_tree_desc(&inner, tree, size);
-		show_tree(opt, prefix, &inner, base);
-		free(tree);
-	} else
-		opt->add_remove(opt, prefix[0], mode, sha1, 1, base->buf, 0);
+		strbuf_add(base, path, pathlen);
+		strbuf_addch(base, '/');
+		p = ll_diff_tree_paths(p, sha1, parents_sha1, nparent, base, opt);
+		xalloca_free(parents_sha1);
+	}
 
 	strbuf_setlen(base, old_baselen);
+	return p;
 }
 
 static void skip_uninteresting(struct tree_desc *t, struct strbuf *base,
-			       struct diff_options *opt,
-			       enum interesting *match)
+			       struct diff_options *opt)
 {
+	enum interesting match;
+
 	while (t->size) {
-		*match = tree_entry_interesting(&t->entry, base, 0, &opt->pathspec);
-		if (*match) {
-			if (*match == all_entries_not_interesting)
+		match = tree_entry_interesting(&t->entry, base, 0, &opt->pathspec);
+		if (match) {
+			if (match == all_entries_not_interesting)
 				t->size = 0;
 			break;
 		}
 		update_tree_entry(t);
 	}
 }
 
-int diff_tree(struct tree_desc *t1, struct tree_desc *t2,
-	      const char *base_str, struct diff_options *opt)
+
+/*
+ * generate paths for combined diff D(sha1,parents_sha1[])
+ *
+ * Resulting paths are appended to combine_diff_path linked list, and also, are
+ * emitted on the go via opt->pathchange() callback, so it is possible to
+ * process the result as batch or incrementally.
+ *
+ * The paths are generated scanning new tree and all parents trees
+ * simultaneously, similarly to what diff_tree() was doing for 2 trees.
+ * The theory behind such scan is as follows:
+ *
+ *
+ * D(T,P1...Pn) calculation scheme
+ * -------------------------------
+ *
+ * D(T,P1...Pn) = D(T,P1) ^ ... ^ D(T,Pn)	(regarding resulting paths set)
+ *
+ *	D(T,Pj)		- diff between T..Pj
+ *	D(T,P1...Pn)	- combined diff from T to parents P1,...,Pn
+ *
+ *
+ * We start from all trees, which are sorted, and compare their entries in
+ * lock-step:
+ *
+ *	 T     P1       Pn
+ *	 -     -        -
+ *	|t|   |p1|     |pn|
+ *	|-|   |--| ... |--|      imin = argmin(p1...pn)
+ *	| |   |  |     |  |
+ *	|-|   |--|     |--|
+ *	|.|   |. |     |. |
+ *	 .     .        .
+ *	 .     .        .
+ *
+ * at any time there could be 3 cases:
+ *
+ *	1)  t < p[imin];
+ *	2)  t > p[imin];
+ *	3)  t = p[imin].
+ *
+ * Schematic deduction of what every case means, and what to do, follows:
+ *
+ * 1)  t < p[imin]  ->  ∀j t ∉ Pj  ->  "+t" ∈ D(T,Pj)  ->  D += "+t";  t↓
+ *
+ * 2)  t > p[imin]
+ *
+ *     2.1) ∃j: pj > p[imin]  ->  "-p[imin]" ∉ D(T,Pj)  ->  D += ø;  ∀ pi=p[imin]  pi↓
+ *     2.2) ∀i  pi = p[imin]  ->  pi ∉ T  ->  "-pi" ∈ D(T,Pi)  ->  D += "-p[imin]";  ∀i pi↓
+ *
+ * 3)  t = p[imin]
+ *
+ *     3.1) ∃j: pj > p[imin]  ->  "+t" ∈ D(T,Pj)  ->  only pi=p[imin] remains to investigate
+ *     3.2) pi = p[imin]  ->  investigate δ(t,pi)
+ *      |
+ *      |
+ *      v
+ *
+ *     3.1+3.2) looking at δ(t,pi) ∀i: pi=p[imin] - if all != ø  ->
+ *
+ *                       ⎧δ(t,pi)  - if pi=p[imin]
+ *              ->  D += ⎨
+ *                       ⎩"+t"     - if pi>p[imin]
+ *
+ *
+ *     in any case t↓  ∀ pi=p[imin]  pi↓
+ *
+ *
+ * ~~~~~~~~
+ *
+ * NOTE
+ *
+ *	Usual diff D(A,B) is by definition the same as combined diff D(A,[B]),
+ *	so this diff paths generator can, and is used, for plain diffs
+ *	generation too.
+ *
+ *	Please keep attention to the common D(A,[B]) case when working on the
+ *	code, in order not to slow it down.
+ *
+ * NOTE
+ *	nparent must be > 0.
+ */
+
+
+/* ∀ pi=p[imin]  pi↓ */
+static inline void update_tp_entries(struct tree_desc *tp, int nparent)
 {
-	struct strbuf base;
-	int baselen = strlen(base_str);
-	enum interesting t1_match = entry_not_interesting;
-	enum interesting t2_match = entry_not_interesting;
+	int i;
+	for (i = 0; i < nparent; ++i)
+		if (!(tp[i].entry.mode & S_IFXMIN_NEQ))
+			update_tree_entry(&tp[i]);
+}
+
+static struct combine_diff_path *ll_diff_tree_paths(
+	struct combine_diff_path *p, const unsigned char *sha1,
+	const unsigned char **parents_sha1, int nparent,
+	struct strbuf *base, struct diff_options *opt)
+{
+	struct tree_desc t, *tp;
+	void *ttree, **tptree;
+	int i;
+
+	tp     = xalloca(nparent * sizeof(tp[0]));
+	tptree = xalloca(nparent * sizeof(tptree[0]));
+
+	/*
+	 * load parents first, as they are probably already cached.
+	 *
+	 * ( log_tree_diff() parses commit->parent before calling here via
+	 *   diff_tree_sha1(parent, commit) )
+	 */
+	for (i = 0; i < nparent; ++i)
+		tptree[i] = fill_tree_descriptor(&tp[i], parents_sha1[i]);
+	ttree = fill_tree_descriptor(&t, sha1);
 
 	/* Enable recursion indefinitely */
 	opt->pathspec.recursive = DIFF_OPT_TST(opt, RECURSIVE);
 
-	strbuf_init(&base, PATH_MAX);
-	strbuf_add(&base, base_str, baselen);
-
 	for (;;) {
+		int imin, cmp;
+
 		if (diff_can_quit_early(opt))
 			break;
+
 		if (opt->pathspec.nr) {
-			skip_uninteresting(t1, &base, opt, &t1_match);
-			skip_uninteresting(t2, &base, opt, &t2_match);
+			skip_uninteresting(&t, base, opt);
+			for (i = 0; i < nparent; i++)
+				skip_uninteresting(&tp[i], base, opt);
 		}
-		if (!t1->size) {
-			if (!t2->size)
+
+		/* comparing is finished when all trees are done */
+		if (!t.size) {
+			int done = 1;
+			for (i = 0; i < nparent; ++i)
+				if (tp[i].size) {
+					done = 0;
+					break;
+				}
+			if (done)
 				break;
-			show_entry(opt, "+", t2, &base);
-			update_tree_entry(t2);
-			continue;
-		}
-		if (!t2->size) {
-			show_entry(opt, "-", t1, &base);
-			update_tree_entry(t1);
-			continue;
-		}
-		switch (compare_tree_entry(t1, t2, &base, opt)) {
-		case -1:
-			update_tree_entry(t1);
-			continue;
-		case 0:
-			update_tree_entry(t1);
-			/* Fallthrough */
-		case 1:
-			update_tree_entry(t2);
-			continue;
 		}
-		die("git diff-tree: internal error");
+
+		/*
+		 * lookup imin = argmin(p1...pn),
+		 * mark entries whether they =p[imin] along the way
+		 */
+		imin = 0;
+		tp[0].entry.mode &= ~S_IFXMIN_NEQ;
+
+		for (i = 1; i < nparent; ++i) {
+			cmp = tree_entry_pathcmp(&tp[i], &tp[imin]);
+			if (cmp < 0) {
+				imin = i;
+				tp[i].entry.mode &= ~S_IFXMIN_NEQ;
+			}
+			else if (cmp == 0) {
+				tp[i].entry.mode &= ~S_IFXMIN_NEQ;
+			}
+			else {
+				tp[i].entry.mode |= S_IFXMIN_NEQ;
+			}
+		}
+
+		/* fixup markings for entries before imin */
+		for (i = 0; i < imin; ++i)
+			tp[i].entry.mode |= S_IFXMIN_NEQ;	/* pi > p[imin] */
+
+
+
+		/* compare t vs p[imin] */
+		cmp = tree_entry_pathcmp(&t, &tp[imin]);
+
+		/* t = p[imin] */
+		if (cmp == 0) {
+			/* are either pi > p[imin] or diff(t,pi) != ø ? */
+			if (!DIFF_OPT_TST(opt, FIND_COPIES_HARDER)) {
+				for (i = 0; i < nparent; ++i) {
+					/* p[i] > p[imin] */
+					if (tp[i].entry.mode & S_IFXMIN_NEQ)
+						continue;
+
+					/* diff(t,pi) != ø */
+					if (hashcmp(t.entry.sha1, tp[i].entry.sha1) ||
+					    (t.entry.mode != tp[i].entry.mode))
+						continue;
+
+					goto skip_emit_t_tp;
+				}
+			}
+
+			/* D += {δ(t,pi) if pi=p[imin];  "+a" if pi > p[imin]} */
+			p = emit_path(p, base, opt, nparent,
+					&t, tp, imin);
+
+		skip_emit_t_tp:
+			/* t↓,  ∀ pi=p[imin]  pi↓ */
+			update_tree_entry(&t);
+			update_tp_entries(tp, nparent);
+		}
+
+		/* t < p[imin] */
+		else if (cmp < 0) {
+			/* D += "+t" */
+			p = emit_path(p, base, opt, nparent,
+					&t, /*tp=*/NULL, -1);
+
+			/* t↓ */
+			update_tree_entry(&t);
+		}
+
+		/* t > p[imin] */
+		else {
+			/* ∀i pi=p[imin] -> D += "-p[imin]" */
+			if (!DIFF_OPT_TST(opt, FIND_COPIES_HARDER)) {
+				for (i = 0; i < nparent; ++i)
+					if (tp[i].entry.mode & S_IFXMIN_NEQ)
+						goto skip_emit_tp;
+			}
+
+			p = emit_path(p, base, opt, nparent,
+					/*t=*/NULL, tp, imin);
+
+		skip_emit_tp:
+			/* ∀ pi=p[imin]  pi↓ */
+			update_tp_entries(tp, nparent);
+		}
 	}
 
-	strbuf_release(&base);
-	return 0;
+	free(ttree);
+	for (i = nparent-1; i >= 0; i--)
+		free(tptree[i]);
+	xalloca_free(tptree);
+	xalloca_free(tp);
+
+	return p;
+}
+
+struct combine_diff_path *diff_tree_paths(
+	struct combine_diff_path *p, const unsigned char *sha1,
+	const unsigned char **parents_sha1, int nparent,
+	struct strbuf *base, struct diff_options *opt)
+{
+	p = ll_diff_tree_paths(p, sha1, parents_sha1, nparent, base, opt);
+
+	/*
+	 * free pre-allocated last element, if any
+	 * (see path_appendnew() for details about why)
+	 */
+	if (p->next) {
+		free(p->next);
+		p->next = NULL;
+	}
+
+	return p;
 }
 
 /*
  * Does it look like the resulting diff might be due to a rename?
  *  - single entry
  *  - not a valid previous file
@@ -187,13 +564,13 @@
 static inline int diff_might_be_rename(void)
 {
 	return diff_queued_diff.nr == 1 &&
 		!DIFF_FILE_VALID(diff_queued_diff.queue[0]->one);
 }
 
-static void try_to_follow_renames(struct tree_desc *t1, struct tree_desc *t2, const char *base, struct diff_options *opt)
+static void try_to_follow_renames(const unsigned char *old, const unsigned char *new, struct strbuf *base, struct diff_options *opt)
 {
 	struct diff_options diff_opts;
 	struct diff_queue_struct *q = &diff_queued_diff;
 	struct diff_filepair *choice;
 	int i;
 
@@ -225,13 +602,13 @@
 	DIFF_OPT_SET(&diff_opts, FIND_COPIES_HARDER);
 	diff_opts.output_format = DIFF_FORMAT_NO_OUTPUT;
 	diff_opts.single_follow = opt->pathspec.items[0].match;
 	diff_opts.break_opt = opt->break_opt;
 	diff_opts.rename_score = opt->rename_score;
 	diff_setup_done(&diff_opts);
-	diff_tree(t1, t2, base, &diff_opts);
+	ll_diff_tree_sha1(old, new, base, &diff_opts);
 	diffcore_std(&diff_opts);
 	free_pathspec(&diff_opts.pathspec);
 
 	/* Go through the new set of filepairing, and see if we find a more interesting one */
 	opt->found_follow = 0;
 	for (i = 0; i < q->nr; i++) {
@@ -284,31 +661,46 @@
 	 * original one, or the rename/copy we found)
 	 */
 	q->queue[0] = choice;
 	q->nr = 1;
 }
 
-int diff_tree_sha1(const unsigned char *old, const unsigned char *new, const char *base, struct diff_options *opt)
+static int ll_diff_tree_sha1(const unsigned char *old, const unsigned char *new,
+			     struct strbuf *base, struct diff_options *opt)
 {
-	void *tree1, *tree2;
-	struct tree_desc t1, t2;
-	unsigned long size1, size2;
-	int retval;
+	struct combine_diff_path phead, *p;
+	pathchange_fn_t pathchange_old = opt->pathchange;
 
-	tree1 = fill_tree_descriptor(&t1, old);
-	tree2 = fill_tree_descriptor(&t2, new);
-	size1 = t1.size;
-	size2 = t2.size;
-	retval = diff_tree(&t1, &t2, base, opt);
-	if (!*base && DIFF_OPT_TST(opt, FOLLOW_RENAMES) && diff_might_be_rename()) {
-		init_tree_desc(&t1, tree1, size1);
-		init_tree_desc(&t2, tree2, size2);
-		try_to_follow_renames(&t1, &t2, base, opt);
+	phead.next = NULL;
+	opt->pathchange = emit_diff_first_parent_only;
+	diff_tree_paths(&phead, new, &old, 1, base, opt);
+
+	for (p = phead.next; p;) {
+		struct combine_diff_path *pprev = p;
+		p = p->next;
+		free(pprev);
 	}
-	free(tree1);
-	free(tree2);
+
+	opt->pathchange = pathchange_old;
+	return 0;
+}
+
+int diff_tree_sha1(const unsigned char *old, const unsigned char *new, const char *base_str, struct diff_options *opt)
+{
+	struct strbuf base;
+	int retval;
+
+	strbuf_init(&base, PATH_MAX);
+	strbuf_addstr(&base, base_str);
+
+	retval = ll_diff_tree_sha1(old, new, &base, opt);
+	if (!*base_str && DIFF_OPT_TST(opt, FOLLOW_RENAMES) && diff_might_be_rename())
+		try_to_follow_renames(old, new, &base, opt);
+
+	strbuf_release(&base);
+
 	return retval;
 }
 
 int diff_root_tree_sha1(const unsigned char *new, const char *base, struct diff_options *opt)
 {
 	return diff_tree_sha1(NULL, new, base, opt);
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree-diff.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree-diff.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree-diff.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree-diff.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree-walk.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree-walk.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree-walk.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree-walk.c	2014-08-16 06:26:55.000000000 +0800
@@ -141,22 +141,12 @@
 
 struct tree_desc_x {
 	struct tree_desc d;
 	struct tree_desc_skip *skip;
 };
 
-static int name_compare(const char *a, int a_len,
-			const char *b, int b_len)
-{
-	int len = (a_len < b_len) ? a_len : b_len;
-	int cmp = memcmp(a, b, len);
-	if (cmp)
-		return cmp;
-	return (a_len - b_len);
-}
-
 static int check_entry_match(const char *a, int a_len, const char *b, int b_len)
 {
 	/*
 	 * The caller wants to pick *a* from a tree or nothing.
 	 * We are looking at *b* in a tree.
 	 *
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree-walk.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree-walk.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/tree-walk.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/tree-walk.o differ
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0: unicode_width.h
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/unix-socket.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/unix-socket.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/unix-socket.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/unix-socket.c	2014-08-16 06:26:55.000000000 +0800
@@ -96,17 +96,18 @@
 int unix_stream_listen(const char *path)
 {
 	int fd, saved_errno;
 	struct sockaddr_un sa;
 	struct unix_sockaddr_context ctx;
 
+	unlink(path);
+
 	if (unix_sockaddr_init(&sa, path, &ctx) < 0)
 		return -1;
 	fd = unix_stream_socket();
 
-	unlink(path);
 	if (bind(fd, (struct sockaddr *)&sa, sizeof(sa)) < 0)
 		goto fail;
 
 	if (listen(fd, 5) < 0)
 		goto fail;
 
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/unix-socket.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/unix-socket.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/unix-socket.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/unix-socket.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/unpack-trees.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/unpack-trees.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/unpack-trees.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/unpack-trees.c	2014-08-16 06:26:55.000000000 +0800
@@ -5,12 +5,13 @@
 #include "tree-walk.h"
 #include "cache-tree.h"
 #include "unpack-trees.h"
 #include "progress.h"
 #include "refs.h"
 #include "attr.h"
+#include "split-index.h"
 
 /*
  * Error messages expected by scripts out of plumbing commands such as
  * read-tree.  Non-scripted Porcelain is not required to use these messages
  * and in fact are encouraged to reword them to better suit their particular
  * situation better.  See how "git checkout" and "git merge" replaces
@@ -53,38 +54,33 @@
 void setup_unpack_trees_porcelain(struct unpack_trees_options *opts,
 				  const char *cmd)
 {
 	int i;
 	const char **msgs = opts->msgs;
 	const char *msg;
-	char *tmp;
 	const char *cmd2 = strcmp(cmd, "checkout") ? cmd : "switch branches";
+
 	if (advice_commit_before_merge)
 		msg = "Your local changes to the following files would be overwritten by %s:\n%%s"
 			"Please, commit your changes or stash them before you can %s.";
 	else
 		msg = "Your local changes to the following files would be overwritten by %s:\n%%s";
-	tmp = xmalloc(strlen(msg) + strlen(cmd) + strlen(cmd2) - 2);
-	sprintf(tmp, msg, cmd, cmd2);
-	msgs[ERROR_WOULD_OVERWRITE] = tmp;
-	msgs[ERROR_NOT_UPTODATE_FILE] = tmp;
+	msgs[ERROR_WOULD_OVERWRITE] = msgs[ERROR_NOT_UPTODATE_FILE] =
+		xstrfmt(msg, cmd, cmd2);
 
 	msgs[ERROR_NOT_UPTODATE_DIR] =
 		"Updating the following directories would lose untracked files in it:\n%s";
 
 	if (advice_commit_before_merge)
 		msg = "The following untracked working tree files would be %s by %s:\n%%s"
 			"Please move or remove them before you can %s.";
 	else
 		msg = "The following untracked working tree files would be %s by %s:\n%%s";
-	tmp = xmalloc(strlen(msg) + strlen(cmd) + strlen("removed") + strlen(cmd2) - 4);
-	sprintf(tmp, msg, "removed", cmd, cmd2);
-	msgs[ERROR_WOULD_LOSE_UNTRACKED_REMOVED] = tmp;
-	tmp = xmalloc(strlen(msg) + strlen(cmd) + strlen("overwritten") + strlen(cmd2) - 4);
-	sprintf(tmp, msg, "overwritten", cmd, cmd2);
-	msgs[ERROR_WOULD_LOSE_UNTRACKED_OVERWRITTEN] = tmp;
+
+	msgs[ERROR_WOULD_LOSE_UNTRACKED_REMOVED] = xstrfmt(msg, "removed", cmd, cmd2);
+	msgs[ERROR_WOULD_LOSE_UNTRACKED_OVERWRITTEN] = xstrfmt(msg, "overwritten", cmd, cmd2);
 
 	/*
 	 * Special case: ERROR_BIND_OVERLAP refers to a pair of paths, we
 	 * cannot easily display it as a list.
 	 */
 	msgs[ERROR_BIND_OVERLAP] = "Entry '%s' overlaps with '%s'.  Cannot bind.";
@@ -99,23 +95,23 @@
 	opts->show_all_errors = 1;
 	/* rejected paths may not have a static buffer */
 	for (i = 0; i < ARRAY_SIZE(opts->unpack_rejects); i++)
 		opts->unpack_rejects[i].strdup_strings = 1;
 }
 
-static int do_add_entry(struct unpack_trees_options *o, struct cache_entry *ce,
+static void do_add_entry(struct unpack_trees_options *o, struct cache_entry *ce,
 			 unsigned int set, unsigned int clear)
 {
 	clear |= CE_HASHED;
 
 	if (set & CE_REMOVE)
 		set |= CE_WT_REMOVE;
 
 	ce->ce_flags = (ce->ce_flags & ~clear) | set;
-	return add_index_entry(&o->result, ce,
-			       ADD_CACHE_OK_TO_ADD | ADD_CACHE_OK_TO_REPLACE);
+	add_index_entry(&o->result, ce,
+			ADD_CACHE_OK_TO_ADD | ADD_CACHE_OK_TO_REPLACE);
 }
 
 static struct cache_entry *dup_entry(const struct cache_entry *ce)
 {
 	unsigned int size = ce_size(ce);
 	struct cache_entry *new = xmalloc(size);
@@ -243,20 +239,26 @@
 static int verify_uptodate_sparse(const struct cache_entry *ce,
 				  struct unpack_trees_options *o);
 static int verify_absent_sparse(const struct cache_entry *ce,
 				enum unpack_trees_error_types,
 				struct unpack_trees_options *o);
 
-static int apply_sparse_checkout(struct cache_entry *ce, struct unpack_trees_options *o)
+static int apply_sparse_checkout(struct index_state *istate,
+				 struct cache_entry *ce,
+				 struct unpack_trees_options *o)
 {
 	int was_skip_worktree = ce_skip_worktree(ce);
 
 	if (ce->ce_flags & CE_NEW_SKIP_WORKTREE)
 		ce->ce_flags |= CE_SKIP_WORKTREE;
 	else
 		ce->ce_flags &= ~CE_SKIP_WORKTREE;
+	if (was_skip_worktree != ce_skip_worktree(ce)) {
+		ce->ce_flags |= CE_UPDATE_IN_BASE;
+		istate->cache_changed |= CE_ENTRY_CHANGED;
+	}
 
 	/*
 	 * if (!was_skip_worktree && !ce_skip_worktree()) {
 	 *	This is perfectly normal. Move on;
 	 * }
 	 */
@@ -604,15 +606,13 @@
 		}
 		return rc;
 	}
 
 	for (i = 0; i < n; i++)
 		if (src[i] && src[i] != o->df_conflict_entry)
-			if (do_add_entry(o, src[i], 0, 0))
-				return -1;
-
+			do_add_entry(o, src[i], 0, 0);
 	return 0;
 }
 
 static int unpack_failed(struct unpack_trees_options *o, const char *message)
 {
 	discard_index(&o->result);
@@ -621,23 +621,12 @@
 			return error("%s", message);
 		return -1;
 	}
 	return -1;
 }
 
-/* NEEDSWORK: give this a better name and share with tree-walk.c */
-static int name_compare(const char *a, int a_len,
-			const char *b, int b_len)
-{
-	int len = (a_len < b_len) ? a_len : b_len;
-	int cmp = memcmp(a, b, len);
-	if (cmp)
-		return cmp;
-	return (a_len - b_len);
-}
-
 /*
  * The tree traversal is looking at name p.  If we have a matching entry,
  * return it.  If name p is a directory in the index, do not return
  * anything, as we will want to match it when the traversal descends into
  * the directory.
  */
@@ -1024,12 +1013,13 @@
 		die("unpack_trees takes at most %d trees", MAX_UNPACK_TREES);
 	memset(&state, 0, sizeof(state));
 	state.base_dir = "";
 	state.force = 1;
 	state.quiet = 1;
 	state.refresh_cache = 1;
+	state.istate = &o->result;
 
 	memset(&el, 0, sizeof(el));
 	if (!core_apply_sparse_checkout || !o->update)
 		o->skip_sparse_checkout = 1;
 	if (!o->skip_sparse_checkout) {
 		if (add_excludes_from_file_to_list(git_path("info/sparse-checkout"), "", 0, &el, 0) < 0)
@@ -1040,12 +1030,16 @@
 
 	memset(&o->result, 0, sizeof(o->result));
 	o->result.initialized = 1;
 	o->result.timestamp.sec = o->src_index->timestamp.sec;
 	o->result.timestamp.nsec = o->src_index->timestamp.nsec;
 	o->result.version = o->src_index->version;
+	o->result.split_index = o->src_index->split_index;
+	if (o->result.split_index)
+		o->result.split_index->refcount++;
+	hashcpy(o->result.sha1, o->src_index->sha1);
 	o->merge_size = len;
 	mark_all_ce_unused(o->src_index);
 
 	/*
 	 * Sparse checkout loop #1: set NEW_SKIP_WORKTREE on existing entries
 	 */
@@ -1130,13 +1124,13 @@
 			    verify_absent(ce, ERROR_WOULD_LOSE_UNTRACKED_OVERWRITTEN, o)) {
 				if (!o->show_all_errors)
 					goto return_failed;
 				ret = -1;
 			}
 
-			if (apply_sparse_checkout(ce, o)) {
+			if (apply_sparse_checkout(&o->result, ce, o)) {
 				if (!o->show_all_errors)
 					goto return_failed;
 				ret = -1;
 			}
 			if (!ce_skip_worktree(ce))
 				empty_worktree = 0;
@@ -1258,13 +1252,13 @@
 }
 
 static void invalidate_ce_path(const struct cache_entry *ce,
 			       struct unpack_trees_options *o)
 {
 	if (ce)
-		cache_tree_invalidate_path(o->src_index->cache_tree, ce->name);
+		cache_tree_invalidate_path(o->src_index, ce->name);
 }
 
 /*
  * Check that checking out ce->sha1 in subdir ce->name is not
  * going to overwrite any working files.
  *
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/unpack-trees.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/unpack-trees.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/unpack-trees.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/unpack-trees.o differ
Only in /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0: update_unicode.sh
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/upload-pack.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/upload-pack.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/upload-pack.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/upload-pack.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/url.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/url.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/url.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/url.c	2014-08-16 06:26:55.000000000 +0800
@@ -118,13 +118,13 @@
 }
 
 void end_url_with_slash(struct strbuf *buf, const char *url)
 {
 	strbuf_addstr(buf, url);
 	if (buf->len && buf->buf[buf->len - 1] != '/')
-		strbuf_addstr(buf, "/");
+		strbuf_addch(buf, '/');
 }
 
 void str_end_url_with_slash(const char *url, char **dest) {
 	struct strbuf buf = STRBUF_INIT;
 	end_url_with_slash(&buf, url);
 	free(*dest);
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/url.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/url.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/urlmatch.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/urlmatch.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/urlmatch.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/urlmatch.c	2014-08-16 06:26:55.000000000 +0800
@@ -480,14 +480,13 @@
 	const char *key, *dot;
 	struct strbuf synthkey = STRBUF_INIT;
 	size_t matched_len = 0;
 	int user_matched = 0;
 	int retval;
 
-	key = skip_prefix(var, collect->section);
-	if (!key || *(key++) != '.') {
+	if (!skip_prefix(var, collect->section, &key) || *(key++) != '.') {
 		if (collect->cascade_fn)
 			return collect->cascade_fn(var, value, cb);
 		return 0; /* not interested */
 	}
 	dot = strrchr(key, '.');
 	if (dot) {
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/urlmatch.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/urlmatch.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/urlmatch.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/urlmatch.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/url.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/url.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/usage.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/usage.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/usage.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/usage.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/userdiff.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/userdiff.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/userdiff.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/userdiff.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/utf8.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/utf8.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/utf8.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/utf8.c	2014-08-16 06:26:55.000000000 +0800
@@ -77,94 +77,32 @@
  */
 
 static int git_wcwidth(ucs_char_t ch)
 {
 	/*
 	 * Sorted list of non-overlapping intervals of non-spacing characters,
-	 * generated by
-	 *   "uniset +cat=Me +cat=Mn +cat=Cf -00AD +1160-11FF +200B c".
 	 */
-	static const struct interval combining[] = {
-		{ 0x0300, 0x036F }, { 0x0483, 0x0489 }, { 0x0591, 0x05BD },
-		{ 0x05BF, 0x05BF }, { 0x05C1, 0x05C2 }, { 0x05C4, 0x05C5 },
-		{ 0x05C7, 0x05C7 }, { 0x0600, 0x0604 }, { 0x0610, 0x061A },
-		{ 0x064B, 0x065F }, { 0x0670, 0x0670 }, { 0x06D6, 0x06E4 },
-		{ 0x06E7, 0x06E8 }, { 0x06EA, 0x06ED }, { 0x070F, 0x070F },
-		{ 0x0711, 0x0711 }, { 0x0730, 0x074A }, { 0x07A6, 0x07B0 },
-		{ 0x0901, 0x0902 }, { 0x093C, 0x093C }, { 0x0941, 0x0948 },
-		{ 0x094D, 0x094D }, { 0x0951, 0x0954 }, { 0x0962, 0x0963 },
-		{ 0x0981, 0x0981 }, { 0x09BC, 0x09BC }, { 0x09C1, 0x09C4 },
-		{ 0x09CD, 0x09CD }, { 0x09E2, 0x09E3 }, { 0x0A01, 0x0A02 },
-		{ 0x0A3C, 0x0A3C }, { 0x0A41, 0x0A42 }, { 0x0A47, 0x0A48 },
-		{ 0x0A4B, 0x0A4D }, { 0x0A70, 0x0A71 }, { 0x0A81, 0x0A82 },
-		{ 0x0ABC, 0x0ABC }, { 0x0AC1, 0x0AC5 }, { 0x0AC7, 0x0AC8 },
-		{ 0x0ACD, 0x0ACD }, { 0x0AE2, 0x0AE3 }, { 0x0B01, 0x0B01 },
-		{ 0x0B3C, 0x0B3C }, { 0x0B3F, 0x0B3F }, { 0x0B41, 0x0B43 },
-		{ 0x0B4D, 0x0B4D }, { 0x0B56, 0x0B56 }, { 0x0B82, 0x0B82 },
-		{ 0x0BC0, 0x0BC0 }, { 0x0BCD, 0x0BCD }, { 0x0C3E, 0x0C40 },
-		{ 0x0C46, 0x0C48 }, { 0x0C4A, 0x0C4D }, { 0x0C55, 0x0C56 },
-		{ 0x0CBC, 0x0CBC }, { 0x0CBF, 0x0CBF }, { 0x0CC6, 0x0CC6 },
-		{ 0x0CCC, 0x0CCD }, { 0x0D41, 0x0D43 }, { 0x0D4D, 0x0D4D },
-		{ 0x0DCA, 0x0DCA }, { 0x0DD2, 0x0DD4 }, { 0x0DD6, 0x0DD6 },
-		{ 0x0E31, 0x0E31 }, { 0x0E34, 0x0E3A }, { 0x0E47, 0x0E4E },
-		{ 0x0EB1, 0x0EB1 }, { 0x0EB4, 0x0EB9 }, { 0x0EBB, 0x0EBC },
-		{ 0x0EC8, 0x0ECD }, { 0x0F18, 0x0F19 }, { 0x0F35, 0x0F35 },
-		{ 0x0F37, 0x0F37 }, { 0x0F39, 0x0F39 }, { 0x0F71, 0x0F7E },
-		{ 0x0F80, 0x0F84 }, { 0x0F86, 0x0F87 }, { 0x0F90, 0x0F97 },
-		{ 0x0F99, 0x0FBC }, { 0x0FC6, 0x0FC6 }, { 0x102D, 0x1030 },
-		{ 0x1032, 0x1032 }, { 0x1036, 0x1037 }, { 0x1039, 0x1039 },
-		{ 0x1058, 0x1059 }, { 0x1160, 0x11FF }, { 0x1712, 0x1714 },
-		{ 0x1732, 0x1734 }, { 0x1752, 0x1753 }, { 0x1772, 0x1773 },
-		{ 0x17B4, 0x17B5 }, { 0x17B7, 0x17BD }, { 0x17C6, 0x17C6 },
-		{ 0x17C9, 0x17D3 }, { 0x17DD, 0x17DD }, { 0x180B, 0x180D },
-		{ 0x18A9, 0x18A9 }, { 0x1920, 0x1922 }, { 0x1927, 0x1928 },
-		{ 0x1932, 0x1932 }, { 0x1939, 0x193B }, { 0x200B, 0x200F },
-		{ 0x202A, 0x202E }, { 0x2060, 0x2063 }, { 0x206A, 0x206F },
-		{ 0x20D0, 0x20EA }, { 0x302A, 0x302F }, { 0x3099, 0x309A },
-		{ 0xFB1E, 0xFB1E }, { 0xFE00, 0xFE0F }, { 0xFE20, 0xFE23 },
-		{ 0xFEFF, 0xFEFF }, { 0xFFF9, 0xFFFB }, { 0x1D167, 0x1D169 },
-		{ 0x1D173, 0x1D182 }, { 0x1D185, 0x1D18B },
-		{ 0x1D1AA, 0x1D1AD }, { 0xE0001, 0xE0001 },
-		{ 0xE0020, 0xE007F }, { 0xE0100, 0xE01EF }
-	};
+#include "unicode_width.h"
 
 	/* test for 8-bit control characters */
 	if (ch == 0)
 		return 0;
 	if (ch < 32 || (ch >= 0x7f && ch < 0xa0))
 		return -1;
 
 	/* binary search in table of non-spacing characters */
-	if (bisearch(ch, combining, sizeof(combining)
+	if (bisearch(ch, zero_width, sizeof(zero_width)
 				/ sizeof(struct interval) - 1))
 		return 0;
 
-	/*
-	 * If we arrive here, ch is neither a combining nor a C0/C1
-	 * control character.
-	 */
+	/* binary search in table of double width characters */
+	if (bisearch(ch, double_width, sizeof(double_width)
+				/ sizeof(struct interval) - 1))
+		return 2;
 
-	return 1 +
-		(ch >= 0x1100 &&
-                    /* Hangul Jamo init. consonants */
-		 (ch <= 0x115f ||
-		  ch == 0x2329 || ch == 0x232a ||
-                  /* CJK ... Yi */
-		  (ch >= 0x2e80 && ch <= 0xa4cf &&
-		   ch != 0x303f) ||
-		  /* Hangul Syllables */
-		  (ch >= 0xac00 && ch <= 0xd7a3) ||
-		  /* CJK Compatibility Ideographs */
-		  (ch >= 0xf900 && ch <= 0xfaff) ||
-		  /* CJK Compatibility Forms */
-		  (ch >= 0xfe30 && ch <= 0xfe6f) ||
-		  /* Fullwidth Forms */
-		  (ch >= 0xff00 && ch <= 0xff60) ||
-		  (ch >= 0xffe0 && ch <= 0xffe6) ||
-		  (ch >= 0x20000 && ch <= 0x2fffd) ||
-		  (ch >= 0x30000 && ch <= 0x3fffd)));
+	return 1;
 }
 
 /*
  * Pick one ucs character starting from the location *start points at,
  * and return it, while updating the *start pointer to point at the
  * end of that character.  When remainder_p is not NULL, the location
@@ -624,70 +562,6 @@
 	*text += chrlen;
 	if (remainder_p)
 		*remainder_p -= chrlen;
 
 	return chrlen;
 }
-
-/*
- * Pick the next char from the stream, folding as an HFS+ filename comparison
- * would. Note that this is _not_ complete by any means. It's just enough
- * to make is_hfs_dotgit() work, and should not be used otherwise.
- */
-static ucs_char_t next_hfs_char(const char **in)
-{
-	while (1) {
-		ucs_char_t out = pick_one_utf8_char(in, NULL);
-		/*
-		 * check for malformed utf8. Technically this
-		 * gets converted to a percent-sequence, but
-		 * returning 0 is good enough for is_hfs_dotgit
-		 * to realize it cannot be .git
-		 */
-		if (!*in)
-			return 0;
-
-		/* these code points are ignored completely */
-		switch (out) {
-		case 0x200c: /* ZERO WIDTH NON-JOINER */
-		case 0x200d: /* ZERO WIDTH JOINER */
-		case 0x200e: /* LEFT-TO-RIGHT MARK */
-		case 0x200f: /* RIGHT-TO-LEFT MARK */
-		case 0x202a: /* LEFT-TO-RIGHT EMBEDDING */
-		case 0x202b: /* RIGHT-TO-LEFT EMBEDDING */
-		case 0x202c: /* POP DIRECTIONAL FORMATTING */
-		case 0x202d: /* LEFT-TO-RIGHT OVERRIDE */
-		case 0x202e: /* RIGHT-TO-LEFT OVERRIDE */
-		case 0x206a: /* INHIBIT SYMMETRIC SWAPPING */
-		case 0x206b: /* ACTIVATE SYMMETRIC SWAPPING */
-		case 0x206c: /* INHIBIT ARABIC FORM SHAPING */
-		case 0x206d: /* ACTIVATE ARABIC FORM SHAPING */
-		case 0x206e: /* NATIONAL DIGIT SHAPES */
-		case 0x206f: /* NOMINAL DIGIT SHAPES */
-		case 0xfeff: /* ZERO WIDTH NO-BREAK SPACE */
-			continue;
-		}
-
-		/*
-		 * there's a great deal of other case-folding that occurs,
-		 * but this is enough to catch anything that will convert
-		 * to ".git"
-		 */
-		return tolower(out);
-	}
-}
-
-int is_hfs_dotgit(const char *path)
-{
-	ucs_char_t c;
-
-	if (next_hfs_char(&path) != '.' ||
-	    next_hfs_char(&path) != 'g' ||
-	    next_hfs_char(&path) != 'i' ||
-	    next_hfs_char(&path) != 't')
-		return 0;
-	c = next_hfs_char(&path);
-	if (c && !is_dir_sep(c))
-		return 0;
-
-	return 1;
-}
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/utf8.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/utf8.c.bc differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/utf8.h /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/utf8.h
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/utf8.h	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/utf8.h	2014-08-16 06:26:55.000000000 +0800
@@ -39,15 +39,7 @@
 				   out_encoding, in_encoding,
 				   NULL);
 }
 
 int mbs_chrlen(const char **text, size_t *remainder_p, const char *encoding);
 
-/*
- * Returns true if the the path would match ".git" after HFS case-folding.
- * The path should be NUL-terminated, but we will match variants of both ".git\0"
- * and ".git/..." (but _not_ ".../.git"). This makes it suitable for both fsck
- * and verify_path().
- */
-int is_hfs_dotgit(const char *path);
-
 #endif
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/utf8.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/utf8.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/varint.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/varint.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/varint.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/varint.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/fast_export.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/fast_export.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/fast_export.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/fast_export.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/lib.a and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/lib.a differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/line_buffer.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/line_buffer.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/line_buffer.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/line_buffer.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/repo_tree.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/repo_tree.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/repo_tree.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/repo_tree.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/sliding_window.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/sliding_window.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/sliding_window.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/sliding_window.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/svndiff.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/svndiff.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/svndiff.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/svndiff.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/svndump.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/svndump.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/vcs-svn/svndump.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/vcs-svn/svndump.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/version /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/version
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/version	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/version	2014-08-16 06:26:55.000000000 +0800
@@ -1 +1 @@
-2.0.5
+2.1.0
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/version.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/version.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/versioncmp.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/versioncmp.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/versioncmp.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/versioncmp.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/version.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/version.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/walker.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/walker.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/walker.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/walker.c	2014-08-16 06:26:55.000000000 +0800
@@ -250,13 +250,14 @@
 
 int walker_fetch(struct walker *walker, int targets, char **target,
 		 const char **write_ref, const char *write_ref_log_details)
 {
 	struct ref_lock **lock = xcalloc(targets, sizeof(struct ref_lock *));
 	unsigned char *sha1 = xmalloc(targets * 20);
-	char *msg;
+	const char *msg;
+	char *to_free = NULL;
 	int ret;
 	int i;
 
 	save_commit_buffer = 0;
 
 	for (i = 0; i < targets; i++) {
@@ -282,34 +283,33 @@
 			goto unlock_and_fail;
 	}
 
 	if (loop(walker))
 		goto unlock_and_fail;
 
-	if (write_ref_log_details) {
-		msg = xmalloc(strlen(write_ref_log_details) + 12);
-		sprintf(msg, "fetch from %s", write_ref_log_details);
-	} else {
-		msg = NULL;
-	}
+	if (write_ref_log_details)
+		msg = to_free = xstrfmt("fetch from %s", write_ref_log_details);
+	else
+		msg = "fetch (unknown)";
 	for (i = 0; i < targets; i++) {
 		if (!write_ref || !write_ref[i])
 			continue;
-		ret = write_ref_sha1(lock[i], &sha1[20 * i], msg ? msg : "fetch (unknown)");
+		ret = write_ref_sha1(lock[i], &sha1[20 * i], msg);
 		lock[i] = NULL;
 		if (ret)
 			goto unlock_and_fail;
 	}
-	free(msg);
+	free(to_free);
 
 	return 0;
 
 unlock_and_fail:
 	for (i = 0; i < targets; i++)
 		if (lock[i])
 			unlock_ref(lock[i]);
+	free(to_free);
 
 	return -1;
 }
 
 void walker_free(struct walker *walker)
 {
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/walker.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/walker.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/walker.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/walker.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wildmatch.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wildmatch.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wildmatch.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wildmatch.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wrapper.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wrapper.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wrapper.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wrapper.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/write_or_die.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/write_or_die.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/write_or_die.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/write_or_die.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ws.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ws.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/ws.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/ws.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wt-status.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wt-status.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wt-status.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wt-status.c	2014-08-16 06:26:55.000000000 +0800
@@ -185,13 +185,13 @@
 			status_printf_ln(s, c, _("  (use \"git add/rm <file>...\" as appropriate to mark resolution)"));
 	} else if (!del_mod_conflict && !not_deleted) {
 		status_printf_ln(s, c, _("  (use \"git rm <file>...\" to mark resolution)"));
 	} else {
 		status_printf_ln(s, c, _("  (use \"git add/rm <file>...\" as appropriate to mark resolution)"));
 	}
-	status_printf_ln(s, c, "");
+	status_printf_ln(s, c, "%s", "");
 }
 
 static void wt_status_print_cached_header(struct wt_status *s)
 {
 	const char *c = color(WT_STATUS_HEADER, s);
 
@@ -201,13 +201,13 @@
 	if (s->whence != FROM_COMMIT)
 		; /* NEEDSWORK: use "git reset --unresolve"??? */
 	else if (!s->is_initial)
 		status_printf_ln(s, c, _("  (use \"git reset %s <file>...\" to unstage)"), s->reference);
 	else
 		status_printf_ln(s, c, _("  (use \"git rm --cached <file>...\" to unstage)"));
-	status_printf_ln(s, c, "");
+	status_printf_ln(s, c, "%s", "");
 }
 
 static void wt_status_print_dirty_header(struct wt_status *s,
 					 int has_deleted,
 					 int has_dirty_submodules)
 {
@@ -220,30 +220,30 @@
 		status_printf_ln(s, c, _("  (use \"git add <file>...\" to update what will be committed)"));
 	else
 		status_printf_ln(s, c, _("  (use \"git add/rm <file>...\" to update what will be committed)"));
 	status_printf_ln(s, c, _("  (use \"git checkout -- <file>...\" to discard changes in working directory)"));
 	if (has_dirty_submodules)
 		status_printf_ln(s, c, _("  (commit or discard the untracked or modified content in submodules)"));
-	status_printf_ln(s, c, "");
+	status_printf_ln(s, c, "%s", "");
 }
 
 static void wt_status_print_other_header(struct wt_status *s,
 					 const char *what,
 					 const char *how)
 {
 	const char *c = color(WT_STATUS_HEADER, s);
 	status_printf_ln(s, c, "%s:", what);
 	if (!s->hints)
 		return;
 	status_printf_ln(s, c, _("  (use \"git %s <file>...\" to include in what will be committed)"), how);
-	status_printf_ln(s, c, "");
+	status_printf_ln(s, c, "%s", "");
 }
 
 static void wt_status_print_trailer(struct wt_status *s)
 {
-	status_printf_ln(s, color(WT_STATUS_HEADER, s), "");
+	status_printf_ln(s, color(WT_STATUS_HEADER, s), "%s", "");
 }
 
 #define quote_path quote_path_relative
 
 static const char *wt_status_unmerged_status_string(int stagemask)
 {
@@ -571,20 +571,17 @@
 }
 
 static void wt_status_collect_untracked(struct wt_status *s)
 {
 	int i;
 	struct dir_struct dir;
-	struct timeval t_begin;
+	uint64_t t_begin = getnanotime();
 
 	if (!s->show_untracked_files)
 		return;
 
-	if (advice_status_u_option)
-		gettimeofday(&t_begin, NULL);
-
 	memset(&dir, 0, sizeof(dir));
 	if (s->show_untracked_files != SHOW_ALL_UNTRACKED_FILES)
 		dir.flags |=
 			DIR_SHOW_OTHER_DIRECTORIES | DIR_HIDE_EMPTY_DIRECTORIES;
 	if (s->show_ignored_files)
 		dir.flags |= DIR_SHOW_IGNORED_TOO;
@@ -609,19 +606,14 @@
 	}
 
 	free(dir.entries);
 	free(dir.ignored);
 	clear_directory(&dir);
 
-	if (advice_status_u_option) {
-		struct timeval t_end;
-		gettimeofday(&t_end, NULL);
-		s->untracked_in_ms =
-			(uint64_t)t_end.tv_sec * 1000 + t_end.tv_usec / 1000 -
-			((uint64_t)t_begin.tv_sec * 1000 + t_begin.tv_usec / 1000);
-	}
+	if (advice_status_u_option)
+		s->untracked_in_ms = (getnanotime() - t_begin) / 1000000;
 }
 
 void wt_status_collect(struct wt_status *s)
 {
 	wt_status_collect_changes_worktree(s);
 
@@ -731,43 +723,40 @@
 	wt_status_print_trailer(s);
 }
 
 static void wt_status_print_submodule_summary(struct wt_status *s, int uncommitted)
 {
 	struct child_process sm_summary;
-	char summary_limit[64];
-	char index[PATH_MAX];
-	const char *env[] = { NULL, NULL };
+	struct argv_array env = ARGV_ARRAY_INIT;
 	struct argv_array argv = ARGV_ARRAY_INIT;
 	struct strbuf cmd_stdout = STRBUF_INIT;
 	struct strbuf summary = STRBUF_INIT;
 	char *summary_content;
 	size_t len;
 
-	sprintf(summary_limit, "%d", s->submodule_summary);
-	snprintf(index, sizeof(index), "GIT_INDEX_FILE=%s", s->index_file);
+	argv_array_pushf(&env, "GIT_INDEX_FILE=%s", s->index_file);
 
-	env[0] = index;
 	argv_array_push(&argv, "submodule");
 	argv_array_push(&argv, "summary");
 	argv_array_push(&argv, uncommitted ? "--files" : "--cached");
 	argv_array_push(&argv, "--for-status");
 	argv_array_push(&argv, "--summary-limit");
-	argv_array_push(&argv, summary_limit);
+	argv_array_pushf(&argv, "%d", s->submodule_summary);
 	if (!uncommitted)
 		argv_array_push(&argv, s->amend ? "HEAD^" : "HEAD");
 
 	memset(&sm_summary, 0, sizeof(sm_summary));
 	sm_summary.argv = argv.argv;
-	sm_summary.env = env;
+	sm_summary.env = env.argv;
 	sm_summary.git_cmd = 1;
 	sm_summary.no_stdin = 1;
 	fflush(s->fp);
 	sm_summary.out = -1;
 
 	run_command(&sm_summary);
+	argv_array_clear(&env);
 	argv_array_clear(&argv);
 
 	len = strbuf_read(&cmd_stdout, sm_summary.out, 1024);
 
 	/* prepend header, only if there's an actual output */
 	if (len) {
@@ -833,13 +822,13 @@
 	if (want_color(s->use_color))
 		copts.nl = GIT_COLOR_RESET "\n";
 	print_columns(&output, s->colopts, &copts);
 	string_list_clear(&output, 0);
 	strbuf_release(&buf);
 conclude:
-	status_printf_ln(s, GIT_COLOR_NORMAL, "");
+	status_printf_ln(s, GIT_COLOR_NORMAL, "%s", "");
 }
 
 void wt_status_truncate_message_at_cut_line(struct strbuf *buf)
 {
 	const char *p;
 	struct strbuf pattern = STRBUF_INIT;
@@ -920,13 +909,13 @@
 				 "%s%.*s", comment_line_string,
 				 (int)(ep - cp), cp);
 	if (s->display_comment_prefix)
 		color_fprintf_ln(s->fp, color(WT_STATUS_HEADER, s), "%c",
 				 comment_line_char);
 	else
-		fprintf_ln(s->fp, "");
+		fputs("", s->fp);
 }
 
 static int has_unmerged(struct wt_status *s)
 {
 	int i;
 
@@ -1336,28 +1325,28 @@
 					on_what = _("HEAD detached from ");
 			} else {
 				branch_name = "";
 				on_what = _("Not currently on any branch.");
 			}
 		}
-		status_printf(s, color(WT_STATUS_HEADER, s), "");
+		status_printf(s, color(WT_STATUS_HEADER, s), "%s", "");
 		status_printf_more(s, branch_status_color, "%s", on_what);
 		status_printf_more(s, branch_color, "%s\n", branch_name);
 		if (!s->is_initial)
 			wt_status_print_tracking(s);
 	}
 
 	wt_status_print_state(s, &state);
 	free(state.branch);
 	free(state.onto);
 	free(state.detached_from);
 
 	if (s->is_initial) {
-		status_printf_ln(s, color(WT_STATUS_HEADER, s), "");
+		status_printf_ln(s, color(WT_STATUS_HEADER, s), "%s", "");
 		status_printf_ln(s, color(WT_STATUS_HEADER, s), _("Initial commit"));
-		status_printf_ln(s, color(WT_STATUS_HEADER, s), "");
+		status_printf_ln(s, color(WT_STATUS_HEADER, s), "%s", "");
 	}
 
 	wt_status_print_updated(s);
 	wt_status_print_unmerged(s);
 	wt_status_print_changed(s);
 	if (s->submodule_summary &&
@@ -1368,13 +1357,13 @@
 	}
 	if (s->show_untracked_files) {
 		wt_status_print_other(s, &s->untracked, _("Untracked files"), "add");
 		if (s->show_ignored_files)
 			wt_status_print_other(s, &s->ignored, _("Ignored files"), "add -f");
 		if (advice_status_u_option && 2000 < s->untracked_in_ms) {
-			status_printf_ln(s, GIT_COLOR_NORMAL, "");
+			status_printf_ln(s, GIT_COLOR_NORMAL, "%s", "");
 			status_printf_ln(s, GIT_COLOR_NORMAL,
 					 _("It took %.2f seconds to enumerate untracked files. 'status -uno'\n"
 					   "may speed it up, but you have to be careful not to forget to add\n"
 					   "new files yourself (see 'git help status')."),
 					 s->untracked_in_ms / 1000.0);
 		}
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wt-status.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wt-status.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/wt-status.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/wt-status.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/lib.a and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/lib.a differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xdiffi.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xdiffi.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xdiffi.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xdiffi.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xemit.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xemit.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xemit.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xemit.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xhistogram.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xhistogram.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xhistogram.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xhistogram.o differ
diff -BEr -U 6 /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xmerge.c /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xmerge.c
--- /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xmerge.c	2014-12-19 02:39:17.000000000 +0800
+++ /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xmerge.c	2014-08-16 06:26:55.000000000 +0800
@@ -242,17 +242,17 @@
 		else if (m->mode & 3) {
 			/* Before conflicting part */
 			size += xdl_recs_copy(xe1, i, m->i1 - i, 0,
 					      dest ? dest + size : NULL);
 			/* Postimage from side #1 */
 			if (m->mode & 1)
-				size += xdl_recs_copy(xe1, m->i1, m->chg1, 1,
+				size += xdl_recs_copy(xe1, m->i1, m->chg1, (m->mode & 2),
 						      dest ? dest + size : NULL);
 			/* Postimage from side #2 */
 			if (m->mode & 2)
-				size += xdl_recs_copy(xe2, m->i2, m->chg2, 1,
+				size += xdl_recs_copy(xe2, m->i2, m->chg2, 0,
 						      dest ? dest + size : NULL);
 		} else
 			continue;
 		i = m->i1 + m->chg1;
 	}
 	size += xdl_recs_copy(xe1, i, xe1->xdf2.nrec - i, 0,
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xmerge.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xmerge.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xmerge.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xmerge.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xpatience.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xpatience.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xpatience.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xpatience.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xprepare.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xprepare.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xprepare.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xprepare.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xutils.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xutils.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff/xutils.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff/xutils.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff-interface.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff-interface.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/xdiff-interface.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/xdiff-interface.o differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/zlib.c.bc and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/zlib.c.bc differ
Binary files /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.0.5/zlib.o and /usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/repos/git-2.1.0/zlib.o differ
