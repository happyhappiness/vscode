<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2188_git-2.11.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">git_config_perm<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><specifier pos:line="1" pos:column="21">const<pos:position pos:line="1" pos:column="26"/></specifier> <name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">var<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="38">const<pos:position pos:line="1" pos:column="43"/></specifier> <name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">value<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">endptr<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">value<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">==<pos:position pos:line="6" pos:column="21"/></operator> <name pos:line="6" pos:column="22">NULL<pos:position pos:line="6" pos:column="26"/></name></expr>)<pos:position pos:line="6" pos:column="27"/></condition><then pos:line="6" pos:column="27">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><name pos:line="7" pos:column="24">PERM_GROUP<pos:position pos:line="7" pos:column="34"/></name></expr>;<pos:position pos:line="7" pos:column="35"/></return></block></then></if>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><call><name pos:line="9" pos:column="14">strcmp<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><name pos:line="9" pos:column="21">value<pos:position pos:line="9" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="28">"umask"<pos:position pos:line="9" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="37"/></condition><then pos:line="9" pos:column="37">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><name pos:line="10" pos:column="24">PERM_UMASK<pos:position pos:line="10" pos:column="34"/></name></expr>;<pos:position pos:line="10" pos:column="35"/></return></block></then></if>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><call><name pos:line="11" pos:column="14">strcmp<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">value<pos:position pos:line="11" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="28">"group"<pos:position pos:line="11" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="37"/></condition><then pos:line="11" pos:column="37">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><name pos:line="12" pos:column="24">PERM_GROUP<pos:position pos:line="12" pos:column="34"/></name></expr>;<pos:position pos:line="12" pos:column="35"/></return></block></then></if>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><call><name pos:line="13" pos:column="14">strcmp<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name pos:line="13" pos:column="21">value<pos:position pos:line="13" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="28">"all"<pos:position pos:line="13" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call> <operator pos:line="13" pos:column="35">||<pos:position pos:line="13" pos:column="37"/></operator>
	    <operator pos:line="14" pos:column="13">!<pos:position pos:line="14" pos:column="14"/></operator><call><name pos:line="14" pos:column="14">strcmp<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name pos:line="14" pos:column="21">value<pos:position pos:line="14" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="28">"world"<pos:position pos:line="14" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="36"/></argument_list></call> <operator pos:line="14" pos:column="37">||<pos:position pos:line="14" pos:column="39"/></operator>
	    <operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><call><name pos:line="15" pos:column="14">strcmp<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><name pos:line="15" pos:column="21">value<pos:position pos:line="15" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="28">"everybody"<pos:position pos:line="15" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="41"/></condition><then pos:line="15" pos:column="41">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><name pos:line="16" pos:column="24">PERM_EVERYBODY<pos:position pos:line="16" pos:column="38"/></name></expr>;<pos:position pos:line="16" pos:column="39"/></return></block></then></if>

	<comment type="block" pos:line="18" pos:column="9">/* Parse octal numbers */</comment>
	<expr_stmt><expr><name pos:line="19" pos:column="9">i<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator> <call><name pos:line="19" pos:column="13">strtol<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><name pos:line="19" pos:column="20">value<pos:position pos:line="19" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="27">&amp;<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="28">endptr<pos:position pos:line="19" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="36">8<pos:position pos:line="19" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="39"/></expr_stmt>

	<comment type="block" pos:line="21" pos:column="9">/* If not an octal number, maybe true/false? */</comment>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">*<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">endptr<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">!=<pos:position pos:line="22" pos:column="23"/></operator> <literal type="number" pos:line="22" pos:column="24">0<pos:position pos:line="22" pos:column="25"/></literal></expr>)<pos:position pos:line="22" pos:column="26"/></condition><then pos:line="22" pos:column="26">
		<block type="pseudo"><return pos:line="23" pos:column="17">return <expr><ternary><condition><expr><call><name pos:line="23" pos:column="24">git_config_bool<pos:position pos:line="23" pos:column="39"/></name><argument_list pos:line="23" pos:column="39">(<argument><expr><name pos:line="23" pos:column="40">var<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="45">value<pos:position pos:line="23" pos:column="50"/></name></expr></argument>)<pos:position pos:line="23" pos:column="51"/></argument_list></call></expr> ?<pos:position pos:line="23" pos:column="53"/></condition><then pos:line="23" pos:column="53"> <expr><name pos:line="23" pos:column="54">PERM_GROUP<pos:position pos:line="23" pos:column="64"/></name></expr> <pos:position pos:line="23" pos:column="65"/></then><else pos:line="23" pos:column="65">: <expr><name pos:line="23" pos:column="67">PERM_UMASK<pos:position pos:line="23" pos:column="77"/></name></expr></else></ternary></expr>;<pos:position pos:line="23" pos:column="78"/></return></block></then></if>

	<comment type="block" pos:line="25" pos:column="9">/*
	 * Treat values 0, 1 and 2 as compatibility cases, otherwise it is
	 * a chmod value to restrict to.
	 */</comment>
	<switch pos:line="29" pos:column="9">switch <condition pos:line="29" pos:column="16">(<expr><name pos:line="29" pos:column="17">i<pos:position pos:line="29" pos:column="18"/></name></expr>)<pos:position pos:line="29" pos:column="19"/></condition> <block pos:line="29" pos:column="20">{
	<case pos:line="30" pos:column="9">case <expr><name pos:line="30" pos:column="14">PERM_UMASK<pos:position pos:line="30" pos:column="24"/></name></expr>:<pos:position pos:line="30" pos:column="25"/></case>               <comment type="block" pos:line="30" pos:column="40">/* 0 */</comment>
		<return pos:line="31" pos:column="17">return <expr><name pos:line="31" pos:column="24">PERM_UMASK<pos:position pos:line="31" pos:column="34"/></name></expr>;<pos:position pos:line="31" pos:column="35"/></return>
	<case pos:line="32" pos:column="9">case <expr><name pos:line="32" pos:column="14">OLD_PERM_GROUP<pos:position pos:line="32" pos:column="28"/></name></expr>:<pos:position pos:line="32" pos:column="29"/></case>           <comment type="block" pos:line="32" pos:column="40">/* 1 */</comment>
		<return pos:line="33" pos:column="17">return <expr><name pos:line="33" pos:column="24">PERM_GROUP<pos:position pos:line="33" pos:column="34"/></name></expr>;<pos:position pos:line="33" pos:column="35"/></return>
	<case pos:line="34" pos:column="9">case <expr><name pos:line="34" pos:column="14">OLD_PERM_EVERYBODY<pos:position pos:line="34" pos:column="32"/></name></expr>:<pos:position pos:line="34" pos:column="33"/></case>       <comment type="block" pos:line="34" pos:column="40">/* 2 */</comment>
		<return pos:line="35" pos:column="17">return <expr><name pos:line="35" pos:column="24">PERM_EVERYBODY<pos:position pos:line="35" pos:column="38"/></name></expr>;<pos:position pos:line="35" pos:column="39"/></return>
	}<pos:position pos:line="36" pos:column="10"/></block></switch>

	<comment type="block" pos:line="38" pos:column="9">/* A filemode value was given: 0xxx */</comment>

	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><operator pos:line="40" pos:column="13">(<pos:position pos:line="40" pos:column="14"/></operator><name pos:line="40" pos:column="14">i<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">&amp;<pos:position pos:line="40" pos:column="21"/></operator> <literal type="number" pos:line="40" pos:column="18">0600<pos:position pos:line="40" pos:column="22"/></literal><operator pos:line="40" pos:column="22">)<pos:position pos:line="40" pos:column="23"/></operator> <operator pos:line="40" pos:column="24">!=<pos:position pos:line="40" pos:column="26"/></operator> <literal type="number" pos:line="40" pos:column="27">0600<pos:position pos:line="40" pos:column="31"/></literal></expr>)<pos:position pos:line="40" pos:column="32"/></condition><then pos:line="40" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="17">die<pos:position pos:line="41" pos:column="20"/></name><argument_list pos:line="41" pos:column="20">(<argument><expr><call><name pos:line="41" pos:column="21">_<pos:position pos:line="41" pos:column="22"/></name><argument_list pos:line="41" pos:column="22">(<argument><expr><literal type="string" pos:line="41" pos:column="23">"Problem with core.sharedRepository filemode value "<pos:position pos:line="41" pos:column="75"/></literal>
		    <literal type="string" pos:line="42" pos:column="21">"(0%.3o).\nThe owner of files must always have "<pos:position pos:line="42" pos:column="69"/></literal>
		    <literal type="string" pos:line="43" pos:column="21">"read and write permissions."<pos:position pos:line="43" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="43" pos:column="53">i<pos:position pos:line="43" pos:column="54"/></name></expr></argument>)<pos:position pos:line="43" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="56"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="45" pos:column="9">/*
	 * Mask filemode value. Others can not get write permission.
	 * x flags for directories are handled separately.
	 */</comment>
	<return pos:line="49" pos:column="9">return <expr><operator pos:line="49" pos:column="16">-<pos:position pos:line="49" pos:column="17"/></operator><operator pos:line="49" pos:column="17">(<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="18">i<pos:position pos:line="49" pos:column="19"/></name> <operator pos:line="49" pos:column="20">&amp;<pos:position pos:line="49" pos:column="25"/></operator> <literal type="number" pos:line="49" pos:column="22">0666<pos:position pos:line="49" pos:column="26"/></literal><operator pos:line="49" pos:column="26">)<pos:position pos:line="49" pos:column="27"/></operator></expr>;<pos:position pos:line="49" pos:column="28"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
