<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1658_git-2.5.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">unsigned<pos:position pos:line="1" pos:column="9"/></name> <name pos:line="1" pos:column="10">long<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">get_size_from_delta<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name><name pos:line="1" pos:column="35">struct<pos:position pos:line="1" pos:column="41"/></name> <name pos:line="1" pos:column="42">packed_git<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">p<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
				  <parameter><decl><type><name><name pos:line="2" pos:column="35">struct<pos:position pos:line="2" pos:column="41"/></name> <name pos:line="2" pos:column="42">pack_window<pos:position pos:line="2" pos:column="53"/></name></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier><modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">w_curs<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>,
			          <parameter><decl><type><name pos:line="3" pos:column="35">off_t<pos:position pos:line="3" pos:column="40"/></name></type> <name pos:line="3" pos:column="41">curpos<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="48"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">unsigned<pos:position pos:line="5" pos:column="23"/></name> <name pos:line="5" pos:column="24">char<pos:position pos:line="5" pos:column="28"/></name> <modifier pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="30">data<pos:position pos:line="5" pos:column="34"/></name></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">char<pos:position pos:line="6" pos:column="22"/></name></type> <name><name pos:line="6" pos:column="23">delta_head<pos:position pos:line="6" pos:column="33"/></name><index pos:line="6" pos:column="33">[<expr><literal type="number" pos:line="6" pos:column="34">20<pos:position pos:line="6" pos:column="36"/></literal></expr>]<pos:position pos:line="6" pos:column="37"/></index></name></decl>, <modifier pos:line="6" pos:column="39">*<pos:position pos:line="6" pos:column="40"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="40">in<pos:position pos:line="6" pos:column="42"/></name></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">git_zstream<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">stream<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">st<pos:position pos:line="8" pos:column="15"/></name></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">memset<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><operator pos:line="10" pos:column="16">&amp;<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="17">stream<pos:position pos:line="10" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="25">0<pos:position pos:line="10" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="28">sizeof<argument_list pos:line="10" pos:column="34">(<argument><expr><name pos:line="10" pos:column="35">stream<pos:position pos:line="10" pos:column="41"/></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="11" pos:column="9">stream<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">.<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="16">next_out<pos:position pos:line="11" pos:column="24"/></name></name> <operator pos:line="11" pos:column="25">=<pos:position pos:line="11" pos:column="26"/></operator> <name pos:line="11" pos:column="27">delta_head<pos:position pos:line="11" pos:column="37"/></name></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="12" pos:column="9">stream<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">.<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">avail_out<pos:position pos:line="12" pos:column="25"/></name></name> <operator pos:line="12" pos:column="26">=<pos:position pos:line="12" pos:column="27"/></operator> <sizeof pos:line="12" pos:column="28">sizeof<argument_list pos:line="12" pos:column="34">(<argument><expr><name pos:line="12" pos:column="35">delta_head<pos:position pos:line="12" pos:column="45"/></name></expr></argument>)<pos:position pos:line="12" pos:column="46"/></argument_list></sizeof></expr>;<pos:position pos:line="12" pos:column="47"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">git_inflate_init<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><operator pos:line="14" pos:column="26">&amp;<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="27">stream<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
	<do pos:line="15" pos:column="9">do <block pos:line="15" pos:column="12">{
		<expr_stmt><expr><name pos:line="16" pos:column="17">in<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <call><name pos:line="16" pos:column="22">use_pack<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><name pos:line="16" pos:column="31">p<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="34">w_curs<pos:position pos:line="16" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="42">curpos<pos:position pos:line="16" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="50">&amp;<pos:position pos:line="16" pos:column="55"/></operator><name><name pos:line="16" pos:column="51">stream<pos:position pos:line="16" pos:column="57"/></name><operator pos:line="16" pos:column="57">.<pos:position pos:line="16" pos:column="58"/></operator><name pos:line="16" pos:column="58">avail_in<pos:position pos:line="16" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="68"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="17" pos:column="17">stream<pos:position pos:line="17" pos:column="23"/></name><operator pos:line="17" pos:column="23">.<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="24">next_in<pos:position pos:line="17" pos:column="31"/></name></name> <operator pos:line="17" pos:column="32">=<pos:position pos:line="17" pos:column="33"/></operator> <name pos:line="17" pos:column="34">in<pos:position pos:line="17" pos:column="36"/></name></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name pos:line="18" pos:column="17">st<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">=<pos:position pos:line="18" pos:column="21"/></operator> <call><name pos:line="18" pos:column="22">git_inflate<pos:position pos:line="18" pos:column="33"/></name><argument_list pos:line="18" pos:column="33">(<argument><expr><operator pos:line="18" pos:column="34">&amp;<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="35">stream<pos:position pos:line="18" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="43">Z_FINISH<pos:position pos:line="18" pos:column="51"/></name></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><name pos:line="19" pos:column="17">curpos<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">+=<pos:position pos:line="19" pos:column="26"/></operator> <name><name pos:line="19" pos:column="27">stream<pos:position pos:line="19" pos:column="33"/></name><operator pos:line="19" pos:column="33">.<pos:position pos:line="19" pos:column="34"/></operator><name pos:line="19" pos:column="34">next_in<pos:position pos:line="19" pos:column="41"/></name></name> <operator pos:line="19" pos:column="42">-<pos:position pos:line="19" pos:column="43"/></operator> <name pos:line="19" pos:column="44">in<pos:position pos:line="19" pos:column="46"/></name></expr>;<pos:position pos:line="19" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block> while <condition pos:line="20" pos:column="17">(<expr><operator pos:line="20" pos:column="18">(<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">st<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">==<pos:position pos:line="20" pos:column="24"/></operator> <name pos:line="20" pos:column="25">Z_OK<pos:position pos:line="20" pos:column="29"/></name> <operator pos:line="20" pos:column="30">||<pos:position pos:line="20" pos:column="32"/></operator> <name pos:line="20" pos:column="33">st<pos:position pos:line="20" pos:column="35"/></name> <operator pos:line="20" pos:column="36">==<pos:position pos:line="20" pos:column="38"/></operator> <name pos:line="20" pos:column="39">Z_BUF_ERROR<pos:position pos:line="20" pos:column="50"/></name><operator pos:line="20" pos:column="50">)<pos:position pos:line="20" pos:column="51"/></operator> <operator pos:line="20" pos:column="52">&amp;&amp;<pos:position pos:line="20" pos:column="62"/></operator>
		 <name><name pos:line="21" pos:column="18">stream<pos:position pos:line="21" pos:column="24"/></name><operator pos:line="21" pos:column="24">.<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="25">total_out<pos:position pos:line="21" pos:column="34"/></name></name> <operator pos:line="21" pos:column="35">&lt;<pos:position pos:line="21" pos:column="39"/></operator> <sizeof pos:line="21" pos:column="37">sizeof<argument_list pos:line="21" pos:column="43">(<argument><expr><name pos:line="21" pos:column="44">delta_head<pos:position pos:line="21" pos:column="54"/></name></expr></argument>)<pos:position pos:line="21" pos:column="55"/></argument_list></sizeof></expr>)<pos:position pos:line="21" pos:column="56"/></condition>;<pos:position pos:line="21" pos:column="57"/></do>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">git_inflate_end<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><operator pos:line="22" pos:column="25">&amp;<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="26">stream<pos:position pos:line="22" pos:column="32"/></name></expr></argument>)<pos:position pos:line="22" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="34"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">(<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">st<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">!=<pos:position pos:line="23" pos:column="19"/></operator> <name pos:line="23" pos:column="20">Z_STREAM_END<pos:position pos:line="23" pos:column="32"/></name><operator pos:line="23" pos:column="32">)<pos:position pos:line="23" pos:column="33"/></operator> <operator pos:line="23" pos:column="34">&amp;&amp;<pos:position pos:line="23" pos:column="44"/></operator> <name><name pos:line="23" pos:column="37">stream<pos:position pos:line="23" pos:column="43"/></name><operator pos:line="23" pos:column="43">.<pos:position pos:line="23" pos:column="44"/></operator><name pos:line="23" pos:column="44">total_out<pos:position pos:line="23" pos:column="53"/></name></name> <operator pos:line="23" pos:column="54">!=<pos:position pos:line="23" pos:column="56"/></operator> <sizeof pos:line="23" pos:column="57">sizeof<argument_list pos:line="23" pos:column="63">(<argument><expr><name pos:line="23" pos:column="64">delta_head<pos:position pos:line="23" pos:column="74"/></name></expr></argument>)<pos:position pos:line="23" pos:column="75"/></argument_list></sizeof></expr>)<pos:position pos:line="23" pos:column="76"/></condition><then pos:line="23" pos:column="76"> <block pos:line="23" pos:column="77">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">error<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><literal type="string" pos:line="24" pos:column="23">"delta data unpack-initial failed"<pos:position pos:line="24" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="59"/></expr_stmt>
		<return pos:line="25" pos:column="17">return <expr><literal type="number" pos:line="25" pos:column="24">0<pos:position pos:line="25" pos:column="25"/></literal></expr>;<pos:position pos:line="25" pos:column="26"/></return>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="28" pos:column="9">/* Examine the initial part of the delta to figure out
	 * the result size.
	 */</comment>
	<expr_stmt><expr><name pos:line="31" pos:column="9">data<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">=<pos:position pos:line="31" pos:column="15"/></operator> <name pos:line="31" pos:column="16">delta_head<pos:position pos:line="31" pos:column="26"/></name></expr>;<pos:position pos:line="31" pos:column="27"/></expr_stmt>

	<comment type="block" pos:line="33" pos:column="9">/* ignore base size */</comment>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">get_delta_hdr_size<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><operator pos:line="34" pos:column="28">&amp;<pos:position pos:line="34" pos:column="33"/></operator><name pos:line="34" pos:column="29">data<pos:position pos:line="34" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="35">delta_head<pos:position pos:line="34" pos:column="45"/></name><operator pos:line="34" pos:column="45">+<pos:position pos:line="34" pos:column="46"/></operator><sizeof pos:line="34" pos:column="46">sizeof<argument_list pos:line="34" pos:column="52">(<argument><expr><name pos:line="34" pos:column="53">delta_head<pos:position pos:line="34" pos:column="63"/></name></expr></argument>)<pos:position pos:line="34" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="66"/></expr_stmt>

	<comment type="block" pos:line="36" pos:column="9">/* Read the result size */</comment>
	<return pos:line="37" pos:column="9">return <expr><call><name pos:line="37" pos:column="16">get_delta_hdr_size<pos:position pos:line="37" pos:column="34"/></name><argument_list pos:line="37" pos:column="34">(<argument><expr><operator pos:line="37" pos:column="35">&amp;<pos:position pos:line="37" pos:column="40"/></operator><name pos:line="37" pos:column="36">data<pos:position pos:line="37" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="42">delta_head<pos:position pos:line="37" pos:column="52"/></name><operator pos:line="37" pos:column="52">+<pos:position pos:line="37" pos:column="53"/></operator><sizeof pos:line="37" pos:column="53">sizeof<argument_list pos:line="37" pos:column="59">(<argument><expr><name pos:line="37" pos:column="60">delta_head<pos:position pos:line="37" pos:column="70"/></name></expr></argument>)<pos:position pos:line="37" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="73"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
