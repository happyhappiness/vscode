<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6877_git-2.13.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">get_subexp<pos:position pos:line="3" pos:column="11"/></name> <parameter_list pos:line="3" pos:column="12">(<parameter><decl><type><name pos:line="3" pos:column="13">re_match_context_t<pos:position pos:line="3" pos:column="31"/></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">mctx<pos:position pos:line="3" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="39">int<pos:position pos:line="3" pos:column="42"/></name></type> <name pos:line="3" pos:column="43">bkref_node<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="55">int<pos:position pos:line="3" pos:column="58"/></name></type> <name pos:line="3" pos:column="59">bkref_str_idx<pos:position pos:line="3" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="73"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">const<pos:position pos:line="5" pos:column="8"/></specifier> <name pos:line="5" pos:column="9">re_dfa_t<pos:position pos:line="5" pos:column="17"/></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier><specifier pos:line="5" pos:column="19">const<pos:position pos:line="5" pos:column="24"/></specifier></type> <name pos:line="5" pos:column="25">dfa<pos:position pos:line="5" pos:column="28"/></name> <init pos:line="5" pos:column="29">= <expr><name><name pos:line="5" pos:column="31">mctx<pos:position pos:line="5" pos:column="35"/></name><operator pos:line="5" pos:column="35">-&gt;<pos:position pos:line="5" pos:column="40"/></operator><name pos:line="5" pos:column="37">dfa<pos:position pos:line="5" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">subexp_num<pos:position pos:line="6" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="19">sub_top_idx<pos:position pos:line="6" pos:column="30"/></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">buf<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><operator pos:line="7" pos:column="21">(<pos:position pos:line="7" pos:column="22"/></operator><specifier pos:line="7" pos:column="22">const<pos:position pos:line="7" pos:column="27"/></specifier> <name pos:line="7" pos:column="28">char<pos:position pos:line="7" pos:column="32"/></name> <operator pos:line="7" pos:column="33">*<pos:position pos:line="7" pos:column="34"/></operator><operator pos:line="7" pos:column="34">)<pos:position pos:line="7" pos:column="35"/></operator> <call><name pos:line="7" pos:column="36">re_string_get_buffer<pos:position pos:line="7" pos:column="56"/></name> <argument_list pos:line="7" pos:column="57">(<argument><expr><operator pos:line="7" pos:column="58">&amp;<pos:position pos:line="7" pos:column="63"/></operator><name><name pos:line="7" pos:column="59">mctx<pos:position pos:line="7" pos:column="63"/></name><operator pos:line="7" pos:column="63">-&gt;<pos:position pos:line="7" pos:column="68"/></operator><name pos:line="7" pos:column="65">input<pos:position pos:line="7" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="72"/></decl_stmt>
  <comment type="block" pos:line="8" pos:column="3">/* Return if we have already checked BKREF_NODE at BKREF_STR_IDX.  */</comment>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">cache_idx<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><call><name pos:line="9" pos:column="19">search_cur_bkref_entry<pos:position pos:line="9" pos:column="41"/></name> <argument_list pos:line="9" pos:column="42">(<argument><expr><name pos:line="9" pos:column="43">mctx<pos:position pos:line="9" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="49">bkref_str_idx<pos:position pos:line="9" pos:column="62"/></name></expr></argument>)<pos:position pos:line="9" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="64"/></decl_stmt>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">cache_idx<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">!=<pos:position pos:line="10" pos:column="19"/></operator> <operator pos:line="10" pos:column="20">-<pos:position pos:line="10" pos:column="21"/></operator><literal type="number" pos:line="10" pos:column="21">1<pos:position pos:line="10" pos:column="22"/></literal></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23">
    <block pos:line="11" pos:column="5">{
      <decl_stmt><decl><type><specifier pos:line="12" pos:column="7">const<pos:position pos:line="12" pos:column="12"/></specifier> <name><name pos:line="12" pos:column="13">struct<pos:position pos:line="12" pos:column="19"/></name> <name pos:line="12" pos:column="20">re_backref_cache_entry<pos:position pos:line="12" pos:column="42"/></name></name> <modifier pos:line="12" pos:column="43">*<pos:position pos:line="12" pos:column="44"/></modifier></type><name pos:line="12" pos:column="44">entry<pos:position pos:line="12" pos:column="49"/></name>
	<init pos:line="13" pos:column="9">= <expr><name><name pos:line="13" pos:column="11">mctx<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">-&gt;<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="17">bkref_ents<pos:position pos:line="13" pos:column="27"/></name></name> <operator pos:line="13" pos:column="28">+<pos:position pos:line="13" pos:column="29"/></operator> <name pos:line="13" pos:column="30">cache_idx<pos:position pos:line="13" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="40"/></decl_stmt>
      <do pos:line="14" pos:column="7">do
	<block type="pseudo"><if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name><name pos:line="15" pos:column="13">entry<pos:position pos:line="15" pos:column="18"/></name><operator pos:line="15" pos:column="18">-&gt;<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="20">node<pos:position pos:line="15" pos:column="24"/></name></name> <operator pos:line="15" pos:column="25">==<pos:position pos:line="15" pos:column="27"/></operator> <name pos:line="15" pos:column="28">bkref_node<pos:position pos:line="15" pos:column="38"/></name></expr>)<pos:position pos:line="15" pos:column="39"/></condition><then pos:line="15" pos:column="39">
	  <block type="pseudo"><return pos:line="16" pos:column="11">return <expr><name pos:line="16" pos:column="18">REG_NOERROR<pos:position pos:line="16" pos:column="29"/></name></expr>;<pos:position pos:line="16" pos:column="30"/></return></block></then></if></block> <comment type="block" pos:line="16" pos:column="31">/* We already checked it.  */</comment>
      while <condition pos:line="17" pos:column="13">(<expr><name pos:line="17" pos:column="14">entry<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">++<pos:position pos:line="17" pos:column="21"/></operator><operator pos:line="17" pos:column="21">-&gt;<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="23">more<pos:position pos:line="17" pos:column="27"/></name></expr>)<pos:position pos:line="17" pos:column="28"/></condition>;<pos:position pos:line="17" pos:column="29"/></do>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

  <expr_stmt><expr><name pos:line="20" pos:column="3">subexp_num<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <name><name pos:line="20" pos:column="16">dfa<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">-&gt;<pos:position pos:line="20" pos:column="24"/></operator><name pos:line="20" pos:column="21">nodes<pos:position pos:line="20" pos:column="26"/></name><index pos:line="20" pos:column="26">[<expr><name pos:line="20" pos:column="27">bkref_node<pos:position pos:line="20" pos:column="37"/></name></expr>]<pos:position pos:line="20" pos:column="38"/></index></name><operator pos:line="20" pos:column="38">.<pos:position pos:line="20" pos:column="39"/></operator><name><name pos:line="20" pos:column="39">opr<pos:position pos:line="20" pos:column="42"/></name><operator pos:line="20" pos:column="42">.<pos:position pos:line="20" pos:column="43"/></operator><name pos:line="20" pos:column="43">idx<pos:position pos:line="20" pos:column="46"/></name></name></expr>;<pos:position pos:line="20" pos:column="47"/></expr_stmt>

  <comment type="block" pos:line="22" pos:column="3">/* For each sub expression  */</comment>
  <for pos:line="23" pos:column="3">for <control pos:line="23" pos:column="7">(<init><expr><name pos:line="23" pos:column="8">sub_top_idx<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">=<pos:position pos:line="23" pos:column="21"/></operator> <literal type="number" pos:line="23" pos:column="22">0<pos:position pos:line="23" pos:column="23"/></literal></expr>;<pos:position pos:line="23" pos:column="24"/></init> <condition><expr><name pos:line="23" pos:column="25">sub_top_idx<pos:position pos:line="23" pos:column="36"/></name> <operator pos:line="23" pos:column="37">&lt;<pos:position pos:line="23" pos:column="41"/></operator> <name><name pos:line="23" pos:column="39">mctx<pos:position pos:line="23" pos:column="43"/></name><operator pos:line="23" pos:column="43">-&gt;<pos:position pos:line="23" pos:column="48"/></operator><name pos:line="23" pos:column="45">nsub_tops<pos:position pos:line="23" pos:column="54"/></name></name></expr>;<pos:position pos:line="23" pos:column="55"/></condition> <incr><expr><operator pos:line="23" pos:column="56">++<pos:position pos:line="23" pos:column="58"/></operator><name pos:line="23" pos:column="58">sub_top_idx<pos:position pos:line="23" pos:column="69"/></name></expr></incr>)<pos:position pos:line="23" pos:column="70"/></control>
    <block pos:line="24" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="25" pos:column="7">reg_errcode_t<pos:position pos:line="25" pos:column="20"/></name></type> <name pos:line="25" pos:column="21">err<pos:position pos:line="25" pos:column="24"/></name></decl>;<pos:position pos:line="25" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="26" pos:column="7">re_sub_match_top_t<pos:position pos:line="26" pos:column="25"/></name> <modifier pos:line="26" pos:column="26">*<pos:position pos:line="26" pos:column="27"/></modifier></type><name pos:line="26" pos:column="27">sub_top<pos:position pos:line="26" pos:column="34"/></name> <init pos:line="26" pos:column="35">= <expr><name><name pos:line="26" pos:column="37">mctx<pos:position pos:line="26" pos:column="41"/></name><operator pos:line="26" pos:column="41">-&gt;<pos:position pos:line="26" pos:column="46"/></operator><name pos:line="26" pos:column="43">sub_tops<pos:position pos:line="26" pos:column="51"/></name><index pos:line="26" pos:column="51">[<expr><name pos:line="26" pos:column="52">sub_top_idx<pos:position pos:line="26" pos:column="63"/></name></expr>]<pos:position pos:line="26" pos:column="64"/></index></name></expr></init></decl>;<pos:position pos:line="26" pos:column="65"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="27" pos:column="7">re_sub_match_last_t<pos:position pos:line="27" pos:column="26"/></name> <modifier pos:line="27" pos:column="27">*<pos:position pos:line="27" pos:column="28"/></modifier></type><name pos:line="27" pos:column="28">sub_last<pos:position pos:line="27" pos:column="36"/></name></decl>;<pos:position pos:line="27" pos:column="37"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="28" pos:column="7">int<pos:position pos:line="28" pos:column="10"/></name></type> <name pos:line="28" pos:column="11">sub_last_idx<pos:position pos:line="28" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="28" pos:column="25">sl_str<pos:position pos:line="28" pos:column="31"/></name></decl>, <decl><type ref="prev"/><name pos:line="28" pos:column="33">bkref_str_off<pos:position pos:line="28" pos:column="46"/></name></decl>;<pos:position pos:line="28" pos:column="47"/></decl_stmt>

      <if pos:line="30" pos:column="7">if <condition pos:line="30" pos:column="10">(<expr><name><name pos:line="30" pos:column="11">dfa<pos:position pos:line="30" pos:column="14"/></name><operator pos:line="30" pos:column="14">-&gt;<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="16">nodes<pos:position pos:line="30" pos:column="21"/></name><index pos:line="30" pos:column="21">[<expr><name><name pos:line="30" pos:column="22">sub_top<pos:position pos:line="30" pos:column="29"/></name><operator pos:line="30" pos:column="29">-&gt;<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="31">node<pos:position pos:line="30" pos:column="35"/></name></name></expr>]<pos:position pos:line="30" pos:column="36"/></index></name><operator pos:line="30" pos:column="36">.<pos:position pos:line="30" pos:column="37"/></operator><name><name pos:line="30" pos:column="37">opr<pos:position pos:line="30" pos:column="40"/></name><operator pos:line="30" pos:column="40">.<pos:position pos:line="30" pos:column="41"/></operator><name pos:line="30" pos:column="41">idx<pos:position pos:line="30" pos:column="44"/></name></name> <operator pos:line="30" pos:column="45">!=<pos:position pos:line="30" pos:column="47"/></operator> <name pos:line="30" pos:column="48">subexp_num<pos:position pos:line="30" pos:column="58"/></name></expr>)<pos:position pos:line="30" pos:column="59"/></condition><then pos:line="30" pos:column="59">
	<block type="pseudo"><continue pos:line="31" pos:column="9">continue;<pos:position pos:line="31" pos:column="18"/></continue></block></then></if> <comment type="block" pos:line="31" pos:column="19">/* It isn't related.  */</comment>

      <expr_stmt><expr><name pos:line="33" pos:column="7">sl_str<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">=<pos:position pos:line="33" pos:column="15"/></operator> <name><name pos:line="33" pos:column="16">sub_top<pos:position pos:line="33" pos:column="23"/></name><operator pos:line="33" pos:column="23">-&gt;<pos:position pos:line="33" pos:column="28"/></operator><name pos:line="33" pos:column="25">str_idx<pos:position pos:line="33" pos:column="32"/></name></name></expr>;<pos:position pos:line="33" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name pos:line="34" pos:column="7">bkref_str_off<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">=<pos:position pos:line="34" pos:column="22"/></operator> <name pos:line="34" pos:column="23">bkref_str_idx<pos:position pos:line="34" pos:column="36"/></name></expr>;<pos:position pos:line="34" pos:column="37"/></expr_stmt>
      <comment type="block" pos:line="35" pos:column="7">/* At first, check the last node of sub expressions we already
	 evaluated.  */</comment>
      <for pos:line="37" pos:column="7">for <control pos:line="37" pos:column="11">(<init><expr><name pos:line="37" pos:column="12">sub_last_idx<pos:position pos:line="37" pos:column="24"/></name> <operator pos:line="37" pos:column="25">=<pos:position pos:line="37" pos:column="26"/></operator> <literal type="number" pos:line="37" pos:column="27">0<pos:position pos:line="37" pos:column="28"/></literal></expr>;<pos:position pos:line="37" pos:column="29"/></init> <condition><expr><name pos:line="37" pos:column="30">sub_last_idx<pos:position pos:line="37" pos:column="42"/></name> <operator pos:line="37" pos:column="43">&lt;<pos:position pos:line="37" pos:column="47"/></operator> <name><name pos:line="37" pos:column="45">sub_top<pos:position pos:line="37" pos:column="52"/></name><operator pos:line="37" pos:column="52">-&gt;<pos:position pos:line="37" pos:column="57"/></operator><name pos:line="37" pos:column="54">nlasts<pos:position pos:line="37" pos:column="60"/></name></name></expr>;<pos:position pos:line="37" pos:column="61"/></condition> <incr><expr><operator pos:line="37" pos:column="62">++<pos:position pos:line="37" pos:column="64"/></operator><name pos:line="37" pos:column="64">sub_last_idx<pos:position pos:line="37" pos:column="76"/></name></expr></incr>)<pos:position pos:line="37" pos:column="77"/></control>
	<block pos:line="38" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="39" pos:column="11">int<pos:position pos:line="39" pos:column="14"/></name></type> <name pos:line="39" pos:column="15">sl_str_diff<pos:position pos:line="39" pos:column="26"/></name></decl>;<pos:position pos:line="39" pos:column="27"/></decl_stmt>
	  <expr_stmt><expr><name pos:line="40" pos:column="11">sub_last<pos:position pos:line="40" pos:column="19"/></name> <operator pos:line="40" pos:column="20">=<pos:position pos:line="40" pos:column="21"/></operator> <name><name pos:line="40" pos:column="22">sub_top<pos:position pos:line="40" pos:column="29"/></name><operator pos:line="40" pos:column="29">-&gt;<pos:position pos:line="40" pos:column="34"/></operator><name pos:line="40" pos:column="31">lasts<pos:position pos:line="40" pos:column="36"/></name><index pos:line="40" pos:column="36">[<expr><name pos:line="40" pos:column="37">sub_last_idx<pos:position pos:line="40" pos:column="49"/></name></expr>]<pos:position pos:line="40" pos:column="50"/></index></name></expr>;<pos:position pos:line="40" pos:column="51"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="41" pos:column="11">sl_str_diff<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">=<pos:position pos:line="41" pos:column="24"/></operator> <name><name pos:line="41" pos:column="25">sub_last<pos:position pos:line="41" pos:column="33"/></name><operator pos:line="41" pos:column="33">-&gt;<pos:position pos:line="41" pos:column="38"/></operator><name pos:line="41" pos:column="35">str_idx<pos:position pos:line="41" pos:column="42"/></name></name> <operator pos:line="41" pos:column="43">-<pos:position pos:line="41" pos:column="44"/></operator> <name pos:line="41" pos:column="45">sl_str<pos:position pos:line="41" pos:column="51"/></name></expr>;<pos:position pos:line="41" pos:column="52"/></expr_stmt>
	  <comment type="block" pos:line="42" pos:column="11">/* The matched string by the sub expression match with the substring
	     at the back reference?  */</comment>
	  <if pos:line="44" pos:column="11">if <condition pos:line="44" pos:column="14">(<expr><name pos:line="44" pos:column="15">sl_str_diff<pos:position pos:line="44" pos:column="26"/></name> <operator pos:line="44" pos:column="27">&gt;<pos:position pos:line="44" pos:column="31"/></operator> <literal type="number" pos:line="44" pos:column="29">0<pos:position pos:line="44" pos:column="30"/></literal></expr>)<pos:position pos:line="44" pos:column="31"/></condition><then pos:line="44" pos:column="31">
	    <block pos:line="45" pos:column="13">{
	      <if pos:line="46" pos:column="15">if <condition pos:line="46" pos:column="18">(<expr><call><name pos:line="46" pos:column="19">BE<pos:position pos:line="46" pos:column="21"/></name> <argument_list pos:line="46" pos:column="22">(<argument><expr><name pos:line="46" pos:column="23">bkref_str_off<pos:position pos:line="46" pos:column="36"/></name> <operator pos:line="46" pos:column="37">+<pos:position pos:line="46" pos:column="38"/></operator> <name pos:line="46" pos:column="39">sl_str_diff<pos:position pos:line="46" pos:column="50"/></name> <operator pos:line="46" pos:column="51">&gt;<pos:position pos:line="46" pos:column="55"/></operator> <name><name pos:line="46" pos:column="53">mctx<pos:position pos:line="46" pos:column="57"/></name><operator pos:line="46" pos:column="57">-&gt;<pos:position pos:line="46" pos:column="62"/></operator><name pos:line="46" pos:column="59">input<pos:position pos:line="46" pos:column="64"/></name><operator pos:line="46" pos:column="64">.<pos:position pos:line="46" pos:column="65"/></operator><name pos:line="46" pos:column="65">valid_len<pos:position pos:line="46" pos:column="74"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="76">0<pos:position pos:line="46" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="79"/></condition><then pos:line="46" pos:column="79">
		<block pos:line="47" pos:column="17">{
		  <comment type="block" pos:line="48" pos:column="19">/* Not enough chars for a successful match.  */</comment>
		  <if pos:line="49" pos:column="19">if <condition pos:line="49" pos:column="22">(<expr><name pos:line="49" pos:column="23">bkref_str_off<pos:position pos:line="49" pos:column="36"/></name> <operator pos:line="49" pos:column="37">+<pos:position pos:line="49" pos:column="38"/></operator> <name pos:line="49" pos:column="39">sl_str_diff<pos:position pos:line="49" pos:column="50"/></name> <operator pos:line="49" pos:column="51">&gt;<pos:position pos:line="49" pos:column="55"/></operator> <name><name pos:line="49" pos:column="53">mctx<pos:position pos:line="49" pos:column="57"/></name><operator pos:line="49" pos:column="57">-&gt;<pos:position pos:line="49" pos:column="62"/></operator><name pos:line="49" pos:column="59">input<pos:position pos:line="49" pos:column="64"/></name><operator pos:line="49" pos:column="64">.<pos:position pos:line="49" pos:column="65"/></operator><name pos:line="49" pos:column="65">len<pos:position pos:line="49" pos:column="68"/></name></name></expr>)<pos:position pos:line="49" pos:column="69"/></condition><then pos:line="49" pos:column="69">
		    <block type="pseudo"><break pos:line="50" pos:column="21">break;<pos:position pos:line="50" pos:column="27"/></break></block></then></if>

		  <expr_stmt><expr><name pos:line="52" pos:column="19">err<pos:position pos:line="52" pos:column="22"/></name> <operator pos:line="52" pos:column="23">=<pos:position pos:line="52" pos:column="24"/></operator> <call><name pos:line="52" pos:column="25">clean_state_log_if_needed<pos:position pos:line="52" pos:column="50"/></name> <argument_list pos:line="52" pos:column="51">(<argument><expr><name pos:line="52" pos:column="52">mctx<pos:position pos:line="52" pos:column="56"/></name></expr></argument>,
						   <argument><expr><name pos:line="53" pos:column="52">bkref_str_off<pos:position pos:line="53" pos:column="65"/></name>
						   <operator pos:line="54" pos:column="52">+<pos:position pos:line="54" pos:column="53"/></operator> <name pos:line="54" pos:column="54">sl_str_diff<pos:position pos:line="54" pos:column="65"/></name></expr></argument>)<pos:position pos:line="54" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="67"/></expr_stmt>
		  <if pos:line="55" pos:column="19">if <condition pos:line="55" pos:column="22">(<expr><call><name pos:line="55" pos:column="23">BE<pos:position pos:line="55" pos:column="25"/></name> <argument_list pos:line="55" pos:column="26">(<argument><expr><name pos:line="55" pos:column="27">err<pos:position pos:line="55" pos:column="30"/></name> <operator pos:line="55" pos:column="31">!=<pos:position pos:line="55" pos:column="33"/></operator> <name pos:line="55" pos:column="34">REG_NOERROR<pos:position pos:line="55" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="47">0<pos:position pos:line="55" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="50"/></condition><then pos:line="55" pos:column="50">
		    <block type="pseudo"><return pos:line="56" pos:column="21">return <expr><name pos:line="56" pos:column="28">err<pos:position pos:line="56" pos:column="31"/></name></expr>;<pos:position pos:line="56" pos:column="32"/></return></block></then></if>
		  <expr_stmt><expr><name pos:line="57" pos:column="19">buf<pos:position pos:line="57" pos:column="22"/></name> <operator pos:line="57" pos:column="23">=<pos:position pos:line="57" pos:column="24"/></operator> <operator pos:line="57" pos:column="25">(<pos:position pos:line="57" pos:column="26"/></operator><specifier pos:line="57" pos:column="26">const<pos:position pos:line="57" pos:column="31"/></specifier> <name pos:line="57" pos:column="32">char<pos:position pos:line="57" pos:column="36"/></name> <operator pos:line="57" pos:column="37">*<pos:position pos:line="57" pos:column="38"/></operator><operator pos:line="57" pos:column="38">)<pos:position pos:line="57" pos:column="39"/></operator> <call><name pos:line="57" pos:column="40">re_string_get_buffer<pos:position pos:line="57" pos:column="60"/></name> <argument_list pos:line="57" pos:column="61">(<argument><expr><operator pos:line="57" pos:column="62">&amp;<pos:position pos:line="57" pos:column="67"/></operator><name><name pos:line="57" pos:column="63">mctx<pos:position pos:line="57" pos:column="67"/></name><operator pos:line="57" pos:column="67">-&gt;<pos:position pos:line="57" pos:column="72"/></operator><name pos:line="57" pos:column="69">input<pos:position pos:line="57" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="76"/></expr_stmt>
		}<pos:position pos:line="58" pos:column="18"/></block></then></if>
	      <if pos:line="59" pos:column="15">if <condition pos:line="59" pos:column="18">(<expr><call><name pos:line="59" pos:column="19">memcmp<pos:position pos:line="59" pos:column="25"/></name> <argument_list pos:line="59" pos:column="26">(<argument><expr><name pos:line="59" pos:column="27">buf<pos:position pos:line="59" pos:column="30"/></name> <operator pos:line="59" pos:column="31">+<pos:position pos:line="59" pos:column="32"/></operator> <name pos:line="59" pos:column="33">bkref_str_off<pos:position pos:line="59" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="48">buf<pos:position pos:line="59" pos:column="51"/></name> <operator pos:line="59" pos:column="52">+<pos:position pos:line="59" pos:column="53"/></operator> <name pos:line="59" pos:column="54">sl_str<pos:position pos:line="59" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="62">sl_str_diff<pos:position pos:line="59" pos:column="73"/></name></expr></argument>)<pos:position pos:line="59" pos:column="74"/></argument_list></call> <operator pos:line="59" pos:column="75">!=<pos:position pos:line="59" pos:column="77"/></operator> <literal type="number" pos:line="59" pos:column="78">0<pos:position pos:line="59" pos:column="79"/></literal></expr>)<pos:position pos:line="59" pos:column="80"/></condition><then pos:line="59" pos:column="80">
		<comment type="block" pos:line="60" pos:column="17">/* We don't need to search this sub expression any more.  */</comment>
		<block type="pseudo"><break pos:line="61" pos:column="17">break;<pos:position pos:line="61" pos:column="23"/></break></block></then></if>
	    }<pos:position pos:line="62" pos:column="14"/></block></then></if>
	  <expr_stmt><expr><name pos:line="63" pos:column="11">bkref_str_off<pos:position pos:line="63" pos:column="24"/></name> <operator pos:line="63" pos:column="25">+=<pos:position pos:line="63" pos:column="27"/></operator> <name pos:line="63" pos:column="28">sl_str_diff<pos:position pos:line="63" pos:column="39"/></name></expr>;<pos:position pos:line="63" pos:column="40"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="64" pos:column="11">sl_str<pos:position pos:line="64" pos:column="17"/></name> <operator pos:line="64" pos:column="18">+=<pos:position pos:line="64" pos:column="20"/></operator> <name pos:line="64" pos:column="21">sl_str_diff<pos:position pos:line="64" pos:column="32"/></name></expr>;<pos:position pos:line="64" pos:column="33"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="65" pos:column="11">err<pos:position pos:line="65" pos:column="14"/></name> <operator pos:line="65" pos:column="15">=<pos:position pos:line="65" pos:column="16"/></operator> <call><name pos:line="65" pos:column="17">get_subexp_sub<pos:position pos:line="65" pos:column="31"/></name> <argument_list pos:line="65" pos:column="32">(<argument><expr><name pos:line="65" pos:column="33">mctx<pos:position pos:line="65" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="39">sub_top<pos:position pos:line="65" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="48">sub_last<pos:position pos:line="65" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="58">bkref_node<pos:position pos:line="65" pos:column="68"/></name></expr></argument>,
				<argument><expr><name pos:line="66" pos:column="33">bkref_str_idx<pos:position pos:line="66" pos:column="46"/></name></expr></argument>)<pos:position pos:line="66" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="48"/></expr_stmt>

	  <comment type="block" pos:line="68" pos:column="11">/* Reload buf, since the preceding call might have reallocated
	     the buffer.  */</comment>
	  <expr_stmt><expr><name pos:line="70" pos:column="11">buf<pos:position pos:line="70" pos:column="14"/></name> <operator pos:line="70" pos:column="15">=<pos:position pos:line="70" pos:column="16"/></operator> <operator pos:line="70" pos:column="17">(<pos:position pos:line="70" pos:column="18"/></operator><specifier pos:line="70" pos:column="18">const<pos:position pos:line="70" pos:column="23"/></specifier> <name pos:line="70" pos:column="24">char<pos:position pos:line="70" pos:column="28"/></name> <operator pos:line="70" pos:column="29">*<pos:position pos:line="70" pos:column="30"/></operator><operator pos:line="70" pos:column="30">)<pos:position pos:line="70" pos:column="31"/></operator> <call><name pos:line="70" pos:column="32">re_string_get_buffer<pos:position pos:line="70" pos:column="52"/></name> <argument_list pos:line="70" pos:column="53">(<argument><expr><operator pos:line="70" pos:column="54">&amp;<pos:position pos:line="70" pos:column="59"/></operator><name><name pos:line="70" pos:column="55">mctx<pos:position pos:line="70" pos:column="59"/></name><operator pos:line="70" pos:column="59">-&gt;<pos:position pos:line="70" pos:column="64"/></operator><name pos:line="70" pos:column="61">input<pos:position pos:line="70" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="68"/></expr_stmt>

	  <if pos:line="72" pos:column="11">if <condition pos:line="72" pos:column="14">(<expr><name pos:line="72" pos:column="15">err<pos:position pos:line="72" pos:column="18"/></name> <operator pos:line="72" pos:column="19">==<pos:position pos:line="72" pos:column="21"/></operator> <name pos:line="72" pos:column="22">REG_NOMATCH<pos:position pos:line="72" pos:column="33"/></name></expr>)<pos:position pos:line="72" pos:column="34"/></condition><then pos:line="72" pos:column="34">
	    <block type="pseudo"><continue pos:line="73" pos:column="13">continue;<pos:position pos:line="73" pos:column="22"/></continue></block></then></if>
	  <if pos:line="74" pos:column="11">if <condition pos:line="74" pos:column="14">(<expr><call><name pos:line="74" pos:column="15">BE<pos:position pos:line="74" pos:column="17"/></name> <argument_list pos:line="74" pos:column="18">(<argument><expr><name pos:line="74" pos:column="19">err<pos:position pos:line="74" pos:column="22"/></name> <operator pos:line="74" pos:column="23">!=<pos:position pos:line="74" pos:column="25"/></operator> <name pos:line="74" pos:column="26">REG_NOERROR<pos:position pos:line="74" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="39">0<pos:position pos:line="74" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="42"/></condition><then pos:line="74" pos:column="42">
	    <block type="pseudo"><return pos:line="75" pos:column="13">return <expr><name pos:line="75" pos:column="20">err<pos:position pos:line="75" pos:column="23"/></name></expr>;<pos:position pos:line="75" pos:column="24"/></return></block></then></if>
	}<pos:position pos:line="76" pos:column="10"/></block></for>

      <if pos:line="78" pos:column="7">if <condition pos:line="78" pos:column="10">(<expr><name pos:line="78" pos:column="11">sub_last_idx<pos:position pos:line="78" pos:column="23"/></name> <operator pos:line="78" pos:column="24">&lt;<pos:position pos:line="78" pos:column="28"/></operator> <name><name pos:line="78" pos:column="26">sub_top<pos:position pos:line="78" pos:column="33"/></name><operator pos:line="78" pos:column="33">-&gt;<pos:position pos:line="78" pos:column="38"/></operator><name pos:line="78" pos:column="35">nlasts<pos:position pos:line="78" pos:column="41"/></name></name></expr>)<pos:position pos:line="78" pos:column="42"/></condition><then pos:line="78" pos:column="42">
	<block type="pseudo"><continue pos:line="79" pos:column="9">continue;<pos:position pos:line="79" pos:column="18"/></continue></block></then></if>
      <if pos:line="80" pos:column="7">if <condition pos:line="80" pos:column="10">(<expr><name pos:line="80" pos:column="11">sub_last_idx<pos:position pos:line="80" pos:column="23"/></name> <operator pos:line="80" pos:column="24">&gt;<pos:position pos:line="80" pos:column="28"/></operator> <literal type="number" pos:line="80" pos:column="26">0<pos:position pos:line="80" pos:column="27"/></literal></expr>)<pos:position pos:line="80" pos:column="28"/></condition><then pos:line="80" pos:column="28">
	<block type="pseudo"><expr_stmt><expr><operator pos:line="81" pos:column="9">++<pos:position pos:line="81" pos:column="11"/></operator><name pos:line="81" pos:column="11">sl_str<pos:position pos:line="81" pos:column="17"/></name></expr>;<pos:position pos:line="81" pos:column="18"/></expr_stmt></block></then></if>
      <comment type="block" pos:line="82" pos:column="7">/* Then, search for the other last nodes of the sub expression.  */</comment>
      <for pos:line="83" pos:column="7">for <control pos:line="83" pos:column="11">(<init pos:line="83" pos:column="12">;<pos:position pos:line="83" pos:column="13"/></init> <condition><expr><name pos:line="83" pos:column="14">sl_str<pos:position pos:line="83" pos:column="20"/></name> <operator pos:line="83" pos:column="21">&lt;=<pos:position pos:line="83" pos:column="26"/></operator> <name pos:line="83" pos:column="24">bkref_str_idx<pos:position pos:line="83" pos:column="37"/></name></expr>;<pos:position pos:line="83" pos:column="38"/></condition> <incr><expr><operator pos:line="83" pos:column="39">++<pos:position pos:line="83" pos:column="41"/></operator><name pos:line="83" pos:column="41">sl_str<pos:position pos:line="83" pos:column="47"/></name></expr></incr>)<pos:position pos:line="83" pos:column="48"/></control>
	<block pos:line="84" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="85" pos:column="11">int<pos:position pos:line="85" pos:column="14"/></name></type> <name pos:line="85" pos:column="15">cls_node<pos:position pos:line="85" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="85" pos:column="25">sl_str_off<pos:position pos:line="85" pos:column="35"/></name></decl>;<pos:position pos:line="85" pos:column="36"/></decl_stmt>
	  <decl_stmt><decl><type><specifier pos:line="86" pos:column="11">const<pos:position pos:line="86" pos:column="16"/></specifier> <name pos:line="86" pos:column="17">re_node_set<pos:position pos:line="86" pos:column="28"/></name> <modifier pos:line="86" pos:column="29">*<pos:position pos:line="86" pos:column="30"/></modifier></type><name pos:line="86" pos:column="30">nodes<pos:position pos:line="86" pos:column="35"/></name></decl>;<pos:position pos:line="86" pos:column="36"/></decl_stmt>
	  <expr_stmt><expr><name pos:line="87" pos:column="11">sl_str_off<pos:position pos:line="87" pos:column="21"/></name> <operator pos:line="87" pos:column="22">=<pos:position pos:line="87" pos:column="23"/></operator> <name pos:line="87" pos:column="24">sl_str<pos:position pos:line="87" pos:column="30"/></name> <operator pos:line="87" pos:column="31">-<pos:position pos:line="87" pos:column="32"/></operator> <name><name pos:line="87" pos:column="33">sub_top<pos:position pos:line="87" pos:column="40"/></name><operator pos:line="87" pos:column="40">-&gt;<pos:position pos:line="87" pos:column="45"/></operator><name pos:line="87" pos:column="42">str_idx<pos:position pos:line="87" pos:column="49"/></name></name></expr>;<pos:position pos:line="87" pos:column="50"/></expr_stmt>
	  <comment type="block" pos:line="88" pos:column="11">/* The matched string by the sub expression match with the substring
	     at the back reference?  */</comment>
	  <if pos:line="90" pos:column="11">if <condition pos:line="90" pos:column="14">(<expr><name pos:line="90" pos:column="15">sl_str_off<pos:position pos:line="90" pos:column="25"/></name> <operator pos:line="90" pos:column="26">&gt;<pos:position pos:line="90" pos:column="30"/></operator> <literal type="number" pos:line="90" pos:column="28">0<pos:position pos:line="90" pos:column="29"/></literal></expr>)<pos:position pos:line="90" pos:column="30"/></condition><then pos:line="90" pos:column="30">
	    <block pos:line="91" pos:column="13">{
	      <if pos:line="92" pos:column="15">if <condition pos:line="92" pos:column="18">(<expr><call><name pos:line="92" pos:column="19">BE<pos:position pos:line="92" pos:column="21"/></name> <argument_list pos:line="92" pos:column="22">(<argument><expr><name pos:line="92" pos:column="23">bkref_str_off<pos:position pos:line="92" pos:column="36"/></name> <operator pos:line="92" pos:column="37">&gt;=<pos:position pos:line="92" pos:column="42"/></operator> <name><name pos:line="92" pos:column="40">mctx<pos:position pos:line="92" pos:column="44"/></name><operator pos:line="92" pos:column="44">-&gt;<pos:position pos:line="92" pos:column="49"/></operator><name pos:line="92" pos:column="46">input<pos:position pos:line="92" pos:column="51"/></name><operator pos:line="92" pos:column="51">.<pos:position pos:line="92" pos:column="52"/></operator><name pos:line="92" pos:column="52">valid_len<pos:position pos:line="92" pos:column="61"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="92" pos:column="63">0<pos:position pos:line="92" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="92" pos:column="66"/></condition><then pos:line="92" pos:column="66">
		<block pos:line="93" pos:column="17">{
		  <comment type="block" pos:line="94" pos:column="19">/* If we are at the end of the input, we cannot match.  */</comment>
		  <if pos:line="95" pos:column="19">if <condition pos:line="95" pos:column="22">(<expr><name pos:line="95" pos:column="23">bkref_str_off<pos:position pos:line="95" pos:column="36"/></name> <operator pos:line="95" pos:column="37">&gt;=<pos:position pos:line="95" pos:column="42"/></operator> <name><name pos:line="95" pos:column="40">mctx<pos:position pos:line="95" pos:column="44"/></name><operator pos:line="95" pos:column="44">-&gt;<pos:position pos:line="95" pos:column="49"/></operator><name pos:line="95" pos:column="46">input<pos:position pos:line="95" pos:column="51"/></name><operator pos:line="95" pos:column="51">.<pos:position pos:line="95" pos:column="52"/></operator><name pos:line="95" pos:column="52">len<pos:position pos:line="95" pos:column="55"/></name></name></expr>)<pos:position pos:line="95" pos:column="56"/></condition><then pos:line="95" pos:column="56">
		    <block type="pseudo"><break pos:line="96" pos:column="21">break;<pos:position pos:line="96" pos:column="27"/></break></block></then></if>

		  <expr_stmt><expr><name pos:line="98" pos:column="19">err<pos:position pos:line="98" pos:column="22"/></name> <operator pos:line="98" pos:column="23">=<pos:position pos:line="98" pos:column="24"/></operator> <call><name pos:line="98" pos:column="25">extend_buffers<pos:position pos:line="98" pos:column="39"/></name> <argument_list pos:line="98" pos:column="40">(<argument><expr><name pos:line="98" pos:column="41">mctx<pos:position pos:line="98" pos:column="45"/></name></expr></argument>)<pos:position pos:line="98" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="47"/></expr_stmt>
		  <if pos:line="99" pos:column="19">if <condition pos:line="99" pos:column="22">(<expr><call><name pos:line="99" pos:column="23">BE<pos:position pos:line="99" pos:column="25"/></name> <argument_list pos:line="99" pos:column="26">(<argument><expr><name pos:line="99" pos:column="27">err<pos:position pos:line="99" pos:column="30"/></name> <operator pos:line="99" pos:column="31">!=<pos:position pos:line="99" pos:column="33"/></operator> <name pos:line="99" pos:column="34">REG_NOERROR<pos:position pos:line="99" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="99" pos:column="47">0<pos:position pos:line="99" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="99" pos:column="50"/></condition><then pos:line="99" pos:column="50">
		    <block type="pseudo"><return pos:line="100" pos:column="21">return <expr><name pos:line="100" pos:column="28">err<pos:position pos:line="100" pos:column="31"/></name></expr>;<pos:position pos:line="100" pos:column="32"/></return></block></then></if>

		  <expr_stmt><expr><name pos:line="102" pos:column="19">buf<pos:position pos:line="102" pos:column="22"/></name> <operator pos:line="102" pos:column="23">=<pos:position pos:line="102" pos:column="24"/></operator> <operator pos:line="102" pos:column="25">(<pos:position pos:line="102" pos:column="26"/></operator><specifier pos:line="102" pos:column="26">const<pos:position pos:line="102" pos:column="31"/></specifier> <name pos:line="102" pos:column="32">char<pos:position pos:line="102" pos:column="36"/></name> <operator pos:line="102" pos:column="37">*<pos:position pos:line="102" pos:column="38"/></operator><operator pos:line="102" pos:column="38">)<pos:position pos:line="102" pos:column="39"/></operator> <call><name pos:line="102" pos:column="40">re_string_get_buffer<pos:position pos:line="102" pos:column="60"/></name> <argument_list pos:line="102" pos:column="61">(<argument><expr><operator pos:line="102" pos:column="62">&amp;<pos:position pos:line="102" pos:column="67"/></operator><name><name pos:line="102" pos:column="63">mctx<pos:position pos:line="102" pos:column="67"/></name><operator pos:line="102" pos:column="67">-&gt;<pos:position pos:line="102" pos:column="72"/></operator><name pos:line="102" pos:column="69">input<pos:position pos:line="102" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="102" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="76"/></expr_stmt>
		}<pos:position pos:line="103" pos:column="18"/></block></then></if>
	      <if pos:line="104" pos:column="15">if <condition pos:line="104" pos:column="18">(<expr><name><name pos:line="104" pos:column="19">buf<pos:position pos:line="104" pos:column="22"/></name> <index pos:line="104" pos:column="23">[<expr><name pos:line="104" pos:column="24">bkref_str_off<pos:position pos:line="104" pos:column="37"/></name><operator pos:line="104" pos:column="37">++<pos:position pos:line="104" pos:column="39"/></operator></expr>]<pos:position pos:line="104" pos:column="40"/></index></name> <operator pos:line="104" pos:column="41">!=<pos:position pos:line="104" pos:column="43"/></operator> <name><name pos:line="104" pos:column="44">buf<pos:position pos:line="104" pos:column="47"/></name><index pos:line="104" pos:column="47">[<expr><name pos:line="104" pos:column="48">sl_str<pos:position pos:line="104" pos:column="54"/></name> <operator pos:line="104" pos:column="55">-<pos:position pos:line="104" pos:column="56"/></operator> <literal type="number" pos:line="104" pos:column="57">1<pos:position pos:line="104" pos:column="58"/></literal></expr>]<pos:position pos:line="104" pos:column="59"/></index></name></expr>)<pos:position pos:line="104" pos:column="60"/></condition><then pos:line="104" pos:column="60">
		<block type="pseudo"><break pos:line="105" pos:column="17">break;<pos:position pos:line="105" pos:column="23"/></break></block></then></if> <comment type="block" pos:line="105" pos:column="24">/* We don't need to search this sub expression
			  any more.  */</comment>
	    }<pos:position pos:line="107" pos:column="14"/></block></then></if>
	  <if pos:line="108" pos:column="11">if <condition pos:line="108" pos:column="14">(<expr><name><name pos:line="108" pos:column="15">mctx<pos:position pos:line="108" pos:column="19"/></name><operator pos:line="108" pos:column="19">-&gt;<pos:position pos:line="108" pos:column="24"/></operator><name pos:line="108" pos:column="21">state_log<pos:position pos:line="108" pos:column="30"/></name><index pos:line="108" pos:column="30">[<expr><name pos:line="108" pos:column="31">sl_str<pos:position pos:line="108" pos:column="37"/></name></expr>]<pos:position pos:line="108" pos:column="38"/></index></name> <operator pos:line="108" pos:column="39">==<pos:position pos:line="108" pos:column="41"/></operator> <name pos:line="108" pos:column="42">NULL<pos:position pos:line="108" pos:column="46"/></name></expr>)<pos:position pos:line="108" pos:column="47"/></condition><then pos:line="108" pos:column="47">
	    <block type="pseudo"><continue pos:line="109" pos:column="13">continue;<pos:position pos:line="109" pos:column="22"/></continue></block></then></if>
	  <comment type="block" pos:line="110" pos:column="11">/* Does this state have a ')' of the sub expression?  */</comment>
	  <expr_stmt><expr><name pos:line="111" pos:column="11">nodes<pos:position pos:line="111" pos:column="16"/></name> <operator pos:line="111" pos:column="17">=<pos:position pos:line="111" pos:column="18"/></operator> <operator pos:line="111" pos:column="19">&amp;<pos:position pos:line="111" pos:column="24"/></operator><name><name pos:line="111" pos:column="20">mctx<pos:position pos:line="111" pos:column="24"/></name><operator pos:line="111" pos:column="24">-&gt;<pos:position pos:line="111" pos:column="29"/></operator><name pos:line="111" pos:column="26">state_log<pos:position pos:line="111" pos:column="35"/></name><index pos:line="111" pos:column="35">[<expr><name pos:line="111" pos:column="36">sl_str<pos:position pos:line="111" pos:column="42"/></name></expr>]<pos:position pos:line="111" pos:column="43"/></index></name><operator pos:line="111" pos:column="43">-&gt;<pos:position pos:line="111" pos:column="48"/></operator><name pos:line="111" pos:column="45">nodes<pos:position pos:line="111" pos:column="50"/></name></expr>;<pos:position pos:line="111" pos:column="51"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="112" pos:column="11">cls_node<pos:position pos:line="112" pos:column="19"/></name> <operator pos:line="112" pos:column="20">=<pos:position pos:line="112" pos:column="21"/></operator> <call><name pos:line="112" pos:column="22">find_subexp_node<pos:position pos:line="112" pos:column="38"/></name> <argument_list pos:line="112" pos:column="39">(<argument><expr><name pos:line="112" pos:column="40">dfa<pos:position pos:line="112" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="45">nodes<pos:position pos:line="112" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="52">subexp_num<pos:position pos:line="112" pos:column="62"/></name></expr></argument>,
				       <argument><expr><name pos:line="113" pos:column="40">OP_CLOSE_SUBEXP<pos:position pos:line="113" pos:column="55"/></name></expr></argument>)<pos:position pos:line="113" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="57"/></expr_stmt>
	  <if pos:line="114" pos:column="11">if <condition pos:line="114" pos:column="14">(<expr><name pos:line="114" pos:column="15">cls_node<pos:position pos:line="114" pos:column="23"/></name> <operator pos:line="114" pos:column="24">==<pos:position pos:line="114" pos:column="26"/></operator> <operator pos:line="114" pos:column="27">-<pos:position pos:line="114" pos:column="28"/></operator><literal type="number" pos:line="114" pos:column="28">1<pos:position pos:line="114" pos:column="29"/></literal></expr>)<pos:position pos:line="114" pos:column="30"/></condition><then pos:line="114" pos:column="30">
	    <block type="pseudo"><continue pos:line="115" pos:column="13">continue;<pos:position pos:line="115" pos:column="22"/></continue></block></then></if> <comment type="block" pos:line="115" pos:column="23">/* No.  */</comment>
	  <if pos:line="116" pos:column="11">if <condition pos:line="116" pos:column="14">(<expr><name><name pos:line="116" pos:column="15">sub_top<pos:position pos:line="116" pos:column="22"/></name><operator pos:line="116" pos:column="22">-&gt;<pos:position pos:line="116" pos:column="27"/></operator><name pos:line="116" pos:column="24">path<pos:position pos:line="116" pos:column="28"/></name></name> <operator pos:line="116" pos:column="29">==<pos:position pos:line="116" pos:column="31"/></operator> <name pos:line="116" pos:column="32">NULL<pos:position pos:line="116" pos:column="36"/></name></expr>)<pos:position pos:line="116" pos:column="37"/></condition><then pos:line="116" pos:column="37">
	    <block pos:line="117" pos:column="13">{
	      <expr_stmt><expr><name><name pos:line="118" pos:column="15">sub_top<pos:position pos:line="118" pos:column="22"/></name><operator pos:line="118" pos:column="22">-&gt;<pos:position pos:line="118" pos:column="27"/></operator><name pos:line="118" pos:column="24">path<pos:position pos:line="118" pos:column="28"/></name></name> <operator pos:line="118" pos:column="29">=<pos:position pos:line="118" pos:column="30"/></operator> <call><name pos:line="118" pos:column="31">calloc<pos:position pos:line="118" pos:column="37"/></name> <argument_list pos:line="118" pos:column="38">(<argument><expr><sizeof pos:line="118" pos:column="39">sizeof <argument_list pos:line="118" pos:column="46">(<argument><expr><name pos:line="118" pos:column="47">state_array_t<pos:position pos:line="118" pos:column="60"/></name></expr></argument>)<pos:position pos:line="118" pos:column="61"/></argument_list></sizeof></expr></argument>,
				      <argument><expr><name pos:line="119" pos:column="39">sl_str<pos:position pos:line="119" pos:column="45"/></name> <operator pos:line="119" pos:column="46">-<pos:position pos:line="119" pos:column="47"/></operator> <name><name pos:line="119" pos:column="48">sub_top<pos:position pos:line="119" pos:column="55"/></name><operator pos:line="119" pos:column="55">-&gt;<pos:position pos:line="119" pos:column="60"/></operator><name pos:line="119" pos:column="57">str_idx<pos:position pos:line="119" pos:column="64"/></name></name> <operator pos:line="119" pos:column="65">+<pos:position pos:line="119" pos:column="66"/></operator> <literal type="number" pos:line="119" pos:column="67">1<pos:position pos:line="119" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="70"/></expr_stmt>
	      <if pos:line="120" pos:column="15">if <condition pos:line="120" pos:column="18">(<expr><name><name pos:line="120" pos:column="19">sub_top<pos:position pos:line="120" pos:column="26"/></name><operator pos:line="120" pos:column="26">-&gt;<pos:position pos:line="120" pos:column="31"/></operator><name pos:line="120" pos:column="28">path<pos:position pos:line="120" pos:column="32"/></name></name> <operator pos:line="120" pos:column="33">==<pos:position pos:line="120" pos:column="35"/></operator> <name pos:line="120" pos:column="36">NULL<pos:position pos:line="120" pos:column="40"/></name></expr>)<pos:position pos:line="120" pos:column="41"/></condition><then pos:line="120" pos:column="41">
		<block type="pseudo"><return pos:line="121" pos:column="17">return <expr><name pos:line="121" pos:column="24">REG_ESPACE<pos:position pos:line="121" pos:column="34"/></name></expr>;<pos:position pos:line="121" pos:column="35"/></return></block></then></if>
	    }<pos:position pos:line="122" pos:column="14"/></block></then></if>
	  <comment type="block" pos:line="123" pos:column="11">/* Can the OP_OPEN_SUBEXP node arrive the OP_CLOSE_SUBEXP node
	     in the current context?  */</comment>
	  <expr_stmt><expr><name pos:line="125" pos:column="11">err<pos:position pos:line="125" pos:column="14"/></name> <operator pos:line="125" pos:column="15">=<pos:position pos:line="125" pos:column="16"/></operator> <call><name pos:line="125" pos:column="17">check_arrival<pos:position pos:line="125" pos:column="30"/></name> <argument_list pos:line="125" pos:column="31">(<argument><expr><name pos:line="125" pos:column="32">mctx<pos:position pos:line="125" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="125" pos:column="38">sub_top<pos:position pos:line="125" pos:column="45"/></name><operator pos:line="125" pos:column="45">-&gt;<pos:position pos:line="125" pos:column="50"/></operator><name pos:line="125" pos:column="47">path<pos:position pos:line="125" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="125" pos:column="53">sub_top<pos:position pos:line="125" pos:column="60"/></name><operator pos:line="125" pos:column="60">-&gt;<pos:position pos:line="125" pos:column="65"/></operator><name pos:line="125" pos:column="62">node<pos:position pos:line="125" pos:column="66"/></name></name></expr></argument>,
			       <argument><expr><name><name pos:line="126" pos:column="32">sub_top<pos:position pos:line="126" pos:column="39"/></name><operator pos:line="126" pos:column="39">-&gt;<pos:position pos:line="126" pos:column="44"/></operator><name pos:line="126" pos:column="41">str_idx<pos:position pos:line="126" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="50">cls_node<pos:position pos:line="126" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="60">sl_str<pos:position pos:line="126" pos:column="66"/></name></expr></argument>,
			       <argument><expr><name pos:line="127" pos:column="32">OP_CLOSE_SUBEXP<pos:position pos:line="127" pos:column="47"/></name></expr></argument>)<pos:position pos:line="127" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="49"/></expr_stmt>
	  <if pos:line="128" pos:column="11">if <condition pos:line="128" pos:column="14">(<expr><name pos:line="128" pos:column="15">err<pos:position pos:line="128" pos:column="18"/></name> <operator pos:line="128" pos:column="19">==<pos:position pos:line="128" pos:column="21"/></operator> <name pos:line="128" pos:column="22">REG_NOMATCH<pos:position pos:line="128" pos:column="33"/></name></expr>)<pos:position pos:line="128" pos:column="34"/></condition><then pos:line="128" pos:column="34">
	      <block type="pseudo"><continue pos:line="129" pos:column="15">continue;<pos:position pos:line="129" pos:column="24"/></continue></block></then></if>
	  <if pos:line="130" pos:column="11">if <condition pos:line="130" pos:column="14">(<expr><call><name pos:line="130" pos:column="15">BE<pos:position pos:line="130" pos:column="17"/></name> <argument_list pos:line="130" pos:column="18">(<argument><expr><name pos:line="130" pos:column="19">err<pos:position pos:line="130" pos:column="22"/></name> <operator pos:line="130" pos:column="23">!=<pos:position pos:line="130" pos:column="25"/></operator> <name pos:line="130" pos:column="26">REG_NOERROR<pos:position pos:line="130" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="130" pos:column="39">0<pos:position pos:line="130" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="130" pos:column="42"/></condition><then pos:line="130" pos:column="42">
	      <block type="pseudo"><return pos:line="131" pos:column="15">return <expr><name pos:line="131" pos:column="22">err<pos:position pos:line="131" pos:column="25"/></name></expr>;<pos:position pos:line="131" pos:column="26"/></return></block></then></if>
	  <expr_stmt><expr><name pos:line="132" pos:column="11">sub_last<pos:position pos:line="132" pos:column="19"/></name> <operator pos:line="132" pos:column="20">=<pos:position pos:line="132" pos:column="21"/></operator> <call><name pos:line="132" pos:column="22">match_ctx_add_sublast<pos:position pos:line="132" pos:column="43"/></name> <argument_list pos:line="132" pos:column="44">(<argument><expr><name pos:line="132" pos:column="45">sub_top<pos:position pos:line="132" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="54">cls_node<pos:position pos:line="132" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="64">sl_str<pos:position pos:line="132" pos:column="70"/></name></expr></argument>)<pos:position pos:line="132" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="72"/></expr_stmt>
	  <if pos:line="133" pos:column="11">if <condition pos:line="133" pos:column="14">(<expr><call><name pos:line="133" pos:column="15">BE<pos:position pos:line="133" pos:column="17"/></name> <argument_list pos:line="133" pos:column="18">(<argument><expr><name pos:line="133" pos:column="19">sub_last<pos:position pos:line="133" pos:column="27"/></name> <operator pos:line="133" pos:column="28">==<pos:position pos:line="133" pos:column="30"/></operator> <name pos:line="133" pos:column="31">NULL<pos:position pos:line="133" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="133" pos:column="37">0<pos:position pos:line="133" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="133" pos:column="40"/></condition><then pos:line="133" pos:column="40">
	    <block type="pseudo"><return pos:line="134" pos:column="13">return <expr><name pos:line="134" pos:column="20">REG_ESPACE<pos:position pos:line="134" pos:column="30"/></name></expr>;<pos:position pos:line="134" pos:column="31"/></return></block></then></if>
	  <expr_stmt><expr><name pos:line="135" pos:column="11">err<pos:position pos:line="135" pos:column="14"/></name> <operator pos:line="135" pos:column="15">=<pos:position pos:line="135" pos:column="16"/></operator> <call><name pos:line="135" pos:column="17">get_subexp_sub<pos:position pos:line="135" pos:column="31"/></name> <argument_list pos:line="135" pos:column="32">(<argument><expr><name pos:line="135" pos:column="33">mctx<pos:position pos:line="135" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="39">sub_top<pos:position pos:line="135" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="48">sub_last<pos:position pos:line="135" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="58">bkref_node<pos:position pos:line="135" pos:column="68"/></name></expr></argument>,
				<argument><expr><name pos:line="136" pos:column="33">bkref_str_idx<pos:position pos:line="136" pos:column="46"/></name></expr></argument>)<pos:position pos:line="136" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="48"/></expr_stmt>
	  <if pos:line="137" pos:column="11">if <condition pos:line="137" pos:column="14">(<expr><name pos:line="137" pos:column="15">err<pos:position pos:line="137" pos:column="18"/></name> <operator pos:line="137" pos:column="19">==<pos:position pos:line="137" pos:column="21"/></operator> <name pos:line="137" pos:column="22">REG_NOMATCH<pos:position pos:line="137" pos:column="33"/></name></expr>)<pos:position pos:line="137" pos:column="34"/></condition><then pos:line="137" pos:column="34">
	    <block type="pseudo"><continue pos:line="138" pos:column="13">continue;<pos:position pos:line="138" pos:column="22"/></continue></block></then></if>
	}<pos:position pos:line="139" pos:column="10"/></block></for>
    }<pos:position pos:line="140" pos:column="6"/></block></for>
  <return pos:line="141" pos:column="3">return <expr><name pos:line="141" pos:column="10">REG_NOERROR<pos:position pos:line="141" pos:column="21"/></name></expr>;<pos:position pos:line="141" pos:column="22"/></return>
}<pos:position pos:line="142" pos:column="2"/></block></function></unit>
