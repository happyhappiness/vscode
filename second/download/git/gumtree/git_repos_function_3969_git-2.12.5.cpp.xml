<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3969_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">unique_in_pack<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">packed_git<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">p<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>,
			   <parameter><decl><type><name><name pos:line="2" pos:column="28">struct<pos:position pos:line="2" pos:column="34"/></name> <name pos:line="2" pos:column="35">disambiguate_state<pos:position pos:line="2" pos:column="53"/></name></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">ds<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="58"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">uint32_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">num<pos:position pos:line="4" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="23">last<pos:position pos:line="4" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="29">i<pos:position pos:line="4" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="32">first<pos:position pos:line="4" pos:column="37"/></name> <init pos:line="4" pos:column="38">= <expr><literal type="number" pos:line="4" pos:column="40">0<pos:position pos:line="4" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">unsigned<pos:position pos:line="5" pos:column="23"/></name> <name pos:line="5" pos:column="24">char<pos:position pos:line="5" pos:column="28"/></name> <modifier pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="30">current<pos:position pos:line="5" pos:column="37"/></name> <init pos:line="5" pos:column="38">= <expr><name pos:line="5" pos:column="40">NULL<pos:position pos:line="5" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">open_pack_index<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">(<argument><expr><name pos:line="7" pos:column="25">p<pos:position pos:line="7" pos:column="26"/></name></expr></argument>)<pos:position pos:line="7" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name pos:line="8" pos:column="9">num<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">=<pos:position pos:line="8" pos:column="14"/></operator> <name><name pos:line="8" pos:column="15">p<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">-&gt;<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="18">num_objects<pos:position pos:line="8" pos:column="29"/></name></name></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name pos:line="9" pos:column="9">last<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <name pos:line="9" pos:column="16">num<pos:position pos:line="9" pos:column="19"/></name></expr>;<pos:position pos:line="9" pos:column="20"/></expr_stmt>
	<while pos:line="10" pos:column="9">while <condition pos:line="10" pos:column="15">(<expr><name pos:line="10" pos:column="16">first<pos:position pos:line="10" pos:column="21"/></name> <operator pos:line="10" pos:column="22">&lt;<pos:position pos:line="10" pos:column="26"/></operator> <name pos:line="10" pos:column="24">last<pos:position pos:line="10" pos:column="28"/></name></expr>)<pos:position pos:line="10" pos:column="29"/></condition> <block pos:line="10" pos:column="30">{
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">uint32_t<pos:position pos:line="11" pos:column="25"/></name></type> <name pos:line="11" pos:column="26">mid<pos:position pos:line="11" pos:column="29"/></name> <init pos:line="11" pos:column="30">= <expr><operator pos:line="11" pos:column="32">(<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="33">first<pos:position pos:line="11" pos:column="38"/></name> <operator pos:line="11" pos:column="39">+<pos:position pos:line="11" pos:column="40"/></operator> <name pos:line="11" pos:column="41">last<pos:position pos:line="11" pos:column="45"/></name><operator pos:line="11" pos:column="45">)<pos:position pos:line="11" pos:column="46"/></operator> <operator pos:line="11" pos:column="47">/<pos:position pos:line="11" pos:column="48"/></operator> <literal type="number" pos:line="11" pos:column="49">2<pos:position pos:line="11" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="51"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="12" pos:column="17">const<pos:position pos:line="12" pos:column="22"/></specifier> <name pos:line="12" pos:column="23">unsigned<pos:position pos:line="12" pos:column="31"/></name> <name pos:line="12" pos:column="32">char<pos:position pos:line="12" pos:column="36"/></name> <modifier pos:line="12" pos:column="37">*<pos:position pos:line="12" pos:column="38"/></modifier></type><name pos:line="12" pos:column="38">current<pos:position pos:line="12" pos:column="45"/></name></decl>;<pos:position pos:line="12" pos:column="46"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">int<pos:position pos:line="13" pos:column="20"/></name></type> <name pos:line="13" pos:column="21">cmp<pos:position pos:line="13" pos:column="24"/></name></decl>;<pos:position pos:line="13" pos:column="25"/></decl_stmt>

		<expr_stmt><expr><name pos:line="15" pos:column="17">current<pos:position pos:line="15" pos:column="24"/></name> <operator pos:line="15" pos:column="25">=<pos:position pos:line="15" pos:column="26"/></operator> <call><name pos:line="15" pos:column="27">nth_packed_object_sha1<pos:position pos:line="15" pos:column="49"/></name><argument_list pos:line="15" pos:column="49">(<argument><expr><name pos:line="15" pos:column="50">p<pos:position pos:line="15" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="53">mid<pos:position pos:line="15" pos:column="56"/></name></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><name pos:line="16" pos:column="17">cmp<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <call><name pos:line="16" pos:column="23">hashcmp<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><name><name pos:line="16" pos:column="31">ds<pos:position pos:line="16" pos:column="33"/></name><operator pos:line="16" pos:column="33">-&gt;<pos:position pos:line="16" pos:column="38"/></operator><name pos:line="16" pos:column="35">bin_pfx<pos:position pos:line="16" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="44">current<pos:position pos:line="16" pos:column="51"/></name></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="53"/></expr_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="22">cmp<pos:position pos:line="17" pos:column="25"/></name></expr>)<pos:position pos:line="17" pos:column="26"/></condition><then pos:line="17" pos:column="26"> <block pos:line="17" pos:column="27">{
			<expr_stmt><expr><name pos:line="18" pos:column="25">first<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">=<pos:position pos:line="18" pos:column="32"/></operator> <name pos:line="18" pos:column="33">mid<pos:position pos:line="18" pos:column="36"/></name></expr>;<pos:position pos:line="18" pos:column="37"/></expr_stmt>
			<break pos:line="19" pos:column="25">break;<pos:position pos:line="19" pos:column="31"/></break>
		}<pos:position pos:line="20" pos:column="18"/></block></then></if>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name pos:line="21" pos:column="21">cmp<pos:position pos:line="21" pos:column="24"/></name> <operator pos:line="21" pos:column="25">&gt;<pos:position pos:line="21" pos:column="29"/></operator> <literal type="number" pos:line="21" pos:column="27">0<pos:position pos:line="21" pos:column="28"/></literal></expr>)<pos:position pos:line="21" pos:column="29"/></condition><then pos:line="21" pos:column="29"> <block pos:line="21" pos:column="30">{
			<expr_stmt><expr><name pos:line="22" pos:column="25">first<pos:position pos:line="22" pos:column="30"/></name> <operator pos:line="22" pos:column="31">=<pos:position pos:line="22" pos:column="32"/></operator> <name pos:line="22" pos:column="33">mid<pos:position pos:line="22" pos:column="36"/></name><operator pos:line="22" pos:column="36">+<pos:position pos:line="22" pos:column="37"/></operator><literal type="number" pos:line="22" pos:column="37">1<pos:position pos:line="22" pos:column="38"/></literal></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt>
			<continue pos:line="23" pos:column="25">continue;<pos:position pos:line="23" pos:column="34"/></continue>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="25" pos:column="17">last<pos:position pos:line="25" pos:column="21"/></name> <operator pos:line="25" pos:column="22">=<pos:position pos:line="25" pos:column="23"/></operator> <name pos:line="25" pos:column="24">mid<pos:position pos:line="25" pos:column="27"/></name></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="26" pos:column="10"/></block></while>

	<comment type="block" pos:line="28" pos:column="9">/*
	 * At this point, "first" is the location of the lowest object
	 * with an object name that could match "bin_pfx".  See if we have
	 * 0, 1 or more objects that actually match(es).
	 */</comment>
	<for pos:line="33" pos:column="9">for <control pos:line="33" pos:column="13">(<init><expr><name pos:line="33" pos:column="14">i<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">=<pos:position pos:line="33" pos:column="17"/></operator> <name pos:line="33" pos:column="18">first<pos:position pos:line="33" pos:column="23"/></name></expr>;<pos:position pos:line="33" pos:column="24"/></init> <condition><expr><name pos:line="33" pos:column="25">i<pos:position pos:line="33" pos:column="26"/></name> <operator pos:line="33" pos:column="27">&lt;<pos:position pos:line="33" pos:column="31"/></operator> <name pos:line="33" pos:column="29">num<pos:position pos:line="33" pos:column="32"/></name> <operator pos:line="33" pos:column="33">&amp;&amp;<pos:position pos:line="33" pos:column="43"/></operator> <operator pos:line="33" pos:column="36">!<pos:position pos:line="33" pos:column="37"/></operator><name><name pos:line="33" pos:column="37">ds<pos:position pos:line="33" pos:column="39"/></name><operator pos:line="33" pos:column="39">-&gt;<pos:position pos:line="33" pos:column="44"/></operator><name pos:line="33" pos:column="41">ambiguous<pos:position pos:line="33" pos:column="50"/></name></name></expr>;<pos:position pos:line="33" pos:column="51"/></condition> <incr><expr><name pos:line="33" pos:column="52">i<pos:position pos:line="33" pos:column="53"/></name><operator pos:line="33" pos:column="53">++<pos:position pos:line="33" pos:column="55"/></operator></expr></incr>)<pos:position pos:line="33" pos:column="56"/></control> <block pos:line="33" pos:column="57">{
		<expr_stmt><expr><name pos:line="34" pos:column="17">current<pos:position pos:line="34" pos:column="24"/></name> <operator pos:line="34" pos:column="25">=<pos:position pos:line="34" pos:column="26"/></operator> <call><name pos:line="34" pos:column="27">nth_packed_object_sha1<pos:position pos:line="34" pos:column="49"/></name><argument_list pos:line="34" pos:column="49">(<argument><expr><name pos:line="34" pos:column="50">p<pos:position pos:line="34" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="53">i<pos:position pos:line="34" pos:column="54"/></name></expr></argument>)<pos:position pos:line="34" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="56"/></expr_stmt>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><operator pos:line="35" pos:column="21">!<pos:position pos:line="35" pos:column="22"/></operator><call><name pos:line="35" pos:column="22">match_sha<pos:position pos:line="35" pos:column="31"/></name><argument_list pos:line="35" pos:column="31">(<argument><expr><name><name pos:line="35" pos:column="32">ds<pos:position pos:line="35" pos:column="34"/></name><operator pos:line="35" pos:column="34">-&gt;<pos:position pos:line="35" pos:column="39"/></operator><name pos:line="35" pos:column="36">len<pos:position pos:line="35" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="41">ds<pos:position pos:line="35" pos:column="43"/></name><operator pos:line="35" pos:column="43">-&gt;<pos:position pos:line="35" pos:column="48"/></operator><name pos:line="35" pos:column="45">bin_pfx<pos:position pos:line="35" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="54">current<pos:position pos:line="35" pos:column="61"/></name></expr></argument>)<pos:position pos:line="35" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="63"/></condition><then pos:line="35" pos:column="63">
			<block type="pseudo"><break pos:line="36" pos:column="25">break;<pos:position pos:line="36" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">update_candidates<pos:position pos:line="37" pos:column="34"/></name><argument_list pos:line="37" pos:column="34">(<argument><expr><name pos:line="37" pos:column="35">ds<pos:position pos:line="37" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="39">current<pos:position pos:line="37" pos:column="46"/></name></expr></argument>)<pos:position pos:line="37" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="48"/></expr_stmt>
	}<pos:position pos:line="38" pos:column="10"/></block></for>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
