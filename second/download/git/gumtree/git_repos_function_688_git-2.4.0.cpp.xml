<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_688_git-2.4.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">cleanup_children<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">sig<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="38"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<while pos:line="3" pos:column="9">while <condition pos:line="3" pos:column="15">(<expr><name pos:line="3" pos:column="16">children_to_clean<pos:position pos:line="3" pos:column="33"/></name></expr>)<pos:position pos:line="3" pos:column="34"/></condition> <block pos:line="3" pos:column="35">{
		<decl_stmt><decl><type><name><name pos:line="4" pos:column="17">struct<pos:position pos:line="4" pos:column="23"/></name> <name pos:line="4" pos:column="24">child_to_clean<pos:position pos:line="4" pos:column="38"/></name></name> <modifier pos:line="4" pos:column="39">*<pos:position pos:line="4" pos:column="40"/></modifier></type><name pos:line="4" pos:column="40">p<pos:position pos:line="4" pos:column="41"/></name> <init pos:line="4" pos:column="42">= <expr><name pos:line="4" pos:column="44">children_to_clean<pos:position pos:line="4" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="62"/></decl_stmt>
		<expr_stmt><expr><name pos:line="5" pos:column="17">children_to_clean<pos:position pos:line="5" pos:column="34"/></name> <operator pos:line="5" pos:column="35">=<pos:position pos:line="5" pos:column="36"/></operator> <name><name pos:line="5" pos:column="37">p<pos:position pos:line="5" pos:column="38"/></name><operator pos:line="5" pos:column="38">-&gt;<pos:position pos:line="5" pos:column="43"/></operator><name pos:line="5" pos:column="40">next<pos:position pos:line="5" pos:column="44"/></name></name></expr>;<pos:position pos:line="5" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="6" pos:column="17">kill<pos:position pos:line="6" pos:column="21"/></name><argument_list pos:line="6" pos:column="21">(<argument><expr><name><name pos:line="6" pos:column="22">p<pos:position pos:line="6" pos:column="23"/></name><operator pos:line="6" pos:column="23">-&gt;<pos:position pos:line="6" pos:column="28"/></operator><name pos:line="6" pos:column="25">pid<pos:position pos:line="6" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="30">sig<pos:position pos:line="6" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">free<pos:position pos:line="7" pos:column="21"/></name><argument_list pos:line="7" pos:column="21">(<argument><expr><name pos:line="7" pos:column="22">p<pos:position pos:line="7" pos:column="23"/></name></expr></argument>)<pos:position pos:line="7" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="8" pos:column="10"/></block></while>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
