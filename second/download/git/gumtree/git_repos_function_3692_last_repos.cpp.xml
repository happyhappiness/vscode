<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3692_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">addrcmp<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><specifier pos:line="1" pos:column="20">const<pos:position pos:line="1" pos:column="25"/></specifier> <name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">sockaddr_storage<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">s1<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
    <parameter><decl><type><specifier pos:line="2" pos:column="5">const<pos:position pos:line="2" pos:column="10"/></specifier> <name><name pos:line="2" pos:column="11">struct<pos:position pos:line="2" pos:column="17"/></name> <name pos:line="2" pos:column="18">sockaddr_storage<pos:position pos:line="2" pos:column="34"/></name></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">s2<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name><name pos:line="4" pos:column="15">struct<pos:position pos:line="4" pos:column="21"/></name> <name pos:line="4" pos:column="22">sockaddr<pos:position pos:line="4" pos:column="30"/></name></name> <modifier pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></modifier></type><name pos:line="4" pos:column="32">sa1<pos:position pos:line="4" pos:column="35"/></name> <init pos:line="4" pos:column="36">= <expr><operator pos:line="4" pos:column="38">(<pos:position pos:line="4" pos:column="39"/></operator><specifier pos:line="4" pos:column="39">const<pos:position pos:line="4" pos:column="44"/></specifier> struct <name pos:line="4" pos:column="52">sockaddr<pos:position pos:line="4" pos:column="60"/></name><operator pos:line="4" pos:column="60">*<pos:position pos:line="4" pos:column="61"/></operator><operator pos:line="4" pos:column="61">)<pos:position pos:line="4" pos:column="62"/></operator> <name pos:line="4" pos:column="63">s1<pos:position pos:line="4" pos:column="65"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="66"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name><name pos:line="5" pos:column="15">struct<pos:position pos:line="5" pos:column="21"/></name> <name pos:line="5" pos:column="22">sockaddr<pos:position pos:line="5" pos:column="30"/></name></name> <modifier pos:line="5" pos:column="31">*<pos:position pos:line="5" pos:column="32"/></modifier></type><name pos:line="5" pos:column="32">sa2<pos:position pos:line="5" pos:column="35"/></name> <init pos:line="5" pos:column="36">= <expr><operator pos:line="5" pos:column="38">(<pos:position pos:line="5" pos:column="39"/></operator><specifier pos:line="5" pos:column="39">const<pos:position pos:line="5" pos:column="44"/></specifier> struct <name pos:line="5" pos:column="52">sockaddr<pos:position pos:line="5" pos:column="60"/></name><operator pos:line="5" pos:column="60">*<pos:position pos:line="5" pos:column="61"/></operator><operator pos:line="5" pos:column="61">)<pos:position pos:line="5" pos:column="62"/></operator> <name pos:line="5" pos:column="63">s2<pos:position pos:line="5" pos:column="65"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="66"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name><name pos:line="7" pos:column="13">sa1<pos:position pos:line="7" pos:column="16"/></name><operator pos:line="7" pos:column="16">-&gt;<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="18">sa_family<pos:position pos:line="7" pos:column="27"/></name></name> <operator pos:line="7" pos:column="28">!=<pos:position pos:line="7" pos:column="30"/></operator> <name><name pos:line="7" pos:column="31">sa2<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">-&gt;<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="36">sa_family<pos:position pos:line="7" pos:column="45"/></name></name></expr>)<pos:position pos:line="7" pos:column="46"/></condition><then pos:line="7" pos:column="46">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><name><name pos:line="8" pos:column="24">sa1<pos:position pos:line="8" pos:column="27"/></name><operator pos:line="8" pos:column="27">-&gt;<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="29">sa_family<pos:position pos:line="8" pos:column="38"/></name></name> <operator pos:line="8" pos:column="39">-<pos:position pos:line="8" pos:column="40"/></operator> <name><name pos:line="8" pos:column="41">sa2<pos:position pos:line="8" pos:column="44"/></name><operator pos:line="8" pos:column="44">-&gt;<pos:position pos:line="8" pos:column="49"/></operator><name pos:line="8" pos:column="46">sa_family<pos:position pos:line="8" pos:column="55"/></name></name></expr>;<pos:position pos:line="8" pos:column="56"/></return></block></then></if>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name><name pos:line="9" pos:column="13">sa1<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">-&gt;<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="18">sa_family<pos:position pos:line="9" pos:column="27"/></name></name> <operator pos:line="9" pos:column="28">==<pos:position pos:line="9" pos:column="30"/></operator> <name pos:line="9" pos:column="31">AF_INET<pos:position pos:line="9" pos:column="38"/></name></expr>)<pos:position pos:line="9" pos:column="39"/></condition><then pos:line="9" pos:column="39">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><call><name pos:line="10" pos:column="24">memcmp<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><operator pos:line="10" pos:column="31">&amp;<pos:position pos:line="10" pos:column="36"/></operator><operator pos:line="10" pos:column="32">(<pos:position pos:line="10" pos:column="33"/></operator><operator pos:line="10" pos:column="33">(<pos:position pos:line="10" pos:column="34"/></operator>struct <name pos:line="10" pos:column="41">sockaddr_in<pos:position pos:line="10" pos:column="52"/></name> <operator pos:line="10" pos:column="53">*<pos:position pos:line="10" pos:column="54"/></operator><operator pos:line="10" pos:column="54">)<pos:position pos:line="10" pos:column="55"/></operator><name pos:line="10" pos:column="55">s1<pos:position pos:line="10" pos:column="57"/></name><operator pos:line="10" pos:column="57">)<pos:position pos:line="10" pos:column="58"/></operator><operator pos:line="10" pos:column="58">-&gt;<pos:position pos:line="10" pos:column="63"/></operator><name pos:line="10" pos:column="60">sin_addr<pos:position pos:line="10" pos:column="68"/></name></expr></argument>,
		    <argument><expr><operator pos:line="11" pos:column="21">&amp;<pos:position pos:line="11" pos:column="26"/></operator><operator pos:line="11" pos:column="22">(<pos:position pos:line="11" pos:column="23"/></operator><operator pos:line="11" pos:column="23">(<pos:position pos:line="11" pos:column="24"/></operator>struct <name pos:line="11" pos:column="31">sockaddr_in<pos:position pos:line="11" pos:column="42"/></name> <operator pos:line="11" pos:column="43">*<pos:position pos:line="11" pos:column="44"/></operator><operator pos:line="11" pos:column="44">)<pos:position pos:line="11" pos:column="45"/></operator><name pos:line="11" pos:column="45">s2<pos:position pos:line="11" pos:column="47"/></name><operator pos:line="11" pos:column="47">)<pos:position pos:line="11" pos:column="48"/></operator><operator pos:line="11" pos:column="48">-&gt;<pos:position pos:line="11" pos:column="53"/></operator><name pos:line="11" pos:column="50">sin_addr<pos:position pos:line="11" pos:column="58"/></name></expr></argument>,
		    <argument><expr><sizeof pos:line="12" pos:column="21">sizeof<argument_list pos:line="12" pos:column="27">(<argument><expr pos:line="12" pos:column="28">struct <name pos:line="12" pos:column="35">in_addr<pos:position pos:line="12" pos:column="42"/></name></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="45"/></return></block></then></if>
<cpp:ifndef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifndef<pos:position pos:line="13" pos:column="8"/></cpp:directive> <name pos:line="13" pos:column="9">NO_IPV6<pos:position pos:line="13" pos:column="16"/></name></cpp:ifndef>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name><name pos:line="14" pos:column="13">sa1<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">-&gt;<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="18">sa_family<pos:position pos:line="14" pos:column="27"/></name></name> <operator pos:line="14" pos:column="28">==<pos:position pos:line="14" pos:column="30"/></operator> <name pos:line="14" pos:column="31">AF_INET6<pos:position pos:line="14" pos:column="39"/></name></expr>)<pos:position pos:line="14" pos:column="40"/></condition><then pos:line="14" pos:column="40">
		<block type="pseudo"><return pos:line="15" pos:column="17">return <expr><call><name pos:line="15" pos:column="24">memcmp<pos:position pos:line="15" pos:column="30"/></name><argument_list pos:line="15" pos:column="30">(<argument><expr><operator pos:line="15" pos:column="31">&amp;<pos:position pos:line="15" pos:column="36"/></operator><operator pos:line="15" pos:column="32">(<pos:position pos:line="15" pos:column="33"/></operator><operator pos:line="15" pos:column="33">(<pos:position pos:line="15" pos:column="34"/></operator>struct <name pos:line="15" pos:column="41">sockaddr_in6<pos:position pos:line="15" pos:column="53"/></name> <operator pos:line="15" pos:column="54">*<pos:position pos:line="15" pos:column="55"/></operator><operator pos:line="15" pos:column="55">)<pos:position pos:line="15" pos:column="56"/></operator><name pos:line="15" pos:column="56">s1<pos:position pos:line="15" pos:column="58"/></name><operator pos:line="15" pos:column="58">)<pos:position pos:line="15" pos:column="59"/></operator><operator pos:line="15" pos:column="59">-&gt;<pos:position pos:line="15" pos:column="64"/></operator><name pos:line="15" pos:column="61">sin6_addr<pos:position pos:line="15" pos:column="70"/></name></expr></argument>,
		    <argument><expr><operator pos:line="16" pos:column="21">&amp;<pos:position pos:line="16" pos:column="26"/></operator><operator pos:line="16" pos:column="22">(<pos:position pos:line="16" pos:column="23"/></operator><operator pos:line="16" pos:column="23">(<pos:position pos:line="16" pos:column="24"/></operator>struct <name pos:line="16" pos:column="31">sockaddr_in6<pos:position pos:line="16" pos:column="43"/></name> <operator pos:line="16" pos:column="44">*<pos:position pos:line="16" pos:column="45"/></operator><operator pos:line="16" pos:column="45">)<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="46">s2<pos:position pos:line="16" pos:column="48"/></name><operator pos:line="16" pos:column="48">)<pos:position pos:line="16" pos:column="49"/></operator><operator pos:line="16" pos:column="49">-&gt;<pos:position pos:line="16" pos:column="54"/></operator><name pos:line="16" pos:column="51">sin6_addr<pos:position pos:line="16" pos:column="60"/></name></expr></argument>,
		    <argument><expr><sizeof pos:line="17" pos:column="21">sizeof<argument_list pos:line="17" pos:column="27">(<argument><expr pos:line="17" pos:column="28">struct <name pos:line="17" pos:column="35">in6_addr<pos:position pos:line="17" pos:column="43"/></name></expr></argument>)<pos:position pos:line="17" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="46"/></return></block></then></if>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
	<return pos:line="19" pos:column="9">return <expr><literal type="number" pos:line="19" pos:column="16">0<pos:position pos:line="19" pos:column="17"/></literal></expr>;<pos:position pos:line="19" pos:column="18"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
