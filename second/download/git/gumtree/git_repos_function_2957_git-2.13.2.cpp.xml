<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2957_git-2.13.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">find_trailer_start<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">buf<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">size_t<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">len<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">s<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">end_of_title<pos:position pos:line="4" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="27">l<pos:position pos:line="4" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="30">only_spaces<pos:position pos:line="4" pos:column="41"/></name> <init pos:line="4" pos:column="42">= <expr><literal type="number" pos:line="4" pos:column="44">1<pos:position pos:line="4" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">recognized_prefix<pos:position pos:line="5" pos:column="30"/></name> <init pos:line="5" pos:column="31">= <expr><literal type="number" pos:line="5" pos:column="33">0<pos:position pos:line="5" pos:column="34"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="36">trailer_lines<pos:position pos:line="5" pos:column="49"/></name> <init pos:line="5" pos:column="50">= <expr><literal type="number" pos:line="5" pos:column="52">0<pos:position pos:line="5" pos:column="53"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="55">non_trailer_lines<pos:position pos:line="5" pos:column="72"/></name> <init pos:line="5" pos:column="73">= <expr><literal type="number" pos:line="5" pos:column="75">0<pos:position pos:line="5" pos:column="76"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="77"/></decl_stmt>
	<comment type="block" pos:line="6" pos:column="9">/*
	 * Number of possible continuation lines encountered. This will be
	 * reset to 0 if we encounter a trailer (since those lines are to be
	 * considered continuations of that trailer), and added to
	 * non_trailer_lines if we encounter a non-trailer (since those lines
	 * are to be considered non-trailers).
	 */</comment>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">possible_continuation_lines<pos:position pos:line="13" pos:column="40"/></name> <init pos:line="13" pos:column="41">= <expr><literal type="number" pos:line="13" pos:column="43">0<pos:position pos:line="13" pos:column="44"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="45"/></decl_stmt>

	<comment type="block" pos:line="15" pos:column="9">/* The first paragraph is the title and cannot be trailers */</comment>
	<for pos:line="16" pos:column="9">for <control pos:line="16" pos:column="13">(<init><expr><name pos:line="16" pos:column="14">s<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <name pos:line="16" pos:column="18">buf<pos:position pos:line="16" pos:column="21"/></name></expr>;<pos:position pos:line="16" pos:column="22"/></init> <condition><expr><name pos:line="16" pos:column="23">s<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">&lt;<pos:position pos:line="16" pos:column="29"/></operator> <name pos:line="16" pos:column="27">buf<pos:position pos:line="16" pos:column="30"/></name> <operator pos:line="16" pos:column="31">+<pos:position pos:line="16" pos:column="32"/></operator> <name pos:line="16" pos:column="33">len<pos:position pos:line="16" pos:column="36"/></name></expr>;<pos:position pos:line="16" pos:column="37"/></condition> <incr><expr><name pos:line="16" pos:column="38">s<pos:position pos:line="16" pos:column="39"/></name> <operator pos:line="16" pos:column="40">=<pos:position pos:line="16" pos:column="41"/></operator> <call><name pos:line="16" pos:column="42">next_line<pos:position pos:line="16" pos:column="51"/></name><argument_list pos:line="16" pos:column="51">(<argument><expr><name pos:line="16" pos:column="52">s<pos:position pos:line="16" pos:column="53"/></name></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call></expr></incr>)<pos:position pos:line="16" pos:column="55"/></control> <block pos:line="16" pos:column="56">{
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name><name pos:line="17" pos:column="21">s<pos:position pos:line="17" pos:column="22"/></name><index pos:line="17" pos:column="22">[<expr><literal type="number" pos:line="17" pos:column="23">0<pos:position pos:line="17" pos:column="24"/></literal></expr>]<pos:position pos:line="17" pos:column="25"/></index></name> <operator pos:line="17" pos:column="26">==<pos:position pos:line="17" pos:column="28"/></operator> <name pos:line="17" pos:column="29">comment_line_char<pos:position pos:line="17" pos:column="46"/></name></expr>)<pos:position pos:line="17" pos:column="47"/></condition><then pos:line="17" pos:column="47">
			<block type="pseudo"><continue pos:line="18" pos:column="25">continue;<pos:position pos:line="18" pos:column="34"/></continue></block></then></if>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><call><name pos:line="19" pos:column="21">is_blank_line<pos:position pos:line="19" pos:column="34"/></name><argument_list pos:line="19" pos:column="34">(<argument><expr><name pos:line="19" pos:column="35">s<pos:position pos:line="19" pos:column="36"/></name></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="38"/></condition><then pos:line="19" pos:column="38">
			<block type="pseudo"><break pos:line="20" pos:column="25">break;<pos:position pos:line="20" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="21" pos:column="10"/></block></for>
	<expr_stmt><expr><name pos:line="22" pos:column="9">end_of_title<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">=<pos:position pos:line="22" pos:column="23"/></operator> <name pos:line="22" pos:column="24">s<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">-<pos:position pos:line="22" pos:column="27"/></operator> <name pos:line="22" pos:column="28">buf<pos:position pos:line="22" pos:column="31"/></name></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>

	<comment type="block" pos:line="24" pos:column="9">/*
	 * Get the start of the trailers by looking starting from the end for a
	 * blank line before a set of non-blank lines that (i) are all
	 * trailers, or (ii) contains at least one Git-generated trailer and
	 * consists of at least 25% trailers.
	 */</comment>
	<for pos:line="30" pos:column="9">for <control pos:line="30" pos:column="13">(<init><expr><name pos:line="30" pos:column="14">l<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <call><name pos:line="30" pos:column="18">last_line<pos:position pos:line="30" pos:column="27"/></name><argument_list pos:line="30" pos:column="27">(<argument><expr><name pos:line="30" pos:column="28">buf<pos:position pos:line="30" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="33">len<pos:position pos:line="30" pos:column="36"/></name></expr></argument>)<pos:position pos:line="30" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="38"/></init>
	     <condition><expr><name pos:line="31" pos:column="14">l<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">&gt;=<pos:position pos:line="31" pos:column="21"/></operator> <name pos:line="31" pos:column="19">end_of_title<pos:position pos:line="31" pos:column="31"/></name></expr>;<pos:position pos:line="31" pos:column="32"/></condition>
	     <incr><expr><name pos:line="32" pos:column="14">l<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">=<pos:position pos:line="32" pos:column="17"/></operator> <call><name pos:line="32" pos:column="18">last_line<pos:position pos:line="32" pos:column="27"/></name><argument_list pos:line="32" pos:column="27">(<argument><expr><name pos:line="32" pos:column="28">buf<pos:position pos:line="32" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="33">l<pos:position pos:line="32" pos:column="34"/></name></expr></argument>)<pos:position pos:line="32" pos:column="35"/></argument_list></call></expr></incr>)<pos:position pos:line="32" pos:column="36"/></control> <block pos:line="32" pos:column="37">{
		<decl_stmt><decl><type><specifier pos:line="33" pos:column="17">const<pos:position pos:line="33" pos:column="22"/></specifier> <name pos:line="33" pos:column="23">char<pos:position pos:line="33" pos:column="27"/></name> <modifier pos:line="33" pos:column="28">*<pos:position pos:line="33" pos:column="29"/></modifier></type><name pos:line="33" pos:column="29">bol<pos:position pos:line="33" pos:column="32"/></name> <init pos:line="33" pos:column="33">= <expr><name pos:line="33" pos:column="35">buf<pos:position pos:line="33" pos:column="38"/></name> <operator pos:line="33" pos:column="39">+<pos:position pos:line="33" pos:column="40"/></operator> <name pos:line="33" pos:column="41">l<pos:position pos:line="33" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="33" pos:column="43"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="34" pos:column="17">const<pos:position pos:line="34" pos:column="22"/></specifier> <name pos:line="34" pos:column="23">char<pos:position pos:line="34" pos:column="27"/></name> <modifier pos:line="34" pos:column="28">*<pos:position pos:line="34" pos:column="29"/></modifier><modifier pos:line="34" pos:column="29">*<pos:position pos:line="34" pos:column="30"/></modifier></type><name pos:line="34" pos:column="30">p<pos:position pos:line="34" pos:column="31"/></name></decl>;<pos:position pos:line="34" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="35" pos:column="17">int<pos:position pos:line="35" pos:column="20"/></name></type> <name pos:line="35" pos:column="21">separator_pos<pos:position pos:line="35" pos:column="34"/></name></decl>;<pos:position pos:line="35" pos:column="35"/></decl_stmt>

		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><name><name pos:line="37" pos:column="21">bol<pos:position pos:line="37" pos:column="24"/></name><index pos:line="37" pos:column="24">[<expr><literal type="number" pos:line="37" pos:column="25">0<pos:position pos:line="37" pos:column="26"/></literal></expr>]<pos:position pos:line="37" pos:column="27"/></index></name> <operator pos:line="37" pos:column="28">==<pos:position pos:line="37" pos:column="30"/></operator> <name pos:line="37" pos:column="31">comment_line_char<pos:position pos:line="37" pos:column="48"/></name></expr>)<pos:position pos:line="37" pos:column="49"/></condition><then pos:line="37" pos:column="49"> <block pos:line="37" pos:column="50">{
			<expr_stmt><expr><name pos:line="38" pos:column="25">non_trailer_lines<pos:position pos:line="38" pos:column="42"/></name> <operator pos:line="38" pos:column="43">+=<pos:position pos:line="38" pos:column="45"/></operator> <name pos:line="38" pos:column="46">possible_continuation_lines<pos:position pos:line="38" pos:column="73"/></name></expr>;<pos:position pos:line="38" pos:column="74"/></expr_stmt>
			<expr_stmt><expr><name pos:line="39" pos:column="25">possible_continuation_lines<pos:position pos:line="39" pos:column="52"/></name> <operator pos:line="39" pos:column="53">=<pos:position pos:line="39" pos:column="54"/></operator> <literal type="number" pos:line="39" pos:column="55">0<pos:position pos:line="39" pos:column="56"/></literal></expr>;<pos:position pos:line="39" pos:column="57"/></expr_stmt>
			<continue pos:line="40" pos:column="25">continue;<pos:position pos:line="40" pos:column="34"/></continue>
		}<pos:position pos:line="41" pos:column="18"/></block></then></if>
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><call><name pos:line="42" pos:column="21">is_blank_line<pos:position pos:line="42" pos:column="34"/></name><argument_list pos:line="42" pos:column="34">(<argument><expr><name pos:line="42" pos:column="35">bol<pos:position pos:line="42" pos:column="38"/></name></expr></argument>)<pos:position pos:line="42" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="40"/></condition><then pos:line="42" pos:column="40"> <block pos:line="42" pos:column="41">{
			<if pos:line="43" pos:column="25">if <condition pos:line="43" pos:column="28">(<expr><name pos:line="43" pos:column="29">only_spaces<pos:position pos:line="43" pos:column="40"/></name></expr>)<pos:position pos:line="43" pos:column="41"/></condition><then pos:line="43" pos:column="41">
				<block type="pseudo"><continue pos:line="44" pos:column="33">continue;<pos:position pos:line="44" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="45" pos:column="25">non_trailer_lines<pos:position pos:line="45" pos:column="42"/></name> <operator pos:line="45" pos:column="43">+=<pos:position pos:line="45" pos:column="45"/></operator> <name pos:line="45" pos:column="46">possible_continuation_lines<pos:position pos:line="45" pos:column="73"/></name></expr>;<pos:position pos:line="45" pos:column="74"/></expr_stmt>
			<if pos:line="46" pos:column="25">if <condition pos:line="46" pos:column="28">(<expr><name pos:line="46" pos:column="29">recognized_prefix<pos:position pos:line="46" pos:column="46"/></name> <operator pos:line="46" pos:column="47">&amp;&amp;<pos:position pos:line="46" pos:column="57"/></operator>
			    <name pos:line="47" pos:column="29">trailer_lines<pos:position pos:line="47" pos:column="42"/></name> <operator pos:line="47" pos:column="43">*<pos:position pos:line="47" pos:column="44"/></operator> <literal type="number" pos:line="47" pos:column="45">3<pos:position pos:line="47" pos:column="46"/></literal> <operator pos:line="47" pos:column="47">&gt;=<pos:position pos:line="47" pos:column="52"/></operator> <name pos:line="47" pos:column="50">non_trailer_lines<pos:position pos:line="47" pos:column="67"/></name></expr>)<pos:position pos:line="47" pos:column="68"/></condition><then pos:line="47" pos:column="68">
				<block type="pseudo"><return pos:line="48" pos:column="33">return <expr><call><name pos:line="48" pos:column="40">next_line<pos:position pos:line="48" pos:column="49"/></name><argument_list pos:line="48" pos:column="49">(<argument><expr><name pos:line="48" pos:column="50">bol<pos:position pos:line="48" pos:column="53"/></name></expr></argument>)<pos:position pos:line="48" pos:column="54"/></argument_list></call> <operator pos:line="48" pos:column="55">-<pos:position pos:line="48" pos:column="56"/></operator> <name pos:line="48" pos:column="57">buf<pos:position pos:line="48" pos:column="60"/></name></expr>;<pos:position pos:line="48" pos:column="61"/></return></block></then>
			<elseif pos:line="49" pos:column="25">else <if pos:line="49" pos:column="30">if <condition pos:line="49" pos:column="33">(<expr><name pos:line="49" pos:column="34">trailer_lines<pos:position pos:line="49" pos:column="47"/></name> <operator pos:line="49" pos:column="48">&amp;&amp;<pos:position pos:line="49" pos:column="58"/></operator> <operator pos:line="49" pos:column="51">!<pos:position pos:line="49" pos:column="52"/></operator><name pos:line="49" pos:column="52">non_trailer_lines<pos:position pos:line="49" pos:column="69"/></name></expr>)<pos:position pos:line="49" pos:column="70"/></condition><then pos:line="49" pos:column="70">
				<block type="pseudo"><return pos:line="50" pos:column="33">return <expr><call><name pos:line="50" pos:column="40">next_line<pos:position pos:line="50" pos:column="49"/></name><argument_list pos:line="50" pos:column="49">(<argument><expr><name pos:line="50" pos:column="50">bol<pos:position pos:line="50" pos:column="53"/></name></expr></argument>)<pos:position pos:line="50" pos:column="54"/></argument_list></call> <operator pos:line="50" pos:column="55">-<pos:position pos:line="50" pos:column="56"/></operator> <name pos:line="50" pos:column="57">buf<pos:position pos:line="50" pos:column="60"/></name></expr>;<pos:position pos:line="50" pos:column="61"/></return></block></then></if></elseif></if>
			<return pos:line="51" pos:column="25">return <expr><name pos:line="51" pos:column="32">len<pos:position pos:line="51" pos:column="35"/></name></expr>;<pos:position pos:line="51" pos:column="36"/></return>
		}<pos:position pos:line="52" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="53" pos:column="17">only_spaces<pos:position pos:line="53" pos:column="28"/></name> <operator pos:line="53" pos:column="29">=<pos:position pos:line="53" pos:column="30"/></operator> <literal type="number" pos:line="53" pos:column="31">0<pos:position pos:line="53" pos:column="32"/></literal></expr>;<pos:position pos:line="53" pos:column="33"/></expr_stmt>

		<for pos:line="55" pos:column="17">for <control pos:line="55" pos:column="21">(<init><expr><name pos:line="55" pos:column="22">p<pos:position pos:line="55" pos:column="23"/></name> <operator pos:line="55" pos:column="24">=<pos:position pos:line="55" pos:column="25"/></operator> <name pos:line="55" pos:column="26">git_generated_prefixes<pos:position pos:line="55" pos:column="48"/></name></expr>;<pos:position pos:line="55" pos:column="49"/></init> <condition><expr><operator pos:line="55" pos:column="50">*<pos:position pos:line="55" pos:column="51"/></operator><name pos:line="55" pos:column="51">p<pos:position pos:line="55" pos:column="52"/></name></expr>;<pos:position pos:line="55" pos:column="53"/></condition> <incr><expr><name pos:line="55" pos:column="54">p<pos:position pos:line="55" pos:column="55"/></name><operator pos:line="55" pos:column="55">++<pos:position pos:line="55" pos:column="57"/></operator></expr></incr>)<pos:position pos:line="55" pos:column="58"/></control> <block pos:line="55" pos:column="59">{
			<if pos:line="56" pos:column="25">if <condition pos:line="56" pos:column="28">(<expr><call><name pos:line="56" pos:column="29">starts_with<pos:position pos:line="56" pos:column="40"/></name><argument_list pos:line="56" pos:column="40">(<argument><expr><name pos:line="56" pos:column="41">bol<pos:position pos:line="56" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="46">*<pos:position pos:line="56" pos:column="47"/></operator><name pos:line="56" pos:column="47">p<pos:position pos:line="56" pos:column="48"/></name></expr></argument>)<pos:position pos:line="56" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="50"/></condition><then pos:line="56" pos:column="50"> <block pos:line="56" pos:column="51">{
				<expr_stmt><expr><name pos:line="57" pos:column="33">trailer_lines<pos:position pos:line="57" pos:column="46"/></name><operator pos:line="57" pos:column="46">++<pos:position pos:line="57" pos:column="48"/></operator></expr>;<pos:position pos:line="57" pos:column="49"/></expr_stmt>
				<expr_stmt><expr><name pos:line="58" pos:column="33">possible_continuation_lines<pos:position pos:line="58" pos:column="60"/></name> <operator pos:line="58" pos:column="61">=<pos:position pos:line="58" pos:column="62"/></operator> <literal type="number" pos:line="58" pos:column="63">0<pos:position pos:line="58" pos:column="64"/></literal></expr>;<pos:position pos:line="58" pos:column="65"/></expr_stmt>
				<expr_stmt><expr><name pos:line="59" pos:column="33">recognized_prefix<pos:position pos:line="59" pos:column="50"/></name> <operator pos:line="59" pos:column="51">=<pos:position pos:line="59" pos:column="52"/></operator> <literal type="number" pos:line="59" pos:column="53">1<pos:position pos:line="59" pos:column="54"/></literal></expr>;<pos:position pos:line="59" pos:column="55"/></expr_stmt>
				<goto pos:line="60" pos:column="33">goto <name pos:line="60" pos:column="38">continue_outer_loop<pos:position pos:line="60" pos:column="57"/></name>;<pos:position pos:line="60" pos:column="58"/></goto>
			}<pos:position pos:line="61" pos:column="26"/></block></then></if>
		}<pos:position pos:line="62" pos:column="18"/></block></for>

		<expr_stmt><expr><name pos:line="64" pos:column="17">separator_pos<pos:position pos:line="64" pos:column="30"/></name> <operator pos:line="64" pos:column="31">=<pos:position pos:line="64" pos:column="32"/></operator> <call><name pos:line="64" pos:column="33">find_separator<pos:position pos:line="64" pos:column="47"/></name><argument_list pos:line="64" pos:column="47">(<argument><expr><name pos:line="64" pos:column="48">bol<pos:position pos:line="64" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="53">separators<pos:position pos:line="64" pos:column="63"/></name></expr></argument>)<pos:position pos:line="64" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="65"/></expr_stmt>
		<if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><name pos:line="65" pos:column="21">separator_pos<pos:position pos:line="65" pos:column="34"/></name> <operator pos:line="65" pos:column="35">&gt;=<pos:position pos:line="65" pos:column="40"/></operator> <literal type="number" pos:line="65" pos:column="38">1<pos:position pos:line="65" pos:column="39"/></literal> <operator pos:line="65" pos:column="40">&amp;&amp;<pos:position pos:line="65" pos:column="50"/></operator> <operator pos:line="65" pos:column="43">!<pos:position pos:line="65" pos:column="44"/></operator><call><name pos:line="65" pos:column="44">isspace<pos:position pos:line="65" pos:column="51"/></name><argument_list pos:line="65" pos:column="51">(<argument><expr><name><name pos:line="65" pos:column="52">bol<pos:position pos:line="65" pos:column="55"/></name><index pos:line="65" pos:column="55">[<expr><literal type="number" pos:line="65" pos:column="56">0<pos:position pos:line="65" pos:column="57"/></literal></expr>]<pos:position pos:line="65" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="65" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="60"/></condition><then pos:line="65" pos:column="60"> <block pos:line="65" pos:column="61">{
			<decl_stmt><decl><type><name><name pos:line="66" pos:column="25">struct<pos:position pos:line="66" pos:column="31"/></name> <name pos:line="66" pos:column="32">list_head<pos:position pos:line="66" pos:column="41"/></name></name> <modifier pos:line="66" pos:column="42">*<pos:position pos:line="66" pos:column="43"/></modifier></type><name pos:line="66" pos:column="43">pos<pos:position pos:line="66" pos:column="46"/></name></decl>;<pos:position pos:line="66" pos:column="47"/></decl_stmt>

			<expr_stmt><expr><name pos:line="68" pos:column="25">trailer_lines<pos:position pos:line="68" pos:column="38"/></name><operator pos:line="68" pos:column="38">++<pos:position pos:line="68" pos:column="40"/></operator></expr>;<pos:position pos:line="68" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="69" pos:column="25">possible_continuation_lines<pos:position pos:line="69" pos:column="52"/></name> <operator pos:line="69" pos:column="53">=<pos:position pos:line="69" pos:column="54"/></operator> <literal type="number" pos:line="69" pos:column="55">0<pos:position pos:line="69" pos:column="56"/></literal></expr>;<pos:position pos:line="69" pos:column="57"/></expr_stmt>
			<if pos:line="70" pos:column="25">if <condition pos:line="70" pos:column="28">(<expr><name pos:line="70" pos:column="29">recognized_prefix<pos:position pos:line="70" pos:column="46"/></name></expr>)<pos:position pos:line="70" pos:column="47"/></condition><then pos:line="70" pos:column="47">
				<block type="pseudo"><continue pos:line="71" pos:column="33">continue;<pos:position pos:line="71" pos:column="42"/></continue></block></then></if>
			<macro><name pos:line="72" pos:column="25">list_for_each<pos:position pos:line="72" pos:column="38"/></name><argument_list pos:line="72" pos:column="38">(<argument pos:line="72" pos:column="39">pos<pos:position pos:line="72" pos:column="42"/></argument>, <argument pos:line="72" pos:column="44">&amp;conf_head<pos:position pos:line="72" pos:column="54"/></argument>)<pos:position pos:line="72" pos:column="55"/></argument_list></macro> <block pos:line="72" pos:column="56">{
				<decl_stmt><decl><type><name><name pos:line="73" pos:column="33">struct<pos:position pos:line="73" pos:column="39"/></name> <name pos:line="73" pos:column="40">arg_item<pos:position pos:line="73" pos:column="48"/></name></name> <modifier pos:line="73" pos:column="49">*<pos:position pos:line="73" pos:column="50"/></modifier></type><name pos:line="73" pos:column="50">item<pos:position pos:line="73" pos:column="54"/></name></decl>;<pos:position pos:line="73" pos:column="55"/></decl_stmt>
				<expr_stmt><expr><name pos:line="74" pos:column="33">item<pos:position pos:line="74" pos:column="37"/></name> <operator pos:line="74" pos:column="38">=<pos:position pos:line="74" pos:column="39"/></operator> <call><name pos:line="74" pos:column="40">list_entry<pos:position pos:line="74" pos:column="50"/></name><argument_list pos:line="74" pos:column="50">(<argument><expr><name pos:line="74" pos:column="51">pos<pos:position pos:line="74" pos:column="54"/></name></expr></argument>, <argument><expr pos:line="74" pos:column="56">struct <name pos:line="74" pos:column="63">arg_item<pos:position pos:line="74" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="73">list<pos:position pos:line="74" pos:column="77"/></name></expr></argument>)<pos:position pos:line="74" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="79"/></expr_stmt>
				<if pos:line="75" pos:column="33">if <condition pos:line="75" pos:column="36">(<expr><call><name pos:line="75" pos:column="37">token_matches_item<pos:position pos:line="75" pos:column="55"/></name><argument_list pos:line="75" pos:column="55">(<argument><expr><name pos:line="75" pos:column="56">bol<pos:position pos:line="75" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="61">item<pos:position pos:line="75" pos:column="65"/></name></expr></argument>,
						       <argument><expr><name pos:line="76" pos:column="56">separator_pos<pos:position pos:line="76" pos:column="69"/></name></expr></argument>)<pos:position pos:line="76" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="71"/></condition><then pos:line="76" pos:column="71"> <block pos:line="76" pos:column="72">{
					<expr_stmt><expr><name pos:line="77" pos:column="41">recognized_prefix<pos:position pos:line="77" pos:column="58"/></name> <operator pos:line="77" pos:column="59">=<pos:position pos:line="77" pos:column="60"/></operator> <literal type="number" pos:line="77" pos:column="61">1<pos:position pos:line="77" pos:column="62"/></literal></expr>;<pos:position pos:line="77" pos:column="63"/></expr_stmt>
					<break pos:line="78" pos:column="41">break;<pos:position pos:line="78" pos:column="47"/></break>
				}<pos:position pos:line="79" pos:column="34"/></block></then></if>
			}<pos:position pos:line="80" pos:column="26"/></block>
		}<pos:position pos:line="81" pos:column="18"/></block></then> <elseif pos:line="81" pos:column="19">else <if pos:line="81" pos:column="24">if <condition pos:line="81" pos:column="27">(<expr><call><name pos:line="81" pos:column="28">isspace<pos:position pos:line="81" pos:column="35"/></name><argument_list pos:line="81" pos:column="35">(<argument><expr><name><name pos:line="81" pos:column="36">bol<pos:position pos:line="81" pos:column="39"/></name><index pos:line="81" pos:column="39">[<expr><literal type="number" pos:line="81" pos:column="40">0<pos:position pos:line="81" pos:column="41"/></literal></expr>]<pos:position pos:line="81" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="81" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="44"/></condition><then pos:line="81" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><name pos:line="82" pos:column="25">possible_continuation_lines<pos:position pos:line="82" pos:column="52"/></name><operator pos:line="82" pos:column="52">++<pos:position pos:line="82" pos:column="54"/></operator></expr>;<pos:position pos:line="82" pos:column="55"/></expr_stmt></block></then></if></elseif>
		<else pos:line="83" pos:column="17">else <block pos:line="83" pos:column="22">{
			<expr_stmt><expr><name pos:line="84" pos:column="25">non_trailer_lines<pos:position pos:line="84" pos:column="42"/></name><operator pos:line="84" pos:column="42">++<pos:position pos:line="84" pos:column="44"/></operator></expr>;<pos:position pos:line="84" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name pos:line="85" pos:column="25">non_trailer_lines<pos:position pos:line="85" pos:column="42"/></name> <operator pos:line="85" pos:column="43">+=<pos:position pos:line="85" pos:column="45"/></operator> <name pos:line="85" pos:column="46">possible_continuation_lines<pos:position pos:line="85" pos:column="73"/></name></expr>;<pos:position pos:line="85" pos:column="74"/></expr_stmt>
			<expr_stmt><expr><name pos:line="86" pos:column="25">possible_continuation_lines<pos:position pos:line="86" pos:column="52"/></name> <operator pos:line="86" pos:column="53">=<pos:position pos:line="86" pos:column="54"/></operator> <literal type="number" pos:line="86" pos:column="55">0<pos:position pos:line="86" pos:column="56"/></literal></expr>;<pos:position pos:line="86" pos:column="57"/></expr_stmt>
		}<pos:position pos:line="87" pos:column="18"/></block></else></if>
<label><name pos:line="88" pos:column="1">continue_outer_loop<pos:position pos:line="88" pos:column="20"/></name>:<pos:position pos:line="88" pos:column="21"/></label>
		<empty_stmt pos:line="89" pos:column="17">;<pos:position pos:line="89" pos:column="18"/></empty_stmt>
	}<pos:position pos:line="90" pos:column="10"/></block></for>

	<return pos:line="92" pos:column="9">return <expr><name pos:line="92" pos:column="16">len<pos:position pos:line="92" pos:column="19"/></name></expr>;<pos:position pos:line="92" pos:column="20"/></return>
}<pos:position pos:line="93" pos:column="2"/></block></function></unit>
