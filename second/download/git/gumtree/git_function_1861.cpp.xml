<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1861.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cat_one_file<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">opt<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">exp_type<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="56">const<pos:position pos:line="1" pos:column="61"/></specifier> <name pos:line="1" pos:column="62">char<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">obj_name<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="2" pos:column="25">int<pos:position pos:line="2" pos:column="28"/></name></type> <name pos:line="2" pos:column="29">unknown_type<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name></type> <name><name pos:line="4" pos:column="23">sha1<pos:position pos:line="4" pos:column="27"/></name><index pos:line="4" pos:column="27">[<expr><literal type="number" pos:line="4" pos:column="28">20<pos:position pos:line="4" pos:column="30"/></literal></expr>]<pos:position pos:line="4" pos:column="31"/></index></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">enum<pos:position pos:line="5" pos:column="13"/></name> <name pos:line="5" pos:column="14">object_type<pos:position pos:line="5" pos:column="25"/></name></name></type> <name pos:line="5" pos:column="26">type<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">buf<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">long<pos:position pos:line="7" pos:column="22"/></name></type> <name pos:line="7" pos:column="23">size<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">object_context<pos:position pos:line="8" pos:column="30"/></name></name></type> <name pos:line="8" pos:column="31">obj_context<pos:position pos:line="8" pos:column="42"/></name></decl>;<pos:position pos:line="8" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">object_info<pos:position pos:line="9" pos:column="27"/></name></name></type> <name pos:line="9" pos:column="28">oi<pos:position pos:line="9" pos:column="30"/></name> <init pos:line="9" pos:column="31">= <expr><block pos:line="9" pos:column="33">{<expr><name pos:line="9" pos:column="34">NULL<pos:position pos:line="9" pos:column="38"/></name></expr>}<pos:position pos:line="9" pos:column="39"/></block></expr></init></decl>;<pos:position pos:line="9" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">strbuf<pos:position pos:line="10" pos:column="22"/></name></name></type> <name pos:line="10" pos:column="23">sb<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><name pos:line="10" pos:column="28">STRBUF_INIT<pos:position pos:line="10" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">unsigned<pos:position pos:line="11" pos:column="17"/></name></type> <name pos:line="11" pos:column="18">flags<pos:position pos:line="11" pos:column="23"/></name> <init pos:line="11" pos:column="24">= <expr><name pos:line="11" pos:column="26">LOOKUP_REPLACE_OBJECT<pos:position pos:line="11" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="48"/></decl_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">unknown_type<pos:position pos:line="13" pos:column="25"/></name></expr>)<pos:position pos:line="13" pos:column="26"/></condition><then pos:line="13" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="17">flags<pos:position pos:line="14" pos:column="22"/></name> <operator pos:line="14" pos:column="23">|=<pos:position pos:line="14" pos:column="25"/></operator> <name pos:line="14" pos:column="26">LOOKUP_UNKNOWN_OBJECT<pos:position pos:line="14" pos:column="47"/></name></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt></block></then></if>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><call><name pos:line="16" pos:column="13">get_sha1_with_context<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><name pos:line="16" pos:column="35">obj_name<pos:position pos:line="16" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="45">0<pos:position pos:line="16" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="48">sha1<pos:position pos:line="16" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="54">&amp;<pos:position pos:line="16" pos:column="59"/></operator><name pos:line="16" pos:column="55">obj_context<pos:position pos:line="16" pos:column="66"/></name></expr></argument>)<pos:position pos:line="16" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="68"/></condition><then pos:line="16" pos:column="68">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">die<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><literal type="string" pos:line="17" pos:column="21">"Not a valid object name %s"<pos:position pos:line="17" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="51">obj_name<pos:position pos:line="17" pos:column="59"/></name></expr></argument>)<pos:position pos:line="17" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="61"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="19" pos:column="9">buf<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <name pos:line="19" pos:column="15">NULL<pos:position pos:line="19" pos:column="19"/></name></expr>;<pos:position pos:line="19" pos:column="20"/></expr_stmt>
	<switch pos:line="20" pos:column="9">switch <condition pos:line="20" pos:column="16">(<expr><name pos:line="20" pos:column="17">opt<pos:position pos:line="20" pos:column="20"/></name></expr>)<pos:position pos:line="20" pos:column="21"/></condition> <block pos:line="20" pos:column="22">{
	<case pos:line="21" pos:column="9">case <expr><literal type="char" pos:line="21" pos:column="14">'t'<pos:position pos:line="21" pos:column="17"/></literal></expr>:<pos:position pos:line="21" pos:column="18"/></case>
		<expr_stmt><expr><name><name pos:line="22" pos:column="17">oi<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">.<pos:position pos:line="22" pos:column="20"/></operator></name><name><typename pos:line="22" pos:column="20">typename<pos:position pos:line="22" pos:column="28"/></typename></name> <operator pos:line="22" pos:column="29">=<pos:position pos:line="22" pos:column="30"/></operator> <operator pos:line="22" pos:column="31">&amp;<pos:position pos:line="22" pos:column="36"/></operator><name pos:line="22" pos:column="32">sb<pos:position pos:line="22" pos:column="34"/></name></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><call><name pos:line="23" pos:column="21">sha1_object_info_extended<pos:position pos:line="23" pos:column="46"/></name><argument_list pos:line="23" pos:column="46">(<argument><expr><name pos:line="23" pos:column="47">sha1<pos:position pos:line="23" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="53">&amp;<pos:position pos:line="23" pos:column="58"/></operator><name pos:line="23" pos:column="54">oi<pos:position pos:line="23" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="58">flags<pos:position pos:line="23" pos:column="63"/></name></expr></argument>)<pos:position pos:line="23" pos:column="64"/></argument_list></call> <operator pos:line="23" pos:column="65">&lt;<pos:position pos:line="23" pos:column="69"/></operator> <literal type="number" pos:line="23" pos:column="67">0<pos:position pos:line="23" pos:column="68"/></literal></expr>)<pos:position pos:line="23" pos:column="69"/></condition><then pos:line="23" pos:column="69">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="25">die<pos:position pos:line="24" pos:column="28"/></name><argument_list pos:line="24" pos:column="28">(<argument><expr><literal type="string" pos:line="24" pos:column="29">"git cat-file: could not get object info"<pos:position pos:line="24" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="72"/></expr_stmt></block></then></if>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name><name pos:line="25" pos:column="21">sb<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">.<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="24">len<pos:position pos:line="25" pos:column="27"/></name></name></expr>)<pos:position pos:line="25" pos:column="28"/></condition><then pos:line="25" pos:column="28"> <block pos:line="25" pos:column="29">{
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">printf<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">(<argument><expr><literal type="string" pos:line="26" pos:column="32">"%s\n"<pos:position pos:line="26" pos:column="38"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="40">sb<pos:position pos:line="26" pos:column="42"/></name><operator pos:line="26" pos:column="42">.<pos:position pos:line="26" pos:column="43"/></operator><name pos:line="26" pos:column="43">buf<pos:position pos:line="26" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">strbuf_release<pos:position pos:line="27" pos:column="39"/></name><argument_list pos:line="27" pos:column="39">(<argument><expr><operator pos:line="27" pos:column="40">&amp;<pos:position pos:line="27" pos:column="45"/></operator><name pos:line="27" pos:column="41">sb<pos:position pos:line="27" pos:column="43"/></name></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt>
			<return pos:line="28" pos:column="25">return <expr><literal type="number" pos:line="28" pos:column="32">0<pos:position pos:line="28" pos:column="33"/></literal></expr>;<pos:position pos:line="28" pos:column="34"/></return>
		}<pos:position pos:line="29" pos:column="18"/></block></then></if>
		<break pos:line="30" pos:column="17">break;<pos:position pos:line="30" pos:column="23"/></break>

	<case pos:line="32" pos:column="9">case <expr><literal type="char" pos:line="32" pos:column="14">'s'<pos:position pos:line="32" pos:column="17"/></literal></expr>:<pos:position pos:line="32" pos:column="18"/></case>
		<expr_stmt><expr><name><name pos:line="33" pos:column="17">oi<pos:position pos:line="33" pos:column="19"/></name><operator pos:line="33" pos:column="19">.<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="20">sizep<pos:position pos:line="33" pos:column="25"/></name></name> <operator pos:line="33" pos:column="26">=<pos:position pos:line="33" pos:column="27"/></operator> <operator pos:line="33" pos:column="28">&amp;<pos:position pos:line="33" pos:column="33"/></operator><name pos:line="33" pos:column="29">size<pos:position pos:line="33" pos:column="33"/></name></expr>;<pos:position pos:line="33" pos:column="34"/></expr_stmt>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><call><name pos:line="34" pos:column="21">sha1_object_info_extended<pos:position pos:line="34" pos:column="46"/></name><argument_list pos:line="34" pos:column="46">(<argument><expr><name pos:line="34" pos:column="47">sha1<pos:position pos:line="34" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="53">&amp;<pos:position pos:line="34" pos:column="58"/></operator><name pos:line="34" pos:column="54">oi<pos:position pos:line="34" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="58">flags<pos:position pos:line="34" pos:column="63"/></name></expr></argument>)<pos:position pos:line="34" pos:column="64"/></argument_list></call> <operator pos:line="34" pos:column="65">&lt;<pos:position pos:line="34" pos:column="69"/></operator> <literal type="number" pos:line="34" pos:column="67">0<pos:position pos:line="34" pos:column="68"/></literal></expr>)<pos:position pos:line="34" pos:column="69"/></condition><then pos:line="34" pos:column="69">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="25">die<pos:position pos:line="35" pos:column="28"/></name><argument_list pos:line="35" pos:column="28">(<argument><expr><literal type="string" pos:line="35" pos:column="29">"git cat-file: could not get object info"<pos:position pos:line="35" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="72"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">printf<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">(<argument><expr><literal type="string" pos:line="36" pos:column="24">"%lu\n"<pos:position pos:line="36" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="33">size<pos:position pos:line="36" pos:column="37"/></name></expr></argument>)<pos:position pos:line="36" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="39"/></expr_stmt>
		<return pos:line="37" pos:column="17">return <expr><literal type="number" pos:line="37" pos:column="24">0<pos:position pos:line="37" pos:column="25"/></literal></expr>;<pos:position pos:line="37" pos:column="26"/></return>

	<case pos:line="39" pos:column="9">case <expr><literal type="char" pos:line="39" pos:column="14">'e'<pos:position pos:line="39" pos:column="17"/></literal></expr>:<pos:position pos:line="39" pos:column="18"/></case>
		<return pos:line="40" pos:column="17">return <expr><operator pos:line="40" pos:column="24">!<pos:position pos:line="40" pos:column="25"/></operator><call><name pos:line="40" pos:column="25">has_sha1_file<pos:position pos:line="40" pos:column="38"/></name><argument_list pos:line="40" pos:column="38">(<argument><expr><name pos:line="40" pos:column="39">sha1<pos:position pos:line="40" pos:column="43"/></name></expr></argument>)<pos:position pos:line="40" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="45"/></return>

	<case pos:line="42" pos:column="9">case <expr><literal type="char" pos:line="42" pos:column="14">'c'<pos:position pos:line="42" pos:column="17"/></literal></expr>:<pos:position pos:line="42" pos:column="18"/></case>
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><operator pos:line="43" pos:column="21">!<pos:position pos:line="43" pos:column="22"/></operator><name><name pos:line="43" pos:column="22">obj_context<pos:position pos:line="43" pos:column="33"/></name><operator pos:line="43" pos:column="33">.<pos:position pos:line="43" pos:column="34"/></operator><name pos:line="43" pos:column="34">path<pos:position pos:line="43" pos:column="38"/></name><index pos:line="43" pos:column="38">[<expr><literal type="number" pos:line="43" pos:column="39">0<pos:position pos:line="43" pos:column="40"/></literal></expr>]<pos:position pos:line="43" pos:column="41"/></index></name></expr>)<pos:position pos:line="43" pos:column="42"/></condition><then pos:line="43" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="25">die<pos:position pos:line="44" pos:column="28"/></name><argument_list pos:line="44" pos:column="28">(<argument><expr><literal type="string" pos:line="44" pos:column="29">"git cat-file --textconv %s: &lt;object&gt; must be &lt;sha1:path&gt;"<pos:position pos:line="44" pos:column="99"/></literal></expr></argument>,
			    <argument><expr><name pos:line="45" pos:column="29">obj_name<pos:position pos:line="45" pos:column="37"/></name></expr></argument>)<pos:position pos:line="45" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="39"/></expr_stmt></block></then></if>

		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><call><name pos:line="47" pos:column="21">textconv_object<pos:position pos:line="47" pos:column="36"/></name><argument_list pos:line="47" pos:column="36">(<argument><expr><name><name pos:line="47" pos:column="37">obj_context<pos:position pos:line="47" pos:column="48"/></name><operator pos:line="47" pos:column="48">.<pos:position pos:line="47" pos:column="49"/></operator><name pos:line="47" pos:column="49">path<pos:position pos:line="47" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="55">obj_context<pos:position pos:line="47" pos:column="66"/></name><operator pos:line="47" pos:column="66">.<pos:position pos:line="47" pos:column="67"/></operator><name pos:line="47" pos:column="67">mode<pos:position pos:line="47" pos:column="71"/></name></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="73">sha1<pos:position pos:line="47" pos:column="77"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="79">1<pos:position pos:line="47" pos:column="80"/></literal></expr></argument>, <argument><expr><operator pos:line="47" pos:column="82">&amp;<pos:position pos:line="47" pos:column="87"/></operator><name pos:line="47" pos:column="83">buf<pos:position pos:line="47" pos:column="86"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="88">&amp;<pos:position pos:line="47" pos:column="93"/></operator><name pos:line="47" pos:column="89">size<pos:position pos:line="47" pos:column="93"/></name></expr></argument>)<pos:position pos:line="47" pos:column="94"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="95"/></condition><then pos:line="47" pos:column="95">
			<block type="pseudo"><break pos:line="48" pos:column="25">break;<pos:position pos:line="48" pos:column="31"/></break></block></then></if>

	<case pos:line="50" pos:column="9">case <expr><literal type="char" pos:line="50" pos:column="14">'p'<pos:position pos:line="50" pos:column="17"/></literal></expr>:<pos:position pos:line="50" pos:column="18"/></case>
		<expr_stmt><expr><name pos:line="51" pos:column="17">type<pos:position pos:line="51" pos:column="21"/></name> <operator pos:line="51" pos:column="22">=<pos:position pos:line="51" pos:column="23"/></operator> <call><name pos:line="51" pos:column="24">sha1_object_info<pos:position pos:line="51" pos:column="40"/></name><argument_list pos:line="51" pos:column="40">(<argument><expr><name pos:line="51" pos:column="41">sha1<pos:position pos:line="51" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="47">NULL<pos:position pos:line="51" pos:column="51"/></name></expr></argument>)<pos:position pos:line="51" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="53"/></expr_stmt>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">type<pos:position pos:line="52" pos:column="25"/></name> <operator pos:line="52" pos:column="26">&lt;<pos:position pos:line="52" pos:column="30"/></operator> <literal type="number" pos:line="52" pos:column="28">0<pos:position pos:line="52" pos:column="29"/></literal></expr>)<pos:position pos:line="52" pos:column="30"/></condition><then pos:line="52" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="25">die<pos:position pos:line="53" pos:column="28"/></name><argument_list pos:line="53" pos:column="28">(<argument><expr><literal type="string" pos:line="53" pos:column="29">"Not a valid object name %s"<pos:position pos:line="53" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="59">obj_name<pos:position pos:line="53" pos:column="67"/></name></expr></argument>)<pos:position pos:line="53" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="69"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="55" pos:column="17">/* custom pretty-print here */</comment>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">type<pos:position pos:line="56" pos:column="25"/></name> <operator pos:line="56" pos:column="26">==<pos:position pos:line="56" pos:column="28"/></operator> <name pos:line="56" pos:column="29">OBJ_TREE<pos:position pos:line="56" pos:column="37"/></name></expr>)<pos:position pos:line="56" pos:column="38"/></condition><then pos:line="56" pos:column="38"> <block pos:line="56" pos:column="39">{
			<decl_stmt><decl><type><specifier pos:line="57" pos:column="25">const<pos:position pos:line="57" pos:column="30"/></specifier> <name pos:line="57" pos:column="31">char<pos:position pos:line="57" pos:column="35"/></name> <modifier pos:line="57" pos:column="36">*<pos:position pos:line="57" pos:column="37"/></modifier></type><name><name pos:line="57" pos:column="37">ls_args<pos:position pos:line="57" pos:column="44"/></name><index pos:line="57" pos:column="44">[<expr><literal type="number" pos:line="57" pos:column="45">3<pos:position pos:line="57" pos:column="46"/></literal></expr>]<pos:position pos:line="57" pos:column="47"/></index></name> <init pos:line="57" pos:column="48">= <expr><block pos:line="57" pos:column="50">{ <expr><name pos:line="57" pos:column="52">NULL<pos:position pos:line="57" pos:column="56"/></name></expr> }<pos:position pos:line="57" pos:column="58"/></block></expr></init></decl>;<pos:position pos:line="57" pos:column="59"/></decl_stmt>
			<expr_stmt><expr><name><name pos:line="58" pos:column="25">ls_args<pos:position pos:line="58" pos:column="32"/></name><index pos:line="58" pos:column="32">[<expr><literal type="number" pos:line="58" pos:column="33">0<pos:position pos:line="58" pos:column="34"/></literal></expr>]<pos:position pos:line="58" pos:column="35"/></index></name> <operator pos:line="58" pos:column="36">=<pos:position pos:line="58" pos:column="37"/></operator>  <literal type="string" pos:line="58" pos:column="39">"ls-tree"<pos:position pos:line="58" pos:column="48"/></literal></expr>;<pos:position pos:line="58" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="59" pos:column="25">ls_args<pos:position pos:line="59" pos:column="32"/></name><index pos:line="59" pos:column="32">[<expr><literal type="number" pos:line="59" pos:column="33">1<pos:position pos:line="59" pos:column="34"/></literal></expr>]<pos:position pos:line="59" pos:column="35"/></index></name> <operator pos:line="59" pos:column="36">=<pos:position pos:line="59" pos:column="37"/></operator>  <name pos:line="59" pos:column="39">obj_name<pos:position pos:line="59" pos:column="47"/></name></expr>;<pos:position pos:line="59" pos:column="48"/></expr_stmt>
			<return pos:line="60" pos:column="25">return <expr><call><name pos:line="60" pos:column="32">cmd_ls_tree<pos:position pos:line="60" pos:column="43"/></name><argument_list pos:line="60" pos:column="43">(<argument><expr><literal type="number" pos:line="60" pos:column="44">2<pos:position pos:line="60" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="47">ls_args<pos:position pos:line="60" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="56">NULL<pos:position pos:line="60" pos:column="60"/></name></expr></argument>)<pos:position pos:line="60" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="62"/></return>
		}<pos:position pos:line="61" pos:column="18"/></block></then></if>

		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><name pos:line="63" pos:column="21">type<pos:position pos:line="63" pos:column="25"/></name> <operator pos:line="63" pos:column="26">==<pos:position pos:line="63" pos:column="28"/></operator> <name pos:line="63" pos:column="29">OBJ_BLOB<pos:position pos:line="63" pos:column="37"/></name></expr>)<pos:position pos:line="63" pos:column="38"/></condition><then pos:line="63" pos:column="38">
			<block type="pseudo"><return pos:line="64" pos:column="25">return <expr><call><name pos:line="64" pos:column="32">stream_blob_to_fd<pos:position pos:line="64" pos:column="49"/></name><argument_list pos:line="64" pos:column="49">(<argument><expr><literal type="number" pos:line="64" pos:column="50">1<pos:position pos:line="64" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="53">sha1<pos:position pos:line="64" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="59">NULL<pos:position pos:line="64" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="64" pos:column="65">0<pos:position pos:line="64" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="68"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="65" pos:column="17">buf<pos:position pos:line="65" pos:column="20"/></name> <operator pos:line="65" pos:column="21">=<pos:position pos:line="65" pos:column="22"/></operator> <call><name pos:line="65" pos:column="23">read_sha1_file<pos:position pos:line="65" pos:column="37"/></name><argument_list pos:line="65" pos:column="37">(<argument><expr><name pos:line="65" pos:column="38">sha1<pos:position pos:line="65" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="44">&amp;<pos:position pos:line="65" pos:column="49"/></operator><name pos:line="65" pos:column="45">type<pos:position pos:line="65" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="51">&amp;<pos:position pos:line="65" pos:column="56"/></operator><name pos:line="65" pos:column="52">size<pos:position pos:line="65" pos:column="56"/></name></expr></argument>)<pos:position pos:line="65" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="58"/></expr_stmt>
		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><operator pos:line="66" pos:column="21">!<pos:position pos:line="66" pos:column="22"/></operator><name pos:line="66" pos:column="22">buf<pos:position pos:line="66" pos:column="25"/></name></expr>)<pos:position pos:line="66" pos:column="26"/></condition><then pos:line="66" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="25">die<pos:position pos:line="67" pos:column="28"/></name><argument_list pos:line="67" pos:column="28">(<argument><expr><literal type="string" pos:line="67" pos:column="29">"Cannot read object %s"<pos:position pos:line="67" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="54">obj_name<pos:position pos:line="67" pos:column="62"/></name></expr></argument>)<pos:position pos:line="67" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="64"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="69" pos:column="17">/* otherwise just spit out the data */</comment>
		<break pos:line="70" pos:column="17">break;<pos:position pos:line="70" pos:column="23"/></break>

	<case pos:line="72" pos:column="9">case <expr><literal type="number" pos:line="72" pos:column="14">0<pos:position pos:line="72" pos:column="15"/></literal></expr>:<pos:position pos:line="72" pos:column="16"/></case>
		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><call><name pos:line="73" pos:column="21">type_from_string<pos:position pos:line="73" pos:column="37"/></name><argument_list pos:line="73" pos:column="37">(<argument><expr><name pos:line="73" pos:column="38">exp_type<pos:position pos:line="73" pos:column="46"/></name></expr></argument>)<pos:position pos:line="73" pos:column="47"/></argument_list></call> <operator pos:line="73" pos:column="48">==<pos:position pos:line="73" pos:column="50"/></operator> <name pos:line="73" pos:column="51">OBJ_BLOB<pos:position pos:line="73" pos:column="59"/></name></expr>)<pos:position pos:line="73" pos:column="60"/></condition><then pos:line="73" pos:column="60"> <block pos:line="73" pos:column="61">{
			<decl_stmt><decl><type><name pos:line="74" pos:column="25">unsigned<pos:position pos:line="74" pos:column="33"/></name> <name pos:line="74" pos:column="34">char<pos:position pos:line="74" pos:column="38"/></name></type> <name><name pos:line="74" pos:column="39">blob_sha1<pos:position pos:line="74" pos:column="48"/></name><index pos:line="74" pos:column="48">[<expr><literal type="number" pos:line="74" pos:column="49">20<pos:position pos:line="74" pos:column="51"/></literal></expr>]<pos:position pos:line="74" pos:column="52"/></index></name></decl>;<pos:position pos:line="74" pos:column="53"/></decl_stmt>
			<if pos:line="75" pos:column="25">if <condition pos:line="75" pos:column="28">(<expr><call><name pos:line="75" pos:column="29">sha1_object_info<pos:position pos:line="75" pos:column="45"/></name><argument_list pos:line="75" pos:column="45">(<argument><expr><name pos:line="75" pos:column="46">sha1<pos:position pos:line="75" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="52">NULL<pos:position pos:line="75" pos:column="56"/></name></expr></argument>)<pos:position pos:line="75" pos:column="57"/></argument_list></call> <operator pos:line="75" pos:column="58">==<pos:position pos:line="75" pos:column="60"/></operator> <name pos:line="75" pos:column="61">OBJ_TAG<pos:position pos:line="75" pos:column="68"/></name></expr>)<pos:position pos:line="75" pos:column="69"/></condition><then pos:line="75" pos:column="69"> <block pos:line="75" pos:column="70">{
				<decl_stmt><decl><type><name pos:line="76" pos:column="33">char<pos:position pos:line="76" pos:column="37"/></name> <modifier pos:line="76" pos:column="38">*<pos:position pos:line="76" pos:column="39"/></modifier></type><name pos:line="76" pos:column="39">buffer<pos:position pos:line="76" pos:column="45"/></name> <init pos:line="76" pos:column="46">= <expr><call><name pos:line="76" pos:column="48">read_sha1_file<pos:position pos:line="76" pos:column="62"/></name><argument_list pos:line="76" pos:column="62">(<argument><expr><name pos:line="76" pos:column="63">sha1<pos:position pos:line="76" pos:column="67"/></name></expr></argument>, <argument><expr><operator pos:line="76" pos:column="69">&amp;<pos:position pos:line="76" pos:column="74"/></operator><name pos:line="76" pos:column="70">type<pos:position pos:line="76" pos:column="74"/></name></expr></argument>, <argument><expr><operator pos:line="76" pos:column="76">&amp;<pos:position pos:line="76" pos:column="81"/></operator><name pos:line="76" pos:column="77">size<pos:position pos:line="76" pos:column="81"/></name></expr></argument>)<pos:position pos:line="76" pos:column="82"/></argument_list></call></expr></init></decl>;<pos:position pos:line="76" pos:column="83"/></decl_stmt>
				<decl_stmt><decl><type><specifier pos:line="77" pos:column="33">const<pos:position pos:line="77" pos:column="38"/></specifier> <name pos:line="77" pos:column="39">char<pos:position pos:line="77" pos:column="43"/></name> <modifier pos:line="77" pos:column="44">*<pos:position pos:line="77" pos:column="45"/></modifier></type><name pos:line="77" pos:column="45">target<pos:position pos:line="77" pos:column="51"/></name></decl>;<pos:position pos:line="77" pos:column="52"/></decl_stmt>
				<if pos:line="78" pos:column="33">if <condition pos:line="78" pos:column="36">(<expr><operator pos:line="78" pos:column="37">!<pos:position pos:line="78" pos:column="38"/></operator><call><name pos:line="78" pos:column="38">skip_prefix<pos:position pos:line="78" pos:column="49"/></name><argument_list pos:line="78" pos:column="49">(<argument><expr><name pos:line="78" pos:column="50">buffer<pos:position pos:line="78" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="58">"object "<pos:position pos:line="78" pos:column="67"/></literal></expr></argument>, <argument><expr><operator pos:line="78" pos:column="69">&amp;<pos:position pos:line="78" pos:column="74"/></operator><name pos:line="78" pos:column="70">target<pos:position pos:line="78" pos:column="76"/></name></expr></argument>)<pos:position pos:line="78" pos:column="77"/></argument_list></call> <operator pos:line="78" pos:column="78">||<pos:position pos:line="78" pos:column="80"/></operator>
				    <call><name pos:line="79" pos:column="37">get_sha1_hex<pos:position pos:line="79" pos:column="49"/></name><argument_list pos:line="79" pos:column="49">(<argument><expr><name pos:line="79" pos:column="50">target<pos:position pos:line="79" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="58">blob_sha1<pos:position pos:line="79" pos:column="67"/></name></expr></argument>)<pos:position pos:line="79" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="79" pos:column="69"/></condition><then pos:line="79" pos:column="69">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="80" pos:column="41">die<pos:position pos:line="80" pos:column="44"/></name><argument_list pos:line="80" pos:column="44">(<argument><expr><literal type="string" pos:line="80" pos:column="45">"%s not a valid tag"<pos:position pos:line="80" pos:column="65"/></literal></expr></argument>, <argument><expr><call><name pos:line="80" pos:column="67">sha1_to_hex<pos:position pos:line="80" pos:column="78"/></name><argument_list pos:line="80" pos:column="78">(<argument><expr><name pos:line="80" pos:column="79">sha1<pos:position pos:line="80" pos:column="83"/></name></expr></argument>)<pos:position pos:line="80" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="80" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="86"/></expr_stmt></block></then></if>
				<expr_stmt><expr><call><name pos:line="81" pos:column="33">free<pos:position pos:line="81" pos:column="37"/></name><argument_list pos:line="81" pos:column="37">(<argument><expr><name pos:line="81" pos:column="38">buffer<pos:position pos:line="81" pos:column="44"/></name></expr></argument>)<pos:position pos:line="81" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="46"/></expr_stmt>
			}<pos:position pos:line="82" pos:column="26"/></block></then> <else pos:line="82" pos:column="27">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="83" pos:column="33">hashcpy<pos:position pos:line="83" pos:column="40"/></name><argument_list pos:line="83" pos:column="40">(<argument><expr><name pos:line="83" pos:column="41">blob_sha1<pos:position pos:line="83" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="52">sha1<pos:position pos:line="83" pos:column="56"/></name></expr></argument>)<pos:position pos:line="83" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="58"/></expr_stmt></block></else></if>

			<if pos:line="85" pos:column="25">if <condition pos:line="85" pos:column="28">(<expr><call><name pos:line="85" pos:column="29">sha1_object_info<pos:position pos:line="85" pos:column="45"/></name><argument_list pos:line="85" pos:column="45">(<argument><expr><name pos:line="85" pos:column="46">blob_sha1<pos:position pos:line="85" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="57">NULL<pos:position pos:line="85" pos:column="61"/></name></expr></argument>)<pos:position pos:line="85" pos:column="62"/></argument_list></call> <operator pos:line="85" pos:column="63">==<pos:position pos:line="85" pos:column="65"/></operator> <name pos:line="85" pos:column="66">OBJ_BLOB<pos:position pos:line="85" pos:column="74"/></name></expr>)<pos:position pos:line="85" pos:column="75"/></condition><then pos:line="85" pos:column="75">
				<block type="pseudo"><return pos:line="86" pos:column="33">return <expr><call><name pos:line="86" pos:column="40">stream_blob_to_fd<pos:position pos:line="86" pos:column="57"/></name><argument_list pos:line="86" pos:column="57">(<argument><expr><literal type="number" pos:line="86" pos:column="58">1<pos:position pos:line="86" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="61">blob_sha1<pos:position pos:line="86" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="72">NULL<pos:position pos:line="86" pos:column="76"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="86" pos:column="78">0<pos:position pos:line="86" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="81"/></return></block></then></if>
			<comment type="block" pos:line="87" pos:column="25">/*
			 * we attempted to dereference a tag to a blob
			 * and failed; there may be new dereference
			 * mechanisms this code is not aware of.
			 * fall-back to the usual case.
			 */</comment>
		}<pos:position pos:line="93" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="94" pos:column="17">buf<pos:position pos:line="94" pos:column="20"/></name> <operator pos:line="94" pos:column="21">=<pos:position pos:line="94" pos:column="22"/></operator> <call><name pos:line="94" pos:column="23">read_object_with_reference<pos:position pos:line="94" pos:column="49"/></name><argument_list pos:line="94" pos:column="49">(<argument><expr><name pos:line="94" pos:column="50">sha1<pos:position pos:line="94" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="56">exp_type<pos:position pos:line="94" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="94" pos:column="66">&amp;<pos:position pos:line="94" pos:column="71"/></operator><name pos:line="94" pos:column="67">size<pos:position pos:line="94" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="73">NULL<pos:position pos:line="94" pos:column="77"/></name></expr></argument>)<pos:position pos:line="94" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="79"/></expr_stmt>
		<break pos:line="95" pos:column="17">break;<pos:position pos:line="95" pos:column="23"/></break>

	<default pos:line="97" pos:column="9">default:<pos:position pos:line="97" pos:column="17"/></default>
		<expr_stmt><expr><call><name pos:line="98" pos:column="17">die<pos:position pos:line="98" pos:column="20"/></name><argument_list pos:line="98" pos:column="20">(<argument><expr><literal type="string" pos:line="98" pos:column="21">"git cat-file: unknown option: %s"<pos:position pos:line="98" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="98" pos:column="57">exp_type<pos:position pos:line="98" pos:column="65"/></name></expr></argument>)<pos:position pos:line="98" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="67"/></expr_stmt>
	}<pos:position pos:line="99" pos:column="10"/></block></switch>

	<if pos:line="101" pos:column="9">if <condition pos:line="101" pos:column="12">(<expr><operator pos:line="101" pos:column="13">!<pos:position pos:line="101" pos:column="14"/></operator><name pos:line="101" pos:column="14">buf<pos:position pos:line="101" pos:column="17"/></name></expr>)<pos:position pos:line="101" pos:column="18"/></condition><then pos:line="101" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="102" pos:column="17">die<pos:position pos:line="102" pos:column="20"/></name><argument_list pos:line="102" pos:column="20">(<argument><expr><literal type="string" pos:line="102" pos:column="21">"git cat-file %s: bad file"<pos:position pos:line="102" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="102" pos:column="50">obj_name<pos:position pos:line="102" pos:column="58"/></name></expr></argument>)<pos:position pos:line="102" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="60"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="104" pos:column="9">write_or_die<pos:position pos:line="104" pos:column="21"/></name><argument_list pos:line="104" pos:column="21">(<argument><expr><literal type="number" pos:line="104" pos:column="22">1<pos:position pos:line="104" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="104" pos:column="25">buf<pos:position pos:line="104" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="30">size<pos:position pos:line="104" pos:column="34"/></name></expr></argument>)<pos:position pos:line="104" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="36"/></expr_stmt>
	<return pos:line="105" pos:column="9">return <expr><literal type="number" pos:line="105" pos:column="16">0<pos:position pos:line="105" pos:column="17"/></literal></expr>;<pos:position pos:line="105" pos:column="18"/></return>
}<pos:position pos:line="106" pos:column="2"/></block></function></unit>
