<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3189_git-2.7.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">stream_blob_to_fd<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">int<pos:position pos:line="1" pos:column="26"/></name></type> <name pos:line="1" pos:column="27">fd<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="31">unsigned<pos:position pos:line="1" pos:column="39"/></name> <specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">sha1<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="58">struct<pos:position pos:line="1" pos:column="64"/></name> <name pos:line="1" pos:column="65">stream_filter<pos:position pos:line="1" pos:column="78"/></name></name> <modifier pos:line="1" pos:column="79">*<pos:position pos:line="1" pos:column="80"/></modifier></type><name pos:line="1" pos:column="80">filter<pos:position pos:line="1" pos:column="86"/></name></decl></parameter>,
		      <parameter><decl><type><name pos:line="2" pos:column="23">int<pos:position pos:line="2" pos:column="26"/></name></type> <name pos:line="2" pos:column="27">can_seek<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">git_istream<pos:position pos:line="4" pos:column="27"/></name></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">st<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">enum<pos:position pos:line="5" pos:column="13"/></name> <name pos:line="5" pos:column="14">object_type<pos:position pos:line="5" pos:column="25"/></name></name></type> <name pos:line="5" pos:column="26">type<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">long<pos:position pos:line="6" pos:column="22"/></name></type> <name pos:line="6" pos:column="23">sz<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">ssize_t<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">kept<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">result<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><operator pos:line="8" pos:column="22">-<pos:position pos:line="8" pos:column="23"/></operator><literal type="number" pos:line="8" pos:column="23">1<pos:position pos:line="8" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">st<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <call><name pos:line="10" pos:column="14">open_istream<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">(<argument><expr><name pos:line="10" pos:column="27">sha1<pos:position pos:line="10" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="33">&amp;<pos:position pos:line="10" pos:column="38"/></operator><name pos:line="10" pos:column="34">type<pos:position pos:line="10" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="40">&amp;<pos:position pos:line="10" pos:column="45"/></operator><name pos:line="10" pos:column="41">sz<pos:position pos:line="10" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="45">filter<pos:position pos:line="10" pos:column="51"/></name></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="53"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">st<pos:position pos:line="11" pos:column="16"/></name></expr>)<pos:position pos:line="11" pos:column="17"/></condition><then pos:line="11" pos:column="17"> <block pos:line="11" pos:column="18">{
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">filter<pos:position pos:line="12" pos:column="27"/></name></expr>)<pos:position pos:line="12" pos:column="28"/></condition><then pos:line="12" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="25">free_stream_filter<pos:position pos:line="13" pos:column="43"/></name><argument_list pos:line="13" pos:column="43">(<argument><expr><name pos:line="13" pos:column="44">filter<pos:position pos:line="13" pos:column="50"/></name></expr></argument>)<pos:position pos:line="13" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="52"/></expr_stmt></block></then></if>
		<return pos:line="14" pos:column="17">return <expr><name pos:line="14" pos:column="24">result<pos:position pos:line="14" pos:column="30"/></name></expr>;<pos:position pos:line="14" pos:column="31"/></return>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">type<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">!=<pos:position pos:line="16" pos:column="20"/></operator> <name pos:line="16" pos:column="21">OBJ_BLOB<pos:position pos:line="16" pos:column="29"/></name></expr>)<pos:position pos:line="16" pos:column="30"/></condition><then pos:line="16" pos:column="30">
		<block type="pseudo"><goto pos:line="17" pos:column="17">goto <name pos:line="17" pos:column="22">close_and_exit<pos:position pos:line="17" pos:column="36"/></name>;<pos:position pos:line="17" pos:column="37"/></goto></block></then></if>
	<for pos:line="18" pos:column="9">for <control pos:line="18" pos:column="13">(<init pos:line="18" pos:column="14">;<pos:position pos:line="18" pos:column="15"/></init><condition pos:line="18" pos:column="15">;<pos:position pos:line="18" pos:column="16"/></condition><incr/>)<pos:position pos:line="18" pos:column="17"/></control> <block pos:line="18" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">char<pos:position pos:line="19" pos:column="21"/></name></type> <name><name pos:line="19" pos:column="22">buf<pos:position pos:line="19" pos:column="25"/></name><index pos:line="19" pos:column="25">[<expr><literal type="number" pos:line="19" pos:column="26">1024<pos:position pos:line="19" pos:column="30"/></literal> <operator pos:line="19" pos:column="31">*<pos:position pos:line="19" pos:column="32"/></operator> <literal type="number" pos:line="19" pos:column="33">16<pos:position pos:line="19" pos:column="35"/></literal></expr>]<pos:position pos:line="19" pos:column="36"/></index></name></decl>;<pos:position pos:line="19" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">ssize_t<pos:position pos:line="20" pos:column="24"/></name></type> <name pos:line="20" pos:column="25">wrote<pos:position pos:line="20" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="20" pos:column="32">holeto<pos:position pos:line="20" pos:column="38"/></name></decl>;<pos:position pos:line="20" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">ssize_t<pos:position pos:line="21" pos:column="24"/></name></type> <name pos:line="21" pos:column="25">readlen<pos:position pos:line="21" pos:column="32"/></name> <init pos:line="21" pos:column="33">= <expr><call><name pos:line="21" pos:column="35">read_istream<pos:position pos:line="21" pos:column="47"/></name><argument_list pos:line="21" pos:column="47">(<argument><expr><name pos:line="21" pos:column="48">st<pos:position pos:line="21" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="52">buf<pos:position pos:line="21" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="57">sizeof<argument_list pos:line="21" pos:column="63">(<argument><expr><name pos:line="21" pos:column="64">buf<pos:position pos:line="21" pos:column="67"/></name></expr></argument>)<pos:position pos:line="21" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="70"/></decl_stmt>

		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">readlen<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">&lt;<pos:position pos:line="23" pos:column="33"/></operator> <literal type="number" pos:line="23" pos:column="31">0<pos:position pos:line="23" pos:column="32"/></literal></expr>)<pos:position pos:line="23" pos:column="33"/></condition><then pos:line="23" pos:column="33">
			<block type="pseudo"><goto pos:line="24" pos:column="25">goto <name pos:line="24" pos:column="30">close_and_exit<pos:position pos:line="24" pos:column="44"/></name>;<pos:position pos:line="24" pos:column="45"/></goto></block></then></if>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><operator pos:line="25" pos:column="21">!<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="22">readlen<pos:position pos:line="25" pos:column="29"/></name></expr>)<pos:position pos:line="25" pos:column="30"/></condition><then pos:line="25" pos:column="30">
			<block type="pseudo"><break pos:line="26" pos:column="25">break;<pos:position pos:line="26" pos:column="31"/></break></block></then></if>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">can_seek<pos:position pos:line="27" pos:column="29"/></name> <operator pos:line="27" pos:column="30">&amp;&amp;<pos:position pos:line="27" pos:column="40"/></operator> <sizeof pos:line="27" pos:column="33">sizeof<argument_list pos:line="27" pos:column="39">(<argument><expr><name pos:line="27" pos:column="40">buf<pos:position pos:line="27" pos:column="43"/></name></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></sizeof> <operator pos:line="27" pos:column="45">==<pos:position pos:line="27" pos:column="47"/></operator> <name pos:line="27" pos:column="48">readlen<pos:position pos:line="27" pos:column="55"/></name></expr>)<pos:position pos:line="27" pos:column="56"/></condition><then pos:line="27" pos:column="56"> <block pos:line="27" pos:column="57">{
			<for pos:line="28" pos:column="25">for <control pos:line="28" pos:column="29">(<init><expr><name pos:line="28" pos:column="30">holeto<pos:position pos:line="28" pos:column="36"/></name> <operator pos:line="28" pos:column="37">=<pos:position pos:line="28" pos:column="38"/></operator> <literal type="number" pos:line="28" pos:column="39">0<pos:position pos:line="28" pos:column="40"/></literal></expr>;<pos:position pos:line="28" pos:column="41"/></init> <condition><expr><name pos:line="28" pos:column="42">holeto<pos:position pos:line="28" pos:column="48"/></name> <operator pos:line="28" pos:column="49">&lt;<pos:position pos:line="28" pos:column="53"/></operator> <name pos:line="28" pos:column="51">readlen<pos:position pos:line="28" pos:column="58"/></name></expr>;<pos:position pos:line="28" pos:column="59"/></condition> <incr><expr><name pos:line="28" pos:column="60">holeto<pos:position pos:line="28" pos:column="66"/></name><operator pos:line="28" pos:column="66">++<pos:position pos:line="28" pos:column="68"/></operator></expr></incr>)<pos:position pos:line="28" pos:column="69"/></control>
				<block type="pseudo"><if pos:line="29" pos:column="33">if <condition pos:line="29" pos:column="36">(<expr><name><name pos:line="29" pos:column="37">buf<pos:position pos:line="29" pos:column="40"/></name><index pos:line="29" pos:column="40">[<expr><name pos:line="29" pos:column="41">holeto<pos:position pos:line="29" pos:column="47"/></name></expr>]<pos:position pos:line="29" pos:column="48"/></index></name></expr>)<pos:position pos:line="29" pos:column="49"/></condition><then pos:line="29" pos:column="49">
					<block type="pseudo"><break pos:line="30" pos:column="41">break;<pos:position pos:line="30" pos:column="47"/></break></block></then></if></block></for>
			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><name pos:line="31" pos:column="29">readlen<pos:position pos:line="31" pos:column="36"/></name> <operator pos:line="31" pos:column="37">==<pos:position pos:line="31" pos:column="39"/></operator> <name pos:line="31" pos:column="40">holeto<pos:position pos:line="31" pos:column="46"/></name></expr>)<pos:position pos:line="31" pos:column="47"/></condition><then pos:line="31" pos:column="47"> <block pos:line="31" pos:column="48">{
				<expr_stmt><expr><name pos:line="32" pos:column="33">kept<pos:position pos:line="32" pos:column="37"/></name> <operator pos:line="32" pos:column="38">+=<pos:position pos:line="32" pos:column="40"/></operator> <name pos:line="32" pos:column="41">holeto<pos:position pos:line="32" pos:column="47"/></name></expr>;<pos:position pos:line="32" pos:column="48"/></expr_stmt>
				<continue pos:line="33" pos:column="33">continue;<pos:position pos:line="33" pos:column="42"/></continue>
			}<pos:position pos:line="34" pos:column="26"/></block></then></if>
		}<pos:position pos:line="35" pos:column="18"/></block></then></if>

		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><name pos:line="37" pos:column="21">kept<pos:position pos:line="37" pos:column="25"/></name> <operator pos:line="37" pos:column="26">&amp;&amp;<pos:position pos:line="37" pos:column="36"/></operator> <call><name pos:line="37" pos:column="29">lseek<pos:position pos:line="37" pos:column="34"/></name><argument_list pos:line="37" pos:column="34">(<argument><expr><name pos:line="37" pos:column="35">fd<pos:position pos:line="37" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="39">kept<pos:position pos:line="37" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="45">SEEK_CUR<pos:position pos:line="37" pos:column="53"/></name></expr></argument>)<pos:position pos:line="37" pos:column="54"/></argument_list></call> <operator pos:line="37" pos:column="55">==<pos:position pos:line="37" pos:column="57"/></operator> <operator pos:line="37" pos:column="58">(<pos:position pos:line="37" pos:column="59"/></operator><name pos:line="37" pos:column="59">off_t<pos:position pos:line="37" pos:column="64"/></name><operator pos:line="37" pos:column="64">)<pos:position pos:line="37" pos:column="65"/></operator> <operator pos:line="37" pos:column="66">-<pos:position pos:line="37" pos:column="67"/></operator><literal type="number" pos:line="37" pos:column="67">1<pos:position pos:line="37" pos:column="68"/></literal></expr>)<pos:position pos:line="37" pos:column="69"/></condition><then pos:line="37" pos:column="69">
			<block type="pseudo"><goto pos:line="38" pos:column="25">goto <name pos:line="38" pos:column="30">close_and_exit<pos:position pos:line="38" pos:column="44"/></name>;<pos:position pos:line="38" pos:column="45"/></goto></block></then>
		<else pos:line="39" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="25">kept<pos:position pos:line="40" pos:column="29"/></name> <operator pos:line="40" pos:column="30">=<pos:position pos:line="40" pos:column="31"/></operator> <literal type="number" pos:line="40" pos:column="32">0<pos:position pos:line="40" pos:column="33"/></literal></expr>;<pos:position pos:line="40" pos:column="34"/></expr_stmt></block></else></if>
		<expr_stmt><expr><name pos:line="41" pos:column="17">wrote<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">=<pos:position pos:line="41" pos:column="24"/></operator> <call><name pos:line="41" pos:column="25">write_in_full<pos:position pos:line="41" pos:column="38"/></name><argument_list pos:line="41" pos:column="38">(<argument><expr><name pos:line="41" pos:column="39">fd<pos:position pos:line="41" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="43">buf<pos:position pos:line="41" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="48">readlen<pos:position pos:line="41" pos:column="55"/></name></expr></argument>)<pos:position pos:line="41" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="57"/></expr_stmt>

		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">wrote<pos:position pos:line="43" pos:column="26"/></name> <operator pos:line="43" pos:column="27">!=<pos:position pos:line="43" pos:column="29"/></operator> <name pos:line="43" pos:column="30">readlen<pos:position pos:line="43" pos:column="37"/></name></expr>)<pos:position pos:line="43" pos:column="38"/></condition><then pos:line="43" pos:column="38">
			<block type="pseudo"><goto pos:line="44" pos:column="25">goto <name pos:line="44" pos:column="30">close_and_exit<pos:position pos:line="44" pos:column="44"/></name>;<pos:position pos:line="44" pos:column="45"/></goto></block></then></if>
	}<pos:position pos:line="45" pos:column="10"/></block></for>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">kept<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">&amp;&amp;<pos:position pos:line="46" pos:column="28"/></operator> <operator pos:line="46" pos:column="21">(<pos:position pos:line="46" pos:column="22"/></operator><call><name pos:line="46" pos:column="22">lseek<pos:position pos:line="46" pos:column="27"/></name><argument_list pos:line="46" pos:column="27">(<argument><expr><name pos:line="46" pos:column="28">fd<pos:position pos:line="46" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="32">kept<pos:position pos:line="46" pos:column="36"/></name> <operator pos:line="46" pos:column="37">-<pos:position pos:line="46" pos:column="38"/></operator> <literal type="number" pos:line="46" pos:column="39">1<pos:position pos:line="46" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="42">SEEK_CUR<pos:position pos:line="46" pos:column="50"/></name></expr></argument>)<pos:position pos:line="46" pos:column="51"/></argument_list></call> <operator pos:line="46" pos:column="52">==<pos:position pos:line="46" pos:column="54"/></operator> <operator pos:line="46" pos:column="55">(<pos:position pos:line="46" pos:column="56"/></operator><name pos:line="46" pos:column="56">off_t<pos:position pos:line="46" pos:column="61"/></name><operator pos:line="46" pos:column="61">)<pos:position pos:line="46" pos:column="62"/></operator> <operator pos:line="46" pos:column="63">-<pos:position pos:line="46" pos:column="64"/></operator><literal type="number" pos:line="46" pos:column="64">1<pos:position pos:line="46" pos:column="65"/></literal> <operator pos:line="46" pos:column="66">||<pos:position pos:line="46" pos:column="68"/></operator>
		     <call><name pos:line="47" pos:column="22">xwrite<pos:position pos:line="47" pos:column="28"/></name><argument_list pos:line="47" pos:column="28">(<argument><expr><name pos:line="47" pos:column="29">fd<pos:position pos:line="47" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="33">""<pos:position pos:line="47" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="37">1<pos:position pos:line="47" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="39"/></argument_list></call> <operator pos:line="47" pos:column="40">!=<pos:position pos:line="47" pos:column="42"/></operator> <literal type="number" pos:line="47" pos:column="43">1<pos:position pos:line="47" pos:column="44"/></literal><operator pos:line="47" pos:column="44">)<pos:position pos:line="47" pos:column="45"/></operator></expr>)<pos:position pos:line="47" pos:column="46"/></condition><then pos:line="47" pos:column="46">
		<block type="pseudo"><goto pos:line="48" pos:column="17">goto <name pos:line="48" pos:column="22">close_and_exit<pos:position pos:line="48" pos:column="36"/></name>;<pos:position pos:line="48" pos:column="37"/></goto></block></then></if>
	<expr_stmt><expr><name pos:line="49" pos:column="9">result<pos:position pos:line="49" pos:column="15"/></name> <operator pos:line="49" pos:column="16">=<pos:position pos:line="49" pos:column="17"/></operator> <literal type="number" pos:line="49" pos:column="18">0<pos:position pos:line="49" pos:column="19"/></literal></expr>;<pos:position pos:line="49" pos:column="20"/></expr_stmt>

 <label><name pos:line="51" pos:column="2">close_and_exit<pos:position pos:line="51" pos:column="16"/></name>:<pos:position pos:line="51" pos:column="17"/></label>
	<expr_stmt><expr><call><name pos:line="52" pos:column="9">close_istream<pos:position pos:line="52" pos:column="22"/></name><argument_list pos:line="52" pos:column="22">(<argument><expr><name pos:line="52" pos:column="23">st<pos:position pos:line="52" pos:column="25"/></name></expr></argument>)<pos:position pos:line="52" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="27"/></expr_stmt>
	<return pos:line="53" pos:column="9">return <expr><name pos:line="53" pos:column="16">result<pos:position pos:line="53" pos:column="22"/></name></expr>;<pos:position pos:line="53" pos:column="23"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
