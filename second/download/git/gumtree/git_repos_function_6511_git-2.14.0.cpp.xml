<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6511_git-2.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_first_operand<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier><modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">buf<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">size_t<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">out<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="63">const<pos:position pos:line="1" pos:column="68"/></specifier> <name pos:line="1" pos:column="69">char<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">end<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">result<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><operator pos:line="3" pos:column="25">(<pos:position pos:line="3" pos:column="26"/></operator><name pos:line="3" pos:column="26">unsigned<pos:position pos:line="3" pos:column="34"/></name> <name pos:line="3" pos:column="35">char<pos:position pos:line="3" pos:column="39"/></name><operator pos:line="3" pos:column="39">)<pos:position pos:line="3" pos:column="40"/></operator> <operator pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></operator><operator pos:line="3" pos:column="42">(<pos:position pos:line="3" pos:column="43"/></operator><operator pos:line="3" pos:column="43">*<pos:position pos:line="3" pos:column="44"/></operator><name pos:line="3" pos:column="44">buf<pos:position pos:line="3" pos:column="47"/></name><operator pos:line="3" pos:column="47">)<pos:position pos:line="3" pos:column="48"/></operator><operator pos:line="3" pos:column="48">++<pos:position pos:line="3" pos:column="50"/></operator> <operator pos:line="3" pos:column="51">&amp;<pos:position pos:line="3" pos:column="56"/></operator> <name pos:line="3" pos:column="53">OPERAND_MASK<pos:position pos:line="3" pos:column="65"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="66"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><name pos:line="4" pos:column="13">result<pos:position pos:line="4" pos:column="19"/></name></expr>)<pos:position pos:line="4" pos:column="20"/></condition><then pos:line="4" pos:column="20"> <block pos:line="4" pos:column="21">{	<comment type="block" pos:line="4" pos:column="25">/* immediate operand */</comment>
		<expr_stmt><expr><operator pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="18">out<pos:position pos:line="5" pos:column="21"/></name> <operator pos:line="5" pos:column="22">=<pos:position pos:line="5" pos:column="23"/></operator> <name pos:line="5" pos:column="24">result<pos:position pos:line="5" pos:column="30"/></name></expr>;<pos:position pos:line="5" pos:column="31"/></expr_stmt>
		<return pos:line="6" pos:column="17">return <expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr>;<pos:position pos:line="6" pos:column="26"/></return>
	}<pos:position pos:line="7" pos:column="10"/></block></then></if>
	<return pos:line="8" pos:column="9">return <expr><call><name pos:line="8" pos:column="16">parse_int<pos:position pos:line="8" pos:column="25"/></name><argument_list pos:line="8" pos:column="25">(<argument><expr><name pos:line="8" pos:column="26">buf<pos:position pos:line="8" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="31">out<pos:position pos:line="8" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="36">end<pos:position pos:line="8" pos:column="39"/></name></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="41"/></return>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
