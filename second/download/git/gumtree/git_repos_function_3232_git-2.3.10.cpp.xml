<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3232_git-2.3.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">imap_store<pos:position pos:line="1" pos:column="25"/></name></name> <modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">imap_open_store<pos:position pos:line="1" pos:column="42"/></name><parameter_list pos:line="1" pos:column="42">(<parameter><decl><type><name><name pos:line="1" pos:column="43">struct<pos:position pos:line="1" pos:column="49"/></name> <name pos:line="1" pos:column="50">imap_server_conf<pos:position pos:line="1" pos:column="66"/></name></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">srvc<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="74">char<pos:position pos:line="1" pos:column="78"/></name> <modifier pos:line="1" pos:column="79">*<pos:position pos:line="1" pos:column="80"/></modifier></type><name pos:line="1" pos:column="80">folder<pos:position pos:line="1" pos:column="86"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="87"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">credential<pos:position pos:line="3" pos:column="26"/></name></name></type> <name pos:line="3" pos:column="27">cred<pos:position pos:line="3" pos:column="31"/></name> <init pos:line="3" pos:column="32">= <expr><name pos:line="3" pos:column="34">CREDENTIAL_INIT<pos:position pos:line="3" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">imap_store<pos:position pos:line="4" pos:column="26"/></name></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="28">ctx<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">imap<pos:position pos:line="5" pos:column="20"/></name></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">imap<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">arg<pos:position pos:line="6" pos:column="18"/></name></decl>, <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="21">rsp<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">s<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><operator pos:line="7" pos:column="17">-<pos:position pos:line="7" pos:column="18"/></operator><literal type="number" pos:line="7" pos:column="18">1<pos:position pos:line="7" pos:column="19"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="21">preauth<pos:position pos:line="7" pos:column="28"/></name></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>

	<expr_stmt><expr><name pos:line="9" pos:column="9">ctx<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <call><name pos:line="9" pos:column="15">xcalloc<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><literal type="number" pos:line="9" pos:column="23">1<pos:position pos:line="9" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="26">sizeof<argument_list pos:line="9" pos:column="32">(<argument><expr><operator pos:line="9" pos:column="33">*<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="34">ctx<pos:position pos:line="9" pos:column="37"/></name></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="40"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="11" pos:column="9">ctx<pos:position pos:line="11" pos:column="12"/></name><operator pos:line="11" pos:column="12">-&gt;<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="14">imap<pos:position pos:line="11" pos:column="18"/></name></name> <operator pos:line="11" pos:column="19">=<pos:position pos:line="11" pos:column="20"/></operator> <name pos:line="11" pos:column="21">imap<pos:position pos:line="11" pos:column="25"/></name> <operator pos:line="11" pos:column="26">=<pos:position pos:line="11" pos:column="27"/></operator> <call><name pos:line="11" pos:column="28">xcalloc<pos:position pos:line="11" pos:column="35"/></name><argument_list pos:line="11" pos:column="35">(<argument><expr><literal type="number" pos:line="11" pos:column="36">1<pos:position pos:line="11" pos:column="37"/></literal></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="39">sizeof<argument_list pos:line="11" pos:column="45">(<argument><expr><operator pos:line="11" pos:column="46">*<pos:position pos:line="11" pos:column="47"/></operator><name pos:line="11" pos:column="47">imap<pos:position pos:line="11" pos:column="51"/></name></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="54"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="12" pos:column="9">imap<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">-&gt;<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="15">buf<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">.<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="19">sock<pos:position pos:line="12" pos:column="23"/></name><operator pos:line="12" pos:column="23">.<pos:position pos:line="12" pos:column="24"/></operator><name pos:line="12" pos:column="24">fd<pos:position pos:line="12" pos:column="26"/></name><index pos:line="12" pos:column="26">[<expr><literal type="number" pos:line="12" pos:column="27">0<pos:position pos:line="12" pos:column="28"/></literal></expr>]<pos:position pos:line="12" pos:column="29"/></index></name> <operator pos:line="12" pos:column="30">=<pos:position pos:line="12" pos:column="31"/></operator> <name><name pos:line="12" pos:column="32">imap<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">-&gt;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="38">buf<pos:position pos:line="12" pos:column="41"/></name><operator pos:line="12" pos:column="41">.<pos:position pos:line="12" pos:column="42"/></operator><name pos:line="12" pos:column="42">sock<pos:position pos:line="12" pos:column="46"/></name><operator pos:line="12" pos:column="46">.<pos:position pos:line="12" pos:column="47"/></operator><name pos:line="12" pos:column="47">fd<pos:position pos:line="12" pos:column="49"/></name><index pos:line="12" pos:column="49">[<expr><literal type="number" pos:line="12" pos:column="50">1<pos:position pos:line="12" pos:column="51"/></literal></expr>]<pos:position pos:line="12" pos:column="52"/></index></name> <operator pos:line="12" pos:column="53">=<pos:position pos:line="12" pos:column="54"/></operator> <operator pos:line="12" pos:column="55">-<pos:position pos:line="12" pos:column="56"/></operator><literal type="number" pos:line="12" pos:column="56">1<pos:position pos:line="12" pos:column="57"/></literal></expr>;<pos:position pos:line="12" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="13" pos:column="9">imap<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">-&gt;<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="15">in_progress_append<pos:position pos:line="13" pos:column="33"/></name></name> <operator pos:line="13" pos:column="34">=<pos:position pos:line="13" pos:column="35"/></operator> <operator pos:line="13" pos:column="36">&amp;<pos:position pos:line="13" pos:column="41"/></operator><name><name pos:line="13" pos:column="37">imap<pos:position pos:line="13" pos:column="41"/></name><operator pos:line="13" pos:column="41">-&gt;<pos:position pos:line="13" pos:column="46"/></operator><name pos:line="13" pos:column="43">in_progress<pos:position pos:line="13" pos:column="54"/></name></name></expr>;<pos:position pos:line="13" pos:column="55"/></expr_stmt>

	<comment type="block" pos:line="15" pos:column="9">/* open connection to IMAP server */</comment>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name><name pos:line="17" pos:column="13">srvc<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">-&gt;<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="19">tunnel<pos:position pos:line="17" pos:column="25"/></name></name></expr>)<pos:position pos:line="17" pos:column="26"/></condition><then pos:line="17" pos:column="26"> <block pos:line="17" pos:column="27">{
		<decl_stmt><decl><type><name><name pos:line="18" pos:column="17">struct<pos:position pos:line="18" pos:column="23"/></name> <name pos:line="18" pos:column="24">child_process<pos:position pos:line="18" pos:column="37"/></name></name></type> <name pos:line="18" pos:column="38">tunnel<pos:position pos:line="18" pos:column="44"/></name> <init pos:line="18" pos:column="45">= <expr><name pos:line="18" pos:column="47">CHILD_PROCESS_INIT<pos:position pos:line="18" pos:column="65"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="66"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="20" pos:column="17">imap_info<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">(<argument><expr><literal type="string" pos:line="20" pos:column="27">"Starting tunnel '%s'... "<pos:position pos:line="20" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="55">srvc<pos:position pos:line="20" pos:column="59"/></name><operator pos:line="20" pos:column="59">-&gt;<pos:position pos:line="20" pos:column="64"/></operator><name pos:line="20" pos:column="61">tunnel<pos:position pos:line="20" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="69"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="22" pos:column="17">argv_array_push<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><operator pos:line="22" pos:column="33">&amp;<pos:position pos:line="22" pos:column="38"/></operator><name><name pos:line="22" pos:column="34">tunnel<pos:position pos:line="22" pos:column="40"/></name><operator pos:line="22" pos:column="40">.<pos:position pos:line="22" pos:column="41"/></operator><name pos:line="22" pos:column="41">args<pos:position pos:line="22" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="47">srvc<pos:position pos:line="22" pos:column="51"/></name><operator pos:line="22" pos:column="51">-&gt;<pos:position pos:line="22" pos:column="56"/></operator><name pos:line="22" pos:column="53">tunnel<pos:position pos:line="22" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="61"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="23" pos:column="17">tunnel<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">.<pos:position pos:line="23" pos:column="24"/></operator><name pos:line="23" pos:column="24">use_shell<pos:position pos:line="23" pos:column="33"/></name></name> <operator pos:line="23" pos:column="34">=<pos:position pos:line="23" pos:column="35"/></operator> <literal type="number" pos:line="23" pos:column="36">1<pos:position pos:line="23" pos:column="37"/></literal></expr>;<pos:position pos:line="23" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="24" pos:column="17">tunnel<pos:position pos:line="24" pos:column="23"/></name><operator pos:line="24" pos:column="23">.<pos:position pos:line="24" pos:column="24"/></operator><name pos:line="24" pos:column="24">in<pos:position pos:line="24" pos:column="26"/></name></name> <operator pos:line="24" pos:column="27">=<pos:position pos:line="24" pos:column="28"/></operator> <operator pos:line="24" pos:column="29">-<pos:position pos:line="24" pos:column="30"/></operator><literal type="number" pos:line="24" pos:column="30">1<pos:position pos:line="24" pos:column="31"/></literal></expr>;<pos:position pos:line="24" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="25" pos:column="17">tunnel<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">.<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="24">out<pos:position pos:line="25" pos:column="27"/></name></name> <operator pos:line="25" pos:column="28">=<pos:position pos:line="25" pos:column="29"/></operator> <operator pos:line="25" pos:column="30">-<pos:position pos:line="25" pos:column="31"/></operator><literal type="number" pos:line="25" pos:column="31">1<pos:position pos:line="25" pos:column="32"/></literal></expr>;<pos:position pos:line="25" pos:column="33"/></expr_stmt>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><call><name pos:line="26" pos:column="21">start_command<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><operator pos:line="26" pos:column="35">&amp;<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="36">tunnel<pos:position pos:line="26" pos:column="42"/></name></expr></argument>)<pos:position pos:line="26" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="44"/></condition><then pos:line="26" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="25">die<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><literal type="string" pos:line="27" pos:column="29">"cannot start proxy %s"<pos:position pos:line="27" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="54">srvc<pos:position pos:line="27" pos:column="58"/></name><operator pos:line="27" pos:column="58">-&gt;<pos:position pos:line="27" pos:column="63"/></operator><name pos:line="27" pos:column="60">tunnel<pos:position pos:line="27" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="68"/></expr_stmt></block></then></if>

		<expr_stmt><expr><name><name pos:line="29" pos:column="17">imap<pos:position pos:line="29" pos:column="21"/></name><operator pos:line="29" pos:column="21">-&gt;<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="23">buf<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">.<pos:position pos:line="29" pos:column="27"/></operator><name pos:line="29" pos:column="27">sock<pos:position pos:line="29" pos:column="31"/></name><operator pos:line="29" pos:column="31">.<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="32">fd<pos:position pos:line="29" pos:column="34"/></name><index pos:line="29" pos:column="34">[<expr><literal type="number" pos:line="29" pos:column="35">0<pos:position pos:line="29" pos:column="36"/></literal></expr>]<pos:position pos:line="29" pos:column="37"/></index></name> <operator pos:line="29" pos:column="38">=<pos:position pos:line="29" pos:column="39"/></operator> <name><name pos:line="29" pos:column="40">tunnel<pos:position pos:line="29" pos:column="46"/></name><operator pos:line="29" pos:column="46">.<pos:position pos:line="29" pos:column="47"/></operator><name pos:line="29" pos:column="47">out<pos:position pos:line="29" pos:column="50"/></name></name></expr>;<pos:position pos:line="29" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="30" pos:column="17">imap<pos:position pos:line="30" pos:column="21"/></name><operator pos:line="30" pos:column="21">-&gt;<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="23">buf<pos:position pos:line="30" pos:column="26"/></name><operator pos:line="30" pos:column="26">.<pos:position pos:line="30" pos:column="27"/></operator><name pos:line="30" pos:column="27">sock<pos:position pos:line="30" pos:column="31"/></name><operator pos:line="30" pos:column="31">.<pos:position pos:line="30" pos:column="32"/></operator><name pos:line="30" pos:column="32">fd<pos:position pos:line="30" pos:column="34"/></name><index pos:line="30" pos:column="34">[<expr><literal type="number" pos:line="30" pos:column="35">1<pos:position pos:line="30" pos:column="36"/></literal></expr>]<pos:position pos:line="30" pos:column="37"/></index></name> <operator pos:line="30" pos:column="38">=<pos:position pos:line="30" pos:column="39"/></operator> <name><name pos:line="30" pos:column="40">tunnel<pos:position pos:line="30" pos:column="46"/></name><operator pos:line="30" pos:column="46">.<pos:position pos:line="30" pos:column="47"/></operator><name pos:line="30" pos:column="47">in<pos:position pos:line="30" pos:column="49"/></name></name></expr>;<pos:position pos:line="30" pos:column="50"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="32" pos:column="17">imap_info<pos:position pos:line="32" pos:column="26"/></name><argument_list pos:line="32" pos:column="26">(<argument><expr><literal type="string" pos:line="32" pos:column="27">"ok\n"<pos:position pos:line="32" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="33" pos:column="10"/></block></then> <else pos:line="33" pos:column="11">else <block pos:line="33" pos:column="16">{
<cpp:ifndef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">ifndef<pos:position pos:line="34" pos:column="8"/></cpp:directive> <name pos:line="34" pos:column="9">NO_IPV6<pos:position pos:line="34" pos:column="16"/></name></cpp:ifndef>
		<decl_stmt><decl><type><name><name pos:line="35" pos:column="17">struct<pos:position pos:line="35" pos:column="23"/></name> <name pos:line="35" pos:column="24">addrinfo<pos:position pos:line="35" pos:column="32"/></name></name></type> <name pos:line="35" pos:column="33">hints<pos:position pos:line="35" pos:column="38"/></name></decl>, <modifier pos:line="35" pos:column="40">*<pos:position pos:line="35" pos:column="41"/></modifier><decl><type ref="prev"/><name pos:line="35" pos:column="41">ai0<pos:position pos:line="35" pos:column="44"/></name></decl>, <modifier pos:line="35" pos:column="46">*<pos:position pos:line="35" pos:column="47"/></modifier><decl><type ref="prev"/><name pos:line="35" pos:column="47">ai<pos:position pos:line="35" pos:column="49"/></name></decl>;<pos:position pos:line="35" pos:column="50"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="36" pos:column="17">int<pos:position pos:line="36" pos:column="20"/></name></type> <name pos:line="36" pos:column="21">gai<pos:position pos:line="36" pos:column="24"/></name></decl>;<pos:position pos:line="36" pos:column="25"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">char<pos:position pos:line="37" pos:column="21"/></name></type> <name><name pos:line="37" pos:column="22">portstr<pos:position pos:line="37" pos:column="29"/></name><index pos:line="37" pos:column="29">[<expr><literal type="number" pos:line="37" pos:column="30">6<pos:position pos:line="37" pos:column="31"/></literal></expr>]<pos:position pos:line="37" pos:column="32"/></index></name></decl>;<pos:position pos:line="37" pos:column="33"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="39" pos:column="17">snprintf<pos:position pos:line="39" pos:column="25"/></name><argument_list pos:line="39" pos:column="25">(<argument><expr><name pos:line="39" pos:column="26">portstr<pos:position pos:line="39" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="39" pos:column="35">sizeof<argument_list pos:line="39" pos:column="41">(<argument><expr><name pos:line="39" pos:column="42">portstr<pos:position pos:line="39" pos:column="49"/></name></expr></argument>)<pos:position pos:line="39" pos:column="50"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="52">"%d"<pos:position pos:line="39" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="58">srvc<pos:position pos:line="39" pos:column="62"/></name><operator pos:line="39" pos:column="62">-&gt;<pos:position pos:line="39" pos:column="67"/></operator><name pos:line="39" pos:column="64">port<pos:position pos:line="39" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="70"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="41" pos:column="17">memset<pos:position pos:line="41" pos:column="23"/></name><argument_list pos:line="41" pos:column="23">(<argument><expr><operator pos:line="41" pos:column="24">&amp;<pos:position pos:line="41" pos:column="29"/></operator><name pos:line="41" pos:column="25">hints<pos:position pos:line="41" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="32">0<pos:position pos:line="41" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="35">sizeof<argument_list pos:line="41" pos:column="41">(<argument><expr><name pos:line="41" pos:column="42">hints<pos:position pos:line="41" pos:column="47"/></name></expr></argument>)<pos:position pos:line="41" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="41" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="42" pos:column="17">hints<pos:position pos:line="42" pos:column="22"/></name><operator pos:line="42" pos:column="22">.<pos:position pos:line="42" pos:column="23"/></operator><name pos:line="42" pos:column="23">ai_socktype<pos:position pos:line="42" pos:column="34"/></name></name> <operator pos:line="42" pos:column="35">=<pos:position pos:line="42" pos:column="36"/></operator> <name pos:line="42" pos:column="37">SOCK_STREAM<pos:position pos:line="42" pos:column="48"/></name></expr>;<pos:position pos:line="42" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="43" pos:column="17">hints<pos:position pos:line="43" pos:column="22"/></name><operator pos:line="43" pos:column="22">.<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="23">ai_protocol<pos:position pos:line="43" pos:column="34"/></name></name> <operator pos:line="43" pos:column="35">=<pos:position pos:line="43" pos:column="36"/></operator> <name pos:line="43" pos:column="37">IPPROTO_TCP<pos:position pos:line="43" pos:column="48"/></name></expr>;<pos:position pos:line="43" pos:column="49"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="45" pos:column="17">imap_info<pos:position pos:line="45" pos:column="26"/></name><argument_list pos:line="45" pos:column="26">(<argument><expr><literal type="string" pos:line="45" pos:column="27">"Resolving %s... "<pos:position pos:line="45" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="47">srvc<pos:position pos:line="45" pos:column="51"/></name><operator pos:line="45" pos:column="51">-&gt;<pos:position pos:line="45" pos:column="56"/></operator><name pos:line="45" pos:column="53">host<pos:position pos:line="45" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name pos:line="46" pos:column="17">gai<pos:position pos:line="46" pos:column="20"/></name> <operator pos:line="46" pos:column="21">=<pos:position pos:line="46" pos:column="22"/></operator> <call><name pos:line="46" pos:column="23">getaddrinfo<pos:position pos:line="46" pos:column="34"/></name><argument_list pos:line="46" pos:column="34">(<argument><expr><name><name pos:line="46" pos:column="35">srvc<pos:position pos:line="46" pos:column="39"/></name><operator pos:line="46" pos:column="39">-&gt;<pos:position pos:line="46" pos:column="44"/></operator><name pos:line="46" pos:column="41">host<pos:position pos:line="46" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="47">portstr<pos:position pos:line="46" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="56">&amp;<pos:position pos:line="46" pos:column="61"/></operator><name pos:line="46" pos:column="57">hints<pos:position pos:line="46" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="64">&amp;<pos:position pos:line="46" pos:column="69"/></operator><name pos:line="46" pos:column="65">ai<pos:position pos:line="46" pos:column="67"/></name></expr></argument>)<pos:position pos:line="46" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="69"/></expr_stmt>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">gai<pos:position pos:line="47" pos:column="24"/></name></expr>)<pos:position pos:line="47" pos:column="25"/></condition><then pos:line="47" pos:column="25"> <block pos:line="47" pos:column="26">{
			<expr_stmt><expr><call><name pos:line="48" pos:column="25">fprintf<pos:position pos:line="48" pos:column="32"/></name><argument_list pos:line="48" pos:column="32">(<argument><expr><name pos:line="48" pos:column="33">stderr<pos:position pos:line="48" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="41">"getaddrinfo: %s\n"<pos:position pos:line="48" pos:column="60"/></literal></expr></argument>, <argument><expr><call><name pos:line="48" pos:column="62">gai_strerror<pos:position pos:line="48" pos:column="74"/></name><argument_list pos:line="48" pos:column="74">(<argument><expr><name pos:line="48" pos:column="75">gai<pos:position pos:line="48" pos:column="78"/></name></expr></argument>)<pos:position pos:line="48" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="81"/></expr_stmt>
			<goto pos:line="49" pos:column="25">goto <name pos:line="49" pos:column="30">bail<pos:position pos:line="49" pos:column="34"/></name>;<pos:position pos:line="49" pos:column="35"/></goto>
		}<pos:position pos:line="50" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">imap_info<pos:position pos:line="51" pos:column="26"/></name><argument_list pos:line="51" pos:column="26">(<argument><expr><literal type="string" pos:line="51" pos:column="27">"ok\n"<pos:position pos:line="51" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="35"/></expr_stmt>

		<for pos:line="53" pos:column="17">for <control pos:line="53" pos:column="21">(<init><expr><name pos:line="53" pos:column="22">ai0<pos:position pos:line="53" pos:column="25"/></name> <operator pos:line="53" pos:column="26">=<pos:position pos:line="53" pos:column="27"/></operator> <name pos:line="53" pos:column="28">ai<pos:position pos:line="53" pos:column="30"/></name></expr>;<pos:position pos:line="53" pos:column="31"/></init> <condition><expr><name pos:line="53" pos:column="32">ai<pos:position pos:line="53" pos:column="34"/></name></expr>;<pos:position pos:line="53" pos:column="35"/></condition> <incr><expr><name pos:line="53" pos:column="36">ai<pos:position pos:line="53" pos:column="38"/></name> <operator pos:line="53" pos:column="39">=<pos:position pos:line="53" pos:column="40"/></operator> <name><name pos:line="53" pos:column="41">ai<pos:position pos:line="53" pos:column="43"/></name><operator pos:line="53" pos:column="43">-&gt;<pos:position pos:line="53" pos:column="48"/></operator><name pos:line="53" pos:column="45">ai_next<pos:position pos:line="53" pos:column="52"/></name></name></expr></incr>)<pos:position pos:line="53" pos:column="53"/></control> <block pos:line="53" pos:column="54">{
			<decl_stmt><decl><type><name pos:line="54" pos:column="25">char<pos:position pos:line="54" pos:column="29"/></name></type> <name><name pos:line="54" pos:column="30">addr<pos:position pos:line="54" pos:column="34"/></name><index pos:line="54" pos:column="34">[<expr><name pos:line="54" pos:column="35">NI_MAXHOST<pos:position pos:line="54" pos:column="45"/></name></expr>]<pos:position pos:line="54" pos:column="46"/></index></name></decl>;<pos:position pos:line="54" pos:column="47"/></decl_stmt>

			<expr_stmt><expr><name pos:line="56" pos:column="25">s<pos:position pos:line="56" pos:column="26"/></name> <operator pos:line="56" pos:column="27">=<pos:position pos:line="56" pos:column="28"/></operator> <call><name pos:line="56" pos:column="29">socket<pos:position pos:line="56" pos:column="35"/></name><argument_list pos:line="56" pos:column="35">(<argument><expr><name><name pos:line="56" pos:column="36">ai<pos:position pos:line="56" pos:column="38"/></name><operator pos:line="56" pos:column="38">-&gt;<pos:position pos:line="56" pos:column="43"/></operator><name pos:line="56" pos:column="40">ai_family<pos:position pos:line="56" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="51">ai<pos:position pos:line="56" pos:column="53"/></name><operator pos:line="56" pos:column="53">-&gt;<pos:position pos:line="56" pos:column="58"/></operator><name pos:line="56" pos:column="55">ai_socktype<pos:position pos:line="56" pos:column="66"/></name></name></expr></argument>,
				   <argument><expr><name><name pos:line="57" pos:column="36">ai<pos:position pos:line="57" pos:column="38"/></name><operator pos:line="57" pos:column="38">-&gt;<pos:position pos:line="57" pos:column="43"/></operator><name pos:line="57" pos:column="40">ai_protocol<pos:position pos:line="57" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="53"/></expr_stmt>
			<if pos:line="58" pos:column="25">if <condition pos:line="58" pos:column="28">(<expr><name pos:line="58" pos:column="29">s<pos:position pos:line="58" pos:column="30"/></name> <operator pos:line="58" pos:column="31">&lt;<pos:position pos:line="58" pos:column="35"/></operator> <literal type="number" pos:line="58" pos:column="33">0<pos:position pos:line="58" pos:column="34"/></literal></expr>)<pos:position pos:line="58" pos:column="35"/></condition><then pos:line="58" pos:column="35">
				<block type="pseudo"><continue pos:line="59" pos:column="33">continue;<pos:position pos:line="59" pos:column="42"/></continue></block></then></if>

			<expr_stmt><expr><call><name pos:line="61" pos:column="25">getnameinfo<pos:position pos:line="61" pos:column="36"/></name><argument_list pos:line="61" pos:column="36">(<argument><expr><name><name pos:line="61" pos:column="37">ai<pos:position pos:line="61" pos:column="39"/></name><operator pos:line="61" pos:column="39">-&gt;<pos:position pos:line="61" pos:column="44"/></operator><name pos:line="61" pos:column="41">ai_addr<pos:position pos:line="61" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="50">ai<pos:position pos:line="61" pos:column="52"/></name><operator pos:line="61" pos:column="52">-&gt;<pos:position pos:line="61" pos:column="57"/></operator><name pos:line="61" pos:column="54">ai_addrlen<pos:position pos:line="61" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="66">addr<pos:position pos:line="61" pos:column="70"/></name></expr></argument>,
				    <argument><expr><sizeof pos:line="62" pos:column="37">sizeof<argument_list pos:line="62" pos:column="43">(<argument><expr><name pos:line="62" pos:column="44">addr<pos:position pos:line="62" pos:column="48"/></name></expr></argument>)<pos:position pos:line="62" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="62" pos:column="51">NULL<pos:position pos:line="62" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="57">0<pos:position pos:line="62" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="60">NI_NUMERICHOST<pos:position pos:line="62" pos:column="74"/></name></expr></argument>)<pos:position pos:line="62" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="76"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="63" pos:column="25">imap_info<pos:position pos:line="63" pos:column="34"/></name><argument_list pos:line="63" pos:column="34">(<argument><expr><literal type="string" pos:line="63" pos:column="35">"Connecting to [%s]:%s... "<pos:position pos:line="63" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="64">addr<pos:position pos:line="63" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="70">portstr<pos:position pos:line="63" pos:column="77"/></name></expr></argument>)<pos:position pos:line="63" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="79"/></expr_stmt>

			<if pos:line="65" pos:column="25">if <condition pos:line="65" pos:column="28">(<expr><call><name pos:line="65" pos:column="29">connect<pos:position pos:line="65" pos:column="36"/></name><argument_list pos:line="65" pos:column="36">(<argument><expr><name pos:line="65" pos:column="37">s<pos:position pos:line="65" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="40">ai<pos:position pos:line="65" pos:column="42"/></name><operator pos:line="65" pos:column="42">-&gt;<pos:position pos:line="65" pos:column="47"/></operator><name pos:line="65" pos:column="44">ai_addr<pos:position pos:line="65" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="53">ai<pos:position pos:line="65" pos:column="55"/></name><operator pos:line="65" pos:column="55">-&gt;<pos:position pos:line="65" pos:column="60"/></operator><name pos:line="65" pos:column="57">ai_addrlen<pos:position pos:line="65" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="68"/></argument_list></call> <operator pos:line="65" pos:column="69">&lt;<pos:position pos:line="65" pos:column="73"/></operator> <literal type="number" pos:line="65" pos:column="71">0<pos:position pos:line="65" pos:column="72"/></literal></expr>)<pos:position pos:line="65" pos:column="73"/></condition><then pos:line="65" pos:column="73"> <block pos:line="65" pos:column="74">{
				<expr_stmt><expr><call><name pos:line="66" pos:column="33">close<pos:position pos:line="66" pos:column="38"/></name><argument_list pos:line="66" pos:column="38">(<argument><expr><name pos:line="66" pos:column="39">s<pos:position pos:line="66" pos:column="40"/></name></expr></argument>)<pos:position pos:line="66" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="42"/></expr_stmt>
				<expr_stmt><expr><name pos:line="67" pos:column="33">s<pos:position pos:line="67" pos:column="34"/></name> <operator pos:line="67" pos:column="35">=<pos:position pos:line="67" pos:column="36"/></operator> <operator pos:line="67" pos:column="37">-<pos:position pos:line="67" pos:column="38"/></operator><literal type="number" pos:line="67" pos:column="38">1<pos:position pos:line="67" pos:column="39"/></literal></expr>;<pos:position pos:line="67" pos:column="40"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="68" pos:column="33">perror<pos:position pos:line="68" pos:column="39"/></name><argument_list pos:line="68" pos:column="39">(<argument><expr><literal type="string" pos:line="68" pos:column="40">"connect"<pos:position pos:line="68" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="51"/></expr_stmt>
				<continue pos:line="69" pos:column="33">continue;<pos:position pos:line="69" pos:column="42"/></continue>
			}<pos:position pos:line="70" pos:column="26"/></block></then></if>

			<break pos:line="72" pos:column="25">break;<pos:position pos:line="72" pos:column="31"/></break>
		}<pos:position pos:line="73" pos:column="18"/></block></for>
		<expr_stmt><expr><call><name pos:line="74" pos:column="17">freeaddrinfo<pos:position pos:line="74" pos:column="29"/></name><argument_list pos:line="74" pos:column="29">(<argument><expr><name pos:line="74" pos:column="30">ai0<pos:position pos:line="74" pos:column="33"/></name></expr></argument>)<pos:position pos:line="74" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="35"/></expr_stmt>
<cpp:else pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">else<pos:position pos:line="75" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="75" pos:column="7">/* NO_IPV6 */</comment>
		<decl_stmt><decl><type><name><name pos:line="76" pos:column="17">struct<pos:position pos:line="76" pos:column="23"/></name> <name pos:line="76" pos:column="24">hostent<pos:position pos:line="76" pos:column="31"/></name></name> <modifier pos:line="76" pos:column="32">*<pos:position pos:line="76" pos:column="33"/></modifier></type><name pos:line="76" pos:column="33">he<pos:position pos:line="76" pos:column="35"/></name></decl>;<pos:position pos:line="76" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="77" pos:column="17">struct<pos:position pos:line="77" pos:column="23"/></name> <name pos:line="77" pos:column="24">sockaddr_in<pos:position pos:line="77" pos:column="35"/></name></name></type> <name pos:line="77" pos:column="36">addr<pos:position pos:line="77" pos:column="40"/></name></decl>;<pos:position pos:line="77" pos:column="41"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="79" pos:column="17">memset<pos:position pos:line="79" pos:column="23"/></name><argument_list pos:line="79" pos:column="23">(<argument><expr><operator pos:line="79" pos:column="24">&amp;<pos:position pos:line="79" pos:column="29"/></operator><name pos:line="79" pos:column="25">addr<pos:position pos:line="79" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="79" pos:column="31">0<pos:position pos:line="79" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="79" pos:column="34">sizeof<argument_list pos:line="79" pos:column="40">(<argument><expr><name pos:line="79" pos:column="41">addr<pos:position pos:line="79" pos:column="45"/></name></expr></argument>)<pos:position pos:line="79" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="79" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="80" pos:column="17">addr<pos:position pos:line="80" pos:column="21"/></name><operator pos:line="80" pos:column="21">.<pos:position pos:line="80" pos:column="22"/></operator><name pos:line="80" pos:column="22">sin_port<pos:position pos:line="80" pos:column="30"/></name></name> <operator pos:line="80" pos:column="31">=<pos:position pos:line="80" pos:column="32"/></operator> <call><name pos:line="80" pos:column="33">htons<pos:position pos:line="80" pos:column="38"/></name><argument_list pos:line="80" pos:column="38">(<argument><expr><name><name pos:line="80" pos:column="39">srvc<pos:position pos:line="80" pos:column="43"/></name><operator pos:line="80" pos:column="43">-&gt;<pos:position pos:line="80" pos:column="48"/></operator><name pos:line="80" pos:column="45">port<pos:position pos:line="80" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="81" pos:column="17">addr<pos:position pos:line="81" pos:column="21"/></name><operator pos:line="81" pos:column="21">.<pos:position pos:line="81" pos:column="22"/></operator><name pos:line="81" pos:column="22">sin_family<pos:position pos:line="81" pos:column="32"/></name></name> <operator pos:line="81" pos:column="33">=<pos:position pos:line="81" pos:column="34"/></operator> <name pos:line="81" pos:column="35">AF_INET<pos:position pos:line="81" pos:column="42"/></name></expr>;<pos:position pos:line="81" pos:column="43"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="83" pos:column="17">imap_info<pos:position pos:line="83" pos:column="26"/></name><argument_list pos:line="83" pos:column="26">(<argument><expr><literal type="string" pos:line="83" pos:column="27">"Resolving %s... "<pos:position pos:line="83" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="47">srvc<pos:position pos:line="83" pos:column="51"/></name><operator pos:line="83" pos:column="51">-&gt;<pos:position pos:line="83" pos:column="56"/></operator><name pos:line="83" pos:column="53">host<pos:position pos:line="83" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name pos:line="84" pos:column="17">he<pos:position pos:line="84" pos:column="19"/></name> <operator pos:line="84" pos:column="20">=<pos:position pos:line="84" pos:column="21"/></operator> <call><name pos:line="84" pos:column="22">gethostbyname<pos:position pos:line="84" pos:column="35"/></name><argument_list pos:line="84" pos:column="35">(<argument><expr><name><name pos:line="84" pos:column="36">srvc<pos:position pos:line="84" pos:column="40"/></name><operator pos:line="84" pos:column="40">-&gt;<pos:position pos:line="84" pos:column="45"/></operator><name pos:line="84" pos:column="42">host<pos:position pos:line="84" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="48"/></expr_stmt>
		<if pos:line="85" pos:column="17">if <condition pos:line="85" pos:column="20">(<expr><operator pos:line="85" pos:column="21">!<pos:position pos:line="85" pos:column="22"/></operator><name pos:line="85" pos:column="22">he<pos:position pos:line="85" pos:column="24"/></name></expr>)<pos:position pos:line="85" pos:column="25"/></condition><then pos:line="85" pos:column="25"> <block pos:line="85" pos:column="26">{
			<expr_stmt><expr><call><name pos:line="86" pos:column="25">perror<pos:position pos:line="86" pos:column="31"/></name><argument_list pos:line="86" pos:column="31">(<argument><expr><literal type="string" pos:line="86" pos:column="32">"gethostbyname"<pos:position pos:line="86" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="49"/></expr_stmt>
			<goto pos:line="87" pos:column="25">goto <name pos:line="87" pos:column="30">bail<pos:position pos:line="87" pos:column="34"/></name>;<pos:position pos:line="87" pos:column="35"/></goto>
		}<pos:position pos:line="88" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="89" pos:column="17">imap_info<pos:position pos:line="89" pos:column="26"/></name><argument_list pos:line="89" pos:column="26">(<argument><expr><literal type="string" pos:line="89" pos:column="27">"ok\n"<pos:position pos:line="89" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="35"/></expr_stmt>

		<expr_stmt><expr><name><name pos:line="91" pos:column="17">addr<pos:position pos:line="91" pos:column="21"/></name><operator pos:line="91" pos:column="21">.<pos:position pos:line="91" pos:column="22"/></operator><name pos:line="91" pos:column="22">sin_addr<pos:position pos:line="91" pos:column="30"/></name><operator pos:line="91" pos:column="30">.<pos:position pos:line="91" pos:column="31"/></operator><name pos:line="91" pos:column="31">s_addr<pos:position pos:line="91" pos:column="37"/></name></name> <operator pos:line="91" pos:column="38">=<pos:position pos:line="91" pos:column="39"/></operator> <operator pos:line="91" pos:column="40">*<pos:position pos:line="91" pos:column="41"/></operator><operator pos:line="91" pos:column="41">(<pos:position pos:line="91" pos:column="42"/></operator><operator pos:line="91" pos:column="42">(<pos:position pos:line="91" pos:column="43"/></operator><name pos:line="91" pos:column="43">int<pos:position pos:line="91" pos:column="46"/></name> <operator pos:line="91" pos:column="47">*<pos:position pos:line="91" pos:column="48"/></operator><operator pos:line="91" pos:column="48">)<pos:position pos:line="91" pos:column="49"/></operator> <name><name pos:line="91" pos:column="50">he<pos:position pos:line="91" pos:column="52"/></name><operator pos:line="91" pos:column="52">-&gt;<pos:position pos:line="91" pos:column="57"/></operator><name pos:line="91" pos:column="54">h_addr_list<pos:position pos:line="91" pos:column="65"/></name><index pos:line="91" pos:column="65">[<expr><literal type="number" pos:line="91" pos:column="66">0<pos:position pos:line="91" pos:column="67"/></literal></expr>]<pos:position pos:line="91" pos:column="68"/></index></name><operator pos:line="91" pos:column="68">)<pos:position pos:line="91" pos:column="69"/></operator></expr>;<pos:position pos:line="91" pos:column="70"/></expr_stmt>

		<expr_stmt><expr><name pos:line="93" pos:column="17">s<pos:position pos:line="93" pos:column="18"/></name> <operator pos:line="93" pos:column="19">=<pos:position pos:line="93" pos:column="20"/></operator> <call><name pos:line="93" pos:column="21">socket<pos:position pos:line="93" pos:column="27"/></name><argument_list pos:line="93" pos:column="27">(<argument><expr><name pos:line="93" pos:column="28">PF_INET<pos:position pos:line="93" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="37">SOCK_STREAM<pos:position pos:line="93" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="93" pos:column="50">0<pos:position pos:line="93" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="53"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="95" pos:column="17">imap_info<pos:position pos:line="95" pos:column="26"/></name><argument_list pos:line="95" pos:column="26">(<argument><expr><literal type="string" pos:line="95" pos:column="27">"Connecting to %s:%hu... "<pos:position pos:line="95" pos:column="53"/></literal></expr></argument>, <argument><expr><call><name pos:line="95" pos:column="55">inet_ntoa<pos:position pos:line="95" pos:column="64"/></name><argument_list pos:line="95" pos:column="64">(<argument><expr><name><name pos:line="95" pos:column="65">addr<pos:position pos:line="95" pos:column="69"/></name><operator pos:line="95" pos:column="69">.<pos:position pos:line="95" pos:column="70"/></operator><name pos:line="95" pos:column="70">sin_addr<pos:position pos:line="95" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="95" pos:column="79"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="95" pos:column="81">ntohs<pos:position pos:line="95" pos:column="86"/></name><argument_list pos:line="95" pos:column="86">(<argument><expr><name><name pos:line="95" pos:column="87">addr<pos:position pos:line="95" pos:column="91"/></name><operator pos:line="95" pos:column="91">.<pos:position pos:line="95" pos:column="92"/></operator><name pos:line="95" pos:column="92">sin_port<pos:position pos:line="95" pos:column="100"/></name></name></expr></argument>)<pos:position pos:line="95" pos:column="101"/></argument_list></call></expr></argument>)<pos:position pos:line="95" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="103"/></expr_stmt>
		<if pos:line="96" pos:column="17">if <condition pos:line="96" pos:column="20">(<expr><call><name pos:line="96" pos:column="21">connect<pos:position pos:line="96" pos:column="28"/></name><argument_list pos:line="96" pos:column="28">(<argument><expr><name pos:line="96" pos:column="29">s<pos:position pos:line="96" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="96" pos:column="32">(<pos:position pos:line="96" pos:column="33"/></operator>struct <name pos:line="96" pos:column="40">sockaddr<pos:position pos:line="96" pos:column="48"/></name> <operator pos:line="96" pos:column="49">*<pos:position pos:line="96" pos:column="50"/></operator><operator pos:line="96" pos:column="50">)<pos:position pos:line="96" pos:column="51"/></operator><operator pos:line="96" pos:column="51">&amp;<pos:position pos:line="96" pos:column="56"/></operator><name pos:line="96" pos:column="52">addr<pos:position pos:line="96" pos:column="56"/></name></expr></argument>, <argument><expr><sizeof pos:line="96" pos:column="58">sizeof<argument_list pos:line="96" pos:column="64">(<argument><expr><name pos:line="96" pos:column="65">addr<pos:position pos:line="96" pos:column="69"/></name></expr></argument>)<pos:position pos:line="96" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="96" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="96" pos:column="72"/></condition><then pos:line="96" pos:column="72"> <block pos:line="96" pos:column="73">{
			<expr_stmt><expr><call><name pos:line="97" pos:column="25">close<pos:position pos:line="97" pos:column="30"/></name><argument_list pos:line="97" pos:column="30">(<argument><expr><name pos:line="97" pos:column="31">s<pos:position pos:line="97" pos:column="32"/></name></expr></argument>)<pos:position pos:line="97" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name pos:line="98" pos:column="25">s<pos:position pos:line="98" pos:column="26"/></name> <operator pos:line="98" pos:column="27">=<pos:position pos:line="98" pos:column="28"/></operator> <operator pos:line="98" pos:column="29">-<pos:position pos:line="98" pos:column="30"/></operator><literal type="number" pos:line="98" pos:column="30">1<pos:position pos:line="98" pos:column="31"/></literal></expr>;<pos:position pos:line="98" pos:column="32"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="99" pos:column="25">perror<pos:position pos:line="99" pos:column="31"/></name><argument_list pos:line="99" pos:column="31">(<argument><expr><literal type="string" pos:line="99" pos:column="32">"connect"<pos:position pos:line="99" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="100" pos:column="18"/></block></then></if>
<cpp:endif pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">endif<pos:position pos:line="101" pos:column="7"/></cpp:directive></cpp:endif>
		<if pos:line="102" pos:column="17">if <condition pos:line="102" pos:column="20">(<expr><name pos:line="102" pos:column="21">s<pos:position pos:line="102" pos:column="22"/></name> <operator pos:line="102" pos:column="23">&lt;<pos:position pos:line="102" pos:column="27"/></operator> <literal type="number" pos:line="102" pos:column="25">0<pos:position pos:line="102" pos:column="26"/></literal></expr>)<pos:position pos:line="102" pos:column="27"/></condition><then pos:line="102" pos:column="27"> <block pos:line="102" pos:column="28">{
			<expr_stmt><expr><call><name pos:line="103" pos:column="25">fputs<pos:position pos:line="103" pos:column="30"/></name><argument_list pos:line="103" pos:column="30">(<argument><expr><literal type="string" pos:line="103" pos:column="31">"Error: unable to connect to server.\n"<pos:position pos:line="103" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="103" pos:column="72">stderr<pos:position pos:line="103" pos:column="78"/></name></expr></argument>)<pos:position pos:line="103" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="80"/></expr_stmt>
			<goto pos:line="104" pos:column="25">goto <name pos:line="104" pos:column="30">bail<pos:position pos:line="104" pos:column="34"/></name>;<pos:position pos:line="104" pos:column="35"/></goto>
		}<pos:position pos:line="105" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name><name pos:line="107" pos:column="17">imap<pos:position pos:line="107" pos:column="21"/></name><operator pos:line="107" pos:column="21">-&gt;<pos:position pos:line="107" pos:column="26"/></operator><name pos:line="107" pos:column="23">buf<pos:position pos:line="107" pos:column="26"/></name><operator pos:line="107" pos:column="26">.<pos:position pos:line="107" pos:column="27"/></operator><name pos:line="107" pos:column="27">sock<pos:position pos:line="107" pos:column="31"/></name><operator pos:line="107" pos:column="31">.<pos:position pos:line="107" pos:column="32"/></operator><name pos:line="107" pos:column="32">fd<pos:position pos:line="107" pos:column="34"/></name><index pos:line="107" pos:column="34">[<expr><literal type="number" pos:line="107" pos:column="35">0<pos:position pos:line="107" pos:column="36"/></literal></expr>]<pos:position pos:line="107" pos:column="37"/></index></name> <operator pos:line="107" pos:column="38">=<pos:position pos:line="107" pos:column="39"/></operator> <name pos:line="107" pos:column="40">s<pos:position pos:line="107" pos:column="41"/></name></expr>;<pos:position pos:line="107" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="108" pos:column="17">imap<pos:position pos:line="108" pos:column="21"/></name><operator pos:line="108" pos:column="21">-&gt;<pos:position pos:line="108" pos:column="26"/></operator><name pos:line="108" pos:column="23">buf<pos:position pos:line="108" pos:column="26"/></name><operator pos:line="108" pos:column="26">.<pos:position pos:line="108" pos:column="27"/></operator><name pos:line="108" pos:column="27">sock<pos:position pos:line="108" pos:column="31"/></name><operator pos:line="108" pos:column="31">.<pos:position pos:line="108" pos:column="32"/></operator><name pos:line="108" pos:column="32">fd<pos:position pos:line="108" pos:column="34"/></name><index pos:line="108" pos:column="34">[<expr><literal type="number" pos:line="108" pos:column="35">1<pos:position pos:line="108" pos:column="36"/></literal></expr>]<pos:position pos:line="108" pos:column="37"/></index></name> <operator pos:line="108" pos:column="38">=<pos:position pos:line="108" pos:column="39"/></operator> <call><name pos:line="108" pos:column="40">dup<pos:position pos:line="108" pos:column="43"/></name><argument_list pos:line="108" pos:column="43">(<argument><expr><name pos:line="108" pos:column="44">s<pos:position pos:line="108" pos:column="45"/></name></expr></argument>)<pos:position pos:line="108" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="47"/></expr_stmt>

		<if pos:line="110" pos:column="17">if <condition pos:line="110" pos:column="20">(<expr><name><name pos:line="110" pos:column="21">srvc<pos:position pos:line="110" pos:column="25"/></name><operator pos:line="110" pos:column="25">-&gt;<pos:position pos:line="110" pos:column="30"/></operator><name pos:line="110" pos:column="27">use_ssl<pos:position pos:line="110" pos:column="34"/></name></name> <operator pos:line="110" pos:column="35">&amp;&amp;<pos:position pos:line="110" pos:column="45"/></operator>
		    <call><name pos:line="111" pos:column="21">ssl_socket_connect<pos:position pos:line="111" pos:column="39"/></name><argument_list pos:line="111" pos:column="39">(<argument><expr><operator pos:line="111" pos:column="40">&amp;<pos:position pos:line="111" pos:column="45"/></operator><name><name pos:line="111" pos:column="41">imap<pos:position pos:line="111" pos:column="45"/></name><operator pos:line="111" pos:column="45">-&gt;<pos:position pos:line="111" pos:column="50"/></operator><name pos:line="111" pos:column="47">buf<pos:position pos:line="111" pos:column="50"/></name><operator pos:line="111" pos:column="50">.<pos:position pos:line="111" pos:column="51"/></operator><name pos:line="111" pos:column="51">sock<pos:position pos:line="111" pos:column="55"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="111" pos:column="57">0<pos:position pos:line="111" pos:column="58"/></literal></expr></argument>, <argument><expr><name><name pos:line="111" pos:column="60">srvc<pos:position pos:line="111" pos:column="64"/></name><operator pos:line="111" pos:column="64">-&gt;<pos:position pos:line="111" pos:column="69"/></operator><name pos:line="111" pos:column="66">ssl_verify<pos:position pos:line="111" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="111" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="111" pos:column="78"/></condition><then pos:line="111" pos:column="78"> <block pos:line="111" pos:column="79">{
			<expr_stmt><expr><call><name pos:line="112" pos:column="25">close<pos:position pos:line="112" pos:column="30"/></name><argument_list pos:line="112" pos:column="30">(<argument><expr><name pos:line="112" pos:column="31">s<pos:position pos:line="112" pos:column="32"/></name></expr></argument>)<pos:position pos:line="112" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="34"/></expr_stmt>
			<goto pos:line="113" pos:column="25">goto <name pos:line="113" pos:column="30">bail<pos:position pos:line="113" pos:column="34"/></name>;<pos:position pos:line="113" pos:column="35"/></goto>
		}<pos:position pos:line="114" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="115" pos:column="17">imap_info<pos:position pos:line="115" pos:column="26"/></name><argument_list pos:line="115" pos:column="26">(<argument><expr><literal type="string" pos:line="115" pos:column="27">"ok\n"<pos:position pos:line="115" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="116" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="118" pos:column="9">/* read the greeting string */</comment>
	<if pos:line="119" pos:column="9">if <condition pos:line="119" pos:column="12">(<expr><call><name pos:line="119" pos:column="13">buffer_gets<pos:position pos:line="119" pos:column="24"/></name><argument_list pos:line="119" pos:column="24">(<argument><expr><operator pos:line="119" pos:column="25">&amp;<pos:position pos:line="119" pos:column="30"/></operator><name><name pos:line="119" pos:column="26">imap<pos:position pos:line="119" pos:column="30"/></name><operator pos:line="119" pos:column="30">-&gt;<pos:position pos:line="119" pos:column="35"/></operator><name pos:line="119" pos:column="32">buf<pos:position pos:line="119" pos:column="35"/></name></name></expr></argument>, <argument><expr><operator pos:line="119" pos:column="37">&amp;<pos:position pos:line="119" pos:column="42"/></operator><name pos:line="119" pos:column="38">rsp<pos:position pos:line="119" pos:column="41"/></name></expr></argument>)<pos:position pos:line="119" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="119" pos:column="43"/></condition><then pos:line="119" pos:column="43"> <block pos:line="119" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="120" pos:column="17">fprintf<pos:position pos:line="120" pos:column="24"/></name><argument_list pos:line="120" pos:column="24">(<argument><expr><name pos:line="120" pos:column="25">stderr<pos:position pos:line="120" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="120" pos:column="33">"IMAP error: no greeting response\n"<pos:position pos:line="120" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="71"/></expr_stmt>
		<goto pos:line="121" pos:column="17">goto <name pos:line="121" pos:column="22">bail<pos:position pos:line="121" pos:column="26"/></name>;<pos:position pos:line="121" pos:column="27"/></goto>
	}<pos:position pos:line="122" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="123" pos:column="9">arg<pos:position pos:line="123" pos:column="12"/></name> <operator pos:line="123" pos:column="13">=<pos:position pos:line="123" pos:column="14"/></operator> <call><name pos:line="123" pos:column="15">next_arg<pos:position pos:line="123" pos:column="23"/></name><argument_list pos:line="123" pos:column="23">(<argument><expr><operator pos:line="123" pos:column="24">&amp;<pos:position pos:line="123" pos:column="29"/></operator><name pos:line="123" pos:column="25">rsp<pos:position pos:line="123" pos:column="28"/></name></expr></argument>)<pos:position pos:line="123" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="30"/></expr_stmt>
	<if pos:line="124" pos:column="9">if <condition pos:line="124" pos:column="12">(<expr><operator pos:line="124" pos:column="13">!<pos:position pos:line="124" pos:column="14"/></operator><name pos:line="124" pos:column="14">arg<pos:position pos:line="124" pos:column="17"/></name> <operator pos:line="124" pos:column="18">||<pos:position pos:line="124" pos:column="20"/></operator> <operator pos:line="124" pos:column="21">*<pos:position pos:line="124" pos:column="22"/></operator><name pos:line="124" pos:column="22">arg<pos:position pos:line="124" pos:column="25"/></name> <operator pos:line="124" pos:column="26">!=<pos:position pos:line="124" pos:column="28"/></operator> <literal type="char" pos:line="124" pos:column="29">'*'<pos:position pos:line="124" pos:column="32"/></literal> <operator pos:line="124" pos:column="33">||<pos:position pos:line="124" pos:column="35"/></operator> <operator pos:line="124" pos:column="36">(<pos:position pos:line="124" pos:column="37"/></operator><name pos:line="124" pos:column="37">arg<pos:position pos:line="124" pos:column="40"/></name> <operator pos:line="124" pos:column="41">=<pos:position pos:line="124" pos:column="42"/></operator> <call><name pos:line="124" pos:column="43">next_arg<pos:position pos:line="124" pos:column="51"/></name><argument_list pos:line="124" pos:column="51">(<argument><expr><operator pos:line="124" pos:column="52">&amp;<pos:position pos:line="124" pos:column="57"/></operator><name pos:line="124" pos:column="53">rsp<pos:position pos:line="124" pos:column="56"/></name></expr></argument>)<pos:position pos:line="124" pos:column="57"/></argument_list></call><operator pos:line="124" pos:column="57">)<pos:position pos:line="124" pos:column="58"/></operator> <operator pos:line="124" pos:column="59">==<pos:position pos:line="124" pos:column="61"/></operator> <name pos:line="124" pos:column="62">NULL<pos:position pos:line="124" pos:column="66"/></name></expr>)<pos:position pos:line="124" pos:column="67"/></condition><then pos:line="124" pos:column="67"> <block pos:line="124" pos:column="68">{
		<expr_stmt><expr><call><name pos:line="125" pos:column="17">fprintf<pos:position pos:line="125" pos:column="24"/></name><argument_list pos:line="125" pos:column="24">(<argument><expr><name pos:line="125" pos:column="25">stderr<pos:position pos:line="125" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="125" pos:column="33">"IMAP error: invalid greeting response\n"<pos:position pos:line="125" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="76"/></expr_stmt>
		<goto pos:line="126" pos:column="17">goto <name pos:line="126" pos:column="22">bail<pos:position pos:line="126" pos:column="26"/></name>;<pos:position pos:line="126" pos:column="27"/></goto>
	}<pos:position pos:line="127" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="128" pos:column="9">preauth<pos:position pos:line="128" pos:column="16"/></name> <operator pos:line="128" pos:column="17">=<pos:position pos:line="128" pos:column="18"/></operator> <literal type="number" pos:line="128" pos:column="19">0<pos:position pos:line="128" pos:column="20"/></literal></expr>;<pos:position pos:line="128" pos:column="21"/></expr_stmt>
	<if pos:line="129" pos:column="9">if <condition pos:line="129" pos:column="12">(<expr><operator pos:line="129" pos:column="13">!<pos:position pos:line="129" pos:column="14"/></operator><call><name pos:line="129" pos:column="14">strcmp<pos:position pos:line="129" pos:column="20"/></name><argument_list pos:line="129" pos:column="20">(<argument><expr><literal type="string" pos:line="129" pos:column="21">"PREAUTH"<pos:position pos:line="129" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="129" pos:column="32">arg<pos:position pos:line="129" pos:column="35"/></name></expr></argument>)<pos:position pos:line="129" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="129" pos:column="37"/></condition><then pos:line="129" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><name pos:line="130" pos:column="17">preauth<pos:position pos:line="130" pos:column="24"/></name> <operator pos:line="130" pos:column="25">=<pos:position pos:line="130" pos:column="26"/></operator> <literal type="number" pos:line="130" pos:column="27">1<pos:position pos:line="130" pos:column="28"/></literal></expr>;<pos:position pos:line="130" pos:column="29"/></expr_stmt></block></then>
	<elseif pos:line="131" pos:column="9">else <if pos:line="131" pos:column="14">if <condition pos:line="131" pos:column="17">(<expr><call><name pos:line="131" pos:column="18">strcmp<pos:position pos:line="131" pos:column="24"/></name><argument_list pos:line="131" pos:column="24">(<argument><expr><literal type="string" pos:line="131" pos:column="25">"OK"<pos:position pos:line="131" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="131" pos:column="31">arg<pos:position pos:line="131" pos:column="34"/></name></expr></argument>)<pos:position pos:line="131" pos:column="35"/></argument_list></call> <operator pos:line="131" pos:column="36">!=<pos:position pos:line="131" pos:column="38"/></operator> <literal type="number" pos:line="131" pos:column="39">0<pos:position pos:line="131" pos:column="40"/></literal></expr>)<pos:position pos:line="131" pos:column="41"/></condition><then pos:line="131" pos:column="41"> <block pos:line="131" pos:column="42">{
		<expr_stmt><expr><call><name pos:line="132" pos:column="17">fprintf<pos:position pos:line="132" pos:column="24"/></name><argument_list pos:line="132" pos:column="24">(<argument><expr><name pos:line="132" pos:column="25">stderr<pos:position pos:line="132" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="132" pos:column="33">"IMAP error: unknown greeting response\n"<pos:position pos:line="132" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="132" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="76"/></expr_stmt>
		<goto pos:line="133" pos:column="17">goto <name pos:line="133" pos:column="22">bail<pos:position pos:line="133" pos:column="26"/></name>;<pos:position pos:line="133" pos:column="27"/></goto>
	}<pos:position pos:line="134" pos:column="10"/></block></then></if></elseif></if>
	<expr_stmt><expr><call><name pos:line="135" pos:column="9">parse_response_code<pos:position pos:line="135" pos:column="28"/></name><argument_list pos:line="135" pos:column="28">(<argument><expr><name pos:line="135" pos:column="29">ctx<pos:position pos:line="135" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="34">NULL<pos:position pos:line="135" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="40">rsp<pos:position pos:line="135" pos:column="43"/></name></expr></argument>)<pos:position pos:line="135" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="45"/></expr_stmt>
	<if pos:line="136" pos:column="9">if <condition pos:line="136" pos:column="12">(<expr><operator pos:line="136" pos:column="13">!<pos:position pos:line="136" pos:column="14"/></operator><name><name pos:line="136" pos:column="14">imap<pos:position pos:line="136" pos:column="18"/></name><operator pos:line="136" pos:column="18">-&gt;<pos:position pos:line="136" pos:column="23"/></operator><name pos:line="136" pos:column="20">caps<pos:position pos:line="136" pos:column="24"/></name></name> <operator pos:line="136" pos:column="25">&amp;&amp;<pos:position pos:line="136" pos:column="35"/></operator> <call><name pos:line="136" pos:column="28">imap_exec<pos:position pos:line="136" pos:column="37"/></name><argument_list pos:line="136" pos:column="37">(<argument><expr><name pos:line="136" pos:column="38">ctx<pos:position pos:line="136" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="43">NULL<pos:position pos:line="136" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="136" pos:column="49">"CAPABILITY"<pos:position pos:line="136" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="62"/></argument_list></call> <operator pos:line="136" pos:column="63">!=<pos:position pos:line="136" pos:column="65"/></operator> <name pos:line="136" pos:column="66">RESP_OK<pos:position pos:line="136" pos:column="73"/></name></expr>)<pos:position pos:line="136" pos:column="74"/></condition><then pos:line="136" pos:column="74">
		<block type="pseudo"><goto pos:line="137" pos:column="17">goto <name pos:line="137" pos:column="22">bail<pos:position pos:line="137" pos:column="26"/></name>;<pos:position pos:line="137" pos:column="27"/></goto></block></then></if>

	<if pos:line="139" pos:column="9">if <condition pos:line="139" pos:column="12">(<expr><operator pos:line="139" pos:column="13">!<pos:position pos:line="139" pos:column="14"/></operator><name pos:line="139" pos:column="14">preauth<pos:position pos:line="139" pos:column="21"/></name></expr>)<pos:position pos:line="139" pos:column="22"/></condition><then pos:line="139" pos:column="22"> <block pos:line="139" pos:column="23">{
<cpp:ifndef pos:line="140" pos:column="1">#<cpp:directive pos:line="140" pos:column="2">ifndef<pos:position pos:line="140" pos:column="8"/></cpp:directive> <name pos:line="140" pos:column="9">NO_OPENSSL<pos:position pos:line="140" pos:column="19"/></name></cpp:ifndef>
		<if pos:line="141" pos:column="17">if <condition pos:line="141" pos:column="20">(<expr><operator pos:line="141" pos:column="21">!<pos:position pos:line="141" pos:column="22"/></operator><name><name pos:line="141" pos:column="22">srvc<pos:position pos:line="141" pos:column="26"/></name><operator pos:line="141" pos:column="26">-&gt;<pos:position pos:line="141" pos:column="31"/></operator><name pos:line="141" pos:column="28">use_ssl<pos:position pos:line="141" pos:column="35"/></name></name> <operator pos:line="141" pos:column="36">&amp;&amp;<pos:position pos:line="141" pos:column="46"/></operator> <call><name pos:line="141" pos:column="39">CAP<pos:position pos:line="141" pos:column="42"/></name><argument_list pos:line="141" pos:column="42">(<argument><expr><name pos:line="141" pos:column="43">STARTTLS<pos:position pos:line="141" pos:column="51"/></name></expr></argument>)<pos:position pos:line="141" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="141" pos:column="53"/></condition><then pos:line="141" pos:column="53"> <block pos:line="141" pos:column="54">{
			<if pos:line="142" pos:column="25">if <condition pos:line="142" pos:column="28">(<expr><call><name pos:line="142" pos:column="29">imap_exec<pos:position pos:line="142" pos:column="38"/></name><argument_list pos:line="142" pos:column="38">(<argument><expr><name pos:line="142" pos:column="39">ctx<pos:position pos:line="142" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="44">NULL<pos:position pos:line="142" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="142" pos:column="50">"STARTTLS"<pos:position pos:line="142" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="142" pos:column="61"/></argument_list></call> <operator pos:line="142" pos:column="62">!=<pos:position pos:line="142" pos:column="64"/></operator> <name pos:line="142" pos:column="65">RESP_OK<pos:position pos:line="142" pos:column="72"/></name></expr>)<pos:position pos:line="142" pos:column="73"/></condition><then pos:line="142" pos:column="73">
				<block type="pseudo"><goto pos:line="143" pos:column="33">goto <name pos:line="143" pos:column="38">bail<pos:position pos:line="143" pos:column="42"/></name>;<pos:position pos:line="143" pos:column="43"/></goto></block></then></if>
			<if pos:line="144" pos:column="25">if <condition pos:line="144" pos:column="28">(<expr><call><name pos:line="144" pos:column="29">ssl_socket_connect<pos:position pos:line="144" pos:column="47"/></name><argument_list pos:line="144" pos:column="47">(<argument><expr><operator pos:line="144" pos:column="48">&amp;<pos:position pos:line="144" pos:column="53"/></operator><name><name pos:line="144" pos:column="49">imap<pos:position pos:line="144" pos:column="53"/></name><operator pos:line="144" pos:column="53">-&gt;<pos:position pos:line="144" pos:column="58"/></operator><name pos:line="144" pos:column="55">buf<pos:position pos:line="144" pos:column="58"/></name><operator pos:line="144" pos:column="58">.<pos:position pos:line="144" pos:column="59"/></operator><name pos:line="144" pos:column="59">sock<pos:position pos:line="144" pos:column="63"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="144" pos:column="65">1<pos:position pos:line="144" pos:column="66"/></literal></expr></argument>,
					       <argument><expr><name><name pos:line="145" pos:column="48">srvc<pos:position pos:line="145" pos:column="52"/></name><operator pos:line="145" pos:column="52">-&gt;<pos:position pos:line="145" pos:column="57"/></operator><name pos:line="145" pos:column="54">ssl_verify<pos:position pos:line="145" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="145" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="145" pos:column="66"/></condition><then pos:line="145" pos:column="66">
				<block type="pseudo"><goto pos:line="146" pos:column="33">goto <name pos:line="146" pos:column="38">bail<pos:position pos:line="146" pos:column="42"/></name>;<pos:position pos:line="146" pos:column="43"/></goto></block></then></if>
			<comment type="block" pos:line="147" pos:column="25">/* capabilities may have changed, so get the new capabilities */</comment>
			<if pos:line="148" pos:column="25">if <condition pos:line="148" pos:column="28">(<expr><call><name pos:line="148" pos:column="29">imap_exec<pos:position pos:line="148" pos:column="38"/></name><argument_list pos:line="148" pos:column="38">(<argument><expr><name pos:line="148" pos:column="39">ctx<pos:position pos:line="148" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="44">NULL<pos:position pos:line="148" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="148" pos:column="50">"CAPABILITY"<pos:position pos:line="148" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="148" pos:column="63"/></argument_list></call> <operator pos:line="148" pos:column="64">!=<pos:position pos:line="148" pos:column="66"/></operator> <name pos:line="148" pos:column="67">RESP_OK<pos:position pos:line="148" pos:column="74"/></name></expr>)<pos:position pos:line="148" pos:column="75"/></condition><then pos:line="148" pos:column="75">
				<block type="pseudo"><goto pos:line="149" pos:column="33">goto <name pos:line="149" pos:column="38">bail<pos:position pos:line="149" pos:column="42"/></name>;<pos:position pos:line="149" pos:column="43"/></goto></block></then></if>
		}<pos:position pos:line="150" pos:column="18"/></block></then></if>
<cpp:endif pos:line="151" pos:column="1">#<cpp:directive pos:line="151" pos:column="2">endif<pos:position pos:line="151" pos:column="7"/></cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name pos:line="152" pos:column="17">imap_info<pos:position pos:line="152" pos:column="26"/></name><argument_list pos:line="152" pos:column="26">(<argument><expr><literal type="string" pos:line="152" pos:column="27">"Logging in...\n"<pos:position pos:line="152" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="152" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="46"/></expr_stmt>
		<if pos:line="153" pos:column="17">if <condition pos:line="153" pos:column="20">(<expr><operator pos:line="153" pos:column="21">!<pos:position pos:line="153" pos:column="22"/></operator><name><name pos:line="153" pos:column="22">srvc<pos:position pos:line="153" pos:column="26"/></name><operator pos:line="153" pos:column="26">-&gt;<pos:position pos:line="153" pos:column="31"/></operator><name pos:line="153" pos:column="28">user<pos:position pos:line="153" pos:column="32"/></name></name> <operator pos:line="153" pos:column="33">||<pos:position pos:line="153" pos:column="35"/></operator> <operator pos:line="153" pos:column="36">!<pos:position pos:line="153" pos:column="37"/></operator><name><name pos:line="153" pos:column="37">srvc<pos:position pos:line="153" pos:column="41"/></name><operator pos:line="153" pos:column="41">-&gt;<pos:position pos:line="153" pos:column="46"/></operator><name pos:line="153" pos:column="43">pass<pos:position pos:line="153" pos:column="47"/></name></name></expr>)<pos:position pos:line="153" pos:column="48"/></condition><then pos:line="153" pos:column="48"> <block pos:line="153" pos:column="49">{
			<expr_stmt><expr><name><name pos:line="154" pos:column="25">cred<pos:position pos:line="154" pos:column="29"/></name><operator pos:line="154" pos:column="29">.<pos:position pos:line="154" pos:column="30"/></operator><name pos:line="154" pos:column="30">protocol<pos:position pos:line="154" pos:column="38"/></name></name> <operator pos:line="154" pos:column="39">=<pos:position pos:line="154" pos:column="40"/></operator> <call><name pos:line="154" pos:column="41">xstrdup<pos:position pos:line="154" pos:column="48"/></name><argument_list pos:line="154" pos:column="48">(<argument><expr><ternary><condition><expr><name><name pos:line="154" pos:column="49">srvc<pos:position pos:line="154" pos:column="53"/></name><operator pos:line="154" pos:column="53">-&gt;<pos:position pos:line="154" pos:column="58"/></operator><name pos:line="154" pos:column="55">use_ssl<pos:position pos:line="154" pos:column="62"/></name></name></expr> ?<pos:position pos:line="154" pos:column="64"/></condition><then pos:line="154" pos:column="64"> <expr><literal type="string" pos:line="154" pos:column="65">"imaps"<pos:position pos:line="154" pos:column="72"/></literal></expr> <pos:position pos:line="154" pos:column="73"/></then><else pos:line="154" pos:column="73">: <expr><literal type="string" pos:line="154" pos:column="75">"imap"<pos:position pos:line="154" pos:column="81"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="154" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="83"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="155" pos:column="25">cred<pos:position pos:line="155" pos:column="29"/></name><operator pos:line="155" pos:column="29">.<pos:position pos:line="155" pos:column="30"/></operator><name pos:line="155" pos:column="30">host<pos:position pos:line="155" pos:column="34"/></name></name> <operator pos:line="155" pos:column="35">=<pos:position pos:line="155" pos:column="36"/></operator> <call><name pos:line="155" pos:column="37">xstrdup<pos:position pos:line="155" pos:column="44"/></name><argument_list pos:line="155" pos:column="44">(<argument><expr><name><name pos:line="155" pos:column="45">srvc<pos:position pos:line="155" pos:column="49"/></name><operator pos:line="155" pos:column="49">-&gt;<pos:position pos:line="155" pos:column="54"/></operator><name pos:line="155" pos:column="51">host<pos:position pos:line="155" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="155" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="57"/></expr_stmt>

			<if pos:line="157" pos:column="25">if <condition pos:line="157" pos:column="28">(<expr><name><name pos:line="157" pos:column="29">srvc<pos:position pos:line="157" pos:column="33"/></name><operator pos:line="157" pos:column="33">-&gt;<pos:position pos:line="157" pos:column="38"/></operator><name pos:line="157" pos:column="35">user<pos:position pos:line="157" pos:column="39"/></name></name></expr>)<pos:position pos:line="157" pos:column="40"/></condition><then pos:line="157" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="158" pos:column="33">cred<pos:position pos:line="158" pos:column="37"/></name><operator pos:line="158" pos:column="37">.<pos:position pos:line="158" pos:column="38"/></operator><name pos:line="158" pos:column="38">username<pos:position pos:line="158" pos:column="46"/></name></name> <operator pos:line="158" pos:column="47">=<pos:position pos:line="158" pos:column="48"/></operator> <call><name pos:line="158" pos:column="49">xstrdup<pos:position pos:line="158" pos:column="56"/></name><argument_list pos:line="158" pos:column="56">(<argument><expr><name><name pos:line="158" pos:column="57">srvc<pos:position pos:line="158" pos:column="61"/></name><operator pos:line="158" pos:column="61">-&gt;<pos:position pos:line="158" pos:column="66"/></operator><name pos:line="158" pos:column="63">user<pos:position pos:line="158" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="158" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="69"/></expr_stmt></block></then></if>
			<if pos:line="159" pos:column="25">if <condition pos:line="159" pos:column="28">(<expr><name><name pos:line="159" pos:column="29">srvc<pos:position pos:line="159" pos:column="33"/></name><operator pos:line="159" pos:column="33">-&gt;<pos:position pos:line="159" pos:column="38"/></operator><name pos:line="159" pos:column="35">pass<pos:position pos:line="159" pos:column="39"/></name></name></expr>)<pos:position pos:line="159" pos:column="40"/></condition><then pos:line="159" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="160" pos:column="33">cred<pos:position pos:line="160" pos:column="37"/></name><operator pos:line="160" pos:column="37">.<pos:position pos:line="160" pos:column="38"/></operator><name pos:line="160" pos:column="38">password<pos:position pos:line="160" pos:column="46"/></name></name> <operator pos:line="160" pos:column="47">=<pos:position pos:line="160" pos:column="48"/></operator> <call><name pos:line="160" pos:column="49">xstrdup<pos:position pos:line="160" pos:column="56"/></name><argument_list pos:line="160" pos:column="56">(<argument><expr><name><name pos:line="160" pos:column="57">srvc<pos:position pos:line="160" pos:column="61"/></name><operator pos:line="160" pos:column="61">-&gt;<pos:position pos:line="160" pos:column="66"/></operator><name pos:line="160" pos:column="63">pass<pos:position pos:line="160" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="160" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="69"/></expr_stmt></block></then></if>

			<expr_stmt><expr><call><name pos:line="162" pos:column="25">credential_fill<pos:position pos:line="162" pos:column="40"/></name><argument_list pos:line="162" pos:column="40">(<argument><expr><operator pos:line="162" pos:column="41">&amp;<pos:position pos:line="162" pos:column="46"/></operator><name pos:line="162" pos:column="42">cred<pos:position pos:line="162" pos:column="46"/></name></expr></argument>)<pos:position pos:line="162" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="48"/></expr_stmt>

			<if pos:line="164" pos:column="25">if <condition pos:line="164" pos:column="28">(<expr><operator pos:line="164" pos:column="29">!<pos:position pos:line="164" pos:column="30"/></operator><name><name pos:line="164" pos:column="30">srvc<pos:position pos:line="164" pos:column="34"/></name><operator pos:line="164" pos:column="34">-&gt;<pos:position pos:line="164" pos:column="39"/></operator><name pos:line="164" pos:column="36">user<pos:position pos:line="164" pos:column="40"/></name></name></expr>)<pos:position pos:line="164" pos:column="41"/></condition><then pos:line="164" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="165" pos:column="33">srvc<pos:position pos:line="165" pos:column="37"/></name><operator pos:line="165" pos:column="37">-&gt;<pos:position pos:line="165" pos:column="42"/></operator><name pos:line="165" pos:column="39">user<pos:position pos:line="165" pos:column="43"/></name></name> <operator pos:line="165" pos:column="44">=<pos:position pos:line="165" pos:column="45"/></operator> <call><name pos:line="165" pos:column="46">xstrdup<pos:position pos:line="165" pos:column="53"/></name><argument_list pos:line="165" pos:column="53">(<argument><expr><name><name pos:line="165" pos:column="54">cred<pos:position pos:line="165" pos:column="58"/></name><operator pos:line="165" pos:column="58">.<pos:position pos:line="165" pos:column="59"/></operator><name pos:line="165" pos:column="59">username<pos:position pos:line="165" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="165" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="69"/></expr_stmt></block></then></if>
			<if pos:line="166" pos:column="25">if <condition pos:line="166" pos:column="28">(<expr><operator pos:line="166" pos:column="29">!<pos:position pos:line="166" pos:column="30"/></operator><name><name pos:line="166" pos:column="30">srvc<pos:position pos:line="166" pos:column="34"/></name><operator pos:line="166" pos:column="34">-&gt;<pos:position pos:line="166" pos:column="39"/></operator><name pos:line="166" pos:column="36">pass<pos:position pos:line="166" pos:column="40"/></name></name></expr>)<pos:position pos:line="166" pos:column="41"/></condition><then pos:line="166" pos:column="41">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="167" pos:column="33">srvc<pos:position pos:line="167" pos:column="37"/></name><operator pos:line="167" pos:column="37">-&gt;<pos:position pos:line="167" pos:column="42"/></operator><name pos:line="167" pos:column="39">pass<pos:position pos:line="167" pos:column="43"/></name></name> <operator pos:line="167" pos:column="44">=<pos:position pos:line="167" pos:column="45"/></operator> <call><name pos:line="167" pos:column="46">xstrdup<pos:position pos:line="167" pos:column="53"/></name><argument_list pos:line="167" pos:column="53">(<argument><expr><name><name pos:line="167" pos:column="54">cred<pos:position pos:line="167" pos:column="58"/></name><operator pos:line="167" pos:column="58">.<pos:position pos:line="167" pos:column="59"/></operator><name pos:line="167" pos:column="59">password<pos:position pos:line="167" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="167" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="69"/></expr_stmt></block></then></if>
		}<pos:position pos:line="168" pos:column="18"/></block></then></if>

		<if pos:line="170" pos:column="17">if <condition pos:line="170" pos:column="20">(<expr><call><name pos:line="170" pos:column="21">CAP<pos:position pos:line="170" pos:column="24"/></name><argument_list pos:line="170" pos:column="24">(<argument><expr><name pos:line="170" pos:column="25">NOLOGIN<pos:position pos:line="170" pos:column="32"/></name></expr></argument>)<pos:position pos:line="170" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="170" pos:column="34"/></condition><then pos:line="170" pos:column="34"> <block pos:line="170" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="171" pos:column="25">fprintf<pos:position pos:line="171" pos:column="32"/></name><argument_list pos:line="171" pos:column="32">(<argument><expr><name pos:line="171" pos:column="33">stderr<pos:position pos:line="171" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="171" pos:column="41">"Skipping account %s@%s, server forbids LOGIN\n"<pos:position pos:line="171" pos:column="89"/></literal></expr></argument>, <argument><expr><name><name pos:line="171" pos:column="91">srvc<pos:position pos:line="171" pos:column="95"/></name><operator pos:line="171" pos:column="95">-&gt;<pos:position pos:line="171" pos:column="100"/></operator><name pos:line="171" pos:column="97">user<pos:position pos:line="171" pos:column="101"/></name></name></expr></argument>, <argument><expr><name><name pos:line="171" pos:column="103">srvc<pos:position pos:line="171" pos:column="107"/></name><operator pos:line="171" pos:column="107">-&gt;<pos:position pos:line="171" pos:column="112"/></operator><name pos:line="171" pos:column="109">host<pos:position pos:line="171" pos:column="113"/></name></name></expr></argument>)<pos:position pos:line="171" pos:column="114"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="115"/></expr_stmt>
			<goto pos:line="172" pos:column="25">goto <name pos:line="172" pos:column="30">bail<pos:position pos:line="172" pos:column="34"/></name>;<pos:position pos:line="172" pos:column="35"/></goto>
		}<pos:position pos:line="173" pos:column="18"/></block></then></if>

		<if pos:line="175" pos:column="17">if <condition pos:line="175" pos:column="20">(<expr><name><name pos:line="175" pos:column="21">srvc<pos:position pos:line="175" pos:column="25"/></name><operator pos:line="175" pos:column="25">-&gt;<pos:position pos:line="175" pos:column="30"/></operator><name pos:line="175" pos:column="27">auth_method<pos:position pos:line="175" pos:column="38"/></name></name></expr>)<pos:position pos:line="175" pos:column="39"/></condition><then pos:line="175" pos:column="39"> <block pos:line="175" pos:column="40">{
			<decl_stmt><decl><type><name><name pos:line="176" pos:column="25">struct<pos:position pos:line="176" pos:column="31"/></name> <name pos:line="176" pos:column="32">imap_cmd_cb<pos:position pos:line="176" pos:column="43"/></name></name></type> <name pos:line="176" pos:column="44">cb<pos:position pos:line="176" pos:column="46"/></name></decl>;<pos:position pos:line="176" pos:column="47"/></decl_stmt>

			<if pos:line="178" pos:column="25">if <condition pos:line="178" pos:column="28">(<expr><operator pos:line="178" pos:column="29">!<pos:position pos:line="178" pos:column="30"/></operator><call><name pos:line="178" pos:column="30">strcmp<pos:position pos:line="178" pos:column="36"/></name><argument_list pos:line="178" pos:column="36">(<argument><expr><name><name pos:line="178" pos:column="37">srvc<pos:position pos:line="178" pos:column="41"/></name><operator pos:line="178" pos:column="41">-&gt;<pos:position pos:line="178" pos:column="46"/></operator><name pos:line="178" pos:column="43">auth_method<pos:position pos:line="178" pos:column="54"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="178" pos:column="56">"CRAM-MD5"<pos:position pos:line="178" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="178" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="178" pos:column="68"/></condition><then pos:line="178" pos:column="68"> <block pos:line="178" pos:column="69">{
				<if pos:line="179" pos:column="33">if <condition pos:line="179" pos:column="36">(<expr><operator pos:line="179" pos:column="37">!<pos:position pos:line="179" pos:column="38"/></operator><call><name pos:line="179" pos:column="38">CAP<pos:position pos:line="179" pos:column="41"/></name><argument_list pos:line="179" pos:column="41">(<argument><expr><name pos:line="179" pos:column="42">AUTH_CRAM_MD5<pos:position pos:line="179" pos:column="55"/></name></expr></argument>)<pos:position pos:line="179" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="179" pos:column="57"/></condition><then pos:line="179" pos:column="57"> <block pos:line="179" pos:column="58">{
					<expr_stmt><expr><call><name pos:line="180" pos:column="41">fprintf<pos:position pos:line="180" pos:column="48"/></name><argument_list pos:line="180" pos:column="48">(<argument><expr><name pos:line="180" pos:column="49">stderr<pos:position pos:line="180" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="180" pos:column="57">"You specified"<pos:position pos:line="180" pos:column="72"/></literal>
						<literal type="string" pos:line="181" pos:column="49">"CRAM-MD5 as authentication method, "<pos:position pos:line="181" pos:column="86"/></literal>
						<literal type="string" pos:line="182" pos:column="49">"but %s doesn't support it.\n"<pos:position pos:line="182" pos:column="79"/></literal></expr></argument>, <argument><expr><name><name pos:line="182" pos:column="81">srvc<pos:position pos:line="182" pos:column="85"/></name><operator pos:line="182" pos:column="85">-&gt;<pos:position pos:line="182" pos:column="90"/></operator><name pos:line="182" pos:column="87">host<pos:position pos:line="182" pos:column="91"/></name></name></expr></argument>)<pos:position pos:line="182" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="93"/></expr_stmt>
					<goto pos:line="183" pos:column="41">goto <name pos:line="183" pos:column="46">bail<pos:position pos:line="183" pos:column="50"/></name>;<pos:position pos:line="183" pos:column="51"/></goto>
				}<pos:position pos:line="184" pos:column="34"/></block></then></if>
				<comment type="block" pos:line="185" pos:column="33">/* CRAM-MD5 */</comment>

				<expr_stmt><expr><call><name pos:line="187" pos:column="33">memset<pos:position pos:line="187" pos:column="39"/></name><argument_list pos:line="187" pos:column="39">(<argument><expr><operator pos:line="187" pos:column="40">&amp;<pos:position pos:line="187" pos:column="45"/></operator><name pos:line="187" pos:column="41">cb<pos:position pos:line="187" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="187" pos:column="45">0<pos:position pos:line="187" pos:column="46"/></literal></expr></argument>, <argument><expr><sizeof pos:line="187" pos:column="48">sizeof<argument_list pos:line="187" pos:column="54">(<argument><expr><name pos:line="187" pos:column="55">cb<pos:position pos:line="187" pos:column="57"/></name></expr></argument>)<pos:position pos:line="187" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="187" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="60"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="188" pos:column="33">cb<pos:position pos:line="188" pos:column="35"/></name><operator pos:line="188" pos:column="35">.<pos:position pos:line="188" pos:column="36"/></operator><name pos:line="188" pos:column="36">cont<pos:position pos:line="188" pos:column="40"/></name></name> <operator pos:line="188" pos:column="41">=<pos:position pos:line="188" pos:column="42"/></operator> <name pos:line="188" pos:column="43">auth_cram_md5<pos:position pos:line="188" pos:column="56"/></name></expr>;<pos:position pos:line="188" pos:column="57"/></expr_stmt>
				<if pos:line="189" pos:column="33">if <condition pos:line="189" pos:column="36">(<expr><call><name pos:line="189" pos:column="37">imap_exec<pos:position pos:line="189" pos:column="46"/></name><argument_list pos:line="189" pos:column="46">(<argument><expr><name pos:line="189" pos:column="47">ctx<pos:position pos:line="189" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="189" pos:column="52">&amp;<pos:position pos:line="189" pos:column="57"/></operator><name pos:line="189" pos:column="53">cb<pos:position pos:line="189" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="189" pos:column="57">"AUTHENTICATE CRAM-MD5"<pos:position pos:line="189" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="189" pos:column="81"/></argument_list></call> <operator pos:line="189" pos:column="82">!=<pos:position pos:line="189" pos:column="84"/></operator> <name pos:line="189" pos:column="85">RESP_OK<pos:position pos:line="189" pos:column="92"/></name></expr>)<pos:position pos:line="189" pos:column="93"/></condition><then pos:line="189" pos:column="93"> <block pos:line="189" pos:column="94">{
					<expr_stmt><expr><call><name pos:line="190" pos:column="41">fprintf<pos:position pos:line="190" pos:column="48"/></name><argument_list pos:line="190" pos:column="48">(<argument><expr><name pos:line="190" pos:column="49">stderr<pos:position pos:line="190" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="190" pos:column="57">"IMAP error: AUTHENTICATE CRAM-MD5 failed\n"<pos:position pos:line="190" pos:column="101"/></literal></expr></argument>)<pos:position pos:line="190" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="103"/></expr_stmt>
					<goto pos:line="191" pos:column="41">goto <name pos:line="191" pos:column="46">bail<pos:position pos:line="191" pos:column="50"/></name>;<pos:position pos:line="191" pos:column="51"/></goto>
				}<pos:position pos:line="192" pos:column="34"/></block></then></if>
			}<pos:position pos:line="193" pos:column="26"/></block></then> <else pos:line="193" pos:column="27">else <block pos:line="193" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="194" pos:column="33">fprintf<pos:position pos:line="194" pos:column="40"/></name><argument_list pos:line="194" pos:column="40">(<argument><expr><name pos:line="194" pos:column="41">stderr<pos:position pos:line="194" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="194" pos:column="49">"Unknown authentication method:%s\n"<pos:position pos:line="194" pos:column="85"/></literal></expr></argument>, <argument><expr><name><name pos:line="194" pos:column="87">srvc<pos:position pos:line="194" pos:column="91"/></name><operator pos:line="194" pos:column="91">-&gt;<pos:position pos:line="194" pos:column="96"/></operator><name pos:line="194" pos:column="93">host<pos:position pos:line="194" pos:column="97"/></name></name></expr></argument>)<pos:position pos:line="194" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="99"/></expr_stmt>
				<goto pos:line="195" pos:column="33">goto <name pos:line="195" pos:column="38">bail<pos:position pos:line="195" pos:column="42"/></name>;<pos:position pos:line="195" pos:column="43"/></goto>
			}<pos:position pos:line="196" pos:column="26"/></block></else></if>
		}<pos:position pos:line="197" pos:column="18"/></block></then> <else pos:line="197" pos:column="19">else <block pos:line="197" pos:column="24">{
			<if pos:line="198" pos:column="25">if <condition pos:line="198" pos:column="28">(<expr><operator pos:line="198" pos:column="29">!<pos:position pos:line="198" pos:column="30"/></operator><name><name pos:line="198" pos:column="30">imap<pos:position pos:line="198" pos:column="34"/></name><operator pos:line="198" pos:column="34">-&gt;<pos:position pos:line="198" pos:column="39"/></operator><name pos:line="198" pos:column="36">buf<pos:position pos:line="198" pos:column="39"/></name><operator pos:line="198" pos:column="39">.<pos:position pos:line="198" pos:column="40"/></operator><name pos:line="198" pos:column="40">sock<pos:position pos:line="198" pos:column="44"/></name><operator pos:line="198" pos:column="44">.<pos:position pos:line="198" pos:column="45"/></operator><name pos:line="198" pos:column="45">ssl<pos:position pos:line="198" pos:column="48"/></name></name></expr>)<pos:position pos:line="198" pos:column="49"/></condition><then pos:line="198" pos:column="49">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="199" pos:column="33">imap_warn<pos:position pos:line="199" pos:column="42"/></name><argument_list pos:line="199" pos:column="42">(<argument><expr><literal type="string" pos:line="199" pos:column="43">"*** IMAP Warning *** Password is being "<pos:position pos:line="199" pos:column="84"/></literal>
					  <literal type="string" pos:line="200" pos:column="43">"sent in the clear\n"<pos:position pos:line="200" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="200" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="66"/></expr_stmt></block></then></if>
			<if pos:line="201" pos:column="25">if <condition pos:line="201" pos:column="28">(<expr><call><name pos:line="201" pos:column="29">imap_exec<pos:position pos:line="201" pos:column="38"/></name><argument_list pos:line="201" pos:column="38">(<argument><expr><name pos:line="201" pos:column="39">ctx<pos:position pos:line="201" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="201" pos:column="44">NULL<pos:position pos:line="201" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="201" pos:column="50">"LOGIN \"%s\" \"%s\""<pos:position pos:line="201" pos:column="71"/></literal></expr></argument>, <argument><expr><name><name pos:line="201" pos:column="73">srvc<pos:position pos:line="201" pos:column="77"/></name><operator pos:line="201" pos:column="77">-&gt;<pos:position pos:line="201" pos:column="82"/></operator><name pos:line="201" pos:column="79">user<pos:position pos:line="201" pos:column="83"/></name></name></expr></argument>, <argument><expr><name><name pos:line="201" pos:column="85">srvc<pos:position pos:line="201" pos:column="89"/></name><operator pos:line="201" pos:column="89">-&gt;<pos:position pos:line="201" pos:column="94"/></operator><name pos:line="201" pos:column="91">pass<pos:position pos:line="201" pos:column="95"/></name></name></expr></argument>)<pos:position pos:line="201" pos:column="96"/></argument_list></call> <operator pos:line="201" pos:column="97">!=<pos:position pos:line="201" pos:column="99"/></operator> <name pos:line="201" pos:column="100">RESP_OK<pos:position pos:line="201" pos:column="107"/></name></expr>)<pos:position pos:line="201" pos:column="108"/></condition><then pos:line="201" pos:column="108"> <block pos:line="201" pos:column="109">{
				<expr_stmt><expr><call><name pos:line="202" pos:column="33">fprintf<pos:position pos:line="202" pos:column="40"/></name><argument_list pos:line="202" pos:column="40">(<argument><expr><name pos:line="202" pos:column="41">stderr<pos:position pos:line="202" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="202" pos:column="49">"IMAP error: LOGIN failed\n"<pos:position pos:line="202" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="202" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="79"/></expr_stmt>
				<goto pos:line="203" pos:column="33">goto <name pos:line="203" pos:column="38">bail<pos:position pos:line="203" pos:column="42"/></name>;<pos:position pos:line="203" pos:column="43"/></goto>
			}<pos:position pos:line="204" pos:column="26"/></block></then></if>
		}<pos:position pos:line="205" pos:column="18"/></block></else></if>
	}<pos:position pos:line="206" pos:column="10"/></block></then></if> <comment type="block" pos:line="206" pos:column="11">/* !preauth */</comment>

	<if pos:line="208" pos:column="9">if <condition pos:line="208" pos:column="12">(<expr><name><name pos:line="208" pos:column="13">cred<pos:position pos:line="208" pos:column="17"/></name><operator pos:line="208" pos:column="17">.<pos:position pos:line="208" pos:column="18"/></operator><name pos:line="208" pos:column="18">username<pos:position pos:line="208" pos:column="26"/></name></name></expr>)<pos:position pos:line="208" pos:column="27"/></condition><then pos:line="208" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="209" pos:column="17">credential_approve<pos:position pos:line="209" pos:column="35"/></name><argument_list pos:line="209" pos:column="35">(<argument><expr><operator pos:line="209" pos:column="36">&amp;<pos:position pos:line="209" pos:column="41"/></operator><name pos:line="209" pos:column="37">cred<pos:position pos:line="209" pos:column="41"/></name></expr></argument>)<pos:position pos:line="209" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="209" pos:column="43"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="210" pos:column="9">credential_clear<pos:position pos:line="210" pos:column="25"/></name><argument_list pos:line="210" pos:column="25">(<argument><expr><operator pos:line="210" pos:column="26">&amp;<pos:position pos:line="210" pos:column="31"/></operator><name pos:line="210" pos:column="27">cred<pos:position pos:line="210" pos:column="31"/></name></expr></argument>)<pos:position pos:line="210" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="33"/></expr_stmt>

	<comment type="block" pos:line="212" pos:column="9">/* check the target mailbox exists */</comment>
	<expr_stmt><expr><name><name pos:line="213" pos:column="9">ctx<pos:position pos:line="213" pos:column="12"/></name><operator pos:line="213" pos:column="12">-&gt;<pos:position pos:line="213" pos:column="17"/></operator><name pos:line="213" pos:column="14">name<pos:position pos:line="213" pos:column="18"/></name></name> <operator pos:line="213" pos:column="19">=<pos:position pos:line="213" pos:column="20"/></operator> <name pos:line="213" pos:column="21">folder<pos:position pos:line="213" pos:column="27"/></name></expr>;<pos:position pos:line="213" pos:column="28"/></expr_stmt>
	<switch pos:line="214" pos:column="9">switch <condition pos:line="214" pos:column="16">(<expr><call><name pos:line="214" pos:column="17">imap_exec<pos:position pos:line="214" pos:column="26"/></name><argument_list pos:line="214" pos:column="26">(<argument><expr><name pos:line="214" pos:column="27">ctx<pos:position pos:line="214" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="214" pos:column="32">NULL<pos:position pos:line="214" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="214" pos:column="38">"EXAMINE \"%s\""<pos:position pos:line="214" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="214" pos:column="56">ctx<pos:position pos:line="214" pos:column="59"/></name><operator pos:line="214" pos:column="59">-&gt;<pos:position pos:line="214" pos:column="64"/></operator><name pos:line="214" pos:column="61">name<pos:position pos:line="214" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="214" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="214" pos:column="67"/></condition> <block pos:line="214" pos:column="68">{
	<case pos:line="215" pos:column="9">case <expr><name pos:line="215" pos:column="14">RESP_OK<pos:position pos:line="215" pos:column="21"/></name></expr>:<pos:position pos:line="215" pos:column="22"/></case>
		<comment type="block" pos:line="216" pos:column="17">/* ok */</comment>
		<break pos:line="217" pos:column="17">break;<pos:position pos:line="217" pos:column="23"/></break>
	<case pos:line="218" pos:column="9">case <expr><name pos:line="218" pos:column="14">RESP_BAD<pos:position pos:line="218" pos:column="22"/></name></expr>:<pos:position pos:line="218" pos:column="23"/></case>
		<expr_stmt><expr><call><name pos:line="219" pos:column="17">fprintf<pos:position pos:line="219" pos:column="24"/></name><argument_list pos:line="219" pos:column="24">(<argument><expr><name pos:line="219" pos:column="25">stderr<pos:position pos:line="219" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="219" pos:column="33">"IMAP error: could not check mailbox\n"<pos:position pos:line="219" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="219" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="74"/></expr_stmt>
		<goto pos:line="220" pos:column="17">goto <name pos:line="220" pos:column="22">out<pos:position pos:line="220" pos:column="25"/></name>;<pos:position pos:line="220" pos:column="26"/></goto>
	<case pos:line="221" pos:column="9">case <expr><name pos:line="221" pos:column="14">RESP_NO<pos:position pos:line="221" pos:column="21"/></name></expr>:<pos:position pos:line="221" pos:column="22"/></case>
		<if pos:line="222" pos:column="17">if <condition pos:line="222" pos:column="20">(<expr><call><name pos:line="222" pos:column="21">imap_exec<pos:position pos:line="222" pos:column="30"/></name><argument_list pos:line="222" pos:column="30">(<argument><expr><name pos:line="222" pos:column="31">ctx<pos:position pos:line="222" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="222" pos:column="36">NULL<pos:position pos:line="222" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="222" pos:column="42">"CREATE \"%s\""<pos:position pos:line="222" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="222" pos:column="59">ctx<pos:position pos:line="222" pos:column="62"/></name><operator pos:line="222" pos:column="62">-&gt;<pos:position pos:line="222" pos:column="67"/></operator><name pos:line="222" pos:column="64">name<pos:position pos:line="222" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="222" pos:column="69"/></argument_list></call> <operator pos:line="222" pos:column="70">==<pos:position pos:line="222" pos:column="72"/></operator> <name pos:line="222" pos:column="73">RESP_OK<pos:position pos:line="222" pos:column="80"/></name></expr>)<pos:position pos:line="222" pos:column="81"/></condition><then pos:line="222" pos:column="81"> <block pos:line="222" pos:column="82">{
			<expr_stmt><expr><call><name pos:line="223" pos:column="25">imap_info<pos:position pos:line="223" pos:column="34"/></name><argument_list pos:line="223" pos:column="34">(<argument><expr><literal type="string" pos:line="223" pos:column="35">"Created missing mailbox\n"<pos:position pos:line="223" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="223" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="223" pos:column="64"/></expr_stmt>
		}<pos:position pos:line="224" pos:column="18"/></block></then> <else pos:line="224" pos:column="19">else <block pos:line="224" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="225" pos:column="25">fprintf<pos:position pos:line="225" pos:column="32"/></name><argument_list pos:line="225" pos:column="32">(<argument><expr><name pos:line="225" pos:column="33">stderr<pos:position pos:line="225" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="225" pos:column="41">"IMAP error: could not create missing mailbox\n"<pos:position pos:line="225" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="225" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="225" pos:column="91"/></expr_stmt>
			<goto pos:line="226" pos:column="25">goto <name pos:line="226" pos:column="30">out<pos:position pos:line="226" pos:column="33"/></name>;<pos:position pos:line="226" pos:column="34"/></goto>
		}<pos:position pos:line="227" pos:column="18"/></block></else></if>
		<break pos:line="228" pos:column="17">break;<pos:position pos:line="228" pos:column="23"/></break>
	}<pos:position pos:line="229" pos:column="10"/></block></switch>

	<expr_stmt><expr><name><name pos:line="231" pos:column="9">ctx<pos:position pos:line="231" pos:column="12"/></name><operator pos:line="231" pos:column="12">-&gt;<pos:position pos:line="231" pos:column="17"/></operator><name pos:line="231" pos:column="14">prefix<pos:position pos:line="231" pos:column="20"/></name></name> <operator pos:line="231" pos:column="21">=<pos:position pos:line="231" pos:column="22"/></operator> <literal type="string" pos:line="231" pos:column="23">""<pos:position pos:line="231" pos:column="25"/></literal></expr>;<pos:position pos:line="231" pos:column="26"/></expr_stmt>
	<return pos:line="232" pos:column="9">return <expr><name pos:line="232" pos:column="16">ctx<pos:position pos:line="232" pos:column="19"/></name></expr>;<pos:position pos:line="232" pos:column="20"/></return>

<label><name pos:line="234" pos:column="1">bail<pos:position pos:line="234" pos:column="5"/></name>:<pos:position pos:line="234" pos:column="6"/></label>
	<if pos:line="235" pos:column="9">if <condition pos:line="235" pos:column="12">(<expr><name><name pos:line="235" pos:column="13">cred<pos:position pos:line="235" pos:column="17"/></name><operator pos:line="235" pos:column="17">.<pos:position pos:line="235" pos:column="18"/></operator><name pos:line="235" pos:column="18">username<pos:position pos:line="235" pos:column="26"/></name></name></expr>)<pos:position pos:line="235" pos:column="27"/></condition><then pos:line="235" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="236" pos:column="17">credential_reject<pos:position pos:line="236" pos:column="34"/></name><argument_list pos:line="236" pos:column="34">(<argument><expr><operator pos:line="236" pos:column="35">&amp;<pos:position pos:line="236" pos:column="40"/></operator><name pos:line="236" pos:column="36">cred<pos:position pos:line="236" pos:column="40"/></name></expr></argument>)<pos:position pos:line="236" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="42"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="237" pos:column="9">credential_clear<pos:position pos:line="237" pos:column="25"/></name><argument_list pos:line="237" pos:column="25">(<argument><expr><operator pos:line="237" pos:column="26">&amp;<pos:position pos:line="237" pos:column="31"/></operator><name pos:line="237" pos:column="27">cred<pos:position pos:line="237" pos:column="31"/></name></expr></argument>)<pos:position pos:line="237" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="237" pos:column="33"/></expr_stmt>

 <label><name pos:line="239" pos:column="2">out<pos:position pos:line="239" pos:column="5"/></name>:<pos:position pos:line="239" pos:column="6"/></label>
	<expr_stmt><expr><call><name pos:line="240" pos:column="9">imap_close_store<pos:position pos:line="240" pos:column="25"/></name><argument_list pos:line="240" pos:column="25">(<argument><expr><name pos:line="240" pos:column="26">ctx<pos:position pos:line="240" pos:column="29"/></name></expr></argument>)<pos:position pos:line="240" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="240" pos:column="31"/></expr_stmt>
	<return pos:line="241" pos:column="9">return <expr><name pos:line="241" pos:column="16">NULL<pos:position pos:line="241" pos:column="20"/></name></expr>;<pos:position pos:line="241" pos:column="21"/></return>
}<pos:position pos:line="242" pos:column="2"/></block></function></unit>
