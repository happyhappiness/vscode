<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6800_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">size_t<pos:position pos:line="1" pos:column="7"/></name></type> <name pos:line="1" pos:column="8">nedblksize<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">void<pos:position pos:line="1" pos:column="23"/></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier></type><name pos:line="1" pos:column="25">mem<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list> <name pos:line="1" pos:column="30">THROWSPEC<pos:position pos:line="1" pos:column="39"/></name>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="3" pos:column="5">0<pos:position pos:line="3" pos:column="6"/></literal></expr></cpp:if>
	<comment type="block" pos:line="4" pos:column="9">/* Only enable if testing with valgrind. Causes misoperation */</comment>
	return THREADCACHEMAX;
<cpp:else pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">else<pos:position pos:line="6" pos:column="6"/></cpp:directive></cpp:else>
	<if pos:line="7" pos:column="9">if<condition pos:line="7" pos:column="11">(<expr><name pos:line="7" pos:column="12">mem<pos:position pos:line="7" pos:column="15"/></name></expr>)<pos:position pos:line="7" pos:column="16"/></condition><then pos:line="7" pos:column="16">
	<block pos:line="8" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">mchunkptr<pos:position pos:line="9" pos:column="26"/></name></type> <name pos:line="9" pos:column="27">p<pos:position pos:line="9" pos:column="28"/></name><init pos:line="9" pos:column="28">=<expr><call><name pos:line="9" pos:column="29">mem2chunk<pos:position pos:line="9" pos:column="38"/></name><argument_list pos:line="9" pos:column="38">(<argument><expr><name pos:line="9" pos:column="39">mem<pos:position pos:line="9" pos:column="42"/></name></expr></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="44"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">assert<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><call><name pos:line="10" pos:column="24">cinuse<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><name pos:line="10" pos:column="31">p<pos:position pos:line="10" pos:column="32"/></name></expr></argument>)<pos:position pos:line="10" pos:column="33"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="35"/></expr_stmt>	<comment type="block" pos:line="10" pos:column="41">/* If this fails, someone tried to free a block twice */</comment>
		<if pos:line="11" pos:column="17">if<condition pos:line="11" pos:column="19">(<expr><call><name pos:line="11" pos:column="20">cinuse<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><name pos:line="11" pos:column="27">p<pos:position pos:line="11" pos:column="28"/></name></expr></argument>)<pos:position pos:line="11" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="30"/></condition><then pos:line="11" pos:column="30">
			<block type="pseudo"><return pos:line="12" pos:column="25">return <expr><call><name pos:line="12" pos:column="32">chunksize<pos:position pos:line="12" pos:column="41"/></name><argument_list pos:line="12" pos:column="41">(<argument><expr><name pos:line="12" pos:column="42">p<pos:position pos:line="12" pos:column="43"/></name></expr></argument>)<pos:position pos:line="12" pos:column="44"/></argument_list></call><operator pos:line="12" pos:column="44">-<pos:position pos:line="12" pos:column="45"/></operator><call><name pos:line="12" pos:column="45">overhead_for<pos:position pos:line="12" pos:column="57"/></name><argument_list pos:line="12" pos:column="57">(<argument><expr><name pos:line="12" pos:column="58">p<pos:position pos:line="12" pos:column="59"/></name></expr></argument>)<pos:position pos:line="12" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="61"/></return></block></then></if>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>
	<return pos:line="14" pos:column="9">return <expr><literal type="number" pos:line="14" pos:column="16">0<pos:position pos:line="14" pos:column="17"/></literal></expr>;<pos:position pos:line="14" pos:column="18"/></return>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
