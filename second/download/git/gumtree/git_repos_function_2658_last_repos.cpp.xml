<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2658_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">enum<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">protocol_allow_config<pos:position pos:line="1" pos:column="34"/></name></name></type> <name pos:line="1" pos:column="35">parse_protocol_config<pos:position pos:line="1" pos:column="56"/></name><parameter_list pos:line="1" pos:column="56">(<parameter><decl><type><specifier pos:line="1" pos:column="57">const<pos:position pos:line="1" pos:column="62"/></specifier> <name pos:line="1" pos:column="63">char<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">key<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
							<parameter><decl><type><specifier pos:line="2" pos:column="57">const<pos:position pos:line="2" pos:column="62"/></specifier> <name pos:line="2" pos:column="63">char<pos:position pos:line="2" pos:column="67"/></name> <modifier pos:line="2" pos:column="68">*<pos:position pos:line="2" pos:column="69"/></modifier></type><name pos:line="2" pos:column="69">value<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="75"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><operator pos:line="4" pos:column="13">!<pos:position pos:line="4" pos:column="14"/></operator><call><name pos:line="4" pos:column="14">strcasecmp<pos:position pos:line="4" pos:column="24"/></name><argument_list pos:line="4" pos:column="24">(<argument><expr><name pos:line="4" pos:column="25">value<pos:position pos:line="4" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="32">"always"<pos:position pos:line="4" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="42"/></condition><then pos:line="4" pos:column="42">
		<block type="pseudo"><return pos:line="5" pos:column="17">return <expr><name pos:line="5" pos:column="24">PROTOCOL_ALLOW_ALWAYS<pos:position pos:line="5" pos:column="45"/></name></expr>;<pos:position pos:line="5" pos:column="46"/></return></block></then>
	<elseif pos:line="6" pos:column="9">else <if pos:line="6" pos:column="14">if <condition pos:line="6" pos:column="17">(<expr><operator pos:line="6" pos:column="18">!<pos:position pos:line="6" pos:column="19"/></operator><call><name pos:line="6" pos:column="19">strcasecmp<pos:position pos:line="6" pos:column="29"/></name><argument_list pos:line="6" pos:column="29">(<argument><expr><name pos:line="6" pos:column="30">value<pos:position pos:line="6" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="37">"never"<pos:position pos:line="6" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="46"/></condition><then pos:line="6" pos:column="46">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><name pos:line="7" pos:column="24">PROTOCOL_ALLOW_NEVER<pos:position pos:line="7" pos:column="44"/></name></expr>;<pos:position pos:line="7" pos:column="45"/></return></block></then></if></elseif>
	<elseif pos:line="8" pos:column="9">else <if pos:line="8" pos:column="14">if <condition pos:line="8" pos:column="17">(<expr><operator pos:line="8" pos:column="18">!<pos:position pos:line="8" pos:column="19"/></operator><call><name pos:line="8" pos:column="19">strcasecmp<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">(<argument><expr><name pos:line="8" pos:column="30">value<pos:position pos:line="8" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="37">"user"<pos:position pos:line="8" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="45"/></condition><then pos:line="8" pos:column="45">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><name pos:line="9" pos:column="24">PROTOCOL_ALLOW_USER_ONLY<pos:position pos:line="9" pos:column="48"/></name></expr>;<pos:position pos:line="9" pos:column="49"/></return></block></then></if></elseif></if>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">die<pos:position pos:line="11" pos:column="12"/></name><argument_list pos:line="11" pos:column="12">(<argument><expr><literal type="string" pos:line="11" pos:column="13">"unknown value for config '%s': %s"<pos:position pos:line="11" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="50">key<pos:position pos:line="11" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="55">value<pos:position pos:line="11" pos:column="60"/></name></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="62"/></expr_stmt>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
