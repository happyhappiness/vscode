<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5564_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bin_tree_t<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type>
<name pos:line="2" pos:column="1">parse_dup_op<pos:position pos:line="2" pos:column="13"/></name> <parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">bin_tree_t<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type><name pos:line="2" pos:column="27">elem<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">re_string_t<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">regexp<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">re_dfa_t<pos:position pos:line="2" pos:column="62"/></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="64">dfa<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>,
	      <parameter><decl><type><name pos:line="3" pos:column="15">re_token_t<pos:position pos:line="3" pos:column="25"/></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">token<pos:position pos:line="3" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="34">reg_syntax_t<pos:position pos:line="3" pos:column="46"/></name></type> <name pos:line="3" pos:column="47">syntax<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="55">reg_errcode_t<pos:position pos:line="3" pos:column="68"/></name> <modifier pos:line="3" pos:column="69">*<pos:position pos:line="3" pos:column="70"/></modifier></type><name pos:line="3" pos:column="70">err<pos:position pos:line="3" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="74"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">bin_tree_t<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">tree<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><name pos:line="5" pos:column="22">NULL<pos:position pos:line="5" pos:column="26"/></name></expr></init></decl>, <modifier pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="29">old_tree<pos:position pos:line="5" pos:column="37"/></name> <init pos:line="5" pos:column="38">= <expr><name pos:line="5" pos:column="40">NULL<pos:position pos:line="5" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">i<pos:position pos:line="6" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="10">start<pos:position pos:line="6" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="17">end<pos:position pos:line="6" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="22">start_idx<pos:position pos:line="6" pos:column="31"/></name> <init pos:line="6" pos:column="32">= <expr><call><name pos:line="6" pos:column="34">re_string_cur_idx<pos:position pos:line="6" pos:column="51"/></name> <argument_list pos:line="6" pos:column="52">(<argument><expr><name pos:line="6" pos:column="53">regexp<pos:position pos:line="6" pos:column="59"/></name></expr></argument>)<pos:position pos:line="6" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="61"/></decl_stmt>
<cpp:ifndef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifndef<pos:position pos:line="7" pos:column="8"/></cpp:directive> <name pos:line="7" pos:column="9">RE_TOKEN_INIT_BUG<pos:position pos:line="7" pos:column="26"/></name></cpp:ifndef>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">re_token_t<pos:position pos:line="8" pos:column="13"/></name></type> <name pos:line="8" pos:column="14">start_token<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><operator pos:line="8" pos:column="28">*<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="29">token<pos:position pos:line="8" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
<cpp:else pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">else<pos:position pos:line="9" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">re_token_t<pos:position pos:line="10" pos:column="13"/></name></type> <name pos:line="10" pos:column="14">start_token<pos:position pos:line="10" pos:column="25"/></name></decl>;<pos:position pos:line="10" pos:column="26"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">memcpy<pos:position pos:line="12" pos:column="9"/></name> <argument_list pos:line="12" pos:column="10">(<argument><expr><operator pos:line="12" pos:column="11">(<pos:position pos:line="12" pos:column="12"/></operator><name pos:line="12" pos:column="12">void<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">*<pos:position pos:line="12" pos:column="18"/></operator><operator pos:line="12" pos:column="18">)<pos:position pos:line="12" pos:column="19"/></operator> <operator pos:line="12" pos:column="20">&amp;<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="21">start_token<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="34">(<pos:position pos:line="12" pos:column="35"/></operator><name pos:line="12" pos:column="35">void<pos:position pos:line="12" pos:column="39"/></name> <operator pos:line="12" pos:column="40">*<pos:position pos:line="12" pos:column="41"/></operator><operator pos:line="12" pos:column="41">)<pos:position pos:line="12" pos:column="42"/></operator> <name pos:line="12" pos:column="43">token<pos:position pos:line="12" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="50">sizeof <name pos:line="12" pos:column="57">start_token<pos:position pos:line="12" pos:column="68"/></name></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="70"/></expr_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="15" pos:column="3">if <condition pos:line="15" pos:column="6">(<expr><name><name pos:line="15" pos:column="7">token<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">-&gt;<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="14">type<pos:position pos:line="15" pos:column="18"/></name></name> <operator pos:line="15" pos:column="19">==<pos:position pos:line="15" pos:column="21"/></operator> <name pos:line="15" pos:column="22">OP_OPEN_DUP_NUM<pos:position pos:line="15" pos:column="37"/></name></expr>)<pos:position pos:line="15" pos:column="38"/></condition><then pos:line="15" pos:column="38">
    <block pos:line="16" pos:column="5">{
      <expr_stmt><expr><name pos:line="17" pos:column="7">end<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">=<pos:position pos:line="17" pos:column="12"/></operator> <literal type="number" pos:line="17" pos:column="13">0<pos:position pos:line="17" pos:column="14"/></literal></expr>;<pos:position pos:line="17" pos:column="15"/></expr_stmt>
      <expr_stmt><expr><name pos:line="18" pos:column="7">start<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <call><name pos:line="18" pos:column="15">fetch_number<pos:position pos:line="18" pos:column="27"/></name> <argument_list pos:line="18" pos:column="28">(<argument><expr><name pos:line="18" pos:column="29">regexp<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="37">token<pos:position pos:line="18" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="44">syntax<pos:position pos:line="18" pos:column="50"/></name></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="52"/></expr_stmt>
      <if pos:line="19" pos:column="7">if <condition pos:line="19" pos:column="10">(<expr><name pos:line="19" pos:column="11">start<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">==<pos:position pos:line="19" pos:column="19"/></operator> <operator pos:line="19" pos:column="20">-<pos:position pos:line="19" pos:column="21"/></operator><literal type="number" pos:line="19" pos:column="21">1<pos:position pos:line="19" pos:column="22"/></literal></expr>)<pos:position pos:line="19" pos:column="23"/></condition><then pos:line="19" pos:column="23">
	<block pos:line="20" pos:column="9">{
	  <if pos:line="21" pos:column="11">if <condition pos:line="21" pos:column="14">(<expr><name><name pos:line="21" pos:column="15">token<pos:position pos:line="21" pos:column="20"/></name><operator pos:line="21" pos:column="20">-&gt;<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="22">type<pos:position pos:line="21" pos:column="26"/></name></name> <operator pos:line="21" pos:column="27">==<pos:position pos:line="21" pos:column="29"/></operator> <name pos:line="21" pos:column="30">CHARACTER<pos:position pos:line="21" pos:column="39"/></name> <operator pos:line="21" pos:column="40">&amp;&amp;<pos:position pos:line="21" pos:column="50"/></operator> <name><name pos:line="21" pos:column="43">token<pos:position pos:line="21" pos:column="48"/></name><operator pos:line="21" pos:column="48">-&gt;<pos:position pos:line="21" pos:column="53"/></operator><name pos:line="21" pos:column="50">opr<pos:position pos:line="21" pos:column="53"/></name><operator pos:line="21" pos:column="53">.<pos:position pos:line="21" pos:column="54"/></operator><name pos:line="21" pos:column="54">c<pos:position pos:line="21" pos:column="55"/></name></name> <operator pos:line="21" pos:column="56">==<pos:position pos:line="21" pos:column="58"/></operator> <literal type="char" pos:line="21" pos:column="59">','<pos:position pos:line="21" pos:column="62"/></literal></expr>)<pos:position pos:line="21" pos:column="63"/></condition><then pos:line="21" pos:column="63">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="13">start<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <literal type="number" pos:line="22" pos:column="21">0<pos:position pos:line="22" pos:column="22"/></literal></expr>;<pos:position pos:line="22" pos:column="23"/></expr_stmt></block></then> <comment type="block" pos:line="22" pos:column="24">/* We treat "{,m}" as "{0,m}".  */</comment>
	  <else pos:line="23" pos:column="11">else
	    <block pos:line="24" pos:column="13">{
	      <expr_stmt><expr><operator pos:line="25" pos:column="15">*<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="16">err<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">=<pos:position pos:line="25" pos:column="21"/></operator> <name pos:line="25" pos:column="22">REG_BADBR<pos:position pos:line="25" pos:column="31"/></name></expr>;<pos:position pos:line="25" pos:column="32"/></expr_stmt> <comment type="block" pos:line="25" pos:column="33">/* &lt;re&gt;{} is invalid.  */</comment>
	      <return pos:line="26" pos:column="15">return <expr><name pos:line="26" pos:column="22">NULL<pos:position pos:line="26" pos:column="26"/></name></expr>;<pos:position pos:line="26" pos:column="27"/></return>
	    }<pos:position pos:line="27" pos:column="14"/></block></else></if>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>
      <if pos:line="29" pos:column="7">if <condition pos:line="29" pos:column="10">(<expr><call><name pos:line="29" pos:column="11">BE<pos:position pos:line="29" pos:column="13"/></name> <argument_list pos:line="29" pos:column="14">(<argument><expr><name pos:line="29" pos:column="15">start<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">!=<pos:position pos:line="29" pos:column="23"/></operator> <operator pos:line="29" pos:column="24">-<pos:position pos:line="29" pos:column="25"/></operator><literal type="number" pos:line="29" pos:column="25">2<pos:position pos:line="29" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="28">1<pos:position pos:line="29" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="31"/></condition><then pos:line="29" pos:column="31">
	<block pos:line="30" pos:column="9">{
	  <comment type="block" pos:line="31" pos:column="11">/* We treat "{n}" as "{n,n}".  */</comment>
	  <expr_stmt><expr><name pos:line="32" pos:column="11">end<pos:position pos:line="32" pos:column="14"/></name> <operator pos:line="32" pos:column="15">=<pos:position pos:line="32" pos:column="16"/></operator> <operator pos:line="32" pos:column="17">(<pos:position pos:line="32" pos:column="18"/></operator><ternary><condition><expr><operator pos:line="32" pos:column="18">(<pos:position pos:line="32" pos:column="19"/></operator><name><name pos:line="32" pos:column="19">token<pos:position pos:line="32" pos:column="24"/></name><operator pos:line="32" pos:column="24">-&gt;<pos:position pos:line="32" pos:column="29"/></operator><name pos:line="32" pos:column="26">type<pos:position pos:line="32" pos:column="30"/></name></name> <operator pos:line="32" pos:column="31">==<pos:position pos:line="32" pos:column="33"/></operator> <name pos:line="32" pos:column="34">OP_CLOSE_DUP_NUM<pos:position pos:line="32" pos:column="50"/></name><operator pos:line="32" pos:column="50">)<pos:position pos:line="32" pos:column="51"/></operator></expr> ?<pos:position pos:line="32" pos:column="53"/></condition><then pos:line="32" pos:column="53"> <expr><name pos:line="32" pos:column="54">start<pos:position pos:line="32" pos:column="59"/></name></expr>
		 <pos:position pos:line="33" pos:column="4"/></then><else pos:line="33" pos:column="18">: <expr><operator pos:line="33" pos:column="20">(<pos:position pos:line="33" pos:column="21"/></operator><ternary><condition><expr><operator pos:line="33" pos:column="21">(<pos:position pos:line="33" pos:column="22"/></operator><name><name pos:line="33" pos:column="22">token<pos:position pos:line="33" pos:column="27"/></name><operator pos:line="33" pos:column="27">-&gt;<pos:position pos:line="33" pos:column="32"/></operator><name pos:line="33" pos:column="29">type<pos:position pos:line="33" pos:column="33"/></name></name> <operator pos:line="33" pos:column="34">==<pos:position pos:line="33" pos:column="36"/></operator> <name pos:line="33" pos:column="37">CHARACTER<pos:position pos:line="33" pos:column="46"/></name> <operator pos:line="33" pos:column="47">&amp;&amp;<pos:position pos:line="33" pos:column="57"/></operator> <name><name pos:line="33" pos:column="50">token<pos:position pos:line="33" pos:column="55"/></name><operator pos:line="33" pos:column="55">-&gt;<pos:position pos:line="33" pos:column="60"/></operator><name pos:line="33" pos:column="57">opr<pos:position pos:line="33" pos:column="60"/></name><operator pos:line="33" pos:column="60">.<pos:position pos:line="33" pos:column="61"/></operator><name pos:line="33" pos:column="61">c<pos:position pos:line="33" pos:column="62"/></name></name> <operator pos:line="33" pos:column="63">==<pos:position pos:line="33" pos:column="65"/></operator> <literal type="char" pos:line="33" pos:column="66">','<pos:position pos:line="33" pos:column="69"/></literal><operator pos:line="33" pos:column="69">)<pos:position pos:line="33" pos:column="70"/></operator></expr>
		    ?<pos:position pos:line="34" pos:column="22"/></condition><then pos:line="34" pos:column="22"> <expr><call><name pos:line="34" pos:column="23">fetch_number<pos:position pos:line="34" pos:column="35"/></name> <argument_list pos:line="34" pos:column="36">(<argument><expr><name pos:line="34" pos:column="37">regexp<pos:position pos:line="34" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="45">token<pos:position pos:line="34" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="52">syntax<pos:position pos:line="34" pos:column="58"/></name></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></call></expr> <pos:position pos:line="34" pos:column="60"/></then><else pos:line="34" pos:column="60">: <expr><operator pos:line="34" pos:column="62">-<pos:position pos:line="34" pos:column="63"/></operator><literal type="number" pos:line="34" pos:column="63">2<pos:position pos:line="34" pos:column="64"/></literal></expr></else></ternary><operator pos:line="34" pos:column="64">)<pos:position pos:line="34" pos:column="65"/></operator></expr></else></ternary><operator pos:line="34" pos:column="65">)<pos:position pos:line="34" pos:column="66"/></operator></expr>;<pos:position pos:line="34" pos:column="67"/></expr_stmt>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>
      <if pos:line="36" pos:column="7">if <condition pos:line="36" pos:column="10">(<expr><call><name pos:line="36" pos:column="11">BE<pos:position pos:line="36" pos:column="13"/></name> <argument_list pos:line="36" pos:column="14">(<argument><expr><name pos:line="36" pos:column="15">start<pos:position pos:line="36" pos:column="20"/></name> <operator pos:line="36" pos:column="21">==<pos:position pos:line="36" pos:column="23"/></operator> <operator pos:line="36" pos:column="24">-<pos:position pos:line="36" pos:column="25"/></operator><literal type="number" pos:line="36" pos:column="25">2<pos:position pos:line="36" pos:column="26"/></literal> <operator pos:line="36" pos:column="27">||<pos:position pos:line="36" pos:column="29"/></operator> <name pos:line="36" pos:column="30">end<pos:position pos:line="36" pos:column="33"/></name> <operator pos:line="36" pos:column="34">==<pos:position pos:line="36" pos:column="36"/></operator> <operator pos:line="36" pos:column="37">-<pos:position pos:line="36" pos:column="38"/></operator><literal type="number" pos:line="36" pos:column="38">2<pos:position pos:line="36" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="41">0<pos:position pos:line="36" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="44"/></condition><then pos:line="36" pos:column="44">
	<block pos:line="37" pos:column="9">{
	  <comment type="block" pos:line="38" pos:column="11">/* Invalid sequence.  */</comment>
	  <if pos:line="39" pos:column="11">if <condition pos:line="39" pos:column="14">(<expr><call><name pos:line="39" pos:column="15">BE<pos:position pos:line="39" pos:column="17"/></name> <argument_list pos:line="39" pos:column="18">(<argument><expr><operator pos:line="39" pos:column="19">!<pos:position pos:line="39" pos:column="20"/></operator><operator pos:line="39" pos:column="20">(<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="21">syntax<pos:position pos:line="39" pos:column="27"/></name> <operator pos:line="39" pos:column="28">&amp;<pos:position pos:line="39" pos:column="33"/></operator> <name pos:line="39" pos:column="30">RE_INVALID_INTERVAL_ORD<pos:position pos:line="39" pos:column="53"/></name><operator pos:line="39" pos:column="53">)<pos:position pos:line="39" pos:column="54"/></operator></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="56">0<pos:position pos:line="39" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="59"/></condition><then pos:line="39" pos:column="59">
	    <block pos:line="40" pos:column="13">{
	      <if pos:line="41" pos:column="15">if <condition pos:line="41" pos:column="18">(<expr><name><name pos:line="41" pos:column="19">token<pos:position pos:line="41" pos:column="24"/></name><operator pos:line="41" pos:column="24">-&gt;<pos:position pos:line="41" pos:column="29"/></operator><name pos:line="41" pos:column="26">type<pos:position pos:line="41" pos:column="30"/></name></name> <operator pos:line="41" pos:column="31">==<pos:position pos:line="41" pos:column="33"/></operator> <name pos:line="41" pos:column="34">END_OF_RE<pos:position pos:line="41" pos:column="43"/></name></expr>)<pos:position pos:line="41" pos:column="44"/></condition><then pos:line="41" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><operator pos:line="42" pos:column="17">*<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="18">err<pos:position pos:line="42" pos:column="21"/></name> <operator pos:line="42" pos:column="22">=<pos:position pos:line="42" pos:column="23"/></operator> <name pos:line="42" pos:column="24">REG_EBRACE<pos:position pos:line="42" pos:column="34"/></name></expr>;<pos:position pos:line="42" pos:column="35"/></expr_stmt></block></then>
	      <else pos:line="43" pos:column="15">else
		<block type="pseudo"><expr_stmt><expr><operator pos:line="44" pos:column="17">*<pos:position pos:line="44" pos:column="18"/></operator><name pos:line="44" pos:column="18">err<pos:position pos:line="44" pos:column="21"/></name> <operator pos:line="44" pos:column="22">=<pos:position pos:line="44" pos:column="23"/></operator> <name pos:line="44" pos:column="24">REG_BADBR<pos:position pos:line="44" pos:column="33"/></name></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt></block></else></if>

	      <return pos:line="46" pos:column="15">return <expr><name pos:line="46" pos:column="22">NULL<pos:position pos:line="46" pos:column="26"/></name></expr>;<pos:position pos:line="46" pos:column="27"/></return>
	    }<pos:position pos:line="47" pos:column="14"/></block></then></if>

	  <comment type="block" pos:line="49" pos:column="11">/* If the syntax bit is set, rollback.  */</comment>
	  <expr_stmt><expr><call><name pos:line="50" pos:column="11">re_string_set_index<pos:position pos:line="50" pos:column="30"/></name> <argument_list pos:line="50" pos:column="31">(<argument><expr><name pos:line="50" pos:column="32">regexp<pos:position pos:line="50" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="40">start_idx<pos:position pos:line="50" pos:column="49"/></name></expr></argument>)<pos:position pos:line="50" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="51"/></expr_stmt>
	  <expr_stmt><expr><operator pos:line="51" pos:column="11">*<pos:position pos:line="51" pos:column="12"/></operator><name pos:line="51" pos:column="12">token<pos:position pos:line="51" pos:column="17"/></name> <operator pos:line="51" pos:column="18">=<pos:position pos:line="51" pos:column="19"/></operator> <name pos:line="51" pos:column="20">start_token<pos:position pos:line="51" pos:column="31"/></name></expr>;<pos:position pos:line="51" pos:column="32"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="52" pos:column="11">token<pos:position pos:line="52" pos:column="16"/></name><operator pos:line="52" pos:column="16">-&gt;<pos:position pos:line="52" pos:column="21"/></operator><name pos:line="52" pos:column="18">type<pos:position pos:line="52" pos:column="22"/></name></name> <operator pos:line="52" pos:column="23">=<pos:position pos:line="52" pos:column="24"/></operator> <name pos:line="52" pos:column="25">CHARACTER<pos:position pos:line="52" pos:column="34"/></name></expr>;<pos:position pos:line="52" pos:column="35"/></expr_stmt>
	  <comment type="block" pos:line="53" pos:column="11">/* mb_partial and word_char bits should be already initialized by
	     peek_token.  */</comment>
	  <return pos:line="55" pos:column="11">return <expr><name pos:line="55" pos:column="18">elem<pos:position pos:line="55" pos:column="22"/></name></expr>;<pos:position pos:line="55" pos:column="23"/></return>
	}<pos:position pos:line="56" pos:column="10"/></block></then></if>

      <if pos:line="58" pos:column="7">if <condition pos:line="58" pos:column="10">(<expr><call><name pos:line="58" pos:column="11">BE<pos:position pos:line="58" pos:column="13"/></name> <argument_list pos:line="58" pos:column="14">(<argument><expr><operator pos:line="58" pos:column="15">(<pos:position pos:line="58" pos:column="16"/></operator><name pos:line="58" pos:column="16">end<pos:position pos:line="58" pos:column="19"/></name> <operator pos:line="58" pos:column="20">!=<pos:position pos:line="58" pos:column="22"/></operator> <operator pos:line="58" pos:column="23">-<pos:position pos:line="58" pos:column="24"/></operator><literal type="number" pos:line="58" pos:column="24">1<pos:position pos:line="58" pos:column="25"/></literal> <operator pos:line="58" pos:column="26">&amp;&amp;<pos:position pos:line="58" pos:column="36"/></operator> <name pos:line="58" pos:column="29">start<pos:position pos:line="58" pos:column="34"/></name> <operator pos:line="58" pos:column="35">&gt;<pos:position pos:line="58" pos:column="39"/></operator> <name pos:line="58" pos:column="37">end<pos:position pos:line="58" pos:column="40"/></name><operator pos:line="58" pos:column="40">)<pos:position pos:line="58" pos:column="41"/></operator> <operator pos:line="58" pos:column="42">||<pos:position pos:line="58" pos:column="44"/></operator> <name><name pos:line="58" pos:column="45">token<pos:position pos:line="58" pos:column="50"/></name><operator pos:line="58" pos:column="50">-&gt;<pos:position pos:line="58" pos:column="55"/></operator><name pos:line="58" pos:column="52">type<pos:position pos:line="58" pos:column="56"/></name></name> <operator pos:line="58" pos:column="57">!=<pos:position pos:line="58" pos:column="59"/></operator> <name pos:line="58" pos:column="60">OP_CLOSE_DUP_NUM<pos:position pos:line="58" pos:column="76"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="58" pos:column="78">0<pos:position pos:line="58" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="80"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="81"/></condition><then pos:line="58" pos:column="81">
	<block pos:line="59" pos:column="9">{
	  <comment type="block" pos:line="60" pos:column="11">/* First number greater than second.  */</comment>
	  <expr_stmt><expr><operator pos:line="61" pos:column="11">*<pos:position pos:line="61" pos:column="12"/></operator><name pos:line="61" pos:column="12">err<pos:position pos:line="61" pos:column="15"/></name> <operator pos:line="61" pos:column="16">=<pos:position pos:line="61" pos:column="17"/></operator> <name pos:line="61" pos:column="18">REG_BADBR<pos:position pos:line="61" pos:column="27"/></name></expr>;<pos:position pos:line="61" pos:column="28"/></expr_stmt>
	  <return pos:line="62" pos:column="11">return <expr><name pos:line="62" pos:column="18">NULL<pos:position pos:line="62" pos:column="22"/></name></expr>;<pos:position pos:line="62" pos:column="23"/></return>
	}<pos:position pos:line="63" pos:column="10"/></block></then></if>
    }<pos:position pos:line="64" pos:column="6"/></block></then>
  <else pos:line="65" pos:column="3">else
    <block pos:line="66" pos:column="5">{
      <expr_stmt><expr><name pos:line="67" pos:column="7">start<pos:position pos:line="67" pos:column="12"/></name> <operator pos:line="67" pos:column="13">=<pos:position pos:line="67" pos:column="14"/></operator> <ternary><condition><expr><operator pos:line="67" pos:column="15">(<pos:position pos:line="67" pos:column="16"/></operator><name><name pos:line="67" pos:column="16">token<pos:position pos:line="67" pos:column="21"/></name><operator pos:line="67" pos:column="21">-&gt;<pos:position pos:line="67" pos:column="26"/></operator><name pos:line="67" pos:column="23">type<pos:position pos:line="67" pos:column="27"/></name></name> <operator pos:line="67" pos:column="28">==<pos:position pos:line="67" pos:column="30"/></operator> <name pos:line="67" pos:column="31">OP_DUP_PLUS<pos:position pos:line="67" pos:column="42"/></name><operator pos:line="67" pos:column="42">)<pos:position pos:line="67" pos:column="43"/></operator></expr> ?<pos:position pos:line="67" pos:column="45"/></condition><then pos:line="67" pos:column="45"> <expr><literal type="number" pos:line="67" pos:column="46">1<pos:position pos:line="67" pos:column="47"/></literal></expr> <pos:position pos:line="67" pos:column="48"/></then><else pos:line="67" pos:column="48">: <expr><literal type="number" pos:line="67" pos:column="50">0<pos:position pos:line="67" pos:column="51"/></literal></expr></else></ternary></expr>;<pos:position pos:line="67" pos:column="52"/></expr_stmt>
      <expr_stmt><expr><name pos:line="68" pos:column="7">end<pos:position pos:line="68" pos:column="10"/></name> <operator pos:line="68" pos:column="11">=<pos:position pos:line="68" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="68" pos:column="13">(<pos:position pos:line="68" pos:column="14"/></operator><name><name pos:line="68" pos:column="14">token<pos:position pos:line="68" pos:column="19"/></name><operator pos:line="68" pos:column="19">-&gt;<pos:position pos:line="68" pos:column="24"/></operator><name pos:line="68" pos:column="21">type<pos:position pos:line="68" pos:column="25"/></name></name> <operator pos:line="68" pos:column="26">==<pos:position pos:line="68" pos:column="28"/></operator> <name pos:line="68" pos:column="29">OP_DUP_QUESTION<pos:position pos:line="68" pos:column="44"/></name><operator pos:line="68" pos:column="44">)<pos:position pos:line="68" pos:column="45"/></operator></expr> ?<pos:position pos:line="68" pos:column="47"/></condition><then pos:line="68" pos:column="47"> <expr><literal type="number" pos:line="68" pos:column="48">1<pos:position pos:line="68" pos:column="49"/></literal></expr> <pos:position pos:line="68" pos:column="50"/></then><else pos:line="68" pos:column="50">: <expr><operator pos:line="68" pos:column="52">-<pos:position pos:line="68" pos:column="53"/></operator><literal type="number" pos:line="68" pos:column="53">1<pos:position pos:line="68" pos:column="54"/></literal></expr></else></ternary></expr>;<pos:position pos:line="68" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="69" pos:column="6"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="71" pos:column="3">fetch_token<pos:position pos:line="71" pos:column="14"/></name> <argument_list pos:line="71" pos:column="15">(<argument><expr><name pos:line="71" pos:column="16">token<pos:position pos:line="71" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="23">regexp<pos:position pos:line="71" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="31">syntax<pos:position pos:line="71" pos:column="37"/></name></expr></argument>)<pos:position pos:line="71" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="39"/></expr_stmt>

  <if pos:line="73" pos:column="3">if <condition pos:line="73" pos:column="6">(<expr><call><name pos:line="73" pos:column="7">BE<pos:position pos:line="73" pos:column="9"/></name> <argument_list pos:line="73" pos:column="10">(<argument><expr><name pos:line="73" pos:column="11">elem<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">==<pos:position pos:line="73" pos:column="18"/></operator> <name pos:line="73" pos:column="19">NULL<pos:position pos:line="73" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="25">0<pos:position pos:line="73" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="28"/></condition><then pos:line="73" pos:column="28">
    <block type="pseudo"><return pos:line="74" pos:column="5">return <expr><name pos:line="74" pos:column="12">NULL<pos:position pos:line="74" pos:column="16"/></name></expr>;<pos:position pos:line="74" pos:column="17"/></return></block></then></if>
  <if pos:line="75" pos:column="3">if <condition pos:line="75" pos:column="6">(<expr><call><name pos:line="75" pos:column="7">BE<pos:position pos:line="75" pos:column="9"/></name> <argument_list pos:line="75" pos:column="10">(<argument><expr><name pos:line="75" pos:column="11">start<pos:position pos:line="75" pos:column="16"/></name> <operator pos:line="75" pos:column="17">==<pos:position pos:line="75" pos:column="19"/></operator> <literal type="number" pos:line="75" pos:column="20">0<pos:position pos:line="75" pos:column="21"/></literal> <operator pos:line="75" pos:column="22">&amp;&amp;<pos:position pos:line="75" pos:column="32"/></operator> <name pos:line="75" pos:column="25">end<pos:position pos:line="75" pos:column="28"/></name> <operator pos:line="75" pos:column="29">==<pos:position pos:line="75" pos:column="31"/></operator> <literal type="number" pos:line="75" pos:column="32">0<pos:position pos:line="75" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="35">0<pos:position pos:line="75" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="75" pos:column="38"/></condition><then pos:line="75" pos:column="38">
    <block pos:line="76" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="77" pos:column="7">postorder<pos:position pos:line="77" pos:column="16"/></name> <argument_list pos:line="77" pos:column="17">(<argument><expr><name pos:line="77" pos:column="18">elem<pos:position pos:line="77" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="24">free_tree<pos:position pos:line="77" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="35">NULL<pos:position pos:line="77" pos:column="39"/></name></expr></argument>)<pos:position pos:line="77" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="41"/></expr_stmt>
      <return pos:line="78" pos:column="7">return <expr><name pos:line="78" pos:column="14">NULL<pos:position pos:line="78" pos:column="18"/></name></expr>;<pos:position pos:line="78" pos:column="19"/></return>
    }<pos:position pos:line="79" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="81" pos:column="3">/* Extract "&lt;re&gt;{n,m}" to "&lt;re&gt;&lt;re&gt;...&lt;re&gt;&lt;re&gt;{0,&lt;m-n&gt;}".  */</comment>
  <if pos:line="82" pos:column="3">if <condition pos:line="82" pos:column="6">(<expr><call><name pos:line="82" pos:column="7">BE<pos:position pos:line="82" pos:column="9"/></name> <argument_list pos:line="82" pos:column="10">(<argument><expr><name pos:line="82" pos:column="11">start<pos:position pos:line="82" pos:column="16"/></name> <operator pos:line="82" pos:column="17">&gt;<pos:position pos:line="82" pos:column="21"/></operator> <literal type="number" pos:line="82" pos:column="19">0<pos:position pos:line="82" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="82" pos:column="22">0<pos:position pos:line="82" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="82" pos:column="25"/></condition><then pos:line="82" pos:column="25">
    <block pos:line="83" pos:column="5">{
      <expr_stmt><expr><name pos:line="84" pos:column="7">tree<pos:position pos:line="84" pos:column="11"/></name> <operator pos:line="84" pos:column="12">=<pos:position pos:line="84" pos:column="13"/></operator> <name pos:line="84" pos:column="14">elem<pos:position pos:line="84" pos:column="18"/></name></expr>;<pos:position pos:line="84" pos:column="19"/></expr_stmt>
      <for pos:line="85" pos:column="7">for <control pos:line="85" pos:column="11">(<init><expr><name pos:line="85" pos:column="12">i<pos:position pos:line="85" pos:column="13"/></name> <operator pos:line="85" pos:column="14">=<pos:position pos:line="85" pos:column="15"/></operator> <literal type="number" pos:line="85" pos:column="16">2<pos:position pos:line="85" pos:column="17"/></literal></expr>;<pos:position pos:line="85" pos:column="18"/></init> <condition><expr><name pos:line="85" pos:column="19">i<pos:position pos:line="85" pos:column="20"/></name> <operator pos:line="85" pos:column="21">&lt;=<pos:position pos:line="85" pos:column="26"/></operator> <name pos:line="85" pos:column="24">start<pos:position pos:line="85" pos:column="29"/></name></expr>;<pos:position pos:line="85" pos:column="30"/></condition> <incr><expr><operator pos:line="85" pos:column="31">++<pos:position pos:line="85" pos:column="33"/></operator><name pos:line="85" pos:column="33">i<pos:position pos:line="85" pos:column="34"/></name></expr></incr>)<pos:position pos:line="85" pos:column="35"/></control>
	<block pos:line="86" pos:column="9">{
	  <expr_stmt><expr><name pos:line="87" pos:column="11">elem<pos:position pos:line="87" pos:column="15"/></name> <operator pos:line="87" pos:column="16">=<pos:position pos:line="87" pos:column="17"/></operator> <call><name pos:line="87" pos:column="18">duplicate_tree<pos:position pos:line="87" pos:column="32"/></name> <argument_list pos:line="87" pos:column="33">(<argument><expr><name pos:line="87" pos:column="34">elem<pos:position pos:line="87" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="40">dfa<pos:position pos:line="87" pos:column="43"/></name></expr></argument>)<pos:position pos:line="87" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="45"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="88" pos:column="11">tree<pos:position pos:line="88" pos:column="15"/></name> <operator pos:line="88" pos:column="16">=<pos:position pos:line="88" pos:column="17"/></operator> <call><name pos:line="88" pos:column="18">create_tree<pos:position pos:line="88" pos:column="29"/></name> <argument_list pos:line="88" pos:column="30">(<argument><expr><name pos:line="88" pos:column="31">dfa<pos:position pos:line="88" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="36">tree<pos:position pos:line="88" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="42">elem<pos:position pos:line="88" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="48">CONCAT<pos:position pos:line="88" pos:column="54"/></name></expr></argument>)<pos:position pos:line="88" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="56"/></expr_stmt>
	  <if pos:line="89" pos:column="11">if <condition pos:line="89" pos:column="14">(<expr><call><name pos:line="89" pos:column="15">BE<pos:position pos:line="89" pos:column="17"/></name> <argument_list pos:line="89" pos:column="18">(<argument><expr><name pos:line="89" pos:column="19">elem<pos:position pos:line="89" pos:column="23"/></name> <operator pos:line="89" pos:column="24">==<pos:position pos:line="89" pos:column="26"/></operator> <name pos:line="89" pos:column="27">NULL<pos:position pos:line="89" pos:column="31"/></name> <operator pos:line="89" pos:column="32">||<pos:position pos:line="89" pos:column="34"/></operator> <name pos:line="89" pos:column="35">tree<pos:position pos:line="89" pos:column="39"/></name> <operator pos:line="89" pos:column="40">==<pos:position pos:line="89" pos:column="42"/></operator> <name pos:line="89" pos:column="43">NULL<pos:position pos:line="89" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="89" pos:column="49">0<pos:position pos:line="89" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="89" pos:column="52"/></condition><then pos:line="89" pos:column="52">
	    <block type="pseudo"><goto pos:line="90" pos:column="13">goto <name pos:line="90" pos:column="18">parse_dup_op_espace<pos:position pos:line="90" pos:column="37"/></name>;<pos:position pos:line="90" pos:column="38"/></goto></block></then></if>
	}<pos:position pos:line="91" pos:column="10"/></block></for>

      <if pos:line="93" pos:column="7">if <condition pos:line="93" pos:column="10">(<expr><name pos:line="93" pos:column="11">start<pos:position pos:line="93" pos:column="16"/></name> <operator pos:line="93" pos:column="17">==<pos:position pos:line="93" pos:column="19"/></operator> <name pos:line="93" pos:column="20">end<pos:position pos:line="93" pos:column="23"/></name></expr>)<pos:position pos:line="93" pos:column="24"/></condition><then pos:line="93" pos:column="24">
	<block type="pseudo"><return pos:line="94" pos:column="9">return <expr><name pos:line="94" pos:column="16">tree<pos:position pos:line="94" pos:column="20"/></name></expr>;<pos:position pos:line="94" pos:column="21"/></return></block></then></if>

      <comment type="block" pos:line="96" pos:column="7">/* Duplicate ELEM before it is marked optional.  */</comment>
      <expr_stmt><expr><name pos:line="97" pos:column="7">elem<pos:position pos:line="97" pos:column="11"/></name> <operator pos:line="97" pos:column="12">=<pos:position pos:line="97" pos:column="13"/></operator> <call><name pos:line="97" pos:column="14">duplicate_tree<pos:position pos:line="97" pos:column="28"/></name> <argument_list pos:line="97" pos:column="29">(<argument><expr><name pos:line="97" pos:column="30">elem<pos:position pos:line="97" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="36">dfa<pos:position pos:line="97" pos:column="39"/></name></expr></argument>)<pos:position pos:line="97" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><name pos:line="98" pos:column="7">old_tree<pos:position pos:line="98" pos:column="15"/></name> <operator pos:line="98" pos:column="16">=<pos:position pos:line="98" pos:column="17"/></operator> <name pos:line="98" pos:column="18">tree<pos:position pos:line="98" pos:column="22"/></name></expr>;<pos:position pos:line="98" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="99" pos:column="6"/></block></then>
  <else pos:line="100" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="101" pos:column="5">old_tree<pos:position pos:line="101" pos:column="13"/></name> <operator pos:line="101" pos:column="14">=<pos:position pos:line="101" pos:column="15"/></operator> <name pos:line="101" pos:column="16">NULL<pos:position pos:line="101" pos:column="20"/></name></expr>;<pos:position pos:line="101" pos:column="21"/></expr_stmt></block></else></if>

  <if pos:line="103" pos:column="3">if <condition pos:line="103" pos:column="6">(<expr><name><name pos:line="103" pos:column="7">elem<pos:position pos:line="103" pos:column="11"/></name><operator pos:line="103" pos:column="11">-&gt;<pos:position pos:line="103" pos:column="16"/></operator><name pos:line="103" pos:column="13">token<pos:position pos:line="103" pos:column="18"/></name><operator pos:line="103" pos:column="18">.<pos:position pos:line="103" pos:column="19"/></operator><name pos:line="103" pos:column="19">type<pos:position pos:line="103" pos:column="23"/></name></name> <operator pos:line="103" pos:column="24">==<pos:position pos:line="103" pos:column="26"/></operator> <name pos:line="103" pos:column="27">SUBEXP<pos:position pos:line="103" pos:column="33"/></name></expr>)<pos:position pos:line="103" pos:column="34"/></condition><then pos:line="103" pos:column="34">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="104" pos:column="5">postorder<pos:position pos:line="104" pos:column="14"/></name> <argument_list pos:line="104" pos:column="15">(<argument><expr><name pos:line="104" pos:column="16">elem<pos:position pos:line="104" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="22">mark_opt_subexp<pos:position pos:line="104" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="104" pos:column="39">(<pos:position pos:line="104" pos:column="40"/></operator><name pos:line="104" pos:column="40">void<pos:position pos:line="104" pos:column="44"/></name> <operator pos:line="104" pos:column="45">*<pos:position pos:line="104" pos:column="46"/></operator><operator pos:line="104" pos:column="46">)<pos:position pos:line="104" pos:column="47"/></operator> <operator pos:line="104" pos:column="48">(<pos:position pos:line="104" pos:column="49"/></operator><name pos:line="104" pos:column="49">long<pos:position pos:line="104" pos:column="53"/></name><operator pos:line="104" pos:column="53">)<pos:position pos:line="104" pos:column="54"/></operator> <name><name pos:line="104" pos:column="55">elem<pos:position pos:line="104" pos:column="59"/></name><operator pos:line="104" pos:column="59">-&gt;<pos:position pos:line="104" pos:column="64"/></operator><name pos:line="104" pos:column="61">token<pos:position pos:line="104" pos:column="66"/></name><operator pos:line="104" pos:column="66">.<pos:position pos:line="104" pos:column="67"/></operator><name pos:line="104" pos:column="67">opr<pos:position pos:line="104" pos:column="70"/></name><operator pos:line="104" pos:column="70">.<pos:position pos:line="104" pos:column="71"/></operator><name pos:line="104" pos:column="71">idx<pos:position pos:line="104" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="104" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="76"/></expr_stmt></block></then></if>

  <expr_stmt><expr><name pos:line="106" pos:column="3">tree<pos:position pos:line="106" pos:column="7"/></name> <operator pos:line="106" pos:column="8">=<pos:position pos:line="106" pos:column="9"/></operator> <call><name pos:line="106" pos:column="10">create_tree<pos:position pos:line="106" pos:column="21"/></name> <argument_list pos:line="106" pos:column="22">(<argument><expr><name pos:line="106" pos:column="23">dfa<pos:position pos:line="106" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="28">elem<pos:position pos:line="106" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="34">NULL<pos:position pos:line="106" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="106" pos:column="40">(<pos:position pos:line="106" pos:column="41"/></operator><ternary><condition><expr><name pos:line="106" pos:column="41">end<pos:position pos:line="106" pos:column="44"/></name> <operator pos:line="106" pos:column="45">==<pos:position pos:line="106" pos:column="47"/></operator> <operator pos:line="106" pos:column="48">-<pos:position pos:line="106" pos:column="49"/></operator><literal type="number" pos:line="106" pos:column="49">1<pos:position pos:line="106" pos:column="50"/></literal></expr> ?<pos:position pos:line="106" pos:column="52"/></condition><then pos:line="106" pos:column="52"> <expr><name pos:line="106" pos:column="53">OP_DUP_ASTERISK<pos:position pos:line="106" pos:column="68"/></name></expr> <pos:position pos:line="106" pos:column="69"/></then><else pos:line="106" pos:column="69">: <expr><name pos:line="106" pos:column="71">OP_ALT<pos:position pos:line="106" pos:column="77"/></name></expr></else></ternary><operator pos:line="106" pos:column="77">)<pos:position pos:line="106" pos:column="78"/></operator></expr></argument>)<pos:position pos:line="106" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="80"/></expr_stmt>
  <if pos:line="107" pos:column="3">if <condition pos:line="107" pos:column="6">(<expr><call><name pos:line="107" pos:column="7">BE<pos:position pos:line="107" pos:column="9"/></name> <argument_list pos:line="107" pos:column="10">(<argument><expr><name pos:line="107" pos:column="11">tree<pos:position pos:line="107" pos:column="15"/></name> <operator pos:line="107" pos:column="16">==<pos:position pos:line="107" pos:column="18"/></operator> <name pos:line="107" pos:column="19">NULL<pos:position pos:line="107" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="107" pos:column="25">0<pos:position pos:line="107" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="107" pos:column="28"/></condition><then pos:line="107" pos:column="28">
    <block type="pseudo"><goto pos:line="108" pos:column="5">goto <name pos:line="108" pos:column="10">parse_dup_op_espace<pos:position pos:line="108" pos:column="29"/></name>;<pos:position pos:line="108" pos:column="30"/></goto></block></then></if>

  <comment type="block" pos:line="110" pos:column="3">/* This loop is actually executed only when end != -1,
     to rewrite &lt;re&gt;{0,n} as (&lt;re&gt;(&lt;re&gt;...&lt;re&gt;?)?)?...  We have
     already created the start+1-th copy.  */</comment>
  <for pos:line="113" pos:column="3">for <control pos:line="113" pos:column="7">(<init><expr><name pos:line="113" pos:column="8">i<pos:position pos:line="113" pos:column="9"/></name> <operator pos:line="113" pos:column="10">=<pos:position pos:line="113" pos:column="11"/></operator> <name pos:line="113" pos:column="12">start<pos:position pos:line="113" pos:column="17"/></name> <operator pos:line="113" pos:column="18">+<pos:position pos:line="113" pos:column="19"/></operator> <literal type="number" pos:line="113" pos:column="20">2<pos:position pos:line="113" pos:column="21"/></literal></expr>;<pos:position pos:line="113" pos:column="22"/></init> <condition><expr><name pos:line="113" pos:column="23">i<pos:position pos:line="113" pos:column="24"/></name> <operator pos:line="113" pos:column="25">&lt;=<pos:position pos:line="113" pos:column="30"/></operator> <name pos:line="113" pos:column="28">end<pos:position pos:line="113" pos:column="31"/></name></expr>;<pos:position pos:line="113" pos:column="32"/></condition> <incr><expr><operator pos:line="113" pos:column="33">++<pos:position pos:line="113" pos:column="35"/></operator><name pos:line="113" pos:column="35">i<pos:position pos:line="113" pos:column="36"/></name></expr></incr>)<pos:position pos:line="113" pos:column="37"/></control>
    <block pos:line="114" pos:column="5">{
      <expr_stmt><expr><name pos:line="115" pos:column="7">elem<pos:position pos:line="115" pos:column="11"/></name> <operator pos:line="115" pos:column="12">=<pos:position pos:line="115" pos:column="13"/></operator> <call><name pos:line="115" pos:column="14">duplicate_tree<pos:position pos:line="115" pos:column="28"/></name> <argument_list pos:line="115" pos:column="29">(<argument><expr><name pos:line="115" pos:column="30">elem<pos:position pos:line="115" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="36">dfa<pos:position pos:line="115" pos:column="39"/></name></expr></argument>)<pos:position pos:line="115" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><name pos:line="116" pos:column="7">tree<pos:position pos:line="116" pos:column="11"/></name> <operator pos:line="116" pos:column="12">=<pos:position pos:line="116" pos:column="13"/></operator> <call><name pos:line="116" pos:column="14">create_tree<pos:position pos:line="116" pos:column="25"/></name> <argument_list pos:line="116" pos:column="26">(<argument><expr><name pos:line="116" pos:column="27">dfa<pos:position pos:line="116" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="32">tree<pos:position pos:line="116" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="38">elem<pos:position pos:line="116" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="44">CONCAT<pos:position pos:line="116" pos:column="50"/></name></expr></argument>)<pos:position pos:line="116" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="52"/></expr_stmt>
      <if pos:line="117" pos:column="7">if <condition pos:line="117" pos:column="10">(<expr><call><name pos:line="117" pos:column="11">BE<pos:position pos:line="117" pos:column="13"/></name> <argument_list pos:line="117" pos:column="14">(<argument><expr><name pos:line="117" pos:column="15">elem<pos:position pos:line="117" pos:column="19"/></name> <operator pos:line="117" pos:column="20">==<pos:position pos:line="117" pos:column="22"/></operator> <name pos:line="117" pos:column="23">NULL<pos:position pos:line="117" pos:column="27"/></name> <operator pos:line="117" pos:column="28">||<pos:position pos:line="117" pos:column="30"/></operator> <name pos:line="117" pos:column="31">tree<pos:position pos:line="117" pos:column="35"/></name> <operator pos:line="117" pos:column="36">==<pos:position pos:line="117" pos:column="38"/></operator> <name pos:line="117" pos:column="39">NULL<pos:position pos:line="117" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="117" pos:column="45">0<pos:position pos:line="117" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="117" pos:column="48"/></condition><then pos:line="117" pos:column="48">
	<block type="pseudo"><goto pos:line="118" pos:column="9">goto <name pos:line="118" pos:column="14">parse_dup_op_espace<pos:position pos:line="118" pos:column="33"/></name>;<pos:position pos:line="118" pos:column="34"/></goto></block></then></if>

      <expr_stmt><expr><name pos:line="120" pos:column="7">tree<pos:position pos:line="120" pos:column="11"/></name> <operator pos:line="120" pos:column="12">=<pos:position pos:line="120" pos:column="13"/></operator> <call><name pos:line="120" pos:column="14">create_tree<pos:position pos:line="120" pos:column="25"/></name> <argument_list pos:line="120" pos:column="26">(<argument><expr><name pos:line="120" pos:column="27">dfa<pos:position pos:line="120" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="32">tree<pos:position pos:line="120" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="38">NULL<pos:position pos:line="120" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="44">OP_ALT<pos:position pos:line="120" pos:column="50"/></name></expr></argument>)<pos:position pos:line="120" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="52"/></expr_stmt>
      <if pos:line="121" pos:column="7">if <condition pos:line="121" pos:column="10">(<expr><call><name pos:line="121" pos:column="11">BE<pos:position pos:line="121" pos:column="13"/></name> <argument_list pos:line="121" pos:column="14">(<argument><expr><name pos:line="121" pos:column="15">tree<pos:position pos:line="121" pos:column="19"/></name> <operator pos:line="121" pos:column="20">==<pos:position pos:line="121" pos:column="22"/></operator> <name pos:line="121" pos:column="23">NULL<pos:position pos:line="121" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="121" pos:column="29">0<pos:position pos:line="121" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="121" pos:column="32"/></condition><then pos:line="121" pos:column="32">
	<block type="pseudo"><goto pos:line="122" pos:column="9">goto <name pos:line="122" pos:column="14">parse_dup_op_espace<pos:position pos:line="122" pos:column="33"/></name>;<pos:position pos:line="122" pos:column="34"/></goto></block></then></if>
    }<pos:position pos:line="123" pos:column="6"/></block></for>

  <if pos:line="125" pos:column="3">if <condition pos:line="125" pos:column="6">(<expr><name pos:line="125" pos:column="7">old_tree<pos:position pos:line="125" pos:column="15"/></name></expr>)<pos:position pos:line="125" pos:column="16"/></condition><then pos:line="125" pos:column="16">
    <block type="pseudo"><expr_stmt><expr><name pos:line="126" pos:column="5">tree<pos:position pos:line="126" pos:column="9"/></name> <operator pos:line="126" pos:column="10">=<pos:position pos:line="126" pos:column="11"/></operator> <call><name pos:line="126" pos:column="12">create_tree<pos:position pos:line="126" pos:column="23"/></name> <argument_list pos:line="126" pos:column="24">(<argument><expr><name pos:line="126" pos:column="25">dfa<pos:position pos:line="126" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="30">old_tree<pos:position pos:line="126" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="40">tree<pos:position pos:line="126" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="46">CONCAT<pos:position pos:line="126" pos:column="52"/></name></expr></argument>)<pos:position pos:line="126" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="54"/></expr_stmt></block></then></if>

  <return pos:line="128" pos:column="3">return <expr><name pos:line="128" pos:column="10">tree<pos:position pos:line="128" pos:column="14"/></name></expr>;<pos:position pos:line="128" pos:column="15"/></return>

 <label><name pos:line="130" pos:column="2">parse_dup_op_espace<pos:position pos:line="130" pos:column="21"/></name>:<pos:position pos:line="130" pos:column="22"/></label>
  <expr_stmt><expr><operator pos:line="131" pos:column="3">*<pos:position pos:line="131" pos:column="4"/></operator><name pos:line="131" pos:column="4">err<pos:position pos:line="131" pos:column="7"/></name> <operator pos:line="131" pos:column="8">=<pos:position pos:line="131" pos:column="9"/></operator> <name pos:line="131" pos:column="10">REG_ESPACE<pos:position pos:line="131" pos:column="20"/></name></expr>;<pos:position pos:line="131" pos:column="21"/></expr_stmt>
  <return pos:line="132" pos:column="3">return <expr><name pos:line="132" pos:column="10">NULL<pos:position pos:line="132" pos:column="14"/></name></expr>;<pos:position pos:line="132" pos:column="15"/></return>
}<pos:position pos:line="133" pos:column="2"/></block></function></unit>
