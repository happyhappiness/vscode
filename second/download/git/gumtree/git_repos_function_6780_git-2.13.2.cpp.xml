<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6780_git-2.13.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name><modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type> <name pos:line="1" pos:column="14">mmap_alloc<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">mstate<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">m<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">size_t<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">nb<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list> <block pos:line="1" pos:column="46">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">size_t<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">mmsize<pos:position pos:line="2" pos:column="16"/></name> <init pos:line="2" pos:column="17">= <expr><call><name pos:line="2" pos:column="19">mmap_align<pos:position pos:line="2" pos:column="29"/></name><argument_list pos:line="2" pos:column="29">(<argument><expr><name pos:line="2" pos:column="30">nb<pos:position pos:line="2" pos:column="32"/></name> <operator pos:line="2" pos:column="33">+<pos:position pos:line="2" pos:column="34"/></operator> <name pos:line="2" pos:column="35">SIX_SIZE_T_SIZES<pos:position pos:line="2" pos:column="51"/></name> <operator pos:line="2" pos:column="52">+<pos:position pos:line="2" pos:column="53"/></operator> <name pos:line="2" pos:column="54">CHUNK_ALIGN_MASK<pos:position pos:line="2" pos:column="70"/></name></expr></argument>)<pos:position pos:line="2" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="2" pos:column="72"/></decl_stmt>
  <if pos:line="3" pos:column="3">if <condition pos:line="3" pos:column="6">(<expr><name pos:line="3" pos:column="7">mmsize<pos:position pos:line="3" pos:column="13"/></name> <operator pos:line="3" pos:column="14">&gt;<pos:position pos:line="3" pos:column="18"/></operator> <name pos:line="3" pos:column="16">nb<pos:position pos:line="3" pos:column="18"/></name></expr>)<pos:position pos:line="3" pos:column="19"/></condition><then pos:line="3" pos:column="19"> <block pos:line="3" pos:column="20">{     <comment type="block" pos:line="3" pos:column="26">/* Check for wrap around 0 */</comment>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name><modifier pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></modifier></type> <name pos:line="4" pos:column="11">mm<pos:position pos:line="4" pos:column="13"/></name> <init pos:line="4" pos:column="14">= <expr><operator pos:line="4" pos:column="16">(<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">char<pos:position pos:line="4" pos:column="21"/></name><operator pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></operator><operator pos:line="4" pos:column="22">)<pos:position pos:line="4" pos:column="23"/></operator><operator pos:line="4" pos:column="23">(<pos:position pos:line="4" pos:column="24"/></operator><call><name pos:line="4" pos:column="24">CALL_DIRECT_MMAP<pos:position pos:line="4" pos:column="40"/></name><argument_list pos:line="4" pos:column="40">(<argument><expr><name pos:line="4" pos:column="41">mmsize<pos:position pos:line="4" pos:column="47"/></name></expr></argument>)<pos:position pos:line="4" pos:column="48"/></argument_list></call><operator pos:line="4" pos:column="48">)<pos:position pos:line="4" pos:column="49"/></operator></expr></init></decl>;<pos:position pos:line="4" pos:column="50"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">mm<pos:position pos:line="5" pos:column="11"/></name> <operator pos:line="5" pos:column="12">!=<pos:position pos:line="5" pos:column="14"/></operator> <name pos:line="5" pos:column="15">CMFAIL<pos:position pos:line="5" pos:column="21"/></name></expr>)<pos:position pos:line="5" pos:column="22"/></condition><then pos:line="5" pos:column="22"> <block pos:line="5" pos:column="23">{
      <decl_stmt><decl><type><name pos:line="6" pos:column="7">size_t<pos:position pos:line="6" pos:column="13"/></name></type> <name pos:line="6" pos:column="14">offset<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><call><name pos:line="6" pos:column="23">align_offset<pos:position pos:line="6" pos:column="35"/></name><argument_list pos:line="6" pos:column="35">(<argument><expr><call><name pos:line="6" pos:column="36">chunk2mem<pos:position pos:line="6" pos:column="45"/></name><argument_list pos:line="6" pos:column="45">(<argument><expr><name pos:line="6" pos:column="46">mm<pos:position pos:line="6" pos:column="48"/></name></expr></argument>)<pos:position pos:line="6" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="51"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="7" pos:column="7">size_t<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">psize<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><name pos:line="7" pos:column="22">mmsize<pos:position pos:line="7" pos:column="28"/></name> <operator pos:line="7" pos:column="29">-<pos:position pos:line="7" pos:column="30"/></operator> <name pos:line="7" pos:column="31">offset<pos:position pos:line="7" pos:column="37"/></name> <operator pos:line="7" pos:column="38">-<pos:position pos:line="7" pos:column="39"/></operator> <name pos:line="7" pos:column="40">MMAP_FOOT_PAD<pos:position pos:line="7" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="54"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="8" pos:column="7">mchunkptr<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">p<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><call pos:line="8" pos:column="21">(<name pos:line="8" pos:column="22">mchunkptr<pos:position pos:line="8" pos:column="31"/></name>)<argument_list pos:line="8" pos:column="32">(<argument><expr><name pos:line="8" pos:column="33">mm<pos:position pos:line="8" pos:column="35"/></name> <operator pos:line="8" pos:column="36">+<pos:position pos:line="8" pos:column="37"/></operator> <name pos:line="8" pos:column="38">offset<pos:position pos:line="8" pos:column="44"/></name></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="46"/></decl_stmt>
      <expr_stmt><expr><name><name pos:line="9" pos:column="7">p<pos:position pos:line="9" pos:column="8"/></name><operator pos:line="9" pos:column="8">-&gt;<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="10">prev_foot<pos:position pos:line="9" pos:column="19"/></name></name> <operator pos:line="9" pos:column="20">=<pos:position pos:line="9" pos:column="21"/></operator> <name pos:line="9" pos:column="22">offset<pos:position pos:line="9" pos:column="28"/></name> <operator pos:line="9" pos:column="29">|<pos:position pos:line="9" pos:column="30"/></operator> <name pos:line="9" pos:column="31">IS_MMAPPED_BIT<pos:position pos:line="9" pos:column="45"/></name></expr>;<pos:position pos:line="9" pos:column="46"/></expr_stmt>
      <expr_stmt><expr><name><operator pos:line="10" pos:column="7">(<pos:position pos:line="10" pos:column="8"/></operator><name pos:line="10" pos:column="8">p<pos:position pos:line="10" pos:column="9"/></name><operator pos:line="10" pos:column="9">)<pos:position pos:line="10" pos:column="10"/></operator><operator pos:line="10" pos:column="10">-&gt;<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="12">head<pos:position pos:line="10" pos:column="16"/></name></name> <operator pos:line="10" pos:column="17">=<pos:position pos:line="10" pos:column="18"/></operator> <operator pos:line="10" pos:column="19">(<pos:position pos:line="10" pos:column="20"/></operator><name pos:line="10" pos:column="20">psize<pos:position pos:line="10" pos:column="25"/></name><operator pos:line="10" pos:column="25">|<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="26">CINUSE_BIT<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">)<pos:position pos:line="10" pos:column="37"/></operator></expr>;<pos:position pos:line="10" pos:column="38"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="11" pos:column="7">mark_inuse_foot<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">m<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="26">p<pos:position pos:line="11" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="29">psize<pos:position pos:line="11" pos:column="34"/></name></expr></argument>)<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="12" pos:column="7">chunk_plus_offset<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">(<argument><expr><name pos:line="12" pos:column="25">p<pos:position pos:line="12" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="28">psize<pos:position pos:line="12" pos:column="33"/></name></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></call><operator pos:line="12" pos:column="34">-&gt;<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="36">head<pos:position pos:line="12" pos:column="40"/></name> <operator pos:line="12" pos:column="41">=<pos:position pos:line="12" pos:column="42"/></operator> <name pos:line="12" pos:column="43">FENCEPOST_HEAD<pos:position pos:line="12" pos:column="57"/></name></expr>;<pos:position pos:line="12" pos:column="58"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="13" pos:column="7">chunk_plus_offset<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">p<pos:position pos:line="13" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="28">psize<pos:position pos:line="13" pos:column="33"/></name><operator pos:line="13" pos:column="33">+<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="34">SIZE_T_SIZE<pos:position pos:line="13" pos:column="45"/></name></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call><operator pos:line="13" pos:column="46">-&gt;<pos:position pos:line="13" pos:column="51"/></operator><name pos:line="13" pos:column="48">head<pos:position pos:line="13" pos:column="52"/></name> <operator pos:line="13" pos:column="53">=<pos:position pos:line="13" pos:column="54"/></operator> <literal type="number" pos:line="13" pos:column="55">0<pos:position pos:line="13" pos:column="56"/></literal></expr>;<pos:position pos:line="13" pos:column="57"/></expr_stmt>

      <if pos:line="15" pos:column="7">if <condition pos:line="15" pos:column="10">(<expr><name pos:line="15" pos:column="11">mm<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">&lt;<pos:position pos:line="15" pos:column="18"/></operator> <name><name pos:line="15" pos:column="16">m<pos:position pos:line="15" pos:column="17"/></name><operator pos:line="15" pos:column="17">-&gt;<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="19">least_addr<pos:position pos:line="15" pos:column="29"/></name></name></expr>)<pos:position pos:line="15" pos:column="30"/></condition><then pos:line="15" pos:column="30">
	<block type="pseudo"><expr_stmt><expr><name><name pos:line="16" pos:column="9">m<pos:position pos:line="16" pos:column="10"/></name><operator pos:line="16" pos:column="10">-&gt;<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="12">least_addr<pos:position pos:line="16" pos:column="22"/></name></name> <operator pos:line="16" pos:column="23">=<pos:position pos:line="16" pos:column="24"/></operator> <name pos:line="16" pos:column="25">mm<pos:position pos:line="16" pos:column="27"/></name></expr>;<pos:position pos:line="16" pos:column="28"/></expr_stmt></block></then></if>
      <if pos:line="17" pos:column="7">if <condition pos:line="17" pos:column="10">(<expr><operator pos:line="17" pos:column="11">(<pos:position pos:line="17" pos:column="12"/></operator><name><name pos:line="17" pos:column="12">m<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">-&gt;<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="15">footprint<pos:position pos:line="17" pos:column="24"/></name></name> <operator pos:line="17" pos:column="25">+=<pos:position pos:line="17" pos:column="27"/></operator> <name pos:line="17" pos:column="28">mmsize<pos:position pos:line="17" pos:column="34"/></name><operator pos:line="17" pos:column="34">)<pos:position pos:line="17" pos:column="35"/></operator> <operator pos:line="17" pos:column="36">&gt;<pos:position pos:line="17" pos:column="40"/></operator> <name><name pos:line="17" pos:column="38">m<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">-&gt;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="41">max_footprint<pos:position pos:line="17" pos:column="54"/></name></name></expr>)<pos:position pos:line="17" pos:column="55"/></condition><then pos:line="17" pos:column="55">
	<block type="pseudo"><expr_stmt><expr><name><name pos:line="18" pos:column="9">m<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">-&gt;<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="12">max_footprint<pos:position pos:line="18" pos:column="25"/></name></name> <operator pos:line="18" pos:column="26">=<pos:position pos:line="18" pos:column="27"/></operator> <name><name pos:line="18" pos:column="28">m<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">-&gt;<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="31">footprint<pos:position pos:line="18" pos:column="40"/></name></name></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt></block></then></if>
      <expr_stmt><expr><call><name pos:line="19" pos:column="7">assert<pos:position pos:line="19" pos:column="13"/></name><argument_list pos:line="19" pos:column="13">(<argument><expr><call><name pos:line="19" pos:column="14">is_aligned<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><call><name pos:line="19" pos:column="25">chunk2mem<pos:position pos:line="19" pos:column="34"/></name><argument_list pos:line="19" pos:column="34">(<argument><expr><name pos:line="19" pos:column="35">p<pos:position pos:line="19" pos:column="36"/></name></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">check_mmapped_chunk<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">(<argument><expr><name pos:line="20" pos:column="27">m<pos:position pos:line="20" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="30">p<pos:position pos:line="20" pos:column="31"/></name></expr></argument>)<pos:position pos:line="20" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt>
      <return pos:line="21" pos:column="7">return <expr><call><name pos:line="21" pos:column="14">chunk2mem<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name pos:line="21" pos:column="24">p<pos:position pos:line="21" pos:column="25"/></name></expr></argument>)<pos:position pos:line="21" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="27"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
  }<pos:position pos:line="23" pos:column="4"/></block></then></if>
  <return pos:line="24" pos:column="3">return <expr><literal type="number" pos:line="24" pos:column="10">0<pos:position pos:line="24" pos:column="11"/></literal></expr>;<pos:position pos:line="24" pos:column="12"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
