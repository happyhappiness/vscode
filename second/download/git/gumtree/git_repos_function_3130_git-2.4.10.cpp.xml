<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3130_git-2.4.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">extended_entry_extract<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">tree_desc_x<pos:position pos:line="1" pos:column="54"/></name></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">t<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
				   <parameter><decl><type><name><name pos:line="2" pos:column="36">struct<pos:position pos:line="2" pos:column="42"/></name> <name pos:line="2" pos:column="43">name_entry<pos:position pos:line="2" pos:column="53"/></name></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">a<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>,
				   <parameter><decl><type><specifier pos:line="3" pos:column="36">const<pos:position pos:line="3" pos:column="41"/></specifier> <name pos:line="3" pos:column="42">char<pos:position pos:line="3" pos:column="46"/></name> <modifier pos:line="3" pos:column="47">*<pos:position pos:line="3" pos:column="48"/></modifier></type><name pos:line="3" pos:column="48">first<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>,
				   <parameter><decl><type><name pos:line="4" pos:column="36">int<pos:position pos:line="4" pos:column="39"/></name></type> <name pos:line="4" pos:column="40">first_len<pos:position pos:line="4" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="50"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">path<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">len<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">tree_desc<pos:position pos:line="8" pos:column="25"/></name></name></type> <name pos:line="8" pos:column="26">probe<pos:position pos:line="8" pos:column="31"/></name></decl>;<pos:position pos:line="8" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">tree_desc_skip<pos:position pos:line="9" pos:column="30"/></name></name> <modifier pos:line="9" pos:column="31">*<pos:position pos:line="9" pos:column="32"/></modifier></type><name pos:line="9" pos:column="32">skip<pos:position pos:line="9" pos:column="36"/></name></decl>;<pos:position pos:line="9" pos:column="37"/></decl_stmt>

	<comment type="block" pos:line="11" pos:column="9">/*
	 * Extract the first entry from the tree_desc, but skip the
	 * ones that we already returned in earlier rounds.
	 */</comment>
	<while pos:line="15" pos:column="9">while <condition pos:line="15" pos:column="15">(<expr><literal type="number" pos:line="15" pos:column="16">1<pos:position pos:line="15" pos:column="17"/></literal></expr>)<pos:position pos:line="15" pos:column="18"/></condition> <block pos:line="15" pos:column="19">{
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><operator pos:line="16" pos:column="21">!<pos:position pos:line="16" pos:column="22"/></operator><name><name pos:line="16" pos:column="22">t<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">-&gt;<pos:position pos:line="16" pos:column="28"/></operator><name pos:line="16" pos:column="25">d<pos:position pos:line="16" pos:column="26"/></name><operator pos:line="16" pos:column="26">.<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="27">size<pos:position pos:line="16" pos:column="31"/></name></name></expr>)<pos:position pos:line="16" pos:column="32"/></condition><then pos:line="16" pos:column="32"> <block pos:line="16" pos:column="33">{
			<expr_stmt><expr><call><name pos:line="17" pos:column="25">entry_clear<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><name pos:line="17" pos:column="37">a<pos:position pos:line="17" pos:column="38"/></name></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="40"/></expr_stmt>
			<break pos:line="18" pos:column="25">break;<pos:position pos:line="18" pos:column="31"/></break> <comment type="block" pos:line="18" pos:column="32">/* not found */</comment>
		}<pos:position pos:line="19" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">entry_extract<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><operator pos:line="20" pos:column="31">&amp;<pos:position pos:line="20" pos:column="36"/></operator><name><name pos:line="20" pos:column="32">t<pos:position pos:line="20" pos:column="33"/></name><operator pos:line="20" pos:column="33">-&gt;<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="35">d<pos:position pos:line="20" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="38">a<pos:position pos:line="20" pos:column="39"/></name></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="41"/></expr_stmt>
		<for pos:line="21" pos:column="17">for <control pos:line="21" pos:column="21">(<init><expr><name pos:line="21" pos:column="22">skip<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">=<pos:position pos:line="21" pos:column="28"/></operator> <name><name pos:line="21" pos:column="29">t<pos:position pos:line="21" pos:column="30"/></name><operator pos:line="21" pos:column="30">-&gt;<pos:position pos:line="21" pos:column="35"/></operator><name pos:line="21" pos:column="32">skip<pos:position pos:line="21" pos:column="36"/></name></name></expr>;<pos:position pos:line="21" pos:column="37"/></init> <condition><expr><name pos:line="21" pos:column="38">skip<pos:position pos:line="21" pos:column="42"/></name></expr>;<pos:position pos:line="21" pos:column="43"/></condition> <incr><expr><name pos:line="21" pos:column="44">skip<pos:position pos:line="21" pos:column="48"/></name> <operator pos:line="21" pos:column="49">=<pos:position pos:line="21" pos:column="50"/></operator> <name><name pos:line="21" pos:column="51">skip<pos:position pos:line="21" pos:column="55"/></name><operator pos:line="21" pos:column="55">-&gt;<pos:position pos:line="21" pos:column="60"/></operator><name pos:line="21" pos:column="57">prev<pos:position pos:line="21" pos:column="61"/></name></name></expr></incr>)<pos:position pos:line="21" pos:column="62"/></control>
			<block type="pseudo"><if pos:line="22" pos:column="25">if <condition pos:line="22" pos:column="28">(<expr><name><name pos:line="22" pos:column="29">a<pos:position pos:line="22" pos:column="30"/></name><operator pos:line="22" pos:column="30">-&gt;<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="32">path<pos:position pos:line="22" pos:column="36"/></name></name> <operator pos:line="22" pos:column="37">==<pos:position pos:line="22" pos:column="39"/></operator> <name><name pos:line="22" pos:column="40">skip<pos:position pos:line="22" pos:column="44"/></name><operator pos:line="22" pos:column="44">-&gt;<pos:position pos:line="22" pos:column="49"/></operator><name pos:line="22" pos:column="46">ptr<pos:position pos:line="22" pos:column="49"/></name></name></expr>)<pos:position pos:line="22" pos:column="50"/></condition><then pos:line="22" pos:column="50">
				<block type="pseudo"><break pos:line="23" pos:column="33">break;<pos:position pos:line="23" pos:column="39"/></break></block></then></if></block></for> <comment type="block" pos:line="23" pos:column="40">/* found */</comment>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><operator pos:line="24" pos:column="21">!<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="22">skip<pos:position pos:line="24" pos:column="26"/></name></expr>)<pos:position pos:line="24" pos:column="27"/></condition><then pos:line="24" pos:column="27">
			<block type="pseudo"><break pos:line="25" pos:column="25">break;<pos:position pos:line="25" pos:column="31"/></break></block></then></if>
		<comment type="block" pos:line="26" pos:column="17">/* We have processed this entry already. */</comment>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">update_tree_entry<pos:position pos:line="27" pos:column="34"/></name><argument_list pos:line="27" pos:column="34">(<argument><expr><operator pos:line="27" pos:column="35">&amp;<pos:position pos:line="27" pos:column="40"/></operator><name><name pos:line="27" pos:column="36">t<pos:position pos:line="27" pos:column="37"/></name><operator pos:line="27" pos:column="37">-&gt;<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="39">d<pos:position pos:line="27" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></while>

	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><operator pos:line="30" pos:column="13">!<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">first<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">||<pos:position pos:line="30" pos:column="22"/></operator> <operator pos:line="30" pos:column="23">!<pos:position pos:line="30" pos:column="24"/></operator><name><name pos:line="30" pos:column="24">a<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">-&gt;<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="27">path<pos:position pos:line="30" pos:column="31"/></name></name></expr>)<pos:position pos:line="30" pos:column="32"/></condition><then pos:line="30" pos:column="32">
		<block type="pseudo"><return pos:line="31" pos:column="17">return;<pos:position pos:line="31" pos:column="24"/></return></block></then></if>

	<comment type="block" pos:line="33" pos:column="9">/*
	 * The caller wants "first" from this tree, or nothing.
	 */</comment>
	<expr_stmt><expr><name pos:line="36" pos:column="9">path<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">=<pos:position pos:line="36" pos:column="15"/></operator> <name><name pos:line="36" pos:column="16">a<pos:position pos:line="36" pos:column="17"/></name><operator pos:line="36" pos:column="17">-&gt;<pos:position pos:line="36" pos:column="22"/></operator><name pos:line="36" pos:column="19">path<pos:position pos:line="36" pos:column="23"/></name></name></expr>;<pos:position pos:line="36" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name pos:line="37" pos:column="9">len<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <call><name pos:line="37" pos:column="15">tree_entry_len<pos:position pos:line="37" pos:column="29"/></name><argument_list pos:line="37" pos:column="29">(<argument><expr><name pos:line="37" pos:column="30">a<pos:position pos:line="37" pos:column="31"/></name></expr></argument>)<pos:position pos:line="37" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="33"/></expr_stmt>
	<switch pos:line="38" pos:column="9">switch <condition pos:line="38" pos:column="16">(<expr><call><name pos:line="38" pos:column="17">check_entry_match<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">(<argument><expr><name pos:line="38" pos:column="35">first<pos:position pos:line="38" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="42">first_len<pos:position pos:line="38" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="53">path<pos:position pos:line="38" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="59">len<pos:position pos:line="38" pos:column="62"/></name></expr></argument>)<pos:position pos:line="38" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="64"/></condition> <block pos:line="38" pos:column="65">{
	<case pos:line="39" pos:column="9">case <expr><operator pos:line="39" pos:column="14">-<pos:position pos:line="39" pos:column="15"/></operator><literal type="number" pos:line="39" pos:column="15">1<pos:position pos:line="39" pos:column="16"/></literal></expr>:<pos:position pos:line="39" pos:column="17"/></case>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">entry_clear<pos:position pos:line="40" pos:column="28"/></name><argument_list pos:line="40" pos:column="28">(<argument><expr><name pos:line="40" pos:column="29">a<pos:position pos:line="40" pos:column="30"/></name></expr></argument>)<pos:position pos:line="40" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="32"/></expr_stmt>
	<case pos:line="41" pos:column="9">case <expr><literal type="number" pos:line="41" pos:column="14">0<pos:position pos:line="41" pos:column="15"/></literal></expr>:<pos:position pos:line="41" pos:column="16"/></case>
		<return pos:line="42" pos:column="17">return;<pos:position pos:line="42" pos:column="24"/></return>
	<default pos:line="43" pos:column="9">default:<pos:position pos:line="43" pos:column="17"/></default>
		<break pos:line="44" pos:column="17">break;<pos:position pos:line="44" pos:column="23"/></break>
	}<pos:position pos:line="45" pos:column="10"/></block></switch>

	<comment type="block" pos:line="47" pos:column="9">/*
	 * We need to look-ahead -- we suspect that a subtree whose
	 * name is "first" may be hiding behind the current entry "path".
	 */</comment>
	<expr_stmt><expr><name pos:line="51" pos:column="9">probe<pos:position pos:line="51" pos:column="14"/></name> <operator pos:line="51" pos:column="15">=<pos:position pos:line="51" pos:column="16"/></operator> <name><name pos:line="51" pos:column="17">t<pos:position pos:line="51" pos:column="18"/></name><operator pos:line="51" pos:column="18">-&gt;<pos:position pos:line="51" pos:column="23"/></operator><name pos:line="51" pos:column="20">d<pos:position pos:line="51" pos:column="21"/></name></name></expr>;<pos:position pos:line="51" pos:column="22"/></expr_stmt>
	<while pos:line="52" pos:column="9">while <condition pos:line="52" pos:column="15">(<expr><name><name pos:line="52" pos:column="16">probe<pos:position pos:line="52" pos:column="21"/></name><operator pos:line="52" pos:column="21">.<pos:position pos:line="52" pos:column="22"/></operator><name pos:line="52" pos:column="22">size<pos:position pos:line="52" pos:column="26"/></name></name></expr>)<pos:position pos:line="52" pos:column="27"/></condition> <block pos:line="52" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">entry_extract<pos:position pos:line="53" pos:column="30"/></name><argument_list pos:line="53" pos:column="30">(<argument><expr><operator pos:line="53" pos:column="31">&amp;<pos:position pos:line="53" pos:column="36"/></operator><name pos:line="53" pos:column="32">probe<pos:position pos:line="53" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="39">a<pos:position pos:line="53" pos:column="40"/></name></expr></argument>)<pos:position pos:line="53" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name pos:line="54" pos:column="17">path<pos:position pos:line="54" pos:column="21"/></name> <operator pos:line="54" pos:column="22">=<pos:position pos:line="54" pos:column="23"/></operator> <name><name pos:line="54" pos:column="24">a<pos:position pos:line="54" pos:column="25"/></name><operator pos:line="54" pos:column="25">-&gt;<pos:position pos:line="54" pos:column="30"/></operator><name pos:line="54" pos:column="27">path<pos:position pos:line="54" pos:column="31"/></name></name></expr>;<pos:position pos:line="54" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name pos:line="55" pos:column="17">len<pos:position pos:line="55" pos:column="20"/></name> <operator pos:line="55" pos:column="21">=<pos:position pos:line="55" pos:column="22"/></operator> <call><name pos:line="55" pos:column="23">tree_entry_len<pos:position pos:line="55" pos:column="37"/></name><argument_list pos:line="55" pos:column="37">(<argument><expr><name pos:line="55" pos:column="38">a<pos:position pos:line="55" pos:column="39"/></name></expr></argument>)<pos:position pos:line="55" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="41"/></expr_stmt>
		<switch pos:line="56" pos:column="17">switch <condition pos:line="56" pos:column="24">(<expr><call><name pos:line="56" pos:column="25">check_entry_match<pos:position pos:line="56" pos:column="42"/></name><argument_list pos:line="56" pos:column="42">(<argument><expr><name pos:line="56" pos:column="43">first<pos:position pos:line="56" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="50">first_len<pos:position pos:line="56" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="61">path<pos:position pos:line="56" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="67">len<pos:position pos:line="56" pos:column="70"/></name></expr></argument>)<pos:position pos:line="56" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="72"/></condition> <block pos:line="56" pos:column="73">{
		<case pos:line="57" pos:column="17">case <expr><operator pos:line="57" pos:column="22">-<pos:position pos:line="57" pos:column="23"/></operator><literal type="number" pos:line="57" pos:column="23">1<pos:position pos:line="57" pos:column="24"/></literal></expr>:<pos:position pos:line="57" pos:column="25"/></case>
			<expr_stmt><expr><call><name pos:line="58" pos:column="25">entry_clear<pos:position pos:line="58" pos:column="36"/></name><argument_list pos:line="58" pos:column="36">(<argument><expr><name pos:line="58" pos:column="37">a<pos:position pos:line="58" pos:column="38"/></name></expr></argument>)<pos:position pos:line="58" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="40"/></expr_stmt>
		<case pos:line="59" pos:column="17">case <expr><literal type="number" pos:line="59" pos:column="22">0<pos:position pos:line="59" pos:column="23"/></literal></expr>:<pos:position pos:line="59" pos:column="24"/></case>
			<return pos:line="60" pos:column="25">return;<pos:position pos:line="60" pos:column="32"/></return>
		<default pos:line="61" pos:column="17">default:<pos:position pos:line="61" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">update_tree_entry<pos:position pos:line="62" pos:column="42"/></name><argument_list pos:line="62" pos:column="42">(<argument><expr><operator pos:line="62" pos:column="43">&amp;<pos:position pos:line="62" pos:column="48"/></operator><name pos:line="62" pos:column="44">probe<pos:position pos:line="62" pos:column="49"/></name></expr></argument>)<pos:position pos:line="62" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="51"/></expr_stmt>
			<break pos:line="63" pos:column="25">break;<pos:position pos:line="63" pos:column="31"/></break>
		}<pos:position pos:line="64" pos:column="18"/></block></switch>
		<comment type="block" pos:line="65" pos:column="17">/* keep looking */</comment>
	}<pos:position pos:line="66" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="67" pos:column="9">entry_clear<pos:position pos:line="67" pos:column="20"/></name><argument_list pos:line="67" pos:column="20">(<argument><expr><name pos:line="67" pos:column="21">a<pos:position pos:line="67" pos:column="22"/></name></expr></argument>)<pos:position pos:line="67" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="24"/></expr_stmt>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
