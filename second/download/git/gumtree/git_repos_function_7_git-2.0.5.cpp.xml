<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_7_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">check_ref<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">name<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">int<pos:position pos:line="1" pos:column="43"/></name></type> <name pos:line="1" pos:column="44">len<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">unsigned<pos:position pos:line="1" pos:column="57"/></name> <name pos:line="1" pos:column="58">int<pos:position pos:line="1" pos:column="61"/></name></type> <name pos:line="1" pos:column="62">flags<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><operator pos:line="3" pos:column="13">!<pos:position pos:line="3" pos:column="14"/></operator><name pos:line="3" pos:column="14">flags<pos:position pos:line="3" pos:column="19"/></name></expr>)<pos:position pos:line="3" pos:column="20"/></condition><then pos:line="3" pos:column="20">
		<block type="pseudo"><return pos:line="4" pos:column="17">return <expr><literal type="number" pos:line="4" pos:column="24">1<pos:position pos:line="4" pos:column="25"/></literal></expr>;<pos:position pos:line="4" pos:column="26"/></return></block></then></if>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">len<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">&lt;<pos:position pos:line="6" pos:column="21"/></operator> <literal type="number" pos:line="6" pos:column="19">5<pos:position pos:line="6" pos:column="20"/></literal> <operator pos:line="6" pos:column="21">||<pos:position pos:line="6" pos:column="23"/></operator> <call><name pos:line="6" pos:column="24">memcmp<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><name pos:line="6" pos:column="31">name<pos:position pos:line="6" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="37">"refs/"<pos:position pos:line="6" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="46">5<pos:position pos:line="6" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="49"/></condition><then pos:line="6" pos:column="49">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr>;<pos:position pos:line="7" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="9" pos:column="9">/* Skip the "refs/" part */</comment>
	<expr_stmt><expr><name pos:line="10" pos:column="9">name<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">+=<pos:position pos:line="10" pos:column="16"/></operator> <literal type="number" pos:line="10" pos:column="17">5<pos:position pos:line="10" pos:column="18"/></literal></expr>;<pos:position pos:line="10" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><name pos:line="11" pos:column="9">len<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">-=<pos:position pos:line="11" pos:column="15"/></operator> <literal type="number" pos:line="11" pos:column="16">5<pos:position pos:line="11" pos:column="17"/></literal></expr>;<pos:position pos:line="11" pos:column="18"/></expr_stmt>

	<comment type="block" pos:line="13" pos:column="9">/* REF_NORMAL means that we don't want the magic fake tag refs */</comment>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">(<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">flags<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">&amp;<pos:position pos:line="14" pos:column="25"/></operator> <name pos:line="14" pos:column="22">REF_NORMAL<pos:position pos:line="14" pos:column="32"/></name><operator pos:line="14" pos:column="32">)<pos:position pos:line="14" pos:column="33"/></operator> <operator pos:line="14" pos:column="34">&amp;&amp;<pos:position pos:line="14" pos:column="44"/></operator> <call><name pos:line="14" pos:column="37">check_refname_format<pos:position pos:line="14" pos:column="57"/></name><argument_list pos:line="14" pos:column="57">(<argument><expr><name pos:line="14" pos:column="58">name<pos:position pos:line="14" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="64">0<pos:position pos:line="14" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="67"/></condition><then pos:line="14" pos:column="67">
		<block type="pseudo"><return pos:line="15" pos:column="17">return <expr><literal type="number" pos:line="15" pos:column="24">0<pos:position pos:line="15" pos:column="25"/></literal></expr>;<pos:position pos:line="15" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="17" pos:column="9">/* REF_HEADS means that we want regular branch heads */</comment>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">(<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">flags<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">&amp;<pos:position pos:line="18" pos:column="25"/></operator> <name pos:line="18" pos:column="22">REF_HEADS<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">)<pos:position pos:line="18" pos:column="32"/></operator> <operator pos:line="18" pos:column="33">&amp;&amp;<pos:position pos:line="18" pos:column="43"/></operator> <operator pos:line="18" pos:column="36">!<pos:position pos:line="18" pos:column="37"/></operator><call><name pos:line="18" pos:column="37">memcmp<pos:position pos:line="18" pos:column="43"/></name><argument_list pos:line="18" pos:column="43">(<argument><expr><name pos:line="18" pos:column="44">name<pos:position pos:line="18" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="50">"heads/"<pos:position pos:line="18" pos:column="58"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="60">6<pos:position pos:line="18" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="63"/></condition><then pos:line="18" pos:column="63">
		<block type="pseudo"><return pos:line="19" pos:column="17">return <expr><literal type="number" pos:line="19" pos:column="24">1<pos:position pos:line="19" pos:column="25"/></literal></expr>;<pos:position pos:line="19" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="21" pos:column="9">/* REF_TAGS means that we want tags */</comment>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">(<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">flags<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">&amp;<pos:position pos:line="22" pos:column="25"/></operator> <name pos:line="22" pos:column="22">REF_TAGS<pos:position pos:line="22" pos:column="30"/></name><operator pos:line="22" pos:column="30">)<pos:position pos:line="22" pos:column="31"/></operator> <operator pos:line="22" pos:column="32">&amp;&amp;<pos:position pos:line="22" pos:column="42"/></operator> <operator pos:line="22" pos:column="35">!<pos:position pos:line="22" pos:column="36"/></operator><call><name pos:line="22" pos:column="36">memcmp<pos:position pos:line="22" pos:column="42"/></name><argument_list pos:line="22" pos:column="42">(<argument><expr><name pos:line="22" pos:column="43">name<pos:position pos:line="22" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="49">"tags/"<pos:position pos:line="22" pos:column="56"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="58">5<pos:position pos:line="22" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="61"/></condition><then pos:line="22" pos:column="61">
		<block type="pseudo"><return pos:line="23" pos:column="17">return <expr><literal type="number" pos:line="23" pos:column="24">1<pos:position pos:line="23" pos:column="25"/></literal></expr>;<pos:position pos:line="23" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="25" pos:column="9">/* All type bits clear means that we are ok with anything */</comment>
	<return pos:line="26" pos:column="9">return <expr><operator pos:line="26" pos:column="16">!<pos:position pos:line="26" pos:column="17"/></operator><operator pos:line="26" pos:column="17">(<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="18">flags<pos:position pos:line="26" pos:column="23"/></name> <operator pos:line="26" pos:column="24">&amp;<pos:position pos:line="26" pos:column="29"/></operator> <operator pos:line="26" pos:column="26">~<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="27">REF_NORMAL<pos:position pos:line="26" pos:column="37"/></name><operator pos:line="26" pos:column="37">)<pos:position pos:line="26" pos:column="38"/></operator></expr>;<pos:position pos:line="26" pos:column="39"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
