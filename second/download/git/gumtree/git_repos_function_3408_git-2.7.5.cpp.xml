<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3408_git-2.7.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">read_tree<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name><name pos:line="1" pos:column="15">struct<pos:position pos:line="1" pos:column="21"/></name> <name pos:line="1" pos:column="22">tree<pos:position pos:line="1" pos:column="26"/></name></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">tree<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">int<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">stage<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="45">struct<pos:position pos:line="1" pos:column="51"/></name> <name pos:line="1" pos:column="52">pathspec<pos:position pos:line="1" pos:column="60"/></name></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">match<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">read_tree_fn_t<pos:position pos:line="3" pos:column="23"/></name></type> <name pos:line="3" pos:column="24">fn<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><name pos:line="3" pos:column="29">NULL<pos:position pos:line="3" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="16">err<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/*
	 * Currently the only existing callers of this function all
	 * call it with stage=1 and after making sure there is nothing
	 * at that stage; we could always use read_one_entry_quick().
	 *
	 * But when we decide to straighten out git-read-tree not to
	 * use unpack_trees() in some cases, this will probably start
	 * to matter.
	 */</comment>

	<comment type="block" pos:line="16" pos:column="9">/*
	 * See if we have cache entry at the stage.  If so,
	 * do it the original slow way, otherwise, append and then
	 * sort at the end.
	 */</comment>
	<for pos:line="21" pos:column="9">for <control pos:line="21" pos:column="13">(<init><expr><name pos:line="21" pos:column="14">i<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <literal type="number" pos:line="21" pos:column="18">0<pos:position pos:line="21" pos:column="19"/></literal></expr>;<pos:position pos:line="21" pos:column="20"/></init> <condition><expr><operator pos:line="21" pos:column="21">!<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">fn<pos:position pos:line="21" pos:column="24"/></name> <operator pos:line="21" pos:column="25">&amp;&amp;<pos:position pos:line="21" pos:column="35"/></operator> <name pos:line="21" pos:column="28">i<pos:position pos:line="21" pos:column="29"/></name> <operator pos:line="21" pos:column="30">&lt;<pos:position pos:line="21" pos:column="34"/></operator> <name pos:line="21" pos:column="32">active_nr<pos:position pos:line="21" pos:column="41"/></name></expr>;<pos:position pos:line="21" pos:column="42"/></condition> <incr><expr><name pos:line="21" pos:column="43">i<pos:position pos:line="21" pos:column="44"/></name><operator pos:line="21" pos:column="44">++<pos:position pos:line="21" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="21" pos:column="47"/></control> <block pos:line="21" pos:column="48">{
		<decl_stmt><decl><type><specifier pos:line="22" pos:column="17">const<pos:position pos:line="22" pos:column="22"/></specifier> <name><name pos:line="22" pos:column="23">struct<pos:position pos:line="22" pos:column="29"/></name> <name pos:line="22" pos:column="30">cache_entry<pos:position pos:line="22" pos:column="41"/></name></name> <modifier pos:line="22" pos:column="42">*<pos:position pos:line="22" pos:column="43"/></modifier></type><name pos:line="22" pos:column="43">ce<pos:position pos:line="22" pos:column="45"/></name> <init pos:line="22" pos:column="46">= <expr><name><name pos:line="22" pos:column="48">active_cache<pos:position pos:line="22" pos:column="60"/></name><index pos:line="22" pos:column="60">[<expr><name pos:line="22" pos:column="61">i<pos:position pos:line="22" pos:column="62"/></name></expr>]<pos:position pos:line="22" pos:column="63"/></index></name></expr></init></decl>;<pos:position pos:line="22" pos:column="64"/></decl_stmt>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><call><name pos:line="23" pos:column="21">ce_stage<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name pos:line="23" pos:column="30">ce<pos:position pos:line="23" pos:column="32"/></name></expr></argument>)<pos:position pos:line="23" pos:column="33"/></argument_list></call> <operator pos:line="23" pos:column="34">==<pos:position pos:line="23" pos:column="36"/></operator> <name pos:line="23" pos:column="37">stage<pos:position pos:line="23" pos:column="42"/></name></expr>)<pos:position pos:line="23" pos:column="43"/></condition><then pos:line="23" pos:column="43">
			<block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="25">fn<pos:position pos:line="24" pos:column="27"/></name> <operator pos:line="24" pos:column="28">=<pos:position pos:line="24" pos:column="29"/></operator> <name pos:line="24" pos:column="30">read_one_entry<pos:position pos:line="24" pos:column="44"/></name></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt></block></then></if>
	}<pos:position pos:line="25" pos:column="10"/></block></for>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">fn<pos:position pos:line="27" pos:column="16"/></name></expr>)<pos:position pos:line="27" pos:column="17"/></condition><then pos:line="27" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="17">fn<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">=<pos:position pos:line="28" pos:column="21"/></operator> <name pos:line="28" pos:column="22">read_one_entry_quick<pos:position pos:line="28" pos:column="42"/></name></expr>;<pos:position pos:line="28" pos:column="43"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="29" pos:column="9">err<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <call><name pos:line="29" pos:column="15">read_tree_recursive<pos:position pos:line="29" pos:column="34"/></name><argument_list pos:line="29" pos:column="34">(<argument><expr><name pos:line="29" pos:column="35">tree<pos:position pos:line="29" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="41">""<pos:position pos:line="29" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="45">0<pos:position pos:line="29" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="48">stage<pos:position pos:line="29" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="55">match<pos:position pos:line="29" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="62">fn<pos:position pos:line="29" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="66">NULL<pos:position pos:line="29" pos:column="70"/></name></expr></argument>)<pos:position pos:line="29" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="72"/></expr_stmt>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">fn<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">==<pos:position pos:line="30" pos:column="18"/></operator> <name pos:line="30" pos:column="19">read_one_entry<pos:position pos:line="30" pos:column="33"/></name> <operator pos:line="30" pos:column="34">||<pos:position pos:line="30" pos:column="36"/></operator> <name pos:line="30" pos:column="37">err<pos:position pos:line="30" pos:column="40"/></name></expr>)<pos:position pos:line="30" pos:column="41"/></condition><then pos:line="30" pos:column="41">
		<block type="pseudo"><return pos:line="31" pos:column="17">return <expr><name pos:line="31" pos:column="24">err<pos:position pos:line="31" pos:column="27"/></name></expr>;<pos:position pos:line="31" pos:column="28"/></return></block></then></if>

	<comment type="block" pos:line="33" pos:column="9">/*
	 * Sort the cache entry -- we need to nuke the cache tree, though.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="36" pos:column="9">cache_tree_free<pos:position pos:line="36" pos:column="24"/></name><argument_list pos:line="36" pos:column="24">(<argument><expr><operator pos:line="36" pos:column="25">&amp;<pos:position pos:line="36" pos:column="30"/></operator><name pos:line="36" pos:column="26">active_cache_tree<pos:position pos:line="36" pos:column="43"/></name></expr></argument>)<pos:position pos:line="36" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">qsort<pos:position pos:line="37" pos:column="14"/></name><argument_list pos:line="37" pos:column="14">(<argument><expr><name pos:line="37" pos:column="15">active_cache<pos:position pos:line="37" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="29">active_nr<pos:position pos:line="37" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="40">sizeof<argument_list pos:line="37" pos:column="46">(<argument><expr><name><name pos:line="37" pos:column="47">active_cache<pos:position pos:line="37" pos:column="59"/></name><index pos:line="37" pos:column="59">[<expr><literal type="number" pos:line="37" pos:column="60">0<pos:position pos:line="37" pos:column="61"/></literal></expr>]<pos:position pos:line="37" pos:column="62"/></index></name></expr></argument>)<pos:position pos:line="37" pos:column="63"/></argument_list></sizeof></expr></argument>,
	      <argument><expr><name pos:line="38" pos:column="15">cmp_cache_name_compare<pos:position pos:line="38" pos:column="37"/></name></expr></argument>)<pos:position pos:line="38" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="39"/></expr_stmt>
	<return pos:line="39" pos:column="9">return <expr><literal type="number" pos:line="39" pos:column="16">0<pos:position pos:line="39" pos:column="17"/></literal></expr>;<pos:position pos:line="39" pos:column="18"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
