<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2653_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">disconnect_git<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">transport<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">transport<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">git_transport_data<pos:position pos:line="3" pos:column="34"/></name></name> <modifier pos:line="3" pos:column="35">*<pos:position pos:line="3" pos:column="36"/></modifier></type><name pos:line="3" pos:column="36">data<pos:position pos:line="3" pos:column="40"/></name> <init pos:line="3" pos:column="41">= <expr><name><name pos:line="3" pos:column="43">transport<pos:position pos:line="3" pos:column="52"/></name><operator pos:line="3" pos:column="52">-&gt;<pos:position pos:line="3" pos:column="57"/></operator><name pos:line="3" pos:column="54">data<pos:position pos:line="3" pos:column="58"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="59"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><name><name pos:line="4" pos:column="13">data<pos:position pos:line="4" pos:column="17"/></name><operator pos:line="4" pos:column="17">-&gt;<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="19">conn<pos:position pos:line="4" pos:column="23"/></name></name></expr>)<pos:position pos:line="4" pos:column="24"/></condition><then pos:line="4" pos:column="24"> <block pos:line="4" pos:column="25">{
		<if pos:line="5" pos:column="17">if <condition pos:line="5" pos:column="20">(<expr><name><name pos:line="5" pos:column="21">data<pos:position pos:line="5" pos:column="25"/></name><operator pos:line="5" pos:column="25">-&gt;<pos:position pos:line="5" pos:column="30"/></operator><name pos:line="5" pos:column="27">got_remote_heads<pos:position pos:line="5" pos:column="43"/></name></name></expr>)<pos:position pos:line="5" pos:column="44"/></condition><then pos:line="5" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="25">packet_flush<pos:position pos:line="6" pos:column="37"/></name><argument_list pos:line="6" pos:column="37">(<argument><expr><name><name pos:line="6" pos:column="38">data<pos:position pos:line="6" pos:column="42"/></name><operator pos:line="6" pos:column="42">-&gt;<pos:position pos:line="6" pos:column="47"/></operator><name pos:line="6" pos:column="44">fd<pos:position pos:line="6" pos:column="46"/></name><index pos:line="6" pos:column="46">[<expr><literal type="number" pos:line="6" pos:column="47">1<pos:position pos:line="6" pos:column="48"/></literal></expr>]<pos:position pos:line="6" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="6" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="51"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">close<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><name><name pos:line="7" pos:column="23">data<pos:position pos:line="7" pos:column="27"/></name><operator pos:line="7" pos:column="27">-&gt;<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="29">fd<pos:position pos:line="7" pos:column="31"/></name><index pos:line="7" pos:column="31">[<expr><literal type="number" pos:line="7" pos:column="32">0<pos:position pos:line="7" pos:column="33"/></literal></expr>]<pos:position pos:line="7" pos:column="34"/></index></name></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">close<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">(<argument><expr><name><name pos:line="8" pos:column="23">data<pos:position pos:line="8" pos:column="27"/></name><operator pos:line="8" pos:column="27">-&gt;<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="29">fd<pos:position pos:line="8" pos:column="31"/></name><index pos:line="8" pos:column="31">[<expr><literal type="number" pos:line="8" pos:column="32">1<pos:position pos:line="8" pos:column="33"/></literal></expr>]<pos:position pos:line="8" pos:column="34"/></index></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">finish_connect<pos:position pos:line="9" pos:column="31"/></name><argument_list pos:line="9" pos:column="31">(<argument><expr><name><name pos:line="9" pos:column="32">data<pos:position pos:line="9" pos:column="36"/></name><operator pos:line="9" pos:column="36">-&gt;<pos:position pos:line="9" pos:column="41"/></operator><name pos:line="9" pos:column="38">conn<pos:position pos:line="9" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">free<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><name pos:line="12" pos:column="14">data<pos:position pos:line="12" pos:column="18"/></name></expr></argument>)<pos:position pos:line="12" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="20"/></expr_stmt>
	<return pos:line="13" pos:column="9">return <expr><literal type="number" pos:line="13" pos:column="16">0<pos:position pos:line="13" pos:column="17"/></literal></expr>;<pos:position pos:line="13" pos:column="18"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
