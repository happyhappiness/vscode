<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2369.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_show<pos:position pos:line="1" pos:column="13"/></name><parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><name pos:line="1" pos:column="14">int<pos:position pos:line="1" pos:column="17"/></name></type> <name pos:line="1" pos:column="18">argc<pos:position pos:line="1" pos:column="22"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier><modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">argv<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">prefix<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">rev_info<pos:position pos:line="3" pos:column="24"/></name></name></type> <name pos:line="3" pos:column="25">rev<pos:position pos:line="3" pos:column="28"/></name></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">object_array_entry<pos:position pos:line="4" pos:column="34"/></name></name> <modifier pos:line="4" pos:column="35">*<pos:position pos:line="4" pos:column="36"/></modifier></type><name pos:line="4" pos:column="36">objects<pos:position pos:line="4" pos:column="43"/></name></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">setup_revision_opt<pos:position pos:line="5" pos:column="34"/></name></name></type> <name pos:line="5" pos:column="35">opt<pos:position pos:line="5" pos:column="38"/></name></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">pathspec<pos:position pos:line="6" pos:column="24"/></name></name></type> <name pos:line="6" pos:column="25">match_all<pos:position pos:line="6" pos:column="34"/></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">i<pos:position pos:line="7" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="16">count<pos:position pos:line="7" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="23">ret<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><literal type="number" pos:line="7" pos:column="29">0<pos:position pos:line="7" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">init_grep_defaults<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">()<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">git_config<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">git_log_config<pos:position pos:line="10" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="36">NULL<pos:position pos:line="10" pos:column="40"/></name></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="42"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">memset<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><operator pos:line="12" pos:column="16">&amp;<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="17">match_all<pos:position pos:line="12" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="28">0<pos:position pos:line="12" pos:column="29"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="31">sizeof<argument_list pos:line="12" pos:column="37">(<argument><expr><name pos:line="12" pos:column="38">match_all<pos:position pos:line="12" pos:column="47"/></name></expr></argument>)<pos:position pos:line="12" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">init_revisions<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><operator pos:line="13" pos:column="24">&amp;<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="25">rev<pos:position pos:line="13" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="30">prefix<pos:position pos:line="13" pos:column="36"/></name></expr></argument>)<pos:position pos:line="13" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">rev<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">.<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="13">diff<pos:position pos:line="14" pos:column="17"/></name></name> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <literal type="number" pos:line="14" pos:column="20">1<pos:position pos:line="14" pos:column="21"/></literal></expr>;<pos:position pos:line="14" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="15" pos:column="9">rev<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">.<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="13">always_show_header<pos:position pos:line="15" pos:column="31"/></name></name> <operator pos:line="15" pos:column="32">=<pos:position pos:line="15" pos:column="33"/></operator> <literal type="number" pos:line="15" pos:column="34">1<pos:position pos:line="15" pos:column="35"/></literal></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="16" pos:column="9">rev<pos:position pos:line="16" pos:column="12"/></name><operator pos:line="16" pos:column="12">.<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">no_walk<pos:position pos:line="16" pos:column="20"/></name></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <name pos:line="16" pos:column="23">REVISION_WALK_NO_WALK_SORTED<pos:position pos:line="16" pos:column="51"/></name></expr>;<pos:position pos:line="16" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">rev<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">.<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">diffopt<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">.<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="21">stat_width<pos:position pos:line="17" pos:column="31"/></name></name> <operator pos:line="17" pos:column="32">=<pos:position pos:line="17" pos:column="33"/></operator> <operator pos:line="17" pos:column="34">-<pos:position pos:line="17" pos:column="35"/></operator><literal type="number" pos:line="17" pos:column="35">1<pos:position pos:line="17" pos:column="36"/></literal></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt> 	<comment type="block" pos:line="17" pos:column="41">/* Scale to real terminal size */</comment>

	<expr_stmt><expr><call><name pos:line="19" pos:column="9">memset<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><operator pos:line="19" pos:column="16">&amp;<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="17">opt<pos:position pos:line="19" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="22">0<pos:position pos:line="19" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="25">sizeof<argument_list pos:line="19" pos:column="31">(<argument><expr><name pos:line="19" pos:column="32">opt<pos:position pos:line="19" pos:column="35"/></name></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="20" pos:column="9">opt<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">.<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="13">def<pos:position pos:line="20" pos:column="16"/></name></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <literal type="string" pos:line="20" pos:column="19">"HEAD"<pos:position pos:line="20" pos:column="25"/></literal></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="21" pos:column="9">opt<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">.<pos:position pos:line="21" pos:column="13"/></operator><name pos:line="21" pos:column="13">tweak<pos:position pos:line="21" pos:column="18"/></name></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <name pos:line="21" pos:column="21">show_setup_revisions_tweak<pos:position pos:line="21" pos:column="47"/></name></expr>;<pos:position pos:line="21" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">cmd_log_init<pos:position pos:line="22" pos:column="21"/></name><argument_list pos:line="22" pos:column="21">(<argument><expr><name pos:line="22" pos:column="22">argc<pos:position pos:line="22" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="28">argv<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="34">prefix<pos:position pos:line="22" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="42">&amp;<pos:position pos:line="22" pos:column="47"/></operator><name pos:line="22" pos:column="43">rev<pos:position pos:line="22" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="48">&amp;<pos:position pos:line="22" pos:column="53"/></operator><name pos:line="22" pos:column="49">opt<pos:position pos:line="22" pos:column="52"/></name></expr></argument>)<pos:position pos:line="22" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="54"/></expr_stmt>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">!<pos:position pos:line="24" pos:column="14"/></operator><name><name pos:line="24" pos:column="14">rev<pos:position pos:line="24" pos:column="17"/></name><operator pos:line="24" pos:column="17">.<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">no_walk<pos:position pos:line="24" pos:column="25"/></name></name></expr>)<pos:position pos:line="24" pos:column="26"/></condition><then pos:line="24" pos:column="26">
		<block type="pseudo"><return pos:line="25" pos:column="17">return <expr><call><name pos:line="25" pos:column="24">cmd_log_walk<pos:position pos:line="25" pos:column="36"/></name><argument_list pos:line="25" pos:column="36">(<argument><expr><operator pos:line="25" pos:column="37">&amp;<pos:position pos:line="25" pos:column="42"/></operator><name pos:line="25" pos:column="38">rev<pos:position pos:line="25" pos:column="41"/></name></expr></argument>)<pos:position pos:line="25" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="43"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="27" pos:column="9">count<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">=<pos:position pos:line="27" pos:column="16"/></operator> <name><name pos:line="27" pos:column="17">rev<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">.<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="21">pending<pos:position pos:line="27" pos:column="28"/></name><operator pos:line="27" pos:column="28">.<pos:position pos:line="27" pos:column="29"/></operator><name pos:line="27" pos:column="29">nr<pos:position pos:line="27" pos:column="31"/></name></name></expr>;<pos:position pos:line="27" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name pos:line="28" pos:column="9">objects<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator> <name><name pos:line="28" pos:column="19">rev<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">.<pos:position pos:line="28" pos:column="23"/></operator><name pos:line="28" pos:column="23">pending<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">.<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="31">objects<pos:position pos:line="28" pos:column="38"/></name></name></expr>;<pos:position pos:line="28" pos:column="39"/></expr_stmt>
	<for pos:line="29" pos:column="9">for <control pos:line="29" pos:column="13">(<init><expr><name pos:line="29" pos:column="14">i<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <literal type="number" pos:line="29" pos:column="18">0<pos:position pos:line="29" pos:column="19"/></literal></expr>;<pos:position pos:line="29" pos:column="20"/></init> <condition><expr><name pos:line="29" pos:column="21">i<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">&lt;<pos:position pos:line="29" pos:column="27"/></operator> <name pos:line="29" pos:column="25">count<pos:position pos:line="29" pos:column="30"/></name> <operator pos:line="29" pos:column="31">&amp;&amp;<pos:position pos:line="29" pos:column="41"/></operator> <operator pos:line="29" pos:column="34">!<pos:position pos:line="29" pos:column="35"/></operator><name pos:line="29" pos:column="35">ret<pos:position pos:line="29" pos:column="38"/></name></expr>;<pos:position pos:line="29" pos:column="39"/></condition> <incr><expr><name pos:line="29" pos:column="40">i<pos:position pos:line="29" pos:column="41"/></name><operator pos:line="29" pos:column="41">++<pos:position pos:line="29" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="29" pos:column="44"/></control> <block pos:line="29" pos:column="45">{
		<decl_stmt><decl><type><name><name pos:line="30" pos:column="17">struct<pos:position pos:line="30" pos:column="23"/></name> <name pos:line="30" pos:column="24">object<pos:position pos:line="30" pos:column="30"/></name></name> <modifier pos:line="30" pos:column="31">*<pos:position pos:line="30" pos:column="32"/></modifier></type><name pos:line="30" pos:column="32">o<pos:position pos:line="30" pos:column="33"/></name> <init pos:line="30" pos:column="34">= <expr><name><name pos:line="30" pos:column="36">objects<pos:position pos:line="30" pos:column="43"/></name><index pos:line="30" pos:column="43">[<expr><name pos:line="30" pos:column="44">i<pos:position pos:line="30" pos:column="45"/></name></expr>]<pos:position pos:line="30" pos:column="46"/></index></name><operator pos:line="30" pos:column="46">.<pos:position pos:line="30" pos:column="47"/></operator><name pos:line="30" pos:column="47">item<pos:position pos:line="30" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="30" pos:column="52"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="31" pos:column="17">const<pos:position pos:line="31" pos:column="22"/></specifier> <name pos:line="31" pos:column="23">char<pos:position pos:line="31" pos:column="27"/></name> <modifier pos:line="31" pos:column="28">*<pos:position pos:line="31" pos:column="29"/></modifier></type><name pos:line="31" pos:column="29">name<pos:position pos:line="31" pos:column="33"/></name> <init pos:line="31" pos:column="34">= <expr><name><name pos:line="31" pos:column="36">objects<pos:position pos:line="31" pos:column="43"/></name><index pos:line="31" pos:column="43">[<expr><name pos:line="31" pos:column="44">i<pos:position pos:line="31" pos:column="45"/></name></expr>]<pos:position pos:line="31" pos:column="46"/></index></name><operator pos:line="31" pos:column="46">.<pos:position pos:line="31" pos:column="47"/></operator><name pos:line="31" pos:column="47">name<pos:position pos:line="31" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="31" pos:column="52"/></decl_stmt>
		<switch pos:line="32" pos:column="17">switch <condition pos:line="32" pos:column="24">(<expr><name><name pos:line="32" pos:column="25">o<pos:position pos:line="32" pos:column="26"/></name><operator pos:line="32" pos:column="26">-&gt;<pos:position pos:line="32" pos:column="31"/></operator><name pos:line="32" pos:column="28">type<pos:position pos:line="32" pos:column="32"/></name></name></expr>)<pos:position pos:line="32" pos:column="33"/></condition> <block pos:line="32" pos:column="34">{
		<case pos:line="33" pos:column="17">case <expr><name pos:line="33" pos:column="22">OBJ_BLOB<pos:position pos:line="33" pos:column="30"/></name></expr>:<pos:position pos:line="33" pos:column="31"/></case>
			<expr_stmt><expr><name pos:line="34" pos:column="25">ret<pos:position pos:line="34" pos:column="28"/></name> <operator pos:line="34" pos:column="29">=<pos:position pos:line="34" pos:column="30"/></operator> <call><name pos:line="34" pos:column="31">show_blob_object<pos:position pos:line="34" pos:column="47"/></name><argument_list pos:line="34" pos:column="47">(<argument><expr><name><name pos:line="34" pos:column="48">o<pos:position pos:line="34" pos:column="49"/></name><operator pos:line="34" pos:column="49">-&gt;<pos:position pos:line="34" pos:column="54"/></operator><name pos:line="34" pos:column="51">sha1<pos:position pos:line="34" pos:column="55"/></name></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="57">&amp;<pos:position pos:line="34" pos:column="62"/></operator><name pos:line="34" pos:column="58">rev<pos:position pos:line="34" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="63">name<pos:position pos:line="34" pos:column="67"/></name></expr></argument>)<pos:position pos:line="34" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="69"/></expr_stmt>
			<break pos:line="35" pos:column="25">break;<pos:position pos:line="35" pos:column="31"/></break>
		<case pos:line="36" pos:column="17">case <expr><name pos:line="36" pos:column="22">OBJ_TAG<pos:position pos:line="36" pos:column="29"/></name></expr>:<pos:position pos:line="36" pos:column="30"/></case> <block pos:line="36" pos:column="31">{
			<decl_stmt><decl><type><name><name pos:line="37" pos:column="25">struct<pos:position pos:line="37" pos:column="31"/></name> <name pos:line="37" pos:column="32">tag<pos:position pos:line="37" pos:column="35"/></name></name> <modifier pos:line="37" pos:column="36">*<pos:position pos:line="37" pos:column="37"/></modifier></type><name pos:line="37" pos:column="37">t<pos:position pos:line="37" pos:column="38"/></name> <init pos:line="37" pos:column="39">= <expr><operator pos:line="37" pos:column="41">(<pos:position pos:line="37" pos:column="42"/></operator>struct <name pos:line="37" pos:column="49">tag<pos:position pos:line="37" pos:column="52"/></name> <operator pos:line="37" pos:column="53">*<pos:position pos:line="37" pos:column="54"/></operator><operator pos:line="37" pos:column="54">)<pos:position pos:line="37" pos:column="55"/></operator><name pos:line="37" pos:column="55">o<pos:position pos:line="37" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="37" pos:column="57"/></decl_stmt>

			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><name><name pos:line="39" pos:column="29">rev<pos:position pos:line="39" pos:column="32"/></name><operator pos:line="39" pos:column="32">.<pos:position pos:line="39" pos:column="33"/></operator><name pos:line="39" pos:column="33">shown_one<pos:position pos:line="39" pos:column="42"/></name></name></expr>)<pos:position pos:line="39" pos:column="43"/></condition><then pos:line="39" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="33">putchar<pos:position pos:line="40" pos:column="40"/></name><argument_list pos:line="40" pos:column="40">(<argument><expr><literal type="char" pos:line="40" pos:column="41">'\n'<pos:position pos:line="40" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="47"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">printf<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">(<argument><expr><literal type="string" pos:line="41" pos:column="32">"%stag %s%s\n"<pos:position pos:line="41" pos:column="46"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="42" pos:column="41">diff_get_color_opt<pos:position pos:line="42" pos:column="59"/></name><argument_list pos:line="42" pos:column="59">(<argument><expr><operator pos:line="42" pos:column="60">&amp;<pos:position pos:line="42" pos:column="65"/></operator><name><name pos:line="42" pos:column="61">rev<pos:position pos:line="42" pos:column="64"/></name><operator pos:line="42" pos:column="64">.<pos:position pos:line="42" pos:column="65"/></operator><name pos:line="42" pos:column="65">diffopt<pos:position pos:line="42" pos:column="72"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="74">DIFF_COMMIT<pos:position pos:line="42" pos:column="85"/></name></expr></argument>)<pos:position pos:line="42" pos:column="86"/></argument_list></call></expr></argument>,
					<argument><expr><name><name pos:line="43" pos:column="41">t<pos:position pos:line="43" pos:column="42"/></name><operator pos:line="43" pos:column="42">-&gt;<pos:position pos:line="43" pos:column="47"/></operator><name pos:line="43" pos:column="44">tag<pos:position pos:line="43" pos:column="47"/></name></name></expr></argument>,
					<argument><expr><call><name pos:line="44" pos:column="41">diff_get_color_opt<pos:position pos:line="44" pos:column="59"/></name><argument_list pos:line="44" pos:column="59">(<argument><expr><operator pos:line="44" pos:column="60">&amp;<pos:position pos:line="44" pos:column="65"/></operator><name><name pos:line="44" pos:column="61">rev<pos:position pos:line="44" pos:column="64"/></name><operator pos:line="44" pos:column="64">.<pos:position pos:line="44" pos:column="65"/></operator><name pos:line="44" pos:column="65">diffopt<pos:position pos:line="44" pos:column="72"/></name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="74">DIFF_RESET<pos:position pos:line="44" pos:column="84"/></name></expr></argument>)<pos:position pos:line="44" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="87"/></expr_stmt>
			<expr_stmt><expr><name pos:line="45" pos:column="25">ret<pos:position pos:line="45" pos:column="28"/></name> <operator pos:line="45" pos:column="29">=<pos:position pos:line="45" pos:column="30"/></operator> <call><name pos:line="45" pos:column="31">show_tag_object<pos:position pos:line="45" pos:column="46"/></name><argument_list pos:line="45" pos:column="46">(<argument><expr><name><name pos:line="45" pos:column="47">o<pos:position pos:line="45" pos:column="48"/></name><operator pos:line="45" pos:column="48">-&gt;<pos:position pos:line="45" pos:column="53"/></operator><name pos:line="45" pos:column="50">sha1<pos:position pos:line="45" pos:column="54"/></name></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="56">&amp;<pos:position pos:line="45" pos:column="61"/></operator><name pos:line="45" pos:column="57">rev<pos:position pos:line="45" pos:column="60"/></name></expr></argument>)<pos:position pos:line="45" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="62"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="46" pos:column="25">rev<pos:position pos:line="46" pos:column="28"/></name><operator pos:line="46" pos:column="28">.<pos:position pos:line="46" pos:column="29"/></operator><name pos:line="46" pos:column="29">shown_one<pos:position pos:line="46" pos:column="38"/></name></name> <operator pos:line="46" pos:column="39">=<pos:position pos:line="46" pos:column="40"/></operator> <literal type="number" pos:line="46" pos:column="41">1<pos:position pos:line="46" pos:column="42"/></literal></expr>;<pos:position pos:line="46" pos:column="43"/></expr_stmt>
			<if pos:line="47" pos:column="25">if <condition pos:line="47" pos:column="28">(<expr><name pos:line="47" pos:column="29">ret<pos:position pos:line="47" pos:column="32"/></name></expr>)<pos:position pos:line="47" pos:column="33"/></condition><then pos:line="47" pos:column="33">
				<block type="pseudo"><break pos:line="48" pos:column="33">break;<pos:position pos:line="48" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><name pos:line="49" pos:column="25">o<pos:position pos:line="49" pos:column="26"/></name> <operator pos:line="49" pos:column="27">=<pos:position pos:line="49" pos:column="28"/></operator> <call><name pos:line="49" pos:column="29">parse_object<pos:position pos:line="49" pos:column="41"/></name><argument_list pos:line="49" pos:column="41">(<argument><expr><name><name pos:line="49" pos:column="42">t<pos:position pos:line="49" pos:column="43"/></name><operator pos:line="49" pos:column="43">-&gt;<pos:position pos:line="49" pos:column="48"/></operator><name pos:line="49" pos:column="45">tagged<pos:position pos:line="49" pos:column="51"/></name><operator pos:line="49" pos:column="51">-&gt;<pos:position pos:line="49" pos:column="56"/></operator><name pos:line="49" pos:column="53">sha1<pos:position pos:line="49" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="59"/></expr_stmt>
			<if pos:line="50" pos:column="25">if <condition pos:line="50" pos:column="28">(<expr><operator pos:line="50" pos:column="29">!<pos:position pos:line="50" pos:column="30"/></operator><name pos:line="50" pos:column="30">o<pos:position pos:line="50" pos:column="31"/></name></expr>)<pos:position pos:line="50" pos:column="32"/></condition><then pos:line="50" pos:column="32">
				<block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="33">ret<pos:position pos:line="51" pos:column="36"/></name> <operator pos:line="51" pos:column="37">=<pos:position pos:line="51" pos:column="38"/></operator> <call><name pos:line="51" pos:column="39">error<pos:position pos:line="51" pos:column="44"/></name><argument_list pos:line="51" pos:column="44">(<argument><expr><call><name pos:line="51" pos:column="45">_<pos:position pos:line="51" pos:column="46"/></name><argument_list pos:line="51" pos:column="46">(<argument><expr><literal type="string" pos:line="51" pos:column="47">"Could not read object %s"<pos:position pos:line="51" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="74"/></argument_list></call></expr></argument>,
					    <argument><expr><call><name pos:line="52" pos:column="45">sha1_to_hex<pos:position pos:line="52" pos:column="56"/></name><argument_list pos:line="52" pos:column="56">(<argument><expr><name><name pos:line="52" pos:column="57">t<pos:position pos:line="52" pos:column="58"/></name><operator pos:line="52" pos:column="58">-&gt;<pos:position pos:line="52" pos:column="63"/></operator><name pos:line="52" pos:column="60">tagged<pos:position pos:line="52" pos:column="66"/></name><operator pos:line="52" pos:column="66">-&gt;<pos:position pos:line="52" pos:column="71"/></operator><name pos:line="52" pos:column="68">sha1<pos:position pos:line="52" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="75"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name><name pos:line="53" pos:column="25">objects<pos:position pos:line="53" pos:column="32"/></name><index pos:line="53" pos:column="32">[<expr><name pos:line="53" pos:column="33">i<pos:position pos:line="53" pos:column="34"/></name></expr>]<pos:position pos:line="53" pos:column="35"/></index></name><operator pos:line="53" pos:column="35">.<pos:position pos:line="53" pos:column="36"/></operator><name pos:line="53" pos:column="36">item<pos:position pos:line="53" pos:column="40"/></name> <operator pos:line="53" pos:column="41">=<pos:position pos:line="53" pos:column="42"/></operator> <name pos:line="53" pos:column="43">o<pos:position pos:line="53" pos:column="44"/></name></expr>;<pos:position pos:line="53" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name pos:line="54" pos:column="25">i<pos:position pos:line="54" pos:column="26"/></name><operator pos:line="54" pos:column="26">--<pos:position pos:line="54" pos:column="28"/></operator></expr>;<pos:position pos:line="54" pos:column="29"/></expr_stmt>
			<break pos:line="55" pos:column="25">break;<pos:position pos:line="55" pos:column="31"/></break>
		}<pos:position pos:line="56" pos:column="18"/></block>
		<case pos:line="57" pos:column="17">case <expr><name pos:line="57" pos:column="22">OBJ_TREE<pos:position pos:line="57" pos:column="30"/></name></expr>:<pos:position pos:line="57" pos:column="31"/></case>
			<if pos:line="58" pos:column="25">if <condition pos:line="58" pos:column="28">(<expr><name><name pos:line="58" pos:column="29">rev<pos:position pos:line="58" pos:column="32"/></name><operator pos:line="58" pos:column="32">.<pos:position pos:line="58" pos:column="33"/></operator><name pos:line="58" pos:column="33">shown_one<pos:position pos:line="58" pos:column="42"/></name></name></expr>)<pos:position pos:line="58" pos:column="43"/></condition><then pos:line="58" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="33">putchar<pos:position pos:line="59" pos:column="40"/></name><argument_list pos:line="59" pos:column="40">(<argument><expr><literal type="char" pos:line="59" pos:column="41">'\n'<pos:position pos:line="59" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="47"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="60" pos:column="25">printf<pos:position pos:line="60" pos:column="31"/></name><argument_list pos:line="60" pos:column="31">(<argument><expr><literal type="string" pos:line="60" pos:column="32">"%stree %s%s\n\n"<pos:position pos:line="60" pos:column="49"/></literal></expr></argument>,
					<argument><expr><call><name pos:line="61" pos:column="41">diff_get_color_opt<pos:position pos:line="61" pos:column="59"/></name><argument_list pos:line="61" pos:column="59">(<argument><expr><operator pos:line="61" pos:column="60">&amp;<pos:position pos:line="61" pos:column="65"/></operator><name><name pos:line="61" pos:column="61">rev<pos:position pos:line="61" pos:column="64"/></name><operator pos:line="61" pos:column="64">.<pos:position pos:line="61" pos:column="65"/></operator><name pos:line="61" pos:column="65">diffopt<pos:position pos:line="61" pos:column="72"/></name></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="74">DIFF_COMMIT<pos:position pos:line="61" pos:column="85"/></name></expr></argument>)<pos:position pos:line="61" pos:column="86"/></argument_list></call></expr></argument>,
					<argument><expr><name pos:line="62" pos:column="41">name<pos:position pos:line="62" pos:column="45"/></name></expr></argument>,
					<argument><expr><call><name pos:line="63" pos:column="41">diff_get_color_opt<pos:position pos:line="63" pos:column="59"/></name><argument_list pos:line="63" pos:column="59">(<argument><expr><operator pos:line="63" pos:column="60">&amp;<pos:position pos:line="63" pos:column="65"/></operator><name><name pos:line="63" pos:column="61">rev<pos:position pos:line="63" pos:column="64"/></name><operator pos:line="63" pos:column="64">.<pos:position pos:line="63" pos:column="65"/></operator><name pos:line="63" pos:column="65">diffopt<pos:position pos:line="63" pos:column="72"/></name></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="74">DIFF_RESET<pos:position pos:line="63" pos:column="84"/></name></expr></argument>)<pos:position pos:line="63" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="87"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="64" pos:column="25">read_tree_recursive<pos:position pos:line="64" pos:column="44"/></name><argument_list pos:line="64" pos:column="44">(<argument><expr><operator pos:line="64" pos:column="45">(<pos:position pos:line="64" pos:column="46"/></operator>struct <name pos:line="64" pos:column="53">tree<pos:position pos:line="64" pos:column="57"/></name> <operator pos:line="64" pos:column="58">*<pos:position pos:line="64" pos:column="59"/></operator><operator pos:line="64" pos:column="59">)<pos:position pos:line="64" pos:column="60"/></operator><name pos:line="64" pos:column="60">o<pos:position pos:line="64" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="63">""<pos:position pos:line="64" pos:column="65"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="64" pos:column="67">0<pos:position pos:line="64" pos:column="68"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="64" pos:column="70">0<pos:position pos:line="64" pos:column="71"/></literal></expr></argument>, <argument><expr><operator pos:line="64" pos:column="73">&amp;<pos:position pos:line="64" pos:column="78"/></operator><name pos:line="64" pos:column="74">match_all<pos:position pos:line="64" pos:column="83"/></name></expr></argument>,
					<argument><expr><name pos:line="65" pos:column="41">show_tree_object<pos:position pos:line="65" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="59">NULL<pos:position pos:line="65" pos:column="63"/></name></expr></argument>)<pos:position pos:line="65" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="66" pos:column="25">rev<pos:position pos:line="66" pos:column="28"/></name><operator pos:line="66" pos:column="28">.<pos:position pos:line="66" pos:column="29"/></operator><name pos:line="66" pos:column="29">shown_one<pos:position pos:line="66" pos:column="38"/></name></name> <operator pos:line="66" pos:column="39">=<pos:position pos:line="66" pos:column="40"/></operator> <literal type="number" pos:line="66" pos:column="41">1<pos:position pos:line="66" pos:column="42"/></literal></expr>;<pos:position pos:line="66" pos:column="43"/></expr_stmt>
			<break pos:line="67" pos:column="25">break;<pos:position pos:line="67" pos:column="31"/></break>
		<case pos:line="68" pos:column="17">case <expr><name pos:line="68" pos:column="22">OBJ_COMMIT<pos:position pos:line="68" pos:column="32"/></name></expr>:<pos:position pos:line="68" pos:column="33"/></case>
			<expr_stmt><expr><name><name pos:line="69" pos:column="25">rev<pos:position pos:line="69" pos:column="28"/></name><operator pos:line="69" pos:column="28">.<pos:position pos:line="69" pos:column="29"/></operator><name pos:line="69" pos:column="29">pending<pos:position pos:line="69" pos:column="36"/></name><operator pos:line="69" pos:column="36">.<pos:position pos:line="69" pos:column="37"/></operator><name pos:line="69" pos:column="37">nr<pos:position pos:line="69" pos:column="39"/></name></name> <operator pos:line="69" pos:column="40">=<pos:position pos:line="69" pos:column="41"/></operator> <name><name pos:line="69" pos:column="42">rev<pos:position pos:line="69" pos:column="45"/></name><operator pos:line="69" pos:column="45">.<pos:position pos:line="69" pos:column="46"/></operator><name pos:line="69" pos:column="46">pending<pos:position pos:line="69" pos:column="53"/></name><operator pos:line="69" pos:column="53">.<pos:position pos:line="69" pos:column="54"/></operator><name pos:line="69" pos:column="54">alloc<pos:position pos:line="69" pos:column="59"/></name></name> <operator pos:line="69" pos:column="60">=<pos:position pos:line="69" pos:column="61"/></operator> <literal type="number" pos:line="69" pos:column="62">0<pos:position pos:line="69" pos:column="63"/></literal></expr>;<pos:position pos:line="69" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="70" pos:column="25">rev<pos:position pos:line="70" pos:column="28"/></name><operator pos:line="70" pos:column="28">.<pos:position pos:line="70" pos:column="29"/></operator><name pos:line="70" pos:column="29">pending<pos:position pos:line="70" pos:column="36"/></name><operator pos:line="70" pos:column="36">.<pos:position pos:line="70" pos:column="37"/></operator><name pos:line="70" pos:column="37">objects<pos:position pos:line="70" pos:column="44"/></name></name> <operator pos:line="70" pos:column="45">=<pos:position pos:line="70" pos:column="46"/></operator> <name pos:line="70" pos:column="47">NULL<pos:position pos:line="70" pos:column="51"/></name></expr>;<pos:position pos:line="70" pos:column="52"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="71" pos:column="25">add_object_array<pos:position pos:line="71" pos:column="41"/></name><argument_list pos:line="71" pos:column="41">(<argument><expr><name pos:line="71" pos:column="42">o<pos:position pos:line="71" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="45">name<pos:position pos:line="71" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="51">&amp;<pos:position pos:line="71" pos:column="56"/></operator><name><name pos:line="71" pos:column="52">rev<pos:position pos:line="71" pos:column="55"/></name><operator pos:line="71" pos:column="55">.<pos:position pos:line="71" pos:column="56"/></operator><name pos:line="71" pos:column="56">pending<pos:position pos:line="71" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><name pos:line="72" pos:column="25">ret<pos:position pos:line="72" pos:column="28"/></name> <operator pos:line="72" pos:column="29">=<pos:position pos:line="72" pos:column="30"/></operator> <call><name pos:line="72" pos:column="31">cmd_log_walk<pos:position pos:line="72" pos:column="43"/></name><argument_list pos:line="72" pos:column="43">(<argument><expr><operator pos:line="72" pos:column="44">&amp;<pos:position pos:line="72" pos:column="49"/></operator><name pos:line="72" pos:column="45">rev<pos:position pos:line="72" pos:column="48"/></name></expr></argument>)<pos:position pos:line="72" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="50"/></expr_stmt>
			<break pos:line="73" pos:column="25">break;<pos:position pos:line="73" pos:column="31"/></break>
		<default pos:line="74" pos:column="17">default:<pos:position pos:line="74" pos:column="25"/></default>
			<expr_stmt><expr><name pos:line="75" pos:column="25">ret<pos:position pos:line="75" pos:column="28"/></name> <operator pos:line="75" pos:column="29">=<pos:position pos:line="75" pos:column="30"/></operator> <call><name pos:line="75" pos:column="31">error<pos:position pos:line="75" pos:column="36"/></name><argument_list pos:line="75" pos:column="36">(<argument><expr><call><name pos:line="75" pos:column="37">_<pos:position pos:line="75" pos:column="38"/></name><argument_list pos:line="75" pos:column="38">(<argument><expr><literal type="string" pos:line="75" pos:column="39">"Unknown type: %d"<pos:position pos:line="75" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="60">o<pos:position pos:line="75" pos:column="61"/></name><operator pos:line="75" pos:column="61">-&gt;<pos:position pos:line="75" pos:column="66"/></operator><name pos:line="75" pos:column="63">type<pos:position pos:line="75" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="69"/></expr_stmt>
		}<pos:position pos:line="76" pos:column="18"/></block></switch>
	}<pos:position pos:line="77" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="78" pos:column="9">free<pos:position pos:line="78" pos:column="13"/></name><argument_list pos:line="78" pos:column="13">(<argument><expr><name pos:line="78" pos:column="14">objects<pos:position pos:line="78" pos:column="21"/></name></expr></argument>)<pos:position pos:line="78" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="23"/></expr_stmt>
	<return pos:line="79" pos:column="9">return <expr><name pos:line="79" pos:column="16">ret<pos:position pos:line="79" pos:column="19"/></name></expr>;<pos:position pos:line="79" pos:column="20"/></return>
}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
