<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3871_git-2.8.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">strbuf_addstr_without_crud<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name><name pos:line="1" pos:column="40">struct<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">strbuf<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">sb<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="59">const<pos:position pos:line="1" pos:column="64"/></specifier> <name pos:line="1" pos:column="65">char<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">src<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">i<pos:position pos:line="3" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="19">len<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name></type> <name pos:line="4" pos:column="23">c<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/* Remove crud from the beginning.. */</comment>
	<while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><operator pos:line="7" pos:column="16">(<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">c<pos:position pos:line="7" pos:column="18"/></name> <operator pos:line="7" pos:column="19">=<pos:position pos:line="7" pos:column="20"/></operator> <operator pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="22">src<pos:position pos:line="7" pos:column="25"/></name><operator pos:line="7" pos:column="25">)<pos:position pos:line="7" pos:column="26"/></operator> <operator pos:line="7" pos:column="27">!=<pos:position pos:line="7" pos:column="29"/></operator> <literal type="number" pos:line="7" pos:column="30">0<pos:position pos:line="7" pos:column="31"/></literal></expr>)<pos:position pos:line="7" pos:column="32"/></condition> <block pos:line="7" pos:column="33">{
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><operator pos:line="8" pos:column="21">!<pos:position pos:line="8" pos:column="22"/></operator><call><name pos:line="8" pos:column="22">crud<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">c<pos:position pos:line="8" pos:column="28"/></name></expr></argument>)<pos:position pos:line="8" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="30"/></condition><then pos:line="8" pos:column="30">
			<block type="pseudo"><break pos:line="9" pos:column="25">break;<pos:position pos:line="9" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><name pos:line="10" pos:column="17">src<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">++<pos:position pos:line="10" pos:column="22"/></operator></expr>;<pos:position pos:line="10" pos:column="23"/></expr_stmt>
	}<pos:position pos:line="11" pos:column="10"/></block></while>

	<comment type="block" pos:line="13" pos:column="9">/* Remove crud from the end.. */</comment>
	<expr_stmt><expr><name pos:line="14" pos:column="9">len<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">=<pos:position pos:line="14" pos:column="14"/></operator> <call><name pos:line="14" pos:column="15">strlen<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">src<pos:position pos:line="14" pos:column="25"/></name></expr></argument>)<pos:position pos:line="14" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt>
	<while pos:line="15" pos:column="9">while <condition pos:line="15" pos:column="15">(<expr><name pos:line="15" pos:column="16">len<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">&gt;<pos:position pos:line="15" pos:column="24"/></operator> <literal type="number" pos:line="15" pos:column="22">0<pos:position pos:line="15" pos:column="23"/></literal></expr>)<pos:position pos:line="15" pos:column="24"/></condition> <block pos:line="15" pos:column="25">{
		<expr_stmt><expr><name pos:line="16" pos:column="17">c<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <name><name pos:line="16" pos:column="21">src<pos:position pos:line="16" pos:column="24"/></name><index pos:line="16" pos:column="24">[<expr><name pos:line="16" pos:column="25">len<pos:position pos:line="16" pos:column="28"/></name><operator pos:line="16" pos:column="28">-<pos:position pos:line="16" pos:column="29"/></operator><literal type="number" pos:line="16" pos:column="29">1<pos:position pos:line="16" pos:column="30"/></literal></expr>]<pos:position pos:line="16" pos:column="31"/></index></name></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><call><name pos:line="17" pos:column="22">crud<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">c<pos:position pos:line="17" pos:column="28"/></name></expr></argument>)<pos:position pos:line="17" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="30"/></condition><then pos:line="17" pos:column="30">
			<block type="pseudo"><break pos:line="18" pos:column="25">break;<pos:position pos:line="18" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><operator pos:line="19" pos:column="17">--<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="19">len<pos:position pos:line="19" pos:column="22"/></name></expr>;<pos:position pos:line="19" pos:column="23"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></while>

	<comment type="block" pos:line="22" pos:column="9">/*
	 * Copy the rest to the buffer, but avoid the special
	 * characters '\n' '&lt;' and '&gt;' that act as delimiters on
	 * an identification line. We can only remove crud, never add it,
	 * so 'len' is our maximum.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">strbuf_grow<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><name pos:line="28" pos:column="21">sb<pos:position pos:line="28" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="25">len<pos:position pos:line="28" pos:column="28"/></name></expr></argument>)<pos:position pos:line="28" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="30"/></expr_stmt>
	<for pos:line="29" pos:column="9">for <control pos:line="29" pos:column="13">(<init><expr><name pos:line="29" pos:column="14">i<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <literal type="number" pos:line="29" pos:column="18">0<pos:position pos:line="29" pos:column="19"/></literal></expr>;<pos:position pos:line="29" pos:column="20"/></init> <condition><expr><name pos:line="29" pos:column="21">i<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">&lt;<pos:position pos:line="29" pos:column="27"/></operator> <name pos:line="29" pos:column="25">len<pos:position pos:line="29" pos:column="28"/></name></expr>;<pos:position pos:line="29" pos:column="29"/></condition> <incr><expr><name pos:line="29" pos:column="30">i<pos:position pos:line="29" pos:column="31"/></name><operator pos:line="29" pos:column="31">++<pos:position pos:line="29" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="29" pos:column="34"/></control> <block pos:line="29" pos:column="35">{
		<expr_stmt><expr><name pos:line="30" pos:column="17">c<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">=<pos:position pos:line="30" pos:column="20"/></operator> <operator pos:line="30" pos:column="21">*<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="22">src<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">++<pos:position pos:line="30" pos:column="27"/></operator></expr>;<pos:position pos:line="30" pos:column="28"/></expr_stmt>
		<switch pos:line="31" pos:column="17">switch <condition pos:line="31" pos:column="24">(<expr><name pos:line="31" pos:column="25">c<pos:position pos:line="31" pos:column="26"/></name></expr>)<pos:position pos:line="31" pos:column="27"/></condition> <block pos:line="31" pos:column="28">{
		<case pos:line="32" pos:column="17">case <expr><literal type="char" pos:line="32" pos:column="22">'\n'<pos:position pos:line="32" pos:column="26"/></literal></expr>:<pos:position pos:line="32" pos:column="27"/></case> <case pos:line="32" pos:column="28">case <expr><literal type="char" pos:line="32" pos:column="33">'&lt;'<pos:position pos:line="32" pos:column="39"/></literal></expr>:<pos:position pos:line="32" pos:column="37"/></case> <case pos:line="32" pos:column="38">case <expr><literal type="char" pos:line="32" pos:column="43">'&gt;'<pos:position pos:line="32" pos:column="49"/></literal></expr>:<pos:position pos:line="32" pos:column="47"/></case>
			<continue pos:line="33" pos:column="25">continue;<pos:position pos:line="33" pos:column="34"/></continue>
		}<pos:position pos:line="34" pos:column="18"/></block></switch>
		<expr_stmt><expr><name><name pos:line="35" pos:column="17">sb<pos:position pos:line="35" pos:column="19"/></name><operator pos:line="35" pos:column="19">-&gt;<pos:position pos:line="35" pos:column="24"/></operator><name pos:line="35" pos:column="21">buf<pos:position pos:line="35" pos:column="24"/></name><index pos:line="35" pos:column="24">[<expr><name><name pos:line="35" pos:column="25">sb<pos:position pos:line="35" pos:column="27"/></name><operator pos:line="35" pos:column="27">-&gt;<pos:position pos:line="35" pos:column="32"/></operator><name pos:line="35" pos:column="29">len<pos:position pos:line="35" pos:column="32"/></name></name><operator pos:line="35" pos:column="32">++<pos:position pos:line="35" pos:column="34"/></operator></expr>]<pos:position pos:line="35" pos:column="35"/></index></name> <operator pos:line="35" pos:column="36">=<pos:position pos:line="35" pos:column="37"/></operator> <name pos:line="35" pos:column="38">c<pos:position pos:line="35" pos:column="39"/></name></expr>;<pos:position pos:line="35" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="36" pos:column="10"/></block></for>
	<expr_stmt><expr><name><name pos:line="37" pos:column="9">sb<pos:position pos:line="37" pos:column="11"/></name><operator pos:line="37" pos:column="11">-&gt;<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="13">buf<pos:position pos:line="37" pos:column="16"/></name><index pos:line="37" pos:column="16">[<expr><name><name pos:line="37" pos:column="17">sb<pos:position pos:line="37" pos:column="19"/></name><operator pos:line="37" pos:column="19">-&gt;<pos:position pos:line="37" pos:column="24"/></operator><name pos:line="37" pos:column="21">len<pos:position pos:line="37" pos:column="24"/></name></name></expr>]<pos:position pos:line="37" pos:column="25"/></index></name> <operator pos:line="37" pos:column="26">=<pos:position pos:line="37" pos:column="27"/></operator> <literal type="char" pos:line="37" pos:column="28">'\0'<pos:position pos:line="37" pos:column="32"/></literal></expr>;<pos:position pos:line="37" pos:column="33"/></expr_stmt>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
