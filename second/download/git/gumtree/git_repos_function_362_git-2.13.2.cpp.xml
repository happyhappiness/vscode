<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_362_git-2.13.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">do_read_index<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name><name pos:line="1" pos:column="19">struct<pos:position pos:line="1" pos:column="25"/></name> <name pos:line="1" pos:column="26">index_state<pos:position pos:line="1" pos:column="37"/></name></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">istate<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">path<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">int<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">must_exist<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">fd<pos:position pos:line="3" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="17">i<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">stat<pos:position pos:line="4" pos:column="20"/></name></name></type> <name pos:line="4" pos:column="21">st<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">long<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">src_offset<pos:position pos:line="5" pos:column="33"/></name></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">cache_header<pos:position pos:line="6" pos:column="28"/></name></name> <modifier pos:line="6" pos:column="29">*<pos:position pos:line="6" pos:column="30"/></modifier></type><name pos:line="6" pos:column="30">hdr<pos:position pos:line="6" pos:column="33"/></name></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">void<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">mmap<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">size_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">mmap_size<pos:position pos:line="8" pos:column="25"/></name></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">strbuf<pos:position pos:line="9" pos:column="22"/></name></name></type> <name pos:line="9" pos:column="23">previous_name_buf<pos:position pos:line="9" pos:column="40"/></name> <init pos:line="9" pos:column="41">= <expr><name pos:line="9" pos:column="43">STRBUF_INIT<pos:position pos:line="9" pos:column="54"/></name></expr></init></decl>, <modifier pos:line="9" pos:column="56">*<pos:position pos:line="9" pos:column="57"/></modifier><decl><type ref="prev"/><name pos:line="9" pos:column="57">previous_name<pos:position pos:line="9" pos:column="70"/></name></decl>;<pos:position pos:line="9" pos:column="71"/></decl_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name><name pos:line="11" pos:column="13">istate<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">-&gt;<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="21">initialized<pos:position pos:line="11" pos:column="32"/></name></name></expr>)<pos:position pos:line="11" pos:column="33"/></condition><then pos:line="11" pos:column="33">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><name><name pos:line="12" pos:column="24">istate<pos:position pos:line="12" pos:column="30"/></name><operator pos:line="12" pos:column="30">-&gt;<pos:position pos:line="12" pos:column="35"/></operator><name pos:line="12" pos:column="32">cache_nr<pos:position pos:line="12" pos:column="40"/></name></name></expr>;<pos:position pos:line="12" pos:column="41"/></return></block></then></if>

	<expr_stmt><expr><name><name pos:line="14" pos:column="9">istate<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">-&gt;<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="17">timestamp<pos:position pos:line="14" pos:column="26"/></name><operator pos:line="14" pos:column="26">.<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="27">sec<pos:position pos:line="14" pos:column="30"/></name></name> <operator pos:line="14" pos:column="31">=<pos:position pos:line="14" pos:column="32"/></operator> <literal type="number" pos:line="14" pos:column="33">0<pos:position pos:line="14" pos:column="34"/></literal></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="15" pos:column="9">istate<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">-&gt;<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="17">timestamp<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">.<pos:position pos:line="15" pos:column="27"/></operator><name pos:line="15" pos:column="27">nsec<pos:position pos:line="15" pos:column="31"/></name></name> <operator pos:line="15" pos:column="32">=<pos:position pos:line="15" pos:column="33"/></operator> <literal type="number" pos:line="15" pos:column="34">0<pos:position pos:line="15" pos:column="35"/></literal></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="16" pos:column="9">fd<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <call><name pos:line="16" pos:column="14">open<pos:position pos:line="16" pos:column="18"/></name><argument_list pos:line="16" pos:column="18">(<argument><expr><name pos:line="16" pos:column="19">path<pos:position pos:line="16" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="25">O_RDONLY<pos:position pos:line="16" pos:column="33"/></name></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">fd<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">&lt;<pos:position pos:line="17" pos:column="20"/></operator> <literal type="number" pos:line="17" pos:column="18">0<pos:position pos:line="17" pos:column="19"/></literal></expr>)<pos:position pos:line="17" pos:column="20"/></condition><then pos:line="17" pos:column="20"> <block pos:line="17" pos:column="21">{
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><operator pos:line="18" pos:column="21">!<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">must_exist<pos:position pos:line="18" pos:column="32"/></name> <operator pos:line="18" pos:column="33">&amp;&amp;<pos:position pos:line="18" pos:column="43"/></operator> <name pos:line="18" pos:column="36">errno<pos:position pos:line="18" pos:column="41"/></name> <operator pos:line="18" pos:column="42">==<pos:position pos:line="18" pos:column="44"/></operator> <name pos:line="18" pos:column="45">ENOENT<pos:position pos:line="18" pos:column="51"/></name></expr>)<pos:position pos:line="18" pos:column="52"/></condition><then pos:line="18" pos:column="52">
			<block type="pseudo"><return pos:line="19" pos:column="25">return <expr><literal type="number" pos:line="19" pos:column="32">0<pos:position pos:line="19" pos:column="33"/></literal></expr>;<pos:position pos:line="19" pos:column="34"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">die_errno<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">(<argument><expr><literal type="string" pos:line="20" pos:column="27">"%s: index file open failed"<pos:position pos:line="20" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="57">path<pos:position pos:line="20" pos:column="61"/></name></expr></argument>)<pos:position pos:line="20" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="63"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">fstat<pos:position pos:line="23" pos:column="18"/></name><argument_list pos:line="23" pos:column="18">(<argument><expr><name pos:line="23" pos:column="19">fd<pos:position pos:line="23" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="23">&amp;<pos:position pos:line="23" pos:column="28"/></operator><name pos:line="23" pos:column="24">st<pos:position pos:line="23" pos:column="26"/></name></expr></argument>)<pos:position pos:line="23" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="28"/></condition><then pos:line="23" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="17">die_errno<pos:position pos:line="24" pos:column="26"/></name><argument_list pos:line="24" pos:column="26">(<argument><expr><literal type="string" pos:line="24" pos:column="27">"cannot stat the open index"<pos:position pos:line="24" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="57"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="26" pos:column="9">mmap_size<pos:position pos:line="26" pos:column="18"/></name> <operator pos:line="26" pos:column="19">=<pos:position pos:line="26" pos:column="20"/></operator> <call><name pos:line="26" pos:column="21">xsize_t<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><name><name pos:line="26" pos:column="29">st<pos:position pos:line="26" pos:column="31"/></name><operator pos:line="26" pos:column="31">.<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="32">st_size<pos:position pos:line="26" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">mmap_size<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">&lt;<pos:position pos:line="27" pos:column="27"/></operator> <sizeof pos:line="27" pos:column="25">sizeof<argument_list pos:line="27" pos:column="31">(<argument><expr pos:line="27" pos:column="32">struct <name pos:line="27" pos:column="39">cache_header<pos:position pos:line="27" pos:column="51"/></name></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></sizeof> <operator pos:line="27" pos:column="53">+<pos:position pos:line="27" pos:column="54"/></operator> <literal type="number" pos:line="27" pos:column="55">20<pos:position pos:line="27" pos:column="57"/></literal></expr>)<pos:position pos:line="27" pos:column="58"/></condition><then pos:line="27" pos:column="58">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="17">die<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><literal type="string" pos:line="28" pos:column="21">"index file smaller than expected"<pos:position pos:line="28" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="57"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="30" pos:column="9">mmap<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">=<pos:position pos:line="30" pos:column="15"/></operator> <call><name pos:line="30" pos:column="16">xmmap<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><name pos:line="30" pos:column="22">NULL<pos:position pos:line="30" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="28">mmap_size<pos:position pos:line="30" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="39">PROT_READ<pos:position pos:line="30" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="50">MAP_PRIVATE<pos:position pos:line="30" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="63">fd<pos:position pos:line="30" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="67">0<pos:position pos:line="30" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="70"/></expr_stmt>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">mmap<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">==<pos:position pos:line="31" pos:column="20"/></operator> <name pos:line="31" pos:column="21">MAP_FAILED<pos:position pos:line="31" pos:column="31"/></name></expr>)<pos:position pos:line="31" pos:column="32"/></condition><then pos:line="31" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="17">die_errno<pos:position pos:line="32" pos:column="26"/></name><argument_list pos:line="32" pos:column="26">(<argument><expr><literal type="string" pos:line="32" pos:column="27">"unable to map index file"<pos:position pos:line="32" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="55"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">close<pos:position pos:line="33" pos:column="14"/></name><argument_list pos:line="33" pos:column="14">(<argument><expr><name pos:line="33" pos:column="15">fd<pos:position pos:line="33" pos:column="17"/></name></expr></argument>)<pos:position pos:line="33" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="19"/></expr_stmt>

	<expr_stmt><expr><name pos:line="35" pos:column="9">hdr<pos:position pos:line="35" pos:column="12"/></name> <operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator> <name pos:line="35" pos:column="15">mmap<pos:position pos:line="35" pos:column="19"/></name></expr>;<pos:position pos:line="35" pos:column="20"/></expr_stmt>
	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><call><name pos:line="36" pos:column="13">verify_hdr<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">(<argument><expr><name pos:line="36" pos:column="24">hdr<pos:position pos:line="36" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="29">mmap_size<pos:position pos:line="36" pos:column="38"/></name></expr></argument>)<pos:position pos:line="36" pos:column="39"/></argument_list></call> <operator pos:line="36" pos:column="40">&lt;<pos:position pos:line="36" pos:column="44"/></operator> <literal type="number" pos:line="36" pos:column="42">0<pos:position pos:line="36" pos:column="43"/></literal></expr>)<pos:position pos:line="36" pos:column="44"/></condition><then pos:line="36" pos:column="44">
		<block type="pseudo"><goto pos:line="37" pos:column="17">goto <name pos:line="37" pos:column="22">unmap<pos:position pos:line="37" pos:column="27"/></name>;<pos:position pos:line="37" pos:column="28"/></goto></block></then></if>

	<expr_stmt><expr><call><name pos:line="39" pos:column="9">hashcpy<pos:position pos:line="39" pos:column="16"/></name><argument_list pos:line="39" pos:column="16">(<argument><expr><name><name pos:line="39" pos:column="17">istate<pos:position pos:line="39" pos:column="23"/></name><operator pos:line="39" pos:column="23">-&gt;<pos:position pos:line="39" pos:column="28"/></operator><name pos:line="39" pos:column="25">sha1<pos:position pos:line="39" pos:column="29"/></name></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="31">(<pos:position pos:line="39" pos:column="32"/></operator><specifier pos:line="39" pos:column="32">const<pos:position pos:line="39" pos:column="37"/></specifier> <name pos:line="39" pos:column="38">unsigned<pos:position pos:line="39" pos:column="46"/></name> <name pos:line="39" pos:column="47">char<pos:position pos:line="39" pos:column="51"/></name> <operator pos:line="39" pos:column="52">*<pos:position pos:line="39" pos:column="53"/></operator><operator pos:line="39" pos:column="53">)<pos:position pos:line="39" pos:column="54"/></operator><name pos:line="39" pos:column="54">hdr<pos:position pos:line="39" pos:column="57"/></name> <operator pos:line="39" pos:column="58">+<pos:position pos:line="39" pos:column="59"/></operator> <name pos:line="39" pos:column="60">mmap_size<pos:position pos:line="39" pos:column="69"/></name> <operator pos:line="39" pos:column="70">-<pos:position pos:line="39" pos:column="71"/></operator> <literal type="number" pos:line="39" pos:column="72">20<pos:position pos:line="39" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="76"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="40" pos:column="9">istate<pos:position pos:line="40" pos:column="15"/></name><operator pos:line="40" pos:column="15">-&gt;<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="17">version<pos:position pos:line="40" pos:column="24"/></name></name> <operator pos:line="40" pos:column="25">=<pos:position pos:line="40" pos:column="26"/></operator> <call><name pos:line="40" pos:column="27">ntohl<pos:position pos:line="40" pos:column="32"/></name><argument_list pos:line="40" pos:column="32">(<argument><expr><name><name pos:line="40" pos:column="33">hdr<pos:position pos:line="40" pos:column="36"/></name><operator pos:line="40" pos:column="36">-&gt;<pos:position pos:line="40" pos:column="41"/></operator><name pos:line="40" pos:column="38">hdr_version<pos:position pos:line="40" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="41" pos:column="9">istate<pos:position pos:line="41" pos:column="15"/></name><operator pos:line="41" pos:column="15">-&gt;<pos:position pos:line="41" pos:column="20"/></operator><name pos:line="41" pos:column="17">cache_nr<pos:position pos:line="41" pos:column="25"/></name></name> <operator pos:line="41" pos:column="26">=<pos:position pos:line="41" pos:column="27"/></operator> <call><name pos:line="41" pos:column="28">ntohl<pos:position pos:line="41" pos:column="33"/></name><argument_list pos:line="41" pos:column="33">(<argument><expr><name><name pos:line="41" pos:column="34">hdr<pos:position pos:line="41" pos:column="37"/></name><operator pos:line="41" pos:column="37">-&gt;<pos:position pos:line="41" pos:column="42"/></operator><name pos:line="41" pos:column="39">hdr_entries<pos:position pos:line="41" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="42" pos:column="9">istate<pos:position pos:line="42" pos:column="15"/></name><operator pos:line="42" pos:column="15">-&gt;<pos:position pos:line="42" pos:column="20"/></operator><name pos:line="42" pos:column="17">cache_alloc<pos:position pos:line="42" pos:column="28"/></name></name> <operator pos:line="42" pos:column="29">=<pos:position pos:line="42" pos:column="30"/></operator> <call><name pos:line="42" pos:column="31">alloc_nr<pos:position pos:line="42" pos:column="39"/></name><argument_list pos:line="42" pos:column="39">(<argument><expr><name><name pos:line="42" pos:column="40">istate<pos:position pos:line="42" pos:column="46"/></name><operator pos:line="42" pos:column="46">-&gt;<pos:position pos:line="42" pos:column="51"/></operator><name pos:line="42" pos:column="48">cache_nr<pos:position pos:line="42" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="43" pos:column="9">istate<pos:position pos:line="43" pos:column="15"/></name><operator pos:line="43" pos:column="15">-&gt;<pos:position pos:line="43" pos:column="20"/></operator><name pos:line="43" pos:column="17">cache<pos:position pos:line="43" pos:column="22"/></name></name> <operator pos:line="43" pos:column="23">=<pos:position pos:line="43" pos:column="24"/></operator> <call><name pos:line="43" pos:column="25">xcalloc<pos:position pos:line="43" pos:column="32"/></name><argument_list pos:line="43" pos:column="32">(<argument><expr><name><name pos:line="43" pos:column="33">istate<pos:position pos:line="43" pos:column="39"/></name><operator pos:line="43" pos:column="39">-&gt;<pos:position pos:line="43" pos:column="44"/></operator><name pos:line="43" pos:column="41">cache_alloc<pos:position pos:line="43" pos:column="52"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="54">sizeof<argument_list pos:line="43" pos:column="60">(<argument><expr><operator pos:line="43" pos:column="61">*<pos:position pos:line="43" pos:column="62"/></operator><name><name pos:line="43" pos:column="62">istate<pos:position pos:line="43" pos:column="68"/></name><operator pos:line="43" pos:column="68">-&gt;<pos:position pos:line="43" pos:column="73"/></operator><name pos:line="43" pos:column="70">cache<pos:position pos:line="43" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="78"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="44" pos:column="9">istate<pos:position pos:line="44" pos:column="15"/></name><operator pos:line="44" pos:column="15">-&gt;<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="17">initialized<pos:position pos:line="44" pos:column="28"/></name></name> <operator pos:line="44" pos:column="29">=<pos:position pos:line="44" pos:column="30"/></operator> <literal type="number" pos:line="44" pos:column="31">1<pos:position pos:line="44" pos:column="32"/></literal></expr>;<pos:position pos:line="44" pos:column="33"/></expr_stmt>

	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name><name pos:line="46" pos:column="13">istate<pos:position pos:line="46" pos:column="19"/></name><operator pos:line="46" pos:column="19">-&gt;<pos:position pos:line="46" pos:column="24"/></operator><name pos:line="46" pos:column="21">version<pos:position pos:line="46" pos:column="28"/></name></name> <operator pos:line="46" pos:column="29">==<pos:position pos:line="46" pos:column="31"/></operator> <literal type="number" pos:line="46" pos:column="32">4<pos:position pos:line="46" pos:column="33"/></literal></expr>)<pos:position pos:line="46" pos:column="34"/></condition><then pos:line="46" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="17">previous_name<pos:position pos:line="47" pos:column="30"/></name> <operator pos:line="47" pos:column="31">=<pos:position pos:line="47" pos:column="32"/></operator> <operator pos:line="47" pos:column="33">&amp;<pos:position pos:line="47" pos:column="38"/></operator><name pos:line="47" pos:column="34">previous_name_buf<pos:position pos:line="47" pos:column="51"/></name></expr>;<pos:position pos:line="47" pos:column="52"/></expr_stmt></block></then>
	<else pos:line="48" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="17">previous_name<pos:position pos:line="49" pos:column="30"/></name> <operator pos:line="49" pos:column="31">=<pos:position pos:line="49" pos:column="32"/></operator> <name pos:line="49" pos:column="33">NULL<pos:position pos:line="49" pos:column="37"/></name></expr>;<pos:position pos:line="49" pos:column="38"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name pos:line="51" pos:column="9">src_offset<pos:position pos:line="51" pos:column="19"/></name> <operator pos:line="51" pos:column="20">=<pos:position pos:line="51" pos:column="21"/></operator> <sizeof pos:line="51" pos:column="22">sizeof<argument_list pos:line="51" pos:column="28">(<argument><expr><operator pos:line="51" pos:column="29">*<pos:position pos:line="51" pos:column="30"/></operator><name pos:line="51" pos:column="30">hdr<pos:position pos:line="51" pos:column="33"/></name></expr></argument>)<pos:position pos:line="51" pos:column="34"/></argument_list></sizeof></expr>;<pos:position pos:line="51" pos:column="35"/></expr_stmt>
	<for pos:line="52" pos:column="9">for <control pos:line="52" pos:column="13">(<init><expr><name pos:line="52" pos:column="14">i<pos:position pos:line="52" pos:column="15"/></name> <operator pos:line="52" pos:column="16">=<pos:position pos:line="52" pos:column="17"/></operator> <literal type="number" pos:line="52" pos:column="18">0<pos:position pos:line="52" pos:column="19"/></literal></expr>;<pos:position pos:line="52" pos:column="20"/></init> <condition><expr><name pos:line="52" pos:column="21">i<pos:position pos:line="52" pos:column="22"/></name> <operator pos:line="52" pos:column="23">&lt;<pos:position pos:line="52" pos:column="27"/></operator> <name><name pos:line="52" pos:column="25">istate<pos:position pos:line="52" pos:column="31"/></name><operator pos:line="52" pos:column="31">-&gt;<pos:position pos:line="52" pos:column="36"/></operator><name pos:line="52" pos:column="33">cache_nr<pos:position pos:line="52" pos:column="41"/></name></name></expr>;<pos:position pos:line="52" pos:column="42"/></condition> <incr><expr><name pos:line="52" pos:column="43">i<pos:position pos:line="52" pos:column="44"/></name><operator pos:line="52" pos:column="44">++<pos:position pos:line="52" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="52" pos:column="47"/></control> <block pos:line="52" pos:column="48">{
		<decl_stmt><decl><type><name><name pos:line="53" pos:column="17">struct<pos:position pos:line="53" pos:column="23"/></name> <name pos:line="53" pos:column="24">ondisk_cache_entry<pos:position pos:line="53" pos:column="42"/></name></name> <modifier pos:line="53" pos:column="43">*<pos:position pos:line="53" pos:column="44"/></modifier></type><name pos:line="53" pos:column="44">disk_ce<pos:position pos:line="53" pos:column="51"/></name></decl>;<pos:position pos:line="53" pos:column="52"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="54" pos:column="17">struct<pos:position pos:line="54" pos:column="23"/></name> <name pos:line="54" pos:column="24">cache_entry<pos:position pos:line="54" pos:column="35"/></name></name> <modifier pos:line="54" pos:column="36">*<pos:position pos:line="54" pos:column="37"/></modifier></type><name pos:line="54" pos:column="37">ce<pos:position pos:line="54" pos:column="39"/></name></decl>;<pos:position pos:line="54" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="55" pos:column="17">unsigned<pos:position pos:line="55" pos:column="25"/></name> <name pos:line="55" pos:column="26">long<pos:position pos:line="55" pos:column="30"/></name></type> <name pos:line="55" pos:column="31">consumed<pos:position pos:line="55" pos:column="39"/></name></decl>;<pos:position pos:line="55" pos:column="40"/></decl_stmt>

		<expr_stmt><expr><name pos:line="57" pos:column="17">disk_ce<pos:position pos:line="57" pos:column="24"/></name> <operator pos:line="57" pos:column="25">=<pos:position pos:line="57" pos:column="26"/></operator> <operator pos:line="57" pos:column="27">(<pos:position pos:line="57" pos:column="28"/></operator>struct <name pos:line="57" pos:column="35">ondisk_cache_entry<pos:position pos:line="57" pos:column="53"/></name> <operator pos:line="57" pos:column="54">*<pos:position pos:line="57" pos:column="55"/></operator><operator pos:line="57" pos:column="55">)<pos:position pos:line="57" pos:column="56"/></operator><operator pos:line="57" pos:column="56">(<pos:position pos:line="57" pos:column="57"/></operator><operator pos:line="57" pos:column="57">(<pos:position pos:line="57" pos:column="58"/></operator><name pos:line="57" pos:column="58">char<pos:position pos:line="57" pos:column="62"/></name> <operator pos:line="57" pos:column="63">*<pos:position pos:line="57" pos:column="64"/></operator><operator pos:line="57" pos:column="64">)<pos:position pos:line="57" pos:column="65"/></operator><name pos:line="57" pos:column="65">mmap<pos:position pos:line="57" pos:column="69"/></name> <operator pos:line="57" pos:column="70">+<pos:position pos:line="57" pos:column="71"/></operator> <name pos:line="57" pos:column="72">src_offset<pos:position pos:line="57" pos:column="82"/></name><operator pos:line="57" pos:column="82">)<pos:position pos:line="57" pos:column="83"/></operator></expr>;<pos:position pos:line="57" pos:column="84"/></expr_stmt>
		<expr_stmt><expr><name pos:line="58" pos:column="17">ce<pos:position pos:line="58" pos:column="19"/></name> <operator pos:line="58" pos:column="20">=<pos:position pos:line="58" pos:column="21"/></operator> <call><name pos:line="58" pos:column="22">create_from_disk<pos:position pos:line="58" pos:column="38"/></name><argument_list pos:line="58" pos:column="38">(<argument><expr><name pos:line="58" pos:column="39">disk_ce<pos:position pos:line="58" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="48">&amp;<pos:position pos:line="58" pos:column="53"/></operator><name pos:line="58" pos:column="49">consumed<pos:position pos:line="58" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="59">previous_name<pos:position pos:line="58" pos:column="72"/></name></expr></argument>)<pos:position pos:line="58" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="74"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="59" pos:column="17">set_index_entry<pos:position pos:line="59" pos:column="32"/></name><argument_list pos:line="59" pos:column="32">(<argument><expr><name pos:line="59" pos:column="33">istate<pos:position pos:line="59" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="41">i<pos:position pos:line="59" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="44">ce<pos:position pos:line="59" pos:column="46"/></name></expr></argument>)<pos:position pos:line="59" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="48"/></expr_stmt>

		<expr_stmt><expr><name pos:line="61" pos:column="17">src_offset<pos:position pos:line="61" pos:column="27"/></name> <operator pos:line="61" pos:column="28">+=<pos:position pos:line="61" pos:column="30"/></operator> <name pos:line="61" pos:column="31">consumed<pos:position pos:line="61" pos:column="39"/></name></expr>;<pos:position pos:line="61" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="62" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="63" pos:column="9">strbuf_release<pos:position pos:line="63" pos:column="23"/></name><argument_list pos:line="63" pos:column="23">(<argument><expr><operator pos:line="63" pos:column="24">&amp;<pos:position pos:line="63" pos:column="29"/></operator><name pos:line="63" pos:column="25">previous_name_buf<pos:position pos:line="63" pos:column="42"/></name></expr></argument>)<pos:position pos:line="63" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="64" pos:column="9">istate<pos:position pos:line="64" pos:column="15"/></name><operator pos:line="64" pos:column="15">-&gt;<pos:position pos:line="64" pos:column="20"/></operator><name pos:line="64" pos:column="17">timestamp<pos:position pos:line="64" pos:column="26"/></name><operator pos:line="64" pos:column="26">.<pos:position pos:line="64" pos:column="27"/></operator><name pos:line="64" pos:column="27">sec<pos:position pos:line="64" pos:column="30"/></name></name> <operator pos:line="64" pos:column="31">=<pos:position pos:line="64" pos:column="32"/></operator> <name><name pos:line="64" pos:column="33">st<pos:position pos:line="64" pos:column="35"/></name><operator pos:line="64" pos:column="35">.<pos:position pos:line="64" pos:column="36"/></operator><name pos:line="64" pos:column="36">st_mtime<pos:position pos:line="64" pos:column="44"/></name></name></expr>;<pos:position pos:line="64" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="65" pos:column="9">istate<pos:position pos:line="65" pos:column="15"/></name><operator pos:line="65" pos:column="15">-&gt;<pos:position pos:line="65" pos:column="20"/></operator><name pos:line="65" pos:column="17">timestamp<pos:position pos:line="65" pos:column="26"/></name><operator pos:line="65" pos:column="26">.<pos:position pos:line="65" pos:column="27"/></operator><name pos:line="65" pos:column="27">nsec<pos:position pos:line="65" pos:column="31"/></name></name> <operator pos:line="65" pos:column="32">=<pos:position pos:line="65" pos:column="33"/></operator> <call><name pos:line="65" pos:column="34">ST_MTIME_NSEC<pos:position pos:line="65" pos:column="47"/></name><argument_list pos:line="65" pos:column="47">(<argument><expr><name pos:line="65" pos:column="48">st<pos:position pos:line="65" pos:column="50"/></name></expr></argument>)<pos:position pos:line="65" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="52"/></expr_stmt>

	<while pos:line="67" pos:column="9">while <condition pos:line="67" pos:column="15">(<expr><name pos:line="67" pos:column="16">src_offset<pos:position pos:line="67" pos:column="26"/></name> <operator pos:line="67" pos:column="27">&lt;=<pos:position pos:line="67" pos:column="32"/></operator> <name pos:line="67" pos:column="30">mmap_size<pos:position pos:line="67" pos:column="39"/></name> <operator pos:line="67" pos:column="40">-<pos:position pos:line="67" pos:column="41"/></operator> <literal type="number" pos:line="67" pos:column="42">20<pos:position pos:line="67" pos:column="44"/></literal> <operator pos:line="67" pos:column="45">-<pos:position pos:line="67" pos:column="46"/></operator> <literal type="number" pos:line="67" pos:column="47">8<pos:position pos:line="67" pos:column="48"/></literal></expr>)<pos:position pos:line="67" pos:column="49"/></condition> <block pos:line="67" pos:column="50">{
		<comment type="block" pos:line="68" pos:column="17">/* After an array of active_nr index entries,
		 * there can be arbitrary number of extended
		 * sections, each of which is prefixed with
		 * extension name (4-byte) and section length
		 * in 4-byte network byte order.
		 */</comment>
		<decl_stmt><decl><type><name pos:line="74" pos:column="17">uint32_t<pos:position pos:line="74" pos:column="25"/></name></type> <name pos:line="74" pos:column="26">extsize<pos:position pos:line="74" pos:column="33"/></name></decl>;<pos:position pos:line="74" pos:column="34"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="75" pos:column="17">memcpy<pos:position pos:line="75" pos:column="23"/></name><argument_list pos:line="75" pos:column="23">(<argument><expr><operator pos:line="75" pos:column="24">&amp;<pos:position pos:line="75" pos:column="29"/></operator><name pos:line="75" pos:column="25">extsize<pos:position pos:line="75" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="34">(<pos:position pos:line="75" pos:column="35"/></operator><name pos:line="75" pos:column="35">char<pos:position pos:line="75" pos:column="39"/></name> <operator pos:line="75" pos:column="40">*<pos:position pos:line="75" pos:column="41"/></operator><operator pos:line="75" pos:column="41">)<pos:position pos:line="75" pos:column="42"/></operator><name pos:line="75" pos:column="42">mmap<pos:position pos:line="75" pos:column="46"/></name> <operator pos:line="75" pos:column="47">+<pos:position pos:line="75" pos:column="48"/></operator> <name pos:line="75" pos:column="49">src_offset<pos:position pos:line="75" pos:column="59"/></name> <operator pos:line="75" pos:column="60">+<pos:position pos:line="75" pos:column="61"/></operator> <literal type="number" pos:line="75" pos:column="62">4<pos:position pos:line="75" pos:column="63"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="65">4<pos:position pos:line="75" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="68"/></expr_stmt>
		<expr_stmt><expr><name pos:line="76" pos:column="17">extsize<pos:position pos:line="76" pos:column="24"/></name> <operator pos:line="76" pos:column="25">=<pos:position pos:line="76" pos:column="26"/></operator> <call><name pos:line="76" pos:column="27">ntohl<pos:position pos:line="76" pos:column="32"/></name><argument_list pos:line="76" pos:column="32">(<argument><expr><name pos:line="76" pos:column="33">extsize<pos:position pos:line="76" pos:column="40"/></name></expr></argument>)<pos:position pos:line="76" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="42"/></expr_stmt>
		<if pos:line="77" pos:column="17">if <condition pos:line="77" pos:column="20">(<expr><call><name pos:line="77" pos:column="21">read_index_extension<pos:position pos:line="77" pos:column="41"/></name><argument_list pos:line="77" pos:column="41">(<argument><expr><name pos:line="77" pos:column="42">istate<pos:position pos:line="77" pos:column="48"/></name></expr></argument>,
					 <argument><expr><operator pos:line="78" pos:column="42">(<pos:position pos:line="78" pos:column="43"/></operator><specifier pos:line="78" pos:column="43">const<pos:position pos:line="78" pos:column="48"/></specifier> <name pos:line="78" pos:column="49">char<pos:position pos:line="78" pos:column="53"/></name> <operator pos:line="78" pos:column="54">*<pos:position pos:line="78" pos:column="55"/></operator><operator pos:line="78" pos:column="55">)<pos:position pos:line="78" pos:column="56"/></operator> <name pos:line="78" pos:column="57">mmap<pos:position pos:line="78" pos:column="61"/></name> <operator pos:line="78" pos:column="62">+<pos:position pos:line="78" pos:column="63"/></operator> <name pos:line="78" pos:column="64">src_offset<pos:position pos:line="78" pos:column="74"/></name></expr></argument>,
					 <argument><expr><operator pos:line="79" pos:column="42">(<pos:position pos:line="79" pos:column="43"/></operator><name pos:line="79" pos:column="43">char<pos:position pos:line="79" pos:column="47"/></name> <operator pos:line="79" pos:column="48">*<pos:position pos:line="79" pos:column="49"/></operator><operator pos:line="79" pos:column="49">)<pos:position pos:line="79" pos:column="50"/></operator> <name pos:line="79" pos:column="51">mmap<pos:position pos:line="79" pos:column="55"/></name> <operator pos:line="79" pos:column="56">+<pos:position pos:line="79" pos:column="57"/></operator> <name pos:line="79" pos:column="58">src_offset<pos:position pos:line="79" pos:column="68"/></name> <operator pos:line="79" pos:column="69">+<pos:position pos:line="79" pos:column="70"/></operator> <literal type="number" pos:line="79" pos:column="71">8<pos:position pos:line="79" pos:column="72"/></literal></expr></argument>,
					 <argument><expr><name pos:line="80" pos:column="42">extsize<pos:position pos:line="80" pos:column="49"/></name></expr></argument>)<pos:position pos:line="80" pos:column="50"/></argument_list></call> <operator pos:line="80" pos:column="51">&lt;<pos:position pos:line="80" pos:column="55"/></operator> <literal type="number" pos:line="80" pos:column="53">0<pos:position pos:line="80" pos:column="54"/></literal></expr>)<pos:position pos:line="80" pos:column="55"/></condition><then pos:line="80" pos:column="55">
			<block type="pseudo"><goto pos:line="81" pos:column="25">goto <name pos:line="81" pos:column="30">unmap<pos:position pos:line="81" pos:column="35"/></name>;<pos:position pos:line="81" pos:column="36"/></goto></block></then></if>
		<expr_stmt><expr><name pos:line="82" pos:column="17">src_offset<pos:position pos:line="82" pos:column="27"/></name> <operator pos:line="82" pos:column="28">+=<pos:position pos:line="82" pos:column="30"/></operator> <literal type="number" pos:line="82" pos:column="31">8<pos:position pos:line="82" pos:column="32"/></literal></expr>;<pos:position pos:line="82" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="83" pos:column="17">src_offset<pos:position pos:line="83" pos:column="27"/></name> <operator pos:line="83" pos:column="28">+=<pos:position pos:line="83" pos:column="30"/></operator> <name pos:line="83" pos:column="31">extsize<pos:position pos:line="83" pos:column="38"/></name></expr>;<pos:position pos:line="83" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="84" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="85" pos:column="9">munmap<pos:position pos:line="85" pos:column="15"/></name><argument_list pos:line="85" pos:column="15">(<argument><expr><name pos:line="85" pos:column="16">mmap<pos:position pos:line="85" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="22">mmap_size<pos:position pos:line="85" pos:column="31"/></name></expr></argument>)<pos:position pos:line="85" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="33"/></expr_stmt>
	<return pos:line="86" pos:column="9">return <expr><name><name pos:line="86" pos:column="16">istate<pos:position pos:line="86" pos:column="22"/></name><operator pos:line="86" pos:column="22">-&gt;<pos:position pos:line="86" pos:column="27"/></operator><name pos:line="86" pos:column="24">cache_nr<pos:position pos:line="86" pos:column="32"/></name></name></expr>;<pos:position pos:line="86" pos:column="33"/></return>

<label><name pos:line="88" pos:column="1">unmap<pos:position pos:line="88" pos:column="6"/></name>:<pos:position pos:line="88" pos:column="7"/></label>
	<expr_stmt><expr><call><name pos:line="89" pos:column="9">munmap<pos:position pos:line="89" pos:column="15"/></name><argument_list pos:line="89" pos:column="15">(<argument><expr><name pos:line="89" pos:column="16">mmap<pos:position pos:line="89" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="22">mmap_size<pos:position pos:line="89" pos:column="31"/></name></expr></argument>)<pos:position pos:line="89" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="90" pos:column="9">die<pos:position pos:line="90" pos:column="12"/></name><argument_list pos:line="90" pos:column="12">(<argument><expr><literal type="string" pos:line="90" pos:column="13">"index file corrupt"<pos:position pos:line="90" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="35"/></expr_stmt>
}<pos:position pos:line="91" pos:column="2"/></block></function></unit>
