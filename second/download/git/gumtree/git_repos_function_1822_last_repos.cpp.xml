<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1822_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">file_change_m<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">p<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="42">struct<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">branch<pos:position pos:line="1" pos:column="55"/></name></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">b<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name><name pos:line="3" pos:column="16">struct<pos:position pos:line="3" pos:column="22"/></name> <name pos:line="3" pos:column="23">strbuf<pos:position pos:line="3" pos:column="29"/></name></name></type> <name pos:line="3" pos:column="30">uq<pos:position pos:line="3" pos:column="32"/></name> <init pos:line="3" pos:column="33">= <expr><name pos:line="3" pos:column="35">STRBUF_INIT<pos:position pos:line="3" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">endp<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">object_entry<pos:position pos:line="5" pos:column="28"/></name></name> <modifier pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="30">oe<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">object_id<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">oid<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">uint16_t<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">mode<pos:position pos:line="7" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="24">inline_data<pos:position pos:line="7" pos:column="35"/></name> <init pos:line="7" pos:column="36">= <expr><literal type="number" pos:line="7" pos:column="38">0<pos:position pos:line="7" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="40"/></decl_stmt>

	<expr_stmt><expr><name pos:line="9" pos:column="9">p<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">=<pos:position pos:line="9" pos:column="12"/></operator> <call><name pos:line="9" pos:column="13">get_mode<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><name pos:line="9" pos:column="22">p<pos:position pos:line="9" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="25">&amp;<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="26">mode<pos:position pos:line="9" pos:column="30"/></name></expr></argument>)<pos:position pos:line="9" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="32"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">p<pos:position pos:line="10" pos:column="15"/></name></expr>)<pos:position pos:line="10" pos:column="16"/></condition><then pos:line="10" pos:column="16">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="17">die<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><literal type="string" pos:line="11" pos:column="21">"Corrupt mode: %s"<pos:position pos:line="11" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="41">command_buf<pos:position pos:line="11" pos:column="52"/></name><operator pos:line="11" pos:column="52">.<pos:position pos:line="11" pos:column="53"/></operator><name pos:line="11" pos:column="53">buf<pos:position pos:line="11" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="58"/></expr_stmt></block></then></if>
	<switch pos:line="12" pos:column="9">switch <condition pos:line="12" pos:column="16">(<expr><name pos:line="12" pos:column="17">mode<pos:position pos:line="12" pos:column="21"/></name></expr>)<pos:position pos:line="12" pos:column="22"/></condition> <block pos:line="12" pos:column="23">{
	<case pos:line="13" pos:column="9">case <expr><literal type="number" pos:line="13" pos:column="14">0644<pos:position pos:line="13" pos:column="18"/></literal></expr>:<pos:position pos:line="13" pos:column="19"/></case>
	<case pos:line="14" pos:column="9">case <expr><literal type="number" pos:line="14" pos:column="14">0755<pos:position pos:line="14" pos:column="18"/></literal></expr>:<pos:position pos:line="14" pos:column="19"/></case>
		<expr_stmt><expr><name pos:line="15" pos:column="17">mode<pos:position pos:line="15" pos:column="21"/></name> <operator pos:line="15" pos:column="22">|=<pos:position pos:line="15" pos:column="24"/></operator> <name pos:line="15" pos:column="25">S_IFREG<pos:position pos:line="15" pos:column="32"/></name></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
	<case pos:line="16" pos:column="9">case <expr><name pos:line="16" pos:column="14">S_IFREG<pos:position pos:line="16" pos:column="21"/></name> <operator pos:line="16" pos:column="22">|<pos:position pos:line="16" pos:column="23"/></operator> <literal type="number" pos:line="16" pos:column="24">0644<pos:position pos:line="16" pos:column="28"/></literal></expr>:<pos:position pos:line="16" pos:column="29"/></case>
	<case pos:line="17" pos:column="9">case <expr><name pos:line="17" pos:column="14">S_IFREG<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">|<pos:position pos:line="17" pos:column="23"/></operator> <literal type="number" pos:line="17" pos:column="24">0755<pos:position pos:line="17" pos:column="28"/></literal></expr>:<pos:position pos:line="17" pos:column="29"/></case>
	<case pos:line="18" pos:column="9">case <expr><name pos:line="18" pos:column="14">S_IFLNK<pos:position pos:line="18" pos:column="21"/></name></expr>:<pos:position pos:line="18" pos:column="22"/></case>
	<case pos:line="19" pos:column="9">case <expr><name pos:line="19" pos:column="14">S_IFDIR<pos:position pos:line="19" pos:column="21"/></name></expr>:<pos:position pos:line="19" pos:column="22"/></case>
	<case pos:line="20" pos:column="9">case <expr><name pos:line="20" pos:column="14">S_IFGITLINK<pos:position pos:line="20" pos:column="25"/></name></expr>:<pos:position pos:line="20" pos:column="26"/></case>
		<comment type="block" pos:line="21" pos:column="17">/* ok */</comment>
		<break pos:line="22" pos:column="17">break;<pos:position pos:line="22" pos:column="23"/></break>
	<default pos:line="23" pos:column="9">default:<pos:position pos:line="23" pos:column="17"/></default>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">die<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><literal type="string" pos:line="24" pos:column="21">"Corrupt mode: %s"<pos:position pos:line="24" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="41">command_buf<pos:position pos:line="24" pos:column="52"/></name><operator pos:line="24" pos:column="52">.<pos:position pos:line="24" pos:column="53"/></operator><name pos:line="24" pos:column="53">buf<pos:position pos:line="24" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></switch>

	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">*<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">p<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">==<pos:position pos:line="27" pos:column="18"/></operator> <literal type="char" pos:line="27" pos:column="19">':'<pos:position pos:line="27" pos:column="22"/></literal></expr>)<pos:position pos:line="27" pos:column="23"/></condition><then pos:line="27" pos:column="23"> <block pos:line="27" pos:column="24">{
		<expr_stmt><expr><name pos:line="28" pos:column="17">oe<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">=<pos:position pos:line="28" pos:column="21"/></operator> <call><name pos:line="28" pos:column="22">find_mark<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><call><name pos:line="28" pos:column="32">parse_mark_ref_space<pos:position pos:line="28" pos:column="52"/></name><argument_list pos:line="28" pos:column="52">(<argument><expr><operator pos:line="28" pos:column="53">&amp;<pos:position pos:line="28" pos:column="58"/></operator><name pos:line="28" pos:column="54">p<pos:position pos:line="28" pos:column="55"/></name></expr></argument>)<pos:position pos:line="28" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">oidcpy<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">(<argument><expr><operator pos:line="29" pos:column="24">&amp;<pos:position pos:line="29" pos:column="29"/></operator><name pos:line="29" pos:column="25">oid<pos:position pos:line="29" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="30">&amp;<pos:position pos:line="29" pos:column="35"/></operator><name><name pos:line="29" pos:column="31">oe<pos:position pos:line="29" pos:column="33"/></name><operator pos:line="29" pos:column="33">-&gt;<pos:position pos:line="29" pos:column="38"/></operator><name pos:line="29" pos:column="35">idx<pos:position pos:line="29" pos:column="38"/></name><operator pos:line="29" pos:column="38">.<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="39">oid<pos:position pos:line="29" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="30" pos:column="10"/></block></then> <elseif pos:line="30" pos:column="11">else <if pos:line="30" pos:column="16">if <condition pos:line="30" pos:column="19">(<expr><call><name pos:line="30" pos:column="20">skip_prefix<pos:position pos:line="30" pos:column="31"/></name><argument_list pos:line="30" pos:column="31">(<argument><expr><name pos:line="30" pos:column="32">p<pos:position pos:line="30" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="35">"inline "<pos:position pos:line="30" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="30" pos:column="46">&amp;<pos:position pos:line="30" pos:column="51"/></operator><name pos:line="30" pos:column="47">p<pos:position pos:line="30" pos:column="48"/></name></expr></argument>)<pos:position pos:line="30" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="50"/></condition><then pos:line="30" pos:column="50"> <block pos:line="30" pos:column="51">{
		<expr_stmt><expr><name pos:line="31" pos:column="17">inline_data<pos:position pos:line="31" pos:column="28"/></name> <operator pos:line="31" pos:column="29">=<pos:position pos:line="31" pos:column="30"/></operator> <literal type="number" pos:line="31" pos:column="31">1<pos:position pos:line="31" pos:column="32"/></literal></expr>;<pos:position pos:line="31" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="32" pos:column="17">oe<pos:position pos:line="32" pos:column="19"/></name> <operator pos:line="32" pos:column="20">=<pos:position pos:line="32" pos:column="21"/></operator> <name pos:line="32" pos:column="22">NULL<pos:position pos:line="32" pos:column="26"/></name></expr>;<pos:position pos:line="32" pos:column="27"/></expr_stmt> <comment type="block" pos:line="32" pos:column="28">/* not used with inline_data, but makes gcc happy */</comment>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if></elseif> <else pos:line="33" pos:column="11">else <block pos:line="33" pos:column="16">{
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><call><name pos:line="34" pos:column="21">parse_oid_hex<pos:position pos:line="34" pos:column="34"/></name><argument_list pos:line="34" pos:column="34">(<argument><expr><name pos:line="34" pos:column="35">p<pos:position pos:line="34" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="38">&amp;<pos:position pos:line="34" pos:column="43"/></operator><name pos:line="34" pos:column="39">oid<pos:position pos:line="34" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="44">&amp;<pos:position pos:line="34" pos:column="49"/></operator><name pos:line="34" pos:column="45">p<pos:position pos:line="34" pos:column="46"/></name></expr></argument>)<pos:position pos:line="34" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="48"/></condition><then pos:line="34" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="25">die<pos:position pos:line="35" pos:column="28"/></name><argument_list pos:line="35" pos:column="28">(<argument><expr><literal type="string" pos:line="35" pos:column="29">"Invalid dataref: %s"<pos:position pos:line="35" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="52">command_buf<pos:position pos:line="35" pos:column="63"/></name><operator pos:line="35" pos:column="63">.<pos:position pos:line="35" pos:column="64"/></operator><name pos:line="35" pos:column="64">buf<pos:position pos:line="35" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="69"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="36" pos:column="17">oe<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">=<pos:position pos:line="36" pos:column="21"/></operator> <call><name pos:line="36" pos:column="22">find_object<pos:position pos:line="36" pos:column="33"/></name><argument_list pos:line="36" pos:column="33">(<argument><expr><operator pos:line="36" pos:column="34">&amp;<pos:position pos:line="36" pos:column="39"/></operator><name pos:line="36" pos:column="35">oid<pos:position pos:line="36" pos:column="38"/></name></expr></argument>)<pos:position pos:line="36" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="40"/></expr_stmt>
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><operator pos:line="37" pos:column="21">*<pos:position pos:line="37" pos:column="22"/></operator><name pos:line="37" pos:column="22">p<pos:position pos:line="37" pos:column="23"/></name><operator pos:line="37" pos:column="23">++<pos:position pos:line="37" pos:column="25"/></operator> <operator pos:line="37" pos:column="26">!=<pos:position pos:line="37" pos:column="28"/></operator> <literal type="char" pos:line="37" pos:column="29">' '<pos:position pos:line="37" pos:column="32"/></literal></expr>)<pos:position pos:line="37" pos:column="33"/></condition><then pos:line="37" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="25">die<pos:position pos:line="38" pos:column="28"/></name><argument_list pos:line="38" pos:column="28">(<argument><expr><literal type="string" pos:line="38" pos:column="29">"Missing space after SHA1: %s"<pos:position pos:line="38" pos:column="59"/></literal></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="61">command_buf<pos:position pos:line="38" pos:column="72"/></name><operator pos:line="38" pos:column="72">.<pos:position pos:line="38" pos:column="73"/></operator><name pos:line="38" pos:column="73">buf<pos:position pos:line="38" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="78"/></expr_stmt></block></then></if>
	}<pos:position pos:line="39" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="41" pos:column="9">strbuf_reset<pos:position pos:line="41" pos:column="21"/></name><argument_list pos:line="41" pos:column="21">(<argument><expr><operator pos:line="41" pos:column="22">&amp;<pos:position pos:line="41" pos:column="27"/></operator><name pos:line="41" pos:column="23">uq<pos:position pos:line="41" pos:column="25"/></name></expr></argument>)<pos:position pos:line="41" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><operator pos:line="42" pos:column="13">!<pos:position pos:line="42" pos:column="14"/></operator><call><name pos:line="42" pos:column="14">unquote_c_style<pos:position pos:line="42" pos:column="29"/></name><argument_list pos:line="42" pos:column="29">(<argument><expr><operator pos:line="42" pos:column="30">&amp;<pos:position pos:line="42" pos:column="35"/></operator><name pos:line="42" pos:column="31">uq<pos:position pos:line="42" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="35">p<pos:position pos:line="42" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="38">&amp;<pos:position pos:line="42" pos:column="43"/></operator><name pos:line="42" pos:column="39">endp<pos:position pos:line="42" pos:column="43"/></name></expr></argument>)<pos:position pos:line="42" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="45"/></condition><then pos:line="42" pos:column="45"> <block pos:line="42" pos:column="46">{
		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><operator pos:line="43" pos:column="21">*<pos:position pos:line="43" pos:column="22"/></operator><name pos:line="43" pos:column="22">endp<pos:position pos:line="43" pos:column="26"/></name></expr>)<pos:position pos:line="43" pos:column="27"/></condition><then pos:line="43" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="25">die<pos:position pos:line="44" pos:column="28"/></name><argument_list pos:line="44" pos:column="28">(<argument><expr><literal type="string" pos:line="44" pos:column="29">"Garbage after path in: %s"<pos:position pos:line="44" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="58">command_buf<pos:position pos:line="44" pos:column="69"/></name><operator pos:line="44" pos:column="69">.<pos:position pos:line="44" pos:column="70"/></operator><name pos:line="44" pos:column="70">buf<pos:position pos:line="44" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="75"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="45" pos:column="17">p<pos:position pos:line="45" pos:column="18"/></name> <operator pos:line="45" pos:column="19">=<pos:position pos:line="45" pos:column="20"/></operator> <name><name pos:line="45" pos:column="21">uq<pos:position pos:line="45" pos:column="23"/></name><operator pos:line="45" pos:column="23">.<pos:position pos:line="45" pos:column="24"/></operator><name pos:line="45" pos:column="24">buf<pos:position pos:line="45" pos:column="27"/></name></name></expr>;<pos:position pos:line="45" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="46" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="48" pos:column="9">/* Git does not track empty, non-toplevel directories. */</comment>
	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><call><name pos:line="49" pos:column="13">S_ISDIR<pos:position pos:line="49" pos:column="20"/></name><argument_list pos:line="49" pos:column="20">(<argument><expr><name pos:line="49" pos:column="21">mode<pos:position pos:line="49" pos:column="25"/></name></expr></argument>)<pos:position pos:line="49" pos:column="26"/></argument_list></call> <operator pos:line="49" pos:column="27">&amp;&amp;<pos:position pos:line="49" pos:column="37"/></operator> <call><name pos:line="49" pos:column="30">is_empty_tree_oid<pos:position pos:line="49" pos:column="47"/></name><argument_list pos:line="49" pos:column="47">(<argument><expr><operator pos:line="49" pos:column="48">&amp;<pos:position pos:line="49" pos:column="53"/></operator><name pos:line="49" pos:column="49">oid<pos:position pos:line="49" pos:column="52"/></name></expr></argument>)<pos:position pos:line="49" pos:column="53"/></argument_list></call> <operator pos:line="49" pos:column="54">&amp;&amp;<pos:position pos:line="49" pos:column="64"/></operator> <operator pos:line="49" pos:column="57">*<pos:position pos:line="49" pos:column="58"/></operator><name pos:line="49" pos:column="58">p<pos:position pos:line="49" pos:column="59"/></name></expr>)<pos:position pos:line="49" pos:column="60"/></condition><then pos:line="49" pos:column="60"> <block pos:line="49" pos:column="61">{
		<expr_stmt><expr><call><name pos:line="50" pos:column="17">tree_content_remove<pos:position pos:line="50" pos:column="36"/></name><argument_list pos:line="50" pos:column="36">(<argument><expr><operator pos:line="50" pos:column="37">&amp;<pos:position pos:line="50" pos:column="42"/></operator><name><name pos:line="50" pos:column="38">b<pos:position pos:line="50" pos:column="39"/></name><operator pos:line="50" pos:column="39">-&gt;<pos:position pos:line="50" pos:column="44"/></operator><name pos:line="50" pos:column="41">branch_tree<pos:position pos:line="50" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="54">p<pos:position pos:line="50" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="57">NULL<pos:position pos:line="50" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="63">0<pos:position pos:line="50" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="66"/></expr_stmt>
		<return pos:line="51" pos:column="17">return;<pos:position pos:line="51" pos:column="24"/></return>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>

	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><call><name pos:line="54" pos:column="13">S_ISGITLINK<pos:position pos:line="54" pos:column="24"/></name><argument_list pos:line="54" pos:column="24">(<argument><expr><name pos:line="54" pos:column="25">mode<pos:position pos:line="54" pos:column="29"/></name></expr></argument>)<pos:position pos:line="54" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="31"/></condition><then pos:line="54" pos:column="31"> <block pos:line="54" pos:column="32">{
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><name pos:line="55" pos:column="21">inline_data<pos:position pos:line="55" pos:column="32"/></name></expr>)<pos:position pos:line="55" pos:column="33"/></condition><then pos:line="55" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="25">die<pos:position pos:line="56" pos:column="28"/></name><argument_list pos:line="56" pos:column="28">(<argument><expr><literal type="string" pos:line="56" pos:column="29">"Git links cannot be specified 'inline': %s"<pos:position pos:line="56" pos:column="73"/></literal></expr></argument>,
				<argument><expr><name><name pos:line="57" pos:column="33">command_buf<pos:position pos:line="57" pos:column="44"/></name><operator pos:line="57" pos:column="44">.<pos:position pos:line="57" pos:column="45"/></operator><name pos:line="57" pos:column="45">buf<pos:position pos:line="57" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="50"/></expr_stmt></block></then>
		<elseif pos:line="58" pos:column="17">else <if pos:line="58" pos:column="22">if <condition pos:line="58" pos:column="25">(<expr><name pos:line="58" pos:column="26">oe<pos:position pos:line="58" pos:column="28"/></name></expr>)<pos:position pos:line="58" pos:column="29"/></condition><then pos:line="58" pos:column="29"> <block pos:line="58" pos:column="30">{
			<if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">(<expr><name><name pos:line="59" pos:column="29">oe<pos:position pos:line="59" pos:column="31"/></name><operator pos:line="59" pos:column="31">-&gt;<pos:position pos:line="59" pos:column="36"/></operator><name pos:line="59" pos:column="33">type<pos:position pos:line="59" pos:column="37"/></name></name> <operator pos:line="59" pos:column="38">!=<pos:position pos:line="59" pos:column="40"/></operator> <name pos:line="59" pos:column="41">OBJ_COMMIT<pos:position pos:line="59" pos:column="51"/></name></expr>)<pos:position pos:line="59" pos:column="52"/></condition><then pos:line="59" pos:column="52">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="33">die<pos:position pos:line="60" pos:column="36"/></name><argument_list pos:line="60" pos:column="36">(<argument><expr><literal type="string" pos:line="60" pos:column="37">"Not a commit (actually a %s): %s"<pos:position pos:line="60" pos:column="71"/></literal></expr></argument>,
					<argument><expr><name><typename pos:line="61" pos:column="41">typename<pos:position pos:line="61" pos:column="49"/></typename></name><operator pos:line="61" pos:column="49">(<pos:position pos:line="61" pos:column="50"/></operator><name><name pos:line="61" pos:column="50">oe<pos:position pos:line="61" pos:column="52"/></name><operator pos:line="61" pos:column="52">-&gt;<pos:position pos:line="61" pos:column="57"/></operator><name pos:line="61" pos:column="54">type<pos:position pos:line="61" pos:column="58"/></name></name><operator pos:line="61" pos:column="58">)<pos:position pos:line="61" pos:column="59"/></operator></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="61">command_buf<pos:position pos:line="61" pos:column="72"/></name><operator pos:line="61" pos:column="72">.<pos:position pos:line="61" pos:column="73"/></operator><name pos:line="61" pos:column="73">buf<pos:position pos:line="61" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="78"/></expr_stmt></block></then></if>
		}<pos:position pos:line="62" pos:column="18"/></block></then></if></elseif></if>
		<comment type="block" pos:line="63" pos:column="17">/*
		 * Accept the sha1 without checking; it expected to be in
		 * another repository.
		 */</comment>
	}<pos:position pos:line="67" pos:column="10"/></block></then> <elseif pos:line="67" pos:column="11">else <if pos:line="67" pos:column="16">if <condition pos:line="67" pos:column="19">(<expr><name pos:line="67" pos:column="20">inline_data<pos:position pos:line="67" pos:column="31"/></name></expr>)<pos:position pos:line="67" pos:column="32"/></condition><then pos:line="67" pos:column="32"> <block pos:line="67" pos:column="33">{
		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><call><name pos:line="68" pos:column="21">S_ISDIR<pos:position pos:line="68" pos:column="28"/></name><argument_list pos:line="68" pos:column="28">(<argument><expr><name pos:line="68" pos:column="29">mode<pos:position pos:line="68" pos:column="33"/></name></expr></argument>)<pos:position pos:line="68" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="68" pos:column="35"/></condition><then pos:line="68" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="25">die<pos:position pos:line="69" pos:column="28"/></name><argument_list pos:line="69" pos:column="28">(<argument><expr><literal type="string" pos:line="69" pos:column="29">"Directories cannot be specified 'inline': %s"<pos:position pos:line="69" pos:column="75"/></literal></expr></argument>,
				<argument><expr><name><name pos:line="70" pos:column="33">command_buf<pos:position pos:line="70" pos:column="44"/></name><operator pos:line="70" pos:column="44">.<pos:position pos:line="70" pos:column="45"/></operator><name pos:line="70" pos:column="45">buf<pos:position pos:line="70" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="50"/></expr_stmt></block></then></if>
		<if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><name pos:line="71" pos:column="21">p<pos:position pos:line="71" pos:column="22"/></name> <operator pos:line="71" pos:column="23">!=<pos:position pos:line="71" pos:column="25"/></operator> <name><name pos:line="71" pos:column="26">uq<pos:position pos:line="71" pos:column="28"/></name><operator pos:line="71" pos:column="28">.<pos:position pos:line="71" pos:column="29"/></operator><name pos:line="71" pos:column="29">buf<pos:position pos:line="71" pos:column="32"/></name></name></expr>)<pos:position pos:line="71" pos:column="33"/></condition><then pos:line="71" pos:column="33"> <block pos:line="71" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="72" pos:column="25">strbuf_addstr<pos:position pos:line="72" pos:column="38"/></name><argument_list pos:line="72" pos:column="38">(<argument><expr><operator pos:line="72" pos:column="39">&amp;<pos:position pos:line="72" pos:column="44"/></operator><name pos:line="72" pos:column="40">uq<pos:position pos:line="72" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="44">p<pos:position pos:line="72" pos:column="45"/></name></expr></argument>)<pos:position pos:line="72" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name pos:line="73" pos:column="25">p<pos:position pos:line="73" pos:column="26"/></name> <operator pos:line="73" pos:column="27">=<pos:position pos:line="73" pos:column="28"/></operator> <name><name pos:line="73" pos:column="29">uq<pos:position pos:line="73" pos:column="31"/></name><operator pos:line="73" pos:column="31">.<pos:position pos:line="73" pos:column="32"/></operator><name pos:line="73" pos:column="32">buf<pos:position pos:line="73" pos:column="35"/></name></name></expr>;<pos:position pos:line="73" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="74" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="75" pos:column="17">read_next_command<pos:position pos:line="75" pos:column="34"/></name><argument_list pos:line="75" pos:column="34">()<pos:position pos:line="75" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="76" pos:column="17">parse_and_store_blob<pos:position pos:line="76" pos:column="37"/></name><argument_list pos:line="76" pos:column="37">(<argument><expr><operator pos:line="76" pos:column="38">&amp;<pos:position pos:line="76" pos:column="43"/></operator><name pos:line="76" pos:column="39">last_blob<pos:position pos:line="76" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="76" pos:column="50">&amp;<pos:position pos:line="76" pos:column="55"/></operator><name pos:line="76" pos:column="51">oid<pos:position pos:line="76" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="56">0<pos:position pos:line="76" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="59"/></expr_stmt>
	}<pos:position pos:line="77" pos:column="10"/></block></then></if></elseif> <else pos:line="77" pos:column="11">else <block pos:line="77" pos:column="16">{
		<decl_stmt><decl><type><name><name pos:line="78" pos:column="17">enum<pos:position pos:line="78" pos:column="21"/></name> <name pos:line="78" pos:column="22">object_type<pos:position pos:line="78" pos:column="33"/></name></name></type> <name pos:line="78" pos:column="34">expected<pos:position pos:line="78" pos:column="42"/></name> <init pos:line="78" pos:column="43">= <expr><ternary><condition><expr><call><name pos:line="78" pos:column="45">S_ISDIR<pos:position pos:line="78" pos:column="52"/></name><argument_list pos:line="78" pos:column="52">(<argument><expr><name pos:line="78" pos:column="53">mode<pos:position pos:line="78" pos:column="57"/></name></expr></argument>)<pos:position pos:line="78" pos:column="58"/></argument_list></call></expr> ?<pos:position pos:line="78" pos:column="60"/></condition><then pos:line="78" pos:column="60">
						<expr><name pos:line="79" pos:column="49">OBJ_TREE<pos:position pos:line="79" pos:column="57"/></name></expr></then><else pos:line="79" pos:column="57">: <expr><name pos:line="79" pos:column="59">OBJ_BLOB<pos:position pos:line="79" pos:column="67"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="79" pos:column="68"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="80" pos:column="17">enum<pos:position pos:line="80" pos:column="21"/></name> <name pos:line="80" pos:column="22">object_type<pos:position pos:line="80" pos:column="33"/></name></name></type> <name pos:line="80" pos:column="34">type<pos:position pos:line="80" pos:column="38"/></name> <init pos:line="80" pos:column="39">= <expr><ternary><condition><expr><name pos:line="80" pos:column="41">oe<pos:position pos:line="80" pos:column="43"/></name></expr> ?<pos:position pos:line="80" pos:column="45"/></condition><then pos:line="80" pos:column="45"> <expr><name><name pos:line="80" pos:column="46">oe<pos:position pos:line="80" pos:column="48"/></name><operator pos:line="80" pos:column="48">-&gt;<pos:position pos:line="80" pos:column="53"/></operator><name pos:line="80" pos:column="50">type<pos:position pos:line="80" pos:column="54"/></name></name></expr> <pos:position pos:line="80" pos:column="55"/></then><else pos:line="80" pos:column="55">:
					<expr><call><name pos:line="81" pos:column="41">sha1_object_info<pos:position pos:line="81" pos:column="57"/></name><argument_list pos:line="81" pos:column="57">(<argument><expr><name><name pos:line="81" pos:column="58">oid<pos:position pos:line="81" pos:column="61"/></name><operator pos:line="81" pos:column="61">.<pos:position pos:line="81" pos:column="62"/></operator><name pos:line="81" pos:column="62">hash<pos:position pos:line="81" pos:column="66"/></name></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="68">NULL<pos:position pos:line="81" pos:column="72"/></name></expr></argument>)<pos:position pos:line="81" pos:column="73"/></argument_list></call></expr></else></ternary></expr></init></decl>;<pos:position pos:line="81" pos:column="74"/></decl_stmt>
		<if pos:line="82" pos:column="17">if <condition pos:line="82" pos:column="20">(<expr><name pos:line="82" pos:column="21">type<pos:position pos:line="82" pos:column="25"/></name> <operator pos:line="82" pos:column="26">&lt;<pos:position pos:line="82" pos:column="30"/></operator> <literal type="number" pos:line="82" pos:column="28">0<pos:position pos:line="82" pos:column="29"/></literal></expr>)<pos:position pos:line="82" pos:column="30"/></condition><then pos:line="82" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="83" pos:column="25">die<pos:position pos:line="83" pos:column="28"/></name><argument_list pos:line="83" pos:column="28">(<argument><expr><literal type="string" pos:line="83" pos:column="29">"%s not found: %s"<pos:position pos:line="83" pos:column="47"/></literal></expr></argument>,
					<argument><expr><ternary><condition><expr><call><name pos:line="84" pos:column="41">S_ISDIR<pos:position pos:line="84" pos:column="48"/></name><argument_list pos:line="84" pos:column="48">(<argument><expr><name pos:line="84" pos:column="49">mode<pos:position pos:line="84" pos:column="53"/></name></expr></argument>)<pos:position pos:line="84" pos:column="54"/></argument_list></call></expr> ?<pos:position pos:line="84" pos:column="56"/></condition><then pos:line="84" pos:column="56">  <expr><literal type="string" pos:line="84" pos:column="58">"Tree"<pos:position pos:line="84" pos:column="64"/></literal></expr> <pos:position pos:line="84" pos:column="65"/></then><else pos:line="84" pos:column="65">: <expr><literal type="string" pos:line="84" pos:column="67">"Blob"<pos:position pos:line="84" pos:column="73"/></literal></expr></else></ternary></expr></argument>,
					<argument><expr><name><name pos:line="85" pos:column="41">command_buf<pos:position pos:line="85" pos:column="52"/></name><operator pos:line="85" pos:column="52">.<pos:position pos:line="85" pos:column="53"/></operator><name pos:line="85" pos:column="53">buf<pos:position pos:line="85" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="85" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="58"/></expr_stmt></block></then></if>
		<if pos:line="86" pos:column="17">if <condition pos:line="86" pos:column="20">(<expr><name pos:line="86" pos:column="21">type<pos:position pos:line="86" pos:column="25"/></name> <operator pos:line="86" pos:column="26">!=<pos:position pos:line="86" pos:column="28"/></operator> <name pos:line="86" pos:column="29">expected<pos:position pos:line="86" pos:column="37"/></name></expr>)<pos:position pos:line="86" pos:column="38"/></condition><then pos:line="86" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="87" pos:column="25">die<pos:position pos:line="87" pos:column="28"/></name><argument_list pos:line="87" pos:column="28">(<argument><expr><literal type="string" pos:line="87" pos:column="29">"Not a %s (actually a %s): %s"<pos:position pos:line="87" pos:column="59"/></literal></expr></argument>,
				<argument><expr><name><typename pos:line="88" pos:column="33">typename<pos:position pos:line="88" pos:column="41"/></typename></name><operator pos:line="88" pos:column="41">(<pos:position pos:line="88" pos:column="42"/></operator><name pos:line="88" pos:column="42">expected<pos:position pos:line="88" pos:column="50"/></name><operator pos:line="88" pos:column="50">)<pos:position pos:line="88" pos:column="51"/></operator></expr></argument>, <argument><expr><name><typename pos:line="88" pos:column="53">typename<pos:position pos:line="88" pos:column="61"/></typename></name><operator pos:line="88" pos:column="61">(<pos:position pos:line="88" pos:column="62"/></operator><name pos:line="88" pos:column="62">type<pos:position pos:line="88" pos:column="66"/></name><operator pos:line="88" pos:column="66">)<pos:position pos:line="88" pos:column="67"/></operator></expr></argument>,
				<argument><expr><name><name pos:line="89" pos:column="33">command_buf<pos:position pos:line="89" pos:column="44"/></name><operator pos:line="89" pos:column="44">.<pos:position pos:line="89" pos:column="45"/></operator><name pos:line="89" pos:column="45">buf<pos:position pos:line="89" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="89" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="50"/></expr_stmt></block></then></if>
	}<pos:position pos:line="90" pos:column="10"/></block></else></if>

	<if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><operator pos:line="92" pos:column="13">!<pos:position pos:line="92" pos:column="14"/></operator><operator pos:line="92" pos:column="14">*<pos:position pos:line="92" pos:column="15"/></operator><name pos:line="92" pos:column="15">p<pos:position pos:line="92" pos:column="16"/></name></expr>)<pos:position pos:line="92" pos:column="17"/></condition><then pos:line="92" pos:column="17"> <block pos:line="92" pos:column="18">{
		<expr_stmt><expr><call><name pos:line="93" pos:column="17">tree_content_replace<pos:position pos:line="93" pos:column="37"/></name><argument_list pos:line="93" pos:column="37">(<argument><expr><operator pos:line="93" pos:column="38">&amp;<pos:position pos:line="93" pos:column="43"/></operator><name><name pos:line="93" pos:column="39">b<pos:position pos:line="93" pos:column="40"/></name><operator pos:line="93" pos:column="40">-&gt;<pos:position pos:line="93" pos:column="45"/></operator><name pos:line="93" pos:column="42">branch_tree<pos:position pos:line="93" pos:column="53"/></name></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="55">&amp;<pos:position pos:line="93" pos:column="60"/></operator><name pos:line="93" pos:column="56">oid<pos:position pos:line="93" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="61">mode<pos:position pos:line="93" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="67">NULL<pos:position pos:line="93" pos:column="71"/></name></expr></argument>)<pos:position pos:line="93" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="73"/></expr_stmt>
		<return pos:line="94" pos:column="17">return;<pos:position pos:line="94" pos:column="24"/></return>
	}<pos:position pos:line="95" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="96" pos:column="9">tree_content_set<pos:position pos:line="96" pos:column="25"/></name><argument_list pos:line="96" pos:column="25">(<argument><expr><operator pos:line="96" pos:column="26">&amp;<pos:position pos:line="96" pos:column="31"/></operator><name><name pos:line="96" pos:column="27">b<pos:position pos:line="96" pos:column="28"/></name><operator pos:line="96" pos:column="28">-&gt;<pos:position pos:line="96" pos:column="33"/></operator><name pos:line="96" pos:column="30">branch_tree<pos:position pos:line="96" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="43">p<pos:position pos:line="96" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="96" pos:column="46">&amp;<pos:position pos:line="96" pos:column="51"/></operator><name pos:line="96" pos:column="47">oid<pos:position pos:line="96" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="52">mode<pos:position pos:line="96" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="58">NULL<pos:position pos:line="96" pos:column="62"/></name></expr></argument>)<pos:position pos:line="96" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="64"/></expr_stmt>
}<pos:position pos:line="97" pos:column="2"/></block></function></unit>
