<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6739_git-2.13.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type> <name pos:line="1" pos:column="8">nedprealloc<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">nedpool<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">p<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="32">void<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">mem<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">size_t<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">size<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="55"/></parameter_list> <name pos:line="1" pos:column="56">THROWSPEC<pos:position pos:line="1" pos:column="65"/></name>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">void<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">ret<pos:position pos:line="3" pos:column="18"/></name><init pos:line="3" pos:column="18">=<expr><literal type="number" pos:line="3" pos:column="19">0<pos:position pos:line="3" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">threadcache<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">tc<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">mymspace<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
	<if pos:line="6" pos:column="9">if<condition pos:line="6" pos:column="11">(<expr><operator pos:line="6" pos:column="12">!<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">mem<pos:position pos:line="6" pos:column="16"/></name></expr>)<pos:position pos:line="6" pos:column="17"/></condition><then pos:line="6" pos:column="17"> <block type="pseudo"><return pos:line="6" pos:column="18">return <expr><call><name pos:line="6" pos:column="25">nedpmalloc<pos:position pos:line="6" pos:column="35"/></name><argument_list pos:line="6" pos:column="35">(<argument><expr><name pos:line="6" pos:column="36">p<pos:position pos:line="6" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="39">size<pos:position pos:line="6" pos:column="43"/></name></expr></argument>)<pos:position pos:line="6" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="45"/></return></block></then></if>
	<expr_stmt><expr><call><name pos:line="7" pos:column="9">GetThreadCache<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">(<argument><expr><operator pos:line="7" pos:column="24">&amp;<pos:position pos:line="7" pos:column="29"/></operator><name pos:line="7" pos:column="25">p<pos:position pos:line="7" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="28">&amp;<pos:position pos:line="7" pos:column="33"/></operator><name pos:line="7" pos:column="29">tc<pos:position pos:line="7" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="33">&amp;<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="34">mymspace<pos:position pos:line="7" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="44">&amp;<pos:position pos:line="7" pos:column="49"/></operator><name pos:line="7" pos:column="45">size<pos:position pos:line="7" pos:column="49"/></name></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="51"/></expr_stmt>
<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><name pos:line="8" pos:column="5">THREADCACHEMAX<pos:position pos:line="8" pos:column="19"/></name></expr></cpp:if>
	<if pos:line="9" pos:column="9">if<condition pos:line="9" pos:column="11">(<expr><name pos:line="9" pos:column="12">tc<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">&amp;&amp;<pos:position pos:line="9" pos:column="25"/></operator> <name pos:line="9" pos:column="18">size<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">&amp;&amp;<pos:position pos:line="9" pos:column="33"/></operator> <name pos:line="9" pos:column="26">size<pos:position pos:line="9" pos:column="30"/></name><operator pos:line="9" pos:column="30">&lt;=<pos:position pos:line="9" pos:column="35"/></operator><name pos:line="9" pos:column="32">THREADCACHEMAX<pos:position pos:line="9" pos:column="46"/></name></expr>)<pos:position pos:line="9" pos:column="47"/></condition><then pos:line="9" pos:column="47">
	<block pos:line="10" pos:column="9">{	<comment type="block" pos:line="10" pos:column="17">/* Use the thread cache */</comment>
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">size_t<pos:position pos:line="11" pos:column="23"/></name></type> <name pos:line="11" pos:column="24">memsize<pos:position pos:line="11" pos:column="31"/></name><init pos:line="11" pos:column="31">=<expr><call><name pos:line="11" pos:column="32">nedblksize<pos:position pos:line="11" pos:column="42"/></name><argument_list pos:line="11" pos:column="42">(<argument><expr><name pos:line="11" pos:column="43">mem<pos:position pos:line="11" pos:column="46"/></name></expr></argument>)<pos:position pos:line="11" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="48"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">assert<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><name pos:line="12" pos:column="24">memsize<pos:position pos:line="12" pos:column="31"/></name></expr></argument>)<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt>
		<if pos:line="13" pos:column="17">if<condition pos:line="13" pos:column="19">(<expr><operator pos:line="13" pos:column="20">(<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="21">ret<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">=<pos:position pos:line="13" pos:column="25"/></operator><call><name pos:line="13" pos:column="25">threadcache_malloc<pos:position pos:line="13" pos:column="43"/></name><argument_list pos:line="13" pos:column="43">(<argument><expr><name pos:line="13" pos:column="44">p<pos:position pos:line="13" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="47">tc<pos:position pos:line="13" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="51">&amp;<pos:position pos:line="13" pos:column="56"/></operator><name pos:line="13" pos:column="52">size<pos:position pos:line="13" pos:column="56"/></name></expr></argument>)<pos:position pos:line="13" pos:column="57"/></argument_list></call><operator pos:line="13" pos:column="57">)<pos:position pos:line="13" pos:column="58"/></operator></expr>)<pos:position pos:line="13" pos:column="59"/></condition><then pos:line="13" pos:column="59">
		<block pos:line="14" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="15" pos:column="25">memcpy<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><name pos:line="15" pos:column="32">ret<pos:position pos:line="15" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="37">mem<pos:position pos:line="15" pos:column="40"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="15" pos:column="42">memsize<pos:position pos:line="15" pos:column="49"/></name><operator pos:line="15" pos:column="49">&lt;<pos:position pos:line="15" pos:column="53"/></operator><name pos:line="15" pos:column="50">size<pos:position pos:line="15" pos:column="54"/></name></expr> ?<pos:position pos:line="15" pos:column="56"/></condition><then pos:line="15" pos:column="56"> <expr><name pos:line="15" pos:column="57">memsize<pos:position pos:line="15" pos:column="64"/></name></expr> <pos:position pos:line="15" pos:column="65"/></then><else pos:line="15" pos:column="65">: <expr><name pos:line="15" pos:column="67">size<pos:position pos:line="15" pos:column="71"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="15" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="73"/></expr_stmt>
			<if pos:line="16" pos:column="25">if<condition pos:line="16" pos:column="27">(<expr><name pos:line="16" pos:column="28">memsize<pos:position pos:line="16" pos:column="35"/></name><operator pos:line="16" pos:column="35">&lt;=<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="37">THREADCACHEMAX<pos:position pos:line="16" pos:column="51"/></name></expr>)<pos:position pos:line="16" pos:column="52"/></condition><then pos:line="16" pos:column="52">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="33">threadcache_free<pos:position pos:line="17" pos:column="49"/></name><argument_list pos:line="17" pos:column="49">(<argument><expr><name pos:line="17" pos:column="50">p<pos:position pos:line="17" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="53">tc<pos:position pos:line="17" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="57">mymspace<pos:position pos:line="17" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="67">mem<pos:position pos:line="17" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="72">memsize<pos:position pos:line="17" pos:column="79"/></name></expr></argument>)<pos:position pos:line="17" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="81"/></expr_stmt></block></then>
			<else pos:line="18" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="33">mspace_free<pos:position pos:line="19" pos:column="44"/></name><argument_list pos:line="19" pos:column="44">(<argument><expr><literal type="number" pos:line="19" pos:column="45">0<pos:position pos:line="19" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="48">mem<pos:position pos:line="19" pos:column="51"/></name></expr></argument>)<pos:position pos:line="19" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="53"/></expr_stmt></block></else></if>
		}<pos:position pos:line="20" pos:column="18"/></block></then></if>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
	<if pos:line="23" pos:column="9">if<condition pos:line="23" pos:column="11">(<expr><operator pos:line="23" pos:column="12">!<pos:position pos:line="23" pos:column="13"/></operator><name pos:line="23" pos:column="13">ret<pos:position pos:line="23" pos:column="16"/></name></expr>)<pos:position pos:line="23" pos:column="17"/></condition><then pos:line="23" pos:column="17">
	<block pos:line="24" pos:column="9">{	<comment type="block" pos:line="24" pos:column="17">/* Reallocs always happen in the mspace they happened in, so skip
		locking the preferred mspace for this thread */</comment>
		<expr_stmt><expr><name pos:line="26" pos:column="17">ret<pos:position pos:line="26" pos:column="20"/></name><operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator><call><name pos:line="26" pos:column="21">mspace_realloc<pos:position pos:line="26" pos:column="35"/></name><argument_list pos:line="26" pos:column="35">(<argument><expr><literal type="number" pos:line="26" pos:column="36">0<pos:position pos:line="26" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="39">mem<pos:position pos:line="26" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="44">size<pos:position pos:line="26" pos:column="48"/></name></expr></argument>)<pos:position pos:line="26" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>
	<return pos:line="28" pos:column="9">return <expr><name pos:line="28" pos:column="16">ret<pos:position pos:line="28" pos:column="19"/></name></expr>;<pos:position pos:line="28" pos:column="20"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
