<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5073_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">show_tree<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">unsigned<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">sha1<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <name pos:line="1" pos:column="55">char<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">base<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">int<pos:position pos:line="1" pos:column="70"/></name></type> <name pos:line="1" pos:column="71">baselen<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">pathname<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">unsigned<pos:position pos:line="2" pos:column="47"/></name></type> <name pos:line="2" pos:column="48">mode<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">int<pos:position pos:line="2" pos:column="57"/></name></type> <name pos:line="2" pos:column="58">stage<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="65">void<pos:position pos:line="2" pos:column="69"/></name> <modifier pos:line="2" pos:column="70">*<pos:position pos:line="2" pos:column="71"/></modifier></type><name pos:line="2" pos:column="71">context<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="79"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">retval<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><literal type="number" pos:line="4" pos:column="22">0<pos:position pos:line="4" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">type<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name pos:line="5" pos:column="28">blob_type<pos:position pos:line="5" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><call><name pos:line="7" pos:column="13">S_ISGITLINK<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">(<argument><expr><name pos:line="7" pos:column="25">mode<pos:position pos:line="7" pos:column="29"/></name></expr></argument>)<pos:position pos:line="7" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="31"/></condition><then pos:line="7" pos:column="31"> <block pos:line="7" pos:column="32">{
		<comment type="block" pos:line="8" pos:column="17">/*
		 * Maybe we want to have some recursive version here?
		 *
		 * Something similar to this incomplete example:
		 *
		if (show_subprojects(base, baselen, pathname))
			retval = READ_TREE_RECURSIVE;
		 *
		 */</comment>
		<expr_stmt><expr><name pos:line="17" pos:column="17">type<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <name pos:line="17" pos:column="24">commit_type<pos:position pos:line="17" pos:column="35"/></name></expr>;<pos:position pos:line="17" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></then> <elseif pos:line="18" pos:column="11">else <if pos:line="18" pos:column="16">if <condition pos:line="18" pos:column="19">(<expr><call><name pos:line="18" pos:column="20">S_ISDIR<pos:position pos:line="18" pos:column="27"/></name><argument_list pos:line="18" pos:column="27">(<argument><expr><name pos:line="18" pos:column="28">mode<pos:position pos:line="18" pos:column="32"/></name></expr></argument>)<pos:position pos:line="18" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="34"/></condition><then pos:line="18" pos:column="34"> <block pos:line="18" pos:column="35">{
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><call><name pos:line="19" pos:column="21">show_recursive<pos:position pos:line="19" pos:column="35"/></name><argument_list pos:line="19" pos:column="35">(<argument><expr><name pos:line="19" pos:column="36">base<pos:position pos:line="19" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="42">baselen<pos:position pos:line="19" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="51">pathname<pos:position pos:line="19" pos:column="59"/></name></expr></argument>)<pos:position pos:line="19" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="61"/></condition><then pos:line="19" pos:column="61"> <block pos:line="19" pos:column="62">{
			<expr_stmt><expr><name pos:line="20" pos:column="25">retval<pos:position pos:line="20" pos:column="31"/></name> <operator pos:line="20" pos:column="32">=<pos:position pos:line="20" pos:column="33"/></operator> <name pos:line="20" pos:column="34">READ_TREE_RECURSIVE<pos:position pos:line="20" pos:column="53"/></name></expr>;<pos:position pos:line="20" pos:column="54"/></expr_stmt>
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><operator pos:line="21" pos:column="29">!<pos:position pos:line="21" pos:column="30"/></operator><operator pos:line="21" pos:column="30">(<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="31">ls_options<pos:position pos:line="21" pos:column="41"/></name> <operator pos:line="21" pos:column="42">&amp;<pos:position pos:line="21" pos:column="47"/></operator> <name pos:line="21" pos:column="44">LS_SHOW_TREES<pos:position pos:line="21" pos:column="57"/></name><operator pos:line="21" pos:column="57">)<pos:position pos:line="21" pos:column="58"/></operator></expr>)<pos:position pos:line="21" pos:column="59"/></condition><then pos:line="21" pos:column="59">
				<block type="pseudo"><return pos:line="22" pos:column="33">return <expr><name pos:line="22" pos:column="40">retval<pos:position pos:line="22" pos:column="46"/></name></expr>;<pos:position pos:line="22" pos:column="47"/></return></block></then></if>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="24" pos:column="17">type<pos:position pos:line="24" pos:column="21"/></name> <operator pos:line="24" pos:column="22">=<pos:position pos:line="24" pos:column="23"/></operator> <name pos:line="24" pos:column="24">tree_type<pos:position pos:line="24" pos:column="33"/></name></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if></elseif>
	<elseif pos:line="26" pos:column="9">else <if pos:line="26" pos:column="14">if <condition pos:line="26" pos:column="17">(<expr><name pos:line="26" pos:column="18">ls_options<pos:position pos:line="26" pos:column="28"/></name> <operator pos:line="26" pos:column="29">&amp;<pos:position pos:line="26" pos:column="34"/></operator> <name pos:line="26" pos:column="31">LS_TREE_ONLY<pos:position pos:line="26" pos:column="43"/></name></expr>)<pos:position pos:line="26" pos:column="44"/></condition><then pos:line="26" pos:column="44">
		<block type="pseudo"><return pos:line="27" pos:column="17">return <expr><literal type="number" pos:line="27" pos:column="24">0<pos:position pos:line="27" pos:column="25"/></literal></expr>;<pos:position pos:line="27" pos:column="26"/></return></block></then></if></elseif></if>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">chomp_prefix<pos:position pos:line="29" pos:column="25"/></name> <operator pos:line="29" pos:column="26">&amp;&amp;<pos:position pos:line="29" pos:column="36"/></operator>
	    <operator pos:line="30" pos:column="13">(<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">baselen<pos:position pos:line="30" pos:column="21"/></name> <operator pos:line="30" pos:column="22">&lt;<pos:position pos:line="30" pos:column="26"/></operator> <name pos:line="30" pos:column="24">chomp_prefix<pos:position pos:line="30" pos:column="36"/></name> <operator pos:line="30" pos:column="37">||<pos:position pos:line="30" pos:column="39"/></operator> <call><name pos:line="30" pos:column="40">memcmp<pos:position pos:line="30" pos:column="46"/></name><argument_list pos:line="30" pos:column="46">(<argument><expr><name pos:line="30" pos:column="47">ls_tree_prefix<pos:position pos:line="30" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="63">base<pos:position pos:line="30" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="69">chomp_prefix<pos:position pos:line="30" pos:column="81"/></name></expr></argument>)<pos:position pos:line="30" pos:column="82"/></argument_list></call><operator pos:line="30" pos:column="82">)<pos:position pos:line="30" pos:column="83"/></operator></expr>)<pos:position pos:line="30" pos:column="84"/></condition><then pos:line="30" pos:column="84">
		<block type="pseudo"><return pos:line="31" pos:column="17">return <expr><literal type="number" pos:line="31" pos:column="24">0<pos:position pos:line="31" pos:column="25"/></literal></expr>;<pos:position pos:line="31" pos:column="26"/></return></block></then></if>

	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><operator pos:line="33" pos:column="13">!<pos:position pos:line="33" pos:column="14"/></operator><operator pos:line="33" pos:column="14">(<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="15">ls_options<pos:position pos:line="33" pos:column="25"/></name> <operator pos:line="33" pos:column="26">&amp;<pos:position pos:line="33" pos:column="31"/></operator> <name pos:line="33" pos:column="28">LS_NAME_ONLY<pos:position pos:line="33" pos:column="40"/></name><operator pos:line="33" pos:column="40">)<pos:position pos:line="33" pos:column="41"/></operator></expr>)<pos:position pos:line="33" pos:column="42"/></condition><then pos:line="33" pos:column="42"> <block pos:line="33" pos:column="43">{
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">ls_options<pos:position pos:line="34" pos:column="31"/></name> <operator pos:line="34" pos:column="32">&amp;<pos:position pos:line="34" pos:column="37"/></operator> <name pos:line="34" pos:column="34">LS_SHOW_SIZE<pos:position pos:line="34" pos:column="46"/></name></expr>)<pos:position pos:line="34" pos:column="47"/></condition><then pos:line="34" pos:column="47"> <block pos:line="34" pos:column="48">{
			<decl_stmt><decl><type><name pos:line="35" pos:column="25">char<pos:position pos:line="35" pos:column="29"/></name></type> <name><name pos:line="35" pos:column="30">size_text<pos:position pos:line="35" pos:column="39"/></name><index pos:line="35" pos:column="39">[<expr><literal type="number" pos:line="35" pos:column="40">24<pos:position pos:line="35" pos:column="42"/></literal></expr>]<pos:position pos:line="35" pos:column="43"/></index></name></decl>;<pos:position pos:line="35" pos:column="44"/></decl_stmt>
			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><operator pos:line="36" pos:column="29">!<pos:position pos:line="36" pos:column="30"/></operator><call><name pos:line="36" pos:column="30">strcmp<pos:position pos:line="36" pos:column="36"/></name><argument_list pos:line="36" pos:column="36">(<argument><expr><name pos:line="36" pos:column="37">type<pos:position pos:line="36" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="43">blob_type<pos:position pos:line="36" pos:column="52"/></name></expr></argument>)<pos:position pos:line="36" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="54"/></condition><then pos:line="36" pos:column="54"> <block pos:line="36" pos:column="55">{
				<decl_stmt><decl><type><name pos:line="37" pos:column="33">unsigned<pos:position pos:line="37" pos:column="41"/></name> <name pos:line="37" pos:column="42">long<pos:position pos:line="37" pos:column="46"/></name></type> <name pos:line="37" pos:column="47">size<pos:position pos:line="37" pos:column="51"/></name></decl>;<pos:position pos:line="37" pos:column="52"/></decl_stmt>
				<if pos:line="38" pos:column="33">if <condition pos:line="38" pos:column="36">(<expr><call><name pos:line="38" pos:column="37">sha1_object_info<pos:position pos:line="38" pos:column="53"/></name><argument_list pos:line="38" pos:column="53">(<argument><expr><name pos:line="38" pos:column="54">sha1<pos:position pos:line="38" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="60">&amp;<pos:position pos:line="38" pos:column="65"/></operator><name pos:line="38" pos:column="61">size<pos:position pos:line="38" pos:column="65"/></name></expr></argument>)<pos:position pos:line="38" pos:column="66"/></argument_list></call> <operator pos:line="38" pos:column="67">==<pos:position pos:line="38" pos:column="69"/></operator> <name pos:line="38" pos:column="70">OBJ_BAD<pos:position pos:line="38" pos:column="77"/></name></expr>)<pos:position pos:line="38" pos:column="78"/></condition><then pos:line="38" pos:column="78">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="41">strcpy<pos:position pos:line="39" pos:column="47"/></name><argument_list pos:line="39" pos:column="47">(<argument><expr><name pos:line="39" pos:column="48">size_text<pos:position pos:line="39" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="59">"BAD"<pos:position pos:line="39" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="66"/></expr_stmt></block></then>
				<else pos:line="40" pos:column="33">else
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="41">snprintf<pos:position pos:line="41" pos:column="49"/></name><argument_list pos:line="41" pos:column="49">(<argument><expr><name pos:line="41" pos:column="50">size_text<pos:position pos:line="41" pos:column="59"/></name></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="61">sizeof<argument_list pos:line="41" pos:column="67">(<argument><expr><name pos:line="41" pos:column="68">size_text<pos:position pos:line="41" pos:column="77"/></name></expr></argument>)<pos:position pos:line="41" pos:column="78"/></argument_list></sizeof></expr></argument>,
						 <argument><expr><literal type="string" pos:line="42" pos:column="50">"%lu"<pos:position pos:line="42" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="57">size<pos:position pos:line="42" pos:column="61"/></name></expr></argument>)<pos:position pos:line="42" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="63"/></expr_stmt></block></else></if>
			}<pos:position pos:line="43" pos:column="26"/></block></then> <else pos:line="43" pos:column="27">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="33">strcpy<pos:position pos:line="44" pos:column="39"/></name><argument_list pos:line="44" pos:column="39">(<argument><expr><name pos:line="44" pos:column="40">size_text<pos:position pos:line="44" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="51">"-"<pos:position pos:line="44" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="56"/></expr_stmt></block></else></if>
			<expr_stmt><expr><call><name pos:line="45" pos:column="25">printf<pos:position pos:line="45" pos:column="31"/></name><argument_list pos:line="45" pos:column="31">(<argument><expr><literal type="string" pos:line="45" pos:column="32">"%06o %s %s %7s\t"<pos:position pos:line="45" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="52">mode<pos:position pos:line="45" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="58">type<pos:position pos:line="45" pos:column="62"/></name></expr></argument>,
			       <argument><expr><call><name pos:line="46" pos:column="32">find_unique_abbrev<pos:position pos:line="46" pos:column="50"/></name><argument_list pos:line="46" pos:column="50">(<argument><expr><name pos:line="46" pos:column="51">sha1<pos:position pos:line="46" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="57">abbrev<pos:position pos:line="46" pos:column="63"/></name></expr></argument>)<pos:position pos:line="46" pos:column="64"/></argument_list></call></expr></argument>,
			       <argument><expr><name pos:line="47" pos:column="32">size_text<pos:position pos:line="47" pos:column="41"/></name></expr></argument>)<pos:position pos:line="47" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="48" pos:column="18"/></block></then> <else pos:line="48" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="25">printf<pos:position pos:line="49" pos:column="31"/></name><argument_list pos:line="49" pos:column="31">(<argument><expr><literal type="string" pos:line="49" pos:column="32">"%06o %s %s\t"<pos:position pos:line="49" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="48">mode<pos:position pos:line="49" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="54">type<pos:position pos:line="49" pos:column="58"/></name></expr></argument>,
			       <argument><expr><call><name pos:line="50" pos:column="32">find_unique_abbrev<pos:position pos:line="50" pos:column="50"/></name><argument_list pos:line="50" pos:column="50">(<argument><expr><name pos:line="50" pos:column="51">sha1<pos:position pos:line="50" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="57">abbrev<pos:position pos:line="50" pos:column="63"/></name></expr></argument>)<pos:position pos:line="50" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="50" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="66"/></expr_stmt></block></else></if>
	}<pos:position pos:line="51" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="52" pos:column="9">write_name_quotedpfx<pos:position pos:line="52" pos:column="29"/></name><argument_list pos:line="52" pos:column="29">(<argument><expr><name pos:line="52" pos:column="30">base<pos:position pos:line="52" pos:column="34"/></name> <operator pos:line="52" pos:column="35">+<pos:position pos:line="52" pos:column="36"/></operator> <name pos:line="52" pos:column="37">chomp_prefix<pos:position pos:line="52" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="51">baselen<pos:position pos:line="52" pos:column="58"/></name> <operator pos:line="52" pos:column="59">-<pos:position pos:line="52" pos:column="60"/></operator> <name pos:line="52" pos:column="61">chomp_prefix<pos:position pos:line="52" pos:column="73"/></name></expr></argument>,
			  <argument><expr><name pos:line="53" pos:column="27">pathname<pos:position pos:line="53" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="37">stdout<pos:position pos:line="53" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="45">line_termination<pos:position pos:line="53" pos:column="61"/></name></expr></argument>)<pos:position pos:line="53" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="63"/></expr_stmt>
	<return pos:line="54" pos:column="9">return <expr><name pos:line="54" pos:column="16">retval<pos:position pos:line="54" pos:column="22"/></name></expr>;<pos:position pos:line="54" pos:column="23"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
