<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5824_git-2.4.12.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name></type>
<name pos:line="2" pos:column="1">re_search_internal<pos:position pos:line="2" pos:column="19"/></name> <parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><specifier pos:line="2" pos:column="21">const<pos:position pos:line="2" pos:column="26"/></specifier> <name pos:line="2" pos:column="27">regex_t<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">preg<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>,
		    <parameter><decl><type><specifier pos:line="3" pos:column="21">const<pos:position pos:line="3" pos:column="26"/></specifier> <name pos:line="3" pos:column="27">char<pos:position pos:line="3" pos:column="31"/></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">string<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>,
		    <parameter><decl><type><name pos:line="4" pos:column="21">int<pos:position pos:line="4" pos:column="24"/></name></type> <name pos:line="4" pos:column="25">length<pos:position pos:line="4" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="33">int<pos:position pos:line="4" pos:column="36"/></name></type> <name pos:line="4" pos:column="37">start<pos:position pos:line="4" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="44">int<pos:position pos:line="4" pos:column="47"/></name></type> <name pos:line="4" pos:column="48">range<pos:position pos:line="4" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="55">int<pos:position pos:line="4" pos:column="58"/></name></type> <name pos:line="4" pos:column="59">stop<pos:position pos:line="4" pos:column="63"/></name></decl></parameter>,
		    <parameter><decl><type><name pos:line="5" pos:column="21">size_t<pos:position pos:line="5" pos:column="27"/></name></type> <name pos:line="5" pos:column="28">nmatch<pos:position pos:line="5" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="5" pos:column="36">regmatch_t<pos:position pos:line="5" pos:column="46"/></name></type> <name><name pos:line="5" pos:column="47">pmatch<pos:position pos:line="5" pos:column="53"/></name><index pos:line="5" pos:column="53">[]<pos:position pos:line="5" pos:column="55"/></index></name></decl></parameter>,
		    <parameter><decl><type><name pos:line="6" pos:column="21">int<pos:position pos:line="6" pos:column="24"/></name></type> <name pos:line="6" pos:column="25">eflags<pos:position pos:line="6" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="32"/></parameter_list>
<block pos:line="7" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">reg_errcode_t<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">err<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="9" pos:column="3">const<pos:position pos:line="9" pos:column="8"/></specifier> <name pos:line="9" pos:column="9">re_dfa_t<pos:position pos:line="9" pos:column="17"/></name> <modifier pos:line="9" pos:column="18">*<pos:position pos:line="9" pos:column="19"/></modifier></type><name pos:line="9" pos:column="19">dfa<pos:position pos:line="9" pos:column="22"/></name> <init pos:line="9" pos:column="23">= <expr><operator pos:line="9" pos:column="25">(<pos:position pos:line="9" pos:column="26"/></operator><specifier pos:line="9" pos:column="26">const<pos:position pos:line="9" pos:column="31"/></specifier> <name pos:line="9" pos:column="32">re_dfa_t<pos:position pos:line="9" pos:column="40"/></name> <operator pos:line="9" pos:column="41">*<pos:position pos:line="9" pos:column="42"/></operator><operator pos:line="9" pos:column="42">)<pos:position pos:line="9" pos:column="43"/></operator> <name><name pos:line="9" pos:column="44">preg<pos:position pos:line="9" pos:column="48"/></name><operator pos:line="9" pos:column="48">-&gt;<pos:position pos:line="9" pos:column="53"/></operator><name pos:line="9" pos:column="50">buffer<pos:position pos:line="9" pos:column="56"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="57"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">left_lim<pos:position pos:line="10" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="17">right_lim<pos:position pos:line="10" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="28">incr<pos:position pos:line="10" pos:column="32"/></name></decl>;<pos:position pos:line="10" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">int<pos:position pos:line="11" pos:column="6"/></name></type> <name pos:line="11" pos:column="7">fl_longest_match<pos:position pos:line="11" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="25">match_first<pos:position pos:line="11" pos:column="36"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="38">match_kind<pos:position pos:line="11" pos:column="48"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="50">match_last<pos:position pos:line="11" pos:column="60"/></name> <init pos:line="11" pos:column="61">= <expr><operator pos:line="11" pos:column="63">-<pos:position pos:line="11" pos:column="64"/></operator><literal type="number" pos:line="11" pos:column="64">1<pos:position pos:line="11" pos:column="65"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="66"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">extra_nmatch<pos:position pos:line="12" pos:column="19"/></name></decl>;<pos:position pos:line="12" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">int<pos:position pos:line="13" pos:column="6"/></name></type> <name pos:line="13" pos:column="7">sb<pos:position pos:line="13" pos:column="9"/></name></decl>, <decl><type ref="prev"/><name pos:line="13" pos:column="11">ch<pos:position pos:line="13" pos:column="13"/></name></decl>;<pos:position pos:line="13" pos:column="14"/></decl_stmt>
<cpp:if pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">if<pos:position pos:line="14" pos:column="4"/></cpp:directive> <expr><name pos:line="14" pos:column="5">defined<pos:position pos:line="14" pos:column="12"/></name> <name pos:line="14" pos:column="13">_LIBC<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">||<pos:position pos:line="14" pos:column="21"/></operator> <operator pos:line="14" pos:column="22">(<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="23">defined<pos:position pos:line="14" pos:column="30"/></name> <name pos:line="14" pos:column="31">__STDC_VERSION__<pos:position pos:line="14" pos:column="47"/></name> <operator pos:line="14" pos:column="48">&amp;&amp;<pos:position pos:line="14" pos:column="58"/></operator> <name pos:line="14" pos:column="51">__STDC_VERSION__<pos:position pos:line="14" pos:column="67"/></name> <operator pos:line="14" pos:column="68">&gt;=<pos:position pos:line="14" pos:column="73"/></operator> <literal type="number" pos:line="14" pos:column="71">199901L<pos:position pos:line="14" pos:column="78"/></literal><operator pos:line="14" pos:column="78">)<pos:position pos:line="14" pos:column="79"/></operator></expr></cpp:if>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">re_match_context_t<pos:position pos:line="15" pos:column="21"/></name></type> <name pos:line="15" pos:column="22">mctx<pos:position pos:line="15" pos:column="26"/></name> <init pos:line="15" pos:column="27">= <expr><block pos:line="15" pos:column="29">{ <expr><operator pos:line="15" pos:column="31">.<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="32">dfa<pos:position pos:line="15" pos:column="35"/></name> <operator pos:line="15" pos:column="36">=<pos:position pos:line="15" pos:column="37"/></operator> <name pos:line="15" pos:column="38">dfa<pos:position pos:line="15" pos:column="41"/></name></expr> }<pos:position pos:line="15" pos:column="43"/></block></expr></init></decl>;<pos:position pos:line="15" pos:column="44"/></decl_stmt>
<cpp:else pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">else<pos:position pos:line="16" pos:column="6"/></cpp:directive></cpp:else>
  <decl_stmt><decl><type><name pos:line="17" pos:column="3">re_match_context_t<pos:position pos:line="17" pos:column="21"/></name></type> <name pos:line="17" pos:column="22">mctx<pos:position pos:line="17" pos:column="26"/></name></decl>;<pos:position pos:line="17" pos:column="27"/></decl_stmt>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name pos:line="19" pos:column="3">char<pos:position pos:line="19" pos:column="7"/></name> <modifier pos:line="19" pos:column="8">*<pos:position pos:line="19" pos:column="9"/></modifier></type><name pos:line="19" pos:column="9">fastmap<pos:position pos:line="19" pos:column="16"/></name> <init pos:line="19" pos:column="17">= <expr><ternary><condition><expr><operator pos:line="19" pos:column="19">(<pos:position pos:line="19" pos:column="20"/></operator><name><name pos:line="19" pos:column="20">preg<pos:position pos:line="19" pos:column="24"/></name><operator pos:line="19" pos:column="24">-&gt;<pos:position pos:line="19" pos:column="29"/></operator><name pos:line="19" pos:column="26">fastmap<pos:position pos:line="19" pos:column="33"/></name></name> <operator pos:line="19" pos:column="34">!=<pos:position pos:line="19" pos:column="36"/></operator> <name pos:line="19" pos:column="37">NULL<pos:position pos:line="19" pos:column="41"/></name> <operator pos:line="19" pos:column="42">&amp;&amp;<pos:position pos:line="19" pos:column="52"/></operator> <name><name pos:line="19" pos:column="45">preg<pos:position pos:line="19" pos:column="49"/></name><operator pos:line="19" pos:column="49">-&gt;<pos:position pos:line="19" pos:column="54"/></operator><name pos:line="19" pos:column="51">fastmap_accurate<pos:position pos:line="19" pos:column="67"/></name></name>
		   <operator pos:line="20" pos:column="20">&amp;&amp;<pos:position pos:line="20" pos:column="30"/></operator> <name pos:line="20" pos:column="23">range<pos:position pos:line="20" pos:column="28"/></name> <operator pos:line="20" pos:column="29">&amp;&amp;<pos:position pos:line="20" pos:column="39"/></operator> <operator pos:line="20" pos:column="32">!<pos:position pos:line="20" pos:column="33"/></operator><name><name pos:line="20" pos:column="33">preg<pos:position pos:line="20" pos:column="37"/></name><operator pos:line="20" pos:column="37">-&gt;<pos:position pos:line="20" pos:column="42"/></operator><name pos:line="20" pos:column="39">can_be_null<pos:position pos:line="20" pos:column="50"/></name></name><operator pos:line="20" pos:column="50">)<pos:position pos:line="20" pos:column="51"/></operator></expr> ?<pos:position pos:line="20" pos:column="53"/></condition><then pos:line="20" pos:column="53"> <expr><name><name pos:line="20" pos:column="54">preg<pos:position pos:line="20" pos:column="58"/></name><operator pos:line="20" pos:column="58">-&gt;<pos:position pos:line="20" pos:column="63"/></operator><name pos:line="20" pos:column="60">fastmap<pos:position pos:line="20" pos:column="67"/></name></name></expr> <pos:position pos:line="20" pos:column="68"/></then><else pos:line="20" pos:column="68">: <expr><name pos:line="20" pos:column="70">NULL<pos:position pos:line="20" pos:column="74"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="20" pos:column="75"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="21" pos:column="3">RE_TRANSLATE_TYPE<pos:position pos:line="21" pos:column="20"/></name></type> <name pos:line="21" pos:column="21">t<pos:position pos:line="21" pos:column="22"/></name> <init pos:line="21" pos:column="23">= <expr><name><name pos:line="21" pos:column="25">preg<pos:position pos:line="21" pos:column="29"/></name><operator pos:line="21" pos:column="29">-&gt;<pos:position pos:line="21" pos:column="34"/></operator><name pos:line="21" pos:column="31">translate<pos:position pos:line="21" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="21" pos:column="41"/></decl_stmt>

<cpp:if pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">if<pos:position pos:line="23" pos:column="4"/></cpp:directive> <expr><operator pos:line="23" pos:column="5">!<pos:position pos:line="23" pos:column="6"/></operator><operator pos:line="23" pos:column="6">(<pos:position pos:line="23" pos:column="7"/></operator><name pos:line="23" pos:column="7">defined<pos:position pos:line="23" pos:column="14"/></name> <name pos:line="23" pos:column="15">_LIBC<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">||<pos:position pos:line="23" pos:column="23"/></operator> <operator pos:line="23" pos:column="24">(<pos:position pos:line="23" pos:column="25"/></operator><name pos:line="23" pos:column="25">defined<pos:position pos:line="23" pos:column="32"/></name> <name pos:line="23" pos:column="33">__STDC_VERSION__<pos:position pos:line="23" pos:column="49"/></name> <operator pos:line="23" pos:column="50">&amp;&amp;<pos:position pos:line="23" pos:column="60"/></operator> <name pos:line="23" pos:column="53">__STDC_VERSION__<pos:position pos:line="23" pos:column="69"/></name> <operator pos:line="23" pos:column="70">&gt;=<pos:position pos:line="23" pos:column="75"/></operator> <literal type="number" pos:line="23" pos:column="73">199901L<pos:position pos:line="23" pos:column="80"/></literal><operator pos:line="23" pos:column="80">)<pos:position pos:line="23" pos:column="81"/></operator><operator pos:line="23" pos:column="81">)<pos:position pos:line="23" pos:column="82"/></operator></expr></cpp:if>
  <expr_stmt><expr><call><name pos:line="24" pos:column="3">memset<pos:position pos:line="24" pos:column="9"/></name> <argument_list pos:line="24" pos:column="10">(<argument><expr><operator pos:line="24" pos:column="11">&amp;<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="12">mctx<pos:position pos:line="24" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="24" pos:column="18">'\0'<pos:position pos:line="24" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="24">sizeof <argument_list pos:line="24" pos:column="31">(<argument><expr><name pos:line="24" pos:column="32">re_match_context_t<pos:position pos:line="24" pos:column="50"/></name></expr></argument>)<pos:position pos:line="24" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="53"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="25" pos:column="3">mctx<pos:position pos:line="25" pos:column="7"/></name><operator pos:line="25" pos:column="7">.<pos:position pos:line="25" pos:column="8"/></operator><name pos:line="25" pos:column="8">dfa<pos:position pos:line="25" pos:column="11"/></name></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <name pos:line="25" pos:column="14">dfa<pos:position pos:line="25" pos:column="17"/></name></expr>;<pos:position pos:line="25" pos:column="18"/></expr_stmt>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif<pos:position pos:line="26" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="28" pos:column="3">extra_nmatch<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <ternary><condition><expr><operator pos:line="28" pos:column="18">(<pos:position pos:line="28" pos:column="19"/></operator><name pos:line="28" pos:column="19">nmatch<pos:position pos:line="28" pos:column="25"/></name> <operator pos:line="28" pos:column="26">&gt;<pos:position pos:line="28" pos:column="30"/></operator> <name><name pos:line="28" pos:column="28">preg<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">-&gt;<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="34">re_nsub<pos:position pos:line="28" pos:column="41"/></name></name><operator pos:line="28" pos:column="41">)<pos:position pos:line="28" pos:column="42"/></operator></expr> ?<pos:position pos:line="28" pos:column="44"/></condition><then pos:line="28" pos:column="44"> <expr><name pos:line="28" pos:column="45">nmatch<pos:position pos:line="28" pos:column="51"/></name> <operator pos:line="28" pos:column="52">-<pos:position pos:line="28" pos:column="53"/></operator> <operator pos:line="28" pos:column="54">(<pos:position pos:line="28" pos:column="55"/></operator><name><name pos:line="28" pos:column="55">preg<pos:position pos:line="28" pos:column="59"/></name><operator pos:line="28" pos:column="59">-&gt;<pos:position pos:line="28" pos:column="64"/></operator><name pos:line="28" pos:column="61">re_nsub<pos:position pos:line="28" pos:column="68"/></name></name> <operator pos:line="28" pos:column="69">+<pos:position pos:line="28" pos:column="70"/></operator> <literal type="number" pos:line="28" pos:column="71">1<pos:position pos:line="28" pos:column="72"/></literal><operator pos:line="28" pos:column="72">)<pos:position pos:line="28" pos:column="73"/></operator></expr> <pos:position pos:line="28" pos:column="74"/></then><else pos:line="28" pos:column="74">: <expr><literal type="number" pos:line="28" pos:column="76">0<pos:position pos:line="28" pos:column="77"/></literal></expr></else></ternary></expr>;<pos:position pos:line="28" pos:column="78"/></expr_stmt>
  <expr_stmt><expr><name pos:line="29" pos:column="3">nmatch<pos:position pos:line="29" pos:column="9"/></name> <operator pos:line="29" pos:column="10">-=<pos:position pos:line="29" pos:column="12"/></operator> <name pos:line="29" pos:column="13">extra_nmatch<pos:position pos:line="29" pos:column="25"/></name></expr>;<pos:position pos:line="29" pos:column="26"/></expr_stmt>

  <comment type="block" pos:line="31" pos:column="3">/* Check if the DFA haven't been compiled.  */</comment>
  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><call><name pos:line="32" pos:column="7">BE<pos:position pos:line="32" pos:column="9"/></name> <argument_list pos:line="32" pos:column="10">(<argument><expr><name><name pos:line="32" pos:column="11">preg<pos:position pos:line="32" pos:column="15"/></name><operator pos:line="32" pos:column="15">-&gt;<pos:position pos:line="32" pos:column="20"/></operator><name pos:line="32" pos:column="17">used<pos:position pos:line="32" pos:column="21"/></name></name> <operator pos:line="32" pos:column="22">==<pos:position pos:line="32" pos:column="24"/></operator> <literal type="number" pos:line="32" pos:column="25">0<pos:position pos:line="32" pos:column="26"/></literal> <operator pos:line="32" pos:column="27">||<pos:position pos:line="32" pos:column="29"/></operator> <name><name pos:line="32" pos:column="30">dfa<pos:position pos:line="32" pos:column="33"/></name><operator pos:line="32" pos:column="33">-&gt;<pos:position pos:line="32" pos:column="38"/></operator><name pos:line="32" pos:column="35">init_state<pos:position pos:line="32" pos:column="45"/></name></name> <operator pos:line="32" pos:column="46">==<pos:position pos:line="32" pos:column="48"/></operator> <name pos:line="32" pos:column="49">NULL<pos:position pos:line="32" pos:column="53"/></name>
	  <operator pos:line="33" pos:column="11">||<pos:position pos:line="33" pos:column="13"/></operator> <name><name pos:line="33" pos:column="14">dfa<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">-&gt;<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="19">init_state_word<pos:position pos:line="33" pos:column="34"/></name></name> <operator pos:line="33" pos:column="35">==<pos:position pos:line="33" pos:column="37"/></operator> <name pos:line="33" pos:column="38">NULL<pos:position pos:line="33" pos:column="42"/></name> <operator pos:line="33" pos:column="43">||<pos:position pos:line="33" pos:column="45"/></operator> <name><name pos:line="33" pos:column="46">dfa<pos:position pos:line="33" pos:column="49"/></name><operator pos:line="33" pos:column="49">-&gt;<pos:position pos:line="33" pos:column="54"/></operator><name pos:line="33" pos:column="51">init_state_nl<pos:position pos:line="33" pos:column="64"/></name></name> <operator pos:line="33" pos:column="65">==<pos:position pos:line="33" pos:column="67"/></operator> <name pos:line="33" pos:column="68">NULL<pos:position pos:line="33" pos:column="72"/></name>
	  <operator pos:line="34" pos:column="11">||<pos:position pos:line="34" pos:column="13"/></operator> <name><name pos:line="34" pos:column="14">dfa<pos:position pos:line="34" pos:column="17"/></name><operator pos:line="34" pos:column="17">-&gt;<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="19">init_state_begbuf<pos:position pos:line="34" pos:column="36"/></name></name> <operator pos:line="34" pos:column="37">==<pos:position pos:line="34" pos:column="39"/></operator> <name pos:line="34" pos:column="40">NULL<pos:position pos:line="34" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="46">0<pos:position pos:line="34" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="49"/></condition><then pos:line="34" pos:column="49">
    <block type="pseudo"><return pos:line="35" pos:column="5">return <expr><name pos:line="35" pos:column="12">REG_NOMATCH<pos:position pos:line="35" pos:column="23"/></name></expr>;<pos:position pos:line="35" pos:column="24"/></return></block></then></if>

<cpp:ifdef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">ifdef<pos:position pos:line="37" pos:column="7"/></cpp:directive> <name pos:line="37" pos:column="8">DEBUG<pos:position pos:line="37" pos:column="13"/></name></cpp:ifdef>
  <comment type="block" pos:line="38" pos:column="3">/* We assume front-end functions already check them.  */</comment>
  <expr_stmt><expr><call><name pos:line="39" pos:column="3">assert<pos:position pos:line="39" pos:column="9"/></name> <argument_list pos:line="39" pos:column="10">(<argument><expr><name pos:line="39" pos:column="11">start<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">+<pos:position pos:line="39" pos:column="18"/></operator> <name pos:line="39" pos:column="19">range<pos:position pos:line="39" pos:column="24"/></name> <operator pos:line="39" pos:column="25">&gt;=<pos:position pos:line="39" pos:column="30"/></operator> <literal type="number" pos:line="39" pos:column="28">0<pos:position pos:line="39" pos:column="29"/></literal> <operator pos:line="39" pos:column="30">&amp;&amp;<pos:position pos:line="39" pos:column="40"/></operator> <name pos:line="39" pos:column="33">start<pos:position pos:line="39" pos:column="38"/></name> <operator pos:line="39" pos:column="39">+<pos:position pos:line="39" pos:column="40"/></operator> <name pos:line="39" pos:column="41">range<pos:position pos:line="39" pos:column="46"/></name> <operator pos:line="39" pos:column="47">&lt;=<pos:position pos:line="39" pos:column="52"/></operator> <name pos:line="39" pos:column="50">length<pos:position pos:line="39" pos:column="56"/></name></expr></argument>)<pos:position pos:line="39" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="58"/></expr_stmt>
<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif<pos:position pos:line="40" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="42" pos:column="3">/* If initial states with non-begbuf contexts have no elements,
     the regex must be anchored.  If preg-&gt;newline_anchor is set,
     we'll never use init_state_nl, so do not check it.  */</comment>
  <if pos:line="45" pos:column="3">if <condition pos:line="45" pos:column="6">(<expr><name><name pos:line="45" pos:column="7">dfa<pos:position pos:line="45" pos:column="10"/></name><operator pos:line="45" pos:column="10">-&gt;<pos:position pos:line="45" pos:column="15"/></operator><name pos:line="45" pos:column="12">init_state<pos:position pos:line="45" pos:column="22"/></name><operator pos:line="45" pos:column="22">-&gt;<pos:position pos:line="45" pos:column="27"/></operator><name pos:line="45" pos:column="24">nodes<pos:position pos:line="45" pos:column="29"/></name><operator pos:line="45" pos:column="29">.<pos:position pos:line="45" pos:column="30"/></operator><name pos:line="45" pos:column="30">nelem<pos:position pos:line="45" pos:column="35"/></name></name> <operator pos:line="45" pos:column="36">==<pos:position pos:line="45" pos:column="38"/></operator> <literal type="number" pos:line="45" pos:column="39">0<pos:position pos:line="45" pos:column="40"/></literal>
      <operator pos:line="46" pos:column="7">&amp;&amp;<pos:position pos:line="46" pos:column="17"/></operator> <name><name pos:line="46" pos:column="10">dfa<pos:position pos:line="46" pos:column="13"/></name><operator pos:line="46" pos:column="13">-&gt;<pos:position pos:line="46" pos:column="18"/></operator><name pos:line="46" pos:column="15">init_state_word<pos:position pos:line="46" pos:column="30"/></name><operator pos:line="46" pos:column="30">-&gt;<pos:position pos:line="46" pos:column="35"/></operator><name pos:line="46" pos:column="32">nodes<pos:position pos:line="46" pos:column="37"/></name><operator pos:line="46" pos:column="37">.<pos:position pos:line="46" pos:column="38"/></operator><name pos:line="46" pos:column="38">nelem<pos:position pos:line="46" pos:column="43"/></name></name> <operator pos:line="46" pos:column="44">==<pos:position pos:line="46" pos:column="46"/></operator> <literal type="number" pos:line="46" pos:column="47">0<pos:position pos:line="46" pos:column="48"/></literal>
      <operator pos:line="47" pos:column="7">&amp;&amp;<pos:position pos:line="47" pos:column="17"/></operator> <operator pos:line="47" pos:column="10">(<pos:position pos:line="47" pos:column="11"/></operator><name><name pos:line="47" pos:column="11">dfa<pos:position pos:line="47" pos:column="14"/></name><operator pos:line="47" pos:column="14">-&gt;<pos:position pos:line="47" pos:column="19"/></operator><name pos:line="47" pos:column="16">init_state_nl<pos:position pos:line="47" pos:column="29"/></name><operator pos:line="47" pos:column="29">-&gt;<pos:position pos:line="47" pos:column="34"/></operator><name pos:line="47" pos:column="31">nodes<pos:position pos:line="47" pos:column="36"/></name><operator pos:line="47" pos:column="36">.<pos:position pos:line="47" pos:column="37"/></operator><name pos:line="47" pos:column="37">nelem<pos:position pos:line="47" pos:column="42"/></name></name> <operator pos:line="47" pos:column="43">==<pos:position pos:line="47" pos:column="45"/></operator> <literal type="number" pos:line="47" pos:column="46">0<pos:position pos:line="47" pos:column="47"/></literal>
	  <operator pos:line="48" pos:column="11">||<pos:position pos:line="48" pos:column="13"/></operator> <operator pos:line="48" pos:column="14">!<pos:position pos:line="48" pos:column="15"/></operator><name><name pos:line="48" pos:column="15">preg<pos:position pos:line="48" pos:column="19"/></name><operator pos:line="48" pos:column="19">-&gt;<pos:position pos:line="48" pos:column="24"/></operator><name pos:line="48" pos:column="21">newline_anchor<pos:position pos:line="48" pos:column="35"/></name></name><operator pos:line="48" pos:column="35">)<pos:position pos:line="48" pos:column="36"/></operator></expr>)<pos:position pos:line="48" pos:column="37"/></condition><then pos:line="48" pos:column="37">
    <block pos:line="49" pos:column="5">{
      <if pos:line="50" pos:column="7">if <condition pos:line="50" pos:column="10">(<expr><name pos:line="50" pos:column="11">start<pos:position pos:line="50" pos:column="16"/></name> <operator pos:line="50" pos:column="17">!=<pos:position pos:line="50" pos:column="19"/></operator> <literal type="number" pos:line="50" pos:column="20">0<pos:position pos:line="50" pos:column="21"/></literal> <operator pos:line="50" pos:column="22">&amp;&amp;<pos:position pos:line="50" pos:column="32"/></operator> <name pos:line="50" pos:column="25">start<pos:position pos:line="50" pos:column="30"/></name> <operator pos:line="50" pos:column="31">+<pos:position pos:line="50" pos:column="32"/></operator> <name pos:line="50" pos:column="33">range<pos:position pos:line="50" pos:column="38"/></name> <operator pos:line="50" pos:column="39">!=<pos:position pos:line="50" pos:column="41"/></operator> <literal type="number" pos:line="50" pos:column="42">0<pos:position pos:line="50" pos:column="43"/></literal></expr>)<pos:position pos:line="50" pos:column="44"/></condition><then pos:line="50" pos:column="44">
	<block type="pseudo"><return pos:line="51" pos:column="9">return <expr><name pos:line="51" pos:column="16">REG_NOMATCH<pos:position pos:line="51" pos:column="27"/></name></expr>;<pos:position pos:line="51" pos:column="28"/></return></block></then></if>
      <expr_stmt><expr><name pos:line="52" pos:column="7">start<pos:position pos:line="52" pos:column="12"/></name> <operator pos:line="52" pos:column="13">=<pos:position pos:line="52" pos:column="14"/></operator> <name pos:line="52" pos:column="15">range<pos:position pos:line="52" pos:column="20"/></name> <operator pos:line="52" pos:column="21">=<pos:position pos:line="52" pos:column="22"/></operator> <literal type="number" pos:line="52" pos:column="23">0<pos:position pos:line="52" pos:column="24"/></literal></expr>;<pos:position pos:line="52" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="55" pos:column="3">/* We must check the longest matching, if nmatch &gt; 0.  */</comment>
  <expr_stmt><expr><name pos:line="56" pos:column="3">fl_longest_match<pos:position pos:line="56" pos:column="19"/></name> <operator pos:line="56" pos:column="20">=<pos:position pos:line="56" pos:column="21"/></operator> <operator pos:line="56" pos:column="22">(<pos:position pos:line="56" pos:column="23"/></operator><name pos:line="56" pos:column="23">nmatch<pos:position pos:line="56" pos:column="29"/></name> <operator pos:line="56" pos:column="30">!=<pos:position pos:line="56" pos:column="32"/></operator> <literal type="number" pos:line="56" pos:column="33">0<pos:position pos:line="56" pos:column="34"/></literal> <operator pos:line="56" pos:column="35">||<pos:position pos:line="56" pos:column="37"/></operator> <name><name pos:line="56" pos:column="38">dfa<pos:position pos:line="56" pos:column="41"/></name><operator pos:line="56" pos:column="41">-&gt;<pos:position pos:line="56" pos:column="46"/></operator><name pos:line="56" pos:column="43">nbackref<pos:position pos:line="56" pos:column="51"/></name></name><operator pos:line="56" pos:column="51">)<pos:position pos:line="56" pos:column="52"/></operator></expr>;<pos:position pos:line="56" pos:column="53"/></expr_stmt>

  <expr_stmt><expr><name pos:line="58" pos:column="3">err<pos:position pos:line="58" pos:column="6"/></name> <operator pos:line="58" pos:column="7">=<pos:position pos:line="58" pos:column="8"/></operator> <call><name pos:line="58" pos:column="9">re_string_allocate<pos:position pos:line="58" pos:column="27"/></name> <argument_list pos:line="58" pos:column="28">(<argument><expr><operator pos:line="58" pos:column="29">&amp;<pos:position pos:line="58" pos:column="34"/></operator><name><name pos:line="58" pos:column="30">mctx<pos:position pos:line="58" pos:column="34"/></name><operator pos:line="58" pos:column="34">.<pos:position pos:line="58" pos:column="35"/></operator><name pos:line="58" pos:column="35">input<pos:position pos:line="58" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="42">string<pos:position pos:line="58" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="50">length<pos:position pos:line="58" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="58">dfa<pos:position pos:line="58" pos:column="61"/></name><operator pos:line="58" pos:column="61">-&gt;<pos:position pos:line="58" pos:column="66"/></operator><name pos:line="58" pos:column="63">nodes_len<pos:position pos:line="58" pos:column="72"/></name></name> <operator pos:line="58" pos:column="73">+<pos:position pos:line="58" pos:column="74"/></operator> <literal type="number" pos:line="58" pos:column="75">1<pos:position pos:line="58" pos:column="76"/></literal></expr></argument>,
			    <argument><expr><name><name pos:line="59" pos:column="29">preg<pos:position pos:line="59" pos:column="33"/></name><operator pos:line="59" pos:column="33">-&gt;<pos:position pos:line="59" pos:column="38"/></operator><name pos:line="59" pos:column="35">translate<pos:position pos:line="59" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="46">preg<pos:position pos:line="59" pos:column="50"/></name><operator pos:line="59" pos:column="50">-&gt;<pos:position pos:line="59" pos:column="55"/></operator><name pos:line="59" pos:column="52">syntax<pos:position pos:line="59" pos:column="58"/></name></name> <operator pos:line="59" pos:column="59">&amp;<pos:position pos:line="59" pos:column="64"/></operator> <name pos:line="59" pos:column="61">RE_ICASE<pos:position pos:line="59" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="71">dfa<pos:position pos:line="59" pos:column="74"/></name></expr></argument>)<pos:position pos:line="59" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="76"/></expr_stmt>
  <if pos:line="60" pos:column="3">if <condition pos:line="60" pos:column="6">(<expr><call><name pos:line="60" pos:column="7">BE<pos:position pos:line="60" pos:column="9"/></name> <argument_list pos:line="60" pos:column="10">(<argument><expr><name pos:line="60" pos:column="11">err<pos:position pos:line="60" pos:column="14"/></name> <operator pos:line="60" pos:column="15">!=<pos:position pos:line="60" pos:column="17"/></operator> <name pos:line="60" pos:column="18">REG_NOERROR<pos:position pos:line="60" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="31">0<pos:position pos:line="60" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="34"/></condition><then pos:line="60" pos:column="34">
    <block type="pseudo"><goto pos:line="61" pos:column="5">goto <name pos:line="61" pos:column="10">free_return<pos:position pos:line="61" pos:column="21"/></name>;<pos:position pos:line="61" pos:column="22"/></goto></block></then></if>
  <expr_stmt><expr><name><name pos:line="62" pos:column="3">mctx<pos:position pos:line="62" pos:column="7"/></name><operator pos:line="62" pos:column="7">.<pos:position pos:line="62" pos:column="8"/></operator><name pos:line="62" pos:column="8">input<pos:position pos:line="62" pos:column="13"/></name><operator pos:line="62" pos:column="13">.<pos:position pos:line="62" pos:column="14"/></operator><name pos:line="62" pos:column="14">stop<pos:position pos:line="62" pos:column="18"/></name></name> <operator pos:line="62" pos:column="19">=<pos:position pos:line="62" pos:column="20"/></operator> <name pos:line="62" pos:column="21">stop<pos:position pos:line="62" pos:column="25"/></name></expr>;<pos:position pos:line="62" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="63" pos:column="3">mctx<pos:position pos:line="63" pos:column="7"/></name><operator pos:line="63" pos:column="7">.<pos:position pos:line="63" pos:column="8"/></operator><name pos:line="63" pos:column="8">input<pos:position pos:line="63" pos:column="13"/></name><operator pos:line="63" pos:column="13">.<pos:position pos:line="63" pos:column="14"/></operator><name pos:line="63" pos:column="14">raw_stop<pos:position pos:line="63" pos:column="22"/></name></name> <operator pos:line="63" pos:column="23">=<pos:position pos:line="63" pos:column="24"/></operator> <name pos:line="63" pos:column="25">stop<pos:position pos:line="63" pos:column="29"/></name></expr>;<pos:position pos:line="63" pos:column="30"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="64" pos:column="3">mctx<pos:position pos:line="64" pos:column="7"/></name><operator pos:line="64" pos:column="7">.<pos:position pos:line="64" pos:column="8"/></operator><name pos:line="64" pos:column="8">input<pos:position pos:line="64" pos:column="13"/></name><operator pos:line="64" pos:column="13">.<pos:position pos:line="64" pos:column="14"/></operator><name pos:line="64" pos:column="14">newline_anchor<pos:position pos:line="64" pos:column="28"/></name></name> <operator pos:line="64" pos:column="29">=<pos:position pos:line="64" pos:column="30"/></operator> <name><name pos:line="64" pos:column="31">preg<pos:position pos:line="64" pos:column="35"/></name><operator pos:line="64" pos:column="35">-&gt;<pos:position pos:line="64" pos:column="40"/></operator><name pos:line="64" pos:column="37">newline_anchor<pos:position pos:line="64" pos:column="51"/></name></name></expr>;<pos:position pos:line="64" pos:column="52"/></expr_stmt>

  <expr_stmt><expr><name pos:line="66" pos:column="3">err<pos:position pos:line="66" pos:column="6"/></name> <operator pos:line="66" pos:column="7">=<pos:position pos:line="66" pos:column="8"/></operator> <call><name pos:line="66" pos:column="9">match_ctx_init<pos:position pos:line="66" pos:column="23"/></name> <argument_list pos:line="66" pos:column="24">(<argument><expr><operator pos:line="66" pos:column="25">&amp;<pos:position pos:line="66" pos:column="30"/></operator><name pos:line="66" pos:column="26">mctx<pos:position pos:line="66" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="32">eflags<pos:position pos:line="66" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="40">dfa<pos:position pos:line="66" pos:column="43"/></name><operator pos:line="66" pos:column="43">-&gt;<pos:position pos:line="66" pos:column="48"/></operator><name pos:line="66" pos:column="45">nbackref<pos:position pos:line="66" pos:column="53"/></name></name> <operator pos:line="66" pos:column="54">*<pos:position pos:line="66" pos:column="55"/></operator> <literal type="number" pos:line="66" pos:column="56">2<pos:position pos:line="66" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="59"/></expr_stmt>
  <if pos:line="67" pos:column="3">if <condition pos:line="67" pos:column="6">(<expr><call><name pos:line="67" pos:column="7">BE<pos:position pos:line="67" pos:column="9"/></name> <argument_list pos:line="67" pos:column="10">(<argument><expr><name pos:line="67" pos:column="11">err<pos:position pos:line="67" pos:column="14"/></name> <operator pos:line="67" pos:column="15">!=<pos:position pos:line="67" pos:column="17"/></operator> <name pos:line="67" pos:column="18">REG_NOERROR<pos:position pos:line="67" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="31">0<pos:position pos:line="67" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="34"/></condition><then pos:line="67" pos:column="34">
    <block type="pseudo"><goto pos:line="68" pos:column="5">goto <name pos:line="68" pos:column="10">free_return<pos:position pos:line="68" pos:column="21"/></name>;<pos:position pos:line="68" pos:column="22"/></goto></block></then></if>

  <comment type="block" pos:line="70" pos:column="3">/* We will log all the DFA states through which the dfa pass,
     if nmatch &gt; 1, or this dfa has "multibyte node", which is a
     back-reference or a node which can accept multibyte character or
     multi character collating element.  */</comment>
  <if pos:line="74" pos:column="3">if <condition pos:line="74" pos:column="6">(<expr><name pos:line="74" pos:column="7">nmatch<pos:position pos:line="74" pos:column="13"/></name> <operator pos:line="74" pos:column="14">&gt;<pos:position pos:line="74" pos:column="18"/></operator> <literal type="number" pos:line="74" pos:column="16">1<pos:position pos:line="74" pos:column="17"/></literal> <operator pos:line="74" pos:column="18">||<pos:position pos:line="74" pos:column="20"/></operator> <name><name pos:line="74" pos:column="21">dfa<pos:position pos:line="74" pos:column="24"/></name><operator pos:line="74" pos:column="24">-&gt;<pos:position pos:line="74" pos:column="29"/></operator><name pos:line="74" pos:column="26">has_mb_node<pos:position pos:line="74" pos:column="37"/></name></name></expr>)<pos:position pos:line="74" pos:column="38"/></condition><then pos:line="74" pos:column="38">
    <block pos:line="75" pos:column="5">{
      <comment type="block" pos:line="76" pos:column="7">/* Avoid overflow.  */</comment>
      <if pos:line="77" pos:column="7">if <condition pos:line="77" pos:column="10">(<expr><call><name pos:line="77" pos:column="11">BE<pos:position pos:line="77" pos:column="13"/></name> <argument_list pos:line="77" pos:column="14">(<argument><expr><name pos:line="77" pos:column="15">SIZE_MAX<pos:position pos:line="77" pos:column="23"/></name> <operator pos:line="77" pos:column="24">/<pos:position pos:line="77" pos:column="25"/></operator> <sizeof pos:line="77" pos:column="26">sizeof <argument_list pos:line="77" pos:column="33">(<argument><expr><name pos:line="77" pos:column="34">re_dfastate_t<pos:position pos:line="77" pos:column="47"/></name> <operator pos:line="77" pos:column="48">*<pos:position pos:line="77" pos:column="49"/></operator></expr></argument>)<pos:position pos:line="77" pos:column="50"/></argument_list></sizeof> <operator pos:line="77" pos:column="51">&lt;=<pos:position pos:line="77" pos:column="56"/></operator> <name><name pos:line="77" pos:column="54">mctx<pos:position pos:line="77" pos:column="58"/></name><operator pos:line="77" pos:column="58">.<pos:position pos:line="77" pos:column="59"/></operator><name pos:line="77" pos:column="59">input<pos:position pos:line="77" pos:column="64"/></name><operator pos:line="77" pos:column="64">.<pos:position pos:line="77" pos:column="65"/></operator><name pos:line="77" pos:column="65">bufs_len<pos:position pos:line="77" pos:column="73"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="77" pos:column="75">0<pos:position pos:line="77" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="77" pos:column="78"/></condition><then pos:line="77" pos:column="78">
	<block pos:line="78" pos:column="9">{
	  <expr_stmt><expr><name pos:line="79" pos:column="11">err<pos:position pos:line="79" pos:column="14"/></name> <operator pos:line="79" pos:column="15">=<pos:position pos:line="79" pos:column="16"/></operator> <name pos:line="79" pos:column="17">REG_ESPACE<pos:position pos:line="79" pos:column="27"/></name></expr>;<pos:position pos:line="79" pos:column="28"/></expr_stmt>
	  <goto pos:line="80" pos:column="11">goto <name pos:line="80" pos:column="16">free_return<pos:position pos:line="80" pos:column="27"/></name>;<pos:position pos:line="80" pos:column="28"/></goto>
	}<pos:position pos:line="81" pos:column="10"/></block></then></if>

      <expr_stmt><expr><name><name pos:line="83" pos:column="7">mctx<pos:position pos:line="83" pos:column="11"/></name><operator pos:line="83" pos:column="11">.<pos:position pos:line="83" pos:column="12"/></operator><name pos:line="83" pos:column="12">state_log<pos:position pos:line="83" pos:column="21"/></name></name> <operator pos:line="83" pos:column="22">=<pos:position pos:line="83" pos:column="23"/></operator> <call><name pos:line="83" pos:column="24">re_malloc<pos:position pos:line="83" pos:column="33"/></name> <argument_list pos:line="83" pos:column="34">(<argument><expr><name pos:line="83" pos:column="35">re_dfastate_t<pos:position pos:line="83" pos:column="48"/></name> <operator pos:line="83" pos:column="49">*<pos:position pos:line="83" pos:column="50"/></operator></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="52">mctx<pos:position pos:line="83" pos:column="56"/></name><operator pos:line="83" pos:column="56">.<pos:position pos:line="83" pos:column="57"/></operator><name pos:line="83" pos:column="57">input<pos:position pos:line="83" pos:column="62"/></name><operator pos:line="83" pos:column="62">.<pos:position pos:line="83" pos:column="63"/></operator><name pos:line="83" pos:column="63">bufs_len<pos:position pos:line="83" pos:column="71"/></name></name> <operator pos:line="83" pos:column="72">+<pos:position pos:line="83" pos:column="73"/></operator> <literal type="number" pos:line="83" pos:column="74">1<pos:position pos:line="83" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="77"/></expr_stmt>
      <if pos:line="84" pos:column="7">if <condition pos:line="84" pos:column="10">(<expr><call><name pos:line="84" pos:column="11">BE<pos:position pos:line="84" pos:column="13"/></name> <argument_list pos:line="84" pos:column="14">(<argument><expr><name><name pos:line="84" pos:column="15">mctx<pos:position pos:line="84" pos:column="19"/></name><operator pos:line="84" pos:column="19">.<pos:position pos:line="84" pos:column="20"/></operator><name pos:line="84" pos:column="20">state_log<pos:position pos:line="84" pos:column="29"/></name></name> <operator pos:line="84" pos:column="30">==<pos:position pos:line="84" pos:column="32"/></operator> <name pos:line="84" pos:column="33">NULL<pos:position pos:line="84" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="84" pos:column="39">0<pos:position pos:line="84" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="42"/></condition><then pos:line="84" pos:column="42">
	<block pos:line="85" pos:column="9">{
	  <expr_stmt><expr><name pos:line="86" pos:column="11">err<pos:position pos:line="86" pos:column="14"/></name> <operator pos:line="86" pos:column="15">=<pos:position pos:line="86" pos:column="16"/></operator> <name pos:line="86" pos:column="17">REG_ESPACE<pos:position pos:line="86" pos:column="27"/></name></expr>;<pos:position pos:line="86" pos:column="28"/></expr_stmt>
	  <goto pos:line="87" pos:column="11">goto <name pos:line="87" pos:column="16">free_return<pos:position pos:line="87" pos:column="27"/></name>;<pos:position pos:line="87" pos:column="28"/></goto>
	}<pos:position pos:line="88" pos:column="10"/></block></then></if>
    }<pos:position pos:line="89" pos:column="6"/></block></then>
  <else pos:line="90" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="91" pos:column="5">mctx<pos:position pos:line="91" pos:column="9"/></name><operator pos:line="91" pos:column="9">.<pos:position pos:line="91" pos:column="10"/></operator><name pos:line="91" pos:column="10">state_log<pos:position pos:line="91" pos:column="19"/></name></name> <operator pos:line="91" pos:column="20">=<pos:position pos:line="91" pos:column="21"/></operator> <name pos:line="91" pos:column="22">NULL<pos:position pos:line="91" pos:column="26"/></name></expr>;<pos:position pos:line="91" pos:column="27"/></expr_stmt></block></else></if>

  <expr_stmt><expr><name pos:line="93" pos:column="3">match_first<pos:position pos:line="93" pos:column="14"/></name> <operator pos:line="93" pos:column="15">=<pos:position pos:line="93" pos:column="16"/></operator> <name pos:line="93" pos:column="17">start<pos:position pos:line="93" pos:column="22"/></name></expr>;<pos:position pos:line="93" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="94" pos:column="3">mctx<pos:position pos:line="94" pos:column="7"/></name><operator pos:line="94" pos:column="7">.<pos:position pos:line="94" pos:column="8"/></operator><name pos:line="94" pos:column="8">input<pos:position pos:line="94" pos:column="13"/></name><operator pos:line="94" pos:column="13">.<pos:position pos:line="94" pos:column="14"/></operator><name pos:line="94" pos:column="14">tip_context<pos:position pos:line="94" pos:column="25"/></name></name> <operator pos:line="94" pos:column="26">=<pos:position pos:line="94" pos:column="27"/></operator> <ternary><condition><expr><operator pos:line="94" pos:column="28">(<pos:position pos:line="94" pos:column="29"/></operator><name pos:line="94" pos:column="29">eflags<pos:position pos:line="94" pos:column="35"/></name> <operator pos:line="94" pos:column="36">&amp;<pos:position pos:line="94" pos:column="41"/></operator> <name pos:line="94" pos:column="38">REG_NOTBOL<pos:position pos:line="94" pos:column="48"/></name><operator pos:line="94" pos:column="48">)<pos:position pos:line="94" pos:column="49"/></operator></expr> ?<pos:position pos:line="94" pos:column="51"/></condition><then pos:line="94" pos:column="51"> <expr><name pos:line="94" pos:column="52">CONTEXT_BEGBUF<pos:position pos:line="94" pos:column="66"/></name></expr>
			   <pos:position pos:line="95" pos:column="7"/></then><else pos:line="95" pos:column="28">: <expr><name pos:line="95" pos:column="30">CONTEXT_NEWLINE<pos:position pos:line="95" pos:column="45"/></name> <operator pos:line="95" pos:column="46">|<pos:position pos:line="95" pos:column="47"/></operator> <name pos:line="95" pos:column="48">CONTEXT_BEGBUF<pos:position pos:line="95" pos:column="62"/></name></expr></else></ternary></expr>;<pos:position pos:line="95" pos:column="63"/></expr_stmt>

  <comment type="block" pos:line="97" pos:column="3">/* Check incrementally whether of not the input string match.  */</comment>
  <expr_stmt><expr><name pos:line="98" pos:column="3">incr<pos:position pos:line="98" pos:column="7"/></name> <operator pos:line="98" pos:column="8">=<pos:position pos:line="98" pos:column="9"/></operator> <ternary><condition><expr><operator pos:line="98" pos:column="10">(<pos:position pos:line="98" pos:column="11"/></operator><name pos:line="98" pos:column="11">range<pos:position pos:line="98" pos:column="16"/></name> <operator pos:line="98" pos:column="17">&lt;<pos:position pos:line="98" pos:column="21"/></operator> <literal type="number" pos:line="98" pos:column="19">0<pos:position pos:line="98" pos:column="20"/></literal><operator pos:line="98" pos:column="20">)<pos:position pos:line="98" pos:column="21"/></operator></expr> ?<pos:position pos:line="98" pos:column="23"/></condition><then pos:line="98" pos:column="23"> <expr><operator pos:line="98" pos:column="24">-<pos:position pos:line="98" pos:column="25"/></operator><literal type="number" pos:line="98" pos:column="25">1<pos:position pos:line="98" pos:column="26"/></literal></expr> <pos:position pos:line="98" pos:column="27"/></then><else pos:line="98" pos:column="27">: <expr><literal type="number" pos:line="98" pos:column="29">1<pos:position pos:line="98" pos:column="30"/></literal></expr></else></ternary></expr>;<pos:position pos:line="98" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="99" pos:column="3">left_lim<pos:position pos:line="99" pos:column="11"/></name> <operator pos:line="99" pos:column="12">=<pos:position pos:line="99" pos:column="13"/></operator> <ternary><condition><expr><operator pos:line="99" pos:column="14">(<pos:position pos:line="99" pos:column="15"/></operator><name pos:line="99" pos:column="15">range<pos:position pos:line="99" pos:column="20"/></name> <operator pos:line="99" pos:column="21">&lt;<pos:position pos:line="99" pos:column="25"/></operator> <literal type="number" pos:line="99" pos:column="23">0<pos:position pos:line="99" pos:column="24"/></literal><operator pos:line="99" pos:column="24">)<pos:position pos:line="99" pos:column="25"/></operator></expr> ?<pos:position pos:line="99" pos:column="27"/></condition><then pos:line="99" pos:column="27"> <expr><name pos:line="99" pos:column="28">start<pos:position pos:line="99" pos:column="33"/></name> <operator pos:line="99" pos:column="34">+<pos:position pos:line="99" pos:column="35"/></operator> <name pos:line="99" pos:column="36">range<pos:position pos:line="99" pos:column="41"/></name></expr> <pos:position pos:line="99" pos:column="42"/></then><else pos:line="99" pos:column="42">: <expr><name pos:line="99" pos:column="44">start<pos:position pos:line="99" pos:column="49"/></name></expr></else></ternary></expr>;<pos:position pos:line="99" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><name pos:line="100" pos:column="3">right_lim<pos:position pos:line="100" pos:column="12"/></name> <operator pos:line="100" pos:column="13">=<pos:position pos:line="100" pos:column="14"/></operator> <ternary><condition><expr><operator pos:line="100" pos:column="15">(<pos:position pos:line="100" pos:column="16"/></operator><name pos:line="100" pos:column="16">range<pos:position pos:line="100" pos:column="21"/></name> <operator pos:line="100" pos:column="22">&lt;<pos:position pos:line="100" pos:column="26"/></operator> <literal type="number" pos:line="100" pos:column="24">0<pos:position pos:line="100" pos:column="25"/></literal><operator pos:line="100" pos:column="25">)<pos:position pos:line="100" pos:column="26"/></operator></expr> ?<pos:position pos:line="100" pos:column="28"/></condition><then pos:line="100" pos:column="28"> <expr><name pos:line="100" pos:column="29">start<pos:position pos:line="100" pos:column="34"/></name></expr> <pos:position pos:line="100" pos:column="35"/></then><else pos:line="100" pos:column="35">: <expr><name pos:line="100" pos:column="37">start<pos:position pos:line="100" pos:column="42"/></name> <operator pos:line="100" pos:column="43">+<pos:position pos:line="100" pos:column="44"/></operator> <name pos:line="100" pos:column="45">range<pos:position pos:line="100" pos:column="50"/></name></expr></else></ternary></expr>;<pos:position pos:line="100" pos:column="51"/></expr_stmt>
  <expr_stmt><expr><name pos:line="101" pos:column="3">sb<pos:position pos:line="101" pos:column="5"/></name> <operator pos:line="101" pos:column="6">=<pos:position pos:line="101" pos:column="7"/></operator> <name><name pos:line="101" pos:column="8">dfa<pos:position pos:line="101" pos:column="11"/></name><operator pos:line="101" pos:column="11">-&gt;<pos:position pos:line="101" pos:column="16"/></operator><name pos:line="101" pos:column="13">mb_cur_max<pos:position pos:line="101" pos:column="23"/></name></name> <operator pos:line="101" pos:column="24">==<pos:position pos:line="101" pos:column="26"/></operator> <literal type="number" pos:line="101" pos:column="27">1<pos:position pos:line="101" pos:column="28"/></literal></expr>;<pos:position pos:line="101" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="102" pos:column="3">match_kind<pos:position pos:line="102" pos:column="13"/></name> <operator pos:line="102" pos:column="14">=<pos:position pos:line="102" pos:column="15"/></operator>
    <operator pos:line="103" pos:column="5">(<pos:position pos:line="103" pos:column="6"/></operator><ternary><condition><expr><name pos:line="103" pos:column="6">fastmap<pos:position pos:line="103" pos:column="13"/></name></expr>
     ?<pos:position pos:line="104" pos:column="7"/></condition><then pos:line="104" pos:column="7"> <expr><operator pos:line="104" pos:column="8">(<pos:position pos:line="104" pos:column="9"/></operator><operator pos:line="104" pos:column="9">(<pos:position pos:line="104" pos:column="10"/></operator><ternary><condition><expr><name pos:line="104" pos:column="10">sb<pos:position pos:line="104" pos:column="12"/></name> <operator pos:line="104" pos:column="13">||<pos:position pos:line="104" pos:column="15"/></operator> <operator pos:line="104" pos:column="16">!<pos:position pos:line="104" pos:column="17"/></operator><operator pos:line="104" pos:column="17">(<pos:position pos:line="104" pos:column="18"/></operator><name><name pos:line="104" pos:column="18">preg<pos:position pos:line="104" pos:column="22"/></name><operator pos:line="104" pos:column="22">-&gt;<pos:position pos:line="104" pos:column="27"/></operator><name pos:line="104" pos:column="24">syntax<pos:position pos:line="104" pos:column="30"/></name></name> <operator pos:line="104" pos:column="31">&amp;<pos:position pos:line="104" pos:column="36"/></operator> <name pos:line="104" pos:column="33">RE_ICASE<pos:position pos:line="104" pos:column="41"/></name> <operator pos:line="104" pos:column="42">||<pos:position pos:line="104" pos:column="44"/></operator> <name pos:line="104" pos:column="45">t<pos:position pos:line="104" pos:column="46"/></name><operator pos:line="104" pos:column="46">)<pos:position pos:line="104" pos:column="47"/></operator></expr> ?<pos:position pos:line="104" pos:column="49"/></condition><then pos:line="104" pos:column="49"> <expr><literal type="number" pos:line="104" pos:column="50">4<pos:position pos:line="104" pos:column="51"/></literal></expr> <pos:position pos:line="104" pos:column="52"/></then><else pos:line="104" pos:column="52">: <expr><literal type="number" pos:line="104" pos:column="54">0<pos:position pos:line="104" pos:column="55"/></literal></expr></else></ternary><operator pos:line="104" pos:column="55">)<pos:position pos:line="104" pos:column="56"/></operator>
	<operator pos:line="105" pos:column="9">|<pos:position pos:line="105" pos:column="10"/></operator> <operator pos:line="105" pos:column="11">(<pos:position pos:line="105" pos:column="12"/></operator><ternary><condition><expr><name pos:line="105" pos:column="12">range<pos:position pos:line="105" pos:column="17"/></name> <operator pos:line="105" pos:column="18">&gt;=<pos:position pos:line="105" pos:column="23"/></operator> <literal type="number" pos:line="105" pos:column="21">0<pos:position pos:line="105" pos:column="22"/></literal></expr> ?<pos:position pos:line="105" pos:column="24"/></condition><then pos:line="105" pos:column="24"> <expr><literal type="number" pos:line="105" pos:column="25">2<pos:position pos:line="105" pos:column="26"/></literal></expr> <pos:position pos:line="105" pos:column="27"/></then><else pos:line="105" pos:column="27">: <expr><literal type="number" pos:line="105" pos:column="29">0<pos:position pos:line="105" pos:column="30"/></literal></expr></else></ternary><operator pos:line="105" pos:column="30">)<pos:position pos:line="105" pos:column="31"/></operator>
	<operator pos:line="106" pos:column="9">|<pos:position pos:line="106" pos:column="10"/></operator> <operator pos:line="106" pos:column="11">(<pos:position pos:line="106" pos:column="12"/></operator><ternary><condition><expr><name pos:line="106" pos:column="12">t<pos:position pos:line="106" pos:column="13"/></name> <operator pos:line="106" pos:column="14">!=<pos:position pos:line="106" pos:column="16"/></operator> <name pos:line="106" pos:column="17">NULL<pos:position pos:line="106" pos:column="21"/></name></expr> ?<pos:position pos:line="106" pos:column="23"/></condition><then pos:line="106" pos:column="23"> <expr><literal type="number" pos:line="106" pos:column="24">1<pos:position pos:line="106" pos:column="25"/></literal></expr> <pos:position pos:line="106" pos:column="26"/></then><else pos:line="106" pos:column="26">: <expr><literal type="number" pos:line="106" pos:column="28">0<pos:position pos:line="106" pos:column="29"/></literal></expr></else></ternary><operator pos:line="106" pos:column="29">)<pos:position pos:line="106" pos:column="30"/></operator><operator pos:line="106" pos:column="30">)<pos:position pos:line="106" pos:column="31"/></operator></expr>
     <pos:position pos:line="107" pos:column="6"/></then><else pos:line="107" pos:column="6">: <expr><literal type="number" pos:line="107" pos:column="8">8<pos:position pos:line="107" pos:column="9"/></literal></expr></else></ternary><operator pos:line="107" pos:column="9">)<pos:position pos:line="107" pos:column="10"/></operator></expr>;<pos:position pos:line="107" pos:column="11"/></expr_stmt>

  <for pos:line="109" pos:column="3">for <control pos:line="109" pos:column="7">(<init pos:line="109" pos:column="8">;<pos:position pos:line="109" pos:column="9"/></init><condition pos:line="109" pos:column="9">;<pos:position pos:line="109" pos:column="10"/></condition> <incr><expr><name pos:line="109" pos:column="11">match_first<pos:position pos:line="109" pos:column="22"/></name> <operator pos:line="109" pos:column="23">+=<pos:position pos:line="109" pos:column="25"/></operator> <name pos:line="109" pos:column="26">incr<pos:position pos:line="109" pos:column="30"/></name></expr></incr>)<pos:position pos:line="109" pos:column="31"/></control>
    <block pos:line="110" pos:column="5">{
      <expr_stmt><expr><name pos:line="111" pos:column="7">err<pos:position pos:line="111" pos:column="10"/></name> <operator pos:line="111" pos:column="11">=<pos:position pos:line="111" pos:column="12"/></operator> <name pos:line="111" pos:column="13">REG_NOMATCH<pos:position pos:line="111" pos:column="24"/></name></expr>;<pos:position pos:line="111" pos:column="25"/></expr_stmt>
      <if pos:line="112" pos:column="7">if <condition pos:line="112" pos:column="10">(<expr><name pos:line="112" pos:column="11">match_first<pos:position pos:line="112" pos:column="22"/></name> <operator pos:line="112" pos:column="23">&lt;<pos:position pos:line="112" pos:column="27"/></operator> <name pos:line="112" pos:column="25">left_lim<pos:position pos:line="112" pos:column="33"/></name> <operator pos:line="112" pos:column="34">||<pos:position pos:line="112" pos:column="36"/></operator> <name pos:line="112" pos:column="37">right_lim<pos:position pos:line="112" pos:column="46"/></name> <operator pos:line="112" pos:column="47">&lt;<pos:position pos:line="112" pos:column="51"/></operator> <name pos:line="112" pos:column="49">match_first<pos:position pos:line="112" pos:column="60"/></name></expr>)<pos:position pos:line="112" pos:column="61"/></condition><then pos:line="112" pos:column="61">
	<block type="pseudo"><goto pos:line="113" pos:column="9">goto <name pos:line="113" pos:column="14">free_return<pos:position pos:line="113" pos:column="25"/></name>;<pos:position pos:line="113" pos:column="26"/></goto></block></then></if>

      <comment type="block" pos:line="115" pos:column="7">/* Advance as rapidly as possible through the string, until we
	 find a plausible place to start matching.  This may be done
	 with varying efficiency, so there are various possibilities:
	 only the most common of them are specialized, in order to
	 save on code size.  We use a switch statement for speed.  */</comment>
      <switch pos:line="120" pos:column="7">switch <condition pos:line="120" pos:column="14">(<expr><name pos:line="120" pos:column="15">match_kind<pos:position pos:line="120" pos:column="25"/></name></expr>)<pos:position pos:line="120" pos:column="26"/></condition>
	<block pos:line="121" pos:column="9">{
	<case pos:line="122" pos:column="9">case <expr><literal type="number" pos:line="122" pos:column="14">8<pos:position pos:line="122" pos:column="15"/></literal></expr>:<pos:position pos:line="122" pos:column="16"/></case>
	  <comment type="block" pos:line="123" pos:column="11">/* No fastmap.  */</comment>
	  <break pos:line="124" pos:column="11">break;<pos:position pos:line="124" pos:column="17"/></break>

	<case pos:line="126" pos:column="9">case <expr><literal type="number" pos:line="126" pos:column="14">7<pos:position pos:line="126" pos:column="15"/></literal></expr>:<pos:position pos:line="126" pos:column="16"/></case>
	  <comment type="block" pos:line="127" pos:column="11">/* Fastmap with single-byte translation, match forward.  */</comment>
	  <while pos:line="128" pos:column="11">while <condition pos:line="128" pos:column="17">(<expr><call><name pos:line="128" pos:column="18">BE<pos:position pos:line="128" pos:column="20"/></name> <argument_list pos:line="128" pos:column="21">(<argument><expr><name pos:line="128" pos:column="22">match_first<pos:position pos:line="128" pos:column="33"/></name> <operator pos:line="128" pos:column="34">&lt;<pos:position pos:line="128" pos:column="38"/></operator> <name pos:line="128" pos:column="36">right_lim<pos:position pos:line="128" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="128" pos:column="47">1<pos:position pos:line="128" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="128" pos:column="49"/></argument_list></call>
		 <operator pos:line="129" pos:column="18">&amp;&amp;<pos:position pos:line="129" pos:column="28"/></operator> <operator pos:line="129" pos:column="21">!<pos:position pos:line="129" pos:column="22"/></operator><name><name pos:line="129" pos:column="22">fastmap<pos:position pos:line="129" pos:column="29"/></name><index pos:line="129" pos:column="29">[<expr><name><name pos:line="129" pos:column="30">t<pos:position pos:line="129" pos:column="31"/></name><index pos:line="129" pos:column="31">[<expr><operator pos:line="129" pos:column="32">(<pos:position pos:line="129" pos:column="33"/></operator><name pos:line="129" pos:column="33">unsigned<pos:position pos:line="129" pos:column="41"/></name> <name pos:line="129" pos:column="42">char<pos:position pos:line="129" pos:column="46"/></name><operator pos:line="129" pos:column="46">)<pos:position pos:line="129" pos:column="47"/></operator> <name><name pos:line="129" pos:column="48">string<pos:position pos:line="129" pos:column="54"/></name><index pos:line="129" pos:column="54">[<expr><name pos:line="129" pos:column="55">match_first<pos:position pos:line="129" pos:column="66"/></name></expr>]<pos:position pos:line="129" pos:column="67"/></index></name></expr>]<pos:position pos:line="129" pos:column="68"/></index></name></expr>]<pos:position pos:line="129" pos:column="69"/></index></name></expr>)<pos:position pos:line="129" pos:column="70"/></condition>
	    <block type="pseudo"><expr_stmt><expr><operator pos:line="130" pos:column="13">++<pos:position pos:line="130" pos:column="15"/></operator><name pos:line="130" pos:column="15">match_first<pos:position pos:line="130" pos:column="26"/></name></expr>;<pos:position pos:line="130" pos:column="27"/></expr_stmt></block></while>
	  <goto pos:line="131" pos:column="11">goto <name pos:line="131" pos:column="16">forward_match_found_start_or_reached_end<pos:position pos:line="131" pos:column="56"/></name>;<pos:position pos:line="131" pos:column="57"/></goto>

	<case pos:line="133" pos:column="9">case <expr><literal type="number" pos:line="133" pos:column="14">6<pos:position pos:line="133" pos:column="15"/></literal></expr>:<pos:position pos:line="133" pos:column="16"/></case>
	  <comment type="block" pos:line="134" pos:column="11">/* Fastmap without translation, match forward.  */</comment>
	  <while pos:line="135" pos:column="11">while <condition pos:line="135" pos:column="17">(<expr><call><name pos:line="135" pos:column="18">BE<pos:position pos:line="135" pos:column="20"/></name> <argument_list pos:line="135" pos:column="21">(<argument><expr><name pos:line="135" pos:column="22">match_first<pos:position pos:line="135" pos:column="33"/></name> <operator pos:line="135" pos:column="34">&lt;<pos:position pos:line="135" pos:column="38"/></operator> <name pos:line="135" pos:column="36">right_lim<pos:position pos:line="135" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="135" pos:column="47">1<pos:position pos:line="135" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="135" pos:column="49"/></argument_list></call>
		 <operator pos:line="136" pos:column="18">&amp;&amp;<pos:position pos:line="136" pos:column="28"/></operator> <operator pos:line="136" pos:column="21">!<pos:position pos:line="136" pos:column="22"/></operator><name><name pos:line="136" pos:column="22">fastmap<pos:position pos:line="136" pos:column="29"/></name><index pos:line="136" pos:column="29">[<expr><operator pos:line="136" pos:column="30">(<pos:position pos:line="136" pos:column="31"/></operator><name pos:line="136" pos:column="31">unsigned<pos:position pos:line="136" pos:column="39"/></name> <name pos:line="136" pos:column="40">char<pos:position pos:line="136" pos:column="44"/></name><operator pos:line="136" pos:column="44">)<pos:position pos:line="136" pos:column="45"/></operator> <name><name pos:line="136" pos:column="46">string<pos:position pos:line="136" pos:column="52"/></name><index pos:line="136" pos:column="52">[<expr><name pos:line="136" pos:column="53">match_first<pos:position pos:line="136" pos:column="64"/></name></expr>]<pos:position pos:line="136" pos:column="65"/></index></name></expr>]<pos:position pos:line="136" pos:column="66"/></index></name></expr>)<pos:position pos:line="136" pos:column="67"/></condition>
	    <block type="pseudo"><expr_stmt><expr><operator pos:line="137" pos:column="13">++<pos:position pos:line="137" pos:column="15"/></operator><name pos:line="137" pos:column="15">match_first<pos:position pos:line="137" pos:column="26"/></name></expr>;<pos:position pos:line="137" pos:column="27"/></expr_stmt></block></while>

	<label><name pos:line="139" pos:column="9">forward_match_found_start_or_reached_end<pos:position pos:line="139" pos:column="49"/></name>:<pos:position pos:line="139" pos:column="50"/></label>
	  <if pos:line="140" pos:column="11">if <condition pos:line="140" pos:column="14">(<expr><call><name pos:line="140" pos:column="15">BE<pos:position pos:line="140" pos:column="17"/></name> <argument_list pos:line="140" pos:column="18">(<argument><expr><name pos:line="140" pos:column="19">match_first<pos:position pos:line="140" pos:column="30"/></name> <operator pos:line="140" pos:column="31">==<pos:position pos:line="140" pos:column="33"/></operator> <name pos:line="140" pos:column="34">right_lim<pos:position pos:line="140" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="140" pos:column="45">0<pos:position pos:line="140" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="140" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="140" pos:column="48"/></condition><then pos:line="140" pos:column="48">
	    <block pos:line="141" pos:column="13">{
	      <expr_stmt><expr><name pos:line="142" pos:column="15">ch<pos:position pos:line="142" pos:column="17"/></name> <operator pos:line="142" pos:column="18">=<pos:position pos:line="142" pos:column="19"/></operator> <ternary><condition><expr><name pos:line="142" pos:column="20">match_first<pos:position pos:line="142" pos:column="31"/></name> <operator pos:line="142" pos:column="32">&gt;=<pos:position pos:line="142" pos:column="37"/></operator> <name pos:line="142" pos:column="35">length<pos:position pos:line="142" pos:column="41"/></name></expr>
		       ?<pos:position pos:line="143" pos:column="25"/></condition><then pos:line="143" pos:column="25"> <expr><literal type="number" pos:line="143" pos:column="26">0<pos:position pos:line="143" pos:column="27"/></literal></expr> <pos:position pos:line="143" pos:column="28"/></then><else pos:line="143" pos:column="28">: <expr><operator pos:line="143" pos:column="30">(<pos:position pos:line="143" pos:column="31"/></operator><name pos:line="143" pos:column="31">unsigned<pos:position pos:line="143" pos:column="39"/></name> <name pos:line="143" pos:column="40">char<pos:position pos:line="143" pos:column="44"/></name><operator pos:line="143" pos:column="44">)<pos:position pos:line="143" pos:column="45"/></operator> <name><name pos:line="143" pos:column="46">string<pos:position pos:line="143" pos:column="52"/></name><index pos:line="143" pos:column="52">[<expr><name pos:line="143" pos:column="53">match_first<pos:position pos:line="143" pos:column="64"/></name></expr>]<pos:position pos:line="143" pos:column="65"/></index></name></expr></else></ternary></expr>;<pos:position pos:line="143" pos:column="66"/></expr_stmt>
	      <if pos:line="144" pos:column="15">if <condition pos:line="144" pos:column="18">(<expr><operator pos:line="144" pos:column="19">!<pos:position pos:line="144" pos:column="20"/></operator><name><name pos:line="144" pos:column="20">fastmap<pos:position pos:line="144" pos:column="27"/></name><index pos:line="144" pos:column="27">[<expr><ternary><condition><expr><name pos:line="144" pos:column="28">t<pos:position pos:line="144" pos:column="29"/></name></expr> ?<pos:position pos:line="144" pos:column="31"/></condition><then pos:line="144" pos:column="31"> <expr><name><name pos:line="144" pos:column="32">t<pos:position pos:line="144" pos:column="33"/></name><index pos:line="144" pos:column="33">[<expr><name pos:line="144" pos:column="34">ch<pos:position pos:line="144" pos:column="36"/></name></expr>]<pos:position pos:line="144" pos:column="37"/></index></name></expr> <pos:position pos:line="144" pos:column="38"/></then><else pos:line="144" pos:column="38">: <expr><name pos:line="144" pos:column="40">ch<pos:position pos:line="144" pos:column="42"/></name></expr></else></ternary></expr>]<pos:position pos:line="144" pos:column="43"/></index></name></expr>)<pos:position pos:line="144" pos:column="44"/></condition><then pos:line="144" pos:column="44">
		<block type="pseudo"><goto pos:line="145" pos:column="17">goto <name pos:line="145" pos:column="22">free_return<pos:position pos:line="145" pos:column="33"/></name>;<pos:position pos:line="145" pos:column="34"/></goto></block></then></if>
	    }<pos:position pos:line="146" pos:column="14"/></block></then></if>
	  <break pos:line="147" pos:column="11">break;<pos:position pos:line="147" pos:column="17"/></break>

	<case pos:line="149" pos:column="9">case <expr><literal type="number" pos:line="149" pos:column="14">4<pos:position pos:line="149" pos:column="15"/></literal></expr>:<pos:position pos:line="149" pos:column="16"/></case>
	<case pos:line="150" pos:column="9">case <expr><literal type="number" pos:line="150" pos:column="14">5<pos:position pos:line="150" pos:column="15"/></literal></expr>:<pos:position pos:line="150" pos:column="16"/></case>
	  <comment type="block" pos:line="151" pos:column="11">/* Fastmap without multi-byte translation, match backwards.  */</comment>
	  <while pos:line="152" pos:column="11">while <condition pos:line="152" pos:column="17">(<expr><name pos:line="152" pos:column="18">match_first<pos:position pos:line="152" pos:column="29"/></name> <operator pos:line="152" pos:column="30">&gt;=<pos:position pos:line="152" pos:column="35"/></operator> <name pos:line="152" pos:column="33">left_lim<pos:position pos:line="152" pos:column="41"/></name></expr>)<pos:position pos:line="152" pos:column="42"/></condition>
	    <block pos:line="153" pos:column="13">{
	      <expr_stmt><expr><name pos:line="154" pos:column="15">ch<pos:position pos:line="154" pos:column="17"/></name> <operator pos:line="154" pos:column="18">=<pos:position pos:line="154" pos:column="19"/></operator> <ternary><condition><expr><name pos:line="154" pos:column="20">match_first<pos:position pos:line="154" pos:column="31"/></name> <operator pos:line="154" pos:column="32">&gt;=<pos:position pos:line="154" pos:column="37"/></operator> <name pos:line="154" pos:column="35">length<pos:position pos:line="154" pos:column="41"/></name></expr>
		       ?<pos:position pos:line="155" pos:column="25"/></condition><then pos:line="155" pos:column="25"> <expr><literal type="number" pos:line="155" pos:column="26">0<pos:position pos:line="155" pos:column="27"/></literal></expr> <pos:position pos:line="155" pos:column="28"/></then><else pos:line="155" pos:column="28">: <expr><operator pos:line="155" pos:column="30">(<pos:position pos:line="155" pos:column="31"/></operator><name pos:line="155" pos:column="31">unsigned<pos:position pos:line="155" pos:column="39"/></name> <name pos:line="155" pos:column="40">char<pos:position pos:line="155" pos:column="44"/></name><operator pos:line="155" pos:column="44">)<pos:position pos:line="155" pos:column="45"/></operator> <name><name pos:line="155" pos:column="46">string<pos:position pos:line="155" pos:column="52"/></name><index pos:line="155" pos:column="52">[<expr><name pos:line="155" pos:column="53">match_first<pos:position pos:line="155" pos:column="64"/></name></expr>]<pos:position pos:line="155" pos:column="65"/></index></name></expr></else></ternary></expr>;<pos:position pos:line="155" pos:column="66"/></expr_stmt>
	      <if pos:line="156" pos:column="15">if <condition pos:line="156" pos:column="18">(<expr><name><name pos:line="156" pos:column="19">fastmap<pos:position pos:line="156" pos:column="26"/></name><index pos:line="156" pos:column="26">[<expr><ternary><condition><expr><name pos:line="156" pos:column="27">t<pos:position pos:line="156" pos:column="28"/></name></expr> ?<pos:position pos:line="156" pos:column="30"/></condition><then pos:line="156" pos:column="30"> <expr><name><name pos:line="156" pos:column="31">t<pos:position pos:line="156" pos:column="32"/></name><index pos:line="156" pos:column="32">[<expr><name pos:line="156" pos:column="33">ch<pos:position pos:line="156" pos:column="35"/></name></expr>]<pos:position pos:line="156" pos:column="36"/></index></name></expr> <pos:position pos:line="156" pos:column="37"/></then><else pos:line="156" pos:column="37">: <expr><name pos:line="156" pos:column="39">ch<pos:position pos:line="156" pos:column="41"/></name></expr></else></ternary></expr>]<pos:position pos:line="156" pos:column="42"/></index></name></expr>)<pos:position pos:line="156" pos:column="43"/></condition><then pos:line="156" pos:column="43">
		<block type="pseudo"><break pos:line="157" pos:column="17">break;<pos:position pos:line="157" pos:column="23"/></break></block></then></if>
	      <expr_stmt><expr><operator pos:line="158" pos:column="15">--<pos:position pos:line="158" pos:column="17"/></operator><name pos:line="158" pos:column="17">match_first<pos:position pos:line="158" pos:column="28"/></name></expr>;<pos:position pos:line="158" pos:column="29"/></expr_stmt>
	    }<pos:position pos:line="159" pos:column="14"/></block></while>
	  <if pos:line="160" pos:column="11">if <condition pos:line="160" pos:column="14">(<expr><name pos:line="160" pos:column="15">match_first<pos:position pos:line="160" pos:column="26"/></name> <operator pos:line="160" pos:column="27">&lt;<pos:position pos:line="160" pos:column="31"/></operator> <name pos:line="160" pos:column="29">left_lim<pos:position pos:line="160" pos:column="37"/></name></expr>)<pos:position pos:line="160" pos:column="38"/></condition><then pos:line="160" pos:column="38">
	    <block type="pseudo"><goto pos:line="161" pos:column="13">goto <name pos:line="161" pos:column="18">free_return<pos:position pos:line="161" pos:column="29"/></name>;<pos:position pos:line="161" pos:column="30"/></goto></block></then></if>
	  <break pos:line="162" pos:column="11">break;<pos:position pos:line="162" pos:column="17"/></break>

	<default pos:line="164" pos:column="9">default:<pos:position pos:line="164" pos:column="17"/></default>
	  <comment type="block" pos:line="165" pos:column="11">/* In this case, we can't determine easily the current byte,
	     since it might be a component byte of a multibyte
	     character.  Then we use the constructed buffer instead.  */</comment>
	  <for pos:line="168" pos:column="11">for <control pos:line="168" pos:column="15">(<init pos:line="168" pos:column="16">;<pos:position pos:line="168" pos:column="17"/></init><condition pos:line="168" pos:column="17">;<pos:position pos:line="168" pos:column="18"/></condition><incr/>)<pos:position pos:line="168" pos:column="19"/></control>
	    <block pos:line="169" pos:column="13">{
	      <comment type="block" pos:line="170" pos:column="15">/* If MATCH_FIRST is out of the valid range, reconstruct the
		 buffers.  */</comment>
	      <decl_stmt><decl><type><name pos:line="172" pos:column="15">unsigned<pos:position pos:line="172" pos:column="23"/></name> <name pos:line="172" pos:column="24">int<pos:position pos:line="172" pos:column="27"/></name></type> <name pos:line="172" pos:column="28">offset<pos:position pos:line="172" pos:column="34"/></name> <init pos:line="172" pos:column="35">= <expr><name pos:line="172" pos:column="37">match_first<pos:position pos:line="172" pos:column="48"/></name> <operator pos:line="172" pos:column="49">-<pos:position pos:line="172" pos:column="50"/></operator> <name><name pos:line="172" pos:column="51">mctx<pos:position pos:line="172" pos:column="55"/></name><operator pos:line="172" pos:column="55">.<pos:position pos:line="172" pos:column="56"/></operator><name pos:line="172" pos:column="56">input<pos:position pos:line="172" pos:column="61"/></name><operator pos:line="172" pos:column="61">.<pos:position pos:line="172" pos:column="62"/></operator><name pos:line="172" pos:column="62">raw_mbs_idx<pos:position pos:line="172" pos:column="73"/></name></name></expr></init></decl>;<pos:position pos:line="172" pos:column="74"/></decl_stmt>
	      <if pos:line="173" pos:column="15">if <condition pos:line="173" pos:column="18">(<expr><call><name pos:line="173" pos:column="19">BE<pos:position pos:line="173" pos:column="21"/></name> <argument_list pos:line="173" pos:column="22">(<argument><expr><name pos:line="173" pos:column="23">offset<pos:position pos:line="173" pos:column="29"/></name> <operator pos:line="173" pos:column="30">&gt;=<pos:position pos:line="173" pos:column="35"/></operator> <operator pos:line="173" pos:column="33">(<pos:position pos:line="173" pos:column="34"/></operator><name pos:line="173" pos:column="34">unsigned<pos:position pos:line="173" pos:column="42"/></name> <name pos:line="173" pos:column="43">int<pos:position pos:line="173" pos:column="46"/></name><operator pos:line="173" pos:column="46">)<pos:position pos:line="173" pos:column="47"/></operator> <name><name pos:line="173" pos:column="48">mctx<pos:position pos:line="173" pos:column="52"/></name><operator pos:line="173" pos:column="52">.<pos:position pos:line="173" pos:column="53"/></operator><name pos:line="173" pos:column="53">input<pos:position pos:line="173" pos:column="58"/></name><operator pos:line="173" pos:column="58">.<pos:position pos:line="173" pos:column="59"/></operator><name pos:line="173" pos:column="59">valid_raw_len<pos:position pos:line="173" pos:column="72"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="173" pos:column="74">0<pos:position pos:line="173" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="173" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="173" pos:column="77"/></condition><then pos:line="173" pos:column="77">
		<block pos:line="174" pos:column="17">{
		  <expr_stmt><expr><name pos:line="175" pos:column="19">err<pos:position pos:line="175" pos:column="22"/></name> <operator pos:line="175" pos:column="23">=<pos:position pos:line="175" pos:column="24"/></operator> <call><name pos:line="175" pos:column="25">re_string_reconstruct<pos:position pos:line="175" pos:column="46"/></name> <argument_list pos:line="175" pos:column="47">(<argument><expr><operator pos:line="175" pos:column="48">&amp;<pos:position pos:line="175" pos:column="53"/></operator><name><name pos:line="175" pos:column="49">mctx<pos:position pos:line="175" pos:column="53"/></name><operator pos:line="175" pos:column="53">.<pos:position pos:line="175" pos:column="54"/></operator><name pos:line="175" pos:column="54">input<pos:position pos:line="175" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="175" pos:column="61">match_first<pos:position pos:line="175" pos:column="72"/></name></expr></argument>,
					       <argument><expr><name pos:line="176" pos:column="48">eflags<pos:position pos:line="176" pos:column="54"/></name></expr></argument>)<pos:position pos:line="176" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="56"/></expr_stmt>
		  <if pos:line="177" pos:column="19">if <condition pos:line="177" pos:column="22">(<expr><call><name pos:line="177" pos:column="23">BE<pos:position pos:line="177" pos:column="25"/></name> <argument_list pos:line="177" pos:column="26">(<argument><expr><name pos:line="177" pos:column="27">err<pos:position pos:line="177" pos:column="30"/></name> <operator pos:line="177" pos:column="31">!=<pos:position pos:line="177" pos:column="33"/></operator> <name pos:line="177" pos:column="34">REG_NOERROR<pos:position pos:line="177" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="177" pos:column="47">0<pos:position pos:line="177" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="177" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="177" pos:column="50"/></condition><then pos:line="177" pos:column="50">
		    <block type="pseudo"><goto pos:line="178" pos:column="21">goto <name pos:line="178" pos:column="26">free_return<pos:position pos:line="178" pos:column="37"/></name>;<pos:position pos:line="178" pos:column="38"/></goto></block></then></if>

		  <expr_stmt><expr><name pos:line="180" pos:column="19">offset<pos:position pos:line="180" pos:column="25"/></name> <operator pos:line="180" pos:column="26">=<pos:position pos:line="180" pos:column="27"/></operator> <name pos:line="180" pos:column="28">match_first<pos:position pos:line="180" pos:column="39"/></name> <operator pos:line="180" pos:column="40">-<pos:position pos:line="180" pos:column="41"/></operator> <name><name pos:line="180" pos:column="42">mctx<pos:position pos:line="180" pos:column="46"/></name><operator pos:line="180" pos:column="46">.<pos:position pos:line="180" pos:column="47"/></operator><name pos:line="180" pos:column="47">input<pos:position pos:line="180" pos:column="52"/></name><operator pos:line="180" pos:column="52">.<pos:position pos:line="180" pos:column="53"/></operator><name pos:line="180" pos:column="53">raw_mbs_idx<pos:position pos:line="180" pos:column="64"/></name></name></expr>;<pos:position pos:line="180" pos:column="65"/></expr_stmt>
		}<pos:position pos:line="181" pos:column="18"/></block></then></if>
	      <comment type="block" pos:line="182" pos:column="15">/* If MATCH_FIRST is out of the buffer, leave it as '\0'.
		 Note that MATCH_FIRST must not be smaller than 0.  */</comment>
	      <expr_stmt><expr><name pos:line="184" pos:column="15">ch<pos:position pos:line="184" pos:column="17"/></name> <operator pos:line="184" pos:column="18">=<pos:position pos:line="184" pos:column="19"/></operator> <operator pos:line="184" pos:column="20">(<pos:position pos:line="184" pos:column="21"/></operator><ternary><condition><expr><name pos:line="184" pos:column="21">match_first<pos:position pos:line="184" pos:column="32"/></name> <operator pos:line="184" pos:column="33">&gt;=<pos:position pos:line="184" pos:column="38"/></operator> <name pos:line="184" pos:column="36">length<pos:position pos:line="184" pos:column="42"/></name></expr>
		    ?<pos:position pos:line="185" pos:column="22"/></condition><then pos:line="185" pos:column="22"> <expr><literal type="number" pos:line="185" pos:column="23">0<pos:position pos:line="185" pos:column="24"/></literal></expr> <pos:position pos:line="185" pos:column="25"/></then><else pos:line="185" pos:column="25">: <expr><call><name pos:line="185" pos:column="27">re_string_byte_at<pos:position pos:line="185" pos:column="44"/></name> <argument_list pos:line="185" pos:column="45">(<argument><expr><operator pos:line="185" pos:column="46">&amp;<pos:position pos:line="185" pos:column="51"/></operator><name><name pos:line="185" pos:column="47">mctx<pos:position pos:line="185" pos:column="51"/></name><operator pos:line="185" pos:column="51">.<pos:position pos:line="185" pos:column="52"/></operator><name pos:line="185" pos:column="52">input<pos:position pos:line="185" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="185" pos:column="59">offset<pos:position pos:line="185" pos:column="65"/></name></expr></argument>)<pos:position pos:line="185" pos:column="66"/></argument_list></call></expr></else></ternary><operator pos:line="185" pos:column="66">)<pos:position pos:line="185" pos:column="67"/></operator></expr>;<pos:position pos:line="185" pos:column="68"/></expr_stmt>
	      <if pos:line="186" pos:column="15">if <condition pos:line="186" pos:column="18">(<expr><name><name pos:line="186" pos:column="19">fastmap<pos:position pos:line="186" pos:column="26"/></name><index pos:line="186" pos:column="26">[<expr><name pos:line="186" pos:column="27">ch<pos:position pos:line="186" pos:column="29"/></name></expr>]<pos:position pos:line="186" pos:column="30"/></index></name></expr>)<pos:position pos:line="186" pos:column="31"/></condition><then pos:line="186" pos:column="31">
		<block type="pseudo"><break pos:line="187" pos:column="17">break;<pos:position pos:line="187" pos:column="23"/></break></block></then></if>
	      <expr_stmt><expr><name pos:line="188" pos:column="15">match_first<pos:position pos:line="188" pos:column="26"/></name> <operator pos:line="188" pos:column="27">+=<pos:position pos:line="188" pos:column="29"/></operator> <name pos:line="188" pos:column="30">incr<pos:position pos:line="188" pos:column="34"/></name></expr>;<pos:position pos:line="188" pos:column="35"/></expr_stmt>
	      <if pos:line="189" pos:column="15">if <condition pos:line="189" pos:column="18">(<expr><name><name pos:line="189" pos:column="19">match_first<pos:position pos:line="189" pos:column="30"/></name> <argument_list type="generic" pos:line="189" pos:column="31">&lt; <argument><expr><name pos:line="189" pos:column="33">left_lim<pos:position pos:line="189" pos:column="41"/></name> <operator pos:line="189" pos:column="42">||<pos:position pos:line="189" pos:column="44"/></operator> <name pos:line="189" pos:column="45">match_first<pos:position pos:line="189" pos:column="56"/></name></expr></argument> &gt;<pos:position pos:line="189" pos:column="61"/></argument_list></name> <name pos:line="189" pos:column="59">right_lim<pos:position pos:line="189" pos:column="68"/></name></expr>)<pos:position pos:line="189" pos:column="69"/></condition><then pos:line="189" pos:column="69">
		<block pos:line="190" pos:column="17">{
		  <expr_stmt><expr><name pos:line="191" pos:column="19">err<pos:position pos:line="191" pos:column="22"/></name> <operator pos:line="191" pos:column="23">=<pos:position pos:line="191" pos:column="24"/></operator> <name pos:line="191" pos:column="25">REG_NOMATCH<pos:position pos:line="191" pos:column="36"/></name></expr>;<pos:position pos:line="191" pos:column="37"/></expr_stmt>
		  <goto pos:line="192" pos:column="19">goto <name pos:line="192" pos:column="24">free_return<pos:position pos:line="192" pos:column="35"/></name>;<pos:position pos:line="192" pos:column="36"/></goto>
		}<pos:position pos:line="193" pos:column="18"/></block></then></if>
	    }<pos:position pos:line="194" pos:column="14"/></block></for>
	  <break pos:line="195" pos:column="11">break;<pos:position pos:line="195" pos:column="17"/></break>
	}<pos:position pos:line="196" pos:column="10"/></block></switch>

      <comment type="block" pos:line="198" pos:column="7">/* Reconstruct the buffers so that the matcher can assume that
	 the matching starts from the beginning of the buffer.  */</comment>
      <expr_stmt><expr><name pos:line="200" pos:column="7">err<pos:position pos:line="200" pos:column="10"/></name> <operator pos:line="200" pos:column="11">=<pos:position pos:line="200" pos:column="12"/></operator> <call><name pos:line="200" pos:column="13">re_string_reconstruct<pos:position pos:line="200" pos:column="34"/></name> <argument_list pos:line="200" pos:column="35">(<argument><expr><operator pos:line="200" pos:column="36">&amp;<pos:position pos:line="200" pos:column="41"/></operator><name><name pos:line="200" pos:column="37">mctx<pos:position pos:line="200" pos:column="41"/></name><operator pos:line="200" pos:column="41">.<pos:position pos:line="200" pos:column="42"/></operator><name pos:line="200" pos:column="42">input<pos:position pos:line="200" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="200" pos:column="49">match_first<pos:position pos:line="200" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="200" pos:column="62">eflags<pos:position pos:line="200" pos:column="68"/></name></expr></argument>)<pos:position pos:line="200" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="70"/></expr_stmt>
      <if pos:line="201" pos:column="7">if <condition pos:line="201" pos:column="10">(<expr><call><name pos:line="201" pos:column="11">BE<pos:position pos:line="201" pos:column="13"/></name> <argument_list pos:line="201" pos:column="14">(<argument><expr><name pos:line="201" pos:column="15">err<pos:position pos:line="201" pos:column="18"/></name> <operator pos:line="201" pos:column="19">!=<pos:position pos:line="201" pos:column="21"/></operator> <name pos:line="201" pos:column="22">REG_NOERROR<pos:position pos:line="201" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="201" pos:column="35">0<pos:position pos:line="201" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="201" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="201" pos:column="38"/></condition><then pos:line="201" pos:column="38">
	<block type="pseudo"><goto pos:line="202" pos:column="9">goto <name pos:line="202" pos:column="14">free_return<pos:position pos:line="202" pos:column="25"/></name>;<pos:position pos:line="202" pos:column="26"/></goto></block></then></if>

<cpp:ifdef pos:line="204" pos:column="1">#<cpp:directive pos:line="204" pos:column="2">ifdef<pos:position pos:line="204" pos:column="7"/></cpp:directive> <name pos:line="204" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="204" pos:column="22"/></name></cpp:ifdef>
     <comment type="block" pos:line="205" pos:column="6">/* Don't consider this char as a possible match start if it part,
	yet isn't the head, of a multibyte character.  */</comment>
      <if pos:line="207" pos:column="7">if <condition pos:line="207" pos:column="10">(<expr><operator pos:line="207" pos:column="11">!<pos:position pos:line="207" pos:column="12"/></operator><name pos:line="207" pos:column="12">sb<pos:position pos:line="207" pos:column="14"/></name> <operator pos:line="207" pos:column="15">&amp;&amp;<pos:position pos:line="207" pos:column="25"/></operator> <operator pos:line="207" pos:column="18">!<pos:position pos:line="207" pos:column="19"/></operator><call><name pos:line="207" pos:column="19">re_string_first_byte<pos:position pos:line="207" pos:column="39"/></name> <argument_list pos:line="207" pos:column="40">(<argument><expr><operator pos:line="207" pos:column="41">&amp;<pos:position pos:line="207" pos:column="46"/></operator><name><name pos:line="207" pos:column="42">mctx<pos:position pos:line="207" pos:column="46"/></name><operator pos:line="207" pos:column="46">.<pos:position pos:line="207" pos:column="47"/></operator><name pos:line="207" pos:column="47">input<pos:position pos:line="207" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="207" pos:column="54">0<pos:position pos:line="207" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="207" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="207" pos:column="57"/></condition><then pos:line="207" pos:column="57">
	<block type="pseudo"><continue pos:line="208" pos:column="9">continue;<pos:position pos:line="208" pos:column="18"/></continue></block></then></if>
<cpp:endif pos:line="209" pos:column="1">#<cpp:directive pos:line="209" pos:column="2">endif<pos:position pos:line="209" pos:column="7"/></cpp:directive></cpp:endif>

      <comment type="block" pos:line="211" pos:column="7">/* It seems to be appropriate one, then use the matcher.  */</comment>
      <comment type="block" pos:line="212" pos:column="7">/* We assume that the matching starts from 0.  */</comment>
      <expr_stmt><expr><name><name pos:line="213" pos:column="7">mctx<pos:position pos:line="213" pos:column="11"/></name><operator pos:line="213" pos:column="11">.<pos:position pos:line="213" pos:column="12"/></operator><name pos:line="213" pos:column="12">state_log_top<pos:position pos:line="213" pos:column="25"/></name></name> <operator pos:line="213" pos:column="26">=<pos:position pos:line="213" pos:column="27"/></operator> <name><name pos:line="213" pos:column="28">mctx<pos:position pos:line="213" pos:column="32"/></name><operator pos:line="213" pos:column="32">.<pos:position pos:line="213" pos:column="33"/></operator><name pos:line="213" pos:column="33">nbkref_ents<pos:position pos:line="213" pos:column="44"/></name></name> <operator pos:line="213" pos:column="45">=<pos:position pos:line="213" pos:column="46"/></operator> <name><name pos:line="213" pos:column="47">mctx<pos:position pos:line="213" pos:column="51"/></name><operator pos:line="213" pos:column="51">.<pos:position pos:line="213" pos:column="52"/></operator><name pos:line="213" pos:column="52">max_mb_elem_len<pos:position pos:line="213" pos:column="67"/></name></name> <operator pos:line="213" pos:column="68">=<pos:position pos:line="213" pos:column="69"/></operator> <literal type="number" pos:line="213" pos:column="70">0<pos:position pos:line="213" pos:column="71"/></literal></expr>;<pos:position pos:line="213" pos:column="72"/></expr_stmt>
      <expr_stmt><expr><name pos:line="214" pos:column="7">match_last<pos:position pos:line="214" pos:column="17"/></name> <operator pos:line="214" pos:column="18">=<pos:position pos:line="214" pos:column="19"/></operator> <call><name pos:line="214" pos:column="20">check_matching<pos:position pos:line="214" pos:column="34"/></name> <argument_list pos:line="214" pos:column="35">(<argument><expr><operator pos:line="214" pos:column="36">&amp;<pos:position pos:line="214" pos:column="41"/></operator><name pos:line="214" pos:column="37">mctx<pos:position pos:line="214" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="214" pos:column="43">fl_longest_match<pos:position pos:line="214" pos:column="59"/></name></expr></argument>,
				   <argument><expr><ternary><condition><expr><name pos:line="215" pos:column="36">range<pos:position pos:line="215" pos:column="41"/></name> <operator pos:line="215" pos:column="42">&gt;=<pos:position pos:line="215" pos:column="47"/></operator> <literal type="number" pos:line="215" pos:column="45">0<pos:position pos:line="215" pos:column="46"/></literal></expr> ?<pos:position pos:line="215" pos:column="48"/></condition><then pos:line="215" pos:column="48"> <expr><operator pos:line="215" pos:column="49">&amp;<pos:position pos:line="215" pos:column="54"/></operator><name pos:line="215" pos:column="50">match_first<pos:position pos:line="215" pos:column="61"/></name></expr> <pos:position pos:line="215" pos:column="62"/></then><else pos:line="215" pos:column="62">: <expr><name pos:line="215" pos:column="64">NULL<pos:position pos:line="215" pos:column="68"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="215" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="70"/></expr_stmt>
      <if pos:line="216" pos:column="7">if <condition pos:line="216" pos:column="10">(<expr><name pos:line="216" pos:column="11">match_last<pos:position pos:line="216" pos:column="21"/></name> <operator pos:line="216" pos:column="22">!=<pos:position pos:line="216" pos:column="24"/></operator> <operator pos:line="216" pos:column="25">-<pos:position pos:line="216" pos:column="26"/></operator><literal type="number" pos:line="216" pos:column="26">1<pos:position pos:line="216" pos:column="27"/></literal></expr>)<pos:position pos:line="216" pos:column="28"/></condition><then pos:line="216" pos:column="28">
	<block pos:line="217" pos:column="9">{
	  <if pos:line="218" pos:column="11">if <condition pos:line="218" pos:column="14">(<expr><call><name pos:line="218" pos:column="15">BE<pos:position pos:line="218" pos:column="17"/></name> <argument_list pos:line="218" pos:column="18">(<argument><expr><name pos:line="218" pos:column="19">match_last<pos:position pos:line="218" pos:column="29"/></name> <operator pos:line="218" pos:column="30">==<pos:position pos:line="218" pos:column="32"/></operator> <operator pos:line="218" pos:column="33">-<pos:position pos:line="218" pos:column="34"/></operator><literal type="number" pos:line="218" pos:column="34">2<pos:position pos:line="218" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="218" pos:column="37">0<pos:position pos:line="218" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="218" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="218" pos:column="40"/></condition><then pos:line="218" pos:column="40">
	    <block pos:line="219" pos:column="13">{
	      <expr_stmt><expr><name pos:line="220" pos:column="15">err<pos:position pos:line="220" pos:column="18"/></name> <operator pos:line="220" pos:column="19">=<pos:position pos:line="220" pos:column="20"/></operator> <name pos:line="220" pos:column="21">REG_ESPACE<pos:position pos:line="220" pos:column="31"/></name></expr>;<pos:position pos:line="220" pos:column="32"/></expr_stmt>
	      <goto pos:line="221" pos:column="15">goto <name pos:line="221" pos:column="20">free_return<pos:position pos:line="221" pos:column="31"/></name>;<pos:position pos:line="221" pos:column="32"/></goto>
	    }<pos:position pos:line="222" pos:column="14"/></block></then>
	  <else pos:line="223" pos:column="11">else
	    <block pos:line="224" pos:column="13">{
	      <expr_stmt><expr><name><name pos:line="225" pos:column="15">mctx<pos:position pos:line="225" pos:column="19"/></name><operator pos:line="225" pos:column="19">.<pos:position pos:line="225" pos:column="20"/></operator><name pos:line="225" pos:column="20">match_last<pos:position pos:line="225" pos:column="30"/></name></name> <operator pos:line="225" pos:column="31">=<pos:position pos:line="225" pos:column="32"/></operator> <name pos:line="225" pos:column="33">match_last<pos:position pos:line="225" pos:column="43"/></name></expr>;<pos:position pos:line="225" pos:column="44"/></expr_stmt>
	      <if pos:line="226" pos:column="15">if <condition pos:line="226" pos:column="18">(<expr><operator pos:line="226" pos:column="19">(<pos:position pos:line="226" pos:column="20"/></operator><operator pos:line="226" pos:column="20">!<pos:position pos:line="226" pos:column="21"/></operator><name><name pos:line="226" pos:column="21">preg<pos:position pos:line="226" pos:column="25"/></name><operator pos:line="226" pos:column="25">-&gt;<pos:position pos:line="226" pos:column="30"/></operator><name pos:line="226" pos:column="27">no_sub<pos:position pos:line="226" pos:column="33"/></name></name> <operator pos:line="226" pos:column="34">&amp;&amp;<pos:position pos:line="226" pos:column="44"/></operator> <name pos:line="226" pos:column="37">nmatch<pos:position pos:line="226" pos:column="43"/></name> <operator pos:line="226" pos:column="44">&gt;<pos:position pos:line="226" pos:column="48"/></operator> <literal type="number" pos:line="226" pos:column="46">1<pos:position pos:line="226" pos:column="47"/></literal><operator pos:line="226" pos:column="47">)<pos:position pos:line="226" pos:column="48"/></operator> <operator pos:line="226" pos:column="49">||<pos:position pos:line="226" pos:column="51"/></operator> <name><name pos:line="226" pos:column="52">dfa<pos:position pos:line="226" pos:column="55"/></name><operator pos:line="226" pos:column="55">-&gt;<pos:position pos:line="226" pos:column="60"/></operator><name pos:line="226" pos:column="57">nbackref<pos:position pos:line="226" pos:column="65"/></name></name></expr>)<pos:position pos:line="226" pos:column="66"/></condition><then pos:line="226" pos:column="66">
		<block pos:line="227" pos:column="17">{
		  <decl_stmt><decl><type><name pos:line="228" pos:column="19">re_dfastate_t<pos:position pos:line="228" pos:column="32"/></name> <modifier pos:line="228" pos:column="33">*<pos:position pos:line="228" pos:column="34"/></modifier></type><name pos:line="228" pos:column="34">pstate<pos:position pos:line="228" pos:column="40"/></name> <init pos:line="228" pos:column="41">= <expr><name><name pos:line="228" pos:column="43">mctx<pos:position pos:line="228" pos:column="47"/></name><operator pos:line="228" pos:column="47">.<pos:position pos:line="228" pos:column="48"/></operator><name pos:line="228" pos:column="48">state_log<pos:position pos:line="228" pos:column="57"/></name><index pos:line="228" pos:column="57">[<expr><name pos:line="228" pos:column="58">match_last<pos:position pos:line="228" pos:column="68"/></name></expr>]<pos:position pos:line="228" pos:column="69"/></index></name></expr></init></decl>;<pos:position pos:line="228" pos:column="70"/></decl_stmt>
		  <expr_stmt><expr><name><name pos:line="229" pos:column="19">mctx<pos:position pos:line="229" pos:column="23"/></name><operator pos:line="229" pos:column="23">.<pos:position pos:line="229" pos:column="24"/></operator><name pos:line="229" pos:column="24">last_node<pos:position pos:line="229" pos:column="33"/></name></name> <operator pos:line="229" pos:column="34">=<pos:position pos:line="229" pos:column="35"/></operator> <call><name pos:line="229" pos:column="36">check_halt_state_context<pos:position pos:line="229" pos:column="60"/></name> <argument_list pos:line="229" pos:column="61">(<argument><expr><operator pos:line="229" pos:column="62">&amp;<pos:position pos:line="229" pos:column="67"/></operator><name pos:line="229" pos:column="63">mctx<pos:position pos:line="229" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="229" pos:column="69">pstate<pos:position pos:line="229" pos:column="75"/></name></expr></argument>,
							     <argument><expr><name pos:line="230" pos:column="62">match_last<pos:position pos:line="230" pos:column="72"/></name></expr></argument>)<pos:position pos:line="230" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="230" pos:column="74"/></expr_stmt>
		}<pos:position pos:line="231" pos:column="18"/></block></then></if>
	      <if pos:line="232" pos:column="15">if <condition pos:line="232" pos:column="18">(<expr><operator pos:line="232" pos:column="19">(<pos:position pos:line="232" pos:column="20"/></operator><operator pos:line="232" pos:column="20">!<pos:position pos:line="232" pos:column="21"/></operator><name><name pos:line="232" pos:column="21">preg<pos:position pos:line="232" pos:column="25"/></name><operator pos:line="232" pos:column="25">-&gt;<pos:position pos:line="232" pos:column="30"/></operator><name pos:line="232" pos:column="27">no_sub<pos:position pos:line="232" pos:column="33"/></name></name> <operator pos:line="232" pos:column="34">&amp;&amp;<pos:position pos:line="232" pos:column="44"/></operator> <name pos:line="232" pos:column="37">nmatch<pos:position pos:line="232" pos:column="43"/></name> <operator pos:line="232" pos:column="44">&gt;<pos:position pos:line="232" pos:column="48"/></operator> <literal type="number" pos:line="232" pos:column="46">1<pos:position pos:line="232" pos:column="47"/></literal> <operator pos:line="232" pos:column="48">&amp;&amp;<pos:position pos:line="232" pos:column="58"/></operator> <name><name pos:line="232" pos:column="51">dfa<pos:position pos:line="232" pos:column="54"/></name><operator pos:line="232" pos:column="54">-&gt;<pos:position pos:line="232" pos:column="59"/></operator><name pos:line="232" pos:column="56">has_plural_match<pos:position pos:line="232" pos:column="72"/></name></name><operator pos:line="232" pos:column="72">)<pos:position pos:line="232" pos:column="73"/></operator>
		  <operator pos:line="233" pos:column="19">||<pos:position pos:line="233" pos:column="21"/></operator> <name><name pos:line="233" pos:column="22">dfa<pos:position pos:line="233" pos:column="25"/></name><operator pos:line="233" pos:column="25">-&gt;<pos:position pos:line="233" pos:column="30"/></operator><name pos:line="233" pos:column="27">nbackref<pos:position pos:line="233" pos:column="35"/></name></name></expr>)<pos:position pos:line="233" pos:column="36"/></condition><then pos:line="233" pos:column="36">
		<block pos:line="234" pos:column="17">{
		  <expr_stmt><expr><name pos:line="235" pos:column="19">err<pos:position pos:line="235" pos:column="22"/></name> <operator pos:line="235" pos:column="23">=<pos:position pos:line="235" pos:column="24"/></operator> <call><name pos:line="235" pos:column="25">prune_impossible_nodes<pos:position pos:line="235" pos:column="47"/></name> <argument_list pos:line="235" pos:column="48">(<argument><expr><operator pos:line="235" pos:column="49">&amp;<pos:position pos:line="235" pos:column="54"/></operator><name pos:line="235" pos:column="50">mctx<pos:position pos:line="235" pos:column="54"/></name></expr></argument>)<pos:position pos:line="235" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="235" pos:column="56"/></expr_stmt>
		  <if pos:line="236" pos:column="19">if <condition pos:line="236" pos:column="22">(<expr><name pos:line="236" pos:column="23">err<pos:position pos:line="236" pos:column="26"/></name> <operator pos:line="236" pos:column="27">==<pos:position pos:line="236" pos:column="29"/></operator> <name pos:line="236" pos:column="30">REG_NOERROR<pos:position pos:line="236" pos:column="41"/></name></expr>)<pos:position pos:line="236" pos:column="42"/></condition><then pos:line="236" pos:column="42">
		    <block type="pseudo"><break pos:line="237" pos:column="21">break;<pos:position pos:line="237" pos:column="27"/></break></block></then></if>
		  <if pos:line="238" pos:column="19">if <condition pos:line="238" pos:column="22">(<expr><call><name pos:line="238" pos:column="23">BE<pos:position pos:line="238" pos:column="25"/></name> <argument_list pos:line="238" pos:column="26">(<argument><expr><name pos:line="238" pos:column="27">err<pos:position pos:line="238" pos:column="30"/></name> <operator pos:line="238" pos:column="31">!=<pos:position pos:line="238" pos:column="33"/></operator> <name pos:line="238" pos:column="34">REG_NOMATCH<pos:position pos:line="238" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="238" pos:column="47">0<pos:position pos:line="238" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="238" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="238" pos:column="50"/></condition><then pos:line="238" pos:column="50">
		    <block type="pseudo"><goto pos:line="239" pos:column="21">goto <name pos:line="239" pos:column="26">free_return<pos:position pos:line="239" pos:column="37"/></name>;<pos:position pos:line="239" pos:column="38"/></goto></block></then></if>
		  <expr_stmt><expr><name pos:line="240" pos:column="19">match_last<pos:position pos:line="240" pos:column="29"/></name> <operator pos:line="240" pos:column="30">=<pos:position pos:line="240" pos:column="31"/></operator> <operator pos:line="240" pos:column="32">-<pos:position pos:line="240" pos:column="33"/></operator><literal type="number" pos:line="240" pos:column="33">1<pos:position pos:line="240" pos:column="34"/></literal></expr>;<pos:position pos:line="240" pos:column="35"/></expr_stmt>
		}<pos:position pos:line="241" pos:column="18"/></block></then>
	      <else pos:line="242" pos:column="15">else
		<block type="pseudo"><break pos:line="243" pos:column="17">break;<pos:position pos:line="243" pos:column="23"/></break></block></else></if> <comment type="block" pos:line="243" pos:column="24">/* We found a match.  */</comment>
	    }<pos:position pos:line="244" pos:column="14"/></block></else></if>
	}<pos:position pos:line="245" pos:column="10"/></block></then></if>

      <expr_stmt><expr><call><name pos:line="247" pos:column="7">match_ctx_clean<pos:position pos:line="247" pos:column="22"/></name> <argument_list pos:line="247" pos:column="23">(<argument><expr><operator pos:line="247" pos:column="24">&amp;<pos:position pos:line="247" pos:column="29"/></operator><name pos:line="247" pos:column="25">mctx<pos:position pos:line="247" pos:column="29"/></name></expr></argument>)<pos:position pos:line="247" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="247" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="248" pos:column="6"/></block></for>

<cpp:ifdef pos:line="250" pos:column="1">#<cpp:directive pos:line="250" pos:column="2">ifdef<pos:position pos:line="250" pos:column="7"/></cpp:directive> <name pos:line="250" pos:column="8">DEBUG<pos:position pos:line="250" pos:column="13"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="251" pos:column="3">assert<pos:position pos:line="251" pos:column="9"/></name> <argument_list pos:line="251" pos:column="10">(<argument><expr><name pos:line="251" pos:column="11">match_last<pos:position pos:line="251" pos:column="21"/></name> <operator pos:line="251" pos:column="22">!=<pos:position pos:line="251" pos:column="24"/></operator> <operator pos:line="251" pos:column="25">-<pos:position pos:line="251" pos:column="26"/></operator><literal type="number" pos:line="251" pos:column="26">1<pos:position pos:line="251" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="251" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="251" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="252" pos:column="3">assert<pos:position pos:line="252" pos:column="9"/></name> <argument_list pos:line="252" pos:column="10">(<argument><expr><name pos:line="252" pos:column="11">err<pos:position pos:line="252" pos:column="14"/></name> <operator pos:line="252" pos:column="15">==<pos:position pos:line="252" pos:column="17"/></operator> <name pos:line="252" pos:column="18">REG_NOERROR<pos:position pos:line="252" pos:column="29"/></name></expr></argument>)<pos:position pos:line="252" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="252" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="253" pos:column="1">#<cpp:directive pos:line="253" pos:column="2">endif<pos:position pos:line="253" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="255" pos:column="3">/* Set pmatch[] if we need.  */</comment>
  <if pos:line="256" pos:column="3">if <condition pos:line="256" pos:column="6">(<expr><name pos:line="256" pos:column="7">nmatch<pos:position pos:line="256" pos:column="13"/></name> <operator pos:line="256" pos:column="14">&gt;<pos:position pos:line="256" pos:column="18"/></operator> <literal type="number" pos:line="256" pos:column="16">0<pos:position pos:line="256" pos:column="17"/></literal></expr>)<pos:position pos:line="256" pos:column="18"/></condition><then pos:line="256" pos:column="18">
    <block pos:line="257" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="258" pos:column="7">int<pos:position pos:line="258" pos:column="10"/></name></type> <name pos:line="258" pos:column="11">reg_idx<pos:position pos:line="258" pos:column="18"/></name></decl>;<pos:position pos:line="258" pos:column="19"/></decl_stmt>

      <comment type="block" pos:line="260" pos:column="7">/* Initialize registers.  */</comment>
      <for pos:line="261" pos:column="7">for <control pos:line="261" pos:column="11">(<init><expr><name pos:line="261" pos:column="12">reg_idx<pos:position pos:line="261" pos:column="19"/></name> <operator pos:line="261" pos:column="20">=<pos:position pos:line="261" pos:column="21"/></operator> <literal type="number" pos:line="261" pos:column="22">1<pos:position pos:line="261" pos:column="23"/></literal></expr>;<pos:position pos:line="261" pos:column="24"/></init> <condition><expr><name pos:line="261" pos:column="25">reg_idx<pos:position pos:line="261" pos:column="32"/></name> <operator pos:line="261" pos:column="33">&lt;<pos:position pos:line="261" pos:column="37"/></operator> <name pos:line="261" pos:column="35">nmatch<pos:position pos:line="261" pos:column="41"/></name></expr>;<pos:position pos:line="261" pos:column="42"/></condition> <incr><expr><operator pos:line="261" pos:column="43">++<pos:position pos:line="261" pos:column="45"/></operator><name pos:line="261" pos:column="45">reg_idx<pos:position pos:line="261" pos:column="52"/></name></expr></incr>)<pos:position pos:line="261" pos:column="53"/></control>
	<block type="pseudo"><expr_stmt><expr><name><name pos:line="262" pos:column="9">pmatch<pos:position pos:line="262" pos:column="15"/></name><index pos:line="262" pos:column="15">[<expr><name pos:line="262" pos:column="16">reg_idx<pos:position pos:line="262" pos:column="23"/></name></expr>]<pos:position pos:line="262" pos:column="24"/></index></name><operator pos:line="262" pos:column="24">.<pos:position pos:line="262" pos:column="25"/></operator><name pos:line="262" pos:column="25">rm_so<pos:position pos:line="262" pos:column="30"/></name> <operator pos:line="262" pos:column="31">=<pos:position pos:line="262" pos:column="32"/></operator> <name><name pos:line="262" pos:column="33">pmatch<pos:position pos:line="262" pos:column="39"/></name><index pos:line="262" pos:column="39">[<expr><name pos:line="262" pos:column="40">reg_idx<pos:position pos:line="262" pos:column="47"/></name></expr>]<pos:position pos:line="262" pos:column="48"/></index></name><operator pos:line="262" pos:column="48">.<pos:position pos:line="262" pos:column="49"/></operator><name pos:line="262" pos:column="49">rm_eo<pos:position pos:line="262" pos:column="54"/></name> <operator pos:line="262" pos:column="55">=<pos:position pos:line="262" pos:column="56"/></operator> <operator pos:line="262" pos:column="57">-<pos:position pos:line="262" pos:column="58"/></operator><literal type="number" pos:line="262" pos:column="58">1<pos:position pos:line="262" pos:column="59"/></literal></expr>;<pos:position pos:line="262" pos:column="60"/></expr_stmt></block></for>

      <comment type="block" pos:line="264" pos:column="7">/* Set the points where matching start/end.  */</comment>
      <expr_stmt><expr><name><name pos:line="265" pos:column="7">pmatch<pos:position pos:line="265" pos:column="13"/></name><index pos:line="265" pos:column="13">[<expr><literal type="number" pos:line="265" pos:column="14">0<pos:position pos:line="265" pos:column="15"/></literal></expr>]<pos:position pos:line="265" pos:column="16"/></index></name><operator pos:line="265" pos:column="16">.<pos:position pos:line="265" pos:column="17"/></operator><name pos:line="265" pos:column="17">rm_so<pos:position pos:line="265" pos:column="22"/></name> <operator pos:line="265" pos:column="23">=<pos:position pos:line="265" pos:column="24"/></operator> <literal type="number" pos:line="265" pos:column="25">0<pos:position pos:line="265" pos:column="26"/></literal></expr>;<pos:position pos:line="265" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="266" pos:column="7">pmatch<pos:position pos:line="266" pos:column="13"/></name><index pos:line="266" pos:column="13">[<expr><literal type="number" pos:line="266" pos:column="14">0<pos:position pos:line="266" pos:column="15"/></literal></expr>]<pos:position pos:line="266" pos:column="16"/></index></name><operator pos:line="266" pos:column="16">.<pos:position pos:line="266" pos:column="17"/></operator><name pos:line="266" pos:column="17">rm_eo<pos:position pos:line="266" pos:column="22"/></name> <operator pos:line="266" pos:column="23">=<pos:position pos:line="266" pos:column="24"/></operator> <name><name pos:line="266" pos:column="25">mctx<pos:position pos:line="266" pos:column="29"/></name><operator pos:line="266" pos:column="29">.<pos:position pos:line="266" pos:column="30"/></operator><name pos:line="266" pos:column="30">match_last<pos:position pos:line="266" pos:column="40"/></name></name></expr>;<pos:position pos:line="266" pos:column="41"/></expr_stmt>

      <if pos:line="268" pos:column="7">if <condition pos:line="268" pos:column="10">(<expr><operator pos:line="268" pos:column="11">!<pos:position pos:line="268" pos:column="12"/></operator><name><name pos:line="268" pos:column="12">preg<pos:position pos:line="268" pos:column="16"/></name><operator pos:line="268" pos:column="16">-&gt;<pos:position pos:line="268" pos:column="21"/></operator><name pos:line="268" pos:column="18">no_sub<pos:position pos:line="268" pos:column="24"/></name></name> <operator pos:line="268" pos:column="25">&amp;&amp;<pos:position pos:line="268" pos:column="35"/></operator> <name pos:line="268" pos:column="28">nmatch<pos:position pos:line="268" pos:column="34"/></name> <operator pos:line="268" pos:column="35">&gt;<pos:position pos:line="268" pos:column="39"/></operator> <literal type="number" pos:line="268" pos:column="37">1<pos:position pos:line="268" pos:column="38"/></literal></expr>)<pos:position pos:line="268" pos:column="39"/></condition><then pos:line="268" pos:column="39">
	<block pos:line="269" pos:column="9">{
	  <expr_stmt><expr><name pos:line="270" pos:column="11">err<pos:position pos:line="270" pos:column="14"/></name> <operator pos:line="270" pos:column="15">=<pos:position pos:line="270" pos:column="16"/></operator> <call><name pos:line="270" pos:column="17">set_regs<pos:position pos:line="270" pos:column="25"/></name> <argument_list pos:line="270" pos:column="26">(<argument><expr><name pos:line="270" pos:column="27">preg<pos:position pos:line="270" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="270" pos:column="33">&amp;<pos:position pos:line="270" pos:column="38"/></operator><name pos:line="270" pos:column="34">mctx<pos:position pos:line="270" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="270" pos:column="40">nmatch<pos:position pos:line="270" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="270" pos:column="48">pmatch<pos:position pos:line="270" pos:column="54"/></name></expr></argument>,
			  <argument><expr><name><name pos:line="271" pos:column="27">dfa<pos:position pos:line="271" pos:column="30"/></name><operator pos:line="271" pos:column="30">-&gt;<pos:position pos:line="271" pos:column="35"/></operator><name pos:line="271" pos:column="32">has_plural_match<pos:position pos:line="271" pos:column="48"/></name></name> <operator pos:line="271" pos:column="49">&amp;&amp;<pos:position pos:line="271" pos:column="59"/></operator> <name><name pos:line="271" pos:column="52">dfa<pos:position pos:line="271" pos:column="55"/></name><operator pos:line="271" pos:column="55">-&gt;<pos:position pos:line="271" pos:column="60"/></operator><name pos:line="271" pos:column="57">nbackref<pos:position pos:line="271" pos:column="65"/></name></name> <operator pos:line="271" pos:column="66">&gt;<pos:position pos:line="271" pos:column="70"/></operator> <literal type="number" pos:line="271" pos:column="68">0<pos:position pos:line="271" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="271" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="271" pos:column="71"/></expr_stmt>
	  <if pos:line="272" pos:column="11">if <condition pos:line="272" pos:column="14">(<expr><call><name pos:line="272" pos:column="15">BE<pos:position pos:line="272" pos:column="17"/></name> <argument_list pos:line="272" pos:column="18">(<argument><expr><name pos:line="272" pos:column="19">err<pos:position pos:line="272" pos:column="22"/></name> <operator pos:line="272" pos:column="23">!=<pos:position pos:line="272" pos:column="25"/></operator> <name pos:line="272" pos:column="26">REG_NOERROR<pos:position pos:line="272" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="272" pos:column="39">0<pos:position pos:line="272" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="272" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="272" pos:column="42"/></condition><then pos:line="272" pos:column="42">
	    <block type="pseudo"><goto pos:line="273" pos:column="13">goto <name pos:line="273" pos:column="18">free_return<pos:position pos:line="273" pos:column="29"/></name>;<pos:position pos:line="273" pos:column="30"/></goto></block></then></if>
	}<pos:position pos:line="274" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="276" pos:column="7">/* At last, add the offset to the each registers, since we slided
	 the buffers so that we could assume that the matching starts
	 from 0.  */</comment>
      <for pos:line="279" pos:column="7">for <control pos:line="279" pos:column="11">(<init><expr><name pos:line="279" pos:column="12">reg_idx<pos:position pos:line="279" pos:column="19"/></name> <operator pos:line="279" pos:column="20">=<pos:position pos:line="279" pos:column="21"/></operator> <literal type="number" pos:line="279" pos:column="22">0<pos:position pos:line="279" pos:column="23"/></literal></expr>;<pos:position pos:line="279" pos:column="24"/></init> <condition><expr><name pos:line="279" pos:column="25">reg_idx<pos:position pos:line="279" pos:column="32"/></name> <operator pos:line="279" pos:column="33">&lt;<pos:position pos:line="279" pos:column="37"/></operator> <name pos:line="279" pos:column="35">nmatch<pos:position pos:line="279" pos:column="41"/></name></expr>;<pos:position pos:line="279" pos:column="42"/></condition> <incr><expr><operator pos:line="279" pos:column="43">++<pos:position pos:line="279" pos:column="45"/></operator><name pos:line="279" pos:column="45">reg_idx<pos:position pos:line="279" pos:column="52"/></name></expr></incr>)<pos:position pos:line="279" pos:column="53"/></control>
	<block type="pseudo"><if pos:line="280" pos:column="9">if <condition pos:line="280" pos:column="12">(<expr><name><name pos:line="280" pos:column="13">pmatch<pos:position pos:line="280" pos:column="19"/></name><index pos:line="280" pos:column="19">[<expr><name pos:line="280" pos:column="20">reg_idx<pos:position pos:line="280" pos:column="27"/></name></expr>]<pos:position pos:line="280" pos:column="28"/></index></name><operator pos:line="280" pos:column="28">.<pos:position pos:line="280" pos:column="29"/></operator><name pos:line="280" pos:column="29">rm_so<pos:position pos:line="280" pos:column="34"/></name> <operator pos:line="280" pos:column="35">!=<pos:position pos:line="280" pos:column="37"/></operator> <operator pos:line="280" pos:column="38">-<pos:position pos:line="280" pos:column="39"/></operator><literal type="number" pos:line="280" pos:column="39">1<pos:position pos:line="280" pos:column="40"/></literal></expr>)<pos:position pos:line="280" pos:column="41"/></condition><then pos:line="280" pos:column="41">
	  <block pos:line="281" pos:column="11">{
<cpp:ifdef pos:line="282" pos:column="1">#<cpp:directive pos:line="282" pos:column="2">ifdef<pos:position pos:line="282" pos:column="7"/></cpp:directive> <name pos:line="282" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="282" pos:column="22"/></name></cpp:ifdef>
	    <if pos:line="283" pos:column="13">if <condition pos:line="283" pos:column="16">(<expr><call><name pos:line="283" pos:column="17">BE<pos:position pos:line="283" pos:column="19"/></name> <argument_list pos:line="283" pos:column="20">(<argument><expr><name><name pos:line="283" pos:column="21">mctx<pos:position pos:line="283" pos:column="25"/></name><operator pos:line="283" pos:column="25">.<pos:position pos:line="283" pos:column="26"/></operator><name pos:line="283" pos:column="26">input<pos:position pos:line="283" pos:column="31"/></name><operator pos:line="283" pos:column="31">.<pos:position pos:line="283" pos:column="32"/></operator><name pos:line="283" pos:column="32">offsets_needed<pos:position pos:line="283" pos:column="46"/></name></name> <operator pos:line="283" pos:column="47">!=<pos:position pos:line="283" pos:column="49"/></operator> <literal type="number" pos:line="283" pos:column="50">0<pos:position pos:line="283" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="283" pos:column="53">0<pos:position pos:line="283" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="283" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="283" pos:column="56"/></condition><then pos:line="283" pos:column="56">
	      <block pos:line="284" pos:column="15">{
		<expr_stmt><expr><name><name pos:line="285" pos:column="17">pmatch<pos:position pos:line="285" pos:column="23"/></name><index pos:line="285" pos:column="23">[<expr><name pos:line="285" pos:column="24">reg_idx<pos:position pos:line="285" pos:column="31"/></name></expr>]<pos:position pos:line="285" pos:column="32"/></index></name><operator pos:line="285" pos:column="32">.<pos:position pos:line="285" pos:column="33"/></operator><name pos:line="285" pos:column="33">rm_so<pos:position pos:line="285" pos:column="38"/></name> <operator pos:line="285" pos:column="39">=<pos:position pos:line="285" pos:column="40"/></operator>
		  <operator pos:line="286" pos:column="19">(<pos:position pos:line="286" pos:column="20"/></operator><ternary><condition><expr><name><name pos:line="286" pos:column="20">pmatch<pos:position pos:line="286" pos:column="26"/></name><index pos:line="286" pos:column="26">[<expr><name pos:line="286" pos:column="27">reg_idx<pos:position pos:line="286" pos:column="34"/></name></expr>]<pos:position pos:line="286" pos:column="35"/></index></name><operator pos:line="286" pos:column="35">.<pos:position pos:line="286" pos:column="36"/></operator><name pos:line="286" pos:column="36">rm_so<pos:position pos:line="286" pos:column="41"/></name> <operator pos:line="286" pos:column="42">==<pos:position pos:line="286" pos:column="44"/></operator> <name><name pos:line="286" pos:column="45">mctx<pos:position pos:line="286" pos:column="49"/></name><operator pos:line="286" pos:column="49">.<pos:position pos:line="286" pos:column="50"/></operator><name pos:line="286" pos:column="50">input<pos:position pos:line="286" pos:column="55"/></name><operator pos:line="286" pos:column="55">.<pos:position pos:line="286" pos:column="56"/></operator><name pos:line="286" pos:column="56">valid_len<pos:position pos:line="286" pos:column="65"/></name></name></expr>
		   ?<pos:position pos:line="287" pos:column="21"/></condition><then pos:line="287" pos:column="21"> <expr><name><name pos:line="287" pos:column="22">mctx<pos:position pos:line="287" pos:column="26"/></name><operator pos:line="287" pos:column="26">.<pos:position pos:line="287" pos:column="27"/></operator><name pos:line="287" pos:column="27">input<pos:position pos:line="287" pos:column="32"/></name><operator pos:line="287" pos:column="32">.<pos:position pos:line="287" pos:column="33"/></operator><name pos:line="287" pos:column="33">valid_raw_len<pos:position pos:line="287" pos:column="46"/></name></name></expr>
		   <pos:position pos:line="288" pos:column="6"/></then><else pos:line="288" pos:column="20">: <expr><name><name pos:line="288" pos:column="22">mctx<pos:position pos:line="288" pos:column="26"/></name><operator pos:line="288" pos:column="26">.<pos:position pos:line="288" pos:column="27"/></operator><name pos:line="288" pos:column="27">input<pos:position pos:line="288" pos:column="32"/></name><operator pos:line="288" pos:column="32">.<pos:position pos:line="288" pos:column="33"/></operator><name pos:line="288" pos:column="33">offsets<pos:position pos:line="288" pos:column="40"/></name><index pos:line="288" pos:column="40">[<expr><name><name pos:line="288" pos:column="41">pmatch<pos:position pos:line="288" pos:column="47"/></name><index pos:line="288" pos:column="47">[<expr><name pos:line="288" pos:column="48">reg_idx<pos:position pos:line="288" pos:column="55"/></name></expr>]<pos:position pos:line="288" pos:column="56"/></index></name><operator pos:line="288" pos:column="56">.<pos:position pos:line="288" pos:column="57"/></operator><name pos:line="288" pos:column="57">rm_so<pos:position pos:line="288" pos:column="62"/></name></expr>]<pos:position pos:line="288" pos:column="63"/></index></name></expr></else></ternary><operator pos:line="288" pos:column="63">)<pos:position pos:line="288" pos:column="64"/></operator></expr>;<pos:position pos:line="288" pos:column="65"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="289" pos:column="17">pmatch<pos:position pos:line="289" pos:column="23"/></name><index pos:line="289" pos:column="23">[<expr><name pos:line="289" pos:column="24">reg_idx<pos:position pos:line="289" pos:column="31"/></name></expr>]<pos:position pos:line="289" pos:column="32"/></index></name><operator pos:line="289" pos:column="32">.<pos:position pos:line="289" pos:column="33"/></operator><name pos:line="289" pos:column="33">rm_eo<pos:position pos:line="289" pos:column="38"/></name> <operator pos:line="289" pos:column="39">=<pos:position pos:line="289" pos:column="40"/></operator>
		  <operator pos:line="290" pos:column="19">(<pos:position pos:line="290" pos:column="20"/></operator><ternary><condition><expr><name><name pos:line="290" pos:column="20">pmatch<pos:position pos:line="290" pos:column="26"/></name><index pos:line="290" pos:column="26">[<expr><name pos:line="290" pos:column="27">reg_idx<pos:position pos:line="290" pos:column="34"/></name></expr>]<pos:position pos:line="290" pos:column="35"/></index></name><operator pos:line="290" pos:column="35">.<pos:position pos:line="290" pos:column="36"/></operator><name pos:line="290" pos:column="36">rm_eo<pos:position pos:line="290" pos:column="41"/></name> <operator pos:line="290" pos:column="42">==<pos:position pos:line="290" pos:column="44"/></operator> <name><name pos:line="290" pos:column="45">mctx<pos:position pos:line="290" pos:column="49"/></name><operator pos:line="290" pos:column="49">.<pos:position pos:line="290" pos:column="50"/></operator><name pos:line="290" pos:column="50">input<pos:position pos:line="290" pos:column="55"/></name><operator pos:line="290" pos:column="55">.<pos:position pos:line="290" pos:column="56"/></operator><name pos:line="290" pos:column="56">valid_len<pos:position pos:line="290" pos:column="65"/></name></name></expr>
		   ?<pos:position pos:line="291" pos:column="21"/></condition><then pos:line="291" pos:column="21"> <expr><name><name pos:line="291" pos:column="22">mctx<pos:position pos:line="291" pos:column="26"/></name><operator pos:line="291" pos:column="26">.<pos:position pos:line="291" pos:column="27"/></operator><name pos:line="291" pos:column="27">input<pos:position pos:line="291" pos:column="32"/></name><operator pos:line="291" pos:column="32">.<pos:position pos:line="291" pos:column="33"/></operator><name pos:line="291" pos:column="33">valid_raw_len<pos:position pos:line="291" pos:column="46"/></name></name></expr>
		   <pos:position pos:line="292" pos:column="6"/></then><else pos:line="292" pos:column="20">: <expr><name><name pos:line="292" pos:column="22">mctx<pos:position pos:line="292" pos:column="26"/></name><operator pos:line="292" pos:column="26">.<pos:position pos:line="292" pos:column="27"/></operator><name pos:line="292" pos:column="27">input<pos:position pos:line="292" pos:column="32"/></name><operator pos:line="292" pos:column="32">.<pos:position pos:line="292" pos:column="33"/></operator><name pos:line="292" pos:column="33">offsets<pos:position pos:line="292" pos:column="40"/></name><index pos:line="292" pos:column="40">[<expr><name><name pos:line="292" pos:column="41">pmatch<pos:position pos:line="292" pos:column="47"/></name><index pos:line="292" pos:column="47">[<expr><name pos:line="292" pos:column="48">reg_idx<pos:position pos:line="292" pos:column="55"/></name></expr>]<pos:position pos:line="292" pos:column="56"/></index></name><operator pos:line="292" pos:column="56">.<pos:position pos:line="292" pos:column="57"/></operator><name pos:line="292" pos:column="57">rm_eo<pos:position pos:line="292" pos:column="62"/></name></expr>]<pos:position pos:line="292" pos:column="63"/></index></name></expr></else></ternary><operator pos:line="292" pos:column="63">)<pos:position pos:line="292" pos:column="64"/></operator></expr>;<pos:position pos:line="292" pos:column="65"/></expr_stmt>
	      }<pos:position pos:line="293" pos:column="16"/></block></then></if>
<cpp:else pos:line="294" pos:column="1">#<cpp:directive pos:line="294" pos:column="2">else<pos:position pos:line="294" pos:column="6"/></cpp:directive></cpp:else>
	    <expr_stmt><expr><call><name pos:line="295" pos:column="13">assert<pos:position pos:line="295" pos:column="19"/></name> <argument_list pos:line="295" pos:column="20">(<argument><expr><name><name pos:line="295" pos:column="21">mctx<pos:position pos:line="295" pos:column="25"/></name><operator pos:line="295" pos:column="25">.<pos:position pos:line="295" pos:column="26"/></operator><name pos:line="295" pos:column="26">input<pos:position pos:line="295" pos:column="31"/></name><operator pos:line="295" pos:column="31">.<pos:position pos:line="295" pos:column="32"/></operator><name pos:line="295" pos:column="32">offsets_needed<pos:position pos:line="295" pos:column="46"/></name></name> <operator pos:line="295" pos:column="47">==<pos:position pos:line="295" pos:column="49"/></operator> <literal type="number" pos:line="295" pos:column="50">0<pos:position pos:line="295" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="295" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="295" pos:column="53"/></expr_stmt>
<cpp:endif pos:line="296" pos:column="1">#<cpp:directive pos:line="296" pos:column="2">endif<pos:position pos:line="296" pos:column="7"/></cpp:directive></cpp:endif>
	    <expr_stmt><expr><name><name pos:line="297" pos:column="13">pmatch<pos:position pos:line="297" pos:column="19"/></name><index pos:line="297" pos:column="19">[<expr><name pos:line="297" pos:column="20">reg_idx<pos:position pos:line="297" pos:column="27"/></name></expr>]<pos:position pos:line="297" pos:column="28"/></index></name><operator pos:line="297" pos:column="28">.<pos:position pos:line="297" pos:column="29"/></operator><name pos:line="297" pos:column="29">rm_so<pos:position pos:line="297" pos:column="34"/></name> <operator pos:line="297" pos:column="35">+=<pos:position pos:line="297" pos:column="37"/></operator> <name pos:line="297" pos:column="38">match_first<pos:position pos:line="297" pos:column="49"/></name></expr>;<pos:position pos:line="297" pos:column="50"/></expr_stmt>
	    <expr_stmt><expr><name><name pos:line="298" pos:column="13">pmatch<pos:position pos:line="298" pos:column="19"/></name><index pos:line="298" pos:column="19">[<expr><name pos:line="298" pos:column="20">reg_idx<pos:position pos:line="298" pos:column="27"/></name></expr>]<pos:position pos:line="298" pos:column="28"/></index></name><operator pos:line="298" pos:column="28">.<pos:position pos:line="298" pos:column="29"/></operator><name pos:line="298" pos:column="29">rm_eo<pos:position pos:line="298" pos:column="34"/></name> <operator pos:line="298" pos:column="35">+=<pos:position pos:line="298" pos:column="37"/></operator> <name pos:line="298" pos:column="38">match_first<pos:position pos:line="298" pos:column="49"/></name></expr>;<pos:position pos:line="298" pos:column="50"/></expr_stmt>
	  }<pos:position pos:line="299" pos:column="12"/></block></then></if></block></for>
      <for pos:line="300" pos:column="7">for <control pos:line="300" pos:column="11">(<init><expr><name pos:line="300" pos:column="12">reg_idx<pos:position pos:line="300" pos:column="19"/></name> <operator pos:line="300" pos:column="20">=<pos:position pos:line="300" pos:column="21"/></operator> <literal type="number" pos:line="300" pos:column="22">0<pos:position pos:line="300" pos:column="23"/></literal></expr>;<pos:position pos:line="300" pos:column="24"/></init> <condition><expr><name pos:line="300" pos:column="25">reg_idx<pos:position pos:line="300" pos:column="32"/></name> <operator pos:line="300" pos:column="33">&lt;<pos:position pos:line="300" pos:column="37"/></operator> <name pos:line="300" pos:column="35">extra_nmatch<pos:position pos:line="300" pos:column="47"/></name></expr>;<pos:position pos:line="300" pos:column="48"/></condition> <incr><expr><operator pos:line="300" pos:column="49">++<pos:position pos:line="300" pos:column="51"/></operator><name pos:line="300" pos:column="51">reg_idx<pos:position pos:line="300" pos:column="58"/></name></expr></incr>)<pos:position pos:line="300" pos:column="59"/></control>
	<block pos:line="301" pos:column="9">{
	  <expr_stmt><expr><name><name pos:line="302" pos:column="11">pmatch<pos:position pos:line="302" pos:column="17"/></name><index pos:line="302" pos:column="17">[<expr><name pos:line="302" pos:column="18">nmatch<pos:position pos:line="302" pos:column="24"/></name> <operator pos:line="302" pos:column="25">+<pos:position pos:line="302" pos:column="26"/></operator> <name pos:line="302" pos:column="27">reg_idx<pos:position pos:line="302" pos:column="34"/></name></expr>]<pos:position pos:line="302" pos:column="35"/></index></name><operator pos:line="302" pos:column="35">.<pos:position pos:line="302" pos:column="36"/></operator><name pos:line="302" pos:column="36">rm_so<pos:position pos:line="302" pos:column="41"/></name> <operator pos:line="302" pos:column="42">=<pos:position pos:line="302" pos:column="43"/></operator> <operator pos:line="302" pos:column="44">-<pos:position pos:line="302" pos:column="45"/></operator><literal type="number" pos:line="302" pos:column="45">1<pos:position pos:line="302" pos:column="46"/></literal></expr>;<pos:position pos:line="302" pos:column="47"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="303" pos:column="11">pmatch<pos:position pos:line="303" pos:column="17"/></name><index pos:line="303" pos:column="17">[<expr><name pos:line="303" pos:column="18">nmatch<pos:position pos:line="303" pos:column="24"/></name> <operator pos:line="303" pos:column="25">+<pos:position pos:line="303" pos:column="26"/></operator> <name pos:line="303" pos:column="27">reg_idx<pos:position pos:line="303" pos:column="34"/></name></expr>]<pos:position pos:line="303" pos:column="35"/></index></name><operator pos:line="303" pos:column="35">.<pos:position pos:line="303" pos:column="36"/></operator><name pos:line="303" pos:column="36">rm_eo<pos:position pos:line="303" pos:column="41"/></name> <operator pos:line="303" pos:column="42">=<pos:position pos:line="303" pos:column="43"/></operator> <operator pos:line="303" pos:column="44">-<pos:position pos:line="303" pos:column="45"/></operator><literal type="number" pos:line="303" pos:column="45">1<pos:position pos:line="303" pos:column="46"/></literal></expr>;<pos:position pos:line="303" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="304" pos:column="10"/></block></for>

      <if pos:line="306" pos:column="7">if <condition pos:line="306" pos:column="10">(<expr><name><name pos:line="306" pos:column="11">dfa<pos:position pos:line="306" pos:column="14"/></name><operator pos:line="306" pos:column="14">-&gt;<pos:position pos:line="306" pos:column="19"/></operator><name pos:line="306" pos:column="16">subexp_map<pos:position pos:line="306" pos:column="26"/></name></name></expr>)<pos:position pos:line="306" pos:column="27"/></condition><then pos:line="306" pos:column="27">
	<block type="pseudo"><for pos:line="307" pos:column="9">for <control pos:line="307" pos:column="13">(<init><expr><name pos:line="307" pos:column="14">reg_idx<pos:position pos:line="307" pos:column="21"/></name> <operator pos:line="307" pos:column="22">=<pos:position pos:line="307" pos:column="23"/></operator> <literal type="number" pos:line="307" pos:column="24">0<pos:position pos:line="307" pos:column="25"/></literal></expr>;<pos:position pos:line="307" pos:column="26"/></init> <condition><expr><name pos:line="307" pos:column="27">reg_idx<pos:position pos:line="307" pos:column="34"/></name> <operator pos:line="307" pos:column="35">+<pos:position pos:line="307" pos:column="36"/></operator> <literal type="number" pos:line="307" pos:column="37">1<pos:position pos:line="307" pos:column="38"/></literal> <operator pos:line="307" pos:column="39">&lt;<pos:position pos:line="307" pos:column="43"/></operator> <name pos:line="307" pos:column="41">nmatch<pos:position pos:line="307" pos:column="47"/></name></expr>;<pos:position pos:line="307" pos:column="48"/></condition> <incr><expr><name pos:line="307" pos:column="49">reg_idx<pos:position pos:line="307" pos:column="56"/></name><operator pos:line="307" pos:column="56">++<pos:position pos:line="307" pos:column="58"/></operator></expr></incr>)<pos:position pos:line="307" pos:column="59"/></control>
	  <block type="pseudo"><if pos:line="308" pos:column="11">if <condition pos:line="308" pos:column="14">(<expr><name><name pos:line="308" pos:column="15">dfa<pos:position pos:line="308" pos:column="18"/></name><operator pos:line="308" pos:column="18">-&gt;<pos:position pos:line="308" pos:column="23"/></operator><name pos:line="308" pos:column="20">subexp_map<pos:position pos:line="308" pos:column="30"/></name><index pos:line="308" pos:column="30">[<expr><name pos:line="308" pos:column="31">reg_idx<pos:position pos:line="308" pos:column="38"/></name></expr>]<pos:position pos:line="308" pos:column="39"/></index></name> <operator pos:line="308" pos:column="40">!=<pos:position pos:line="308" pos:column="42"/></operator> <name pos:line="308" pos:column="43">reg_idx<pos:position pos:line="308" pos:column="50"/></name></expr>)<pos:position pos:line="308" pos:column="51"/></condition><then pos:line="308" pos:column="51">
	    <block pos:line="309" pos:column="13">{
	      <expr_stmt><expr><name><name pos:line="310" pos:column="15">pmatch<pos:position pos:line="310" pos:column="21"/></name><index pos:line="310" pos:column="21">[<expr><name pos:line="310" pos:column="22">reg_idx<pos:position pos:line="310" pos:column="29"/></name> <operator pos:line="310" pos:column="30">+<pos:position pos:line="310" pos:column="31"/></operator> <literal type="number" pos:line="310" pos:column="32">1<pos:position pos:line="310" pos:column="33"/></literal></expr>]<pos:position pos:line="310" pos:column="34"/></index></name><operator pos:line="310" pos:column="34">.<pos:position pos:line="310" pos:column="35"/></operator><name pos:line="310" pos:column="35">rm_so<pos:position pos:line="310" pos:column="40"/></name>
		<operator pos:line="311" pos:column="17">=<pos:position pos:line="311" pos:column="18"/></operator> <name><name pos:line="311" pos:column="19">pmatch<pos:position pos:line="311" pos:column="25"/></name><index pos:line="311" pos:column="25">[<expr><name><name pos:line="311" pos:column="26">dfa<pos:position pos:line="311" pos:column="29"/></name><operator pos:line="311" pos:column="29">-&gt;<pos:position pos:line="311" pos:column="34"/></operator><name pos:line="311" pos:column="31">subexp_map<pos:position pos:line="311" pos:column="41"/></name><index pos:line="311" pos:column="41">[<expr><name pos:line="311" pos:column="42">reg_idx<pos:position pos:line="311" pos:column="49"/></name></expr>]<pos:position pos:line="311" pos:column="50"/></index></name> <operator pos:line="311" pos:column="51">+<pos:position pos:line="311" pos:column="52"/></operator> <literal type="number" pos:line="311" pos:column="53">1<pos:position pos:line="311" pos:column="54"/></literal></expr>]<pos:position pos:line="311" pos:column="55"/></index></name><operator pos:line="311" pos:column="55">.<pos:position pos:line="311" pos:column="56"/></operator><name pos:line="311" pos:column="56">rm_so<pos:position pos:line="311" pos:column="61"/></name></expr>;<pos:position pos:line="311" pos:column="62"/></expr_stmt>
	      <expr_stmt><expr><name><name pos:line="312" pos:column="15">pmatch<pos:position pos:line="312" pos:column="21"/></name><index pos:line="312" pos:column="21">[<expr><name pos:line="312" pos:column="22">reg_idx<pos:position pos:line="312" pos:column="29"/></name> <operator pos:line="312" pos:column="30">+<pos:position pos:line="312" pos:column="31"/></operator> <literal type="number" pos:line="312" pos:column="32">1<pos:position pos:line="312" pos:column="33"/></literal></expr>]<pos:position pos:line="312" pos:column="34"/></index></name><operator pos:line="312" pos:column="34">.<pos:position pos:line="312" pos:column="35"/></operator><name pos:line="312" pos:column="35">rm_eo<pos:position pos:line="312" pos:column="40"/></name>
		<operator pos:line="313" pos:column="17">=<pos:position pos:line="313" pos:column="18"/></operator> <name><name pos:line="313" pos:column="19">pmatch<pos:position pos:line="313" pos:column="25"/></name><index pos:line="313" pos:column="25">[<expr><name><name pos:line="313" pos:column="26">dfa<pos:position pos:line="313" pos:column="29"/></name><operator pos:line="313" pos:column="29">-&gt;<pos:position pos:line="313" pos:column="34"/></operator><name pos:line="313" pos:column="31">subexp_map<pos:position pos:line="313" pos:column="41"/></name><index pos:line="313" pos:column="41">[<expr><name pos:line="313" pos:column="42">reg_idx<pos:position pos:line="313" pos:column="49"/></name></expr>]<pos:position pos:line="313" pos:column="50"/></index></name> <operator pos:line="313" pos:column="51">+<pos:position pos:line="313" pos:column="52"/></operator> <literal type="number" pos:line="313" pos:column="53">1<pos:position pos:line="313" pos:column="54"/></literal></expr>]<pos:position pos:line="313" pos:column="55"/></index></name><operator pos:line="313" pos:column="55">.<pos:position pos:line="313" pos:column="56"/></operator><name pos:line="313" pos:column="56">rm_eo<pos:position pos:line="313" pos:column="61"/></name></expr>;<pos:position pos:line="313" pos:column="62"/></expr_stmt>
	    }<pos:position pos:line="314" pos:column="14"/></block></then></if></block></for></block></then></if>
    }<pos:position pos:line="315" pos:column="6"/></block></then></if>

 <label><name pos:line="317" pos:column="2">free_return<pos:position pos:line="317" pos:column="13"/></name>:<pos:position pos:line="317" pos:column="14"/></label>
  <expr_stmt><expr><call><name pos:line="318" pos:column="3">re_free<pos:position pos:line="318" pos:column="10"/></name> <argument_list pos:line="318" pos:column="11">(<argument><expr><name><name pos:line="318" pos:column="12">mctx<pos:position pos:line="318" pos:column="16"/></name><operator pos:line="318" pos:column="16">.<pos:position pos:line="318" pos:column="17"/></operator><name pos:line="318" pos:column="17">state_log<pos:position pos:line="318" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="318" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="318" pos:column="28"/></expr_stmt>
  <if pos:line="319" pos:column="3">if <condition pos:line="319" pos:column="6">(<expr><name><name pos:line="319" pos:column="7">dfa<pos:position pos:line="319" pos:column="10"/></name><operator pos:line="319" pos:column="10">-&gt;<pos:position pos:line="319" pos:column="15"/></operator><name pos:line="319" pos:column="12">nbackref<pos:position pos:line="319" pos:column="20"/></name></name></expr>)<pos:position pos:line="319" pos:column="21"/></condition><then pos:line="319" pos:column="21">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="320" pos:column="5">match_ctx_free<pos:position pos:line="320" pos:column="19"/></name> <argument_list pos:line="320" pos:column="20">(<argument><expr><operator pos:line="320" pos:column="21">&amp;<pos:position pos:line="320" pos:column="26"/></operator><name pos:line="320" pos:column="22">mctx<pos:position pos:line="320" pos:column="26"/></name></expr></argument>)<pos:position pos:line="320" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="320" pos:column="28"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="321" pos:column="3">re_string_destruct<pos:position pos:line="321" pos:column="21"/></name> <argument_list pos:line="321" pos:column="22">(<argument><expr><operator pos:line="321" pos:column="23">&amp;<pos:position pos:line="321" pos:column="28"/></operator><name><name pos:line="321" pos:column="24">mctx<pos:position pos:line="321" pos:column="28"/></name><operator pos:line="321" pos:column="28">.<pos:position pos:line="321" pos:column="29"/></operator><name pos:line="321" pos:column="29">input<pos:position pos:line="321" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="321" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="321" pos:column="36"/></expr_stmt>
  <return pos:line="322" pos:column="3">return <expr><name pos:line="322" pos:column="10">err<pos:position pos:line="322" pos:column="13"/></name></expr>;<pos:position pos:line="322" pos:column="14"/></return>
}<pos:position pos:line="323" pos:column="2"/></block></function></unit>
