<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4609_git-2.7.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_chunk<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">char<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">buffer<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">unsigned<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">long<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">size<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="58">struct<pos:position pos:line="1" pos:column="64"/></name> <name pos:line="1" pos:column="65">patch<pos:position pos:line="1" pos:column="70"/></name></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">patch<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">hdrsize<pos:position pos:line="3" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="22">patchsize<pos:position pos:line="3" pos:column="31"/></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">offset<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><call><name pos:line="4" pos:column="22">find_header<pos:position pos:line="4" pos:column="33"/></name><argument_list pos:line="4" pos:column="33">(<argument><expr><name pos:line="4" pos:column="34">buffer<pos:position pos:line="4" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="42">size<pos:position pos:line="4" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="4" pos:column="48">&amp;<pos:position pos:line="4" pos:column="53"/></operator><name pos:line="4" pos:column="49">hdrsize<pos:position pos:line="4" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="58">patch<pos:position pos:line="4" pos:column="63"/></name></expr></argument>)<pos:position pos:line="4" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="65"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">offset<pos:position pos:line="6" pos:column="19"/></name> <operator pos:line="6" pos:column="20">&lt;<pos:position pos:line="6" pos:column="24"/></operator> <literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr>)<pos:position pos:line="6" pos:column="24"/></condition><then pos:line="6" pos:column="24">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><name pos:line="7" pos:column="24">offset<pos:position pos:line="7" pos:column="30"/></name></expr>;<pos:position pos:line="7" pos:column="31"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">prefix_patch<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><name pos:line="9" pos:column="22">patch<pos:position pos:line="9" pos:column="27"/></name></expr></argument>)<pos:position pos:line="9" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="29"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><call><name pos:line="11" pos:column="14">use_patch<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">patch<pos:position pos:line="11" pos:column="29"/></name></expr></argument>)<pos:position pos:line="11" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="31"/></condition><then pos:line="11" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="12" pos:column="17">patch<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">-&gt;<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="24">ws_rule<pos:position pos:line="12" pos:column="31"/></name></name> <operator pos:line="12" pos:column="32">=<pos:position pos:line="12" pos:column="33"/></operator> <literal type="number" pos:line="12" pos:column="34">0<pos:position pos:line="12" pos:column="35"/></literal></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt></block></then>
	<else pos:line="13" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="14" pos:column="17">patch<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">-&gt;<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="24">ws_rule<pos:position pos:line="14" pos:column="31"/></name></name> <operator pos:line="14" pos:column="32">=<pos:position pos:line="14" pos:column="33"/></operator> <call><name pos:line="14" pos:column="34">whitespace_rule<pos:position pos:line="14" pos:column="49"/></name><argument_list pos:line="14" pos:column="49">(<argument><expr><ternary><condition><expr><name><name pos:line="14" pos:column="50">patch<pos:position pos:line="14" pos:column="55"/></name><operator pos:line="14" pos:column="55">-&gt;<pos:position pos:line="14" pos:column="60"/></operator><name pos:line="14" pos:column="57">new_name<pos:position pos:line="14" pos:column="65"/></name></name></expr>
						 ?<pos:position pos:line="15" pos:column="51"/></condition><then pos:line="15" pos:column="51"> <expr><name><name pos:line="15" pos:column="52">patch<pos:position pos:line="15" pos:column="57"/></name><operator pos:line="15" pos:column="57">-&gt;<pos:position pos:line="15" pos:column="62"/></operator><name pos:line="15" pos:column="59">new_name<pos:position pos:line="15" pos:column="67"/></name></name></expr>
						 <pos:position pos:line="16" pos:column="8"/></then><else pos:line="16" pos:column="50">: <expr><name><name pos:line="16" pos:column="52">patch<pos:position pos:line="16" pos:column="57"/></name><operator pos:line="16" pos:column="57">-&gt;<pos:position pos:line="16" pos:column="62"/></operator><name pos:line="16" pos:column="59">old_name<pos:position pos:line="16" pos:column="67"/></name></name></expr></else></ternary></expr></argument>)<pos:position pos:line="16" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="69"/></expr_stmt></block></else></if>

	<expr_stmt><expr><name pos:line="18" pos:column="9">patchsize<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">=<pos:position pos:line="18" pos:column="20"/></operator> <call><name pos:line="18" pos:column="21">parse_single_patch<pos:position pos:line="18" pos:column="39"/></name><argument_list pos:line="18" pos:column="39">(<argument><expr><name pos:line="18" pos:column="40">buffer<pos:position pos:line="18" pos:column="46"/></name> <operator pos:line="18" pos:column="47">+<pos:position pos:line="18" pos:column="48"/></operator> <name pos:line="18" pos:column="49">offset<pos:position pos:line="18" pos:column="55"/></name> <operator pos:line="18" pos:column="56">+<pos:position pos:line="18" pos:column="57"/></operator> <name pos:line="18" pos:column="58">hdrsize<pos:position pos:line="18" pos:column="65"/></name></expr></argument>,
				       <argument><expr><name pos:line="19" pos:column="40">size<pos:position pos:line="19" pos:column="44"/></name> <operator pos:line="19" pos:column="45">-<pos:position pos:line="19" pos:column="46"/></operator> <name pos:line="19" pos:column="47">offset<pos:position pos:line="19" pos:column="53"/></name> <operator pos:line="19" pos:column="54">-<pos:position pos:line="19" pos:column="55"/></operator> <name pos:line="19" pos:column="56">hdrsize<pos:position pos:line="19" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="65">patch<pos:position pos:line="19" pos:column="70"/></name></expr></argument>)<pos:position pos:line="19" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="72"/></expr_stmt>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><operator pos:line="21" pos:column="13">!<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">patchsize<pos:position pos:line="21" pos:column="23"/></name></expr>)<pos:position pos:line="21" pos:column="24"/></condition><then pos:line="21" pos:column="24"> <block pos:line="21" pos:column="25">{
		<decl_stmt><decl><specifier pos:line="22" pos:column="17">static<pos:position pos:line="22" pos:column="23"/></specifier> <type><specifier pos:line="22" pos:column="24">const<pos:position pos:line="22" pos:column="29"/></specifier> <name pos:line="22" pos:column="30">char<pos:position pos:line="22" pos:column="34"/></name></type> <name><name pos:line="22" pos:column="35">git_binary<pos:position pos:line="22" pos:column="45"/></name><index pos:line="22" pos:column="45">[]<pos:position pos:line="22" pos:column="47"/></index></name> <init pos:line="22" pos:column="48">= <expr><literal type="string" pos:line="22" pos:column="50">"GIT binary patch\n"<pos:position pos:line="22" pos:column="70"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="71"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">int<pos:position pos:line="23" pos:column="20"/></name></type> <name pos:line="23" pos:column="21">hd<pos:position pos:line="23" pos:column="23"/></name> <init pos:line="23" pos:column="24">= <expr><name pos:line="23" pos:column="26">hdrsize<pos:position pos:line="23" pos:column="33"/></name> <operator pos:line="23" pos:column="34">+<pos:position pos:line="23" pos:column="35"/></operator> <name pos:line="23" pos:column="36">offset<pos:position pos:line="23" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="23" pos:column="43"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="24" pos:column="17">unsigned<pos:position pos:line="24" pos:column="25"/></name> <name pos:line="24" pos:column="26">long<pos:position pos:line="24" pos:column="30"/></name></type> <name pos:line="24" pos:column="31">llen<pos:position pos:line="24" pos:column="35"/></name> <init pos:line="24" pos:column="36">= <expr><call><name pos:line="24" pos:column="38">linelen<pos:position pos:line="24" pos:column="45"/></name><argument_list pos:line="24" pos:column="45">(<argument><expr><name pos:line="24" pos:column="46">buffer<pos:position pos:line="24" pos:column="52"/></name> <operator pos:line="24" pos:column="53">+<pos:position pos:line="24" pos:column="54"/></operator> <name pos:line="24" pos:column="55">hd<pos:position pos:line="24" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="59">size<pos:position pos:line="24" pos:column="63"/></name> <operator pos:line="24" pos:column="64">-<pos:position pos:line="24" pos:column="65"/></operator> <name pos:line="24" pos:column="66">hd<pos:position pos:line="24" pos:column="68"/></name></expr></argument>)<pos:position pos:line="24" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="70"/></decl_stmt>

		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name pos:line="26" pos:column="21">llen<pos:position pos:line="26" pos:column="25"/></name> <operator pos:line="26" pos:column="26">==<pos:position pos:line="26" pos:column="28"/></operator> <sizeof pos:line="26" pos:column="29">sizeof<argument_list pos:line="26" pos:column="35">(<argument><expr><name pos:line="26" pos:column="36">git_binary<pos:position pos:line="26" pos:column="46"/></name></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></sizeof> <operator pos:line="26" pos:column="48">-<pos:position pos:line="26" pos:column="49"/></operator> <literal type="number" pos:line="26" pos:column="50">1<pos:position pos:line="26" pos:column="51"/></literal> <operator pos:line="26" pos:column="52">&amp;&amp;<pos:position pos:line="26" pos:column="62"/></operator>
		    <operator pos:line="27" pos:column="21">!<pos:position pos:line="27" pos:column="22"/></operator><call><name pos:line="27" pos:column="22">memcmp<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">git_binary<pos:position pos:line="27" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="41">buffer<pos:position pos:line="27" pos:column="47"/></name> <operator pos:line="27" pos:column="48">+<pos:position pos:line="27" pos:column="49"/></operator> <name pos:line="27" pos:column="50">hd<pos:position pos:line="27" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="54">llen<pos:position pos:line="27" pos:column="58"/></name></expr></argument>)<pos:position pos:line="27" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="60"/></condition><then pos:line="27" pos:column="60"> <block pos:line="27" pos:column="61">{
			<decl_stmt><decl><type><name pos:line="28" pos:column="25">int<pos:position pos:line="28" pos:column="28"/></name></type> <name pos:line="28" pos:column="29">used<pos:position pos:line="28" pos:column="33"/></name></decl>;<pos:position pos:line="28" pos:column="34"/></decl_stmt>
			<expr_stmt><expr><name pos:line="29" pos:column="25">linenr<pos:position pos:line="29" pos:column="31"/></name><operator pos:line="29" pos:column="31">++<pos:position pos:line="29" pos:column="33"/></operator></expr>;<pos:position pos:line="29" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name pos:line="30" pos:column="25">used<pos:position pos:line="30" pos:column="29"/></name> <operator pos:line="30" pos:column="30">=<pos:position pos:line="30" pos:column="31"/></operator> <call><name pos:line="30" pos:column="32">parse_binary<pos:position pos:line="30" pos:column="44"/></name><argument_list pos:line="30" pos:column="44">(<argument><expr><name pos:line="30" pos:column="45">buffer<pos:position pos:line="30" pos:column="51"/></name> <operator pos:line="30" pos:column="52">+<pos:position pos:line="30" pos:column="53"/></operator> <name pos:line="30" pos:column="54">hd<pos:position pos:line="30" pos:column="56"/></name> <operator pos:line="30" pos:column="57">+<pos:position pos:line="30" pos:column="58"/></operator> <name pos:line="30" pos:column="59">llen<pos:position pos:line="30" pos:column="63"/></name></expr></argument>,
					    <argument><expr><name pos:line="31" pos:column="45">size<pos:position pos:line="31" pos:column="49"/></name> <operator pos:line="31" pos:column="50">-<pos:position pos:line="31" pos:column="51"/></operator> <name pos:line="31" pos:column="52">hd<pos:position pos:line="31" pos:column="54"/></name> <operator pos:line="31" pos:column="55">-<pos:position pos:line="31" pos:column="56"/></operator> <name pos:line="31" pos:column="57">llen<pos:position pos:line="31" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="63">patch<pos:position pos:line="31" pos:column="68"/></name></expr></argument>)<pos:position pos:line="31" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="70"/></expr_stmt>
			<if pos:line="32" pos:column="25">if <condition pos:line="32" pos:column="28">(<expr><name pos:line="32" pos:column="29">used<pos:position pos:line="32" pos:column="33"/></name></expr>)<pos:position pos:line="32" pos:column="34"/></condition><then pos:line="32" pos:column="34">
				<block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="33">patchsize<pos:position pos:line="33" pos:column="42"/></name> <operator pos:line="33" pos:column="43">=<pos:position pos:line="33" pos:column="44"/></operator> <name pos:line="33" pos:column="45">used<pos:position pos:line="33" pos:column="49"/></name> <operator pos:line="33" pos:column="50">+<pos:position pos:line="33" pos:column="51"/></operator> <name pos:line="33" pos:column="52">llen<pos:position pos:line="33" pos:column="56"/></name></expr>;<pos:position pos:line="33" pos:column="57"/></expr_stmt></block></then>
			<else pos:line="34" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="33">patchsize<pos:position pos:line="35" pos:column="42"/></name> <operator pos:line="35" pos:column="43">=<pos:position pos:line="35" pos:column="44"/></operator> <literal type="number" pos:line="35" pos:column="45">0<pos:position pos:line="35" pos:column="46"/></literal></expr>;<pos:position pos:line="35" pos:column="47"/></expr_stmt></block></else></if>
		}<pos:position pos:line="36" pos:column="18"/></block></then>
		<elseif pos:line="37" pos:column="17">else <if pos:line="37" pos:column="22">if <condition pos:line="37" pos:column="25">(<expr><operator pos:line="37" pos:column="26">!<pos:position pos:line="37" pos:column="27"/></operator><call><name pos:line="37" pos:column="27">memcmp<pos:position pos:line="37" pos:column="33"/></name><argument_list pos:line="37" pos:column="33">(<argument><expr><literal type="string" pos:line="37" pos:column="34">" differ\n"<pos:position pos:line="37" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="47">buffer<pos:position pos:line="37" pos:column="53"/></name> <operator pos:line="37" pos:column="54">+<pos:position pos:line="37" pos:column="55"/></operator> <name pos:line="37" pos:column="56">hd<pos:position pos:line="37" pos:column="58"/></name> <operator pos:line="37" pos:column="59">+<pos:position pos:line="37" pos:column="60"/></operator> <name pos:line="37" pos:column="61">llen<pos:position pos:line="37" pos:column="65"/></name> <operator pos:line="37" pos:column="66">-<pos:position pos:line="37" pos:column="67"/></operator> <literal type="number" pos:line="37" pos:column="68">8<pos:position pos:line="37" pos:column="69"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="71">8<pos:position pos:line="37" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="74"/></condition><then pos:line="37" pos:column="74"> <block pos:line="37" pos:column="75">{
			<decl_stmt><decl><specifier pos:line="38" pos:column="25">static<pos:position pos:line="38" pos:column="31"/></specifier> <type><specifier pos:line="38" pos:column="32">const<pos:position pos:line="38" pos:column="37"/></specifier> <name pos:line="38" pos:column="38">char<pos:position pos:line="38" pos:column="42"/></name> <modifier pos:line="38" pos:column="43">*<pos:position pos:line="38" pos:column="44"/></modifier></type><name><name pos:line="38" pos:column="44">binhdr<pos:position pos:line="38" pos:column="50"/></name><index pos:line="38" pos:column="50">[]<pos:position pos:line="38" pos:column="52"/></index></name> <init pos:line="38" pos:column="53">= <expr><block pos:line="38" pos:column="55">{
				<expr><literal type="string" pos:line="39" pos:column="33">"Binary files "<pos:position pos:line="39" pos:column="48"/></literal></expr>,
				<expr><literal type="string" pos:line="40" pos:column="33">"Files "<pos:position pos:line="40" pos:column="41"/></literal></expr>,
				<expr><name pos:line="41" pos:column="33">NULL<pos:position pos:line="41" pos:column="37"/></name></expr>,
			}<pos:position pos:line="42" pos:column="26"/></block></expr></init></decl>;<pos:position pos:line="42" pos:column="27"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="43" pos:column="25">int<pos:position pos:line="43" pos:column="28"/></name></type> <name pos:line="43" pos:column="29">i<pos:position pos:line="43" pos:column="30"/></name></decl>;<pos:position pos:line="43" pos:column="31"/></decl_stmt>
			<for pos:line="44" pos:column="25">for <control pos:line="44" pos:column="29">(<init><expr><name pos:line="44" pos:column="30">i<pos:position pos:line="44" pos:column="31"/></name> <operator pos:line="44" pos:column="32">=<pos:position pos:line="44" pos:column="33"/></operator> <literal type="number" pos:line="44" pos:column="34">0<pos:position pos:line="44" pos:column="35"/></literal></expr>;<pos:position pos:line="44" pos:column="36"/></init> <condition><expr><name><name pos:line="44" pos:column="37">binhdr<pos:position pos:line="44" pos:column="43"/></name><index pos:line="44" pos:column="43">[<expr><name pos:line="44" pos:column="44">i<pos:position pos:line="44" pos:column="45"/></name></expr>]<pos:position pos:line="44" pos:column="46"/></index></name></expr>;<pos:position pos:line="44" pos:column="47"/></condition> <incr><expr><name pos:line="44" pos:column="48">i<pos:position pos:line="44" pos:column="49"/></name><operator pos:line="44" pos:column="49">++<pos:position pos:line="44" pos:column="51"/></operator></expr></incr>)<pos:position pos:line="44" pos:column="52"/></control> <block pos:line="44" pos:column="53">{
				<decl_stmt><decl><type><name pos:line="45" pos:column="33">int<pos:position pos:line="45" pos:column="36"/></name></type> <name pos:line="45" pos:column="37">len<pos:position pos:line="45" pos:column="40"/></name> <init pos:line="45" pos:column="41">= <expr><call><name pos:line="45" pos:column="43">strlen<pos:position pos:line="45" pos:column="49"/></name><argument_list pos:line="45" pos:column="49">(<argument><expr><name><name pos:line="45" pos:column="50">binhdr<pos:position pos:line="45" pos:column="56"/></name><index pos:line="45" pos:column="56">[<expr><name pos:line="45" pos:column="57">i<pos:position pos:line="45" pos:column="58"/></name></expr>]<pos:position pos:line="45" pos:column="59"/></index></name></expr></argument>)<pos:position pos:line="45" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="45" pos:column="61"/></decl_stmt>
				<if pos:line="46" pos:column="33">if <condition pos:line="46" pos:column="36">(<expr><name pos:line="46" pos:column="37">len<pos:position pos:line="46" pos:column="40"/></name> <operator pos:line="46" pos:column="41">&lt;<pos:position pos:line="46" pos:column="45"/></operator> <name pos:line="46" pos:column="43">size<pos:position pos:line="46" pos:column="47"/></name> <operator pos:line="46" pos:column="48">-<pos:position pos:line="46" pos:column="49"/></operator> <name pos:line="46" pos:column="50">hd<pos:position pos:line="46" pos:column="52"/></name> <operator pos:line="46" pos:column="53">&amp;&amp;<pos:position pos:line="46" pos:column="63"/></operator>
				    <operator pos:line="47" pos:column="37">!<pos:position pos:line="47" pos:column="38"/></operator><call><name pos:line="47" pos:column="38">memcmp<pos:position pos:line="47" pos:column="44"/></name><argument_list pos:line="47" pos:column="44">(<argument><expr><name><name pos:line="47" pos:column="45">binhdr<pos:position pos:line="47" pos:column="51"/></name><index pos:line="47" pos:column="51">[<expr><name pos:line="47" pos:column="52">i<pos:position pos:line="47" pos:column="53"/></name></expr>]<pos:position pos:line="47" pos:column="54"/></index></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="56">buffer<pos:position pos:line="47" pos:column="62"/></name> <operator pos:line="47" pos:column="63">+<pos:position pos:line="47" pos:column="64"/></operator> <name pos:line="47" pos:column="65">hd<pos:position pos:line="47" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="69">len<pos:position pos:line="47" pos:column="72"/></name></expr></argument>)<pos:position pos:line="47" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="74"/></condition><then pos:line="47" pos:column="74"> <block pos:line="47" pos:column="75">{
					<expr_stmt><expr><name pos:line="48" pos:column="41">linenr<pos:position pos:line="48" pos:column="47"/></name><operator pos:line="48" pos:column="47">++<pos:position pos:line="48" pos:column="49"/></operator></expr>;<pos:position pos:line="48" pos:column="50"/></expr_stmt>
					<expr_stmt><expr><name><name pos:line="49" pos:column="41">patch<pos:position pos:line="49" pos:column="46"/></name><operator pos:line="49" pos:column="46">-&gt;<pos:position pos:line="49" pos:column="51"/></operator><name pos:line="49" pos:column="48">is_binary<pos:position pos:line="49" pos:column="57"/></name></name> <operator pos:line="49" pos:column="58">=<pos:position pos:line="49" pos:column="59"/></operator> <literal type="number" pos:line="49" pos:column="60">1<pos:position pos:line="49" pos:column="61"/></literal></expr>;<pos:position pos:line="49" pos:column="62"/></expr_stmt>
					<expr_stmt><expr><name pos:line="50" pos:column="41">patchsize<pos:position pos:line="50" pos:column="50"/></name> <operator pos:line="50" pos:column="51">=<pos:position pos:line="50" pos:column="52"/></operator> <name pos:line="50" pos:column="53">llen<pos:position pos:line="50" pos:column="57"/></name></expr>;<pos:position pos:line="50" pos:column="58"/></expr_stmt>
					<break pos:line="51" pos:column="41">break;<pos:position pos:line="51" pos:column="47"/></break>
				}<pos:position pos:line="52" pos:column="34"/></block></then></if>
			}<pos:position pos:line="53" pos:column="26"/></block></for>
		}<pos:position pos:line="54" pos:column="18"/></block></then></if></elseif></if>

		<comment type="block" pos:line="56" pos:column="17">/* Empty patch cannot be applied if it is a text patch
		 * without metadata change.  A binary patch appears
		 * empty to us here.
		 */</comment>
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><operator pos:line="60" pos:column="21">(<pos:position pos:line="60" pos:column="22"/></operator><name pos:line="60" pos:column="22">apply<pos:position pos:line="60" pos:column="27"/></name> <operator pos:line="60" pos:column="28">||<pos:position pos:line="60" pos:column="30"/></operator> <name pos:line="60" pos:column="31">check<pos:position pos:line="60" pos:column="36"/></name><operator pos:line="60" pos:column="36">)<pos:position pos:line="60" pos:column="37"/></operator> <operator pos:line="60" pos:column="38">&amp;&amp;<pos:position pos:line="60" pos:column="48"/></operator>
		    <operator pos:line="61" pos:column="21">(<pos:position pos:line="61" pos:column="22"/></operator><operator pos:line="61" pos:column="22">!<pos:position pos:line="61" pos:column="23"/></operator><name><name pos:line="61" pos:column="23">patch<pos:position pos:line="61" pos:column="28"/></name><operator pos:line="61" pos:column="28">-&gt;<pos:position pos:line="61" pos:column="33"/></operator><name pos:line="61" pos:column="30">is_binary<pos:position pos:line="61" pos:column="39"/></name></name> <operator pos:line="61" pos:column="40">&amp;&amp;<pos:position pos:line="61" pos:column="50"/></operator> <operator pos:line="61" pos:column="43">!<pos:position pos:line="61" pos:column="44"/></operator><call><name pos:line="61" pos:column="44">metadata_changes<pos:position pos:line="61" pos:column="60"/></name><argument_list pos:line="61" pos:column="60">(<argument><expr><name pos:line="61" pos:column="61">patch<pos:position pos:line="61" pos:column="66"/></name></expr></argument>)<pos:position pos:line="61" pos:column="67"/></argument_list></call><operator pos:line="61" pos:column="67">)<pos:position pos:line="61" pos:column="68"/></operator></expr>)<pos:position pos:line="61" pos:column="69"/></condition><then pos:line="61" pos:column="69">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="25">die<pos:position pos:line="62" pos:column="28"/></name><argument_list pos:line="62" pos:column="28">(<argument><expr><call><name pos:line="62" pos:column="29">_<pos:position pos:line="62" pos:column="30"/></name><argument_list pos:line="62" pos:column="30">(<argument><expr><literal type="string" pos:line="62" pos:column="31">"patch with only garbage at line %d"<pos:position pos:line="62" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="68"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="62" pos:column="70">linenr<pos:position pos:line="62" pos:column="76"/></name></expr></argument>)<pos:position pos:line="62" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="78"/></expr_stmt></block></then></if>
	}<pos:position pos:line="63" pos:column="10"/></block></then></if>

	<return pos:line="65" pos:column="9">return <expr><name pos:line="65" pos:column="16">offset<pos:position pos:line="65" pos:column="22"/></name> <operator pos:line="65" pos:column="23">+<pos:position pos:line="65" pos:column="24"/></operator> <name pos:line="65" pos:column="25">hdrsize<pos:position pos:line="65" pos:column="32"/></name> <operator pos:line="65" pos:column="33">+<pos:position pos:line="65" pos:column="34"/></operator> <name pos:line="65" pos:column="35">patchsize<pos:position pos:line="65" pos:column="44"/></name></expr>;<pos:position pos:line="65" pos:column="45"/></return>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
