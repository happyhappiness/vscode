<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6179_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">show_all<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">void<pos:position pos:line="1" pos:column="25"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="26"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">string_list<pos:position pos:line="3" pos:column="27"/></name></name></type> <name pos:line="3" pos:column="28">list<pos:position pos:line="3" pos:column="32"/></name> <init pos:line="3" pos:column="33">= <expr><name pos:line="3" pos:column="35">STRING_LIST_INIT_NODUP<pos:position pos:line="3" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="58"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">result<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><name><name pos:line="6" pos:column="9">list<pos:position pos:line="6" pos:column="13"/></name><operator pos:line="6" pos:column="13">.<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">strdup_strings<pos:position pos:line="6" pos:column="28"/></name></name> <operator pos:line="6" pos:column="29">=<pos:position pos:line="6" pos:column="30"/></operator> <literal type="number" pos:line="6" pos:column="31">1<pos:position pos:line="6" pos:column="32"/></literal></expr>;<pos:position pos:line="6" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name pos:line="7" pos:column="9">result<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <call><name pos:line="7" pos:column="18">for_each_remote<pos:position pos:line="7" pos:column="33"/></name><argument_list pos:line="7" pos:column="33">(<argument><expr><name pos:line="7" pos:column="34">get_one_entry<pos:position pos:line="7" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="49">&amp;<pos:position pos:line="7" pos:column="54"/></operator><name pos:line="7" pos:column="50">list<pos:position pos:line="7" pos:column="54"/></name></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="56"/></expr_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">result<pos:position pos:line="9" pos:column="20"/></name></expr>)<pos:position pos:line="9" pos:column="21"/></condition><then pos:line="9" pos:column="21"> <block pos:line="9" pos:column="22">{
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">int<pos:position pos:line="10" pos:column="20"/></name></type> <name pos:line="10" pos:column="21">i<pos:position pos:line="10" pos:column="22"/></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="12" pos:column="17">string_list_sort<pos:position pos:line="12" pos:column="33"/></name><argument_list pos:line="12" pos:column="33">(<argument><expr><operator pos:line="12" pos:column="34">&amp;<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="35">list<pos:position pos:line="12" pos:column="39"/></name></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
		<for pos:line="13" pos:column="17">for <control pos:line="13" pos:column="21">(<init><expr><name pos:line="13" pos:column="22">i<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">=<pos:position pos:line="13" pos:column="25"/></operator> <literal type="number" pos:line="13" pos:column="26">0<pos:position pos:line="13" pos:column="27"/></literal></expr>;<pos:position pos:line="13" pos:column="28"/></init> <condition><expr><name pos:line="13" pos:column="29">i<pos:position pos:line="13" pos:column="30"/></name> <operator pos:line="13" pos:column="31">&lt;<pos:position pos:line="13" pos:column="35"/></operator> <name><name pos:line="13" pos:column="33">list<pos:position pos:line="13" pos:column="37"/></name><operator pos:line="13" pos:column="37">.<pos:position pos:line="13" pos:column="38"/></operator><name pos:line="13" pos:column="38">nr<pos:position pos:line="13" pos:column="40"/></name></name></expr>;<pos:position pos:line="13" pos:column="41"/></condition> <incr><expr><name pos:line="13" pos:column="42">i<pos:position pos:line="13" pos:column="43"/></name><operator pos:line="13" pos:column="43">++<pos:position pos:line="13" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="13" pos:column="46"/></control> <block pos:line="13" pos:column="47">{
			<decl_stmt><decl><type><name><name pos:line="14" pos:column="25">struct<pos:position pos:line="14" pos:column="31"/></name> <name pos:line="14" pos:column="32">string_list_item<pos:position pos:line="14" pos:column="48"/></name></name> <modifier pos:line="14" pos:column="49">*<pos:position pos:line="14" pos:column="50"/></modifier></type><name pos:line="14" pos:column="50">item<pos:position pos:line="14" pos:column="54"/></name> <init pos:line="14" pos:column="55">= <expr><name><name pos:line="14" pos:column="57">list<pos:position pos:line="14" pos:column="61"/></name><operator pos:line="14" pos:column="61">.<pos:position pos:line="14" pos:column="62"/></operator><name pos:line="14" pos:column="62">items<pos:position pos:line="14" pos:column="67"/></name></name> <operator pos:line="14" pos:column="68">+<pos:position pos:line="14" pos:column="69"/></operator> <name pos:line="14" pos:column="70">i<pos:position pos:line="14" pos:column="71"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="72"/></decl_stmt>
			<if pos:line="15" pos:column="25">if <condition pos:line="15" pos:column="28">(<expr><name pos:line="15" pos:column="29">verbose<pos:position pos:line="15" pos:column="36"/></name></expr>)<pos:position pos:line="15" pos:column="37"/></condition><then pos:line="15" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="33">printf<pos:position pos:line="16" pos:column="39"/></name><argument_list pos:line="16" pos:column="39">(<argument><expr><literal type="string" pos:line="16" pos:column="40">"%s\t%s\n"<pos:position pos:line="16" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="52">item<pos:position pos:line="16" pos:column="56"/></name><operator pos:line="16" pos:column="56">-&gt;<pos:position pos:line="16" pos:column="61"/></operator><name pos:line="16" pos:column="58">string<pos:position pos:line="16" pos:column="64"/></name></name></expr></argument>,
					<argument><expr><ternary><condition><expr><name><name pos:line="17" pos:column="41">item<pos:position pos:line="17" pos:column="45"/></name><operator pos:line="17" pos:column="45">-&gt;<pos:position pos:line="17" pos:column="50"/></operator><name pos:line="17" pos:column="47">util<pos:position pos:line="17" pos:column="51"/></name></name></expr> ?<pos:position pos:line="17" pos:column="53"/></condition><then pos:line="17" pos:column="53"> <expr><operator pos:line="17" pos:column="54">(<pos:position pos:line="17" pos:column="55"/></operator><specifier pos:line="17" pos:column="55">const<pos:position pos:line="17" pos:column="60"/></specifier> <name pos:line="17" pos:column="61">char<pos:position pos:line="17" pos:column="65"/></name> <operator pos:line="17" pos:column="66">*<pos:position pos:line="17" pos:column="67"/></operator><operator pos:line="17" pos:column="67">)<pos:position pos:line="17" pos:column="68"/></operator><name><name pos:line="17" pos:column="68">item<pos:position pos:line="17" pos:column="72"/></name><operator pos:line="17" pos:column="72">-&gt;<pos:position pos:line="17" pos:column="77"/></operator><name pos:line="17" pos:column="74">util<pos:position pos:line="17" pos:column="78"/></name></name></expr> <pos:position pos:line="17" pos:column="79"/></then><else pos:line="17" pos:column="79">: <expr><literal type="string" pos:line="17" pos:column="81">""<pos:position pos:line="17" pos:column="83"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="17" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="85"/></expr_stmt></block></then>
			<else pos:line="18" pos:column="25">else <block pos:line="18" pos:column="30">{
				<if pos:line="19" pos:column="33">if <condition pos:line="19" pos:column="36">(<expr><name pos:line="19" pos:column="37">i<pos:position pos:line="19" pos:column="38"/></name> <operator pos:line="19" pos:column="39">&amp;&amp;<pos:position pos:line="19" pos:column="49"/></operator> <operator pos:line="19" pos:column="42">!<pos:position pos:line="19" pos:column="43"/></operator><call><name pos:line="19" pos:column="43">strcmp<pos:position pos:line="19" pos:column="49"/></name><argument_list pos:line="19" pos:column="49">(<argument><expr><operator pos:line="19" pos:column="50">(<pos:position pos:line="19" pos:column="51"/></operator><name pos:line="19" pos:column="51">item<pos:position pos:line="19" pos:column="55"/></name> <operator pos:line="19" pos:column="56">-<pos:position pos:line="19" pos:column="57"/></operator> <literal type="number" pos:line="19" pos:column="58">1<pos:position pos:line="19" pos:column="59"/></literal><operator pos:line="19" pos:column="59">)<pos:position pos:line="19" pos:column="60"/></operator><operator pos:line="19" pos:column="60">-&gt;<pos:position pos:line="19" pos:column="65"/></operator><name pos:line="19" pos:column="62">string<pos:position pos:line="19" pos:column="68"/></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="70">item<pos:position pos:line="19" pos:column="74"/></name><operator pos:line="19" pos:column="74">-&gt;<pos:position pos:line="19" pos:column="79"/></operator><name pos:line="19" pos:column="76">string<pos:position pos:line="19" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="83"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="84"/></condition><then pos:line="19" pos:column="84">
					<block type="pseudo"><continue pos:line="20" pos:column="41">continue;<pos:position pos:line="20" pos:column="50"/></continue></block></then></if>
				<expr_stmt><expr><call><name pos:line="21" pos:column="33">printf<pos:position pos:line="21" pos:column="39"/></name><argument_list pos:line="21" pos:column="39">(<argument><expr><literal type="string" pos:line="21" pos:column="40">"%s\n"<pos:position pos:line="21" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="48">item<pos:position pos:line="21" pos:column="52"/></name><operator pos:line="21" pos:column="52">-&gt;<pos:position pos:line="21" pos:column="57"/></operator><name pos:line="21" pos:column="54">string<pos:position pos:line="21" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="62"/></expr_stmt>
			}<pos:position pos:line="22" pos:column="26"/></block></else></if>
		}<pos:position pos:line="23" pos:column="18"/></block></for>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">string_list_clear<pos:position pos:line="25" pos:column="26"/></name><argument_list pos:line="25" pos:column="26">(<argument><expr><operator pos:line="25" pos:column="27">&amp;<pos:position pos:line="25" pos:column="32"/></operator><name pos:line="25" pos:column="28">list<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="34">1<pos:position pos:line="25" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="37"/></expr_stmt>
	<return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">result<pos:position pos:line="26" pos:column="22"/></name></expr>;<pos:position pos:line="26" pos:column="23"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
