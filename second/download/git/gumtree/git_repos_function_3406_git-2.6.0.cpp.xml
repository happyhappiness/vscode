<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3406_git-2.6.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">verify_packfile<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">packed_git<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">p<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>,
			   <parameter><decl><type><name><name pos:line="2" pos:column="28">struct<pos:position pos:line="2" pos:column="34"/></name> <name pos:line="2" pos:column="35">pack_window<pos:position pos:line="2" pos:column="46"/></name></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier><modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">w_curs<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>,
			   <parameter><decl><type><name pos:line="3" pos:column="28">verify_fn<pos:position pos:line="3" pos:column="37"/></name></type> <name pos:line="3" pos:column="38">fn<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>,
			   <parameter><decl><type><name><name pos:line="4" pos:column="28">struct<pos:position pos:line="4" pos:column="34"/></name> <name pos:line="4" pos:column="35">progress<pos:position pos:line="4" pos:column="43"/></name></name> <modifier pos:line="4" pos:column="44">*<pos:position pos:line="4" pos:column="45"/></modifier></type><name pos:line="4" pos:column="45">progress<pos:position pos:line="4" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="55">uint32_t<pos:position pos:line="4" pos:column="63"/></name></type> <name pos:line="4" pos:column="64">base_count<pos:position pos:line="4" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="75"/></parameter_list>

<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">off_t<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">index_size<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><name><name pos:line="7" pos:column="28">p<pos:position pos:line="7" pos:column="29"/></name><operator pos:line="7" pos:column="29">-&gt;<pos:position pos:line="7" pos:column="34"/></operator><name pos:line="7" pos:column="31">index_size<pos:position pos:line="7" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">unsigned<pos:position pos:line="8" pos:column="23"/></name> <name pos:line="8" pos:column="24">char<pos:position pos:line="8" pos:column="28"/></name> <modifier pos:line="8" pos:column="29">*<pos:position pos:line="8" pos:column="30"/></modifier></type><name pos:line="8" pos:column="30">index_base<pos:position pos:line="8" pos:column="40"/></name> <init pos:line="8" pos:column="41">= <expr><name><name pos:line="8" pos:column="43">p<pos:position pos:line="8" pos:column="44"/></name><operator pos:line="8" pos:column="44">-&gt;<pos:position pos:line="8" pos:column="49"/></operator><name pos:line="8" pos:column="46">index_data<pos:position pos:line="8" pos:column="56"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="57"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">git_SHA_CTX<pos:position pos:line="9" pos:column="20"/></name></type> <name pos:line="9" pos:column="21">ctx<pos:position pos:line="9" pos:column="24"/></name></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">unsigned<pos:position pos:line="10" pos:column="17"/></name> <name pos:line="10" pos:column="18">char<pos:position pos:line="10" pos:column="22"/></name></type> <name><name pos:line="10" pos:column="23">sha1<pos:position pos:line="10" pos:column="27"/></name><index pos:line="10" pos:column="27">[<expr><literal type="number" pos:line="10" pos:column="28">20<pos:position pos:line="10" pos:column="30"/></literal></expr>]<pos:position pos:line="10" pos:column="31"/></index></name></decl>, <modifier pos:line="10" pos:column="33">*<pos:position pos:line="10" pos:column="34"/></modifier><decl><type ref="prev"/><name pos:line="10" pos:column="34">pack_sig<pos:position pos:line="10" pos:column="42"/></name></decl>;<pos:position pos:line="10" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">off_t<pos:position pos:line="11" pos:column="14"/></name></type> <name pos:line="11" pos:column="15">offset<pos:position pos:line="11" pos:column="21"/></name> <init pos:line="11" pos:column="22">= <expr><literal type="number" pos:line="11" pos:column="24">0<pos:position pos:line="11" pos:column="25"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="27">pack_sig_ofs<pos:position pos:line="11" pos:column="39"/></name> <init pos:line="11" pos:column="40">= <expr><literal type="number" pos:line="11" pos:column="42">0<pos:position pos:line="11" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">uint32_t<pos:position pos:line="12" pos:column="17"/></name></type> <name pos:line="12" pos:column="18">nr_objects<pos:position pos:line="12" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="12" pos:column="30">i<pos:position pos:line="12" pos:column="31"/></name></decl>;<pos:position pos:line="12" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">err<pos:position pos:line="13" pos:column="16"/></name> <init pos:line="13" pos:column="17">= <expr><literal type="number" pos:line="13" pos:column="19">0<pos:position pos:line="13" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="14" pos:column="9">struct<pos:position pos:line="14" pos:column="15"/></name> <name pos:line="14" pos:column="16">idx_entry<pos:position pos:line="14" pos:column="25"/></name></name> <modifier pos:line="14" pos:column="26">*<pos:position pos:line="14" pos:column="27"/></modifier></type><name pos:line="14" pos:column="27">entries<pos:position pos:line="14" pos:column="34"/></name></decl>;<pos:position pos:line="14" pos:column="35"/></decl_stmt>

	<comment type="block" pos:line="16" pos:column="9">/* Note that the pack header checks are actually performed by
	 * use_pack when it first opens the pack file.  If anything
	 * goes wrong during those checks then the call will die out
	 * immediately.
	 */</comment>

	<expr_stmt><expr><call><name pos:line="22" pos:column="9">git_SHA1_Init<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">(<argument><expr><operator pos:line="22" pos:column="23">&amp;<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="24">ctx<pos:position pos:line="22" pos:column="27"/></name></expr></argument>)<pos:position pos:line="22" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>
	<do pos:line="23" pos:column="9">do <block pos:line="23" pos:column="12">{
		<decl_stmt><decl><type><name pos:line="24" pos:column="17">unsigned<pos:position pos:line="24" pos:column="25"/></name> <name pos:line="24" pos:column="26">long<pos:position pos:line="24" pos:column="30"/></name></type> <name pos:line="24" pos:column="31">remaining<pos:position pos:line="24" pos:column="40"/></name></decl>;<pos:position pos:line="24" pos:column="41"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="25" pos:column="17">unsigned<pos:position pos:line="25" pos:column="25"/></name> <name pos:line="25" pos:column="26">char<pos:position pos:line="25" pos:column="30"/></name> <modifier pos:line="25" pos:column="31">*<pos:position pos:line="25" pos:column="32"/></modifier></type><name pos:line="25" pos:column="32">in<pos:position pos:line="25" pos:column="34"/></name> <init pos:line="25" pos:column="35">= <expr><call><name pos:line="25" pos:column="37">use_pack<pos:position pos:line="25" pos:column="45"/></name><argument_list pos:line="25" pos:column="45">(<argument><expr><name pos:line="25" pos:column="46">p<pos:position pos:line="25" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="49">w_curs<pos:position pos:line="25" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="57">offset<pos:position pos:line="25" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="65">&amp;<pos:position pos:line="25" pos:column="70"/></operator><name pos:line="25" pos:column="66">remaining<pos:position pos:line="25" pos:column="75"/></name></expr></argument>)<pos:position pos:line="25" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="25" pos:column="77"/></decl_stmt>
		<expr_stmt><expr><name pos:line="26" pos:column="17">offset<pos:position pos:line="26" pos:column="23"/></name> <operator pos:line="26" pos:column="24">+=<pos:position pos:line="26" pos:column="26"/></operator> <name pos:line="26" pos:column="27">remaining<pos:position pos:line="26" pos:column="36"/></name></expr>;<pos:position pos:line="26" pos:column="37"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">!<pos:position pos:line="27" pos:column="22"/></operator><name pos:line="27" pos:column="22">pack_sig_ofs<pos:position pos:line="27" pos:column="34"/></name></expr>)<pos:position pos:line="27" pos:column="35"/></condition><then pos:line="27" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="25">pack_sig_ofs<pos:position pos:line="28" pos:column="37"/></name> <operator pos:line="28" pos:column="38">=<pos:position pos:line="28" pos:column="39"/></operator> <name><name pos:line="28" pos:column="40">p<pos:position pos:line="28" pos:column="41"/></name><operator pos:line="28" pos:column="41">-&gt;<pos:position pos:line="28" pos:column="46"/></operator><name pos:line="28" pos:column="43">pack_size<pos:position pos:line="28" pos:column="52"/></name></name> <operator pos:line="28" pos:column="53">-<pos:position pos:line="28" pos:column="54"/></operator> <literal type="number" pos:line="28" pos:column="55">20<pos:position pos:line="28" pos:column="57"/></literal></expr>;<pos:position pos:line="28" pos:column="58"/></expr_stmt></block></then></if>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">offset<pos:position pos:line="29" pos:column="27"/></name> <operator pos:line="29" pos:column="28">&gt;<pos:position pos:line="29" pos:column="32"/></operator> <name pos:line="29" pos:column="30">pack_sig_ofs<pos:position pos:line="29" pos:column="42"/></name></expr>)<pos:position pos:line="29" pos:column="43"/></condition><then pos:line="29" pos:column="43">
			<block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="25">remaining<pos:position pos:line="30" pos:column="34"/></name> <operator pos:line="30" pos:column="35">-=<pos:position pos:line="30" pos:column="37"/></operator> <call pos:line="30" pos:column="38">(<name pos:line="30" pos:column="39">unsigned<pos:position pos:line="30" pos:column="47"/></name> <name pos:line="30" pos:column="48">int<pos:position pos:line="30" pos:column="51"/></name>)<argument_list pos:line="30" pos:column="52">(<argument><expr><name pos:line="30" pos:column="53">offset<pos:position pos:line="30" pos:column="59"/></name> <operator pos:line="30" pos:column="60">-<pos:position pos:line="30" pos:column="61"/></operator> <name pos:line="30" pos:column="62">pack_sig_ofs<pos:position pos:line="30" pos:column="74"/></name></expr></argument>)<pos:position pos:line="30" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="76"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="31" pos:column="17">git_SHA1_Update<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">(<argument><expr><operator pos:line="31" pos:column="33">&amp;<pos:position pos:line="31" pos:column="38"/></operator><name pos:line="31" pos:column="34">ctx<pos:position pos:line="31" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="39">in<pos:position pos:line="31" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="43">remaining<pos:position pos:line="31" pos:column="52"/></name></expr></argument>)<pos:position pos:line="31" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block> while <condition pos:line="32" pos:column="17">(<expr><name pos:line="32" pos:column="18">offset<pos:position pos:line="32" pos:column="24"/></name> <operator pos:line="32" pos:column="25">&lt;<pos:position pos:line="32" pos:column="29"/></operator> <name pos:line="32" pos:column="27">pack_sig_ofs<pos:position pos:line="32" pos:column="39"/></name></expr>)<pos:position pos:line="32" pos:column="40"/></condition>;<pos:position pos:line="32" pos:column="41"/></do>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">git_SHA1_Final<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">(<argument><expr><name pos:line="33" pos:column="24">sha1<pos:position pos:line="33" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="30">&amp;<pos:position pos:line="33" pos:column="35"/></operator><name pos:line="33" pos:column="31">ctx<pos:position pos:line="33" pos:column="34"/></name></expr></argument>)<pos:position pos:line="33" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="34" pos:column="9">pack_sig<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">=<pos:position pos:line="34" pos:column="19"/></operator> <call><name pos:line="34" pos:column="20">use_pack<pos:position pos:line="34" pos:column="28"/></name><argument_list pos:line="34" pos:column="28">(<argument><expr><name pos:line="34" pos:column="29">p<pos:position pos:line="34" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="32">w_curs<pos:position pos:line="34" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="40">pack_sig_ofs<pos:position pos:line="34" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="54">NULL<pos:position pos:line="34" pos:column="58"/></name></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="60"/></expr_stmt>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><call><name pos:line="35" pos:column="13">hashcmp<pos:position pos:line="35" pos:column="20"/></name><argument_list pos:line="35" pos:column="20">(<argument><expr><name pos:line="35" pos:column="21">sha1<pos:position pos:line="35" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="27">pack_sig<pos:position pos:line="35" pos:column="35"/></name></expr></argument>)<pos:position pos:line="35" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="37"/></condition><then pos:line="35" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="17">err<pos:position pos:line="36" pos:column="20"/></name> <operator pos:line="36" pos:column="21">=<pos:position pos:line="36" pos:column="22"/></operator> <call><name pos:line="36" pos:column="23">error<pos:position pos:line="36" pos:column="28"/></name><argument_list pos:line="36" pos:column="28">(<argument><expr><literal type="string" pos:line="36" pos:column="29">"%s SHA1 checksum mismatch"<pos:position pos:line="36" pos:column="56"/></literal></expr></argument>,
			    <argument><expr><name><name pos:line="37" pos:column="29">p<pos:position pos:line="37" pos:column="30"/></name><operator pos:line="37" pos:column="30">-&gt;<pos:position pos:line="37" pos:column="35"/></operator><name pos:line="37" pos:column="32">pack_name<pos:position pos:line="37" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="43"/></expr_stmt></block></then></if>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">hashcmp<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">(<argument><expr><name pos:line="38" pos:column="21">index_base<pos:position pos:line="38" pos:column="31"/></name> <operator pos:line="38" pos:column="32">+<pos:position pos:line="38" pos:column="33"/></operator> <name pos:line="38" pos:column="34">index_size<pos:position pos:line="38" pos:column="44"/></name> <operator pos:line="38" pos:column="45">-<pos:position pos:line="38" pos:column="46"/></operator> <literal type="number" pos:line="38" pos:column="47">40<pos:position pos:line="38" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="51">pack_sig<pos:position pos:line="38" pos:column="59"/></name></expr></argument>)<pos:position pos:line="38" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="61"/></condition><then pos:line="38" pos:column="61">
		<block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="17">err<pos:position pos:line="39" pos:column="20"/></name> <operator pos:line="39" pos:column="21">=<pos:position pos:line="39" pos:column="22"/></operator> <call><name pos:line="39" pos:column="23">error<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">(<argument><expr><literal type="string" pos:line="39" pos:column="29">"%s SHA1 does not match its index"<pos:position pos:line="39" pos:column="63"/></literal></expr></argument>,
			    <argument><expr><name><name pos:line="40" pos:column="29">p<pos:position pos:line="40" pos:column="30"/></name><operator pos:line="40" pos:column="30">-&gt;<pos:position pos:line="40" pos:column="35"/></operator><name pos:line="40" pos:column="32">pack_name<pos:position pos:line="40" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="43"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="41" pos:column="9">unuse_pack<pos:position pos:line="41" pos:column="19"/></name><argument_list pos:line="41" pos:column="19">(<argument><expr><name pos:line="41" pos:column="20">w_curs<pos:position pos:line="41" pos:column="26"/></name></expr></argument>)<pos:position pos:line="41" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="28"/></expr_stmt>

	<comment type="block" pos:line="43" pos:column="9">/* Make sure everything reachable from idx is valid.  Since we
	 * have verified that nr_objects matches between idx and pack,
	 * we do not do scan-streaming check on the pack file.
	 */</comment>
	<expr_stmt><expr><name pos:line="47" pos:column="9">nr_objects<pos:position pos:line="47" pos:column="19"/></name> <operator pos:line="47" pos:column="20">=<pos:position pos:line="47" pos:column="21"/></operator> <name><name pos:line="47" pos:column="22">p<pos:position pos:line="47" pos:column="23"/></name><operator pos:line="47" pos:column="23">-&gt;<pos:position pos:line="47" pos:column="28"/></operator><name pos:line="47" pos:column="25">num_objects<pos:position pos:line="47" pos:column="36"/></name></name></expr>;<pos:position pos:line="47" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name pos:line="48" pos:column="9">entries<pos:position pos:line="48" pos:column="16"/></name> <operator pos:line="48" pos:column="17">=<pos:position pos:line="48" pos:column="18"/></operator> <call><name pos:line="48" pos:column="19">xmalloc<pos:position pos:line="48" pos:column="26"/></name><argument_list pos:line="48" pos:column="26">(<argument><expr><operator pos:line="48" pos:column="27">(<pos:position pos:line="48" pos:column="28"/></operator><name pos:line="48" pos:column="28">nr_objects<pos:position pos:line="48" pos:column="38"/></name> <operator pos:line="48" pos:column="39">+<pos:position pos:line="48" pos:column="40"/></operator> <literal type="number" pos:line="48" pos:column="41">1<pos:position pos:line="48" pos:column="42"/></literal><operator pos:line="48" pos:column="42">)<pos:position pos:line="48" pos:column="43"/></operator> <operator pos:line="48" pos:column="44">*<pos:position pos:line="48" pos:column="45"/></operator> <sizeof pos:line="48" pos:column="46">sizeof<argument_list pos:line="48" pos:column="52">(<argument><expr><operator pos:line="48" pos:column="53">*<pos:position pos:line="48" pos:column="54"/></operator><name pos:line="48" pos:column="54">entries<pos:position pos:line="48" pos:column="61"/></name></expr></argument>)<pos:position pos:line="48" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="48" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="64"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="49" pos:column="9">entries<pos:position pos:line="49" pos:column="16"/></name><index pos:line="49" pos:column="16">[<expr><name pos:line="49" pos:column="17">nr_objects<pos:position pos:line="49" pos:column="27"/></name></expr>]<pos:position pos:line="49" pos:column="28"/></index></name><operator pos:line="49" pos:column="28">.<pos:position pos:line="49" pos:column="29"/></operator><name pos:line="49" pos:column="29">offset<pos:position pos:line="49" pos:column="35"/></name> <operator pos:line="49" pos:column="36">=<pos:position pos:line="49" pos:column="37"/></operator> <name pos:line="49" pos:column="38">pack_sig_ofs<pos:position pos:line="49" pos:column="50"/></name></expr>;<pos:position pos:line="49" pos:column="51"/></expr_stmt>
	<comment type="block" pos:line="50" pos:column="9">/* first sort entries by pack offset, since unpacking them is more efficient that way */</comment>
	<for pos:line="51" pos:column="9">for <control pos:line="51" pos:column="13">(<init><expr><name pos:line="51" pos:column="14">i<pos:position pos:line="51" pos:column="15"/></name> <operator pos:line="51" pos:column="16">=<pos:position pos:line="51" pos:column="17"/></operator> <literal type="number" pos:line="51" pos:column="18">0<pos:position pos:line="51" pos:column="19"/></literal></expr>;<pos:position pos:line="51" pos:column="20"/></init> <condition><expr><name pos:line="51" pos:column="21">i<pos:position pos:line="51" pos:column="22"/></name> <operator pos:line="51" pos:column="23">&lt;<pos:position pos:line="51" pos:column="27"/></operator> <name pos:line="51" pos:column="25">nr_objects<pos:position pos:line="51" pos:column="35"/></name></expr>;<pos:position pos:line="51" pos:column="36"/></condition> <incr><expr><name pos:line="51" pos:column="37">i<pos:position pos:line="51" pos:column="38"/></name><operator pos:line="51" pos:column="38">++<pos:position pos:line="51" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="51" pos:column="41"/></control> <block pos:line="51" pos:column="42">{
		<expr_stmt><expr><name><name pos:line="52" pos:column="17">entries<pos:position pos:line="52" pos:column="24"/></name><index pos:line="52" pos:column="24">[<expr><name pos:line="52" pos:column="25">i<pos:position pos:line="52" pos:column="26"/></name></expr>]<pos:position pos:line="52" pos:column="27"/></index></name><operator pos:line="52" pos:column="27">.<pos:position pos:line="52" pos:column="28"/></operator><name pos:line="52" pos:column="28">sha1<pos:position pos:line="52" pos:column="32"/></name> <operator pos:line="52" pos:column="33">=<pos:position pos:line="52" pos:column="34"/></operator> <call><name pos:line="52" pos:column="35">nth_packed_object_sha1<pos:position pos:line="52" pos:column="57"/></name><argument_list pos:line="52" pos:column="57">(<argument><expr><name pos:line="52" pos:column="58">p<pos:position pos:line="52" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="61">i<pos:position pos:line="52" pos:column="62"/></name></expr></argument>)<pos:position pos:line="52" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="64"/></expr_stmt>
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><operator pos:line="53" pos:column="21">!<pos:position pos:line="53" pos:column="22"/></operator><name><name pos:line="53" pos:column="22">entries<pos:position pos:line="53" pos:column="29"/></name><index pos:line="53" pos:column="29">[<expr><name pos:line="53" pos:column="30">i<pos:position pos:line="53" pos:column="31"/></name></expr>]<pos:position pos:line="53" pos:column="32"/></index></name><operator pos:line="53" pos:column="32">.<pos:position pos:line="53" pos:column="33"/></operator><name pos:line="53" pos:column="33">sha1<pos:position pos:line="53" pos:column="37"/></name></expr>)<pos:position pos:line="53" pos:column="38"/></condition><then pos:line="53" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="25">die<pos:position pos:line="54" pos:column="28"/></name><argument_list pos:line="54" pos:column="28">(<argument><expr><literal type="string" pos:line="54" pos:column="29">"internal error pack-check nth-packed-object"<pos:position pos:line="54" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="76"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="55" pos:column="17">entries<pos:position pos:line="55" pos:column="24"/></name><index pos:line="55" pos:column="24">[<expr><name pos:line="55" pos:column="25">i<pos:position pos:line="55" pos:column="26"/></name></expr>]<pos:position pos:line="55" pos:column="27"/></index></name><operator pos:line="55" pos:column="27">.<pos:position pos:line="55" pos:column="28"/></operator><name pos:line="55" pos:column="28">offset<pos:position pos:line="55" pos:column="34"/></name> <operator pos:line="55" pos:column="35">=<pos:position pos:line="55" pos:column="36"/></operator> <call><name pos:line="55" pos:column="37">nth_packed_object_offset<pos:position pos:line="55" pos:column="61"/></name><argument_list pos:line="55" pos:column="61">(<argument><expr><name pos:line="55" pos:column="62">p<pos:position pos:line="55" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="65">i<pos:position pos:line="55" pos:column="66"/></name></expr></argument>)<pos:position pos:line="55" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="68"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="56" pos:column="17">entries<pos:position pos:line="56" pos:column="24"/></name><index pos:line="56" pos:column="24">[<expr><name pos:line="56" pos:column="25">i<pos:position pos:line="56" pos:column="26"/></name></expr>]<pos:position pos:line="56" pos:column="27"/></index></name><operator pos:line="56" pos:column="27">.<pos:position pos:line="56" pos:column="28"/></operator><name pos:line="56" pos:column="28">nr<pos:position pos:line="56" pos:column="30"/></name> <operator pos:line="56" pos:column="31">=<pos:position pos:line="56" pos:column="32"/></operator> <name pos:line="56" pos:column="33">i<pos:position pos:line="56" pos:column="34"/></name></expr>;<pos:position pos:line="56" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="57" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="58" pos:column="9">qsort<pos:position pos:line="58" pos:column="14"/></name><argument_list pos:line="58" pos:column="14">(<argument><expr><name pos:line="58" pos:column="15">entries<pos:position pos:line="58" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="24">nr_objects<pos:position pos:line="58" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="58" pos:column="36">sizeof<argument_list pos:line="58" pos:column="42">(<argument><expr><operator pos:line="58" pos:column="43">*<pos:position pos:line="58" pos:column="44"/></operator><name pos:line="58" pos:column="44">entries<pos:position pos:line="58" pos:column="51"/></name></expr></argument>)<pos:position pos:line="58" pos:column="52"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="58" pos:column="54">compare_entries<pos:position pos:line="58" pos:column="69"/></name></expr></argument>)<pos:position pos:line="58" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="71"/></expr_stmt>

	<for pos:line="60" pos:column="9">for <control pos:line="60" pos:column="13">(<init><expr><name pos:line="60" pos:column="14">i<pos:position pos:line="60" pos:column="15"/></name> <operator pos:line="60" pos:column="16">=<pos:position pos:line="60" pos:column="17"/></operator> <literal type="number" pos:line="60" pos:column="18">0<pos:position pos:line="60" pos:column="19"/></literal></expr>;<pos:position pos:line="60" pos:column="20"/></init> <condition><expr><name pos:line="60" pos:column="21">i<pos:position pos:line="60" pos:column="22"/></name> <operator pos:line="60" pos:column="23">&lt;<pos:position pos:line="60" pos:column="27"/></operator> <name pos:line="60" pos:column="25">nr_objects<pos:position pos:line="60" pos:column="35"/></name></expr>;<pos:position pos:line="60" pos:column="36"/></condition> <incr><expr><name pos:line="60" pos:column="37">i<pos:position pos:line="60" pos:column="38"/></name><operator pos:line="60" pos:column="38">++<pos:position pos:line="60" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="60" pos:column="41"/></control> <block pos:line="60" pos:column="42">{
		<decl_stmt><decl><type><name pos:line="61" pos:column="17">void<pos:position pos:line="61" pos:column="21"/></name> <modifier pos:line="61" pos:column="22">*<pos:position pos:line="61" pos:column="23"/></modifier></type><name pos:line="61" pos:column="23">data<pos:position pos:line="61" pos:column="27"/></name></decl>;<pos:position pos:line="61" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="62" pos:column="17">enum<pos:position pos:line="62" pos:column="21"/></name> <name pos:line="62" pos:column="22">object_type<pos:position pos:line="62" pos:column="33"/></name></name></type> <name pos:line="62" pos:column="34">type<pos:position pos:line="62" pos:column="38"/></name></decl>;<pos:position pos:line="62" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="63" pos:column="17">unsigned<pos:position pos:line="63" pos:column="25"/></name> <name pos:line="63" pos:column="26">long<pos:position pos:line="63" pos:column="30"/></name></type> <name pos:line="63" pos:column="31">size<pos:position pos:line="63" pos:column="35"/></name></decl>;<pos:position pos:line="63" pos:column="36"/></decl_stmt>

		<if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><name><name pos:line="65" pos:column="21">p<pos:position pos:line="65" pos:column="22"/></name><operator pos:line="65" pos:column="22">-&gt;<pos:position pos:line="65" pos:column="27"/></operator><name pos:line="65" pos:column="24">index_version<pos:position pos:line="65" pos:column="37"/></name></name> <operator pos:line="65" pos:column="38">&gt;<pos:position pos:line="65" pos:column="42"/></operator> <literal type="number" pos:line="65" pos:column="40">1<pos:position pos:line="65" pos:column="41"/></literal></expr>)<pos:position pos:line="65" pos:column="42"/></condition><then pos:line="65" pos:column="42"> <block pos:line="65" pos:column="43">{
			<decl_stmt><decl><type><name pos:line="66" pos:column="25">off_t<pos:position pos:line="66" pos:column="30"/></name></type> <name pos:line="66" pos:column="31">offset<pos:position pos:line="66" pos:column="37"/></name> <init pos:line="66" pos:column="38">= <expr><name><name pos:line="66" pos:column="40">entries<pos:position pos:line="66" pos:column="47"/></name><index pos:line="66" pos:column="47">[<expr><name pos:line="66" pos:column="48">i<pos:position pos:line="66" pos:column="49"/></name></expr>]<pos:position pos:line="66" pos:column="50"/></index></name><operator pos:line="66" pos:column="50">.<pos:position pos:line="66" pos:column="51"/></operator><name pos:line="66" pos:column="51">offset<pos:position pos:line="66" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="66" pos:column="58"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="67" pos:column="25">off_t<pos:position pos:line="67" pos:column="30"/></name></type> <name pos:line="67" pos:column="31">len<pos:position pos:line="67" pos:column="34"/></name> <init pos:line="67" pos:column="35">= <expr><name><name pos:line="67" pos:column="37">entries<pos:position pos:line="67" pos:column="44"/></name><index pos:line="67" pos:column="44">[<expr><name pos:line="67" pos:column="45">i<pos:position pos:line="67" pos:column="46"/></name><operator pos:line="67" pos:column="46">+<pos:position pos:line="67" pos:column="47"/></operator><literal type="number" pos:line="67" pos:column="47">1<pos:position pos:line="67" pos:column="48"/></literal></expr>]<pos:position pos:line="67" pos:column="49"/></index></name><operator pos:line="67" pos:column="49">.<pos:position pos:line="67" pos:column="50"/></operator><name pos:line="67" pos:column="50">offset<pos:position pos:line="67" pos:column="56"/></name> <operator pos:line="67" pos:column="57">-<pos:position pos:line="67" pos:column="58"/></operator> <name pos:line="67" pos:column="59">offset<pos:position pos:line="67" pos:column="65"/></name></expr></init></decl>;<pos:position pos:line="67" pos:column="66"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="68" pos:column="25">unsigned<pos:position pos:line="68" pos:column="33"/></name> <name pos:line="68" pos:column="34">int<pos:position pos:line="68" pos:column="37"/></name></type> <name pos:line="68" pos:column="38">nr<pos:position pos:line="68" pos:column="40"/></name> <init pos:line="68" pos:column="41">= <expr><name><name pos:line="68" pos:column="43">entries<pos:position pos:line="68" pos:column="50"/></name><index pos:line="68" pos:column="50">[<expr><name pos:line="68" pos:column="51">i<pos:position pos:line="68" pos:column="52"/></name></expr>]<pos:position pos:line="68" pos:column="53"/></index></name><operator pos:line="68" pos:column="53">.<pos:position pos:line="68" pos:column="54"/></operator><name pos:line="68" pos:column="54">nr<pos:position pos:line="68" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="68" pos:column="57"/></decl_stmt>
			<if pos:line="69" pos:column="25">if <condition pos:line="69" pos:column="28">(<expr><call><name pos:line="69" pos:column="29">check_pack_crc<pos:position pos:line="69" pos:column="43"/></name><argument_list pos:line="69" pos:column="43">(<argument><expr><name pos:line="69" pos:column="44">p<pos:position pos:line="69" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="47">w_curs<pos:position pos:line="69" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="55">offset<pos:position pos:line="69" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="63">len<pos:position pos:line="69" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="68">nr<pos:position pos:line="69" pos:column="70"/></name></expr></argument>)<pos:position pos:line="69" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="72"/></condition><then pos:line="69" pos:column="72">
				<block type="pseudo"><expr_stmt><expr><name pos:line="70" pos:column="33">err<pos:position pos:line="70" pos:column="36"/></name> <operator pos:line="70" pos:column="37">=<pos:position pos:line="70" pos:column="38"/></operator> <call><name pos:line="70" pos:column="39">error<pos:position pos:line="70" pos:column="44"/></name><argument_list pos:line="70" pos:column="44">(<argument><expr><literal type="string" pos:line="70" pos:column="45">"index CRC mismatch for object %s "<pos:position pos:line="70" pos:column="80"/></literal>
					    <literal type="string" pos:line="71" pos:column="45">"from %s at offset %"<pos:position pos:line="71" pos:column="66"/></literal><name pos:line="71" pos:column="66">PRIuMAX<pos:position pos:line="71" pos:column="73"/></name><literal type="string" pos:line="71" pos:column="73">""<pos:position pos:line="71" pos:column="75"/></literal></expr></argument>,
					    <argument><expr><call><name pos:line="72" pos:column="45">sha1_to_hex<pos:position pos:line="72" pos:column="56"/></name><argument_list pos:line="72" pos:column="56">(<argument><expr><name><name pos:line="72" pos:column="57">entries<pos:position pos:line="72" pos:column="64"/></name><index pos:line="72" pos:column="64">[<expr><name pos:line="72" pos:column="65">i<pos:position pos:line="72" pos:column="66"/></name></expr>]<pos:position pos:line="72" pos:column="67"/></index></name><operator pos:line="72" pos:column="67">.<pos:position pos:line="72" pos:column="68"/></operator><name pos:line="72" pos:column="68">sha1<pos:position pos:line="72" pos:column="72"/></name></expr></argument>)<pos:position pos:line="72" pos:column="73"/></argument_list></call></expr></argument>,
					    <argument><expr><name><name pos:line="73" pos:column="45">p<pos:position pos:line="73" pos:column="46"/></name><operator pos:line="73" pos:column="46">-&gt;<pos:position pos:line="73" pos:column="51"/></operator><name pos:line="73" pos:column="48">pack_name<pos:position pos:line="73" pos:column="57"/></name></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="59">(<pos:position pos:line="73" pos:column="60"/></operator><name pos:line="73" pos:column="60">uintmax_t<pos:position pos:line="73" pos:column="69"/></name><operator pos:line="73" pos:column="69">)<pos:position pos:line="73" pos:column="70"/></operator><name pos:line="73" pos:column="70">offset<pos:position pos:line="73" pos:column="76"/></name></expr></argument>)<pos:position pos:line="73" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="78"/></expr_stmt></block></then></if>
		}<pos:position pos:line="74" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="75" pos:column="17">data<pos:position pos:line="75" pos:column="21"/></name> <operator pos:line="75" pos:column="22">=<pos:position pos:line="75" pos:column="23"/></operator> <call><name pos:line="75" pos:column="24">unpack_entry<pos:position pos:line="75" pos:column="36"/></name><argument_list pos:line="75" pos:column="36">(<argument><expr><name pos:line="75" pos:column="37">p<pos:position pos:line="75" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="40">entries<pos:position pos:line="75" pos:column="47"/></name><index pos:line="75" pos:column="47">[<expr><name pos:line="75" pos:column="48">i<pos:position pos:line="75" pos:column="49"/></name></expr>]<pos:position pos:line="75" pos:column="50"/></index></name><operator pos:line="75" pos:column="50">.<pos:position pos:line="75" pos:column="51"/></operator><name pos:line="75" pos:column="51">offset<pos:position pos:line="75" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="59">&amp;<pos:position pos:line="75" pos:column="64"/></operator><name pos:line="75" pos:column="60">type<pos:position pos:line="75" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="66">&amp;<pos:position pos:line="75" pos:column="71"/></operator><name pos:line="75" pos:column="67">size<pos:position pos:line="75" pos:column="71"/></name></expr></argument>)<pos:position pos:line="75" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="73"/></expr_stmt>
		<if pos:line="76" pos:column="17">if <condition pos:line="76" pos:column="20">(<expr><operator pos:line="76" pos:column="21">!<pos:position pos:line="76" pos:column="22"/></operator><name pos:line="76" pos:column="22">data<pos:position pos:line="76" pos:column="26"/></name></expr>)<pos:position pos:line="76" pos:column="27"/></condition><then pos:line="76" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><name pos:line="77" pos:column="25">err<pos:position pos:line="77" pos:column="28"/></name> <operator pos:line="77" pos:column="29">=<pos:position pos:line="77" pos:column="30"/></operator> <call><name pos:line="77" pos:column="31">error<pos:position pos:line="77" pos:column="36"/></name><argument_list pos:line="77" pos:column="36">(<argument><expr><literal type="string" pos:line="77" pos:column="37">"cannot unpack %s from %s at offset %"<pos:position pos:line="77" pos:column="75"/></literal><name pos:line="77" pos:column="75">PRIuMAX<pos:position pos:line="77" pos:column="82"/></name><literal type="string" pos:line="77" pos:column="82">""<pos:position pos:line="77" pos:column="84"/></literal></expr></argument>,
				    <argument><expr><call><name pos:line="78" pos:column="37">sha1_to_hex<pos:position pos:line="78" pos:column="48"/></name><argument_list pos:line="78" pos:column="48">(<argument><expr><name><name pos:line="78" pos:column="49">entries<pos:position pos:line="78" pos:column="56"/></name><index pos:line="78" pos:column="56">[<expr><name pos:line="78" pos:column="57">i<pos:position pos:line="78" pos:column="58"/></name></expr>]<pos:position pos:line="78" pos:column="59"/></index></name><operator pos:line="78" pos:column="59">.<pos:position pos:line="78" pos:column="60"/></operator><name pos:line="78" pos:column="60">sha1<pos:position pos:line="78" pos:column="64"/></name></expr></argument>)<pos:position pos:line="78" pos:column="65"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="67">p<pos:position pos:line="78" pos:column="68"/></name><operator pos:line="78" pos:column="68">-&gt;<pos:position pos:line="78" pos:column="73"/></operator><name pos:line="78" pos:column="70">pack_name<pos:position pos:line="78" pos:column="79"/></name></name></expr></argument>,
				    <argument><expr><operator pos:line="79" pos:column="37">(<pos:position pos:line="79" pos:column="38"/></operator><name pos:line="79" pos:column="38">uintmax_t<pos:position pos:line="79" pos:column="47"/></name><operator pos:line="79" pos:column="47">)<pos:position pos:line="79" pos:column="48"/></operator><name><name pos:line="79" pos:column="48">entries<pos:position pos:line="79" pos:column="55"/></name><index pos:line="79" pos:column="55">[<expr><name pos:line="79" pos:column="56">i<pos:position pos:line="79" pos:column="57"/></name></expr>]<pos:position pos:line="79" pos:column="58"/></index></name><operator pos:line="79" pos:column="58">.<pos:position pos:line="79" pos:column="59"/></operator><name pos:line="79" pos:column="59">offset<pos:position pos:line="79" pos:column="65"/></name></expr></argument>)<pos:position pos:line="79" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="67"/></expr_stmt></block></then>
		<elseif pos:line="80" pos:column="17">else <if pos:line="80" pos:column="22">if <condition pos:line="80" pos:column="25">(<expr><call><name pos:line="80" pos:column="26">check_sha1_signature<pos:position pos:line="80" pos:column="46"/></name><argument_list pos:line="80" pos:column="46">(<argument><expr><name><name pos:line="80" pos:column="47">entries<pos:position pos:line="80" pos:column="54"/></name><index pos:line="80" pos:column="54">[<expr><name pos:line="80" pos:column="55">i<pos:position pos:line="80" pos:column="56"/></name></expr>]<pos:position pos:line="80" pos:column="57"/></index></name><operator pos:line="80" pos:column="57">.<pos:position pos:line="80" pos:column="58"/></operator><name pos:line="80" pos:column="58">sha1<pos:position pos:line="80" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="64">data<pos:position pos:line="80" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="70">size<pos:position pos:line="80" pos:column="74"/></name></expr></argument>, <argument><expr><name><typename pos:line="80" pos:column="76">typename<pos:position pos:line="80" pos:column="84"/></typename></name><operator pos:line="80" pos:column="84">(<pos:position pos:line="80" pos:column="85"/></operator><name pos:line="80" pos:column="85">type<pos:position pos:line="80" pos:column="89"/></name><operator pos:line="80" pos:column="89">)<pos:position pos:line="80" pos:column="90"/></operator></expr></argument>)<pos:position pos:line="80" pos:column="91"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="92"/></condition><then pos:line="80" pos:column="92">
			<block type="pseudo"><expr_stmt><expr><name pos:line="81" pos:column="25">err<pos:position pos:line="81" pos:column="28"/></name> <operator pos:line="81" pos:column="29">=<pos:position pos:line="81" pos:column="30"/></operator> <call><name pos:line="81" pos:column="31">error<pos:position pos:line="81" pos:column="36"/></name><argument_list pos:line="81" pos:column="36">(<argument><expr><literal type="string" pos:line="81" pos:column="37">"packed %s from %s is corrupt"<pos:position pos:line="81" pos:column="67"/></literal></expr></argument>,
				    <argument><expr><call><name pos:line="82" pos:column="37">sha1_to_hex<pos:position pos:line="82" pos:column="48"/></name><argument_list pos:line="82" pos:column="48">(<argument><expr><name><name pos:line="82" pos:column="49">entries<pos:position pos:line="82" pos:column="56"/></name><index pos:line="82" pos:column="56">[<expr><name pos:line="82" pos:column="57">i<pos:position pos:line="82" pos:column="58"/></name></expr>]<pos:position pos:line="82" pos:column="59"/></index></name><operator pos:line="82" pos:column="59">.<pos:position pos:line="82" pos:column="60"/></operator><name pos:line="82" pos:column="60">sha1<pos:position pos:line="82" pos:column="64"/></name></expr></argument>)<pos:position pos:line="82" pos:column="65"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="67">p<pos:position pos:line="82" pos:column="68"/></name><operator pos:line="82" pos:column="68">-&gt;<pos:position pos:line="82" pos:column="73"/></operator><name pos:line="82" pos:column="70">pack_name<pos:position pos:line="82" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="81"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="83" pos:column="17">else <if pos:line="83" pos:column="22">if <condition pos:line="83" pos:column="25">(<expr><name pos:line="83" pos:column="26">fn<pos:position pos:line="83" pos:column="28"/></name></expr>)<pos:position pos:line="83" pos:column="29"/></condition><then pos:line="83" pos:column="29"> <block pos:line="83" pos:column="30">{
			<decl_stmt><decl><type><name pos:line="84" pos:column="25">int<pos:position pos:line="84" pos:column="28"/></name></type> <name pos:line="84" pos:column="29">eaten<pos:position pos:line="84" pos:column="34"/></name> <init pos:line="84" pos:column="35">= <expr><literal type="number" pos:line="84" pos:column="37">0<pos:position pos:line="84" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="84" pos:column="39"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="85" pos:column="25">fn<pos:position pos:line="85" pos:column="27"/></name><argument_list pos:line="85" pos:column="27">(<argument><expr><name><name pos:line="85" pos:column="28">entries<pos:position pos:line="85" pos:column="35"/></name><index pos:line="85" pos:column="35">[<expr><name pos:line="85" pos:column="36">i<pos:position pos:line="85" pos:column="37"/></name></expr>]<pos:position pos:line="85" pos:column="38"/></index></name><operator pos:line="85" pos:column="38">.<pos:position pos:line="85" pos:column="39"/></operator><name pos:line="85" pos:column="39">sha1<pos:position pos:line="85" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="45">type<pos:position pos:line="85" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="51">size<pos:position pos:line="85" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="57">data<pos:position pos:line="85" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="85" pos:column="63">&amp;<pos:position pos:line="85" pos:column="68"/></operator><name pos:line="85" pos:column="64">eaten<pos:position pos:line="85" pos:column="69"/></name></expr></argument>)<pos:position pos:line="85" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="71"/></expr_stmt>
			<if pos:line="86" pos:column="25">if <condition pos:line="86" pos:column="28">(<expr><name pos:line="86" pos:column="29">eaten<pos:position pos:line="86" pos:column="34"/></name></expr>)<pos:position pos:line="86" pos:column="35"/></condition><then pos:line="86" pos:column="35">
				<block type="pseudo"><expr_stmt><expr><name pos:line="87" pos:column="33">data<pos:position pos:line="87" pos:column="37"/></name> <operator pos:line="87" pos:column="38">=<pos:position pos:line="87" pos:column="39"/></operator> <name pos:line="87" pos:column="40">NULL<pos:position pos:line="87" pos:column="44"/></name></expr>;<pos:position pos:line="87" pos:column="45"/></expr_stmt></block></then></if>
		}<pos:position pos:line="88" pos:column="18"/></block></then></if></elseif></if>
		<if pos:line="89" pos:column="17">if <condition pos:line="89" pos:column="20">(<expr><operator pos:line="89" pos:column="21">(<pos:position pos:line="89" pos:column="22"/></operator><operator pos:line="89" pos:column="22">(<pos:position pos:line="89" pos:column="23"/></operator><name pos:line="89" pos:column="23">base_count<pos:position pos:line="89" pos:column="33"/></name> <operator pos:line="89" pos:column="34">+<pos:position pos:line="89" pos:column="35"/></operator> <name pos:line="89" pos:column="36">i<pos:position pos:line="89" pos:column="37"/></name><operator pos:line="89" pos:column="37">)<pos:position pos:line="89" pos:column="38"/></operator> <operator pos:line="89" pos:column="39">&amp;<pos:position pos:line="89" pos:column="44"/></operator> <literal type="number" pos:line="89" pos:column="41">1023<pos:position pos:line="89" pos:column="45"/></literal><operator pos:line="89" pos:column="45">)<pos:position pos:line="89" pos:column="46"/></operator> <operator pos:line="89" pos:column="47">==<pos:position pos:line="89" pos:column="49"/></operator> <literal type="number" pos:line="89" pos:column="50">0<pos:position pos:line="89" pos:column="51"/></literal></expr>)<pos:position pos:line="89" pos:column="52"/></condition><then pos:line="89" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="90" pos:column="25">display_progress<pos:position pos:line="90" pos:column="41"/></name><argument_list pos:line="90" pos:column="41">(<argument><expr><name pos:line="90" pos:column="42">progress<pos:position pos:line="90" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="52">base_count<pos:position pos:line="90" pos:column="62"/></name> <operator pos:line="90" pos:column="63">+<pos:position pos:line="90" pos:column="64"/></operator> <name pos:line="90" pos:column="65">i<pos:position pos:line="90" pos:column="66"/></name></expr></argument>)<pos:position pos:line="90" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="68"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="91" pos:column="17">free<pos:position pos:line="91" pos:column="21"/></name><argument_list pos:line="91" pos:column="21">(<argument><expr><name pos:line="91" pos:column="22">data<pos:position pos:line="91" pos:column="26"/></name></expr></argument>)<pos:position pos:line="91" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="28"/></expr_stmt>

	}<pos:position pos:line="93" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="94" pos:column="9">display_progress<pos:position pos:line="94" pos:column="25"/></name><argument_list pos:line="94" pos:column="25">(<argument><expr><name pos:line="94" pos:column="26">progress<pos:position pos:line="94" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="36">base_count<pos:position pos:line="94" pos:column="46"/></name> <operator pos:line="94" pos:column="47">+<pos:position pos:line="94" pos:column="48"/></operator> <name pos:line="94" pos:column="49">i<pos:position pos:line="94" pos:column="50"/></name></expr></argument>)<pos:position pos:line="94" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="95" pos:column="9">free<pos:position pos:line="95" pos:column="13"/></name><argument_list pos:line="95" pos:column="13">(<argument><expr><name pos:line="95" pos:column="14">entries<pos:position pos:line="95" pos:column="21"/></name></expr></argument>)<pos:position pos:line="95" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="23"/></expr_stmt>

	<return pos:line="97" pos:column="9">return <expr><name pos:line="97" pos:column="16">err<pos:position pos:line="97" pos:column="19"/></name></expr>;<pos:position pos:line="97" pos:column="20"/></return>
}<pos:position pos:line="98" pos:column="2"/></block></function></unit>
