<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_372_git-2.13.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">ce_smudge_racily_clean_entry<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name><name pos:line="1" pos:column="42">struct<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">cache_entry<pos:position pos:line="1" pos:column="60"/></name></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">ce<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/*
	 * The only thing we care about in this function is to smudge the
	 * falsely clean entry due to touch-update-touch race, so we leave
	 * everything else as they are.  We are called for entries whose
	 * ce_stat_data.sd_mtime match the index file mtime.
	 *
	 * Note that this actually does not do much for gitlinks, for
	 * which ce_match_stat_basic() always goes to the actual
	 * contents.  The caller checks with is_racy_timestamp() which
	 * always says "no" for gitlinks, so we are not called for them ;-)
	 */</comment>
	<decl_stmt><decl><type><name><name pos:line="14" pos:column="9">struct<pos:position pos:line="14" pos:column="15"/></name> <name pos:line="14" pos:column="16">stat<pos:position pos:line="14" pos:column="20"/></name></name></type> <name pos:line="14" pos:column="21">st<pos:position pos:line="14" pos:column="23"/></name></decl>;<pos:position pos:line="14" pos:column="24"/></decl_stmt>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><call><name pos:line="16" pos:column="13">lstat<pos:position pos:line="16" pos:column="18"/></name><argument_list pos:line="16" pos:column="18">(<argument><expr><name><name pos:line="16" pos:column="19">ce<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">-&gt;<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="23">name<pos:position pos:line="16" pos:column="27"/></name></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="29">&amp;<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="30">st<pos:position pos:line="16" pos:column="32"/></name></expr></argument>)<pos:position pos:line="16" pos:column="33"/></argument_list></call> <operator pos:line="16" pos:column="34">&lt;<pos:position pos:line="16" pos:column="38"/></operator> <literal type="number" pos:line="16" pos:column="36">0<pos:position pos:line="16" pos:column="37"/></literal></expr>)<pos:position pos:line="16" pos:column="38"/></condition><then pos:line="16" pos:column="38">
		<block type="pseudo"><return pos:line="17" pos:column="17">return;<pos:position pos:line="17" pos:column="24"/></return></block></then></if>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><call><name pos:line="18" pos:column="13">ce_match_stat_basic<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">ce<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="37">&amp;<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="38">st<pos:position pos:line="18" pos:column="40"/></name></expr></argument>)<pos:position pos:line="18" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="42"/></condition><then pos:line="18" pos:column="42">
		<block type="pseudo"><return pos:line="19" pos:column="17">return;<pos:position pos:line="19" pos:column="24"/></return></block></then></if>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">ce_modified_check_fs<pos:position pos:line="20" pos:column="33"/></name><argument_list pos:line="20" pos:column="33">(<argument><expr><name pos:line="20" pos:column="34">ce<pos:position pos:line="20" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="38">&amp;<pos:position pos:line="20" pos:column="43"/></operator><name pos:line="20" pos:column="39">st<pos:position pos:line="20" pos:column="41"/></name></expr></argument>)<pos:position pos:line="20" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="43"/></condition><then pos:line="20" pos:column="43"> <block pos:line="20" pos:column="44">{
		<comment type="block" pos:line="21" pos:column="17">/* This is "racily clean"; smudge it.  Note that this
		 * is a tricky code.  At first glance, it may appear
		 * that it can break with this sequence:
		 *
		 * $ echo xyzzy &gt;frotz
		 * $ git-update-index --add frotz
		 * $ : &gt;frotz
		 * $ sleep 3
		 * $ echo filfre &gt;nitfol
		 * $ git-update-index --add nitfol
		 *
		 * but it does not.  When the second update-index runs,
		 * it notices that the entry "frotz" has the same timestamp
		 * as index, and if we were to smudge it by resetting its
		 * size to zero here, then the object name recorded
		 * in index is the 6-byte file but the cached stat information
		 * becomes zero --- which would then match what we would
		 * obtain from the filesystem next time we stat("frotz").
		 *
		 * However, the second update-index, before calling
		 * this function, notices that the cached size is 6
		 * bytes and what is on the filesystem is an empty
		 * file, and never calls us, so the cached size information
		 * for "frotz" stays 6 which does not match the filesystem.
		 */</comment>
		<expr_stmt><expr><name><name pos:line="46" pos:column="17">ce<pos:position pos:line="46" pos:column="19"/></name><operator pos:line="46" pos:column="19">-&gt;<pos:position pos:line="46" pos:column="24"/></operator><name pos:line="46" pos:column="21">ce_stat_data<pos:position pos:line="46" pos:column="33"/></name><operator pos:line="46" pos:column="33">.<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="34">sd_size<pos:position pos:line="46" pos:column="41"/></name></name> <operator pos:line="46" pos:column="42">=<pos:position pos:line="46" pos:column="43"/></operator> <literal type="number" pos:line="46" pos:column="44">0<pos:position pos:line="46" pos:column="45"/></literal></expr>;<pos:position pos:line="46" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="47" pos:column="10"/></block></then></if>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
