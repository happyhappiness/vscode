<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3869_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">pager_command_config<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">var<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="50">const<pos:position pos:line="1" pos:column="55"/></specifier> <name pos:line="1" pos:column="56">char<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">value<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="69">void<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">vdata<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="81"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">pager_command_config_data<pos:position pos:line="3" pos:column="41"/></name></name> <modifier pos:line="3" pos:column="42">*<pos:position pos:line="3" pos:column="43"/></modifier></type><name pos:line="3" pos:column="43">data<pos:position pos:line="3" pos:column="47"/></name> <init pos:line="3" pos:column="48">= <expr><name pos:line="3" pos:column="50">vdata<pos:position pos:line="3" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="56"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">cmd<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">skip_prefix<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><name pos:line="6" pos:column="25">var<pos:position pos:line="6" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="30">"pager."<pos:position pos:line="6" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="6" pos:column="40">&amp;<pos:position pos:line="6" pos:column="45"/></operator><name pos:line="6" pos:column="41">cmd<pos:position pos:line="6" pos:column="44"/></name></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call> <operator pos:line="6" pos:column="46">&amp;&amp;<pos:position pos:line="6" pos:column="56"/></operator> <operator pos:line="6" pos:column="49">!<pos:position pos:line="6" pos:column="50"/></operator><call><name pos:line="6" pos:column="50">strcmp<pos:position pos:line="6" pos:column="56"/></name><argument_list pos:line="6" pos:column="56">(<argument><expr><name pos:line="6" pos:column="57">cmd<pos:position pos:line="6" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="62">data<pos:position pos:line="6" pos:column="66"/></name><operator pos:line="6" pos:column="66">-&gt;<pos:position pos:line="6" pos:column="71"/></operator><name pos:line="6" pos:column="68">cmd<pos:position pos:line="6" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="73"/></condition><then pos:line="6" pos:column="73"> <block pos:line="6" pos:column="74">{
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">int<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">b<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><call><name pos:line="7" pos:column="25">git_config_maybe_bool<pos:position pos:line="7" pos:column="46"/></name><argument_list pos:line="7" pos:column="46">(<argument><expr><name pos:line="7" pos:column="47">var<pos:position pos:line="7" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="52">value<pos:position pos:line="7" pos:column="57"/></name></expr></argument>)<pos:position pos:line="7" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="59"/></decl_stmt>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><name pos:line="8" pos:column="21">b<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">&gt;=<pos:position pos:line="8" pos:column="28"/></operator> <literal type="number" pos:line="8" pos:column="26">0<pos:position pos:line="8" pos:column="27"/></literal></expr>)<pos:position pos:line="8" pos:column="28"/></condition><then pos:line="8" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="9" pos:column="25">data<pos:position pos:line="9" pos:column="29"/></name><operator pos:line="9" pos:column="29">-&gt;<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="31">want<pos:position pos:line="9" pos:column="35"/></name></name> <operator pos:line="9" pos:column="36">=<pos:position pos:line="9" pos:column="37"/></operator> <name pos:line="9" pos:column="38">b<pos:position pos:line="9" pos:column="39"/></name></expr>;<pos:position pos:line="9" pos:column="40"/></expr_stmt></block></then>
		<else pos:line="10" pos:column="17">else <block pos:line="10" pos:column="22">{
			<expr_stmt><expr><name><name pos:line="11" pos:column="25">data<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">-&gt;<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="31">want<pos:position pos:line="11" pos:column="35"/></name></name> <operator pos:line="11" pos:column="36">=<pos:position pos:line="11" pos:column="37"/></operator> <literal type="number" pos:line="11" pos:column="38">1<pos:position pos:line="11" pos:column="39"/></literal></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="12" pos:column="25">data<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">-&gt;<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="31">value<pos:position pos:line="12" pos:column="36"/></name></name> <operator pos:line="12" pos:column="37">=<pos:position pos:line="12" pos:column="38"/></operator> <call><name pos:line="12" pos:column="39">xstrdup<pos:position pos:line="12" pos:column="46"/></name><argument_list pos:line="12" pos:column="46">(<argument><expr><name pos:line="12" pos:column="47">value<pos:position pos:line="12" pos:column="52"/></name></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="54"/></expr_stmt>
		}<pos:position pos:line="13" pos:column="18"/></block></else></if>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<return pos:line="16" pos:column="9">return <expr><literal type="number" pos:line="16" pos:column="16">0<pos:position pos:line="16" pos:column="17"/></literal></expr>;<pos:position pos:line="16" pos:column="18"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
