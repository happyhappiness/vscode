<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1194_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">diffcore_break<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">int<pos:position pos:line="1" pos:column="24"/></name></type> <name pos:line="1" pos:column="25">break_score<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">diff_queue_struct<pos:position pos:line="3" pos:column="33"/></name></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">q<pos:position pos:line="3" pos:column="36"/></name> <init pos:line="3" pos:column="37">= <expr><operator pos:line="3" pos:column="39">&amp;<pos:position pos:line="3" pos:column="44"/></operator><name pos:line="3" pos:column="40">diff_queued_diff<pos:position pos:line="3" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="57"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">diff_queue_struct<pos:position pos:line="4" pos:column="33"/></name></name></type> <name pos:line="4" pos:column="34">outq<pos:position pos:line="4" pos:column="38"/></name></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/* When the filepair has this much edit (insert and delete),
	 * it is first considered to be a rewrite and broken into a
	 * create and delete filepair.  This is to help breaking a
	 * file that had too much new stuff added, possibly from
	 * moving contents from another file, so that rename/copy can
	 * match it with the other file.
	 *
	 * int break_score; we reuse incoming parameter for this.
	 */</comment>

	<comment type="block" pos:line="16" pos:column="9">/* After a pair is broken according to break_score and
	 * subjected to rename/copy, both of them may survive intact,
	 * due to lack of suitable rename/copy peer.  Or, the caller
	 * may be calling us without using rename/copy.  When that
	 * happens, we merge the broken pieces back into one
	 * modification together if the pair did not have more than
	 * this much delete.  For this computation, we do not take
	 * insert into account at all.  If you start from a 100-line
	 * file and delete 97 lines of it, it does not matter if you
	 * add 27 lines to it to make a new 30-line file or if you add
	 * 997 lines to it to make a 1000-line file.  Either way what
	 * you did was a rewrite of 97%.  On the other hand, if you
	 * delete 3 lines, keeping 97 lines intact, it does not matter
	 * if you add 3 lines to it to make a new 100-line file or if
	 * you add 903 lines to it to make a new 1000-line file.
	 * Either way you did a lot of additions and not a rewrite.
	 * This merge happens to catch the latter case.  A merge_score
	 * of 80% would be a good default value (a broken pair that
	 * has score lower than merge_score will be merged back
	 * together).
	 */</comment>
	<decl_stmt><decl><type><name pos:line="37" pos:column="9">int<pos:position pos:line="37" pos:column="12"/></name></type> <name pos:line="37" pos:column="13">merge_score<pos:position pos:line="37" pos:column="24"/></name></decl>;<pos:position pos:line="37" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="38" pos:column="9">int<pos:position pos:line="38" pos:column="12"/></name></type> <name pos:line="38" pos:column="13">i<pos:position pos:line="38" pos:column="14"/></name></decl>;<pos:position pos:line="38" pos:column="15"/></decl_stmt>

	<comment type="block" pos:line="40" pos:column="9">/* See comment on DEFAULT_BREAK_SCORE and
	 * DEFAULT_MERGE_SCORE in diffcore.h
	 */</comment>
	<expr_stmt><expr><name pos:line="43" pos:column="9">merge_score<pos:position pos:line="43" pos:column="20"/></name> <operator pos:line="43" pos:column="21">=<pos:position pos:line="43" pos:column="22"/></operator> <operator pos:line="43" pos:column="23">(<pos:position pos:line="43" pos:column="24"/></operator><name pos:line="43" pos:column="24">break_score<pos:position pos:line="43" pos:column="35"/></name> <operator pos:line="43" pos:column="36">&gt;&gt;<pos:position pos:line="43" pos:column="41"/></operator> <literal type="number" pos:line="43" pos:column="39">16<pos:position pos:line="43" pos:column="41"/></literal><operator pos:line="43" pos:column="41">)<pos:position pos:line="43" pos:column="42"/></operator> <operator pos:line="43" pos:column="43">&amp;<pos:position pos:line="43" pos:column="48"/></operator> <literal type="number" pos:line="43" pos:column="45">0xFFFF<pos:position pos:line="43" pos:column="51"/></literal></expr>;<pos:position pos:line="43" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><name pos:line="44" pos:column="9">break_score<pos:position pos:line="44" pos:column="20"/></name> <operator pos:line="44" pos:column="21">=<pos:position pos:line="44" pos:column="22"/></operator> <operator pos:line="44" pos:column="23">(<pos:position pos:line="44" pos:column="24"/></operator><name pos:line="44" pos:column="24">break_score<pos:position pos:line="44" pos:column="35"/></name> <operator pos:line="44" pos:column="36">&amp;<pos:position pos:line="44" pos:column="41"/></operator> <literal type="number" pos:line="44" pos:column="38">0xFFFF<pos:position pos:line="44" pos:column="44"/></literal><operator pos:line="44" pos:column="44">)<pos:position pos:line="44" pos:column="45"/></operator></expr>;<pos:position pos:line="44" pos:column="46"/></expr_stmt>

	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><operator pos:line="46" pos:column="13">!<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="14">break_score<pos:position pos:line="46" pos:column="25"/></name></expr>)<pos:position pos:line="46" pos:column="26"/></condition><then pos:line="46" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="17">break_score<pos:position pos:line="47" pos:column="28"/></name> <operator pos:line="47" pos:column="29">=<pos:position pos:line="47" pos:column="30"/></operator> <name pos:line="47" pos:column="31">DEFAULT_BREAK_SCORE<pos:position pos:line="47" pos:column="50"/></name></expr>;<pos:position pos:line="47" pos:column="51"/></expr_stmt></block></then></if>
	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><operator pos:line="48" pos:column="13">!<pos:position pos:line="48" pos:column="14"/></operator><name pos:line="48" pos:column="14">merge_score<pos:position pos:line="48" pos:column="25"/></name></expr>)<pos:position pos:line="48" pos:column="26"/></condition><then pos:line="48" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="17">merge_score<pos:position pos:line="49" pos:column="28"/></name> <operator pos:line="49" pos:column="29">=<pos:position pos:line="49" pos:column="30"/></operator> <name pos:line="49" pos:column="31">DEFAULT_MERGE_SCORE<pos:position pos:line="49" pos:column="50"/></name></expr>;<pos:position pos:line="49" pos:column="51"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="51" pos:column="9">DIFF_QUEUE_CLEAR<pos:position pos:line="51" pos:column="25"/></name><argument_list pos:line="51" pos:column="25">(<argument><expr><operator pos:line="51" pos:column="26">&amp;<pos:position pos:line="51" pos:column="31"/></operator><name pos:line="51" pos:column="27">outq<pos:position pos:line="51" pos:column="31"/></name></expr></argument>)<pos:position pos:line="51" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="33"/></expr_stmt>

	<for pos:line="53" pos:column="9">for <control pos:line="53" pos:column="13">(<init><expr><name pos:line="53" pos:column="14">i<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">=<pos:position pos:line="53" pos:column="17"/></operator> <literal type="number" pos:line="53" pos:column="18">0<pos:position pos:line="53" pos:column="19"/></literal></expr>;<pos:position pos:line="53" pos:column="20"/></init> <condition><expr><name pos:line="53" pos:column="21">i<pos:position pos:line="53" pos:column="22"/></name> <operator pos:line="53" pos:column="23">&lt;<pos:position pos:line="53" pos:column="27"/></operator> <name><name pos:line="53" pos:column="25">q<pos:position pos:line="53" pos:column="26"/></name><operator pos:line="53" pos:column="26">-&gt;<pos:position pos:line="53" pos:column="31"/></operator><name pos:line="53" pos:column="28">nr<pos:position pos:line="53" pos:column="30"/></name></name></expr>;<pos:position pos:line="53" pos:column="31"/></condition> <incr><expr><name pos:line="53" pos:column="32">i<pos:position pos:line="53" pos:column="33"/></name><operator pos:line="53" pos:column="33">++<pos:position pos:line="53" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="53" pos:column="36"/></control> <block pos:line="53" pos:column="37">{
		<decl_stmt><decl><type><name><name pos:line="54" pos:column="17">struct<pos:position pos:line="54" pos:column="23"/></name> <name pos:line="54" pos:column="24">diff_filepair<pos:position pos:line="54" pos:column="37"/></name></name> <modifier pos:line="54" pos:column="38">*<pos:position pos:line="54" pos:column="39"/></modifier></type><name pos:line="54" pos:column="39">p<pos:position pos:line="54" pos:column="40"/></name> <init pos:line="54" pos:column="41">= <expr><name><name pos:line="54" pos:column="43">q<pos:position pos:line="54" pos:column="44"/></name><operator pos:line="54" pos:column="44">-&gt;<pos:position pos:line="54" pos:column="49"/></operator><name pos:line="54" pos:column="46">queue<pos:position pos:line="54" pos:column="51"/></name><index pos:line="54" pos:column="51">[<expr><name pos:line="54" pos:column="52">i<pos:position pos:line="54" pos:column="53"/></name></expr>]<pos:position pos:line="54" pos:column="54"/></index></name></expr></init></decl>;<pos:position pos:line="54" pos:column="55"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="55" pos:column="17">int<pos:position pos:line="55" pos:column="20"/></name></type> <name pos:line="55" pos:column="21">score<pos:position pos:line="55" pos:column="26"/></name></decl>;<pos:position pos:line="55" pos:column="27"/></decl_stmt>

		<comment type="block" pos:line="57" pos:column="17">/*
		 * We deal only with in-place edit of blobs.
		 * We do not break anything else.
		 */</comment>
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><call><name pos:line="61" pos:column="21">DIFF_FILE_VALID<pos:position pos:line="61" pos:column="36"/></name><argument_list pos:line="61" pos:column="36">(<argument><expr><name><name pos:line="61" pos:column="37">p<pos:position pos:line="61" pos:column="38"/></name><operator pos:line="61" pos:column="38">-&gt;<pos:position pos:line="61" pos:column="43"/></operator><name pos:line="61" pos:column="40">one<pos:position pos:line="61" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="44"/></argument_list></call> <operator pos:line="61" pos:column="45">&amp;&amp;<pos:position pos:line="61" pos:column="55"/></operator> <call><name pos:line="61" pos:column="48">DIFF_FILE_VALID<pos:position pos:line="61" pos:column="63"/></name><argument_list pos:line="61" pos:column="63">(<argument><expr><name><name pos:line="61" pos:column="64">p<pos:position pos:line="61" pos:column="65"/></name><operator pos:line="61" pos:column="65">-&gt;<pos:position pos:line="61" pos:column="70"/></operator><name pos:line="61" pos:column="67">two<pos:position pos:line="61" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="71"/></argument_list></call> <operator pos:line="61" pos:column="72">&amp;&amp;<pos:position pos:line="61" pos:column="82"/></operator>
		    <call><name pos:line="62" pos:column="21">object_type<pos:position pos:line="62" pos:column="32"/></name><argument_list pos:line="62" pos:column="32">(<argument><expr><name><name pos:line="62" pos:column="33">p<pos:position pos:line="62" pos:column="34"/></name><operator pos:line="62" pos:column="34">-&gt;<pos:position pos:line="62" pos:column="39"/></operator><name pos:line="62" pos:column="36">one<pos:position pos:line="62" pos:column="39"/></name><operator pos:line="62" pos:column="39">-&gt;<pos:position pos:line="62" pos:column="44"/></operator><name pos:line="62" pos:column="41">mode<pos:position pos:line="62" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="46"/></argument_list></call> <operator pos:line="62" pos:column="47">==<pos:position pos:line="62" pos:column="49"/></operator> <name pos:line="62" pos:column="50">OBJ_BLOB<pos:position pos:line="62" pos:column="58"/></name> <operator pos:line="62" pos:column="59">&amp;&amp;<pos:position pos:line="62" pos:column="69"/></operator>
		    <call><name pos:line="63" pos:column="21">object_type<pos:position pos:line="63" pos:column="32"/></name><argument_list pos:line="63" pos:column="32">(<argument><expr><name><name pos:line="63" pos:column="33">p<pos:position pos:line="63" pos:column="34"/></name><operator pos:line="63" pos:column="34">-&gt;<pos:position pos:line="63" pos:column="39"/></operator><name pos:line="63" pos:column="36">two<pos:position pos:line="63" pos:column="39"/></name><operator pos:line="63" pos:column="39">-&gt;<pos:position pos:line="63" pos:column="44"/></operator><name pos:line="63" pos:column="41">mode<pos:position pos:line="63" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="46"/></argument_list></call> <operator pos:line="63" pos:column="47">==<pos:position pos:line="63" pos:column="49"/></operator> <name pos:line="63" pos:column="50">OBJ_BLOB<pos:position pos:line="63" pos:column="58"/></name> <operator pos:line="63" pos:column="59">&amp;&amp;<pos:position pos:line="63" pos:column="69"/></operator>
		    <operator pos:line="64" pos:column="21">!<pos:position pos:line="64" pos:column="22"/></operator><call><name pos:line="64" pos:column="22">strcmp<pos:position pos:line="64" pos:column="28"/></name><argument_list pos:line="64" pos:column="28">(<argument><expr><name><name pos:line="64" pos:column="29">p<pos:position pos:line="64" pos:column="30"/></name><operator pos:line="64" pos:column="30">-&gt;<pos:position pos:line="64" pos:column="35"/></operator><name pos:line="64" pos:column="32">one<pos:position pos:line="64" pos:column="35"/></name><operator pos:line="64" pos:column="35">-&gt;<pos:position pos:line="64" pos:column="40"/></operator><name pos:line="64" pos:column="37">path<pos:position pos:line="64" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="43">p<pos:position pos:line="64" pos:column="44"/></name><operator pos:line="64" pos:column="44">-&gt;<pos:position pos:line="64" pos:column="49"/></operator><name pos:line="64" pos:column="46">two<pos:position pos:line="64" pos:column="49"/></name><operator pos:line="64" pos:column="49">-&gt;<pos:position pos:line="64" pos:column="54"/></operator><name pos:line="64" pos:column="51">path<pos:position pos:line="64" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="57"/></condition><then pos:line="64" pos:column="57"> <block pos:line="64" pos:column="58">{
			<if pos:line="65" pos:column="25">if <condition pos:line="65" pos:column="28">(<expr><call><name pos:line="65" pos:column="29">should_break<pos:position pos:line="65" pos:column="41"/></name><argument_list pos:line="65" pos:column="41">(<argument><expr><name><name pos:line="65" pos:column="42">p<pos:position pos:line="65" pos:column="43"/></name><operator pos:line="65" pos:column="43">-&gt;<pos:position pos:line="65" pos:column="48"/></operator><name pos:line="65" pos:column="45">one<pos:position pos:line="65" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="50">p<pos:position pos:line="65" pos:column="51"/></name><operator pos:line="65" pos:column="51">-&gt;<pos:position pos:line="65" pos:column="56"/></operator><name pos:line="65" pos:column="53">two<pos:position pos:line="65" pos:column="56"/></name></name></expr></argument>,
					 <argument><expr><name pos:line="66" pos:column="42">break_score<pos:position pos:line="66" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="66" pos:column="55">&amp;<pos:position pos:line="66" pos:column="60"/></operator><name pos:line="66" pos:column="56">score<pos:position pos:line="66" pos:column="61"/></name></expr></argument>)<pos:position pos:line="66" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="63"/></condition><then pos:line="66" pos:column="63"> <block pos:line="66" pos:column="64">{
				<comment type="block" pos:line="67" pos:column="33">/* Split this into delete and create */</comment>
				<decl_stmt><decl><type><name><name pos:line="68" pos:column="33">struct<pos:position pos:line="68" pos:column="39"/></name> <name pos:line="68" pos:column="40">diff_filespec<pos:position pos:line="68" pos:column="53"/></name></name> <modifier pos:line="68" pos:column="54">*<pos:position pos:line="68" pos:column="55"/></modifier></type><name pos:line="68" pos:column="55">null_one<pos:position pos:line="68" pos:column="63"/></name></decl>, <modifier pos:line="68" pos:column="65">*<pos:position pos:line="68" pos:column="66"/></modifier><decl><type ref="prev"/><name pos:line="68" pos:column="66">null_two<pos:position pos:line="68" pos:column="74"/></name></decl>;<pos:position pos:line="68" pos:column="75"/></decl_stmt>
				<decl_stmt><decl><type><name><name pos:line="69" pos:column="33">struct<pos:position pos:line="69" pos:column="39"/></name> <name pos:line="69" pos:column="40">diff_filepair<pos:position pos:line="69" pos:column="53"/></name></name> <modifier pos:line="69" pos:column="54">*<pos:position pos:line="69" pos:column="55"/></modifier></type><name pos:line="69" pos:column="55">dp<pos:position pos:line="69" pos:column="57"/></name></decl>;<pos:position pos:line="69" pos:column="58"/></decl_stmt>

				<comment type="block" pos:line="71" pos:column="33">/* Set score to 0 for the pair that
				 * needs to be merged back together
				 * should they survive rename/copy.
				 * Also we do not want to break very
				 * small files.
				 */</comment>
				<if pos:line="77" pos:column="33">if <condition pos:line="77" pos:column="36">(<expr><name pos:line="77" pos:column="37">score<pos:position pos:line="77" pos:column="42"/></name> <operator pos:line="77" pos:column="43">&lt;<pos:position pos:line="77" pos:column="47"/></operator> <name pos:line="77" pos:column="45">merge_score<pos:position pos:line="77" pos:column="56"/></name></expr>)<pos:position pos:line="77" pos:column="57"/></condition><then pos:line="77" pos:column="57">
					<block type="pseudo"><expr_stmt><expr><name pos:line="78" pos:column="41">score<pos:position pos:line="78" pos:column="46"/></name> <operator pos:line="78" pos:column="47">=<pos:position pos:line="78" pos:column="48"/></operator> <literal type="number" pos:line="78" pos:column="49">0<pos:position pos:line="78" pos:column="50"/></literal></expr>;<pos:position pos:line="78" pos:column="51"/></expr_stmt></block></then></if>

				<comment type="block" pos:line="80" pos:column="33">/* deletion of one */</comment>
				<expr_stmt><expr><name pos:line="81" pos:column="33">null_one<pos:position pos:line="81" pos:column="41"/></name> <operator pos:line="81" pos:column="42">=<pos:position pos:line="81" pos:column="43"/></operator> <call><name pos:line="81" pos:column="44">alloc_filespec<pos:position pos:line="81" pos:column="58"/></name><argument_list pos:line="81" pos:column="58">(<argument><expr><name><name pos:line="81" pos:column="59">p<pos:position pos:line="81" pos:column="60"/></name><operator pos:line="81" pos:column="60">-&gt;<pos:position pos:line="81" pos:column="65"/></operator><name pos:line="81" pos:column="62">one<pos:position pos:line="81" pos:column="65"/></name><operator pos:line="81" pos:column="65">-&gt;<pos:position pos:line="81" pos:column="70"/></operator><name pos:line="81" pos:column="67">path<pos:position pos:line="81" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="73"/></expr_stmt>
				<expr_stmt><expr><name pos:line="82" pos:column="33">dp<pos:position pos:line="82" pos:column="35"/></name> <operator pos:line="82" pos:column="36">=<pos:position pos:line="82" pos:column="37"/></operator> <call><name pos:line="82" pos:column="38">diff_queue<pos:position pos:line="82" pos:column="48"/></name><argument_list pos:line="82" pos:column="48">(<argument><expr><operator pos:line="82" pos:column="49">&amp;<pos:position pos:line="82" pos:column="54"/></operator><name pos:line="82" pos:column="50">outq<pos:position pos:line="82" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="56">p<pos:position pos:line="82" pos:column="57"/></name><operator pos:line="82" pos:column="57">-&gt;<pos:position pos:line="82" pos:column="62"/></operator><name pos:line="82" pos:column="59">one<pos:position pos:line="82" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="64">null_one<pos:position pos:line="82" pos:column="72"/></name></expr></argument>)<pos:position pos:line="82" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="74"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="83" pos:column="33">dp<pos:position pos:line="83" pos:column="35"/></name><operator pos:line="83" pos:column="35">-&gt;<pos:position pos:line="83" pos:column="40"/></operator><name pos:line="83" pos:column="37">score<pos:position pos:line="83" pos:column="42"/></name></name> <operator pos:line="83" pos:column="43">=<pos:position pos:line="83" pos:column="44"/></operator> <name pos:line="83" pos:column="45">score<pos:position pos:line="83" pos:column="50"/></name></expr>;<pos:position pos:line="83" pos:column="51"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="84" pos:column="33">dp<pos:position pos:line="84" pos:column="35"/></name><operator pos:line="84" pos:column="35">-&gt;<pos:position pos:line="84" pos:column="40"/></operator><name pos:line="84" pos:column="37">broken_pair<pos:position pos:line="84" pos:column="48"/></name></name> <operator pos:line="84" pos:column="49">=<pos:position pos:line="84" pos:column="50"/></operator> <literal type="number" pos:line="84" pos:column="51">1<pos:position pos:line="84" pos:column="52"/></literal></expr>;<pos:position pos:line="84" pos:column="53"/></expr_stmt>

				<comment type="block" pos:line="86" pos:column="33">/* creation of two */</comment>
				<expr_stmt><expr><name pos:line="87" pos:column="33">null_two<pos:position pos:line="87" pos:column="41"/></name> <operator pos:line="87" pos:column="42">=<pos:position pos:line="87" pos:column="43"/></operator> <call><name pos:line="87" pos:column="44">alloc_filespec<pos:position pos:line="87" pos:column="58"/></name><argument_list pos:line="87" pos:column="58">(<argument><expr><name><name pos:line="87" pos:column="59">p<pos:position pos:line="87" pos:column="60"/></name><operator pos:line="87" pos:column="60">-&gt;<pos:position pos:line="87" pos:column="65"/></operator><name pos:line="87" pos:column="62">two<pos:position pos:line="87" pos:column="65"/></name><operator pos:line="87" pos:column="65">-&gt;<pos:position pos:line="87" pos:column="70"/></operator><name pos:line="87" pos:column="67">path<pos:position pos:line="87" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="73"/></expr_stmt>
				<expr_stmt><expr><name pos:line="88" pos:column="33">dp<pos:position pos:line="88" pos:column="35"/></name> <operator pos:line="88" pos:column="36">=<pos:position pos:line="88" pos:column="37"/></operator> <call><name pos:line="88" pos:column="38">diff_queue<pos:position pos:line="88" pos:column="48"/></name><argument_list pos:line="88" pos:column="48">(<argument><expr><operator pos:line="88" pos:column="49">&amp;<pos:position pos:line="88" pos:column="54"/></operator><name pos:line="88" pos:column="50">outq<pos:position pos:line="88" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="56">null_two<pos:position pos:line="88" pos:column="64"/></name></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="66">p<pos:position pos:line="88" pos:column="67"/></name><operator pos:line="88" pos:column="67">-&gt;<pos:position pos:line="88" pos:column="72"/></operator><name pos:line="88" pos:column="69">two<pos:position pos:line="88" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="88" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="74"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="89" pos:column="33">dp<pos:position pos:line="89" pos:column="35"/></name><operator pos:line="89" pos:column="35">-&gt;<pos:position pos:line="89" pos:column="40"/></operator><name pos:line="89" pos:column="37">score<pos:position pos:line="89" pos:column="42"/></name></name> <operator pos:line="89" pos:column="43">=<pos:position pos:line="89" pos:column="44"/></operator> <name pos:line="89" pos:column="45">score<pos:position pos:line="89" pos:column="50"/></name></expr>;<pos:position pos:line="89" pos:column="51"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="90" pos:column="33">dp<pos:position pos:line="90" pos:column="35"/></name><operator pos:line="90" pos:column="35">-&gt;<pos:position pos:line="90" pos:column="40"/></operator><name pos:line="90" pos:column="37">broken_pair<pos:position pos:line="90" pos:column="48"/></name></name> <operator pos:line="90" pos:column="49">=<pos:position pos:line="90" pos:column="50"/></operator> <literal type="number" pos:line="90" pos:column="51">1<pos:position pos:line="90" pos:column="52"/></literal></expr>;<pos:position pos:line="90" pos:column="53"/></expr_stmt>

				<expr_stmt><expr><call><name pos:line="92" pos:column="33">diff_free_filespec_blob<pos:position pos:line="92" pos:column="56"/></name><argument_list pos:line="92" pos:column="56">(<argument><expr><name><name pos:line="92" pos:column="57">p<pos:position pos:line="92" pos:column="58"/></name><operator pos:line="92" pos:column="58">-&gt;<pos:position pos:line="92" pos:column="63"/></operator><name pos:line="92" pos:column="60">one<pos:position pos:line="92" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="65"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="93" pos:column="33">diff_free_filespec_blob<pos:position pos:line="93" pos:column="56"/></name><argument_list pos:line="93" pos:column="56">(<argument><expr><name><name pos:line="93" pos:column="57">p<pos:position pos:line="93" pos:column="58"/></name><operator pos:line="93" pos:column="58">-&gt;<pos:position pos:line="93" pos:column="63"/></operator><name pos:line="93" pos:column="60">two<pos:position pos:line="93" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="65"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="94" pos:column="33">free<pos:position pos:line="94" pos:column="37"/></name><argument_list pos:line="94" pos:column="37">(<argument><expr><name pos:line="94" pos:column="38">p<pos:position pos:line="94" pos:column="39"/></name></expr></argument>)<pos:position pos:line="94" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="41"/></expr_stmt> <comment type="block" pos:line="94" pos:column="42">/* not diff_free_filepair(), we are
					  * reusing one and two here.
					  */</comment>
				<continue pos:line="97" pos:column="33">continue;<pos:position pos:line="97" pos:column="42"/></continue>
			}<pos:position pos:line="98" pos:column="26"/></block></then></if>
		}<pos:position pos:line="99" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="100" pos:column="17">diff_free_filespec_data<pos:position pos:line="100" pos:column="40"/></name><argument_list pos:line="100" pos:column="40">(<argument><expr><name><name pos:line="100" pos:column="41">p<pos:position pos:line="100" pos:column="42"/></name><operator pos:line="100" pos:column="42">-&gt;<pos:position pos:line="100" pos:column="47"/></operator><name pos:line="100" pos:column="44">one<pos:position pos:line="100" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="100" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="101" pos:column="17">diff_free_filespec_data<pos:position pos:line="101" pos:column="40"/></name><argument_list pos:line="101" pos:column="40">(<argument><expr><name><name pos:line="101" pos:column="41">p<pos:position pos:line="101" pos:column="42"/></name><operator pos:line="101" pos:column="42">-&gt;<pos:position pos:line="101" pos:column="47"/></operator><name pos:line="101" pos:column="44">two<pos:position pos:line="101" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="101" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="102" pos:column="17">diff_q<pos:position pos:line="102" pos:column="23"/></name><argument_list pos:line="102" pos:column="23">(<argument><expr><operator pos:line="102" pos:column="24">&amp;<pos:position pos:line="102" pos:column="29"/></operator><name pos:line="102" pos:column="25">outq<pos:position pos:line="102" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="31">p<pos:position pos:line="102" pos:column="32"/></name></expr></argument>)<pos:position pos:line="102" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="103" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="104" pos:column="9">free<pos:position pos:line="104" pos:column="13"/></name><argument_list pos:line="104" pos:column="13">(<argument><expr><name><name pos:line="104" pos:column="14">q<pos:position pos:line="104" pos:column="15"/></name><operator pos:line="104" pos:column="15">-&gt;<pos:position pos:line="104" pos:column="20"/></operator><name pos:line="104" pos:column="17">queue<pos:position pos:line="104" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="104" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="105" pos:column="9">*<pos:position pos:line="105" pos:column="10"/></operator><name pos:line="105" pos:column="10">q<pos:position pos:line="105" pos:column="11"/></name> <operator pos:line="105" pos:column="12">=<pos:position pos:line="105" pos:column="13"/></operator> <name pos:line="105" pos:column="14">outq<pos:position pos:line="105" pos:column="18"/></name></expr>;<pos:position pos:line="105" pos:column="19"/></expr_stmt>

	<return pos:line="107" pos:column="9">return;<pos:position pos:line="107" pos:column="16"/></return>
}<pos:position pos:line="108" pos:column="2"/></block></function></unit>
