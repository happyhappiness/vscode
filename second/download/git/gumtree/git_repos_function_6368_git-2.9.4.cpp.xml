<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6368_git-2.9.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">re_compile_fastmap_iter<pos:position pos:line="2" pos:column="24"/></name> <parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">regex_t<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">bufp<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">re_dfastate_t<pos:position pos:line="2" pos:column="60"/></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="62">init_state<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>,
			 <parameter><decl><type><name pos:line="3" pos:column="26">char<pos:position pos:line="3" pos:column="30"/></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier></type><name pos:line="3" pos:column="32">fastmap<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="40"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">volatile<pos:position pos:line="5" pos:column="11"/></specifier> <name pos:line="5" pos:column="12">re_dfa_t<pos:position pos:line="5" pos:column="20"/></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">dfa<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><operator pos:line="5" pos:column="28">(<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="29">re_dfa_t<pos:position pos:line="5" pos:column="37"/></name> <operator pos:line="5" pos:column="38">*<pos:position pos:line="5" pos:column="39"/></operator><operator pos:line="5" pos:column="39">)<pos:position pos:line="5" pos:column="40"/></operator> <name><name pos:line="5" pos:column="41">bufp<pos:position pos:line="5" pos:column="45"/></name><operator pos:line="5" pos:column="45">-&gt;<pos:position pos:line="5" pos:column="50"/></operator><name pos:line="5" pos:column="47">buffer<pos:position pos:line="5" pos:column="53"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="54"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">node_cnt<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">icase<pos:position pos:line="7" pos:column="12"/></name> <init pos:line="7" pos:column="13">= <expr><operator pos:line="7" pos:column="15">(<pos:position pos:line="7" pos:column="16"/></operator><name><name pos:line="7" pos:column="16">dfa<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">-&gt;<pos:position pos:line="7" pos:column="24"/></operator><name pos:line="7" pos:column="21">mb_cur_max<pos:position pos:line="7" pos:column="31"/></name></name> <operator pos:line="7" pos:column="32">==<pos:position pos:line="7" pos:column="34"/></operator> <literal type="number" pos:line="7" pos:column="35">1<pos:position pos:line="7" pos:column="36"/></literal> <operator pos:line="7" pos:column="37">&amp;&amp;<pos:position pos:line="7" pos:column="47"/></operator> <operator pos:line="7" pos:column="40">(<pos:position pos:line="7" pos:column="41"/></operator><name><name pos:line="7" pos:column="41">bufp<pos:position pos:line="7" pos:column="45"/></name><operator pos:line="7" pos:column="45">-&gt;<pos:position pos:line="7" pos:column="50"/></operator><name pos:line="7" pos:column="47">syntax<pos:position pos:line="7" pos:column="53"/></name></name> <operator pos:line="7" pos:column="54">&amp;<pos:position pos:line="7" pos:column="59"/></operator> <name pos:line="7" pos:column="56">RE_ICASE<pos:position pos:line="7" pos:column="64"/></name><operator pos:line="7" pos:column="64">)<pos:position pos:line="7" pos:column="65"/></operator><operator pos:line="7" pos:column="65">)<pos:position pos:line="7" pos:column="66"/></operator></expr></init></decl>;<pos:position pos:line="7" pos:column="67"/></decl_stmt>
  <for pos:line="8" pos:column="3">for <control pos:line="8" pos:column="7">(<init><expr><name pos:line="8" pos:column="8">node_cnt<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator> <literal type="number" pos:line="8" pos:column="19">0<pos:position pos:line="8" pos:column="20"/></literal></expr>;<pos:position pos:line="8" pos:column="21"/></init> <condition><expr><name pos:line="8" pos:column="22">node_cnt<pos:position pos:line="8" pos:column="30"/></name> <operator pos:line="8" pos:column="31">&lt;<pos:position pos:line="8" pos:column="35"/></operator> <name><name pos:line="8" pos:column="33">init_state<pos:position pos:line="8" pos:column="43"/></name><operator pos:line="8" pos:column="43">-&gt;<pos:position pos:line="8" pos:column="48"/></operator><name pos:line="8" pos:column="45">nodes<pos:position pos:line="8" pos:column="50"/></name><operator pos:line="8" pos:column="50">.<pos:position pos:line="8" pos:column="51"/></operator><name pos:line="8" pos:column="51">nelem<pos:position pos:line="8" pos:column="56"/></name></name></expr>;<pos:position pos:line="8" pos:column="57"/></condition> <incr><expr><operator pos:line="8" pos:column="58">++<pos:position pos:line="8" pos:column="60"/></operator><name pos:line="8" pos:column="60">node_cnt<pos:position pos:line="8" pos:column="68"/></name></expr></incr>)<pos:position pos:line="8" pos:column="69"/></control>
    <block pos:line="9" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="10" pos:column="7">int<pos:position pos:line="10" pos:column="10"/></name></type> <name pos:line="10" pos:column="11">node<pos:position pos:line="10" pos:column="15"/></name> <init pos:line="10" pos:column="16">= <expr><name><name pos:line="10" pos:column="18">init_state<pos:position pos:line="10" pos:column="28"/></name><operator pos:line="10" pos:column="28">-&gt;<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="30">nodes<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">.<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="36">elems<pos:position pos:line="10" pos:column="41"/></name><index pos:line="10" pos:column="41">[<expr><name pos:line="10" pos:column="42">node_cnt<pos:position pos:line="10" pos:column="50"/></name></expr>]<pos:position pos:line="10" pos:column="51"/></index></name></expr></init></decl>;<pos:position pos:line="10" pos:column="52"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="11" pos:column="7">re_token_type_t<pos:position pos:line="11" pos:column="22"/></name></type> <name pos:line="11" pos:column="23">type<pos:position pos:line="11" pos:column="27"/></name> <init pos:line="11" pos:column="28">= <expr><name><name pos:line="11" pos:column="30">dfa<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">-&gt;<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="35">nodes<pos:position pos:line="11" pos:column="40"/></name><index pos:line="11" pos:column="40">[<expr><name pos:line="11" pos:column="41">node<pos:position pos:line="11" pos:column="45"/></name></expr>]<pos:position pos:line="11" pos:column="46"/></index></name><operator pos:line="11" pos:column="46">.<pos:position pos:line="11" pos:column="47"/></operator><name pos:line="11" pos:column="47">type<pos:position pos:line="11" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="52"/></decl_stmt>

      <if pos:line="13" pos:column="7">if <condition pos:line="13" pos:column="10">(<expr><name pos:line="13" pos:column="11">type<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">==<pos:position pos:line="13" pos:column="18"/></operator> <name pos:line="13" pos:column="19">CHARACTER<pos:position pos:line="13" pos:column="28"/></name></expr>)<pos:position pos:line="13" pos:column="29"/></condition><then pos:line="13" pos:column="29">
	<block pos:line="14" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="15" pos:column="11">re_set_fastmap<pos:position pos:line="15" pos:column="25"/></name> <argument_list pos:line="15" pos:column="26">(<argument><expr><name pos:line="15" pos:column="27">fastmap<pos:position pos:line="15" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="36">icase<pos:position pos:line="15" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="43">dfa<pos:position pos:line="15" pos:column="46"/></name><operator pos:line="15" pos:column="46">-&gt;<pos:position pos:line="15" pos:column="51"/></operator><name pos:line="15" pos:column="48">nodes<pos:position pos:line="15" pos:column="53"/></name><index pos:line="15" pos:column="53">[<expr><name pos:line="15" pos:column="54">node<pos:position pos:line="15" pos:column="58"/></name></expr>]<pos:position pos:line="15" pos:column="59"/></index></name><operator pos:line="15" pos:column="59">.<pos:position pos:line="15" pos:column="60"/></operator><name><name pos:line="15" pos:column="60">opr<pos:position pos:line="15" pos:column="63"/></name><operator pos:line="15" pos:column="63">.<pos:position pos:line="15" pos:column="64"/></operator><name pos:line="15" pos:column="64">c<pos:position pos:line="15" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="67"/></expr_stmt>
<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="16" pos:column="22"/></name></cpp:ifdef>
	  <if pos:line="17" pos:column="11">if <condition pos:line="17" pos:column="14">(<expr><operator pos:line="17" pos:column="15">(<pos:position pos:line="17" pos:column="16"/></operator><name><name pos:line="17" pos:column="16">bufp<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">-&gt;<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="22">syntax<pos:position pos:line="17" pos:column="28"/></name></name> <operator pos:line="17" pos:column="29">&amp;<pos:position pos:line="17" pos:column="34"/></operator> <name pos:line="17" pos:column="31">RE_ICASE<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">)<pos:position pos:line="17" pos:column="40"/></operator> <operator pos:line="17" pos:column="41">&amp;&amp;<pos:position pos:line="17" pos:column="51"/></operator> <name><name pos:line="17" pos:column="44">dfa<pos:position pos:line="17" pos:column="47"/></name><operator pos:line="17" pos:column="47">-&gt;<pos:position pos:line="17" pos:column="52"/></operator><name pos:line="17" pos:column="49">mb_cur_max<pos:position pos:line="17" pos:column="59"/></name></name> <operator pos:line="17" pos:column="60">&gt;<pos:position pos:line="17" pos:column="64"/></operator> <literal type="number" pos:line="17" pos:column="62">1<pos:position pos:line="17" pos:column="63"/></literal></expr>)<pos:position pos:line="17" pos:column="64"/></condition><then pos:line="17" pos:column="64">
	    <block pos:line="18" pos:column="13">{
	      <decl_stmt><decl><type><name pos:line="19" pos:column="15">unsigned<pos:position pos:line="19" pos:column="23"/></name> <name pos:line="19" pos:column="24">char<pos:position pos:line="19" pos:column="28"/></name> <modifier pos:line="19" pos:column="29">*<pos:position pos:line="19" pos:column="30"/></modifier></type><name pos:line="19" pos:column="30">buf<pos:position pos:line="19" pos:column="33"/></name> <init pos:line="19" pos:column="34">= <macro><name pos:line="19" pos:column="36">re_malloc<pos:position pos:line="19" pos:column="45"/></name> <argument_list pos:line="19" pos:column="46">(<argument pos:line="19" pos:column="47">unsigned char<pos:position pos:line="19" pos:column="60"/></argument>, <argument pos:line="19" pos:column="62">dfa-&gt;mb_cur_max<pos:position pos:line="19" pos:column="77"/></argument>)<pos:position pos:line="19" pos:column="78"/></argument_list></macro></init></decl>, <modifier pos:line="19" pos:column="80">*<pos:position pos:line="19" pos:column="81"/></modifier><decl><type ref="prev"/><name pos:line="19" pos:column="81">p<pos:position pos:line="19" pos:column="82"/></name></decl>;<pos:position pos:line="19" pos:column="83"/></decl_stmt>
	      <decl_stmt><decl><type><name pos:line="20" pos:column="15">wchar_t<pos:position pos:line="20" pos:column="22"/></name></type> <name pos:line="20" pos:column="23">wc<pos:position pos:line="20" pos:column="25"/></name></decl>;<pos:position pos:line="20" pos:column="26"/></decl_stmt>
	      <decl_stmt><decl><type><name pos:line="21" pos:column="15">mbstate_t<pos:position pos:line="21" pos:column="24"/></name></type> <name pos:line="21" pos:column="25">state<pos:position pos:line="21" pos:column="30"/></name></decl>;<pos:position pos:line="21" pos:column="31"/></decl_stmt>

	      <expr_stmt><expr><name pos:line="23" pos:column="15">p<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">buf<pos:position pos:line="23" pos:column="22"/></name></expr>;<pos:position pos:line="23" pos:column="23"/></expr_stmt>
	      <expr_stmt><expr><operator pos:line="24" pos:column="15">*<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="16">p<pos:position pos:line="24" pos:column="17"/></name><operator pos:line="24" pos:column="17">++<pos:position pos:line="24" pos:column="19"/></operator> <operator pos:line="24" pos:column="20">=<pos:position pos:line="24" pos:column="21"/></operator> <name><name pos:line="24" pos:column="22">dfa<pos:position pos:line="24" pos:column="25"/></name><operator pos:line="24" pos:column="25">-&gt;<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="27">nodes<pos:position pos:line="24" pos:column="32"/></name><index pos:line="24" pos:column="32">[<expr><name pos:line="24" pos:column="33">node<pos:position pos:line="24" pos:column="37"/></name></expr>]<pos:position pos:line="24" pos:column="38"/></index></name><operator pos:line="24" pos:column="38">.<pos:position pos:line="24" pos:column="39"/></operator><name><name pos:line="24" pos:column="39">opr<pos:position pos:line="24" pos:column="42"/></name><operator pos:line="24" pos:column="42">.<pos:position pos:line="24" pos:column="43"/></operator><name pos:line="24" pos:column="43">c<pos:position pos:line="24" pos:column="44"/></name></name></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt>
	      <while pos:line="25" pos:column="15">while <condition pos:line="25" pos:column="21">(<expr><operator pos:line="25" pos:column="22">++<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="24">node<pos:position pos:line="25" pos:column="28"/></name> <operator pos:line="25" pos:column="29">&lt;<pos:position pos:line="25" pos:column="33"/></operator> <name><name pos:line="25" pos:column="31">dfa<pos:position pos:line="25" pos:column="34"/></name><operator pos:line="25" pos:column="34">-&gt;<pos:position pos:line="25" pos:column="39"/></operator><name pos:line="25" pos:column="36">nodes_len<pos:position pos:line="25" pos:column="45"/></name></name>
		     <operator pos:line="26" pos:column="22">&amp;&amp;<pos:position pos:line="26" pos:column="32"/></operator> <name><name pos:line="26" pos:column="25">dfa<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">-&gt;<pos:position pos:line="26" pos:column="33"/></operator><name pos:line="26" pos:column="30">nodes<pos:position pos:line="26" pos:column="35"/></name><index pos:line="26" pos:column="35">[<expr><name pos:line="26" pos:column="36">node<pos:position pos:line="26" pos:column="40"/></name></expr>]<pos:position pos:line="26" pos:column="41"/></index></name><operator pos:line="26" pos:column="41">.<pos:position pos:line="26" pos:column="42"/></operator><name pos:line="26" pos:column="42">type<pos:position pos:line="26" pos:column="46"/></name> <operator pos:line="26" pos:column="47">==<pos:position pos:line="26" pos:column="49"/></operator> <name pos:line="26" pos:column="50">CHARACTER<pos:position pos:line="26" pos:column="59"/></name>
		     <operator pos:line="27" pos:column="22">&amp;&amp;<pos:position pos:line="27" pos:column="32"/></operator> <name><name pos:line="27" pos:column="25">dfa<pos:position pos:line="27" pos:column="28"/></name><operator pos:line="27" pos:column="28">-&gt;<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="30">nodes<pos:position pos:line="27" pos:column="35"/></name><index pos:line="27" pos:column="35">[<expr><name pos:line="27" pos:column="36">node<pos:position pos:line="27" pos:column="40"/></name></expr>]<pos:position pos:line="27" pos:column="41"/></index></name><operator pos:line="27" pos:column="41">.<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="42">mb_partial<pos:position pos:line="27" pos:column="52"/></name></expr>)<pos:position pos:line="27" pos:column="53"/></condition>
		<block type="pseudo"><expr_stmt><expr><operator pos:line="28" pos:column="17">*<pos:position pos:line="28" pos:column="18"/></operator><name pos:line="28" pos:column="18">p<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">++<pos:position pos:line="28" pos:column="21"/></operator> <operator pos:line="28" pos:column="22">=<pos:position pos:line="28" pos:column="23"/></operator> <name><name pos:line="28" pos:column="24">dfa<pos:position pos:line="28" pos:column="27"/></name><operator pos:line="28" pos:column="27">-&gt;<pos:position pos:line="28" pos:column="32"/></operator><name pos:line="28" pos:column="29">nodes<pos:position pos:line="28" pos:column="34"/></name><index pos:line="28" pos:column="34">[<expr><name pos:line="28" pos:column="35">node<pos:position pos:line="28" pos:column="39"/></name></expr>]<pos:position pos:line="28" pos:column="40"/></index></name><operator pos:line="28" pos:column="40">.<pos:position pos:line="28" pos:column="41"/></operator><name><name pos:line="28" pos:column="41">opr<pos:position pos:line="28" pos:column="44"/></name><operator pos:line="28" pos:column="44">.<pos:position pos:line="28" pos:column="45"/></operator><name pos:line="28" pos:column="45">c<pos:position pos:line="28" pos:column="46"/></name></name></expr>;<pos:position pos:line="28" pos:column="47"/></expr_stmt></block></while>
	      <expr_stmt><expr><call><name pos:line="29" pos:column="15">memset<pos:position pos:line="29" pos:column="21"/></name> <argument_list pos:line="29" pos:column="22">(<argument><expr><operator pos:line="29" pos:column="23">&amp;<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="24">state<pos:position pos:line="29" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="29" pos:column="31">'\0'<pos:position pos:line="29" pos:column="35"/></literal></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="37">sizeof <argument_list pos:line="29" pos:column="44">(<argument><expr><name pos:line="29" pos:column="45">state<pos:position pos:line="29" pos:column="50"/></name></expr></argument>)<pos:position pos:line="29" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="53"/></expr_stmt>
	      <if pos:line="30" pos:column="15">if <condition pos:line="30" pos:column="18">(<expr><call><name pos:line="30" pos:column="19">__mbrtowc<pos:position pos:line="30" pos:column="28"/></name> <argument_list pos:line="30" pos:column="29">(<argument><expr><operator pos:line="30" pos:column="30">&amp;<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="31">wc<pos:position pos:line="30" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="35">(<pos:position pos:line="30" pos:column="36"/></operator><specifier pos:line="30" pos:column="36">const<pos:position pos:line="30" pos:column="41"/></specifier> <name pos:line="30" pos:column="42">char<pos:position pos:line="30" pos:column="46"/></name> <operator pos:line="30" pos:column="47">*<pos:position pos:line="30" pos:column="48"/></operator><operator pos:line="30" pos:column="48">)<pos:position pos:line="30" pos:column="49"/></operator> <name pos:line="30" pos:column="50">buf<pos:position pos:line="30" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="55">p<pos:position pos:line="30" pos:column="56"/></name> <operator pos:line="30" pos:column="57">-<pos:position pos:line="30" pos:column="58"/></operator> <name pos:line="30" pos:column="59">buf<pos:position pos:line="30" pos:column="62"/></name></expr></argument>,
			     <argument><expr><operator pos:line="31" pos:column="30">&amp;<pos:position pos:line="31" pos:column="35"/></operator><name pos:line="31" pos:column="31">state<pos:position pos:line="31" pos:column="36"/></name></expr></argument>)<pos:position pos:line="31" pos:column="37"/></argument_list></call> <operator pos:line="31" pos:column="38">==<pos:position pos:line="31" pos:column="40"/></operator> <name pos:line="31" pos:column="41">p<pos:position pos:line="31" pos:column="42"/></name> <operator pos:line="31" pos:column="43">-<pos:position pos:line="31" pos:column="44"/></operator> <name pos:line="31" pos:column="45">buf<pos:position pos:line="31" pos:column="48"/></name>
		  <operator pos:line="32" pos:column="19">&amp;&amp;<pos:position pos:line="32" pos:column="29"/></operator> <operator pos:line="32" pos:column="22">(<pos:position pos:line="32" pos:column="23"/></operator><call><name pos:line="32" pos:column="23">__wcrtomb<pos:position pos:line="32" pos:column="32"/></name> <argument_list pos:line="32" pos:column="33">(<argument><expr><operator pos:line="32" pos:column="34">(<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="35">char<pos:position pos:line="32" pos:column="39"/></name> <operator pos:line="32" pos:column="40">*<pos:position pos:line="32" pos:column="41"/></operator><operator pos:line="32" pos:column="41">)<pos:position pos:line="32" pos:column="42"/></operator> <name pos:line="32" pos:column="43">buf<pos:position pos:line="32" pos:column="46"/></name></expr></argument>, <argument><expr><call><name pos:line="32" pos:column="48">towlower<pos:position pos:line="32" pos:column="56"/></name> <argument_list pos:line="32" pos:column="57">(<argument><expr><name pos:line="32" pos:column="58">wc<pos:position pos:line="32" pos:column="60"/></name></expr></argument>)<pos:position pos:line="32" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="32" pos:column="63">&amp;<pos:position pos:line="32" pos:column="68"/></operator><name pos:line="32" pos:column="64">state<pos:position pos:line="32" pos:column="69"/></name></expr></argument>)<pos:position pos:line="32" pos:column="70"/></argument_list></call>
		      <operator pos:line="33" pos:column="23">!=<pos:position pos:line="33" pos:column="25"/></operator> <operator pos:line="33" pos:column="26">(<pos:position pos:line="33" pos:column="27"/></operator><name pos:line="33" pos:column="27">size_t<pos:position pos:line="33" pos:column="33"/></name><operator pos:line="33" pos:column="33">)<pos:position pos:line="33" pos:column="34"/></operator> <operator pos:line="33" pos:column="35">-<pos:position pos:line="33" pos:column="36"/></operator><literal type="number" pos:line="33" pos:column="36">1<pos:position pos:line="33" pos:column="37"/></literal><operator pos:line="33" pos:column="37">)<pos:position pos:line="33" pos:column="38"/></operator></expr>)<pos:position pos:line="33" pos:column="39"/></condition><then pos:line="33" pos:column="39">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="17">re_set_fastmap<pos:position pos:line="34" pos:column="31"/></name> <argument_list pos:line="34" pos:column="32">(<argument><expr><name pos:line="34" pos:column="33">fastmap<pos:position pos:line="34" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="42">0<pos:position pos:line="34" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="45">buf<pos:position pos:line="34" pos:column="48"/></name><index pos:line="34" pos:column="48">[<expr><literal type="number" pos:line="34" pos:column="49">0<pos:position pos:line="34" pos:column="50"/></literal></expr>]<pos:position pos:line="34" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="34" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="53"/></expr_stmt></block></then></if>
	      <expr_stmt><expr><call><name pos:line="35" pos:column="15">re_free<pos:position pos:line="35" pos:column="22"/></name> <argument_list pos:line="35" pos:column="23">(<argument><expr><name pos:line="35" pos:column="24">buf<pos:position pos:line="35" pos:column="27"/></name></expr></argument>)<pos:position pos:line="35" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="29"/></expr_stmt>
	    }<pos:position pos:line="36" pos:column="14"/></block></then></if>
<cpp:endif pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">endif<pos:position pos:line="37" pos:column="7"/></cpp:directive></cpp:endif>
	}<pos:position pos:line="38" pos:column="10"/></block></then>
      <elseif pos:line="39" pos:column="7">else <if pos:line="39" pos:column="12">if <condition pos:line="39" pos:column="15">(<expr><name pos:line="39" pos:column="16">type<pos:position pos:line="39" pos:column="20"/></name> <operator pos:line="39" pos:column="21">==<pos:position pos:line="39" pos:column="23"/></operator> <name pos:line="39" pos:column="24">SIMPLE_BRACKET<pos:position pos:line="39" pos:column="38"/></name></expr>)<pos:position pos:line="39" pos:column="39"/></condition><then pos:line="39" pos:column="39">
	<block pos:line="40" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="41" pos:column="11">int<pos:position pos:line="41" pos:column="14"/></name></type> <name pos:line="41" pos:column="15">i<pos:position pos:line="41" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="41" pos:column="18">ch<pos:position pos:line="41" pos:column="20"/></name></decl>;<pos:position pos:line="41" pos:column="21"/></decl_stmt>
	  <for pos:line="42" pos:column="11">for <control pos:line="42" pos:column="15">(<init><expr><name pos:line="42" pos:column="16">i<pos:position pos:line="42" pos:column="17"/></name> <operator pos:line="42" pos:column="18">=<pos:position pos:line="42" pos:column="19"/></operator> <literal type="number" pos:line="42" pos:column="20">0<pos:position pos:line="42" pos:column="21"/></literal></expr><operator pos:line="42" pos:column="21">,<pos:position pos:line="42" pos:column="22"/></operator> <expr><name pos:line="42" pos:column="23">ch<pos:position pos:line="42" pos:column="25"/></name> <operator pos:line="42" pos:column="26">=<pos:position pos:line="42" pos:column="27"/></operator> <literal type="number" pos:line="42" pos:column="28">0<pos:position pos:line="42" pos:column="29"/></literal></expr>;<pos:position pos:line="42" pos:column="30"/></init> <condition><expr><name pos:line="42" pos:column="31">i<pos:position pos:line="42" pos:column="32"/></name> <operator pos:line="42" pos:column="33">&lt;<pos:position pos:line="42" pos:column="37"/></operator> <name pos:line="42" pos:column="35">BITSET_WORDS<pos:position pos:line="42" pos:column="47"/></name></expr>;<pos:position pos:line="42" pos:column="48"/></condition> <incr><expr><operator pos:line="42" pos:column="49">++<pos:position pos:line="42" pos:column="51"/></operator><name pos:line="42" pos:column="51">i<pos:position pos:line="42" pos:column="52"/></name></expr></incr>)<pos:position pos:line="42" pos:column="53"/></control>
	    <block pos:line="43" pos:column="13">{
	      <decl_stmt><decl><type><name pos:line="44" pos:column="15">int<pos:position pos:line="44" pos:column="18"/></name></type> <name pos:line="44" pos:column="19">j<pos:position pos:line="44" pos:column="20"/></name></decl>;<pos:position pos:line="44" pos:column="21"/></decl_stmt>
	      <decl_stmt><decl><type><name pos:line="45" pos:column="15">bitset_word_t<pos:position pos:line="45" pos:column="28"/></name></type> <name pos:line="45" pos:column="29">w<pos:position pos:line="45" pos:column="30"/></name> <init pos:line="45" pos:column="31">= <expr><name><name pos:line="45" pos:column="33">dfa<pos:position pos:line="45" pos:column="36"/></name><operator pos:line="45" pos:column="36">-&gt;<pos:position pos:line="45" pos:column="41"/></operator><name pos:line="45" pos:column="38">nodes<pos:position pos:line="45" pos:column="43"/></name><index pos:line="45" pos:column="43">[<expr><name pos:line="45" pos:column="44">node<pos:position pos:line="45" pos:column="48"/></name></expr>]<pos:position pos:line="45" pos:column="49"/></index></name><operator pos:line="45" pos:column="49">.<pos:position pos:line="45" pos:column="50"/></operator><name><name pos:line="45" pos:column="50">opr<pos:position pos:line="45" pos:column="53"/></name><operator pos:line="45" pos:column="53">.<pos:position pos:line="45" pos:column="54"/></operator><name pos:line="45" pos:column="54">sbcset<pos:position pos:line="45" pos:column="60"/></name><index pos:line="45" pos:column="60">[<expr><name pos:line="45" pos:column="61">i<pos:position pos:line="45" pos:column="62"/></name></expr>]<pos:position pos:line="45" pos:column="63"/></index></name></expr></init></decl>;<pos:position pos:line="45" pos:column="64"/></decl_stmt>
	      <for pos:line="46" pos:column="15">for <control pos:line="46" pos:column="19">(<init><expr><name pos:line="46" pos:column="20">j<pos:position pos:line="46" pos:column="21"/></name> <operator pos:line="46" pos:column="22">=<pos:position pos:line="46" pos:column="23"/></operator> <literal type="number" pos:line="46" pos:column="24">0<pos:position pos:line="46" pos:column="25"/></literal></expr>;<pos:position pos:line="46" pos:column="26"/></init> <condition><expr><name pos:line="46" pos:column="27">j<pos:position pos:line="46" pos:column="28"/></name> <operator pos:line="46" pos:column="29">&lt;<pos:position pos:line="46" pos:column="33"/></operator> <name pos:line="46" pos:column="31">BITSET_WORD_BITS<pos:position pos:line="46" pos:column="47"/></name></expr>;<pos:position pos:line="46" pos:column="48"/></condition> <incr><expr><operator pos:line="46" pos:column="49">++<pos:position pos:line="46" pos:column="51"/></operator><name pos:line="46" pos:column="51">j<pos:position pos:line="46" pos:column="52"/></name></expr><operator pos:line="46" pos:column="52">,<pos:position pos:line="46" pos:column="53"/></operator> <expr><operator pos:line="46" pos:column="54">++<pos:position pos:line="46" pos:column="56"/></operator><name pos:line="46" pos:column="56">ch<pos:position pos:line="46" pos:column="58"/></name></expr></incr>)<pos:position pos:line="46" pos:column="59"/></control>
		<block type="pseudo"><if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">w<pos:position pos:line="47" pos:column="22"/></name> <operator pos:line="47" pos:column="23">&amp;<pos:position pos:line="47" pos:column="28"/></operator> <operator pos:line="47" pos:column="25">(<pos:position pos:line="47" pos:column="26"/></operator><operator pos:line="47" pos:column="26">(<pos:position pos:line="47" pos:column="27"/></operator><name pos:line="47" pos:column="27">bitset_word_t<pos:position pos:line="47" pos:column="40"/></name><operator pos:line="47" pos:column="40">)<pos:position pos:line="47" pos:column="41"/></operator> <literal type="number" pos:line="47" pos:column="42">1<pos:position pos:line="47" pos:column="43"/></literal> <operator pos:line="47" pos:column="44">&lt;&lt;<pos:position pos:line="47" pos:column="52"/></operator> <name pos:line="47" pos:column="47">j<pos:position pos:line="47" pos:column="48"/></name><operator pos:line="47" pos:column="48">)<pos:position pos:line="47" pos:column="49"/></operator></expr>)<pos:position pos:line="47" pos:column="50"/></condition><then pos:line="47" pos:column="50">
		  <block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="19">re_set_fastmap<pos:position pos:line="48" pos:column="33"/></name> <argument_list pos:line="48" pos:column="34">(<argument><expr><name pos:line="48" pos:column="35">fastmap<pos:position pos:line="48" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="44">icase<pos:position pos:line="48" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="51">ch<pos:position pos:line="48" pos:column="53"/></name></expr></argument>)<pos:position pos:line="48" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="55"/></expr_stmt></block></then></if></block></for>
	    }<pos:position pos:line="49" pos:column="14"/></block></for>
	}<pos:position pos:line="50" pos:column="10"/></block></then></if></elseif>
<cpp:ifdef pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">ifdef<pos:position pos:line="51" pos:column="7"/></cpp:directive> <name pos:line="51" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="51" pos:column="22"/></name></cpp:ifdef>
      <elseif pos:line="52" pos:column="7">else <if pos:line="52" pos:column="12">if <condition pos:line="52" pos:column="15">(<expr><name pos:line="52" pos:column="16">type<pos:position pos:line="52" pos:column="20"/></name> <operator pos:line="52" pos:column="21">==<pos:position pos:line="52" pos:column="23"/></operator> <name pos:line="52" pos:column="24">COMPLEX_BRACKET<pos:position pos:line="52" pos:column="39"/></name></expr>)<pos:position pos:line="52" pos:column="40"/></condition><then pos:line="52" pos:column="40">
	<block pos:line="53" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="54" pos:column="11">re_charset_t<pos:position pos:line="54" pos:column="23"/></name> <modifier pos:line="54" pos:column="24">*<pos:position pos:line="54" pos:column="25"/></modifier></type><name pos:line="54" pos:column="25">cset<pos:position pos:line="54" pos:column="29"/></name> <init pos:line="54" pos:column="30">= <expr><name><name pos:line="54" pos:column="32">dfa<pos:position pos:line="54" pos:column="35"/></name><operator pos:line="54" pos:column="35">-&gt;<pos:position pos:line="54" pos:column="40"/></operator><name pos:line="54" pos:column="37">nodes<pos:position pos:line="54" pos:column="42"/></name><index pos:line="54" pos:column="42">[<expr><name pos:line="54" pos:column="43">node<pos:position pos:line="54" pos:column="47"/></name></expr>]<pos:position pos:line="54" pos:column="48"/></index></name><operator pos:line="54" pos:column="48">.<pos:position pos:line="54" pos:column="49"/></operator><name><name pos:line="54" pos:column="49">opr<pos:position pos:line="54" pos:column="52"/></name><operator pos:line="54" pos:column="52">.<pos:position pos:line="54" pos:column="53"/></operator><name pos:line="54" pos:column="53">mbcset<pos:position pos:line="54" pos:column="59"/></name></name></expr></init></decl>;<pos:position pos:line="54" pos:column="60"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="55" pos:column="11">int<pos:position pos:line="55" pos:column="14"/></name></type> <name pos:line="55" pos:column="15">i<pos:position pos:line="55" pos:column="16"/></name></decl>;<pos:position pos:line="55" pos:column="17"/></decl_stmt>

<cpp:ifdef pos:line="57" pos:column="1"># <cpp:directive pos:line="57" pos:column="3">ifdef<pos:position pos:line="57" pos:column="8"/></cpp:directive> <name pos:line="57" pos:column="9">_LIBC<pos:position pos:line="57" pos:column="14"/></name></cpp:ifdef>
	  <comment type="block" pos:line="58" pos:column="11">/* See if we have to try all bytes which start multiple collation
	     elements.
	     e.g. In da_DK, we want to catch 'a' since "aa" is a valid
		  collation element, and don't catch 'b' since 'b' is
		  the only collation element which starts from 'b' (and
		  it is caught by SIMPLE_BRACKET).  */</comment>
	      <if pos:line="64" pos:column="15">if <condition pos:line="64" pos:column="18">(<expr><call><name pos:line="64" pos:column="19">_NL_CURRENT_WORD<pos:position pos:line="64" pos:column="35"/></name> <argument_list pos:line="64" pos:column="36">(<argument><expr><name pos:line="64" pos:column="37">LC_COLLATE<pos:position pos:line="64" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="49">_NL_COLLATE_NRULES<pos:position pos:line="64" pos:column="67"/></name></expr></argument>)<pos:position pos:line="64" pos:column="68"/></argument_list></call> <operator pos:line="64" pos:column="69">!=<pos:position pos:line="64" pos:column="71"/></operator> <literal type="number" pos:line="64" pos:column="72">0<pos:position pos:line="64" pos:column="73"/></literal>
		  <operator pos:line="65" pos:column="19">&amp;&amp;<pos:position pos:line="65" pos:column="29"/></operator> <operator pos:line="65" pos:column="22">(<pos:position pos:line="65" pos:column="23"/></operator><name><name pos:line="65" pos:column="23">cset<pos:position pos:line="65" pos:column="27"/></name><operator pos:line="65" pos:column="27">-&gt;<pos:position pos:line="65" pos:column="32"/></operator><name pos:line="65" pos:column="29">ncoll_syms<pos:position pos:line="65" pos:column="39"/></name></name> <operator pos:line="65" pos:column="40">||<pos:position pos:line="65" pos:column="42"/></operator> <name><name pos:line="65" pos:column="43">cset<pos:position pos:line="65" pos:column="47"/></name><operator pos:line="65" pos:column="47">-&gt;<pos:position pos:line="65" pos:column="52"/></operator><name pos:line="65" pos:column="49">nranges<pos:position pos:line="65" pos:column="56"/></name></name><operator pos:line="65" pos:column="56">)<pos:position pos:line="65" pos:column="57"/></operator></expr>)<pos:position pos:line="65" pos:column="58"/></condition><then pos:line="65" pos:column="58">
		<block pos:line="66" pos:column="17">{
		  <decl_stmt><decl><type><specifier pos:line="67" pos:column="19">const<pos:position pos:line="67" pos:column="24"/></specifier> <name pos:line="67" pos:column="25">int32_t<pos:position pos:line="67" pos:column="32"/></name> <modifier pos:line="67" pos:column="33">*<pos:position pos:line="67" pos:column="34"/></modifier></type><name pos:line="67" pos:column="34">table<pos:position pos:line="67" pos:column="39"/></name> <init pos:line="67" pos:column="40">= <expr><operator pos:line="67" pos:column="42">(<pos:position pos:line="67" pos:column="43"/></operator><specifier pos:line="67" pos:column="43">const<pos:position pos:line="67" pos:column="48"/></specifier> <name pos:line="67" pos:column="49">int32_t<pos:position pos:line="67" pos:column="56"/></name> <operator pos:line="67" pos:column="57">*<pos:position pos:line="67" pos:column="58"/></operator><operator pos:line="67" pos:column="58">)<pos:position pos:line="67" pos:column="59"/></operator>
		    <call><name pos:line="68" pos:column="21">_NL_CURRENT<pos:position pos:line="68" pos:column="32"/></name> <argument_list pos:line="68" pos:column="33">(<argument><expr><name pos:line="68" pos:column="34">LC_COLLATE<pos:position pos:line="68" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="46">_NL_COLLATE_TABLEMB<pos:position pos:line="68" pos:column="65"/></name></expr></argument>)<pos:position pos:line="68" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="68" pos:column="67"/></decl_stmt>
		  <for pos:line="69" pos:column="19">for <control pos:line="69" pos:column="23">(<init><expr><name pos:line="69" pos:column="24">i<pos:position pos:line="69" pos:column="25"/></name> <operator pos:line="69" pos:column="26">=<pos:position pos:line="69" pos:column="27"/></operator> <literal type="number" pos:line="69" pos:column="28">0<pos:position pos:line="69" pos:column="29"/></literal></expr>;<pos:position pos:line="69" pos:column="30"/></init> <condition><expr><name pos:line="69" pos:column="31">i<pos:position pos:line="69" pos:column="32"/></name> <operator pos:line="69" pos:column="33">&lt;<pos:position pos:line="69" pos:column="37"/></operator> <name pos:line="69" pos:column="35">SBC_MAX<pos:position pos:line="69" pos:column="42"/></name></expr>;<pos:position pos:line="69" pos:column="43"/></condition> <incr><expr><operator pos:line="69" pos:column="44">++<pos:position pos:line="69" pos:column="46"/></operator><name pos:line="69" pos:column="46">i<pos:position pos:line="69" pos:column="47"/></name></expr></incr>)<pos:position pos:line="69" pos:column="48"/></control>
		    <block type="pseudo"><if pos:line="70" pos:column="21">if <condition pos:line="70" pos:column="24">(<expr><name><name pos:line="70" pos:column="25">table<pos:position pos:line="70" pos:column="30"/></name><index pos:line="70" pos:column="30">[<expr><name pos:line="70" pos:column="31">i<pos:position pos:line="70" pos:column="32"/></name></expr>]<pos:position pos:line="70" pos:column="33"/></index></name> <operator pos:line="70" pos:column="34">&lt;<pos:position pos:line="70" pos:column="38"/></operator> <literal type="number" pos:line="70" pos:column="36">0<pos:position pos:line="70" pos:column="37"/></literal></expr>)<pos:position pos:line="70" pos:column="38"/></condition><then pos:line="70" pos:column="38">
		      <block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="23">re_set_fastmap<pos:position pos:line="71" pos:column="37"/></name> <argument_list pos:line="71" pos:column="38">(<argument><expr><name pos:line="71" pos:column="39">fastmap<pos:position pos:line="71" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="48">icase<pos:position pos:line="71" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="55">i<pos:position pos:line="71" pos:column="56"/></name></expr></argument>)<pos:position pos:line="71" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="58"/></expr_stmt></block></then></if></block></for>
		}<pos:position pos:line="72" pos:column="18"/></block></then></if>
<cpp:endif pos:line="73" pos:column="1"># <cpp:directive pos:line="73" pos:column="3">endif<pos:position pos:line="73" pos:column="8"/></cpp:directive></cpp:endif> <comment type="block" pos:line="73" pos:column="9">/* _LIBC */</comment>

	  <comment type="block" pos:line="75" pos:column="11">/* See if we have to start the match at all multibyte characters,
	     i.e. where we would not find an invalid sequence.  This only
	     applies to multibyte character sets; for single byte character
	     sets, the SIMPLE_BRACKET again suffices.  */</comment>
	  <if pos:line="79" pos:column="11">if <condition pos:line="79" pos:column="14">(<expr><name><name pos:line="79" pos:column="15">dfa<pos:position pos:line="79" pos:column="18"/></name><operator pos:line="79" pos:column="18">-&gt;<pos:position pos:line="79" pos:column="23"/></operator><name pos:line="79" pos:column="20">mb_cur_max<pos:position pos:line="79" pos:column="30"/></name></name> <operator pos:line="79" pos:column="31">&gt;<pos:position pos:line="79" pos:column="35"/></operator> <literal type="number" pos:line="79" pos:column="33">1<pos:position pos:line="79" pos:column="34"/></literal>
	      <operator pos:line="80" pos:column="15">&amp;&amp;<pos:position pos:line="80" pos:column="25"/></operator> <operator pos:line="80" pos:column="18">(<pos:position pos:line="80" pos:column="19"/></operator><name><name pos:line="80" pos:column="19">cset<pos:position pos:line="80" pos:column="23"/></name><operator pos:line="80" pos:column="23">-&gt;<pos:position pos:line="80" pos:column="28"/></operator><name pos:line="80" pos:column="25">nchar_classes<pos:position pos:line="80" pos:column="38"/></name></name> <operator pos:line="80" pos:column="39">||<pos:position pos:line="80" pos:column="41"/></operator> <name><name pos:line="80" pos:column="42">cset<pos:position pos:line="80" pos:column="46"/></name><operator pos:line="80" pos:column="46">-&gt;<pos:position pos:line="80" pos:column="51"/></operator><name pos:line="80" pos:column="48">non_match<pos:position pos:line="80" pos:column="57"/></name></name> <operator pos:line="80" pos:column="58">||<pos:position pos:line="80" pos:column="60"/></operator> <name><name pos:line="80" pos:column="61">cset<pos:position pos:line="80" pos:column="65"/></name><operator pos:line="80" pos:column="65">-&gt;<pos:position pos:line="80" pos:column="70"/></operator><name pos:line="80" pos:column="67">nranges<pos:position pos:line="80" pos:column="74"/></name></name>
<cpp:ifdef pos:line="81" pos:column="1"># <cpp:directive pos:line="81" pos:column="3">ifdef<pos:position pos:line="81" pos:column="8"/></cpp:directive> <name pos:line="81" pos:column="9">_LIBC<pos:position pos:line="81" pos:column="14"/></name></cpp:ifdef>
		  <operator pos:line="82" pos:column="19">||<pos:position pos:line="82" pos:column="21"/></operator> <name><name pos:line="82" pos:column="22">cset<pos:position pos:line="82" pos:column="26"/></name><operator pos:line="82" pos:column="26">-&gt;<pos:position pos:line="82" pos:column="31"/></operator><name pos:line="82" pos:column="28">nequiv_classes<pos:position pos:line="82" pos:column="42"/></name></name>
<cpp:endif pos:line="83" pos:column="1"># <cpp:directive pos:line="83" pos:column="3">endif<pos:position pos:line="83" pos:column="8"/></cpp:directive></cpp:endif> <comment type="block" pos:line="83" pos:column="9">/* _LIBC */</comment>
		 <operator pos:line="84" pos:column="18">)<pos:position pos:line="84" pos:column="19"/></operator></expr>)<pos:position pos:line="84" pos:column="20"/></condition><then pos:line="84" pos:column="20">
	    <block pos:line="85" pos:column="13">{
	      <decl_stmt><decl><type><name pos:line="86" pos:column="15">unsigned<pos:position pos:line="86" pos:column="23"/></name> <name pos:line="86" pos:column="24">char<pos:position pos:line="86" pos:column="28"/></name></type> <name pos:line="86" pos:column="29">c<pos:position pos:line="86" pos:column="30"/></name> <init pos:line="86" pos:column="31">= <expr><literal type="number" pos:line="86" pos:column="33">0<pos:position pos:line="86" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="86" pos:column="35"/></decl_stmt>
	      <do pos:line="87" pos:column="15">do
		<block pos:line="88" pos:column="17">{
		  <decl_stmt><decl><type><name pos:line="89" pos:column="19">mbstate_t<pos:position pos:line="89" pos:column="28"/></name></type> <name pos:line="89" pos:column="29">mbs<pos:position pos:line="89" pos:column="32"/></name></decl>;<pos:position pos:line="89" pos:column="33"/></decl_stmt>
		  <expr_stmt><expr><call><name pos:line="90" pos:column="19">memset<pos:position pos:line="90" pos:column="25"/></name> <argument_list pos:line="90" pos:column="26">(<argument><expr><operator pos:line="90" pos:column="27">&amp;<pos:position pos:line="90" pos:column="32"/></operator><name pos:line="90" pos:column="28">mbs<pos:position pos:line="90" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="33">0<pos:position pos:line="90" pos:column="34"/></literal></expr></argument>, <argument><expr><sizeof pos:line="90" pos:column="36">sizeof <argument_list pos:line="90" pos:column="43">(<argument><expr><name pos:line="90" pos:column="44">mbs<pos:position pos:line="90" pos:column="47"/></name></expr></argument>)<pos:position pos:line="90" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="90" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="50"/></expr_stmt>
		  <if pos:line="91" pos:column="19">if <condition pos:line="91" pos:column="22">(<expr><call><name pos:line="91" pos:column="23">__mbrtowc<pos:position pos:line="91" pos:column="32"/></name> <argument_list pos:line="91" pos:column="33">(<argument><expr><name pos:line="91" pos:column="34">NULL<pos:position pos:line="91" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="91" pos:column="40">(<pos:position pos:line="91" pos:column="41"/></operator><name pos:line="91" pos:column="41">char<pos:position pos:line="91" pos:column="45"/></name> <operator pos:line="91" pos:column="46">*<pos:position pos:line="91" pos:column="47"/></operator><operator pos:line="91" pos:column="47">)<pos:position pos:line="91" pos:column="48"/></operator> <operator pos:line="91" pos:column="49">&amp;<pos:position pos:line="91" pos:column="54"/></operator><name pos:line="91" pos:column="50">c<pos:position pos:line="91" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="91" pos:column="53">1<pos:position pos:line="91" pos:column="54"/></literal></expr></argument>, <argument><expr><operator pos:line="91" pos:column="56">&amp;<pos:position pos:line="91" pos:column="61"/></operator><name pos:line="91" pos:column="57">mbs<pos:position pos:line="91" pos:column="60"/></name></expr></argument>)<pos:position pos:line="91" pos:column="61"/></argument_list></call> <operator pos:line="91" pos:column="62">==<pos:position pos:line="91" pos:column="64"/></operator> <operator pos:line="91" pos:column="65">(<pos:position pos:line="91" pos:column="66"/></operator><name pos:line="91" pos:column="66">size_t<pos:position pos:line="91" pos:column="72"/></name><operator pos:line="91" pos:column="72">)<pos:position pos:line="91" pos:column="73"/></operator> <operator pos:line="91" pos:column="74">-<pos:position pos:line="91" pos:column="75"/></operator><literal type="number" pos:line="91" pos:column="75">2<pos:position pos:line="91" pos:column="76"/></literal></expr>)<pos:position pos:line="91" pos:column="77"/></condition><then pos:line="91" pos:column="77">
		    <block type="pseudo"><expr_stmt><expr><call><name pos:line="92" pos:column="21">re_set_fastmap<pos:position pos:line="92" pos:column="35"/></name> <argument_list pos:line="92" pos:column="36">(<argument><expr><name pos:line="92" pos:column="37">fastmap<pos:position pos:line="92" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="92" pos:column="46">false<pos:position pos:line="92" pos:column="51"/></literal></expr></argument>, <argument><expr><operator pos:line="92" pos:column="53">(<pos:position pos:line="92" pos:column="54"/></operator><name pos:line="92" pos:column="54">int<pos:position pos:line="92" pos:column="57"/></name><operator pos:line="92" pos:column="57">)<pos:position pos:line="92" pos:column="58"/></operator> <name pos:line="92" pos:column="59">c<pos:position pos:line="92" pos:column="60"/></name></expr></argument>)<pos:position pos:line="92" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="62"/></expr_stmt></block></then></if>
		}<pos:position pos:line="93" pos:column="18"/></block>
	      while <condition pos:line="94" pos:column="21">(<expr><operator pos:line="94" pos:column="22">++<pos:position pos:line="94" pos:column="24"/></operator><name pos:line="94" pos:column="24">c<pos:position pos:line="94" pos:column="25"/></name> <operator pos:line="94" pos:column="26">!=<pos:position pos:line="94" pos:column="28"/></operator> <literal type="number" pos:line="94" pos:column="29">0<pos:position pos:line="94" pos:column="30"/></literal></expr>)<pos:position pos:line="94" pos:column="31"/></condition>;<pos:position pos:line="94" pos:column="32"/></do>
	    }<pos:position pos:line="95" pos:column="14"/></block></then>

	  <else pos:line="97" pos:column="11">else
	    <block pos:line="98" pos:column="13">{
	      <comment type="block" pos:line="99" pos:column="15">/* ... Else catch all bytes which can start the mbchars.  */</comment>
	      <for pos:line="100" pos:column="15">for <control pos:line="100" pos:column="19">(<init><expr><name pos:line="100" pos:column="20">i<pos:position pos:line="100" pos:column="21"/></name> <operator pos:line="100" pos:column="22">=<pos:position pos:line="100" pos:column="23"/></operator> <literal type="number" pos:line="100" pos:column="24">0<pos:position pos:line="100" pos:column="25"/></literal></expr>;<pos:position pos:line="100" pos:column="26"/></init> <condition><expr><name pos:line="100" pos:column="27">i<pos:position pos:line="100" pos:column="28"/></name> <operator pos:line="100" pos:column="29">&lt;<pos:position pos:line="100" pos:column="33"/></operator> <name><name pos:line="100" pos:column="31">cset<pos:position pos:line="100" pos:column="35"/></name><operator pos:line="100" pos:column="35">-&gt;<pos:position pos:line="100" pos:column="40"/></operator><name pos:line="100" pos:column="37">nmbchars<pos:position pos:line="100" pos:column="45"/></name></name></expr>;<pos:position pos:line="100" pos:column="46"/></condition> <incr><expr><operator pos:line="100" pos:column="47">++<pos:position pos:line="100" pos:column="49"/></operator><name pos:line="100" pos:column="49">i<pos:position pos:line="100" pos:column="50"/></name></expr></incr>)<pos:position pos:line="100" pos:column="51"/></control>
		<block pos:line="101" pos:column="17">{
		  <decl_stmt><decl><type><name pos:line="102" pos:column="19">char<pos:position pos:line="102" pos:column="23"/></name></type> <name><name pos:line="102" pos:column="24">buf<pos:position pos:line="102" pos:column="27"/></name><index pos:line="102" pos:column="27">[<expr><literal type="number" pos:line="102" pos:column="28">256<pos:position pos:line="102" pos:column="31"/></literal></expr>]<pos:position pos:line="102" pos:column="32"/></index></name></decl>;<pos:position pos:line="102" pos:column="33"/></decl_stmt>
		  <decl_stmt><decl><type><name pos:line="103" pos:column="19">mbstate_t<pos:position pos:line="103" pos:column="28"/></name></type> <name pos:line="103" pos:column="29">state<pos:position pos:line="103" pos:column="34"/></name></decl>;<pos:position pos:line="103" pos:column="35"/></decl_stmt>
		  <expr_stmt><expr><call><name pos:line="104" pos:column="19">memset<pos:position pos:line="104" pos:column="25"/></name> <argument_list pos:line="104" pos:column="26">(<argument><expr><operator pos:line="104" pos:column="27">&amp;<pos:position pos:line="104" pos:column="32"/></operator><name pos:line="104" pos:column="28">state<pos:position pos:line="104" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="104" pos:column="35">'\0'<pos:position pos:line="104" pos:column="39"/></literal></expr></argument>, <argument><expr><sizeof pos:line="104" pos:column="41">sizeof <argument_list pos:line="104" pos:column="48">(<argument><expr><name pos:line="104" pos:column="49">state<pos:position pos:line="104" pos:column="54"/></name></expr></argument>)<pos:position pos:line="104" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="104" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="57"/></expr_stmt>
		  <if pos:line="105" pos:column="19">if <condition pos:line="105" pos:column="22">(<expr><call><name pos:line="105" pos:column="23">__wcrtomb<pos:position pos:line="105" pos:column="32"/></name> <argument_list pos:line="105" pos:column="33">(<argument><expr><name pos:line="105" pos:column="34">buf<pos:position pos:line="105" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="105" pos:column="39">cset<pos:position pos:line="105" pos:column="43"/></name><operator pos:line="105" pos:column="43">-&gt;<pos:position pos:line="105" pos:column="48"/></operator><name pos:line="105" pos:column="45">mbchars<pos:position pos:line="105" pos:column="52"/></name><index pos:line="105" pos:column="52">[<expr><name pos:line="105" pos:column="53">i<pos:position pos:line="105" pos:column="54"/></name></expr>]<pos:position pos:line="105" pos:column="55"/></index></name></expr></argument>, <argument><expr><operator pos:line="105" pos:column="57">&amp;<pos:position pos:line="105" pos:column="62"/></operator><name pos:line="105" pos:column="58">state<pos:position pos:line="105" pos:column="63"/></name></expr></argument>)<pos:position pos:line="105" pos:column="64"/></argument_list></call> <operator pos:line="105" pos:column="65">!=<pos:position pos:line="105" pos:column="67"/></operator> <operator pos:line="105" pos:column="68">(<pos:position pos:line="105" pos:column="69"/></operator><name pos:line="105" pos:column="69">size_t<pos:position pos:line="105" pos:column="75"/></name><operator pos:line="105" pos:column="75">)<pos:position pos:line="105" pos:column="76"/></operator> <operator pos:line="105" pos:column="77">-<pos:position pos:line="105" pos:column="78"/></operator><literal type="number" pos:line="105" pos:column="78">1<pos:position pos:line="105" pos:column="79"/></literal></expr>)<pos:position pos:line="105" pos:column="80"/></condition><then pos:line="105" pos:column="80">
		    <block type="pseudo"><expr_stmt><expr><call><name pos:line="106" pos:column="21">re_set_fastmap<pos:position pos:line="106" pos:column="35"/></name> <argument_list pos:line="106" pos:column="36">(<argument><expr><name pos:line="106" pos:column="37">fastmap<pos:position pos:line="106" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="46">icase<pos:position pos:line="106" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="106" pos:column="53">*<pos:position pos:line="106" pos:column="54"/></operator><operator pos:line="106" pos:column="54">(<pos:position pos:line="106" pos:column="55"/></operator><name pos:line="106" pos:column="55">unsigned<pos:position pos:line="106" pos:column="63"/></name> <name pos:line="106" pos:column="64">char<pos:position pos:line="106" pos:column="68"/></name> <operator pos:line="106" pos:column="69">*<pos:position pos:line="106" pos:column="70"/></operator><operator pos:line="106" pos:column="70">)<pos:position pos:line="106" pos:column="71"/></operator> <name pos:line="106" pos:column="72">buf<pos:position pos:line="106" pos:column="75"/></name></expr></argument>)<pos:position pos:line="106" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="77"/></expr_stmt></block></then></if>
		  <if pos:line="107" pos:column="19">if <condition pos:line="107" pos:column="22">(<expr><operator pos:line="107" pos:column="23">(<pos:position pos:line="107" pos:column="24"/></operator><name><name pos:line="107" pos:column="24">bufp<pos:position pos:line="107" pos:column="28"/></name><operator pos:line="107" pos:column="28">-&gt;<pos:position pos:line="107" pos:column="33"/></operator><name pos:line="107" pos:column="30">syntax<pos:position pos:line="107" pos:column="36"/></name></name> <operator pos:line="107" pos:column="37">&amp;<pos:position pos:line="107" pos:column="42"/></operator> <name pos:line="107" pos:column="39">RE_ICASE<pos:position pos:line="107" pos:column="47"/></name><operator pos:line="107" pos:column="47">)<pos:position pos:line="107" pos:column="48"/></operator> <operator pos:line="107" pos:column="49">&amp;&amp;<pos:position pos:line="107" pos:column="59"/></operator> <name><name pos:line="107" pos:column="52">dfa<pos:position pos:line="107" pos:column="55"/></name><operator pos:line="107" pos:column="55">-&gt;<pos:position pos:line="107" pos:column="60"/></operator><name pos:line="107" pos:column="57">mb_cur_max<pos:position pos:line="107" pos:column="67"/></name></name> <operator pos:line="107" pos:column="68">&gt;<pos:position pos:line="107" pos:column="72"/></operator> <literal type="number" pos:line="107" pos:column="70">1<pos:position pos:line="107" pos:column="71"/></literal></expr>)<pos:position pos:line="107" pos:column="72"/></condition><then pos:line="107" pos:column="72">
		    <block pos:line="108" pos:column="21">{
		      <if pos:line="109" pos:column="23">if <condition pos:line="109" pos:column="26">(<expr><call><name pos:line="109" pos:column="27">__wcrtomb<pos:position pos:line="109" pos:column="36"/></name> <argument_list pos:line="109" pos:column="37">(<argument><expr><name pos:line="109" pos:column="38">buf<pos:position pos:line="109" pos:column="41"/></name></expr></argument>, <argument><expr><call><name pos:line="109" pos:column="43">towlower<pos:position pos:line="109" pos:column="51"/></name> <argument_list pos:line="109" pos:column="52">(<argument><expr><name><name pos:line="109" pos:column="53">cset<pos:position pos:line="109" pos:column="57"/></name><operator pos:line="109" pos:column="57">-&gt;<pos:position pos:line="109" pos:column="62"/></operator><name pos:line="109" pos:column="59">mbchars<pos:position pos:line="109" pos:column="66"/></name><index pos:line="109" pos:column="66">[<expr><name pos:line="109" pos:column="67">i<pos:position pos:line="109" pos:column="68"/></name></expr>]<pos:position pos:line="109" pos:column="69"/></index></name></expr></argument>)<pos:position pos:line="109" pos:column="70"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="109" pos:column="72">&amp;<pos:position pos:line="109" pos:column="77"/></operator><name pos:line="109" pos:column="73">state<pos:position pos:line="109" pos:column="78"/></name></expr></argument>)<pos:position pos:line="109" pos:column="79"/></argument_list></call>
			  <operator pos:line="110" pos:column="27">!=<pos:position pos:line="110" pos:column="29"/></operator> <operator pos:line="110" pos:column="30">(<pos:position pos:line="110" pos:column="31"/></operator><name pos:line="110" pos:column="31">size_t<pos:position pos:line="110" pos:column="37"/></name><operator pos:line="110" pos:column="37">)<pos:position pos:line="110" pos:column="38"/></operator> <operator pos:line="110" pos:column="39">-<pos:position pos:line="110" pos:column="40"/></operator><literal type="number" pos:line="110" pos:column="40">1<pos:position pos:line="110" pos:column="41"/></literal></expr>)<pos:position pos:line="110" pos:column="42"/></condition><then pos:line="110" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="111" pos:column="25">re_set_fastmap<pos:position pos:line="111" pos:column="39"/></name> <argument_list pos:line="111" pos:column="40">(<argument><expr><name pos:line="111" pos:column="41">fastmap<pos:position pos:line="111" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="111" pos:column="50">false<pos:position pos:line="111" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="111" pos:column="57">*<pos:position pos:line="111" pos:column="58"/></operator><operator pos:line="111" pos:column="58">(<pos:position pos:line="111" pos:column="59"/></operator><name pos:line="111" pos:column="59">unsigned<pos:position pos:line="111" pos:column="67"/></name> <name pos:line="111" pos:column="68">char<pos:position pos:line="111" pos:column="72"/></name> <operator pos:line="111" pos:column="73">*<pos:position pos:line="111" pos:column="74"/></operator><operator pos:line="111" pos:column="74">)<pos:position pos:line="111" pos:column="75"/></operator> <name pos:line="111" pos:column="76">buf<pos:position pos:line="111" pos:column="79"/></name></expr></argument>)<pos:position pos:line="111" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="81"/></expr_stmt></block></then></if>
		    }<pos:position pos:line="112" pos:column="22"/></block></then></if>
		}<pos:position pos:line="113" pos:column="18"/></block></for>
	    }<pos:position pos:line="114" pos:column="14"/></block></else></if>
	}<pos:position pos:line="115" pos:column="10"/></block></then></if></elseif>
<cpp:endif pos:line="116" pos:column="1">#<cpp:directive pos:line="116" pos:column="2">endif<pos:position pos:line="116" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="116" pos:column="8">/* RE_ENABLE_I18N */</comment>
      <elseif pos:line="117" pos:column="7">else <if pos:line="117" pos:column="12">if <condition pos:line="117" pos:column="15">(<expr><name pos:line="117" pos:column="16">type<pos:position pos:line="117" pos:column="20"/></name> <operator pos:line="117" pos:column="21">==<pos:position pos:line="117" pos:column="23"/></operator> <name pos:line="117" pos:column="24">OP_PERIOD<pos:position pos:line="117" pos:column="33"/></name>
<cpp:ifdef pos:line="118" pos:column="1">#<cpp:directive pos:line="118" pos:column="2">ifdef<pos:position pos:line="118" pos:column="7"/></cpp:directive> <name pos:line="118" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="118" pos:column="22"/></name></cpp:ifdef>
	       <operator pos:line="119" pos:column="16">||<pos:position pos:line="119" pos:column="18"/></operator> <name pos:line="119" pos:column="19">type<pos:position pos:line="119" pos:column="23"/></name> <operator pos:line="119" pos:column="24">==<pos:position pos:line="119" pos:column="26"/></operator> <name pos:line="119" pos:column="27">OP_UTF8_PERIOD<pos:position pos:line="119" pos:column="41"/></name>
<cpp:endif pos:line="120" pos:column="1">#<cpp:directive pos:line="120" pos:column="2">endif<pos:position pos:line="120" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="120" pos:column="8">/* RE_ENABLE_I18N */</comment>
	       <operator pos:line="121" pos:column="16">||<pos:position pos:line="121" pos:column="18"/></operator> <name pos:line="121" pos:column="19">type<pos:position pos:line="121" pos:column="23"/></name> <operator pos:line="121" pos:column="24">==<pos:position pos:line="121" pos:column="26"/></operator> <name pos:line="121" pos:column="27">END_OF_RE<pos:position pos:line="121" pos:column="36"/></name></expr>)<pos:position pos:line="121" pos:column="37"/></condition><then pos:line="121" pos:column="37">
	<block pos:line="122" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="123" pos:column="11">memset<pos:position pos:line="123" pos:column="17"/></name> <argument_list pos:line="123" pos:column="18">(<argument><expr><name pos:line="123" pos:column="19">fastmap<pos:position pos:line="123" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="123" pos:column="28">'\1'<pos:position pos:line="123" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="123" pos:column="34">sizeof <argument_list pos:line="123" pos:column="41">(<argument><expr><name pos:line="123" pos:column="42">char<pos:position pos:line="123" pos:column="46"/></name></expr></argument>)<pos:position pos:line="123" pos:column="47"/></argument_list></sizeof> <operator pos:line="123" pos:column="48">*<pos:position pos:line="123" pos:column="49"/></operator> <name pos:line="123" pos:column="50">SBC_MAX<pos:position pos:line="123" pos:column="57"/></name></expr></argument>)<pos:position pos:line="123" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="59"/></expr_stmt>
	  <if pos:line="124" pos:column="11">if <condition pos:line="124" pos:column="14">(<expr><name pos:line="124" pos:column="15">type<pos:position pos:line="124" pos:column="19"/></name> <operator pos:line="124" pos:column="20">==<pos:position pos:line="124" pos:column="22"/></operator> <name pos:line="124" pos:column="23">END_OF_RE<pos:position pos:line="124" pos:column="32"/></name></expr>)<pos:position pos:line="124" pos:column="33"/></condition><then pos:line="124" pos:column="33">
	    <block type="pseudo"><expr_stmt><expr><name><name pos:line="125" pos:column="13">bufp<pos:position pos:line="125" pos:column="17"/></name><operator pos:line="125" pos:column="17">-&gt;<pos:position pos:line="125" pos:column="22"/></operator><name pos:line="125" pos:column="19">can_be_null<pos:position pos:line="125" pos:column="30"/></name></name> <operator pos:line="125" pos:column="31">=<pos:position pos:line="125" pos:column="32"/></operator> <literal type="number" pos:line="125" pos:column="33">1<pos:position pos:line="125" pos:column="34"/></literal></expr>;<pos:position pos:line="125" pos:column="35"/></expr_stmt></block></then></if>
	  <return pos:line="126" pos:column="11">return;<pos:position pos:line="126" pos:column="18"/></return>
	}<pos:position pos:line="127" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="128" pos:column="6"/></block></for>
}<pos:position pos:line="129" pos:column="2"/></block></function></unit>
