<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3154_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">async_query_available_blobs<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">cmd<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="50">struct<pos:position pos:line="1" pos:column="56"/></name> <name pos:line="1" pos:column="57">string_list<pos:position pos:line="1" pos:column="68"/></name></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">available_paths<pos:position pos:line="1" pos:column="85"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="86"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">err<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">line<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">cmd2process<pos:position pos:line="5" pos:column="27"/></name></name> <modifier pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></modifier></type><name pos:line="5" pos:column="29">entry<pos:position pos:line="5" pos:column="34"/></name></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">child_process<pos:position pos:line="6" pos:column="29"/></name></name> <modifier pos:line="6" pos:column="30">*<pos:position pos:line="6" pos:column="31"/></modifier></type><name pos:line="6" pos:column="31">process<pos:position pos:line="6" pos:column="38"/></name></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">strbuf<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">filter_status<pos:position pos:line="7" pos:column="36"/></name> <init pos:line="7" pos:column="37">= <expr><name pos:line="7" pos:column="39">STRBUF_INIT<pos:position pos:line="7" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="51"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">assert<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">subprocess_map_initialized<pos:position pos:line="9" pos:column="42"/></name></expr></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name pos:line="10" pos:column="9">entry<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <operator pos:line="10" pos:column="17">(<pos:position pos:line="10" pos:column="18"/></operator>struct <name pos:line="10" pos:column="25">cmd2process<pos:position pos:line="10" pos:column="36"/></name> <operator pos:line="10" pos:column="37">*<pos:position pos:line="10" pos:column="38"/></operator><operator pos:line="10" pos:column="38">)<pos:position pos:line="10" pos:column="39"/></operator><call><name pos:line="10" pos:column="39">subprocess_find_entry<pos:position pos:line="10" pos:column="60"/></name><argument_list pos:line="10" pos:column="60">(<argument><expr><operator pos:line="10" pos:column="61">&amp;<pos:position pos:line="10" pos:column="66"/></operator><name pos:line="10" pos:column="62">subprocess_map<pos:position pos:line="10" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="78">cmd<pos:position pos:line="10" pos:column="81"/></name></expr></argument>)<pos:position pos:line="10" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="83"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">entry<pos:position pos:line="11" pos:column="19"/></name></expr>)<pos:position pos:line="11" pos:column="20"/></condition><then pos:line="11" pos:column="20"> <block pos:line="11" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">error<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><literal type="string" pos:line="12" pos:column="23">"external filter '%s' is not available anymore although "<pos:position pos:line="12" pos:column="80"/></literal>
		      <literal type="string" pos:line="13" pos:column="23">"not all paths have been filtered"<pos:position pos:line="13" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="59">cmd<pos:position pos:line="13" pos:column="62"/></name></expr></argument>)<pos:position pos:line="13" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="64"/></expr_stmt>
		<return pos:line="14" pos:column="17">return <expr><literal type="number" pos:line="14" pos:column="24">0<pos:position pos:line="14" pos:column="25"/></literal></expr>;<pos:position pos:line="14" pos:column="26"/></return>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="16" pos:column="9">process<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <operator pos:line="16" pos:column="19">&amp;<pos:position pos:line="16" pos:column="24"/></operator><name><name pos:line="16" pos:column="20">entry<pos:position pos:line="16" pos:column="25"/></name><operator pos:line="16" pos:column="25">-&gt;<pos:position pos:line="16" pos:column="30"/></operator><name pos:line="16" pos:column="27">subprocess<pos:position pos:line="16" pos:column="37"/></name><operator pos:line="16" pos:column="37">.<pos:position pos:line="16" pos:column="38"/></operator><name pos:line="16" pos:column="38">process<pos:position pos:line="16" pos:column="45"/></name></name></expr>;<pos:position pos:line="16" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">sigchain_push<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><name pos:line="17" pos:column="23">SIGPIPE<pos:position pos:line="17" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="32">SIG_IGN<pos:position pos:line="17" pos:column="39"/></name></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><name pos:line="19" pos:column="9">err<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <call><name pos:line="19" pos:column="15">packet_write_fmt_gently<pos:position pos:line="19" pos:column="38"/></name><argument_list pos:line="19" pos:column="38">(
		<argument><expr><name><name pos:line="20" pos:column="17">process<pos:position pos:line="20" pos:column="24"/></name><operator pos:line="20" pos:column="24">-&gt;<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="26">in<pos:position pos:line="20" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="30">"command=list_available_blobs\n"<pos:position pos:line="20" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="64"/></expr_stmt>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">err<pos:position pos:line="21" pos:column="16"/></name></expr>)<pos:position pos:line="21" pos:column="17"/></condition><then pos:line="21" pos:column="17">
		<block type="pseudo"><goto pos:line="22" pos:column="17">goto <name pos:line="22" pos:column="22">done<pos:position pos:line="22" pos:column="26"/></name>;<pos:position pos:line="22" pos:column="27"/></goto></block></then></if>

	<expr_stmt><expr><name pos:line="24" pos:column="9">err<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <call><name pos:line="24" pos:column="15">packet_flush_gently<pos:position pos:line="24" pos:column="34"/></name><argument_list pos:line="24" pos:column="34">(<argument><expr><name><name pos:line="24" pos:column="35">process<pos:position pos:line="24" pos:column="42"/></name><operator pos:line="24" pos:column="42">-&gt;<pos:position pos:line="24" pos:column="47"/></operator><name pos:line="24" pos:column="44">in<pos:position pos:line="24" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="48"/></expr_stmt>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">err<pos:position pos:line="25" pos:column="16"/></name></expr>)<pos:position pos:line="25" pos:column="17"/></condition><then pos:line="25" pos:column="17">
		<block type="pseudo"><goto pos:line="26" pos:column="17">goto <name pos:line="26" pos:column="22">done<pos:position pos:line="26" pos:column="26"/></name>;<pos:position pos:line="26" pos:column="27"/></goto></block></then></if>

	<while pos:line="28" pos:column="9">while <condition pos:line="28" pos:column="15">(<expr><operator pos:line="28" pos:column="16">(<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="17">line<pos:position pos:line="28" pos:column="21"/></name> <operator pos:line="28" pos:column="22">=<pos:position pos:line="28" pos:column="23"/></operator> <call><name pos:line="28" pos:column="24">packet_read_line<pos:position pos:line="28" pos:column="40"/></name><argument_list pos:line="28" pos:column="40">(<argument><expr><name><name pos:line="28" pos:column="41">process<pos:position pos:line="28" pos:column="48"/></name><operator pos:line="28" pos:column="48">-&gt;<pos:position pos:line="28" pos:column="53"/></operator><name pos:line="28" pos:column="50">out<pos:position pos:line="28" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="55">NULL<pos:position pos:line="28" pos:column="59"/></name></expr></argument>)<pos:position pos:line="28" pos:column="60"/></argument_list></call><operator pos:line="28" pos:column="60">)<pos:position pos:line="28" pos:column="61"/></operator></expr>)<pos:position pos:line="28" pos:column="62"/></condition> <block pos:line="28" pos:column="63">{
		<decl_stmt><decl><type><specifier pos:line="29" pos:column="17">const<pos:position pos:line="29" pos:column="22"/></specifier> <name pos:line="29" pos:column="23">char<pos:position pos:line="29" pos:column="27"/></name> <modifier pos:line="29" pos:column="28">*<pos:position pos:line="29" pos:column="29"/></modifier></type><name pos:line="29" pos:column="29">path<pos:position pos:line="29" pos:column="33"/></name></decl>;<pos:position pos:line="29" pos:column="34"/></decl_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><call><name pos:line="30" pos:column="21">skip_prefix<pos:position pos:line="30" pos:column="32"/></name><argument_list pos:line="30" pos:column="32">(<argument><expr><name pos:line="30" pos:column="33">line<pos:position pos:line="30" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="39">"pathname="<pos:position pos:line="30" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="30" pos:column="52">&amp;<pos:position pos:line="30" pos:column="57"/></operator><name pos:line="30" pos:column="53">path<pos:position pos:line="30" pos:column="57"/></name></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="59"/></condition><then pos:line="30" pos:column="59">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="25">string_list_insert<pos:position pos:line="31" pos:column="43"/></name><argument_list pos:line="31" pos:column="43">(<argument><expr><name pos:line="31" pos:column="44">available_paths<pos:position pos:line="31" pos:column="59"/></name></expr></argument>, <argument><expr><call><name pos:line="31" pos:column="61">xstrdup<pos:position pos:line="31" pos:column="68"/></name><argument_list pos:line="31" pos:column="68">(<argument><expr><name pos:line="31" pos:column="69">path<pos:position pos:line="31" pos:column="73"/></name></expr></argument>)<pos:position pos:line="31" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="76"/></expr_stmt></block></then>
		<else pos:line="32" pos:column="17">else
			<block type="pseudo"><empty_stmt pos:line="33" pos:column="25">;<pos:position pos:line="33" pos:column="26"/></empty_stmt></block></else></if> <comment type="block" pos:line="33" pos:column="27">/* ignore unknown keys */</comment>
	}<pos:position pos:line="34" pos:column="10"/></block></while>

	<expr_stmt><expr><name pos:line="36" pos:column="9">err<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <call><name pos:line="36" pos:column="15">subprocess_read_status<pos:position pos:line="36" pos:column="37"/></name><argument_list pos:line="36" pos:column="37">(<argument><expr><name><name pos:line="36" pos:column="38">process<pos:position pos:line="36" pos:column="45"/></name><operator pos:line="36" pos:column="45">-&gt;<pos:position pos:line="36" pos:column="50"/></operator><name pos:line="36" pos:column="47">out<pos:position pos:line="36" pos:column="50"/></name></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="52">&amp;<pos:position pos:line="36" pos:column="57"/></operator><name pos:line="36" pos:column="53">filter_status<pos:position pos:line="36" pos:column="66"/></name></expr></argument>)<pos:position pos:line="36" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="68"/></expr_stmt>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">err<pos:position pos:line="37" pos:column="16"/></name></expr>)<pos:position pos:line="37" pos:column="17"/></condition><then pos:line="37" pos:column="17">
		<block type="pseudo"><goto pos:line="38" pos:column="17">goto <name pos:line="38" pos:column="22">done<pos:position pos:line="38" pos:column="26"/></name>;<pos:position pos:line="38" pos:column="27"/></goto></block></then></if>

	<expr_stmt><expr><name pos:line="40" pos:column="9">err<pos:position pos:line="40" pos:column="12"/></name> <operator pos:line="40" pos:column="13">=<pos:position pos:line="40" pos:column="14"/></operator> <call><name pos:line="40" pos:column="15">strcmp<pos:position pos:line="40" pos:column="21"/></name><argument_list pos:line="40" pos:column="21">(<argument><expr><name><name pos:line="40" pos:column="22">filter_status<pos:position pos:line="40" pos:column="35"/></name><operator pos:line="40" pos:column="35">.<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="36">buf<pos:position pos:line="40" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="41">"success"<pos:position pos:line="40" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="52"/></expr_stmt>

<label><name pos:line="42" pos:column="1">done<pos:position pos:line="42" pos:column="5"/></name>:<pos:position pos:line="42" pos:column="6"/></label>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">sigchain_pop<pos:position pos:line="43" pos:column="21"/></name><argument_list pos:line="43" pos:column="21">(<argument><expr><name pos:line="43" pos:column="22">SIGPIPE<pos:position pos:line="43" pos:column="29"/></name></expr></argument>)<pos:position pos:line="43" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="31"/></expr_stmt>

	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">err<pos:position pos:line="45" pos:column="16"/></name></expr>)<pos:position pos:line="45" pos:column="17"/></condition><then pos:line="45" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="17">handle_filter_error<pos:position pos:line="46" pos:column="36"/></name><argument_list pos:line="46" pos:column="36">(<argument><expr><operator pos:line="46" pos:column="37">&amp;<pos:position pos:line="46" pos:column="42"/></operator><name pos:line="46" pos:column="38">filter_status<pos:position pos:line="46" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="53">entry<pos:position pos:line="46" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="60">0<pos:position pos:line="46" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="63"/></expr_stmt></block></then></if>
	<return pos:line="47" pos:column="9">return <expr><operator pos:line="47" pos:column="16">!<pos:position pos:line="47" pos:column="17"/></operator><name pos:line="47" pos:column="17">err<pos:position pos:line="47" pos:column="20"/></name></expr>;<pos:position pos:line="47" pos:column="21"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
