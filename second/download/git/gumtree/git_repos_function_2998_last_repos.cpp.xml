<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2998_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">save_head<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">const<pos:position pos:line="1" pos:column="27"/></specifier> <name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">head<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name><name pos:line="3" pos:column="16">struct<pos:position pos:line="3" pos:column="22"/></name> <name pos:line="3" pos:column="23">lock_file<pos:position pos:line="3" pos:column="32"/></name></name></type> <name pos:line="3" pos:column="33">head_lock<pos:position pos:line="3" pos:column="42"/></name></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">buf<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><name pos:line="4" pos:column="29">STRBUF_INIT<pos:position pos:line="4" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">fd<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">fd<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <call><name pos:line="7" pos:column="14">hold_lock_file_for_update<pos:position pos:line="7" pos:column="39"/></name><argument_list pos:line="7" pos:column="39">(<argument><expr><operator pos:line="7" pos:column="40">&amp;<pos:position pos:line="7" pos:column="45"/></operator><name pos:line="7" pos:column="41">head_lock<pos:position pos:line="7" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="7" pos:column="52">git_path_head_file<pos:position pos:line="7" pos:column="70"/></name><argument_list pos:line="7" pos:column="70">()<pos:position pos:line="7" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="74">0<pos:position pos:line="7" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="77"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">fd<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">&lt;<pos:position pos:line="8" pos:column="20"/></operator> <literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr>)<pos:position pos:line="8" pos:column="20"/></condition><then pos:line="8" pos:column="20"> <block pos:line="8" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">rollback_lock_file<pos:position pos:line="9" pos:column="35"/></name><argument_list pos:line="9" pos:column="35">(<argument><expr><operator pos:line="9" pos:column="36">&amp;<pos:position pos:line="9" pos:column="41"/></operator><name pos:line="9" pos:column="37">head_lock<pos:position pos:line="9" pos:column="46"/></name></expr></argument>)<pos:position pos:line="9" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="48"/></expr_stmt>
		<return pos:line="10" pos:column="17">return <expr><call><name pos:line="10" pos:column="24">error_errno<pos:position pos:line="10" pos:column="35"/></name><argument_list pos:line="10" pos:column="35">(<argument><expr><call><name pos:line="10" pos:column="36">_<pos:position pos:line="10" pos:column="37"/></name><argument_list pos:line="10" pos:column="37">(<argument><expr><literal type="string" pos:line="10" pos:column="38">"could not lock HEAD"<pos:position pos:line="10" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="62"/></return>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">strbuf_addf<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><operator pos:line="12" pos:column="21">&amp;<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="22">buf<pos:position pos:line="12" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="27">"%s\n"<pos:position pos:line="12" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="35">head<pos:position pos:line="12" pos:column="39"/></name></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">write_in_full<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">(<argument><expr><name pos:line="13" pos:column="27">fd<pos:position pos:line="13" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="31">buf<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">.<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="35">buf<pos:position pos:line="13" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="40">buf<pos:position pos:line="13" pos:column="43"/></name><operator pos:line="13" pos:column="43">.<pos:position pos:line="13" pos:column="44"/></operator><name pos:line="13" pos:column="44">len<pos:position pos:line="13" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="48"/></argument_list></call> <operator pos:line="13" pos:column="49">&lt;<pos:position pos:line="13" pos:column="53"/></operator> <literal type="number" pos:line="13" pos:column="51">0<pos:position pos:line="13" pos:column="52"/></literal></expr>)<pos:position pos:line="13" pos:column="53"/></condition><then pos:line="13" pos:column="53"> <block pos:line="13" pos:column="54">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">rollback_lock_file<pos:position pos:line="14" pos:column="35"/></name><argument_list pos:line="14" pos:column="35">(<argument><expr><operator pos:line="14" pos:column="36">&amp;<pos:position pos:line="14" pos:column="41"/></operator><name pos:line="14" pos:column="37">head_lock<pos:position pos:line="14" pos:column="46"/></name></expr></argument>)<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt>
		<return pos:line="15" pos:column="17">return <expr><call><name pos:line="15" pos:column="24">error_errno<pos:position pos:line="15" pos:column="35"/></name><argument_list pos:line="15" pos:column="35">(<argument><expr><call><name pos:line="15" pos:column="36">_<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><literal type="string" pos:line="15" pos:column="38">"could not write to '%s'"<pos:position pos:line="15" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="64"/></argument_list></call></expr></argument>,
				   <argument><expr><call><name pos:line="16" pos:column="36">git_path_head_file<pos:position pos:line="16" pos:column="54"/></name><argument_list pos:line="16" pos:column="54">()<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="58"/></return>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><call><name pos:line="18" pos:column="13">commit_lock_file<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><operator pos:line="18" pos:column="30">&amp;<pos:position pos:line="18" pos:column="35"/></operator><name pos:line="18" pos:column="31">head_lock<pos:position pos:line="18" pos:column="40"/></name></expr></argument>)<pos:position pos:line="18" pos:column="41"/></argument_list></call> <operator pos:line="18" pos:column="42">&lt;<pos:position pos:line="18" pos:column="46"/></operator> <literal type="number" pos:line="18" pos:column="44">0<pos:position pos:line="18" pos:column="45"/></literal></expr>)<pos:position pos:line="18" pos:column="46"/></condition><then pos:line="18" pos:column="46"> <block pos:line="18" pos:column="47">{
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">rollback_lock_file<pos:position pos:line="19" pos:column="35"/></name><argument_list pos:line="19" pos:column="35">(<argument><expr><operator pos:line="19" pos:column="36">&amp;<pos:position pos:line="19" pos:column="41"/></operator><name pos:line="19" pos:column="37">head_lock<pos:position pos:line="19" pos:column="46"/></name></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="48"/></expr_stmt>
		<return pos:line="20" pos:column="17">return <expr><call><name pos:line="20" pos:column="24">error<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><call><name pos:line="20" pos:column="30">_<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><literal type="string" pos:line="20" pos:column="32">"failed to finalize '%s'."<pos:position pos:line="20" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="61">git_path_head_file<pos:position pos:line="20" pos:column="79"/></name><argument_list pos:line="20" pos:column="79">()<pos:position pos:line="20" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="83"/></return>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>
	<return pos:line="22" pos:column="9">return <expr><literal type="number" pos:line="22" pos:column="16">0<pos:position pos:line="22" pos:column="17"/></literal></expr>;<pos:position pos:line="22" pos:column="18"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
