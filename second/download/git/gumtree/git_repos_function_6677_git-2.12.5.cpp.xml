<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6677_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">sub_epsilon_src_nodes<pos:position pos:line="3" pos:column="22"/></name> <parameter_list pos:line="3" pos:column="23">(<parameter><decl><type><specifier pos:line="3" pos:column="24">const<pos:position pos:line="3" pos:column="29"/></specifier> <name pos:line="3" pos:column="30">re_dfa_t<pos:position pos:line="3" pos:column="38"/></name> <modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier></type><name pos:line="3" pos:column="40">dfa<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="45">int<pos:position pos:line="3" pos:column="48"/></name></type> <name pos:line="3" pos:column="49">node<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="55">re_node_set<pos:position pos:line="3" pos:column="66"/></name> <modifier pos:line="3" pos:column="67">*<pos:position pos:line="3" pos:column="68"/></modifier></type><name pos:line="3" pos:column="68">dest_nodes<pos:position pos:line="3" pos:column="78"/></name></decl></parameter>,
		       <parameter><decl><type><specifier pos:line="4" pos:column="24">const<pos:position pos:line="4" pos:column="29"/></specifier> <name pos:line="4" pos:column="30">re_node_set<pos:position pos:line="4" pos:column="41"/></name> <modifier pos:line="4" pos:column="42">*<pos:position pos:line="4" pos:column="43"/></modifier></type><name pos:line="4" pos:column="43">candidates<pos:position pos:line="4" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="54"/></parameter_list>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">ecl_idx<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">reg_errcode_t<pos:position pos:line="7" pos:column="18"/></name></type> <name pos:line="7" pos:column="19">err<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">re_node_set<pos:position pos:line="8" pos:column="16"/></name> <modifier pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></modifier></type><name pos:line="8" pos:column="18">inv_eclosure<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= <expr><name><name pos:line="8" pos:column="33">dfa<pos:position pos:line="8" pos:column="36"/></name><operator pos:line="8" pos:column="36">-&gt;<pos:position pos:line="8" pos:column="41"/></operator><name pos:line="8" pos:column="38">inveclosures<pos:position pos:line="8" pos:column="50"/></name></name> <operator pos:line="8" pos:column="51">+<pos:position pos:line="8" pos:column="52"/></operator> <name pos:line="8" pos:column="53">node<pos:position pos:line="8" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="58"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">re_node_set<pos:position pos:line="9" pos:column="16"/></name></type> <name pos:line="9" pos:column="17">except_nodes<pos:position pos:line="9" pos:column="29"/></name></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">re_node_set_init_empty<pos:position pos:line="10" pos:column="27"/></name> <argument_list pos:line="10" pos:column="28">(<argument><expr><operator pos:line="10" pos:column="29">&amp;<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="30">except_nodes<pos:position pos:line="10" pos:column="42"/></name></expr></argument>)<pos:position pos:line="10" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="44"/></expr_stmt>
    <for pos:line="11" pos:column="5">for <control pos:line="11" pos:column="9">(<init><expr><name pos:line="11" pos:column="10">ecl_idx<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">=<pos:position pos:line="11" pos:column="19"/></operator> <literal type="number" pos:line="11" pos:column="20">0<pos:position pos:line="11" pos:column="21"/></literal></expr>;<pos:position pos:line="11" pos:column="22"/></init> <condition><expr><name pos:line="11" pos:column="23">ecl_idx<pos:position pos:line="11" pos:column="30"/></name> <operator pos:line="11" pos:column="31">&lt;<pos:position pos:line="11" pos:column="35"/></operator> <name><name pos:line="11" pos:column="33">inv_eclosure<pos:position pos:line="11" pos:column="45"/></name><operator pos:line="11" pos:column="45">-&gt;<pos:position pos:line="11" pos:column="50"/></operator><name pos:line="11" pos:column="47">nelem<pos:position pos:line="11" pos:column="52"/></name></name></expr>;<pos:position pos:line="11" pos:column="53"/></condition> <incr><expr><operator pos:line="11" pos:column="54">++<pos:position pos:line="11" pos:column="56"/></operator><name pos:line="11" pos:column="56">ecl_idx<pos:position pos:line="11" pos:column="63"/></name></expr></incr>)<pos:position pos:line="11" pos:column="64"/></control>
      <block pos:line="12" pos:column="7">{
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">cur_node<pos:position pos:line="13" pos:column="21"/></name> <init pos:line="13" pos:column="22">= <expr><name><name pos:line="13" pos:column="24">inv_eclosure<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">-&gt;<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="38">elems<pos:position pos:line="13" pos:column="43"/></name><index pos:line="13" pos:column="43">[<expr><name pos:line="13" pos:column="44">ecl_idx<pos:position pos:line="13" pos:column="51"/></name></expr>]<pos:position pos:line="13" pos:column="52"/></index></name></expr></init></decl>;<pos:position pos:line="13" pos:column="53"/></decl_stmt>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">cur_node<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">==<pos:position pos:line="14" pos:column="24"/></operator> <name pos:line="14" pos:column="25">node<pos:position pos:line="14" pos:column="29"/></name></expr>)<pos:position pos:line="14" pos:column="30"/></condition><then pos:line="14" pos:column="30">
	  <block type="pseudo"><continue pos:line="15" pos:column="11">continue;<pos:position pos:line="15" pos:column="20"/></continue></block></then></if>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><call><name pos:line="16" pos:column="13">IS_EPSILON_NODE<pos:position pos:line="16" pos:column="28"/></name> <argument_list pos:line="16" pos:column="29">(<argument><expr><name><name pos:line="16" pos:column="30">dfa<pos:position pos:line="16" pos:column="33"/></name><operator pos:line="16" pos:column="33">-&gt;<pos:position pos:line="16" pos:column="38"/></operator><name pos:line="16" pos:column="35">nodes<pos:position pos:line="16" pos:column="40"/></name><index pos:line="16" pos:column="40">[<expr><name pos:line="16" pos:column="41">cur_node<pos:position pos:line="16" pos:column="49"/></name></expr>]<pos:position pos:line="16" pos:column="50"/></index></name><operator pos:line="16" pos:column="50">.<pos:position pos:line="16" pos:column="51"/></operator><name pos:line="16" pos:column="51">type<pos:position pos:line="16" pos:column="55"/></name></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="57"/></condition><then pos:line="16" pos:column="57">
	  <block pos:line="17" pos:column="11">{
	    <decl_stmt><decl><type><name pos:line="18" pos:column="13">int<pos:position pos:line="18" pos:column="16"/></name></type> <name pos:line="18" pos:column="17">edst1<pos:position pos:line="18" pos:column="22"/></name> <init pos:line="18" pos:column="23">= <expr><name><name pos:line="18" pos:column="25">dfa<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">-&gt;<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="30">edests<pos:position pos:line="18" pos:column="36"/></name><index pos:line="18" pos:column="36">[<expr><name pos:line="18" pos:column="37">cur_node<pos:position pos:line="18" pos:column="45"/></name></expr>]<pos:position pos:line="18" pos:column="46"/></index></name><operator pos:line="18" pos:column="46">.<pos:position pos:line="18" pos:column="47"/></operator><name><name pos:line="18" pos:column="47">elems<pos:position pos:line="18" pos:column="52"/></name><index pos:line="18" pos:column="52">[<expr><literal type="number" pos:line="18" pos:column="53">0<pos:position pos:line="18" pos:column="54"/></literal></expr>]<pos:position pos:line="18" pos:column="55"/></index></name></expr></init></decl>;<pos:position pos:line="18" pos:column="56"/></decl_stmt>
	    <decl_stmt><decl><type><name pos:line="19" pos:column="13">int<pos:position pos:line="19" pos:column="16"/></name></type> <name pos:line="19" pos:column="17">edst2<pos:position pos:line="19" pos:column="22"/></name> <init pos:line="19" pos:column="23">= <expr><operator pos:line="19" pos:column="25">(<pos:position pos:line="19" pos:column="26"/></operator><ternary><condition><expr><operator pos:line="19" pos:column="26">(<pos:position pos:line="19" pos:column="27"/></operator><name><name pos:line="19" pos:column="27">dfa<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">-&gt;<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="32">edests<pos:position pos:line="19" pos:column="38"/></name><index pos:line="19" pos:column="38">[<expr><name pos:line="19" pos:column="39">cur_node<pos:position pos:line="19" pos:column="47"/></name></expr>]<pos:position pos:line="19" pos:column="48"/></index></name><operator pos:line="19" pos:column="48">.<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="49">nelem<pos:position pos:line="19" pos:column="54"/></name> <operator pos:line="19" pos:column="55">&gt;<pos:position pos:line="19" pos:column="59"/></operator> <literal type="number" pos:line="19" pos:column="57">1<pos:position pos:line="19" pos:column="58"/></literal><operator pos:line="19" pos:column="58">)<pos:position pos:line="19" pos:column="59"/></operator></expr>
			 ?<pos:position pos:line="20" pos:column="27"/></condition><then pos:line="20" pos:column="27"> <expr><name><name pos:line="20" pos:column="28">dfa<pos:position pos:line="20" pos:column="31"/></name><operator pos:line="20" pos:column="31">-&gt;<pos:position pos:line="20" pos:column="36"/></operator><name pos:line="20" pos:column="33">edests<pos:position pos:line="20" pos:column="39"/></name><index pos:line="20" pos:column="39">[<expr><name pos:line="20" pos:column="40">cur_node<pos:position pos:line="20" pos:column="48"/></name></expr>]<pos:position pos:line="20" pos:column="49"/></index></name><operator pos:line="20" pos:column="49">.<pos:position pos:line="20" pos:column="50"/></operator><name><name pos:line="20" pos:column="50">elems<pos:position pos:line="20" pos:column="55"/></name><index pos:line="20" pos:column="55">[<expr><literal type="number" pos:line="20" pos:column="56">1<pos:position pos:line="20" pos:column="57"/></literal></expr>]<pos:position pos:line="20" pos:column="58"/></index></name></expr> <pos:position pos:line="20" pos:column="59"/></then><else pos:line="20" pos:column="59">: <expr><operator pos:line="20" pos:column="61">-<pos:position pos:line="20" pos:column="62"/></operator><literal type="number" pos:line="20" pos:column="62">1<pos:position pos:line="20" pos:column="63"/></literal></expr></else></ternary><operator pos:line="20" pos:column="63">)<pos:position pos:line="20" pos:column="64"/></operator></expr></init></decl>;<pos:position pos:line="20" pos:column="65"/></decl_stmt>
	    <if pos:line="21" pos:column="13">if <condition pos:line="21" pos:column="16">(<expr><operator pos:line="21" pos:column="17">(<pos:position pos:line="21" pos:column="18"/></operator><operator pos:line="21" pos:column="18">!<pos:position pos:line="21" pos:column="19"/></operator><call><name pos:line="21" pos:column="19">re_node_set_contains<pos:position pos:line="21" pos:column="39"/></name> <argument_list pos:line="21" pos:column="40">(<argument><expr><name pos:line="21" pos:column="41">inv_eclosure<pos:position pos:line="21" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="55">edst1<pos:position pos:line="21" pos:column="60"/></name></expr></argument>)<pos:position pos:line="21" pos:column="61"/></argument_list></call>
		 <operator pos:line="22" pos:column="18">&amp;&amp;<pos:position pos:line="22" pos:column="28"/></operator> <call><name pos:line="22" pos:column="21">re_node_set_contains<pos:position pos:line="22" pos:column="41"/></name> <argument_list pos:line="22" pos:column="42">(<argument><expr><name pos:line="22" pos:column="43">dest_nodes<pos:position pos:line="22" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="55">edst1<pos:position pos:line="22" pos:column="60"/></name></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></call><operator pos:line="22" pos:column="61">)<pos:position pos:line="22" pos:column="62"/></operator>
		<operator pos:line="23" pos:column="17">||<pos:position pos:line="23" pos:column="19"/></operator> <operator pos:line="23" pos:column="20">(<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="21">edst2<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">&gt;<pos:position pos:line="23" pos:column="31"/></operator> <literal type="number" pos:line="23" pos:column="29">0<pos:position pos:line="23" pos:column="30"/></literal>
		    <operator pos:line="24" pos:column="21">&amp;&amp;<pos:position pos:line="24" pos:column="31"/></operator> <operator pos:line="24" pos:column="24">!<pos:position pos:line="24" pos:column="25"/></operator><call><name pos:line="24" pos:column="25">re_node_set_contains<pos:position pos:line="24" pos:column="45"/></name> <argument_list pos:line="24" pos:column="46">(<argument><expr><name pos:line="24" pos:column="47">inv_eclosure<pos:position pos:line="24" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="61">edst2<pos:position pos:line="24" pos:column="66"/></name></expr></argument>)<pos:position pos:line="24" pos:column="67"/></argument_list></call>
		    <operator pos:line="25" pos:column="21">&amp;&amp;<pos:position pos:line="25" pos:column="31"/></operator> <call><name pos:line="25" pos:column="24">re_node_set_contains<pos:position pos:line="25" pos:column="44"/></name> <argument_list pos:line="25" pos:column="45">(<argument><expr><name pos:line="25" pos:column="46">dest_nodes<pos:position pos:line="25" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="58">edst2<pos:position pos:line="25" pos:column="63"/></name></expr></argument>)<pos:position pos:line="25" pos:column="64"/></argument_list></call><operator pos:line="25" pos:column="64">)<pos:position pos:line="25" pos:column="65"/></operator></expr>)<pos:position pos:line="25" pos:column="66"/></condition><then pos:line="25" pos:column="66">
	      <block pos:line="26" pos:column="15">{
		<expr_stmt><expr><name pos:line="27" pos:column="17">err<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <call><name pos:line="27" pos:column="23">re_node_set_add_intersect<pos:position pos:line="27" pos:column="48"/></name> <argument_list pos:line="27" pos:column="49">(<argument><expr><operator pos:line="27" pos:column="50">&amp;<pos:position pos:line="27" pos:column="55"/></operator><name pos:line="27" pos:column="51">except_nodes<pos:position pos:line="27" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="65">candidates<pos:position pos:line="27" pos:column="75"/></name></expr></argument>,
						 <argument><expr><name><name pos:line="28" pos:column="50">dfa<pos:position pos:line="28" pos:column="53"/></name><operator pos:line="28" pos:column="53">-&gt;<pos:position pos:line="28" pos:column="58"/></operator><name pos:line="28" pos:column="55">inveclosures<pos:position pos:line="28" pos:column="67"/></name></name> <operator pos:line="28" pos:column="68">+<pos:position pos:line="28" pos:column="69"/></operator> <name pos:line="28" pos:column="70">cur_node<pos:position pos:line="28" pos:column="78"/></name></expr></argument>)<pos:position pos:line="28" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="80"/></expr_stmt>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><call><name pos:line="29" pos:column="21">BE<pos:position pos:line="29" pos:column="23"/></name> <argument_list pos:line="29" pos:column="24">(<argument><expr><name pos:line="29" pos:column="25">err<pos:position pos:line="29" pos:column="28"/></name> <operator pos:line="29" pos:column="29">!=<pos:position pos:line="29" pos:column="31"/></operator> <name pos:line="29" pos:column="32">REG_NOERROR<pos:position pos:line="29" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="45">0<pos:position pos:line="29" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="48"/></condition><then pos:line="29" pos:column="48">
		  <block pos:line="30" pos:column="19">{
		    <expr_stmt><expr><call><name pos:line="31" pos:column="21">re_node_set_free<pos:position pos:line="31" pos:column="37"/></name> <argument_list pos:line="31" pos:column="38">(<argument><expr><operator pos:line="31" pos:column="39">&amp;<pos:position pos:line="31" pos:column="44"/></operator><name pos:line="31" pos:column="40">except_nodes<pos:position pos:line="31" pos:column="52"/></name></expr></argument>)<pos:position pos:line="31" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="54"/></expr_stmt>
		    <return pos:line="32" pos:column="21">return <expr><name pos:line="32" pos:column="28">err<pos:position pos:line="32" pos:column="31"/></name></expr>;<pos:position pos:line="32" pos:column="32"/></return>
		  }<pos:position pos:line="33" pos:column="20"/></block></then></if>
	      }<pos:position pos:line="34" pos:column="16"/></block></then></if>
	  }<pos:position pos:line="35" pos:column="12"/></block></then></if>
      }<pos:position pos:line="36" pos:column="8"/></block></for>
    <for pos:line="37" pos:column="5">for <control pos:line="37" pos:column="9">(<init><expr><name pos:line="37" pos:column="10">ecl_idx<pos:position pos:line="37" pos:column="17"/></name> <operator pos:line="37" pos:column="18">=<pos:position pos:line="37" pos:column="19"/></operator> <literal type="number" pos:line="37" pos:column="20">0<pos:position pos:line="37" pos:column="21"/></literal></expr>;<pos:position pos:line="37" pos:column="22"/></init> <condition><expr><name pos:line="37" pos:column="23">ecl_idx<pos:position pos:line="37" pos:column="30"/></name> <operator pos:line="37" pos:column="31">&lt;<pos:position pos:line="37" pos:column="35"/></operator> <name><name pos:line="37" pos:column="33">inv_eclosure<pos:position pos:line="37" pos:column="45"/></name><operator pos:line="37" pos:column="45">-&gt;<pos:position pos:line="37" pos:column="50"/></operator><name pos:line="37" pos:column="47">nelem<pos:position pos:line="37" pos:column="52"/></name></name></expr>;<pos:position pos:line="37" pos:column="53"/></condition> <incr><expr><operator pos:line="37" pos:column="54">++<pos:position pos:line="37" pos:column="56"/></operator><name pos:line="37" pos:column="56">ecl_idx<pos:position pos:line="37" pos:column="63"/></name></expr></incr>)<pos:position pos:line="37" pos:column="64"/></control>
      <block pos:line="38" pos:column="7">{
	<decl_stmt><decl><type><name pos:line="39" pos:column="9">int<pos:position pos:line="39" pos:column="12"/></name></type> <name pos:line="39" pos:column="13">cur_node<pos:position pos:line="39" pos:column="21"/></name> <init pos:line="39" pos:column="22">= <expr><name><name pos:line="39" pos:column="24">inv_eclosure<pos:position pos:line="39" pos:column="36"/></name><operator pos:line="39" pos:column="36">-&gt;<pos:position pos:line="39" pos:column="41"/></operator><name pos:line="39" pos:column="38">elems<pos:position pos:line="39" pos:column="43"/></name><index pos:line="39" pos:column="43">[<expr><name pos:line="39" pos:column="44">ecl_idx<pos:position pos:line="39" pos:column="51"/></name></expr>]<pos:position pos:line="39" pos:column="52"/></index></name></expr></init></decl>;<pos:position pos:line="39" pos:column="53"/></decl_stmt>
	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><operator pos:line="40" pos:column="13">!<pos:position pos:line="40" pos:column="14"/></operator><call><name pos:line="40" pos:column="14">re_node_set_contains<pos:position pos:line="40" pos:column="34"/></name> <argument_list pos:line="40" pos:column="35">(<argument><expr><operator pos:line="40" pos:column="36">&amp;<pos:position pos:line="40" pos:column="41"/></operator><name pos:line="40" pos:column="37">except_nodes<pos:position pos:line="40" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="51">cur_node<pos:position pos:line="40" pos:column="59"/></name></expr></argument>)<pos:position pos:line="40" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="61"/></condition><then pos:line="40" pos:column="61">
	  <block pos:line="41" pos:column="11">{
	    <decl_stmt><decl><type><name pos:line="42" pos:column="13">int<pos:position pos:line="42" pos:column="16"/></name></type> <name pos:line="42" pos:column="17">idx<pos:position pos:line="42" pos:column="20"/></name> <init pos:line="42" pos:column="21">= <expr><call><name pos:line="42" pos:column="23">re_node_set_contains<pos:position pos:line="42" pos:column="43"/></name> <argument_list pos:line="42" pos:column="44">(<argument><expr><name pos:line="42" pos:column="45">dest_nodes<pos:position pos:line="42" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="57">cur_node<pos:position pos:line="42" pos:column="65"/></name></expr></argument>)<pos:position pos:line="42" pos:column="66"/></argument_list></call> <operator pos:line="42" pos:column="67">-<pos:position pos:line="42" pos:column="68"/></operator> <literal type="number" pos:line="42" pos:column="69">1<pos:position pos:line="42" pos:column="70"/></literal></expr></init></decl>;<pos:position pos:line="42" pos:column="71"/></decl_stmt>
	    <expr_stmt><expr><call><name pos:line="43" pos:column="13">re_node_set_remove_at<pos:position pos:line="43" pos:column="34"/></name> <argument_list pos:line="43" pos:column="35">(<argument><expr><name pos:line="43" pos:column="36">dest_nodes<pos:position pos:line="43" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="48">idx<pos:position pos:line="43" pos:column="51"/></name></expr></argument>)<pos:position pos:line="43" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="53"/></expr_stmt>
	  }<pos:position pos:line="44" pos:column="12"/></block></then></if>
      }<pos:position pos:line="45" pos:column="8"/></block></for>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">re_node_set_free<pos:position pos:line="46" pos:column="21"/></name> <argument_list pos:line="46" pos:column="22">(<argument><expr><operator pos:line="46" pos:column="23">&amp;<pos:position pos:line="46" pos:column="28"/></operator><name pos:line="46" pos:column="24">except_nodes<pos:position pos:line="46" pos:column="36"/></name></expr></argument>)<pos:position pos:line="46" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="38"/></expr_stmt>
    <return pos:line="47" pos:column="5">return <expr><name pos:line="47" pos:column="12">REG_NOERROR<pos:position pos:line="47" pos:column="23"/></name></expr>;<pos:position pos:line="47" pos:column="24"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
