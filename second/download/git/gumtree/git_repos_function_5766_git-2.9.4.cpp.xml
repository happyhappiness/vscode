<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5766_git-2.9.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">show<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name pos:line="1" pos:column="17">int<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">argc<pos:position pos:line="1" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier><modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">argv<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">prefix<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">object_ref<pos:position pos:line="3" pos:column="31"/></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">notes_tree<pos:position pos:line="4" pos:column="26"/></name></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="28">t<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">char<pos:position pos:line="5" pos:column="22"/></name></type> <name><name pos:line="5" pos:column="23">object<pos:position pos:line="5" pos:column="29"/></name><index pos:line="5" pos:column="29">[<expr><literal type="number" pos:line="5" pos:column="30">20<pos:position pos:line="5" pos:column="32"/></literal></expr>]<pos:position pos:line="5" pos:column="33"/></index></name></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">unsigned<pos:position pos:line="6" pos:column="23"/></name> <name pos:line="6" pos:column="24">char<pos:position pos:line="6" pos:column="28"/></name> <modifier pos:line="6" pos:column="29">*<pos:position pos:line="6" pos:column="30"/></modifier></type><name pos:line="6" pos:column="30">note<pos:position pos:line="6" pos:column="34"/></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">retval<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">option<pos:position pos:line="8" pos:column="22"/></name></name></type> <name><name pos:line="8" pos:column="23">options<pos:position pos:line="8" pos:column="30"/></name><index pos:line="8" pos:column="30">[]<pos:position pos:line="8" pos:column="32"/></index></name> <init pos:line="8" pos:column="33">= <expr><block pos:line="8" pos:column="35">{
		<macro><name pos:line="9" pos:column="17">OPT_END<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">()<pos:position pos:line="9" pos:column="26"/></argument_list></macro>
	}<pos:position pos:line="10" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="10" pos:column="11"/></decl_stmt>

	<expr_stmt><expr><name pos:line="12" pos:column="9">argc<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <call><name pos:line="12" pos:column="16">parse_options<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><name pos:line="12" pos:column="30">argc<pos:position pos:line="12" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="36">argv<pos:position pos:line="12" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="42">prefix<pos:position pos:line="12" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="50">options<pos:position pos:line="12" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="59">git_notes_show_usage<pos:position pos:line="12" pos:column="79"/></name></expr></argument>,
			     <argument><expr><literal type="number" pos:line="13" pos:column="30">0<pos:position pos:line="13" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><literal type="number" pos:line="15" pos:column="13">1<pos:position pos:line="15" pos:column="14"/></literal> <operator pos:line="15" pos:column="15">&lt;<pos:position pos:line="15" pos:column="19"/></operator> <name pos:line="15" pos:column="17">argc<pos:position pos:line="15" pos:column="21"/></name></expr>)<pos:position pos:line="15" pos:column="22"/></condition><then pos:line="15" pos:column="22"> <block pos:line="15" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">error<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><call><name pos:line="16" pos:column="23">_<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><literal type="string" pos:line="16" pos:column="25">"too many parameters"<pos:position pos:line="16" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="49"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">usage_with_options<pos:position pos:line="17" pos:column="35"/></name><argument_list pos:line="17" pos:column="35">(<argument><expr><name pos:line="17" pos:column="36">git_notes_show_usage<pos:position pos:line="17" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="58">options<pos:position pos:line="17" pos:column="65"/></name></expr></argument>)<pos:position pos:line="17" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="67"/></expr_stmt>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="20" pos:column="9">object_ref<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <ternary><condition><expr><name pos:line="20" pos:column="22">argc<pos:position pos:line="20" pos:column="26"/></name></expr> ?<pos:position pos:line="20" pos:column="28"/></condition><then pos:line="20" pos:column="28"> <expr><name><name pos:line="20" pos:column="29">argv<pos:position pos:line="20" pos:column="33"/></name><index pos:line="20" pos:column="33">[<expr><literal type="number" pos:line="20" pos:column="34">0<pos:position pos:line="20" pos:column="35"/></literal></expr>]<pos:position pos:line="20" pos:column="36"/></index></name></expr> <pos:position pos:line="20" pos:column="37"/></then><else pos:line="20" pos:column="37">: <expr><literal type="string" pos:line="20" pos:column="39">"HEAD"<pos:position pos:line="20" pos:column="45"/></literal></expr></else></ternary></expr>;<pos:position pos:line="20" pos:column="46"/></expr_stmt>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><call><name pos:line="22" pos:column="13">get_sha1<pos:position pos:line="22" pos:column="21"/></name><argument_list pos:line="22" pos:column="21">(<argument><expr><name pos:line="22" pos:column="22">object_ref<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="34">object<pos:position pos:line="22" pos:column="40"/></name></expr></argument>)<pos:position pos:line="22" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="42"/></condition><then pos:line="22" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="17">die<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><call><name pos:line="23" pos:column="21">_<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">(<argument><expr><literal type="string" pos:line="23" pos:column="23">"Failed to resolve '%s' as a valid ref."<pos:position pos:line="23" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="23" pos:column="66">object_ref<pos:position pos:line="23" pos:column="76"/></name></expr></argument>)<pos:position pos:line="23" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="78"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="25" pos:column="9">t<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <call><name pos:line="25" pos:column="13">init_notes_check<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><literal type="string" pos:line="25" pos:column="30">"show"<pos:position pos:line="25" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="38">0<pos:position pos:line="25" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">note<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">=<pos:position pos:line="26" pos:column="15"/></operator> <call><name pos:line="26" pos:column="16">get_note<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><name pos:line="26" pos:column="25">t<pos:position pos:line="26" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="28">object<pos:position pos:line="26" pos:column="34"/></name></expr></argument>)<pos:position pos:line="26" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>

	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><operator pos:line="28" pos:column="13">!<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">note<pos:position pos:line="28" pos:column="18"/></name></expr>)<pos:position pos:line="28" pos:column="19"/></condition><then pos:line="28" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="17">retval<pos:position pos:line="29" pos:column="23"/></name> <operator pos:line="29" pos:column="24">=<pos:position pos:line="29" pos:column="25"/></operator> <call><name pos:line="29" pos:column="26">error<pos:position pos:line="29" pos:column="31"/></name><argument_list pos:line="29" pos:column="31">(<argument><expr><call><name pos:line="29" pos:column="32">_<pos:position pos:line="29" pos:column="33"/></name><argument_list pos:line="29" pos:column="33">(<argument><expr><literal type="string" pos:line="29" pos:column="34">"No note found for object %s."<pos:position pos:line="29" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="65"/></argument_list></call></expr></argument>,
			       <argument><expr><call><name pos:line="30" pos:column="32">sha1_to_hex<pos:position pos:line="30" pos:column="43"/></name><argument_list pos:line="30" pos:column="43">(<argument><expr><name pos:line="30" pos:column="44">object<pos:position pos:line="30" pos:column="50"/></name></expr></argument>)<pos:position pos:line="30" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="53"/></expr_stmt></block></then>
	<else pos:line="31" pos:column="9">else <block pos:line="31" pos:column="14">{
		<decl_stmt><decl><type><specifier pos:line="32" pos:column="17">const<pos:position pos:line="32" pos:column="22"/></specifier> <name pos:line="32" pos:column="23">char<pos:position pos:line="32" pos:column="27"/></name> <modifier pos:line="32" pos:column="28">*<pos:position pos:line="32" pos:column="29"/></modifier></type><name><name pos:line="32" pos:column="29">show_args<pos:position pos:line="32" pos:column="38"/></name><index pos:line="32" pos:column="38">[<expr><literal type="number" pos:line="32" pos:column="39">3<pos:position pos:line="32" pos:column="40"/></literal></expr>]<pos:position pos:line="32" pos:column="41"/></index></name> <init pos:line="32" pos:column="42">= <expr><block pos:line="32" pos:column="44">{<expr><literal type="string" pos:line="32" pos:column="45">"show"<pos:position pos:line="32" pos:column="51"/></literal></expr>, <expr><call><name pos:line="32" pos:column="53">sha1_to_hex<pos:position pos:line="32" pos:column="64"/></name><argument_list pos:line="32" pos:column="64">(<argument><expr><name pos:line="32" pos:column="65">note<pos:position pos:line="32" pos:column="69"/></name></expr></argument>)<pos:position pos:line="32" pos:column="70"/></argument_list></call></expr>, <expr><name pos:line="32" pos:column="72">NULL<pos:position pos:line="32" pos:column="76"/></name></expr>}<pos:position pos:line="32" pos:column="77"/></block></expr></init></decl>;<pos:position pos:line="32" pos:column="78"/></decl_stmt>
		<expr_stmt><expr><name pos:line="33" pos:column="17">retval<pos:position pos:line="33" pos:column="23"/></name> <operator pos:line="33" pos:column="24">=<pos:position pos:line="33" pos:column="25"/></operator> <call><name pos:line="33" pos:column="26">execv_git_cmd<pos:position pos:line="33" pos:column="39"/></name><argument_list pos:line="33" pos:column="39">(<argument><expr><name pos:line="33" pos:column="40">show_args<pos:position pos:line="33" pos:column="49"/></name></expr></argument>)<pos:position pos:line="33" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">free_notes<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><name pos:line="35" pos:column="20">t<pos:position pos:line="35" pos:column="21"/></name></expr></argument>)<pos:position pos:line="35" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="23"/></expr_stmt>
	<return pos:line="36" pos:column="9">return <expr><name pos:line="36" pos:column="16">retval<pos:position pos:line="36" pos:column="22"/></name></expr>;<pos:position pos:line="36" pos:column="23"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
