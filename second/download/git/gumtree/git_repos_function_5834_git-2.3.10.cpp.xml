<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5834_git-2.3.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">build_trtable<pos:position pos:line="3" pos:column="14"/></name> <parameter_list pos:line="3" pos:column="15">(<parameter><decl><type><specifier pos:line="3" pos:column="16">const<pos:position pos:line="3" pos:column="21"/></specifier> <name pos:line="3" pos:column="22">re_dfa_t<pos:position pos:line="3" pos:column="30"/></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier></type><name pos:line="3" pos:column="32">dfa<pos:position pos:line="3" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="37">re_dfastate_t<pos:position pos:line="3" pos:column="50"/></name> <modifier pos:line="3" pos:column="51">*<pos:position pos:line="3" pos:column="52"/></modifier></type><name pos:line="3" pos:column="52">state<pos:position pos:line="3" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="58"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">reg_errcode_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">err<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">i<pos:position pos:line="6" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="10">j<pos:position pos:line="6" pos:column="11"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="13">ch<pos:position pos:line="6" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="17">need_word_trtable<pos:position pos:line="6" pos:column="34"/></name> <init pos:line="6" pos:column="35">= <expr><literal type="number" pos:line="6" pos:column="37">0<pos:position pos:line="6" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">bitset_word_t<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">elem<pos:position pos:line="7" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="23">mask<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">bool<pos:position pos:line="8" pos:column="7"/></name></type> <name pos:line="8" pos:column="8">dests_node_malloced<pos:position pos:line="8" pos:column="27"/></name> <init pos:line="8" pos:column="28">= <expr><literal type="boolean" pos:line="8" pos:column="30">false<pos:position pos:line="8" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">bool<pos:position pos:line="9" pos:column="7"/></name></type> <name pos:line="9" pos:column="8">dest_states_malloced<pos:position pos:line="9" pos:column="28"/></name> <init pos:line="9" pos:column="29">= <expr><literal type="boolean" pos:line="9" pos:column="31">false<pos:position pos:line="9" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">ndests<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt> <comment type="block" pos:line="10" pos:column="15">/* Number of the destination states from `state'.  */</comment>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">re_dfastate_t<pos:position pos:line="11" pos:column="16"/></name> <modifier pos:line="11" pos:column="17">*<pos:position pos:line="11" pos:column="18"/></modifier><modifier pos:line="11" pos:column="18">*<pos:position pos:line="11" pos:column="19"/></modifier></type><name pos:line="11" pos:column="19">trtable<pos:position pos:line="11" pos:column="26"/></name></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">re_dfastate_t<pos:position pos:line="12" pos:column="16"/></name> <modifier pos:line="12" pos:column="17">*<pos:position pos:line="12" pos:column="18"/></modifier><modifier pos:line="12" pos:column="18">*<pos:position pos:line="12" pos:column="19"/></modifier></type><name pos:line="12" pos:column="19">dest_states<pos:position pos:line="12" pos:column="30"/></name> <init pos:line="12" pos:column="31">= <expr><name pos:line="12" pos:column="33">NULL<pos:position pos:line="12" pos:column="37"/></name></expr></init></decl>, <modifier pos:line="12" pos:column="39">*<pos:position pos:line="12" pos:column="40"/></modifier><modifier pos:line="12" pos:column="40">*<pos:position pos:line="12" pos:column="41"/></modifier><decl><type ref="prev"/><name pos:line="12" pos:column="41">dest_states_word<pos:position pos:line="12" pos:column="57"/></name></decl>, <modifier pos:line="12" pos:column="59">*<pos:position pos:line="12" pos:column="60"/></modifier><modifier pos:line="12" pos:column="60">*<pos:position pos:line="12" pos:column="61"/></modifier><decl><type ref="prev"/><name pos:line="12" pos:column="61">dest_states_nl<pos:position pos:line="12" pos:column="75"/></name></decl>;<pos:position pos:line="12" pos:column="76"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="13" pos:column="3">re_node_set<pos:position pos:line="13" pos:column="14"/></name></type> <name pos:line="13" pos:column="15">follows<pos:position pos:line="13" pos:column="22"/></name></decl>, <modifier pos:line="13" pos:column="24">*<pos:position pos:line="13" pos:column="25"/></modifier><decl><type ref="prev"/><name pos:line="13" pos:column="25">dests_node<pos:position pos:line="13" pos:column="35"/></name></decl>;<pos:position pos:line="13" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="14" pos:column="3">bitset_t<pos:position pos:line="14" pos:column="11"/></name> <modifier pos:line="14" pos:column="12">*<pos:position pos:line="14" pos:column="13"/></modifier></type><name pos:line="14" pos:column="13">dests_ch<pos:position pos:line="14" pos:column="21"/></name></decl>;<pos:position pos:line="14" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">bitset_t<pos:position pos:line="15" pos:column="11"/></name></type> <name pos:line="15" pos:column="12">acceptable<pos:position pos:line="15" pos:column="22"/></name></decl>;<pos:position pos:line="15" pos:column="23"/></decl_stmt>

  <struct pos:line="17" pos:column="3">struct <name pos:line="17" pos:column="10">dests_alloc<pos:position pos:line="17" pos:column="21"/></name>
  <block pos:line="18" pos:column="3">{<public type="default" pos:line="18" pos:column="4">
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">re_node_set<pos:position pos:line="19" pos:column="16"/></name></type> <name><name pos:line="19" pos:column="17">dests_node<pos:position pos:line="19" pos:column="27"/></name><index pos:line="19" pos:column="27">[<expr><name pos:line="19" pos:column="28">SBC_MAX<pos:position pos:line="19" pos:column="35"/></name></expr>]<pos:position pos:line="19" pos:column="36"/></index></name></decl>;<pos:position pos:line="19" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">bitset_t<pos:position pos:line="20" pos:column="13"/></name></type> <name><name pos:line="20" pos:column="14">dests_ch<pos:position pos:line="20" pos:column="22"/></name><index pos:line="20" pos:column="22">[<expr><name pos:line="20" pos:column="23">SBC_MAX<pos:position pos:line="20" pos:column="30"/></name></expr>]<pos:position pos:line="20" pos:column="31"/></index></name></decl>;<pos:position pos:line="20" pos:column="32"/></decl_stmt>
  <pos:position pos:line="21" pos:column="3"/></public>}<pos:position pos:line="21" pos:column="4"/></block> <decl><modifier pos:line="21" pos:column="5">*<pos:position pos:line="21" pos:column="6"/></modifier><name pos:line="21" pos:column="6">dests_alloc<pos:position pos:line="21" pos:column="17"/></name></decl>;<pos:position pos:line="21" pos:column="18"/></struct>

  <comment type="block" pos:line="23" pos:column="3">/* We build DFA states which corresponds to the destination nodes
     from `state'.  `dests_node[i]' represents the nodes which i-th
     destination state contains, and `dests_ch[i]' represents the
     characters which i-th destination state accepts.  */</comment>
<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef<pos:position pos:line="27" pos:column="7"/></cpp:directive> <name pos:line="27" pos:column="8">HAVE_ALLOCA<pos:position pos:line="27" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="28" pos:column="3">if <condition pos:line="28" pos:column="6">(<expr><call><name pos:line="28" pos:column="7">__libc_use_alloca<pos:position pos:line="28" pos:column="24"/></name> <argument_list pos:line="28" pos:column="25">(<argument><expr><sizeof pos:line="28" pos:column="26">sizeof <argument_list pos:line="28" pos:column="33">(<argument><expr pos:line="28" pos:column="34">struct <name pos:line="28" pos:column="41">dests_alloc<pos:position pos:line="28" pos:column="52"/></name></expr></argument>)<pos:position pos:line="28" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="55"/></condition><then pos:line="28" pos:column="55">
    <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="5">dests_alloc<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">=<pos:position pos:line="29" pos:column="18"/></operator> <operator pos:line="29" pos:column="19">(<pos:position pos:line="29" pos:column="20"/></operator>struct <name pos:line="29" pos:column="27">dests_alloc<pos:position pos:line="29" pos:column="38"/></name> <operator pos:line="29" pos:column="39">*<pos:position pos:line="29" pos:column="40"/></operator><operator pos:line="29" pos:column="40">)<pos:position pos:line="29" pos:column="41"/></operator> <call><name pos:line="29" pos:column="42">alloca<pos:position pos:line="29" pos:column="48"/></name> <argument_list pos:line="29" pos:column="49">(<argument><expr><sizeof pos:line="29" pos:column="50">sizeof <argument_list pos:line="29" pos:column="57">(<argument><expr pos:line="29" pos:column="58">struct <name pos:line="29" pos:column="65">dests_alloc<pos:position pos:line="29" pos:column="76"/></name></expr></argument>)<pos:position pos:line="29" pos:column="77"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="79"/></expr_stmt></block></then>
  <else pos:line="30" pos:column="3">else
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>
    <block pos:line="32" pos:column="5">{
      <expr_stmt><expr><name pos:line="33" pos:column="7">dests_alloc<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">=<pos:position pos:line="33" pos:column="20"/></operator> <call><name pos:line="33" pos:column="21">re_malloc<pos:position pos:line="33" pos:column="30"/></name> <argument_list pos:line="33" pos:column="31">(<argument><expr pos:line="33" pos:column="32">struct <name pos:line="33" pos:column="39">dests_alloc<pos:position pos:line="33" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="52">1<pos:position pos:line="33" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt>
      <if pos:line="34" pos:column="7">if <condition pos:line="34" pos:column="10">(<expr><call><name pos:line="34" pos:column="11">BE<pos:position pos:line="34" pos:column="13"/></name> <argument_list pos:line="34" pos:column="14">(<argument><expr><name pos:line="34" pos:column="15">dests_alloc<pos:position pos:line="34" pos:column="26"/></name> <operator pos:line="34" pos:column="27">==<pos:position pos:line="34" pos:column="29"/></operator> <name pos:line="34" pos:column="30">NULL<pos:position pos:line="34" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="36">0<pos:position pos:line="34" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="39"/></condition><then pos:line="34" pos:column="39">
	<block type="pseudo"><return pos:line="35" pos:column="9">return <expr><literal type="number" pos:line="35" pos:column="16">0<pos:position pos:line="35" pos:column="17"/></literal></expr>;<pos:position pos:line="35" pos:column="18"/></return></block></then></if>
      <expr_stmt><expr><name pos:line="36" pos:column="7">dests_node_malloced<pos:position pos:line="36" pos:column="26"/></name> <operator pos:line="36" pos:column="27">=<pos:position pos:line="36" pos:column="28"/></operator> <literal type="boolean" pos:line="36" pos:column="29">true<pos:position pos:line="36" pos:column="33"/></literal></expr>;<pos:position pos:line="36" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></else></if>
  <expr_stmt><expr><name pos:line="38" pos:column="3">dests_node<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">=<pos:position pos:line="38" pos:column="15"/></operator> <name><name pos:line="38" pos:column="16">dests_alloc<pos:position pos:line="38" pos:column="27"/></name><operator pos:line="38" pos:column="27">-&gt;<pos:position pos:line="38" pos:column="32"/></operator><name pos:line="38" pos:column="29">dests_node<pos:position pos:line="38" pos:column="39"/></name></name></expr>;<pos:position pos:line="38" pos:column="40"/></expr_stmt>
  <expr_stmt><expr><name pos:line="39" pos:column="3">dests_ch<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator> <name><name pos:line="39" pos:column="14">dests_alloc<pos:position pos:line="39" pos:column="25"/></name><operator pos:line="39" pos:column="25">-&gt;<pos:position pos:line="39" pos:column="30"/></operator><name pos:line="39" pos:column="27">dests_ch<pos:position pos:line="39" pos:column="35"/></name></name></expr>;<pos:position pos:line="39" pos:column="36"/></expr_stmt>

  <comment type="block" pos:line="41" pos:column="3">/* Initialize transiton table.  */</comment>
  <expr_stmt><expr><name><name pos:line="42" pos:column="3">state<pos:position pos:line="42" pos:column="8"/></name><operator pos:line="42" pos:column="8">-&gt;<pos:position pos:line="42" pos:column="13"/></operator><name pos:line="42" pos:column="10">word_trtable<pos:position pos:line="42" pos:column="22"/></name></name> <operator pos:line="42" pos:column="23">=<pos:position pos:line="42" pos:column="24"/></operator> <name><name pos:line="42" pos:column="25">state<pos:position pos:line="42" pos:column="30"/></name><operator pos:line="42" pos:column="30">-&gt;<pos:position pos:line="42" pos:column="35"/></operator><name pos:line="42" pos:column="32">trtable<pos:position pos:line="42" pos:column="39"/></name></name> <operator pos:line="42" pos:column="40">=<pos:position pos:line="42" pos:column="41"/></operator> <name pos:line="42" pos:column="42">NULL<pos:position pos:line="42" pos:column="46"/></name></expr>;<pos:position pos:line="42" pos:column="47"/></expr_stmt>

  <comment type="block" pos:line="44" pos:column="3">/* At first, group all nodes belonging to `state' into several
     destinations.  */</comment>
  <expr_stmt><expr><name pos:line="46" pos:column="3">ndests<pos:position pos:line="46" pos:column="9"/></name> <operator pos:line="46" pos:column="10">=<pos:position pos:line="46" pos:column="11"/></operator> <call><name pos:line="46" pos:column="12">group_nodes_into_DFAstates<pos:position pos:line="46" pos:column="38"/></name> <argument_list pos:line="46" pos:column="39">(<argument><expr><name pos:line="46" pos:column="40">dfa<pos:position pos:line="46" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="45">state<pos:position pos:line="46" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="52">dests_node<pos:position pos:line="46" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="64">dests_ch<pos:position pos:line="46" pos:column="72"/></name></expr></argument>)<pos:position pos:line="46" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="74"/></expr_stmt>
  <if pos:line="47" pos:column="3">if <condition pos:line="47" pos:column="6">(<expr><call><name pos:line="47" pos:column="7">BE<pos:position pos:line="47" pos:column="9"/></name> <argument_list pos:line="47" pos:column="10">(<argument><expr><name pos:line="47" pos:column="11">ndests<pos:position pos:line="47" pos:column="17"/></name> <operator pos:line="47" pos:column="18">&lt;=<pos:position pos:line="47" pos:column="23"/></operator> <literal type="number" pos:line="47" pos:column="21">0<pos:position pos:line="47" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="24">0<pos:position pos:line="47" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="27"/></condition><then pos:line="47" pos:column="27">
    <block pos:line="48" pos:column="5">{
      <if pos:line="49" pos:column="7">if <condition pos:line="49" pos:column="10">(<expr><name pos:line="49" pos:column="11">dests_node_malloced<pos:position pos:line="49" pos:column="30"/></name></expr>)<pos:position pos:line="49" pos:column="31"/></condition><then pos:line="49" pos:column="31">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="9">free<pos:position pos:line="50" pos:column="13"/></name> <argument_list pos:line="50" pos:column="14">(<argument><expr><name pos:line="50" pos:column="15">dests_alloc<pos:position pos:line="50" pos:column="26"/></name></expr></argument>)<pos:position pos:line="50" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="28"/></expr_stmt></block></then></if>
      <comment type="block" pos:line="51" pos:column="7">/* Return 0 in case of an error, 1 otherwise.  */</comment>
      <if pos:line="52" pos:column="7">if <condition pos:line="52" pos:column="10">(<expr><name pos:line="52" pos:column="11">ndests<pos:position pos:line="52" pos:column="17"/></name> <operator pos:line="52" pos:column="18">==<pos:position pos:line="52" pos:column="20"/></operator> <literal type="number" pos:line="52" pos:column="21">0<pos:position pos:line="52" pos:column="22"/></literal></expr>)<pos:position pos:line="52" pos:column="23"/></condition><then pos:line="52" pos:column="23">
	<block pos:line="53" pos:column="9">{
	  <expr_stmt><expr><name><name pos:line="54" pos:column="11">state<pos:position pos:line="54" pos:column="16"/></name><operator pos:line="54" pos:column="16">-&gt;<pos:position pos:line="54" pos:column="21"/></operator><name pos:line="54" pos:column="18">trtable<pos:position pos:line="54" pos:column="25"/></name></name> <operator pos:line="54" pos:column="26">=<pos:position pos:line="54" pos:column="27"/></operator> <operator pos:line="54" pos:column="28">(<pos:position pos:line="54" pos:column="29"/></operator><name pos:line="54" pos:column="29">re_dfastate_t<pos:position pos:line="54" pos:column="42"/></name> <operator pos:line="54" pos:column="43">*<pos:position pos:line="54" pos:column="44"/></operator><operator pos:line="54" pos:column="44">*<pos:position pos:line="54" pos:column="45"/></operator><operator pos:line="54" pos:column="45">)<pos:position pos:line="54" pos:column="46"/></operator>
	    <call><name pos:line="55" pos:column="13">calloc<pos:position pos:line="55" pos:column="19"/></name> <argument_list pos:line="55" pos:column="20">(<argument><expr><sizeof pos:line="55" pos:column="21">sizeof <argument_list pos:line="55" pos:column="28">(<argument><expr><name pos:line="55" pos:column="29">re_dfastate_t<pos:position pos:line="55" pos:column="42"/></name> <operator pos:line="55" pos:column="43">*<pos:position pos:line="55" pos:column="44"/></operator></expr></argument>)<pos:position pos:line="55" pos:column="45"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="55" pos:column="47">SBC_MAX<pos:position pos:line="55" pos:column="54"/></name></expr></argument>)<pos:position pos:line="55" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="56"/></expr_stmt>
	  <return pos:line="56" pos:column="11">return <expr><literal type="number" pos:line="56" pos:column="18">1<pos:position pos:line="56" pos:column="19"/></literal></expr>;<pos:position pos:line="56" pos:column="20"/></return>
	}<pos:position pos:line="57" pos:column="10"/></block></then></if>
      <return pos:line="58" pos:column="7">return <expr><literal type="number" pos:line="58" pos:column="14">0<pos:position pos:line="58" pos:column="15"/></literal></expr>;<pos:position pos:line="58" pos:column="16"/></return>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>

  <expr_stmt><expr><name pos:line="61" pos:column="3">err<pos:position pos:line="61" pos:column="6"/></name> <operator pos:line="61" pos:column="7">=<pos:position pos:line="61" pos:column="8"/></operator> <call><name pos:line="61" pos:column="9">re_node_set_alloc<pos:position pos:line="61" pos:column="26"/></name> <argument_list pos:line="61" pos:column="27">(<argument><expr><operator pos:line="61" pos:column="28">&amp;<pos:position pos:line="61" pos:column="33"/></operator><name pos:line="61" pos:column="29">follows<pos:position pos:line="61" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="38">ndests<pos:position pos:line="61" pos:column="44"/></name> <operator pos:line="61" pos:column="45">+<pos:position pos:line="61" pos:column="46"/></operator> <literal type="number" pos:line="61" pos:column="47">1<pos:position pos:line="61" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="50"/></expr_stmt>
  <if pos:line="62" pos:column="3">if <condition pos:line="62" pos:column="6">(<expr><call><name pos:line="62" pos:column="7">BE<pos:position pos:line="62" pos:column="9"/></name> <argument_list pos:line="62" pos:column="10">(<argument><expr><name pos:line="62" pos:column="11">err<pos:position pos:line="62" pos:column="14"/></name> <operator pos:line="62" pos:column="15">!=<pos:position pos:line="62" pos:column="17"/></operator> <name pos:line="62" pos:column="18">REG_NOERROR<pos:position pos:line="62" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="31">0<pos:position pos:line="62" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="34"/></condition><then pos:line="62" pos:column="34">
    <block type="pseudo"><goto pos:line="63" pos:column="5">goto <name pos:line="63" pos:column="10">out_free<pos:position pos:line="63" pos:column="18"/></name>;<pos:position pos:line="63" pos:column="19"/></goto></block></then></if>

  <comment type="block" pos:line="65" pos:column="3">/* Avoid arithmetic overflow in size calculation.  */</comment>
  <if pos:line="66" pos:column="3">if <condition pos:line="66" pos:column="6">(<expr><call><name pos:line="66" pos:column="7">BE<pos:position pos:line="66" pos:column="9"/></name> <argument_list pos:line="66" pos:column="10">(<argument><expr><operator pos:line="66" pos:column="11">(<pos:position pos:line="66" pos:column="12"/></operator><operator pos:line="66" pos:column="12">(<pos:position pos:line="66" pos:column="13"/></operator><operator pos:line="66" pos:column="13">(<pos:position pos:line="66" pos:column="14"/></operator><name pos:line="66" pos:column="14">SIZE_MAX<pos:position pos:line="66" pos:column="22"/></name> <operator pos:line="66" pos:column="23">-<pos:position pos:line="66" pos:column="24"/></operator> <operator pos:line="66" pos:column="25">(<pos:position pos:line="66" pos:column="26"/></operator><sizeof pos:line="66" pos:column="26">sizeof <argument_list pos:line="66" pos:column="33">(<argument><expr><name pos:line="66" pos:column="34">re_node_set<pos:position pos:line="66" pos:column="45"/></name></expr></argument>)<pos:position pos:line="66" pos:column="46"/></argument_list></sizeof> <operator pos:line="66" pos:column="47">+<pos:position pos:line="66" pos:column="48"/></operator> <sizeof pos:line="66" pos:column="49">sizeof <argument_list pos:line="66" pos:column="56">(<argument><expr><name pos:line="66" pos:column="57">bitset_t<pos:position pos:line="66" pos:column="65"/></name></expr></argument>)<pos:position pos:line="66" pos:column="66"/></argument_list></sizeof><operator pos:line="66" pos:column="66">)<pos:position pos:line="66" pos:column="67"/></operator> <operator pos:line="66" pos:column="68">*<pos:position pos:line="66" pos:column="69"/></operator> <name pos:line="66" pos:column="70">SBC_MAX<pos:position pos:line="66" pos:column="77"/></name><operator pos:line="66" pos:column="77">)<pos:position pos:line="66" pos:column="78"/></operator>
	    <operator pos:line="67" pos:column="13">/<pos:position pos:line="67" pos:column="14"/></operator> <operator pos:line="67" pos:column="15">(<pos:position pos:line="67" pos:column="16"/></operator><literal type="number" pos:line="67" pos:column="16">3<pos:position pos:line="67" pos:column="17"/></literal> <operator pos:line="67" pos:column="18">*<pos:position pos:line="67" pos:column="19"/></operator> <sizeof pos:line="67" pos:column="20">sizeof <argument_list pos:line="67" pos:column="27">(<argument><expr><name pos:line="67" pos:column="28">re_dfastate_t<pos:position pos:line="67" pos:column="41"/></name> <operator pos:line="67" pos:column="42">*<pos:position pos:line="67" pos:column="43"/></operator></expr></argument>)<pos:position pos:line="67" pos:column="44"/></argument_list></sizeof><operator pos:line="67" pos:column="44">)<pos:position pos:line="67" pos:column="45"/></operator><operator pos:line="67" pos:column="45">)<pos:position pos:line="67" pos:column="46"/></operator>
	   <operator pos:line="68" pos:column="12">&lt;<pos:position pos:line="68" pos:column="16"/></operator> <name pos:line="68" pos:column="14">ndests<pos:position pos:line="68" pos:column="20"/></name><operator pos:line="68" pos:column="20">)<pos:position pos:line="68" pos:column="21"/></operator></expr></argument>,
	  <argument><expr><literal type="number" pos:line="69" pos:column="11">0<pos:position pos:line="69" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="13"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="14"/></condition><then pos:line="69" pos:column="14">
    <block type="pseudo"><goto pos:line="70" pos:column="5">goto <name pos:line="70" pos:column="10">out_free<pos:position pos:line="70" pos:column="18"/></name>;<pos:position pos:line="70" pos:column="19"/></goto></block></then></if>

<cpp:ifdef pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">ifdef<pos:position pos:line="72" pos:column="7"/></cpp:directive> <name pos:line="72" pos:column="8">HAVE_ALLOCA<pos:position pos:line="72" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="73" pos:column="3">if <condition pos:line="73" pos:column="6">(<expr><call><name pos:line="73" pos:column="7">__libc_use_alloca<pos:position pos:line="73" pos:column="24"/></name> <argument_list pos:line="73" pos:column="25">(<argument><expr><operator pos:line="73" pos:column="26">(<pos:position pos:line="73" pos:column="27"/></operator><sizeof pos:line="73" pos:column="27">sizeof <argument_list pos:line="73" pos:column="34">(<argument><expr><name pos:line="73" pos:column="35">re_node_set<pos:position pos:line="73" pos:column="46"/></name></expr></argument>)<pos:position pos:line="73" pos:column="47"/></argument_list></sizeof> <operator pos:line="73" pos:column="48">+<pos:position pos:line="73" pos:column="49"/></operator> <sizeof pos:line="73" pos:column="50">sizeof <argument_list pos:line="73" pos:column="57">(<argument><expr><name pos:line="73" pos:column="58">bitset_t<pos:position pos:line="73" pos:column="66"/></name></expr></argument>)<pos:position pos:line="73" pos:column="67"/></argument_list></sizeof><operator pos:line="73" pos:column="67">)<pos:position pos:line="73" pos:column="68"/></operator> <operator pos:line="73" pos:column="69">*<pos:position pos:line="73" pos:column="70"/></operator> <name pos:line="73" pos:column="71">SBC_MAX<pos:position pos:line="73" pos:column="78"/></name>
			 <operator pos:line="74" pos:column="26">+<pos:position pos:line="74" pos:column="27"/></operator> <name pos:line="74" pos:column="28">ndests<pos:position pos:line="74" pos:column="34"/></name> <operator pos:line="74" pos:column="35">*<pos:position pos:line="74" pos:column="36"/></operator> <literal type="number" pos:line="74" pos:column="37">3<pos:position pos:line="74" pos:column="38"/></literal> <operator pos:line="74" pos:column="39">*<pos:position pos:line="74" pos:column="40"/></operator> <sizeof pos:line="74" pos:column="41">sizeof <argument_list pos:line="74" pos:column="48">(<argument><expr><name pos:line="74" pos:column="49">re_dfastate_t<pos:position pos:line="74" pos:column="62"/></name> <operator pos:line="74" pos:column="63">*<pos:position pos:line="74" pos:column="64"/></operator></expr></argument>)<pos:position pos:line="74" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="74" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="67"/></condition><then pos:line="74" pos:column="67">
    <block type="pseudo"><expr_stmt><expr><name pos:line="75" pos:column="5">dest_states<pos:position pos:line="75" pos:column="16"/></name> <operator pos:line="75" pos:column="17">=<pos:position pos:line="75" pos:column="18"/></operator> <operator pos:line="75" pos:column="19">(<pos:position pos:line="75" pos:column="20"/></operator><name pos:line="75" pos:column="20">re_dfastate_t<pos:position pos:line="75" pos:column="33"/></name> <operator pos:line="75" pos:column="34">*<pos:position pos:line="75" pos:column="35"/></operator><operator pos:line="75" pos:column="35">*<pos:position pos:line="75" pos:column="36"/></operator><operator pos:line="75" pos:column="36">)<pos:position pos:line="75" pos:column="37"/></operator>
      <call><name pos:line="76" pos:column="7">alloca<pos:position pos:line="76" pos:column="13"/></name> <argument_list pos:line="76" pos:column="14">(<argument><expr><name pos:line="76" pos:column="15">ndests<pos:position pos:line="76" pos:column="21"/></name> <operator pos:line="76" pos:column="22">*<pos:position pos:line="76" pos:column="23"/></operator> <literal type="number" pos:line="76" pos:column="24">3<pos:position pos:line="76" pos:column="25"/></literal> <operator pos:line="76" pos:column="26">*<pos:position pos:line="76" pos:column="27"/></operator> <sizeof pos:line="76" pos:column="28">sizeof <argument_list pos:line="76" pos:column="35">(<argument><expr><name pos:line="76" pos:column="36">re_dfastate_t<pos:position pos:line="76" pos:column="49"/></name> <operator pos:line="76" pos:column="50">*<pos:position pos:line="76" pos:column="51"/></operator></expr></argument>)<pos:position pos:line="76" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="76" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="54"/></expr_stmt></block></then>
  <else pos:line="77" pos:column="3">else
<cpp:endif pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">endif<pos:position pos:line="78" pos:column="7"/></cpp:directive></cpp:endif>
    <block pos:line="79" pos:column="5">{
      <expr_stmt><expr><name pos:line="80" pos:column="7">dest_states<pos:position pos:line="80" pos:column="18"/></name> <operator pos:line="80" pos:column="19">=<pos:position pos:line="80" pos:column="20"/></operator> <operator pos:line="80" pos:column="21">(<pos:position pos:line="80" pos:column="22"/></operator><name pos:line="80" pos:column="22">re_dfastate_t<pos:position pos:line="80" pos:column="35"/></name> <operator pos:line="80" pos:column="36">*<pos:position pos:line="80" pos:column="37"/></operator><operator pos:line="80" pos:column="37">*<pos:position pos:line="80" pos:column="38"/></operator><operator pos:line="80" pos:column="38">)<pos:position pos:line="80" pos:column="39"/></operator>
	<call><name pos:line="81" pos:column="9">malloc<pos:position pos:line="81" pos:column="15"/></name> <argument_list pos:line="81" pos:column="16">(<argument><expr><name pos:line="81" pos:column="17">ndests<pos:position pos:line="81" pos:column="23"/></name> <operator pos:line="81" pos:column="24">*<pos:position pos:line="81" pos:column="25"/></operator> <literal type="number" pos:line="81" pos:column="26">3<pos:position pos:line="81" pos:column="27"/></literal> <operator pos:line="81" pos:column="28">*<pos:position pos:line="81" pos:column="29"/></operator> <sizeof pos:line="81" pos:column="30">sizeof <argument_list pos:line="81" pos:column="37">(<argument><expr><name pos:line="81" pos:column="38">re_dfastate_t<pos:position pos:line="81" pos:column="51"/></name> <operator pos:line="81" pos:column="52">*<pos:position pos:line="81" pos:column="53"/></operator></expr></argument>)<pos:position pos:line="81" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="81" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="56"/></expr_stmt>
      <if pos:line="82" pos:column="7">if <condition pos:line="82" pos:column="10">(<expr><call><name pos:line="82" pos:column="11">BE<pos:position pos:line="82" pos:column="13"/></name> <argument_list pos:line="82" pos:column="14">(<argument><expr><name pos:line="82" pos:column="15">dest_states<pos:position pos:line="82" pos:column="26"/></name> <operator pos:line="82" pos:column="27">==<pos:position pos:line="82" pos:column="29"/></operator> <name pos:line="82" pos:column="30">NULL<pos:position pos:line="82" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="82" pos:column="36">0<pos:position pos:line="82" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="82" pos:column="39"/></condition><then pos:line="82" pos:column="39">
	<block pos:line="83" pos:column="9">{
<label><name pos:line="84" pos:column="1">out_free<pos:position pos:line="84" pos:column="9"/></name>:<pos:position pos:line="84" pos:column="10"/></label>
	  <if pos:line="85" pos:column="11">if <condition pos:line="85" pos:column="14">(<expr><name pos:line="85" pos:column="15">dest_states_malloced<pos:position pos:line="85" pos:column="35"/></name></expr>)<pos:position pos:line="85" pos:column="36"/></condition><then pos:line="85" pos:column="36">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="86" pos:column="13">free<pos:position pos:line="86" pos:column="17"/></name> <argument_list pos:line="86" pos:column="18">(<argument><expr><name pos:line="86" pos:column="19">dest_states<pos:position pos:line="86" pos:column="30"/></name></expr></argument>)<pos:position pos:line="86" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="32"/></expr_stmt></block></then></if>
	  <expr_stmt><expr><call><name pos:line="87" pos:column="11">re_node_set_free<pos:position pos:line="87" pos:column="27"/></name> <argument_list pos:line="87" pos:column="28">(<argument><expr><operator pos:line="87" pos:column="29">&amp;<pos:position pos:line="87" pos:column="34"/></operator><name pos:line="87" pos:column="30">follows<pos:position pos:line="87" pos:column="37"/></name></expr></argument>)<pos:position pos:line="87" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="39"/></expr_stmt>
	  <for pos:line="88" pos:column="11">for <control pos:line="88" pos:column="15">(<init><expr><name pos:line="88" pos:column="16">i<pos:position pos:line="88" pos:column="17"/></name> <operator pos:line="88" pos:column="18">=<pos:position pos:line="88" pos:column="19"/></operator> <literal type="number" pos:line="88" pos:column="20">0<pos:position pos:line="88" pos:column="21"/></literal></expr>;<pos:position pos:line="88" pos:column="22"/></init> <condition><expr><name pos:line="88" pos:column="23">i<pos:position pos:line="88" pos:column="24"/></name> <operator pos:line="88" pos:column="25">&lt;<pos:position pos:line="88" pos:column="29"/></operator> <name pos:line="88" pos:column="27">ndests<pos:position pos:line="88" pos:column="33"/></name></expr>;<pos:position pos:line="88" pos:column="34"/></condition> <incr><expr><operator pos:line="88" pos:column="35">++<pos:position pos:line="88" pos:column="37"/></operator><name pos:line="88" pos:column="37">i<pos:position pos:line="88" pos:column="38"/></name></expr></incr>)<pos:position pos:line="88" pos:column="39"/></control>
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="89" pos:column="13">re_node_set_free<pos:position pos:line="89" pos:column="29"/></name> <argument_list pos:line="89" pos:column="30">(<argument><expr><name pos:line="89" pos:column="31">dests_node<pos:position pos:line="89" pos:column="41"/></name> <operator pos:line="89" pos:column="42">+<pos:position pos:line="89" pos:column="43"/></operator> <name pos:line="89" pos:column="44">i<pos:position pos:line="89" pos:column="45"/></name></expr></argument>)<pos:position pos:line="89" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="47"/></expr_stmt></block></for>
	  <if pos:line="90" pos:column="11">if <condition pos:line="90" pos:column="14">(<expr><name pos:line="90" pos:column="15">dests_node_malloced<pos:position pos:line="90" pos:column="34"/></name></expr>)<pos:position pos:line="90" pos:column="35"/></condition><then pos:line="90" pos:column="35">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="91" pos:column="13">free<pos:position pos:line="91" pos:column="17"/></name> <argument_list pos:line="91" pos:column="18">(<argument><expr><name pos:line="91" pos:column="19">dests_alloc<pos:position pos:line="91" pos:column="30"/></name></expr></argument>)<pos:position pos:line="91" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="32"/></expr_stmt></block></then></if>
	  <return pos:line="92" pos:column="11">return <expr><literal type="number" pos:line="92" pos:column="18">0<pos:position pos:line="92" pos:column="19"/></literal></expr>;<pos:position pos:line="92" pos:column="20"/></return>
	}<pos:position pos:line="93" pos:column="10"/></block></then></if>
      <expr_stmt><expr><name pos:line="94" pos:column="7">dest_states_malloced<pos:position pos:line="94" pos:column="27"/></name> <operator pos:line="94" pos:column="28">=<pos:position pos:line="94" pos:column="29"/></operator> <literal type="boolean" pos:line="94" pos:column="30">true<pos:position pos:line="94" pos:column="34"/></literal></expr>;<pos:position pos:line="94" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="95" pos:column="6"/></block></else></if>
  <expr_stmt><expr><name pos:line="96" pos:column="3">dest_states_word<pos:position pos:line="96" pos:column="19"/></name> <operator pos:line="96" pos:column="20">=<pos:position pos:line="96" pos:column="21"/></operator> <name pos:line="96" pos:column="22">dest_states<pos:position pos:line="96" pos:column="33"/></name> <operator pos:line="96" pos:column="34">+<pos:position pos:line="96" pos:column="35"/></operator> <name pos:line="96" pos:column="36">ndests<pos:position pos:line="96" pos:column="42"/></name></expr>;<pos:position pos:line="96" pos:column="43"/></expr_stmt>
  <expr_stmt><expr><name pos:line="97" pos:column="3">dest_states_nl<pos:position pos:line="97" pos:column="17"/></name> <operator pos:line="97" pos:column="18">=<pos:position pos:line="97" pos:column="19"/></operator> <name pos:line="97" pos:column="20">dest_states_word<pos:position pos:line="97" pos:column="36"/></name> <operator pos:line="97" pos:column="37">+<pos:position pos:line="97" pos:column="38"/></operator> <name pos:line="97" pos:column="39">ndests<pos:position pos:line="97" pos:column="45"/></name></expr>;<pos:position pos:line="97" pos:column="46"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="98" pos:column="3">bitset_empty<pos:position pos:line="98" pos:column="15"/></name> <argument_list pos:line="98" pos:column="16">(<argument><expr><name pos:line="98" pos:column="17">acceptable<pos:position pos:line="98" pos:column="27"/></name></expr></argument>)<pos:position pos:line="98" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="29"/></expr_stmt>

  <comment type="block" pos:line="100" pos:column="3">/* Then build the states for all destinations.  */</comment>
  <for pos:line="101" pos:column="3">for <control pos:line="101" pos:column="7">(<init><expr><name pos:line="101" pos:column="8">i<pos:position pos:line="101" pos:column="9"/></name> <operator pos:line="101" pos:column="10">=<pos:position pos:line="101" pos:column="11"/></operator> <literal type="number" pos:line="101" pos:column="12">0<pos:position pos:line="101" pos:column="13"/></literal></expr>;<pos:position pos:line="101" pos:column="14"/></init> <condition><expr><name pos:line="101" pos:column="15">i<pos:position pos:line="101" pos:column="16"/></name> <operator pos:line="101" pos:column="17">&lt;<pos:position pos:line="101" pos:column="21"/></operator> <name pos:line="101" pos:column="19">ndests<pos:position pos:line="101" pos:column="25"/></name></expr>;<pos:position pos:line="101" pos:column="26"/></condition> <incr><expr><operator pos:line="101" pos:column="27">++<pos:position pos:line="101" pos:column="29"/></operator><name pos:line="101" pos:column="29">i<pos:position pos:line="101" pos:column="30"/></name></expr></incr>)<pos:position pos:line="101" pos:column="31"/></control>
    <block pos:line="102" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="103" pos:column="7">int<pos:position pos:line="103" pos:column="10"/></name></type> <name pos:line="103" pos:column="11">next_node<pos:position pos:line="103" pos:column="20"/></name></decl>;<pos:position pos:line="103" pos:column="21"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="104" pos:column="7">re_node_set_empty<pos:position pos:line="104" pos:column="24"/></name> <argument_list pos:line="104" pos:column="25">(<argument><expr><operator pos:line="104" pos:column="26">&amp;<pos:position pos:line="104" pos:column="31"/></operator><name pos:line="104" pos:column="27">follows<pos:position pos:line="104" pos:column="34"/></name></expr></argument>)<pos:position pos:line="104" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="36"/></expr_stmt>
      <comment type="block" pos:line="105" pos:column="7">/* Merge the follows of this destination states.  */</comment>
      <for pos:line="106" pos:column="7">for <control pos:line="106" pos:column="11">(<init><expr><name pos:line="106" pos:column="12">j<pos:position pos:line="106" pos:column="13"/></name> <operator pos:line="106" pos:column="14">=<pos:position pos:line="106" pos:column="15"/></operator> <literal type="number" pos:line="106" pos:column="16">0<pos:position pos:line="106" pos:column="17"/></literal></expr>;<pos:position pos:line="106" pos:column="18"/></init> <condition><expr><name pos:line="106" pos:column="19">j<pos:position pos:line="106" pos:column="20"/></name> <operator pos:line="106" pos:column="21">&lt;<pos:position pos:line="106" pos:column="25"/></operator> <name><name pos:line="106" pos:column="23">dests_node<pos:position pos:line="106" pos:column="33"/></name><index pos:line="106" pos:column="33">[<expr><name pos:line="106" pos:column="34">i<pos:position pos:line="106" pos:column="35"/></name></expr>]<pos:position pos:line="106" pos:column="36"/></index></name><operator pos:line="106" pos:column="36">.<pos:position pos:line="106" pos:column="37"/></operator><name pos:line="106" pos:column="37">nelem<pos:position pos:line="106" pos:column="42"/></name></expr>;<pos:position pos:line="106" pos:column="43"/></condition> <incr><expr><operator pos:line="106" pos:column="44">++<pos:position pos:line="106" pos:column="46"/></operator><name pos:line="106" pos:column="46">j<pos:position pos:line="106" pos:column="47"/></name></expr></incr>)<pos:position pos:line="106" pos:column="48"/></control>
	<block pos:line="107" pos:column="9">{
	  <expr_stmt><expr><name pos:line="108" pos:column="11">next_node<pos:position pos:line="108" pos:column="20"/></name> <operator pos:line="108" pos:column="21">=<pos:position pos:line="108" pos:column="22"/></operator> <name><name pos:line="108" pos:column="23">dfa<pos:position pos:line="108" pos:column="26"/></name><operator pos:line="108" pos:column="26">-&gt;<pos:position pos:line="108" pos:column="31"/></operator><name pos:line="108" pos:column="28">nexts<pos:position pos:line="108" pos:column="33"/></name><index pos:line="108" pos:column="33">[<expr><name><name pos:line="108" pos:column="34">dests_node<pos:position pos:line="108" pos:column="44"/></name><index pos:line="108" pos:column="44">[<expr><name pos:line="108" pos:column="45">i<pos:position pos:line="108" pos:column="46"/></name></expr>]<pos:position pos:line="108" pos:column="47"/></index></name><operator pos:line="108" pos:column="47">.<pos:position pos:line="108" pos:column="48"/></operator><name><name pos:line="108" pos:column="48">elems<pos:position pos:line="108" pos:column="53"/></name><index pos:line="108" pos:column="53">[<expr><name pos:line="108" pos:column="54">j<pos:position pos:line="108" pos:column="55"/></name></expr>]<pos:position pos:line="108" pos:column="56"/></index></name></expr>]<pos:position pos:line="108" pos:column="57"/></index></name></expr>;<pos:position pos:line="108" pos:column="58"/></expr_stmt>
	  <if pos:line="109" pos:column="11">if <condition pos:line="109" pos:column="14">(<expr><name pos:line="109" pos:column="15">next_node<pos:position pos:line="109" pos:column="24"/></name> <operator pos:line="109" pos:column="25">!=<pos:position pos:line="109" pos:column="27"/></operator> <operator pos:line="109" pos:column="28">-<pos:position pos:line="109" pos:column="29"/></operator><literal type="number" pos:line="109" pos:column="29">1<pos:position pos:line="109" pos:column="30"/></literal></expr>)<pos:position pos:line="109" pos:column="31"/></condition><then pos:line="109" pos:column="31">
	    <block pos:line="110" pos:column="13">{
	      <expr_stmt><expr><name pos:line="111" pos:column="15">err<pos:position pos:line="111" pos:column="18"/></name> <operator pos:line="111" pos:column="19">=<pos:position pos:line="111" pos:column="20"/></operator> <call><name pos:line="111" pos:column="21">re_node_set_merge<pos:position pos:line="111" pos:column="38"/></name> <argument_list pos:line="111" pos:column="39">(<argument><expr><operator pos:line="111" pos:column="40">&amp;<pos:position pos:line="111" pos:column="45"/></operator><name pos:line="111" pos:column="41">follows<pos:position pos:line="111" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="111" pos:column="50">dfa<pos:position pos:line="111" pos:column="53"/></name><operator pos:line="111" pos:column="53">-&gt;<pos:position pos:line="111" pos:column="58"/></operator><name pos:line="111" pos:column="55">eclosures<pos:position pos:line="111" pos:column="64"/></name></name> <operator pos:line="111" pos:column="65">+<pos:position pos:line="111" pos:column="66"/></operator> <name pos:line="111" pos:column="67">next_node<pos:position pos:line="111" pos:column="76"/></name></expr></argument>)<pos:position pos:line="111" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="78"/></expr_stmt>
	      <if pos:line="112" pos:column="15">if <condition pos:line="112" pos:column="18">(<expr><call><name pos:line="112" pos:column="19">BE<pos:position pos:line="112" pos:column="21"/></name> <argument_list pos:line="112" pos:column="22">(<argument><expr><name pos:line="112" pos:column="23">err<pos:position pos:line="112" pos:column="26"/></name> <operator pos:line="112" pos:column="27">!=<pos:position pos:line="112" pos:column="29"/></operator> <name pos:line="112" pos:column="30">REG_NOERROR<pos:position pos:line="112" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="112" pos:column="43">0<pos:position pos:line="112" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="112" pos:column="46"/></condition><then pos:line="112" pos:column="46">
		<block type="pseudo"><goto pos:line="113" pos:column="17">goto <name pos:line="113" pos:column="22">out_free<pos:position pos:line="113" pos:column="30"/></name>;<pos:position pos:line="113" pos:column="31"/></goto></block></then></if>
	    }<pos:position pos:line="114" pos:column="14"/></block></then></if>
	}<pos:position pos:line="115" pos:column="10"/></block></for>
      <expr_stmt><expr><name><name pos:line="116" pos:column="7">dest_states<pos:position pos:line="116" pos:column="18"/></name><index pos:line="116" pos:column="18">[<expr><name pos:line="116" pos:column="19">i<pos:position pos:line="116" pos:column="20"/></name></expr>]<pos:position pos:line="116" pos:column="21"/></index></name> <operator pos:line="116" pos:column="22">=<pos:position pos:line="116" pos:column="23"/></operator> <call><name pos:line="116" pos:column="24">re_acquire_state_context<pos:position pos:line="116" pos:column="48"/></name> <argument_list pos:line="116" pos:column="49">(<argument><expr><operator pos:line="116" pos:column="50">&amp;<pos:position pos:line="116" pos:column="55"/></operator><name pos:line="116" pos:column="51">err<pos:position pos:line="116" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="56">dfa<pos:position pos:line="116" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="116" pos:column="61">&amp;<pos:position pos:line="116" pos:column="66"/></operator><name pos:line="116" pos:column="62">follows<pos:position pos:line="116" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="116" pos:column="71">0<pos:position pos:line="116" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="74"/></expr_stmt>
      <if pos:line="117" pos:column="7">if <condition pos:line="117" pos:column="10">(<expr><call><name pos:line="117" pos:column="11">BE<pos:position pos:line="117" pos:column="13"/></name> <argument_list pos:line="117" pos:column="14">(<argument><expr><name><name pos:line="117" pos:column="15">dest_states<pos:position pos:line="117" pos:column="26"/></name><index pos:line="117" pos:column="26">[<expr><name pos:line="117" pos:column="27">i<pos:position pos:line="117" pos:column="28"/></name></expr>]<pos:position pos:line="117" pos:column="29"/></index></name> <operator pos:line="117" pos:column="30">==<pos:position pos:line="117" pos:column="32"/></operator> <name pos:line="117" pos:column="33">NULL<pos:position pos:line="117" pos:column="37"/></name> <operator pos:line="117" pos:column="38">&amp;&amp;<pos:position pos:line="117" pos:column="48"/></operator> <name pos:line="117" pos:column="41">err<pos:position pos:line="117" pos:column="44"/></name> <operator pos:line="117" pos:column="45">!=<pos:position pos:line="117" pos:column="47"/></operator> <name pos:line="117" pos:column="48">REG_NOERROR<pos:position pos:line="117" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="117" pos:column="61">0<pos:position pos:line="117" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="117" pos:column="64"/></condition><then pos:line="117" pos:column="64">
	<block type="pseudo"><goto pos:line="118" pos:column="9">goto <name pos:line="118" pos:column="14">out_free<pos:position pos:line="118" pos:column="22"/></name>;<pos:position pos:line="118" pos:column="23"/></goto></block></then></if>
      <comment type="block" pos:line="119" pos:column="7">/* If the new state has context constraint,
	 build appropriate states for these contexts.  */</comment>
      <if pos:line="121" pos:column="7">if <condition pos:line="121" pos:column="10">(<expr><name><name pos:line="121" pos:column="11">dest_states<pos:position pos:line="121" pos:column="22"/></name><index pos:line="121" pos:column="22">[<expr><name pos:line="121" pos:column="23">i<pos:position pos:line="121" pos:column="24"/></name></expr>]<pos:position pos:line="121" pos:column="25"/></index></name><operator pos:line="121" pos:column="25">-&gt;<pos:position pos:line="121" pos:column="30"/></operator><name pos:line="121" pos:column="27">has_constraint<pos:position pos:line="121" pos:column="41"/></name></expr>)<pos:position pos:line="121" pos:column="42"/></condition><then pos:line="121" pos:column="42">
	<block pos:line="122" pos:column="9">{
	  <expr_stmt><expr><name><name pos:line="123" pos:column="11">dest_states_word<pos:position pos:line="123" pos:column="27"/></name><index pos:line="123" pos:column="27">[<expr><name pos:line="123" pos:column="28">i<pos:position pos:line="123" pos:column="29"/></name></expr>]<pos:position pos:line="123" pos:column="30"/></index></name> <operator pos:line="123" pos:column="31">=<pos:position pos:line="123" pos:column="32"/></operator> <call><name pos:line="123" pos:column="33">re_acquire_state_context<pos:position pos:line="123" pos:column="57"/></name> <argument_list pos:line="123" pos:column="58">(<argument><expr><operator pos:line="123" pos:column="59">&amp;<pos:position pos:line="123" pos:column="64"/></operator><name pos:line="123" pos:column="60">err<pos:position pos:line="123" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="65">dfa<pos:position pos:line="123" pos:column="68"/></name></expr></argument>, <argument><expr><operator pos:line="123" pos:column="70">&amp;<pos:position pos:line="123" pos:column="75"/></operator><name pos:line="123" pos:column="71">follows<pos:position pos:line="123" pos:column="78"/></name></expr></argument>,
							  <argument><expr><name pos:line="124" pos:column="59">CONTEXT_WORD<pos:position pos:line="124" pos:column="71"/></name></expr></argument>)<pos:position pos:line="124" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="73"/></expr_stmt>
	  <if pos:line="125" pos:column="11">if <condition pos:line="125" pos:column="14">(<expr><call><name pos:line="125" pos:column="15">BE<pos:position pos:line="125" pos:column="17"/></name> <argument_list pos:line="125" pos:column="18">(<argument><expr><name><name pos:line="125" pos:column="19">dest_states_word<pos:position pos:line="125" pos:column="35"/></name><index pos:line="125" pos:column="35">[<expr><name pos:line="125" pos:column="36">i<pos:position pos:line="125" pos:column="37"/></name></expr>]<pos:position pos:line="125" pos:column="38"/></index></name> <operator pos:line="125" pos:column="39">==<pos:position pos:line="125" pos:column="41"/></operator> <name pos:line="125" pos:column="42">NULL<pos:position pos:line="125" pos:column="46"/></name> <operator pos:line="125" pos:column="47">&amp;&amp;<pos:position pos:line="125" pos:column="57"/></operator> <name pos:line="125" pos:column="50">err<pos:position pos:line="125" pos:column="53"/></name> <operator pos:line="125" pos:column="54">!=<pos:position pos:line="125" pos:column="56"/></operator> <name pos:line="125" pos:column="57">REG_NOERROR<pos:position pos:line="125" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="125" pos:column="70">0<pos:position pos:line="125" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="125" pos:column="73"/></condition><then pos:line="125" pos:column="73">
	    <block type="pseudo"><goto pos:line="126" pos:column="13">goto <name pos:line="126" pos:column="18">out_free<pos:position pos:line="126" pos:column="26"/></name>;<pos:position pos:line="126" pos:column="27"/></goto></block></then></if>

	  <if pos:line="128" pos:column="11">if <condition pos:line="128" pos:column="14">(<expr><name><name pos:line="128" pos:column="15">dest_states<pos:position pos:line="128" pos:column="26"/></name><index pos:line="128" pos:column="26">[<expr><name pos:line="128" pos:column="27">i<pos:position pos:line="128" pos:column="28"/></name></expr>]<pos:position pos:line="128" pos:column="29"/></index></name> <operator pos:line="128" pos:column="30">!=<pos:position pos:line="128" pos:column="32"/></operator> <name><name pos:line="128" pos:column="33">dest_states_word<pos:position pos:line="128" pos:column="49"/></name><index pos:line="128" pos:column="49">[<expr><name pos:line="128" pos:column="50">i<pos:position pos:line="128" pos:column="51"/></name></expr>]<pos:position pos:line="128" pos:column="52"/></index></name> <operator pos:line="128" pos:column="53">&amp;&amp;<pos:position pos:line="128" pos:column="63"/></operator> <name><name pos:line="128" pos:column="56">dfa<pos:position pos:line="128" pos:column="59"/></name><operator pos:line="128" pos:column="59">-&gt;<pos:position pos:line="128" pos:column="64"/></operator><name pos:line="128" pos:column="61">mb_cur_max<pos:position pos:line="128" pos:column="71"/></name></name> <operator pos:line="128" pos:column="72">&gt;<pos:position pos:line="128" pos:column="76"/></operator> <literal type="number" pos:line="128" pos:column="74">1<pos:position pos:line="128" pos:column="75"/></literal></expr>)<pos:position pos:line="128" pos:column="76"/></condition><then pos:line="128" pos:column="76">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="129" pos:column="13">need_word_trtable<pos:position pos:line="129" pos:column="30"/></name> <operator pos:line="129" pos:column="31">=<pos:position pos:line="129" pos:column="32"/></operator> <literal type="number" pos:line="129" pos:column="33">1<pos:position pos:line="129" pos:column="34"/></literal></expr>;<pos:position pos:line="129" pos:column="35"/></expr_stmt></block></then></if>

	  <expr_stmt><expr><name><name pos:line="131" pos:column="11">dest_states_nl<pos:position pos:line="131" pos:column="25"/></name><index pos:line="131" pos:column="25">[<expr><name pos:line="131" pos:column="26">i<pos:position pos:line="131" pos:column="27"/></name></expr>]<pos:position pos:line="131" pos:column="28"/></index></name> <operator pos:line="131" pos:column="29">=<pos:position pos:line="131" pos:column="30"/></operator> <call><name pos:line="131" pos:column="31">re_acquire_state_context<pos:position pos:line="131" pos:column="55"/></name> <argument_list pos:line="131" pos:column="56">(<argument><expr><operator pos:line="131" pos:column="57">&amp;<pos:position pos:line="131" pos:column="62"/></operator><name pos:line="131" pos:column="58">err<pos:position pos:line="131" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="63">dfa<pos:position pos:line="131" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="131" pos:column="68">&amp;<pos:position pos:line="131" pos:column="73"/></operator><name pos:line="131" pos:column="69">follows<pos:position pos:line="131" pos:column="76"/></name></expr></argument>,
							<argument><expr><name pos:line="132" pos:column="57">CONTEXT_NEWLINE<pos:position pos:line="132" pos:column="72"/></name></expr></argument>)<pos:position pos:line="132" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="74"/></expr_stmt>
	  <if pos:line="133" pos:column="11">if <condition pos:line="133" pos:column="14">(<expr><call><name pos:line="133" pos:column="15">BE<pos:position pos:line="133" pos:column="17"/></name> <argument_list pos:line="133" pos:column="18">(<argument><expr><name><name pos:line="133" pos:column="19">dest_states_nl<pos:position pos:line="133" pos:column="33"/></name><index pos:line="133" pos:column="33">[<expr><name pos:line="133" pos:column="34">i<pos:position pos:line="133" pos:column="35"/></name></expr>]<pos:position pos:line="133" pos:column="36"/></index></name> <operator pos:line="133" pos:column="37">==<pos:position pos:line="133" pos:column="39"/></operator> <name pos:line="133" pos:column="40">NULL<pos:position pos:line="133" pos:column="44"/></name> <operator pos:line="133" pos:column="45">&amp;&amp;<pos:position pos:line="133" pos:column="55"/></operator> <name pos:line="133" pos:column="48">err<pos:position pos:line="133" pos:column="51"/></name> <operator pos:line="133" pos:column="52">!=<pos:position pos:line="133" pos:column="54"/></operator> <name pos:line="133" pos:column="55">REG_NOERROR<pos:position pos:line="133" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="133" pos:column="68">0<pos:position pos:line="133" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="133" pos:column="71"/></condition><then pos:line="133" pos:column="71">
	    <block type="pseudo"><goto pos:line="134" pos:column="13">goto <name pos:line="134" pos:column="18">out_free<pos:position pos:line="134" pos:column="26"/></name>;<pos:position pos:line="134" pos:column="27"/></goto></block></then></if>
 	}<pos:position pos:line="135" pos:column="10"/></block></then>
      <else pos:line="136" pos:column="7">else
	<block pos:line="137" pos:column="9">{
	  <expr_stmt><expr><name><name pos:line="138" pos:column="11">dest_states_word<pos:position pos:line="138" pos:column="27"/></name><index pos:line="138" pos:column="27">[<expr><name pos:line="138" pos:column="28">i<pos:position pos:line="138" pos:column="29"/></name></expr>]<pos:position pos:line="138" pos:column="30"/></index></name> <operator pos:line="138" pos:column="31">=<pos:position pos:line="138" pos:column="32"/></operator> <name><name pos:line="138" pos:column="33">dest_states<pos:position pos:line="138" pos:column="44"/></name><index pos:line="138" pos:column="44">[<expr><name pos:line="138" pos:column="45">i<pos:position pos:line="138" pos:column="46"/></name></expr>]<pos:position pos:line="138" pos:column="47"/></index></name></expr>;<pos:position pos:line="138" pos:column="48"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="139" pos:column="11">dest_states_nl<pos:position pos:line="139" pos:column="25"/></name><index pos:line="139" pos:column="25">[<expr><name pos:line="139" pos:column="26">i<pos:position pos:line="139" pos:column="27"/></name></expr>]<pos:position pos:line="139" pos:column="28"/></index></name> <operator pos:line="139" pos:column="29">=<pos:position pos:line="139" pos:column="30"/></operator> <name><name pos:line="139" pos:column="31">dest_states<pos:position pos:line="139" pos:column="42"/></name><index pos:line="139" pos:column="42">[<expr><name pos:line="139" pos:column="43">i<pos:position pos:line="139" pos:column="44"/></name></expr>]<pos:position pos:line="139" pos:column="45"/></index></name></expr>;<pos:position pos:line="139" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="140" pos:column="10"/></block></else></if>
      <expr_stmt><expr><call><name pos:line="141" pos:column="7">bitset_merge<pos:position pos:line="141" pos:column="19"/></name> <argument_list pos:line="141" pos:column="20">(<argument><expr><name pos:line="141" pos:column="21">acceptable<pos:position pos:line="141" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="141" pos:column="33">dests_ch<pos:position pos:line="141" pos:column="41"/></name><index pos:line="141" pos:column="41">[<expr><name pos:line="141" pos:column="42">i<pos:position pos:line="141" pos:column="43"/></name></expr>]<pos:position pos:line="141" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="141" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="142" pos:column="6"/></block></for>

  <if pos:line="144" pos:column="3">if <condition pos:line="144" pos:column="6">(<expr><operator pos:line="144" pos:column="7">!<pos:position pos:line="144" pos:column="8"/></operator><call><name pos:line="144" pos:column="8">BE<pos:position pos:line="144" pos:column="10"/></name> <argument_list pos:line="144" pos:column="11">(<argument><expr><name pos:line="144" pos:column="12">need_word_trtable<pos:position pos:line="144" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="144" pos:column="31">0<pos:position pos:line="144" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="144" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="144" pos:column="34"/></condition><then pos:line="144" pos:column="34">
    <block pos:line="145" pos:column="5">{
      <comment type="block" pos:line="146" pos:column="7">/* We don't care about whether the following character is a word
	 character, or we are in a single-byte character set so we can
	 discern by looking at the character code: allocate a
	 256-entry transition table.  */</comment>
      <expr_stmt><expr><name pos:line="150" pos:column="7">trtable<pos:position pos:line="150" pos:column="14"/></name> <operator pos:line="150" pos:column="15">=<pos:position pos:line="150" pos:column="16"/></operator> <name><name pos:line="150" pos:column="17">state<pos:position pos:line="150" pos:column="22"/></name><operator pos:line="150" pos:column="22">-&gt;<pos:position pos:line="150" pos:column="27"/></operator><name pos:line="150" pos:column="24">trtable<pos:position pos:line="150" pos:column="31"/></name></name> <operator pos:line="150" pos:column="32">=<pos:position pos:line="150" pos:column="33"/></operator>
	<operator pos:line="151" pos:column="9">(<pos:position pos:line="151" pos:column="10"/></operator><name pos:line="151" pos:column="10">re_dfastate_t<pos:position pos:line="151" pos:column="23"/></name> <operator pos:line="151" pos:column="24">*<pos:position pos:line="151" pos:column="25"/></operator><operator pos:line="151" pos:column="25">*<pos:position pos:line="151" pos:column="26"/></operator><operator pos:line="151" pos:column="26">)<pos:position pos:line="151" pos:column="27"/></operator> <call><name pos:line="151" pos:column="28">calloc<pos:position pos:line="151" pos:column="34"/></name> <argument_list pos:line="151" pos:column="35">(<argument><expr><sizeof pos:line="151" pos:column="36">sizeof <argument_list pos:line="151" pos:column="43">(<argument><expr><name pos:line="151" pos:column="44">re_dfastate_t<pos:position pos:line="151" pos:column="57"/></name> <operator pos:line="151" pos:column="58">*<pos:position pos:line="151" pos:column="59"/></operator></expr></argument>)<pos:position pos:line="151" pos:column="60"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="151" pos:column="62">SBC_MAX<pos:position pos:line="151" pos:column="69"/></name></expr></argument>)<pos:position pos:line="151" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="71"/></expr_stmt>
      <if pos:line="152" pos:column="7">if <condition pos:line="152" pos:column="10">(<expr><call><name pos:line="152" pos:column="11">BE<pos:position pos:line="152" pos:column="13"/></name> <argument_list pos:line="152" pos:column="14">(<argument><expr><name pos:line="152" pos:column="15">trtable<pos:position pos:line="152" pos:column="22"/></name> <operator pos:line="152" pos:column="23">==<pos:position pos:line="152" pos:column="25"/></operator> <name pos:line="152" pos:column="26">NULL<pos:position pos:line="152" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="152" pos:column="32">0<pos:position pos:line="152" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="152" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="152" pos:column="35"/></condition><then pos:line="152" pos:column="35">
	<block type="pseudo"><goto pos:line="153" pos:column="9">goto <name pos:line="153" pos:column="14">out_free<pos:position pos:line="153" pos:column="22"/></name>;<pos:position pos:line="153" pos:column="23"/></goto></block></then></if>

      <comment type="block" pos:line="155" pos:column="7">/* For all characters ch...:  */</comment>
      <for pos:line="156" pos:column="7">for <control pos:line="156" pos:column="11">(<init><expr><name pos:line="156" pos:column="12">i<pos:position pos:line="156" pos:column="13"/></name> <operator pos:line="156" pos:column="14">=<pos:position pos:line="156" pos:column="15"/></operator> <literal type="number" pos:line="156" pos:column="16">0<pos:position pos:line="156" pos:column="17"/></literal></expr>;<pos:position pos:line="156" pos:column="18"/></init> <condition><expr><name pos:line="156" pos:column="19">i<pos:position pos:line="156" pos:column="20"/></name> <operator pos:line="156" pos:column="21">&lt;<pos:position pos:line="156" pos:column="25"/></operator> <name pos:line="156" pos:column="23">BITSET_WORDS<pos:position pos:line="156" pos:column="35"/></name></expr>;<pos:position pos:line="156" pos:column="36"/></condition> <incr><expr><operator pos:line="156" pos:column="37">++<pos:position pos:line="156" pos:column="39"/></operator><name pos:line="156" pos:column="39">i<pos:position pos:line="156" pos:column="40"/></name></expr></incr>)<pos:position pos:line="156" pos:column="41"/></control>
	<block type="pseudo"><for pos:line="157" pos:column="9">for <control pos:line="157" pos:column="13">(<init><expr><name pos:line="157" pos:column="14">ch<pos:position pos:line="157" pos:column="16"/></name> <operator pos:line="157" pos:column="17">=<pos:position pos:line="157" pos:column="18"/></operator> <name pos:line="157" pos:column="19">i<pos:position pos:line="157" pos:column="20"/></name> <operator pos:line="157" pos:column="21">*<pos:position pos:line="157" pos:column="22"/></operator> <name pos:line="157" pos:column="23">BITSET_WORD_BITS<pos:position pos:line="157" pos:column="39"/></name></expr><operator pos:line="157" pos:column="39">,<pos:position pos:line="157" pos:column="40"/></operator> <expr><name pos:line="157" pos:column="41">elem<pos:position pos:line="157" pos:column="45"/></name> <operator pos:line="157" pos:column="46">=<pos:position pos:line="157" pos:column="47"/></operator> <name><name pos:line="157" pos:column="48">acceptable<pos:position pos:line="157" pos:column="58"/></name><index pos:line="157" pos:column="58">[<expr><name pos:line="157" pos:column="59">i<pos:position pos:line="157" pos:column="60"/></name></expr>]<pos:position pos:line="157" pos:column="61"/></index></name></expr><operator pos:line="157" pos:column="61">,<pos:position pos:line="157" pos:column="62"/></operator> <expr><name pos:line="157" pos:column="63">mask<pos:position pos:line="157" pos:column="67"/></name> <operator pos:line="157" pos:column="68">=<pos:position pos:line="157" pos:column="69"/></operator> <literal type="number" pos:line="157" pos:column="70">1<pos:position pos:line="157" pos:column="71"/></literal></expr>;<pos:position pos:line="157" pos:column="72"/></init>
	     <condition><expr><name pos:line="158" pos:column="14">elem<pos:position pos:line="158" pos:column="18"/></name></expr>;<pos:position pos:line="158" pos:column="19"/></condition>
	     <incr><expr><name pos:line="159" pos:column="14">mask<pos:position pos:line="159" pos:column="18"/></name> <operator pos:line="159" pos:column="19">&lt;&lt;=<pos:position pos:line="159" pos:column="28"/></operator> <literal type="number" pos:line="159" pos:column="23">1<pos:position pos:line="159" pos:column="24"/></literal></expr><operator pos:line="159" pos:column="24">,<pos:position pos:line="159" pos:column="25"/></operator> <expr><name pos:line="159" pos:column="26">elem<pos:position pos:line="159" pos:column="30"/></name> <operator pos:line="159" pos:column="31">&gt;&gt;=<pos:position pos:line="159" pos:column="40"/></operator> <literal type="number" pos:line="159" pos:column="35">1<pos:position pos:line="159" pos:column="36"/></literal></expr><operator pos:line="159" pos:column="36">,<pos:position pos:line="159" pos:column="37"/></operator> <expr><operator pos:line="159" pos:column="38">++<pos:position pos:line="159" pos:column="40"/></operator><name pos:line="159" pos:column="40">ch<pos:position pos:line="159" pos:column="42"/></name></expr></incr>)<pos:position pos:line="159" pos:column="43"/></control>
	  <block type="pseudo"><if pos:line="160" pos:column="11">if <condition pos:line="160" pos:column="14">(<expr><call><name pos:line="160" pos:column="15">BE<pos:position pos:line="160" pos:column="17"/></name> <argument_list pos:line="160" pos:column="18">(<argument><expr><name pos:line="160" pos:column="19">elem<pos:position pos:line="160" pos:column="23"/></name> <operator pos:line="160" pos:column="24">&amp;<pos:position pos:line="160" pos:column="29"/></operator> <literal type="number" pos:line="160" pos:column="26">1<pos:position pos:line="160" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="160" pos:column="29">0<pos:position pos:line="160" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="160" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="160" pos:column="32"/></condition><then pos:line="160" pos:column="32">
	    <block pos:line="161" pos:column="13">{
	      <comment type="block" pos:line="162" pos:column="15">/* There must be exactly one destination which accepts
		 character ch.  See group_nodes_into_DFAstates.  */</comment>
	      <for pos:line="164" pos:column="15">for <control pos:line="164" pos:column="19">(<init><expr><name pos:line="164" pos:column="20">j<pos:position pos:line="164" pos:column="21"/></name> <operator pos:line="164" pos:column="22">=<pos:position pos:line="164" pos:column="23"/></operator> <literal type="number" pos:line="164" pos:column="24">0<pos:position pos:line="164" pos:column="25"/></literal></expr>;<pos:position pos:line="164" pos:column="26"/></init> <condition><expr><operator pos:line="164" pos:column="27">(<pos:position pos:line="164" pos:column="28"/></operator><name><name pos:line="164" pos:column="28">dests_ch<pos:position pos:line="164" pos:column="36"/></name><index pos:line="164" pos:column="36">[<expr><name pos:line="164" pos:column="37">j<pos:position pos:line="164" pos:column="38"/></name></expr>]<pos:position pos:line="164" pos:column="39"/></index><index pos:line="164" pos:column="39">[<expr><name pos:line="164" pos:column="40">i<pos:position pos:line="164" pos:column="41"/></name></expr>]<pos:position pos:line="164" pos:column="42"/></index></name> <operator pos:line="164" pos:column="43">&amp;<pos:position pos:line="164" pos:column="48"/></operator> <name pos:line="164" pos:column="45">mask<pos:position pos:line="164" pos:column="49"/></name><operator pos:line="164" pos:column="49">)<pos:position pos:line="164" pos:column="50"/></operator> <operator pos:line="164" pos:column="51">==<pos:position pos:line="164" pos:column="53"/></operator> <literal type="number" pos:line="164" pos:column="54">0<pos:position pos:line="164" pos:column="55"/></literal></expr>;<pos:position pos:line="164" pos:column="56"/></condition> <incr><expr><operator pos:line="164" pos:column="57">++<pos:position pos:line="164" pos:column="59"/></operator><name pos:line="164" pos:column="59">j<pos:position pos:line="164" pos:column="60"/></name></expr></incr>)<pos:position pos:line="164" pos:column="61"/></control>
		<block type="pseudo"><empty_stmt pos:line="165" pos:column="17">;<pos:position pos:line="165" pos:column="18"/></empty_stmt></block></for>

	      <comment type="block" pos:line="167" pos:column="15">/* j-th destination accepts the word character ch.  */</comment>
	      <if pos:line="168" pos:column="15">if <condition pos:line="168" pos:column="18">(<expr><name><name pos:line="168" pos:column="19">dfa<pos:position pos:line="168" pos:column="22"/></name><operator pos:line="168" pos:column="22">-&gt;<pos:position pos:line="168" pos:column="27"/></operator><name pos:line="168" pos:column="24">word_char<pos:position pos:line="168" pos:column="33"/></name><index pos:line="168" pos:column="33">[<expr><name pos:line="168" pos:column="34">i<pos:position pos:line="168" pos:column="35"/></name></expr>]<pos:position pos:line="168" pos:column="36"/></index></name> <operator pos:line="168" pos:column="37">&amp;<pos:position pos:line="168" pos:column="42"/></operator> <name pos:line="168" pos:column="39">mask<pos:position pos:line="168" pos:column="43"/></name></expr>)<pos:position pos:line="168" pos:column="44"/></condition><then pos:line="168" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="169" pos:column="17">trtable<pos:position pos:line="169" pos:column="24"/></name><index pos:line="169" pos:column="24">[<expr><name pos:line="169" pos:column="25">ch<pos:position pos:line="169" pos:column="27"/></name></expr>]<pos:position pos:line="169" pos:column="28"/></index></name> <operator pos:line="169" pos:column="29">=<pos:position pos:line="169" pos:column="30"/></operator> <name><name pos:line="169" pos:column="31">dest_states_word<pos:position pos:line="169" pos:column="47"/></name><index pos:line="169" pos:column="47">[<expr><name pos:line="169" pos:column="48">j<pos:position pos:line="169" pos:column="49"/></name></expr>]<pos:position pos:line="169" pos:column="50"/></index></name></expr>;<pos:position pos:line="169" pos:column="51"/></expr_stmt></block></then>
	      <else pos:line="170" pos:column="15">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="171" pos:column="17">trtable<pos:position pos:line="171" pos:column="24"/></name><index pos:line="171" pos:column="24">[<expr><name pos:line="171" pos:column="25">ch<pos:position pos:line="171" pos:column="27"/></name></expr>]<pos:position pos:line="171" pos:column="28"/></index></name> <operator pos:line="171" pos:column="29">=<pos:position pos:line="171" pos:column="30"/></operator> <name><name pos:line="171" pos:column="31">dest_states<pos:position pos:line="171" pos:column="42"/></name><index pos:line="171" pos:column="42">[<expr><name pos:line="171" pos:column="43">j<pos:position pos:line="171" pos:column="44"/></name></expr>]<pos:position pos:line="171" pos:column="45"/></index></name></expr>;<pos:position pos:line="171" pos:column="46"/></expr_stmt></block></else></if>
	    }<pos:position pos:line="172" pos:column="14"/></block></then></if></block></for></block></for>
    }<pos:position pos:line="173" pos:column="6"/></block></then>
  <else pos:line="174" pos:column="3">else
    <block pos:line="175" pos:column="5">{
      <comment type="block" pos:line="176" pos:column="7">/* We care about whether the following character is a word
	 character, and we are in a multi-byte character set: discern
	 by looking at the character code: build two 256-entry
	 transition tables, one starting at trtable[0] and one
	 starting at trtable[SBC_MAX].  */</comment>
      <expr_stmt><expr><name pos:line="181" pos:column="7">trtable<pos:position pos:line="181" pos:column="14"/></name> <operator pos:line="181" pos:column="15">=<pos:position pos:line="181" pos:column="16"/></operator> <name><name pos:line="181" pos:column="17">state<pos:position pos:line="181" pos:column="22"/></name><operator pos:line="181" pos:column="22">-&gt;<pos:position pos:line="181" pos:column="27"/></operator><name pos:line="181" pos:column="24">word_trtable<pos:position pos:line="181" pos:column="36"/></name></name> <operator pos:line="181" pos:column="37">=<pos:position pos:line="181" pos:column="38"/></operator>
	<operator pos:line="182" pos:column="9">(<pos:position pos:line="182" pos:column="10"/></operator><name pos:line="182" pos:column="10">re_dfastate_t<pos:position pos:line="182" pos:column="23"/></name> <operator pos:line="182" pos:column="24">*<pos:position pos:line="182" pos:column="25"/></operator><operator pos:line="182" pos:column="25">*<pos:position pos:line="182" pos:column="26"/></operator><operator pos:line="182" pos:column="26">)<pos:position pos:line="182" pos:column="27"/></operator> <call><name pos:line="182" pos:column="28">calloc<pos:position pos:line="182" pos:column="34"/></name> <argument_list pos:line="182" pos:column="35">(<argument><expr><sizeof pos:line="182" pos:column="36">sizeof <argument_list pos:line="182" pos:column="43">(<argument><expr><name pos:line="182" pos:column="44">re_dfastate_t<pos:position pos:line="182" pos:column="57"/></name> <operator pos:line="182" pos:column="58">*<pos:position pos:line="182" pos:column="59"/></operator></expr></argument>)<pos:position pos:line="182" pos:column="60"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="182" pos:column="62">2<pos:position pos:line="182" pos:column="63"/></literal> <operator pos:line="182" pos:column="64">*<pos:position pos:line="182" pos:column="65"/></operator> <name pos:line="182" pos:column="66">SBC_MAX<pos:position pos:line="182" pos:column="73"/></name></expr></argument>)<pos:position pos:line="182" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="75"/></expr_stmt>
      <if pos:line="183" pos:column="7">if <condition pos:line="183" pos:column="10">(<expr><call><name pos:line="183" pos:column="11">BE<pos:position pos:line="183" pos:column="13"/></name> <argument_list pos:line="183" pos:column="14">(<argument><expr><name pos:line="183" pos:column="15">trtable<pos:position pos:line="183" pos:column="22"/></name> <operator pos:line="183" pos:column="23">==<pos:position pos:line="183" pos:column="25"/></operator> <name pos:line="183" pos:column="26">NULL<pos:position pos:line="183" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="183" pos:column="32">0<pos:position pos:line="183" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="183" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="183" pos:column="35"/></condition><then pos:line="183" pos:column="35">
	<block type="pseudo"><goto pos:line="184" pos:column="9">goto <name pos:line="184" pos:column="14">out_free<pos:position pos:line="184" pos:column="22"/></name>;<pos:position pos:line="184" pos:column="23"/></goto></block></then></if>

      <comment type="block" pos:line="186" pos:column="7">/* For all characters ch...:  */</comment>
      <for pos:line="187" pos:column="7">for <control pos:line="187" pos:column="11">(<init><expr><name pos:line="187" pos:column="12">i<pos:position pos:line="187" pos:column="13"/></name> <operator pos:line="187" pos:column="14">=<pos:position pos:line="187" pos:column="15"/></operator> <literal type="number" pos:line="187" pos:column="16">0<pos:position pos:line="187" pos:column="17"/></literal></expr>;<pos:position pos:line="187" pos:column="18"/></init> <condition><expr><name pos:line="187" pos:column="19">i<pos:position pos:line="187" pos:column="20"/></name> <operator pos:line="187" pos:column="21">&lt;<pos:position pos:line="187" pos:column="25"/></operator> <name pos:line="187" pos:column="23">BITSET_WORDS<pos:position pos:line="187" pos:column="35"/></name></expr>;<pos:position pos:line="187" pos:column="36"/></condition> <incr><expr><operator pos:line="187" pos:column="37">++<pos:position pos:line="187" pos:column="39"/></operator><name pos:line="187" pos:column="39">i<pos:position pos:line="187" pos:column="40"/></name></expr></incr>)<pos:position pos:line="187" pos:column="41"/></control>
	<block type="pseudo"><for pos:line="188" pos:column="9">for <control pos:line="188" pos:column="13">(<init><expr><name pos:line="188" pos:column="14">ch<pos:position pos:line="188" pos:column="16"/></name> <operator pos:line="188" pos:column="17">=<pos:position pos:line="188" pos:column="18"/></operator> <name pos:line="188" pos:column="19">i<pos:position pos:line="188" pos:column="20"/></name> <operator pos:line="188" pos:column="21">*<pos:position pos:line="188" pos:column="22"/></operator> <name pos:line="188" pos:column="23">BITSET_WORD_BITS<pos:position pos:line="188" pos:column="39"/></name></expr><operator pos:line="188" pos:column="39">,<pos:position pos:line="188" pos:column="40"/></operator> <expr><name pos:line="188" pos:column="41">elem<pos:position pos:line="188" pos:column="45"/></name> <operator pos:line="188" pos:column="46">=<pos:position pos:line="188" pos:column="47"/></operator> <name><name pos:line="188" pos:column="48">acceptable<pos:position pos:line="188" pos:column="58"/></name><index pos:line="188" pos:column="58">[<expr><name pos:line="188" pos:column="59">i<pos:position pos:line="188" pos:column="60"/></name></expr>]<pos:position pos:line="188" pos:column="61"/></index></name></expr><operator pos:line="188" pos:column="61">,<pos:position pos:line="188" pos:column="62"/></operator> <expr><name pos:line="188" pos:column="63">mask<pos:position pos:line="188" pos:column="67"/></name> <operator pos:line="188" pos:column="68">=<pos:position pos:line="188" pos:column="69"/></operator> <literal type="number" pos:line="188" pos:column="70">1<pos:position pos:line="188" pos:column="71"/></literal></expr>;<pos:position pos:line="188" pos:column="72"/></init>
	     <condition><expr><name pos:line="189" pos:column="14">elem<pos:position pos:line="189" pos:column="18"/></name></expr>;<pos:position pos:line="189" pos:column="19"/></condition>
	     <incr><expr><name pos:line="190" pos:column="14">mask<pos:position pos:line="190" pos:column="18"/></name> <operator pos:line="190" pos:column="19">&lt;&lt;=<pos:position pos:line="190" pos:column="28"/></operator> <literal type="number" pos:line="190" pos:column="23">1<pos:position pos:line="190" pos:column="24"/></literal></expr><operator pos:line="190" pos:column="24">,<pos:position pos:line="190" pos:column="25"/></operator> <expr><name pos:line="190" pos:column="26">elem<pos:position pos:line="190" pos:column="30"/></name> <operator pos:line="190" pos:column="31">&gt;&gt;=<pos:position pos:line="190" pos:column="40"/></operator> <literal type="number" pos:line="190" pos:column="35">1<pos:position pos:line="190" pos:column="36"/></literal></expr><operator pos:line="190" pos:column="36">,<pos:position pos:line="190" pos:column="37"/></operator> <expr><operator pos:line="190" pos:column="38">++<pos:position pos:line="190" pos:column="40"/></operator><name pos:line="190" pos:column="40">ch<pos:position pos:line="190" pos:column="42"/></name></expr></incr>)<pos:position pos:line="190" pos:column="43"/></control>
	  <block type="pseudo"><if pos:line="191" pos:column="11">if <condition pos:line="191" pos:column="14">(<expr><call><name pos:line="191" pos:column="15">BE<pos:position pos:line="191" pos:column="17"/></name> <argument_list pos:line="191" pos:column="18">(<argument><expr><name pos:line="191" pos:column="19">elem<pos:position pos:line="191" pos:column="23"/></name> <operator pos:line="191" pos:column="24">&amp;<pos:position pos:line="191" pos:column="29"/></operator> <literal type="number" pos:line="191" pos:column="26">1<pos:position pos:line="191" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="191" pos:column="29">0<pos:position pos:line="191" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="191" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="191" pos:column="32"/></condition><then pos:line="191" pos:column="32">
	    <block pos:line="192" pos:column="13">{
	      <comment type="block" pos:line="193" pos:column="15">/* There must be exactly one destination which accepts
		 character ch.  See group_nodes_into_DFAstates.  */</comment>
	      <for pos:line="195" pos:column="15">for <control pos:line="195" pos:column="19">(<init><expr><name pos:line="195" pos:column="20">j<pos:position pos:line="195" pos:column="21"/></name> <operator pos:line="195" pos:column="22">=<pos:position pos:line="195" pos:column="23"/></operator> <literal type="number" pos:line="195" pos:column="24">0<pos:position pos:line="195" pos:column="25"/></literal></expr>;<pos:position pos:line="195" pos:column="26"/></init> <condition><expr><operator pos:line="195" pos:column="27">(<pos:position pos:line="195" pos:column="28"/></operator><name><name pos:line="195" pos:column="28">dests_ch<pos:position pos:line="195" pos:column="36"/></name><index pos:line="195" pos:column="36">[<expr><name pos:line="195" pos:column="37">j<pos:position pos:line="195" pos:column="38"/></name></expr>]<pos:position pos:line="195" pos:column="39"/></index><index pos:line="195" pos:column="39">[<expr><name pos:line="195" pos:column="40">i<pos:position pos:line="195" pos:column="41"/></name></expr>]<pos:position pos:line="195" pos:column="42"/></index></name> <operator pos:line="195" pos:column="43">&amp;<pos:position pos:line="195" pos:column="48"/></operator> <name pos:line="195" pos:column="45">mask<pos:position pos:line="195" pos:column="49"/></name><operator pos:line="195" pos:column="49">)<pos:position pos:line="195" pos:column="50"/></operator> <operator pos:line="195" pos:column="51">==<pos:position pos:line="195" pos:column="53"/></operator> <literal type="number" pos:line="195" pos:column="54">0<pos:position pos:line="195" pos:column="55"/></literal></expr>;<pos:position pos:line="195" pos:column="56"/></condition> <incr><expr><operator pos:line="195" pos:column="57">++<pos:position pos:line="195" pos:column="59"/></operator><name pos:line="195" pos:column="59">j<pos:position pos:line="195" pos:column="60"/></name></expr></incr>)<pos:position pos:line="195" pos:column="61"/></control>
		<block type="pseudo"><empty_stmt pos:line="196" pos:column="17">;<pos:position pos:line="196" pos:column="18"/></empty_stmt></block></for>

	      <comment type="block" pos:line="198" pos:column="15">/* j-th destination accepts the word character ch.  */</comment>
	      <expr_stmt><expr><name><name pos:line="199" pos:column="15">trtable<pos:position pos:line="199" pos:column="22"/></name><index pos:line="199" pos:column="22">[<expr><name pos:line="199" pos:column="23">ch<pos:position pos:line="199" pos:column="25"/></name></expr>]<pos:position pos:line="199" pos:column="26"/></index></name> <operator pos:line="199" pos:column="27">=<pos:position pos:line="199" pos:column="28"/></operator> <name><name pos:line="199" pos:column="29">dest_states<pos:position pos:line="199" pos:column="40"/></name><index pos:line="199" pos:column="40">[<expr><name pos:line="199" pos:column="41">j<pos:position pos:line="199" pos:column="42"/></name></expr>]<pos:position pos:line="199" pos:column="43"/></index></name></expr>;<pos:position pos:line="199" pos:column="44"/></expr_stmt>
	      <expr_stmt><expr><name><name pos:line="200" pos:column="15">trtable<pos:position pos:line="200" pos:column="22"/></name><index pos:line="200" pos:column="22">[<expr><name pos:line="200" pos:column="23">ch<pos:position pos:line="200" pos:column="25"/></name> <operator pos:line="200" pos:column="26">+<pos:position pos:line="200" pos:column="27"/></operator> <name pos:line="200" pos:column="28">SBC_MAX<pos:position pos:line="200" pos:column="35"/></name></expr>]<pos:position pos:line="200" pos:column="36"/></index></name> <operator pos:line="200" pos:column="37">=<pos:position pos:line="200" pos:column="38"/></operator> <name><name pos:line="200" pos:column="39">dest_states_word<pos:position pos:line="200" pos:column="55"/></name><index pos:line="200" pos:column="55">[<expr><name pos:line="200" pos:column="56">j<pos:position pos:line="200" pos:column="57"/></name></expr>]<pos:position pos:line="200" pos:column="58"/></index></name></expr>;<pos:position pos:line="200" pos:column="59"/></expr_stmt>
	    }<pos:position pos:line="201" pos:column="14"/></block></then></if></block></for></block></for>
    }<pos:position pos:line="202" pos:column="6"/></block></else></if>

  <comment type="block" pos:line="204" pos:column="3">/* new line */</comment>
  <if pos:line="205" pos:column="3">if <condition pos:line="205" pos:column="6">(<expr><call><name pos:line="205" pos:column="7">bitset_contain<pos:position pos:line="205" pos:column="21"/></name> <argument_list pos:line="205" pos:column="22">(<argument><expr><name pos:line="205" pos:column="23">acceptable<pos:position pos:line="205" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="205" pos:column="35">NEWLINE_CHAR<pos:position pos:line="205" pos:column="47"/></name></expr></argument>)<pos:position pos:line="205" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="205" pos:column="49"/></condition><then pos:line="205" pos:column="49">
    <block pos:line="206" pos:column="5">{
      <comment type="block" pos:line="207" pos:column="7">/* The current state accepts newline character.  */</comment>
      <for pos:line="208" pos:column="7">for <control pos:line="208" pos:column="11">(<init><expr><name pos:line="208" pos:column="12">j<pos:position pos:line="208" pos:column="13"/></name> <operator pos:line="208" pos:column="14">=<pos:position pos:line="208" pos:column="15"/></operator> <literal type="number" pos:line="208" pos:column="16">0<pos:position pos:line="208" pos:column="17"/></literal></expr>;<pos:position pos:line="208" pos:column="18"/></init> <condition><expr><name pos:line="208" pos:column="19">j<pos:position pos:line="208" pos:column="20"/></name> <operator pos:line="208" pos:column="21">&lt;<pos:position pos:line="208" pos:column="25"/></operator> <name pos:line="208" pos:column="23">ndests<pos:position pos:line="208" pos:column="29"/></name></expr>;<pos:position pos:line="208" pos:column="30"/></condition> <incr><expr><operator pos:line="208" pos:column="31">++<pos:position pos:line="208" pos:column="33"/></operator><name pos:line="208" pos:column="33">j<pos:position pos:line="208" pos:column="34"/></name></expr></incr>)<pos:position pos:line="208" pos:column="35"/></control>
	<block type="pseudo"><if pos:line="209" pos:column="9">if <condition pos:line="209" pos:column="12">(<expr><call><name pos:line="209" pos:column="13">bitset_contain<pos:position pos:line="209" pos:column="27"/></name> <argument_list pos:line="209" pos:column="28">(<argument><expr><name><name pos:line="209" pos:column="29">dests_ch<pos:position pos:line="209" pos:column="37"/></name><index pos:line="209" pos:column="37">[<expr><name pos:line="209" pos:column="38">j<pos:position pos:line="209" pos:column="39"/></name></expr>]<pos:position pos:line="209" pos:column="40"/></index></name></expr></argument>, <argument><expr><name pos:line="209" pos:column="42">NEWLINE_CHAR<pos:position pos:line="209" pos:column="54"/></name></expr></argument>)<pos:position pos:line="209" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="209" pos:column="56"/></condition><then pos:line="209" pos:column="56">
	  <block pos:line="210" pos:column="11">{
	    <comment type="block" pos:line="211" pos:column="13">/* k-th destination accepts newline character.  */</comment>
	    <expr_stmt><expr><name><name pos:line="212" pos:column="13">trtable<pos:position pos:line="212" pos:column="20"/></name><index pos:line="212" pos:column="20">[<expr><name pos:line="212" pos:column="21">NEWLINE_CHAR<pos:position pos:line="212" pos:column="33"/></name></expr>]<pos:position pos:line="212" pos:column="34"/></index></name> <operator pos:line="212" pos:column="35">=<pos:position pos:line="212" pos:column="36"/></operator> <name><name pos:line="212" pos:column="37">dest_states_nl<pos:position pos:line="212" pos:column="51"/></name><index pos:line="212" pos:column="51">[<expr><name pos:line="212" pos:column="52">j<pos:position pos:line="212" pos:column="53"/></name></expr>]<pos:position pos:line="212" pos:column="54"/></index></name></expr>;<pos:position pos:line="212" pos:column="55"/></expr_stmt>
	    <if pos:line="213" pos:column="13">if <condition pos:line="213" pos:column="16">(<expr><name pos:line="213" pos:column="17">need_word_trtable<pos:position pos:line="213" pos:column="34"/></name></expr>)<pos:position pos:line="213" pos:column="35"/></condition><then pos:line="213" pos:column="35">
	      <block type="pseudo"><expr_stmt><expr><name><name pos:line="214" pos:column="15">trtable<pos:position pos:line="214" pos:column="22"/></name><index pos:line="214" pos:column="22">[<expr><name pos:line="214" pos:column="23">NEWLINE_CHAR<pos:position pos:line="214" pos:column="35"/></name> <operator pos:line="214" pos:column="36">+<pos:position pos:line="214" pos:column="37"/></operator> <name pos:line="214" pos:column="38">SBC_MAX<pos:position pos:line="214" pos:column="45"/></name></expr>]<pos:position pos:line="214" pos:column="46"/></index></name> <operator pos:line="214" pos:column="47">=<pos:position pos:line="214" pos:column="48"/></operator> <name><name pos:line="214" pos:column="49">dest_states_nl<pos:position pos:line="214" pos:column="63"/></name><index pos:line="214" pos:column="63">[<expr><name pos:line="214" pos:column="64">j<pos:position pos:line="214" pos:column="65"/></name></expr>]<pos:position pos:line="214" pos:column="66"/></index></name></expr>;<pos:position pos:line="214" pos:column="67"/></expr_stmt></block></then></if>
	    <comment type="block" pos:line="215" pos:column="13">/* There must be only one destination which accepts
	       newline.  See group_nodes_into_DFAstates.  */</comment>
	    <break pos:line="217" pos:column="13">break;<pos:position pos:line="217" pos:column="19"/></break>
	  }<pos:position pos:line="218" pos:column="12"/></block></then></if></block></for>
    }<pos:position pos:line="219" pos:column="6"/></block></then></if>

  <if pos:line="221" pos:column="3">if <condition pos:line="221" pos:column="6">(<expr><name pos:line="221" pos:column="7">dest_states_malloced<pos:position pos:line="221" pos:column="27"/></name></expr>)<pos:position pos:line="221" pos:column="28"/></condition><then pos:line="221" pos:column="28">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="222" pos:column="5">free<pos:position pos:line="222" pos:column="9"/></name> <argument_list pos:line="222" pos:column="10">(<argument><expr><name pos:line="222" pos:column="11">dest_states<pos:position pos:line="222" pos:column="22"/></name></expr></argument>)<pos:position pos:line="222" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="24"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="224" pos:column="3">re_node_set_free<pos:position pos:line="224" pos:column="19"/></name> <argument_list pos:line="224" pos:column="20">(<argument><expr><operator pos:line="224" pos:column="21">&amp;<pos:position pos:line="224" pos:column="26"/></operator><name pos:line="224" pos:column="22">follows<pos:position pos:line="224" pos:column="29"/></name></expr></argument>)<pos:position pos:line="224" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="31"/></expr_stmt>
  <for pos:line="225" pos:column="3">for <control pos:line="225" pos:column="7">(<init><expr><name pos:line="225" pos:column="8">i<pos:position pos:line="225" pos:column="9"/></name> <operator pos:line="225" pos:column="10">=<pos:position pos:line="225" pos:column="11"/></operator> <literal type="number" pos:line="225" pos:column="12">0<pos:position pos:line="225" pos:column="13"/></literal></expr>;<pos:position pos:line="225" pos:column="14"/></init> <condition><expr><name pos:line="225" pos:column="15">i<pos:position pos:line="225" pos:column="16"/></name> <operator pos:line="225" pos:column="17">&lt;<pos:position pos:line="225" pos:column="21"/></operator> <name pos:line="225" pos:column="19">ndests<pos:position pos:line="225" pos:column="25"/></name></expr>;<pos:position pos:line="225" pos:column="26"/></condition> <incr><expr><operator pos:line="225" pos:column="27">++<pos:position pos:line="225" pos:column="29"/></operator><name pos:line="225" pos:column="29">i<pos:position pos:line="225" pos:column="30"/></name></expr></incr>)<pos:position pos:line="225" pos:column="31"/></control>
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="226" pos:column="5">re_node_set_free<pos:position pos:line="226" pos:column="21"/></name> <argument_list pos:line="226" pos:column="22">(<argument><expr><name pos:line="226" pos:column="23">dests_node<pos:position pos:line="226" pos:column="33"/></name> <operator pos:line="226" pos:column="34">+<pos:position pos:line="226" pos:column="35"/></operator> <name pos:line="226" pos:column="36">i<pos:position pos:line="226" pos:column="37"/></name></expr></argument>)<pos:position pos:line="226" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="39"/></expr_stmt></block></for>

  <if pos:line="228" pos:column="3">if <condition pos:line="228" pos:column="6">(<expr><name pos:line="228" pos:column="7">dests_node_malloced<pos:position pos:line="228" pos:column="26"/></name></expr>)<pos:position pos:line="228" pos:column="27"/></condition><then pos:line="228" pos:column="27">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="229" pos:column="5">free<pos:position pos:line="229" pos:column="9"/></name> <argument_list pos:line="229" pos:column="10">(<argument><expr><name pos:line="229" pos:column="11">dests_alloc<pos:position pos:line="229" pos:column="22"/></name></expr></argument>)<pos:position pos:line="229" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="229" pos:column="24"/></expr_stmt></block></then></if>

  <return pos:line="231" pos:column="3">return <expr><literal type="number" pos:line="231" pos:column="10">1<pos:position pos:line="231" pos:column="11"/></literal></expr>;<pos:position pos:line="231" pos:column="12"/></return>
}<pos:position pos:line="232" pos:column="2"/></block></function></unit>
