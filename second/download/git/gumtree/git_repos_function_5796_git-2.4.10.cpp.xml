<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5796_git-2.4.10.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name><modifier pos:line="1" pos:column="5">*<pos:position pos:line="1" pos:column="6"/></modifier></type> <name pos:line="1" pos:column="7">mspace_calloc<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">mspace<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">msp<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">size_t<pos:position pos:line="1" pos:column="39"/></name></type> <name pos:line="1" pos:column="40">n_elements<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">size_t<pos:position pos:line="1" pos:column="58"/></name></type> <name pos:line="1" pos:column="59">elem_size<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list> <block pos:line="1" pos:column="70">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">void<pos:position pos:line="2" pos:column="7"/></name><modifier pos:line="2" pos:column="7">*<pos:position pos:line="2" pos:column="8"/></modifier></type> <name pos:line="2" pos:column="9">mem<pos:position pos:line="2" pos:column="12"/></name></decl>;<pos:position pos:line="2" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">size_t<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">req<pos:position pos:line="3" pos:column="13"/></name> <init pos:line="3" pos:column="14">= <expr><literal type="number" pos:line="3" pos:column="16">0<pos:position pos:line="3" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">mstate<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">ms<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><operator pos:line="4" pos:column="15">(<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">mstate<pos:position pos:line="4" pos:column="22"/></name><operator pos:line="4" pos:column="22">)<pos:position pos:line="4" pos:column="23"/></operator><name pos:line="4" pos:column="23">msp<pos:position pos:line="4" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><operator pos:line="5" pos:column="7">!<pos:position pos:line="5" pos:column="8"/></operator><call><name pos:line="5" pos:column="8">ok_magic<pos:position pos:line="5" pos:column="16"/></name><argument_list pos:line="5" pos:column="16">(<argument><expr><name pos:line="5" pos:column="17">ms<pos:position pos:line="5" pos:column="19"/></name></expr></argument>)<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="21"/></condition><then pos:line="5" pos:column="21"> <block pos:line="5" pos:column="22">{
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">USAGE_ERROR_ACTION<pos:position pos:line="6" pos:column="23"/></name><argument_list pos:line="6" pos:column="23">(<argument><expr><name pos:line="6" pos:column="24">ms<pos:position pos:line="6" pos:column="26"/></name></expr></argument>,<argument><expr><name pos:line="6" pos:column="27">ms<pos:position pos:line="6" pos:column="29"/></name></expr></argument>)<pos:position pos:line="6" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="31"/></expr_stmt>
    <return pos:line="7" pos:column="5">return <expr><literal type="number" pos:line="7" pos:column="12">0<pos:position pos:line="7" pos:column="13"/></literal></expr>;<pos:position pos:line="7" pos:column="14"/></return>
  }<pos:position pos:line="8" pos:column="4"/></block></then></if>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">n_elements<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">!=<pos:position pos:line="9" pos:column="20"/></operator> <literal type="number" pos:line="9" pos:column="21">0<pos:position pos:line="9" pos:column="22"/></literal></expr>)<pos:position pos:line="9" pos:column="23"/></condition><then pos:line="9" pos:column="23"> <block pos:line="9" pos:column="24">{
    <expr_stmt><expr><name pos:line="10" pos:column="5">req<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">=<pos:position pos:line="10" pos:column="10"/></operator> <name pos:line="10" pos:column="11">n_elements<pos:position pos:line="10" pos:column="21"/></name> <operator pos:line="10" pos:column="22">*<pos:position pos:line="10" pos:column="23"/></operator> <name pos:line="10" pos:column="24">elem_size<pos:position pos:line="10" pos:column="33"/></name></expr>;<pos:position pos:line="10" pos:column="34"/></expr_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">(<pos:position pos:line="11" pos:column="10"/></operator><operator pos:line="11" pos:column="10">(<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">n_elements<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">|<pos:position pos:line="11" pos:column="23"/></operator> <name pos:line="11" pos:column="24">elem_size<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">)<pos:position pos:line="11" pos:column="34"/></operator> <operator pos:line="11" pos:column="35">&amp;<pos:position pos:line="11" pos:column="40"/></operator> <operator pos:line="11" pos:column="37">~<pos:position pos:line="11" pos:column="38"/></operator><operator pos:line="11" pos:column="38">(<pos:position pos:line="11" pos:column="39"/></operator><name pos:line="11" pos:column="39">size_t<pos:position pos:line="11" pos:column="45"/></name><operator pos:line="11" pos:column="45">)<pos:position pos:line="11" pos:column="46"/></operator><literal type="number" pos:line="11" pos:column="46">0xffff<pos:position pos:line="11" pos:column="52"/></literal><operator pos:line="11" pos:column="52">)<pos:position pos:line="11" pos:column="53"/></operator> <operator pos:line="11" pos:column="54">&amp;&amp;<pos:position pos:line="11" pos:column="64"/></operator>
	<operator pos:line="12" pos:column="9">(<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">req<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">/<pos:position pos:line="12" pos:column="15"/></operator> <name pos:line="12" pos:column="16">n_elements<pos:position pos:line="12" pos:column="26"/></name> <operator pos:line="12" pos:column="27">!=<pos:position pos:line="12" pos:column="29"/></operator> <name pos:line="12" pos:column="30">elem_size<pos:position pos:line="12" pos:column="39"/></name><operator pos:line="12" pos:column="39">)<pos:position pos:line="12" pos:column="40"/></operator></expr>)<pos:position pos:line="12" pos:column="41"/></condition><then pos:line="12" pos:column="41">
      <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="7">req<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <name pos:line="13" pos:column="13">MAX_SIZE_T<pos:position pos:line="13" pos:column="23"/></name></expr>;<pos:position pos:line="13" pos:column="24"/></expr_stmt></block></then></if> <comment type="block" pos:line="13" pos:column="25">/* force downstream failure on overflow */</comment>
  }<pos:position pos:line="14" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="15" pos:column="3">mem<pos:position pos:line="15" pos:column="6"/></name> <operator pos:line="15" pos:column="7">=<pos:position pos:line="15" pos:column="8"/></operator> <call><name pos:line="15" pos:column="9">internal_malloc<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">ms<pos:position pos:line="15" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="29">req<pos:position pos:line="15" pos:column="32"/></name></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name pos:line="16" pos:column="7">mem<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">!=<pos:position pos:line="16" pos:column="13"/></operator> <literal type="number" pos:line="16" pos:column="14">0<pos:position pos:line="16" pos:column="15"/></literal> <operator pos:line="16" pos:column="16">&amp;&amp;<pos:position pos:line="16" pos:column="26"/></operator> <call><name pos:line="16" pos:column="19">calloc_must_clear<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">(<argument><expr><call><name pos:line="16" pos:column="37">mem2chunk<pos:position pos:line="16" pos:column="46"/></name><argument_list pos:line="16" pos:column="46">(<argument><expr><name pos:line="16" pos:column="47">mem<pos:position pos:line="16" pos:column="50"/></name></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="53"/></condition><then pos:line="16" pos:column="53">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="5">memset<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name pos:line="17" pos:column="12">mem<pos:position pos:line="17" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="17">0<pos:position pos:line="17" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="20">req<pos:position pos:line="17" pos:column="23"/></name></expr></argument>)<pos:position pos:line="17" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt></block></then></if>
  <return pos:line="18" pos:column="3">return <expr><name pos:line="18" pos:column="10">mem<pos:position pos:line="18" pos:column="13"/></name></expr>;<pos:position pos:line="18" pos:column="14"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
