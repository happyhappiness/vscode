<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_165_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">upload_pack<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">void<pos:position pos:line="1" pos:column="29"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">string_list<pos:position pos:line="3" pos:column="27"/></name></name></type> <name pos:line="3" pos:column="28">symref<pos:position pos:line="3" pos:column="34"/></name> <init pos:line="3" pos:column="35">= <expr><name pos:line="3" pos:column="37">STRING_LIST_INIT_DUP<pos:position pos:line="3" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="58"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">head_ref_namespaced<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">(<argument><expr><name pos:line="5" pos:column="29">find_symref<pos:position pos:line="5" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="42">&amp;<pos:position pos:line="5" pos:column="47"/></operator><name pos:line="5" pos:column="43">symref<pos:position pos:line="5" pos:column="49"/></name></expr></argument>)<pos:position pos:line="5" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="51"/></expr_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">advertise_refs<pos:position pos:line="7" pos:column="27"/></name> <operator pos:line="7" pos:column="28">||<pos:position pos:line="7" pos:column="30"/></operator> <operator pos:line="7" pos:column="31">!<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="32">stateless_rpc<pos:position pos:line="7" pos:column="45"/></name></expr>)<pos:position pos:line="7" pos:column="46"/></condition><then pos:line="7" pos:column="46"> <block pos:line="7" pos:column="47">{
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">reset_timeout<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">()<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">head_ref_namespaced<pos:position pos:line="9" pos:column="36"/></name><argument_list pos:line="9" pos:column="36">(<argument><expr><name pos:line="9" pos:column="37">send_ref<pos:position pos:line="9" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="47">&amp;<pos:position pos:line="9" pos:column="52"/></operator><name pos:line="9" pos:column="48">symref<pos:position pos:line="9" pos:column="54"/></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">for_each_namespaced_ref<pos:position pos:line="10" pos:column="40"/></name><argument_list pos:line="10" pos:column="40">(<argument><expr><name pos:line="10" pos:column="41">send_ref<pos:position pos:line="10" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="51">&amp;<pos:position pos:line="10" pos:column="56"/></operator><name pos:line="10" pos:column="52">symref<pos:position pos:line="10" pos:column="58"/></name></expr></argument>)<pos:position pos:line="10" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">advertise_shallow_grafts<pos:position pos:line="11" pos:column="41"/></name><argument_list pos:line="11" pos:column="41">(<argument><expr><literal type="number" pos:line="11" pos:column="42">1<pos:position pos:line="11" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">packet_flush<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><literal type="number" pos:line="12" pos:column="30">1<pos:position pos:line="12" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then> <else pos:line="13" pos:column="11">else <block pos:line="13" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">head_ref_namespaced<pos:position pos:line="14" pos:column="36"/></name><argument_list pos:line="14" pos:column="36">(<argument><expr><name pos:line="14" pos:column="37">check_ref<pos:position pos:line="14" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="48">NULL<pos:position pos:line="14" pos:column="52"/></name></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">for_each_namespaced_ref<pos:position pos:line="15" pos:column="40"/></name><argument_list pos:line="15" pos:column="40">(<argument><expr><name pos:line="15" pos:column="41">check_ref<pos:position pos:line="15" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="52">NULL<pos:position pos:line="15" pos:column="56"/></name></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="16" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">string_list_clear<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><operator pos:line="17" pos:column="27">&amp;<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="28">symref<pos:position pos:line="17" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="36">1<pos:position pos:line="17" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="39"/></expr_stmt>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">advertise_refs<pos:position pos:line="18" pos:column="27"/></name></expr>)<pos:position pos:line="18" pos:column="28"/></condition><then pos:line="18" pos:column="28">
		<block type="pseudo"><return pos:line="19" pos:column="17">return;<pos:position pos:line="19" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="21" pos:column="9">receive_needs<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">()<pos:position pos:line="21" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="25"/></expr_stmt>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name><name pos:line="22" pos:column="13">want_obj<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">.<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">nr<pos:position pos:line="22" pos:column="24"/></name></name></expr>)<pos:position pos:line="22" pos:column="25"/></condition><then pos:line="22" pos:column="25"> <block pos:line="22" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">get_common_commits<pos:position pos:line="23" pos:column="35"/></name><argument_list pos:line="23" pos:column="35">()<pos:position pos:line="23" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">create_pack_file<pos:position pos:line="24" pos:column="33"/></name><argument_list pos:line="24" pos:column="33">()<pos:position pos:line="24" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
