<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5504_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">check_unreachable_object<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name><name pos:line="1" pos:column="38">struct<pos:position pos:line="1" pos:column="44"/></name> <name pos:line="1" pos:column="45">object<pos:position pos:line="1" pos:column="51"/></name></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">obj<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/*
	 * Missing unreachable object? Ignore it. It's not like
	 * we miss it (since it can't be reached), nor do we want
	 * to complain about it being unreachable (since it does
	 * not exist).
	 */</comment>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><operator pos:line="9" pos:column="14">(<pos:position pos:line="9" pos:column="15"/></operator><name><name pos:line="9" pos:column="15">obj<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">-&gt;<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="20">flags<pos:position pos:line="9" pos:column="25"/></name></name> <operator pos:line="9" pos:column="26">&amp;<pos:position pos:line="9" pos:column="31"/></operator> <name pos:line="9" pos:column="28">HAS_OBJ<pos:position pos:line="9" pos:column="35"/></name><operator pos:line="9" pos:column="35">)<pos:position pos:line="9" pos:column="36"/></operator></expr>)<pos:position pos:line="9" pos:column="37"/></condition><then pos:line="9" pos:column="37">
		<block type="pseudo"><return pos:line="10" pos:column="17">return;<pos:position pos:line="10" pos:column="24"/></return></block></then></if>

	<comment type="block" pos:line="12" pos:column="9">/*
	 * Unreachable object that exists? Show it if asked to,
	 * since this is something that is prunable.
	 */</comment>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">show_unreachable<pos:position pos:line="16" pos:column="29"/></name></expr>)<pos:position pos:line="16" pos:column="30"/></condition><then pos:line="16" pos:column="30"> <block pos:line="16" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">printf<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><literal type="string" pos:line="17" pos:column="24">"unreachable %s %s\n"<pos:position pos:line="17" pos:column="45"/></literal></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="47">printable_type<pos:position pos:line="17" pos:column="61"/></name><argument_list pos:line="17" pos:column="61">(<argument><expr><name pos:line="17" pos:column="62">obj<pos:position pos:line="17" pos:column="65"/></name></expr></argument>)<pos:position pos:line="17" pos:column="66"/></argument_list></call></expr></argument>,
			<argument><expr><call><name pos:line="18" pos:column="25">describe_object<pos:position pos:line="18" pos:column="40"/></name><argument_list pos:line="18" pos:column="40">(<argument><expr><name pos:line="18" pos:column="41">obj<pos:position pos:line="18" pos:column="44"/></name></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="47"/></expr_stmt>
		<return pos:line="19" pos:column="17">return;<pos:position pos:line="19" pos:column="24"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="22" pos:column="9">/*
	 * "!USED" means that nothing at all points to it, including
	 * other unreachable objects. In other words, it's the "tip"
	 * of some set of unreachable objects, usually a commit that
	 * got dropped.
	 *
	 * Such starting points are more interesting than some random
	 * set of unreachable objects, so we show them even if the user
	 * hasn't asked for _all_ unreachable objects. If you have
	 * deleted a branch by mistake, this is a prime candidate to
	 * start looking at, for example.
	 */</comment>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><operator pos:line="34" pos:column="14">(<pos:position pos:line="34" pos:column="15"/></operator><name><name pos:line="34" pos:column="15">obj<pos:position pos:line="34" pos:column="18"/></name><operator pos:line="34" pos:column="18">-&gt;<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="20">flags<pos:position pos:line="34" pos:column="25"/></name></name> <operator pos:line="34" pos:column="26">&amp;<pos:position pos:line="34" pos:column="31"/></operator> <name pos:line="34" pos:column="28">USED<pos:position pos:line="34" pos:column="32"/></name><operator pos:line="34" pos:column="32">)<pos:position pos:line="34" pos:column="33"/></operator></expr>)<pos:position pos:line="34" pos:column="34"/></condition><then pos:line="34" pos:column="34"> <block pos:line="34" pos:column="35">{
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">show_dangling<pos:position pos:line="35" pos:column="34"/></name></expr>)<pos:position pos:line="35" pos:column="35"/></condition><then pos:line="35" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="25">printf<pos:position pos:line="36" pos:column="31"/></name><argument_list pos:line="36" pos:column="31">(<argument><expr><literal type="string" pos:line="36" pos:column="32">"dangling %s %s\n"<pos:position pos:line="36" pos:column="50"/></literal></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="52">printable_type<pos:position pos:line="36" pos:column="66"/></name><argument_list pos:line="36" pos:column="66">(<argument><expr><name pos:line="36" pos:column="67">obj<pos:position pos:line="36" pos:column="70"/></name></expr></argument>)<pos:position pos:line="36" pos:column="71"/></argument_list></call></expr></argument>,
			       <argument><expr><call><name pos:line="37" pos:column="32">describe_object<pos:position pos:line="37" pos:column="47"/></name><argument_list pos:line="37" pos:column="47">(<argument><expr><name pos:line="37" pos:column="48">obj<pos:position pos:line="37" pos:column="51"/></name></expr></argument>)<pos:position pos:line="37" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="54"/></expr_stmt></block></then></if>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">write_lost_and_found<pos:position pos:line="38" pos:column="41"/></name></expr>)<pos:position pos:line="38" pos:column="42"/></condition><then pos:line="38" pos:column="42"> <block pos:line="38" pos:column="43">{
			<decl_stmt><decl><type><name pos:line="39" pos:column="25">char<pos:position pos:line="39" pos:column="29"/></name> <modifier pos:line="39" pos:column="30">*<pos:position pos:line="39" pos:column="31"/></modifier></type><name pos:line="39" pos:column="31">filename<pos:position pos:line="39" pos:column="39"/></name> <init pos:line="39" pos:column="40">= <expr><call><name pos:line="39" pos:column="42">git_pathdup<pos:position pos:line="39" pos:column="53"/></name><argument_list pos:line="39" pos:column="53">(<argument><expr><literal type="string" pos:line="39" pos:column="54">"lost-found/%s/%s"<pos:position pos:line="39" pos:column="72"/></literal></expr></argument>,
				<argument><expr><ternary><condition><expr><name><name pos:line="40" pos:column="33">obj<pos:position pos:line="40" pos:column="36"/></name><operator pos:line="40" pos:column="36">-&gt;<pos:position pos:line="40" pos:column="41"/></operator><name pos:line="40" pos:column="38">type<pos:position pos:line="40" pos:column="42"/></name></name> <operator pos:line="40" pos:column="43">==<pos:position pos:line="40" pos:column="45"/></operator> <name pos:line="40" pos:column="46">OBJ_COMMIT<pos:position pos:line="40" pos:column="56"/></name></expr> ?<pos:position pos:line="40" pos:column="58"/></condition><then pos:line="40" pos:column="58"> <expr><literal type="string" pos:line="40" pos:column="59">"commit"<pos:position pos:line="40" pos:column="67"/></literal></expr> <pos:position pos:line="40" pos:column="68"/></then><else pos:line="40" pos:column="68">: <expr><literal type="string" pos:line="40" pos:column="70">"other"<pos:position pos:line="40" pos:column="77"/></literal></expr></else></ternary></expr></argument>,
				<argument><expr><call><name pos:line="41" pos:column="33">describe_object<pos:position pos:line="41" pos:column="48"/></name><argument_list pos:line="41" pos:column="48">(<argument><expr><name pos:line="41" pos:column="49">obj<pos:position pos:line="41" pos:column="52"/></name></expr></argument>)<pos:position pos:line="41" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="41" pos:column="55"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="42" pos:column="25">FILE<pos:position pos:line="42" pos:column="29"/></name> <modifier pos:line="42" pos:column="30">*<pos:position pos:line="42" pos:column="31"/></modifier></type><name pos:line="42" pos:column="31">f<pos:position pos:line="42" pos:column="32"/></name></decl>;<pos:position pos:line="42" pos:column="33"/></decl_stmt>

			<if pos:line="44" pos:column="25">if <condition pos:line="44" pos:column="28">(<expr><call><name pos:line="44" pos:column="29">safe_create_leading_directories_const<pos:position pos:line="44" pos:column="66"/></name><argument_list pos:line="44" pos:column="66">(<argument><expr><name pos:line="44" pos:column="67">filename<pos:position pos:line="44" pos:column="75"/></name></expr></argument>)<pos:position pos:line="44" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="77"/></condition><then pos:line="44" pos:column="77"> <block pos:line="44" pos:column="78">{
				<expr_stmt><expr><call><name pos:line="45" pos:column="33">error<pos:position pos:line="45" pos:column="38"/></name><argument_list pos:line="45" pos:column="38">(<argument><expr><literal type="string" pos:line="45" pos:column="39">"Could not create lost-found"<pos:position pos:line="45" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="70"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="46" pos:column="33">free<pos:position pos:line="46" pos:column="37"/></name><argument_list pos:line="46" pos:column="37">(<argument><expr><name pos:line="46" pos:column="38">filename<pos:position pos:line="46" pos:column="46"/></name></expr></argument>)<pos:position pos:line="46" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="48"/></expr_stmt>
				<return pos:line="47" pos:column="33">return;<pos:position pos:line="47" pos:column="40"/></return>
			}<pos:position pos:line="48" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="49" pos:column="25">f<pos:position pos:line="49" pos:column="26"/></name> <operator pos:line="49" pos:column="27">=<pos:position pos:line="49" pos:column="28"/></operator> <call><name pos:line="49" pos:column="29">xfopen<pos:position pos:line="49" pos:column="35"/></name><argument_list pos:line="49" pos:column="35">(<argument><expr><name pos:line="49" pos:column="36">filename<pos:position pos:line="49" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="46">"w"<pos:position pos:line="49" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="51"/></expr_stmt>
			<if pos:line="50" pos:column="25">if <condition pos:line="50" pos:column="28">(<expr><name><name pos:line="50" pos:column="29">obj<pos:position pos:line="50" pos:column="32"/></name><operator pos:line="50" pos:column="32">-&gt;<pos:position pos:line="50" pos:column="37"/></operator><name pos:line="50" pos:column="34">type<pos:position pos:line="50" pos:column="38"/></name></name> <operator pos:line="50" pos:column="39">==<pos:position pos:line="50" pos:column="41"/></operator> <name pos:line="50" pos:column="42">OBJ_BLOB<pos:position pos:line="50" pos:column="50"/></name></expr>)<pos:position pos:line="50" pos:column="51"/></condition><then pos:line="50" pos:column="51"> <block pos:line="50" pos:column="52">{
				<if pos:line="51" pos:column="33">if <condition pos:line="51" pos:column="36">(<expr><call><name pos:line="51" pos:column="37">stream_blob_to_fd<pos:position pos:line="51" pos:column="54"/></name><argument_list pos:line="51" pos:column="54">(<argument><expr><call><name pos:line="51" pos:column="55">fileno<pos:position pos:line="51" pos:column="61"/></name><argument_list pos:line="51" pos:column="61">(<argument><expr><name pos:line="51" pos:column="62">f<pos:position pos:line="51" pos:column="63"/></name></expr></argument>)<pos:position pos:line="51" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="51" pos:column="66">&amp;<pos:position pos:line="51" pos:column="71"/></operator><name><name pos:line="51" pos:column="67">obj<pos:position pos:line="51" pos:column="70"/></name><operator pos:line="51" pos:column="70">-&gt;<pos:position pos:line="51" pos:column="75"/></operator><name pos:line="51" pos:column="72">oid<pos:position pos:line="51" pos:column="75"/></name></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="77">NULL<pos:position pos:line="51" pos:column="81"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="83">1<pos:position pos:line="51" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="85"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="86"/></condition><then pos:line="51" pos:column="86">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="41">die_errno<pos:position pos:line="52" pos:column="50"/></name><argument_list pos:line="52" pos:column="50">(<argument><expr><literal type="string" pos:line="52" pos:column="51">"Could not write '%s'"<pos:position pos:line="52" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="75">filename<pos:position pos:line="52" pos:column="83"/></name></expr></argument>)<pos:position pos:line="52" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="85"/></expr_stmt></block></then></if>
			}<pos:position pos:line="53" pos:column="26"/></block></then> <else pos:line="53" pos:column="27">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="33">fprintf<pos:position pos:line="54" pos:column="40"/></name><argument_list pos:line="54" pos:column="40">(<argument><expr><name pos:line="54" pos:column="41">f<pos:position pos:line="54" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="44">"%s\n"<pos:position pos:line="54" pos:column="50"/></literal></expr></argument>, <argument><expr><call><name pos:line="54" pos:column="52">describe_object<pos:position pos:line="54" pos:column="67"/></name><argument_list pos:line="54" pos:column="67">(<argument><expr><name pos:line="54" pos:column="68">obj<pos:position pos:line="54" pos:column="71"/></name></expr></argument>)<pos:position pos:line="54" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="74"/></expr_stmt></block></else></if>
			<if pos:line="55" pos:column="25">if <condition pos:line="55" pos:column="28">(<expr><call><name pos:line="55" pos:column="29">fclose<pos:position pos:line="55" pos:column="35"/></name><argument_list pos:line="55" pos:column="35">(<argument><expr><name pos:line="55" pos:column="36">f<pos:position pos:line="55" pos:column="37"/></name></expr></argument>)<pos:position pos:line="55" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="39"/></condition><then pos:line="55" pos:column="39">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="33">die_errno<pos:position pos:line="56" pos:column="42"/></name><argument_list pos:line="56" pos:column="42">(<argument><expr><literal type="string" pos:line="56" pos:column="43">"Could not finish '%s'"<pos:position pos:line="56" pos:column="66"/></literal></expr></argument>,
					  <argument><expr><name pos:line="57" pos:column="43">filename<pos:position pos:line="57" pos:column="51"/></name></expr></argument>)<pos:position pos:line="57" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="53"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="58" pos:column="25">free<pos:position pos:line="58" pos:column="29"/></name><argument_list pos:line="58" pos:column="29">(<argument><expr><name pos:line="58" pos:column="30">filename<pos:position pos:line="58" pos:column="38"/></name></expr></argument>)<pos:position pos:line="58" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="59" pos:column="18"/></block></then></if>
		<return pos:line="60" pos:column="17">return;<pos:position pos:line="60" pos:column="24"/></return>
	}<pos:position pos:line="61" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="63" pos:column="9">/*
	 * Otherwise? It's there, it's unreachable, and some other unreachable
	 * object points to it. Ignore it - it's not interesting, and we showed
	 * all the interesting cases above.
	 */</comment>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
