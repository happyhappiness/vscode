<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_431_git-2.13.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">diffgrep_consume<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">void<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">priv<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">line<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">unsigned<pos:position pos:line="1" pos:column="62"/></name> <name pos:line="1" pos:column="63">long<pos:position pos:line="1" pos:column="67"/></name></type> <name pos:line="1" pos:column="68">len<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">diffgrep_cb<pos:position pos:line="3" pos:column="27"/></name></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">data<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><name pos:line="3" pos:column="36">priv<pos:position pos:line="3" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">regmatch_t<pos:position pos:line="4" pos:column="19"/></name></type> <name pos:line="4" pos:column="20">regmatch<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name><name pos:line="6" pos:column="13">line<pos:position pos:line="6" pos:column="17"/></name><index pos:line="6" pos:column="17">[<expr><literal type="number" pos:line="6" pos:column="18">0<pos:position pos:line="6" pos:column="19"/></literal></expr>]<pos:position pos:line="6" pos:column="20"/></index></name> <operator pos:line="6" pos:column="21">!=<pos:position pos:line="6" pos:column="23"/></operator> <literal type="char" pos:line="6" pos:column="24">'+'<pos:position pos:line="6" pos:column="27"/></literal> <operator pos:line="6" pos:column="28">&amp;&amp;<pos:position pos:line="6" pos:column="38"/></operator> <name><name pos:line="6" pos:column="31">line<pos:position pos:line="6" pos:column="35"/></name><index pos:line="6" pos:column="35">[<expr><literal type="number" pos:line="6" pos:column="36">0<pos:position pos:line="6" pos:column="37"/></literal></expr>]<pos:position pos:line="6" pos:column="38"/></index></name> <operator pos:line="6" pos:column="39">!=<pos:position pos:line="6" pos:column="41"/></operator> <literal type="char" pos:line="6" pos:column="42">'-'<pos:position pos:line="6" pos:column="45"/></literal></expr>)<pos:position pos:line="6" pos:column="46"/></condition><then pos:line="6" pos:column="46">
		<block type="pseudo"><return pos:line="7" pos:column="17">return;<pos:position pos:line="7" pos:column="24"/></return></block></then></if>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name><name pos:line="8" pos:column="13">data<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">-&gt;<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="19">hit<pos:position pos:line="8" pos:column="22"/></name></name></expr>)<pos:position pos:line="8" pos:column="23"/></condition><then pos:line="8" pos:column="23">
		<comment type="block" pos:line="9" pos:column="17">/*
		 * NEEDSWORK: we should have a way to terminate the
		 * caller early.
		 */</comment>
		<block type="pseudo"><return pos:line="13" pos:column="17">return;<pos:position pos:line="13" pos:column="24"/></return></block></then></if>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">data<pos:position pos:line="14" pos:column="13"/></name><operator pos:line="14" pos:column="13">-&gt;<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="15">hit<pos:position pos:line="14" pos:column="18"/></name></name> <operator pos:line="14" pos:column="19">=<pos:position pos:line="14" pos:column="20"/></operator> <operator pos:line="14" pos:column="21">!<pos:position pos:line="14" pos:column="22"/></operator><call><name pos:line="14" pos:column="22">regexec_buf<pos:position pos:line="14" pos:column="33"/></name><argument_list pos:line="14" pos:column="33">(<argument><expr><name><name pos:line="14" pos:column="34">data<pos:position pos:line="14" pos:column="38"/></name><operator pos:line="14" pos:column="38">-&gt;<pos:position pos:line="14" pos:column="43"/></operator><name pos:line="14" pos:column="40">regexp<pos:position pos:line="14" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="48">line<pos:position pos:line="14" pos:column="52"/></name> <operator pos:line="14" pos:column="53">+<pos:position pos:line="14" pos:column="54"/></operator> <literal type="number" pos:line="14" pos:column="55">1<pos:position pos:line="14" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="58">len<pos:position pos:line="14" pos:column="61"/></name> <operator pos:line="14" pos:column="62">-<pos:position pos:line="14" pos:column="63"/></operator> <literal type="number" pos:line="14" pos:column="64">1<pos:position pos:line="14" pos:column="65"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="67">1<pos:position pos:line="14" pos:column="68"/></literal></expr></argument>,
				 <argument><expr><operator pos:line="15" pos:column="34">&amp;<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="35">regmatch<pos:position pos:line="15" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="45">0<pos:position pos:line="15" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="48"/></expr_stmt>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
