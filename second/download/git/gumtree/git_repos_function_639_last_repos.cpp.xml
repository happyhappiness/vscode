<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_639_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_extended_base_var<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">strbuf<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">name<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">int<pos:position pos:line="1" pos:column="58"/></name></type> <name pos:line="1" pos:column="59">c<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<do pos:line="3" pos:column="9">do <block pos:line="3" pos:column="12">{
		<if pos:line="4" pos:column="17">if <condition pos:line="4" pos:column="20">(<expr><name pos:line="4" pos:column="21">c<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">==<pos:position pos:line="4" pos:column="25"/></operator> <literal type="char" pos:line="4" pos:column="26">'\n'<pos:position pos:line="4" pos:column="30"/></literal></expr>)<pos:position pos:line="4" pos:column="31"/></condition><then pos:line="4" pos:column="31">
			<block type="pseudo"><goto pos:line="5" pos:column="25">goto <name pos:line="5" pos:column="30">error_incomplete_line<pos:position pos:line="5" pos:column="51"/></name>;<pos:position pos:line="5" pos:column="52"/></goto></block></then></if>
		<expr_stmt><expr><name pos:line="6" pos:column="17">c<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">=<pos:position pos:line="6" pos:column="20"/></operator> <call><name pos:line="6" pos:column="21">get_next_char<pos:position pos:line="6" pos:column="34"/></name><argument_list pos:line="6" pos:column="34">()<pos:position pos:line="6" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="7" pos:column="10"/></block> while <condition pos:line="7" pos:column="17">(<expr><call><name pos:line="7" pos:column="18">isspace<pos:position pos:line="7" pos:column="25"/></name><argument_list pos:line="7" pos:column="25">(<argument><expr><name pos:line="7" pos:column="26">c<pos:position pos:line="7" pos:column="27"/></name></expr></argument>)<pos:position pos:line="7" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="29"/></condition>;<pos:position pos:line="7" pos:column="30"/></do>

	<comment type="block" pos:line="9" pos:column="9">/* We require the format to be '[base "extension"]' */</comment>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">c<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">!=<pos:position pos:line="10" pos:column="17"/></operator> <literal type="char" pos:line="10" pos:column="18">'"'<pos:position pos:line="10" pos:column="21"/></literal></expr>)<pos:position pos:line="10" pos:column="22"/></condition><then pos:line="10" pos:column="22">
		<block type="pseudo"><return pos:line="11" pos:column="17">return <expr><operator pos:line="11" pos:column="24">-<pos:position pos:line="11" pos:column="25"/></operator><literal type="number" pos:line="11" pos:column="25">1<pos:position pos:line="11" pos:column="26"/></literal></expr>;<pos:position pos:line="11" pos:column="27"/></return></block></then></if>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">strbuf_addch<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name pos:line="12" pos:column="22">name<pos:position pos:line="12" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="12" pos:column="28">'.'<pos:position pos:line="12" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt>

	<for pos:line="14" pos:column="9">for <control pos:line="14" pos:column="13">(<init pos:line="14" pos:column="14">;<pos:position pos:line="14" pos:column="15"/></init><condition pos:line="14" pos:column="15">;<pos:position pos:line="14" pos:column="16"/></condition><incr/>)<pos:position pos:line="14" pos:column="17"/></control> <block pos:line="14" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">int<pos:position pos:line="15" pos:column="20"/></name></type> <name pos:line="15" pos:column="21">c<pos:position pos:line="15" pos:column="22"/></name> <init pos:line="15" pos:column="23">= <expr><call><name pos:line="15" pos:column="25">get_next_char<pos:position pos:line="15" pos:column="38"/></name><argument_list pos:line="15" pos:column="38">()<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="41"/></decl_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">c<pos:position pos:line="16" pos:column="22"/></name> <operator pos:line="16" pos:column="23">==<pos:position pos:line="16" pos:column="25"/></operator> <literal type="char" pos:line="16" pos:column="26">'\n'<pos:position pos:line="16" pos:column="30"/></literal></expr>)<pos:position pos:line="16" pos:column="31"/></condition><then pos:line="16" pos:column="31">
			<block type="pseudo"><goto pos:line="17" pos:column="25">goto <name pos:line="17" pos:column="30">error_incomplete_line<pos:position pos:line="17" pos:column="51"/></name>;<pos:position pos:line="17" pos:column="52"/></goto></block></then></if>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name pos:line="18" pos:column="21">c<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">==<pos:position pos:line="18" pos:column="25"/></operator> <literal type="char" pos:line="18" pos:column="26">'"'<pos:position pos:line="18" pos:column="29"/></literal></expr>)<pos:position pos:line="18" pos:column="30"/></condition><then pos:line="18" pos:column="30">
			<block type="pseudo"><break pos:line="19" pos:column="25">break;<pos:position pos:line="19" pos:column="31"/></break></block></then></if>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">c<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">==<pos:position pos:line="20" pos:column="25"/></operator> <literal type="char" pos:line="20" pos:column="26">'\\'<pos:position pos:line="20" pos:column="30"/></literal></expr>)<pos:position pos:line="20" pos:column="31"/></condition><then pos:line="20" pos:column="31"> <block pos:line="20" pos:column="32">{
			<expr_stmt><expr><name pos:line="21" pos:column="25">c<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">=<pos:position pos:line="21" pos:column="28"/></operator> <call><name pos:line="21" pos:column="29">get_next_char<pos:position pos:line="21" pos:column="42"/></name><argument_list pos:line="21" pos:column="42">()<pos:position pos:line="21" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="45"/></expr_stmt>
			<if pos:line="22" pos:column="25">if <condition pos:line="22" pos:column="28">(<expr><name pos:line="22" pos:column="29">c<pos:position pos:line="22" pos:column="30"/></name> <operator pos:line="22" pos:column="31">==<pos:position pos:line="22" pos:column="33"/></operator> <literal type="char" pos:line="22" pos:column="34">'\n'<pos:position pos:line="22" pos:column="38"/></literal></expr>)<pos:position pos:line="22" pos:column="39"/></condition><then pos:line="22" pos:column="39">
				<block type="pseudo"><goto pos:line="23" pos:column="33">goto <name pos:line="23" pos:column="38">error_incomplete_line<pos:position pos:line="23" pos:column="59"/></name>;<pos:position pos:line="23" pos:column="60"/></goto></block></then></if>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">strbuf_addch<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><name pos:line="25" pos:column="30">name<pos:position pos:line="25" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="36">c<pos:position pos:line="25" pos:column="37"/></name></expr></argument>)<pos:position pos:line="25" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>
	}<pos:position pos:line="26" pos:column="10"/></block></for>

	<comment type="block" pos:line="28" pos:column="9">/* Final ']' */</comment>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><call><name pos:line="29" pos:column="13">get_next_char<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">()<pos:position pos:line="29" pos:column="28"/></argument_list></call> <operator pos:line="29" pos:column="29">!=<pos:position pos:line="29" pos:column="31"/></operator> <literal type="char" pos:line="29" pos:column="32">']'<pos:position pos:line="29" pos:column="35"/></literal></expr>)<pos:position pos:line="29" pos:column="36"/></condition><then pos:line="29" pos:column="36">
		<block type="pseudo"><return pos:line="30" pos:column="17">return <expr><operator pos:line="30" pos:column="24">-<pos:position pos:line="30" pos:column="25"/></operator><literal type="number" pos:line="30" pos:column="25">1<pos:position pos:line="30" pos:column="26"/></literal></expr>;<pos:position pos:line="30" pos:column="27"/></return></block></then></if>
	<return pos:line="31" pos:column="9">return <expr><literal type="number" pos:line="31" pos:column="16">0<pos:position pos:line="31" pos:column="17"/></literal></expr>;<pos:position pos:line="31" pos:column="18"/></return>
<label><name pos:line="32" pos:column="1">error_incomplete_line<pos:position pos:line="32" pos:column="22"/></name>:<pos:position pos:line="32" pos:column="23"/></label>
	<expr_stmt><expr><name><name pos:line="33" pos:column="9">cf<pos:position pos:line="33" pos:column="11"/></name><operator pos:line="33" pos:column="11">-&gt;<pos:position pos:line="33" pos:column="16"/></operator><name pos:line="33" pos:column="13">linenr<pos:position pos:line="33" pos:column="19"/></name></name><operator pos:line="33" pos:column="19">--<pos:position pos:line="33" pos:column="21"/></operator></expr>;<pos:position pos:line="33" pos:column="22"/></expr_stmt>
	<return pos:line="34" pos:column="9">return <expr><operator pos:line="34" pos:column="16">-<pos:position pos:line="34" pos:column="17"/></operator><literal type="number" pos:line="34" pos:column="17">1<pos:position pos:line="34" pos:column="18"/></literal></expr>;<pos:position pos:line="34" pos:column="19"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
