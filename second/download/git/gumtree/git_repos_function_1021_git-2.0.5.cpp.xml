<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1021_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">diff_tempfile<pos:position pos:line="1" pos:column="28"/></name></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">prepare_temp_file<pos:position pos:line="1" pos:column="47"/></name><parameter_list pos:line="1" pos:column="47">(<parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">name<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="2" pos:column="17">struct<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">diff_filespec<pos:position pos:line="2" pos:column="37"/></name></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">one<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">diff_tempfile<pos:position pos:line="4" pos:column="29"/></name></name> <modifier pos:line="4" pos:column="30">*<pos:position pos:line="4" pos:column="31"/></modifier></type><name pos:line="4" pos:column="31">temp<pos:position pos:line="4" pos:column="35"/></name> <init pos:line="4" pos:column="36">= <expr><call><name pos:line="4" pos:column="38">claim_diff_tempfile<pos:position pos:line="4" pos:column="57"/></name><argument_list pos:line="4" pos:column="57">()<pos:position pos:line="4" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="60"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><call><name pos:line="6" pos:column="14">DIFF_FILE_VALID<pos:position pos:line="6" pos:column="29"/></name><argument_list pos:line="6" pos:column="29">(<argument><expr><name pos:line="6" pos:column="30">one<pos:position pos:line="6" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="35"/></condition><then pos:line="6" pos:column="35"> <block pos:line="6" pos:column="36">{
	<label><name pos:line="7" pos:column="9">not_a_valid_file<pos:position pos:line="7" pos:column="25"/></name>:<pos:position pos:line="7" pos:column="26"/></label>
		<comment type="block" pos:line="8" pos:column="17">/* A '-' entry produces this for file-2, and
		 * a '+' entry produces this for file-1.
		 */</comment>
		<expr_stmt><expr><name><name pos:line="11" pos:column="17">temp<pos:position pos:line="11" pos:column="21"/></name><operator pos:line="11" pos:column="21">-&gt;<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="23">name<pos:position pos:line="11" pos:column="27"/></name></name> <operator pos:line="11" pos:column="28">=<pos:position pos:line="11" pos:column="29"/></operator> <literal type="string" pos:line="11" pos:column="30">"/dev/null"<pos:position pos:line="11" pos:column="41"/></literal></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">strcpy<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><name><name pos:line="12" pos:column="24">temp<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">-&gt;<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="30">hex<pos:position pos:line="12" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="35">"."<pos:position pos:line="12" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">strcpy<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><name><name pos:line="13" pos:column="24">temp<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">-&gt;<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="30">mode<pos:position pos:line="13" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="36">"."<pos:position pos:line="13" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="41"/></expr_stmt>
		<return pos:line="14" pos:column="17">return <expr><name pos:line="14" pos:column="24">temp<pos:position pos:line="14" pos:column="28"/></name></expr>;<pos:position pos:line="14" pos:column="29"/></return>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">remove_tempfile_installed<pos:position pos:line="17" pos:column="39"/></name></expr>)<pos:position pos:line="17" pos:column="40"/></condition><then pos:line="17" pos:column="40"> <block pos:line="17" pos:column="41">{
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">atexit<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><name pos:line="18" pos:column="24">remove_tempfile<pos:position pos:line="18" pos:column="39"/></name></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">sigchain_push_common<pos:position pos:line="19" pos:column="37"/></name><argument_list pos:line="19" pos:column="37">(<argument><expr><name pos:line="19" pos:column="38">remove_tempfile_on_signal<pos:position pos:line="19" pos:column="63"/></name></expr></argument>)<pos:position pos:line="19" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="65"/></expr_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">remove_tempfile_installed<pos:position pos:line="20" pos:column="42"/></name> <operator pos:line="20" pos:column="43">=<pos:position pos:line="20" pos:column="44"/></operator> <literal type="number" pos:line="20" pos:column="45">1<pos:position pos:line="20" pos:column="46"/></literal></expr>;<pos:position pos:line="20" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">!<pos:position pos:line="23" pos:column="14"/></operator><call><name pos:line="23" pos:column="14">S_ISGITLINK<pos:position pos:line="23" pos:column="25"/></name><argument_list pos:line="23" pos:column="25">(<argument><expr><name><name pos:line="23" pos:column="26">one<pos:position pos:line="23" pos:column="29"/></name><operator pos:line="23" pos:column="29">-&gt;<pos:position pos:line="23" pos:column="34"/></operator><name pos:line="23" pos:column="31">mode<pos:position pos:line="23" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="36"/></argument_list></call> <operator pos:line="23" pos:column="37">&amp;&amp;<pos:position pos:line="23" pos:column="47"/></operator>
	    <operator pos:line="24" pos:column="13">(<pos:position pos:line="24" pos:column="14"/></operator><operator pos:line="24" pos:column="14">!<pos:position pos:line="24" pos:column="15"/></operator><name><name pos:line="24" pos:column="15">one<pos:position pos:line="24" pos:column="18"/></name><operator pos:line="24" pos:column="18">-&gt;<pos:position pos:line="24" pos:column="23"/></operator><name pos:line="24" pos:column="20">sha1_valid<pos:position pos:line="24" pos:column="30"/></name></name> <operator pos:line="24" pos:column="31">||<pos:position pos:line="24" pos:column="33"/></operator>
	     <call><name pos:line="25" pos:column="14">reuse_worktree_file<pos:position pos:line="25" pos:column="33"/></name><argument_list pos:line="25" pos:column="33">(<argument><expr><name pos:line="25" pos:column="34">name<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="40">one<pos:position pos:line="25" pos:column="43"/></name><operator pos:line="25" pos:column="43">-&gt;<pos:position pos:line="25" pos:column="48"/></operator><name pos:line="25" pos:column="45">sha1<pos:position pos:line="25" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="51">1<pos:position pos:line="25" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="53"/></argument_list></call><operator pos:line="25" pos:column="53">)<pos:position pos:line="25" pos:column="54"/></operator></expr>)<pos:position pos:line="25" pos:column="55"/></condition><then pos:line="25" pos:column="55"> <block pos:line="25" pos:column="56">{
		<decl_stmt><decl><type><name><name pos:line="26" pos:column="17">struct<pos:position pos:line="26" pos:column="23"/></name> <name pos:line="26" pos:column="24">stat<pos:position pos:line="26" pos:column="28"/></name></name></type> <name pos:line="26" pos:column="29">st<pos:position pos:line="26" pos:column="31"/></name></decl>;<pos:position pos:line="26" pos:column="32"/></decl_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name pos:line="27" pos:column="21">lstat<pos:position pos:line="27" pos:column="26"/></name><argument_list pos:line="27" pos:column="26">(<argument><expr><name pos:line="27" pos:column="27">name<pos:position pos:line="27" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="33">&amp;<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="34">st<pos:position pos:line="27" pos:column="36"/></name></expr></argument>)<pos:position pos:line="27" pos:column="37"/></argument_list></call> <operator pos:line="27" pos:column="38">&lt;<pos:position pos:line="27" pos:column="42"/></operator> <literal type="number" pos:line="27" pos:column="40">0<pos:position pos:line="27" pos:column="41"/></literal></expr>)<pos:position pos:line="27" pos:column="42"/></condition><then pos:line="27" pos:column="42"> <block pos:line="27" pos:column="43">{
			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><name pos:line="28" pos:column="29">errno<pos:position pos:line="28" pos:column="34"/></name> <operator pos:line="28" pos:column="35">==<pos:position pos:line="28" pos:column="37"/></operator> <name pos:line="28" pos:column="38">ENOENT<pos:position pos:line="28" pos:column="44"/></name></expr>)<pos:position pos:line="28" pos:column="45"/></condition><then pos:line="28" pos:column="45">
				<block type="pseudo"><goto pos:line="29" pos:column="33">goto <name pos:line="29" pos:column="38">not_a_valid_file<pos:position pos:line="29" pos:column="54"/></name>;<pos:position pos:line="29" pos:column="55"/></goto></block></then></if>
			<expr_stmt><expr><call><name pos:line="30" pos:column="25">die_errno<pos:position pos:line="30" pos:column="34"/></name><argument_list pos:line="30" pos:column="34">(<argument><expr><literal type="string" pos:line="30" pos:column="35">"stat(%s)"<pos:position pos:line="30" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="47">name<pos:position pos:line="30" pos:column="51"/></name></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="31" pos:column="18"/></block></then></if>
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><call><name pos:line="32" pos:column="21">S_ISLNK<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><name><name pos:line="32" pos:column="29">st<pos:position pos:line="32" pos:column="31"/></name><operator pos:line="32" pos:column="31">.<pos:position pos:line="32" pos:column="32"/></operator><name pos:line="32" pos:column="32">st_mode<pos:position pos:line="32" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="41"/></condition><then pos:line="32" pos:column="41"> <block pos:line="32" pos:column="42">{
			<decl_stmt><decl><type><name><name pos:line="33" pos:column="25">struct<pos:position pos:line="33" pos:column="31"/></name> <name pos:line="33" pos:column="32">strbuf<pos:position pos:line="33" pos:column="38"/></name></name></type> <name pos:line="33" pos:column="39">sb<pos:position pos:line="33" pos:column="41"/></name> <init pos:line="33" pos:column="42">= <expr><name pos:line="33" pos:column="44">STRBUF_INIT<pos:position pos:line="33" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="33" pos:column="56"/></decl_stmt>
			<if pos:line="34" pos:column="25">if <condition pos:line="34" pos:column="28">(<expr><call><name pos:line="34" pos:column="29">strbuf_readlink<pos:position pos:line="34" pos:column="44"/></name><argument_list pos:line="34" pos:column="44">(<argument><expr><operator pos:line="34" pos:column="45">&amp;<pos:position pos:line="34" pos:column="50"/></operator><name pos:line="34" pos:column="46">sb<pos:position pos:line="34" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="50">name<pos:position pos:line="34" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="56">st<pos:position pos:line="34" pos:column="58"/></name><operator pos:line="34" pos:column="58">.<pos:position pos:line="34" pos:column="59"/></operator><name pos:line="34" pos:column="59">st_size<pos:position pos:line="34" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="67"/></argument_list></call> <operator pos:line="34" pos:column="68">&lt;<pos:position pos:line="34" pos:column="72"/></operator> <literal type="number" pos:line="34" pos:column="70">0<pos:position pos:line="34" pos:column="71"/></literal></expr>)<pos:position pos:line="34" pos:column="72"/></condition><then pos:line="34" pos:column="72">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="33">die_errno<pos:position pos:line="35" pos:column="42"/></name><argument_list pos:line="35" pos:column="42">(<argument><expr><literal type="string" pos:line="35" pos:column="43">"readlink(%s)"<pos:position pos:line="35" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="59">name<pos:position pos:line="35" pos:column="63"/></name></expr></argument>)<pos:position pos:line="35" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="65"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="36" pos:column="25">prep_temp_blob<pos:position pos:line="36" pos:column="39"/></name><argument_list pos:line="36" pos:column="39">(<argument><expr><name pos:line="36" pos:column="40">name<pos:position pos:line="36" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="46">temp<pos:position pos:line="36" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="52">sb<pos:position pos:line="36" pos:column="54"/></name><operator pos:line="36" pos:column="54">.<pos:position pos:line="36" pos:column="55"/></operator><name pos:line="36" pos:column="55">buf<pos:position pos:line="36" pos:column="58"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="60">sb<pos:position pos:line="36" pos:column="62"/></name><operator pos:line="36" pos:column="62">.<pos:position pos:line="36" pos:column="63"/></operator><name pos:line="36" pos:column="63">len<pos:position pos:line="36" pos:column="66"/></name></name></expr></argument>,
				       <argument><expr><operator pos:line="37" pos:column="40">(<pos:position pos:line="37" pos:column="41"/></operator><ternary><condition><expr><name><name pos:line="37" pos:column="41">one<pos:position pos:line="37" pos:column="44"/></name><operator pos:line="37" pos:column="44">-&gt;<pos:position pos:line="37" pos:column="49"/></operator><name pos:line="37" pos:column="46">sha1_valid<pos:position pos:line="37" pos:column="56"/></name></name></expr> ?<pos:position pos:line="37" pos:column="58"/></condition><then pos:line="37" pos:column="58">
					<expr><name><name pos:line="38" pos:column="41">one<pos:position pos:line="38" pos:column="44"/></name><operator pos:line="38" pos:column="44">-&gt;<pos:position pos:line="38" pos:column="49"/></operator><name pos:line="38" pos:column="46">sha1<pos:position pos:line="38" pos:column="50"/></name></name></expr> <pos:position pos:line="38" pos:column="51"/></then><else pos:line="38" pos:column="51">: <expr><name pos:line="38" pos:column="53">null_sha1<pos:position pos:line="38" pos:column="62"/></name></expr></else></ternary><operator pos:line="38" pos:column="62">)<pos:position pos:line="38" pos:column="63"/></operator></expr></argument>,
				       <argument><expr><operator pos:line="39" pos:column="40">(<pos:position pos:line="39" pos:column="41"/></operator><ternary><condition><expr><name><name pos:line="39" pos:column="41">one<pos:position pos:line="39" pos:column="44"/></name><operator pos:line="39" pos:column="44">-&gt;<pos:position pos:line="39" pos:column="49"/></operator><name pos:line="39" pos:column="46">sha1_valid<pos:position pos:line="39" pos:column="56"/></name></name></expr> ?<pos:position pos:line="39" pos:column="58"/></condition><then pos:line="39" pos:column="58">
					<expr><name><name pos:line="40" pos:column="41">one<pos:position pos:line="40" pos:column="44"/></name><operator pos:line="40" pos:column="44">-&gt;<pos:position pos:line="40" pos:column="49"/></operator><name pos:line="40" pos:column="46">mode<pos:position pos:line="40" pos:column="50"/></name></name></expr> <pos:position pos:line="40" pos:column="51"/></then><else pos:line="40" pos:column="51">: <expr><name pos:line="40" pos:column="53">S_IFLNK<pos:position pos:line="40" pos:column="60"/></name></expr></else></ternary><operator pos:line="40" pos:column="60">)<pos:position pos:line="40" pos:column="61"/></operator></expr></argument>)<pos:position pos:line="40" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="63"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">strbuf_release<pos:position pos:line="41" pos:column="39"/></name><argument_list pos:line="41" pos:column="39">(<argument><expr><operator pos:line="41" pos:column="40">&amp;<pos:position pos:line="41" pos:column="45"/></operator><name pos:line="41" pos:column="41">sb<pos:position pos:line="41" pos:column="43"/></name></expr></argument>)<pos:position pos:line="41" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="45"/></expr_stmt>
		}<pos:position pos:line="42" pos:column="18"/></block></then>
		<else pos:line="43" pos:column="17">else <block pos:line="43" pos:column="22">{
			<comment type="block" pos:line="44" pos:column="25">/* we can borrow from the file in the work tree */</comment>
			<expr_stmt><expr><name><name pos:line="45" pos:column="25">temp<pos:position pos:line="45" pos:column="29"/></name><operator pos:line="45" pos:column="29">-&gt;<pos:position pos:line="45" pos:column="34"/></operator><name pos:line="45" pos:column="31">name<pos:position pos:line="45" pos:column="35"/></name></name> <operator pos:line="45" pos:column="36">=<pos:position pos:line="45" pos:column="37"/></operator> <name pos:line="45" pos:column="38">name<pos:position pos:line="45" pos:column="42"/></name></expr>;<pos:position pos:line="45" pos:column="43"/></expr_stmt>
			<if pos:line="46" pos:column="25">if <condition pos:line="46" pos:column="28">(<expr><operator pos:line="46" pos:column="29">!<pos:position pos:line="46" pos:column="30"/></operator><name><name pos:line="46" pos:column="30">one<pos:position pos:line="46" pos:column="33"/></name><operator pos:line="46" pos:column="33">-&gt;<pos:position pos:line="46" pos:column="38"/></operator><name pos:line="46" pos:column="35">sha1_valid<pos:position pos:line="46" pos:column="45"/></name></name></expr>)<pos:position pos:line="46" pos:column="46"/></condition><then pos:line="46" pos:column="46">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="33">strcpy<pos:position pos:line="47" pos:column="39"/></name><argument_list pos:line="47" pos:column="39">(<argument><expr><name><name pos:line="47" pos:column="40">temp<pos:position pos:line="47" pos:column="44"/></name><operator pos:line="47" pos:column="44">-&gt;<pos:position pos:line="47" pos:column="49"/></operator><name pos:line="47" pos:column="46">hex<pos:position pos:line="47" pos:column="49"/></name></name></expr></argument>, <argument><expr><call><name pos:line="47" pos:column="51">sha1_to_hex<pos:position pos:line="47" pos:column="62"/></name><argument_list pos:line="47" pos:column="62">(<argument><expr><name pos:line="47" pos:column="63">null_sha1<pos:position pos:line="47" pos:column="72"/></name></expr></argument>)<pos:position pos:line="47" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="75"/></expr_stmt></block></then>
			<else pos:line="48" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="33">strcpy<pos:position pos:line="49" pos:column="39"/></name><argument_list pos:line="49" pos:column="39">(<argument><expr><name><name pos:line="49" pos:column="40">temp<pos:position pos:line="49" pos:column="44"/></name><operator pos:line="49" pos:column="44">-&gt;<pos:position pos:line="49" pos:column="49"/></operator><name pos:line="49" pos:column="46">hex<pos:position pos:line="49" pos:column="49"/></name></name></expr></argument>, <argument><expr><call><name pos:line="49" pos:column="51">sha1_to_hex<pos:position pos:line="49" pos:column="62"/></name><argument_list pos:line="49" pos:column="62">(<argument><expr><name><name pos:line="49" pos:column="63">one<pos:position pos:line="49" pos:column="66"/></name><operator pos:line="49" pos:column="66">-&gt;<pos:position pos:line="49" pos:column="71"/></operator><name pos:line="49" pos:column="68">sha1<pos:position pos:line="49" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="75"/></expr_stmt></block></else></if>
			<comment type="block" pos:line="50" pos:column="25">/* Even though we may sometimes borrow the
			 * contents from the work tree, we always want
			 * one-&gt;mode.  mode is trustworthy even when
			 * !(one-&gt;sha1_valid), as long as
			 * DIFF_FILE_VALID(one).
			 */</comment>
			<expr_stmt><expr><call><name pos:line="56" pos:column="25">sprintf<pos:position pos:line="56" pos:column="32"/></name><argument_list pos:line="56" pos:column="32">(<argument><expr><name><name pos:line="56" pos:column="33">temp<pos:position pos:line="56" pos:column="37"/></name><operator pos:line="56" pos:column="37">-&gt;<pos:position pos:line="56" pos:column="42"/></operator><name pos:line="56" pos:column="39">mode<pos:position pos:line="56" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="45">"%06o"<pos:position pos:line="56" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="53">one<pos:position pos:line="56" pos:column="56"/></name><operator pos:line="56" pos:column="56">-&gt;<pos:position pos:line="56" pos:column="61"/></operator><name pos:line="56" pos:column="58">mode<pos:position pos:line="56" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="64"/></expr_stmt>
		}<pos:position pos:line="57" pos:column="18"/></block></else></if>
		<return pos:line="58" pos:column="17">return <expr><name pos:line="58" pos:column="24">temp<pos:position pos:line="58" pos:column="28"/></name></expr>;<pos:position pos:line="58" pos:column="29"/></return>
	}<pos:position pos:line="59" pos:column="10"/></block></then>
	<else pos:line="60" pos:column="9">else <block pos:line="60" pos:column="14">{
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><call><name pos:line="61" pos:column="21">diff_populate_filespec<pos:position pos:line="61" pos:column="43"/></name><argument_list pos:line="61" pos:column="43">(<argument><expr><name pos:line="61" pos:column="44">one<pos:position pos:line="61" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="49">0<pos:position pos:line="61" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="52"/></condition><then pos:line="61" pos:column="52">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="25">die<pos:position pos:line="62" pos:column="28"/></name><argument_list pos:line="62" pos:column="28">(<argument><expr><literal type="string" pos:line="62" pos:column="29">"cannot read data blob for %s"<pos:position pos:line="62" pos:column="59"/></literal></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="61">one<pos:position pos:line="62" pos:column="64"/></name><operator pos:line="62" pos:column="64">-&gt;<pos:position pos:line="62" pos:column="69"/></operator><name pos:line="62" pos:column="66">path<pos:position pos:line="62" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="72"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">prep_temp_blob<pos:position pos:line="63" pos:column="31"/></name><argument_list pos:line="63" pos:column="31">(<argument><expr><name pos:line="63" pos:column="32">name<pos:position pos:line="63" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="38">temp<pos:position pos:line="63" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="44">one<pos:position pos:line="63" pos:column="47"/></name><operator pos:line="63" pos:column="47">-&gt;<pos:position pos:line="63" pos:column="52"/></operator><name pos:line="63" pos:column="49">data<pos:position pos:line="63" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="55">one<pos:position pos:line="63" pos:column="58"/></name><operator pos:line="63" pos:column="58">-&gt;<pos:position pos:line="63" pos:column="63"/></operator><name pos:line="63" pos:column="60">size<pos:position pos:line="63" pos:column="64"/></name></name></expr></argument>,
			       <argument><expr><name><name pos:line="64" pos:column="32">one<pos:position pos:line="64" pos:column="35"/></name><operator pos:line="64" pos:column="35">-&gt;<pos:position pos:line="64" pos:column="40"/></operator><name pos:line="64" pos:column="37">sha1<pos:position pos:line="64" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="43">one<pos:position pos:line="64" pos:column="46"/></name><operator pos:line="64" pos:column="46">-&gt;<pos:position pos:line="64" pos:column="51"/></operator><name pos:line="64" pos:column="48">mode<pos:position pos:line="64" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="65" pos:column="10"/></block></else></if>
	<return pos:line="66" pos:column="9">return <expr><name pos:line="66" pos:column="16">temp<pos:position pos:line="66" pos:column="20"/></name></expr>;<pos:position pos:line="66" pos:column="21"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
