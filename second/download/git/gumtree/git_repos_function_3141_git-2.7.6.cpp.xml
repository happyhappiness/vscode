<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3141_git-2.7.6.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">merge_recursive_generic<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">merge_options<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">o<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
			    <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">unsigned<pos:position pos:line="2" pos:column="43"/></name> <name pos:line="2" pos:column="44">char<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">head<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>,
			    <parameter><decl><type><specifier pos:line="3" pos:column="29">const<pos:position pos:line="3" pos:column="34"/></specifier> <name pos:line="3" pos:column="35">unsigned<pos:position pos:line="3" pos:column="43"/></name> <name pos:line="3" pos:column="44">char<pos:position pos:line="3" pos:column="48"/></name> <modifier pos:line="3" pos:column="49">*<pos:position pos:line="3" pos:column="50"/></modifier></type><name pos:line="3" pos:column="50">merge<pos:position pos:line="3" pos:column="55"/></name></decl></parameter>,
			    <parameter><decl><type><name pos:line="4" pos:column="29">int<pos:position pos:line="4" pos:column="32"/></name></type> <name pos:line="4" pos:column="33">num_base_list<pos:position pos:line="4" pos:column="46"/></name></decl></parameter>,
			    <parameter><decl><type><specifier pos:line="5" pos:column="29">const<pos:position pos:line="5" pos:column="34"/></specifier> <name pos:line="5" pos:column="35">unsigned<pos:position pos:line="5" pos:column="43"/></name> <name pos:line="5" pos:column="44">char<pos:position pos:line="5" pos:column="48"/></name> <modifier pos:line="5" pos:column="49">*<pos:position pos:line="5" pos:column="50"/></modifier><modifier pos:line="5" pos:column="50">*<pos:position pos:line="5" pos:column="51"/></modifier></type><name pos:line="5" pos:column="51">base_list<pos:position pos:line="5" pos:column="60"/></name></decl></parameter>,
			    <parameter><decl><type><name><name pos:line="6" pos:column="29">struct<pos:position pos:line="6" pos:column="35"/></name> <name pos:line="6" pos:column="36">commit<pos:position pos:line="6" pos:column="42"/></name></name> <modifier pos:line="6" pos:column="43">*<pos:position pos:line="6" pos:column="44"/></modifier><modifier pos:line="6" pos:column="44">*<pos:position pos:line="6" pos:column="45"/></modifier></type><name pos:line="6" pos:column="45">result<pos:position pos:line="6" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="52"/></parameter_list>
<block pos:line="7" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">clean<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">lock_file<pos:position pos:line="9" pos:column="25"/></name></name> <modifier pos:line="9" pos:column="26">*<pos:position pos:line="9" pos:column="27"/></modifier></type><name pos:line="9" pos:column="27">lock<pos:position pos:line="9" pos:column="31"/></name> <init pos:line="9" pos:column="32">= <expr><call><name pos:line="9" pos:column="34">xcalloc<pos:position pos:line="9" pos:column="41"/></name><argument_list pos:line="9" pos:column="41">(<argument><expr><literal type="number" pos:line="9" pos:column="42">1<pos:position pos:line="9" pos:column="43"/></literal></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="45">sizeof<argument_list pos:line="9" pos:column="51">(<argument><expr pos:line="9" pos:column="52">struct <name pos:line="9" pos:column="59">lock_file<pos:position pos:line="9" pos:column="68"/></name></expr></argument>)<pos:position pos:line="9" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="71"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">commit<pos:position pos:line="10" pos:column="22"/></name></name> <modifier pos:line="10" pos:column="23">*<pos:position pos:line="10" pos:column="24"/></modifier></type><name pos:line="10" pos:column="24">head_commit<pos:position pos:line="10" pos:column="35"/></name> <init pos:line="10" pos:column="36">= <expr><call><name pos:line="10" pos:column="38">get_ref<pos:position pos:line="10" pos:column="45"/></name><argument_list pos:line="10" pos:column="45">(<argument><expr><name pos:line="10" pos:column="46">head<pos:position pos:line="10" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="52">o<pos:position pos:line="10" pos:column="53"/></name><operator pos:line="10" pos:column="53">-&gt;<pos:position pos:line="10" pos:column="58"/></operator><name pos:line="10" pos:column="55">branch1<pos:position pos:line="10" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="64"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">commit<pos:position pos:line="11" pos:column="22"/></name></name> <modifier pos:line="11" pos:column="23">*<pos:position pos:line="11" pos:column="24"/></modifier></type><name pos:line="11" pos:column="24">next_commit<pos:position pos:line="11" pos:column="35"/></name> <init pos:line="11" pos:column="36">= <expr><call><name pos:line="11" pos:column="38">get_ref<pos:position pos:line="11" pos:column="45"/></name><argument_list pos:line="11" pos:column="45">(<argument><expr><name pos:line="11" pos:column="46">merge<pos:position pos:line="11" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="53">o<pos:position pos:line="11" pos:column="54"/></name><operator pos:line="11" pos:column="54">-&gt;<pos:position pos:line="11" pos:column="59"/></operator><name pos:line="11" pos:column="56">branch2<pos:position pos:line="11" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="65"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">commit_list<pos:position pos:line="12" pos:column="27"/></name></name> <modifier pos:line="12" pos:column="28">*<pos:position pos:line="12" pos:column="29"/></modifier></type><name pos:line="12" pos:column="29">ca<pos:position pos:line="12" pos:column="31"/></name> <init pos:line="12" pos:column="32">= <expr><name pos:line="12" pos:column="34">NULL<pos:position pos:line="12" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="39"/></decl_stmt>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">base_list<pos:position pos:line="14" pos:column="22"/></name></expr>)<pos:position pos:line="14" pos:column="23"/></condition><then pos:line="14" pos:column="23"> <block pos:line="14" pos:column="24">{
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">int<pos:position pos:line="15" pos:column="20"/></name></type> <name pos:line="15" pos:column="21">i<pos:position pos:line="15" pos:column="22"/></name></decl>;<pos:position pos:line="15" pos:column="23"/></decl_stmt>
		<for pos:line="16" pos:column="17">for <control pos:line="16" pos:column="21">(<init><expr><name pos:line="16" pos:column="22">i<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">=<pos:position pos:line="16" pos:column="25"/></operator> <literal type="number" pos:line="16" pos:column="26">0<pos:position pos:line="16" pos:column="27"/></literal></expr>;<pos:position pos:line="16" pos:column="28"/></init> <condition><expr><name pos:line="16" pos:column="29">i<pos:position pos:line="16" pos:column="30"/></name> <operator pos:line="16" pos:column="31">&lt;<pos:position pos:line="16" pos:column="35"/></operator> <name pos:line="16" pos:column="33">num_base_list<pos:position pos:line="16" pos:column="46"/></name></expr>;<pos:position pos:line="16" pos:column="47"/></condition> <incr><expr><operator pos:line="16" pos:column="48">++<pos:position pos:line="16" pos:column="50"/></operator><name pos:line="16" pos:column="50">i<pos:position pos:line="16" pos:column="51"/></name></expr></incr>)<pos:position pos:line="16" pos:column="52"/></control> <block pos:line="16" pos:column="53">{
			<decl_stmt><decl><type><name><name pos:line="17" pos:column="25">struct<pos:position pos:line="17" pos:column="31"/></name> <name pos:line="17" pos:column="32">commit<pos:position pos:line="17" pos:column="38"/></name></name> <modifier pos:line="17" pos:column="39">*<pos:position pos:line="17" pos:column="40"/></modifier></type><name pos:line="17" pos:column="40">base<pos:position pos:line="17" pos:column="44"/></name></decl>;<pos:position pos:line="17" pos:column="45"/></decl_stmt>
			<if pos:line="18" pos:column="25">if <condition pos:line="18" pos:column="28">(<expr><operator pos:line="18" pos:column="29">!<pos:position pos:line="18" pos:column="30"/></operator><operator pos:line="18" pos:column="30">(<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="31">base<pos:position pos:line="18" pos:column="35"/></name> <operator pos:line="18" pos:column="36">=<pos:position pos:line="18" pos:column="37"/></operator> <call><name pos:line="18" pos:column="38">get_ref<pos:position pos:line="18" pos:column="45"/></name><argument_list pos:line="18" pos:column="45">(<argument><expr><name><name pos:line="18" pos:column="46">base_list<pos:position pos:line="18" pos:column="55"/></name><index pos:line="18" pos:column="55">[<expr><name pos:line="18" pos:column="56">i<pos:position pos:line="18" pos:column="57"/></name></expr>]<pos:position pos:line="18" pos:column="58"/></index></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="60">sha1_to_hex<pos:position pos:line="18" pos:column="71"/></name><argument_list pos:line="18" pos:column="71">(<argument><expr><name><name pos:line="18" pos:column="72">base_list<pos:position pos:line="18" pos:column="81"/></name><index pos:line="18" pos:column="81">[<expr><name pos:line="18" pos:column="82">i<pos:position pos:line="18" pos:column="83"/></name></expr>]<pos:position pos:line="18" pos:column="84"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="86"/></argument_list></call><operator pos:line="18" pos:column="86">)<pos:position pos:line="18" pos:column="87"/></operator></expr>)<pos:position pos:line="18" pos:column="88"/></condition><then pos:line="18" pos:column="88">
				<block type="pseudo"><return pos:line="19" pos:column="33">return <expr><call><name pos:line="19" pos:column="40">error<pos:position pos:line="19" pos:column="45"/></name><argument_list pos:line="19" pos:column="45">(<argument><expr><call><name pos:line="19" pos:column="46">_<pos:position pos:line="19" pos:column="47"/></name><argument_list pos:line="19" pos:column="47">(<argument><expr><literal type="string" pos:line="19" pos:column="48">"Could not parse object '%s'"<pos:position pos:line="19" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="78"/></argument_list></call></expr></argument>,
					<argument><expr><call><name pos:line="20" pos:column="41">sha1_to_hex<pos:position pos:line="20" pos:column="52"/></name><argument_list pos:line="20" pos:column="52">(<argument><expr><name><name pos:line="20" pos:column="53">base_list<pos:position pos:line="20" pos:column="62"/></name><index pos:line="20" pos:column="62">[<expr><name pos:line="20" pos:column="63">i<pos:position pos:line="20" pos:column="64"/></name></expr>]<pos:position pos:line="20" pos:column="65"/></index></name></expr></argument>)<pos:position pos:line="20" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="68"/></return></block></then></if>
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">commit_list_insert<pos:position pos:line="21" pos:column="43"/></name><argument_list pos:line="21" pos:column="43">(<argument><expr><name pos:line="21" pos:column="44">base<pos:position pos:line="21" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="50">&amp;<pos:position pos:line="21" pos:column="55"/></operator><name pos:line="21" pos:column="51">ca<pos:position pos:line="21" pos:column="53"/></name></expr></argument>)<pos:position pos:line="21" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="22" pos:column="18"/></block></for>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="25" pos:column="9">hold_locked_index<pos:position pos:line="25" pos:column="26"/></name><argument_list pos:line="25" pos:column="26">(<argument><expr><name pos:line="25" pos:column="27">lock<pos:position pos:line="25" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="33">1<pos:position pos:line="25" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">clean<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <call><name pos:line="26" pos:column="17">merge_recursive<pos:position pos:line="26" pos:column="32"/></name><argument_list pos:line="26" pos:column="32">(<argument><expr><name pos:line="26" pos:column="33">o<pos:position pos:line="26" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="36">head_commit<pos:position pos:line="26" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="49">next_commit<pos:position pos:line="26" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="62">ca<pos:position pos:line="26" pos:column="64"/></name></expr></argument>,
			<argument><expr><name pos:line="27" pos:column="25">result<pos:position pos:line="27" pos:column="31"/></name></expr></argument>)<pos:position pos:line="27" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="33"/></expr_stmt>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">active_cache_changed<pos:position pos:line="28" pos:column="33"/></name> <operator pos:line="28" pos:column="34">&amp;&amp;<pos:position pos:line="28" pos:column="44"/></operator>
	    <call><name pos:line="29" pos:column="13">write_locked_index<pos:position pos:line="29" pos:column="31"/></name><argument_list pos:line="29" pos:column="31">(<argument><expr><operator pos:line="29" pos:column="32">&amp;<pos:position pos:line="29" pos:column="37"/></operator><name pos:line="29" pos:column="33">the_index<pos:position pos:line="29" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="44">lock<pos:position pos:line="29" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="50">COMMIT_LOCK<pos:position pos:line="29" pos:column="61"/></name></expr></argument>)<pos:position pos:line="29" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="63"/></condition><then pos:line="29" pos:column="63">
		<block type="pseudo"><return pos:line="30" pos:column="17">return <expr><call><name pos:line="30" pos:column="24">error<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><call><name pos:line="30" pos:column="30">_<pos:position pos:line="30" pos:column="31"/></name><argument_list pos:line="30" pos:column="31">(<argument><expr><literal type="string" pos:line="30" pos:column="32">"Unable to write index."<pos:position pos:line="30" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="59"/></return></block></then></if>

	<return pos:line="32" pos:column="9">return <expr><ternary><condition><expr><name pos:line="32" pos:column="16">clean<pos:position pos:line="32" pos:column="21"/></name></expr> ?<pos:position pos:line="32" pos:column="23"/></condition><then pos:line="32" pos:column="23"> <expr><literal type="number" pos:line="32" pos:column="24">0<pos:position pos:line="32" pos:column="25"/></literal></expr> <pos:position pos:line="32" pos:column="26"/></then><else pos:line="32" pos:column="26">: <expr><literal type="number" pos:line="32" pos:column="28">1<pos:position pos:line="32" pos:column="29"/></literal></expr></else></ternary></expr>;<pos:position pos:line="32" pos:column="30"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
