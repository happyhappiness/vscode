<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4731_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">leaf_node<pos:position pos:line="1" pos:column="24"/></name></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">note_tree_find<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name><name pos:line="1" pos:column="41">struct<pos:position pos:line="1" pos:column="47"/></name> <name pos:line="1" pos:column="48">notes_tree<pos:position pos:line="1" pos:column="58"/></name></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">t<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="2" pos:column="17">struct<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">int_node<pos:position pos:line="2" pos:column="32"/></name></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">tree<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">unsigned<pos:position pos:line="2" pos:column="48"/></name> <name pos:line="2" pos:column="49">char<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">n<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>,
		<parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name pos:line="3" pos:column="23">unsigned<pos:position pos:line="3" pos:column="31"/></name> <name pos:line="3" pos:column="32">char<pos:position pos:line="3" pos:column="36"/></name> <modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier></type><name pos:line="3" pos:column="38">key_sha1<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="47"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">void<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier><modifier pos:line="5" pos:column="15">*<pos:position pos:line="5" pos:column="16"/></modifier></type><name pos:line="5" pos:column="16">p<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><call><name pos:line="5" pos:column="20">note_tree_search<pos:position pos:line="5" pos:column="36"/></name><argument_list pos:line="5" pos:column="36">(<argument><expr><name pos:line="5" pos:column="37">t<pos:position pos:line="5" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="40">&amp;<pos:position pos:line="5" pos:column="45"/></operator><name pos:line="5" pos:column="41">tree<pos:position pos:line="5" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="47">&amp;<pos:position pos:line="5" pos:column="52"/></operator><name pos:line="5" pos:column="48">n<pos:position pos:line="5" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="51">key_sha1<pos:position pos:line="5" pos:column="59"/></name></expr></argument>)<pos:position pos:line="5" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="61"/></decl_stmt>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">GET_PTR_TYPE<pos:position pos:line="6" pos:column="25"/></name><argument_list pos:line="6" pos:column="25">(<argument><expr><operator pos:line="6" pos:column="26">*<pos:position pos:line="6" pos:column="27"/></operator><name pos:line="6" pos:column="27">p<pos:position pos:line="6" pos:column="28"/></name></expr></argument>)<pos:position pos:line="6" pos:column="29"/></argument_list></call> <operator pos:line="6" pos:column="30">==<pos:position pos:line="6" pos:column="32"/></operator> <name pos:line="6" pos:column="33">PTR_TYPE_NOTE<pos:position pos:line="6" pos:column="46"/></name></expr>)<pos:position pos:line="6" pos:column="47"/></condition><then pos:line="6" pos:column="47"> <block pos:line="6" pos:column="48">{
		<decl_stmt><decl><type><name><name pos:line="7" pos:column="17">struct<pos:position pos:line="7" pos:column="23"/></name> <name pos:line="7" pos:column="24">leaf_node<pos:position pos:line="7" pos:column="33"/></name></name> <modifier pos:line="7" pos:column="34">*<pos:position pos:line="7" pos:column="35"/></modifier></type><name pos:line="7" pos:column="35">l<pos:position pos:line="7" pos:column="36"/></name> <init pos:line="7" pos:column="37">= <expr><operator pos:line="7" pos:column="39">(<pos:position pos:line="7" pos:column="40"/></operator>struct <name pos:line="7" pos:column="47">leaf_node<pos:position pos:line="7" pos:column="56"/></name> <operator pos:line="7" pos:column="57">*<pos:position pos:line="7" pos:column="58"/></operator><operator pos:line="7" pos:column="58">)<pos:position pos:line="7" pos:column="59"/></operator> <call><name pos:line="7" pos:column="60">CLR_PTR_TYPE<pos:position pos:line="7" pos:column="72"/></name><argument_list pos:line="7" pos:column="72">(<argument><expr><operator pos:line="7" pos:column="73">*<pos:position pos:line="7" pos:column="74"/></operator><name pos:line="7" pos:column="74">p<pos:position pos:line="7" pos:column="75"/></name></expr></argument>)<pos:position pos:line="7" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="77"/></decl_stmt>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><operator pos:line="8" pos:column="21">!<pos:position pos:line="8" pos:column="22"/></operator><call><name pos:line="8" pos:column="22">hashcmp<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">(<argument><expr><name pos:line="8" pos:column="30">key_sha1<pos:position pos:line="8" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="40">l<pos:position pos:line="8" pos:column="41"/></name><operator pos:line="8" pos:column="41">-&gt;<pos:position pos:line="8" pos:column="46"/></operator><name pos:line="8" pos:column="43">key_oid<pos:position pos:line="8" pos:column="50"/></name><operator pos:line="8" pos:column="50">.<pos:position pos:line="8" pos:column="51"/></operator><name pos:line="8" pos:column="51">hash<pos:position pos:line="8" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="57"/></condition><then pos:line="8" pos:column="57">
			<block type="pseudo"><return pos:line="9" pos:column="25">return <expr><name pos:line="9" pos:column="32">l<pos:position pos:line="9" pos:column="33"/></name></expr>;<pos:position pos:line="9" pos:column="34"/></return></block></then></if>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if>
	<return pos:line="11" pos:column="9">return <expr><name pos:line="11" pos:column="16">NULL<pos:position pos:line="11" pos:column="20"/></name></expr>;<pos:position pos:line="11" pos:column="21"/></return>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
