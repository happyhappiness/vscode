<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6954_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">clean_state_log_if_needed<pos:position pos:line="3" pos:column="26"/></name> <parameter_list pos:line="3" pos:column="27">(<parameter><decl><type><name pos:line="3" pos:column="28">re_match_context_t<pos:position pos:line="3" pos:column="46"/></name> <modifier pos:line="3" pos:column="47">*<pos:position pos:line="3" pos:column="48"/></modifier></type><name pos:line="3" pos:column="48">mctx<pos:position pos:line="3" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="54">int<pos:position pos:line="3" pos:column="57"/></name></type> <name pos:line="3" pos:column="58">next_state_log_idx<pos:position pos:line="3" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="77"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">top<pos:position pos:line="5" pos:column="10"/></name> <init pos:line="5" pos:column="11">= <expr><name><name pos:line="5" pos:column="13">mctx<pos:position pos:line="5" pos:column="17"/></name><operator pos:line="5" pos:column="17">-&gt;<pos:position pos:line="5" pos:column="22"/></operator><name pos:line="5" pos:column="19">state_log_top<pos:position pos:line="5" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>

  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">next_state_log_idx<pos:position pos:line="7" pos:column="25"/></name> <operator pos:line="7" pos:column="26">&gt;=<pos:position pos:line="7" pos:column="31"/></operator> <name><name pos:line="7" pos:column="29">mctx<pos:position pos:line="7" pos:column="33"/></name><operator pos:line="7" pos:column="33">-&gt;<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="35">input<pos:position pos:line="7" pos:column="40"/></name><operator pos:line="7" pos:column="40">.<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="41">bufs_len<pos:position pos:line="7" pos:column="49"/></name></name>
      <operator pos:line="8" pos:column="7">||<pos:position pos:line="8" pos:column="9"/></operator> <operator pos:line="8" pos:column="10">(<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="11">next_state_log_idx<pos:position pos:line="8" pos:column="29"/></name> <operator pos:line="8" pos:column="30">&gt;=<pos:position pos:line="8" pos:column="35"/></operator> <name><name pos:line="8" pos:column="33">mctx<pos:position pos:line="8" pos:column="37"/></name><operator pos:line="8" pos:column="37">-&gt;<pos:position pos:line="8" pos:column="42"/></operator><name pos:line="8" pos:column="39">input<pos:position pos:line="8" pos:column="44"/></name><operator pos:line="8" pos:column="44">.<pos:position pos:line="8" pos:column="45"/></operator><name pos:line="8" pos:column="45">valid_len<pos:position pos:line="8" pos:column="54"/></name></name>
	  <operator pos:line="9" pos:column="11">&amp;&amp;<pos:position pos:line="9" pos:column="21"/></operator> <name><name pos:line="9" pos:column="14">mctx<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">-&gt;<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="20">input<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">.<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="26">valid_len<pos:position pos:line="9" pos:column="35"/></name></name> <operator pos:line="9" pos:column="36">&lt;<pos:position pos:line="9" pos:column="40"/></operator> <name><name pos:line="9" pos:column="38">mctx<pos:position pos:line="9" pos:column="42"/></name><operator pos:line="9" pos:column="42">-&gt;<pos:position pos:line="9" pos:column="47"/></operator><name pos:line="9" pos:column="44">input<pos:position pos:line="9" pos:column="49"/></name><operator pos:line="9" pos:column="49">.<pos:position pos:line="9" pos:column="50"/></operator><name pos:line="9" pos:column="50">len<pos:position pos:line="9" pos:column="53"/></name></name><operator pos:line="9" pos:column="53">)<pos:position pos:line="9" pos:column="54"/></operator></expr>)<pos:position pos:line="9" pos:column="55"/></condition><then pos:line="9" pos:column="55">
    <block pos:line="10" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="11" pos:column="7">reg_errcode_t<pos:position pos:line="11" pos:column="20"/></name></type> <name pos:line="11" pos:column="21">err<pos:position pos:line="11" pos:column="24"/></name></decl>;<pos:position pos:line="11" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><name pos:line="12" pos:column="7">err<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <call><name pos:line="12" pos:column="13">extend_buffers<pos:position pos:line="12" pos:column="27"/></name> <argument_list pos:line="12" pos:column="28">(<argument><expr><name pos:line="12" pos:column="29">mctx<pos:position pos:line="12" pos:column="33"/></name></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt>
      <if pos:line="13" pos:column="7">if <condition pos:line="13" pos:column="10">(<expr><call><name pos:line="13" pos:column="11">BE<pos:position pos:line="13" pos:column="13"/></name> <argument_list pos:line="13" pos:column="14">(<argument><expr><name pos:line="13" pos:column="15">err<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">!=<pos:position pos:line="13" pos:column="21"/></operator> <name pos:line="13" pos:column="22">REG_NOERROR<pos:position pos:line="13" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="35">0<pos:position pos:line="13" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="38"/></condition><then pos:line="13" pos:column="38">
	<block type="pseudo"><return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">err<pos:position pos:line="14" pos:column="19"/></name></expr>;<pos:position pos:line="14" pos:column="20"/></return></block></then></if>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name pos:line="17" pos:column="7">top<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">&lt;<pos:position pos:line="17" pos:column="15"/></operator> <name pos:line="17" pos:column="13">next_state_log_idx<pos:position pos:line="17" pos:column="31"/></name></expr>)<pos:position pos:line="17" pos:column="32"/></condition><then pos:line="17" pos:column="32">
    <block pos:line="18" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="19" pos:column="7">memset<pos:position pos:line="19" pos:column="13"/></name> <argument_list pos:line="19" pos:column="14">(<argument><expr><name><name pos:line="19" pos:column="15">mctx<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">-&gt;<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="21">state_log<pos:position pos:line="19" pos:column="30"/></name></name> <operator pos:line="19" pos:column="31">+<pos:position pos:line="19" pos:column="32"/></operator> <name pos:line="19" pos:column="33">top<pos:position pos:line="19" pos:column="36"/></name> <operator pos:line="19" pos:column="37">+<pos:position pos:line="19" pos:column="38"/></operator> <literal type="number" pos:line="19" pos:column="39">1<pos:position pos:line="19" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="19" pos:column="42">'\0'<pos:position pos:line="19" pos:column="46"/></literal></expr></argument>,
	      <argument><expr><sizeof pos:line="20" pos:column="15">sizeof <argument_list pos:line="20" pos:column="22">(<argument><expr><name pos:line="20" pos:column="23">re_dfastate_t<pos:position pos:line="20" pos:column="36"/></name> <operator pos:line="20" pos:column="37">*<pos:position pos:line="20" pos:column="38"/></operator></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></sizeof> <operator pos:line="20" pos:column="40">*<pos:position pos:line="20" pos:column="41"/></operator> <operator pos:line="20" pos:column="42">(<pos:position pos:line="20" pos:column="43"/></operator><name pos:line="20" pos:column="43">next_state_log_idx<pos:position pos:line="20" pos:column="61"/></name> <operator pos:line="20" pos:column="62">-<pos:position pos:line="20" pos:column="63"/></operator> <name pos:line="20" pos:column="64">top<pos:position pos:line="20" pos:column="67"/></name><operator pos:line="20" pos:column="67">)<pos:position pos:line="20" pos:column="68"/></operator></expr></argument>)<pos:position pos:line="20" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="70"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="21" pos:column="7">mctx<pos:position pos:line="21" pos:column="11"/></name><operator pos:line="21" pos:column="11">-&gt;<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="13">state_log_top<pos:position pos:line="21" pos:column="26"/></name></name> <operator pos:line="21" pos:column="27">=<pos:position pos:line="21" pos:column="28"/></operator> <name pos:line="21" pos:column="29">next_state_log_idx<pos:position pos:line="21" pos:column="47"/></name></expr>;<pos:position pos:line="21" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
  <return pos:line="23" pos:column="3">return <expr><name pos:line="23" pos:column="10">REG_NOERROR<pos:position pos:line="23" pos:column="21"/></name></expr>;<pos:position pos:line="23" pos:column="22"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
