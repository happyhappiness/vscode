<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2923.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">check_everything_connected_real<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name pos:line="1" pos:column="44">sha1_iterate_fn<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">fn<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
					   <parameter><decl><type><name pos:line="2" pos:column="44">int<pos:position pos:line="2" pos:column="47"/></name></type> <name pos:line="2" pos:column="48">quiet<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>,
					   <parameter><decl><type><name pos:line="3" pos:column="44">void<pos:position pos:line="3" pos:column="48"/></name> <modifier pos:line="3" pos:column="49">*<pos:position pos:line="3" pos:column="50"/></modifier></type><name pos:line="3" pos:column="50">cb_data<pos:position pos:line="3" pos:column="57"/></name></decl></parameter>,
					   <parameter><decl><type><name><name pos:line="4" pos:column="44">struct<pos:position pos:line="4" pos:column="50"/></name> <name pos:line="4" pos:column="51">transport<pos:position pos:line="4" pos:column="60"/></name></name> <modifier pos:line="4" pos:column="61">*<pos:position pos:line="4" pos:column="62"/></modifier></type><name pos:line="4" pos:column="62">transport<pos:position pos:line="4" pos:column="71"/></name></decl></parameter>,
					   <parameter><decl><type><specifier pos:line="5" pos:column="44">const<pos:position pos:line="5" pos:column="49"/></specifier> <name pos:line="5" pos:column="50">char<pos:position pos:line="5" pos:column="54"/></name> <modifier pos:line="5" pos:column="55">*<pos:position pos:line="5" pos:column="56"/></modifier></type><name pos:line="5" pos:column="56">shallow_file<pos:position pos:line="5" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="69"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">child_process<pos:position pos:line="7" pos:column="29"/></name></name></type> <name pos:line="7" pos:column="30">rev_list<pos:position pos:line="7" pos:column="38"/></name> <init pos:line="7" pos:column="39">= <expr><name pos:line="7" pos:column="41">CHILD_PROCESS_INIT<pos:position pos:line="7" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="60"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name><name pos:line="8" pos:column="21">argv<pos:position pos:line="8" pos:column="25"/></name><index pos:line="8" pos:column="25">[<expr><literal type="number" pos:line="8" pos:column="26">9<pos:position pos:line="8" pos:column="27"/></literal></expr>]<pos:position pos:line="8" pos:column="28"/></index></name></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name></type> <name><name pos:line="9" pos:column="14">commit<pos:position pos:line="9" pos:column="20"/></name><index pos:line="9" pos:column="20">[<expr><literal type="number" pos:line="9" pos:column="21">41<pos:position pos:line="9" pos:column="23"/></literal></expr>]<pos:position pos:line="9" pos:column="24"/></index></name></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">unsigned<pos:position pos:line="10" pos:column="17"/></name> <name pos:line="10" pos:column="18">char<pos:position pos:line="10" pos:column="22"/></name></type> <name><name pos:line="10" pos:column="23">sha1<pos:position pos:line="10" pos:column="27"/></name><index pos:line="10" pos:column="27">[<expr><literal type="number" pos:line="10" pos:column="28">20<pos:position pos:line="10" pos:column="30"/></literal></expr>]<pos:position pos:line="10" pos:column="31"/></index></name></decl>;<pos:position pos:line="10" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">err<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><literal type="number" pos:line="11" pos:column="19">0<pos:position pos:line="11" pos:column="20"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="22">ac<pos:position pos:line="11" pos:column="24"/></name> <init pos:line="11" pos:column="25">= <expr><literal type="number" pos:line="11" pos:column="27">0<pos:position pos:line="11" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">packed_git<pos:position pos:line="12" pos:column="26"/></name></name> <modifier pos:line="12" pos:column="27">*<pos:position pos:line="12" pos:column="28"/></modifier></type><name pos:line="12" pos:column="28">new_pack<pos:position pos:line="12" pos:column="36"/></name> <init pos:line="12" pos:column="37">= <expr><name pos:line="12" pos:column="39">NULL<pos:position pos:line="12" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">size_t<pos:position pos:line="13" pos:column="15"/></name></type> <name pos:line="13" pos:column="16">base_len<pos:position pos:line="13" pos:column="24"/></name></decl>;<pos:position pos:line="13" pos:column="25"/></decl_stmt>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">fn<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><name pos:line="15" pos:column="16">cb_data<pos:position pos:line="15" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="25">sha1<pos:position pos:line="15" pos:column="29"/></name></expr></argument>)<pos:position pos:line="15" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="31"/></condition><then pos:line="15" pos:column="31">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><name pos:line="16" pos:column="24">err<pos:position pos:line="16" pos:column="27"/></name></expr>;<pos:position pos:line="16" pos:column="28"/></return></block></then></if>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">transport<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">&amp;&amp;<pos:position pos:line="18" pos:column="33"/></operator> <name><name pos:line="18" pos:column="26">transport<pos:position pos:line="18" pos:column="35"/></name><operator pos:line="18" pos:column="35">-&gt;<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="37">smart_options<pos:position pos:line="18" pos:column="50"/></name></name> <operator pos:line="18" pos:column="51">&amp;&amp;<pos:position pos:line="18" pos:column="61"/></operator>
	    <name><name pos:line="19" pos:column="13">transport<pos:position pos:line="19" pos:column="22"/></name><operator pos:line="19" pos:column="22">-&gt;<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="24">smart_options<pos:position pos:line="19" pos:column="37"/></name><operator pos:line="19" pos:column="37">-&gt;<pos:position pos:line="19" pos:column="42"/></operator><name pos:line="19" pos:column="39">self_contained_and_connected<pos:position pos:line="19" pos:column="67"/></name></name> <operator pos:line="19" pos:column="68">&amp;&amp;<pos:position pos:line="19" pos:column="78"/></operator>
	    <name><name pos:line="20" pos:column="13">transport<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">-&gt;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="24">pack_lockfile<pos:position pos:line="20" pos:column="37"/></name></name> <operator pos:line="20" pos:column="38">&amp;&amp;<pos:position pos:line="20" pos:column="48"/></operator>
	    <call><name pos:line="21" pos:column="13">strip_suffix<pos:position pos:line="21" pos:column="25"/></name><argument_list pos:line="21" pos:column="25">(<argument><expr><name><name pos:line="21" pos:column="26">transport<pos:position pos:line="21" pos:column="35"/></name><operator pos:line="21" pos:column="35">-&gt;<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="37">pack_lockfile<pos:position pos:line="21" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="52">".keep"<pos:position pos:line="21" pos:column="59"/></literal></expr></argument>, <argument><expr><operator pos:line="21" pos:column="61">&amp;<pos:position pos:line="21" pos:column="66"/></operator><name pos:line="21" pos:column="62">base_len<pos:position pos:line="21" pos:column="70"/></name></expr></argument>)<pos:position pos:line="21" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="72"/></condition><then pos:line="21" pos:column="72"> <block pos:line="21" pos:column="73">{
		<decl_stmt><decl><type><name><name pos:line="22" pos:column="17">struct<pos:position pos:line="22" pos:column="23"/></name> <name pos:line="22" pos:column="24">strbuf<pos:position pos:line="22" pos:column="30"/></name></name></type> <name pos:line="22" pos:column="31">idx_file<pos:position pos:line="22" pos:column="39"/></name> <init pos:line="22" pos:column="40">= <expr><name pos:line="22" pos:column="42">STRBUF_INIT<pos:position pos:line="22" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="22" pos:column="54"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">strbuf_add<pos:position pos:line="23" pos:column="27"/></name><argument_list pos:line="23" pos:column="27">(<argument><expr><operator pos:line="23" pos:column="28">&amp;<pos:position pos:line="23" pos:column="33"/></operator><name pos:line="23" pos:column="29">idx_file<pos:position pos:line="23" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="39">transport<pos:position pos:line="23" pos:column="48"/></name><operator pos:line="23" pos:column="48">-&gt;<pos:position pos:line="23" pos:column="53"/></operator><name pos:line="23" pos:column="50">pack_lockfile<pos:position pos:line="23" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="65">base_len<pos:position pos:line="23" pos:column="73"/></name></expr></argument>)<pos:position pos:line="23" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="75"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">strbuf_addstr<pos:position pos:line="24" pos:column="30"/></name><argument_list pos:line="24" pos:column="30">(<argument><expr><operator pos:line="24" pos:column="31">&amp;<pos:position pos:line="24" pos:column="36"/></operator><name pos:line="24" pos:column="32">idx_file<pos:position pos:line="24" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="42">".idx"<pos:position pos:line="24" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name pos:line="25" pos:column="17">new_pack<pos:position pos:line="25" pos:column="25"/></name> <operator pos:line="25" pos:column="26">=<pos:position pos:line="25" pos:column="27"/></operator> <call><name pos:line="25" pos:column="28">add_packed_git<pos:position pos:line="25" pos:column="42"/></name><argument_list pos:line="25" pos:column="42">(<argument><expr><name><name pos:line="25" pos:column="43">idx_file<pos:position pos:line="25" pos:column="51"/></name><operator pos:line="25" pos:column="51">.<pos:position pos:line="25" pos:column="52"/></operator><name pos:line="25" pos:column="52">buf<pos:position pos:line="25" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="57">idx_file<pos:position pos:line="25" pos:column="65"/></name><operator pos:line="25" pos:column="65">.<pos:position pos:line="25" pos:column="66"/></operator><name pos:line="25" pos:column="66">len<pos:position pos:line="25" pos:column="69"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="71">1<pos:position pos:line="25" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="74"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">strbuf_release<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">(<argument><expr><operator pos:line="26" pos:column="32">&amp;<pos:position pos:line="26" pos:column="37"/></operator><name pos:line="26" pos:column="33">idx_file<pos:position pos:line="26" pos:column="41"/></name></expr></argument>)<pos:position pos:line="26" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">shallow_file<pos:position pos:line="29" pos:column="25"/></name></expr>)<pos:position pos:line="29" pos:column="26"/></condition><then pos:line="29" pos:column="26"> <block pos:line="29" pos:column="27">{
		<expr_stmt><expr><name><name pos:line="30" pos:column="17">argv<pos:position pos:line="30" pos:column="21"/></name><index pos:line="30" pos:column="21">[<expr><name pos:line="30" pos:column="22">ac<pos:position pos:line="30" pos:column="24"/></name><operator pos:line="30" pos:column="24">++<pos:position pos:line="30" pos:column="26"/></operator></expr>]<pos:position pos:line="30" pos:column="27"/></index></name> <operator pos:line="30" pos:column="28">=<pos:position pos:line="30" pos:column="29"/></operator> <literal type="string" pos:line="30" pos:column="30">"--shallow-file"<pos:position pos:line="30" pos:column="46"/></literal></expr>;<pos:position pos:line="30" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="31" pos:column="17">argv<pos:position pos:line="31" pos:column="21"/></name><index pos:line="31" pos:column="21">[<expr><name pos:line="31" pos:column="22">ac<pos:position pos:line="31" pos:column="24"/></name><operator pos:line="31" pos:column="24">++<pos:position pos:line="31" pos:column="26"/></operator></expr>]<pos:position pos:line="31" pos:column="27"/></index></name> <operator pos:line="31" pos:column="28">=<pos:position pos:line="31" pos:column="29"/></operator> <name pos:line="31" pos:column="30">shallow_file<pos:position pos:line="31" pos:column="42"/></name></expr>;<pos:position pos:line="31" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="33" pos:column="9">argv<pos:position pos:line="33" pos:column="13"/></name><index pos:line="33" pos:column="13">[<expr><name pos:line="33" pos:column="14">ac<pos:position pos:line="33" pos:column="16"/></name><operator pos:line="33" pos:column="16">++<pos:position pos:line="33" pos:column="18"/></operator></expr>]<pos:position pos:line="33" pos:column="19"/></index></name> <operator pos:line="33" pos:column="20">=<pos:position pos:line="33" pos:column="21"/></operator> <literal type="string" pos:line="33" pos:column="22">"rev-list"<pos:position pos:line="33" pos:column="32"/></literal></expr>;<pos:position pos:line="33" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="34" pos:column="9">argv<pos:position pos:line="34" pos:column="13"/></name><index pos:line="34" pos:column="13">[<expr><name pos:line="34" pos:column="14">ac<pos:position pos:line="34" pos:column="16"/></name><operator pos:line="34" pos:column="16">++<pos:position pos:line="34" pos:column="18"/></operator></expr>]<pos:position pos:line="34" pos:column="19"/></index></name> <operator pos:line="34" pos:column="20">=<pos:position pos:line="34" pos:column="21"/></operator> <literal type="string" pos:line="34" pos:column="22">"--objects"<pos:position pos:line="34" pos:column="33"/></literal></expr>;<pos:position pos:line="34" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="35" pos:column="9">argv<pos:position pos:line="35" pos:column="13"/></name><index pos:line="35" pos:column="13">[<expr><name pos:line="35" pos:column="14">ac<pos:position pos:line="35" pos:column="16"/></name><operator pos:line="35" pos:column="16">++<pos:position pos:line="35" pos:column="18"/></operator></expr>]<pos:position pos:line="35" pos:column="19"/></index></name> <operator pos:line="35" pos:column="20">=<pos:position pos:line="35" pos:column="21"/></operator> <literal type="string" pos:line="35" pos:column="22">"--stdin"<pos:position pos:line="35" pos:column="31"/></literal></expr>;<pos:position pos:line="35" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="36" pos:column="9">argv<pos:position pos:line="36" pos:column="13"/></name><index pos:line="36" pos:column="13">[<expr><name pos:line="36" pos:column="14">ac<pos:position pos:line="36" pos:column="16"/></name><operator pos:line="36" pos:column="16">++<pos:position pos:line="36" pos:column="18"/></operator></expr>]<pos:position pos:line="36" pos:column="19"/></index></name> <operator pos:line="36" pos:column="20">=<pos:position pos:line="36" pos:column="21"/></operator> <literal type="string" pos:line="36" pos:column="22">"--not"<pos:position pos:line="36" pos:column="29"/></literal></expr>;<pos:position pos:line="36" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="37" pos:column="9">argv<pos:position pos:line="37" pos:column="13"/></name><index pos:line="37" pos:column="13">[<expr><name pos:line="37" pos:column="14">ac<pos:position pos:line="37" pos:column="16"/></name><operator pos:line="37" pos:column="16">++<pos:position pos:line="37" pos:column="18"/></operator></expr>]<pos:position pos:line="37" pos:column="19"/></index></name> <operator pos:line="37" pos:column="20">=<pos:position pos:line="37" pos:column="21"/></operator> <literal type="string" pos:line="37" pos:column="22">"--all"<pos:position pos:line="37" pos:column="29"/></literal></expr>;<pos:position pos:line="37" pos:column="30"/></expr_stmt>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">quiet<pos:position pos:line="38" pos:column="18"/></name></expr>)<pos:position pos:line="38" pos:column="19"/></condition><then pos:line="38" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="39" pos:column="17">argv<pos:position pos:line="39" pos:column="21"/></name><index pos:line="39" pos:column="21">[<expr><name pos:line="39" pos:column="22">ac<pos:position pos:line="39" pos:column="24"/></name><operator pos:line="39" pos:column="24">++<pos:position pos:line="39" pos:column="26"/></operator></expr>]<pos:position pos:line="39" pos:column="27"/></index></name> <operator pos:line="39" pos:column="28">=<pos:position pos:line="39" pos:column="29"/></operator> <literal type="string" pos:line="39" pos:column="30">"--quiet"<pos:position pos:line="39" pos:column="39"/></literal></expr>;<pos:position pos:line="39" pos:column="40"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="40" pos:column="9">argv<pos:position pos:line="40" pos:column="13"/></name><index pos:line="40" pos:column="13">[<expr><name pos:line="40" pos:column="14">ac<pos:position pos:line="40" pos:column="16"/></name></expr>]<pos:position pos:line="40" pos:column="17"/></index></name> <operator pos:line="40" pos:column="18">=<pos:position pos:line="40" pos:column="19"/></operator> <name pos:line="40" pos:column="20">NULL<pos:position pos:line="40" pos:column="24"/></name></expr>;<pos:position pos:line="40" pos:column="25"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="42" pos:column="9">rev_list<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">.<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="18">argv<pos:position pos:line="42" pos:column="22"/></name></name> <operator pos:line="42" pos:column="23">=<pos:position pos:line="42" pos:column="24"/></operator> <name pos:line="42" pos:column="25">argv<pos:position pos:line="42" pos:column="29"/></name></expr>;<pos:position pos:line="42" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="43" pos:column="9">rev_list<pos:position pos:line="43" pos:column="17"/></name><operator pos:line="43" pos:column="17">.<pos:position pos:line="43" pos:column="18"/></operator><name pos:line="43" pos:column="18">git_cmd<pos:position pos:line="43" pos:column="25"/></name></name> <operator pos:line="43" pos:column="26">=<pos:position pos:line="43" pos:column="27"/></operator> <literal type="number" pos:line="43" pos:column="28">1<pos:position pos:line="43" pos:column="29"/></literal></expr>;<pos:position pos:line="43" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="44" pos:column="9">rev_list<pos:position pos:line="44" pos:column="17"/></name><operator pos:line="44" pos:column="17">.<pos:position pos:line="44" pos:column="18"/></operator><name pos:line="44" pos:column="18">in<pos:position pos:line="44" pos:column="20"/></name></name> <operator pos:line="44" pos:column="21">=<pos:position pos:line="44" pos:column="22"/></operator> <operator pos:line="44" pos:column="23">-<pos:position pos:line="44" pos:column="24"/></operator><literal type="number" pos:line="44" pos:column="24">1<pos:position pos:line="44" pos:column="25"/></literal></expr>;<pos:position pos:line="44" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="45" pos:column="9">rev_list<pos:position pos:line="45" pos:column="17"/></name><operator pos:line="45" pos:column="17">.<pos:position pos:line="45" pos:column="18"/></operator><name pos:line="45" pos:column="18">no_stdout<pos:position pos:line="45" pos:column="27"/></name></name> <operator pos:line="45" pos:column="28">=<pos:position pos:line="45" pos:column="29"/></operator> <literal type="number" pos:line="45" pos:column="30">1<pos:position pos:line="45" pos:column="31"/></literal></expr>;<pos:position pos:line="45" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="46" pos:column="9">rev_list<pos:position pos:line="46" pos:column="17"/></name><operator pos:line="46" pos:column="17">.<pos:position pos:line="46" pos:column="18"/></operator><name pos:line="46" pos:column="18">no_stderr<pos:position pos:line="46" pos:column="27"/></name></name> <operator pos:line="46" pos:column="28">=<pos:position pos:line="46" pos:column="29"/></operator> <name pos:line="46" pos:column="30">quiet<pos:position pos:line="46" pos:column="35"/></name></expr>;<pos:position pos:line="46" pos:column="36"/></expr_stmt>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><call><name pos:line="47" pos:column="13">start_command<pos:position pos:line="47" pos:column="26"/></name><argument_list pos:line="47" pos:column="26">(<argument><expr><operator pos:line="47" pos:column="27">&amp;<pos:position pos:line="47" pos:column="32"/></operator><name pos:line="47" pos:column="28">rev_list<pos:position pos:line="47" pos:column="36"/></name></expr></argument>)<pos:position pos:line="47" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="38"/></condition><then pos:line="47" pos:column="38">
		<block type="pseudo"><return pos:line="48" pos:column="17">return <expr><call><name pos:line="48" pos:column="24">error<pos:position pos:line="48" pos:column="29"/></name><argument_list pos:line="48" pos:column="29">(<argument><expr><call><name pos:line="48" pos:column="30">_<pos:position pos:line="48" pos:column="31"/></name><argument_list pos:line="48" pos:column="31">(<argument><expr><literal type="string" pos:line="48" pos:column="32">"Could not run 'git rev-list'"<pos:position pos:line="48" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="65"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="50" pos:column="9">sigchain_push<pos:position pos:line="50" pos:column="22"/></name><argument_list pos:line="50" pos:column="22">(<argument><expr><name pos:line="50" pos:column="23">SIGPIPE<pos:position pos:line="50" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="32">SIG_IGN<pos:position pos:line="50" pos:column="39"/></name></expr></argument>)<pos:position pos:line="50" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="52" pos:column="9">commit<pos:position pos:line="52" pos:column="15"/></name><index pos:line="52" pos:column="15">[<expr><literal type="number" pos:line="52" pos:column="16">40<pos:position pos:line="52" pos:column="18"/></literal></expr>]<pos:position pos:line="52" pos:column="19"/></index></name> <operator pos:line="52" pos:column="20">=<pos:position pos:line="52" pos:column="21"/></operator> <literal type="char" pos:line="52" pos:column="22">'\n'<pos:position pos:line="52" pos:column="26"/></literal></expr>;<pos:position pos:line="52" pos:column="27"/></expr_stmt>
	<do pos:line="53" pos:column="9">do <block pos:line="53" pos:column="12">{
		<comment type="block" pos:line="54" pos:column="17">/*
		 * If index-pack already checked that:
		 * - there are no dangling pointers in the new pack
		 * - the pack is self contained
		 * Then if the updated ref is in the new pack, then we
		 * are sure the ref is good and not sending it to
		 * rev-list for verification.
		 */</comment>
		<if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><name pos:line="62" pos:column="21">new_pack<pos:position pos:line="62" pos:column="29"/></name> <operator pos:line="62" pos:column="30">&amp;&amp;<pos:position pos:line="62" pos:column="40"/></operator> <call><name pos:line="62" pos:column="33">find_pack_entry_one<pos:position pos:line="62" pos:column="52"/></name><argument_list pos:line="62" pos:column="52">(<argument><expr><name pos:line="62" pos:column="53">sha1<pos:position pos:line="62" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="59">new_pack<pos:position pos:line="62" pos:column="67"/></name></expr></argument>)<pos:position pos:line="62" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="69"/></condition><then pos:line="62" pos:column="69">
			<block type="pseudo"><continue pos:line="63" pos:column="25">continue;<pos:position pos:line="63" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><call><name pos:line="65" pos:column="17">memcpy<pos:position pos:line="65" pos:column="23"/></name><argument_list pos:line="65" pos:column="23">(<argument><expr><name pos:line="65" pos:column="24">commit<pos:position pos:line="65" pos:column="30"/></name></expr></argument>, <argument><expr><call><name pos:line="65" pos:column="32">sha1_to_hex<pos:position pos:line="65" pos:column="43"/></name><argument_list pos:line="65" pos:column="43">(<argument><expr><name pos:line="65" pos:column="44">sha1<pos:position pos:line="65" pos:column="48"/></name></expr></argument>)<pos:position pos:line="65" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="51">40<pos:position pos:line="65" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="55"/></expr_stmt>
		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><call><name pos:line="66" pos:column="21">write_in_full<pos:position pos:line="66" pos:column="34"/></name><argument_list pos:line="66" pos:column="34">(<argument><expr><name><name pos:line="66" pos:column="35">rev_list<pos:position pos:line="66" pos:column="43"/></name><operator pos:line="66" pos:column="43">.<pos:position pos:line="66" pos:column="44"/></operator><name pos:line="66" pos:column="44">in<pos:position pos:line="66" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="48">commit<pos:position pos:line="66" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="56">41<pos:position pos:line="66" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="59"/></argument_list></call> <operator pos:line="66" pos:column="60">&lt;<pos:position pos:line="66" pos:column="64"/></operator> <literal type="number" pos:line="66" pos:column="62">0<pos:position pos:line="66" pos:column="63"/></literal></expr>)<pos:position pos:line="66" pos:column="64"/></condition><then pos:line="66" pos:column="64"> <block pos:line="66" pos:column="65">{
			<if pos:line="67" pos:column="25">if <condition pos:line="67" pos:column="28">(<expr><name pos:line="67" pos:column="29">errno<pos:position pos:line="67" pos:column="34"/></name> <operator pos:line="67" pos:column="35">!=<pos:position pos:line="67" pos:column="37"/></operator> <name pos:line="67" pos:column="38">EPIPE<pos:position pos:line="67" pos:column="43"/></name> <operator pos:line="67" pos:column="44">&amp;&amp;<pos:position pos:line="67" pos:column="54"/></operator> <name pos:line="67" pos:column="47">errno<pos:position pos:line="67" pos:column="52"/></name> <operator pos:line="67" pos:column="53">!=<pos:position pos:line="67" pos:column="55"/></operator> <name pos:line="67" pos:column="56">EINVAL<pos:position pos:line="67" pos:column="62"/></name></expr>)<pos:position pos:line="67" pos:column="63"/></condition><then pos:line="67" pos:column="63">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="33">error<pos:position pos:line="68" pos:column="38"/></name><argument_list pos:line="68" pos:column="38">(<argument><expr><call><name pos:line="68" pos:column="39">_<pos:position pos:line="68" pos:column="40"/></name><argument_list pos:line="68" pos:column="40">(<argument><expr><literal type="string" pos:line="68" pos:column="41">"failed write to rev-list: %s"<pos:position pos:line="68" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="72"/></argument_list></call></expr></argument>,
				      <argument><expr><call><name pos:line="69" pos:column="39">strerror<pos:position pos:line="69" pos:column="47"/></name><argument_list pos:line="69" pos:column="47">(<argument><expr><name pos:line="69" pos:column="48">errno<pos:position pos:line="69" pos:column="53"/></name></expr></argument>)<pos:position pos:line="69" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="69" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="56"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="70" pos:column="25">err<pos:position pos:line="70" pos:column="28"/></name> <operator pos:line="70" pos:column="29">=<pos:position pos:line="70" pos:column="30"/></operator> <operator pos:line="70" pos:column="31">-<pos:position pos:line="70" pos:column="32"/></operator><literal type="number" pos:line="70" pos:column="32">1<pos:position pos:line="70" pos:column="33"/></literal></expr>;<pos:position pos:line="70" pos:column="34"/></expr_stmt>
			<break pos:line="71" pos:column="25">break;<pos:position pos:line="71" pos:column="31"/></break>
		}<pos:position pos:line="72" pos:column="18"/></block></then></if>
	}<pos:position pos:line="73" pos:column="10"/></block> while <condition pos:line="73" pos:column="17">(<expr><operator pos:line="73" pos:column="18">!<pos:position pos:line="73" pos:column="19"/></operator><call><name pos:line="73" pos:column="19">fn<pos:position pos:line="73" pos:column="21"/></name><argument_list pos:line="73" pos:column="21">(<argument><expr><name pos:line="73" pos:column="22">cb_data<pos:position pos:line="73" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="31">sha1<pos:position pos:line="73" pos:column="35"/></name></expr></argument>)<pos:position pos:line="73" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="37"/></condition>;<pos:position pos:line="73" pos:column="38"/></do>

	<if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><call><name pos:line="75" pos:column="13">close<pos:position pos:line="75" pos:column="18"/></name><argument_list pos:line="75" pos:column="18">(<argument><expr><name><name pos:line="75" pos:column="19">rev_list<pos:position pos:line="75" pos:column="27"/></name><operator pos:line="75" pos:column="27">.<pos:position pos:line="75" pos:column="28"/></operator><name pos:line="75" pos:column="28">in<pos:position pos:line="75" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="75" pos:column="32"/></condition><then pos:line="75" pos:column="32"> <block pos:line="75" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="76" pos:column="17">error<pos:position pos:line="76" pos:column="22"/></name><argument_list pos:line="76" pos:column="22">(<argument><expr><call><name pos:line="76" pos:column="23">_<pos:position pos:line="76" pos:column="24"/></name><argument_list pos:line="76" pos:column="24">(<argument><expr><literal type="string" pos:line="76" pos:column="25">"failed to close rev-list's stdin: %s"<pos:position pos:line="76" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="76" pos:column="66">strerror<pos:position pos:line="76" pos:column="74"/></name><argument_list pos:line="76" pos:column="74">(<argument><expr><name pos:line="76" pos:column="75">errno<pos:position pos:line="76" pos:column="80"/></name></expr></argument>)<pos:position pos:line="76" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="76" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="83"/></expr_stmt>
		<expr_stmt><expr><name pos:line="77" pos:column="17">err<pos:position pos:line="77" pos:column="20"/></name> <operator pos:line="77" pos:column="21">=<pos:position pos:line="77" pos:column="22"/></operator> <operator pos:line="77" pos:column="23">-<pos:position pos:line="77" pos:column="24"/></operator><literal type="number" pos:line="77" pos:column="24">1<pos:position pos:line="77" pos:column="25"/></literal></expr>;<pos:position pos:line="77" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="78" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="80" pos:column="9">sigchain_pop<pos:position pos:line="80" pos:column="21"/></name><argument_list pos:line="80" pos:column="21">(<argument><expr><name pos:line="80" pos:column="22">SIGPIPE<pos:position pos:line="80" pos:column="29"/></name></expr></argument>)<pos:position pos:line="80" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="31"/></expr_stmt>
	<return pos:line="81" pos:column="9">return <expr><call><name pos:line="81" pos:column="16">finish_command<pos:position pos:line="81" pos:column="30"/></name><argument_list pos:line="81" pos:column="30">(<argument><expr><operator pos:line="81" pos:column="31">&amp;<pos:position pos:line="81" pos:column="36"/></operator><name pos:line="81" pos:column="32">rev_list<pos:position pos:line="81" pos:column="40"/></name></expr></argument>)<pos:position pos:line="81" pos:column="41"/></argument_list></call> <operator pos:line="81" pos:column="42">||<pos:position pos:line="81" pos:column="44"/></operator> <name pos:line="81" pos:column="45">err<pos:position pos:line="81" pos:column="48"/></name></expr>;<pos:position pos:line="81" pos:column="49"/></return>
}<pos:position pos:line="82" pos:column="2"/></block></function></unit>
