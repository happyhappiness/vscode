<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_49_git-2.10.0.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">write_idx_file<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">index_name<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="52">struct<pos:position pos:line="1" pos:column="58"/></name> <name pos:line="1" pos:column="59">pack_idx_entry<pos:position pos:line="1" pos:column="73"/></name></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier><modifier pos:line="1" pos:column="75">*<pos:position pos:line="1" pos:column="76"/></modifier></type><name pos:line="1" pos:column="76">objects<pos:position pos:line="1" pos:column="83"/></name></decl></parameter>,
			   <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">nr_objects<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="44">const<pos:position pos:line="2" pos:column="49"/></specifier> <name><name pos:line="2" pos:column="50">struct<pos:position pos:line="2" pos:column="56"/></name> <name pos:line="2" pos:column="57">pack_idx_option<pos:position pos:line="2" pos:column="72"/></name></name> <modifier pos:line="2" pos:column="73">*<pos:position pos:line="2" pos:column="74"/></modifier></type><name pos:line="2" pos:column="74">opts<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>,
			   <parameter><decl><type><specifier pos:line="3" pos:column="28">const<pos:position pos:line="3" pos:column="33"/></specifier> <name pos:line="3" pos:column="34">unsigned<pos:position pos:line="3" pos:column="42"/></name> <name pos:line="3" pos:column="43">char<pos:position pos:line="3" pos:column="47"/></name> <modifier pos:line="3" pos:column="48">*<pos:position pos:line="3" pos:column="49"/></modifier></type><name pos:line="3" pos:column="49">sha1<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="54"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">sha1file<pos:position pos:line="5" pos:column="24"/></name></name> <modifier pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></modifier></type><name pos:line="5" pos:column="26">f<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">pack_idx_entry<pos:position pos:line="6" pos:column="30"/></name></name> <modifier pos:line="6" pos:column="31">*<pos:position pos:line="6" pos:column="32"/></modifier><modifier pos:line="6" pos:column="32">*<pos:position pos:line="6" pos:column="33"/></modifier></type><name pos:line="6" pos:column="33">sorted_by_sha<pos:position pos:line="6" pos:column="46"/></name></decl>, <modifier pos:line="6" pos:column="48">*<pos:position pos:line="6" pos:column="49"/></modifier><modifier pos:line="6" pos:column="49">*<pos:position pos:line="6" pos:column="50"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="50">list<pos:position pos:line="6" pos:column="54"/></name></decl>, <modifier pos:line="6" pos:column="56">*<pos:position pos:line="6" pos:column="57"/></modifier><modifier pos:line="6" pos:column="57">*<pos:position pos:line="6" pos:column="58"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="58">last<pos:position pos:line="6" pos:column="62"/></name></decl>;<pos:position pos:line="6" pos:column="63"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">off_t<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">last_obj_offset<pos:position pos:line="7" pos:column="30"/></name> <init pos:line="7" pos:column="31">= <expr><literal type="number" pos:line="7" pos:column="33">0<pos:position pos:line="7" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">uint32_t<pos:position pos:line="8" pos:column="17"/></name></type> <name><name pos:line="8" pos:column="18">array<pos:position pos:line="8" pos:column="23"/></name><index pos:line="8" pos:column="23">[<expr><literal type="number" pos:line="8" pos:column="24">256<pos:position pos:line="8" pos:column="27"/></literal></expr>]<pos:position pos:line="8" pos:column="28"/></index></name></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">i<pos:position pos:line="9" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="16">fd<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">uint32_t<pos:position pos:line="10" pos:column="17"/></name></type> <name pos:line="10" pos:column="18">index_version<pos:position pos:line="10" pos:column="31"/></name></decl>;<pos:position pos:line="10" pos:column="32"/></decl_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">nr_objects<pos:position pos:line="12" pos:column="23"/></name></expr>)<pos:position pos:line="12" pos:column="24"/></condition><then pos:line="12" pos:column="24"> <block pos:line="12" pos:column="25">{
		<expr_stmt><expr><name pos:line="13" pos:column="17">sorted_by_sha<pos:position pos:line="13" pos:column="30"/></name> <operator pos:line="13" pos:column="31">=<pos:position pos:line="13" pos:column="32"/></operator> <name pos:line="13" pos:column="33">objects<pos:position pos:line="13" pos:column="40"/></name></expr>;<pos:position pos:line="13" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">list<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">=<pos:position pos:line="14" pos:column="23"/></operator> <name pos:line="14" pos:column="24">sorted_by_sha<pos:position pos:line="14" pos:column="37"/></name></expr>;<pos:position pos:line="14" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="15" pos:column="17">last<pos:position pos:line="15" pos:column="21"/></name> <operator pos:line="15" pos:column="22">=<pos:position pos:line="15" pos:column="23"/></operator> <name pos:line="15" pos:column="24">sorted_by_sha<pos:position pos:line="15" pos:column="37"/></name> <operator pos:line="15" pos:column="38">+<pos:position pos:line="15" pos:column="39"/></operator> <name pos:line="15" pos:column="40">nr_objects<pos:position pos:line="15" pos:column="50"/></name></expr>;<pos:position pos:line="15" pos:column="51"/></expr_stmt>
		<for pos:line="16" pos:column="17">for <control pos:line="16" pos:column="21">(<init><expr><name pos:line="16" pos:column="22">i<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">=<pos:position pos:line="16" pos:column="25"/></operator> <literal type="number" pos:line="16" pos:column="26">0<pos:position pos:line="16" pos:column="27"/></literal></expr>;<pos:position pos:line="16" pos:column="28"/></init> <condition><expr><name pos:line="16" pos:column="29">i<pos:position pos:line="16" pos:column="30"/></name> <operator pos:line="16" pos:column="31">&lt;<pos:position pos:line="16" pos:column="35"/></operator> <name pos:line="16" pos:column="33">nr_objects<pos:position pos:line="16" pos:column="43"/></name></expr>;<pos:position pos:line="16" pos:column="44"/></condition> <incr><expr><operator pos:line="16" pos:column="45">++<pos:position pos:line="16" pos:column="47"/></operator><name pos:line="16" pos:column="47">i<pos:position pos:line="16" pos:column="48"/></name></expr></incr>)<pos:position pos:line="16" pos:column="49"/></control> <block pos:line="16" pos:column="50">{
			<if pos:line="17" pos:column="25">if <condition pos:line="17" pos:column="28">(<expr><name><name pos:line="17" pos:column="29">objects<pos:position pos:line="17" pos:column="36"/></name><index pos:line="17" pos:column="36">[<expr><name pos:line="17" pos:column="37">i<pos:position pos:line="17" pos:column="38"/></name></expr>]<pos:position pos:line="17" pos:column="39"/></index></name><operator pos:line="17" pos:column="39">-&gt;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="41">offset<pos:position pos:line="17" pos:column="47"/></name> <operator pos:line="17" pos:column="48">&gt;<pos:position pos:line="17" pos:column="52"/></operator> <name pos:line="17" pos:column="50">last_obj_offset<pos:position pos:line="17" pos:column="65"/></name></expr>)<pos:position pos:line="17" pos:column="66"/></condition><then pos:line="17" pos:column="66">
				<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="33">last_obj_offset<pos:position pos:line="18" pos:column="48"/></name> <operator pos:line="18" pos:column="49">=<pos:position pos:line="18" pos:column="50"/></operator> <name><name pos:line="18" pos:column="51">objects<pos:position pos:line="18" pos:column="58"/></name><index pos:line="18" pos:column="58">[<expr><name pos:line="18" pos:column="59">i<pos:position pos:line="18" pos:column="60"/></name></expr>]<pos:position pos:line="18" pos:column="61"/></index></name><operator pos:line="18" pos:column="61">-&gt;<pos:position pos:line="18" pos:column="66"/></operator><name pos:line="18" pos:column="63">offset<pos:position pos:line="18" pos:column="69"/></name></expr>;<pos:position pos:line="18" pos:column="70"/></expr_stmt></block></then></if>
		}<pos:position pos:line="19" pos:column="18"/></block></for>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">qsort<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><name pos:line="20" pos:column="23">sorted_by_sha<pos:position pos:line="20" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="38">nr_objects<pos:position pos:line="20" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="50">sizeof<argument_list pos:line="20" pos:column="56">(<argument><expr><name><name pos:line="20" pos:column="57">sorted_by_sha<pos:position pos:line="20" pos:column="70"/></name><index pos:line="20" pos:column="70">[<expr><literal type="number" pos:line="20" pos:column="71">0<pos:position pos:line="20" pos:column="72"/></literal></expr>]<pos:position pos:line="20" pos:column="73"/></index></name></expr></argument>)<pos:position pos:line="20" pos:column="74"/></argument_list></sizeof></expr></argument>,
		      <argument><expr><name pos:line="21" pos:column="23">sha1_compare<pos:position pos:line="21" pos:column="35"/></name></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></then>
	<else pos:line="23" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="17">sorted_by_sha<pos:position pos:line="24" pos:column="30"/></name> <operator pos:line="24" pos:column="31">=<pos:position pos:line="24" pos:column="32"/></operator> <name pos:line="24" pos:column="33">list<pos:position pos:line="24" pos:column="37"/></name> <operator pos:line="24" pos:column="38">=<pos:position pos:line="24" pos:column="39"/></operator> <name pos:line="24" pos:column="40">last<pos:position pos:line="24" pos:column="44"/></name> <operator pos:line="24" pos:column="45">=<pos:position pos:line="24" pos:column="46"/></operator> <name pos:line="24" pos:column="47">NULL<pos:position pos:line="24" pos:column="51"/></name></expr>;<pos:position pos:line="24" pos:column="52"/></expr_stmt></block></else></if>

	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name><name pos:line="26" pos:column="13">opts<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">-&gt;<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="19">flags<pos:position pos:line="26" pos:column="24"/></name></name> <operator pos:line="26" pos:column="25">&amp;<pos:position pos:line="26" pos:column="30"/></operator> <name pos:line="26" pos:column="27">WRITE_IDX_VERIFY<pos:position pos:line="26" pos:column="43"/></name></expr>)<pos:position pos:line="26" pos:column="44"/></condition><then pos:line="26" pos:column="44"> <block pos:line="26" pos:column="45">{
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">assert<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><name pos:line="27" pos:column="24">index_name<pos:position pos:line="27" pos:column="34"/></name></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name pos:line="28" pos:column="17">f<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">=<pos:position pos:line="28" pos:column="20"/></operator> <call><name pos:line="28" pos:column="21">sha1fd_check<pos:position pos:line="28" pos:column="33"/></name><argument_list pos:line="28" pos:column="33">(<argument><expr><name pos:line="28" pos:column="34">index_name<pos:position pos:line="28" pos:column="44"/></name></expr></argument>)<pos:position pos:line="28" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></then> <else pos:line="29" pos:column="11">else <block pos:line="29" pos:column="16">{
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><operator pos:line="30" pos:column="21">!<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="22">index_name<pos:position pos:line="30" pos:column="32"/></name></expr>)<pos:position pos:line="30" pos:column="33"/></condition><then pos:line="30" pos:column="33"> <block pos:line="30" pos:column="34">{
			<decl_stmt><decl><specifier pos:line="31" pos:column="25">static<pos:position pos:line="31" pos:column="31"/></specifier> <type><name pos:line="31" pos:column="32">char<pos:position pos:line="31" pos:column="36"/></name></type> <name><name pos:line="31" pos:column="37">tmp_file<pos:position pos:line="31" pos:column="45"/></name><index pos:line="31" pos:column="45">[<expr><name pos:line="31" pos:column="46">PATH_MAX<pos:position pos:line="31" pos:column="54"/></name></expr>]<pos:position pos:line="31" pos:column="55"/></index></name></decl>;<pos:position pos:line="31" pos:column="56"/></decl_stmt>
			<expr_stmt><expr><name pos:line="32" pos:column="25">fd<pos:position pos:line="32" pos:column="27"/></name> <operator pos:line="32" pos:column="28">=<pos:position pos:line="32" pos:column="29"/></operator> <call><name pos:line="32" pos:column="30">odb_mkstemp<pos:position pos:line="32" pos:column="41"/></name><argument_list pos:line="32" pos:column="41">(<argument><expr><name pos:line="32" pos:column="42">tmp_file<pos:position pos:line="32" pos:column="50"/></name></expr></argument>, <argument><expr><sizeof pos:line="32" pos:column="52">sizeof<argument_list pos:line="32" pos:column="58">(<argument><expr><name pos:line="32" pos:column="59">tmp_file<pos:position pos:line="32" pos:column="67"/></name></expr></argument>)<pos:position pos:line="32" pos:column="68"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="70">"pack/tmp_idx_XXXXXX"<pos:position pos:line="32" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="93"/></expr_stmt>
			<expr_stmt><expr><name pos:line="33" pos:column="25">index_name<pos:position pos:line="33" pos:column="35"/></name> <operator pos:line="33" pos:column="36">=<pos:position pos:line="33" pos:column="37"/></operator> <call><name pos:line="33" pos:column="38">xstrdup<pos:position pos:line="33" pos:column="45"/></name><argument_list pos:line="33" pos:column="45">(<argument><expr><name pos:line="33" pos:column="46">tmp_file<pos:position pos:line="33" pos:column="54"/></name></expr></argument>)<pos:position pos:line="33" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="34" pos:column="18"/></block></then> <else pos:line="34" pos:column="19">else <block pos:line="34" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">unlink<pos:position pos:line="35" pos:column="31"/></name><argument_list pos:line="35" pos:column="31">(<argument><expr><name pos:line="35" pos:column="32">index_name<pos:position pos:line="35" pos:column="42"/></name></expr></argument>)<pos:position pos:line="35" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><name pos:line="36" pos:column="25">fd<pos:position pos:line="36" pos:column="27"/></name> <operator pos:line="36" pos:column="28">=<pos:position pos:line="36" pos:column="29"/></operator> <call><name pos:line="36" pos:column="30">open<pos:position pos:line="36" pos:column="34"/></name><argument_list pos:line="36" pos:column="34">(<argument><expr><name pos:line="36" pos:column="35">index_name<pos:position pos:line="36" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="47">O_CREAT<pos:position pos:line="36" pos:column="54"/></name><operator pos:line="36" pos:column="54">|<pos:position pos:line="36" pos:column="55"/></operator><name pos:line="36" pos:column="55">O_EXCL<pos:position pos:line="36" pos:column="61"/></name><operator pos:line="36" pos:column="61">|<pos:position pos:line="36" pos:column="62"/></operator><name pos:line="36" pos:column="62">O_WRONLY<pos:position pos:line="36" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="72">0600<pos:position pos:line="36" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="78"/></expr_stmt>
		}<pos:position pos:line="37" pos:column="18"/></block></else></if>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">fd<pos:position pos:line="38" pos:column="23"/></name> <operator pos:line="38" pos:column="24">&lt;<pos:position pos:line="38" pos:column="28"/></operator> <literal type="number" pos:line="38" pos:column="26">0<pos:position pos:line="38" pos:column="27"/></literal></expr>)<pos:position pos:line="38" pos:column="28"/></condition><then pos:line="38" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="25">die_errno<pos:position pos:line="39" pos:column="34"/></name><argument_list pos:line="39" pos:column="34">(<argument><expr><literal type="string" pos:line="39" pos:column="35">"unable to create '%s'"<pos:position pos:line="39" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="60">index_name<pos:position pos:line="39" pos:column="70"/></name></expr></argument>)<pos:position pos:line="39" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="72"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="40" pos:column="17">f<pos:position pos:line="40" pos:column="18"/></name> <operator pos:line="40" pos:column="19">=<pos:position pos:line="40" pos:column="20"/></operator> <call><name pos:line="40" pos:column="21">sha1fd<pos:position pos:line="40" pos:column="27"/></name><argument_list pos:line="40" pos:column="27">(<argument><expr><name pos:line="40" pos:column="28">fd<pos:position pos:line="40" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="32">index_name<pos:position pos:line="40" pos:column="42"/></name></expr></argument>)<pos:position pos:line="40" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="44"/></expr_stmt>
	}<pos:position pos:line="41" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="43" pos:column="9">/* if last object's offset is &gt;= 2^31 we should use index V2 */</comment>
	<expr_stmt><expr><name pos:line="44" pos:column="9">index_version<pos:position pos:line="44" pos:column="22"/></name> <operator pos:line="44" pos:column="23">=<pos:position pos:line="44" pos:column="24"/></operator> <ternary><condition><expr><call><name pos:line="44" pos:column="25">need_large_offset<pos:position pos:line="44" pos:column="42"/></name><argument_list pos:line="44" pos:column="42">(<argument><expr><name pos:line="44" pos:column="43">last_obj_offset<pos:position pos:line="44" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="60">opts<pos:position pos:line="44" pos:column="64"/></name></expr></argument>)<pos:position pos:line="44" pos:column="65"/></argument_list></call></expr> ?<pos:position pos:line="44" pos:column="67"/></condition><then pos:line="44" pos:column="67"> <expr><literal type="number" pos:line="44" pos:column="68">2<pos:position pos:line="44" pos:column="69"/></literal></expr> <pos:position pos:line="44" pos:column="70"/></then><else pos:line="44" pos:column="70">: <expr><name><name pos:line="44" pos:column="72">opts<pos:position pos:line="44" pos:column="76"/></name><operator pos:line="44" pos:column="76">-&gt;<pos:position pos:line="44" pos:column="81"/></operator><name pos:line="44" pos:column="78">version<pos:position pos:line="44" pos:column="85"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="44" pos:column="86"/></expr_stmt>

	<comment type="block" pos:line="46" pos:column="9">/* index versions 2 and above need a header */</comment>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">index_version<pos:position pos:line="47" pos:column="26"/></name> <operator pos:line="47" pos:column="27">&gt;=<pos:position pos:line="47" pos:column="32"/></operator> <literal type="number" pos:line="47" pos:column="30">2<pos:position pos:line="47" pos:column="31"/></literal></expr>)<pos:position pos:line="47" pos:column="32"/></condition><then pos:line="47" pos:column="32"> <block pos:line="47" pos:column="33">{
		<decl_stmt><decl><type><name><name pos:line="48" pos:column="17">struct<pos:position pos:line="48" pos:column="23"/></name> <name pos:line="48" pos:column="24">pack_idx_header<pos:position pos:line="48" pos:column="39"/></name></name></type> <name pos:line="48" pos:column="40">hdr<pos:position pos:line="48" pos:column="43"/></name></decl>;<pos:position pos:line="48" pos:column="44"/></decl_stmt>
		<expr_stmt><expr><name><name pos:line="49" pos:column="17">hdr<pos:position pos:line="49" pos:column="20"/></name><operator pos:line="49" pos:column="20">.<pos:position pos:line="49" pos:column="21"/></operator><name pos:line="49" pos:column="21">idx_signature<pos:position pos:line="49" pos:column="34"/></name></name> <operator pos:line="49" pos:column="35">=<pos:position pos:line="49" pos:column="36"/></operator> <call><name pos:line="49" pos:column="37">htonl<pos:position pos:line="49" pos:column="42"/></name><argument_list pos:line="49" pos:column="42">(<argument><expr><name pos:line="49" pos:column="43">PACK_IDX_SIGNATURE<pos:position pos:line="49" pos:column="61"/></name></expr></argument>)<pos:position pos:line="49" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="63"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="50" pos:column="17">hdr<pos:position pos:line="50" pos:column="20"/></name><operator pos:line="50" pos:column="20">.<pos:position pos:line="50" pos:column="21"/></operator><name pos:line="50" pos:column="21">idx_version<pos:position pos:line="50" pos:column="32"/></name></name> <operator pos:line="50" pos:column="33">=<pos:position pos:line="50" pos:column="34"/></operator> <call><name pos:line="50" pos:column="35">htonl<pos:position pos:line="50" pos:column="40"/></name><argument_list pos:line="50" pos:column="40">(<argument><expr><name pos:line="50" pos:column="41">index_version<pos:position pos:line="50" pos:column="54"/></name></expr></argument>)<pos:position pos:line="50" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">sha1write<pos:position pos:line="51" pos:column="26"/></name><argument_list pos:line="51" pos:column="26">(<argument><expr><name pos:line="51" pos:column="27">f<pos:position pos:line="51" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="30">&amp;<pos:position pos:line="51" pos:column="35"/></operator><name pos:line="51" pos:column="31">hdr<pos:position pos:line="51" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="51" pos:column="36">sizeof<argument_list pos:line="51" pos:column="42">(<argument><expr><name pos:line="51" pos:column="43">hdr<pos:position pos:line="51" pos:column="46"/></name></expr></argument>)<pos:position pos:line="51" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="51" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="52" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="54" pos:column="9">/*
	 * Write the first-level table (the list is sorted,
	 * but we use a 256-entry lookup to be able to avoid
	 * having to do eight extra binary search iterations).
	 */</comment>
	<for pos:line="59" pos:column="9">for <control pos:line="59" pos:column="13">(<init><expr><name pos:line="59" pos:column="14">i<pos:position pos:line="59" pos:column="15"/></name> <operator pos:line="59" pos:column="16">=<pos:position pos:line="59" pos:column="17"/></operator> <literal type="number" pos:line="59" pos:column="18">0<pos:position pos:line="59" pos:column="19"/></literal></expr>;<pos:position pos:line="59" pos:column="20"/></init> <condition><expr><name pos:line="59" pos:column="21">i<pos:position pos:line="59" pos:column="22"/></name> <operator pos:line="59" pos:column="23">&lt;<pos:position pos:line="59" pos:column="27"/></operator> <literal type="number" pos:line="59" pos:column="25">256<pos:position pos:line="59" pos:column="28"/></literal></expr>;<pos:position pos:line="59" pos:column="29"/></condition> <incr><expr><name pos:line="59" pos:column="30">i<pos:position pos:line="59" pos:column="31"/></name><operator pos:line="59" pos:column="31">++<pos:position pos:line="59" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="59" pos:column="34"/></control> <block pos:line="59" pos:column="35">{
		<decl_stmt><decl><type><name><name pos:line="60" pos:column="17">struct<pos:position pos:line="60" pos:column="23"/></name> <name pos:line="60" pos:column="24">pack_idx_entry<pos:position pos:line="60" pos:column="38"/></name></name> <modifier pos:line="60" pos:column="39">*<pos:position pos:line="60" pos:column="40"/></modifier><modifier pos:line="60" pos:column="40">*<pos:position pos:line="60" pos:column="41"/></modifier></type><name pos:line="60" pos:column="41">next<pos:position pos:line="60" pos:column="45"/></name> <init pos:line="60" pos:column="46">= <expr><name pos:line="60" pos:column="48">list<pos:position pos:line="60" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="60" pos:column="53"/></decl_stmt>
		<while pos:line="61" pos:column="17">while <condition pos:line="61" pos:column="23">(<expr><name pos:line="61" pos:column="24">next<pos:position pos:line="61" pos:column="28"/></name> <operator pos:line="61" pos:column="29">&lt;<pos:position pos:line="61" pos:column="33"/></operator> <name pos:line="61" pos:column="31">last<pos:position pos:line="61" pos:column="35"/></name></expr>)<pos:position pos:line="61" pos:column="36"/></condition> <block pos:line="61" pos:column="37">{
			<decl_stmt><decl><type><name><name pos:line="62" pos:column="25">struct<pos:position pos:line="62" pos:column="31"/></name> <name pos:line="62" pos:column="32">pack_idx_entry<pos:position pos:line="62" pos:column="46"/></name></name> <modifier pos:line="62" pos:column="47">*<pos:position pos:line="62" pos:column="48"/></modifier></type><name pos:line="62" pos:column="48">obj<pos:position pos:line="62" pos:column="51"/></name> <init pos:line="62" pos:column="52">= <expr><operator pos:line="62" pos:column="54">*<pos:position pos:line="62" pos:column="55"/></operator><name pos:line="62" pos:column="55">next<pos:position pos:line="62" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="62" pos:column="60"/></decl_stmt>
			<if pos:line="63" pos:column="25">if <condition pos:line="63" pos:column="28">(<expr><name><name pos:line="63" pos:column="29">obj<pos:position pos:line="63" pos:column="32"/></name><operator pos:line="63" pos:column="32">-&gt;<pos:position pos:line="63" pos:column="37"/></operator><name pos:line="63" pos:column="34">sha1<pos:position pos:line="63" pos:column="38"/></name><index pos:line="63" pos:column="38">[<expr><literal type="number" pos:line="63" pos:column="39">0<pos:position pos:line="63" pos:column="40"/></literal></expr>]<pos:position pos:line="63" pos:column="41"/></index></name> <operator pos:line="63" pos:column="42">!=<pos:position pos:line="63" pos:column="44"/></operator> <name pos:line="63" pos:column="45">i<pos:position pos:line="63" pos:column="46"/></name></expr>)<pos:position pos:line="63" pos:column="47"/></condition><then pos:line="63" pos:column="47">
				<block type="pseudo"><break pos:line="64" pos:column="33">break;<pos:position pos:line="64" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><name pos:line="65" pos:column="25">next<pos:position pos:line="65" pos:column="29"/></name><operator pos:line="65" pos:column="29">++<pos:position pos:line="65" pos:column="31"/></operator></expr>;<pos:position pos:line="65" pos:column="32"/></expr_stmt>
		}<pos:position pos:line="66" pos:column="18"/></block></while>
		<expr_stmt><expr><name><name pos:line="67" pos:column="17">array<pos:position pos:line="67" pos:column="22"/></name><index pos:line="67" pos:column="22">[<expr><name pos:line="67" pos:column="23">i<pos:position pos:line="67" pos:column="24"/></name></expr>]<pos:position pos:line="67" pos:column="25"/></index></name> <operator pos:line="67" pos:column="26">=<pos:position pos:line="67" pos:column="27"/></operator> <call><name pos:line="67" pos:column="28">htonl<pos:position pos:line="67" pos:column="33"/></name><argument_list pos:line="67" pos:column="33">(<argument><expr><name pos:line="67" pos:column="34">next<pos:position pos:line="67" pos:column="38"/></name> <operator pos:line="67" pos:column="39">-<pos:position pos:line="67" pos:column="40"/></operator> <name pos:line="67" pos:column="41">sorted_by_sha<pos:position pos:line="67" pos:column="54"/></name></expr></argument>)<pos:position pos:line="67" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><name pos:line="68" pos:column="17">list<pos:position pos:line="68" pos:column="21"/></name> <operator pos:line="68" pos:column="22">=<pos:position pos:line="68" pos:column="23"/></operator> <name pos:line="68" pos:column="24">next<pos:position pos:line="68" pos:column="28"/></name></expr>;<pos:position pos:line="68" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="69" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="70" pos:column="9">sha1write<pos:position pos:line="70" pos:column="18"/></name><argument_list pos:line="70" pos:column="18">(<argument><expr><name pos:line="70" pos:column="19">f<pos:position pos:line="70" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="22">array<pos:position pos:line="70" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="70" pos:column="29">256<pos:position pos:line="70" pos:column="32"/></literal> <operator pos:line="70" pos:column="33">*<pos:position pos:line="70" pos:column="34"/></operator> <literal type="number" pos:line="70" pos:column="35">4<pos:position pos:line="70" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="38"/></expr_stmt>

	<comment type="block" pos:line="72" pos:column="9">/*
	 * Write the actual SHA1 entries..
	 */</comment>
	<expr_stmt><expr><name pos:line="75" pos:column="9">list<pos:position pos:line="75" pos:column="13"/></name> <operator pos:line="75" pos:column="14">=<pos:position pos:line="75" pos:column="15"/></operator> <name pos:line="75" pos:column="16">sorted_by_sha<pos:position pos:line="75" pos:column="29"/></name></expr>;<pos:position pos:line="75" pos:column="30"/></expr_stmt>
	<for pos:line="76" pos:column="9">for <control pos:line="76" pos:column="13">(<init><expr><name pos:line="76" pos:column="14">i<pos:position pos:line="76" pos:column="15"/></name> <operator pos:line="76" pos:column="16">=<pos:position pos:line="76" pos:column="17"/></operator> <literal type="number" pos:line="76" pos:column="18">0<pos:position pos:line="76" pos:column="19"/></literal></expr>;<pos:position pos:line="76" pos:column="20"/></init> <condition><expr><name pos:line="76" pos:column="21">i<pos:position pos:line="76" pos:column="22"/></name> <operator pos:line="76" pos:column="23">&lt;<pos:position pos:line="76" pos:column="27"/></operator> <name pos:line="76" pos:column="25">nr_objects<pos:position pos:line="76" pos:column="35"/></name></expr>;<pos:position pos:line="76" pos:column="36"/></condition> <incr><expr><name pos:line="76" pos:column="37">i<pos:position pos:line="76" pos:column="38"/></name><operator pos:line="76" pos:column="38">++<pos:position pos:line="76" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="76" pos:column="41"/></control> <block pos:line="76" pos:column="42">{
		<decl_stmt><decl><type><name><name pos:line="77" pos:column="17">struct<pos:position pos:line="77" pos:column="23"/></name> <name pos:line="77" pos:column="24">pack_idx_entry<pos:position pos:line="77" pos:column="38"/></name></name> <modifier pos:line="77" pos:column="39">*<pos:position pos:line="77" pos:column="40"/></modifier></type><name pos:line="77" pos:column="40">obj<pos:position pos:line="77" pos:column="43"/></name> <init pos:line="77" pos:column="44">= <expr><operator pos:line="77" pos:column="46">*<pos:position pos:line="77" pos:column="47"/></operator><name pos:line="77" pos:column="47">list<pos:position pos:line="77" pos:column="51"/></name><operator pos:line="77" pos:column="51">++<pos:position pos:line="77" pos:column="53"/></operator></expr></init></decl>;<pos:position pos:line="77" pos:column="54"/></decl_stmt>
		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><name pos:line="78" pos:column="21">index_version<pos:position pos:line="78" pos:column="34"/></name> <operator pos:line="78" pos:column="35">&lt;<pos:position pos:line="78" pos:column="39"/></operator> <literal type="number" pos:line="78" pos:column="37">2<pos:position pos:line="78" pos:column="38"/></literal></expr>)<pos:position pos:line="78" pos:column="39"/></condition><then pos:line="78" pos:column="39"> <block pos:line="78" pos:column="40">{
			<decl_stmt><decl><type><name pos:line="79" pos:column="25">uint32_t<pos:position pos:line="79" pos:column="33"/></name></type> <name pos:line="79" pos:column="34">offset<pos:position pos:line="79" pos:column="40"/></name> <init pos:line="79" pos:column="41">= <expr><call><name pos:line="79" pos:column="43">htonl<pos:position pos:line="79" pos:column="48"/></name><argument_list pos:line="79" pos:column="48">(<argument><expr><name><name pos:line="79" pos:column="49">obj<pos:position pos:line="79" pos:column="52"/></name><operator pos:line="79" pos:column="52">-&gt;<pos:position pos:line="79" pos:column="57"/></operator><name pos:line="79" pos:column="54">offset<pos:position pos:line="79" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="79" pos:column="62"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="80" pos:column="25">sha1write<pos:position pos:line="80" pos:column="34"/></name><argument_list pos:line="80" pos:column="34">(<argument><expr><name pos:line="80" pos:column="35">f<pos:position pos:line="80" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="80" pos:column="38">&amp;<pos:position pos:line="80" pos:column="43"/></operator><name pos:line="80" pos:column="39">offset<pos:position pos:line="80" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="80" pos:column="47">4<pos:position pos:line="80" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="50"/></expr_stmt>
		}<pos:position pos:line="81" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="82" pos:column="17">sha1write<pos:position pos:line="82" pos:column="26"/></name><argument_list pos:line="82" pos:column="26">(<argument><expr><name pos:line="82" pos:column="27">f<pos:position pos:line="82" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="30">obj<pos:position pos:line="82" pos:column="33"/></name><operator pos:line="82" pos:column="33">-&gt;<pos:position pos:line="82" pos:column="38"/></operator><name pos:line="82" pos:column="35">sha1<pos:position pos:line="82" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="82" pos:column="41">20<pos:position pos:line="82" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="45"/></expr_stmt>
		<if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><operator pos:line="83" pos:column="21">(<pos:position pos:line="83" pos:column="22"/></operator><name><name pos:line="83" pos:column="22">opts<pos:position pos:line="83" pos:column="26"/></name><operator pos:line="83" pos:column="26">-&gt;<pos:position pos:line="83" pos:column="31"/></operator><name pos:line="83" pos:column="28">flags<pos:position pos:line="83" pos:column="33"/></name></name> <operator pos:line="83" pos:column="34">&amp;<pos:position pos:line="83" pos:column="39"/></operator> <name pos:line="83" pos:column="36">WRITE_IDX_STRICT<pos:position pos:line="83" pos:column="52"/></name><operator pos:line="83" pos:column="52">)<pos:position pos:line="83" pos:column="53"/></operator> <operator pos:line="83" pos:column="54">&amp;&amp;<pos:position pos:line="83" pos:column="64"/></operator>
		    <operator pos:line="84" pos:column="21">(<pos:position pos:line="84" pos:column="22"/></operator><name pos:line="84" pos:column="22">i<pos:position pos:line="84" pos:column="23"/></name> <operator pos:line="84" pos:column="24">&amp;&amp;<pos:position pos:line="84" pos:column="34"/></operator> <operator pos:line="84" pos:column="27">!<pos:position pos:line="84" pos:column="28"/></operator><call><name pos:line="84" pos:column="28">hashcmp<pos:position pos:line="84" pos:column="35"/></name><argument_list pos:line="84" pos:column="35">(<argument><expr><name><name pos:line="84" pos:column="36">list<pos:position pos:line="84" pos:column="40"/></name><index pos:line="84" pos:column="40">[<expr><operator pos:line="84" pos:column="41">-<pos:position pos:line="84" pos:column="42"/></operator><literal type="number" pos:line="84" pos:column="42">2<pos:position pos:line="84" pos:column="43"/></literal></expr>]<pos:position pos:line="84" pos:column="44"/></index></name><operator pos:line="84" pos:column="44">-&gt;<pos:position pos:line="84" pos:column="49"/></operator><name pos:line="84" pos:column="46">sha1<pos:position pos:line="84" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="52">obj<pos:position pos:line="84" pos:column="55"/></name><operator pos:line="84" pos:column="55">-&gt;<pos:position pos:line="84" pos:column="60"/></operator><name pos:line="84" pos:column="57">sha1<pos:position pos:line="84" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="62"/></argument_list></call><operator pos:line="84" pos:column="62">)<pos:position pos:line="84" pos:column="63"/></operator></expr>)<pos:position pos:line="84" pos:column="64"/></condition><then pos:line="84" pos:column="64">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="85" pos:column="25">die<pos:position pos:line="85" pos:column="28"/></name><argument_list pos:line="85" pos:column="28">(<argument><expr><literal type="string" pos:line="85" pos:column="29">"The same object %s appears twice in the pack"<pos:position pos:line="85" pos:column="75"/></literal></expr></argument>,
			    <argument><expr><call><name pos:line="86" pos:column="29">sha1_to_hex<pos:position pos:line="86" pos:column="40"/></name><argument_list pos:line="86" pos:column="40">(<argument><expr><name><name pos:line="86" pos:column="41">obj<pos:position pos:line="86" pos:column="44"/></name><operator pos:line="86" pos:column="44">-&gt;<pos:position pos:line="86" pos:column="49"/></operator><name pos:line="86" pos:column="46">sha1<pos:position pos:line="86" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="86" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="86" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="53"/></expr_stmt></block></then></if>
	}<pos:position pos:line="87" pos:column="10"/></block></for>

	<if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><name pos:line="89" pos:column="13">index_version<pos:position pos:line="89" pos:column="26"/></name> <operator pos:line="89" pos:column="27">&gt;=<pos:position pos:line="89" pos:column="32"/></operator> <literal type="number" pos:line="89" pos:column="30">2<pos:position pos:line="89" pos:column="31"/></literal></expr>)<pos:position pos:line="89" pos:column="32"/></condition><then pos:line="89" pos:column="32"> <block pos:line="89" pos:column="33">{
		<decl_stmt><decl><type><name pos:line="90" pos:column="17">unsigned<pos:position pos:line="90" pos:column="25"/></name> <name pos:line="90" pos:column="26">int<pos:position pos:line="90" pos:column="29"/></name></type> <name pos:line="90" pos:column="30">nr_large_offset<pos:position pos:line="90" pos:column="45"/></name> <init pos:line="90" pos:column="46">= <expr><literal type="number" pos:line="90" pos:column="48">0<pos:position pos:line="90" pos:column="49"/></literal></expr></init></decl>;<pos:position pos:line="90" pos:column="50"/></decl_stmt>

		<comment type="block" pos:line="92" pos:column="17">/* write the crc32 table */</comment>
		<expr_stmt><expr><name pos:line="93" pos:column="17">list<pos:position pos:line="93" pos:column="21"/></name> <operator pos:line="93" pos:column="22">=<pos:position pos:line="93" pos:column="23"/></operator> <name pos:line="93" pos:column="24">sorted_by_sha<pos:position pos:line="93" pos:column="37"/></name></expr>;<pos:position pos:line="93" pos:column="38"/></expr_stmt>
		<for pos:line="94" pos:column="17">for <control pos:line="94" pos:column="21">(<init><expr><name pos:line="94" pos:column="22">i<pos:position pos:line="94" pos:column="23"/></name> <operator pos:line="94" pos:column="24">=<pos:position pos:line="94" pos:column="25"/></operator> <literal type="number" pos:line="94" pos:column="26">0<pos:position pos:line="94" pos:column="27"/></literal></expr>;<pos:position pos:line="94" pos:column="28"/></init> <condition><expr><name pos:line="94" pos:column="29">i<pos:position pos:line="94" pos:column="30"/></name> <operator pos:line="94" pos:column="31">&lt;<pos:position pos:line="94" pos:column="35"/></operator> <name pos:line="94" pos:column="33">nr_objects<pos:position pos:line="94" pos:column="43"/></name></expr>;<pos:position pos:line="94" pos:column="44"/></condition> <incr><expr><name pos:line="94" pos:column="45">i<pos:position pos:line="94" pos:column="46"/></name><operator pos:line="94" pos:column="46">++<pos:position pos:line="94" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="94" pos:column="49"/></control> <block pos:line="94" pos:column="50">{
			<decl_stmt><decl><type><name><name pos:line="95" pos:column="25">struct<pos:position pos:line="95" pos:column="31"/></name> <name pos:line="95" pos:column="32">pack_idx_entry<pos:position pos:line="95" pos:column="46"/></name></name> <modifier pos:line="95" pos:column="47">*<pos:position pos:line="95" pos:column="48"/></modifier></type><name pos:line="95" pos:column="48">obj<pos:position pos:line="95" pos:column="51"/></name> <init pos:line="95" pos:column="52">= <expr><operator pos:line="95" pos:column="54">*<pos:position pos:line="95" pos:column="55"/></operator><name pos:line="95" pos:column="55">list<pos:position pos:line="95" pos:column="59"/></name><operator pos:line="95" pos:column="59">++<pos:position pos:line="95" pos:column="61"/></operator></expr></init></decl>;<pos:position pos:line="95" pos:column="62"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="96" pos:column="25">uint32_t<pos:position pos:line="96" pos:column="33"/></name></type> <name pos:line="96" pos:column="34">crc32_val<pos:position pos:line="96" pos:column="43"/></name> <init pos:line="96" pos:column="44">= <expr><call><name pos:line="96" pos:column="46">htonl<pos:position pos:line="96" pos:column="51"/></name><argument_list pos:line="96" pos:column="51">(<argument><expr><name><name pos:line="96" pos:column="52">obj<pos:position pos:line="96" pos:column="55"/></name><operator pos:line="96" pos:column="55">-&gt;<pos:position pos:line="96" pos:column="60"/></operator><name pos:line="96" pos:column="57">crc32<pos:position pos:line="96" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="96" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="96" pos:column="64"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="97" pos:column="25">sha1write<pos:position pos:line="97" pos:column="34"/></name><argument_list pos:line="97" pos:column="34">(<argument><expr><name pos:line="97" pos:column="35">f<pos:position pos:line="97" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="38">&amp;<pos:position pos:line="97" pos:column="43"/></operator><name pos:line="97" pos:column="39">crc32_val<pos:position pos:line="97" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="97" pos:column="50">4<pos:position pos:line="97" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="53"/></expr_stmt>
		}<pos:position pos:line="98" pos:column="18"/></block></for>

		<comment type="block" pos:line="100" pos:column="17">/* write the 32-bit offset table */</comment>
		<expr_stmt><expr><name pos:line="101" pos:column="17">list<pos:position pos:line="101" pos:column="21"/></name> <operator pos:line="101" pos:column="22">=<pos:position pos:line="101" pos:column="23"/></operator> <name pos:line="101" pos:column="24">sorted_by_sha<pos:position pos:line="101" pos:column="37"/></name></expr>;<pos:position pos:line="101" pos:column="38"/></expr_stmt>
		<for pos:line="102" pos:column="17">for <control pos:line="102" pos:column="21">(<init><expr><name pos:line="102" pos:column="22">i<pos:position pos:line="102" pos:column="23"/></name> <operator pos:line="102" pos:column="24">=<pos:position pos:line="102" pos:column="25"/></operator> <literal type="number" pos:line="102" pos:column="26">0<pos:position pos:line="102" pos:column="27"/></literal></expr>;<pos:position pos:line="102" pos:column="28"/></init> <condition><expr><name pos:line="102" pos:column="29">i<pos:position pos:line="102" pos:column="30"/></name> <operator pos:line="102" pos:column="31">&lt;<pos:position pos:line="102" pos:column="35"/></operator> <name pos:line="102" pos:column="33">nr_objects<pos:position pos:line="102" pos:column="43"/></name></expr>;<pos:position pos:line="102" pos:column="44"/></condition> <incr><expr><name pos:line="102" pos:column="45">i<pos:position pos:line="102" pos:column="46"/></name><operator pos:line="102" pos:column="46">++<pos:position pos:line="102" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="102" pos:column="49"/></control> <block pos:line="102" pos:column="50">{
			<decl_stmt><decl><type><name><name pos:line="103" pos:column="25">struct<pos:position pos:line="103" pos:column="31"/></name> <name pos:line="103" pos:column="32">pack_idx_entry<pos:position pos:line="103" pos:column="46"/></name></name> <modifier pos:line="103" pos:column="47">*<pos:position pos:line="103" pos:column="48"/></modifier></type><name pos:line="103" pos:column="48">obj<pos:position pos:line="103" pos:column="51"/></name> <init pos:line="103" pos:column="52">= <expr><operator pos:line="103" pos:column="54">*<pos:position pos:line="103" pos:column="55"/></operator><name pos:line="103" pos:column="55">list<pos:position pos:line="103" pos:column="59"/></name><operator pos:line="103" pos:column="59">++<pos:position pos:line="103" pos:column="61"/></operator></expr></init></decl>;<pos:position pos:line="103" pos:column="62"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="104" pos:column="25">uint32_t<pos:position pos:line="104" pos:column="33"/></name></type> <name pos:line="104" pos:column="34">offset<pos:position pos:line="104" pos:column="40"/></name></decl>;<pos:position pos:line="104" pos:column="41"/></decl_stmt>

			<expr_stmt><expr><name pos:line="106" pos:column="25">offset<pos:position pos:line="106" pos:column="31"/></name> <operator pos:line="106" pos:column="32">=<pos:position pos:line="106" pos:column="33"/></operator> <operator pos:line="106" pos:column="34">(<pos:position pos:line="106" pos:column="35"/></operator><ternary><condition><expr><call><name pos:line="106" pos:column="35">need_large_offset<pos:position pos:line="106" pos:column="52"/></name><argument_list pos:line="106" pos:column="52">(<argument><expr><name><name pos:line="106" pos:column="53">obj<pos:position pos:line="106" pos:column="56"/></name><operator pos:line="106" pos:column="56">-&gt;<pos:position pos:line="106" pos:column="61"/></operator><name pos:line="106" pos:column="58">offset<pos:position pos:line="106" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="66">opts<pos:position pos:line="106" pos:column="70"/></name></expr></argument>)<pos:position pos:line="106" pos:column="71"/></argument_list></call></expr>
				  ?<pos:position pos:line="107" pos:column="36"/></condition><then pos:line="107" pos:column="36"> <expr><operator pos:line="107" pos:column="37">(<pos:position pos:line="107" pos:column="38"/></operator><literal type="number" pos:line="107" pos:column="38">0x80000000<pos:position pos:line="107" pos:column="48"/></literal> <operator pos:line="107" pos:column="49">|<pos:position pos:line="107" pos:column="50"/></operator> <name pos:line="107" pos:column="51">nr_large_offset<pos:position pos:line="107" pos:column="66"/></name><operator pos:line="107" pos:column="66">++<pos:position pos:line="107" pos:column="68"/></operator><operator pos:line="107" pos:column="68">)<pos:position pos:line="107" pos:column="69"/></operator></expr>
				  <pos:position pos:line="108" pos:column="7"/></then><else pos:line="108" pos:column="35">: <expr><name><name pos:line="108" pos:column="37">obj<pos:position pos:line="108" pos:column="40"/></name><operator pos:line="108" pos:column="40">-&gt;<pos:position pos:line="108" pos:column="45"/></operator><name pos:line="108" pos:column="42">offset<pos:position pos:line="108" pos:column="48"/></name></name></expr></else></ternary><operator pos:line="108" pos:column="48">)<pos:position pos:line="108" pos:column="49"/></operator></expr>;<pos:position pos:line="108" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><name pos:line="109" pos:column="25">offset<pos:position pos:line="109" pos:column="31"/></name> <operator pos:line="109" pos:column="32">=<pos:position pos:line="109" pos:column="33"/></operator> <call><name pos:line="109" pos:column="34">htonl<pos:position pos:line="109" pos:column="39"/></name><argument_list pos:line="109" pos:column="39">(<argument><expr><name pos:line="109" pos:column="40">offset<pos:position pos:line="109" pos:column="46"/></name></expr></argument>)<pos:position pos:line="109" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="110" pos:column="25">sha1write<pos:position pos:line="110" pos:column="34"/></name><argument_list pos:line="110" pos:column="34">(<argument><expr><name pos:line="110" pos:column="35">f<pos:position pos:line="110" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="110" pos:column="38">&amp;<pos:position pos:line="110" pos:column="43"/></operator><name pos:line="110" pos:column="39">offset<pos:position pos:line="110" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="110" pos:column="47">4<pos:position pos:line="110" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="50"/></expr_stmt>
		}<pos:position pos:line="111" pos:column="18"/></block></for>

		<comment type="block" pos:line="113" pos:column="17">/* write the large offset table */</comment>
		<expr_stmt><expr><name pos:line="114" pos:column="17">list<pos:position pos:line="114" pos:column="21"/></name> <operator pos:line="114" pos:column="22">=<pos:position pos:line="114" pos:column="23"/></operator> <name pos:line="114" pos:column="24">sorted_by_sha<pos:position pos:line="114" pos:column="37"/></name></expr>;<pos:position pos:line="114" pos:column="38"/></expr_stmt>
		<while pos:line="115" pos:column="17">while <condition pos:line="115" pos:column="23">(<expr><name pos:line="115" pos:column="24">nr_large_offset<pos:position pos:line="115" pos:column="39"/></name></expr>)<pos:position pos:line="115" pos:column="40"/></condition> <block pos:line="115" pos:column="41">{
			<decl_stmt><decl><type><name><name pos:line="116" pos:column="25">struct<pos:position pos:line="116" pos:column="31"/></name> <name pos:line="116" pos:column="32">pack_idx_entry<pos:position pos:line="116" pos:column="46"/></name></name> <modifier pos:line="116" pos:column="47">*<pos:position pos:line="116" pos:column="48"/></modifier></type><name pos:line="116" pos:column="48">obj<pos:position pos:line="116" pos:column="51"/></name> <init pos:line="116" pos:column="52">= <expr><operator pos:line="116" pos:column="54">*<pos:position pos:line="116" pos:column="55"/></operator><name pos:line="116" pos:column="55">list<pos:position pos:line="116" pos:column="59"/></name><operator pos:line="116" pos:column="59">++<pos:position pos:line="116" pos:column="61"/></operator></expr></init></decl>;<pos:position pos:line="116" pos:column="62"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="117" pos:column="25">uint64_t<pos:position pos:line="117" pos:column="33"/></name></type> <name pos:line="117" pos:column="34">offset<pos:position pos:line="117" pos:column="40"/></name> <init pos:line="117" pos:column="41">= <expr><name><name pos:line="117" pos:column="43">obj<pos:position pos:line="117" pos:column="46"/></name><operator pos:line="117" pos:column="46">-&gt;<pos:position pos:line="117" pos:column="51"/></operator><name pos:line="117" pos:column="48">offset<pos:position pos:line="117" pos:column="54"/></name></name></expr></init></decl>;<pos:position pos:line="117" pos:column="55"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="118" pos:column="25">uint32_t<pos:position pos:line="118" pos:column="33"/></name></type> <name><name pos:line="118" pos:column="34">split<pos:position pos:line="118" pos:column="39"/></name><index pos:line="118" pos:column="39">[<expr><literal type="number" pos:line="118" pos:column="40">2<pos:position pos:line="118" pos:column="41"/></literal></expr>]<pos:position pos:line="118" pos:column="42"/></index></name></decl>;<pos:position pos:line="118" pos:column="43"/></decl_stmt>

			<if pos:line="120" pos:column="25">if <condition pos:line="120" pos:column="28">(<expr><operator pos:line="120" pos:column="29">!<pos:position pos:line="120" pos:column="30"/></operator><call><name pos:line="120" pos:column="30">need_large_offset<pos:position pos:line="120" pos:column="47"/></name><argument_list pos:line="120" pos:column="47">(<argument><expr><name pos:line="120" pos:column="48">offset<pos:position pos:line="120" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="56">opts<pos:position pos:line="120" pos:column="60"/></name></expr></argument>)<pos:position pos:line="120" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="120" pos:column="62"/></condition><then pos:line="120" pos:column="62">
				<block type="pseudo"><continue pos:line="121" pos:column="33">continue;<pos:position pos:line="121" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name><name pos:line="122" pos:column="25">split<pos:position pos:line="122" pos:column="30"/></name><index pos:line="122" pos:column="30">[<expr><literal type="number" pos:line="122" pos:column="31">0<pos:position pos:line="122" pos:column="32"/></literal></expr>]<pos:position pos:line="122" pos:column="33"/></index></name> <operator pos:line="122" pos:column="34">=<pos:position pos:line="122" pos:column="35"/></operator> <call><name pos:line="122" pos:column="36">htonl<pos:position pos:line="122" pos:column="41"/></name><argument_list pos:line="122" pos:column="41">(<argument><expr><name pos:line="122" pos:column="42">offset<pos:position pos:line="122" pos:column="48"/></name> <operator pos:line="122" pos:column="49">&gt;&gt;<pos:position pos:line="122" pos:column="54"/></operator> <literal type="number" pos:line="122" pos:column="52">32<pos:position pos:line="122" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="123" pos:column="25">split<pos:position pos:line="123" pos:column="30"/></name><index pos:line="123" pos:column="30">[<expr><literal type="number" pos:line="123" pos:column="31">1<pos:position pos:line="123" pos:column="32"/></literal></expr>]<pos:position pos:line="123" pos:column="33"/></index></name> <operator pos:line="123" pos:column="34">=<pos:position pos:line="123" pos:column="35"/></operator> <call><name pos:line="123" pos:column="36">htonl<pos:position pos:line="123" pos:column="41"/></name><argument_list pos:line="123" pos:column="41">(<argument><expr><name pos:line="123" pos:column="42">offset<pos:position pos:line="123" pos:column="48"/></name> <operator pos:line="123" pos:column="49">&amp;<pos:position pos:line="123" pos:column="54"/></operator> <literal type="number" pos:line="123" pos:column="51">0xffffffff<pos:position pos:line="123" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="63"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="124" pos:column="25">sha1write<pos:position pos:line="124" pos:column="34"/></name><argument_list pos:line="124" pos:column="34">(<argument><expr><name pos:line="124" pos:column="35">f<pos:position pos:line="124" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="38">split<pos:position pos:line="124" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="124" pos:column="45">8<pos:position pos:line="124" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="48"/></expr_stmt>
			<expr_stmt><expr><name pos:line="125" pos:column="25">nr_large_offset<pos:position pos:line="125" pos:column="40"/></name><operator pos:line="125" pos:column="40">--<pos:position pos:line="125" pos:column="42"/></operator></expr>;<pos:position pos:line="125" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="126" pos:column="18"/></block></while>
	}<pos:position pos:line="127" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="129" pos:column="9">sha1write<pos:position pos:line="129" pos:column="18"/></name><argument_list pos:line="129" pos:column="18">(<argument><expr><name pos:line="129" pos:column="19">f<pos:position pos:line="129" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="22">sha1<pos:position pos:line="129" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="129" pos:column="28">20<pos:position pos:line="129" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="129" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="130" pos:column="9">sha1close<pos:position pos:line="130" pos:column="18"/></name><argument_list pos:line="130" pos:column="18">(<argument><expr><name pos:line="130" pos:column="19">f<pos:position pos:line="130" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="22">NULL<pos:position pos:line="130" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="130" pos:column="28">(<pos:position pos:line="130" pos:column="29"/></operator><ternary><condition><expr><operator pos:line="130" pos:column="29">(<pos:position pos:line="130" pos:column="30"/></operator><name><name pos:line="130" pos:column="30">opts<pos:position pos:line="130" pos:column="34"/></name><operator pos:line="130" pos:column="34">-&gt;<pos:position pos:line="130" pos:column="39"/></operator><name pos:line="130" pos:column="36">flags<pos:position pos:line="130" pos:column="41"/></name></name> <operator pos:line="130" pos:column="42">&amp;<pos:position pos:line="130" pos:column="47"/></operator> <name pos:line="130" pos:column="44">WRITE_IDX_VERIFY<pos:position pos:line="130" pos:column="60"/></name><operator pos:line="130" pos:column="60">)<pos:position pos:line="130" pos:column="61"/></operator></expr>
			    ?<pos:position pos:line="131" pos:column="30"/></condition><then pos:line="131" pos:column="30"> <expr><name pos:line="131" pos:column="31">CSUM_CLOSE<pos:position pos:line="131" pos:column="41"/></name></expr> <pos:position pos:line="131" pos:column="42"/></then><else pos:line="131" pos:column="42">: <expr><name pos:line="131" pos:column="44">CSUM_FSYNC<pos:position pos:line="131" pos:column="54"/></name></expr></else></ternary><operator pos:line="131" pos:column="54">)<pos:position pos:line="131" pos:column="55"/></operator></expr></argument>)<pos:position pos:line="131" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="57"/></expr_stmt>
	<return pos:line="132" pos:column="9">return <expr><name pos:line="132" pos:column="16">index_name<pos:position pos:line="132" pos:column="26"/></name></expr>;<pos:position pos:line="132" pos:column="27"/></return>
}<pos:position pos:line="133" pos:column="2"/></block></function></unit>
