<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5693_git-2.9.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">find_deltas<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">object_entry<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier><modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">list<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">unsigned<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">list_size<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="2" pos:column="25">int<pos:position pos:line="2" pos:column="28"/></name></type> <name pos:line="2" pos:column="29">window<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">int<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">depth<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">unsigned<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">processed<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">uint32_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">i<pos:position pos:line="4" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="21">idx<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><literal type="number" pos:line="4" pos:column="27">0<pos:position pos:line="4" pos:column="28"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="30">count<pos:position pos:line="4" pos:column="35"/></name> <init pos:line="4" pos:column="36">= <expr><literal type="number" pos:line="4" pos:column="38">0<pos:position pos:line="4" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">unpacked<pos:position pos:line="5" pos:column="24"/></name></name> <modifier pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></modifier></type><name pos:line="5" pos:column="26">array<pos:position pos:line="5" pos:column="31"/></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">long<pos:position pos:line="6" pos:column="22"/></name></type> <name pos:line="6" pos:column="23">mem_usage<pos:position pos:line="6" pos:column="32"/></name> <init pos:line="6" pos:column="33">= <expr><literal type="number" pos:line="6" pos:column="35">0<pos:position pos:line="6" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>

	<expr_stmt><expr><name pos:line="8" pos:column="9">array<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">=<pos:position pos:line="8" pos:column="16"/></operator> <call><name pos:line="8" pos:column="17">xcalloc<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">window<pos:position pos:line="8" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="33">sizeof<argument_list pos:line="8" pos:column="39">(<argument><expr pos:line="8" pos:column="40">struct <name pos:line="8" pos:column="47">unpacked<pos:position pos:line="8" pos:column="55"/></name></expr></argument>)<pos:position pos:line="8" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="58"/></expr_stmt>

	<for pos:line="10" pos:column="9">for <control pos:line="10" pos:column="13">(<init pos:line="10" pos:column="14">;<pos:position pos:line="10" pos:column="15"/></init><condition pos:line="10" pos:column="15">;<pos:position pos:line="10" pos:column="16"/></condition><incr/>)<pos:position pos:line="10" pos:column="17"/></control> <block pos:line="10" pos:column="18">{
		<decl_stmt><decl><type><name><name pos:line="11" pos:column="17">struct<pos:position pos:line="11" pos:column="23"/></name> <name pos:line="11" pos:column="24">object_entry<pos:position pos:line="11" pos:column="36"/></name></name> <modifier pos:line="11" pos:column="37">*<pos:position pos:line="11" pos:column="38"/></modifier></type><name pos:line="11" pos:column="38">entry<pos:position pos:line="11" pos:column="43"/></name></decl>;<pos:position pos:line="11" pos:column="44"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="12" pos:column="17">struct<pos:position pos:line="12" pos:column="23"/></name> <name pos:line="12" pos:column="24">unpacked<pos:position pos:line="12" pos:column="32"/></name></name> <modifier pos:line="12" pos:column="33">*<pos:position pos:line="12" pos:column="34"/></modifier></type><name pos:line="12" pos:column="34">n<pos:position pos:line="12" pos:column="35"/></name> <init pos:line="12" pos:column="36">= <expr><name pos:line="12" pos:column="38">array<pos:position pos:line="12" pos:column="43"/></name> <operator pos:line="12" pos:column="44">+<pos:position pos:line="12" pos:column="45"/></operator> <name pos:line="12" pos:column="46">idx<pos:position pos:line="12" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="50"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">int<pos:position pos:line="13" pos:column="20"/></name></type> <name pos:line="13" pos:column="21">j<pos:position pos:line="13" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="13" pos:column="24">max_depth<pos:position pos:line="13" pos:column="33"/></name></decl>, <decl><type ref="prev"/><name pos:line="13" pos:column="35">best_base<pos:position pos:line="13" pos:column="44"/></name> <init pos:line="13" pos:column="45">= <expr><operator pos:line="13" pos:column="47">-<pos:position pos:line="13" pos:column="48"/></operator><literal type="number" pos:line="13" pos:column="48">1<pos:position pos:line="13" pos:column="49"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="50"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="15" pos:column="17">progress_lock<pos:position pos:line="15" pos:column="30"/></name><argument_list pos:line="15" pos:column="30">()<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><operator pos:line="16" pos:column="21">!<pos:position pos:line="16" pos:column="22"/></operator><operator pos:line="16" pos:column="22">*<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">list_size<pos:position pos:line="16" pos:column="32"/></name></expr>)<pos:position pos:line="16" pos:column="33"/></condition><then pos:line="16" pos:column="33"> <block pos:line="16" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="17" pos:column="25">progress_unlock<pos:position pos:line="17" pos:column="40"/></name><argument_list pos:line="17" pos:column="40">()<pos:position pos:line="17" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="43"/></expr_stmt>
			<break pos:line="18" pos:column="25">break;<pos:position pos:line="18" pos:column="31"/></break>
		}<pos:position pos:line="19" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="20" pos:column="17">entry<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">=<pos:position pos:line="20" pos:column="24"/></operator> <operator pos:line="20" pos:column="25">*<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="26">list<pos:position pos:line="20" pos:column="30"/></name><operator pos:line="20" pos:column="30">++<pos:position pos:line="20" pos:column="32"/></operator></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="21" pos:column="17">(<pos:position pos:line="21" pos:column="18"/></operator><operator pos:line="21" pos:column="18">*<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="19">list_size<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">)<pos:position pos:line="21" pos:column="29"/></operator><operator pos:line="21" pos:column="29">--<pos:position pos:line="21" pos:column="31"/></operator></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><name><name pos:line="22" pos:column="22">entry<pos:position pos:line="22" pos:column="27"/></name><operator pos:line="22" pos:column="27">-&gt;<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="29">preferred_base<pos:position pos:line="22" pos:column="43"/></name></name></expr>)<pos:position pos:line="22" pos:column="44"/></condition><then pos:line="22" pos:column="44"> <block pos:line="22" pos:column="45">{
			<expr_stmt><expr><operator pos:line="23" pos:column="25">(<pos:position pos:line="23" pos:column="26"/></operator><operator pos:line="23" pos:column="26">*<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="27">processed<pos:position pos:line="23" pos:column="36"/></name><operator pos:line="23" pos:column="36">)<pos:position pos:line="23" pos:column="37"/></operator><operator pos:line="23" pos:column="37">++<pos:position pos:line="23" pos:column="39"/></operator></expr>;<pos:position pos:line="23" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="24" pos:column="25">display_progress<pos:position pos:line="24" pos:column="41"/></name><argument_list pos:line="24" pos:column="41">(<argument><expr><name pos:line="24" pos:column="42">progress_state<pos:position pos:line="24" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="58">*<pos:position pos:line="24" pos:column="59"/></operator><name pos:line="24" pos:column="59">processed<pos:position pos:line="24" pos:column="68"/></name></expr></argument>)<pos:position pos:line="24" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="70"/></expr_stmt>
		}<pos:position pos:line="25" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">progress_unlock<pos:position pos:line="26" pos:column="32"/></name><argument_list pos:line="26" pos:column="32">()<pos:position pos:line="26" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="35"/></expr_stmt>

		<expr_stmt><expr><name pos:line="28" pos:column="17">mem_usage<pos:position pos:line="28" pos:column="26"/></name> <operator pos:line="28" pos:column="27">-=<pos:position pos:line="28" pos:column="29"/></operator> <call><name pos:line="28" pos:column="30">free_unpacked<pos:position pos:line="28" pos:column="43"/></name><argument_list pos:line="28" pos:column="43">(<argument><expr><name pos:line="28" pos:column="44">n<pos:position pos:line="28" pos:column="45"/></name></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="29" pos:column="17">n<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">-&gt;<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="20">entry<pos:position pos:line="29" pos:column="25"/></name></name> <operator pos:line="29" pos:column="26">=<pos:position pos:line="29" pos:column="27"/></operator> <name pos:line="29" pos:column="28">entry<pos:position pos:line="29" pos:column="33"/></name></expr>;<pos:position pos:line="29" pos:column="34"/></expr_stmt>

		<while pos:line="31" pos:column="17">while <condition pos:line="31" pos:column="23">(<expr><name pos:line="31" pos:column="24">window_memory_limit<pos:position pos:line="31" pos:column="43"/></name> <operator pos:line="31" pos:column="44">&amp;&amp;<pos:position pos:line="31" pos:column="54"/></operator>
		       <name pos:line="32" pos:column="24">mem_usage<pos:position pos:line="32" pos:column="33"/></name> <operator pos:line="32" pos:column="34">&gt;<pos:position pos:line="32" pos:column="38"/></operator> <name pos:line="32" pos:column="36">window_memory_limit<pos:position pos:line="32" pos:column="55"/></name> <operator pos:line="32" pos:column="56">&amp;&amp;<pos:position pos:line="32" pos:column="66"/></operator>
		       <name pos:line="33" pos:column="24">count<pos:position pos:line="33" pos:column="29"/></name> <operator pos:line="33" pos:column="30">&gt;<pos:position pos:line="33" pos:column="34"/></operator> <literal type="number" pos:line="33" pos:column="32">1<pos:position pos:line="33" pos:column="33"/></literal></expr>)<pos:position pos:line="33" pos:column="34"/></condition> <block pos:line="33" pos:column="35">{
			<decl_stmt><decl><type><name pos:line="34" pos:column="25">uint32_t<pos:position pos:line="34" pos:column="33"/></name></type> <name pos:line="34" pos:column="34">tail<pos:position pos:line="34" pos:column="38"/></name> <init pos:line="34" pos:column="39">= <expr><operator pos:line="34" pos:column="41">(<pos:position pos:line="34" pos:column="42"/></operator><name pos:line="34" pos:column="42">idx<pos:position pos:line="34" pos:column="45"/></name> <operator pos:line="34" pos:column="46">+<pos:position pos:line="34" pos:column="47"/></operator> <name pos:line="34" pos:column="48">window<pos:position pos:line="34" pos:column="54"/></name> <operator pos:line="34" pos:column="55">-<pos:position pos:line="34" pos:column="56"/></operator> <name pos:line="34" pos:column="57">count<pos:position pos:line="34" pos:column="62"/></name><operator pos:line="34" pos:column="62">)<pos:position pos:line="34" pos:column="63"/></operator> <operator pos:line="34" pos:column="64">%<pos:position pos:line="34" pos:column="65"/></operator> <name pos:line="34" pos:column="66">window<pos:position pos:line="34" pos:column="72"/></name></expr></init></decl>;<pos:position pos:line="34" pos:column="73"/></decl_stmt>
			<expr_stmt><expr><name pos:line="35" pos:column="25">mem_usage<pos:position pos:line="35" pos:column="34"/></name> <operator pos:line="35" pos:column="35">-=<pos:position pos:line="35" pos:column="37"/></operator> <call><name pos:line="35" pos:column="38">free_unpacked<pos:position pos:line="35" pos:column="51"/></name><argument_list pos:line="35" pos:column="51">(<argument><expr><name pos:line="35" pos:column="52">array<pos:position pos:line="35" pos:column="57"/></name> <operator pos:line="35" pos:column="58">+<pos:position pos:line="35" pos:column="59"/></operator> <name pos:line="35" pos:column="60">tail<pos:position pos:line="35" pos:column="64"/></name></expr></argument>)<pos:position pos:line="35" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="66"/></expr_stmt>
			<expr_stmt><expr><name pos:line="36" pos:column="25">count<pos:position pos:line="36" pos:column="30"/></name><operator pos:line="36" pos:column="30">--<pos:position pos:line="36" pos:column="32"/></operator></expr>;<pos:position pos:line="36" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="37" pos:column="18"/></block></while>

		<comment type="block" pos:line="39" pos:column="17">/* We do not compute delta to *create* objects we are not
		 * going to pack.
		 */</comment>
		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><name><name pos:line="42" pos:column="21">entry<pos:position pos:line="42" pos:column="26"/></name><operator pos:line="42" pos:column="26">-&gt;<pos:position pos:line="42" pos:column="31"/></operator><name pos:line="42" pos:column="28">preferred_base<pos:position pos:line="42" pos:column="42"/></name></name></expr>)<pos:position pos:line="42" pos:column="43"/></condition><then pos:line="42" pos:column="43">
			<block type="pseudo"><goto pos:line="43" pos:column="25">goto <name pos:line="43" pos:column="30">next<pos:position pos:line="43" pos:column="34"/></name>;<pos:position pos:line="43" pos:column="35"/></goto></block></then></if>

		<comment type="block" pos:line="45" pos:column="17">/*
		 * If the current object is at pack edge, take the depth the
		 * objects that depend on the current object into account
		 * otherwise they would become too deep.
		 */</comment>
		<expr_stmt><expr><name pos:line="50" pos:column="17">max_depth<pos:position pos:line="50" pos:column="26"/></name> <operator pos:line="50" pos:column="27">=<pos:position pos:line="50" pos:column="28"/></operator> <name pos:line="50" pos:column="29">depth<pos:position pos:line="50" pos:column="34"/></name></expr>;<pos:position pos:line="50" pos:column="35"/></expr_stmt>
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><name><name pos:line="51" pos:column="21">entry<pos:position pos:line="51" pos:column="26"/></name><operator pos:line="51" pos:column="26">-&gt;<pos:position pos:line="51" pos:column="31"/></operator><name pos:line="51" pos:column="28">delta_child<pos:position pos:line="51" pos:column="39"/></name></name></expr>)<pos:position pos:line="51" pos:column="40"/></condition><then pos:line="51" pos:column="40"> <block pos:line="51" pos:column="41">{
			<expr_stmt><expr><name pos:line="52" pos:column="25">max_depth<pos:position pos:line="52" pos:column="34"/></name> <operator pos:line="52" pos:column="35">-=<pos:position pos:line="52" pos:column="37"/></operator> <call><name pos:line="52" pos:column="38">check_delta_limit<pos:position pos:line="52" pos:column="55"/></name><argument_list pos:line="52" pos:column="55">(<argument><expr><name pos:line="52" pos:column="56">entry<pos:position pos:line="52" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="63">0<pos:position pos:line="52" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="66"/></expr_stmt>
			<if pos:line="53" pos:column="25">if <condition pos:line="53" pos:column="28">(<expr><name pos:line="53" pos:column="29">max_depth<pos:position pos:line="53" pos:column="38"/></name> <operator pos:line="53" pos:column="39">&lt;=<pos:position pos:line="53" pos:column="44"/></operator> <literal type="number" pos:line="53" pos:column="42">0<pos:position pos:line="53" pos:column="43"/></literal></expr>)<pos:position pos:line="53" pos:column="44"/></condition><then pos:line="53" pos:column="44">
				<block type="pseudo"><goto pos:line="54" pos:column="33">goto <name pos:line="54" pos:column="38">next<pos:position pos:line="54" pos:column="42"/></name>;<pos:position pos:line="54" pos:column="43"/></goto></block></then></if>
		}<pos:position pos:line="55" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="57" pos:column="17">j<pos:position pos:line="57" pos:column="18"/></name> <operator pos:line="57" pos:column="19">=<pos:position pos:line="57" pos:column="20"/></operator> <name pos:line="57" pos:column="21">window<pos:position pos:line="57" pos:column="27"/></name></expr>;<pos:position pos:line="57" pos:column="28"/></expr_stmt>
		<while pos:line="58" pos:column="17">while <condition pos:line="58" pos:column="23">(<expr><operator pos:line="58" pos:column="24">--<pos:position pos:line="58" pos:column="26"/></operator><name pos:line="58" pos:column="26">j<pos:position pos:line="58" pos:column="27"/></name> <operator pos:line="58" pos:column="28">&gt;<pos:position pos:line="58" pos:column="32"/></operator> <literal type="number" pos:line="58" pos:column="30">0<pos:position pos:line="58" pos:column="31"/></literal></expr>)<pos:position pos:line="58" pos:column="32"/></condition> <block pos:line="58" pos:column="33">{
			<decl_stmt><decl><type><name pos:line="59" pos:column="25">int<pos:position pos:line="59" pos:column="28"/></name></type> <name pos:line="59" pos:column="29">ret<pos:position pos:line="59" pos:column="32"/></name></decl>;<pos:position pos:line="59" pos:column="33"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="60" pos:column="25">uint32_t<pos:position pos:line="60" pos:column="33"/></name></type> <name pos:line="60" pos:column="34">other_idx<pos:position pos:line="60" pos:column="43"/></name> <init pos:line="60" pos:column="44">= <expr><name pos:line="60" pos:column="46">idx<pos:position pos:line="60" pos:column="49"/></name> <operator pos:line="60" pos:column="50">+<pos:position pos:line="60" pos:column="51"/></operator> <name pos:line="60" pos:column="52">j<pos:position pos:line="60" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="60" pos:column="54"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="61" pos:column="25">struct<pos:position pos:line="61" pos:column="31"/></name> <name pos:line="61" pos:column="32">unpacked<pos:position pos:line="61" pos:column="40"/></name></name> <modifier pos:line="61" pos:column="41">*<pos:position pos:line="61" pos:column="42"/></modifier></type><name pos:line="61" pos:column="42">m<pos:position pos:line="61" pos:column="43"/></name></decl>;<pos:position pos:line="61" pos:column="44"/></decl_stmt>
			<if pos:line="62" pos:column="25">if <condition pos:line="62" pos:column="28">(<expr><name pos:line="62" pos:column="29">other_idx<pos:position pos:line="62" pos:column="38"/></name> <operator pos:line="62" pos:column="39">&gt;=<pos:position pos:line="62" pos:column="44"/></operator> <name pos:line="62" pos:column="42">window<pos:position pos:line="62" pos:column="48"/></name></expr>)<pos:position pos:line="62" pos:column="49"/></condition><then pos:line="62" pos:column="49">
				<block type="pseudo"><expr_stmt><expr><name pos:line="63" pos:column="33">other_idx<pos:position pos:line="63" pos:column="42"/></name> <operator pos:line="63" pos:column="43">-=<pos:position pos:line="63" pos:column="45"/></operator> <name pos:line="63" pos:column="46">window<pos:position pos:line="63" pos:column="52"/></name></expr>;<pos:position pos:line="63" pos:column="53"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="64" pos:column="25">m<pos:position pos:line="64" pos:column="26"/></name> <operator pos:line="64" pos:column="27">=<pos:position pos:line="64" pos:column="28"/></operator> <name pos:line="64" pos:column="29">array<pos:position pos:line="64" pos:column="34"/></name> <operator pos:line="64" pos:column="35">+<pos:position pos:line="64" pos:column="36"/></operator> <name pos:line="64" pos:column="37">other_idx<pos:position pos:line="64" pos:column="46"/></name></expr>;<pos:position pos:line="64" pos:column="47"/></expr_stmt>
			<if pos:line="65" pos:column="25">if <condition pos:line="65" pos:column="28">(<expr><operator pos:line="65" pos:column="29">!<pos:position pos:line="65" pos:column="30"/></operator><name><name pos:line="65" pos:column="30">m<pos:position pos:line="65" pos:column="31"/></name><operator pos:line="65" pos:column="31">-&gt;<pos:position pos:line="65" pos:column="36"/></operator><name pos:line="65" pos:column="33">entry<pos:position pos:line="65" pos:column="38"/></name></name></expr>)<pos:position pos:line="65" pos:column="39"/></condition><then pos:line="65" pos:column="39">
				<block type="pseudo"><break pos:line="66" pos:column="33">break;<pos:position pos:line="66" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><name pos:line="67" pos:column="25">ret<pos:position pos:line="67" pos:column="28"/></name> <operator pos:line="67" pos:column="29">=<pos:position pos:line="67" pos:column="30"/></operator> <call><name pos:line="67" pos:column="31">try_delta<pos:position pos:line="67" pos:column="40"/></name><argument_list pos:line="67" pos:column="40">(<argument><expr><name pos:line="67" pos:column="41">n<pos:position pos:line="67" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="44">m<pos:position pos:line="67" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="47">max_depth<pos:position pos:line="67" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="58">&amp;<pos:position pos:line="67" pos:column="63"/></operator><name pos:line="67" pos:column="59">mem_usage<pos:position pos:line="67" pos:column="68"/></name></expr></argument>)<pos:position pos:line="67" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="70"/></expr_stmt>
			<if pos:line="68" pos:column="25">if <condition pos:line="68" pos:column="28">(<expr><name pos:line="68" pos:column="29">ret<pos:position pos:line="68" pos:column="32"/></name> <operator pos:line="68" pos:column="33">&lt;<pos:position pos:line="68" pos:column="37"/></operator> <literal type="number" pos:line="68" pos:column="35">0<pos:position pos:line="68" pos:column="36"/></literal></expr>)<pos:position pos:line="68" pos:column="37"/></condition><then pos:line="68" pos:column="37">
				<block type="pseudo"><break pos:line="69" pos:column="33">break;<pos:position pos:line="69" pos:column="39"/></break></block></then>
			<elseif pos:line="70" pos:column="25">else <if pos:line="70" pos:column="30">if <condition pos:line="70" pos:column="33">(<expr><name pos:line="70" pos:column="34">ret<pos:position pos:line="70" pos:column="37"/></name> <operator pos:line="70" pos:column="38">&gt;<pos:position pos:line="70" pos:column="42"/></operator> <literal type="number" pos:line="70" pos:column="40">0<pos:position pos:line="70" pos:column="41"/></literal></expr>)<pos:position pos:line="70" pos:column="42"/></condition><then pos:line="70" pos:column="42">
				<block type="pseudo"><expr_stmt><expr><name pos:line="71" pos:column="33">best_base<pos:position pos:line="71" pos:column="42"/></name> <operator pos:line="71" pos:column="43">=<pos:position pos:line="71" pos:column="44"/></operator> <name pos:line="71" pos:column="45">other_idx<pos:position pos:line="71" pos:column="54"/></name></expr>;<pos:position pos:line="71" pos:column="55"/></expr_stmt></block></then></if></elseif></if>
		}<pos:position pos:line="72" pos:column="18"/></block></while>

		<comment type="block" pos:line="74" pos:column="17">/*
		 * If we decided to cache the delta data, then it is best
		 * to compress it right away.  First because we have to do
		 * it anyway, and doing it here while we're threaded will
		 * save a lot of time in the non threaded write phase,
		 * as well as allow for caching more deltas within
		 * the same cache size limit.
		 * ...
		 * But only if not writing to stdout, since in that case
		 * the network is most likely throttling writes anyway,
		 * and therefore it is best to go to the write phase ASAP
		 * instead, as we can afford spending more time compressing
		 * between writes at that moment.
		 */</comment>
		<if pos:line="88" pos:column="17">if <condition pos:line="88" pos:column="20">(<expr><name><name pos:line="88" pos:column="21">entry<pos:position pos:line="88" pos:column="26"/></name><operator pos:line="88" pos:column="26">-&gt;<pos:position pos:line="88" pos:column="31"/></operator><name pos:line="88" pos:column="28">delta_data<pos:position pos:line="88" pos:column="38"/></name></name> <operator pos:line="88" pos:column="39">&amp;&amp;<pos:position pos:line="88" pos:column="49"/></operator> <operator pos:line="88" pos:column="42">!<pos:position pos:line="88" pos:column="43"/></operator><name pos:line="88" pos:column="43">pack_to_stdout<pos:position pos:line="88" pos:column="57"/></name></expr>)<pos:position pos:line="88" pos:column="58"/></condition><then pos:line="88" pos:column="58"> <block pos:line="88" pos:column="59">{
			<expr_stmt><expr><name><name pos:line="89" pos:column="25">entry<pos:position pos:line="89" pos:column="30"/></name><operator pos:line="89" pos:column="30">-&gt;<pos:position pos:line="89" pos:column="35"/></operator><name pos:line="89" pos:column="32">z_delta_size<pos:position pos:line="89" pos:column="44"/></name></name> <operator pos:line="89" pos:column="45">=<pos:position pos:line="89" pos:column="46"/></operator> <call><name pos:line="89" pos:column="47">do_compress<pos:position pos:line="89" pos:column="58"/></name><argument_list pos:line="89" pos:column="58">(<argument><expr><operator pos:line="89" pos:column="59">&amp;<pos:position pos:line="89" pos:column="64"/></operator><name><name pos:line="89" pos:column="60">entry<pos:position pos:line="89" pos:column="65"/></name><operator pos:line="89" pos:column="65">-&gt;<pos:position pos:line="89" pos:column="70"/></operator><name pos:line="89" pos:column="67">delta_data<pos:position pos:line="89" pos:column="77"/></name></name></expr></argument>,
							  <argument><expr><name><name pos:line="90" pos:column="59">entry<pos:position pos:line="90" pos:column="64"/></name><operator pos:line="90" pos:column="64">-&gt;<pos:position pos:line="90" pos:column="69"/></operator><name pos:line="90" pos:column="66">delta_size<pos:position pos:line="90" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="90" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="78"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="91" pos:column="25">cache_lock<pos:position pos:line="91" pos:column="35"/></name><argument_list pos:line="91" pos:column="35">()<pos:position pos:line="91" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><name pos:line="92" pos:column="25">delta_cache_size<pos:position pos:line="92" pos:column="41"/></name> <operator pos:line="92" pos:column="42">-=<pos:position pos:line="92" pos:column="44"/></operator> <name><name pos:line="92" pos:column="45">entry<pos:position pos:line="92" pos:column="50"/></name><operator pos:line="92" pos:column="50">-&gt;<pos:position pos:line="92" pos:column="55"/></operator><name pos:line="92" pos:column="52">delta_size<pos:position pos:line="92" pos:column="62"/></name></name></expr>;<pos:position pos:line="92" pos:column="63"/></expr_stmt>
			<expr_stmt><expr><name pos:line="93" pos:column="25">delta_cache_size<pos:position pos:line="93" pos:column="41"/></name> <operator pos:line="93" pos:column="42">+=<pos:position pos:line="93" pos:column="44"/></operator> <name><name pos:line="93" pos:column="45">entry<pos:position pos:line="93" pos:column="50"/></name><operator pos:line="93" pos:column="50">-&gt;<pos:position pos:line="93" pos:column="55"/></operator><name pos:line="93" pos:column="52">z_delta_size<pos:position pos:line="93" pos:column="64"/></name></name></expr>;<pos:position pos:line="93" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="94" pos:column="25">cache_unlock<pos:position pos:line="94" pos:column="37"/></name><argument_list pos:line="94" pos:column="37">()<pos:position pos:line="94" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="95" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="97" pos:column="17">/* if we made n a delta, and if n is already at max
		 * depth, leaving it in the window is pointless.  we
		 * should evict it first.
		 */</comment>
		<if pos:line="101" pos:column="17">if <condition pos:line="101" pos:column="20">(<expr><name><name pos:line="101" pos:column="21">entry<pos:position pos:line="101" pos:column="26"/></name><operator pos:line="101" pos:column="26">-&gt;<pos:position pos:line="101" pos:column="31"/></operator><name pos:line="101" pos:column="28">delta<pos:position pos:line="101" pos:column="33"/></name></name> <operator pos:line="101" pos:column="34">&amp;&amp;<pos:position pos:line="101" pos:column="44"/></operator> <name pos:line="101" pos:column="37">max_depth<pos:position pos:line="101" pos:column="46"/></name> <operator pos:line="101" pos:column="47">&lt;=<pos:position pos:line="101" pos:column="52"/></operator> <name><name pos:line="101" pos:column="50">n<pos:position pos:line="101" pos:column="51"/></name><operator pos:line="101" pos:column="51">-&gt;<pos:position pos:line="101" pos:column="56"/></operator><name pos:line="101" pos:column="53">depth<pos:position pos:line="101" pos:column="58"/></name></name></expr>)<pos:position pos:line="101" pos:column="59"/></condition><then pos:line="101" pos:column="59">
			<block type="pseudo"><continue pos:line="102" pos:column="25">continue;<pos:position pos:line="102" pos:column="34"/></continue></block></then></if>

		<comment type="block" pos:line="104" pos:column="17">/*
		 * Move the best delta base up in the window, after the
		 * currently deltified object, to keep it longer.  It will
		 * be the first base object to be attempted next.
		 */</comment>
		<if pos:line="109" pos:column="17">if <condition pos:line="109" pos:column="20">(<expr><name><name pos:line="109" pos:column="21">entry<pos:position pos:line="109" pos:column="26"/></name><operator pos:line="109" pos:column="26">-&gt;<pos:position pos:line="109" pos:column="31"/></operator><name pos:line="109" pos:column="28">delta<pos:position pos:line="109" pos:column="33"/></name></name></expr>)<pos:position pos:line="109" pos:column="34"/></condition><then pos:line="109" pos:column="34"> <block pos:line="109" pos:column="35">{
			<decl_stmt><decl><type><name><name pos:line="110" pos:column="25">struct<pos:position pos:line="110" pos:column="31"/></name> <name pos:line="110" pos:column="32">unpacked<pos:position pos:line="110" pos:column="40"/></name></name></type> <name pos:line="110" pos:column="41">swap<pos:position pos:line="110" pos:column="45"/></name> <init pos:line="110" pos:column="46">= <expr><name><name pos:line="110" pos:column="48">array<pos:position pos:line="110" pos:column="53"/></name><index pos:line="110" pos:column="53">[<expr><name pos:line="110" pos:column="54">best_base<pos:position pos:line="110" pos:column="63"/></name></expr>]<pos:position pos:line="110" pos:column="64"/></index></name></expr></init></decl>;<pos:position pos:line="110" pos:column="65"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="111" pos:column="25">int<pos:position pos:line="111" pos:column="28"/></name></type> <name pos:line="111" pos:column="29">dist<pos:position pos:line="111" pos:column="33"/></name> <init pos:line="111" pos:column="34">= <expr><operator pos:line="111" pos:column="36">(<pos:position pos:line="111" pos:column="37"/></operator><name pos:line="111" pos:column="37">window<pos:position pos:line="111" pos:column="43"/></name> <operator pos:line="111" pos:column="44">+<pos:position pos:line="111" pos:column="45"/></operator> <name pos:line="111" pos:column="46">idx<pos:position pos:line="111" pos:column="49"/></name> <operator pos:line="111" pos:column="50">-<pos:position pos:line="111" pos:column="51"/></operator> <name pos:line="111" pos:column="52">best_base<pos:position pos:line="111" pos:column="61"/></name><operator pos:line="111" pos:column="61">)<pos:position pos:line="111" pos:column="62"/></operator> <operator pos:line="111" pos:column="63">%<pos:position pos:line="111" pos:column="64"/></operator> <name pos:line="111" pos:column="65">window<pos:position pos:line="111" pos:column="71"/></name></expr></init></decl>;<pos:position pos:line="111" pos:column="72"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="112" pos:column="25">int<pos:position pos:line="112" pos:column="28"/></name></type> <name pos:line="112" pos:column="29">dst<pos:position pos:line="112" pos:column="32"/></name> <init pos:line="112" pos:column="33">= <expr><name pos:line="112" pos:column="35">best_base<pos:position pos:line="112" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="112" pos:column="45"/></decl_stmt>
			<while pos:line="113" pos:column="25">while <condition pos:line="113" pos:column="31">(<expr><name pos:line="113" pos:column="32">dist<pos:position pos:line="113" pos:column="36"/></name><operator pos:line="113" pos:column="36">--<pos:position pos:line="113" pos:column="38"/></operator></expr>)<pos:position pos:line="113" pos:column="39"/></condition> <block pos:line="113" pos:column="40">{
				<decl_stmt><decl><type><name pos:line="114" pos:column="33">int<pos:position pos:line="114" pos:column="36"/></name></type> <name pos:line="114" pos:column="37">src<pos:position pos:line="114" pos:column="40"/></name> <init pos:line="114" pos:column="41">= <expr><operator pos:line="114" pos:column="43">(<pos:position pos:line="114" pos:column="44"/></operator><name pos:line="114" pos:column="44">dst<pos:position pos:line="114" pos:column="47"/></name> <operator pos:line="114" pos:column="48">+<pos:position pos:line="114" pos:column="49"/></operator> <literal type="number" pos:line="114" pos:column="50">1<pos:position pos:line="114" pos:column="51"/></literal><operator pos:line="114" pos:column="51">)<pos:position pos:line="114" pos:column="52"/></operator> <operator pos:line="114" pos:column="53">%<pos:position pos:line="114" pos:column="54"/></operator> <name pos:line="114" pos:column="55">window<pos:position pos:line="114" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="114" pos:column="62"/></decl_stmt>
				<expr_stmt><expr><name><name pos:line="115" pos:column="33">array<pos:position pos:line="115" pos:column="38"/></name><index pos:line="115" pos:column="38">[<expr><name pos:line="115" pos:column="39">dst<pos:position pos:line="115" pos:column="42"/></name></expr>]<pos:position pos:line="115" pos:column="43"/></index></name> <operator pos:line="115" pos:column="44">=<pos:position pos:line="115" pos:column="45"/></operator> <name><name pos:line="115" pos:column="46">array<pos:position pos:line="115" pos:column="51"/></name><index pos:line="115" pos:column="51">[<expr><name pos:line="115" pos:column="52">src<pos:position pos:line="115" pos:column="55"/></name></expr>]<pos:position pos:line="115" pos:column="56"/></index></name></expr>;<pos:position pos:line="115" pos:column="57"/></expr_stmt>
				<expr_stmt><expr><name pos:line="116" pos:column="33">dst<pos:position pos:line="116" pos:column="36"/></name> <operator pos:line="116" pos:column="37">=<pos:position pos:line="116" pos:column="38"/></operator> <name pos:line="116" pos:column="39">src<pos:position pos:line="116" pos:column="42"/></name></expr>;<pos:position pos:line="116" pos:column="43"/></expr_stmt>
			}<pos:position pos:line="117" pos:column="26"/></block></while>
			<expr_stmt><expr><name><name pos:line="118" pos:column="25">array<pos:position pos:line="118" pos:column="30"/></name><index pos:line="118" pos:column="30">[<expr><name pos:line="118" pos:column="31">dst<pos:position pos:line="118" pos:column="34"/></name></expr>]<pos:position pos:line="118" pos:column="35"/></index></name> <operator pos:line="118" pos:column="36">=<pos:position pos:line="118" pos:column="37"/></operator> <name pos:line="118" pos:column="38">swap<pos:position pos:line="118" pos:column="42"/></name></expr>;<pos:position pos:line="118" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="119" pos:column="18"/></block></then></if>

		<label><name pos:line="121" pos:column="17">next<pos:position pos:line="121" pos:column="21"/></name>:<pos:position pos:line="121" pos:column="22"/></label>
		<expr_stmt><expr><name pos:line="122" pos:column="17">idx<pos:position pos:line="122" pos:column="20"/></name><operator pos:line="122" pos:column="20">++<pos:position pos:line="122" pos:column="22"/></operator></expr>;<pos:position pos:line="122" pos:column="23"/></expr_stmt>
		<if pos:line="123" pos:column="17">if <condition pos:line="123" pos:column="20">(<expr><name pos:line="123" pos:column="21">count<pos:position pos:line="123" pos:column="26"/></name> <operator pos:line="123" pos:column="27">+<pos:position pos:line="123" pos:column="28"/></operator> <literal type="number" pos:line="123" pos:column="29">1<pos:position pos:line="123" pos:column="30"/></literal> <operator pos:line="123" pos:column="31">&lt;<pos:position pos:line="123" pos:column="35"/></operator> <name pos:line="123" pos:column="33">window<pos:position pos:line="123" pos:column="39"/></name></expr>)<pos:position pos:line="123" pos:column="40"/></condition><then pos:line="123" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><name pos:line="124" pos:column="25">count<pos:position pos:line="124" pos:column="30"/></name><operator pos:line="124" pos:column="30">++<pos:position pos:line="124" pos:column="32"/></operator></expr>;<pos:position pos:line="124" pos:column="33"/></expr_stmt></block></then></if>
		<if pos:line="125" pos:column="17">if <condition pos:line="125" pos:column="20">(<expr><name pos:line="125" pos:column="21">idx<pos:position pos:line="125" pos:column="24"/></name> <operator pos:line="125" pos:column="25">&gt;=<pos:position pos:line="125" pos:column="30"/></operator> <name pos:line="125" pos:column="28">window<pos:position pos:line="125" pos:column="34"/></name></expr>)<pos:position pos:line="125" pos:column="35"/></condition><then pos:line="125" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><name pos:line="126" pos:column="25">idx<pos:position pos:line="126" pos:column="28"/></name> <operator pos:line="126" pos:column="29">=<pos:position pos:line="126" pos:column="30"/></operator> <literal type="number" pos:line="126" pos:column="31">0<pos:position pos:line="126" pos:column="32"/></literal></expr>;<pos:position pos:line="126" pos:column="33"/></expr_stmt></block></then></if>
	}<pos:position pos:line="127" pos:column="10"/></block></for>

	<for pos:line="129" pos:column="9">for <control pos:line="129" pos:column="13">(<init><expr><name pos:line="129" pos:column="14">i<pos:position pos:line="129" pos:column="15"/></name> <operator pos:line="129" pos:column="16">=<pos:position pos:line="129" pos:column="17"/></operator> <literal type="number" pos:line="129" pos:column="18">0<pos:position pos:line="129" pos:column="19"/></literal></expr>;<pos:position pos:line="129" pos:column="20"/></init> <condition><expr><name pos:line="129" pos:column="21">i<pos:position pos:line="129" pos:column="22"/></name> <operator pos:line="129" pos:column="23">&lt;<pos:position pos:line="129" pos:column="27"/></operator> <name pos:line="129" pos:column="25">window<pos:position pos:line="129" pos:column="31"/></name></expr>;<pos:position pos:line="129" pos:column="32"/></condition> <incr><expr><operator pos:line="129" pos:column="33">++<pos:position pos:line="129" pos:column="35"/></operator><name pos:line="129" pos:column="35">i<pos:position pos:line="129" pos:column="36"/></name></expr></incr>)<pos:position pos:line="129" pos:column="37"/></control> <block pos:line="129" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="130" pos:column="17">free_delta_index<pos:position pos:line="130" pos:column="33"/></name><argument_list pos:line="130" pos:column="33">(<argument><expr><name><name pos:line="130" pos:column="34">array<pos:position pos:line="130" pos:column="39"/></name><index pos:line="130" pos:column="39">[<expr><name pos:line="130" pos:column="40">i<pos:position pos:line="130" pos:column="41"/></name></expr>]<pos:position pos:line="130" pos:column="42"/></index></name><operator pos:line="130" pos:column="42">.<pos:position pos:line="130" pos:column="43"/></operator><name pos:line="130" pos:column="43">index<pos:position pos:line="130" pos:column="48"/></name></expr></argument>)<pos:position pos:line="130" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="131" pos:column="17">free<pos:position pos:line="131" pos:column="21"/></name><argument_list pos:line="131" pos:column="21">(<argument><expr><name><name pos:line="131" pos:column="22">array<pos:position pos:line="131" pos:column="27"/></name><index pos:line="131" pos:column="27">[<expr><name pos:line="131" pos:column="28">i<pos:position pos:line="131" pos:column="29"/></name></expr>]<pos:position pos:line="131" pos:column="30"/></index></name><operator pos:line="131" pos:column="30">.<pos:position pos:line="131" pos:column="31"/></operator><name pos:line="131" pos:column="31">data<pos:position pos:line="131" pos:column="35"/></name></expr></argument>)<pos:position pos:line="131" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="132" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="133" pos:column="9">free<pos:position pos:line="133" pos:column="13"/></name><argument_list pos:line="133" pos:column="13">(<argument><expr><name pos:line="133" pos:column="14">array<pos:position pos:line="133" pos:column="19"/></name></expr></argument>)<pos:position pos:line="133" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="21"/></expr_stmt>
}<pos:position pos:line="134" pos:column="2"/></block></function></unit>
