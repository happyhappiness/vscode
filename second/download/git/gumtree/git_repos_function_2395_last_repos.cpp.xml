<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2395_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">dev_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">get_device_or_die<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">path<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="50">const<pos:position pos:line="1" pos:column="55"/></specifier> <name pos:line="1" pos:column="56">char<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">prefix<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="70">int<pos:position pos:line="1" pos:column="73"/></name></type> <name pos:line="1" pos:column="74">prefix_len<pos:position pos:line="1" pos:column="84"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="85"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">stat<pos:position pos:line="3" pos:column="20"/></name></name></type> <name pos:line="3" pos:column="21">buf<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><call><name pos:line="4" pos:column="13">stat<pos:position pos:line="4" pos:column="17"/></name><argument_list pos:line="4" pos:column="17">(<argument><expr><name pos:line="4" pos:column="18">path<pos:position pos:line="4" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="4" pos:column="24">&amp;<pos:position pos:line="4" pos:column="29"/></operator><name pos:line="4" pos:column="25">buf<pos:position pos:line="4" pos:column="28"/></name></expr></argument>)<pos:position pos:line="4" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="30"/></condition><then pos:line="4" pos:column="30"> <block pos:line="4" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="5" pos:column="17">die_errno<pos:position pos:line="5" pos:column="26"/></name><argument_list pos:line="5" pos:column="26">(<argument><expr><literal type="string" pos:line="5" pos:column="27">"failed to stat '%*s%s%s'"<pos:position pos:line="5" pos:column="53"/></literal></expr></argument>,
				<argument><expr><name pos:line="6" pos:column="33">prefix_len<pos:position pos:line="6" pos:column="43"/></name></expr></argument>,
				<argument><expr><ternary><condition><expr><name pos:line="7" pos:column="33">prefix<pos:position pos:line="7" pos:column="39"/></name></expr> ?<pos:position pos:line="7" pos:column="41"/></condition><then pos:line="7" pos:column="41"> <expr><name pos:line="7" pos:column="42">prefix<pos:position pos:line="7" pos:column="48"/></name></expr> <pos:position pos:line="7" pos:column="49"/></then><else pos:line="7" pos:column="49">: <expr><literal type="string" pos:line="7" pos:column="51">""<pos:position pos:line="7" pos:column="53"/></literal></expr></else></ternary></expr></argument>,
				<argument><expr><ternary><condition><expr><name pos:line="8" pos:column="33">prefix<pos:position pos:line="8" pos:column="39"/></name></expr> ?<pos:position pos:line="8" pos:column="41"/></condition><then pos:line="8" pos:column="41"> <expr><literal type="string" pos:line="8" pos:column="42">"/"<pos:position pos:line="8" pos:column="45"/></literal></expr> <pos:position pos:line="8" pos:column="46"/></then><else pos:line="8" pos:column="46">: <expr><literal type="string" pos:line="8" pos:column="48">""<pos:position pos:line="8" pos:column="50"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="8" pos:column="52">path<pos:position pos:line="8" pos:column="56"/></name></expr></argument>)<pos:position pos:line="8" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="9" pos:column="10"/></block></then></if>
	<return pos:line="10" pos:column="9">return <expr><name><name pos:line="10" pos:column="16">buf<pos:position pos:line="10" pos:column="19"/></name><operator pos:line="10" pos:column="19">.<pos:position pos:line="10" pos:column="20"/></operator><name pos:line="10" pos:column="20">st_dev<pos:position pos:line="10" pos:column="26"/></name></name></expr>;<pos:position pos:line="10" pos:column="27"/></return>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
