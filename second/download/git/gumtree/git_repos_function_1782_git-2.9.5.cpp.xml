<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1782_git-2.9.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">add_to_alternates_file<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">reference<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">lock_file<pos:position pos:line="3" pos:column="25"/></name></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">lock<pos:position pos:line="3" pos:column="31"/></name> <init pos:line="3" pos:column="32">= <expr><call><name pos:line="3" pos:column="34">xcalloc<pos:position pos:line="3" pos:column="41"/></name><argument_list pos:line="3" pos:column="41">(<argument><expr><literal type="number" pos:line="3" pos:column="42">1<pos:position pos:line="3" pos:column="43"/></literal></expr></argument>, <argument><expr><sizeof pos:line="3" pos:column="45">sizeof<argument_list pos:line="3" pos:column="51">(<argument><expr pos:line="3" pos:column="52">struct <name pos:line="3" pos:column="59">lock_file<pos:position pos:line="3" pos:column="68"/></name></expr></argument>)<pos:position pos:line="3" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="3" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="71"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">alts<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><call><name pos:line="4" pos:column="22">git_pathdup<pos:position pos:line="4" pos:column="33"/></name><argument_list pos:line="4" pos:column="33">(<argument><expr><literal type="string" pos:line="4" pos:column="34">"objects/info/alternates"<pos:position pos:line="4" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="61"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">FILE<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">in<pos:position pos:line="5" pos:column="17"/></name></decl>, <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="20">out<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">hold_lock_file_for_update<pos:position pos:line="7" pos:column="34"/></name><argument_list pos:line="7" pos:column="34">(<argument><expr><name pos:line="7" pos:column="35">lock<pos:position pos:line="7" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="41">alts<pos:position pos:line="7" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="47">LOCK_DIE_ON_ERROR<pos:position pos:line="7" pos:column="64"/></name></expr></argument>)<pos:position pos:line="7" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="66"/></expr_stmt>
	<expr_stmt><expr><name pos:line="8" pos:column="9">out<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">=<pos:position pos:line="8" pos:column="14"/></operator> <call><name pos:line="8" pos:column="15">fdopen_lock_file<pos:position pos:line="8" pos:column="31"/></name><argument_list pos:line="8" pos:column="31">(<argument><expr><name pos:line="8" pos:column="32">lock<pos:position pos:line="8" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="38">"w"<pos:position pos:line="8" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="43"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">out<pos:position pos:line="9" pos:column="17"/></name></expr>)<pos:position pos:line="9" pos:column="18"/></condition><then pos:line="9" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="17">die_errno<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">(<argument><expr><literal type="string" pos:line="10" pos:column="27">"unable to fdopen alternates lockfile"<pos:position pos:line="10" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="67"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="12" pos:column="9">in<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">fopen<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">(<argument><expr><name pos:line="12" pos:column="20">alts<pos:position pos:line="12" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="26">"r"<pos:position pos:line="12" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="31"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">in<pos:position pos:line="13" pos:column="15"/></name></expr>)<pos:position pos:line="13" pos:column="16"/></condition><then pos:line="13" pos:column="16"> <block pos:line="13" pos:column="17">{
		<decl_stmt><decl><type><name><name pos:line="14" pos:column="17">struct<pos:position pos:line="14" pos:column="23"/></name> <name pos:line="14" pos:column="24">strbuf<pos:position pos:line="14" pos:column="30"/></name></name></type> <name pos:line="14" pos:column="31">line<pos:position pos:line="14" pos:column="35"/></name> <init pos:line="14" pos:column="36">= <expr><name pos:line="14" pos:column="38">STRBUF_INIT<pos:position pos:line="14" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="50"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">int<pos:position pos:line="15" pos:column="20"/></name></type> <name pos:line="15" pos:column="21">found<pos:position pos:line="15" pos:column="26"/></name> <init pos:line="15" pos:column="27">= <expr><literal type="number" pos:line="15" pos:column="29">0<pos:position pos:line="15" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="31"/></decl_stmt>

		<while pos:line="17" pos:column="17">while <condition pos:line="17" pos:column="23">(<expr><call><name pos:line="17" pos:column="24">strbuf_getline<pos:position pos:line="17" pos:column="38"/></name><argument_list pos:line="17" pos:column="38">(<argument><expr><operator pos:line="17" pos:column="39">&amp;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="40">line<pos:position pos:line="17" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="46">in<pos:position pos:line="17" pos:column="48"/></name></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call> <operator pos:line="17" pos:column="50">!=<pos:position pos:line="17" pos:column="52"/></operator> <name pos:line="17" pos:column="53">EOF<pos:position pos:line="17" pos:column="56"/></name></expr>)<pos:position pos:line="17" pos:column="57"/></condition> <block pos:line="17" pos:column="58">{
			<if pos:line="18" pos:column="25">if <condition pos:line="18" pos:column="28">(<expr><operator pos:line="18" pos:column="29">!<pos:position pos:line="18" pos:column="30"/></operator><call><name pos:line="18" pos:column="30">strcmp<pos:position pos:line="18" pos:column="36"/></name><argument_list pos:line="18" pos:column="36">(<argument><expr><name pos:line="18" pos:column="37">reference<pos:position pos:line="18" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="48">line<pos:position pos:line="18" pos:column="52"/></name><operator pos:line="18" pos:column="52">.<pos:position pos:line="18" pos:column="53"/></operator><name pos:line="18" pos:column="53">buf<pos:position pos:line="18" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="58"/></condition><then pos:line="18" pos:column="58"> <block pos:line="18" pos:column="59">{
				<expr_stmt><expr><name pos:line="19" pos:column="33">found<pos:position pos:line="19" pos:column="38"/></name> <operator pos:line="19" pos:column="39">=<pos:position pos:line="19" pos:column="40"/></operator> <literal type="number" pos:line="19" pos:column="41">1<pos:position pos:line="19" pos:column="42"/></literal></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt>
				<break pos:line="20" pos:column="33">break;<pos:position pos:line="20" pos:column="39"/></break>
			}<pos:position pos:line="21" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">fprintf_or_die<pos:position pos:line="22" pos:column="39"/></name><argument_list pos:line="22" pos:column="39">(<argument><expr><name pos:line="22" pos:column="40">out<pos:position pos:line="22" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="45">"%s\n"<pos:position pos:line="22" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="53">line<pos:position pos:line="22" pos:column="57"/></name><operator pos:line="22" pos:column="57">.<pos:position pos:line="22" pos:column="58"/></operator><name pos:line="22" pos:column="58">buf<pos:position pos:line="22" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="63"/></expr_stmt>
		}<pos:position pos:line="23" pos:column="18"/></block></while>

		<expr_stmt><expr><call><name pos:line="25" pos:column="17">strbuf_release<pos:position pos:line="25" pos:column="31"/></name><argument_list pos:line="25" pos:column="31">(<argument><expr><operator pos:line="25" pos:column="32">&amp;<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="33">line<pos:position pos:line="25" pos:column="37"/></name></expr></argument>)<pos:position pos:line="25" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">fclose<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><name pos:line="26" pos:column="24">in<pos:position pos:line="26" pos:column="26"/></name></expr></argument>)<pos:position pos:line="26" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="28"/></expr_stmt>

		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">found<pos:position pos:line="28" pos:column="26"/></name></expr>)<pos:position pos:line="28" pos:column="27"/></condition><then pos:line="28" pos:column="27"> <block pos:line="28" pos:column="28">{
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">rollback_lock_file<pos:position pos:line="29" pos:column="43"/></name><argument_list pos:line="29" pos:column="43">(<argument><expr><name pos:line="29" pos:column="44">lock<pos:position pos:line="29" pos:column="48"/></name></expr></argument>)<pos:position pos:line="29" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><name pos:line="30" pos:column="25">lock<pos:position pos:line="30" pos:column="29"/></name> <operator pos:line="30" pos:column="30">=<pos:position pos:line="30" pos:column="31"/></operator> <name pos:line="30" pos:column="32">NULL<pos:position pos:line="30" pos:column="36"/></name></expr>;<pos:position pos:line="30" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="31" pos:column="18"/></block></then></if>
	}<pos:position pos:line="32" pos:column="10"/></block></then>
	<elseif pos:line="33" pos:column="9">else <if pos:line="33" pos:column="14">if <condition pos:line="33" pos:column="17">(<expr><name pos:line="33" pos:column="18">errno<pos:position pos:line="33" pos:column="23"/></name> <operator pos:line="33" pos:column="24">!=<pos:position pos:line="33" pos:column="26"/></operator> <name pos:line="33" pos:column="27">ENOENT<pos:position pos:line="33" pos:column="33"/></name></expr>)<pos:position pos:line="33" pos:column="34"/></condition><then pos:line="33" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="17">die_errno<pos:position pos:line="34" pos:column="26"/></name><argument_list pos:line="34" pos:column="26">(<argument><expr><literal type="string" pos:line="34" pos:column="27">"unable to read alternates file"<pos:position pos:line="34" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="61"/></expr_stmt></block></then></if></elseif></if>

	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">lock<pos:position pos:line="36" pos:column="17"/></name></expr>)<pos:position pos:line="36" pos:column="18"/></condition><then pos:line="36" pos:column="18"> <block pos:line="36" pos:column="19">{
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">fprintf_or_die<pos:position pos:line="37" pos:column="31"/></name><argument_list pos:line="37" pos:column="31">(<argument><expr><name pos:line="37" pos:column="32">out<pos:position pos:line="37" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="37">"%s\n"<pos:position pos:line="37" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="45">reference<pos:position pos:line="37" pos:column="54"/></name></expr></argument>)<pos:position pos:line="37" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="56"/></expr_stmt>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><call><name pos:line="38" pos:column="21">commit_lock_file<pos:position pos:line="38" pos:column="37"/></name><argument_list pos:line="38" pos:column="37">(<argument><expr><name pos:line="38" pos:column="38">lock<pos:position pos:line="38" pos:column="42"/></name></expr></argument>)<pos:position pos:line="38" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="44"/></condition><then pos:line="38" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="25">die_errno<pos:position pos:line="39" pos:column="34"/></name><argument_list pos:line="39" pos:column="34">(<argument><expr><literal type="string" pos:line="39" pos:column="35">"unable to move new alternates file into place"<pos:position pos:line="39" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="84"/></expr_stmt></block></then></if>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name pos:line="40" pos:column="21">alt_odb_tail<pos:position pos:line="40" pos:column="33"/></name></expr>)<pos:position pos:line="40" pos:column="34"/></condition><then pos:line="40" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="25">link_alt_odb_entries<pos:position pos:line="41" pos:column="45"/></name><argument_list pos:line="41" pos:column="45">(<argument><expr><name pos:line="41" pos:column="46">reference<pos:position pos:line="41" pos:column="55"/></name></expr></argument>, <argument><expr><call><name pos:line="41" pos:column="57">strlen<pos:position pos:line="41" pos:column="63"/></name><argument_list pos:line="41" pos:column="63">(<argument><expr><name pos:line="41" pos:column="64">reference<pos:position pos:line="41" pos:column="73"/></name></expr></argument>)<pos:position pos:line="41" pos:column="74"/></argument_list></call></expr></argument>, <argument><expr><literal type="char" pos:line="41" pos:column="76">'\n'<pos:position pos:line="41" pos:column="80"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="82">NULL<pos:position pos:line="41" pos:column="86"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="88">0<pos:position pos:line="41" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="91"/></expr_stmt></block></then></if>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">free<pos:position pos:line="43" pos:column="13"/></name><argument_list pos:line="43" pos:column="13">(<argument><expr><name pos:line="43" pos:column="14">alts<pos:position pos:line="43" pos:column="18"/></name></expr></argument>)<pos:position pos:line="43" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="20"/></expr_stmt>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
