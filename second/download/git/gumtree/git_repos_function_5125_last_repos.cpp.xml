<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5125_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">name_ref<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><specifier pos:line="1" pos:column="21">const<pos:position pos:line="1" pos:column="26"/></specifier> <name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">path<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="39">const<pos:position pos:line="1" pos:column="44"/></specifier> <name><name pos:line="1" pos:column="45">struct<pos:position pos:line="1" pos:column="51"/></name> <name pos:line="1" pos:column="52">object_id<pos:position pos:line="1" pos:column="61"/></name></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">oid<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="68">int<pos:position pos:line="1" pos:column="71"/></name></type> <name pos:line="1" pos:column="72">flags<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="79">void<pos:position pos:line="1" pos:column="83"/></name> <modifier pos:line="1" pos:column="84">*<pos:position pos:line="1" pos:column="85"/></modifier></type><name pos:line="1" pos:column="85">cb_data<pos:position pos:line="1" pos:column="92"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="93"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">object<pos:position pos:line="3" pos:column="22"/></name></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">o<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><call><name pos:line="3" pos:column="28">parse_object<pos:position pos:line="3" pos:column="40"/></name><argument_list pos:line="3" pos:column="40">(<argument><expr><name pos:line="3" pos:column="41">oid<pos:position pos:line="3" pos:column="44"/></name></expr></argument>)<pos:position pos:line="3" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">name_ref_data<pos:position pos:line="4" pos:column="29"/></name></name> <modifier pos:line="4" pos:column="30">*<pos:position pos:line="4" pos:column="31"/></modifier></type><name pos:line="4" pos:column="31">data<pos:position pos:line="4" pos:column="35"/></name> <init pos:line="4" pos:column="36">= <expr><name pos:line="4" pos:column="38">cb_data<pos:position pos:line="4" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">can_abbreviate_output<pos:position pos:line="5" pos:column="34"/></name> <init pos:line="5" pos:column="35">= <expr><name><name pos:line="5" pos:column="37">data<pos:position pos:line="5" pos:column="41"/></name><operator pos:line="5" pos:column="41">-&gt;<pos:position pos:line="5" pos:column="46"/></operator><name pos:line="5" pos:column="43">tags_only<pos:position pos:line="5" pos:column="52"/></name></name> <operator pos:line="5" pos:column="53">&amp;&amp;<pos:position pos:line="5" pos:column="63"/></operator> <name><name pos:line="5" pos:column="56">data<pos:position pos:line="5" pos:column="60"/></name><operator pos:line="5" pos:column="60">-&gt;<pos:position pos:line="5" pos:column="65"/></operator><name pos:line="5" pos:column="62">name_only<pos:position pos:line="5" pos:column="71"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="72"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">deref<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><literal type="number" pos:line="6" pos:column="21">0<pos:position pos:line="6" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">timestamp_t<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">taggerdate<pos:position pos:line="7" pos:column="31"/></name> <init pos:line="7" pos:column="32">= <expr><name pos:line="7" pos:column="34">TIME_MAX<pos:position pos:line="7" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="43"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name><name pos:line="9" pos:column="13">data<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">-&gt;<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="19">tags_only<pos:position pos:line="9" pos:column="28"/></name></name> <operator pos:line="9" pos:column="29">&amp;&amp;<pos:position pos:line="9" pos:column="39"/></operator> <operator pos:line="9" pos:column="32">!<pos:position pos:line="9" pos:column="33"/></operator><call><name pos:line="9" pos:column="33">starts_with<pos:position pos:line="9" pos:column="44"/></name><argument_list pos:line="9" pos:column="44">(<argument><expr><name pos:line="9" pos:column="45">path<pos:position pos:line="9" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="51">"refs/tags/"<pos:position pos:line="9" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="65"/></condition><then pos:line="9" pos:column="65">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal></expr>;<pos:position pos:line="10" pos:column="26"/></return></block></then></if>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name><name pos:line="12" pos:column="13">data<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">-&gt;<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="19">exclude_filters<pos:position pos:line="12" pos:column="34"/></name><operator pos:line="12" pos:column="34">.<pos:position pos:line="12" pos:column="35"/></operator><name pos:line="12" pos:column="35">nr<pos:position pos:line="12" pos:column="37"/></name></name></expr>)<pos:position pos:line="12" pos:column="38"/></condition><then pos:line="12" pos:column="38"> <block pos:line="12" pos:column="39">{
		<decl_stmt><decl><type><name><name pos:line="13" pos:column="17">struct<pos:position pos:line="13" pos:column="23"/></name> <name pos:line="13" pos:column="24">string_list_item<pos:position pos:line="13" pos:column="40"/></name></name> <modifier pos:line="13" pos:column="41">*<pos:position pos:line="13" pos:column="42"/></modifier></type><name pos:line="13" pos:column="42">item<pos:position pos:line="13" pos:column="46"/></name></decl>;<pos:position pos:line="13" pos:column="47"/></decl_stmt>

		<macro><name pos:line="15" pos:column="17">for_each_string_list_item<pos:position pos:line="15" pos:column="42"/></name><argument_list pos:line="15" pos:column="42">(<argument pos:line="15" pos:column="43">item<pos:position pos:line="15" pos:column="47"/></argument>, <argument pos:line="15" pos:column="49">&amp;data-&gt;exclude_filters<pos:position pos:line="15" pos:column="71"/></argument>)<pos:position pos:line="15" pos:column="72"/></argument_list></macro> <block pos:line="15" pos:column="73">{
			<if pos:line="16" pos:column="25">if <condition pos:line="16" pos:column="28">(<expr><call><name pos:line="16" pos:column="29">subpath_matches<pos:position pos:line="16" pos:column="44"/></name><argument_list pos:line="16" pos:column="44">(<argument><expr><name pos:line="16" pos:column="45">path<pos:position pos:line="16" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="51">item<pos:position pos:line="16" pos:column="55"/></name><operator pos:line="16" pos:column="55">-&gt;<pos:position pos:line="16" pos:column="60"/></operator><name pos:line="16" pos:column="57">string<pos:position pos:line="16" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="64"/></argument_list></call> <operator pos:line="16" pos:column="65">&gt;=<pos:position pos:line="16" pos:column="70"/></operator> <literal type="number" pos:line="16" pos:column="68">0<pos:position pos:line="16" pos:column="69"/></literal></expr>)<pos:position pos:line="16" pos:column="70"/></condition><then pos:line="16" pos:column="70">
				<block type="pseudo"><return pos:line="17" pos:column="33">return <expr><literal type="number" pos:line="17" pos:column="40">0<pos:position pos:line="17" pos:column="41"/></literal></expr>;<pos:position pos:line="17" pos:column="42"/></return></block></then></if>
		}<pos:position pos:line="18" pos:column="18"/></block>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name><name pos:line="21" pos:column="13">data<pos:position pos:line="21" pos:column="17"/></name><operator pos:line="21" pos:column="17">-&gt;<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="19">ref_filters<pos:position pos:line="21" pos:column="30"/></name><operator pos:line="21" pos:column="30">.<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="31">nr<pos:position pos:line="21" pos:column="33"/></name></name></expr>)<pos:position pos:line="21" pos:column="34"/></condition><then pos:line="21" pos:column="34"> <block pos:line="21" pos:column="35">{
		<decl_stmt><decl><type><name><name pos:line="22" pos:column="17">struct<pos:position pos:line="22" pos:column="23"/></name> <name pos:line="22" pos:column="24">string_list_item<pos:position pos:line="22" pos:column="40"/></name></name> <modifier pos:line="22" pos:column="41">*<pos:position pos:line="22" pos:column="42"/></modifier></type><name pos:line="22" pos:column="42">item<pos:position pos:line="22" pos:column="46"/></name></decl>;<pos:position pos:line="22" pos:column="47"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">int<pos:position pos:line="23" pos:column="20"/></name></type> <name pos:line="23" pos:column="21">matched<pos:position pos:line="23" pos:column="28"/></name> <init pos:line="23" pos:column="29">= <expr><literal type="number" pos:line="23" pos:column="31">0<pos:position pos:line="23" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="23" pos:column="33"/></decl_stmt>

		<comment type="block" pos:line="25" pos:column="17">/* See if any of the patterns match. */</comment>
		<macro><name pos:line="26" pos:column="17">for_each_string_list_item<pos:position pos:line="26" pos:column="42"/></name><argument_list pos:line="26" pos:column="42">(<argument pos:line="26" pos:column="43">item<pos:position pos:line="26" pos:column="47"/></argument>, <argument pos:line="26" pos:column="49">&amp;data-&gt;ref_filters<pos:position pos:line="26" pos:column="67"/></argument>)<pos:position pos:line="26" pos:column="68"/></argument_list></macro> <block pos:line="26" pos:column="69">{
			<comment type="block" pos:line="27" pos:column="25">/*
			 * Check all patterns even after finding a match, so
			 * that we can see if a match with a subpath exists.
			 * When a user asked for 'refs/tags/v*' and 'v1.*',
			 * both of which match, the user is showing her
			 * willingness to accept a shortened output by having
			 * the 'v1.*' in the acceptable refnames, so we
			 * shouldn't stop when seeing 'refs/tags/v1.4' matches
			 * 'refs/tags/v*'.  We should show it as 'v1.4'.
			 */</comment>
			<switch pos:line="37" pos:column="25">switch <condition pos:line="37" pos:column="32">(<expr><call><name pos:line="37" pos:column="33">subpath_matches<pos:position pos:line="37" pos:column="48"/></name><argument_list pos:line="37" pos:column="48">(<argument><expr><name pos:line="37" pos:column="49">path<pos:position pos:line="37" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="55">item<pos:position pos:line="37" pos:column="59"/></name><operator pos:line="37" pos:column="59">-&gt;<pos:position pos:line="37" pos:column="64"/></operator><name pos:line="37" pos:column="61">string<pos:position pos:line="37" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="69"/></condition> <block pos:line="37" pos:column="70">{
			<case pos:line="38" pos:column="25">case <expr><operator pos:line="38" pos:column="30">-<pos:position pos:line="38" pos:column="31"/></operator><literal type="number" pos:line="38" pos:column="31">1<pos:position pos:line="38" pos:column="32"/></literal></expr>:<pos:position pos:line="38" pos:column="33"/></case> <comment type="block" pos:line="38" pos:column="34">/* did not match */</comment>
				<break pos:line="39" pos:column="33">break;<pos:position pos:line="39" pos:column="39"/></break>
			<case pos:line="40" pos:column="25">case <expr><literal type="number" pos:line="40" pos:column="30">0<pos:position pos:line="40" pos:column="31"/></literal></expr>:<pos:position pos:line="40" pos:column="32"/></case> <comment type="block" pos:line="40" pos:column="33">/* matched fully */</comment>
				<expr_stmt><expr><name pos:line="41" pos:column="33">matched<pos:position pos:line="41" pos:column="40"/></name> <operator pos:line="41" pos:column="41">=<pos:position pos:line="41" pos:column="42"/></operator> <literal type="number" pos:line="41" pos:column="43">1<pos:position pos:line="41" pos:column="44"/></literal></expr>;<pos:position pos:line="41" pos:column="45"/></expr_stmt>
				<break pos:line="42" pos:column="33">break;<pos:position pos:line="42" pos:column="39"/></break>
			<default pos:line="43" pos:column="25">default:<pos:position pos:line="43" pos:column="33"/></default> <comment type="block" pos:line="43" pos:column="34">/* matched subpath */</comment>
				<expr_stmt><expr><name pos:line="44" pos:column="33">matched<pos:position pos:line="44" pos:column="40"/></name> <operator pos:line="44" pos:column="41">=<pos:position pos:line="44" pos:column="42"/></operator> <literal type="number" pos:line="44" pos:column="43">1<pos:position pos:line="44" pos:column="44"/></literal></expr>;<pos:position pos:line="44" pos:column="45"/></expr_stmt>
				<expr_stmt><expr><name pos:line="45" pos:column="33">can_abbreviate_output<pos:position pos:line="45" pos:column="54"/></name> <operator pos:line="45" pos:column="55">=<pos:position pos:line="45" pos:column="56"/></operator> <literal type="number" pos:line="45" pos:column="57">1<pos:position pos:line="45" pos:column="58"/></literal></expr>;<pos:position pos:line="45" pos:column="59"/></expr_stmt>
				<break pos:line="46" pos:column="33">break;<pos:position pos:line="46" pos:column="39"/></break>
			}<pos:position pos:line="47" pos:column="26"/></block></switch>
		}<pos:position pos:line="48" pos:column="18"/></block>

		<comment type="block" pos:line="50" pos:column="17">/* If none of the patterns matched, stop now */</comment>
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><operator pos:line="51" pos:column="21">!<pos:position pos:line="51" pos:column="22"/></operator><name pos:line="51" pos:column="22">matched<pos:position pos:line="51" pos:column="29"/></name></expr>)<pos:position pos:line="51" pos:column="30"/></condition><then pos:line="51" pos:column="30">
			<block type="pseudo"><return pos:line="52" pos:column="25">return <expr><literal type="number" pos:line="52" pos:column="32">0<pos:position pos:line="52" pos:column="33"/></literal></expr>;<pos:position pos:line="52" pos:column="34"/></return></block></then></if>
	}<pos:position pos:line="53" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="55" pos:column="9">add_to_tip_table<pos:position pos:line="55" pos:column="25"/></name><argument_list pos:line="55" pos:column="25">(<argument><expr><name pos:line="55" pos:column="26">oid<pos:position pos:line="55" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="31">path<pos:position pos:line="55" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="37">can_abbreviate_output<pos:position pos:line="55" pos:column="58"/></name></expr></argument>)<pos:position pos:line="55" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="60"/></expr_stmt>

	<while pos:line="57" pos:column="9">while <condition pos:line="57" pos:column="15">(<expr><name pos:line="57" pos:column="16">o<pos:position pos:line="57" pos:column="17"/></name> <operator pos:line="57" pos:column="18">&amp;&amp;<pos:position pos:line="57" pos:column="28"/></operator> <name><name pos:line="57" pos:column="21">o<pos:position pos:line="57" pos:column="22"/></name><operator pos:line="57" pos:column="22">-&gt;<pos:position pos:line="57" pos:column="27"/></operator><name pos:line="57" pos:column="24">type<pos:position pos:line="57" pos:column="28"/></name></name> <operator pos:line="57" pos:column="29">==<pos:position pos:line="57" pos:column="31"/></operator> <name pos:line="57" pos:column="32">OBJ_TAG<pos:position pos:line="57" pos:column="39"/></name></expr>)<pos:position pos:line="57" pos:column="40"/></condition> <block pos:line="57" pos:column="41">{
		<decl_stmt><decl><type><name><name pos:line="58" pos:column="17">struct<pos:position pos:line="58" pos:column="23"/></name> <name pos:line="58" pos:column="24">tag<pos:position pos:line="58" pos:column="27"/></name></name> <modifier pos:line="58" pos:column="28">*<pos:position pos:line="58" pos:column="29"/></modifier></type><name pos:line="58" pos:column="29">t<pos:position pos:line="58" pos:column="30"/></name> <init pos:line="58" pos:column="31">= <expr><operator pos:line="58" pos:column="33">(<pos:position pos:line="58" pos:column="34"/></operator>struct <name pos:line="58" pos:column="41">tag<pos:position pos:line="58" pos:column="44"/></name> <operator pos:line="58" pos:column="45">*<pos:position pos:line="58" pos:column="46"/></operator><operator pos:line="58" pos:column="46">)<pos:position pos:line="58" pos:column="47"/></operator> <name pos:line="58" pos:column="48">o<pos:position pos:line="58" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="58" pos:column="50"/></decl_stmt>
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><operator pos:line="59" pos:column="21">!<pos:position pos:line="59" pos:column="22"/></operator><name><name pos:line="59" pos:column="22">t<pos:position pos:line="59" pos:column="23"/></name><operator pos:line="59" pos:column="23">-&gt;<pos:position pos:line="59" pos:column="28"/></operator><name pos:line="59" pos:column="25">tagged<pos:position pos:line="59" pos:column="31"/></name></name></expr>)<pos:position pos:line="59" pos:column="32"/></condition><then pos:line="59" pos:column="32">
			<block type="pseudo"><break pos:line="60" pos:column="25">break;<pos:position pos:line="60" pos:column="31"/></break></block></then></if> <comment type="block" pos:line="60" pos:column="32">/* broken repository */</comment>
		<expr_stmt><expr><name pos:line="61" pos:column="17">o<pos:position pos:line="61" pos:column="18"/></name> <operator pos:line="61" pos:column="19">=<pos:position pos:line="61" pos:column="20"/></operator> <call><name pos:line="61" pos:column="21">parse_object<pos:position pos:line="61" pos:column="33"/></name><argument_list pos:line="61" pos:column="33">(<argument><expr><operator pos:line="61" pos:column="34">&amp;<pos:position pos:line="61" pos:column="39"/></operator><name><name pos:line="61" pos:column="35">t<pos:position pos:line="61" pos:column="36"/></name><operator pos:line="61" pos:column="36">-&gt;<pos:position pos:line="61" pos:column="41"/></operator><name pos:line="61" pos:column="38">tagged<pos:position pos:line="61" pos:column="44"/></name><operator pos:line="61" pos:column="44">-&gt;<pos:position pos:line="61" pos:column="49"/></operator><name pos:line="61" pos:column="46">oid<pos:position pos:line="61" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="61" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><name pos:line="62" pos:column="17">deref<pos:position pos:line="62" pos:column="22"/></name> <operator pos:line="62" pos:column="23">=<pos:position pos:line="62" pos:column="24"/></operator> <literal type="number" pos:line="62" pos:column="25">1<pos:position pos:line="62" pos:column="26"/></literal></expr>;<pos:position pos:line="62" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="63" pos:column="17">taggerdate<pos:position pos:line="63" pos:column="27"/></name> <operator pos:line="63" pos:column="28">=<pos:position pos:line="63" pos:column="29"/></operator> <name><name pos:line="63" pos:column="30">t<pos:position pos:line="63" pos:column="31"/></name><operator pos:line="63" pos:column="31">-&gt;<pos:position pos:line="63" pos:column="36"/></operator><name pos:line="63" pos:column="33">date<pos:position pos:line="63" pos:column="37"/></name></name></expr>;<pos:position pos:line="63" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="64" pos:column="10"/></block></while>
	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><name pos:line="65" pos:column="13">o<pos:position pos:line="65" pos:column="14"/></name> <operator pos:line="65" pos:column="15">&amp;&amp;<pos:position pos:line="65" pos:column="25"/></operator> <name><name pos:line="65" pos:column="18">o<pos:position pos:line="65" pos:column="19"/></name><operator pos:line="65" pos:column="19">-&gt;<pos:position pos:line="65" pos:column="24"/></operator><name pos:line="65" pos:column="21">type<pos:position pos:line="65" pos:column="25"/></name></name> <operator pos:line="65" pos:column="26">==<pos:position pos:line="65" pos:column="28"/></operator> <name pos:line="65" pos:column="29">OBJ_COMMIT<pos:position pos:line="65" pos:column="39"/></name></expr>)<pos:position pos:line="65" pos:column="40"/></condition><then pos:line="65" pos:column="40"> <block pos:line="65" pos:column="41">{
		<decl_stmt><decl><type><name><name pos:line="66" pos:column="17">struct<pos:position pos:line="66" pos:column="23"/></name> <name pos:line="66" pos:column="24">commit<pos:position pos:line="66" pos:column="30"/></name></name> <modifier pos:line="66" pos:column="31">*<pos:position pos:line="66" pos:column="32"/></modifier></type><name pos:line="66" pos:column="32">commit<pos:position pos:line="66" pos:column="38"/></name> <init pos:line="66" pos:column="39">= <expr><operator pos:line="66" pos:column="41">(<pos:position pos:line="66" pos:column="42"/></operator>struct <name pos:line="66" pos:column="49">commit<pos:position pos:line="66" pos:column="55"/></name> <operator pos:line="66" pos:column="56">*<pos:position pos:line="66" pos:column="57"/></operator><operator pos:line="66" pos:column="57">)<pos:position pos:line="66" pos:column="58"/></operator><name pos:line="66" pos:column="58">o<pos:position pos:line="66" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="66" pos:column="60"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="67" pos:column="17">int<pos:position pos:line="67" pos:column="20"/></name></type> <name pos:line="67" pos:column="21">from_tag<pos:position pos:line="67" pos:column="29"/></name> <init pos:line="67" pos:column="30">= <expr><call><name pos:line="67" pos:column="32">starts_with<pos:position pos:line="67" pos:column="43"/></name><argument_list pos:line="67" pos:column="43">(<argument><expr><name pos:line="67" pos:column="44">path<pos:position pos:line="67" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="50">"refs/tags/"<pos:position pos:line="67" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="67" pos:column="64"/></decl_stmt>

		<if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><name pos:line="69" pos:column="21">taggerdate<pos:position pos:line="69" pos:column="31"/></name> <operator pos:line="69" pos:column="32">==<pos:position pos:line="69" pos:column="34"/></operator> <name pos:line="69" pos:column="35">ULONG_MAX<pos:position pos:line="69" pos:column="44"/></name></expr>)<pos:position pos:line="69" pos:column="45"/></condition><then pos:line="69" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><name pos:line="70" pos:column="25">taggerdate<pos:position pos:line="70" pos:column="35"/></name> <operator pos:line="70" pos:column="36">=<pos:position pos:line="70" pos:column="37"/></operator> <operator pos:line="70" pos:column="38">(<pos:position pos:line="70" pos:column="39"/></operator><operator pos:line="70" pos:column="39">(<pos:position pos:line="70" pos:column="40"/></operator>struct <name pos:line="70" pos:column="47">commit<pos:position pos:line="70" pos:column="53"/></name> <operator pos:line="70" pos:column="54">*<pos:position pos:line="70" pos:column="55"/></operator><operator pos:line="70" pos:column="55">)<pos:position pos:line="70" pos:column="56"/></operator><name pos:line="70" pos:column="56">o<pos:position pos:line="70" pos:column="57"/></name><operator pos:line="70" pos:column="57">)<pos:position pos:line="70" pos:column="58"/></operator><operator pos:line="70" pos:column="58">-&gt;<pos:position pos:line="70" pos:column="63"/></operator><name pos:line="70" pos:column="60">date<pos:position pos:line="70" pos:column="64"/></name></expr>;<pos:position pos:line="70" pos:column="65"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="71" pos:column="17">path<pos:position pos:line="71" pos:column="21"/></name> <operator pos:line="71" pos:column="22">=<pos:position pos:line="71" pos:column="23"/></operator> <call><name pos:line="71" pos:column="24">name_ref_abbrev<pos:position pos:line="71" pos:column="39"/></name><argument_list pos:line="71" pos:column="39">(<argument><expr><name pos:line="71" pos:column="40">path<pos:position pos:line="71" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="46">can_abbreviate_output<pos:position pos:line="71" pos:column="67"/></name></expr></argument>)<pos:position pos:line="71" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="69"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="72" pos:column="17">name_rev<pos:position pos:line="72" pos:column="25"/></name><argument_list pos:line="72" pos:column="25">(<argument><expr><name pos:line="72" pos:column="26">commit<pos:position pos:line="72" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="72" pos:column="34">xstrdup<pos:position pos:line="72" pos:column="41"/></name><argument_list pos:line="72" pos:column="41">(<argument><expr><name pos:line="72" pos:column="42">path<pos:position pos:line="72" pos:column="46"/></name></expr></argument>)<pos:position pos:line="72" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="72" pos:column="49">taggerdate<pos:position pos:line="72" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="72" pos:column="61">0<pos:position pos:line="72" pos:column="62"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="72" pos:column="64">0<pos:position pos:line="72" pos:column="65"/></literal></expr></argument>,
			 <argument><expr><name pos:line="73" pos:column="26">from_tag<pos:position pos:line="73" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="36">deref<pos:position pos:line="73" pos:column="41"/></name></expr></argument>)<pos:position pos:line="73" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="74" pos:column="10"/></block></then></if>
	<return pos:line="75" pos:column="9">return <expr><literal type="number" pos:line="75" pos:column="16">0<pos:position pos:line="75" pos:column="17"/></literal></expr>;<pos:position pos:line="75" pos:column="18"/></return>
}<pos:position pos:line="76" pos:column="2"/></block></function></unit>
