<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2566_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">unquote_comment<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">strbuf<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">outbuf<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="59">const<pos:position pos:line="1" pos:column="64"/></specifier> <name pos:line="1" pos:column="65">char<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">in<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">c<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">take_next_literally<pos:position pos:line="4" pos:column="32"/></name> <init pos:line="4" pos:column="33">= <expr><literal type="number" pos:line="4" pos:column="35">0<pos:position pos:line="4" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">strbuf_addch<pos:position pos:line="6" pos:column="21"/></name><argument_list pos:line="6" pos:column="21">(<argument><expr><name pos:line="6" pos:column="22">outbuf<pos:position pos:line="6" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="6" pos:column="30">'('<pos:position pos:line="6" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="35"/></expr_stmt>

	<while pos:line="8" pos:column="9">while <condition pos:line="8" pos:column="15">(<expr><operator pos:line="8" pos:column="16">(<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">c<pos:position pos:line="8" pos:column="18"/></name> <operator pos:line="8" pos:column="19">=<pos:position pos:line="8" pos:column="20"/></operator> <operator pos:line="8" pos:column="21">*<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">in<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">++<pos:position pos:line="8" pos:column="26"/></operator><operator pos:line="8" pos:column="26">)<pos:position pos:line="8" pos:column="27"/></operator> <operator pos:line="8" pos:column="28">!=<pos:position pos:line="8" pos:column="30"/></operator> <literal type="number" pos:line="8" pos:column="31">0<pos:position pos:line="8" pos:column="32"/></literal></expr>)<pos:position pos:line="8" pos:column="33"/></condition> <block pos:line="8" pos:column="34">{
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">take_next_literally<pos:position pos:line="9" pos:column="40"/></name> <operator pos:line="9" pos:column="41">==<pos:position pos:line="9" pos:column="43"/></operator> <literal type="number" pos:line="9" pos:column="44">1<pos:position pos:line="9" pos:column="45"/></literal></expr>)<pos:position pos:line="9" pos:column="46"/></condition><then pos:line="9" pos:column="46"> <block pos:line="9" pos:column="47">{
			<expr_stmt><expr><name pos:line="10" pos:column="25">take_next_literally<pos:position pos:line="10" pos:column="44"/></name> <operator pos:line="10" pos:column="45">=<pos:position pos:line="10" pos:column="46"/></operator> <literal type="number" pos:line="10" pos:column="47">0<pos:position pos:line="10" pos:column="48"/></literal></expr>;<pos:position pos:line="10" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="11" pos:column="18"/></block></then> <else pos:line="11" pos:column="19">else <block pos:line="11" pos:column="24">{
			<switch pos:line="12" pos:column="25">switch <condition pos:line="12" pos:column="32">(<expr><name pos:line="12" pos:column="33">c<pos:position pos:line="12" pos:column="34"/></name></expr>)<pos:position pos:line="12" pos:column="35"/></condition> <block pos:line="12" pos:column="36">{
			<case pos:line="13" pos:column="25">case <expr><literal type="char" pos:line="13" pos:column="30">'\\'<pos:position pos:line="13" pos:column="34"/></literal></expr>:<pos:position pos:line="13" pos:column="35"/></case>
				<expr_stmt><expr><name pos:line="14" pos:column="33">take_next_literally<pos:position pos:line="14" pos:column="52"/></name> <operator pos:line="14" pos:column="53">=<pos:position pos:line="14" pos:column="54"/></operator> <literal type="number" pos:line="14" pos:column="55">1<pos:position pos:line="14" pos:column="56"/></literal></expr>;<pos:position pos:line="14" pos:column="57"/></expr_stmt>
				<continue pos:line="15" pos:column="33">continue;<pos:position pos:line="15" pos:column="42"/></continue>
			<case pos:line="16" pos:column="25">case <expr><literal type="char" pos:line="16" pos:column="30">'('<pos:position pos:line="16" pos:column="33"/></literal></expr>:<pos:position pos:line="16" pos:column="34"/></case>
				<expr_stmt><expr><name pos:line="17" pos:column="33">in<pos:position pos:line="17" pos:column="35"/></name> <operator pos:line="17" pos:column="36">=<pos:position pos:line="17" pos:column="37"/></operator> <call><name pos:line="17" pos:column="38">unquote_comment<pos:position pos:line="17" pos:column="53"/></name><argument_list pos:line="17" pos:column="53">(<argument><expr><name pos:line="17" pos:column="54">outbuf<pos:position pos:line="17" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="62">in<pos:position pos:line="17" pos:column="64"/></name></expr></argument>)<pos:position pos:line="17" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="66"/></expr_stmt>
				<continue pos:line="18" pos:column="33">continue;<pos:position pos:line="18" pos:column="42"/></continue>
			<case pos:line="19" pos:column="25">case <expr><literal type="char" pos:line="19" pos:column="30">')'<pos:position pos:line="19" pos:column="33"/></literal></expr>:<pos:position pos:line="19" pos:column="34"/></case>
				<expr_stmt><expr><call><name pos:line="20" pos:column="33">strbuf_addch<pos:position pos:line="20" pos:column="45"/></name><argument_list pos:line="20" pos:column="45">(<argument><expr><name pos:line="20" pos:column="46">outbuf<pos:position pos:line="20" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="20" pos:column="54">')'<pos:position pos:line="20" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="59"/></expr_stmt>
				<return pos:line="21" pos:column="33">return <expr><name pos:line="21" pos:column="40">in<pos:position pos:line="21" pos:column="42"/></name></expr>;<pos:position pos:line="21" pos:column="43"/></return>
			}<pos:position pos:line="22" pos:column="26"/></block></switch>
		}<pos:position pos:line="23" pos:column="18"/></block></else></if>

		<expr_stmt><expr><call><name pos:line="25" pos:column="17">strbuf_addch<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><name pos:line="25" pos:column="30">outbuf<pos:position pos:line="25" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="38">c<pos:position pos:line="25" pos:column="39"/></name></expr></argument>)<pos:position pos:line="25" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="41"/></expr_stmt>
	}<pos:position pos:line="26" pos:column="10"/></block></while>

	<return pos:line="28" pos:column="9">return <expr><name pos:line="28" pos:column="16">in<pos:position pos:line="28" pos:column="18"/></name></expr>;<pos:position pos:line="28" pos:column="19"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
