<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5911_git-2.4.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bin_tree_t<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type>
<name pos:line="2" pos:column="1">parse_expression<pos:position pos:line="2" pos:column="17"/></name> <parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">re_string_t<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">regexp<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">regex_t<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">preg<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="55">re_token_t<pos:position pos:line="2" pos:column="65"/></name> <modifier pos:line="2" pos:column="66">*<pos:position pos:line="2" pos:column="67"/></modifier></type><name pos:line="2" pos:column="67">token<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>,
		  <parameter><decl><type><name pos:line="3" pos:column="19">reg_syntax_t<pos:position pos:line="3" pos:column="31"/></name></type> <name pos:line="3" pos:column="32">syntax<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="40">int<pos:position pos:line="3" pos:column="43"/></name></type> <name pos:line="3" pos:column="44">nest<pos:position pos:line="3" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="50">reg_errcode_t<pos:position pos:line="3" pos:column="63"/></name> <modifier pos:line="3" pos:column="64">*<pos:position pos:line="3" pos:column="65"/></modifier></type><name pos:line="3" pos:column="65">err<pos:position pos:line="3" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="69"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">re_dfa_t<pos:position pos:line="5" pos:column="11"/></name> <modifier pos:line="5" pos:column="12">*<pos:position pos:line="5" pos:column="13"/></modifier></type><name pos:line="5" pos:column="13">dfa<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><operator pos:line="5" pos:column="19">(<pos:position pos:line="5" pos:column="20"/></operator><name pos:line="5" pos:column="20">re_dfa_t<pos:position pos:line="5" pos:column="28"/></name> <operator pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></operator><operator pos:line="5" pos:column="30">)<pos:position pos:line="5" pos:column="31"/></operator> <name><name pos:line="5" pos:column="32">preg<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">-&gt;<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="38">buffer<pos:position pos:line="5" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">bin_tree_t<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">tree<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <switch pos:line="7" pos:column="3">switch <condition pos:line="7" pos:column="10">(<expr><name><name pos:line="7" pos:column="11">token<pos:position pos:line="7" pos:column="16"/></name><operator pos:line="7" pos:column="16">-&gt;<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="18">type<pos:position pos:line="7" pos:column="22"/></name></name></expr>)<pos:position pos:line="7" pos:column="23"/></condition>
    <block pos:line="8" pos:column="5">{
    <case pos:line="9" pos:column="5">case <expr><name pos:line="9" pos:column="10">CHARACTER<pos:position pos:line="9" pos:column="19"/></name></expr>:<pos:position pos:line="9" pos:column="20"/></case>
      <expr_stmt><expr><name pos:line="10" pos:column="7">tree<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <call><name pos:line="10" pos:column="14">create_token_tree<pos:position pos:line="10" pos:column="31"/></name> <argument_list pos:line="10" pos:column="32">(<argument><expr><name pos:line="10" pos:column="33">dfa<pos:position pos:line="10" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="38">NULL<pos:position pos:line="10" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="44">NULL<pos:position pos:line="10" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="50">token<pos:position pos:line="10" pos:column="55"/></name></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="57"/></expr_stmt>
      <if pos:line="11" pos:column="7">if <condition pos:line="11" pos:column="10">(<expr><call><name pos:line="11" pos:column="11">BE<pos:position pos:line="11" pos:column="13"/></name> <argument_list pos:line="11" pos:column="14">(<argument><expr><name pos:line="11" pos:column="15">tree<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">==<pos:position pos:line="11" pos:column="22"/></operator> <name pos:line="11" pos:column="23">NULL<pos:position pos:line="11" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="29">0<pos:position pos:line="11" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="32"/></condition><then pos:line="11" pos:column="32">
	<block pos:line="12" pos:column="9">{
	  <expr_stmt><expr><operator pos:line="13" pos:column="11">*<pos:position pos:line="13" pos:column="12"/></operator><name pos:line="13" pos:column="12">err<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <name pos:line="13" pos:column="18">REG_ESPACE<pos:position pos:line="13" pos:column="28"/></name></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>
	  <return pos:line="14" pos:column="11">return <expr><name pos:line="14" pos:column="18">NULL<pos:position pos:line="14" pos:column="22"/></name></expr>;<pos:position pos:line="14" pos:column="23"/></return>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>
<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="16" pos:column="22"/></name></cpp:ifdef>
      <if pos:line="17" pos:column="7">if <condition pos:line="17" pos:column="10">(<expr><name><name pos:line="17" pos:column="11">dfa<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">-&gt;<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="16">mb_cur_max<pos:position pos:line="17" pos:column="26"/></name></name> <operator pos:line="17" pos:column="27">&gt;<pos:position pos:line="17" pos:column="31"/></operator> <literal type="number" pos:line="17" pos:column="29">1<pos:position pos:line="17" pos:column="30"/></literal></expr>)<pos:position pos:line="17" pos:column="31"/></condition><then pos:line="17" pos:column="31">
	<block pos:line="18" pos:column="9">{
	  <while pos:line="19" pos:column="11">while <condition pos:line="19" pos:column="17">(<expr><operator pos:line="19" pos:column="18">!<pos:position pos:line="19" pos:column="19"/></operator><call><name pos:line="19" pos:column="19">re_string_eoi<pos:position pos:line="19" pos:column="32"/></name> <argument_list pos:line="19" pos:column="33">(<argument><expr><name pos:line="19" pos:column="34">regexp<pos:position pos:line="19" pos:column="40"/></name></expr></argument>)<pos:position pos:line="19" pos:column="41"/></argument_list></call>
		 <operator pos:line="20" pos:column="18">&amp;&amp;<pos:position pos:line="20" pos:column="28"/></operator> <operator pos:line="20" pos:column="21">!<pos:position pos:line="20" pos:column="22"/></operator><call><name pos:line="20" pos:column="22">re_string_first_byte<pos:position pos:line="20" pos:column="42"/></name> <argument_list pos:line="20" pos:column="43">(<argument><expr><name pos:line="20" pos:column="44">regexp<pos:position pos:line="20" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="20" pos:column="52">re_string_cur_idx<pos:position pos:line="20" pos:column="69"/></name> <argument_list pos:line="20" pos:column="70">(<argument><expr><name pos:line="20" pos:column="71">regexp<pos:position pos:line="20" pos:column="77"/></name></expr></argument>)<pos:position pos:line="20" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="80"/></condition>
	    <block pos:line="21" pos:column="13">{
	      <decl_stmt><decl><type><name pos:line="22" pos:column="15">bin_tree_t<pos:position pos:line="22" pos:column="25"/></name> <modifier pos:line="22" pos:column="26">*<pos:position pos:line="22" pos:column="27"/></modifier></type><name pos:line="22" pos:column="27">mbc_remain<pos:position pos:line="22" pos:column="37"/></name></decl>;<pos:position pos:line="22" pos:column="38"/></decl_stmt>
	      <expr_stmt><expr><call><name pos:line="23" pos:column="15">fetch_token<pos:position pos:line="23" pos:column="26"/></name> <argument_list pos:line="23" pos:column="27">(<argument><expr><name pos:line="23" pos:column="28">token<pos:position pos:line="23" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="35">regexp<pos:position pos:line="23" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="43">syntax<pos:position pos:line="23" pos:column="49"/></name></expr></argument>)<pos:position pos:line="23" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="51"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="24" pos:column="15">mbc_remain<pos:position pos:line="24" pos:column="25"/></name> <operator pos:line="24" pos:column="26">=<pos:position pos:line="24" pos:column="27"/></operator> <call><name pos:line="24" pos:column="28">create_token_tree<pos:position pos:line="24" pos:column="45"/></name> <argument_list pos:line="24" pos:column="46">(<argument><expr><name pos:line="24" pos:column="47">dfa<pos:position pos:line="24" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="52">NULL<pos:position pos:line="24" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="58">NULL<pos:position pos:line="24" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="64">token<pos:position pos:line="24" pos:column="69"/></name></expr></argument>)<pos:position pos:line="24" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="71"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="25" pos:column="15">tree<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">=<pos:position pos:line="25" pos:column="21"/></operator> <call><name pos:line="25" pos:column="22">create_tree<pos:position pos:line="25" pos:column="33"/></name> <argument_list pos:line="25" pos:column="34">(<argument><expr><name pos:line="25" pos:column="35">dfa<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="40">tree<pos:position pos:line="25" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="46">mbc_remain<pos:position pos:line="25" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="58">CONCAT<pos:position pos:line="25" pos:column="64"/></name></expr></argument>)<pos:position pos:line="25" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="66"/></expr_stmt>
	      <if pos:line="26" pos:column="15">if <condition pos:line="26" pos:column="18">(<expr><call><name pos:line="26" pos:column="19">BE<pos:position pos:line="26" pos:column="21"/></name> <argument_list pos:line="26" pos:column="22">(<argument><expr><name pos:line="26" pos:column="23">mbc_remain<pos:position pos:line="26" pos:column="33"/></name> <operator pos:line="26" pos:column="34">==<pos:position pos:line="26" pos:column="36"/></operator> <name pos:line="26" pos:column="37">NULL<pos:position pos:line="26" pos:column="41"/></name> <operator pos:line="26" pos:column="42">||<pos:position pos:line="26" pos:column="44"/></operator> <name pos:line="26" pos:column="45">tree<pos:position pos:line="26" pos:column="49"/></name> <operator pos:line="26" pos:column="50">==<pos:position pos:line="26" pos:column="52"/></operator> <name pos:line="26" pos:column="53">NULL<pos:position pos:line="26" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="59">0<pos:position pos:line="26" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="62"/></condition><then pos:line="26" pos:column="62">
		<block pos:line="27" pos:column="17">{
		  <expr_stmt><expr><operator pos:line="28" pos:column="19">*<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="20">err<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">=<pos:position pos:line="28" pos:column="25"/></operator> <name pos:line="28" pos:column="26">REG_ESPACE<pos:position pos:line="28" pos:column="36"/></name></expr>;<pos:position pos:line="28" pos:column="37"/></expr_stmt>
		  <return pos:line="29" pos:column="19">return <expr><name pos:line="29" pos:column="26">NULL<pos:position pos:line="29" pos:column="30"/></name></expr>;<pos:position pos:line="29" pos:column="31"/></return>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if>
	    }<pos:position pos:line="31" pos:column="14"/></block></while>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>
      <break pos:line="34" pos:column="7">break;<pos:position pos:line="34" pos:column="13"/></break>
    <case pos:line="35" pos:column="5">case <expr><name pos:line="35" pos:column="10">OP_OPEN_SUBEXP<pos:position pos:line="35" pos:column="24"/></name></expr>:<pos:position pos:line="35" pos:column="25"/></case>
      <expr_stmt><expr><name pos:line="36" pos:column="7">tree<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <call><name pos:line="36" pos:column="14">parse_sub_exp<pos:position pos:line="36" pos:column="27"/></name> <argument_list pos:line="36" pos:column="28">(<argument><expr><name pos:line="36" pos:column="29">regexp<pos:position pos:line="36" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="37">preg<pos:position pos:line="36" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="43">token<pos:position pos:line="36" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="50">syntax<pos:position pos:line="36" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="58">nest<pos:position pos:line="36" pos:column="62"/></name> <operator pos:line="36" pos:column="63">+<pos:position pos:line="36" pos:column="64"/></operator> <literal type="number" pos:line="36" pos:column="65">1<pos:position pos:line="36" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="68">err<pos:position pos:line="36" pos:column="71"/></name></expr></argument>)<pos:position pos:line="36" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="73"/></expr_stmt>
      <if pos:line="37" pos:column="7">if <condition pos:line="37" pos:column="10">(<expr><call><name pos:line="37" pos:column="11">BE<pos:position pos:line="37" pos:column="13"/></name> <argument_list pos:line="37" pos:column="14">(<argument><expr><operator pos:line="37" pos:column="15">*<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="16">err<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">!=<pos:position pos:line="37" pos:column="22"/></operator> <name pos:line="37" pos:column="23">REG_NOERROR<pos:position pos:line="37" pos:column="34"/></name> <operator pos:line="37" pos:column="35">&amp;&amp;<pos:position pos:line="37" pos:column="45"/></operator> <name pos:line="37" pos:column="38">tree<pos:position pos:line="37" pos:column="42"/></name> <operator pos:line="37" pos:column="43">==<pos:position pos:line="37" pos:column="45"/></operator> <name pos:line="37" pos:column="46">NULL<pos:position pos:line="37" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="52">0<pos:position pos:line="37" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="55"/></condition><then pos:line="37" pos:column="55">
	<block type="pseudo"><return pos:line="38" pos:column="9">return <expr><name pos:line="38" pos:column="16">NULL<pos:position pos:line="38" pos:column="20"/></name></expr>;<pos:position pos:line="38" pos:column="21"/></return></block></then></if>
      <break pos:line="39" pos:column="7">break;<pos:position pos:line="39" pos:column="13"/></break>
    <case pos:line="40" pos:column="5">case <expr><name pos:line="40" pos:column="10">OP_OPEN_BRACKET<pos:position pos:line="40" pos:column="25"/></name></expr>:<pos:position pos:line="40" pos:column="26"/></case>
      <expr_stmt><expr><name pos:line="41" pos:column="7">tree<pos:position pos:line="41" pos:column="11"/></name> <operator pos:line="41" pos:column="12">=<pos:position pos:line="41" pos:column="13"/></operator> <call><name pos:line="41" pos:column="14">parse_bracket_exp<pos:position pos:line="41" pos:column="31"/></name> <argument_list pos:line="41" pos:column="32">(<argument><expr><name pos:line="41" pos:column="33">regexp<pos:position pos:line="41" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="41">dfa<pos:position pos:line="41" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="46">token<pos:position pos:line="41" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="53">syntax<pos:position pos:line="41" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="61">err<pos:position pos:line="41" pos:column="64"/></name></expr></argument>)<pos:position pos:line="41" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="66"/></expr_stmt>
      <if pos:line="42" pos:column="7">if <condition pos:line="42" pos:column="10">(<expr><call><name pos:line="42" pos:column="11">BE<pos:position pos:line="42" pos:column="13"/></name> <argument_list pos:line="42" pos:column="14">(<argument><expr><operator pos:line="42" pos:column="15">*<pos:position pos:line="42" pos:column="16"/></operator><name pos:line="42" pos:column="16">err<pos:position pos:line="42" pos:column="19"/></name> <operator pos:line="42" pos:column="20">!=<pos:position pos:line="42" pos:column="22"/></operator> <name pos:line="42" pos:column="23">REG_NOERROR<pos:position pos:line="42" pos:column="34"/></name> <operator pos:line="42" pos:column="35">&amp;&amp;<pos:position pos:line="42" pos:column="45"/></operator> <name pos:line="42" pos:column="38">tree<pos:position pos:line="42" pos:column="42"/></name> <operator pos:line="42" pos:column="43">==<pos:position pos:line="42" pos:column="45"/></operator> <name pos:line="42" pos:column="46">NULL<pos:position pos:line="42" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="52">0<pos:position pos:line="42" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="55"/></condition><then pos:line="42" pos:column="55">
	<block type="pseudo"><return pos:line="43" pos:column="9">return <expr><name pos:line="43" pos:column="16">NULL<pos:position pos:line="43" pos:column="20"/></name></expr>;<pos:position pos:line="43" pos:column="21"/></return></block></then></if>
      <break pos:line="44" pos:column="7">break;<pos:position pos:line="44" pos:column="13"/></break>
    <case pos:line="45" pos:column="5">case <expr><name pos:line="45" pos:column="10">OP_BACK_REF<pos:position pos:line="45" pos:column="21"/></name></expr>:<pos:position pos:line="45" pos:column="22"/></case>
      <if pos:line="46" pos:column="7">if <condition pos:line="46" pos:column="10">(<expr><operator pos:line="46" pos:column="11">!<pos:position pos:line="46" pos:column="12"/></operator><call><name pos:line="46" pos:column="12">BE<pos:position pos:line="46" pos:column="14"/></name> <argument_list pos:line="46" pos:column="15">(<argument><expr><name><name pos:line="46" pos:column="16">dfa<pos:position pos:line="46" pos:column="19"/></name><operator pos:line="46" pos:column="19">-&gt;<pos:position pos:line="46" pos:column="24"/></operator><name pos:line="46" pos:column="21">completed_bkref_map<pos:position pos:line="46" pos:column="40"/></name></name> <operator pos:line="46" pos:column="41">&amp;<pos:position pos:line="46" pos:column="46"/></operator> <operator pos:line="46" pos:column="43">(<pos:position pos:line="46" pos:column="44"/></operator><literal type="number" pos:line="46" pos:column="44">1<pos:position pos:line="46" pos:column="45"/></literal> <operator pos:line="46" pos:column="46">&lt;&lt;<pos:position pos:line="46" pos:column="54"/></operator> <name><name pos:line="46" pos:column="49">token<pos:position pos:line="46" pos:column="54"/></name><operator pos:line="46" pos:column="54">-&gt;<pos:position pos:line="46" pos:column="59"/></operator><name pos:line="46" pos:column="56">opr<pos:position pos:line="46" pos:column="59"/></name><operator pos:line="46" pos:column="59">.<pos:position pos:line="46" pos:column="60"/></operator><name pos:line="46" pos:column="60">idx<pos:position pos:line="46" pos:column="63"/></name></name><operator pos:line="46" pos:column="63">)<pos:position pos:line="46" pos:column="64"/></operator></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="66">1<pos:position pos:line="46" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="69"/></condition><then pos:line="46" pos:column="69">
	<block pos:line="47" pos:column="9">{
	  <expr_stmt><expr><operator pos:line="48" pos:column="11">*<pos:position pos:line="48" pos:column="12"/></operator><name pos:line="48" pos:column="12">err<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">=<pos:position pos:line="48" pos:column="17"/></operator> <name pos:line="48" pos:column="18">REG_ESUBREG<pos:position pos:line="48" pos:column="29"/></name></expr>;<pos:position pos:line="48" pos:column="30"/></expr_stmt>
	  <return pos:line="49" pos:column="11">return <expr><name pos:line="49" pos:column="18">NULL<pos:position pos:line="49" pos:column="22"/></name></expr>;<pos:position pos:line="49" pos:column="23"/></return>
	}<pos:position pos:line="50" pos:column="10"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="51" pos:column="7">dfa<pos:position pos:line="51" pos:column="10"/></name><operator pos:line="51" pos:column="10">-&gt;<pos:position pos:line="51" pos:column="15"/></operator><name pos:line="51" pos:column="12">used_bkref_map<pos:position pos:line="51" pos:column="26"/></name></name> <operator pos:line="51" pos:column="27">|=<pos:position pos:line="51" pos:column="29"/></operator> <literal type="number" pos:line="51" pos:column="30">1<pos:position pos:line="51" pos:column="31"/></literal> <operator pos:line="51" pos:column="32">&lt;&lt;<pos:position pos:line="51" pos:column="40"/></operator> <name><name pos:line="51" pos:column="35">token<pos:position pos:line="51" pos:column="40"/></name><operator pos:line="51" pos:column="40">-&gt;<pos:position pos:line="51" pos:column="45"/></operator><name pos:line="51" pos:column="42">opr<pos:position pos:line="51" pos:column="45"/></name><operator pos:line="51" pos:column="45">.<pos:position pos:line="51" pos:column="46"/></operator><name pos:line="51" pos:column="46">idx<pos:position pos:line="51" pos:column="49"/></name></name></expr>;<pos:position pos:line="51" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><name pos:line="52" pos:column="7">tree<pos:position pos:line="52" pos:column="11"/></name> <operator pos:line="52" pos:column="12">=<pos:position pos:line="52" pos:column="13"/></operator> <call><name pos:line="52" pos:column="14">create_token_tree<pos:position pos:line="52" pos:column="31"/></name> <argument_list pos:line="52" pos:column="32">(<argument><expr><name pos:line="52" pos:column="33">dfa<pos:position pos:line="52" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="38">NULL<pos:position pos:line="52" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="44">NULL<pos:position pos:line="52" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="50">token<pos:position pos:line="52" pos:column="55"/></name></expr></argument>)<pos:position pos:line="52" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="57"/></expr_stmt>
      <if pos:line="53" pos:column="7">if <condition pos:line="53" pos:column="10">(<expr><call><name pos:line="53" pos:column="11">BE<pos:position pos:line="53" pos:column="13"/></name> <argument_list pos:line="53" pos:column="14">(<argument><expr><name pos:line="53" pos:column="15">tree<pos:position pos:line="53" pos:column="19"/></name> <operator pos:line="53" pos:column="20">==<pos:position pos:line="53" pos:column="22"/></operator> <name pos:line="53" pos:column="23">NULL<pos:position pos:line="53" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="29">0<pos:position pos:line="53" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="32"/></condition><then pos:line="53" pos:column="32">
	<block pos:line="54" pos:column="9">{
	  <expr_stmt><expr><operator pos:line="55" pos:column="11">*<pos:position pos:line="55" pos:column="12"/></operator><name pos:line="55" pos:column="12">err<pos:position pos:line="55" pos:column="15"/></name> <operator pos:line="55" pos:column="16">=<pos:position pos:line="55" pos:column="17"/></operator> <name pos:line="55" pos:column="18">REG_ESPACE<pos:position pos:line="55" pos:column="28"/></name></expr>;<pos:position pos:line="55" pos:column="29"/></expr_stmt>
	  <return pos:line="56" pos:column="11">return <expr><name pos:line="56" pos:column="18">NULL<pos:position pos:line="56" pos:column="22"/></name></expr>;<pos:position pos:line="56" pos:column="23"/></return>
	}<pos:position pos:line="57" pos:column="10"/></block></then></if>
      <expr_stmt><expr><operator pos:line="58" pos:column="7">++<pos:position pos:line="58" pos:column="9"/></operator><name><name pos:line="58" pos:column="9">dfa<pos:position pos:line="58" pos:column="12"/></name><operator pos:line="58" pos:column="12">-&gt;<pos:position pos:line="58" pos:column="17"/></operator><name pos:line="58" pos:column="14">nbackref<pos:position pos:line="58" pos:column="22"/></name></name></expr>;<pos:position pos:line="58" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="59" pos:column="7">dfa<pos:position pos:line="59" pos:column="10"/></name><operator pos:line="59" pos:column="10">-&gt;<pos:position pos:line="59" pos:column="15"/></operator><name pos:line="59" pos:column="12">has_mb_node<pos:position pos:line="59" pos:column="23"/></name></name> <operator pos:line="59" pos:column="24">=<pos:position pos:line="59" pos:column="25"/></operator> <literal type="number" pos:line="59" pos:column="26">1<pos:position pos:line="59" pos:column="27"/></literal></expr>;<pos:position pos:line="59" pos:column="28"/></expr_stmt>
      <break pos:line="60" pos:column="7">break;<pos:position pos:line="60" pos:column="13"/></break>
    <case pos:line="61" pos:column="5">case <expr><name pos:line="61" pos:column="10">OP_OPEN_DUP_NUM<pos:position pos:line="61" pos:column="25"/></name></expr>:<pos:position pos:line="61" pos:column="26"/></case>
      <if pos:line="62" pos:column="7">if <condition pos:line="62" pos:column="10">(<expr><name pos:line="62" pos:column="11">syntax<pos:position pos:line="62" pos:column="17"/></name> <operator pos:line="62" pos:column="18">&amp;<pos:position pos:line="62" pos:column="23"/></operator> <name pos:line="62" pos:column="20">RE_CONTEXT_INVALID_DUP<pos:position pos:line="62" pos:column="42"/></name></expr>)<pos:position pos:line="62" pos:column="43"/></condition><then pos:line="62" pos:column="43">
	<block pos:line="63" pos:column="9">{
	  <expr_stmt><expr><operator pos:line="64" pos:column="11">*<pos:position pos:line="64" pos:column="12"/></operator><name pos:line="64" pos:column="12">err<pos:position pos:line="64" pos:column="15"/></name> <operator pos:line="64" pos:column="16">=<pos:position pos:line="64" pos:column="17"/></operator> <name pos:line="64" pos:column="18">REG_BADRPT<pos:position pos:line="64" pos:column="28"/></name></expr>;<pos:position pos:line="64" pos:column="29"/></expr_stmt>
	  <return pos:line="65" pos:column="11">return <expr><name pos:line="65" pos:column="18">NULL<pos:position pos:line="65" pos:column="22"/></name></expr>;<pos:position pos:line="65" pos:column="23"/></return>
	}<pos:position pos:line="66" pos:column="10"/></block></then></if>
      <comment type="block" pos:line="67" pos:column="7">/* FALLTHROUGH */</comment>
    <case pos:line="68" pos:column="5">case <expr><name pos:line="68" pos:column="10">OP_DUP_ASTERISK<pos:position pos:line="68" pos:column="25"/></name></expr>:<pos:position pos:line="68" pos:column="26"/></case>
    <case pos:line="69" pos:column="5">case <expr><name pos:line="69" pos:column="10">OP_DUP_PLUS<pos:position pos:line="69" pos:column="21"/></name></expr>:<pos:position pos:line="69" pos:column="22"/></case>
    <case pos:line="70" pos:column="5">case <expr><name pos:line="70" pos:column="10">OP_DUP_QUESTION<pos:position pos:line="70" pos:column="25"/></name></expr>:<pos:position pos:line="70" pos:column="26"/></case>
      <if pos:line="71" pos:column="7">if <condition pos:line="71" pos:column="10">(<expr><name pos:line="71" pos:column="11">syntax<pos:position pos:line="71" pos:column="17"/></name> <operator pos:line="71" pos:column="18">&amp;<pos:position pos:line="71" pos:column="23"/></operator> <name pos:line="71" pos:column="20">RE_CONTEXT_INVALID_OPS<pos:position pos:line="71" pos:column="42"/></name></expr>)<pos:position pos:line="71" pos:column="43"/></condition><then pos:line="71" pos:column="43">
	<block pos:line="72" pos:column="9">{
	  <expr_stmt><expr><operator pos:line="73" pos:column="11">*<pos:position pos:line="73" pos:column="12"/></operator><name pos:line="73" pos:column="12">err<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">=<pos:position pos:line="73" pos:column="17"/></operator> <name pos:line="73" pos:column="18">REG_BADRPT<pos:position pos:line="73" pos:column="28"/></name></expr>;<pos:position pos:line="73" pos:column="29"/></expr_stmt>
	  <return pos:line="74" pos:column="11">return <expr><name pos:line="74" pos:column="18">NULL<pos:position pos:line="74" pos:column="22"/></name></expr>;<pos:position pos:line="74" pos:column="23"/></return>
	}<pos:position pos:line="75" pos:column="10"/></block></then>
      <elseif pos:line="76" pos:column="7">else <if pos:line="76" pos:column="12">if <condition pos:line="76" pos:column="15">(<expr><name pos:line="76" pos:column="16">syntax<pos:position pos:line="76" pos:column="22"/></name> <operator pos:line="76" pos:column="23">&amp;<pos:position pos:line="76" pos:column="28"/></operator> <name pos:line="76" pos:column="25">RE_CONTEXT_INDEP_OPS<pos:position pos:line="76" pos:column="45"/></name></expr>)<pos:position pos:line="76" pos:column="46"/></condition><then pos:line="76" pos:column="46">
	<block pos:line="77" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="78" pos:column="11">fetch_token<pos:position pos:line="78" pos:column="22"/></name> <argument_list pos:line="78" pos:column="23">(<argument><expr><name pos:line="78" pos:column="24">token<pos:position pos:line="78" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="31">regexp<pos:position pos:line="78" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="39">syntax<pos:position pos:line="78" pos:column="45"/></name></expr></argument>)<pos:position pos:line="78" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="47"/></expr_stmt>
	  <return pos:line="79" pos:column="11">return <expr><call><name pos:line="79" pos:column="18">parse_expression<pos:position pos:line="79" pos:column="34"/></name> <argument_list pos:line="79" pos:column="35">(<argument><expr><name pos:line="79" pos:column="36">regexp<pos:position pos:line="79" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="44">preg<pos:position pos:line="79" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="50">token<pos:position pos:line="79" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="57">syntax<pos:position pos:line="79" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="65">nest<pos:position pos:line="79" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="71">err<pos:position pos:line="79" pos:column="74"/></name></expr></argument>)<pos:position pos:line="79" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="76"/></return>
	}<pos:position pos:line="80" pos:column="10"/></block></then></if></elseif></if>
      <comment type="block" pos:line="81" pos:column="7">/* else fall through  */</comment>
    <case pos:line="82" pos:column="5">case <expr><name pos:line="82" pos:column="10">OP_CLOSE_SUBEXP<pos:position pos:line="82" pos:column="25"/></name></expr>:<pos:position pos:line="82" pos:column="26"/></case>
      <if pos:line="83" pos:column="7">if <condition pos:line="83" pos:column="10">(<expr><operator pos:line="83" pos:column="11">(<pos:position pos:line="83" pos:column="12"/></operator><name><name pos:line="83" pos:column="12">token<pos:position pos:line="83" pos:column="17"/></name><operator pos:line="83" pos:column="17">-&gt;<pos:position pos:line="83" pos:column="22"/></operator><name pos:line="83" pos:column="19">type<pos:position pos:line="83" pos:column="23"/></name></name> <operator pos:line="83" pos:column="24">==<pos:position pos:line="83" pos:column="26"/></operator> <name pos:line="83" pos:column="27">OP_CLOSE_SUBEXP<pos:position pos:line="83" pos:column="42"/></name><operator pos:line="83" pos:column="42">)<pos:position pos:line="83" pos:column="43"/></operator> <operator pos:line="83" pos:column="44">&amp;&amp;<pos:position pos:line="83" pos:column="54"/></operator>
	  <operator pos:line="84" pos:column="11">!<pos:position pos:line="84" pos:column="12"/></operator><operator pos:line="84" pos:column="12">(<pos:position pos:line="84" pos:column="13"/></operator><name pos:line="84" pos:column="13">syntax<pos:position pos:line="84" pos:column="19"/></name> <operator pos:line="84" pos:column="20">&amp;<pos:position pos:line="84" pos:column="25"/></operator> <name pos:line="84" pos:column="22">RE_UNMATCHED_RIGHT_PAREN_ORD<pos:position pos:line="84" pos:column="50"/></name><operator pos:line="84" pos:column="50">)<pos:position pos:line="84" pos:column="51"/></operator></expr>)<pos:position pos:line="84" pos:column="52"/></condition><then pos:line="84" pos:column="52">
	<block pos:line="85" pos:column="9">{
	  <expr_stmt><expr><operator pos:line="86" pos:column="11">*<pos:position pos:line="86" pos:column="12"/></operator><name pos:line="86" pos:column="12">err<pos:position pos:line="86" pos:column="15"/></name> <operator pos:line="86" pos:column="16">=<pos:position pos:line="86" pos:column="17"/></operator> <name pos:line="86" pos:column="18">REG_ERPAREN<pos:position pos:line="86" pos:column="29"/></name></expr>;<pos:position pos:line="86" pos:column="30"/></expr_stmt>
	  <return pos:line="87" pos:column="11">return <expr><name pos:line="87" pos:column="18">NULL<pos:position pos:line="87" pos:column="22"/></name></expr>;<pos:position pos:line="87" pos:column="23"/></return>
	}<pos:position pos:line="88" pos:column="10"/></block></then></if>
      <comment type="block" pos:line="89" pos:column="7">/* else fall through  */</comment>
    <case pos:line="90" pos:column="5">case <expr><name pos:line="90" pos:column="10">OP_CLOSE_DUP_NUM<pos:position pos:line="90" pos:column="26"/></name></expr>:<pos:position pos:line="90" pos:column="27"/></case>
      <comment type="block" pos:line="91" pos:column="7">/* We treat it as a normal character.  */</comment>

      <comment type="block" pos:line="93" pos:column="7">/* Then we can these characters as normal characters.  */</comment>
      <expr_stmt><expr><name><name pos:line="94" pos:column="7">token<pos:position pos:line="94" pos:column="12"/></name><operator pos:line="94" pos:column="12">-&gt;<pos:position pos:line="94" pos:column="17"/></operator><name pos:line="94" pos:column="14">type<pos:position pos:line="94" pos:column="18"/></name></name> <operator pos:line="94" pos:column="19">=<pos:position pos:line="94" pos:column="20"/></operator> <name pos:line="94" pos:column="21">CHARACTER<pos:position pos:line="94" pos:column="30"/></name></expr>;<pos:position pos:line="94" pos:column="31"/></expr_stmt>
      <comment type="block" pos:line="95" pos:column="7">/* mb_partial and word_char bits should be initialized already
	 by peek_token.  */</comment>
      <expr_stmt><expr><name pos:line="97" pos:column="7">tree<pos:position pos:line="97" pos:column="11"/></name> <operator pos:line="97" pos:column="12">=<pos:position pos:line="97" pos:column="13"/></operator> <call><name pos:line="97" pos:column="14">create_token_tree<pos:position pos:line="97" pos:column="31"/></name> <argument_list pos:line="97" pos:column="32">(<argument><expr><name pos:line="97" pos:column="33">dfa<pos:position pos:line="97" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="38">NULL<pos:position pos:line="97" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="44">NULL<pos:position pos:line="97" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="50">token<pos:position pos:line="97" pos:column="55"/></name></expr></argument>)<pos:position pos:line="97" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="57"/></expr_stmt>
      <if pos:line="98" pos:column="7">if <condition pos:line="98" pos:column="10">(<expr><call><name pos:line="98" pos:column="11">BE<pos:position pos:line="98" pos:column="13"/></name> <argument_list pos:line="98" pos:column="14">(<argument><expr><name pos:line="98" pos:column="15">tree<pos:position pos:line="98" pos:column="19"/></name> <operator pos:line="98" pos:column="20">==<pos:position pos:line="98" pos:column="22"/></operator> <name pos:line="98" pos:column="23">NULL<pos:position pos:line="98" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="98" pos:column="29">0<pos:position pos:line="98" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="98" pos:column="32"/></condition><then pos:line="98" pos:column="32">
	<block pos:line="99" pos:column="9">{
	  <expr_stmt><expr><operator pos:line="100" pos:column="11">*<pos:position pos:line="100" pos:column="12"/></operator><name pos:line="100" pos:column="12">err<pos:position pos:line="100" pos:column="15"/></name> <operator pos:line="100" pos:column="16">=<pos:position pos:line="100" pos:column="17"/></operator> <name pos:line="100" pos:column="18">REG_ESPACE<pos:position pos:line="100" pos:column="28"/></name></expr>;<pos:position pos:line="100" pos:column="29"/></expr_stmt>
	  <return pos:line="101" pos:column="11">return <expr><name pos:line="101" pos:column="18">NULL<pos:position pos:line="101" pos:column="22"/></name></expr>;<pos:position pos:line="101" pos:column="23"/></return>
	}<pos:position pos:line="102" pos:column="10"/></block></then></if>
      <break pos:line="103" pos:column="7">break;<pos:position pos:line="103" pos:column="13"/></break>
    <case pos:line="104" pos:column="5">case <expr><name pos:line="104" pos:column="10">ANCHOR<pos:position pos:line="104" pos:column="16"/></name></expr>:<pos:position pos:line="104" pos:column="17"/></case>
      <if pos:line="105" pos:column="7">if <condition pos:line="105" pos:column="10">(<expr><operator pos:line="105" pos:column="11">(<pos:position pos:line="105" pos:column="12"/></operator><name><name pos:line="105" pos:column="12">token<pos:position pos:line="105" pos:column="17"/></name><operator pos:line="105" pos:column="17">-&gt;<pos:position pos:line="105" pos:column="22"/></operator><name pos:line="105" pos:column="19">opr<pos:position pos:line="105" pos:column="22"/></name><operator pos:line="105" pos:column="22">.<pos:position pos:line="105" pos:column="23"/></operator><name pos:line="105" pos:column="23">ctx_type<pos:position pos:line="105" pos:column="31"/></name></name>
	   <operator pos:line="106" pos:column="12">&amp;<pos:position pos:line="106" pos:column="17"/></operator> <operator pos:line="106" pos:column="14">(<pos:position pos:line="106" pos:column="15"/></operator><name pos:line="106" pos:column="15">WORD_DELIM<pos:position pos:line="106" pos:column="25"/></name> <operator pos:line="106" pos:column="26">|<pos:position pos:line="106" pos:column="27"/></operator> <name pos:line="106" pos:column="28">NOT_WORD_DELIM<pos:position pos:line="106" pos:column="42"/></name> <operator pos:line="106" pos:column="43">|<pos:position pos:line="106" pos:column="44"/></operator> <name pos:line="106" pos:column="45">WORD_FIRST<pos:position pos:line="106" pos:column="55"/></name> <operator pos:line="106" pos:column="56">|<pos:position pos:line="106" pos:column="57"/></operator> <name pos:line="106" pos:column="58">WORD_LAST<pos:position pos:line="106" pos:column="67"/></name><operator pos:line="106" pos:column="67">)<pos:position pos:line="106" pos:column="68"/></operator><operator pos:line="106" pos:column="68">)<pos:position pos:line="106" pos:column="69"/></operator>
	  <operator pos:line="107" pos:column="11">&amp;&amp;<pos:position pos:line="107" pos:column="21"/></operator> <name><name pos:line="107" pos:column="14">dfa<pos:position pos:line="107" pos:column="17"/></name><operator pos:line="107" pos:column="17">-&gt;<pos:position pos:line="107" pos:column="22"/></operator><name pos:line="107" pos:column="19">word_ops_used<pos:position pos:line="107" pos:column="32"/></name></name> <operator pos:line="107" pos:column="33">==<pos:position pos:line="107" pos:column="35"/></operator> <literal type="number" pos:line="107" pos:column="36">0<pos:position pos:line="107" pos:column="37"/></literal></expr>)<pos:position pos:line="107" pos:column="38"/></condition><then pos:line="107" pos:column="38">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="108" pos:column="9">init_word_char<pos:position pos:line="108" pos:column="23"/></name> <argument_list pos:line="108" pos:column="24">(<argument><expr><name pos:line="108" pos:column="25">dfa<pos:position pos:line="108" pos:column="28"/></name></expr></argument>)<pos:position pos:line="108" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="30"/></expr_stmt></block></then></if>
      <if pos:line="109" pos:column="7">if <condition pos:line="109" pos:column="10">(<expr><name><name pos:line="109" pos:column="11">token<pos:position pos:line="109" pos:column="16"/></name><operator pos:line="109" pos:column="16">-&gt;<pos:position pos:line="109" pos:column="21"/></operator><name pos:line="109" pos:column="18">opr<pos:position pos:line="109" pos:column="21"/></name><operator pos:line="109" pos:column="21">.<pos:position pos:line="109" pos:column="22"/></operator><name pos:line="109" pos:column="22">ctx_type<pos:position pos:line="109" pos:column="30"/></name></name> <operator pos:line="109" pos:column="31">==<pos:position pos:line="109" pos:column="33"/></operator> <name pos:line="109" pos:column="34">WORD_DELIM<pos:position pos:line="109" pos:column="44"/></name>
	  <operator pos:line="110" pos:column="11">||<pos:position pos:line="110" pos:column="13"/></operator> <name><name pos:line="110" pos:column="14">token<pos:position pos:line="110" pos:column="19"/></name><operator pos:line="110" pos:column="19">-&gt;<pos:position pos:line="110" pos:column="24"/></operator><name pos:line="110" pos:column="21">opr<pos:position pos:line="110" pos:column="24"/></name><operator pos:line="110" pos:column="24">.<pos:position pos:line="110" pos:column="25"/></operator><name pos:line="110" pos:column="25">ctx_type<pos:position pos:line="110" pos:column="33"/></name></name> <operator pos:line="110" pos:column="34">==<pos:position pos:line="110" pos:column="36"/></operator> <name pos:line="110" pos:column="37">NOT_WORD_DELIM<pos:position pos:line="110" pos:column="51"/></name></expr>)<pos:position pos:line="110" pos:column="52"/></condition><then pos:line="110" pos:column="52">
	<block pos:line="111" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="112" pos:column="11">bin_tree_t<pos:position pos:line="112" pos:column="21"/></name> <modifier pos:line="112" pos:column="22">*<pos:position pos:line="112" pos:column="23"/></modifier></type><name pos:line="112" pos:column="23">tree_first<pos:position pos:line="112" pos:column="33"/></name></decl>, <modifier pos:line="112" pos:column="35">*<pos:position pos:line="112" pos:column="36"/></modifier><decl><type ref="prev"/><name pos:line="112" pos:column="36">tree_last<pos:position pos:line="112" pos:column="45"/></name></decl>;<pos:position pos:line="112" pos:column="46"/></decl_stmt>
	  <if pos:line="113" pos:column="11">if <condition pos:line="113" pos:column="14">(<expr><name><name pos:line="113" pos:column="15">token<pos:position pos:line="113" pos:column="20"/></name><operator pos:line="113" pos:column="20">-&gt;<pos:position pos:line="113" pos:column="25"/></operator><name pos:line="113" pos:column="22">opr<pos:position pos:line="113" pos:column="25"/></name><operator pos:line="113" pos:column="25">.<pos:position pos:line="113" pos:column="26"/></operator><name pos:line="113" pos:column="26">ctx_type<pos:position pos:line="113" pos:column="34"/></name></name> <operator pos:line="113" pos:column="35">==<pos:position pos:line="113" pos:column="37"/></operator> <name pos:line="113" pos:column="38">WORD_DELIM<pos:position pos:line="113" pos:column="48"/></name></expr>)<pos:position pos:line="113" pos:column="49"/></condition><then pos:line="113" pos:column="49">
	    <block pos:line="114" pos:column="13">{
	      <expr_stmt><expr><name><name pos:line="115" pos:column="15">token<pos:position pos:line="115" pos:column="20"/></name><operator pos:line="115" pos:column="20">-&gt;<pos:position pos:line="115" pos:column="25"/></operator><name pos:line="115" pos:column="22">opr<pos:position pos:line="115" pos:column="25"/></name><operator pos:line="115" pos:column="25">.<pos:position pos:line="115" pos:column="26"/></operator><name pos:line="115" pos:column="26">ctx_type<pos:position pos:line="115" pos:column="34"/></name></name> <operator pos:line="115" pos:column="35">=<pos:position pos:line="115" pos:column="36"/></operator> <name pos:line="115" pos:column="37">WORD_FIRST<pos:position pos:line="115" pos:column="47"/></name></expr>;<pos:position pos:line="115" pos:column="48"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="116" pos:column="15">tree_first<pos:position pos:line="116" pos:column="25"/></name> <operator pos:line="116" pos:column="26">=<pos:position pos:line="116" pos:column="27"/></operator> <call><name pos:line="116" pos:column="28">create_token_tree<pos:position pos:line="116" pos:column="45"/></name> <argument_list pos:line="116" pos:column="46">(<argument><expr><name pos:line="116" pos:column="47">dfa<pos:position pos:line="116" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="52">NULL<pos:position pos:line="116" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="58">NULL<pos:position pos:line="116" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="64">token<pos:position pos:line="116" pos:column="69"/></name></expr></argument>)<pos:position pos:line="116" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="71"/></expr_stmt>
	      <expr_stmt><expr><name><name pos:line="117" pos:column="15">token<pos:position pos:line="117" pos:column="20"/></name><operator pos:line="117" pos:column="20">-&gt;<pos:position pos:line="117" pos:column="25"/></operator><name pos:line="117" pos:column="22">opr<pos:position pos:line="117" pos:column="25"/></name><operator pos:line="117" pos:column="25">.<pos:position pos:line="117" pos:column="26"/></operator><name pos:line="117" pos:column="26">ctx_type<pos:position pos:line="117" pos:column="34"/></name></name> <operator pos:line="117" pos:column="35">=<pos:position pos:line="117" pos:column="36"/></operator> <name pos:line="117" pos:column="37">WORD_LAST<pos:position pos:line="117" pos:column="46"/></name></expr>;<pos:position pos:line="117" pos:column="47"/></expr_stmt>
	    }<pos:position pos:line="118" pos:column="14"/></block></then>
	  <else pos:line="119" pos:column="11">else
	    <block pos:line="120" pos:column="13">{
	      <expr_stmt><expr><name><name pos:line="121" pos:column="15">token<pos:position pos:line="121" pos:column="20"/></name><operator pos:line="121" pos:column="20">-&gt;<pos:position pos:line="121" pos:column="25"/></operator><name pos:line="121" pos:column="22">opr<pos:position pos:line="121" pos:column="25"/></name><operator pos:line="121" pos:column="25">.<pos:position pos:line="121" pos:column="26"/></operator><name pos:line="121" pos:column="26">ctx_type<pos:position pos:line="121" pos:column="34"/></name></name> <operator pos:line="121" pos:column="35">=<pos:position pos:line="121" pos:column="36"/></operator> <name pos:line="121" pos:column="37">INSIDE_WORD<pos:position pos:line="121" pos:column="48"/></name></expr>;<pos:position pos:line="121" pos:column="49"/></expr_stmt>
	      <expr_stmt><expr><name pos:line="122" pos:column="15">tree_first<pos:position pos:line="122" pos:column="25"/></name> <operator pos:line="122" pos:column="26">=<pos:position pos:line="122" pos:column="27"/></operator> <call><name pos:line="122" pos:column="28">create_token_tree<pos:position pos:line="122" pos:column="45"/></name> <argument_list pos:line="122" pos:column="46">(<argument><expr><name pos:line="122" pos:column="47">dfa<pos:position pos:line="122" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="52">NULL<pos:position pos:line="122" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="58">NULL<pos:position pos:line="122" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="64">token<pos:position pos:line="122" pos:column="69"/></name></expr></argument>)<pos:position pos:line="122" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="71"/></expr_stmt>
	      <expr_stmt><expr><name><name pos:line="123" pos:column="15">token<pos:position pos:line="123" pos:column="20"/></name><operator pos:line="123" pos:column="20">-&gt;<pos:position pos:line="123" pos:column="25"/></operator><name pos:line="123" pos:column="22">opr<pos:position pos:line="123" pos:column="25"/></name><operator pos:line="123" pos:column="25">.<pos:position pos:line="123" pos:column="26"/></operator><name pos:line="123" pos:column="26">ctx_type<pos:position pos:line="123" pos:column="34"/></name></name> <operator pos:line="123" pos:column="35">=<pos:position pos:line="123" pos:column="36"/></operator> <name pos:line="123" pos:column="37">INSIDE_NOTWORD<pos:position pos:line="123" pos:column="51"/></name></expr>;<pos:position pos:line="123" pos:column="52"/></expr_stmt>
	    }<pos:position pos:line="124" pos:column="14"/></block></else></if>
	  <expr_stmt><expr><name pos:line="125" pos:column="11">tree_last<pos:position pos:line="125" pos:column="20"/></name> <operator pos:line="125" pos:column="21">=<pos:position pos:line="125" pos:column="22"/></operator> <call><name pos:line="125" pos:column="23">create_token_tree<pos:position pos:line="125" pos:column="40"/></name> <argument_list pos:line="125" pos:column="41">(<argument><expr><name pos:line="125" pos:column="42">dfa<pos:position pos:line="125" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="47">NULL<pos:position pos:line="125" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="53">NULL<pos:position pos:line="125" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="59">token<pos:position pos:line="125" pos:column="64"/></name></expr></argument>)<pos:position pos:line="125" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="66"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="126" pos:column="11">tree<pos:position pos:line="126" pos:column="15"/></name> <operator pos:line="126" pos:column="16">=<pos:position pos:line="126" pos:column="17"/></operator> <call><name pos:line="126" pos:column="18">create_tree<pos:position pos:line="126" pos:column="29"/></name> <argument_list pos:line="126" pos:column="30">(<argument><expr><name pos:line="126" pos:column="31">dfa<pos:position pos:line="126" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="36">tree_first<pos:position pos:line="126" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="48">tree_last<pos:position pos:line="126" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="59">OP_ALT<pos:position pos:line="126" pos:column="65"/></name></expr></argument>)<pos:position pos:line="126" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="67"/></expr_stmt>
	  <if pos:line="127" pos:column="11">if <condition pos:line="127" pos:column="14">(<expr><call><name pos:line="127" pos:column="15">BE<pos:position pos:line="127" pos:column="17"/></name> <argument_list pos:line="127" pos:column="18">(<argument><expr><name pos:line="127" pos:column="19">tree_first<pos:position pos:line="127" pos:column="29"/></name> <operator pos:line="127" pos:column="30">==<pos:position pos:line="127" pos:column="32"/></operator> <name pos:line="127" pos:column="33">NULL<pos:position pos:line="127" pos:column="37"/></name> <operator pos:line="127" pos:column="38">||<pos:position pos:line="127" pos:column="40"/></operator> <name pos:line="127" pos:column="41">tree_last<pos:position pos:line="127" pos:column="50"/></name> <operator pos:line="127" pos:column="51">==<pos:position pos:line="127" pos:column="53"/></operator> <name pos:line="127" pos:column="54">NULL<pos:position pos:line="127" pos:column="58"/></name> <operator pos:line="127" pos:column="59">||<pos:position pos:line="127" pos:column="61"/></operator> <name pos:line="127" pos:column="62">tree<pos:position pos:line="127" pos:column="66"/></name> <operator pos:line="127" pos:column="67">==<pos:position pos:line="127" pos:column="69"/></operator> <name pos:line="127" pos:column="70">NULL<pos:position pos:line="127" pos:column="74"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="127" pos:column="76">0<pos:position pos:line="127" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="127" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="127" pos:column="79"/></condition><then pos:line="127" pos:column="79">
	    <block pos:line="128" pos:column="13">{
	      <expr_stmt><expr><operator pos:line="129" pos:column="15">*<pos:position pos:line="129" pos:column="16"/></operator><name pos:line="129" pos:column="16">err<pos:position pos:line="129" pos:column="19"/></name> <operator pos:line="129" pos:column="20">=<pos:position pos:line="129" pos:column="21"/></operator> <name pos:line="129" pos:column="22">REG_ESPACE<pos:position pos:line="129" pos:column="32"/></name></expr>;<pos:position pos:line="129" pos:column="33"/></expr_stmt>
	      <return pos:line="130" pos:column="15">return <expr><name pos:line="130" pos:column="22">NULL<pos:position pos:line="130" pos:column="26"/></name></expr>;<pos:position pos:line="130" pos:column="27"/></return>
	    }<pos:position pos:line="131" pos:column="14"/></block></then></if>
	}<pos:position pos:line="132" pos:column="10"/></block></then>
      <else pos:line="133" pos:column="7">else
	<block pos:line="134" pos:column="9">{
	  <expr_stmt><expr><name pos:line="135" pos:column="11">tree<pos:position pos:line="135" pos:column="15"/></name> <operator pos:line="135" pos:column="16">=<pos:position pos:line="135" pos:column="17"/></operator> <call><name pos:line="135" pos:column="18">create_token_tree<pos:position pos:line="135" pos:column="35"/></name> <argument_list pos:line="135" pos:column="36">(<argument><expr><name pos:line="135" pos:column="37">dfa<pos:position pos:line="135" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="42">NULL<pos:position pos:line="135" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="48">NULL<pos:position pos:line="135" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="54">token<pos:position pos:line="135" pos:column="59"/></name></expr></argument>)<pos:position pos:line="135" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="61"/></expr_stmt>
	  <if pos:line="136" pos:column="11">if <condition pos:line="136" pos:column="14">(<expr><call><name pos:line="136" pos:column="15">BE<pos:position pos:line="136" pos:column="17"/></name> <argument_list pos:line="136" pos:column="18">(<argument><expr><name pos:line="136" pos:column="19">tree<pos:position pos:line="136" pos:column="23"/></name> <operator pos:line="136" pos:column="24">==<pos:position pos:line="136" pos:column="26"/></operator> <name pos:line="136" pos:column="27">NULL<pos:position pos:line="136" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="136" pos:column="33">0<pos:position pos:line="136" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="136" pos:column="36"/></condition><then pos:line="136" pos:column="36">
	    <block pos:line="137" pos:column="13">{
	      <expr_stmt><expr><operator pos:line="138" pos:column="15">*<pos:position pos:line="138" pos:column="16"/></operator><name pos:line="138" pos:column="16">err<pos:position pos:line="138" pos:column="19"/></name> <operator pos:line="138" pos:column="20">=<pos:position pos:line="138" pos:column="21"/></operator> <name pos:line="138" pos:column="22">REG_ESPACE<pos:position pos:line="138" pos:column="32"/></name></expr>;<pos:position pos:line="138" pos:column="33"/></expr_stmt>
	      <return pos:line="139" pos:column="15">return <expr><name pos:line="139" pos:column="22">NULL<pos:position pos:line="139" pos:column="26"/></name></expr>;<pos:position pos:line="139" pos:column="27"/></return>
	    }<pos:position pos:line="140" pos:column="14"/></block></then></if>
	}<pos:position pos:line="141" pos:column="10"/></block></else></if>
      <comment type="block" pos:line="142" pos:column="7">/* We must return here, since ANCHORs can't be followed
	 by repetition operators.
	 eg. RE"^*" is invalid or "&lt;ANCHOR(^)&gt;&lt;CHAR(*)&gt;",
	     it must not be "&lt;ANCHOR(^)&gt;&lt;REPEAT(*)&gt;".  */</comment>
      <expr_stmt><expr><call><name pos:line="146" pos:column="7">fetch_token<pos:position pos:line="146" pos:column="18"/></name> <argument_list pos:line="146" pos:column="19">(<argument><expr><name pos:line="146" pos:column="20">token<pos:position pos:line="146" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="27">regexp<pos:position pos:line="146" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="35">syntax<pos:position pos:line="146" pos:column="41"/></name></expr></argument>)<pos:position pos:line="146" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="43"/></expr_stmt>
      <return pos:line="147" pos:column="7">return <expr><name pos:line="147" pos:column="14">tree<pos:position pos:line="147" pos:column="18"/></name></expr>;<pos:position pos:line="147" pos:column="19"/></return>
    <case pos:line="148" pos:column="5">case <expr><name pos:line="148" pos:column="10">OP_PERIOD<pos:position pos:line="148" pos:column="19"/></name></expr>:<pos:position pos:line="148" pos:column="20"/></case>
      <expr_stmt><expr><name pos:line="149" pos:column="7">tree<pos:position pos:line="149" pos:column="11"/></name> <operator pos:line="149" pos:column="12">=<pos:position pos:line="149" pos:column="13"/></operator> <call><name pos:line="149" pos:column="14">create_token_tree<pos:position pos:line="149" pos:column="31"/></name> <argument_list pos:line="149" pos:column="32">(<argument><expr><name pos:line="149" pos:column="33">dfa<pos:position pos:line="149" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="38">NULL<pos:position pos:line="149" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="44">NULL<pos:position pos:line="149" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="50">token<pos:position pos:line="149" pos:column="55"/></name></expr></argument>)<pos:position pos:line="149" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="57"/></expr_stmt>
      <if pos:line="150" pos:column="7">if <condition pos:line="150" pos:column="10">(<expr><call><name pos:line="150" pos:column="11">BE<pos:position pos:line="150" pos:column="13"/></name> <argument_list pos:line="150" pos:column="14">(<argument><expr><name pos:line="150" pos:column="15">tree<pos:position pos:line="150" pos:column="19"/></name> <operator pos:line="150" pos:column="20">==<pos:position pos:line="150" pos:column="22"/></operator> <name pos:line="150" pos:column="23">NULL<pos:position pos:line="150" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="150" pos:column="29">0<pos:position pos:line="150" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="150" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="150" pos:column="32"/></condition><then pos:line="150" pos:column="32">
	<block pos:line="151" pos:column="9">{
	  <expr_stmt><expr><operator pos:line="152" pos:column="11">*<pos:position pos:line="152" pos:column="12"/></operator><name pos:line="152" pos:column="12">err<pos:position pos:line="152" pos:column="15"/></name> <operator pos:line="152" pos:column="16">=<pos:position pos:line="152" pos:column="17"/></operator> <name pos:line="152" pos:column="18">REG_ESPACE<pos:position pos:line="152" pos:column="28"/></name></expr>;<pos:position pos:line="152" pos:column="29"/></expr_stmt>
	  <return pos:line="153" pos:column="11">return <expr><name pos:line="153" pos:column="18">NULL<pos:position pos:line="153" pos:column="22"/></name></expr>;<pos:position pos:line="153" pos:column="23"/></return>
	}<pos:position pos:line="154" pos:column="10"/></block></then></if>
      <if pos:line="155" pos:column="7">if <condition pos:line="155" pos:column="10">(<expr><name><name pos:line="155" pos:column="11">dfa<pos:position pos:line="155" pos:column="14"/></name><operator pos:line="155" pos:column="14">-&gt;<pos:position pos:line="155" pos:column="19"/></operator><name pos:line="155" pos:column="16">mb_cur_max<pos:position pos:line="155" pos:column="26"/></name></name> <operator pos:line="155" pos:column="27">&gt;<pos:position pos:line="155" pos:column="31"/></operator> <literal type="number" pos:line="155" pos:column="29">1<pos:position pos:line="155" pos:column="30"/></literal></expr>)<pos:position pos:line="155" pos:column="31"/></condition><then pos:line="155" pos:column="31">
	<block type="pseudo"><expr_stmt><expr><name><name pos:line="156" pos:column="9">dfa<pos:position pos:line="156" pos:column="12"/></name><operator pos:line="156" pos:column="12">-&gt;<pos:position pos:line="156" pos:column="17"/></operator><name pos:line="156" pos:column="14">has_mb_node<pos:position pos:line="156" pos:column="25"/></name></name> <operator pos:line="156" pos:column="26">=<pos:position pos:line="156" pos:column="27"/></operator> <literal type="number" pos:line="156" pos:column="28">1<pos:position pos:line="156" pos:column="29"/></literal></expr>;<pos:position pos:line="156" pos:column="30"/></expr_stmt></block></then></if>
      <break pos:line="157" pos:column="7">break;<pos:position pos:line="157" pos:column="13"/></break>
    <case pos:line="158" pos:column="5">case <expr><name pos:line="158" pos:column="10">OP_WORD<pos:position pos:line="158" pos:column="17"/></name></expr>:<pos:position pos:line="158" pos:column="18"/></case>
    <case pos:line="159" pos:column="5">case <expr><name pos:line="159" pos:column="10">OP_NOTWORD<pos:position pos:line="159" pos:column="20"/></name></expr>:<pos:position pos:line="159" pos:column="21"/></case>
      <expr_stmt><expr><name pos:line="160" pos:column="7">tree<pos:position pos:line="160" pos:column="11"/></name> <operator pos:line="160" pos:column="12">=<pos:position pos:line="160" pos:column="13"/></operator> <call><name pos:line="160" pos:column="14">build_charclass_op<pos:position pos:line="160" pos:column="32"/></name> <argument_list pos:line="160" pos:column="33">(<argument><expr><name pos:line="160" pos:column="34">dfa<pos:position pos:line="160" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="160" pos:column="39">regexp<pos:position pos:line="160" pos:column="45"/></name><operator pos:line="160" pos:column="45">-&gt;<pos:position pos:line="160" pos:column="50"/></operator><name pos:line="160" pos:column="47">trans<pos:position pos:line="160" pos:column="52"/></name></name></expr></argument>,
				 <argument><expr><literal type="string" pos:line="161" pos:column="34">"alnum"<pos:position pos:line="161" pos:column="41"/></literal></expr></argument>,
				 <argument><expr><literal type="string" pos:line="162" pos:column="34">"_"<pos:position pos:line="162" pos:column="37"/></literal></expr></argument>,
				 <argument><expr><name><name pos:line="163" pos:column="34">token<pos:position pos:line="163" pos:column="39"/></name><operator pos:line="163" pos:column="39">-&gt;<pos:position pos:line="163" pos:column="44"/></operator><name pos:line="163" pos:column="41">type<pos:position pos:line="163" pos:column="45"/></name></name> <operator pos:line="163" pos:column="46">==<pos:position pos:line="163" pos:column="48"/></operator> <name pos:line="163" pos:column="49">OP_NOTWORD<pos:position pos:line="163" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="61">err<pos:position pos:line="163" pos:column="64"/></name></expr></argument>)<pos:position pos:line="163" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="66"/></expr_stmt>
      <if pos:line="164" pos:column="7">if <condition pos:line="164" pos:column="10">(<expr><call><name pos:line="164" pos:column="11">BE<pos:position pos:line="164" pos:column="13"/></name> <argument_list pos:line="164" pos:column="14">(<argument><expr><operator pos:line="164" pos:column="15">*<pos:position pos:line="164" pos:column="16"/></operator><name pos:line="164" pos:column="16">err<pos:position pos:line="164" pos:column="19"/></name> <operator pos:line="164" pos:column="20">!=<pos:position pos:line="164" pos:column="22"/></operator> <name pos:line="164" pos:column="23">REG_NOERROR<pos:position pos:line="164" pos:column="34"/></name> <operator pos:line="164" pos:column="35">&amp;&amp;<pos:position pos:line="164" pos:column="45"/></operator> <name pos:line="164" pos:column="38">tree<pos:position pos:line="164" pos:column="42"/></name> <operator pos:line="164" pos:column="43">==<pos:position pos:line="164" pos:column="45"/></operator> <name pos:line="164" pos:column="46">NULL<pos:position pos:line="164" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="164" pos:column="52">0<pos:position pos:line="164" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="164" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="164" pos:column="55"/></condition><then pos:line="164" pos:column="55">
	<block type="pseudo"><return pos:line="165" pos:column="9">return <expr><name pos:line="165" pos:column="16">NULL<pos:position pos:line="165" pos:column="20"/></name></expr>;<pos:position pos:line="165" pos:column="21"/></return></block></then></if>
      <break pos:line="166" pos:column="7">break;<pos:position pos:line="166" pos:column="13"/></break>
    <case pos:line="167" pos:column="5">case <expr><name pos:line="167" pos:column="10">OP_SPACE<pos:position pos:line="167" pos:column="18"/></name></expr>:<pos:position pos:line="167" pos:column="19"/></case>
    <case pos:line="168" pos:column="5">case <expr><name pos:line="168" pos:column="10">OP_NOTSPACE<pos:position pos:line="168" pos:column="21"/></name></expr>:<pos:position pos:line="168" pos:column="22"/></case>
      <expr_stmt><expr><name pos:line="169" pos:column="7">tree<pos:position pos:line="169" pos:column="11"/></name> <operator pos:line="169" pos:column="12">=<pos:position pos:line="169" pos:column="13"/></operator> <call><name pos:line="169" pos:column="14">build_charclass_op<pos:position pos:line="169" pos:column="32"/></name> <argument_list pos:line="169" pos:column="33">(<argument><expr><name pos:line="169" pos:column="34">dfa<pos:position pos:line="169" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="169" pos:column="39">regexp<pos:position pos:line="169" pos:column="45"/></name><operator pos:line="169" pos:column="45">-&gt;<pos:position pos:line="169" pos:column="50"/></operator><name pos:line="169" pos:column="47">trans<pos:position pos:line="169" pos:column="52"/></name></name></expr></argument>,
				 <argument><expr><literal type="string" pos:line="170" pos:column="34">"space"<pos:position pos:line="170" pos:column="41"/></literal></expr></argument>,
				 <argument><expr><literal type="string" pos:line="171" pos:column="34">""<pos:position pos:line="171" pos:column="36"/></literal></expr></argument>,
				 <argument><expr><name><name pos:line="172" pos:column="34">token<pos:position pos:line="172" pos:column="39"/></name><operator pos:line="172" pos:column="39">-&gt;<pos:position pos:line="172" pos:column="44"/></operator><name pos:line="172" pos:column="41">type<pos:position pos:line="172" pos:column="45"/></name></name> <operator pos:line="172" pos:column="46">==<pos:position pos:line="172" pos:column="48"/></operator> <name pos:line="172" pos:column="49">OP_NOTSPACE<pos:position pos:line="172" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="172" pos:column="62">err<pos:position pos:line="172" pos:column="65"/></name></expr></argument>)<pos:position pos:line="172" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="67"/></expr_stmt>
      <if pos:line="173" pos:column="7">if <condition pos:line="173" pos:column="10">(<expr><call><name pos:line="173" pos:column="11">BE<pos:position pos:line="173" pos:column="13"/></name> <argument_list pos:line="173" pos:column="14">(<argument><expr><operator pos:line="173" pos:column="15">*<pos:position pos:line="173" pos:column="16"/></operator><name pos:line="173" pos:column="16">err<pos:position pos:line="173" pos:column="19"/></name> <operator pos:line="173" pos:column="20">!=<pos:position pos:line="173" pos:column="22"/></operator> <name pos:line="173" pos:column="23">REG_NOERROR<pos:position pos:line="173" pos:column="34"/></name> <operator pos:line="173" pos:column="35">&amp;&amp;<pos:position pos:line="173" pos:column="45"/></operator> <name pos:line="173" pos:column="38">tree<pos:position pos:line="173" pos:column="42"/></name> <operator pos:line="173" pos:column="43">==<pos:position pos:line="173" pos:column="45"/></operator> <name pos:line="173" pos:column="46">NULL<pos:position pos:line="173" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="173" pos:column="52">0<pos:position pos:line="173" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="173" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="173" pos:column="55"/></condition><then pos:line="173" pos:column="55">
	<block type="pseudo"><return pos:line="174" pos:column="9">return <expr><name pos:line="174" pos:column="16">NULL<pos:position pos:line="174" pos:column="20"/></name></expr>;<pos:position pos:line="174" pos:column="21"/></return></block></then></if>
      <break pos:line="175" pos:column="7">break;<pos:position pos:line="175" pos:column="13"/></break>
    <case pos:line="176" pos:column="5">case <expr><name pos:line="176" pos:column="10">OP_ALT<pos:position pos:line="176" pos:column="16"/></name></expr>:<pos:position pos:line="176" pos:column="17"/></case>
    <case pos:line="177" pos:column="5">case <expr><name pos:line="177" pos:column="10">END_OF_RE<pos:position pos:line="177" pos:column="19"/></name></expr>:<pos:position pos:line="177" pos:column="20"/></case>
      <return pos:line="178" pos:column="7">return <expr><name pos:line="178" pos:column="14">NULL<pos:position pos:line="178" pos:column="18"/></name></expr>;<pos:position pos:line="178" pos:column="19"/></return>
    <case pos:line="179" pos:column="5">case <expr><name pos:line="179" pos:column="10">BACK_SLASH<pos:position pos:line="179" pos:column="20"/></name></expr>:<pos:position pos:line="179" pos:column="21"/></case>
      <expr_stmt><expr><operator pos:line="180" pos:column="7">*<pos:position pos:line="180" pos:column="8"/></operator><name pos:line="180" pos:column="8">err<pos:position pos:line="180" pos:column="11"/></name> <operator pos:line="180" pos:column="12">=<pos:position pos:line="180" pos:column="13"/></operator> <name pos:line="180" pos:column="14">REG_EESCAPE<pos:position pos:line="180" pos:column="25"/></name></expr>;<pos:position pos:line="180" pos:column="26"/></expr_stmt>
      <return pos:line="181" pos:column="7">return <expr><name pos:line="181" pos:column="14">NULL<pos:position pos:line="181" pos:column="18"/></name></expr>;<pos:position pos:line="181" pos:column="19"/></return>
    <default pos:line="182" pos:column="5">default:<pos:position pos:line="182" pos:column="13"/></default>
      <comment type="block" pos:line="183" pos:column="7">/* Must not happen?  */</comment>
<cpp:ifdef pos:line="184" pos:column="1">#<cpp:directive pos:line="184" pos:column="2">ifdef<pos:position pos:line="184" pos:column="7"/></cpp:directive> <name pos:line="184" pos:column="8">DEBUG<pos:position pos:line="184" pos:column="13"/></name></cpp:ifdef>
      <expr_stmt><expr><call><name pos:line="185" pos:column="7">assert<pos:position pos:line="185" pos:column="13"/></name> <argument_list pos:line="185" pos:column="14">(<argument><expr><literal type="number" pos:line="185" pos:column="15">0<pos:position pos:line="185" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="185" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="185" pos:column="18"/></expr_stmt>
<cpp:endif pos:line="186" pos:column="1">#<cpp:directive pos:line="186" pos:column="2">endif<pos:position pos:line="186" pos:column="7"/></cpp:directive></cpp:endif>
      <return pos:line="187" pos:column="7">return <expr><name pos:line="187" pos:column="14">NULL<pos:position pos:line="187" pos:column="18"/></name></expr>;<pos:position pos:line="187" pos:column="19"/></return>
    }<pos:position pos:line="188" pos:column="6"/></block></switch>
  <expr_stmt><expr><call><name pos:line="189" pos:column="3">fetch_token<pos:position pos:line="189" pos:column="14"/></name> <argument_list pos:line="189" pos:column="15">(<argument><expr><name pos:line="189" pos:column="16">token<pos:position pos:line="189" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="189" pos:column="23">regexp<pos:position pos:line="189" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="189" pos:column="31">syntax<pos:position pos:line="189" pos:column="37"/></name></expr></argument>)<pos:position pos:line="189" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="39"/></expr_stmt>

  <while pos:line="191" pos:column="3">while <condition pos:line="191" pos:column="9">(<expr><name><name pos:line="191" pos:column="10">token<pos:position pos:line="191" pos:column="15"/></name><operator pos:line="191" pos:column="15">-&gt;<pos:position pos:line="191" pos:column="20"/></operator><name pos:line="191" pos:column="17">type<pos:position pos:line="191" pos:column="21"/></name></name> <operator pos:line="191" pos:column="22">==<pos:position pos:line="191" pos:column="24"/></operator> <name pos:line="191" pos:column="25">OP_DUP_ASTERISK<pos:position pos:line="191" pos:column="40"/></name> <operator pos:line="191" pos:column="41">||<pos:position pos:line="191" pos:column="43"/></operator> <name><name pos:line="191" pos:column="44">token<pos:position pos:line="191" pos:column="49"/></name><operator pos:line="191" pos:column="49">-&gt;<pos:position pos:line="191" pos:column="54"/></operator><name pos:line="191" pos:column="51">type<pos:position pos:line="191" pos:column="55"/></name></name> <operator pos:line="191" pos:column="56">==<pos:position pos:line="191" pos:column="58"/></operator> <name pos:line="191" pos:column="59">OP_DUP_PLUS<pos:position pos:line="191" pos:column="70"/></name>
	 <operator pos:line="192" pos:column="10">||<pos:position pos:line="192" pos:column="12"/></operator> <name><name pos:line="192" pos:column="13">token<pos:position pos:line="192" pos:column="18"/></name><operator pos:line="192" pos:column="18">-&gt;<pos:position pos:line="192" pos:column="23"/></operator><name pos:line="192" pos:column="20">type<pos:position pos:line="192" pos:column="24"/></name></name> <operator pos:line="192" pos:column="25">==<pos:position pos:line="192" pos:column="27"/></operator> <name pos:line="192" pos:column="28">OP_DUP_QUESTION<pos:position pos:line="192" pos:column="43"/></name> <operator pos:line="192" pos:column="44">||<pos:position pos:line="192" pos:column="46"/></operator> <name><name pos:line="192" pos:column="47">token<pos:position pos:line="192" pos:column="52"/></name><operator pos:line="192" pos:column="52">-&gt;<pos:position pos:line="192" pos:column="57"/></operator><name pos:line="192" pos:column="54">type<pos:position pos:line="192" pos:column="58"/></name></name> <operator pos:line="192" pos:column="59">==<pos:position pos:line="192" pos:column="61"/></operator> <name pos:line="192" pos:column="62">OP_OPEN_DUP_NUM<pos:position pos:line="192" pos:column="77"/></name></expr>)<pos:position pos:line="192" pos:column="78"/></condition>
    <block pos:line="193" pos:column="5">{
      <expr_stmt><expr><name pos:line="194" pos:column="7">tree<pos:position pos:line="194" pos:column="11"/></name> <operator pos:line="194" pos:column="12">=<pos:position pos:line="194" pos:column="13"/></operator> <call><name pos:line="194" pos:column="14">parse_dup_op<pos:position pos:line="194" pos:column="26"/></name> <argument_list pos:line="194" pos:column="27">(<argument><expr><name pos:line="194" pos:column="28">tree<pos:position pos:line="194" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="34">regexp<pos:position pos:line="194" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="42">dfa<pos:position pos:line="194" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="47">token<pos:position pos:line="194" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="54">syntax<pos:position pos:line="194" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="62">err<pos:position pos:line="194" pos:column="65"/></name></expr></argument>)<pos:position pos:line="194" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="67"/></expr_stmt>
      <if pos:line="195" pos:column="7">if <condition pos:line="195" pos:column="10">(<expr><call><name pos:line="195" pos:column="11">BE<pos:position pos:line="195" pos:column="13"/></name> <argument_list pos:line="195" pos:column="14">(<argument><expr><operator pos:line="195" pos:column="15">*<pos:position pos:line="195" pos:column="16"/></operator><name pos:line="195" pos:column="16">err<pos:position pos:line="195" pos:column="19"/></name> <operator pos:line="195" pos:column="20">!=<pos:position pos:line="195" pos:column="22"/></operator> <name pos:line="195" pos:column="23">REG_NOERROR<pos:position pos:line="195" pos:column="34"/></name> <operator pos:line="195" pos:column="35">&amp;&amp;<pos:position pos:line="195" pos:column="45"/></operator> <name pos:line="195" pos:column="38">tree<pos:position pos:line="195" pos:column="42"/></name> <operator pos:line="195" pos:column="43">==<pos:position pos:line="195" pos:column="45"/></operator> <name pos:line="195" pos:column="46">NULL<pos:position pos:line="195" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="195" pos:column="52">0<pos:position pos:line="195" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="195" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="195" pos:column="55"/></condition><then pos:line="195" pos:column="55">
	<block type="pseudo"><return pos:line="196" pos:column="9">return <expr><name pos:line="196" pos:column="16">NULL<pos:position pos:line="196" pos:column="20"/></name></expr>;<pos:position pos:line="196" pos:column="21"/></return></block></then></if>
      <comment type="block" pos:line="197" pos:column="7">/* In BRE consecutive duplications are not allowed.  */</comment>
      <if pos:line="198" pos:column="7">if <condition pos:line="198" pos:column="10">(<expr><operator pos:line="198" pos:column="11">(<pos:position pos:line="198" pos:column="12"/></operator><name pos:line="198" pos:column="12">syntax<pos:position pos:line="198" pos:column="18"/></name> <operator pos:line="198" pos:column="19">&amp;<pos:position pos:line="198" pos:column="24"/></operator> <name pos:line="198" pos:column="21">RE_CONTEXT_INVALID_DUP<pos:position pos:line="198" pos:column="43"/></name><operator pos:line="198" pos:column="43">)<pos:position pos:line="198" pos:column="44"/></operator>
	  <operator pos:line="199" pos:column="11">&amp;&amp;<pos:position pos:line="199" pos:column="21"/></operator> <operator pos:line="199" pos:column="14">(<pos:position pos:line="199" pos:column="15"/></operator><name><name pos:line="199" pos:column="15">token<pos:position pos:line="199" pos:column="20"/></name><operator pos:line="199" pos:column="20">-&gt;<pos:position pos:line="199" pos:column="25"/></operator><name pos:line="199" pos:column="22">type<pos:position pos:line="199" pos:column="26"/></name></name> <operator pos:line="199" pos:column="27">==<pos:position pos:line="199" pos:column="29"/></operator> <name pos:line="199" pos:column="30">OP_DUP_ASTERISK<pos:position pos:line="199" pos:column="45"/></name>
	      <operator pos:line="200" pos:column="15">||<pos:position pos:line="200" pos:column="17"/></operator> <name><name pos:line="200" pos:column="18">token<pos:position pos:line="200" pos:column="23"/></name><operator pos:line="200" pos:column="23">-&gt;<pos:position pos:line="200" pos:column="28"/></operator><name pos:line="200" pos:column="25">type<pos:position pos:line="200" pos:column="29"/></name></name> <operator pos:line="200" pos:column="30">==<pos:position pos:line="200" pos:column="32"/></operator> <name pos:line="200" pos:column="33">OP_OPEN_DUP_NUM<pos:position pos:line="200" pos:column="48"/></name><operator pos:line="200" pos:column="48">)<pos:position pos:line="200" pos:column="49"/></operator></expr>)<pos:position pos:line="200" pos:column="50"/></condition><then pos:line="200" pos:column="50">
	<block pos:line="201" pos:column="9">{
	  <expr_stmt><expr><operator pos:line="202" pos:column="11">*<pos:position pos:line="202" pos:column="12"/></operator><name pos:line="202" pos:column="12">err<pos:position pos:line="202" pos:column="15"/></name> <operator pos:line="202" pos:column="16">=<pos:position pos:line="202" pos:column="17"/></operator> <name pos:line="202" pos:column="18">REG_BADRPT<pos:position pos:line="202" pos:column="28"/></name></expr>;<pos:position pos:line="202" pos:column="29"/></expr_stmt>
	  <return pos:line="203" pos:column="11">return <expr><name pos:line="203" pos:column="18">NULL<pos:position pos:line="203" pos:column="22"/></name></expr>;<pos:position pos:line="203" pos:column="23"/></return>
	}<pos:position pos:line="204" pos:column="10"/></block></then></if>
    }<pos:position pos:line="205" pos:column="6"/></block></while>

  <return pos:line="207" pos:column="3">return <expr><name pos:line="207" pos:column="10">tree<pos:position pos:line="207" pos:column="14"/></name></expr>;<pos:position pos:line="207" pos:column="15"/></return>
}<pos:position pos:line="208" pos:column="2"/></block></function></unit>
