<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1189.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">help_unknown_cmd<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">cmd<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">n<pos:position pos:line="3" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="19">best_similarity<pos:position pos:line="3" pos:column="34"/></name> <init pos:line="3" pos:column="35">= <expr><literal type="number" pos:line="3" pos:column="37">0<pos:position pos:line="3" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">cmdnames<pos:position pos:line="4" pos:column="24"/></name></name></type> <name pos:line="4" pos:column="25">main_cmds<pos:position pos:line="4" pos:column="34"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="36">other_cmds<pos:position pos:line="4" pos:column="46"/></name></decl>;<pos:position pos:line="4" pos:column="47"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">memset<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><operator pos:line="6" pos:column="16">&amp;<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="17">main_cmds<pos:position pos:line="6" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="28">0<pos:position pos:line="6" pos:column="29"/></literal></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="31">sizeof<argument_list pos:line="6" pos:column="37">(<argument><expr><name pos:line="6" pos:column="38">main_cmds<pos:position pos:line="6" pos:column="47"/></name></expr></argument>)<pos:position pos:line="6" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="6" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="7" pos:column="9">memset<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><operator pos:line="7" pos:column="16">&amp;<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="17">other_cmds<pos:position pos:line="7" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="29">0<pos:position pos:line="7" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="32">sizeof<argument_list pos:line="7" pos:column="38">(<argument><expr><name pos:line="7" pos:column="39">other_cmds<pos:position pos:line="7" pos:column="49"/></name></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">memset<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><operator pos:line="8" pos:column="16">&amp;<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="17">aliases<pos:position pos:line="8" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="26">0<pos:position pos:line="8" pos:column="27"/></literal></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="29">sizeof<argument_list pos:line="8" pos:column="35">(<argument><expr><name pos:line="8" pos:column="36">aliases<pos:position pos:line="8" pos:column="43"/></name></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="46"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">git_config<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">git_unknown_cmd_config<pos:position pos:line="10" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="44">NULL<pos:position pos:line="10" pos:column="48"/></name></expr></argument>)<pos:position pos:line="10" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="50"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">load_command_list<pos:position pos:line="12" pos:column="26"/></name><argument_list pos:line="12" pos:column="26">(<argument><expr><literal type="string" pos:line="12" pos:column="27">"git-"<pos:position pos:line="12" pos:column="33"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="35">&amp;<pos:position pos:line="12" pos:column="40"/></operator><name pos:line="12" pos:column="36">main_cmds<pos:position pos:line="12" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="47">&amp;<pos:position pos:line="12" pos:column="52"/></operator><name pos:line="12" pos:column="48">other_cmds<pos:position pos:line="12" pos:column="58"/></name></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="60"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">add_cmd_list<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><operator pos:line="14" pos:column="22">&amp;<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="23">main_cmds<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="34">&amp;<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="35">aliases<pos:position pos:line="14" pos:column="42"/></name></expr></argument>)<pos:position pos:line="14" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">add_cmd_list<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><expr><operator pos:line="15" pos:column="22">&amp;<pos:position pos:line="15" pos:column="27"/></operator><name pos:line="15" pos:column="23">main_cmds<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="34">&amp;<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="35">other_cmds<pos:position pos:line="15" pos:column="45"/></name></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">QSORT<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">(<argument><expr><name><name pos:line="16" pos:column="15">main_cmds<pos:position pos:line="16" pos:column="24"/></name><operator pos:line="16" pos:column="24">.<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="25">names<pos:position pos:line="16" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="32">main_cmds<pos:position pos:line="16" pos:column="41"/></name><operator pos:line="16" pos:column="41">.<pos:position pos:line="16" pos:column="42"/></operator><name pos:line="16" pos:column="42">cnt<pos:position pos:line="16" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="47">cmdname_compare<pos:position pos:line="16" pos:column="62"/></name></expr></argument>)<pos:position pos:line="16" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="64"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">uniq<pos:position pos:line="17" pos:column="13"/></name><argument_list pos:line="17" pos:column="13">(<argument><expr><operator pos:line="17" pos:column="14">&amp;<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="15">main_cmds<pos:position pos:line="17" pos:column="24"/></name></expr></argument>)<pos:position pos:line="17" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>

	<comment type="block" pos:line="19" pos:column="9">/* This abuses cmdname-&gt;len for levenshtein distance */</comment>
	<for pos:line="20" pos:column="9">for <control pos:line="20" pos:column="13">(<init><expr><name pos:line="20" pos:column="14">i<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <literal type="number" pos:line="20" pos:column="18">0<pos:position pos:line="20" pos:column="19"/></literal></expr><operator pos:line="20" pos:column="19">,<pos:position pos:line="20" pos:column="20"/></operator> <expr><name pos:line="20" pos:column="21">n<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">=<pos:position pos:line="20" pos:column="24"/></operator> <literal type="number" pos:line="20" pos:column="25">0<pos:position pos:line="20" pos:column="26"/></literal></expr>;<pos:position pos:line="20" pos:column="27"/></init> <condition><expr><name pos:line="20" pos:column="28">i<pos:position pos:line="20" pos:column="29"/></name> <operator pos:line="20" pos:column="30">&lt;<pos:position pos:line="20" pos:column="34"/></operator> <name><name pos:line="20" pos:column="32">main_cmds<pos:position pos:line="20" pos:column="41"/></name><operator pos:line="20" pos:column="41">.<pos:position pos:line="20" pos:column="42"/></operator><name pos:line="20" pos:column="42">cnt<pos:position pos:line="20" pos:column="45"/></name></name></expr>;<pos:position pos:line="20" pos:column="46"/></condition> <incr><expr><name pos:line="20" pos:column="47">i<pos:position pos:line="20" pos:column="48"/></name><operator pos:line="20" pos:column="48">++<pos:position pos:line="20" pos:column="50"/></operator></expr></incr>)<pos:position pos:line="20" pos:column="51"/></control> <block pos:line="20" pos:column="52">{
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">int<pos:position pos:line="21" pos:column="20"/></name></type> <name pos:line="21" pos:column="21">cmp<pos:position pos:line="21" pos:column="24"/></name> <init pos:line="21" pos:column="25">= <expr><literal type="number" pos:line="21" pos:column="27">0<pos:position pos:line="21" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="29"/></decl_stmt> <comment type="block" pos:line="21" pos:column="30">/* avoid compiler stupidity */</comment>
		<decl_stmt><decl><type><specifier pos:line="22" pos:column="17">const<pos:position pos:line="22" pos:column="22"/></specifier> <name pos:line="22" pos:column="23">char<pos:position pos:line="22" pos:column="27"/></name> <modifier pos:line="22" pos:column="28">*<pos:position pos:line="22" pos:column="29"/></modifier></type><name pos:line="22" pos:column="29">candidate<pos:position pos:line="22" pos:column="38"/></name> <init pos:line="22" pos:column="39">= <expr><name><name pos:line="22" pos:column="41">main_cmds<pos:position pos:line="22" pos:column="50"/></name><operator pos:line="22" pos:column="50">.<pos:position pos:line="22" pos:column="51"/></operator><name pos:line="22" pos:column="51">names<pos:position pos:line="22" pos:column="56"/></name><index pos:line="22" pos:column="56">[<expr><name pos:line="22" pos:column="57">i<pos:position pos:line="22" pos:column="58"/></name></expr>]<pos:position pos:line="22" pos:column="59"/></index></name><operator pos:line="22" pos:column="59">-&gt;<pos:position pos:line="22" pos:column="64"/></operator><name pos:line="22" pos:column="61">name<pos:position pos:line="22" pos:column="65"/></name></expr></init></decl>;<pos:position pos:line="22" pos:column="66"/></decl_stmt>

		<comment type="block" pos:line="24" pos:column="17">/*
		 * An exact match means we have the command, but
		 * for some reason exec'ing it gave us ENOENT; probably
		 * it's a bad interpreter in the #! line.
		 */</comment>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><operator pos:line="29" pos:column="21">!<pos:position pos:line="29" pos:column="22"/></operator><call><name pos:line="29" pos:column="22">strcmp<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><name pos:line="29" pos:column="29">candidate<pos:position pos:line="29" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="40">cmd<pos:position pos:line="29" pos:column="43"/></name></expr></argument>)<pos:position pos:line="29" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="45"/></condition><then pos:line="29" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="25">die<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><call><name pos:line="30" pos:column="29">_<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">(<argument><expr><name pos:line="30" pos:column="31">bad_interpreter_advice<pos:position pos:line="30" pos:column="53"/></name></expr></argument>)<pos:position pos:line="30" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="30" pos:column="56">cmd<pos:position pos:line="30" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="61">cmd<pos:position pos:line="30" pos:column="64"/></name></expr></argument>)<pos:position pos:line="30" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="66"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="32" pos:column="17">/* Does the candidate appear in common_cmds list? */</comment>
		<while pos:line="33" pos:column="17">while <condition pos:line="33" pos:column="23">(<expr><name pos:line="33" pos:column="24">n<pos:position pos:line="33" pos:column="25"/></name> <operator pos:line="33" pos:column="26">&lt;<pos:position pos:line="33" pos:column="30"/></operator> <call><name pos:line="33" pos:column="28">ARRAY_SIZE<pos:position pos:line="33" pos:column="38"/></name><argument_list pos:line="33" pos:column="38">(<argument><expr><name pos:line="33" pos:column="39">common_cmds<pos:position pos:line="33" pos:column="50"/></name></expr></argument>)<pos:position pos:line="33" pos:column="51"/></argument_list></call> <operator pos:line="33" pos:column="52">&amp;&amp;<pos:position pos:line="33" pos:column="62"/></operator>
		       <operator pos:line="34" pos:column="24">(<pos:position pos:line="34" pos:column="25"/></operator><name pos:line="34" pos:column="25">cmp<pos:position pos:line="34" pos:column="28"/></name> <operator pos:line="34" pos:column="29">=<pos:position pos:line="34" pos:column="30"/></operator> <call><name pos:line="34" pos:column="31">strcmp<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><name><name pos:line="34" pos:column="38">common_cmds<pos:position pos:line="34" pos:column="49"/></name><index pos:line="34" pos:column="49">[<expr><name pos:line="34" pos:column="50">n<pos:position pos:line="34" pos:column="51"/></name></expr>]<pos:position pos:line="34" pos:column="52"/></index></name><operator pos:line="34" pos:column="52">.<pos:position pos:line="34" pos:column="53"/></operator><name pos:line="34" pos:column="53">name<pos:position pos:line="34" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="59">candidate<pos:position pos:line="34" pos:column="68"/></name></expr></argument>)<pos:position pos:line="34" pos:column="69"/></argument_list></call><operator pos:line="34" pos:column="69">)<pos:position pos:line="34" pos:column="70"/></operator> <operator pos:line="34" pos:column="71">&lt;<pos:position pos:line="34" pos:column="75"/></operator> <literal type="number" pos:line="34" pos:column="73">0<pos:position pos:line="34" pos:column="74"/></literal></expr>)<pos:position pos:line="34" pos:column="75"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="25">n<pos:position pos:line="35" pos:column="26"/></name><operator pos:line="35" pos:column="26">++<pos:position pos:line="35" pos:column="28"/></operator></expr>;<pos:position pos:line="35" pos:column="29"/></expr_stmt></block></while>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><operator pos:line="36" pos:column="21">(<pos:position pos:line="36" pos:column="22"/></operator><name pos:line="36" pos:column="22">n<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">&lt;<pos:position pos:line="36" pos:column="28"/></operator> <call><name pos:line="36" pos:column="26">ARRAY_SIZE<pos:position pos:line="36" pos:column="36"/></name><argument_list pos:line="36" pos:column="36">(<argument><expr><name pos:line="36" pos:column="37">common_cmds<pos:position pos:line="36" pos:column="48"/></name></expr></argument>)<pos:position pos:line="36" pos:column="49"/></argument_list></call><operator pos:line="36" pos:column="49">)<pos:position pos:line="36" pos:column="50"/></operator> <operator pos:line="36" pos:column="51">&amp;&amp;<pos:position pos:line="36" pos:column="61"/></operator> <operator pos:line="36" pos:column="54">!<pos:position pos:line="36" pos:column="55"/></operator><name pos:line="36" pos:column="55">cmp<pos:position pos:line="36" pos:column="58"/></name></expr>)<pos:position pos:line="36" pos:column="59"/></condition><then pos:line="36" pos:column="59"> <block pos:line="36" pos:column="60">{
			<comment type="block" pos:line="37" pos:column="25">/* Yes, this is one of the common commands */</comment>
			<expr_stmt><expr><name pos:line="38" pos:column="25">n<pos:position pos:line="38" pos:column="26"/></name><operator pos:line="38" pos:column="26">++<pos:position pos:line="38" pos:column="28"/></operator></expr>;<pos:position pos:line="38" pos:column="29"/></expr_stmt> <comment type="block" pos:line="38" pos:column="30">/* use the entry from common_cmds[] */</comment>
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><call><name pos:line="39" pos:column="29">starts_with<pos:position pos:line="39" pos:column="40"/></name><argument_list pos:line="39" pos:column="40">(<argument><expr><name pos:line="39" pos:column="41">candidate<pos:position pos:line="39" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="52">cmd<pos:position pos:line="39" pos:column="55"/></name></expr></argument>)<pos:position pos:line="39" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="57"/></condition><then pos:line="39" pos:column="57"> <block pos:line="39" pos:column="58">{
				<comment type="block" pos:line="40" pos:column="33">/* Give prefix match a very good score */</comment>
				<expr_stmt><expr><name><name pos:line="41" pos:column="33">main_cmds<pos:position pos:line="41" pos:column="42"/></name><operator pos:line="41" pos:column="42">.<pos:position pos:line="41" pos:column="43"/></operator><name pos:line="41" pos:column="43">names<pos:position pos:line="41" pos:column="48"/></name><index pos:line="41" pos:column="48">[<expr><name pos:line="41" pos:column="49">i<pos:position pos:line="41" pos:column="50"/></name></expr>]<pos:position pos:line="41" pos:column="51"/></index></name><operator pos:line="41" pos:column="51">-&gt;<pos:position pos:line="41" pos:column="56"/></operator><name pos:line="41" pos:column="53">len<pos:position pos:line="41" pos:column="56"/></name> <operator pos:line="41" pos:column="57">=<pos:position pos:line="41" pos:column="58"/></operator> <literal type="number" pos:line="41" pos:column="59">0<pos:position pos:line="41" pos:column="60"/></literal></expr>;<pos:position pos:line="41" pos:column="61"/></expr_stmt>
				<continue pos:line="42" pos:column="33">continue;<pos:position pos:line="42" pos:column="42"/></continue>
			}<pos:position pos:line="43" pos:column="26"/></block></then></if>
		}<pos:position pos:line="44" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name><name pos:line="46" pos:column="17">main_cmds<pos:position pos:line="46" pos:column="26"/></name><operator pos:line="46" pos:column="26">.<pos:position pos:line="46" pos:column="27"/></operator><name pos:line="46" pos:column="27">names<pos:position pos:line="46" pos:column="32"/></name><index pos:line="46" pos:column="32">[<expr><name pos:line="46" pos:column="33">i<pos:position pos:line="46" pos:column="34"/></name></expr>]<pos:position pos:line="46" pos:column="35"/></index></name><operator pos:line="46" pos:column="35">-&gt;<pos:position pos:line="46" pos:column="40"/></operator><name pos:line="46" pos:column="37">len<pos:position pos:line="46" pos:column="40"/></name> <operator pos:line="46" pos:column="41">=<pos:position pos:line="46" pos:column="42"/></operator>
			<call><name pos:line="47" pos:column="25">levenshtein<pos:position pos:line="47" pos:column="36"/></name><argument_list pos:line="47" pos:column="36">(<argument><expr><name pos:line="47" pos:column="37">cmd<pos:position pos:line="47" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="42">candidate<pos:position pos:line="47" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="53">0<pos:position pos:line="47" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="56">2<pos:position pos:line="47" pos:column="57"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="59">1<pos:position pos:line="47" pos:column="60"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="62">3<pos:position pos:line="47" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="64"/></argument_list></call> <operator pos:line="47" pos:column="65">+<pos:position pos:line="47" pos:column="66"/></operator> <literal type="number" pos:line="47" pos:column="67">1<pos:position pos:line="47" pos:column="68"/></literal></expr>;<pos:position pos:line="47" pos:column="69"/></expr_stmt>
	}<pos:position pos:line="48" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="50" pos:column="9">QSORT<pos:position pos:line="50" pos:column="14"/></name><argument_list pos:line="50" pos:column="14">(<argument><expr><name><name pos:line="50" pos:column="15">main_cmds<pos:position pos:line="50" pos:column="24"/></name><operator pos:line="50" pos:column="24">.<pos:position pos:line="50" pos:column="25"/></operator><name pos:line="50" pos:column="25">names<pos:position pos:line="50" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="32">main_cmds<pos:position pos:line="50" pos:column="41"/></name><operator pos:line="50" pos:column="41">.<pos:position pos:line="50" pos:column="42"/></operator><name pos:line="50" pos:column="42">cnt<pos:position pos:line="50" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="47">levenshtein_compare<pos:position pos:line="50" pos:column="66"/></name></expr></argument>)<pos:position pos:line="50" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="68"/></expr_stmt>

	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><operator pos:line="52" pos:column="13">!<pos:position pos:line="52" pos:column="14"/></operator><name><name pos:line="52" pos:column="14">main_cmds<pos:position pos:line="52" pos:column="23"/></name><operator pos:line="52" pos:column="23">.<pos:position pos:line="52" pos:column="24"/></operator><name pos:line="52" pos:column="24">cnt<pos:position pos:line="52" pos:column="27"/></name></name></expr>)<pos:position pos:line="52" pos:column="28"/></condition><then pos:line="52" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="17">die<pos:position pos:line="53" pos:column="20"/></name><argument_list pos:line="53" pos:column="20">(<argument><expr><call><name pos:line="53" pos:column="21">_<pos:position pos:line="53" pos:column="22"/></name><argument_list pos:line="53" pos:column="22">(<argument><expr><literal type="string" pos:line="53" pos:column="23">"Uh oh. Your system reports no Git commands at all."<pos:position pos:line="53" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="53" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="78"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="55" pos:column="9">/* skip and count prefix matches */</comment>
	<for pos:line="56" pos:column="9">for <control pos:line="56" pos:column="13">(<init><expr><name pos:line="56" pos:column="14">n<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">=<pos:position pos:line="56" pos:column="17"/></operator> <literal type="number" pos:line="56" pos:column="18">0<pos:position pos:line="56" pos:column="19"/></literal></expr>;<pos:position pos:line="56" pos:column="20"/></init> <condition><expr><name pos:line="56" pos:column="21">n<pos:position pos:line="56" pos:column="22"/></name> <operator pos:line="56" pos:column="23">&lt;<pos:position pos:line="56" pos:column="27"/></operator> <name><name pos:line="56" pos:column="25">main_cmds<pos:position pos:line="56" pos:column="34"/></name><operator pos:line="56" pos:column="34">.<pos:position pos:line="56" pos:column="35"/></operator><name pos:line="56" pos:column="35">cnt<pos:position pos:line="56" pos:column="38"/></name></name> <operator pos:line="56" pos:column="39">&amp;&amp;<pos:position pos:line="56" pos:column="49"/></operator> <operator pos:line="56" pos:column="42">!<pos:position pos:line="56" pos:column="43"/></operator><name><name pos:line="56" pos:column="43">main_cmds<pos:position pos:line="56" pos:column="52"/></name><operator pos:line="56" pos:column="52">.<pos:position pos:line="56" pos:column="53"/></operator><name pos:line="56" pos:column="53">names<pos:position pos:line="56" pos:column="58"/></name><index pos:line="56" pos:column="58">[<expr><name pos:line="56" pos:column="59">n<pos:position pos:line="56" pos:column="60"/></name></expr>]<pos:position pos:line="56" pos:column="61"/></index></name><operator pos:line="56" pos:column="61">-&gt;<pos:position pos:line="56" pos:column="66"/></operator><name pos:line="56" pos:column="63">len<pos:position pos:line="56" pos:column="66"/></name></expr>;<pos:position pos:line="56" pos:column="67"/></condition> <incr><expr><name pos:line="56" pos:column="68">n<pos:position pos:line="56" pos:column="69"/></name><operator pos:line="56" pos:column="69">++<pos:position pos:line="56" pos:column="71"/></operator></expr></incr>)<pos:position pos:line="56" pos:column="72"/></control>
		<block type="pseudo"><empty_stmt pos:line="57" pos:column="17">;<pos:position pos:line="57" pos:column="18"/></empty_stmt></block></for> <comment type="block" pos:line="57" pos:column="19">/* still counting */</comment>

	<if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name><name pos:line="59" pos:column="13">main_cmds<pos:position pos:line="59" pos:column="22"/></name><operator pos:line="59" pos:column="22">.<pos:position pos:line="59" pos:column="23"/></operator><name pos:line="59" pos:column="23">cnt<pos:position pos:line="59" pos:column="26"/></name></name> <operator pos:line="59" pos:column="27">&lt;=<pos:position pos:line="59" pos:column="32"/></operator> <name pos:line="59" pos:column="30">n<pos:position pos:line="59" pos:column="31"/></name></expr>)<pos:position pos:line="59" pos:column="32"/></condition><then pos:line="59" pos:column="32"> <block pos:line="59" pos:column="33">{
		<comment type="block" pos:line="60" pos:column="17">/* prefix matches with everything? that is too ambiguous */</comment>
		<expr_stmt><expr><name pos:line="61" pos:column="17">best_similarity<pos:position pos:line="61" pos:column="32"/></name> <operator pos:line="61" pos:column="33">=<pos:position pos:line="61" pos:column="34"/></operator> <name pos:line="61" pos:column="35">SIMILARITY_FLOOR<pos:position pos:line="61" pos:column="51"/></name> <operator pos:line="61" pos:column="52">+<pos:position pos:line="61" pos:column="53"/></operator> <literal type="number" pos:line="61" pos:column="54">1<pos:position pos:line="61" pos:column="55"/></literal></expr>;<pos:position pos:line="61" pos:column="56"/></expr_stmt>
	}<pos:position pos:line="62" pos:column="10"/></block></then> <else pos:line="62" pos:column="11">else <block pos:line="62" pos:column="16">{
		<comment type="block" pos:line="63" pos:column="17">/* count all the most similar ones */</comment>
		<for pos:line="64" pos:column="17">for <control pos:line="64" pos:column="21">(<init><expr><name pos:line="64" pos:column="22">best_similarity<pos:position pos:line="64" pos:column="37"/></name> <operator pos:line="64" pos:column="38">=<pos:position pos:line="64" pos:column="39"/></operator> <name><name pos:line="64" pos:column="40">main_cmds<pos:position pos:line="64" pos:column="49"/></name><operator pos:line="64" pos:column="49">.<pos:position pos:line="64" pos:column="50"/></operator><name pos:line="64" pos:column="50">names<pos:position pos:line="64" pos:column="55"/></name><index pos:line="64" pos:column="55">[<expr><name pos:line="64" pos:column="56">n<pos:position pos:line="64" pos:column="57"/></name><operator pos:line="64" pos:column="57">++<pos:position pos:line="64" pos:column="59"/></operator></expr>]<pos:position pos:line="64" pos:column="60"/></index></name><operator pos:line="64" pos:column="60">-&gt;<pos:position pos:line="64" pos:column="65"/></operator><name pos:line="64" pos:column="62">len<pos:position pos:line="64" pos:column="65"/></name></expr>;<pos:position pos:line="64" pos:column="66"/></init>
		     <condition><expr><operator pos:line="65" pos:column="22">(<pos:position pos:line="65" pos:column="23"/></operator><name pos:line="65" pos:column="23">n<pos:position pos:line="65" pos:column="24"/></name> <operator pos:line="65" pos:column="25">&lt;<pos:position pos:line="65" pos:column="29"/></operator> <name><name pos:line="65" pos:column="27">main_cmds<pos:position pos:line="65" pos:column="36"/></name><operator pos:line="65" pos:column="36">.<pos:position pos:line="65" pos:column="37"/></operator><name pos:line="65" pos:column="37">cnt<pos:position pos:line="65" pos:column="40"/></name></name> <operator pos:line="65" pos:column="41">&amp;&amp;<pos:position pos:line="65" pos:column="51"/></operator>
		      <name pos:line="66" pos:column="23">best_similarity<pos:position pos:line="66" pos:column="38"/></name> <operator pos:line="66" pos:column="39">==<pos:position pos:line="66" pos:column="41"/></operator> <name><name pos:line="66" pos:column="42">main_cmds<pos:position pos:line="66" pos:column="51"/></name><operator pos:line="66" pos:column="51">.<pos:position pos:line="66" pos:column="52"/></operator><name pos:line="66" pos:column="52">names<pos:position pos:line="66" pos:column="57"/></name><index pos:line="66" pos:column="57">[<expr><name pos:line="66" pos:column="58">n<pos:position pos:line="66" pos:column="59"/></name></expr>]<pos:position pos:line="66" pos:column="60"/></index></name><operator pos:line="66" pos:column="60">-&gt;<pos:position pos:line="66" pos:column="65"/></operator><name pos:line="66" pos:column="62">len<pos:position pos:line="66" pos:column="65"/></name><operator pos:line="66" pos:column="65">)<pos:position pos:line="66" pos:column="66"/></operator></expr>;<pos:position pos:line="66" pos:column="67"/></condition>
		     <incr><expr><name pos:line="67" pos:column="22">n<pos:position pos:line="67" pos:column="23"/></name><operator pos:line="67" pos:column="23">++<pos:position pos:line="67" pos:column="25"/></operator></expr></incr>)<pos:position pos:line="67" pos:column="26"/></control>
			<block type="pseudo"><empty_stmt pos:line="68" pos:column="25">;<pos:position pos:line="68" pos:column="26"/></empty_stmt></block></for> <comment type="block" pos:line="68" pos:column="27">/* still counting */</comment>
	}<pos:position pos:line="69" pos:column="10"/></block></else></if>
	<if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><name pos:line="70" pos:column="13">autocorrect<pos:position pos:line="70" pos:column="24"/></name> <operator pos:line="70" pos:column="25">&amp;&amp;<pos:position pos:line="70" pos:column="35"/></operator> <name pos:line="70" pos:column="28">n<pos:position pos:line="70" pos:column="29"/></name> <operator pos:line="70" pos:column="30">==<pos:position pos:line="70" pos:column="32"/></operator> <literal type="number" pos:line="70" pos:column="33">1<pos:position pos:line="70" pos:column="34"/></literal> <operator pos:line="70" pos:column="35">&amp;&amp;<pos:position pos:line="70" pos:column="45"/></operator> <call><name pos:line="70" pos:column="38">SIMILAR_ENOUGH<pos:position pos:line="70" pos:column="52"/></name><argument_list pos:line="70" pos:column="52">(<argument><expr><name pos:line="70" pos:column="53">best_similarity<pos:position pos:line="70" pos:column="68"/></name></expr></argument>)<pos:position pos:line="70" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="70"/></condition><then pos:line="70" pos:column="70"> <block pos:line="70" pos:column="71">{
		<decl_stmt><decl><type><specifier pos:line="71" pos:column="17">const<pos:position pos:line="71" pos:column="22"/></specifier> <name pos:line="71" pos:column="23">char<pos:position pos:line="71" pos:column="27"/></name> <modifier pos:line="71" pos:column="28">*<pos:position pos:line="71" pos:column="29"/></modifier></type><name pos:line="71" pos:column="29">assumed<pos:position pos:line="71" pos:column="36"/></name> <init pos:line="71" pos:column="37">= <expr><name><name pos:line="71" pos:column="39">main_cmds<pos:position pos:line="71" pos:column="48"/></name><operator pos:line="71" pos:column="48">.<pos:position pos:line="71" pos:column="49"/></operator><name pos:line="71" pos:column="49">names<pos:position pos:line="71" pos:column="54"/></name><index pos:line="71" pos:column="54">[<expr><literal type="number" pos:line="71" pos:column="55">0<pos:position pos:line="71" pos:column="56"/></literal></expr>]<pos:position pos:line="71" pos:column="57"/></index></name><operator pos:line="71" pos:column="57">-&gt;<pos:position pos:line="71" pos:column="62"/></operator><name pos:line="71" pos:column="59">name<pos:position pos:line="71" pos:column="63"/></name></expr></init></decl>;<pos:position pos:line="71" pos:column="64"/></decl_stmt>
		<expr_stmt><expr><name><name pos:line="72" pos:column="17">main_cmds<pos:position pos:line="72" pos:column="26"/></name><operator pos:line="72" pos:column="26">.<pos:position pos:line="72" pos:column="27"/></operator><name pos:line="72" pos:column="27">names<pos:position pos:line="72" pos:column="32"/></name><index pos:line="72" pos:column="32">[<expr><literal type="number" pos:line="72" pos:column="33">0<pos:position pos:line="72" pos:column="34"/></literal></expr>]<pos:position pos:line="72" pos:column="35"/></index></name> <operator pos:line="72" pos:column="36">=<pos:position pos:line="72" pos:column="37"/></operator> <name pos:line="72" pos:column="38">NULL<pos:position pos:line="72" pos:column="42"/></name></expr>;<pos:position pos:line="72" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="73" pos:column="17">clean_cmdnames<pos:position pos:line="73" pos:column="31"/></name><argument_list pos:line="73" pos:column="31">(<argument><expr><operator pos:line="73" pos:column="32">&amp;<pos:position pos:line="73" pos:column="37"/></operator><name pos:line="73" pos:column="33">main_cmds<pos:position pos:line="73" pos:column="42"/></name></expr></argument>)<pos:position pos:line="73" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="74" pos:column="17">fprintf_ln<pos:position pos:line="74" pos:column="27"/></name><argument_list pos:line="74" pos:column="27">(<argument><expr><name pos:line="74" pos:column="28">stderr<pos:position pos:line="74" pos:column="34"/></name></expr></argument>,
			   <argument><expr><call><name pos:line="75" pos:column="28">_<pos:position pos:line="75" pos:column="29"/></name><argument_list pos:line="75" pos:column="29">(<argument><expr><literal type="string" pos:line="75" pos:column="30">"WARNING: You called a Git command named '%s', "<pos:position pos:line="75" pos:column="78"/></literal>
			     <literal type="string" pos:line="76" pos:column="30">"which does not exist.\n"<pos:position pos:line="76" pos:column="55"/></literal>
			     <literal type="string" pos:line="77" pos:column="30">"Continuing under the assumption that you meant '%s'"<pos:position pos:line="77" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="84"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="78" pos:column="25">cmd<pos:position pos:line="78" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="30">assumed<pos:position pos:line="78" pos:column="37"/></name></expr></argument>)<pos:position pos:line="78" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="39"/></expr_stmt>
		<if pos:line="79" pos:column="17">if <condition pos:line="79" pos:column="20">(<expr><name pos:line="79" pos:column="21">autocorrect<pos:position pos:line="79" pos:column="32"/></name> <operator pos:line="79" pos:column="33">&gt;<pos:position pos:line="79" pos:column="37"/></operator> <literal type="number" pos:line="79" pos:column="35">0<pos:position pos:line="79" pos:column="36"/></literal></expr>)<pos:position pos:line="79" pos:column="37"/></condition><then pos:line="79" pos:column="37"> <block pos:line="79" pos:column="38">{
			<expr_stmt><expr><call><name pos:line="80" pos:column="25">fprintf_ln<pos:position pos:line="80" pos:column="35"/></name><argument_list pos:line="80" pos:column="35">(<argument><expr><name pos:line="80" pos:column="36">stderr<pos:position pos:line="80" pos:column="42"/></name></expr></argument>, <argument><expr><call><name pos:line="80" pos:column="44">_<pos:position pos:line="80" pos:column="45"/></name><argument_list pos:line="80" pos:column="45">(<argument><expr><literal type="string" pos:line="80" pos:column="46">"in %0.1f seconds automatically..."<pos:position pos:line="80" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="82"/></argument_list></call></expr></argument>,
				<argument><expr><operator pos:line="81" pos:column="33">(<pos:position pos:line="81" pos:column="34"/></operator><name pos:line="81" pos:column="34">float<pos:position pos:line="81" pos:column="39"/></name><operator pos:line="81" pos:column="39">)<pos:position pos:line="81" pos:column="40"/></operator><name pos:line="81" pos:column="40">autocorrect<pos:position pos:line="81" pos:column="51"/></name><operator pos:line="81" pos:column="51">/<pos:position pos:line="81" pos:column="52"/></operator><literal type="number" pos:line="81" pos:column="52">10.0<pos:position pos:line="81" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="82" pos:column="25">sleep_millisec<pos:position pos:line="82" pos:column="39"/></name><argument_list pos:line="82" pos:column="39">(<argument><expr><name pos:line="82" pos:column="40">autocorrect<pos:position pos:line="82" pos:column="51"/></name> <operator pos:line="82" pos:column="52">*<pos:position pos:line="82" pos:column="53"/></operator> <literal type="number" pos:line="82" pos:column="54">100<pos:position pos:line="82" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="59"/></expr_stmt>
		}<pos:position pos:line="83" pos:column="18"/></block></then></if>
		<return pos:line="84" pos:column="17">return <expr><name pos:line="84" pos:column="24">assumed<pos:position pos:line="84" pos:column="31"/></name></expr>;<pos:position pos:line="84" pos:column="32"/></return>
	}<pos:position pos:line="85" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="87" pos:column="9">fprintf_ln<pos:position pos:line="87" pos:column="19"/></name><argument_list pos:line="87" pos:column="19">(<argument><expr><name pos:line="87" pos:column="20">stderr<pos:position pos:line="87" pos:column="26"/></name></expr></argument>, <argument><expr><call><name pos:line="87" pos:column="28">_<pos:position pos:line="87" pos:column="29"/></name><argument_list pos:line="87" pos:column="29">(<argument><expr><literal type="string" pos:line="87" pos:column="30">"git: '%s' is not a git command. See 'git --help'."<pos:position pos:line="87" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="82"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="87" pos:column="84">cmd<pos:position pos:line="87" pos:column="87"/></name></expr></argument>)<pos:position pos:line="87" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="89"/></expr_stmt>

	<if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><call><name pos:line="89" pos:column="13">SIMILAR_ENOUGH<pos:position pos:line="89" pos:column="27"/></name><argument_list pos:line="89" pos:column="27">(<argument><expr><name pos:line="89" pos:column="28">best_similarity<pos:position pos:line="89" pos:column="43"/></name></expr></argument>)<pos:position pos:line="89" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="89" pos:column="45"/></condition><then pos:line="89" pos:column="45"> <block pos:line="89" pos:column="46">{
		<expr_stmt><expr><call><name pos:line="90" pos:column="17">fprintf_ln<pos:position pos:line="90" pos:column="27"/></name><argument_list pos:line="90" pos:column="27">(<argument><expr><name pos:line="90" pos:column="28">stderr<pos:position pos:line="90" pos:column="34"/></name></expr></argument>,
			   <argument><expr><call><name pos:line="91" pos:column="28">Q_<pos:position pos:line="91" pos:column="30"/></name><argument_list pos:line="91" pos:column="30">(<argument><expr><literal type="string" pos:line="91" pos:column="31">"\nThe most similar command is"<pos:position pos:line="91" pos:column="62"/></literal></expr></argument>,
			      <argument><expr><literal type="string" pos:line="92" pos:column="31">"\nThe most similar commands are"<pos:position pos:line="92" pos:column="64"/></literal></expr></argument>,
			   <argument><expr><name pos:line="93" pos:column="28">n<pos:position pos:line="93" pos:column="29"/></name></expr></argument>)<pos:position pos:line="93" pos:column="30"/></argument_list></call></expr></argument>)<pos:position pos:line="93" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="32"/></expr_stmt>

		<for pos:line="95" pos:column="17">for <control pos:line="95" pos:column="21">(<init><expr><name pos:line="95" pos:column="22">i<pos:position pos:line="95" pos:column="23"/></name> <operator pos:line="95" pos:column="24">=<pos:position pos:line="95" pos:column="25"/></operator> <literal type="number" pos:line="95" pos:column="26">0<pos:position pos:line="95" pos:column="27"/></literal></expr>;<pos:position pos:line="95" pos:column="28"/></init> <condition><expr><name pos:line="95" pos:column="29">i<pos:position pos:line="95" pos:column="30"/></name> <operator pos:line="95" pos:column="31">&lt;<pos:position pos:line="95" pos:column="35"/></operator> <name pos:line="95" pos:column="33">n<pos:position pos:line="95" pos:column="34"/></name></expr>;<pos:position pos:line="95" pos:column="35"/></condition> <incr><expr><name pos:line="95" pos:column="36">i<pos:position pos:line="95" pos:column="37"/></name><operator pos:line="95" pos:column="37">++<pos:position pos:line="95" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="95" pos:column="40"/></control>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="96" pos:column="25">fprintf<pos:position pos:line="96" pos:column="32"/></name><argument_list pos:line="96" pos:column="32">(<argument><expr><name pos:line="96" pos:column="33">stderr<pos:position pos:line="96" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="41">"\t%s\n"<pos:position pos:line="96" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="96" pos:column="51">main_cmds<pos:position pos:line="96" pos:column="60"/></name><operator pos:line="96" pos:column="60">.<pos:position pos:line="96" pos:column="61"/></operator><name pos:line="96" pos:column="61">names<pos:position pos:line="96" pos:column="66"/></name><index pos:line="96" pos:column="66">[<expr><name pos:line="96" pos:column="67">i<pos:position pos:line="96" pos:column="68"/></name></expr>]<pos:position pos:line="96" pos:column="69"/></index></name><operator pos:line="96" pos:column="69">-&gt;<pos:position pos:line="96" pos:column="74"/></operator><name pos:line="96" pos:column="71">name<pos:position pos:line="96" pos:column="75"/></name></expr></argument>)<pos:position pos:line="96" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="77"/></expr_stmt></block></for>
	}<pos:position pos:line="97" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="99" pos:column="9">exit<pos:position pos:line="99" pos:column="13"/></name><argument_list pos:line="99" pos:column="13">(<argument><expr><literal type="number" pos:line="99" pos:column="14">1<pos:position pos:line="99" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="17"/></expr_stmt>
}<pos:position pos:line="100" pos:column="2"/></block></function></unit>
