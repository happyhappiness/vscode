<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1377.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">notes_merge_commit<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">notes_merge_options<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">o<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
		       <parameter><decl><type><name><name pos:line="2" pos:column="24">struct<pos:position pos:line="2" pos:column="30"/></name> <name pos:line="2" pos:column="31">notes_tree<pos:position pos:line="2" pos:column="41"/></name></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">partial_tree<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>,
		       <parameter><decl><type><name><name pos:line="3" pos:column="24">struct<pos:position pos:line="3" pos:column="30"/></name> <name pos:line="3" pos:column="31">commit<pos:position pos:line="3" pos:column="37"/></name></name> <modifier pos:line="3" pos:column="38">*<pos:position pos:line="3" pos:column="39"/></modifier></type><name pos:line="3" pos:column="39">partial_commit<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>,
		       <parameter><decl><type><name pos:line="4" pos:column="24">unsigned<pos:position pos:line="4" pos:column="32"/></name> <name pos:line="4" pos:column="33">char<pos:position pos:line="4" pos:column="37"/></name> <modifier pos:line="4" pos:column="38">*<pos:position pos:line="4" pos:column="39"/></modifier></type><name pos:line="4" pos:column="39">result_sha1<pos:position pos:line="4" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="51"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<comment type="block" pos:line="6" pos:column="9">/*
	 * Iterate through files in .git/NOTES_MERGE_WORKTREE and add all
	 * found notes to 'partial_tree'. Write the updated notes tree to
	 * the DB, and commit the resulting tree object while reusing the
	 * commit message and parents from 'partial_commit'.
	 * Finally store the new commit object SHA1 into 'result_sha1'.
	 */</comment>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">DIR<pos:position pos:line="13" pos:column="12"/></name> <modifier pos:line="13" pos:column="13">*<pos:position pos:line="13" pos:column="14"/></modifier></type><name pos:line="13" pos:column="14">dir<pos:position pos:line="13" pos:column="17"/></name></decl>;<pos:position pos:line="13" pos:column="18"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="14" pos:column="9">struct<pos:position pos:line="14" pos:column="15"/></name> <name pos:line="14" pos:column="16">dirent<pos:position pos:line="14" pos:column="22"/></name></name> <modifier pos:line="14" pos:column="23">*<pos:position pos:line="14" pos:column="24"/></modifier></type><name pos:line="14" pos:column="24">e<pos:position pos:line="14" pos:column="25"/></name></decl>;<pos:position pos:line="14" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="15" pos:column="9">struct<pos:position pos:line="15" pos:column="15"/></name> <name pos:line="15" pos:column="16">strbuf<pos:position pos:line="15" pos:column="22"/></name></name></type> <name pos:line="15" pos:column="23">path<pos:position pos:line="15" pos:column="27"/></name> <init pos:line="15" pos:column="28">= <expr><name pos:line="15" pos:column="30">STRBUF_INIT<pos:position pos:line="15" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="16" pos:column="9">const<pos:position pos:line="16" pos:column="14"/></specifier> <name pos:line="16" pos:column="15">char<pos:position pos:line="16" pos:column="19"/></name> <modifier pos:line="16" pos:column="20">*<pos:position pos:line="16" pos:column="21"/></modifier></type><name pos:line="16" pos:column="21">buffer<pos:position pos:line="16" pos:column="27"/></name> <init pos:line="16" pos:column="28">= <expr><call><name pos:line="16" pos:column="30">get_commit_buffer<pos:position pos:line="16" pos:column="47"/></name><argument_list pos:line="16" pos:column="47">(<argument><expr><name pos:line="16" pos:column="48">partial_commit<pos:position pos:line="16" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="64">NULL<pos:position pos:line="16" pos:column="68"/></name></expr></argument>)<pos:position pos:line="16" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="70"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="17" pos:column="9">const<pos:position pos:line="17" pos:column="14"/></specifier> <name pos:line="17" pos:column="15">char<pos:position pos:line="17" pos:column="19"/></name> <modifier pos:line="17" pos:column="20">*<pos:position pos:line="17" pos:column="21"/></modifier></type><name pos:line="17" pos:column="21">msg<pos:position pos:line="17" pos:column="24"/></name> <init pos:line="17" pos:column="25">= <expr><call><name pos:line="17" pos:column="27">strstr<pos:position pos:line="17" pos:column="33"/></name><argument_list pos:line="17" pos:column="33">(<argument><expr><name pos:line="17" pos:column="34">buffer<pos:position pos:line="17" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="42">"\n\n"<pos:position pos:line="17" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="18" pos:column="9">int<pos:position pos:line="18" pos:column="12"/></name></type> <name pos:line="18" pos:column="13">baselen<pos:position pos:line="18" pos:column="20"/></name></decl>;<pos:position pos:line="18" pos:column="21"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="20" pos:column="9">git_path_buf<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><operator pos:line="20" pos:column="22">&amp;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="23">path<pos:position pos:line="20" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="29">NOTES_MERGE_WORKTREE<pos:position pos:line="20" pos:column="49"/></name></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="51"/></expr_stmt>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name><name pos:line="21" pos:column="13">o<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-&gt;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="16">verbosity<pos:position pos:line="21" pos:column="25"/></name></name> <operator pos:line="21" pos:column="26">&gt;=<pos:position pos:line="21" pos:column="31"/></operator> <literal type="number" pos:line="21" pos:column="29">3<pos:position pos:line="21" pos:column="30"/></literal></expr>)<pos:position pos:line="21" pos:column="31"/></condition><then pos:line="21" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="17">printf<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><literal type="string" pos:line="22" pos:column="24">"Committing notes in notes merge worktree at %s\n"<pos:position pos:line="22" pos:column="74"/></literal></expr></argument>,
			<argument><expr><name><name pos:line="23" pos:column="25">path<pos:position pos:line="23" pos:column="29"/></name><operator pos:line="23" pos:column="29">.<pos:position pos:line="23" pos:column="30"/></operator><name pos:line="23" pos:column="30">buf<pos:position pos:line="23" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="35"/></expr_stmt></block></then></if>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">msg<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">||<pos:position pos:line="25" pos:column="20"/></operator> <name><name pos:line="25" pos:column="21">msg<pos:position pos:line="25" pos:column="24"/></name><index pos:line="25" pos:column="24">[<expr><literal type="number" pos:line="25" pos:column="25">2<pos:position pos:line="25" pos:column="26"/></literal></expr>]<pos:position pos:line="25" pos:column="27"/></index></name> <operator pos:line="25" pos:column="28">==<pos:position pos:line="25" pos:column="30"/></operator> <literal type="char" pos:line="25" pos:column="31">'\0'<pos:position pos:line="25" pos:column="35"/></literal></expr>)<pos:position pos:line="25" pos:column="36"/></condition><then pos:line="25" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="17">die<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><literal type="string" pos:line="26" pos:column="21">"partial notes commit has empty message"<pos:position pos:line="26" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="63"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="27" pos:column="9">msg<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">+=<pos:position pos:line="27" pos:column="15"/></operator> <literal type="number" pos:line="27" pos:column="16">2<pos:position pos:line="27" pos:column="17"/></literal></expr>;<pos:position pos:line="27" pos:column="18"/></expr_stmt>

	<expr_stmt><expr><name pos:line="29" pos:column="9">dir<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <call><name pos:line="29" pos:column="15">opendir<pos:position pos:line="29" pos:column="22"/></name><argument_list pos:line="29" pos:column="22">(<argument><expr><name><name pos:line="29" pos:column="23">path<pos:position pos:line="29" pos:column="27"/></name><operator pos:line="29" pos:column="27">.<pos:position pos:line="29" pos:column="28"/></operator><name pos:line="29" pos:column="28">buf<pos:position pos:line="29" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="33"/></expr_stmt>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><operator pos:line="30" pos:column="13">!<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">dir<pos:position pos:line="30" pos:column="17"/></name></expr>)<pos:position pos:line="30" pos:column="18"/></condition><then pos:line="30" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="17">die_errno<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">(<argument><expr><literal type="string" pos:line="31" pos:column="27">"could not open %s"<pos:position pos:line="31" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="48">path<pos:position pos:line="31" pos:column="52"/></name><operator pos:line="31" pos:column="52">.<pos:position pos:line="31" pos:column="53"/></operator><name pos:line="31" pos:column="53">buf<pos:position pos:line="31" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="58"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="33" pos:column="9">strbuf_addch<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><operator pos:line="33" pos:column="22">&amp;<pos:position pos:line="33" pos:column="27"/></operator><name pos:line="33" pos:column="23">path<pos:position pos:line="33" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="33" pos:column="29">'/'<pos:position pos:line="33" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="34" pos:column="9">baselen<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">=<pos:position pos:line="34" pos:column="18"/></operator> <name><name pos:line="34" pos:column="19">path<pos:position pos:line="34" pos:column="23"/></name><operator pos:line="34" pos:column="23">.<pos:position pos:line="34" pos:column="24"/></operator><name pos:line="34" pos:column="24">len<pos:position pos:line="34" pos:column="27"/></name></name></expr>;<pos:position pos:line="34" pos:column="28"/></expr_stmt>
	<while pos:line="35" pos:column="9">while <condition pos:line="35" pos:column="15">(<expr><operator pos:line="35" pos:column="16">(<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="17">e<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">=<pos:position pos:line="35" pos:column="20"/></operator> <call><name pos:line="35" pos:column="21">readdir<pos:position pos:line="35" pos:column="28"/></name><argument_list pos:line="35" pos:column="28">(<argument><expr><name pos:line="35" pos:column="29">dir<pos:position pos:line="35" pos:column="32"/></name></expr></argument>)<pos:position pos:line="35" pos:column="33"/></argument_list></call><operator pos:line="35" pos:column="33">)<pos:position pos:line="35" pos:column="34"/></operator> <operator pos:line="35" pos:column="35">!=<pos:position pos:line="35" pos:column="37"/></operator> <name pos:line="35" pos:column="38">NULL<pos:position pos:line="35" pos:column="42"/></name></expr>)<pos:position pos:line="35" pos:column="43"/></condition> <block pos:line="35" pos:column="44">{
		<decl_stmt><decl><type><name><name pos:line="36" pos:column="17">struct<pos:position pos:line="36" pos:column="23"/></name> <name pos:line="36" pos:column="24">stat<pos:position pos:line="36" pos:column="28"/></name></name></type> <name pos:line="36" pos:column="29">st<pos:position pos:line="36" pos:column="31"/></name></decl>;<pos:position pos:line="36" pos:column="32"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">unsigned<pos:position pos:line="37" pos:column="25"/></name> <name pos:line="37" pos:column="26">char<pos:position pos:line="37" pos:column="30"/></name></type> <name><name pos:line="37" pos:column="31">obj_sha1<pos:position pos:line="37" pos:column="39"/></name><index pos:line="37" pos:column="39">[<expr><literal type="number" pos:line="37" pos:column="40">20<pos:position pos:line="37" pos:column="42"/></literal></expr>]<pos:position pos:line="37" pos:column="43"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="37" pos:column="45">blob_sha1<pos:position pos:line="37" pos:column="54"/></name><index pos:line="37" pos:column="54">[<expr><literal type="number" pos:line="37" pos:column="55">20<pos:position pos:line="37" pos:column="57"/></literal></expr>]<pos:position pos:line="37" pos:column="58"/></index></name></decl>;<pos:position pos:line="37" pos:column="59"/></decl_stmt>

		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><call><name pos:line="39" pos:column="21">is_dot_or_dotdot<pos:position pos:line="39" pos:column="37"/></name><argument_list pos:line="39" pos:column="37">(<argument><expr><name><name pos:line="39" pos:column="38">e<pos:position pos:line="39" pos:column="39"/></name><operator pos:line="39" pos:column="39">-&gt;<pos:position pos:line="39" pos:column="44"/></operator><name pos:line="39" pos:column="41">d_name<pos:position pos:line="39" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="49"/></condition><then pos:line="39" pos:column="49">
			<block type="pseudo"><continue pos:line="40" pos:column="25">continue;<pos:position pos:line="40" pos:column="34"/></continue></block></then></if>

		<if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><call><name pos:line="42" pos:column="21">strlen<pos:position pos:line="42" pos:column="27"/></name><argument_list pos:line="42" pos:column="27">(<argument><expr><name><name pos:line="42" pos:column="28">e<pos:position pos:line="42" pos:column="29"/></name><operator pos:line="42" pos:column="29">-&gt;<pos:position pos:line="42" pos:column="34"/></operator><name pos:line="42" pos:column="31">d_name<pos:position pos:line="42" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="38"/></argument_list></call> <operator pos:line="42" pos:column="39">!=<pos:position pos:line="42" pos:column="41"/></operator> <literal type="number" pos:line="42" pos:column="42">40<pos:position pos:line="42" pos:column="44"/></literal> <operator pos:line="42" pos:column="45">||<pos:position pos:line="42" pos:column="47"/></operator> <call><name pos:line="42" pos:column="48">get_sha1_hex<pos:position pos:line="42" pos:column="60"/></name><argument_list pos:line="42" pos:column="60">(<argument><expr><name><name pos:line="42" pos:column="61">e<pos:position pos:line="42" pos:column="62"/></name><operator pos:line="42" pos:column="62">-&gt;<pos:position pos:line="42" pos:column="67"/></operator><name pos:line="42" pos:column="64">d_name<pos:position pos:line="42" pos:column="70"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="72">obj_sha1<pos:position pos:line="42" pos:column="80"/></name></expr></argument>)<pos:position pos:line="42" pos:column="81"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="82"/></condition><then pos:line="42" pos:column="82"> <block pos:line="42" pos:column="83">{
			<if pos:line="43" pos:column="25">if <condition pos:line="43" pos:column="28">(<expr><name><name pos:line="43" pos:column="29">o<pos:position pos:line="43" pos:column="30"/></name><operator pos:line="43" pos:column="30">-&gt;<pos:position pos:line="43" pos:column="35"/></operator><name pos:line="43" pos:column="32">verbosity<pos:position pos:line="43" pos:column="41"/></name></name> <operator pos:line="43" pos:column="42">&gt;=<pos:position pos:line="43" pos:column="47"/></operator> <literal type="number" pos:line="43" pos:column="45">3<pos:position pos:line="43" pos:column="46"/></literal></expr>)<pos:position pos:line="43" pos:column="47"/></condition><then pos:line="43" pos:column="47">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="33">printf<pos:position pos:line="44" pos:column="39"/></name><argument_list pos:line="44" pos:column="39">(<argument><expr><literal type="string" pos:line="44" pos:column="40">"Skipping non-SHA1 entry '%s%s'\n"<pos:position pos:line="44" pos:column="74"/></literal></expr></argument>,
					<argument><expr><name><name pos:line="45" pos:column="41">path<pos:position pos:line="45" pos:column="45"/></name><operator pos:line="45" pos:column="45">.<pos:position pos:line="45" pos:column="46"/></operator><name pos:line="45" pos:column="46">buf<pos:position pos:line="45" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="51">e<pos:position pos:line="45" pos:column="52"/></name><operator pos:line="45" pos:column="52">-&gt;<pos:position pos:line="45" pos:column="57"/></operator><name pos:line="45" pos:column="54">d_name<pos:position pos:line="45" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="62"/></expr_stmt></block></then></if>
			<continue pos:line="46" pos:column="25">continue;<pos:position pos:line="46" pos:column="34"/></continue>
		}<pos:position pos:line="47" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="49" pos:column="17">strbuf_addstr<pos:position pos:line="49" pos:column="30"/></name><argument_list pos:line="49" pos:column="30">(<argument><expr><operator pos:line="49" pos:column="31">&amp;<pos:position pos:line="49" pos:column="36"/></operator><name pos:line="49" pos:column="32">path<pos:position pos:line="49" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="38">e<pos:position pos:line="49" pos:column="39"/></name><operator pos:line="49" pos:column="39">-&gt;<pos:position pos:line="49" pos:column="44"/></operator><name pos:line="49" pos:column="41">d_name<pos:position pos:line="49" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="49"/></expr_stmt>
		<comment type="block" pos:line="50" pos:column="17">/* write file as blob, and add to partial_tree */</comment>
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><call><name pos:line="51" pos:column="21">stat<pos:position pos:line="51" pos:column="25"/></name><argument_list pos:line="51" pos:column="25">(<argument><expr><name><name pos:line="51" pos:column="26">path<pos:position pos:line="51" pos:column="30"/></name><operator pos:line="51" pos:column="30">.<pos:position pos:line="51" pos:column="31"/></operator><name pos:line="51" pos:column="31">buf<pos:position pos:line="51" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="36">&amp;<pos:position pos:line="51" pos:column="41"/></operator><name pos:line="51" pos:column="37">st<pos:position pos:line="51" pos:column="39"/></name></expr></argument>)<pos:position pos:line="51" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="41"/></condition><then pos:line="51" pos:column="41">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="25">die_errno<pos:position pos:line="52" pos:column="34"/></name><argument_list pos:line="52" pos:column="34">(<argument><expr><literal type="string" pos:line="52" pos:column="35">"Failed to stat '%s'"<pos:position pos:line="52" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="58">path<pos:position pos:line="52" pos:column="62"/></name><operator pos:line="52" pos:column="62">.<pos:position pos:line="52" pos:column="63"/></operator><name pos:line="52" pos:column="63">buf<pos:position pos:line="52" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="68"/></expr_stmt></block></then></if>
		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><call><name pos:line="53" pos:column="21">index_path<pos:position pos:line="53" pos:column="31"/></name><argument_list pos:line="53" pos:column="31">(<argument><expr><name pos:line="53" pos:column="32">blob_sha1<pos:position pos:line="53" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="43">path<pos:position pos:line="53" pos:column="47"/></name><operator pos:line="53" pos:column="47">.<pos:position pos:line="53" pos:column="48"/></operator><name pos:line="53" pos:column="48">buf<pos:position pos:line="53" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="53">&amp;<pos:position pos:line="53" pos:column="58"/></operator><name pos:line="53" pos:column="54">st<pos:position pos:line="53" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="58">HASH_WRITE_OBJECT<pos:position pos:line="53" pos:column="75"/></name></expr></argument>)<pos:position pos:line="53" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="77"/></condition><then pos:line="53" pos:column="77">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="25">die<pos:position pos:line="54" pos:column="28"/></name><argument_list pos:line="54" pos:column="28">(<argument><expr><literal type="string" pos:line="54" pos:column="29">"Failed to write blob object from '%s'"<pos:position pos:line="54" pos:column="68"/></literal></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="70">path<pos:position pos:line="54" pos:column="74"/></name><operator pos:line="54" pos:column="74">.<pos:position pos:line="54" pos:column="75"/></operator><name pos:line="54" pos:column="75">buf<pos:position pos:line="54" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="80"/></expr_stmt></block></then></if>
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><call><name pos:line="55" pos:column="21">add_note<pos:position pos:line="55" pos:column="29"/></name><argument_list pos:line="55" pos:column="29">(<argument><expr><name pos:line="55" pos:column="30">partial_tree<pos:position pos:line="55" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="44">obj_sha1<pos:position pos:line="55" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="54">blob_sha1<pos:position pos:line="55" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="65">NULL<pos:position pos:line="55" pos:column="69"/></name></expr></argument>)<pos:position pos:line="55" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="71"/></condition><then pos:line="55" pos:column="71">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="25">die<pos:position pos:line="56" pos:column="28"/></name><argument_list pos:line="56" pos:column="28">(<argument><expr><literal type="string" pos:line="56" pos:column="29">"Failed to add resolved note '%s' to notes tree"<pos:position pos:line="56" pos:column="77"/></literal></expr></argument>,
			    <argument><expr><name><name pos:line="57" pos:column="29">path<pos:position pos:line="57" pos:column="33"/></name><operator pos:line="57" pos:column="33">.<pos:position pos:line="57" pos:column="34"/></operator><name pos:line="57" pos:column="34">buf<pos:position pos:line="57" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="39"/></expr_stmt></block></then></if>
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><name><name pos:line="58" pos:column="21">o<pos:position pos:line="58" pos:column="22"/></name><operator pos:line="58" pos:column="22">-&gt;<pos:position pos:line="58" pos:column="27"/></operator><name pos:line="58" pos:column="24">verbosity<pos:position pos:line="58" pos:column="33"/></name></name> <operator pos:line="58" pos:column="34">&gt;=<pos:position pos:line="58" pos:column="39"/></operator> <literal type="number" pos:line="58" pos:column="37">4<pos:position pos:line="58" pos:column="38"/></literal></expr>)<pos:position pos:line="58" pos:column="39"/></condition><then pos:line="58" pos:column="39">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="25">printf<pos:position pos:line="59" pos:column="31"/></name><argument_list pos:line="59" pos:column="31">(<argument><expr><literal type="string" pos:line="59" pos:column="32">"Added resolved note for object %s: %s\n"<pos:position pos:line="59" pos:column="73"/></literal></expr></argument>,
				<argument><expr><call><name pos:line="60" pos:column="33">sha1_to_hex<pos:position pos:line="60" pos:column="44"/></name><argument_list pos:line="60" pos:column="44">(<argument><expr><name pos:line="60" pos:column="45">obj_sha1<pos:position pos:line="60" pos:column="53"/></name></expr></argument>)<pos:position pos:line="60" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="60" pos:column="56">sha1_to_hex<pos:position pos:line="60" pos:column="67"/></name><argument_list pos:line="60" pos:column="67">(<argument><expr><name pos:line="60" pos:column="68">blob_sha1<pos:position pos:line="60" pos:column="77"/></name></expr></argument>)<pos:position pos:line="60" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="80"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="61" pos:column="17">strbuf_setlen<pos:position pos:line="61" pos:column="30"/></name><argument_list pos:line="61" pos:column="30">(<argument><expr><operator pos:line="61" pos:column="31">&amp;<pos:position pos:line="61" pos:column="36"/></operator><name pos:line="61" pos:column="32">path<pos:position pos:line="61" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="38">baselen<pos:position pos:line="61" pos:column="45"/></name></expr></argument>)<pos:position pos:line="61" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="62" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="64" pos:column="9">create_notes_commit<pos:position pos:line="64" pos:column="28"/></name><argument_list pos:line="64" pos:column="28">(<argument><expr><name pos:line="64" pos:column="29">partial_tree<pos:position pos:line="64" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="43">partial_commit<pos:position pos:line="64" pos:column="57"/></name><operator pos:line="64" pos:column="57">-&gt;<pos:position pos:line="64" pos:column="62"/></operator><name pos:line="64" pos:column="59">parents<pos:position pos:line="64" pos:column="66"/></name></name></expr></argument>,
			    <argument><expr><name pos:line="65" pos:column="29">msg<pos:position pos:line="65" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="65" pos:column="34">strlen<pos:position pos:line="65" pos:column="40"/></name><argument_list pos:line="65" pos:column="40">(<argument><expr><name pos:line="65" pos:column="41">msg<pos:position pos:line="65" pos:column="44"/></name></expr></argument>)<pos:position pos:line="65" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="65" pos:column="47">result_sha1<pos:position pos:line="65" pos:column="58"/></name></expr></argument>)<pos:position pos:line="65" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="60"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="66" pos:column="9">unuse_commit_buffer<pos:position pos:line="66" pos:column="28"/></name><argument_list pos:line="66" pos:column="28">(<argument><expr><name pos:line="66" pos:column="29">partial_commit<pos:position pos:line="66" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="45">buffer<pos:position pos:line="66" pos:column="51"/></name></expr></argument>)<pos:position pos:line="66" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="53"/></expr_stmt>
	<if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><name><name pos:line="67" pos:column="13">o<pos:position pos:line="67" pos:column="14"/></name><operator pos:line="67" pos:column="14">-&gt;<pos:position pos:line="67" pos:column="19"/></operator><name pos:line="67" pos:column="16">verbosity<pos:position pos:line="67" pos:column="25"/></name></name> <operator pos:line="67" pos:column="26">&gt;=<pos:position pos:line="67" pos:column="31"/></operator> <literal type="number" pos:line="67" pos:column="29">4<pos:position pos:line="67" pos:column="30"/></literal></expr>)<pos:position pos:line="67" pos:column="31"/></condition><then pos:line="67" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="17">printf<pos:position pos:line="68" pos:column="23"/></name><argument_list pos:line="68" pos:column="23">(<argument><expr><literal type="string" pos:line="68" pos:column="24">"Finalized notes merge commit: %s\n"<pos:position pos:line="68" pos:column="60"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="69" pos:column="25">sha1_to_hex<pos:position pos:line="69" pos:column="36"/></name><argument_list pos:line="69" pos:column="36">(<argument><expr><name pos:line="69" pos:column="37">result_sha1<pos:position pos:line="69" pos:column="48"/></name></expr></argument>)<pos:position pos:line="69" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="69" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="51"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="70" pos:column="9">strbuf_release<pos:position pos:line="70" pos:column="23"/></name><argument_list pos:line="70" pos:column="23">(<argument><expr><operator pos:line="70" pos:column="24">&amp;<pos:position pos:line="70" pos:column="29"/></operator><name pos:line="70" pos:column="25">path<pos:position pos:line="70" pos:column="29"/></name></expr></argument>)<pos:position pos:line="70" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="71" pos:column="9">closedir<pos:position pos:line="71" pos:column="17"/></name><argument_list pos:line="71" pos:column="17">(<argument><expr><name pos:line="71" pos:column="18">dir<pos:position pos:line="71" pos:column="21"/></name></expr></argument>)<pos:position pos:line="71" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="23"/></expr_stmt>
	<return pos:line="72" pos:column="9">return <expr><literal type="number" pos:line="72" pos:column="16">0<pos:position pos:line="72" pos:column="17"/></literal></expr>;<pos:position pos:line="72" pos:column="18"/></return>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
