<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_413.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_merge_recursive<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">argc<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier><modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">argv<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="54">const<pos:position pos:line="1" pos:column="59"/></specifier> <name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">prefix<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name><name pos:line="3" pos:column="15">struct<pos:position pos:line="3" pos:column="21"/></name> <name pos:line="3" pos:column="22">object_id<pos:position pos:line="3" pos:column="31"/></name></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name><name pos:line="3" pos:column="33">bases<pos:position pos:line="3" pos:column="38"/></name><index pos:line="3" pos:column="38">[<expr><literal type="number" pos:line="3" pos:column="39">21<pos:position pos:line="3" pos:column="41"/></literal></expr>]<pos:position pos:line="3" pos:column="42"/></index></name></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">bases_count<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><literal type="number" pos:line="4" pos:column="32">0<pos:position pos:line="4" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">i<pos:position pos:line="5" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="16">failed<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">object_id<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">h1<pos:position pos:line="6" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="30">h2<pos:position pos:line="6" pos:column="32"/></name></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">merge_options<pos:position pos:line="7" pos:column="29"/></name></name></type> <name pos:line="7" pos:column="30">o<pos:position pos:line="7" pos:column="31"/></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">commit<pos:position pos:line="8" pos:column="22"/></name></name> <modifier pos:line="8" pos:column="23">*<pos:position pos:line="8" pos:column="24"/></modifier></type><name pos:line="8" pos:column="24">result<pos:position pos:line="8" pos:column="30"/></name></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">init_merge_options<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><operator pos:line="10" pos:column="28">&amp;<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="29">o<pos:position pos:line="10" pos:column="30"/></name></expr></argument>)<pos:position pos:line="10" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="32"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name><name pos:line="11" pos:column="13">argv<pos:position pos:line="11" pos:column="17"/></name><index pos:line="11" pos:column="17">[<expr><literal type="number" pos:line="11" pos:column="18">0<pos:position pos:line="11" pos:column="19"/></literal></expr>]<pos:position pos:line="11" pos:column="20"/></index></name> <operator pos:line="11" pos:column="21">&amp;&amp;<pos:position pos:line="11" pos:column="31"/></operator> <call><name pos:line="11" pos:column="24">ends_with<pos:position pos:line="11" pos:column="33"/></name><argument_list pos:line="11" pos:column="33">(<argument><expr><name><name pos:line="11" pos:column="34">argv<pos:position pos:line="11" pos:column="38"/></name><index pos:line="11" pos:column="38">[<expr><literal type="number" pos:line="11" pos:column="39">0<pos:position pos:line="11" pos:column="40"/></literal></expr>]<pos:position pos:line="11" pos:column="41"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="43">"-subtree"<pos:position pos:line="11" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="55"/></condition><then pos:line="11" pos:column="55">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="12" pos:column="17">o<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">.<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="19">subtree_shift<pos:position pos:line="12" pos:column="32"/></name></name> <operator pos:line="12" pos:column="33">=<pos:position pos:line="12" pos:column="34"/></operator> <literal type="string" pos:line="12" pos:column="35">""<pos:position pos:line="12" pos:column="37"/></literal></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt></block></then></if>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">argc<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">&lt;<pos:position pos:line="14" pos:column="22"/></operator> <literal type="number" pos:line="14" pos:column="20">4<pos:position pos:line="14" pos:column="21"/></literal></expr>)<pos:position pos:line="14" pos:column="22"/></condition><then pos:line="14" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="17">usagef<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">builtin_merge_recursive_usage<pos:position pos:line="15" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="55">argv<pos:position pos:line="15" pos:column="59"/></name><index pos:line="15" pos:column="59">[<expr><literal type="number" pos:line="15" pos:column="60">0<pos:position pos:line="15" pos:column="61"/></literal></expr>]<pos:position pos:line="15" pos:column="62"/></index></name></expr></argument>)<pos:position pos:line="15" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="64"/></expr_stmt></block></then></if>

	<for pos:line="17" pos:column="9">for <control pos:line="17" pos:column="13">(<init><expr><name pos:line="17" pos:column="14">i<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <literal type="number" pos:line="17" pos:column="18">1<pos:position pos:line="17" pos:column="19"/></literal></expr>;<pos:position pos:line="17" pos:column="20"/></init> <condition><expr><name pos:line="17" pos:column="21">i<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">&lt;<pos:position pos:line="17" pos:column="27"/></operator> <name pos:line="17" pos:column="25">argc<pos:position pos:line="17" pos:column="29"/></name></expr>;<pos:position pos:line="17" pos:column="30"/></condition> <incr><expr><operator pos:line="17" pos:column="31">++<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="33">i<pos:position pos:line="17" pos:column="34"/></name></expr></incr>)<pos:position pos:line="17" pos:column="35"/></control> <block pos:line="17" pos:column="36">{
		<decl_stmt><decl><type><specifier pos:line="18" pos:column="17">const<pos:position pos:line="18" pos:column="22"/></specifier> <name pos:line="18" pos:column="23">char<pos:position pos:line="18" pos:column="27"/></name> <modifier pos:line="18" pos:column="28">*<pos:position pos:line="18" pos:column="29"/></modifier></type><name pos:line="18" pos:column="29">arg<pos:position pos:line="18" pos:column="32"/></name> <init pos:line="18" pos:column="33">= <expr><name><name pos:line="18" pos:column="35">argv<pos:position pos:line="18" pos:column="39"/></name><index pos:line="18" pos:column="39">[<expr><name pos:line="18" pos:column="40">i<pos:position pos:line="18" pos:column="41"/></name></expr>]<pos:position pos:line="18" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="18" pos:column="43"/></decl_stmt>

		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><call><name pos:line="20" pos:column="21">starts_with<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">arg<pos:position pos:line="20" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="38">"--"<pos:position pos:line="20" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="44"/></condition><then pos:line="20" pos:column="44"> <block pos:line="20" pos:column="45">{
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><operator pos:line="21" pos:column="29">!<pos:position pos:line="21" pos:column="30"/></operator><name><name pos:line="21" pos:column="30">arg<pos:position pos:line="21" pos:column="33"/></name><index pos:line="21" pos:column="33">[<expr><literal type="number" pos:line="21" pos:column="34">2<pos:position pos:line="21" pos:column="35"/></literal></expr>]<pos:position pos:line="21" pos:column="36"/></index></name></expr>)<pos:position pos:line="21" pos:column="37"/></condition><then pos:line="21" pos:column="37">
				<block type="pseudo"><break pos:line="22" pos:column="33">break;<pos:position pos:line="22" pos:column="39"/></break></block></then></if>
			<if pos:line="23" pos:column="25">if <condition pos:line="23" pos:column="28">(<expr><call><name pos:line="23" pos:column="29">parse_merge_opt<pos:position pos:line="23" pos:column="44"/></name><argument_list pos:line="23" pos:column="44">(<argument><expr><operator pos:line="23" pos:column="45">&amp;<pos:position pos:line="23" pos:column="50"/></operator><name pos:line="23" pos:column="46">o<pos:position pos:line="23" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="49">arg<pos:position pos:line="23" pos:column="52"/></name> <operator pos:line="23" pos:column="53">+<pos:position pos:line="23" pos:column="54"/></operator> <literal type="number" pos:line="23" pos:column="55">2<pos:position pos:line="23" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="58"/></condition><then pos:line="23" pos:column="58">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="33">die<pos:position pos:line="24" pos:column="36"/></name><argument_list pos:line="24" pos:column="36">(<argument><expr><literal type="string" pos:line="24" pos:column="37">"Unknown option %s"<pos:position pos:line="24" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="58">arg<pos:position pos:line="24" pos:column="61"/></name></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="63"/></expr_stmt></block></then></if>
			<continue pos:line="25" pos:column="25">continue;<pos:position pos:line="25" pos:column="34"/></continue>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">bases_count<pos:position pos:line="27" pos:column="32"/></name> <operator pos:line="27" pos:column="33">&lt;<pos:position pos:line="27" pos:column="37"/></operator> <call><name pos:line="27" pos:column="35">ARRAY_SIZE<pos:position pos:line="27" pos:column="45"/></name><argument_list pos:line="27" pos:column="45">(<argument><expr><name pos:line="27" pos:column="46">bases<pos:position pos:line="27" pos:column="51"/></name></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></call><operator pos:line="27" pos:column="52">-<pos:position pos:line="27" pos:column="53"/></operator><literal type="number" pos:line="27" pos:column="53">1<pos:position pos:line="27" pos:column="54"/></literal></expr>)<pos:position pos:line="27" pos:column="55"/></condition><then pos:line="27" pos:column="55"> <block pos:line="27" pos:column="56">{
			<decl_stmt><decl><type><name><name pos:line="28" pos:column="25">struct<pos:position pos:line="28" pos:column="31"/></name> <name pos:line="28" pos:column="32">object_id<pos:position pos:line="28" pos:column="41"/></name></name> <modifier pos:line="28" pos:column="42">*<pos:position pos:line="28" pos:column="43"/></modifier></type><name pos:line="28" pos:column="43">oid<pos:position pos:line="28" pos:column="46"/></name> <init pos:line="28" pos:column="47">= <expr><call><name pos:line="28" pos:column="49">xmalloc<pos:position pos:line="28" pos:column="56"/></name><argument_list pos:line="28" pos:column="56">(<argument><expr><sizeof pos:line="28" pos:column="57">sizeof<argument_list pos:line="28" pos:column="63">(<argument><expr pos:line="28" pos:column="64">struct <name pos:line="28" pos:column="71">object_id<pos:position pos:line="28" pos:column="80"/></name></expr></argument>)<pos:position pos:line="28" pos:column="81"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="82"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="83"/></decl_stmt>
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><call><name pos:line="29" pos:column="29">get_oid<pos:position pos:line="29" pos:column="36"/></name><argument_list pos:line="29" pos:column="36">(<argument><expr><name><name pos:line="29" pos:column="37">argv<pos:position pos:line="29" pos:column="41"/></name><index pos:line="29" pos:column="41">[<expr><name pos:line="29" pos:column="42">i<pos:position pos:line="29" pos:column="43"/></name></expr>]<pos:position pos:line="29" pos:column="44"/></index></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="46">oid<pos:position pos:line="29" pos:column="49"/></name></expr></argument>)<pos:position pos:line="29" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="51"/></condition><then pos:line="29" pos:column="51">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="33">die<pos:position pos:line="30" pos:column="36"/></name><argument_list pos:line="30" pos:column="36">(<argument><expr><literal type="string" pos:line="30" pos:column="37">"Could not parse object '%s'"<pos:position pos:line="30" pos:column="66"/></literal></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="68">argv<pos:position pos:line="30" pos:column="72"/></name><index pos:line="30" pos:column="72">[<expr><name pos:line="30" pos:column="73">i<pos:position pos:line="30" pos:column="74"/></name></expr>]<pos:position pos:line="30" pos:column="75"/></index></name></expr></argument>)<pos:position pos:line="30" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="77"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name><name pos:line="31" pos:column="25">bases<pos:position pos:line="31" pos:column="30"/></name><index pos:line="31" pos:column="30">[<expr><name pos:line="31" pos:column="31">bases_count<pos:position pos:line="31" pos:column="42"/></name><operator pos:line="31" pos:column="42">++<pos:position pos:line="31" pos:column="44"/></operator></expr>]<pos:position pos:line="31" pos:column="45"/></index></name> <operator pos:line="31" pos:column="46">=<pos:position pos:line="31" pos:column="47"/></operator> <name pos:line="31" pos:column="48">oid<pos:position pos:line="31" pos:column="51"/></name></expr>;<pos:position pos:line="31" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="32" pos:column="18"/></block></then>
		<else pos:line="33" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="25">warning<pos:position pos:line="34" pos:column="32"/></name><argument_list pos:line="34" pos:column="32">(<argument><expr><literal type="string" pos:line="34" pos:column="33">"Cannot handle more than %d bases. "<pos:position pos:line="34" pos:column="69"/></literal>
				<literal type="string" pos:line="35" pos:column="33">"Ignoring %s."<pos:position pos:line="35" pos:column="47"/></literal></expr></argument>,
				<argument><expr><operator pos:line="36" pos:column="33">(<pos:position pos:line="36" pos:column="34"/></operator><name pos:line="36" pos:column="34">int<pos:position pos:line="36" pos:column="37"/></name><operator pos:line="36" pos:column="37">)<pos:position pos:line="36" pos:column="38"/></operator><call><name pos:line="36" pos:column="38">ARRAY_SIZE<pos:position pos:line="36" pos:column="48"/></name><argument_list pos:line="36" pos:column="48">(<argument><expr><name pos:line="36" pos:column="49">bases<pos:position pos:line="36" pos:column="54"/></name></expr></argument>)<pos:position pos:line="36" pos:column="55"/></argument_list></call><operator pos:line="36" pos:column="55">-<pos:position pos:line="36" pos:column="56"/></operator><literal type="number" pos:line="36" pos:column="56">1<pos:position pos:line="36" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="59">argv<pos:position pos:line="36" pos:column="63"/></name><index pos:line="36" pos:column="63">[<expr><name pos:line="36" pos:column="64">i<pos:position pos:line="36" pos:column="65"/></name></expr>]<pos:position pos:line="36" pos:column="66"/></index></name></expr></argument>)<pos:position pos:line="36" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="68"/></expr_stmt></block></else></if>
	}<pos:position pos:line="37" pos:column="10"/></block></for>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">argc<pos:position pos:line="38" pos:column="17"/></name> <operator pos:line="38" pos:column="18">-<pos:position pos:line="38" pos:column="19"/></operator> <name pos:line="38" pos:column="20">i<pos:position pos:line="38" pos:column="21"/></name> <operator pos:line="38" pos:column="22">!=<pos:position pos:line="38" pos:column="24"/></operator> <literal type="number" pos:line="38" pos:column="25">3<pos:position pos:line="38" pos:column="26"/></literal></expr>)<pos:position pos:line="38" pos:column="27"/></condition><then pos:line="38" pos:column="27"> <comment type="block" pos:line="38" pos:column="28">/* "--" "&lt;head&gt;" "&lt;remote&gt;" */</comment>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="17">die<pos:position pos:line="39" pos:column="20"/></name><argument_list pos:line="39" pos:column="20">(<argument><expr><literal type="string" pos:line="39" pos:column="21">"Not handling anything other than two heads merge."<pos:position pos:line="39" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="74"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name><name pos:line="41" pos:column="9">o<pos:position pos:line="41" pos:column="10"/></name><operator pos:line="41" pos:column="10">.<pos:position pos:line="41" pos:column="11"/></operator><name pos:line="41" pos:column="11">branch1<pos:position pos:line="41" pos:column="18"/></name></name> <operator pos:line="41" pos:column="19">=<pos:position pos:line="41" pos:column="20"/></operator> <name><name pos:line="41" pos:column="21">argv<pos:position pos:line="41" pos:column="25"/></name><index pos:line="41" pos:column="25">[<expr><operator pos:line="41" pos:column="26">++<pos:position pos:line="41" pos:column="28"/></operator><name pos:line="41" pos:column="28">i<pos:position pos:line="41" pos:column="29"/></name></expr>]<pos:position pos:line="41" pos:column="30"/></index></name></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="42" pos:column="9">o<pos:position pos:line="42" pos:column="10"/></name><operator pos:line="42" pos:column="10">.<pos:position pos:line="42" pos:column="11"/></operator><name pos:line="42" pos:column="11">branch2<pos:position pos:line="42" pos:column="18"/></name></name> <operator pos:line="42" pos:column="19">=<pos:position pos:line="42" pos:column="20"/></operator> <name><name pos:line="42" pos:column="21">argv<pos:position pos:line="42" pos:column="25"/></name><index pos:line="42" pos:column="25">[<expr><operator pos:line="42" pos:column="26">++<pos:position pos:line="42" pos:column="28"/></operator><name pos:line="42" pos:column="28">i<pos:position pos:line="42" pos:column="29"/></name></expr>]<pos:position pos:line="42" pos:column="30"/></index></name></expr>;<pos:position pos:line="42" pos:column="31"/></expr_stmt>

	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><call><name pos:line="44" pos:column="13">get_oid<pos:position pos:line="44" pos:column="20"/></name><argument_list pos:line="44" pos:column="20">(<argument><expr><name><name pos:line="44" pos:column="21">o<pos:position pos:line="44" pos:column="22"/></name><operator pos:line="44" pos:column="22">.<pos:position pos:line="44" pos:column="23"/></operator><name pos:line="44" pos:column="23">branch1<pos:position pos:line="44" pos:column="30"/></name></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="32">&amp;<pos:position pos:line="44" pos:column="37"/></operator><name pos:line="44" pos:column="33">h1<pos:position pos:line="44" pos:column="35"/></name></expr></argument>)<pos:position pos:line="44" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="37"/></condition><then pos:line="44" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="17">die<pos:position pos:line="45" pos:column="20"/></name><argument_list pos:line="45" pos:column="20">(<argument><expr><literal type="string" pos:line="45" pos:column="21">"Could not resolve ref '%s'"<pos:position pos:line="45" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="51">o<pos:position pos:line="45" pos:column="52"/></name><operator pos:line="45" pos:column="52">.<pos:position pos:line="45" pos:column="53"/></operator><name pos:line="45" pos:column="53">branch1<pos:position pos:line="45" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="62"/></expr_stmt></block></then></if>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><call><name pos:line="46" pos:column="13">get_oid<pos:position pos:line="46" pos:column="20"/></name><argument_list pos:line="46" pos:column="20">(<argument><expr><name><name pos:line="46" pos:column="21">o<pos:position pos:line="46" pos:column="22"/></name><operator pos:line="46" pos:column="22">.<pos:position pos:line="46" pos:column="23"/></operator><name pos:line="46" pos:column="23">branch2<pos:position pos:line="46" pos:column="30"/></name></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="32">&amp;<pos:position pos:line="46" pos:column="37"/></operator><name pos:line="46" pos:column="33">h2<pos:position pos:line="46" pos:column="35"/></name></expr></argument>)<pos:position pos:line="46" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="37"/></condition><then pos:line="46" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="17">die<pos:position pos:line="47" pos:column="20"/></name><argument_list pos:line="47" pos:column="20">(<argument><expr><literal type="string" pos:line="47" pos:column="21">"Could not resolve ref '%s'"<pos:position pos:line="47" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="51">o<pos:position pos:line="47" pos:column="52"/></name><operator pos:line="47" pos:column="52">.<pos:position pos:line="47" pos:column="53"/></operator><name pos:line="47" pos:column="53">branch2<pos:position pos:line="47" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="62"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name><name pos:line="49" pos:column="9">o<pos:position pos:line="49" pos:column="10"/></name><operator pos:line="49" pos:column="10">.<pos:position pos:line="49" pos:column="11"/></operator><name pos:line="49" pos:column="11">branch1<pos:position pos:line="49" pos:column="18"/></name></name> <operator pos:line="49" pos:column="19">=<pos:position pos:line="49" pos:column="20"/></operator> <call><name pos:line="49" pos:column="21">better_branch_name<pos:position pos:line="49" pos:column="39"/></name><argument_list pos:line="49" pos:column="39">(<argument><expr><name><name pos:line="49" pos:column="40">o<pos:position pos:line="49" pos:column="41"/></name><operator pos:line="49" pos:column="41">.<pos:position pos:line="49" pos:column="42"/></operator><name pos:line="49" pos:column="42">branch1<pos:position pos:line="49" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="50" pos:column="9">o<pos:position pos:line="50" pos:column="10"/></name><operator pos:line="50" pos:column="10">.<pos:position pos:line="50" pos:column="11"/></operator><name pos:line="50" pos:column="11">branch2<pos:position pos:line="50" pos:column="18"/></name></name> <operator pos:line="50" pos:column="19">=<pos:position pos:line="50" pos:column="20"/></operator> <call><name pos:line="50" pos:column="21">better_branch_name<pos:position pos:line="50" pos:column="39"/></name><argument_list pos:line="50" pos:column="39">(<argument><expr><name><name pos:line="50" pos:column="40">o<pos:position pos:line="50" pos:column="41"/></name><operator pos:line="50" pos:column="41">.<pos:position pos:line="50" pos:column="42"/></operator><name pos:line="50" pos:column="42">branch2<pos:position pos:line="50" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="51"/></expr_stmt>

	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><name><name pos:line="52" pos:column="13">o<pos:position pos:line="52" pos:column="14"/></name><operator pos:line="52" pos:column="14">.<pos:position pos:line="52" pos:column="15"/></operator><name pos:line="52" pos:column="15">verbosity<pos:position pos:line="52" pos:column="24"/></name></name> <operator pos:line="52" pos:column="25">&gt;=<pos:position pos:line="52" pos:column="30"/></operator> <literal type="number" pos:line="52" pos:column="28">3<pos:position pos:line="52" pos:column="29"/></literal></expr>)<pos:position pos:line="52" pos:column="30"/></condition><then pos:line="52" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="17">printf<pos:position pos:line="53" pos:column="23"/></name><argument_list pos:line="53" pos:column="23">(<argument><expr><literal type="string" pos:line="53" pos:column="24">"Merging %s with %s\n"<pos:position pos:line="53" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="48">o<pos:position pos:line="53" pos:column="49"/></name><operator pos:line="53" pos:column="49">.<pos:position pos:line="53" pos:column="50"/></operator><name pos:line="53" pos:column="50">branch1<pos:position pos:line="53" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="59">o<pos:position pos:line="53" pos:column="60"/></name><operator pos:line="53" pos:column="60">.<pos:position pos:line="53" pos:column="61"/></operator><name pos:line="53" pos:column="61">branch2<pos:position pos:line="53" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="70"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="55" pos:column="9">failed<pos:position pos:line="55" pos:column="15"/></name> <operator pos:line="55" pos:column="16">=<pos:position pos:line="55" pos:column="17"/></operator> <call><name pos:line="55" pos:column="18">merge_recursive_generic<pos:position pos:line="55" pos:column="41"/></name><argument_list pos:line="55" pos:column="41">(<argument><expr><operator pos:line="55" pos:column="42">&amp;<pos:position pos:line="55" pos:column="47"/></operator><name pos:line="55" pos:column="43">o<pos:position pos:line="55" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="46">&amp;<pos:position pos:line="55" pos:column="51"/></operator><name pos:line="55" pos:column="47">h1<pos:position pos:line="55" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="51">&amp;<pos:position pos:line="55" pos:column="56"/></operator><name pos:line="55" pos:column="52">h2<pos:position pos:line="55" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="56">bases_count<pos:position pos:line="55" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="69">bases<pos:position pos:line="55" pos:column="74"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="76">&amp;<pos:position pos:line="55" pos:column="81"/></operator><name pos:line="55" pos:column="77">result<pos:position pos:line="55" pos:column="83"/></name></expr></argument>)<pos:position pos:line="55" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="85"/></expr_stmt>
	<if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><name pos:line="56" pos:column="13">failed<pos:position pos:line="56" pos:column="19"/></name> <operator pos:line="56" pos:column="20">&lt;<pos:position pos:line="56" pos:column="24"/></operator> <literal type="number" pos:line="56" pos:column="22">0<pos:position pos:line="56" pos:column="23"/></literal></expr>)<pos:position pos:line="56" pos:column="24"/></condition><then pos:line="56" pos:column="24">
		<block type="pseudo"><return pos:line="57" pos:column="17">return <expr><literal type="number" pos:line="57" pos:column="24">128<pos:position pos:line="57" pos:column="27"/></literal></expr>;<pos:position pos:line="57" pos:column="28"/></return></block></then></if> <comment type="block" pos:line="57" pos:column="29">/* die() error code */</comment>
	<return pos:line="58" pos:column="9">return <expr><name pos:line="58" pos:column="16">failed<pos:position pos:line="58" pos:column="22"/></name></expr>;<pos:position pos:line="58" pos:column="23"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
