<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5852_git-2.9.4.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">pack_refs<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name pos:line="1" pos:column="15">unsigned<pos:position pos:line="1" pos:column="23"/></name> <name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">flags<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">pack_refs_cb_data<pos:position pos:line="3" pos:column="33"/></name></name></type> <name pos:line="3" pos:column="34">cbdata<pos:position pos:line="3" pos:column="40"/></name></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">memset<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><operator pos:line="5" pos:column="16">&amp;<pos:position pos:line="5" pos:column="21"/></operator><name pos:line="5" pos:column="17">cbdata<pos:position pos:line="5" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="25">0<pos:position pos:line="5" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="5" pos:column="28">sizeof<argument_list pos:line="5" pos:column="34">(<argument><expr><name pos:line="5" pos:column="35">cbdata<pos:position pos:line="5" pos:column="41"/></name></expr></argument>)<pos:position pos:line="5" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="6" pos:column="9">cbdata<pos:position pos:line="6" pos:column="15"/></name><operator pos:line="6" pos:column="15">.<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="16">flags<pos:position pos:line="6" pos:column="21"/></name></name> <operator pos:line="6" pos:column="22">=<pos:position pos:line="6" pos:column="23"/></operator> <name pos:line="6" pos:column="24">flags<pos:position pos:line="6" pos:column="29"/></name></expr>;<pos:position pos:line="6" pos:column="30"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">lock_packed_refs<pos:position pos:line="8" pos:column="25"/></name><argument_list pos:line="8" pos:column="25">(<argument><expr><name pos:line="8" pos:column="26">LOCK_DIE_ON_ERROR<pos:position pos:line="8" pos:column="43"/></name></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="9" pos:column="9">cbdata<pos:position pos:line="9" pos:column="15"/></name><operator pos:line="9" pos:column="15">.<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="16">packed_refs<pos:position pos:line="9" pos:column="27"/></name></name> <operator pos:line="9" pos:column="28">=<pos:position pos:line="9" pos:column="29"/></operator> <call><name pos:line="9" pos:column="30">get_packed_refs<pos:position pos:line="9" pos:column="45"/></name><argument_list pos:line="9" pos:column="45">(<argument><expr><operator pos:line="9" pos:column="46">&amp;<pos:position pos:line="9" pos:column="51"/></operator><name pos:line="9" pos:column="47">ref_cache<pos:position pos:line="9" pos:column="56"/></name></expr></argument>)<pos:position pos:line="9" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="58"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">do_for_each_entry_in_dir<pos:position pos:line="11" pos:column="33"/></name><argument_list pos:line="11" pos:column="33">(<argument><expr><call><name pos:line="11" pos:column="34">get_loose_refs<pos:position pos:line="11" pos:column="48"/></name><argument_list pos:line="11" pos:column="48">(<argument><expr><operator pos:line="11" pos:column="49">&amp;<pos:position pos:line="11" pos:column="54"/></operator><name pos:line="11" pos:column="50">ref_cache<pos:position pos:line="11" pos:column="59"/></name></expr></argument>)<pos:position pos:line="11" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="62">0<pos:position pos:line="11" pos:column="63"/></literal></expr></argument>,
				 <argument><expr><name pos:line="12" pos:column="34">pack_if_possible_fn<pos:position pos:line="12" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="55">&amp;<pos:position pos:line="12" pos:column="60"/></operator><name pos:line="12" pos:column="56">cbdata<pos:position pos:line="12" pos:column="62"/></name></expr></argument>)<pos:position pos:line="12" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="64"/></expr_stmt>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><call><name pos:line="14" pos:column="13">commit_packed_refs<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">()<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="34"/></condition><then pos:line="14" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="17">die_errno<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">(<argument><expr><literal type="string" pos:line="15" pos:column="27">"unable to overwrite old ref-pack file"<pos:position pos:line="15" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="68"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="17" pos:column="9">prune_refs<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><name><name pos:line="17" pos:column="20">cbdata<pos:position pos:line="17" pos:column="26"/></name><operator pos:line="17" pos:column="26">.<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="27">ref_to_prune<pos:position pos:line="17" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>
	<return pos:line="18" pos:column="9">return <expr><literal type="number" pos:line="18" pos:column="16">0<pos:position pos:line="18" pos:column="17"/></literal></expr>;<pos:position pos:line="18" pos:column="18"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
