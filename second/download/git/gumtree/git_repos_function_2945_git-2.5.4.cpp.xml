<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2945_git-2.5.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">setup_named_sock<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">listen_addr<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">int<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">listen_port<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="65">struct<pos:position pos:line="1" pos:column="71"/></name> <name pos:line="1" pos:column="72">socketlist<pos:position pos:line="1" pos:column="82"/></name></name> <modifier pos:line="1" pos:column="83">*<pos:position pos:line="1" pos:column="84"/></modifier></type><name pos:line="1" pos:column="84">socklist<pos:position pos:line="1" pos:column="92"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="93"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">sockaddr_in<pos:position pos:line="3" pos:column="27"/></name></name></type> <name pos:line="3" pos:column="28">sin<pos:position pos:line="3" pos:column="31"/></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">sockfd<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">long<pos:position pos:line="5" pos:column="13"/></name></type> <name pos:line="5" pos:column="14">flags<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">memset<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><operator pos:line="7" pos:column="16">&amp;<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="17">sin<pos:position pos:line="7" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="22">0<pos:position pos:line="7" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="25">sizeof <name pos:line="7" pos:column="32">sin<pos:position pos:line="7" pos:column="35"/></name></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="8" pos:column="9">sin<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">.<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">sin_family<pos:position pos:line="8" pos:column="23"/></name></name> <operator pos:line="8" pos:column="24">=<pos:position pos:line="8" pos:column="25"/></operator> <name pos:line="8" pos:column="26">AF_INET<pos:position pos:line="8" pos:column="33"/></name></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="9" pos:column="9">sin<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">.<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">sin_port<pos:position pos:line="9" pos:column="21"/></name></name> <operator pos:line="9" pos:column="22">=<pos:position pos:line="9" pos:column="23"/></operator> <call><name pos:line="9" pos:column="24">htons<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">listen_port<pos:position pos:line="9" pos:column="41"/></name></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="43"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">listen_addr<pos:position pos:line="11" pos:column="24"/></name></expr>)<pos:position pos:line="11" pos:column="25"/></condition><then pos:line="11" pos:column="25"> <block pos:line="11" pos:column="26">{
		<comment type="block" pos:line="12" pos:column="17">/* Well, host better be an IP address here. */</comment>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><call><name pos:line="13" pos:column="21">inet_pton<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><name pos:line="13" pos:column="31">AF_INET<pos:position pos:line="13" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="40">listen_addr<pos:position pos:line="13" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="53">&amp;<pos:position pos:line="13" pos:column="58"/></operator><name><name pos:line="13" pos:column="54">sin<pos:position pos:line="13" pos:column="57"/></name><operator pos:line="13" pos:column="57">.<pos:position pos:line="13" pos:column="58"/></operator><name pos:line="13" pos:column="58">sin_addr<pos:position pos:line="13" pos:column="66"/></name><operator pos:line="13" pos:column="66">.<pos:position pos:line="13" pos:column="67"/></operator><name pos:line="13" pos:column="67">s_addr<pos:position pos:line="13" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="74"/></argument_list></call> <operator pos:line="13" pos:column="75">&lt;=<pos:position pos:line="13" pos:column="80"/></operator> <literal type="number" pos:line="13" pos:column="78">0<pos:position pos:line="13" pos:column="79"/></literal></expr>)<pos:position pos:line="13" pos:column="80"/></condition><then pos:line="13" pos:column="80">
			<block type="pseudo"><return pos:line="14" pos:column="25">return <expr><literal type="number" pos:line="14" pos:column="32">0<pos:position pos:line="14" pos:column="33"/></literal></expr>;<pos:position pos:line="14" pos:column="34"/></return></block></then></if>
	}<pos:position pos:line="15" pos:column="10"/></block></then> <else pos:line="15" pos:column="11">else <block pos:line="15" pos:column="16">{
		<expr_stmt><expr><name><name pos:line="16" pos:column="17">sin<pos:position pos:line="16" pos:column="20"/></name><operator pos:line="16" pos:column="20">.<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="21">sin_addr<pos:position pos:line="16" pos:column="29"/></name><operator pos:line="16" pos:column="29">.<pos:position pos:line="16" pos:column="30"/></operator><name pos:line="16" pos:column="30">s_addr<pos:position pos:line="16" pos:column="36"/></name></name> <operator pos:line="16" pos:column="37">=<pos:position pos:line="16" pos:column="38"/></operator> <call><name pos:line="16" pos:column="39">htonl<pos:position pos:line="16" pos:column="44"/></name><argument_list pos:line="16" pos:column="44">(<argument><expr><name pos:line="16" pos:column="45">INADDR_ANY<pos:position pos:line="16" pos:column="55"/></name></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="57"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></else></if>

	<expr_stmt><expr><name pos:line="19" pos:column="9">sockfd<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <call><name pos:line="19" pos:column="18">socket<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">AF_INET<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="34">SOCK_STREAM<pos:position pos:line="19" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="47">0<pos:position pos:line="19" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="50"/></expr_stmt>
	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">sockfd<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">&lt;<pos:position pos:line="20" pos:column="24"/></operator> <literal type="number" pos:line="20" pos:column="22">0<pos:position pos:line="20" pos:column="23"/></literal></expr>)<pos:position pos:line="20" pos:column="24"/></condition><then pos:line="20" pos:column="24">
		<block type="pseudo"><return pos:line="21" pos:column="17">return <expr><literal type="number" pos:line="21" pos:column="24">0<pos:position pos:line="21" pos:column="25"/></literal></expr>;<pos:position pos:line="21" pos:column="26"/></return></block></then></if>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">set_reuse_addr<pos:position pos:line="23" pos:column="27"/></name><argument_list pos:line="23" pos:column="27">(<argument><expr><name pos:line="23" pos:column="28">sockfd<pos:position pos:line="23" pos:column="34"/></name></expr></argument>)<pos:position pos:line="23" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="36"/></condition><then pos:line="23" pos:column="36"> <block pos:line="23" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">logerror<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><literal type="string" pos:line="24" pos:column="26">"Could not set SO_REUSEADDR: %s"<pos:position pos:line="24" pos:column="58"/></literal></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="60">strerror<pos:position pos:line="24" pos:column="68"/></name><argument_list pos:line="24" pos:column="68">(<argument><expr><name pos:line="24" pos:column="69">errno<pos:position pos:line="24" pos:column="74"/></name></expr></argument>)<pos:position pos:line="24" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="77"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">close<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">sockfd<pos:position pos:line="25" pos:column="29"/></name></expr></argument>)<pos:position pos:line="25" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="31"/></expr_stmt>
		<return pos:line="26" pos:column="17">return <expr><literal type="number" pos:line="26" pos:column="24">0<pos:position pos:line="26" pos:column="25"/></literal></expr>;<pos:position pos:line="26" pos:column="26"/></return>
	}<pos:position pos:line="27" pos:column="10"/></block></then></if>

	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">( <expr><call><name pos:line="29" pos:column="14">bind<pos:position pos:line="29" pos:column="18"/></name><argument_list pos:line="29" pos:column="18">(<argument><expr><name pos:line="29" pos:column="19">sockfd<pos:position pos:line="29" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="27">(<pos:position pos:line="29" pos:column="28"/></operator>struct <name pos:line="29" pos:column="35">sockaddr<pos:position pos:line="29" pos:column="43"/></name> <operator pos:line="29" pos:column="44">*<pos:position pos:line="29" pos:column="45"/></operator><operator pos:line="29" pos:column="45">)<pos:position pos:line="29" pos:column="46"/></operator><operator pos:line="29" pos:column="46">&amp;<pos:position pos:line="29" pos:column="51"/></operator><name pos:line="29" pos:column="47">sin<pos:position pos:line="29" pos:column="50"/></name></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="52">sizeof <name pos:line="29" pos:column="59">sin<pos:position pos:line="29" pos:column="62"/></name></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="63"/></argument_list></call> <operator pos:line="29" pos:column="64">&lt;<pos:position pos:line="29" pos:column="68"/></operator> <literal type="number" pos:line="29" pos:column="66">0<pos:position pos:line="29" pos:column="67"/></literal></expr> )<pos:position pos:line="29" pos:column="69"/></condition><then pos:line="29" pos:column="69"> <block pos:line="29" pos:column="70">{
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">logerror<pos:position pos:line="30" pos:column="25"/></name><argument_list pos:line="30" pos:column="25">(<argument><expr><literal type="string" pos:line="30" pos:column="26">"Could not bind to %s: %s"<pos:position pos:line="30" pos:column="52"/></literal></expr></argument>,
			 <argument><expr><call><name pos:line="31" pos:column="26">ip2str<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">(<argument><expr><name pos:line="31" pos:column="33">AF_INET<pos:position pos:line="31" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="42">(<pos:position pos:line="31" pos:column="43"/></operator>struct <name pos:line="31" pos:column="50">sockaddr<pos:position pos:line="31" pos:column="58"/></name> <operator pos:line="31" pos:column="59">*<pos:position pos:line="31" pos:column="60"/></operator><operator pos:line="31" pos:column="60">)<pos:position pos:line="31" pos:column="61"/></operator><operator pos:line="31" pos:column="61">&amp;<pos:position pos:line="31" pos:column="66"/></operator><name pos:line="31" pos:column="62">sin<pos:position pos:line="31" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="67">sizeof<argument_list pos:line="31" pos:column="73">(<argument><expr><name pos:line="31" pos:column="74">sin<pos:position pos:line="31" pos:column="77"/></name></expr></argument>)<pos:position pos:line="31" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="79"/></argument_list></call></expr></argument>,
			 <argument><expr><call><name pos:line="32" pos:column="26">strerror<pos:position pos:line="32" pos:column="34"/></name><argument_list pos:line="32" pos:column="34">(<argument><expr><name pos:line="32" pos:column="35">errno<pos:position pos:line="32" pos:column="40"/></name></expr></argument>)<pos:position pos:line="32" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">close<pos:position pos:line="33" pos:column="22"/></name><argument_list pos:line="33" pos:column="22">(<argument><expr><name pos:line="33" pos:column="23">sockfd<pos:position pos:line="33" pos:column="29"/></name></expr></argument>)<pos:position pos:line="33" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="31"/></expr_stmt>
		<return pos:line="34" pos:column="17">return <expr><literal type="number" pos:line="34" pos:column="24">0<pos:position pos:line="34" pos:column="25"/></literal></expr>;<pos:position pos:line="34" pos:column="26"/></return>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>

	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><call><name pos:line="37" pos:column="13">listen<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><name pos:line="37" pos:column="20">sockfd<pos:position pos:line="37" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="28">5<pos:position pos:line="37" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="30"/></argument_list></call> <operator pos:line="37" pos:column="31">&lt;<pos:position pos:line="37" pos:column="35"/></operator> <literal type="number" pos:line="37" pos:column="33">0<pos:position pos:line="37" pos:column="34"/></literal></expr>)<pos:position pos:line="37" pos:column="35"/></condition><then pos:line="37" pos:column="35"> <block pos:line="37" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">logerror<pos:position pos:line="38" pos:column="25"/></name><argument_list pos:line="38" pos:column="25">(<argument><expr><literal type="string" pos:line="38" pos:column="26">"Could not listen to %s: %s"<pos:position pos:line="38" pos:column="54"/></literal></expr></argument>,
			 <argument><expr><call><name pos:line="39" pos:column="26">ip2str<pos:position pos:line="39" pos:column="32"/></name><argument_list pos:line="39" pos:column="32">(<argument><expr><name pos:line="39" pos:column="33">AF_INET<pos:position pos:line="39" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="42">(<pos:position pos:line="39" pos:column="43"/></operator>struct <name pos:line="39" pos:column="50">sockaddr<pos:position pos:line="39" pos:column="58"/></name> <operator pos:line="39" pos:column="59">*<pos:position pos:line="39" pos:column="60"/></operator><operator pos:line="39" pos:column="60">)<pos:position pos:line="39" pos:column="61"/></operator><operator pos:line="39" pos:column="61">&amp;<pos:position pos:line="39" pos:column="66"/></operator><name pos:line="39" pos:column="62">sin<pos:position pos:line="39" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="39" pos:column="67">sizeof<argument_list pos:line="39" pos:column="73">(<argument><expr><name pos:line="39" pos:column="74">sin<pos:position pos:line="39" pos:column="77"/></name></expr></argument>)<pos:position pos:line="39" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="39" pos:column="79"/></argument_list></call></expr></argument>,
			 <argument><expr><call><name pos:line="40" pos:column="26">strerror<pos:position pos:line="40" pos:column="34"/></name><argument_list pos:line="40" pos:column="34">(<argument><expr><name pos:line="40" pos:column="35">errno<pos:position pos:line="40" pos:column="40"/></name></expr></argument>)<pos:position pos:line="40" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">close<pos:position pos:line="41" pos:column="22"/></name><argument_list pos:line="41" pos:column="22">(<argument><expr><name pos:line="41" pos:column="23">sockfd<pos:position pos:line="41" pos:column="29"/></name></expr></argument>)<pos:position pos:line="41" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt>
		<return pos:line="42" pos:column="17">return <expr><literal type="number" pos:line="42" pos:column="24">0<pos:position pos:line="42" pos:column="25"/></literal></expr>;<pos:position pos:line="42" pos:column="26"/></return>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="45" pos:column="9">flags<pos:position pos:line="45" pos:column="14"/></name> <operator pos:line="45" pos:column="15">=<pos:position pos:line="45" pos:column="16"/></operator> <call><name pos:line="45" pos:column="17">fcntl<pos:position pos:line="45" pos:column="22"/></name><argument_list pos:line="45" pos:column="22">(<argument><expr><name pos:line="45" pos:column="23">sockfd<pos:position pos:line="45" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="31">F_GETFD<pos:position pos:line="45" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="40">0<pos:position pos:line="45" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="43"/></expr_stmt>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">flags<pos:position pos:line="46" pos:column="18"/></name> <operator pos:line="46" pos:column="19">&gt;=<pos:position pos:line="46" pos:column="24"/></operator> <literal type="number" pos:line="46" pos:column="22">0<pos:position pos:line="46" pos:column="23"/></literal></expr>)<pos:position pos:line="46" pos:column="24"/></condition><then pos:line="46" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="17">fcntl<pos:position pos:line="47" pos:column="22"/></name><argument_list pos:line="47" pos:column="22">(<argument><expr><name pos:line="47" pos:column="23">sockfd<pos:position pos:line="47" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="31">F_SETFD<pos:position pos:line="47" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="40">flags<pos:position pos:line="47" pos:column="45"/></name> <operator pos:line="47" pos:column="46">|<pos:position pos:line="47" pos:column="47"/></operator> <name pos:line="47" pos:column="48">FD_CLOEXEC<pos:position pos:line="47" pos:column="58"/></name></expr></argument>)<pos:position pos:line="47" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="60"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="49" pos:column="9">ALLOC_GROW<pos:position pos:line="49" pos:column="19"/></name><argument_list pos:line="49" pos:column="19">(<argument><expr><name><name pos:line="49" pos:column="20">socklist<pos:position pos:line="49" pos:column="28"/></name><operator pos:line="49" pos:column="28">-&gt;<pos:position pos:line="49" pos:column="33"/></operator><name pos:line="49" pos:column="30">list<pos:position pos:line="49" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="36">socklist<pos:position pos:line="49" pos:column="44"/></name><operator pos:line="49" pos:column="44">-&gt;<pos:position pos:line="49" pos:column="49"/></operator><name pos:line="49" pos:column="46">nr<pos:position pos:line="49" pos:column="48"/></name></name> <operator pos:line="49" pos:column="49">+<pos:position pos:line="49" pos:column="50"/></operator> <literal type="number" pos:line="49" pos:column="51">1<pos:position pos:line="49" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="54">socklist<pos:position pos:line="49" pos:column="62"/></name><operator pos:line="49" pos:column="62">-&gt;<pos:position pos:line="49" pos:column="67"/></operator><name pos:line="49" pos:column="64">alloc<pos:position pos:line="49" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="71"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="50" pos:column="9">socklist<pos:position pos:line="50" pos:column="17"/></name><operator pos:line="50" pos:column="17">-&gt;<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="19">list<pos:position pos:line="50" pos:column="23"/></name><index pos:line="50" pos:column="23">[<expr><name><name pos:line="50" pos:column="24">socklist<pos:position pos:line="50" pos:column="32"/></name><operator pos:line="50" pos:column="32">-&gt;<pos:position pos:line="50" pos:column="37"/></operator><name pos:line="50" pos:column="34">nr<pos:position pos:line="50" pos:column="36"/></name></name><operator pos:line="50" pos:column="36">++<pos:position pos:line="50" pos:column="38"/></operator></expr>]<pos:position pos:line="50" pos:column="39"/></index></name> <operator pos:line="50" pos:column="40">=<pos:position pos:line="50" pos:column="41"/></operator> <name pos:line="50" pos:column="42">sockfd<pos:position pos:line="50" pos:column="48"/></name></expr>;<pos:position pos:line="50" pos:column="49"/></expr_stmt>
	<return pos:line="51" pos:column="9">return <expr><literal type="number" pos:line="51" pos:column="16">1<pos:position pos:line="51" pos:column="17"/></literal></expr>;<pos:position pos:line="51" pos:column="18"/></return>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
