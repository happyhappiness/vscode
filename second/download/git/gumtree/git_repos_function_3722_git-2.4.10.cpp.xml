<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3722_git-2.4.10.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier><modifier pos:line="1" pos:column="26">*<pos:position pos:line="1" pos:column="27"/></modifier></type><name pos:line="1" pos:column="27">argv<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">prog<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier><modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">user_argv<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">commands<pos:position pos:line="5" pos:column="24"/></name></name> <modifier pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></modifier></type><name pos:line="5" pos:column="26">cmd<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">count<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">git_setup_gettext<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">()<pos:position pos:line="8" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="29"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">git_extract_argv0_path<pos:position pos:line="10" pos:column="31"/></name><argument_list pos:line="10" pos:column="31">(<argument><expr><name><name pos:line="10" pos:column="32">argv<pos:position pos:line="10" pos:column="36"/></name><index pos:line="10" pos:column="36">[<expr><literal type="number" pos:line="10" pos:column="37">0<pos:position pos:line="10" pos:column="38"/></literal></expr>]<pos:position pos:line="10" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>

	<comment type="block" pos:line="12" pos:column="9">/*
	 * Always open file descriptors 0/1/2 to avoid clobbering files
	 * in die().  It also avoids messing up when the pipes are dup'ed
	 * onto stdin/stdout/stderr in the child processes we spawn.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">sanitize_stdfds<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">()<pos:position pos:line="17" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="27"/></expr_stmt>

	<comment type="block" pos:line="19" pos:column="9">/*
	 * Special hack to pretend to be a CVS server
	 */</comment>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">argc<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">==<pos:position pos:line="22" pos:column="20"/></operator> <literal type="number" pos:line="22" pos:column="21">2<pos:position pos:line="22" pos:column="22"/></literal> <operator pos:line="22" pos:column="23">&amp;&amp;<pos:position pos:line="22" pos:column="33"/></operator> <operator pos:line="22" pos:column="26">!<pos:position pos:line="22" pos:column="27"/></operator><call><name pos:line="22" pos:column="27">strcmp<pos:position pos:line="22" pos:column="33"/></name><argument_list pos:line="22" pos:column="33">(<argument><expr><name><name pos:line="22" pos:column="34">argv<pos:position pos:line="22" pos:column="38"/></name><index pos:line="22" pos:column="38">[<expr><literal type="number" pos:line="22" pos:column="39">1<pos:position pos:line="22" pos:column="40"/></literal></expr>]<pos:position pos:line="22" pos:column="41"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="43">"cvs server"<pos:position pos:line="22" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="57"/></condition><then pos:line="22" pos:column="57"> <block pos:line="22" pos:column="58">{
		<expr_stmt><expr><name pos:line="23" pos:column="17">argv<pos:position pos:line="23" pos:column="21"/></name><operator pos:line="23" pos:column="21">--<pos:position pos:line="23" pos:column="23"/></operator></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then> <elseif pos:line="24" pos:column="11">else <if pos:line="24" pos:column="16">if <condition pos:line="24" pos:column="19">(<expr><name pos:line="24" pos:column="20">argc<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">==<pos:position pos:line="24" pos:column="27"/></operator> <literal type="number" pos:line="24" pos:column="28">1<pos:position pos:line="24" pos:column="29"/></literal></expr>)<pos:position pos:line="24" pos:column="30"/></condition><then pos:line="24" pos:column="30"> <block pos:line="24" pos:column="31">{
		<comment type="block" pos:line="25" pos:column="17">/* Allow the user to run an interactive shell */</comment>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">cd_to_homedir<pos:position pos:line="26" pos:column="30"/></name><argument_list pos:line="26" pos:column="30">()<pos:position pos:line="26" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name pos:line="27" pos:column="21">access<pos:position pos:line="27" pos:column="27"/></name><argument_list pos:line="27" pos:column="27">(<argument><expr><name pos:line="27" pos:column="28">COMMAND_DIR<pos:position pos:line="27" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="41">R_OK<pos:position pos:line="27" pos:column="45"/></name> <operator pos:line="27" pos:column="46">|<pos:position pos:line="27" pos:column="47"/></operator> <name pos:line="27" pos:column="48">X_OK<pos:position pos:line="27" pos:column="52"/></name></expr></argument>)<pos:position pos:line="27" pos:column="53"/></argument_list></call> <operator pos:line="27" pos:column="54">==<pos:position pos:line="27" pos:column="56"/></operator> <operator pos:line="27" pos:column="57">-<pos:position pos:line="27" pos:column="58"/></operator><literal type="number" pos:line="27" pos:column="58">1<pos:position pos:line="27" pos:column="59"/></literal></expr>)<pos:position pos:line="27" pos:column="60"/></condition><then pos:line="27" pos:column="60"> <block pos:line="27" pos:column="61">{
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">die<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><literal type="string" pos:line="28" pos:column="29">"Interactive git shell is not enabled.\n"<pos:position pos:line="28" pos:column="70"/></literal>
			    <literal type="string" pos:line="29" pos:column="29">"hint: ~/"<pos:position pos:line="29" pos:column="39"/></literal> <name pos:line="29" pos:column="40">COMMAND_DIR<pos:position pos:line="29" pos:column="51"/></name> <literal type="string" pos:line="29" pos:column="52">" should exist "<pos:position pos:line="29" pos:column="68"/></literal>
			    <literal type="string" pos:line="30" pos:column="29">"and have read and execute access."<pos:position pos:line="30" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="66"/></expr_stmt>
		}<pos:position pos:line="31" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">run_shell<pos:position pos:line="32" pos:column="26"/></name><argument_list pos:line="32" pos:column="26">()<pos:position pos:line="32" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">exit<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><literal type="number" pos:line="33" pos:column="22">0<pos:position pos:line="33" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if></elseif> <elseif pos:line="34" pos:column="11">else <if pos:line="34" pos:column="16">if <condition pos:line="34" pos:column="19">(<expr><name pos:line="34" pos:column="20">argc<pos:position pos:line="34" pos:column="24"/></name> <operator pos:line="34" pos:column="25">!=<pos:position pos:line="34" pos:column="27"/></operator> <literal type="number" pos:line="34" pos:column="28">3<pos:position pos:line="34" pos:column="29"/></literal> <operator pos:line="34" pos:column="30">||<pos:position pos:line="34" pos:column="32"/></operator> <call><name pos:line="34" pos:column="33">strcmp<pos:position pos:line="34" pos:column="39"/></name><argument_list pos:line="34" pos:column="39">(<argument><expr><name><name pos:line="34" pos:column="40">argv<pos:position pos:line="34" pos:column="44"/></name><index pos:line="34" pos:column="44">[<expr><literal type="number" pos:line="34" pos:column="45">1<pos:position pos:line="34" pos:column="46"/></literal></expr>]<pos:position pos:line="34" pos:column="47"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="49">"-c"<pos:position pos:line="34" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="55"/></condition><then pos:line="34" pos:column="55"> <block pos:line="34" pos:column="56">{
		<comment type="block" pos:line="35" pos:column="17">/*
		 * We do not accept any other modes except "-c" followed by
		 * "cmd arg", where "cmd" is a very limited subset of git
		 * commands or a command in the COMMAND_DIR
		 */</comment>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">die<pos:position pos:line="40" pos:column="20"/></name><argument_list pos:line="40" pos:column="20">(<argument><expr><literal type="string" pos:line="40" pos:column="21">"Run with no arguments or with -c cmd"<pos:position pos:line="40" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="61"/></expr_stmt>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if></elseif></if>

	<expr_stmt><expr><name pos:line="43" pos:column="9">prog<pos:position pos:line="43" pos:column="13"/></name> <operator pos:line="43" pos:column="14">=<pos:position pos:line="43" pos:column="15"/></operator> <call><name pos:line="43" pos:column="16">xstrdup<pos:position pos:line="43" pos:column="23"/></name><argument_list pos:line="43" pos:column="23">(<argument><expr><name><name pos:line="43" pos:column="24">argv<pos:position pos:line="43" pos:column="28"/></name><index pos:line="43" pos:column="28">[<expr><literal type="number" pos:line="43" pos:column="29">2<pos:position pos:line="43" pos:column="30"/></literal></expr>]<pos:position pos:line="43" pos:column="31"/></index></name></expr></argument>)<pos:position pos:line="43" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="33"/></expr_stmt>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><operator pos:line="44" pos:column="13">!<pos:position pos:line="44" pos:column="14"/></operator><call><name pos:line="44" pos:column="14">strncmp<pos:position pos:line="44" pos:column="21"/></name><argument_list pos:line="44" pos:column="21">(<argument><expr><name pos:line="44" pos:column="22">prog<pos:position pos:line="44" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="28">"git"<pos:position pos:line="44" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="35">3<pos:position pos:line="44" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="37"/></argument_list></call> <operator pos:line="44" pos:column="38">&amp;&amp;<pos:position pos:line="44" pos:column="48"/></operator> <call><name pos:line="44" pos:column="41">isspace<pos:position pos:line="44" pos:column="48"/></name><argument_list pos:line="44" pos:column="48">(<argument><expr><name><name pos:line="44" pos:column="49">prog<pos:position pos:line="44" pos:column="53"/></name><index pos:line="44" pos:column="53">[<expr><literal type="number" pos:line="44" pos:column="54">3<pos:position pos:line="44" pos:column="55"/></literal></expr>]<pos:position pos:line="44" pos:column="56"/></index></name></expr></argument>)<pos:position pos:line="44" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="58"/></condition><then pos:line="44" pos:column="58">
		<comment type="block" pos:line="45" pos:column="17">/* Accept "git foo" as if the caller said "git-foo". */</comment>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="46" pos:column="17">prog<pos:position pos:line="46" pos:column="21"/></name><index pos:line="46" pos:column="21">[<expr><literal type="number" pos:line="46" pos:column="22">3<pos:position pos:line="46" pos:column="23"/></literal></expr>]<pos:position pos:line="46" pos:column="24"/></index></name> <operator pos:line="46" pos:column="25">=<pos:position pos:line="46" pos:column="26"/></operator> <literal type="char" pos:line="46" pos:column="27">'-'<pos:position pos:line="46" pos:column="30"/></literal></expr>;<pos:position pos:line="46" pos:column="31"/></expr_stmt></block></then></if>

	<for pos:line="48" pos:column="9">for <control pos:line="48" pos:column="13">(<init><expr><name pos:line="48" pos:column="14">cmd<pos:position pos:line="48" pos:column="17"/></name> <operator pos:line="48" pos:column="18">=<pos:position pos:line="48" pos:column="19"/></operator> <name pos:line="48" pos:column="20">cmd_list<pos:position pos:line="48" pos:column="28"/></name></expr> ;<pos:position pos:line="48" pos:column="30"/></init> <condition><expr><name><name pos:line="48" pos:column="31">cmd<pos:position pos:line="48" pos:column="34"/></name><operator pos:line="48" pos:column="34">-&gt;<pos:position pos:line="48" pos:column="39"/></operator><name pos:line="48" pos:column="36">name<pos:position pos:line="48" pos:column="40"/></name></name></expr> ;<pos:position pos:line="48" pos:column="42"/></condition> <incr><expr><name pos:line="48" pos:column="43">cmd<pos:position pos:line="48" pos:column="46"/></name><operator pos:line="48" pos:column="46">++<pos:position pos:line="48" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="48" pos:column="49"/></control> <block pos:line="48" pos:column="50">{
		<decl_stmt><decl><type><name pos:line="49" pos:column="17">int<pos:position pos:line="49" pos:column="20"/></name></type> <name pos:line="49" pos:column="21">len<pos:position pos:line="49" pos:column="24"/></name> <init pos:line="49" pos:column="25">= <expr><call><name pos:line="49" pos:column="27">strlen<pos:position pos:line="49" pos:column="33"/></name><argument_list pos:line="49" pos:column="33">(<argument><expr><name><name pos:line="49" pos:column="34">cmd<pos:position pos:line="49" pos:column="37"/></name><operator pos:line="49" pos:column="37">-&gt;<pos:position pos:line="49" pos:column="42"/></operator><name pos:line="49" pos:column="39">name<pos:position pos:line="49" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="49" pos:column="45"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="50" pos:column="17">char<pos:position pos:line="50" pos:column="21"/></name> <modifier pos:line="50" pos:column="22">*<pos:position pos:line="50" pos:column="23"/></modifier></type><name pos:line="50" pos:column="23">arg<pos:position pos:line="50" pos:column="26"/></name></decl>;<pos:position pos:line="50" pos:column="27"/></decl_stmt>
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><call><name pos:line="51" pos:column="21">strncmp<pos:position pos:line="51" pos:column="28"/></name><argument_list pos:line="51" pos:column="28">(<argument><expr><name><name pos:line="51" pos:column="29">cmd<pos:position pos:line="51" pos:column="32"/></name><operator pos:line="51" pos:column="32">-&gt;<pos:position pos:line="51" pos:column="37"/></operator><name pos:line="51" pos:column="34">name<pos:position pos:line="51" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="40">prog<pos:position pos:line="51" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="46">len<pos:position pos:line="51" pos:column="49"/></name></expr></argument>)<pos:position pos:line="51" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="51"/></condition><then pos:line="51" pos:column="51">
			<block type="pseudo"><continue pos:line="52" pos:column="25">continue;<pos:position pos:line="52" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="53" pos:column="17">arg<pos:position pos:line="53" pos:column="20"/></name> <operator pos:line="53" pos:column="21">=<pos:position pos:line="53" pos:column="22"/></operator> <name pos:line="53" pos:column="23">NULL<pos:position pos:line="53" pos:column="27"/></name></expr>;<pos:position pos:line="53" pos:column="28"/></expr_stmt>
		<switch pos:line="54" pos:column="17">switch <condition pos:line="54" pos:column="24">(<expr><name><name pos:line="54" pos:column="25">prog<pos:position pos:line="54" pos:column="29"/></name><index pos:line="54" pos:column="29">[<expr><name pos:line="54" pos:column="30">len<pos:position pos:line="54" pos:column="33"/></name></expr>]<pos:position pos:line="54" pos:column="34"/></index></name></expr>)<pos:position pos:line="54" pos:column="35"/></condition> <block pos:line="54" pos:column="36">{
		<case pos:line="55" pos:column="17">case <expr><literal type="char" pos:line="55" pos:column="22">'\0'<pos:position pos:line="55" pos:column="26"/></literal></expr>:<pos:position pos:line="55" pos:column="27"/></case>
			<expr_stmt><expr><name pos:line="56" pos:column="25">arg<pos:position pos:line="56" pos:column="28"/></name> <operator pos:line="56" pos:column="29">=<pos:position pos:line="56" pos:column="30"/></operator> <name pos:line="56" pos:column="31">NULL<pos:position pos:line="56" pos:column="35"/></name></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt>
			<break pos:line="57" pos:column="25">break;<pos:position pos:line="57" pos:column="31"/></break>
		<case pos:line="58" pos:column="17">case <expr><literal type="char" pos:line="58" pos:column="22">' '<pos:position pos:line="58" pos:column="25"/></literal></expr>:<pos:position pos:line="58" pos:column="26"/></case>
			<expr_stmt><expr><name pos:line="59" pos:column="25">arg<pos:position pos:line="59" pos:column="28"/></name> <operator pos:line="59" pos:column="29">=<pos:position pos:line="59" pos:column="30"/></operator> <name pos:line="59" pos:column="31">prog<pos:position pos:line="59" pos:column="35"/></name> <operator pos:line="59" pos:column="36">+<pos:position pos:line="59" pos:column="37"/></operator> <name pos:line="59" pos:column="38">len<pos:position pos:line="59" pos:column="41"/></name> <operator pos:line="59" pos:column="42">+<pos:position pos:line="59" pos:column="43"/></operator> <literal type="number" pos:line="59" pos:column="44">1<pos:position pos:line="59" pos:column="45"/></literal></expr>;<pos:position pos:line="59" pos:column="46"/></expr_stmt>
			<break pos:line="60" pos:column="25">break;<pos:position pos:line="60" pos:column="31"/></break>
		<default pos:line="61" pos:column="17">default:<pos:position pos:line="61" pos:column="25"/></default>
			<continue pos:line="62" pos:column="25">continue;<pos:position pos:line="62" pos:column="34"/></continue>
		}<pos:position pos:line="63" pos:column="18"/></block></switch>
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">exit<pos:position pos:line="64" pos:column="21"/></name><argument_list pos:line="64" pos:column="21">(<argument><expr><call><name><name pos:line="64" pos:column="22">cmd<pos:position pos:line="64" pos:column="25"/></name><operator pos:line="64" pos:column="25">-&gt;<pos:position pos:line="64" pos:column="30"/></operator><name pos:line="64" pos:column="27">exec<pos:position pos:line="64" pos:column="31"/></name></name><argument_list pos:line="64" pos:column="31">(<argument><expr><name><name pos:line="64" pos:column="32">cmd<pos:position pos:line="64" pos:column="35"/></name><operator pos:line="64" pos:column="35">-&gt;<pos:position pos:line="64" pos:column="40"/></operator><name pos:line="64" pos:column="37">name<pos:position pos:line="64" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="43">arg<pos:position pos:line="64" pos:column="46"/></name></expr></argument>)<pos:position pos:line="64" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="65" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="67" pos:column="9">cd_to_homedir<pos:position pos:line="67" pos:column="22"/></name><argument_list pos:line="67" pos:column="22">()<pos:position pos:line="67" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><name pos:line="68" pos:column="9">count<pos:position pos:line="68" pos:column="14"/></name> <operator pos:line="68" pos:column="15">=<pos:position pos:line="68" pos:column="16"/></operator> <call><name pos:line="68" pos:column="17">split_cmdline<pos:position pos:line="68" pos:column="30"/></name><argument_list pos:line="68" pos:column="30">(<argument><expr><name pos:line="68" pos:column="31">prog<pos:position pos:line="68" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="37">&amp;<pos:position pos:line="68" pos:column="42"/></operator><name pos:line="68" pos:column="38">user_argv<pos:position pos:line="68" pos:column="47"/></name></expr></argument>)<pos:position pos:line="68" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="49"/></expr_stmt>
	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name pos:line="69" pos:column="13">count<pos:position pos:line="69" pos:column="18"/></name> <operator pos:line="69" pos:column="19">&gt;=<pos:position pos:line="69" pos:column="24"/></operator> <literal type="number" pos:line="69" pos:column="22">0<pos:position pos:line="69" pos:column="23"/></literal></expr>)<pos:position pos:line="69" pos:column="24"/></condition><then pos:line="69" pos:column="24"> <block pos:line="69" pos:column="25">{
		<if pos:line="70" pos:column="17">if <condition pos:line="70" pos:column="20">(<expr><call><name pos:line="70" pos:column="21">is_valid_cmd_name<pos:position pos:line="70" pos:column="38"/></name><argument_list pos:line="70" pos:column="38">(<argument><expr><name><name pos:line="70" pos:column="39">user_argv<pos:position pos:line="70" pos:column="48"/></name><index pos:line="70" pos:column="48">[<expr><literal type="number" pos:line="70" pos:column="49">0<pos:position pos:line="70" pos:column="50"/></literal></expr>]<pos:position pos:line="70" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="70" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="53"/></condition><then pos:line="70" pos:column="53"> <block pos:line="70" pos:column="54">{
			<expr_stmt><expr><name pos:line="71" pos:column="25">prog<pos:position pos:line="71" pos:column="29"/></name> <operator pos:line="71" pos:column="30">=<pos:position pos:line="71" pos:column="31"/></operator> <call><name pos:line="71" pos:column="32">make_cmd<pos:position pos:line="71" pos:column="40"/></name><argument_list pos:line="71" pos:column="40">(<argument><expr><name><name pos:line="71" pos:column="41">user_argv<pos:position pos:line="71" pos:column="50"/></name><index pos:line="71" pos:column="50">[<expr><literal type="number" pos:line="71" pos:column="51">0<pos:position pos:line="71" pos:column="52"/></literal></expr>]<pos:position pos:line="71" pos:column="53"/></index></name></expr></argument>)<pos:position pos:line="71" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="72" pos:column="25">user_argv<pos:position pos:line="72" pos:column="34"/></name><index pos:line="72" pos:column="34">[<expr><literal type="number" pos:line="72" pos:column="35">0<pos:position pos:line="72" pos:column="36"/></literal></expr>]<pos:position pos:line="72" pos:column="37"/></index></name> <operator pos:line="72" pos:column="38">=<pos:position pos:line="72" pos:column="39"/></operator> <name pos:line="72" pos:column="40">prog<pos:position pos:line="72" pos:column="44"/></name></expr>;<pos:position pos:line="72" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="73" pos:column="25">execv<pos:position pos:line="73" pos:column="30"/></name><argument_list pos:line="73" pos:column="30">(<argument><expr><name><name pos:line="73" pos:column="31">user_argv<pos:position pos:line="73" pos:column="40"/></name><index pos:line="73" pos:column="40">[<expr><literal type="number" pos:line="73" pos:column="41">0<pos:position pos:line="73" pos:column="42"/></literal></expr>]<pos:position pos:line="73" pos:column="43"/></index></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="45">(<pos:position pos:line="73" pos:column="46"/></operator><name pos:line="73" pos:column="46">char<pos:position pos:line="73" pos:column="50"/></name> <operator pos:line="73" pos:column="51">*<pos:position pos:line="73" pos:column="52"/></operator><specifier pos:line="73" pos:column="52">const<pos:position pos:line="73" pos:column="57"/></specifier> <operator pos:line="73" pos:column="58">*<pos:position pos:line="73" pos:column="59"/></operator><operator pos:line="73" pos:column="59">)<pos:position pos:line="73" pos:column="60"/></operator> <name pos:line="73" pos:column="61">user_argv<pos:position pos:line="73" pos:column="70"/></name></expr></argument>)<pos:position pos:line="73" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="72"/></expr_stmt>
		}<pos:position pos:line="74" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="75" pos:column="17">free<pos:position pos:line="75" pos:column="21"/></name><argument_list pos:line="75" pos:column="21">(<argument><expr><name pos:line="75" pos:column="22">prog<pos:position pos:line="75" pos:column="26"/></name></expr></argument>)<pos:position pos:line="75" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="76" pos:column="17">free<pos:position pos:line="76" pos:column="21"/></name><argument_list pos:line="76" pos:column="21">(<argument><expr><name pos:line="76" pos:column="22">user_argv<pos:position pos:line="76" pos:column="31"/></name></expr></argument>)<pos:position pos:line="76" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="77" pos:column="17">die<pos:position pos:line="77" pos:column="20"/></name><argument_list pos:line="77" pos:column="20">(<argument><expr><literal type="string" pos:line="77" pos:column="21">"unrecognized command '%s'"<pos:position pos:line="77" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="50">argv<pos:position pos:line="77" pos:column="54"/></name><index pos:line="77" pos:column="54">[<expr><literal type="number" pos:line="77" pos:column="55">2<pos:position pos:line="77" pos:column="56"/></literal></expr>]<pos:position pos:line="77" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="77" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="59"/></expr_stmt>
	}<pos:position pos:line="78" pos:column="10"/></block></then> <else pos:line="78" pos:column="11">else <block pos:line="78" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="79" pos:column="17">free<pos:position pos:line="79" pos:column="21"/></name><argument_list pos:line="79" pos:column="21">(<argument><expr><name pos:line="79" pos:column="22">prog<pos:position pos:line="79" pos:column="26"/></name></expr></argument>)<pos:position pos:line="79" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="80" pos:column="17">die<pos:position pos:line="80" pos:column="20"/></name><argument_list pos:line="80" pos:column="20">(<argument><expr><literal type="string" pos:line="80" pos:column="21">"invalid command format '%s': %s"<pos:position pos:line="80" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="56">argv<pos:position pos:line="80" pos:column="60"/></name><index pos:line="80" pos:column="60">[<expr><literal type="number" pos:line="80" pos:column="61">2<pos:position pos:line="80" pos:column="62"/></literal></expr>]<pos:position pos:line="80" pos:column="63"/></index></name></expr></argument>,
		    <argument><expr><call><name pos:line="81" pos:column="21">split_cmdline_strerror<pos:position pos:line="81" pos:column="43"/></name><argument_list pos:line="81" pos:column="43">(<argument><expr><name pos:line="81" pos:column="44">count<pos:position pos:line="81" pos:column="49"/></name></expr></argument>)<pos:position pos:line="81" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="81" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="52"/></expr_stmt>
	}<pos:position pos:line="82" pos:column="10"/></block></else></if>
}<pos:position pos:line="83" pos:column="2"/></block></function></unit>
