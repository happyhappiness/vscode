<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4489_git-2.5.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">fragment<pos:position pos:line="1" pos:column="23"/></name></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier></type><name pos:line="1" pos:column="25">parse_binary_hunk<pos:position pos:line="1" pos:column="42"/></name><parameter_list pos:line="1" pos:column="42">(<parameter><decl><type><name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier><modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">buf_p<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
					  <parameter><decl><type><name pos:line="2" pos:column="43">unsigned<pos:position pos:line="2" pos:column="51"/></name> <name pos:line="2" pos:column="52">long<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">sz_p<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>,
					  <parameter><decl><type><name pos:line="3" pos:column="43">int<pos:position pos:line="3" pos:column="46"/></name> <modifier pos:line="3" pos:column="47">*<pos:position pos:line="3" pos:column="48"/></modifier></type><name pos:line="3" pos:column="48">status_p<pos:position pos:line="3" pos:column="56"/></name></decl></parameter>,
					  <parameter><decl><type><name pos:line="4" pos:column="43">int<pos:position pos:line="4" pos:column="46"/></name> <modifier pos:line="4" pos:column="47">*<pos:position pos:line="4" pos:column="48"/></modifier></type><name pos:line="4" pos:column="48">used_p<pos:position pos:line="4" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="55"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<comment type="block" pos:line="6" pos:column="9">/*
	 * Expect a line that begins with binary patch method ("literal"
	 * or "delta"), followed by the length of data before deflating.
	 * a sequence of 'length-byte' followed by base-85 encoded data
	 * should follow, terminated by a newline.
	 *
	 * Each 5-byte sequence of base-85 encodes up to 4 bytes,
	 * and we would limit the patch line to 66 characters,
	 * so one line can fit up to 13 groups that would decode
	 * to 52 bytes max.  The length byte 'A'-'Z' corresponds
	 * to 1-26 bytes, and 'a'-'z' corresponds to 27-52 bytes.
	 */</comment>
	<decl_stmt><decl><type><name pos:line="18" pos:column="9">int<pos:position pos:line="18" pos:column="12"/></name></type> <name pos:line="18" pos:column="13">llen<pos:position pos:line="18" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="18" pos:column="19">used<pos:position pos:line="18" pos:column="23"/></name></decl>;<pos:position pos:line="18" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="19" pos:column="9">unsigned<pos:position pos:line="19" pos:column="17"/></name> <name pos:line="19" pos:column="18">long<pos:position pos:line="19" pos:column="22"/></name></type> <name pos:line="19" pos:column="23">size<pos:position pos:line="19" pos:column="27"/></name> <init pos:line="19" pos:column="28">= <expr><operator pos:line="19" pos:column="30">*<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="31">sz_p<pos:position pos:line="19" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="20" pos:column="9">char<pos:position pos:line="20" pos:column="13"/></name> <modifier pos:line="20" pos:column="14">*<pos:position pos:line="20" pos:column="15"/></modifier></type><name pos:line="20" pos:column="15">buffer<pos:position pos:line="20" pos:column="21"/></name> <init pos:line="20" pos:column="22">= <expr><operator pos:line="20" pos:column="24">*<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="25">buf_p<pos:position pos:line="20" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="21" pos:column="9">int<pos:position pos:line="21" pos:column="12"/></name></type> <name pos:line="21" pos:column="13">patch_method<pos:position pos:line="21" pos:column="25"/></name></decl>;<pos:position pos:line="21" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="22" pos:column="9">unsigned<pos:position pos:line="22" pos:column="17"/></name> <name pos:line="22" pos:column="18">long<pos:position pos:line="22" pos:column="22"/></name></type> <name pos:line="22" pos:column="23">origlen<pos:position pos:line="22" pos:column="30"/></name></decl>;<pos:position pos:line="22" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="23" pos:column="9">char<pos:position pos:line="23" pos:column="13"/></name> <modifier pos:line="23" pos:column="14">*<pos:position pos:line="23" pos:column="15"/></modifier></type><name pos:line="23" pos:column="15">data<pos:position pos:line="23" pos:column="19"/></name> <init pos:line="23" pos:column="20">= <expr><name pos:line="23" pos:column="22">NULL<pos:position pos:line="23" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="23" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="24" pos:column="9">int<pos:position pos:line="24" pos:column="12"/></name></type> <name pos:line="24" pos:column="13">hunk_size<pos:position pos:line="24" pos:column="22"/></name> <init pos:line="24" pos:column="23">= <expr><literal type="number" pos:line="24" pos:column="25">0<pos:position pos:line="24" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="24" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="25" pos:column="9">struct<pos:position pos:line="25" pos:column="15"/></name> <name pos:line="25" pos:column="16">fragment<pos:position pos:line="25" pos:column="24"/></name></name> <modifier pos:line="25" pos:column="25">*<pos:position pos:line="25" pos:column="26"/></modifier></type><name pos:line="25" pos:column="26">frag<pos:position pos:line="25" pos:column="30"/></name></decl>;<pos:position pos:line="25" pos:column="31"/></decl_stmt>

	<expr_stmt><expr><name pos:line="27" pos:column="9">llen<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">=<pos:position pos:line="27" pos:column="15"/></operator> <call><name pos:line="27" pos:column="16">linelen<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><name pos:line="27" pos:column="24">buffer<pos:position pos:line="27" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="32">size<pos:position pos:line="27" pos:column="36"/></name></expr></argument>)<pos:position pos:line="27" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name pos:line="28" pos:column="9">used<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">=<pos:position pos:line="28" pos:column="15"/></operator> <name pos:line="28" pos:column="16">llen<pos:position pos:line="28" pos:column="20"/></name></expr>;<pos:position pos:line="28" pos:column="21"/></expr_stmt>

	<expr_stmt><expr><operator pos:line="30" pos:column="9">*<pos:position pos:line="30" pos:column="10"/></operator><name pos:line="30" pos:column="10">status_p<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">=<pos:position pos:line="30" pos:column="20"/></operator> <literal type="number" pos:line="30" pos:column="21">0<pos:position pos:line="30" pos:column="22"/></literal></expr>;<pos:position pos:line="30" pos:column="23"/></expr_stmt>

	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><call><name pos:line="32" pos:column="13">starts_with<pos:position pos:line="32" pos:column="24"/></name><argument_list pos:line="32" pos:column="24">(<argument><expr><name pos:line="32" pos:column="25">buffer<pos:position pos:line="32" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="33">"delta "<pos:position pos:line="32" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="43"/></condition><then pos:line="32" pos:column="43"> <block pos:line="32" pos:column="44">{
		<expr_stmt><expr><name pos:line="33" pos:column="17">patch_method<pos:position pos:line="33" pos:column="29"/></name> <operator pos:line="33" pos:column="30">=<pos:position pos:line="33" pos:column="31"/></operator> <name pos:line="33" pos:column="32">BINARY_DELTA_DEFLATED<pos:position pos:line="33" pos:column="53"/></name></expr>;<pos:position pos:line="33" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><name pos:line="34" pos:column="17">origlen<pos:position pos:line="34" pos:column="24"/></name> <operator pos:line="34" pos:column="25">=<pos:position pos:line="34" pos:column="26"/></operator> <call><name pos:line="34" pos:column="27">strtoul<pos:position pos:line="34" pos:column="34"/></name><argument_list pos:line="34" pos:column="34">(<argument><expr><name pos:line="34" pos:column="35">buffer<pos:position pos:line="34" pos:column="41"/></name> <operator pos:line="34" pos:column="42">+<pos:position pos:line="34" pos:column="43"/></operator> <literal type="number" pos:line="34" pos:column="44">6<pos:position pos:line="34" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="47">NULL<pos:position pos:line="34" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="53">10<pos:position pos:line="34" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="57"/></expr_stmt>
	}<pos:position pos:line="35" pos:column="10"/></block></then>
	<elseif pos:line="36" pos:column="9">else <if pos:line="36" pos:column="14">if <condition pos:line="36" pos:column="17">(<expr><call><name pos:line="36" pos:column="18">starts_with<pos:position pos:line="36" pos:column="29"/></name><argument_list pos:line="36" pos:column="29">(<argument><expr><name pos:line="36" pos:column="30">buffer<pos:position pos:line="36" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="38">"literal "<pos:position pos:line="36" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="50"/></condition><then pos:line="36" pos:column="50"> <block pos:line="36" pos:column="51">{
		<expr_stmt><expr><name pos:line="37" pos:column="17">patch_method<pos:position pos:line="37" pos:column="29"/></name> <operator pos:line="37" pos:column="30">=<pos:position pos:line="37" pos:column="31"/></operator> <name pos:line="37" pos:column="32">BINARY_LITERAL_DEFLATED<pos:position pos:line="37" pos:column="55"/></name></expr>;<pos:position pos:line="37" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><name pos:line="38" pos:column="17">origlen<pos:position pos:line="38" pos:column="24"/></name> <operator pos:line="38" pos:column="25">=<pos:position pos:line="38" pos:column="26"/></operator> <call><name pos:line="38" pos:column="27">strtoul<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">(<argument><expr><name pos:line="38" pos:column="35">buffer<pos:position pos:line="38" pos:column="41"/></name> <operator pos:line="38" pos:column="42">+<pos:position pos:line="38" pos:column="43"/></operator> <literal type="number" pos:line="38" pos:column="44">8<pos:position pos:line="38" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="47">NULL<pos:position pos:line="38" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="53">10<pos:position pos:line="38" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="57"/></expr_stmt>
	}<pos:position pos:line="39" pos:column="10"/></block></then></if></elseif>
	<else pos:line="40" pos:column="9">else
		<block type="pseudo"><return pos:line="41" pos:column="17">return <expr><name pos:line="41" pos:column="24">NULL<pos:position pos:line="41" pos:column="28"/></name></expr>;<pos:position pos:line="41" pos:column="29"/></return></block></else></if>

	<expr_stmt><expr><name pos:line="43" pos:column="9">linenr<pos:position pos:line="43" pos:column="15"/></name><operator pos:line="43" pos:column="15">++<pos:position pos:line="43" pos:column="17"/></operator></expr>;<pos:position pos:line="43" pos:column="18"/></expr_stmt>
	<expr_stmt><expr><name pos:line="44" pos:column="9">buffer<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">+=<pos:position pos:line="44" pos:column="18"/></operator> <name pos:line="44" pos:column="19">llen<pos:position pos:line="44" pos:column="23"/></name></expr>;<pos:position pos:line="44" pos:column="24"/></expr_stmt>
	<while pos:line="45" pos:column="9">while <condition pos:line="45" pos:column="15">(<expr><literal type="number" pos:line="45" pos:column="16">1<pos:position pos:line="45" pos:column="17"/></literal></expr>)<pos:position pos:line="45" pos:column="18"/></condition> <block pos:line="45" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="46" pos:column="17">int<pos:position pos:line="46" pos:column="20"/></name></type> <name pos:line="46" pos:column="21">byte_length<pos:position pos:line="46" pos:column="32"/></name></decl>, <decl><type ref="prev"/><name pos:line="46" pos:column="34">max_byte_length<pos:position pos:line="46" pos:column="49"/></name></decl>, <decl><type ref="prev"/><name pos:line="46" pos:column="51">newsize<pos:position pos:line="46" pos:column="58"/></name></decl>;<pos:position pos:line="46" pos:column="59"/></decl_stmt>
		<expr_stmt><expr><name pos:line="47" pos:column="17">llen<pos:position pos:line="47" pos:column="21"/></name> <operator pos:line="47" pos:column="22">=<pos:position pos:line="47" pos:column="23"/></operator> <call><name pos:line="47" pos:column="24">linelen<pos:position pos:line="47" pos:column="31"/></name><argument_list pos:line="47" pos:column="31">(<argument><expr><name pos:line="47" pos:column="32">buffer<pos:position pos:line="47" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="40">size<pos:position pos:line="47" pos:column="44"/></name></expr></argument>)<pos:position pos:line="47" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><name pos:line="48" pos:column="17">used<pos:position pos:line="48" pos:column="21"/></name> <operator pos:line="48" pos:column="22">+=<pos:position pos:line="48" pos:column="24"/></operator> <name pos:line="48" pos:column="25">llen<pos:position pos:line="48" pos:column="29"/></name></expr>;<pos:position pos:line="48" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><name pos:line="49" pos:column="17">linenr<pos:position pos:line="49" pos:column="23"/></name><operator pos:line="49" pos:column="23">++<pos:position pos:line="49" pos:column="25"/></operator></expr>;<pos:position pos:line="49" pos:column="26"/></expr_stmt>
		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><name pos:line="50" pos:column="21">llen<pos:position pos:line="50" pos:column="25"/></name> <operator pos:line="50" pos:column="26">==<pos:position pos:line="50" pos:column="28"/></operator> <literal type="number" pos:line="50" pos:column="29">1<pos:position pos:line="50" pos:column="30"/></literal></expr>)<pos:position pos:line="50" pos:column="31"/></condition><then pos:line="50" pos:column="31"> <block pos:line="50" pos:column="32">{
			<comment type="block" pos:line="51" pos:column="25">/* consume the blank line */</comment>
			<expr_stmt><expr><name pos:line="52" pos:column="25">buffer<pos:position pos:line="52" pos:column="31"/></name><operator pos:line="52" pos:column="31">++<pos:position pos:line="52" pos:column="33"/></operator></expr>;<pos:position pos:line="52" pos:column="34"/></expr_stmt>
			<expr_stmt><expr><name pos:line="53" pos:column="25">size<pos:position pos:line="53" pos:column="29"/></name><operator pos:line="53" pos:column="29">--<pos:position pos:line="53" pos:column="31"/></operator></expr>;<pos:position pos:line="53" pos:column="32"/></expr_stmt>
			<break pos:line="54" pos:column="25">break;<pos:position pos:line="54" pos:column="31"/></break>
		}<pos:position pos:line="55" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="56" pos:column="17">/*
		 * Minimum line is "A00000\n" which is 7-byte long,
		 * and the line length must be multiple of 5 plus 2.
		 */</comment>
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><operator pos:line="60" pos:column="21">(<pos:position pos:line="60" pos:column="22"/></operator><name pos:line="60" pos:column="22">llen<pos:position pos:line="60" pos:column="26"/></name> <operator pos:line="60" pos:column="27">&lt;<pos:position pos:line="60" pos:column="31"/></operator> <literal type="number" pos:line="60" pos:column="29">7<pos:position pos:line="60" pos:column="30"/></literal><operator pos:line="60" pos:column="30">)<pos:position pos:line="60" pos:column="31"/></operator> <operator pos:line="60" pos:column="32">||<pos:position pos:line="60" pos:column="34"/></operator> <operator pos:line="60" pos:column="35">(<pos:position pos:line="60" pos:column="36"/></operator><name pos:line="60" pos:column="36">llen<pos:position pos:line="60" pos:column="40"/></name><operator pos:line="60" pos:column="40">-<pos:position pos:line="60" pos:column="41"/></operator><literal type="number" pos:line="60" pos:column="41">2<pos:position pos:line="60" pos:column="42"/></literal><operator pos:line="60" pos:column="42">)<pos:position pos:line="60" pos:column="43"/></operator> <operator pos:line="60" pos:column="44">%<pos:position pos:line="60" pos:column="45"/></operator> <literal type="number" pos:line="60" pos:column="46">5<pos:position pos:line="60" pos:column="47"/></literal></expr>)<pos:position pos:line="60" pos:column="48"/></condition><then pos:line="60" pos:column="48">
			<block type="pseudo"><goto pos:line="61" pos:column="25">goto <name pos:line="61" pos:column="30">corrupt<pos:position pos:line="61" pos:column="37"/></name>;<pos:position pos:line="61" pos:column="38"/></goto></block></then></if>
		<expr_stmt><expr><name pos:line="62" pos:column="17">max_byte_length<pos:position pos:line="62" pos:column="32"/></name> <operator pos:line="62" pos:column="33">=<pos:position pos:line="62" pos:column="34"/></operator> <operator pos:line="62" pos:column="35">(<pos:position pos:line="62" pos:column="36"/></operator><name pos:line="62" pos:column="36">llen<pos:position pos:line="62" pos:column="40"/></name> <operator pos:line="62" pos:column="41">-<pos:position pos:line="62" pos:column="42"/></operator> <literal type="number" pos:line="62" pos:column="43">2<pos:position pos:line="62" pos:column="44"/></literal><operator pos:line="62" pos:column="44">)<pos:position pos:line="62" pos:column="45"/></operator> <operator pos:line="62" pos:column="46">/<pos:position pos:line="62" pos:column="47"/></operator> <literal type="number" pos:line="62" pos:column="48">5<pos:position pos:line="62" pos:column="49"/></literal> <operator pos:line="62" pos:column="50">*<pos:position pos:line="62" pos:column="51"/></operator> <literal type="number" pos:line="62" pos:column="52">4<pos:position pos:line="62" pos:column="53"/></literal></expr>;<pos:position pos:line="62" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><name pos:line="63" pos:column="17">byte_length<pos:position pos:line="63" pos:column="28"/></name> <operator pos:line="63" pos:column="29">=<pos:position pos:line="63" pos:column="30"/></operator> <operator pos:line="63" pos:column="31">*<pos:position pos:line="63" pos:column="32"/></operator><name pos:line="63" pos:column="32">buffer<pos:position pos:line="63" pos:column="38"/></name></expr>;<pos:position pos:line="63" pos:column="39"/></expr_stmt>
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><literal type="char" pos:line="64" pos:column="21">'A'<pos:position pos:line="64" pos:column="24"/></literal> <operator pos:line="64" pos:column="25">&lt;=<pos:position pos:line="64" pos:column="30"/></operator> <name pos:line="64" pos:column="28">byte_length<pos:position pos:line="64" pos:column="39"/></name> <operator pos:line="64" pos:column="40">&amp;&amp;<pos:position pos:line="64" pos:column="50"/></operator> <name pos:line="64" pos:column="43">byte_length<pos:position pos:line="64" pos:column="54"/></name> <operator pos:line="64" pos:column="55">&lt;=<pos:position pos:line="64" pos:column="60"/></operator> <literal type="char" pos:line="64" pos:column="58">'Z'<pos:position pos:line="64" pos:column="61"/></literal></expr>)<pos:position pos:line="64" pos:column="62"/></condition><then pos:line="64" pos:column="62">
			<block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="25">byte_length<pos:position pos:line="65" pos:column="36"/></name> <operator pos:line="65" pos:column="37">=<pos:position pos:line="65" pos:column="38"/></operator> <name pos:line="65" pos:column="39">byte_length<pos:position pos:line="65" pos:column="50"/></name> <operator pos:line="65" pos:column="51">-<pos:position pos:line="65" pos:column="52"/></operator> <literal type="char" pos:line="65" pos:column="53">'A'<pos:position pos:line="65" pos:column="56"/></literal> <operator pos:line="65" pos:column="57">+<pos:position pos:line="65" pos:column="58"/></operator> <literal type="number" pos:line="65" pos:column="59">1<pos:position pos:line="65" pos:column="60"/></literal></expr>;<pos:position pos:line="65" pos:column="61"/></expr_stmt></block></then>
		<elseif pos:line="66" pos:column="17">else <if pos:line="66" pos:column="22">if <condition pos:line="66" pos:column="25">(<expr><literal type="char" pos:line="66" pos:column="26">'a'<pos:position pos:line="66" pos:column="29"/></literal> <operator pos:line="66" pos:column="30">&lt;=<pos:position pos:line="66" pos:column="35"/></operator> <name pos:line="66" pos:column="33">byte_length<pos:position pos:line="66" pos:column="44"/></name> <operator pos:line="66" pos:column="45">&amp;&amp;<pos:position pos:line="66" pos:column="55"/></operator> <name pos:line="66" pos:column="48">byte_length<pos:position pos:line="66" pos:column="59"/></name> <operator pos:line="66" pos:column="60">&lt;=<pos:position pos:line="66" pos:column="65"/></operator> <literal type="char" pos:line="66" pos:column="63">'z'<pos:position pos:line="66" pos:column="66"/></literal></expr>)<pos:position pos:line="66" pos:column="67"/></condition><then pos:line="66" pos:column="67">
			<block type="pseudo"><expr_stmt><expr><name pos:line="67" pos:column="25">byte_length<pos:position pos:line="67" pos:column="36"/></name> <operator pos:line="67" pos:column="37">=<pos:position pos:line="67" pos:column="38"/></operator> <name pos:line="67" pos:column="39">byte_length<pos:position pos:line="67" pos:column="50"/></name> <operator pos:line="67" pos:column="51">-<pos:position pos:line="67" pos:column="52"/></operator> <literal type="char" pos:line="67" pos:column="53">'a'<pos:position pos:line="67" pos:column="56"/></literal> <operator pos:line="67" pos:column="57">+<pos:position pos:line="67" pos:column="58"/></operator> <literal type="number" pos:line="67" pos:column="59">27<pos:position pos:line="67" pos:column="61"/></literal></expr>;<pos:position pos:line="67" pos:column="62"/></expr_stmt></block></then></if></elseif>
		<else pos:line="68" pos:column="17">else
			<block type="pseudo"><goto pos:line="69" pos:column="25">goto <name pos:line="69" pos:column="30">corrupt<pos:position pos:line="69" pos:column="37"/></name>;<pos:position pos:line="69" pos:column="38"/></goto></block></else></if>
		<comment type="block" pos:line="70" pos:column="17">/* if the input length was not multiple of 4, we would
		 * have filler at the end but the filler should never
		 * exceed 3 bytes
		 */</comment>
		<if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><name pos:line="74" pos:column="21">max_byte_length<pos:position pos:line="74" pos:column="36"/></name> <operator pos:line="74" pos:column="37">&lt;<pos:position pos:line="74" pos:column="41"/></operator> <name pos:line="74" pos:column="39">byte_length<pos:position pos:line="74" pos:column="50"/></name> <operator pos:line="74" pos:column="51">||<pos:position pos:line="74" pos:column="53"/></operator>
		    <name pos:line="75" pos:column="21">byte_length<pos:position pos:line="75" pos:column="32"/></name> <operator pos:line="75" pos:column="33">&lt;=<pos:position pos:line="75" pos:column="38"/></operator> <name pos:line="75" pos:column="36">max_byte_length<pos:position pos:line="75" pos:column="51"/></name> <operator pos:line="75" pos:column="52">-<pos:position pos:line="75" pos:column="53"/></operator> <literal type="number" pos:line="75" pos:column="54">4<pos:position pos:line="75" pos:column="55"/></literal></expr>)<pos:position pos:line="75" pos:column="56"/></condition><then pos:line="75" pos:column="56">
			<block type="pseudo"><goto pos:line="76" pos:column="25">goto <name pos:line="76" pos:column="30">corrupt<pos:position pos:line="76" pos:column="37"/></name>;<pos:position pos:line="76" pos:column="38"/></goto></block></then></if>
		<expr_stmt><expr><name pos:line="77" pos:column="17">newsize<pos:position pos:line="77" pos:column="24"/></name> <operator pos:line="77" pos:column="25">=<pos:position pos:line="77" pos:column="26"/></operator> <name pos:line="77" pos:column="27">hunk_size<pos:position pos:line="77" pos:column="36"/></name> <operator pos:line="77" pos:column="37">+<pos:position pos:line="77" pos:column="38"/></operator> <name pos:line="77" pos:column="39">byte_length<pos:position pos:line="77" pos:column="50"/></name></expr>;<pos:position pos:line="77" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><name pos:line="78" pos:column="17">data<pos:position pos:line="78" pos:column="21"/></name> <operator pos:line="78" pos:column="22">=<pos:position pos:line="78" pos:column="23"/></operator> <call><name pos:line="78" pos:column="24">xrealloc<pos:position pos:line="78" pos:column="32"/></name><argument_list pos:line="78" pos:column="32">(<argument><expr><name pos:line="78" pos:column="33">data<pos:position pos:line="78" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="39">newsize<pos:position pos:line="78" pos:column="46"/></name></expr></argument>)<pos:position pos:line="78" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="48"/></expr_stmt>
		<if pos:line="79" pos:column="17">if <condition pos:line="79" pos:column="20">(<expr><call><name pos:line="79" pos:column="21">decode_85<pos:position pos:line="79" pos:column="30"/></name><argument_list pos:line="79" pos:column="30">(<argument><expr><name pos:line="79" pos:column="31">data<pos:position pos:line="79" pos:column="35"/></name> <operator pos:line="79" pos:column="36">+<pos:position pos:line="79" pos:column="37"/></operator> <name pos:line="79" pos:column="38">hunk_size<pos:position pos:line="79" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="49">buffer<pos:position pos:line="79" pos:column="55"/></name> <operator pos:line="79" pos:column="56">+<pos:position pos:line="79" pos:column="57"/></operator> <literal type="number" pos:line="79" pos:column="58">1<pos:position pos:line="79" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="61">byte_length<pos:position pos:line="79" pos:column="72"/></name></expr></argument>)<pos:position pos:line="79" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="79" pos:column="74"/></condition><then pos:line="79" pos:column="74">
			<block type="pseudo"><goto pos:line="80" pos:column="25">goto <name pos:line="80" pos:column="30">corrupt<pos:position pos:line="80" pos:column="37"/></name>;<pos:position pos:line="80" pos:column="38"/></goto></block></then></if>
		<expr_stmt><expr><name pos:line="81" pos:column="17">hunk_size<pos:position pos:line="81" pos:column="26"/></name> <operator pos:line="81" pos:column="27">=<pos:position pos:line="81" pos:column="28"/></operator> <name pos:line="81" pos:column="29">newsize<pos:position pos:line="81" pos:column="36"/></name></expr>;<pos:position pos:line="81" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name pos:line="82" pos:column="17">buffer<pos:position pos:line="82" pos:column="23"/></name> <operator pos:line="82" pos:column="24">+=<pos:position pos:line="82" pos:column="26"/></operator> <name pos:line="82" pos:column="27">llen<pos:position pos:line="82" pos:column="31"/></name></expr>;<pos:position pos:line="82" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name pos:line="83" pos:column="17">size<pos:position pos:line="83" pos:column="21"/></name> <operator pos:line="83" pos:column="22">-=<pos:position pos:line="83" pos:column="24"/></operator> <name pos:line="83" pos:column="25">llen<pos:position pos:line="83" pos:column="29"/></name></expr>;<pos:position pos:line="83" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="84" pos:column="10"/></block></while>

	<expr_stmt><expr><name pos:line="86" pos:column="9">frag<pos:position pos:line="86" pos:column="13"/></name> <operator pos:line="86" pos:column="14">=<pos:position pos:line="86" pos:column="15"/></operator> <call><name pos:line="86" pos:column="16">xcalloc<pos:position pos:line="86" pos:column="23"/></name><argument_list pos:line="86" pos:column="23">(<argument><expr><literal type="number" pos:line="86" pos:column="24">1<pos:position pos:line="86" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="86" pos:column="27">sizeof<argument_list pos:line="86" pos:column="33">(<argument><expr><operator pos:line="86" pos:column="34">*<pos:position pos:line="86" pos:column="35"/></operator><name pos:line="86" pos:column="35">frag<pos:position pos:line="86" pos:column="39"/></name></expr></argument>)<pos:position pos:line="86" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="86" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="87" pos:column="9">frag<pos:position pos:line="87" pos:column="13"/></name><operator pos:line="87" pos:column="13">-&gt;<pos:position pos:line="87" pos:column="18"/></operator><name pos:line="87" pos:column="15">patch<pos:position pos:line="87" pos:column="20"/></name></name> <operator pos:line="87" pos:column="21">=<pos:position pos:line="87" pos:column="22"/></operator> <call><name pos:line="87" pos:column="23">inflate_it<pos:position pos:line="87" pos:column="33"/></name><argument_list pos:line="87" pos:column="33">(<argument><expr><name pos:line="87" pos:column="34">data<pos:position pos:line="87" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="40">hunk_size<pos:position pos:line="87" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="51">origlen<pos:position pos:line="87" pos:column="58"/></name></expr></argument>)<pos:position pos:line="87" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="60"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="88" pos:column="9">frag<pos:position pos:line="88" pos:column="13"/></name><operator pos:line="88" pos:column="13">-&gt;<pos:position pos:line="88" pos:column="18"/></operator><name pos:line="88" pos:column="15">free_patch<pos:position pos:line="88" pos:column="25"/></name></name> <operator pos:line="88" pos:column="26">=<pos:position pos:line="88" pos:column="27"/></operator> <literal type="number" pos:line="88" pos:column="28">1<pos:position pos:line="88" pos:column="29"/></literal></expr>;<pos:position pos:line="88" pos:column="30"/></expr_stmt>
	<if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><operator pos:line="89" pos:column="13">!<pos:position pos:line="89" pos:column="14"/></operator><name><name pos:line="89" pos:column="14">frag<pos:position pos:line="89" pos:column="18"/></name><operator pos:line="89" pos:column="18">-&gt;<pos:position pos:line="89" pos:column="23"/></operator><name pos:line="89" pos:column="20">patch<pos:position pos:line="89" pos:column="25"/></name></name></expr>)<pos:position pos:line="89" pos:column="26"/></condition><then pos:line="89" pos:column="26">
		<block type="pseudo"><goto pos:line="90" pos:column="17">goto <name pos:line="90" pos:column="22">corrupt<pos:position pos:line="90" pos:column="29"/></name>;<pos:position pos:line="90" pos:column="30"/></goto></block></then></if>
	<expr_stmt><expr><call><name pos:line="91" pos:column="9">free<pos:position pos:line="91" pos:column="13"/></name><argument_list pos:line="91" pos:column="13">(<argument><expr><name pos:line="91" pos:column="14">data<pos:position pos:line="91" pos:column="18"/></name></expr></argument>)<pos:position pos:line="91" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="92" pos:column="9">frag<pos:position pos:line="92" pos:column="13"/></name><operator pos:line="92" pos:column="13">-&gt;<pos:position pos:line="92" pos:column="18"/></operator><name pos:line="92" pos:column="15">size<pos:position pos:line="92" pos:column="19"/></name></name> <operator pos:line="92" pos:column="20">=<pos:position pos:line="92" pos:column="21"/></operator> <name pos:line="92" pos:column="22">origlen<pos:position pos:line="92" pos:column="29"/></name></expr>;<pos:position pos:line="92" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="93" pos:column="9">*<pos:position pos:line="93" pos:column="10"/></operator><name pos:line="93" pos:column="10">buf_p<pos:position pos:line="93" pos:column="15"/></name> <operator pos:line="93" pos:column="16">=<pos:position pos:line="93" pos:column="17"/></operator> <name pos:line="93" pos:column="18">buffer<pos:position pos:line="93" pos:column="24"/></name></expr>;<pos:position pos:line="93" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="94" pos:column="9">*<pos:position pos:line="94" pos:column="10"/></operator><name pos:line="94" pos:column="10">sz_p<pos:position pos:line="94" pos:column="14"/></name> <operator pos:line="94" pos:column="15">=<pos:position pos:line="94" pos:column="16"/></operator> <name pos:line="94" pos:column="17">size<pos:position pos:line="94" pos:column="21"/></name></expr>;<pos:position pos:line="94" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="95" pos:column="9">*<pos:position pos:line="95" pos:column="10"/></operator><name pos:line="95" pos:column="10">used_p<pos:position pos:line="95" pos:column="16"/></name> <operator pos:line="95" pos:column="17">=<pos:position pos:line="95" pos:column="18"/></operator> <name pos:line="95" pos:column="19">used<pos:position pos:line="95" pos:column="23"/></name></expr>;<pos:position pos:line="95" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="96" pos:column="9">frag<pos:position pos:line="96" pos:column="13"/></name><operator pos:line="96" pos:column="13">-&gt;<pos:position pos:line="96" pos:column="18"/></operator><name pos:line="96" pos:column="15">binary_patch_method<pos:position pos:line="96" pos:column="34"/></name></name> <operator pos:line="96" pos:column="35">=<pos:position pos:line="96" pos:column="36"/></operator> <name pos:line="96" pos:column="37">patch_method<pos:position pos:line="96" pos:column="49"/></name></expr>;<pos:position pos:line="96" pos:column="50"/></expr_stmt>
	<return pos:line="97" pos:column="9">return <expr><name pos:line="97" pos:column="16">frag<pos:position pos:line="97" pos:column="20"/></name></expr>;<pos:position pos:line="97" pos:column="21"/></return>

 <label><name pos:line="99" pos:column="2">corrupt<pos:position pos:line="99" pos:column="9"/></name>:<pos:position pos:line="99" pos:column="10"/></label>
	<expr_stmt><expr><call><name pos:line="100" pos:column="9">free<pos:position pos:line="100" pos:column="13"/></name><argument_list pos:line="100" pos:column="13">(<argument><expr><name pos:line="100" pos:column="14">data<pos:position pos:line="100" pos:column="18"/></name></expr></argument>)<pos:position pos:line="100" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="101" pos:column="9">*<pos:position pos:line="101" pos:column="10"/></operator><name pos:line="101" pos:column="10">status_p<pos:position pos:line="101" pos:column="18"/></name> <operator pos:line="101" pos:column="19">=<pos:position pos:line="101" pos:column="20"/></operator> <operator pos:line="101" pos:column="21">-<pos:position pos:line="101" pos:column="22"/></operator><literal type="number" pos:line="101" pos:column="22">1<pos:position pos:line="101" pos:column="23"/></literal></expr>;<pos:position pos:line="101" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="102" pos:column="9">error<pos:position pos:line="102" pos:column="14"/></name><argument_list pos:line="102" pos:column="14">(<argument><expr><call><name pos:line="102" pos:column="15">_<pos:position pos:line="102" pos:column="16"/></name><argument_list pos:line="102" pos:column="16">(<argument><expr><literal type="string" pos:line="102" pos:column="17">"corrupt binary patch at line %d: %.*s"<pos:position pos:line="102" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="57"/></argument_list></call></expr></argument>,
	      <argument><expr><name pos:line="103" pos:column="15">linenr<pos:position pos:line="103" pos:column="21"/></name><operator pos:line="103" pos:column="21">-<pos:position pos:line="103" pos:column="22"/></operator><literal type="number" pos:line="103" pos:column="22">1<pos:position pos:line="103" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="103" pos:column="25">llen<pos:position pos:line="103" pos:column="29"/></name><operator pos:line="103" pos:column="29">-<pos:position pos:line="103" pos:column="30"/></operator><literal type="number" pos:line="103" pos:column="30">1<pos:position pos:line="103" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="103" pos:column="33">buffer<pos:position pos:line="103" pos:column="39"/></name></expr></argument>)<pos:position pos:line="103" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="41"/></expr_stmt>
	<return pos:line="104" pos:column="9">return <expr><name pos:line="104" pos:column="16">NULL<pos:position pos:line="104" pos:column="20"/></name></expr>;<pos:position pos:line="104" pos:column="21"/></return>
}<pos:position pos:line="105" pos:column="2"/></block></function></unit>
