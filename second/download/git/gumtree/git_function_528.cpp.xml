<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_528.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">write_entry<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">cache_entry<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">ce<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>,
		       <parameter><decl><type><name pos:line="2" pos:column="24">char<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">path<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier> <name><name pos:line="2" pos:column="42">struct<pos:position pos:line="2" pos:column="48"/></name> <name pos:line="2" pos:column="49">checkout<pos:position pos:line="2" pos:column="57"/></name></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">state<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="66">int<pos:position pos:line="2" pos:column="69"/></name></type> <name pos:line="2" pos:column="70">to_tempfile<pos:position pos:line="2" pos:column="81"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="82"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">int<pos:position pos:line="4" pos:column="21"/></name></type> <name pos:line="4" pos:column="22">ce_mode_s_ifmt<pos:position pos:line="4" pos:column="36"/></name> <init pos:line="4" pos:column="37">= <expr><name><name pos:line="4" pos:column="39">ce<pos:position pos:line="4" pos:column="41"/></name><operator pos:line="4" pos:column="41">-&gt;<pos:position pos:line="4" pos:column="46"/></operator><name pos:line="4" pos:column="43">ce_mode<pos:position pos:line="4" pos:column="50"/></name></name> <operator pos:line="4" pos:column="51">&amp;<pos:position pos:line="4" pos:column="56"/></operator> <name pos:line="4" pos:column="53">S_IFMT<pos:position pos:line="4" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="60"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">fd<pos:position pos:line="5" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="17">ret<pos:position pos:line="5" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="22">fstat_done<pos:position pos:line="5" pos:column="32"/></name> <init pos:line="5" pos:column="33">= <expr><literal type="number" pos:line="5" pos:column="35">0<pos:position pos:line="5" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
	<expr_stmt><expr><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></operator><operator pos:line="6" pos:column="15">new<pos:position pos:line="6" pos:column="18"/></operator></expr>;<pos:position pos:line="6" pos:column="19"/></expr_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">strbuf<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">buf<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><name pos:line="7" pos:column="29">STRBUF_INIT<pos:position pos:line="7" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">unsigned<pos:position pos:line="8" pos:column="17"/></name> <name pos:line="8" pos:column="18">long<pos:position pos:line="8" pos:column="22"/></name></type> <name pos:line="8" pos:column="23">size<pos:position pos:line="8" pos:column="27"/></name></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">size_t<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">wrote<pos:position pos:line="9" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="23">newsize<pos:position pos:line="9" pos:column="30"/></name> <init pos:line="9" pos:column="31">= <expr><literal type="number" pos:line="9" pos:column="33">0<pos:position pos:line="9" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">stat<pos:position pos:line="10" pos:column="20"/></name></name></type> <name pos:line="10" pos:column="21">st<pos:position pos:line="10" pos:column="23"/></name></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">ce_mode_s_ifmt<pos:position pos:line="12" pos:column="27"/></name> <operator pos:line="12" pos:column="28">==<pos:position pos:line="12" pos:column="30"/></operator> <name pos:line="12" pos:column="31">S_IFREG<pos:position pos:line="12" pos:column="38"/></name></expr>)<pos:position pos:line="12" pos:column="39"/></condition><then pos:line="12" pos:column="39"> <block pos:line="12" pos:column="40">{
		<decl_stmt><decl><type><name><name pos:line="13" pos:column="17">struct<pos:position pos:line="13" pos:column="23"/></name> <name pos:line="13" pos:column="24">stream_filter<pos:position pos:line="13" pos:column="37"/></name></name> <modifier pos:line="13" pos:column="38">*<pos:position pos:line="13" pos:column="39"/></modifier></type><name pos:line="13" pos:column="39">filter<pos:position pos:line="13" pos:column="45"/></name> <init pos:line="13" pos:column="46">= <expr><call><name pos:line="13" pos:column="48">get_stream_filter<pos:position pos:line="13" pos:column="65"/></name><argument_list pos:line="13" pos:column="65">(<argument><expr><name><name pos:line="13" pos:column="66">ce<pos:position pos:line="13" pos:column="68"/></name><operator pos:line="13" pos:column="68">-&gt;<pos:position pos:line="13" pos:column="73"/></operator><name pos:line="13" pos:column="70">name<pos:position pos:line="13" pos:column="74"/></name></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="76">ce<pos:position pos:line="13" pos:column="78"/></name><operator pos:line="13" pos:column="78">-&gt;<pos:position pos:line="13" pos:column="83"/></operator><name pos:line="13" pos:column="80">sha1<pos:position pos:line="13" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="85"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="86"/></decl_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">filter<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">&amp;&amp;<pos:position pos:line="14" pos:column="38"/></operator>
		    <operator pos:line="15" pos:column="21">!<pos:position pos:line="15" pos:column="22"/></operator><call><name pos:line="15" pos:column="22">streaming_write_entry<pos:position pos:line="15" pos:column="43"/></name><argument_list pos:line="15" pos:column="43">(<argument><expr><name pos:line="15" pos:column="44">ce<pos:position pos:line="15" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="48">path<pos:position pos:line="15" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="54">filter<pos:position pos:line="15" pos:column="60"/></name></expr></argument>,
					   <argument><expr><name pos:line="16" pos:column="44">state<pos:position pos:line="16" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="51">to_tempfile<pos:position pos:line="16" pos:column="62"/></name></expr></argument>,
					   <argument><expr><operator pos:line="17" pos:column="44">&amp;<pos:position pos:line="17" pos:column="49"/></operator><name pos:line="17" pos:column="45">fstat_done<pos:position pos:line="17" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="57">&amp;<pos:position pos:line="17" pos:column="62"/></operator><name pos:line="17" pos:column="58">st<pos:position pos:line="17" pos:column="60"/></name></expr></argument>)<pos:position pos:line="17" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="62"/></condition><then pos:line="17" pos:column="62">
			<block type="pseudo"><goto pos:line="18" pos:column="25">goto <name pos:line="18" pos:column="30">finish<pos:position pos:line="18" pos:column="36"/></name>;<pos:position pos:line="18" pos:column="37"/></goto></block></then></if>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<switch pos:line="21" pos:column="9">switch <condition pos:line="21" pos:column="16">(<expr><name pos:line="21" pos:column="17">ce_mode_s_ifmt<pos:position pos:line="21" pos:column="31"/></name></expr>)<pos:position pos:line="21" pos:column="32"/></condition> <block pos:line="21" pos:column="33">{
	<case pos:line="22" pos:column="9">case <expr><name pos:line="22" pos:column="14">S_IFREG<pos:position pos:line="22" pos:column="21"/></name></expr>:<pos:position pos:line="22" pos:column="22"/></case>
	<case pos:line="23" pos:column="9">case <expr><name pos:line="23" pos:column="14">S_IFLNK<pos:position pos:line="23" pos:column="21"/></name></expr>:<pos:position pos:line="23" pos:column="22"/></case>
		<expr_stmt><expr><operator pos:line="24" pos:column="17">new<pos:position pos:line="24" pos:column="20"/></operator> <operator pos:line="24" pos:column="21">=<pos:position pos:line="24" pos:column="22"/></operator> <call><name pos:line="24" pos:column="23">read_blob_entry<pos:position pos:line="24" pos:column="38"/></name><argument_list pos:line="24" pos:column="38">(<argument><expr><name pos:line="24" pos:column="39">ce<pos:position pos:line="24" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="43">&amp;<pos:position pos:line="24" pos:column="48"/></operator><name pos:line="24" pos:column="44">size<pos:position pos:line="24" pos:column="48"/></name></expr></argument>)<pos:position pos:line="24" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="50"/></expr_stmt>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><operator pos:line="25" pos:column="21">!<pos:position pos:line="25" pos:column="22"/></operator><operator pos:line="25" pos:column="22">new<pos:position pos:line="25" pos:column="25"/></operator></expr>)<pos:position pos:line="25" pos:column="26"/></condition><then pos:line="25" pos:column="26">
			<block type="pseudo"><return pos:line="26" pos:column="25">return <expr><call><name pos:line="26" pos:column="32">error<pos:position pos:line="26" pos:column="37"/></name><argument_list pos:line="26" pos:column="37">(<argument><expr><literal type="string" pos:line="26" pos:column="38">"unable to read sha1 file of %s (%s)"<pos:position pos:line="26" pos:column="75"/></literal></expr></argument>,
				<argument><expr><name pos:line="27" pos:column="33">path<pos:position pos:line="27" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="27" pos:column="39">sha1_to_hex<pos:position pos:line="27" pos:column="50"/></name><argument_list pos:line="27" pos:column="50">(<argument><expr><name><name pos:line="27" pos:column="51">ce<pos:position pos:line="27" pos:column="53"/></name><operator pos:line="27" pos:column="53">-&gt;<pos:position pos:line="27" pos:column="58"/></operator><name pos:line="27" pos:column="55">sha1<pos:position pos:line="27" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="62"/></return></block></then></if>

		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">ce_mode_s_ifmt<pos:position pos:line="29" pos:column="35"/></name> <operator pos:line="29" pos:column="36">==<pos:position pos:line="29" pos:column="38"/></operator> <name pos:line="29" pos:column="39">S_IFLNK<pos:position pos:line="29" pos:column="46"/></name> <operator pos:line="29" pos:column="47">&amp;&amp;<pos:position pos:line="29" pos:column="57"/></operator> <name pos:line="29" pos:column="50">has_symlinks<pos:position pos:line="29" pos:column="62"/></name> <operator pos:line="29" pos:column="63">&amp;&amp;<pos:position pos:line="29" pos:column="73"/></operator> <operator pos:line="29" pos:column="66">!<pos:position pos:line="29" pos:column="67"/></operator><name pos:line="29" pos:column="67">to_tempfile<pos:position pos:line="29" pos:column="78"/></name></expr>)<pos:position pos:line="29" pos:column="79"/></condition><then pos:line="29" pos:column="79"> <block pos:line="29" pos:column="80">{
			<expr_stmt><expr><name pos:line="30" pos:column="25">ret<pos:position pos:line="30" pos:column="28"/></name> <operator pos:line="30" pos:column="29">=<pos:position pos:line="30" pos:column="30"/></operator> <call><name pos:line="30" pos:column="31">symlink<pos:position pos:line="30" pos:column="38"/></name><argument_list pos:line="30" pos:column="38">(<argument><expr><operator pos:line="30" pos:column="39">new<pos:position pos:line="30" pos:column="42"/></operator></expr></argument>, <argument><expr><name pos:line="30" pos:column="44">path<pos:position pos:line="30" pos:column="48"/></name></expr></argument>)<pos:position pos:line="30" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">free<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><operator pos:line="31" pos:column="30">new<pos:position pos:line="31" pos:column="33"/></operator></expr></argument>)<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="35"/></expr_stmt>
			<if pos:line="32" pos:column="25">if <condition pos:line="32" pos:column="28">(<expr><name pos:line="32" pos:column="29">ret<pos:position pos:line="32" pos:column="32"/></name></expr>)<pos:position pos:line="32" pos:column="33"/></condition><then pos:line="32" pos:column="33">
				<block type="pseudo"><return pos:line="33" pos:column="33">return <expr><call><name pos:line="33" pos:column="40">error_errno<pos:position pos:line="33" pos:column="51"/></name><argument_list pos:line="33" pos:column="51">(<argument><expr><literal type="string" pos:line="33" pos:column="52">"unable to create symlink %s"<pos:position pos:line="33" pos:column="81"/></literal></expr></argument>,
						   <argument><expr><name pos:line="34" pos:column="52">path<pos:position pos:line="34" pos:column="56"/></name></expr></argument>)<pos:position pos:line="34" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="58"/></return></block></then></if>
			<break pos:line="35" pos:column="25">break;<pos:position pos:line="35" pos:column="31"/></break>
		}<pos:position pos:line="36" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="38" pos:column="17">/*
		 * Convert from git internal format to working tree format
		 */</comment>
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">ce_mode_s_ifmt<pos:position pos:line="41" pos:column="35"/></name> <operator pos:line="41" pos:column="36">==<pos:position pos:line="41" pos:column="38"/></operator> <name pos:line="41" pos:column="39">S_IFREG<pos:position pos:line="41" pos:column="46"/></name> <operator pos:line="41" pos:column="47">&amp;&amp;<pos:position pos:line="41" pos:column="57"/></operator>
		    <call><name pos:line="42" pos:column="21">convert_to_working_tree<pos:position pos:line="42" pos:column="44"/></name><argument_list pos:line="42" pos:column="44">(<argument><expr><name><name pos:line="42" pos:column="45">ce<pos:position pos:line="42" pos:column="47"/></name><operator pos:line="42" pos:column="47">-&gt;<pos:position pos:line="42" pos:column="52"/></operator><name pos:line="42" pos:column="49">name<pos:position pos:line="42" pos:column="53"/></name></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="55">new<pos:position pos:line="42" pos:column="58"/></operator></expr></argument>, <argument><expr><name pos:line="42" pos:column="60">size<pos:position pos:line="42" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="66">&amp;<pos:position pos:line="42" pos:column="71"/></operator><name pos:line="42" pos:column="67">buf<pos:position pos:line="42" pos:column="70"/></name></expr></argument>)<pos:position pos:line="42" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="72"/></condition><then pos:line="42" pos:column="72"> <block pos:line="42" pos:column="73">{
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">free<pos:position pos:line="43" pos:column="29"/></name><argument_list pos:line="43" pos:column="29">(<argument><expr><operator pos:line="43" pos:column="30">new<pos:position pos:line="43" pos:column="33"/></operator></expr></argument>)<pos:position pos:line="43" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="44" pos:column="25">new<pos:position pos:line="44" pos:column="28"/></operator> <operator pos:line="44" pos:column="29">=<pos:position pos:line="44" pos:column="30"/></operator> <call><name pos:line="44" pos:column="31">strbuf_detach<pos:position pos:line="44" pos:column="44"/></name><argument_list pos:line="44" pos:column="44">(<argument><expr><operator pos:line="44" pos:column="45">&amp;<pos:position pos:line="44" pos:column="50"/></operator><name pos:line="44" pos:column="46">buf<pos:position pos:line="44" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="51">&amp;<pos:position pos:line="44" pos:column="56"/></operator><name pos:line="44" pos:column="52">newsize<pos:position pos:line="44" pos:column="59"/></name></expr></argument>)<pos:position pos:line="44" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="61"/></expr_stmt>
			<expr_stmt><expr><name pos:line="45" pos:column="25">size<pos:position pos:line="45" pos:column="29"/></name> <operator pos:line="45" pos:column="30">=<pos:position pos:line="45" pos:column="31"/></operator> <name pos:line="45" pos:column="32">newsize<pos:position pos:line="45" pos:column="39"/></name></expr>;<pos:position pos:line="45" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="46" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="48" pos:column="17">fd<pos:position pos:line="48" pos:column="19"/></name> <operator pos:line="48" pos:column="20">=<pos:position pos:line="48" pos:column="21"/></operator> <call><name pos:line="48" pos:column="22">open_output_fd<pos:position pos:line="48" pos:column="36"/></name><argument_list pos:line="48" pos:column="36">(<argument><expr><name pos:line="48" pos:column="37">path<pos:position pos:line="48" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="43">ce<pos:position pos:line="48" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="47">to_tempfile<pos:position pos:line="48" pos:column="58"/></name></expr></argument>)<pos:position pos:line="48" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="60"/></expr_stmt>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name pos:line="49" pos:column="21">fd<pos:position pos:line="49" pos:column="23"/></name> <operator pos:line="49" pos:column="24">&lt;<pos:position pos:line="49" pos:column="28"/></operator> <literal type="number" pos:line="49" pos:column="26">0<pos:position pos:line="49" pos:column="27"/></literal></expr>)<pos:position pos:line="49" pos:column="28"/></condition><then pos:line="49" pos:column="28"> <block pos:line="49" pos:column="29">{
			<expr_stmt><expr><call><name pos:line="50" pos:column="25">free<pos:position pos:line="50" pos:column="29"/></name><argument_list pos:line="50" pos:column="29">(<argument><expr><operator pos:line="50" pos:column="30">new<pos:position pos:line="50" pos:column="33"/></operator></expr></argument>)<pos:position pos:line="50" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="35"/></expr_stmt>
			<return pos:line="51" pos:column="25">return <expr><call><name pos:line="51" pos:column="32">error_errno<pos:position pos:line="51" pos:column="43"/></name><argument_list pos:line="51" pos:column="43">(<argument><expr><literal type="string" pos:line="51" pos:column="44">"unable to create file %s"<pos:position pos:line="51" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="72">path<pos:position pos:line="51" pos:column="76"/></name></expr></argument>)<pos:position pos:line="51" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="78"/></return>
		}<pos:position pos:line="52" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="54" pos:column="17">wrote<pos:position pos:line="54" pos:column="22"/></name> <operator pos:line="54" pos:column="23">=<pos:position pos:line="54" pos:column="24"/></operator> <call><name pos:line="54" pos:column="25">write_in_full<pos:position pos:line="54" pos:column="38"/></name><argument_list pos:line="54" pos:column="38">(<argument><expr><name pos:line="54" pos:column="39">fd<pos:position pos:line="54" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="43">new<pos:position pos:line="54" pos:column="46"/></operator></expr></argument>, <argument><expr><name pos:line="54" pos:column="48">size<pos:position pos:line="54" pos:column="52"/></name></expr></argument>)<pos:position pos:line="54" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="54"/></expr_stmt>
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><operator pos:line="55" pos:column="21">!<pos:position pos:line="55" pos:column="22"/></operator><name pos:line="55" pos:column="22">to_tempfile<pos:position pos:line="55" pos:column="33"/></name></expr>)<pos:position pos:line="55" pos:column="34"/></condition><then pos:line="55" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><name pos:line="56" pos:column="25">fstat_done<pos:position pos:line="56" pos:column="35"/></name> <operator pos:line="56" pos:column="36">=<pos:position pos:line="56" pos:column="37"/></operator> <call><name pos:line="56" pos:column="38">fstat_output<pos:position pos:line="56" pos:column="50"/></name><argument_list pos:line="56" pos:column="50">(<argument><expr><name pos:line="56" pos:column="51">fd<pos:position pos:line="56" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="55">state<pos:position pos:line="56" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="62">&amp;<pos:position pos:line="56" pos:column="67"/></operator><name pos:line="56" pos:column="63">st<pos:position pos:line="56" pos:column="65"/></name></expr></argument>)<pos:position pos:line="56" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="67"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="57" pos:column="17">close<pos:position pos:line="57" pos:column="22"/></name><argument_list pos:line="57" pos:column="22">(<argument><expr><name pos:line="57" pos:column="23">fd<pos:position pos:line="57" pos:column="25"/></name></expr></argument>)<pos:position pos:line="57" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="58" pos:column="17">free<pos:position pos:line="58" pos:column="21"/></name><argument_list pos:line="58" pos:column="21">(<argument><expr><operator pos:line="58" pos:column="22">new<pos:position pos:line="58" pos:column="25"/></operator></expr></argument>)<pos:position pos:line="58" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="27"/></expr_stmt>
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><name pos:line="59" pos:column="21">wrote<pos:position pos:line="59" pos:column="26"/></name> <operator pos:line="59" pos:column="27">!=<pos:position pos:line="59" pos:column="29"/></operator> <name pos:line="59" pos:column="30">size<pos:position pos:line="59" pos:column="34"/></name></expr>)<pos:position pos:line="59" pos:column="35"/></condition><then pos:line="59" pos:column="35">
			<block type="pseudo"><return pos:line="60" pos:column="25">return <expr><call><name pos:line="60" pos:column="32">error<pos:position pos:line="60" pos:column="37"/></name><argument_list pos:line="60" pos:column="37">(<argument><expr><literal type="string" pos:line="60" pos:column="38">"unable to write file %s"<pos:position pos:line="60" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="65">path<pos:position pos:line="60" pos:column="69"/></name></expr></argument>)<pos:position pos:line="60" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="71"/></return></block></then></if>
		<break pos:line="61" pos:column="17">break;<pos:position pos:line="61" pos:column="23"/></break>
	<case pos:line="62" pos:column="9">case <expr><name pos:line="62" pos:column="14">S_IFGITLINK<pos:position pos:line="62" pos:column="25"/></name></expr>:<pos:position pos:line="62" pos:column="26"/></case>
		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><name pos:line="63" pos:column="21">to_tempfile<pos:position pos:line="63" pos:column="32"/></name></expr>)<pos:position pos:line="63" pos:column="33"/></condition><then pos:line="63" pos:column="33">
			<block type="pseudo"><return pos:line="64" pos:column="25">return <expr><call><name pos:line="64" pos:column="32">error<pos:position pos:line="64" pos:column="37"/></name><argument_list pos:line="64" pos:column="37">(<argument><expr><literal type="string" pos:line="64" pos:column="38">"cannot create temporary submodule %s"<pos:position pos:line="64" pos:column="76"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="78">path<pos:position pos:line="64" pos:column="82"/></name></expr></argument>)<pos:position pos:line="64" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="84"/></return></block></then></if>
		<if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><call><name pos:line="65" pos:column="21">mkdir<pos:position pos:line="65" pos:column="26"/></name><argument_list pos:line="65" pos:column="26">(<argument><expr><name pos:line="65" pos:column="27">path<pos:position pos:line="65" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="33">0777<pos:position pos:line="65" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="38"/></argument_list></call> <operator pos:line="65" pos:column="39">&lt;<pos:position pos:line="65" pos:column="43"/></operator> <literal type="number" pos:line="65" pos:column="41">0<pos:position pos:line="65" pos:column="42"/></literal></expr>)<pos:position pos:line="65" pos:column="43"/></condition><then pos:line="65" pos:column="43">
			<block type="pseudo"><return pos:line="66" pos:column="25">return <expr><call><name pos:line="66" pos:column="32">error<pos:position pos:line="66" pos:column="37"/></name><argument_list pos:line="66" pos:column="37">(<argument><expr><literal type="string" pos:line="66" pos:column="38">"cannot create submodule directory %s"<pos:position pos:line="66" pos:column="76"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="78">path<pos:position pos:line="66" pos:column="82"/></name></expr></argument>)<pos:position pos:line="66" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="84"/></return></block></then></if>
		<break pos:line="67" pos:column="17">break;<pos:position pos:line="67" pos:column="23"/></break>
	<default pos:line="68" pos:column="9">default:<pos:position pos:line="68" pos:column="17"/></default>
		<return pos:line="69" pos:column="17">return <expr><call><name pos:line="69" pos:column="24">error<pos:position pos:line="69" pos:column="29"/></name><argument_list pos:line="69" pos:column="29">(<argument><expr><literal type="string" pos:line="69" pos:column="30">"unknown file mode for %s in index"<pos:position pos:line="69" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="67">path<pos:position pos:line="69" pos:column="71"/></name></expr></argument>)<pos:position pos:line="69" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="73"/></return>
	}<pos:position pos:line="70" pos:column="10"/></block></switch>

<label><name pos:line="72" pos:column="1">finish<pos:position pos:line="72" pos:column="7"/></name>:<pos:position pos:line="72" pos:column="8"/></label>
	<if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><name><name pos:line="73" pos:column="13">state<pos:position pos:line="73" pos:column="18"/></name><operator pos:line="73" pos:column="18">-&gt;<pos:position pos:line="73" pos:column="23"/></operator><name pos:line="73" pos:column="20">refresh_cache<pos:position pos:line="73" pos:column="33"/></name></name></expr>)<pos:position pos:line="73" pos:column="34"/></condition><then pos:line="73" pos:column="34"> <block pos:line="73" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="74" pos:column="17">assert<pos:position pos:line="74" pos:column="23"/></name><argument_list pos:line="74" pos:column="23">(<argument><expr><name><name pos:line="74" pos:column="24">state<pos:position pos:line="74" pos:column="29"/></name><operator pos:line="74" pos:column="29">-&gt;<pos:position pos:line="74" pos:column="34"/></operator><name pos:line="74" pos:column="31">istate<pos:position pos:line="74" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="39"/></expr_stmt>
		<if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><operator pos:line="75" pos:column="21">!<pos:position pos:line="75" pos:column="22"/></operator><name pos:line="75" pos:column="22">fstat_done<pos:position pos:line="75" pos:column="32"/></name></expr>)<pos:position pos:line="75" pos:column="33"/></condition><then pos:line="75" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="76" pos:column="25">lstat<pos:position pos:line="76" pos:column="30"/></name><argument_list pos:line="76" pos:column="30">(<argument><expr><name><name pos:line="76" pos:column="31">ce<pos:position pos:line="76" pos:column="33"/></name><operator pos:line="76" pos:column="33">-&gt;<pos:position pos:line="76" pos:column="38"/></operator><name pos:line="76" pos:column="35">name<pos:position pos:line="76" pos:column="39"/></name></name></expr></argument>, <argument><expr><operator pos:line="76" pos:column="41">&amp;<pos:position pos:line="76" pos:column="46"/></operator><name pos:line="76" pos:column="42">st<pos:position pos:line="76" pos:column="44"/></name></expr></argument>)<pos:position pos:line="76" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="46"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="77" pos:column="17">fill_stat_cache_info<pos:position pos:line="77" pos:column="37"/></name><argument_list pos:line="77" pos:column="37">(<argument><expr><name pos:line="77" pos:column="38">ce<pos:position pos:line="77" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="77" pos:column="42">&amp;<pos:position pos:line="77" pos:column="47"/></operator><name pos:line="77" pos:column="43">st<pos:position pos:line="77" pos:column="45"/></name></expr></argument>)<pos:position pos:line="77" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="78" pos:column="17">ce<pos:position pos:line="78" pos:column="19"/></name><operator pos:line="78" pos:column="19">-&gt;<pos:position pos:line="78" pos:column="24"/></operator><name pos:line="78" pos:column="21">ce_flags<pos:position pos:line="78" pos:column="29"/></name></name> <operator pos:line="78" pos:column="30">|=<pos:position pos:line="78" pos:column="32"/></operator> <name pos:line="78" pos:column="33">CE_UPDATE_IN_BASE<pos:position pos:line="78" pos:column="50"/></name></expr>;<pos:position pos:line="78" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="79" pos:column="17">state<pos:position pos:line="79" pos:column="22"/></name><operator pos:line="79" pos:column="22">-&gt;<pos:position pos:line="79" pos:column="27"/></operator><name pos:line="79" pos:column="24">istate<pos:position pos:line="79" pos:column="30"/></name><operator pos:line="79" pos:column="30">-&gt;<pos:position pos:line="79" pos:column="35"/></operator><name pos:line="79" pos:column="32">cache_changed<pos:position pos:line="79" pos:column="45"/></name></name> <operator pos:line="79" pos:column="46">|=<pos:position pos:line="79" pos:column="48"/></operator> <name pos:line="79" pos:column="49">CE_ENTRY_CHANGED<pos:position pos:line="79" pos:column="65"/></name></expr>;<pos:position pos:line="79" pos:column="66"/></expr_stmt>
	}<pos:position pos:line="80" pos:column="10"/></block></then></if>
	<return pos:line="81" pos:column="9">return <expr><literal type="number" pos:line="81" pos:column="16">0<pos:position pos:line="81" pos:column="17"/></literal></expr>;<pos:position pos:line="81" pos:column="18"/></return>
}<pos:position pos:line="82" pos:column="2"/></block></function></unit>
