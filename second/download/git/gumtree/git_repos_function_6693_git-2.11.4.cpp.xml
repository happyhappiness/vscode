<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6693_git-2.11.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">re_string_construct<pos:position pos:line="3" pos:column="20"/></name> <parameter_list pos:line="3" pos:column="21">(<parameter><decl><type><name pos:line="3" pos:column="22">re_string_t<pos:position pos:line="3" pos:column="33"/></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">pstr<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="41">const<pos:position pos:line="3" pos:column="46"/></specifier> <name pos:line="3" pos:column="47">char<pos:position pos:line="3" pos:column="51"/></name> <modifier pos:line="3" pos:column="52">*<pos:position pos:line="3" pos:column="53"/></modifier></type><name pos:line="3" pos:column="53">str<pos:position pos:line="3" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="58">int<pos:position pos:line="3" pos:column="61"/></name></type> <name pos:line="3" pos:column="62">len<pos:position pos:line="3" pos:column="65"/></name></decl></parameter>,
		     <parameter><decl><type><name pos:line="4" pos:column="22">RE_TRANSLATE_TYPE<pos:position pos:line="4" pos:column="39"/></name></type> <name pos:line="4" pos:column="40">trans<pos:position pos:line="4" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="47">int<pos:position pos:line="4" pos:column="50"/></name></type> <name pos:line="4" pos:column="51">icase<pos:position pos:line="4" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="4" pos:column="58">const<pos:position pos:line="4" pos:column="63"/></specifier> <name pos:line="4" pos:column="64">re_dfa_t<pos:position pos:line="4" pos:column="72"/></name> <modifier pos:line="4" pos:column="73">*<pos:position pos:line="4" pos:column="74"/></modifier></type><name pos:line="4" pos:column="74">dfa<pos:position pos:line="4" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="78"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">reg_errcode_t<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">ret<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="7" pos:column="3">memset<pos:position pos:line="7" pos:column="9"/></name> <argument_list pos:line="7" pos:column="10">(<argument><expr><name pos:line="7" pos:column="11">pstr<pos:position pos:line="7" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="7" pos:column="17">'\0'<pos:position pos:line="7" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="23">sizeof <argument_list pos:line="7" pos:column="30">(<argument><expr><name pos:line="7" pos:column="31">re_string_t<pos:position pos:line="7" pos:column="42"/></name></expr></argument>)<pos:position pos:line="7" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="45"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="8" pos:column="3">re_string_construct_common<pos:position pos:line="8" pos:column="29"/></name> <argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">str<pos:position pos:line="8" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="36">len<pos:position pos:line="8" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="41">pstr<pos:position pos:line="8" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="47">trans<pos:position pos:line="8" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="54">icase<pos:position pos:line="8" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="61">dfa<pos:position pos:line="8" pos:column="64"/></name></expr></argument>)<pos:position pos:line="8" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="66"/></expr_stmt>

  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">len<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">&gt;<pos:position pos:line="10" pos:column="15"/></operator> <literal type="number" pos:line="10" pos:column="13">0<pos:position pos:line="10" pos:column="14"/></literal></expr>)<pos:position pos:line="10" pos:column="15"/></condition><then pos:line="10" pos:column="15">
    <block pos:line="11" pos:column="5">{
      <expr_stmt><expr><name pos:line="12" pos:column="7">ret<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <call><name pos:line="12" pos:column="13">re_string_realloc_buffers<pos:position pos:line="12" pos:column="38"/></name> <argument_list pos:line="12" pos:column="39">(<argument><expr><name pos:line="12" pos:column="40">pstr<pos:position pos:line="12" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="46">len<pos:position pos:line="12" pos:column="49"/></name> <operator pos:line="12" pos:column="50">+<pos:position pos:line="12" pos:column="51"/></operator> <literal type="number" pos:line="12" pos:column="52">1<pos:position pos:line="12" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="55"/></expr_stmt>
      <if pos:line="13" pos:column="7">if <condition pos:line="13" pos:column="10">(<expr><call><name pos:line="13" pos:column="11">BE<pos:position pos:line="13" pos:column="13"/></name> <argument_list pos:line="13" pos:column="14">(<argument><expr><name pos:line="13" pos:column="15">ret<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">!=<pos:position pos:line="13" pos:column="21"/></operator> <name pos:line="13" pos:column="22">REG_NOERROR<pos:position pos:line="13" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="35">0<pos:position pos:line="13" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="38"/></condition><then pos:line="13" pos:column="38">
	<block type="pseudo"><return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">ret<pos:position pos:line="14" pos:column="19"/></name></expr>;<pos:position pos:line="14" pos:column="20"/></return></block></then></if>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="16" pos:column="3">pstr<pos:position pos:line="16" pos:column="7"/></name><operator pos:line="16" pos:column="7">-&gt;<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="9">mbs<pos:position pos:line="16" pos:column="12"/></name></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <ternary><condition><expr><name><name pos:line="16" pos:column="15">pstr<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">-&gt;<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="21">mbs_allocated<pos:position pos:line="16" pos:column="34"/></name></name></expr> ?<pos:position pos:line="16" pos:column="36"/></condition><then pos:line="16" pos:column="36"> <expr><name><name pos:line="16" pos:column="37">pstr<pos:position pos:line="16" pos:column="41"/></name><operator pos:line="16" pos:column="41">-&gt;<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="43">mbs<pos:position pos:line="16" pos:column="46"/></name></name></expr> <pos:position pos:line="16" pos:column="47"/></then><else pos:line="16" pos:column="47">: <expr><operator pos:line="16" pos:column="49">(<pos:position pos:line="16" pos:column="50"/></operator><name pos:line="16" pos:column="50">unsigned<pos:position pos:line="16" pos:column="58"/></name> <name pos:line="16" pos:column="59">char<pos:position pos:line="16" pos:column="63"/></name> <operator pos:line="16" pos:column="64">*<pos:position pos:line="16" pos:column="65"/></operator><operator pos:line="16" pos:column="65">)<pos:position pos:line="16" pos:column="66"/></operator> <name pos:line="16" pos:column="67">str<pos:position pos:line="16" pos:column="70"/></name></expr></else></ternary></expr>;<pos:position pos:line="16" pos:column="71"/></expr_stmt>

  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><name pos:line="18" pos:column="7">icase<pos:position pos:line="18" pos:column="12"/></name></expr>)<pos:position pos:line="18" pos:column="13"/></condition><then pos:line="18" pos:column="13">
    <block pos:line="19" pos:column="5">{
<cpp:ifdef pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">ifdef<pos:position pos:line="20" pos:column="7"/></cpp:directive> <name pos:line="20" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="20" pos:column="22"/></name></cpp:ifdef>
      <if pos:line="21" pos:column="7">if <condition pos:line="21" pos:column="10">(<expr><name><name pos:line="21" pos:column="11">dfa<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-&gt;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="16">mb_cur_max<pos:position pos:line="21" pos:column="26"/></name></name> <operator pos:line="21" pos:column="27">&gt;<pos:position pos:line="21" pos:column="31"/></operator> <literal type="number" pos:line="21" pos:column="29">1<pos:position pos:line="21" pos:column="30"/></literal></expr>)<pos:position pos:line="21" pos:column="31"/></condition><then pos:line="21" pos:column="31">
	<block pos:line="22" pos:column="9">{
	  <while pos:line="23" pos:column="11">while <condition pos:line="23" pos:column="17">(<expr><literal type="number" pos:line="23" pos:column="18">1<pos:position pos:line="23" pos:column="19"/></literal></expr>)<pos:position pos:line="23" pos:column="20"/></condition>
	    <block pos:line="24" pos:column="13">{
	      <expr_stmt><expr><name pos:line="25" pos:column="15">ret<pos:position pos:line="25" pos:column="18"/></name> <operator pos:line="25" pos:column="19">=<pos:position pos:line="25" pos:column="20"/></operator> <call><name pos:line="25" pos:column="21">build_wcs_upper_buffer<pos:position pos:line="25" pos:column="43"/></name> <argument_list pos:line="25" pos:column="44">(<argument><expr><name pos:line="25" pos:column="45">pstr<pos:position pos:line="25" pos:column="49"/></name></expr></argument>)<pos:position pos:line="25" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="51"/></expr_stmt>
	      <if pos:line="26" pos:column="15">if <condition pos:line="26" pos:column="18">(<expr><call><name pos:line="26" pos:column="19">BE<pos:position pos:line="26" pos:column="21"/></name> <argument_list pos:line="26" pos:column="22">(<argument><expr><name pos:line="26" pos:column="23">ret<pos:position pos:line="26" pos:column="26"/></name> <operator pos:line="26" pos:column="27">!=<pos:position pos:line="26" pos:column="29"/></operator> <name pos:line="26" pos:column="30">REG_NOERROR<pos:position pos:line="26" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="43">0<pos:position pos:line="26" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="46"/></condition><then pos:line="26" pos:column="46">
		<block type="pseudo"><return pos:line="27" pos:column="17">return <expr><name pos:line="27" pos:column="24">ret<pos:position pos:line="27" pos:column="27"/></name></expr>;<pos:position pos:line="27" pos:column="28"/></return></block></then></if>
	      <if pos:line="28" pos:column="15">if <condition pos:line="28" pos:column="18">(<expr><name><name pos:line="28" pos:column="19">pstr<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">-&gt;<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="25">valid_raw_len<pos:position pos:line="28" pos:column="38"/></name></name> <operator pos:line="28" pos:column="39">&gt;=<pos:position pos:line="28" pos:column="44"/></operator> <name pos:line="28" pos:column="42">len<pos:position pos:line="28" pos:column="45"/></name></expr>)<pos:position pos:line="28" pos:column="46"/></condition><then pos:line="28" pos:column="46">
		<block type="pseudo"><break pos:line="29" pos:column="17">break;<pos:position pos:line="29" pos:column="23"/></break></block></then></if>
	      <if pos:line="30" pos:column="15">if <condition pos:line="30" pos:column="18">(<expr><name><name pos:line="30" pos:column="19">pstr<pos:position pos:line="30" pos:column="23"/></name><operator pos:line="30" pos:column="23">-&gt;<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="25">bufs_len<pos:position pos:line="30" pos:column="33"/></name></name> <operator pos:line="30" pos:column="34">&gt;<pos:position pos:line="30" pos:column="38"/></operator> <name><name pos:line="30" pos:column="36">pstr<pos:position pos:line="30" pos:column="40"/></name><operator pos:line="30" pos:column="40">-&gt;<pos:position pos:line="30" pos:column="45"/></operator><name pos:line="30" pos:column="42">valid_len<pos:position pos:line="30" pos:column="51"/></name></name> <operator pos:line="30" pos:column="52">+<pos:position pos:line="30" pos:column="53"/></operator> <name><name pos:line="30" pos:column="54">dfa<pos:position pos:line="30" pos:column="57"/></name><operator pos:line="30" pos:column="57">-&gt;<pos:position pos:line="30" pos:column="62"/></operator><name pos:line="30" pos:column="59">mb_cur_max<pos:position pos:line="30" pos:column="69"/></name></name></expr>)<pos:position pos:line="30" pos:column="70"/></condition><then pos:line="30" pos:column="70">
		<block type="pseudo"><break pos:line="31" pos:column="17">break;<pos:position pos:line="31" pos:column="23"/></break></block></then></if>
	      <expr_stmt><expr><name pos:line="32" pos:column="15">ret<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">=<pos:position pos:line="32" pos:column="20"/></operator> <call><name pos:line="32" pos:column="21">re_string_realloc_buffers<pos:position pos:line="32" pos:column="46"/></name> <argument_list pos:line="32" pos:column="47">(<argument><expr><name pos:line="32" pos:column="48">pstr<pos:position pos:line="32" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="54">pstr<pos:position pos:line="32" pos:column="58"/></name><operator pos:line="32" pos:column="58">-&gt;<pos:position pos:line="32" pos:column="63"/></operator><name pos:line="32" pos:column="60">bufs_len<pos:position pos:line="32" pos:column="68"/></name></name> <operator pos:line="32" pos:column="69">*<pos:position pos:line="32" pos:column="70"/></operator> <literal type="number" pos:line="32" pos:column="71">2<pos:position pos:line="32" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="74"/></expr_stmt>
	      <if pos:line="33" pos:column="15">if <condition pos:line="33" pos:column="18">(<expr><call><name pos:line="33" pos:column="19">BE<pos:position pos:line="33" pos:column="21"/></name> <argument_list pos:line="33" pos:column="22">(<argument><expr><name pos:line="33" pos:column="23">ret<pos:position pos:line="33" pos:column="26"/></name> <operator pos:line="33" pos:column="27">!=<pos:position pos:line="33" pos:column="29"/></operator> <name pos:line="33" pos:column="30">REG_NOERROR<pos:position pos:line="33" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="43">0<pos:position pos:line="33" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="46"/></condition><then pos:line="33" pos:column="46">
		<block type="pseudo"><return pos:line="34" pos:column="17">return <expr><name pos:line="34" pos:column="24">ret<pos:position pos:line="34" pos:column="27"/></name></expr>;<pos:position pos:line="34" pos:column="28"/></return></block></then></if>
	    }<pos:position pos:line="35" pos:column="14"/></block></while>
	}<pos:position pos:line="36" pos:column="10"/></block></then>
      <else pos:line="37" pos:column="7">else
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="38" pos:column="8">/* RE_ENABLE_I18N  */</comment>
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="9">build_upper_buffer<pos:position pos:line="39" pos:column="27"/></name> <argument_list pos:line="39" pos:column="28">(<argument><expr><name pos:line="39" pos:column="29">pstr<pos:position pos:line="39" pos:column="33"/></name></expr></argument>)<pos:position pos:line="39" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="35"/></expr_stmt></block></else></if>
    }<pos:position pos:line="40" pos:column="6"/></block></then>
  <else pos:line="41" pos:column="3">else
    <block pos:line="42" pos:column="5">{
<cpp:ifdef pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">ifdef<pos:position pos:line="43" pos:column="7"/></cpp:directive> <name pos:line="43" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="43" pos:column="22"/></name></cpp:ifdef>
      <if pos:line="44" pos:column="7">if <condition pos:line="44" pos:column="10">(<expr><name><name pos:line="44" pos:column="11">dfa<pos:position pos:line="44" pos:column="14"/></name><operator pos:line="44" pos:column="14">-&gt;<pos:position pos:line="44" pos:column="19"/></operator><name pos:line="44" pos:column="16">mb_cur_max<pos:position pos:line="44" pos:column="26"/></name></name> <operator pos:line="44" pos:column="27">&gt;<pos:position pos:line="44" pos:column="31"/></operator> <literal type="number" pos:line="44" pos:column="29">1<pos:position pos:line="44" pos:column="30"/></literal></expr>)<pos:position pos:line="44" pos:column="31"/></condition><then pos:line="44" pos:column="31">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="9">build_wcs_buffer<pos:position pos:line="45" pos:column="25"/></name> <argument_list pos:line="45" pos:column="26">(<argument><expr><name pos:line="45" pos:column="27">pstr<pos:position pos:line="45" pos:column="31"/></name></expr></argument>)<pos:position pos:line="45" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="33"/></expr_stmt></block></then>
      <else pos:line="46" pos:column="7">else
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="47" pos:column="8">/* RE_ENABLE_I18N  */</comment>
	<block pos:line="48" pos:column="9">{
	  <if pos:line="49" pos:column="11">if <condition pos:line="49" pos:column="14">(<expr><name pos:line="49" pos:column="15">trans<pos:position pos:line="49" pos:column="20"/></name> <operator pos:line="49" pos:column="21">!=<pos:position pos:line="49" pos:column="23"/></operator> <name pos:line="49" pos:column="24">NULL<pos:position pos:line="49" pos:column="28"/></name></expr>)<pos:position pos:line="49" pos:column="29"/></condition><then pos:line="49" pos:column="29">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="13">re_string_translate_buffer<pos:position pos:line="50" pos:column="39"/></name> <argument_list pos:line="50" pos:column="40">(<argument><expr><name pos:line="50" pos:column="41">pstr<pos:position pos:line="50" pos:column="45"/></name></expr></argument>)<pos:position pos:line="50" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="47"/></expr_stmt></block></then>
	  <else pos:line="51" pos:column="11">else
	    <block pos:line="52" pos:column="13">{
	      <expr_stmt><expr><name><name pos:line="53" pos:column="15">pstr<pos:position pos:line="53" pos:column="19"/></name><operator pos:line="53" pos:column="19">-&gt;<pos:position pos:line="53" pos:column="24"/></operator><name pos:line="53" pos:column="21">valid_len<pos:position pos:line="53" pos:column="30"/></name></name> <operator pos:line="53" pos:column="31">=<pos:position pos:line="53" pos:column="32"/></operator> <name><name pos:line="53" pos:column="33">pstr<pos:position pos:line="53" pos:column="37"/></name><operator pos:line="53" pos:column="37">-&gt;<pos:position pos:line="53" pos:column="42"/></operator><name pos:line="53" pos:column="39">bufs_len<pos:position pos:line="53" pos:column="47"/></name></name></expr>;<pos:position pos:line="53" pos:column="48"/></expr_stmt>
	      <expr_stmt><expr><name><name pos:line="54" pos:column="15">pstr<pos:position pos:line="54" pos:column="19"/></name><operator pos:line="54" pos:column="19">-&gt;<pos:position pos:line="54" pos:column="24"/></operator><name pos:line="54" pos:column="21">valid_raw_len<pos:position pos:line="54" pos:column="34"/></name></name> <operator pos:line="54" pos:column="35">=<pos:position pos:line="54" pos:column="36"/></operator> <name><name pos:line="54" pos:column="37">pstr<pos:position pos:line="54" pos:column="41"/></name><operator pos:line="54" pos:column="41">-&gt;<pos:position pos:line="54" pos:column="46"/></operator><name pos:line="54" pos:column="43">bufs_len<pos:position pos:line="54" pos:column="51"/></name></name></expr>;<pos:position pos:line="54" pos:column="52"/></expr_stmt>
	    }<pos:position pos:line="55" pos:column="14"/></block></else></if>
	}<pos:position pos:line="56" pos:column="10"/></block></else></if>
    }<pos:position pos:line="57" pos:column="6"/></block></else></if>

  <return pos:line="59" pos:column="3">return <expr><name pos:line="59" pos:column="10">REG_NOERROR<pos:position pos:line="59" pos:column="21"/></name></expr>;<pos:position pos:line="59" pos:column="22"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
