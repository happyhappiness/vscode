<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4273_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">show_ambiguous_object<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name><name pos:line="1" pos:column="40">struct<pos:position pos:line="1" pos:column="46"/></name> <name pos:line="1" pos:column="47">object_id<pos:position pos:line="1" pos:column="56"/></name></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">oid<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="63">void<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">data<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name><name pos:line="3" pos:column="15">struct<pos:position pos:line="3" pos:column="21"/></name> <name pos:line="3" pos:column="22">disambiguate_state<pos:position pos:line="3" pos:column="40"/></name></name> <modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier></type><name pos:line="3" pos:column="42">ds<pos:position pos:line="3" pos:column="44"/></name> <init pos:line="3" pos:column="45">= <expr><name pos:line="3" pos:column="47">data<pos:position pos:line="3" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">desc<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><name pos:line="4" pos:column="30">STRBUF_INIT<pos:position pos:line="4" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">type<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>


	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name><name pos:line="8" pos:column="13">ds<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">-&gt;<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="17">fn<pos:position pos:line="8" pos:column="19"/></name></name> <operator pos:line="8" pos:column="20">&amp;&amp;<pos:position pos:line="8" pos:column="30"/></operator> <operator pos:line="8" pos:column="23">!<pos:position pos:line="8" pos:column="24"/></operator><call><name><name pos:line="8" pos:column="24">ds<pos:position pos:line="8" pos:column="26"/></name><operator pos:line="8" pos:column="26">-&gt;<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="28">fn<pos:position pos:line="8" pos:column="30"/></name></name><argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">oid<pos:position pos:line="8" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="36">ds<pos:position pos:line="8" pos:column="38"/></name><operator pos:line="8" pos:column="38">-&gt;<pos:position pos:line="8" pos:column="43"/></operator><name pos:line="8" pos:column="40">cb_data<pos:position pos:line="8" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="49"/></condition><then pos:line="8" pos:column="49">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr>;<pos:position pos:line="9" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="11" pos:column="9">type<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator> <call><name pos:line="11" pos:column="16">sha1_object_info<pos:position pos:line="11" pos:column="32"/></name><argument_list pos:line="11" pos:column="32">(<argument><expr><name><name pos:line="11" pos:column="33">oid<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">-&gt;<pos:position pos:line="11" pos:column="41"/></operator><name pos:line="11" pos:column="38">hash<pos:position pos:line="11" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="44">NULL<pos:position pos:line="11" pos:column="48"/></name></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="50"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">type<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">==<pos:position pos:line="12" pos:column="20"/></operator> <name pos:line="12" pos:column="21">OBJ_COMMIT<pos:position pos:line="12" pos:column="31"/></name></expr>)<pos:position pos:line="12" pos:column="32"/></condition><then pos:line="12" pos:column="32"> <block pos:line="12" pos:column="33">{
		<decl_stmt><decl><type><name><name pos:line="13" pos:column="17">struct<pos:position pos:line="13" pos:column="23"/></name> <name pos:line="13" pos:column="24">commit<pos:position pos:line="13" pos:column="30"/></name></name> <modifier pos:line="13" pos:column="31">*<pos:position pos:line="13" pos:column="32"/></modifier></type><name pos:line="13" pos:column="32">commit<pos:position pos:line="13" pos:column="38"/></name> <init pos:line="13" pos:column="39">= <expr><call><name pos:line="13" pos:column="41">lookup_commit<pos:position pos:line="13" pos:column="54"/></name><argument_list pos:line="13" pos:column="54">(<argument><expr><name pos:line="13" pos:column="55">oid<pos:position pos:line="13" pos:column="58"/></name></expr></argument>)<pos:position pos:line="13" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="60"/></decl_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">commit<pos:position pos:line="14" pos:column="27"/></name></expr>)<pos:position pos:line="14" pos:column="28"/></condition><then pos:line="14" pos:column="28"> <block pos:line="14" pos:column="29">{
			<decl_stmt><decl><type><name><name pos:line="15" pos:column="25">struct<pos:position pos:line="15" pos:column="31"/></name> <name pos:line="15" pos:column="32">pretty_print_context<pos:position pos:line="15" pos:column="52"/></name></name></type> <name pos:line="15" pos:column="53">pp<pos:position pos:line="15" pos:column="55"/></name> <init pos:line="15" pos:column="56">= <expr><block pos:line="15" pos:column="58">{<expr><literal type="number" pos:line="15" pos:column="59">0<pos:position pos:line="15" pos:column="60"/></literal></expr>}<pos:position pos:line="15" pos:column="61"/></block></expr></init></decl>;<pos:position pos:line="15" pos:column="62"/></decl_stmt>
			<expr_stmt><expr><name><name pos:line="16" pos:column="25">pp<pos:position pos:line="16" pos:column="27"/></name><operator pos:line="16" pos:column="27">.<pos:position pos:line="16" pos:column="28"/></operator><name pos:line="16" pos:column="28">date_mode<pos:position pos:line="16" pos:column="37"/></name><operator pos:line="16" pos:column="37">.<pos:position pos:line="16" pos:column="38"/></operator><name pos:line="16" pos:column="38">type<pos:position pos:line="16" pos:column="42"/></name></name> <operator pos:line="16" pos:column="43">=<pos:position pos:line="16" pos:column="44"/></operator> <name pos:line="16" pos:column="45">DATE_SHORT<pos:position pos:line="16" pos:column="55"/></name></expr>;<pos:position pos:line="16" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="17" pos:column="25">format_commit_message<pos:position pos:line="17" pos:column="46"/></name><argument_list pos:line="17" pos:column="46">(<argument><expr><name pos:line="17" pos:column="47">commit<pos:position pos:line="17" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="55">" %ad - %s"<pos:position pos:line="17" pos:column="66"/></literal></expr></argument>, <argument><expr><operator pos:line="17" pos:column="68">&amp;<pos:position pos:line="17" pos:column="73"/></operator><name pos:line="17" pos:column="69">desc<pos:position pos:line="17" pos:column="73"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="75">&amp;<pos:position pos:line="17" pos:column="80"/></operator><name pos:line="17" pos:column="76">pp<pos:position pos:line="17" pos:column="78"/></name></expr></argument>)<pos:position pos:line="17" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="80"/></expr_stmt>
		}<pos:position pos:line="18" pos:column="18"/></block></then></if>
	}<pos:position pos:line="19" pos:column="10"/></block></then> <elseif pos:line="19" pos:column="11">else <if pos:line="19" pos:column="16">if <condition pos:line="19" pos:column="19">(<expr><name pos:line="19" pos:column="20">type<pos:position pos:line="19" pos:column="24"/></name> <operator pos:line="19" pos:column="25">==<pos:position pos:line="19" pos:column="27"/></operator> <name pos:line="19" pos:column="28">OBJ_TAG<pos:position pos:line="19" pos:column="35"/></name></expr>)<pos:position pos:line="19" pos:column="36"/></condition><then pos:line="19" pos:column="36"> <block pos:line="19" pos:column="37">{
		<decl_stmt><decl><type><name><name pos:line="20" pos:column="17">struct<pos:position pos:line="20" pos:column="23"/></name> <name pos:line="20" pos:column="24">tag<pos:position pos:line="20" pos:column="27"/></name></name> <modifier pos:line="20" pos:column="28">*<pos:position pos:line="20" pos:column="29"/></modifier></type><name pos:line="20" pos:column="29">tag<pos:position pos:line="20" pos:column="32"/></name> <init pos:line="20" pos:column="33">= <expr><call><name pos:line="20" pos:column="35">lookup_tag<pos:position pos:line="20" pos:column="45"/></name><argument_list pos:line="20" pos:column="45">(<argument><expr><name pos:line="20" pos:column="46">oid<pos:position pos:line="20" pos:column="49"/></name></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="51"/></decl_stmt>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">!<pos:position pos:line="21" pos:column="22"/></operator><call><name pos:line="21" pos:column="22">parse_tag<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">tag<pos:position pos:line="21" pos:column="35"/></name></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call> <operator pos:line="21" pos:column="37">&amp;&amp;<pos:position pos:line="21" pos:column="47"/></operator> <name><name pos:line="21" pos:column="40">tag<pos:position pos:line="21" pos:column="43"/></name><operator pos:line="21" pos:column="43">-&gt;<pos:position pos:line="21" pos:column="48"/></operator><name pos:line="21" pos:column="45">tag<pos:position pos:line="21" pos:column="48"/></name></name></expr>)<pos:position pos:line="21" pos:column="49"/></condition><then pos:line="21" pos:column="49">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="25">strbuf_addf<pos:position pos:line="22" pos:column="36"/></name><argument_list pos:line="22" pos:column="36">(<argument><expr><operator pos:line="22" pos:column="37">&amp;<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="38">desc<pos:position pos:line="22" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="44">" %s"<pos:position pos:line="22" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="51">tag<pos:position pos:line="22" pos:column="54"/></name><operator pos:line="22" pos:column="54">-&gt;<pos:position pos:line="22" pos:column="59"/></operator><name pos:line="22" pos:column="56">tag<pos:position pos:line="22" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="61"/></expr_stmt></block></then></if>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if></elseif></if>

	<expr_stmt><expr><call><name pos:line="25" pos:column="9">advise<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="string" pos:line="25" pos:column="16">"  %s %s%s"<pos:position pos:line="25" pos:column="27"/></literal></expr></argument>,
	       <argument><expr><call><name pos:line="26" pos:column="16">find_unique_abbrev<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><name><name pos:line="26" pos:column="35">oid<pos:position pos:line="26" pos:column="38"/></name><operator pos:line="26" pos:column="38">-&gt;<pos:position pos:line="26" pos:column="43"/></operator><name pos:line="26" pos:column="40">hash<pos:position pos:line="26" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="46">DEFAULT_ABBREV<pos:position pos:line="26" pos:column="60"/></name></expr></argument>)<pos:position pos:line="26" pos:column="61"/></argument_list></call></expr></argument>,
	       <argument><expr><ternary><condition><expr><name><typename pos:line="27" pos:column="16">typename<pos:position pos:line="27" pos:column="24"/></typename></name><operator pos:line="27" pos:column="24">(<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="25">type<pos:position pos:line="27" pos:column="29"/></name><operator pos:line="27" pos:column="29">)<pos:position pos:line="27" pos:column="30"/></operator></expr> ?<pos:position pos:line="27" pos:column="32"/></condition><then pos:line="27" pos:column="32"> <expr><name><typename pos:line="27" pos:column="33">typename<pos:position pos:line="27" pos:column="41"/></typename></name><operator pos:line="27" pos:column="41">(<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="42">type<pos:position pos:line="27" pos:column="46"/></name><operator pos:line="27" pos:column="46">)<pos:position pos:line="27" pos:column="47"/></operator></expr> <pos:position pos:line="27" pos:column="48"/></then><else pos:line="27" pos:column="48">: <expr><literal type="string" pos:line="27" pos:column="50">"unknown type"<pos:position pos:line="27" pos:column="64"/></literal></expr></else></ternary></expr></argument>,
	       <argument><expr><name><name pos:line="28" pos:column="16">desc<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">.<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="21">buf<pos:position pos:line="28" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="26"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="30" pos:column="9">strbuf_release<pos:position pos:line="30" pos:column="23"/></name><argument_list pos:line="30" pos:column="23">(<argument><expr><operator pos:line="30" pos:column="24">&amp;<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="25">desc<pos:position pos:line="30" pos:column="29"/></name></expr></argument>)<pos:position pos:line="30" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="31"/></expr_stmt>
	<return pos:line="31" pos:column="9">return <expr><literal type="number" pos:line="31" pos:column="16">0<pos:position pos:line="31" pos:column="17"/></literal></expr>;<pos:position pos:line="31" pos:column="18"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
