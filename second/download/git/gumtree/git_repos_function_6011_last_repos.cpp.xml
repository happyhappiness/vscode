<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6011_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">remote_submodule_branch<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">path<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name><name pos:line="3" pos:column="15">struct<pos:position pos:line="3" pos:column="21"/></name> <name pos:line="3" pos:column="22">submodule<pos:position pos:line="3" pos:column="31"/></name></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">sub<pos:position pos:line="3" pos:column="36"/></name></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="4" pos:column="9">gitmodules_config<pos:position pos:line="4" pos:column="26"/></name><argument_list pos:line="4" pos:column="26">()<pos:position pos:line="4" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="5" pos:column="9">git_config<pos:position pos:line="5" pos:column="19"/></name><argument_list pos:line="5" pos:column="19">(<argument><expr><name pos:line="5" pos:column="20">submodule_config<pos:position pos:line="5" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="38">NULL<pos:position pos:line="5" pos:column="42"/></name></expr></argument>)<pos:position pos:line="5" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="44"/></expr_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">sub<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">=<pos:position pos:line="7" pos:column="14"/></operator> <call><name pos:line="7" pos:column="15">submodule_from_path<pos:position pos:line="7" pos:column="34"/></name><argument_list pos:line="7" pos:column="34">(<argument><expr><name pos:line="7" pos:column="35">null_sha1<pos:position pos:line="7" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="46">path<pos:position pos:line="7" pos:column="50"/></name></expr></argument>)<pos:position pos:line="7" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="52"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">sub<pos:position pos:line="8" pos:column="17"/></name></expr>)<pos:position pos:line="8" pos:column="18"/></condition><then pos:line="8" pos:column="18">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><name pos:line="9" pos:column="24">NULL<pos:position pos:line="9" pos:column="28"/></name></expr>;<pos:position pos:line="9" pos:column="29"/></return></block></then></if>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name><name pos:line="11" pos:column="14">sub<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">-&gt;<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="19">branch<pos:position pos:line="11" pos:column="25"/></name></name></expr>)<pos:position pos:line="11" pos:column="26"/></condition><then pos:line="11" pos:column="26">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><literal type="string" pos:line="12" pos:column="24">"master"<pos:position pos:line="12" pos:column="32"/></literal></expr>;<pos:position pos:line="12" pos:column="33"/></return></block></then></if>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">!<pos:position pos:line="14" pos:column="14"/></operator><call><name pos:line="14" pos:column="14">strcmp<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name><name pos:line="14" pos:column="21">sub<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">-&gt;<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="26">branch<pos:position pos:line="14" pos:column="32"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="34">"."<pos:position pos:line="14" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="39"/></condition><then pos:line="14" pos:column="39"> <block pos:line="14" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">unsigned<pos:position pos:line="15" pos:column="25"/></name> <name pos:line="15" pos:column="26">char<pos:position pos:line="15" pos:column="30"/></name></type> <name><name pos:line="15" pos:column="31">sha1<pos:position pos:line="15" pos:column="35"/></name><index pos:line="15" pos:column="35">[<expr><literal type="number" pos:line="15" pos:column="36">20<pos:position pos:line="15" pos:column="38"/></literal></expr>]<pos:position pos:line="15" pos:column="39"/></index></name></decl>;<pos:position pos:line="15" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="16" pos:column="17">const<pos:position pos:line="16" pos:column="22"/></specifier> <name pos:line="16" pos:column="23">char<pos:position pos:line="16" pos:column="27"/></name> <modifier pos:line="16" pos:column="28">*<pos:position pos:line="16" pos:column="29"/></modifier></type><name pos:line="16" pos:column="29">refname<pos:position pos:line="16" pos:column="36"/></name> <init pos:line="16" pos:column="37">= <expr><call><name pos:line="16" pos:column="39">resolve_ref_unsafe<pos:position pos:line="16" pos:column="57"/></name><argument_list pos:line="16" pos:column="57">(<argument><expr><literal type="string" pos:line="16" pos:column="58">"HEAD"<pos:position pos:line="16" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="66">0<pos:position pos:line="16" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="69">sha1<pos:position pos:line="16" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="75">NULL<pos:position pos:line="16" pos:column="79"/></name></expr></argument>)<pos:position pos:line="16" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="81"/></decl_stmt>

		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><operator pos:line="18" pos:column="21">!<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">refname<pos:position pos:line="18" pos:column="29"/></name></expr>)<pos:position pos:line="18" pos:column="30"/></condition><then pos:line="18" pos:column="30">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="25">die<pos:position pos:line="19" pos:column="28"/></name><argument_list pos:line="19" pos:column="28">(<argument><expr><call><name pos:line="19" pos:column="29">_<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><literal type="string" pos:line="19" pos:column="31">"No such ref: %s"<pos:position pos:line="19" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="51">"HEAD"<pos:position pos:line="19" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="59"/></expr_stmt></block></then></if>

		<comment type="block" pos:line="21" pos:column="17">/* detached HEAD */</comment>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">!<pos:position pos:line="22" pos:column="22"/></operator><call><name pos:line="22" pos:column="22">strcmp<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><name pos:line="22" pos:column="29">refname<pos:position pos:line="22" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="38">"HEAD"<pos:position pos:line="22" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="46"/></condition><then pos:line="22" pos:column="46">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="25">die<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><call><name pos:line="23" pos:column="29">_<pos:position pos:line="23" pos:column="30"/></name><argument_list pos:line="23" pos:column="30">(<argument><expr><literal type="string" pos:line="23" pos:column="31">"Submodule (%s) branch configured to inherit "<pos:position pos:line="23" pos:column="77"/></literal>
			      <literal type="string" pos:line="24" pos:column="31">"branch from superproject, but the superproject "<pos:position pos:line="24" pos:column="80"/></literal>
			      <literal type="string" pos:line="25" pos:column="31">"is not on any branch"<pos:position pos:line="25" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="56">sub<pos:position pos:line="25" pos:column="59"/></name><operator pos:line="25" pos:column="59">-&gt;<pos:position pos:line="25" pos:column="64"/></operator><name pos:line="25" pos:column="61">name<pos:position pos:line="25" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="67"/></expr_stmt></block></then></if>

		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">!<pos:position pos:line="27" pos:column="22"/></operator><call><name pos:line="27" pos:column="22">skip_prefix<pos:position pos:line="27" pos:column="33"/></name><argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">refname<pos:position pos:line="27" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="43">"refs/heads/"<pos:position pos:line="27" pos:column="56"/></literal></expr></argument>, <argument><expr><operator pos:line="27" pos:column="58">&amp;<pos:position pos:line="27" pos:column="63"/></operator><name pos:line="27" pos:column="59">refname<pos:position pos:line="27" pos:column="66"/></name></expr></argument>)<pos:position pos:line="27" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="68"/></condition><then pos:line="27" pos:column="68">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="25">die<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><call><name pos:line="28" pos:column="29">_<pos:position pos:line="28" pos:column="30"/></name><argument_list pos:line="28" pos:column="30">(<argument><expr><literal type="string" pos:line="28" pos:column="31">"Expecting a full ref name, got %s"<pos:position pos:line="28" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="28" pos:column="69">refname<pos:position pos:line="28" pos:column="76"/></name></expr></argument>)<pos:position pos:line="28" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="78"/></expr_stmt></block></then></if>
		<return pos:line="29" pos:column="17">return <expr><name pos:line="29" pos:column="24">refname<pos:position pos:line="29" pos:column="31"/></name></expr>;<pos:position pos:line="29" pos:column="32"/></return>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if>

	<return pos:line="32" pos:column="9">return <expr><name><name pos:line="32" pos:column="16">sub<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">-&gt;<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="21">branch<pos:position pos:line="32" pos:column="27"/></name></name></expr>;<pos:position pos:line="32" pos:column="28"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
