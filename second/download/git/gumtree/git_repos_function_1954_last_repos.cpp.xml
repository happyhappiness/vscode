<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1954_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">xdiff_set_find_func<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">xdemitconf_t<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">xecfg<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">value<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="66">int<pos:position pos:line="1" pos:column="69"/></name></type> <name pos:line="1" pos:column="70">cflags<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">ff_regs<pos:position pos:line="4" pos:column="23"/></name></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">regs<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>

	<expr_stmt><expr><name><name pos:line="6" pos:column="9">xecfg<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">-&gt;<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="16">find_func<pos:position pos:line="6" pos:column="25"/></name></name> <operator pos:line="6" pos:column="26">=<pos:position pos:line="6" pos:column="27"/></operator> <name pos:line="6" pos:column="28">ff_regexp<pos:position pos:line="6" pos:column="37"/></name></expr>;<pos:position pos:line="6" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name pos:line="7" pos:column="9">regs<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">=<pos:position pos:line="7" pos:column="15"/></operator> <name><name pos:line="7" pos:column="16">xecfg<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">-&gt;<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="23">find_func_priv<pos:position pos:line="7" pos:column="37"/></name></name> <operator pos:line="7" pos:column="38">=<pos:position pos:line="7" pos:column="39"/></operator> <call><name pos:line="7" pos:column="40">xmalloc<pos:position pos:line="7" pos:column="47"/></name><argument_list pos:line="7" pos:column="47">(<argument><expr><sizeof pos:line="7" pos:column="48">sizeof<argument_list pos:line="7" pos:column="54">(<argument><expr pos:line="7" pos:column="55">struct <name pos:line="7" pos:column="62">ff_regs<pos:position pos:line="7" pos:column="69"/></name></expr></argument>)<pos:position pos:line="7" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="72"/></expr_stmt>
	<for pos:line="8" pos:column="9">for <control pos:line="8" pos:column="13">(<init><expr><name pos:line="8" pos:column="14">i<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">=<pos:position pos:line="8" pos:column="17"/></operator> <literal type="number" pos:line="8" pos:column="18">0<pos:position pos:line="8" pos:column="19"/></literal></expr><operator pos:line="8" pos:column="19">,<pos:position pos:line="8" pos:column="20"/></operator> <expr><name><name pos:line="8" pos:column="21">regs<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">-&gt;<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="27">nr<pos:position pos:line="8" pos:column="29"/></name></name> <operator pos:line="8" pos:column="30">=<pos:position pos:line="8" pos:column="31"/></operator> <literal type="number" pos:line="8" pos:column="32">1<pos:position pos:line="8" pos:column="33"/></literal></expr>;<pos:position pos:line="8" pos:column="34"/></init> <condition><expr><name><name pos:line="8" pos:column="35">value<pos:position pos:line="8" pos:column="40"/></name><index pos:line="8" pos:column="40">[<expr><name pos:line="8" pos:column="41">i<pos:position pos:line="8" pos:column="42"/></name></expr>]<pos:position pos:line="8" pos:column="43"/></index></name></expr>;<pos:position pos:line="8" pos:column="44"/></condition> <incr><expr><name pos:line="8" pos:column="45">i<pos:position pos:line="8" pos:column="46"/></name><operator pos:line="8" pos:column="46">++<pos:position pos:line="8" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="8" pos:column="49"/></control>
		<block type="pseudo"><if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name><name pos:line="9" pos:column="21">value<pos:position pos:line="9" pos:column="26"/></name><index pos:line="9" pos:column="26">[<expr><name pos:line="9" pos:column="27">i<pos:position pos:line="9" pos:column="28"/></name></expr>]<pos:position pos:line="9" pos:column="29"/></index></name> <operator pos:line="9" pos:column="30">==<pos:position pos:line="9" pos:column="32"/></operator> <literal type="char" pos:line="9" pos:column="33">'\n'<pos:position pos:line="9" pos:column="37"/></literal></expr>)<pos:position pos:line="9" pos:column="38"/></condition><then pos:line="9" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="10" pos:column="25">regs<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">-&gt;<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="31">nr<pos:position pos:line="10" pos:column="33"/></name></name><operator pos:line="10" pos:column="33">++<pos:position pos:line="10" pos:column="35"/></operator></expr>;<pos:position pos:line="10" pos:column="36"/></expr_stmt></block></then></if></block></for>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">ALLOC_ARRAY<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name><name pos:line="11" pos:column="21">regs<pos:position pos:line="11" pos:column="25"/></name><operator pos:line="11" pos:column="25">-&gt;<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="27">array<pos:position pos:line="11" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="34">regs<pos:position pos:line="11" pos:column="38"/></name><operator pos:line="11" pos:column="38">-&gt;<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="40">nr<pos:position pos:line="11" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="44"/></expr_stmt>
	<for pos:line="12" pos:column="9">for <control pos:line="12" pos:column="13">(<init><expr><name pos:line="12" pos:column="14">i<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <literal type="number" pos:line="12" pos:column="18">0<pos:position pos:line="12" pos:column="19"/></literal></expr>;<pos:position pos:line="12" pos:column="20"/></init> <condition><expr><name pos:line="12" pos:column="21">i<pos:position pos:line="12" pos:column="22"/></name> <operator pos:line="12" pos:column="23">&lt;<pos:position pos:line="12" pos:column="27"/></operator> <name><name pos:line="12" pos:column="25">regs<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">-&gt;<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="31">nr<pos:position pos:line="12" pos:column="33"/></name></name></expr>;<pos:position pos:line="12" pos:column="34"/></condition> <incr><expr><name pos:line="12" pos:column="35">i<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">++<pos:position pos:line="12" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="12" pos:column="39"/></control> <block pos:line="12" pos:column="40">{
		<decl_stmt><decl><type><name><name pos:line="13" pos:column="17">struct<pos:position pos:line="13" pos:column="23"/></name> <name pos:line="13" pos:column="24">ff_reg<pos:position pos:line="13" pos:column="30"/></name></name> <modifier pos:line="13" pos:column="31">*<pos:position pos:line="13" pos:column="32"/></modifier></type><name pos:line="13" pos:column="32">reg<pos:position pos:line="13" pos:column="35"/></name> <init pos:line="13" pos:column="36">= <expr><name><name pos:line="13" pos:column="38">regs<pos:position pos:line="13" pos:column="42"/></name><operator pos:line="13" pos:column="42">-&gt;<pos:position pos:line="13" pos:column="47"/></operator><name pos:line="13" pos:column="44">array<pos:position pos:line="13" pos:column="49"/></name></name> <operator pos:line="13" pos:column="50">+<pos:position pos:line="13" pos:column="51"/></operator> <name pos:line="13" pos:column="52">i<pos:position pos:line="13" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="54"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="14" pos:column="17">const<pos:position pos:line="14" pos:column="22"/></specifier> <name pos:line="14" pos:column="23">char<pos:position pos:line="14" pos:column="27"/></name> <modifier pos:line="14" pos:column="28">*<pos:position pos:line="14" pos:column="29"/></modifier></type><name pos:line="14" pos:column="29">ep<pos:position pos:line="14" pos:column="31"/></name> <init pos:line="14" pos:column="32">= <expr><call><name pos:line="14" pos:column="34">strchr<pos:position pos:line="14" pos:column="40"/></name><argument_list pos:line="14" pos:column="40">(<argument><expr><name pos:line="14" pos:column="41">value<pos:position pos:line="14" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="14" pos:column="48">'\n'<pos:position pos:line="14" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr></init></decl>, <modifier pos:line="14" pos:column="55">*<pos:position pos:line="14" pos:column="56"/></modifier><decl><type ref="prev"/><name pos:line="14" pos:column="56">expression<pos:position pos:line="14" pos:column="66"/></name></decl>;<pos:position pos:line="14" pos:column="67"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">char<pos:position pos:line="15" pos:column="21"/></name> <modifier pos:line="15" pos:column="22">*<pos:position pos:line="15" pos:column="23"/></modifier></type><name pos:line="15" pos:column="23">buffer<pos:position pos:line="15" pos:column="29"/></name> <init pos:line="15" pos:column="30">= <expr><name pos:line="15" pos:column="32">NULL<pos:position pos:line="15" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="37"/></decl_stmt>

		<expr_stmt><expr><name><name pos:line="17" pos:column="17">reg<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">-&gt;<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="22">negate<pos:position pos:line="17" pos:column="28"/></name></name> <operator pos:line="17" pos:column="29">=<pos:position pos:line="17" pos:column="30"/></operator> <operator pos:line="17" pos:column="31">(<pos:position pos:line="17" pos:column="32"/></operator><operator pos:line="17" pos:column="32">*<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="33">value<pos:position pos:line="17" pos:column="38"/></name> <operator pos:line="17" pos:column="39">==<pos:position pos:line="17" pos:column="41"/></operator> <literal type="char" pos:line="17" pos:column="42">'!'<pos:position pos:line="17" pos:column="45"/></literal><operator pos:line="17" pos:column="45">)<pos:position pos:line="17" pos:column="46"/></operator></expr>;<pos:position pos:line="17" pos:column="47"/></expr_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name><name pos:line="18" pos:column="21">reg<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">-&gt;<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="26">negate<pos:position pos:line="18" pos:column="32"/></name></name> <operator pos:line="18" pos:column="33">&amp;&amp;<pos:position pos:line="18" pos:column="43"/></operator> <name pos:line="18" pos:column="36">i<pos:position pos:line="18" pos:column="37"/></name> <operator pos:line="18" pos:column="38">==<pos:position pos:line="18" pos:column="40"/></operator> <name><name pos:line="18" pos:column="41">regs<pos:position pos:line="18" pos:column="45"/></name><operator pos:line="18" pos:column="45">-&gt;<pos:position pos:line="18" pos:column="50"/></operator><name pos:line="18" pos:column="47">nr<pos:position pos:line="18" pos:column="49"/></name></name> <operator pos:line="18" pos:column="50">-<pos:position pos:line="18" pos:column="51"/></operator> <literal type="number" pos:line="18" pos:column="52">1<pos:position pos:line="18" pos:column="53"/></literal></expr>)<pos:position pos:line="18" pos:column="54"/></condition><then pos:line="18" pos:column="54">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="25">die<pos:position pos:line="19" pos:column="28"/></name><argument_list pos:line="19" pos:column="28">(<argument><expr><literal type="string" pos:line="19" pos:column="29">"Last expression must not be negated: %s"<pos:position pos:line="19" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="72">value<pos:position pos:line="19" pos:column="77"/></name></expr></argument>)<pos:position pos:line="19" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="79"/></expr_stmt></block></then></if>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><operator pos:line="20" pos:column="21">*<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">value<pos:position pos:line="20" pos:column="27"/></name> <operator pos:line="20" pos:column="28">==<pos:position pos:line="20" pos:column="30"/></operator> <literal type="char" pos:line="20" pos:column="31">'!'<pos:position pos:line="20" pos:column="34"/></literal></expr>)<pos:position pos:line="20" pos:column="35"/></condition><then pos:line="20" pos:column="35">
			<block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="25">value<pos:position pos:line="21" pos:column="30"/></name><operator pos:line="21" pos:column="30">++<pos:position pos:line="21" pos:column="32"/></operator></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt></block></then></if>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">ep<pos:position pos:line="22" pos:column="23"/></name></expr>)<pos:position pos:line="22" pos:column="24"/></condition><then pos:line="22" pos:column="24">
			<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="25">expression<pos:position pos:line="23" pos:column="35"/></name> <operator pos:line="23" pos:column="36">=<pos:position pos:line="23" pos:column="37"/></operator> <name pos:line="23" pos:column="38">buffer<pos:position pos:line="23" pos:column="44"/></name> <operator pos:line="23" pos:column="45">=<pos:position pos:line="23" pos:column="46"/></operator> <call><name pos:line="23" pos:column="47">xstrndup<pos:position pos:line="23" pos:column="55"/></name><argument_list pos:line="23" pos:column="55">(<argument><expr><name pos:line="23" pos:column="56">value<pos:position pos:line="23" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="63">ep<pos:position pos:line="23" pos:column="65"/></name> <operator pos:line="23" pos:column="66">-<pos:position pos:line="23" pos:column="67"/></operator> <name pos:line="23" pos:column="68">value<pos:position pos:line="23" pos:column="73"/></name></expr></argument>)<pos:position pos:line="23" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="75"/></expr_stmt></block></then>
		<else pos:line="24" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="25">expression<pos:position pos:line="25" pos:column="35"/></name> <operator pos:line="25" pos:column="36">=<pos:position pos:line="25" pos:column="37"/></operator> <name pos:line="25" pos:column="38">value<pos:position pos:line="25" pos:column="43"/></name></expr>;<pos:position pos:line="25" pos:column="44"/></expr_stmt></block></else></if>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><call><name pos:line="26" pos:column="21">regcomp<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><operator pos:line="26" pos:column="29">&amp;<pos:position pos:line="26" pos:column="34"/></operator><name><name pos:line="26" pos:column="30">reg<pos:position pos:line="26" pos:column="33"/></name><operator pos:line="26" pos:column="33">-&gt;<pos:position pos:line="26" pos:column="38"/></operator><name pos:line="26" pos:column="35">re<pos:position pos:line="26" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="39">expression<pos:position pos:line="26" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="51">cflags<pos:position pos:line="26" pos:column="57"/></name></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="59"/></condition><then pos:line="26" pos:column="59">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="25">die<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><literal type="string" pos:line="27" pos:column="29">"Invalid regexp to look for hunk header: %s"<pos:position pos:line="27" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="75">expression<pos:position pos:line="27" pos:column="85"/></name></expr></argument>)<pos:position pos:line="27" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="87"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">free<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><name pos:line="28" pos:column="22">buffer<pos:position pos:line="28" pos:column="28"/></name></expr></argument>)<pos:position pos:line="28" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="30"/></expr_stmt>
		<expr_stmt><expr><name pos:line="29" pos:column="17">value<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">=<pos:position pos:line="29" pos:column="24"/></operator> <name pos:line="29" pos:column="25">ep<pos:position pos:line="29" pos:column="27"/></name> <operator pos:line="29" pos:column="28">+<pos:position pos:line="29" pos:column="29"/></operator> <literal type="number" pos:line="29" pos:column="30">1<pos:position pos:line="29" pos:column="31"/></literal></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="30" pos:column="10"/></block></for>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
