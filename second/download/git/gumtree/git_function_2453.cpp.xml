<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2453.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">probe_utf8_pathname_composition<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">path<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">int<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">len<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><specifier pos:line="3" pos:column="16">const<pos:position pos:line="3" pos:column="21"/></specifier> <name pos:line="3" pos:column="22">char<pos:position pos:line="3" pos:column="26"/></name> <modifier pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></modifier></type><name pos:line="3" pos:column="28">auml_nfc<pos:position pos:line="3" pos:column="36"/></name> <init pos:line="3" pos:column="37">= <expr><literal type="string" pos:line="3" pos:column="39">"\xc3\xa4"<pos:position pos:line="3" pos:column="49"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><specifier pos:line="4" pos:column="16">const<pos:position pos:line="4" pos:column="21"/></specifier> <name pos:line="4" pos:column="22">char<pos:position pos:line="4" pos:column="26"/></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="28">auml_nfd<pos:position pos:line="4" pos:column="36"/></name> <init pos:line="4" pos:column="37">= <expr><literal type="string" pos:line="4" pos:column="39">"\x61\xcc\x88"<pos:position pos:line="4" pos:column="53"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="54"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">output_fd<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">precomposed_unicode<pos:position pos:line="6" pos:column="32"/></name> <operator pos:line="6" pos:column="33">!=<pos:position pos:line="6" pos:column="35"/></operator> <operator pos:line="6" pos:column="36">-<pos:position pos:line="6" pos:column="37"/></operator><literal type="number" pos:line="6" pos:column="37">1<pos:position pos:line="6" pos:column="38"/></literal></expr>)<pos:position pos:line="6" pos:column="39"/></condition><then pos:line="6" pos:column="39">
		<block type="pseudo"><return pos:line="7" pos:column="17">return;<pos:position pos:line="7" pos:column="24"/></return></block></then></if> <comment type="block" pos:line="7" pos:column="25">/* We found it defined in the global config, respect it */</comment>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">strcpy<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><name pos:line="8" pos:column="16">path<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">+<pos:position pos:line="8" pos:column="22"/></operator> <name pos:line="8" pos:column="23">len<pos:position pos:line="8" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="28">auml_nfc<pos:position pos:line="8" pos:column="36"/></name></expr></argument>)<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name pos:line="9" pos:column="9">output_fd<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">=<pos:position pos:line="9" pos:column="20"/></operator> <call><name pos:line="9" pos:column="21">open<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">path<pos:position pos:line="9" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="32">O_CREAT<pos:position pos:line="9" pos:column="39"/></name><operator pos:line="9" pos:column="39">|<pos:position pos:line="9" pos:column="40"/></operator><name pos:line="9" pos:column="40">O_EXCL<pos:position pos:line="9" pos:column="46"/></name><operator pos:line="9" pos:column="46">|<pos:position pos:line="9" pos:column="47"/></operator><name pos:line="9" pos:column="47">O_RDWR<pos:position pos:line="9" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="55">0600<pos:position pos:line="9" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="61"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">output_fd<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">&gt;=<pos:position pos:line="10" pos:column="28"/></operator> <literal type="number" pos:line="10" pos:column="26">0<pos:position pos:line="10" pos:column="27"/></literal></expr>)<pos:position pos:line="10" pos:column="28"/></condition><then pos:line="10" pos:column="28"> <block pos:line="10" pos:column="29">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">close<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">output_fd<pos:position pos:line="11" pos:column="32"/></name></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">strcpy<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><name pos:line="12" pos:column="24">path<pos:position pos:line="12" pos:column="28"/></name> <operator pos:line="12" pos:column="29">+<pos:position pos:line="12" pos:column="30"/></operator> <name pos:line="12" pos:column="31">len<pos:position pos:line="12" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="36">auml_nfd<pos:position pos:line="12" pos:column="44"/></name></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><name pos:line="13" pos:column="17">precomposed_unicode<pos:position pos:line="13" pos:column="36"/></name> <operator pos:line="13" pos:column="37">=<pos:position pos:line="13" pos:column="38"/></operator> <ternary><condition><expr><call><name pos:line="13" pos:column="39">access<pos:position pos:line="13" pos:column="45"/></name><argument_list pos:line="13" pos:column="45">(<argument><expr><name pos:line="13" pos:column="46">path<pos:position pos:line="13" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="52">R_OK<pos:position pos:line="13" pos:column="56"/></name></expr></argument>)<pos:position pos:line="13" pos:column="57"/></argument_list></call></expr> ?<pos:position pos:line="13" pos:column="59"/></condition><then pos:line="13" pos:column="59"> <expr><literal type="number" pos:line="13" pos:column="60">0<pos:position pos:line="13" pos:column="61"/></literal></expr> <pos:position pos:line="13" pos:column="62"/></then><else pos:line="13" pos:column="62">: <expr><literal type="number" pos:line="13" pos:column="64">1<pos:position pos:line="13" pos:column="65"/></literal></expr></else></ternary></expr>;<pos:position pos:line="13" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">git_config_set<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">(<argument><expr><literal type="string" pos:line="14" pos:column="32">"core.precomposeunicode"<pos:position pos:line="14" pos:column="56"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="14" pos:column="58">precomposed_unicode<pos:position pos:line="14" pos:column="77"/></name></expr> ?<pos:position pos:line="14" pos:column="79"/></condition><then pos:line="14" pos:column="79"> <expr><literal type="string" pos:line="14" pos:column="80">"true"<pos:position pos:line="14" pos:column="86"/></literal></expr> <pos:position pos:line="14" pos:column="87"/></then><else pos:line="14" pos:column="87">: <expr><literal type="string" pos:line="14" pos:column="89">"false"<pos:position pos:line="14" pos:column="96"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="14" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="98"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="15" pos:column="17">strcpy<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name pos:line="15" pos:column="24">path<pos:position pos:line="15" pos:column="28"/></name> <operator pos:line="15" pos:column="29">+<pos:position pos:line="15" pos:column="30"/></operator> <name pos:line="15" pos:column="31">len<pos:position pos:line="15" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="36">auml_nfc<pos:position pos:line="15" pos:column="44"/></name></expr></argument>)<pos:position pos:line="15" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="46"/></expr_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><call><name pos:line="16" pos:column="21">unlink<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">path<pos:position pos:line="16" pos:column="32"/></name></expr></argument>)<pos:position pos:line="16" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="34"/></condition><then pos:line="16" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="25">die_errno<pos:position pos:line="17" pos:column="34"/></name><argument_list pos:line="17" pos:column="34">(<argument><expr><call><name pos:line="17" pos:column="35">_<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><literal type="string" pos:line="17" pos:column="37">"failed to unlink '%s'"<pos:position pos:line="17" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="17" pos:column="63">path<pos:position pos:line="17" pos:column="67"/></name></expr></argument>)<pos:position pos:line="17" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="69"/></expr_stmt></block></then></if>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
