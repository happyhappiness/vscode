<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4878_git-2.3.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">batch_objects<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">batch_options<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">opt<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">buf<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><name pos:line="3" pos:column="29">STRBUF_INIT<pos:position pos:line="3" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">expand_data<pos:position pos:line="4" pos:column="27"/></name></name></type> <name pos:line="4" pos:column="28">data<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">save_warning<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">retval<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name><name pos:line="8" pos:column="14">opt<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">-&gt;<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="19">format<pos:position pos:line="8" pos:column="25"/></name></name></expr>)<pos:position pos:line="8" pos:column="26"/></condition><then pos:line="8" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="9" pos:column="17">opt<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">-&gt;<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="22">format<pos:position pos:line="9" pos:column="28"/></name></name> <operator pos:line="9" pos:column="29">=<pos:position pos:line="9" pos:column="30"/></operator> <literal type="string" pos:line="9" pos:column="31">"%(objectname) %(objecttype) %(objectsize)"<pos:position pos:line="9" pos:column="74"/></literal></expr>;<pos:position pos:line="9" pos:column="75"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="11" pos:column="9">/*
	 * Expand once with our special mark_query flag, which will prime the
	 * object_info to be handed to sha1_object_info_extended for each
	 * object.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">memset<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><operator pos:line="16" pos:column="16">&amp;<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="17">data<pos:position pos:line="16" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="23">0<pos:position pos:line="16" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="26">sizeof<argument_list pos:line="16" pos:column="32">(<argument><expr><name pos:line="16" pos:column="33">data<pos:position pos:line="16" pos:column="37"/></name></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">data<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">.<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">mark_query<pos:position pos:line="17" pos:column="24"/></name></name> <operator pos:line="17" pos:column="25">=<pos:position pos:line="17" pos:column="26"/></operator> <literal type="number" pos:line="17" pos:column="27">1<pos:position pos:line="17" pos:column="28"/></literal></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">strbuf_expand<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><operator pos:line="18" pos:column="23">&amp;<pos:position pos:line="18" pos:column="28"/></operator><name pos:line="18" pos:column="24">buf<pos:position pos:line="18" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="29">opt<pos:position pos:line="18" pos:column="32"/></name><operator pos:line="18" pos:column="32">-&gt;<pos:position pos:line="18" pos:column="37"/></operator><name pos:line="18" pos:column="34">format<pos:position pos:line="18" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="42">expand_format<pos:position pos:line="18" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="57">&amp;<pos:position pos:line="18" pos:column="62"/></operator><name pos:line="18" pos:column="58">data<pos:position pos:line="18" pos:column="62"/></name></expr></argument>)<pos:position pos:line="18" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="64"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="19" pos:column="9">data<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">.<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">mark_query<pos:position pos:line="19" pos:column="24"/></name></name> <operator pos:line="19" pos:column="25">=<pos:position pos:line="19" pos:column="26"/></operator> <literal type="number" pos:line="19" pos:column="27">0<pos:position pos:line="19" pos:column="28"/></literal></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt>

	<comment type="block" pos:line="21" pos:column="9">/*
	 * If we are printing out the object, then always fill in the type,
	 * since we will want to decide whether or not to stream.
	 */</comment>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name><name pos:line="25" pos:column="13">opt<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">-&gt;<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="18">print_contents<pos:position pos:line="25" pos:column="32"/></name></name></expr>)<pos:position pos:line="25" pos:column="33"/></condition><then pos:line="25" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="26" pos:column="17">data<pos:position pos:line="26" pos:column="21"/></name><operator pos:line="26" pos:column="21">.<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="22">info<pos:position pos:line="26" pos:column="26"/></name><operator pos:line="26" pos:column="26">.<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="27">typep<pos:position pos:line="26" pos:column="32"/></name></name> <operator pos:line="26" pos:column="33">=<pos:position pos:line="26" pos:column="34"/></operator> <operator pos:line="26" pos:column="35">&amp;<pos:position pos:line="26" pos:column="40"/></operator><name><name pos:line="26" pos:column="36">data<pos:position pos:line="26" pos:column="40"/></name><operator pos:line="26" pos:column="40">.<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="41">type<pos:position pos:line="26" pos:column="45"/></name></name></expr>;<pos:position pos:line="26" pos:column="46"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="28" pos:column="9">/*
	 * We are going to call get_sha1 on a potentially very large number of
	 * objects. In most large cases, these will be actual object sha1s. The
	 * cost to double-check that each one is not also a ref (just so we can
	 * warn) ends up dwarfing the actual cost of the object lookups
	 * themselves. We can work around it by just turning off the warning.
	 */</comment>
	<expr_stmt><expr><name pos:line="35" pos:column="9">save_warning<pos:position pos:line="35" pos:column="21"/></name> <operator pos:line="35" pos:column="22">=<pos:position pos:line="35" pos:column="23"/></operator> <name pos:line="35" pos:column="24">warn_on_object_refname_ambiguity<pos:position pos:line="35" pos:column="56"/></name></expr>;<pos:position pos:line="35" pos:column="57"/></expr_stmt>
	<expr_stmt><expr><name pos:line="36" pos:column="9">warn_on_object_refname_ambiguity<pos:position pos:line="36" pos:column="41"/></name> <operator pos:line="36" pos:column="42">=<pos:position pos:line="36" pos:column="43"/></operator> <literal type="number" pos:line="36" pos:column="44">0<pos:position pos:line="36" pos:column="45"/></literal></expr>;<pos:position pos:line="36" pos:column="46"/></expr_stmt>

	<while pos:line="38" pos:column="9">while <condition pos:line="38" pos:column="15">(<expr><call><name pos:line="38" pos:column="16">strbuf_getline<pos:position pos:line="38" pos:column="30"/></name><argument_list pos:line="38" pos:column="30">(<argument><expr><operator pos:line="38" pos:column="31">&amp;<pos:position pos:line="38" pos:column="36"/></operator><name pos:line="38" pos:column="32">buf<pos:position pos:line="38" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="37">stdin<pos:position pos:line="38" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="38" pos:column="44">'\n'<pos:position pos:line="38" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="49"/></argument_list></call> <operator pos:line="38" pos:column="50">!=<pos:position pos:line="38" pos:column="52"/></operator> <name pos:line="38" pos:column="53">EOF<pos:position pos:line="38" pos:column="56"/></name></expr>)<pos:position pos:line="38" pos:column="57"/></condition> <block pos:line="38" pos:column="58">{
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><name><name pos:line="39" pos:column="21">data<pos:position pos:line="39" pos:column="25"/></name><operator pos:line="39" pos:column="25">.<pos:position pos:line="39" pos:column="26"/></operator><name pos:line="39" pos:column="26">split_on_whitespace<pos:position pos:line="39" pos:column="45"/></name></name></expr>)<pos:position pos:line="39" pos:column="46"/></condition><then pos:line="39" pos:column="46"> <block pos:line="39" pos:column="47">{
			<comment type="block" pos:line="40" pos:column="25">/*
			 * Split at first whitespace, tying off the beginning
			 * of the string and saving the remainder (or NULL) in
			 * data.rest.
			 */</comment>
			<decl_stmt><decl><type><name pos:line="45" pos:column="25">char<pos:position pos:line="45" pos:column="29"/></name> <modifier pos:line="45" pos:column="30">*<pos:position pos:line="45" pos:column="31"/></modifier></type><name pos:line="45" pos:column="31">p<pos:position pos:line="45" pos:column="32"/></name> <init pos:line="45" pos:column="33">= <expr><call><name pos:line="45" pos:column="35">strpbrk<pos:position pos:line="45" pos:column="42"/></name><argument_list pos:line="45" pos:column="42">(<argument><expr><name><name pos:line="45" pos:column="43">buf<pos:position pos:line="45" pos:column="46"/></name><operator pos:line="45" pos:column="46">.<pos:position pos:line="45" pos:column="47"/></operator><name pos:line="45" pos:column="47">buf<pos:position pos:line="45" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="52">" \t"<pos:position pos:line="45" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="45" pos:column="59"/></decl_stmt>
			<if pos:line="46" pos:column="25">if <condition pos:line="46" pos:column="28">(<expr><name pos:line="46" pos:column="29">p<pos:position pos:line="46" pos:column="30"/></name></expr>)<pos:position pos:line="46" pos:column="31"/></condition><then pos:line="46" pos:column="31"> <block pos:line="46" pos:column="32">{
				<while pos:line="47" pos:column="33">while <condition pos:line="47" pos:column="39">(<expr><operator pos:line="47" pos:column="40">*<pos:position pos:line="47" pos:column="41"/></operator><name pos:line="47" pos:column="41">p<pos:position pos:line="47" pos:column="42"/></name> <operator pos:line="47" pos:column="43">&amp;&amp;<pos:position pos:line="47" pos:column="53"/></operator> <call><name pos:line="47" pos:column="46">strchr<pos:position pos:line="47" pos:column="52"/></name><argument_list pos:line="47" pos:column="52">(<argument><expr><literal type="string" pos:line="47" pos:column="53">" \t"<pos:position pos:line="47" pos:column="58"/></literal></expr></argument>, <argument><expr><operator pos:line="47" pos:column="60">*<pos:position pos:line="47" pos:column="61"/></operator><name pos:line="47" pos:column="61">p<pos:position pos:line="47" pos:column="62"/></name></expr></argument>)<pos:position pos:line="47" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="64"/></condition>
					<block type="pseudo"><expr_stmt><expr><operator pos:line="48" pos:column="41">*<pos:position pos:line="48" pos:column="42"/></operator><name pos:line="48" pos:column="42">p<pos:position pos:line="48" pos:column="43"/></name><operator pos:line="48" pos:column="43">++<pos:position pos:line="48" pos:column="45"/></operator> <operator pos:line="48" pos:column="46">=<pos:position pos:line="48" pos:column="47"/></operator> <literal type="char" pos:line="48" pos:column="48">'\0'<pos:position pos:line="48" pos:column="52"/></literal></expr>;<pos:position pos:line="48" pos:column="53"/></expr_stmt></block></while>
			}<pos:position pos:line="49" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name><name pos:line="50" pos:column="25">data<pos:position pos:line="50" pos:column="29"/></name><operator pos:line="50" pos:column="29">.<pos:position pos:line="50" pos:column="30"/></operator><name pos:line="50" pos:column="30">rest<pos:position pos:line="50" pos:column="34"/></name></name> <operator pos:line="50" pos:column="35">=<pos:position pos:line="50" pos:column="36"/></operator> <name pos:line="50" pos:column="37">p<pos:position pos:line="50" pos:column="38"/></name></expr>;<pos:position pos:line="50" pos:column="39"/></expr_stmt>
		}<pos:position pos:line="51" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="53" pos:column="17">retval<pos:position pos:line="53" pos:column="23"/></name> <operator pos:line="53" pos:column="24">=<pos:position pos:line="53" pos:column="25"/></operator> <call><name pos:line="53" pos:column="26">batch_one_object<pos:position pos:line="53" pos:column="42"/></name><argument_list pos:line="53" pos:column="42">(<argument><expr><name><name pos:line="53" pos:column="43">buf<pos:position pos:line="53" pos:column="46"/></name><operator pos:line="53" pos:column="46">.<pos:position pos:line="53" pos:column="47"/></operator><name pos:line="53" pos:column="47">buf<pos:position pos:line="53" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="52">opt<pos:position pos:line="53" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="57">&amp;<pos:position pos:line="53" pos:column="62"/></operator><name pos:line="53" pos:column="58">data<pos:position pos:line="53" pos:column="62"/></name></expr></argument>)<pos:position pos:line="53" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="64"/></expr_stmt>
		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><name pos:line="54" pos:column="21">retval<pos:position pos:line="54" pos:column="27"/></name></expr>)<pos:position pos:line="54" pos:column="28"/></condition><then pos:line="54" pos:column="28">
			<block type="pseudo"><break pos:line="55" pos:column="25">break;<pos:position pos:line="55" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="56" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="58" pos:column="9">strbuf_release<pos:position pos:line="58" pos:column="23"/></name><argument_list pos:line="58" pos:column="23">(<argument><expr><operator pos:line="58" pos:column="24">&amp;<pos:position pos:line="58" pos:column="29"/></operator><name pos:line="58" pos:column="25">buf<pos:position pos:line="58" pos:column="28"/></name></expr></argument>)<pos:position pos:line="58" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name pos:line="59" pos:column="9">warn_on_object_refname_ambiguity<pos:position pos:line="59" pos:column="41"/></name> <operator pos:line="59" pos:column="42">=<pos:position pos:line="59" pos:column="43"/></operator> <name pos:line="59" pos:column="44">save_warning<pos:position pos:line="59" pos:column="56"/></name></expr>;<pos:position pos:line="59" pos:column="57"/></expr_stmt>
	<return pos:line="60" pos:column="9">return <expr><name pos:line="60" pos:column="16">retval<pos:position pos:line="60" pos:column="22"/></name></expr>;<pos:position pos:line="60" pos:column="23"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
