<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6570_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">svndump_init<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><specifier pos:line="1" pos:column="18">const<pos:position pos:line="1" pos:column="23"/></specifier> <name pos:line="1" pos:column="24">char<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">filename<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><call><name pos:line="3" pos:column="13">buffer_init<pos:position pos:line="3" pos:column="24"/></name><argument_list pos:line="3" pos:column="24">(<argument><expr><operator pos:line="3" pos:column="25">&amp;<pos:position pos:line="3" pos:column="30"/></operator><name pos:line="3" pos:column="26">input<pos:position pos:line="3" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="33">filename<pos:position pos:line="3" pos:column="41"/></name></expr></argument>)<pos:position pos:line="3" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="43"/></condition><then pos:line="3" pos:column="43">
		<block type="pseudo"><return pos:line="4" pos:column="17">return <expr><call><name pos:line="4" pos:column="24">error_errno<pos:position pos:line="4" pos:column="35"/></name><argument_list pos:line="4" pos:column="35">(<argument><expr><literal type="string" pos:line="4" pos:column="36">"cannot open %s"<pos:position pos:line="4" pos:column="52"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="4" pos:column="54">filename<pos:position pos:line="4" pos:column="62"/></name></expr> ?<pos:position pos:line="4" pos:column="64"/></condition><then pos:line="4" pos:column="64"> <expr><name pos:line="4" pos:column="65">filename<pos:position pos:line="4" pos:column="73"/></name></expr> <pos:position pos:line="4" pos:column="74"/></then><else pos:line="4" pos:column="74">: <expr><literal type="string" pos:line="4" pos:column="76">"NULL"<pos:position pos:line="4" pos:column="82"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="4" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="84"/></return></block></then></if>
	<expr_stmt><expr><call><name pos:line="5" pos:column="9">init<pos:position pos:line="5" pos:column="13"/></name><argument_list pos:line="5" pos:column="13">(<argument><expr><name pos:line="5" pos:column="14">REPORT_FILENO<pos:position pos:line="5" pos:column="27"/></name></expr></argument>)<pos:position pos:line="5" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="29"/></expr_stmt>
	<return pos:line="6" pos:column="9">return <expr><literal type="number" pos:line="6" pos:column="16">0<pos:position pos:line="6" pos:column="17"/></literal></expr>;<pos:position pos:line="6" pos:column="18"/></return>
}<pos:position pos:line="7" pos:column="2"/></block></function></unit>
