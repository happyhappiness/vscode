<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_725.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">wt_porcelain_v2_print_tracking<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name><name pos:line="1" pos:column="44">struct<pos:position pos:line="1" pos:column="50"/></name> <name pos:line="1" pos:column="51">wt_status<pos:position pos:line="1" pos:column="60"/></name></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">s<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">branch<pos:position pos:line="3" pos:column="22"/></name></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">branch<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">base<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">branch_name<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">wt_status_state<pos:position pos:line="6" pos:column="31"/></name></name></type> <name pos:line="6" pos:column="32">state<pos:position pos:line="6" pos:column="37"/></name></decl>;<pos:position pos:line="6" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">ab_info<pos:position pos:line="7" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="22">nr_ahead<pos:position pos:line="7" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="32">nr_behind<pos:position pos:line="7" pos:column="41"/></name></decl>;<pos:position pos:line="7" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name></type> <name pos:line="8" pos:column="14">eol<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">= <expr><ternary><condition><expr><name><name pos:line="8" pos:column="20">s<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">-&gt;<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="23">null_termination<pos:position pos:line="8" pos:column="39"/></name></name></expr> ?<pos:position pos:line="8" pos:column="41"/></condition><then pos:line="8" pos:column="41"> <expr><literal type="char" pos:line="8" pos:column="42">'\0'<pos:position pos:line="8" pos:column="46"/></literal></expr> <pos:position pos:line="8" pos:column="47"/></then><else pos:line="8" pos:column="47">: <expr><literal type="char" pos:line="8" pos:column="49">'\n'<pos:position pos:line="8" pos:column="53"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="8" pos:column="54"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">memset<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><operator pos:line="10" pos:column="16">&amp;<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="17">state<pos:position pos:line="10" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="27">sizeof<argument_list pos:line="10" pos:column="33">(<argument><expr><name pos:line="10" pos:column="34">state<pos:position pos:line="10" pos:column="39"/></name></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">wt_status_get_state<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><operator pos:line="11" pos:column="29">&amp;<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="30">state<pos:position pos:line="11" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="37">s<pos:position pos:line="11" pos:column="38"/></name><operator pos:line="11" pos:column="38">-&gt;<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="40">branch<pos:position pos:line="11" pos:column="46"/></name></name> <operator pos:line="11" pos:column="47">&amp;&amp;<pos:position pos:line="11" pos:column="57"/></operator> <operator pos:line="11" pos:column="50">!<pos:position pos:line="11" pos:column="51"/></operator><call><name pos:line="11" pos:column="51">strcmp<pos:position pos:line="11" pos:column="57"/></name><argument_list pos:line="11" pos:column="57">(<argument><expr><name><name pos:line="11" pos:column="58">s<pos:position pos:line="11" pos:column="59"/></name><operator pos:line="11" pos:column="59">-&gt;<pos:position pos:line="11" pos:column="64"/></operator><name pos:line="11" pos:column="61">branch<pos:position pos:line="11" pos:column="67"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="69">"HEAD"<pos:position pos:line="11" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="78"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="13" pos:column="9">fprintf<pos:position pos:line="13" pos:column="16"/></name><argument_list pos:line="13" pos:column="16">(<argument><expr><name><name pos:line="13" pos:column="17">s<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">-&gt;<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="20">fp<pos:position pos:line="13" pos:column="22"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="24">"# branch.oid %s%c"<pos:position pos:line="13" pos:column="43"/></literal></expr></argument>,
			<argument><expr><operator pos:line="14" pos:column="25">(<pos:position pos:line="14" pos:column="26"/></operator><ternary><condition><expr><name><name pos:line="14" pos:column="26">s<pos:position pos:line="14" pos:column="27"/></name><operator pos:line="14" pos:column="27">-&gt;<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="29">is_initial<pos:position pos:line="14" pos:column="39"/></name></name></expr> ?<pos:position pos:line="14" pos:column="41"/></condition><then pos:line="14" pos:column="41"> <expr><literal type="string" pos:line="14" pos:column="42">"(initial)"<pos:position pos:line="14" pos:column="53"/></literal></expr> <pos:position pos:line="14" pos:column="54"/></then><else pos:line="14" pos:column="54">: <expr><call><name pos:line="14" pos:column="56">sha1_to_hex<pos:position pos:line="14" pos:column="67"/></name><argument_list pos:line="14" pos:column="67">(<argument><expr><name><name pos:line="14" pos:column="68">s<pos:position pos:line="14" pos:column="69"/></name><operator pos:line="14" pos:column="69">-&gt;<pos:position pos:line="14" pos:column="74"/></operator><name pos:line="14" pos:column="71">sha1_commit<pos:position pos:line="14" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="83"/></argument_list></call></expr></else></ternary><operator pos:line="14" pos:column="83">)<pos:position pos:line="14" pos:column="84"/></operator></expr></argument>,
			<argument><expr><name pos:line="15" pos:column="25">eol<pos:position pos:line="15" pos:column="28"/></name></expr></argument>)<pos:position pos:line="15" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="30"/></expr_stmt>

	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><name><name pos:line="17" pos:column="14">s<pos:position pos:line="17" pos:column="15"/></name><operator pos:line="17" pos:column="15">-&gt;<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="17">branch<pos:position pos:line="17" pos:column="23"/></name></name></expr>)<pos:position pos:line="17" pos:column="24"/></condition><then pos:line="17" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="17">fprintf<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name><name pos:line="18" pos:column="25">s<pos:position pos:line="18" pos:column="26"/></name><operator pos:line="18" pos:column="26">-&gt;<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="28">fp<pos:position pos:line="18" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="32">"# branch.head %s%c"<pos:position pos:line="18" pos:column="52"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="54">"(unknown)"<pos:position pos:line="18" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="67">eol<pos:position pos:line="18" pos:column="70"/></name></expr></argument>)<pos:position pos:line="18" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="72"/></expr_stmt></block></then>
	<else pos:line="19" pos:column="9">else <block pos:line="19" pos:column="14">{
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><operator pos:line="20" pos:column="21">!<pos:position pos:line="20" pos:column="22"/></operator><call><name pos:line="20" pos:column="22">strcmp<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">(<argument><expr><name><name pos:line="20" pos:column="29">s<pos:position pos:line="20" pos:column="30"/></name><operator pos:line="20" pos:column="30">-&gt;<pos:position pos:line="20" pos:column="35"/></operator><name pos:line="20" pos:column="32">branch<pos:position pos:line="20" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="40">"HEAD"<pos:position pos:line="20" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="48"/></condition><then pos:line="20" pos:column="48"> <block pos:line="20" pos:column="49">{
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">fprintf<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">(<argument><expr><name><name pos:line="21" pos:column="33">s<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">-&gt;<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="36">fp<pos:position pos:line="21" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="40">"# branch.head %s%c"<pos:position pos:line="21" pos:column="60"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="62">"(detached)"<pos:position pos:line="21" pos:column="74"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="76">eol<pos:position pos:line="21" pos:column="79"/></name></expr></argument>)<pos:position pos:line="21" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="81"/></expr_stmt>

			<if pos:line="23" pos:column="25">if <condition pos:line="23" pos:column="28">(<expr><name><name pos:line="23" pos:column="29">state<pos:position pos:line="23" pos:column="34"/></name><operator pos:line="23" pos:column="34">.<pos:position pos:line="23" pos:column="35"/></operator><name pos:line="23" pos:column="35">rebase_in_progress<pos:position pos:line="23" pos:column="53"/></name></name> <operator pos:line="23" pos:column="54">||<pos:position pos:line="23" pos:column="56"/></operator> <name><name pos:line="23" pos:column="57">state<pos:position pos:line="23" pos:column="62"/></name><operator pos:line="23" pos:column="62">.<pos:position pos:line="23" pos:column="63"/></operator><name pos:line="23" pos:column="63">rebase_interactive_in_progress<pos:position pos:line="23" pos:column="93"/></name></name></expr>)<pos:position pos:line="23" pos:column="94"/></condition><then pos:line="23" pos:column="94">
				<block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="33">branch_name<pos:position pos:line="24" pos:column="44"/></name> <operator pos:line="24" pos:column="45">=<pos:position pos:line="24" pos:column="46"/></operator> <name><name pos:line="24" pos:column="47">state<pos:position pos:line="24" pos:column="52"/></name><operator pos:line="24" pos:column="52">.<pos:position pos:line="24" pos:column="53"/></operator><name pos:line="24" pos:column="53">onto<pos:position pos:line="24" pos:column="57"/></name></name></expr>;<pos:position pos:line="24" pos:column="58"/></expr_stmt></block></then>
			<elseif pos:line="25" pos:column="25">else <if pos:line="25" pos:column="30">if <condition pos:line="25" pos:column="33">(<expr><name><name pos:line="25" pos:column="34">state<pos:position pos:line="25" pos:column="39"/></name><operator pos:line="25" pos:column="39">.<pos:position pos:line="25" pos:column="40"/></operator><name pos:line="25" pos:column="40">detached_from<pos:position pos:line="25" pos:column="53"/></name></name></expr>)<pos:position pos:line="25" pos:column="54"/></condition><then pos:line="25" pos:column="54">
				<block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="33">branch_name<pos:position pos:line="26" pos:column="44"/></name> <operator pos:line="26" pos:column="45">=<pos:position pos:line="26" pos:column="46"/></operator> <name><name pos:line="26" pos:column="47">state<pos:position pos:line="26" pos:column="52"/></name><operator pos:line="26" pos:column="52">.<pos:position pos:line="26" pos:column="53"/></operator><name pos:line="26" pos:column="53">detached_from<pos:position pos:line="26" pos:column="66"/></name></name></expr>;<pos:position pos:line="26" pos:column="67"/></expr_stmt></block></then></if></elseif>
			<else pos:line="27" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="33">branch_name<pos:position pos:line="28" pos:column="44"/></name> <operator pos:line="28" pos:column="45">=<pos:position pos:line="28" pos:column="46"/></operator> <literal type="string" pos:line="28" pos:column="47">""<pos:position pos:line="28" pos:column="49"/></literal></expr>;<pos:position pos:line="28" pos:column="50"/></expr_stmt></block></else></if>
		}<pos:position pos:line="29" pos:column="18"/></block></then> <else pos:line="29" pos:column="19">else <block pos:line="29" pos:column="24">{
			<expr_stmt><expr><name pos:line="30" pos:column="25">branch_name<pos:position pos:line="30" pos:column="36"/></name> <operator pos:line="30" pos:column="37">=<pos:position pos:line="30" pos:column="38"/></operator> <name pos:line="30" pos:column="39">NULL<pos:position pos:line="30" pos:column="43"/></name></expr>;<pos:position pos:line="30" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">skip_prefix<pos:position pos:line="31" pos:column="36"/></name><argument_list pos:line="31" pos:column="36">(<argument><expr><name><name pos:line="31" pos:column="37">s<pos:position pos:line="31" pos:column="38"/></name><operator pos:line="31" pos:column="38">-&gt;<pos:position pos:line="31" pos:column="43"/></operator><name pos:line="31" pos:column="40">branch<pos:position pos:line="31" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="48">"refs/heads/"<pos:position pos:line="31" pos:column="61"/></literal></expr></argument>, <argument><expr><operator pos:line="31" pos:column="63">&amp;<pos:position pos:line="31" pos:column="68"/></operator><name pos:line="31" pos:column="64">branch_name<pos:position pos:line="31" pos:column="75"/></name></expr></argument>)<pos:position pos:line="31" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="77"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="33" pos:column="25">fprintf<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><name><name pos:line="33" pos:column="33">s<pos:position pos:line="33" pos:column="34"/></name><operator pos:line="33" pos:column="34">-&gt;<pos:position pos:line="33" pos:column="39"/></operator><name pos:line="33" pos:column="36">fp<pos:position pos:line="33" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="40">"# branch.head %s%c"<pos:position pos:line="33" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="62">branch_name<pos:position pos:line="33" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="75">eol<pos:position pos:line="33" pos:column="78"/></name></expr></argument>)<pos:position pos:line="33" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="80"/></expr_stmt>
		}<pos:position pos:line="34" pos:column="18"/></block></else></if>

		<comment type="block" pos:line="36" pos:column="17">/* Lookup stats on the upstream tracking branch, if set. */</comment>
		<expr_stmt><expr><name pos:line="37" pos:column="17">branch<pos:position pos:line="37" pos:column="23"/></name> <operator pos:line="37" pos:column="24">=<pos:position pos:line="37" pos:column="25"/></operator> <call><name pos:line="37" pos:column="26">branch_get<pos:position pos:line="37" pos:column="36"/></name><argument_list pos:line="37" pos:column="36">(<argument><expr><name pos:line="37" pos:column="37">branch_name<pos:position pos:line="37" pos:column="48"/></name></expr></argument>)<pos:position pos:line="37" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name pos:line="38" pos:column="17">base<pos:position pos:line="38" pos:column="21"/></name> <operator pos:line="38" pos:column="22">=<pos:position pos:line="38" pos:column="23"/></operator> <name pos:line="38" pos:column="24">NULL<pos:position pos:line="38" pos:column="28"/></name></expr>;<pos:position pos:line="38" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="39" pos:column="17">ab_info<pos:position pos:line="39" pos:column="24"/></name> <operator pos:line="39" pos:column="25">=<pos:position pos:line="39" pos:column="26"/></operator> <operator pos:line="39" pos:column="27">(<pos:position pos:line="39" pos:column="28"/></operator><call><name pos:line="39" pos:column="28">stat_tracking_info<pos:position pos:line="39" pos:column="46"/></name><argument_list pos:line="39" pos:column="46">(<argument><expr><name pos:line="39" pos:column="47">branch<pos:position pos:line="39" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="55">&amp;<pos:position pos:line="39" pos:column="60"/></operator><name pos:line="39" pos:column="56">nr_ahead<pos:position pos:line="39" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="66">&amp;<pos:position pos:line="39" pos:column="71"/></operator><name pos:line="39" pos:column="67">nr_behind<pos:position pos:line="39" pos:column="76"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="78">&amp;<pos:position pos:line="39" pos:column="83"/></operator><name pos:line="39" pos:column="79">base<pos:position pos:line="39" pos:column="83"/></name></expr></argument>)<pos:position pos:line="39" pos:column="84"/></argument_list></call> <operator pos:line="39" pos:column="85">==<pos:position pos:line="39" pos:column="87"/></operator> <literal type="number" pos:line="39" pos:column="88">0<pos:position pos:line="39" pos:column="89"/></literal><operator pos:line="39" pos:column="89">)<pos:position pos:line="39" pos:column="90"/></operator></expr>;<pos:position pos:line="39" pos:column="91"/></expr_stmt>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name pos:line="40" pos:column="21">base<pos:position pos:line="40" pos:column="25"/></name></expr>)<pos:position pos:line="40" pos:column="26"/></condition><then pos:line="40" pos:column="26"> <block pos:line="40" pos:column="27">{
			<expr_stmt><expr><name pos:line="41" pos:column="25">base<pos:position pos:line="41" pos:column="29"/></name> <operator pos:line="41" pos:column="30">=<pos:position pos:line="41" pos:column="31"/></operator> <call><name pos:line="41" pos:column="32">shorten_unambiguous_ref<pos:position pos:line="41" pos:column="55"/></name><argument_list pos:line="41" pos:column="55">(<argument><expr><name pos:line="41" pos:column="56">base<pos:position pos:line="41" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="62">0<pos:position pos:line="41" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="42" pos:column="25">fprintf<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><name><name pos:line="42" pos:column="33">s<pos:position pos:line="42" pos:column="34"/></name><operator pos:line="42" pos:column="34">-&gt;<pos:position pos:line="42" pos:column="39"/></operator><name pos:line="42" pos:column="36">fp<pos:position pos:line="42" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="40">"# branch.upstream %s%c"<pos:position pos:line="42" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="66">base<pos:position pos:line="42" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="72">eol<pos:position pos:line="42" pos:column="75"/></name></expr></argument>)<pos:position pos:line="42" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="77"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">free<pos:position pos:line="43" pos:column="29"/></name><argument_list pos:line="43" pos:column="29">(<argument><expr><operator pos:line="43" pos:column="30">(<pos:position pos:line="43" pos:column="31"/></operator><name pos:line="43" pos:column="31">char<pos:position pos:line="43" pos:column="35"/></name> <operator pos:line="43" pos:column="36">*<pos:position pos:line="43" pos:column="37"/></operator><operator pos:line="43" pos:column="37">)<pos:position pos:line="43" pos:column="38"/></operator><name pos:line="43" pos:column="38">base<pos:position pos:line="43" pos:column="42"/></name></expr></argument>)<pos:position pos:line="43" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="44"/></expr_stmt>

			<if pos:line="45" pos:column="25">if <condition pos:line="45" pos:column="28">(<expr><name pos:line="45" pos:column="29">ab_info<pos:position pos:line="45" pos:column="36"/></name></expr>)<pos:position pos:line="45" pos:column="37"/></condition><then pos:line="45" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="33">fprintf<pos:position pos:line="46" pos:column="40"/></name><argument_list pos:line="46" pos:column="40">(<argument><expr><name><name pos:line="46" pos:column="41">s<pos:position pos:line="46" pos:column="42"/></name><operator pos:line="46" pos:column="42">-&gt;<pos:position pos:line="46" pos:column="47"/></operator><name pos:line="46" pos:column="44">fp<pos:position pos:line="46" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="48">"# branch.ab +%d -%d%c"<pos:position pos:line="46" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="73">nr_ahead<pos:position pos:line="46" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="83">nr_behind<pos:position pos:line="46" pos:column="92"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="94">eol<pos:position pos:line="46" pos:column="97"/></name></expr></argument>)<pos:position pos:line="46" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="99"/></expr_stmt></block></then></if>
		}<pos:position pos:line="47" pos:column="18"/></block></then></if>
	}<pos:position pos:line="48" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="50" pos:column="9">free<pos:position pos:line="50" pos:column="13"/></name><argument_list pos:line="50" pos:column="13">(<argument><expr><name><name pos:line="50" pos:column="14">state<pos:position pos:line="50" pos:column="19"/></name><operator pos:line="50" pos:column="19">.<pos:position pos:line="50" pos:column="20"/></operator><name pos:line="50" pos:column="20">branch<pos:position pos:line="50" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="51" pos:column="9">free<pos:position pos:line="51" pos:column="13"/></name><argument_list pos:line="51" pos:column="13">(<argument><expr><name><name pos:line="51" pos:column="14">state<pos:position pos:line="51" pos:column="19"/></name><operator pos:line="51" pos:column="19">.<pos:position pos:line="51" pos:column="20"/></operator><name pos:line="51" pos:column="20">onto<pos:position pos:line="51" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="52" pos:column="9">free<pos:position pos:line="52" pos:column="13"/></name><argument_list pos:line="52" pos:column="13">(<argument><expr><name><name pos:line="52" pos:column="14">state<pos:position pos:line="52" pos:column="19"/></name><operator pos:line="52" pos:column="19">.<pos:position pos:line="52" pos:column="20"/></operator><name pos:line="52" pos:column="20">detached_from<pos:position pos:line="52" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="35"/></expr_stmt>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
