<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_173.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="20">const<pos:position pos:line="1" pos:column="25"/></specifier> <name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier><modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">argv<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="38"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">buf<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><name pos:line="3" pos:column="29">STRBUF_INIT<pos:position pos:line="3" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">nongit<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">git_extract_argv0_path<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">(<argument><expr><name><name pos:line="6" pos:column="32">argv<pos:position pos:line="6" pos:column="36"/></name><index pos:line="6" pos:column="36">[<expr><literal type="number" pos:line="6" pos:column="37">0<pos:position pos:line="6" pos:column="38"/></literal></expr>]<pos:position pos:line="6" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="7" pos:column="9">setup_git_directory_gently<pos:position pos:line="7" pos:column="35"/></name><argument_list pos:line="7" pos:column="35">(<argument><expr><operator pos:line="7" pos:column="36">&amp;<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="37">nongit<pos:position pos:line="7" pos:column="43"/></name></expr></argument>)<pos:position pos:line="7" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="45"/></expr_stmt>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">argc<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">&lt;<pos:position pos:line="8" pos:column="22"/></operator> <literal type="number" pos:line="8" pos:column="20">2<pos:position pos:line="8" pos:column="21"/></literal></expr>)<pos:position pos:line="8" pos:column="22"/></condition><then pos:line="8" pos:column="22"> <block pos:line="8" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">fprintf<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><name pos:line="9" pos:column="25">stderr<pos:position pos:line="9" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="33">"Remote needed\n"<pos:position pos:line="9" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="52"/></expr_stmt>
		<return pos:line="10" pos:column="17">return <expr><literal type="number" pos:line="10" pos:column="24">1<pos:position pos:line="10" pos:column="25"/></literal></expr>;<pos:position pos:line="10" pos:column="26"/></return>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="13" pos:column="9">options<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">.<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">verbosity<pos:position pos:line="13" pos:column="26"/></name></name> <operator pos:line="13" pos:column="27">=<pos:position pos:line="13" pos:column="28"/></operator> <literal type="number" pos:line="13" pos:column="29">1<pos:position pos:line="13" pos:column="30"/></literal></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">options<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">.<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="17">progress<pos:position pos:line="14" pos:column="25"/></name></name> <operator pos:line="14" pos:column="26">=<pos:position pos:line="14" pos:column="27"/></operator> <operator pos:line="14" pos:column="28">!<pos:position pos:line="14" pos:column="29"/></operator><operator pos:line="14" pos:column="29">!<pos:position pos:line="14" pos:column="30"/></operator><call><name pos:line="14" pos:column="30">isatty<pos:position pos:line="14" pos:column="36"/></name><argument_list pos:line="14" pos:column="36">(<argument><expr><literal type="number" pos:line="14" pos:column="37">2<pos:position pos:line="14" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="15" pos:column="9">options<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">.<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">thin<pos:position pos:line="15" pos:column="21"/></name></name> <operator pos:line="15" pos:column="22">=<pos:position pos:line="15" pos:column="23"/></operator> <literal type="number" pos:line="15" pos:column="24">1<pos:position pos:line="15" pos:column="25"/></literal></expr>;<pos:position pos:line="15" pos:column="26"/></expr_stmt>

	<expr_stmt><expr><name pos:line="17" pos:column="9">remote<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <call><name pos:line="17" pos:column="18">remote_get<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><name><name pos:line="17" pos:column="29">argv<pos:position pos:line="17" pos:column="33"/></name><index pos:line="17" pos:column="33">[<expr><literal type="number" pos:line="17" pos:column="34">1<pos:position pos:line="17" pos:column="35"/></literal></expr>]<pos:position pos:line="17" pos:column="36"/></index></name></expr></argument>)<pos:position pos:line="17" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="38"/></expr_stmt>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">argc<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">&gt;<pos:position pos:line="19" pos:column="22"/></operator> <literal type="number" pos:line="19" pos:column="20">2<pos:position pos:line="19" pos:column="21"/></literal></expr>)<pos:position pos:line="19" pos:column="22"/></condition><then pos:line="19" pos:column="22"> <block pos:line="19" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">end_url_with_slash<pos:position pos:line="20" pos:column="35"/></name><argument_list pos:line="20" pos:column="35">(<argument><expr><operator pos:line="20" pos:column="36">&amp;<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="37">url<pos:position pos:line="20" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="42">argv<pos:position pos:line="20" pos:column="46"/></name><index pos:line="20" pos:column="46">[<expr><literal type="number" pos:line="20" pos:column="47">2<pos:position pos:line="20" pos:column="48"/></literal></expr>]<pos:position pos:line="20" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="20" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then> <else pos:line="21" pos:column="11">else <block pos:line="21" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">end_url_with_slash<pos:position pos:line="22" pos:column="35"/></name><argument_list pos:line="22" pos:column="35">(<argument><expr><operator pos:line="22" pos:column="36">&amp;<pos:position pos:line="22" pos:column="41"/></operator><name pos:line="22" pos:column="37">url<pos:position pos:line="22" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="42">remote<pos:position pos:line="22" pos:column="48"/></name><operator pos:line="22" pos:column="48">-&gt;<pos:position pos:line="22" pos:column="53"/></operator><name pos:line="22" pos:column="50">url<pos:position pos:line="22" pos:column="53"/></name><index pos:line="22" pos:column="53">[<expr><literal type="number" pos:line="22" pos:column="54">0<pos:position pos:line="22" pos:column="55"/></literal></expr>]<pos:position pos:line="22" pos:column="56"/></index></name></expr></argument>)<pos:position pos:line="22" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="58"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="25" pos:column="9">http_init<pos:position pos:line="25" pos:column="18"/></name><argument_list pos:line="25" pos:column="18">(<argument><expr><name pos:line="25" pos:column="19">remote<pos:position pos:line="25" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="27">url<pos:position pos:line="25" pos:column="30"/></name><operator pos:line="25" pos:column="30">.<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="31">buf<pos:position pos:line="25" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="36">0<pos:position pos:line="25" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>

	<do pos:line="27" pos:column="9">do <block pos:line="27" pos:column="12">{
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><call><name pos:line="28" pos:column="21">strbuf_getline<pos:position pos:line="28" pos:column="35"/></name><argument_list pos:line="28" pos:column="35">(<argument><expr><operator pos:line="28" pos:column="36">&amp;<pos:position pos:line="28" pos:column="41"/></operator><name pos:line="28" pos:column="37">buf<pos:position pos:line="28" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="42">stdin<pos:position pos:line="28" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="28" pos:column="49">'\n'<pos:position pos:line="28" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></call> <operator pos:line="28" pos:column="55">==<pos:position pos:line="28" pos:column="57"/></operator> <name pos:line="28" pos:column="58">EOF<pos:position pos:line="28" pos:column="61"/></name></expr>)<pos:position pos:line="28" pos:column="62"/></condition><then pos:line="28" pos:column="62"> <block pos:line="28" pos:column="63">{
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><call><name pos:line="29" pos:column="29">ferror<pos:position pos:line="29" pos:column="35"/></name><argument_list pos:line="29" pos:column="35">(<argument><expr><name pos:line="29" pos:column="36">stdin<pos:position pos:line="29" pos:column="41"/></name></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="43"/></condition><then pos:line="29" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="33">fprintf<pos:position pos:line="30" pos:column="40"/></name><argument_list pos:line="30" pos:column="40">(<argument><expr><name pos:line="30" pos:column="41">stderr<pos:position pos:line="30" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="49">"Error reading command stream\n"<pos:position pos:line="30" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="83"/></expr_stmt></block></then>
			<else pos:line="31" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="33">fprintf<pos:position pos:line="32" pos:column="40"/></name><argument_list pos:line="32" pos:column="40">(<argument><expr><name pos:line="32" pos:column="41">stderr<pos:position pos:line="32" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="49">"Unexpected end of command stream\n"<pos:position pos:line="32" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="87"/></expr_stmt></block></else></if>
			<return pos:line="33" pos:column="25">return <expr><literal type="number" pos:line="33" pos:column="32">1<pos:position pos:line="33" pos:column="33"/></literal></expr>;<pos:position pos:line="33" pos:column="34"/></return>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name><name pos:line="35" pos:column="21">buf<pos:position pos:line="35" pos:column="24"/></name><operator pos:line="35" pos:column="24">.<pos:position pos:line="35" pos:column="25"/></operator><name pos:line="35" pos:column="25">len<pos:position pos:line="35" pos:column="28"/></name></name> <operator pos:line="35" pos:column="29">==<pos:position pos:line="35" pos:column="31"/></operator> <literal type="number" pos:line="35" pos:column="32">0<pos:position pos:line="35" pos:column="33"/></literal></expr>)<pos:position pos:line="35" pos:column="34"/></condition><then pos:line="35" pos:column="34">
			<block type="pseudo"><break pos:line="36" pos:column="25">break;<pos:position pos:line="36" pos:column="31"/></break></block></then></if>
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><call><name pos:line="37" pos:column="21">starts_with<pos:position pos:line="37" pos:column="32"/></name><argument_list pos:line="37" pos:column="32">(<argument><expr><name><name pos:line="37" pos:column="33">buf<pos:position pos:line="37" pos:column="36"/></name><operator pos:line="37" pos:column="36">.<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="37">buf<pos:position pos:line="37" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="42">"fetch "<pos:position pos:line="37" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="52"/></condition><then pos:line="37" pos:column="52"> <block pos:line="37" pos:column="53">{
			<if pos:line="38" pos:column="25">if <condition pos:line="38" pos:column="28">(<expr><name pos:line="38" pos:column="29">nongit<pos:position pos:line="38" pos:column="35"/></name></expr>)<pos:position pos:line="38" pos:column="36"/></condition><then pos:line="38" pos:column="36">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="33">die<pos:position pos:line="39" pos:column="36"/></name><argument_list pos:line="39" pos:column="36">(<argument><expr><literal type="string" pos:line="39" pos:column="37">"Fetch attempted without a local repo"<pos:position pos:line="39" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="77"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="40" pos:column="25">parse_fetch<pos:position pos:line="40" pos:column="36"/></name><argument_list pos:line="40" pos:column="36">(<argument><expr><operator pos:line="40" pos:column="37">&amp;<pos:position pos:line="40" pos:column="42"/></operator><name pos:line="40" pos:column="38">buf<pos:position pos:line="40" pos:column="41"/></name></expr></argument>)<pos:position pos:line="40" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="43"/></expr_stmt>

		}<pos:position pos:line="42" pos:column="18"/></block></then> <elseif pos:line="42" pos:column="19">else <if pos:line="42" pos:column="24">if <condition pos:line="42" pos:column="27">(<expr><operator pos:line="42" pos:column="28">!<pos:position pos:line="42" pos:column="29"/></operator><call><name pos:line="42" pos:column="29">strcmp<pos:position pos:line="42" pos:column="35"/></name><argument_list pos:line="42" pos:column="35">(<argument><expr><name><name pos:line="42" pos:column="36">buf<pos:position pos:line="42" pos:column="39"/></name><operator pos:line="42" pos:column="39">.<pos:position pos:line="42" pos:column="40"/></operator><name pos:line="42" pos:column="40">buf<pos:position pos:line="42" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="45">"list"<pos:position pos:line="42" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="52"/></argument_list></call> <operator pos:line="42" pos:column="53">||<pos:position pos:line="42" pos:column="55"/></operator> <call><name pos:line="42" pos:column="56">starts_with<pos:position pos:line="42" pos:column="67"/></name><argument_list pos:line="42" pos:column="67">(<argument><expr><name><name pos:line="42" pos:column="68">buf<pos:position pos:line="42" pos:column="71"/></name><operator pos:line="42" pos:column="71">.<pos:position pos:line="42" pos:column="72"/></operator><name pos:line="42" pos:column="72">buf<pos:position pos:line="42" pos:column="75"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="77">"list "<pos:position pos:line="42" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="85"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="86"/></condition><then pos:line="42" pos:column="86"> <block pos:line="42" pos:column="87">{
			<decl_stmt><decl><type><name pos:line="43" pos:column="25">int<pos:position pos:line="43" pos:column="28"/></name></type> <name pos:line="43" pos:column="29">for_push<pos:position pos:line="43" pos:column="37"/></name> <init pos:line="43" pos:column="38">= <expr><operator pos:line="43" pos:column="40">!<pos:position pos:line="43" pos:column="41"/></operator><operator pos:line="43" pos:column="41">!<pos:position pos:line="43" pos:column="42"/></operator><call><name pos:line="43" pos:column="42">strstr<pos:position pos:line="43" pos:column="48"/></name><argument_list pos:line="43" pos:column="48">(<argument><expr><name><name pos:line="43" pos:column="49">buf<pos:position pos:line="43" pos:column="52"/></name><operator pos:line="43" pos:column="52">.<pos:position pos:line="43" pos:column="53"/></operator><name pos:line="43" pos:column="53">buf<pos:position pos:line="43" pos:column="56"/></name></name> <operator pos:line="43" pos:column="57">+<pos:position pos:line="43" pos:column="58"/></operator> <literal type="number" pos:line="43" pos:column="59">4<pos:position pos:line="43" pos:column="60"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="62">"for-push"<pos:position pos:line="43" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="43" pos:column="74"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="44" pos:column="25">output_refs<pos:position pos:line="44" pos:column="36"/></name><argument_list pos:line="44" pos:column="36">(<argument><expr><call><name pos:line="44" pos:column="37">get_refs<pos:position pos:line="44" pos:column="45"/></name><argument_list pos:line="44" pos:column="45">(<argument><expr><name pos:line="44" pos:column="46">for_push<pos:position pos:line="44" pos:column="54"/></name></expr></argument>)<pos:position pos:line="44" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="57"/></expr_stmt>

		}<pos:position pos:line="46" pos:column="18"/></block></then></if></elseif> <elseif pos:line="46" pos:column="19">else <if pos:line="46" pos:column="24">if <condition pos:line="46" pos:column="27">(<expr><call><name pos:line="46" pos:column="28">starts_with<pos:position pos:line="46" pos:column="39"/></name><argument_list pos:line="46" pos:column="39">(<argument><expr><name><name pos:line="46" pos:column="40">buf<pos:position pos:line="46" pos:column="43"/></name><operator pos:line="46" pos:column="43">.<pos:position pos:line="46" pos:column="44"/></operator><name pos:line="46" pos:column="44">buf<pos:position pos:line="46" pos:column="47"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="49">"push "<pos:position pos:line="46" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="58"/></condition><then pos:line="46" pos:column="58"> <block pos:line="46" pos:column="59">{
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">parse_push<pos:position pos:line="47" pos:column="35"/></name><argument_list pos:line="47" pos:column="35">(<argument><expr><operator pos:line="47" pos:column="36">&amp;<pos:position pos:line="47" pos:column="41"/></operator><name pos:line="47" pos:column="37">buf<pos:position pos:line="47" pos:column="40"/></name></expr></argument>)<pos:position pos:line="47" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="42"/></expr_stmt>

		}<pos:position pos:line="49" pos:column="18"/></block></then></if></elseif> <elseif pos:line="49" pos:column="19">else <if pos:line="49" pos:column="24">if <condition pos:line="49" pos:column="27">(<expr><call><name pos:line="49" pos:column="28">starts_with<pos:position pos:line="49" pos:column="39"/></name><argument_list pos:line="49" pos:column="39">(<argument><expr><name><name pos:line="49" pos:column="40">buf<pos:position pos:line="49" pos:column="43"/></name><operator pos:line="49" pos:column="43">.<pos:position pos:line="49" pos:column="44"/></operator><name pos:line="49" pos:column="44">buf<pos:position pos:line="49" pos:column="47"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="49">"option "<pos:position pos:line="49" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="60"/></condition><then pos:line="49" pos:column="60"> <block pos:line="49" pos:column="61">{
			<decl_stmt><decl><type><name pos:line="50" pos:column="25">char<pos:position pos:line="50" pos:column="29"/></name> <modifier pos:line="50" pos:column="30">*<pos:position pos:line="50" pos:column="31"/></modifier></type><name pos:line="50" pos:column="31">name<pos:position pos:line="50" pos:column="35"/></name> <init pos:line="50" pos:column="36">= <expr><name><name pos:line="50" pos:column="38">buf<pos:position pos:line="50" pos:column="41"/></name><operator pos:line="50" pos:column="41">.<pos:position pos:line="50" pos:column="42"/></operator><name pos:line="50" pos:column="42">buf<pos:position pos:line="50" pos:column="45"/></name></name> <operator pos:line="50" pos:column="46">+<pos:position pos:line="50" pos:column="47"/></operator> <call><name pos:line="50" pos:column="48">strlen<pos:position pos:line="50" pos:column="54"/></name><argument_list pos:line="50" pos:column="54">(<argument><expr><literal type="string" pos:line="50" pos:column="55">"option "<pos:position pos:line="50" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="50" pos:column="66"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="51" pos:column="25">char<pos:position pos:line="51" pos:column="29"/></name> <modifier pos:line="51" pos:column="30">*<pos:position pos:line="51" pos:column="31"/></modifier></type><name pos:line="51" pos:column="31">value<pos:position pos:line="51" pos:column="36"/></name> <init pos:line="51" pos:column="37">= <expr><call><name pos:line="51" pos:column="39">strchr<pos:position pos:line="51" pos:column="45"/></name><argument_list pos:line="51" pos:column="45">(<argument><expr><name pos:line="51" pos:column="46">name<pos:position pos:line="51" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="51" pos:column="52">' '<pos:position pos:line="51" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="51" pos:column="57"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="52" pos:column="25">int<pos:position pos:line="52" pos:column="28"/></name></type> <name pos:line="52" pos:column="29">result<pos:position pos:line="52" pos:column="35"/></name></decl>;<pos:position pos:line="52" pos:column="36"/></decl_stmt>

			<if pos:line="54" pos:column="25">if <condition pos:line="54" pos:column="28">(<expr><name pos:line="54" pos:column="29">value<pos:position pos:line="54" pos:column="34"/></name></expr>)<pos:position pos:line="54" pos:column="35"/></condition><then pos:line="54" pos:column="35">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="55" pos:column="33">*<pos:position pos:line="55" pos:column="34"/></operator><name pos:line="55" pos:column="34">value<pos:position pos:line="55" pos:column="39"/></name><operator pos:line="55" pos:column="39">++<pos:position pos:line="55" pos:column="41"/></operator> <operator pos:line="55" pos:column="42">=<pos:position pos:line="55" pos:column="43"/></operator> <literal type="char" pos:line="55" pos:column="44">'\0'<pos:position pos:line="55" pos:column="48"/></literal></expr>;<pos:position pos:line="55" pos:column="49"/></expr_stmt></block></then>
			<else pos:line="56" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="57" pos:column="33">value<pos:position pos:line="57" pos:column="38"/></name> <operator pos:line="57" pos:column="39">=<pos:position pos:line="57" pos:column="40"/></operator> <literal type="string" pos:line="57" pos:column="41">"true"<pos:position pos:line="57" pos:column="47"/></literal></expr>;<pos:position pos:line="57" pos:column="48"/></expr_stmt></block></else></if>

			<expr_stmt><expr><name pos:line="59" pos:column="25">result<pos:position pos:line="59" pos:column="31"/></name> <operator pos:line="59" pos:column="32">=<pos:position pos:line="59" pos:column="33"/></operator> <call><name pos:line="59" pos:column="34">set_option<pos:position pos:line="59" pos:column="44"/></name><argument_list pos:line="59" pos:column="44">(<argument><expr><name pos:line="59" pos:column="45">name<pos:position pos:line="59" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="51">value<pos:position pos:line="59" pos:column="56"/></name></expr></argument>)<pos:position pos:line="59" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="58"/></expr_stmt>
			<if pos:line="60" pos:column="25">if <condition pos:line="60" pos:column="28">(<expr><operator pos:line="60" pos:column="29">!<pos:position pos:line="60" pos:column="30"/></operator><name pos:line="60" pos:column="30">result<pos:position pos:line="60" pos:column="36"/></name></expr>)<pos:position pos:line="60" pos:column="37"/></condition><then pos:line="60" pos:column="37">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="33">printf<pos:position pos:line="61" pos:column="39"/></name><argument_list pos:line="61" pos:column="39">(<argument><expr><literal type="string" pos:line="61" pos:column="40">"ok\n"<pos:position pos:line="61" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="48"/></expr_stmt></block></then>
			<elseif pos:line="62" pos:column="25">else <if pos:line="62" pos:column="30">if <condition pos:line="62" pos:column="33">(<expr><name pos:line="62" pos:column="34">result<pos:position pos:line="62" pos:column="40"/></name> <operator pos:line="62" pos:column="41">&lt;<pos:position pos:line="62" pos:column="45"/></operator> <literal type="number" pos:line="62" pos:column="43">0<pos:position pos:line="62" pos:column="44"/></literal></expr>)<pos:position pos:line="62" pos:column="45"/></condition><then pos:line="62" pos:column="45">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="33">printf<pos:position pos:line="63" pos:column="39"/></name><argument_list pos:line="63" pos:column="39">(<argument><expr><literal type="string" pos:line="63" pos:column="40">"error invalid value\n"<pos:position pos:line="63" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="65"/></expr_stmt></block></then></if></elseif>
			<else pos:line="64" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="33">printf<pos:position pos:line="65" pos:column="39"/></name><argument_list pos:line="65" pos:column="39">(<argument><expr><literal type="string" pos:line="65" pos:column="40">"unsupported\n"<pos:position pos:line="65" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="57"/></expr_stmt></block></else></if>
			<expr_stmt><expr><call><name pos:line="66" pos:column="25">fflush<pos:position pos:line="66" pos:column="31"/></name><argument_list pos:line="66" pos:column="31">(<argument><expr><name pos:line="66" pos:column="32">stdout<pos:position pos:line="66" pos:column="38"/></name></expr></argument>)<pos:position pos:line="66" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="40"/></expr_stmt>

		}<pos:position pos:line="68" pos:column="18"/></block></then></if></elseif> <elseif pos:line="68" pos:column="19">else <if pos:line="68" pos:column="24">if <condition pos:line="68" pos:column="27">(<expr><operator pos:line="68" pos:column="28">!<pos:position pos:line="68" pos:column="29"/></operator><call><name pos:line="68" pos:column="29">strcmp<pos:position pos:line="68" pos:column="35"/></name><argument_list pos:line="68" pos:column="35">(<argument><expr><name><name pos:line="68" pos:column="36">buf<pos:position pos:line="68" pos:column="39"/></name><operator pos:line="68" pos:column="39">.<pos:position pos:line="68" pos:column="40"/></operator><name pos:line="68" pos:column="40">buf<pos:position pos:line="68" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="45">"capabilities"<pos:position pos:line="68" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="68" pos:column="61"/></condition><then pos:line="68" pos:column="61"> <block pos:line="68" pos:column="62">{
			<expr_stmt><expr><call><name pos:line="69" pos:column="25">printf<pos:position pos:line="69" pos:column="31"/></name><argument_list pos:line="69" pos:column="31">(<argument><expr><literal type="string" pos:line="69" pos:column="32">"fetch\n"<pos:position pos:line="69" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="70" pos:column="25">printf<pos:position pos:line="70" pos:column="31"/></name><argument_list pos:line="70" pos:column="31">(<argument><expr><literal type="string" pos:line="70" pos:column="32">"option\n"<pos:position pos:line="70" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="44"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="71" pos:column="25">printf<pos:position pos:line="71" pos:column="31"/></name><argument_list pos:line="71" pos:column="31">(<argument><expr><literal type="string" pos:line="71" pos:column="32">"push\n"<pos:position pos:line="71" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="72" pos:column="25">printf<pos:position pos:line="72" pos:column="31"/></name><argument_list pos:line="72" pos:column="31">(<argument><expr><literal type="string" pos:line="72" pos:column="32">"check-connectivity\n"<pos:position pos:line="72" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="73" pos:column="25">printf<pos:position pos:line="73" pos:column="31"/></name><argument_list pos:line="73" pos:column="31">(<argument><expr><literal type="string" pos:line="73" pos:column="32">"\n"<pos:position pos:line="73" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="74" pos:column="25">fflush<pos:position pos:line="74" pos:column="31"/></name><argument_list pos:line="74" pos:column="31">(<argument><expr><name pos:line="74" pos:column="32">stdout<pos:position pos:line="74" pos:column="38"/></name></expr></argument>)<pos:position pos:line="74" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="75" pos:column="18"/></block></then></if></elseif> <else pos:line="75" pos:column="19">else <block pos:line="75" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="76" pos:column="25">fprintf<pos:position pos:line="76" pos:column="32"/></name><argument_list pos:line="76" pos:column="32">(<argument><expr><name pos:line="76" pos:column="33">stderr<pos:position pos:line="76" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="41">"Unknown command '%s'\n"<pos:position pos:line="76" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="67">buf<pos:position pos:line="76" pos:column="70"/></name><operator pos:line="76" pos:column="70">.<pos:position pos:line="76" pos:column="71"/></operator><name pos:line="76" pos:column="71">buf<pos:position pos:line="76" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="76"/></expr_stmt>
			<return pos:line="77" pos:column="25">return <expr><literal type="number" pos:line="77" pos:column="32">1<pos:position pos:line="77" pos:column="33"/></literal></expr>;<pos:position pos:line="77" pos:column="34"/></return>
		}<pos:position pos:line="78" pos:column="18"/></block></else></if>
		<expr_stmt><expr><call><name pos:line="79" pos:column="17">strbuf_reset<pos:position pos:line="79" pos:column="29"/></name><argument_list pos:line="79" pos:column="29">(<argument><expr><operator pos:line="79" pos:column="30">&amp;<pos:position pos:line="79" pos:column="35"/></operator><name pos:line="79" pos:column="31">buf<pos:position pos:line="79" pos:column="34"/></name></expr></argument>)<pos:position pos:line="79" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="80" pos:column="10"/></block> while <condition pos:line="80" pos:column="17">(<expr><literal type="number" pos:line="80" pos:column="18">1<pos:position pos:line="80" pos:column="19"/></literal></expr>)<pos:position pos:line="80" pos:column="20"/></condition>;<pos:position pos:line="80" pos:column="21"/></do>

	<expr_stmt><expr><call><name pos:line="82" pos:column="9">http_cleanup<pos:position pos:line="82" pos:column="21"/></name><argument_list pos:line="82" pos:column="21">()<pos:position pos:line="82" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="24"/></expr_stmt>

	<return pos:line="84" pos:column="9">return <expr><literal type="number" pos:line="84" pos:column="16">0<pos:position pos:line="84" pos:column="17"/></literal></expr>;<pos:position pos:line="84" pos:column="18"/></return>
}<pos:position pos:line="85" pos:column="2"/></block></function></unit>
