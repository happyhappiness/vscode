<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2839_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">xstrndup<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><specifier pos:line="1" pos:column="16">const<pos:position pos:line="1" pos:column="21"/></specifier> <name pos:line="1" pos:column="22">char<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">str<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">size_t<pos:position pos:line="1" pos:column="39"/></name></type> <name pos:line="1" pos:column="40">len<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">p<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><call><name pos:line="3" pos:column="19">memchr<pos:position pos:line="3" pos:column="25"/></name><argument_list pos:line="3" pos:column="25">(<argument><expr><name pos:line="3" pos:column="26">str<pos:position pos:line="3" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="3" pos:column="31">'\0'<pos:position pos:line="3" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="3" pos:column="37">len<pos:position pos:line="3" pos:column="40"/></name></expr></argument>)<pos:position pos:line="3" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="42"/></decl_stmt>
	<return pos:line="4" pos:column="9">return <expr><call><name pos:line="4" pos:column="16">xmemdupz<pos:position pos:line="4" pos:column="24"/></name><argument_list pos:line="4" pos:column="24">(<argument><expr><name pos:line="4" pos:column="25">str<pos:position pos:line="4" pos:column="28"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="4" pos:column="30">p<pos:position pos:line="4" pos:column="31"/></name></expr> ?<pos:position pos:line="4" pos:column="33"/></condition><then pos:line="4" pos:column="33"> <expr><name pos:line="4" pos:column="34">p<pos:position pos:line="4" pos:column="35"/></name> <operator pos:line="4" pos:column="36">-<pos:position pos:line="4" pos:column="37"/></operator> <name pos:line="4" pos:column="38">str<pos:position pos:line="4" pos:column="41"/></name></expr> <pos:position pos:line="4" pos:column="42"/></then><else pos:line="4" pos:column="42">: <expr><name pos:line="4" pos:column="44">len<pos:position pos:line="4" pos:column="47"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="4" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="49"/></return>
}<pos:position pos:line="5" pos:column="2"/></block></function></unit>
