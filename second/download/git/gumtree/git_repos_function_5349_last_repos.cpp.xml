<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5349_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">calc_maxwidth<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">ref_array<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">refs<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">int<pos:position pos:line="1" pos:column="53"/></name></type> <name pos:line="1" pos:column="54">remote_bonus<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="16">max<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><literal type="number" pos:line="3" pos:column="22">0<pos:position pos:line="3" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<for pos:line="4" pos:column="9">for <control pos:line="4" pos:column="13">(<init><expr><name pos:line="4" pos:column="14">i<pos:position pos:line="4" pos:column="15"/></name> <operator pos:line="4" pos:column="16">=<pos:position pos:line="4" pos:column="17"/></operator> <literal type="number" pos:line="4" pos:column="18">0<pos:position pos:line="4" pos:column="19"/></literal></expr>;<pos:position pos:line="4" pos:column="20"/></init> <condition><expr><name pos:line="4" pos:column="21">i<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;<pos:position pos:line="4" pos:column="27"/></operator> <name><name pos:line="4" pos:column="25">refs<pos:position pos:line="4" pos:column="29"/></name><operator pos:line="4" pos:column="29">-&gt;<pos:position pos:line="4" pos:column="34"/></operator><name pos:line="4" pos:column="31">nr<pos:position pos:line="4" pos:column="33"/></name></name></expr>;<pos:position pos:line="4" pos:column="34"/></condition> <incr><expr><name pos:line="4" pos:column="35">i<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">++<pos:position pos:line="4" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="4" pos:column="39"/></control> <block pos:line="4" pos:column="40">{
		<decl_stmt><decl><type><name><name pos:line="5" pos:column="17">struct<pos:position pos:line="5" pos:column="23"/></name> <name pos:line="5" pos:column="24">ref_array_item<pos:position pos:line="5" pos:column="38"/></name></name> <modifier pos:line="5" pos:column="39">*<pos:position pos:line="5" pos:column="40"/></modifier></type><name pos:line="5" pos:column="40">it<pos:position pos:line="5" pos:column="42"/></name> <init pos:line="5" pos:column="43">= <expr><name><name pos:line="5" pos:column="45">refs<pos:position pos:line="5" pos:column="49"/></name><operator pos:line="5" pos:column="49">-&gt;<pos:position pos:line="5" pos:column="54"/></operator><name pos:line="5" pos:column="51">items<pos:position pos:line="5" pos:column="56"/></name><index pos:line="5" pos:column="56">[<expr><name pos:line="5" pos:column="57">i<pos:position pos:line="5" pos:column="58"/></name></expr>]<pos:position pos:line="5" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="60"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="6" pos:column="17">const<pos:position pos:line="6" pos:column="22"/></specifier> <name pos:line="6" pos:column="23">char<pos:position pos:line="6" pos:column="27"/></name> <modifier pos:line="6" pos:column="28">*<pos:position pos:line="6" pos:column="29"/></modifier></type><name pos:line="6" pos:column="29">desc<pos:position pos:line="6" pos:column="33"/></name> <init pos:line="6" pos:column="34">= <expr><name><name pos:line="6" pos:column="36">it<pos:position pos:line="6" pos:column="38"/></name><operator pos:line="6" pos:column="38">-&gt;<pos:position pos:line="6" pos:column="43"/></operator><name pos:line="6" pos:column="40">refname<pos:position pos:line="6" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="48"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">int<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">w<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="9" pos:column="17">skip_prefix<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><name><name pos:line="9" pos:column="29">it<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">-&gt;<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="33">refname<pos:position pos:line="9" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="42">"refs/heads/"<pos:position pos:line="9" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="9" pos:column="57">&amp;<pos:position pos:line="9" pos:column="62"/></operator><name pos:line="9" pos:column="58">desc<pos:position pos:line="9" pos:column="62"/></name></expr></argument>)<pos:position pos:line="9" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">skip_prefix<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><name><name pos:line="10" pos:column="29">it<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">-&gt;<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="33">refname<pos:position pos:line="10" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="42">"refs/remotes/"<pos:position pos:line="10" pos:column="57"/></literal></expr></argument>, <argument><expr><operator pos:line="10" pos:column="59">&amp;<pos:position pos:line="10" pos:column="64"/></operator><name pos:line="10" pos:column="60">desc<pos:position pos:line="10" pos:column="64"/></name></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="66"/></expr_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name><name pos:line="11" pos:column="21">it<pos:position pos:line="11" pos:column="23"/></name><operator pos:line="11" pos:column="23">-&gt;<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="25">kind<pos:position pos:line="11" pos:column="29"/></name></name> <operator pos:line="11" pos:column="30">==<pos:position pos:line="11" pos:column="32"/></operator> <name pos:line="11" pos:column="33">FILTER_REFS_DETACHED_HEAD<pos:position pos:line="11" pos:column="58"/></name></expr>)<pos:position pos:line="11" pos:column="59"/></condition><then pos:line="11" pos:column="59"> <block pos:line="11" pos:column="60">{
			<decl_stmt><decl><type><name pos:line="12" pos:column="25">char<pos:position pos:line="12" pos:column="29"/></name> <modifier pos:line="12" pos:column="30">*<pos:position pos:line="12" pos:column="31"/></modifier></type><name pos:line="12" pos:column="31">head_desc<pos:position pos:line="12" pos:column="40"/></name> <init pos:line="12" pos:column="41">= <expr><call><name pos:line="12" pos:column="43">get_head_description<pos:position pos:line="12" pos:column="63"/></name><argument_list pos:line="12" pos:column="63">()<pos:position pos:line="12" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="66"/></decl_stmt>
			<expr_stmt><expr><name pos:line="13" pos:column="25">w<pos:position pos:line="13" pos:column="26"/></name> <operator pos:line="13" pos:column="27">=<pos:position pos:line="13" pos:column="28"/></operator> <call><name pos:line="13" pos:column="29">utf8_strwidth<pos:position pos:line="13" pos:column="42"/></name><argument_list pos:line="13" pos:column="42">(<argument><expr><name pos:line="13" pos:column="43">head_desc<pos:position pos:line="13" pos:column="52"/></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">free<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">head_desc<pos:position pos:line="14" pos:column="39"/></name></expr></argument>)<pos:position pos:line="14" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt>
		}<pos:position pos:line="15" pos:column="18"/></block></then> <else pos:line="15" pos:column="19">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="25">w<pos:position pos:line="16" pos:column="26"/></name> <operator pos:line="16" pos:column="27">=<pos:position pos:line="16" pos:column="28"/></operator> <call><name pos:line="16" pos:column="29">utf8_strwidth<pos:position pos:line="16" pos:column="42"/></name><argument_list pos:line="16" pos:column="42">(<argument><expr><name pos:line="16" pos:column="43">desc<pos:position pos:line="16" pos:column="47"/></name></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="49"/></expr_stmt></block></else></if>

		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name><name pos:line="18" pos:column="21">it<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">-&gt;<pos:position pos:line="18" pos:column="28"/></operator><name pos:line="18" pos:column="25">kind<pos:position pos:line="18" pos:column="29"/></name></name> <operator pos:line="18" pos:column="30">==<pos:position pos:line="18" pos:column="32"/></operator> <name pos:line="18" pos:column="33">FILTER_REFS_REMOTES<pos:position pos:line="18" pos:column="52"/></name></expr>)<pos:position pos:line="18" pos:column="53"/></condition><then pos:line="18" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="25">w<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">+=<pos:position pos:line="19" pos:column="29"/></operator> <name pos:line="19" pos:column="30">remote_bonus<pos:position pos:line="19" pos:column="42"/></name></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt></block></then></if>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">w<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">&gt;<pos:position pos:line="20" pos:column="27"/></operator> <name pos:line="20" pos:column="25">max<pos:position pos:line="20" pos:column="28"/></name></expr>)<pos:position pos:line="20" pos:column="29"/></condition><then pos:line="20" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="25">max<pos:position pos:line="21" pos:column="28"/></name> <operator pos:line="21" pos:column="29">=<pos:position pos:line="21" pos:column="30"/></operator> <name pos:line="21" pos:column="31">w<pos:position pos:line="21" pos:column="32"/></name></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt></block></then></if>
	}<pos:position pos:line="22" pos:column="10"/></block></for>
	<return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">max<pos:position pos:line="23" pos:column="19"/></name></expr>;<pos:position pos:line="23" pos:column="20"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
