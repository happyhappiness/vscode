<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3653.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">read_branches_file<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">remote<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">remote<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">frag<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">branch<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><name pos:line="4" pos:column="32">STRBUF_INIT<pos:position pos:line="4" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">n<pos:position pos:line="5" pos:column="14"/></name> <init pos:line="5" pos:column="15">= <expr><literal type="number" pos:line="5" pos:column="17">1000<pos:position pos:line="5" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">FILE<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">f<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><call><name pos:line="6" pos:column="19">fopen<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><call><name pos:line="6" pos:column="25">git_path<pos:position pos:line="6" pos:column="33"/></name><argument_list pos:line="6" pos:column="33">(<argument><expr><literal type="string" pos:line="6" pos:column="34">"branches/%.*s"<pos:position pos:line="6" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="51">n<pos:position pos:line="6" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="54">remote<pos:position pos:line="6" pos:column="60"/></name><operator pos:line="6" pos:column="60">-&gt;<pos:position pos:line="6" pos:column="65"/></operator><name pos:line="6" pos:column="62">name<pos:position pos:line="6" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="69">"r"<pos:position pos:line="6" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="74"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">s<pos:position pos:line="7" pos:column="16"/></name></decl>, <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="19">p<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">len<pos:position pos:line="8" pos:column="16"/></name></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">f<pos:position pos:line="10" pos:column="15"/></name></expr>)<pos:position pos:line="10" pos:column="16"/></condition><then pos:line="10" pos:column="16">
		<block type="pseudo"><return pos:line="11" pos:column="17">return;<pos:position pos:line="11" pos:column="24"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="12" pos:column="9">s<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <call><name pos:line="12" pos:column="13">fgets<pos:position pos:line="12" pos:column="18"/></name><argument_list pos:line="12" pos:column="18">(<argument><expr><name pos:line="12" pos:column="19">buffer<pos:position pos:line="12" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="27">BUF_SIZE<pos:position pos:line="12" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="37">f<pos:position pos:line="12" pos:column="38"/></name></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">fclose<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><name pos:line="13" pos:column="16">f<pos:position pos:line="13" pos:column="17"/></name></expr></argument>)<pos:position pos:line="13" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="19"/></expr_stmt>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">!<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">s<pos:position pos:line="14" pos:column="15"/></name></expr>)<pos:position pos:line="14" pos:column="16"/></condition><then pos:line="14" pos:column="16">
		<block type="pseudo"><return pos:line="15" pos:column="17">return;<pos:position pos:line="15" pos:column="24"/></return></block></then></if>
	<while pos:line="16" pos:column="9">while <condition pos:line="16" pos:column="15">(<expr><call><name pos:line="16" pos:column="16">isspace<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><operator pos:line="16" pos:column="24">*<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="25">s<pos:position pos:line="16" pos:column="26"/></name></expr></argument>)<pos:position pos:line="16" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="28"/></condition>
		<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="17">s<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">++<pos:position pos:line="17" pos:column="20"/></operator></expr>;<pos:position pos:line="17" pos:column="21"/></expr_stmt></block></while>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><operator pos:line="18" pos:column="14">*<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">s<pos:position pos:line="18" pos:column="16"/></name></expr>)<pos:position pos:line="18" pos:column="17"/></condition><then pos:line="18" pos:column="17">
		<block type="pseudo"><return pos:line="19" pos:column="17">return;<pos:position pos:line="19" pos:column="24"/></return></block></then></if>
	<expr_stmt><expr><name><name pos:line="20" pos:column="9">remote<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">-&gt;<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="17">origin<pos:position pos:line="20" pos:column="23"/></name></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <name pos:line="20" pos:column="26">REMOTE_BRANCHES<pos:position pos:line="20" pos:column="41"/></name></expr>;<pos:position pos:line="20" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name pos:line="21" pos:column="9">p<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator> <name pos:line="21" pos:column="13">s<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">+<pos:position pos:line="21" pos:column="16"/></operator> <call><name pos:line="21" pos:column="17">strlen<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name pos:line="21" pos:column="24">s<pos:position pos:line="21" pos:column="25"/></name></expr></argument>)<pos:position pos:line="21" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>
	<while pos:line="22" pos:column="9">while <condition pos:line="22" pos:column="15">(<expr><call><name pos:line="22" pos:column="16">isspace<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><name><name pos:line="22" pos:column="24">p<pos:position pos:line="22" pos:column="25"/></name><index pos:line="22" pos:column="25">[<expr><operator pos:line="22" pos:column="26">-<pos:position pos:line="22" pos:column="27"/></operator><literal type="number" pos:line="22" pos:column="27">1<pos:position pos:line="22" pos:column="28"/></literal></expr>]<pos:position pos:line="22" pos:column="29"/></index></name></expr></argument>)<pos:position pos:line="22" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="31"/></condition>
		<block type="pseudo"><expr_stmt><expr><operator pos:line="23" pos:column="17">*<pos:position pos:line="23" pos:column="18"/></operator><operator pos:line="23" pos:column="18">--<pos:position pos:line="23" pos:column="20"/></operator><name pos:line="23" pos:column="20">p<pos:position pos:line="23" pos:column="21"/></name> <operator pos:line="23" pos:column="22">=<pos:position pos:line="23" pos:column="23"/></operator> <literal type="number" pos:line="23" pos:column="24">0<pos:position pos:line="23" pos:column="25"/></literal></expr>;<pos:position pos:line="23" pos:column="26"/></expr_stmt></block></while>
	<expr_stmt><expr><name pos:line="24" pos:column="9">len<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <name pos:line="24" pos:column="15">p<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">-<pos:position pos:line="24" pos:column="18"/></operator> <name pos:line="24" pos:column="19">s<pos:position pos:line="24" pos:column="20"/></name></expr>;<pos:position pos:line="24" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><name pos:line="25" pos:column="9">p<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <call><name pos:line="25" pos:column="13">xmalloc<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><name pos:line="25" pos:column="21">len<pos:position pos:line="25" pos:column="24"/></name> <operator pos:line="25" pos:column="25">+<pos:position pos:line="25" pos:column="26"/></operator> <literal type="number" pos:line="25" pos:column="27">1<pos:position pos:line="25" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">strcpy<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><name pos:line="26" pos:column="16">p<pos:position pos:line="26" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="19">s<pos:position pos:line="26" pos:column="20"/></name></expr></argument>)<pos:position pos:line="26" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="22"/></expr_stmt>

	<comment type="block" pos:line="28" pos:column="9">/*
	 * The branches file would have URL and optionally
	 * #branch specified.  The "master" (or specified) branch is
	 * fetched and stored in the local branch of the same name.
	 */</comment>
	<expr_stmt><expr><name pos:line="33" pos:column="9">frag<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">=<pos:position pos:line="33" pos:column="15"/></operator> <call><name pos:line="33" pos:column="16">strchr<pos:position pos:line="33" pos:column="22"/></name><argument_list pos:line="33" pos:column="22">(<argument><expr><name pos:line="33" pos:column="23">p<pos:position pos:line="33" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="33" pos:column="26">'#'<pos:position pos:line="33" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="31"/></expr_stmt>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">frag<pos:position pos:line="34" pos:column="17"/></name></expr>)<pos:position pos:line="34" pos:column="18"/></condition><then pos:line="34" pos:column="18"> <block pos:line="34" pos:column="19">{
		<expr_stmt><expr><operator pos:line="35" pos:column="17">*<pos:position pos:line="35" pos:column="18"/></operator><operator pos:line="35" pos:column="18">(<pos:position pos:line="35" pos:column="19"/></operator><name pos:line="35" pos:column="19">frag<pos:position pos:line="35" pos:column="23"/></name><operator pos:line="35" pos:column="23">++<pos:position pos:line="35" pos:column="25"/></operator><operator pos:line="35" pos:column="25">)<pos:position pos:line="35" pos:column="26"/></operator> <operator pos:line="35" pos:column="27">=<pos:position pos:line="35" pos:column="28"/></operator> <literal type="char" pos:line="35" pos:column="29">'\0'<pos:position pos:line="35" pos:column="33"/></literal></expr>;<pos:position pos:line="35" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">strbuf_addf<pos:position pos:line="36" pos:column="28"/></name><argument_list pos:line="36" pos:column="28">(<argument><expr><operator pos:line="36" pos:column="29">&amp;<pos:position pos:line="36" pos:column="34"/></operator><name pos:line="36" pos:column="30">branch<pos:position pos:line="36" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="38">"refs/heads/%s"<pos:position pos:line="36" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="55">frag<pos:position pos:line="36" pos:column="59"/></name></expr></argument>)<pos:position pos:line="36" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="61"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></then> <else pos:line="37" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="17">strbuf_addstr<pos:position pos:line="38" pos:column="30"/></name><argument_list pos:line="38" pos:column="30">(<argument><expr><operator pos:line="38" pos:column="31">&amp;<pos:position pos:line="38" pos:column="36"/></operator><name pos:line="38" pos:column="32">branch<pos:position pos:line="38" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="40">"refs/heads/master"<pos:position pos:line="38" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="61"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="40" pos:column="9">strbuf_addf<pos:position pos:line="40" pos:column="20"/></name><argument_list pos:line="40" pos:column="20">(<argument><expr><operator pos:line="40" pos:column="21">&amp;<pos:position pos:line="40" pos:column="26"/></operator><name pos:line="40" pos:column="22">branch<pos:position pos:line="40" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="30">":refs/heads/%s"<pos:position pos:line="40" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="48">remote<pos:position pos:line="40" pos:column="54"/></name><operator pos:line="40" pos:column="54">-&gt;<pos:position pos:line="40" pos:column="59"/></operator><name pos:line="40" pos:column="56">name<pos:position pos:line="40" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="62"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="41" pos:column="9">add_url_alias<pos:position pos:line="41" pos:column="22"/></name><argument_list pos:line="41" pos:column="22">(<argument><expr><name pos:line="41" pos:column="23">remote<pos:position pos:line="41" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="31">p<pos:position pos:line="41" pos:column="32"/></name></expr></argument>)<pos:position pos:line="41" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="42" pos:column="9">add_fetch_refspec<pos:position pos:line="42" pos:column="26"/></name><argument_list pos:line="42" pos:column="26">(<argument><expr><name pos:line="42" pos:column="27">remote<pos:position pos:line="42" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="42" pos:column="35">strbuf_detach<pos:position pos:line="42" pos:column="48"/></name><argument_list pos:line="42" pos:column="48">(<argument><expr><operator pos:line="42" pos:column="49">&amp;<pos:position pos:line="42" pos:column="54"/></operator><name pos:line="42" pos:column="50">branch<pos:position pos:line="42" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="58">NULL<pos:position pos:line="42" pos:column="62"/></name></expr></argument>)<pos:position pos:line="42" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="65"/></expr_stmt>
	<comment type="block" pos:line="43" pos:column="9">/*
	 * Cogito compatible push: push current HEAD to remote #branch
	 * (master if missing)
	 */</comment>
	<expr_stmt><expr><call><name pos:line="47" pos:column="9">strbuf_init<pos:position pos:line="47" pos:column="20"/></name><argument_list pos:line="47" pos:column="20">(<argument><expr><operator pos:line="47" pos:column="21">&amp;<pos:position pos:line="47" pos:column="26"/></operator><name pos:line="47" pos:column="22">branch<pos:position pos:line="47" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="30">0<pos:position pos:line="47" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="48" pos:column="9">strbuf_addstr<pos:position pos:line="48" pos:column="22"/></name><argument_list pos:line="48" pos:column="22">(<argument><expr><operator pos:line="48" pos:column="23">&amp;<pos:position pos:line="48" pos:column="28"/></operator><name pos:line="48" pos:column="24">branch<pos:position pos:line="48" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="32">"HEAD"<pos:position pos:line="48" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="40"/></expr_stmt>
	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name pos:line="49" pos:column="13">frag<pos:position pos:line="49" pos:column="17"/></name></expr>)<pos:position pos:line="49" pos:column="18"/></condition><then pos:line="49" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="17">strbuf_addf<pos:position pos:line="50" pos:column="28"/></name><argument_list pos:line="50" pos:column="28">(<argument><expr><operator pos:line="50" pos:column="29">&amp;<pos:position pos:line="50" pos:column="34"/></operator><name pos:line="50" pos:column="30">branch<pos:position pos:line="50" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="38">":refs/heads/%s"<pos:position pos:line="50" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="56">frag<pos:position pos:line="50" pos:column="60"/></name></expr></argument>)<pos:position pos:line="50" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="62"/></expr_stmt></block></then>
	<else pos:line="51" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="17">strbuf_addstr<pos:position pos:line="52" pos:column="30"/></name><argument_list pos:line="52" pos:column="30">(<argument><expr><operator pos:line="52" pos:column="31">&amp;<pos:position pos:line="52" pos:column="36"/></operator><name pos:line="52" pos:column="32">branch<pos:position pos:line="52" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="40">":refs/heads/master"<pos:position pos:line="52" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="62"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="53" pos:column="9">add_push_refspec<pos:position pos:line="53" pos:column="25"/></name><argument_list pos:line="53" pos:column="25">(<argument><expr><name pos:line="53" pos:column="26">remote<pos:position pos:line="53" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="53" pos:column="34">strbuf_detach<pos:position pos:line="53" pos:column="47"/></name><argument_list pos:line="53" pos:column="47">(<argument><expr><operator pos:line="53" pos:column="48">&amp;<pos:position pos:line="53" pos:column="53"/></operator><name pos:line="53" pos:column="49">branch<pos:position pos:line="53" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="57">NULL<pos:position pos:line="53" pos:column="61"/></name></expr></argument>)<pos:position pos:line="53" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="53" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="64"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="54" pos:column="9">remote<pos:position pos:line="54" pos:column="15"/></name><operator pos:line="54" pos:column="15">-&gt;<pos:position pos:line="54" pos:column="20"/></operator><name pos:line="54" pos:column="17">fetch_tags<pos:position pos:line="54" pos:column="27"/></name></name> <operator pos:line="54" pos:column="28">=<pos:position pos:line="54" pos:column="29"/></operator> <literal type="number" pos:line="54" pos:column="30">1<pos:position pos:line="54" pos:column="31"/></literal></expr>;<pos:position pos:line="54" pos:column="32"/></expr_stmt> <comment type="block" pos:line="54" pos:column="33">/* always auto-follow */</comment>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
