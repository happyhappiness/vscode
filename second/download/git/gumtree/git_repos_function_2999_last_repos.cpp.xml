<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2999_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">rollback_is_safe<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">void<pos:position pos:line="1" pos:column="33"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">sb<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><name pos:line="3" pos:column="28">STRBUF_INIT<pos:position pos:line="3" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">object_id<pos:position pos:line="4" pos:column="25"/></name></name></type> <name pos:line="4" pos:column="26">expected_head<pos:position pos:line="4" pos:column="39"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="41">actual_head<pos:position pos:line="4" pos:column="52"/></name></decl>;<pos:position pos:line="4" pos:column="53"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">strbuf_read_file<pos:position pos:line="6" pos:column="29"/></name><argument_list pos:line="6" pos:column="29">(<argument><expr><operator pos:line="6" pos:column="30">&amp;<pos:position pos:line="6" pos:column="35"/></operator><name pos:line="6" pos:column="31">sb<pos:position pos:line="6" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="35">git_path_abort_safety_file<pos:position pos:line="6" pos:column="61"/></name><argument_list pos:line="6" pos:column="61">()<pos:position pos:line="6" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="65">0<pos:position pos:line="6" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="67"/></argument_list></call> <operator pos:line="6" pos:column="68">&gt;=<pos:position pos:line="6" pos:column="73"/></operator> <literal type="number" pos:line="6" pos:column="71">0<pos:position pos:line="6" pos:column="72"/></literal></expr>)<pos:position pos:line="6" pos:column="73"/></condition><then pos:line="6" pos:column="73"> <block pos:line="6" pos:column="74">{
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">strbuf_trim<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><operator pos:line="7" pos:column="29">&amp;<pos:position pos:line="7" pos:column="34"/></operator><name pos:line="7" pos:column="30">sb<pos:position pos:line="7" pos:column="32"/></name></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="34"/></expr_stmt>
		<if pos:line="8" pos:column="17">if <condition pos:line="8" pos:column="20">(<expr><call><name pos:line="8" pos:column="21">get_oid_hex<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">(<argument><expr><name><name pos:line="8" pos:column="33">sb<pos:position pos:line="8" pos:column="35"/></name><operator pos:line="8" pos:column="35">.<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="36">buf<pos:position pos:line="8" pos:column="39"/></name></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="41">&amp;<pos:position pos:line="8" pos:column="46"/></operator><name pos:line="8" pos:column="42">expected_head<pos:position pos:line="8" pos:column="55"/></name></expr></argument>)<pos:position pos:line="8" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="57"/></condition><then pos:line="8" pos:column="57"> <block pos:line="8" pos:column="58">{
			<expr_stmt><expr><call><name pos:line="9" pos:column="25">strbuf_release<pos:position pos:line="9" pos:column="39"/></name><argument_list pos:line="9" pos:column="39">(<argument><expr><operator pos:line="9" pos:column="40">&amp;<pos:position pos:line="9" pos:column="45"/></operator><name pos:line="9" pos:column="41">sb<pos:position pos:line="9" pos:column="43"/></name></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="10" pos:column="25">die<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><call><name pos:line="10" pos:column="29">_<pos:position pos:line="10" pos:column="30"/></name><argument_list pos:line="10" pos:column="30">(<argument><expr><literal type="string" pos:line="10" pos:column="31">"could not parse %s"<pos:position pos:line="10" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="54">git_path_abort_safety_file<pos:position pos:line="10" pos:column="80"/></name><argument_list pos:line="10" pos:column="80">()<pos:position pos:line="10" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="84"/></expr_stmt>
		}<pos:position pos:line="11" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">strbuf_release<pos:position pos:line="12" pos:column="31"/></name><argument_list pos:line="12" pos:column="31">(<argument><expr><operator pos:line="12" pos:column="32">&amp;<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="33">sb<pos:position pos:line="12" pos:column="35"/></name></expr></argument>)<pos:position pos:line="12" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then>
	<elseif pos:line="14" pos:column="9">else <if pos:line="14" pos:column="14">if <condition pos:line="14" pos:column="17">(<expr><name pos:line="14" pos:column="18">errno<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">==<pos:position pos:line="14" pos:column="26"/></operator> <name pos:line="14" pos:column="27">ENOENT<pos:position pos:line="14" pos:column="33"/></name></expr>)<pos:position pos:line="14" pos:column="34"/></condition><then pos:line="14" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="17">oidclr<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><operator pos:line="15" pos:column="24">&amp;<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="25">expected_head<pos:position pos:line="15" pos:column="38"/></name></expr></argument>)<pos:position pos:line="15" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="40"/></expr_stmt></block></then></if></elseif>
	<else pos:line="16" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="17">die_errno<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><call><name pos:line="17" pos:column="27">_<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><literal type="string" pos:line="17" pos:column="29">"could not read '%s'"<pos:position pos:line="17" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="53">git_path_abort_safety_file<pos:position pos:line="17" pos:column="79"/></name><argument_list pos:line="17" pos:column="79">()<pos:position pos:line="17" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="83"/></expr_stmt></block></else></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><call><name pos:line="19" pos:column="13">get_oid<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">(<argument><expr><literal type="string" pos:line="19" pos:column="21">"HEAD"<pos:position pos:line="19" pos:column="27"/></literal></expr></argument>, <argument><expr><operator pos:line="19" pos:column="29">&amp;<pos:position pos:line="19" pos:column="34"/></operator><name pos:line="19" pos:column="30">actual_head<pos:position pos:line="19" pos:column="41"/></name></expr></argument>)<pos:position pos:line="19" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="43"/></condition><then pos:line="19" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="17">oidclr<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><operator pos:line="20" pos:column="24">&amp;<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="25">actual_head<pos:position pos:line="20" pos:column="36"/></name></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt></block></then></if>

	<return pos:line="22" pos:column="9">return <expr><operator pos:line="22" pos:column="16">!<pos:position pos:line="22" pos:column="17"/></operator><call><name pos:line="22" pos:column="17">oidcmp<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><operator pos:line="22" pos:column="24">&amp;<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="25">actual_head<pos:position pos:line="22" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="38">&amp;<pos:position pos:line="22" pos:column="43"/></operator><name pos:line="22" pos:column="39">expected_head<pos:position pos:line="22" pos:column="52"/></name></expr></argument>)<pos:position pos:line="22" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="54"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
