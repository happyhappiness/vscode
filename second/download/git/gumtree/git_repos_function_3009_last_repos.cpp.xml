<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3009_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">do_exec<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><specifier pos:line="1" pos:column="20">const<pos:position pos:line="1" pos:column="25"/></specifier> <name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">command_line<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name><name pos:line="3" pos:column="21">child_argv<pos:position pos:line="3" pos:column="31"/></name><index pos:line="3" pos:column="31">[]<pos:position pos:line="3" pos:column="33"/></index></name> <init pos:line="3" pos:column="34">= <expr><block pos:line="3" pos:column="36">{ <expr><name pos:line="3" pos:column="38">NULL<pos:position pos:line="3" pos:column="42"/></name></expr>, <expr><name pos:line="3" pos:column="44">NULL<pos:position pos:line="3" pos:column="48"/></name></expr> }<pos:position pos:line="3" pos:column="50"/></block></expr></init></decl>;<pos:position pos:line="3" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">dirty<pos:position pos:line="4" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="20">status<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="6" pos:column="9">fprintf<pos:position pos:line="6" pos:column="16"/></name><argument_list pos:line="6" pos:column="16">(<argument><expr><name pos:line="6" pos:column="17">stderr<pos:position pos:line="6" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="25">"Executing: %s\n"<pos:position pos:line="6" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="44">command_line<pos:position pos:line="6" pos:column="56"/></name></expr></argument>)<pos:position pos:line="6" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="7" pos:column="9">child_argv<pos:position pos:line="7" pos:column="19"/></name><index pos:line="7" pos:column="19">[<expr><literal type="number" pos:line="7" pos:column="20">0<pos:position pos:line="7" pos:column="21"/></literal></expr>]<pos:position pos:line="7" pos:column="22"/></index></name> <operator pos:line="7" pos:column="23">=<pos:position pos:line="7" pos:column="24"/></operator> <name pos:line="7" pos:column="25">command_line<pos:position pos:line="7" pos:column="37"/></name></expr>;<pos:position pos:line="7" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name pos:line="8" pos:column="9">status<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">=<pos:position pos:line="8" pos:column="17"/></operator> <call><name pos:line="8" pos:column="18">run_command_v_opt<pos:position pos:line="8" pos:column="35"/></name><argument_list pos:line="8" pos:column="35">(<argument><expr><name pos:line="8" pos:column="36">child_argv<pos:position pos:line="8" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="48">RUN_USING_SHELL<pos:position pos:line="8" pos:column="63"/></name></expr></argument>)<pos:position pos:line="8" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="65"/></expr_stmt>

	<comment type="block" pos:line="10" pos:column="9">/* force re-reading of the cache */</comment>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">discard_cache<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">()<pos:position pos:line="11" pos:column="28"/></argument_list></call> <operator pos:line="11" pos:column="29">&lt;<pos:position pos:line="11" pos:column="33"/></operator> <literal type="number" pos:line="11" pos:column="31">0<pos:position pos:line="11" pos:column="32"/></literal> <operator pos:line="11" pos:column="33">||<pos:position pos:line="11" pos:column="35"/></operator> <call><name pos:line="11" pos:column="36">read_cache<pos:position pos:line="11" pos:column="46"/></name><argument_list pos:line="11" pos:column="46">()<pos:position pos:line="11" pos:column="48"/></argument_list></call> <operator pos:line="11" pos:column="49">&lt;<pos:position pos:line="11" pos:column="53"/></operator> <literal type="number" pos:line="11" pos:column="51">0<pos:position pos:line="11" pos:column="52"/></literal></expr>)<pos:position pos:line="11" pos:column="53"/></condition><then pos:line="11" pos:column="53">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><call><name pos:line="12" pos:column="24">error<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><call><name pos:line="12" pos:column="30">_<pos:position pos:line="12" pos:column="31"/></name><argument_list pos:line="12" pos:column="31">(<argument><expr><literal type="string" pos:line="12" pos:column="32">"could not read index"<pos:position pos:line="12" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="57"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="14" pos:column="9">dirty<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <call><name pos:line="14" pos:column="17">require_clean_work_tree<pos:position pos:line="14" pos:column="40"/></name><argument_list pos:line="14" pos:column="40">(<argument><expr><literal type="string" pos:line="14" pos:column="41">"rebase"<pos:position pos:line="14" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="51">NULL<pos:position pos:line="14" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="57">1<pos:position pos:line="14" pos:column="58"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="60">1<pos:position pos:line="14" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="63"/></expr_stmt>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">status<pos:position pos:line="16" pos:column="19"/></name></expr>)<pos:position pos:line="16" pos:column="20"/></condition><then pos:line="16" pos:column="20"> <block pos:line="16" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">warning<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><call><name pos:line="17" pos:column="25">_<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><literal type="string" pos:line="17" pos:column="27">"execution failed: %s\n%s"<pos:position pos:line="17" pos:column="53"/></literal>
			  <literal type="string" pos:line="18" pos:column="27">"You can fix the problem, and then run\n"<pos:position pos:line="18" pos:column="68"/></literal>
			  <literal type="string" pos:line="19" pos:column="27">"\n"<pos:position pos:line="19" pos:column="31"/></literal>
			  <literal type="string" pos:line="20" pos:column="27">"  git rebase --continue\n"<pos:position pos:line="20" pos:column="54"/></literal>
			  <literal type="string" pos:line="21" pos:column="27">"\n"<pos:position pos:line="21" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="22" pos:column="25">command_line<pos:position pos:line="22" pos:column="37"/></name></expr></argument>,
			<argument><expr><ternary><condition><expr><name pos:line="23" pos:column="25">dirty<pos:position pos:line="23" pos:column="30"/></name></expr> ?<pos:position pos:line="23" pos:column="32"/></condition><then pos:line="23" pos:column="32"> <expr><call><name pos:line="23" pos:column="33">N_<pos:position pos:line="23" pos:column="35"/></name><argument_list pos:line="23" pos:column="35">(<argument><expr><literal type="string" pos:line="23" pos:column="36">"and made changes to the index and/or the "<pos:position pos:line="23" pos:column="79"/></literal>
				<literal type="string" pos:line="24" pos:column="33">"working tree\n"<pos:position pos:line="24" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="50"/></argument_list></call></expr> <pos:position pos:line="24" pos:column="51"/></then><else pos:line="24" pos:column="51">: <expr><literal type="string" pos:line="24" pos:column="53">""<pos:position pos:line="24" pos:column="55"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="24" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="57"/></expr_stmt>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><name pos:line="25" pos:column="21">status<pos:position pos:line="25" pos:column="27"/></name> <operator pos:line="25" pos:column="28">==<pos:position pos:line="25" pos:column="30"/></operator> <literal type="number" pos:line="25" pos:column="31">127<pos:position pos:line="25" pos:column="34"/></literal></expr>)<pos:position pos:line="25" pos:column="35"/></condition><then pos:line="25" pos:column="35">
			<comment type="block" pos:line="26" pos:column="25">/* command not found */</comment>
			<block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="25">status<pos:position pos:line="27" pos:column="31"/></name> <operator pos:line="27" pos:column="32">=<pos:position pos:line="27" pos:column="33"/></operator> <literal type="number" pos:line="27" pos:column="34">1<pos:position pos:line="27" pos:column="35"/></literal></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt></block></then></if>
	}<pos:position pos:line="28" pos:column="10"/></block></then> <elseif pos:line="28" pos:column="11">else <if pos:line="28" pos:column="16">if <condition pos:line="28" pos:column="19">(<expr><name pos:line="28" pos:column="20">dirty<pos:position pos:line="28" pos:column="25"/></name></expr>)<pos:position pos:line="28" pos:column="26"/></condition><then pos:line="28" pos:column="26"> <block pos:line="28" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">warning<pos:position pos:line="29" pos:column="24"/></name><argument_list pos:line="29" pos:column="24">(<argument><expr><call><name pos:line="29" pos:column="25">_<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><literal type="string" pos:line="29" pos:column="27">"execution succeeded: %s\nbut "<pos:position pos:line="29" pos:column="58"/></literal>
			  <literal type="string" pos:line="30" pos:column="27">"left changes to the index and/or the working tree\n"<pos:position pos:line="30" pos:column="80"/></literal>
			  <literal type="string" pos:line="31" pos:column="27">"Commit or stash your changes, and then run\n"<pos:position pos:line="31" pos:column="73"/></literal>
			  <literal type="string" pos:line="32" pos:column="27">"\n"<pos:position pos:line="32" pos:column="31"/></literal>
			  <literal type="string" pos:line="33" pos:column="27">"  git rebase --continue\n"<pos:position pos:line="33" pos:column="54"/></literal>
			  <literal type="string" pos:line="34" pos:column="27">"\n"<pos:position pos:line="34" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="34" pos:column="34">command_line<pos:position pos:line="34" pos:column="46"/></name></expr></argument>)<pos:position pos:line="34" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name pos:line="35" pos:column="17">status<pos:position pos:line="35" pos:column="23"/></name> <operator pos:line="35" pos:column="24">=<pos:position pos:line="35" pos:column="25"/></operator> <literal type="number" pos:line="35" pos:column="26">1<pos:position pos:line="35" pos:column="27"/></literal></expr>;<pos:position pos:line="35" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if></elseif></if>

	<return pos:line="38" pos:column="9">return <expr><name pos:line="38" pos:column="16">status<pos:position pos:line="38" pos:column="22"/></name></expr>;<pos:position pos:line="38" pos:column="23"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
