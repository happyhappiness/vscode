<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3600_git-2.1.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">write_buf_to_worktree<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">unsigned<pos:position pos:line="1" pos:column="49"/></name> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">obj<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,
				  <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">buf<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">unsigned<pos:position pos:line="2" pos:column="60"/></name> <name pos:line="2" pos:column="61">long<pos:position pos:line="2" pos:column="65"/></name></type> <name pos:line="2" pos:column="66">size<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">fd<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">path<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><call><name pos:line="5" pos:column="22">git_path<pos:position pos:line="5" pos:column="30"/></name><argument_list pos:line="5" pos:column="30">(<argument><expr><name pos:line="5" pos:column="31">NOTES_MERGE_WORKTREE<pos:position pos:line="5" pos:column="51"/></name> <literal type="string" pos:line="5" pos:column="52">"/%s"<pos:position pos:line="5" pos:column="57"/></literal></expr></argument>, <argument><expr><call><name pos:line="5" pos:column="59">sha1_to_hex<pos:position pos:line="5" pos:column="70"/></name><argument_list pos:line="5" pos:column="70">(<argument><expr><name pos:line="5" pos:column="71">obj<pos:position pos:line="5" pos:column="74"/></name></expr></argument>)<pos:position pos:line="5" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="77"/></decl_stmt>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">safe_create_leading_directories<pos:position pos:line="6" pos:column="44"/></name><argument_list pos:line="6" pos:column="44">(<argument><expr><name pos:line="6" pos:column="45">path<pos:position pos:line="6" pos:column="49"/></name></expr></argument>)<pos:position pos:line="6" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="51"/></condition><then pos:line="6" pos:column="51">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">die_errno<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><literal type="string" pos:line="7" pos:column="27">"unable to create directory for '%s'"<pos:position pos:line="7" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="66">path<pos:position pos:line="7" pos:column="70"/></name></expr></argument>)<pos:position pos:line="7" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="72"/></expr_stmt></block></then></if>
	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><call><name pos:line="8" pos:column="13">file_exists<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">path<pos:position pos:line="8" pos:column="29"/></name></expr></argument>)<pos:position pos:line="8" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="31"/></condition><then pos:line="8" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="17">die<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><literal type="string" pos:line="9" pos:column="21">"found existing file at '%s'"<pos:position pos:line="9" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="52">path<pos:position pos:line="9" pos:column="56"/></name></expr></argument>)<pos:position pos:line="9" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="58"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="11" pos:column="9">fd<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <call><name pos:line="11" pos:column="14">open<pos:position pos:line="11" pos:column="18"/></name><argument_list pos:line="11" pos:column="18">(<argument><expr><name pos:line="11" pos:column="19">path<pos:position pos:line="11" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="25">O_WRONLY<pos:position pos:line="11" pos:column="33"/></name> <operator pos:line="11" pos:column="34">|<pos:position pos:line="11" pos:column="35"/></operator> <name pos:line="11" pos:column="36">O_TRUNC<pos:position pos:line="11" pos:column="43"/></name> <operator pos:line="11" pos:column="44">|<pos:position pos:line="11" pos:column="45"/></operator> <name pos:line="11" pos:column="46">O_CREAT<pos:position pos:line="11" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="55">0666<pos:position pos:line="11" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="61"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">fd<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">&lt;<pos:position pos:line="12" pos:column="20"/></operator> <literal type="number" pos:line="12" pos:column="18">0<pos:position pos:line="12" pos:column="19"/></literal></expr>)<pos:position pos:line="12" pos:column="20"/></condition><then pos:line="12" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="17">die_errno<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">(<argument><expr><literal type="string" pos:line="13" pos:column="27">"failed to open '%s'"<pos:position pos:line="13" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="50">path<pos:position pos:line="13" pos:column="54"/></name></expr></argument>)<pos:position pos:line="13" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="56"/></expr_stmt></block></then></if>

	<while pos:line="15" pos:column="9">while <condition pos:line="15" pos:column="15">(<expr><name pos:line="15" pos:column="16">size<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">&gt;<pos:position pos:line="15" pos:column="25"/></operator> <literal type="number" pos:line="15" pos:column="23">0<pos:position pos:line="15" pos:column="24"/></literal></expr>)<pos:position pos:line="15" pos:column="25"/></condition> <block pos:line="15" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="16" pos:column="17">long<pos:position pos:line="16" pos:column="21"/></name></type> <name pos:line="16" pos:column="22">ret<pos:position pos:line="16" pos:column="25"/></name> <init pos:line="16" pos:column="26">= <expr><call><name pos:line="16" pos:column="28">write_in_full<pos:position pos:line="16" pos:column="41"/></name><argument_list pos:line="16" pos:column="41">(<argument><expr><name pos:line="16" pos:column="42">fd<pos:position pos:line="16" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="46">buf<pos:position pos:line="16" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="51">size<pos:position pos:line="16" pos:column="55"/></name></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="57"/></decl_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">ret<pos:position pos:line="17" pos:column="24"/></name> <operator pos:line="17" pos:column="25">&lt;<pos:position pos:line="17" pos:column="29"/></operator> <literal type="number" pos:line="17" pos:column="27">0<pos:position pos:line="17" pos:column="28"/></literal></expr>)<pos:position pos:line="17" pos:column="29"/></condition><then pos:line="17" pos:column="29"> <block pos:line="17" pos:column="30">{
			<comment type="block" pos:line="18" pos:column="25">/* Ignore epipe */</comment>
			<if pos:line="19" pos:column="25">if <condition pos:line="19" pos:column="28">(<expr><name pos:line="19" pos:column="29">errno<pos:position pos:line="19" pos:column="34"/></name> <operator pos:line="19" pos:column="35">==<pos:position pos:line="19" pos:column="37"/></operator> <name pos:line="19" pos:column="38">EPIPE<pos:position pos:line="19" pos:column="43"/></name></expr>)<pos:position pos:line="19" pos:column="44"/></condition><then pos:line="19" pos:column="44">
				<block type="pseudo"><break pos:line="20" pos:column="33">break;<pos:position pos:line="20" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">die_errno<pos:position pos:line="21" pos:column="34"/></name><argument_list pos:line="21" pos:column="34">(<argument><expr><literal type="string" pos:line="21" pos:column="35">"notes-merge"<pos:position pos:line="21" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="50"/></expr_stmt>
		}<pos:position pos:line="22" pos:column="18"/></block></then> <elseif pos:line="22" pos:column="19">else <if pos:line="22" pos:column="24">if <condition pos:line="22" pos:column="27">(<expr><operator pos:line="22" pos:column="28">!<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="29">ret<pos:position pos:line="22" pos:column="32"/></name></expr>)<pos:position pos:line="22" pos:column="33"/></condition><then pos:line="22" pos:column="33"> <block pos:line="22" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="23" pos:column="25">die<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><literal type="string" pos:line="23" pos:column="29">"notes-merge: disk full?"<pos:position pos:line="23" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="56"/></expr_stmt>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if></elseif></if>
		<expr_stmt><expr><name pos:line="25" pos:column="17">size<pos:position pos:line="25" pos:column="21"/></name> <operator pos:line="25" pos:column="22">-=<pos:position pos:line="25" pos:column="24"/></operator> <name pos:line="25" pos:column="25">ret<pos:position pos:line="25" pos:column="28"/></name></expr>;<pos:position pos:line="25" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="26" pos:column="17">buf<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">+=<pos:position pos:line="26" pos:column="23"/></operator> <name pos:line="26" pos:column="24">ret<pos:position pos:line="26" pos:column="27"/></name></expr>;<pos:position pos:line="26" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="27" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="29" pos:column="9">close<pos:position pos:line="29" pos:column="14"/></name><argument_list pos:line="29" pos:column="14">(<argument><expr><name pos:line="29" pos:column="15">fd<pos:position pos:line="29" pos:column="17"/></name></expr></argument>)<pos:position pos:line="29" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="19"/></expr_stmt>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
