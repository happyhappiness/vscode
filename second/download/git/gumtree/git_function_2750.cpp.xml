<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2750.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">print_tok_val<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">tok<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">val<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name pos:line="3" pos:column="14">c<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><call><name pos:line="3" pos:column="18">last_non_space_char<pos:position pos:line="3" pos:column="37"/></name><argument_list pos:line="3" pos:column="37">(<argument><expr><name pos:line="3" pos:column="38">tok<pos:position pos:line="3" pos:column="41"/></name></expr></argument>)<pos:position pos:line="3" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><operator pos:line="4" pos:column="13">!<pos:position pos:line="4" pos:column="14"/></operator><name pos:line="4" pos:column="14">c<pos:position pos:line="4" pos:column="15"/></name></expr>)<pos:position pos:line="4" pos:column="16"/></condition><then pos:line="4" pos:column="16">
		<block type="pseudo"><return pos:line="5" pos:column="17">return;<pos:position pos:line="5" pos:column="24"/></return></block></then></if>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name pos:line="6" pos:column="13">strchr<pos:position pos:line="6" pos:column="19"/></name><argument_list pos:line="6" pos:column="19">(<argument><expr><name pos:line="6" pos:column="20">separators<pos:position pos:line="6" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="32">c<pos:position pos:line="6" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="35"/></condition><then pos:line="6" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">printf<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">(<argument><expr><literal type="string" pos:line="7" pos:column="24">"%s%s\n"<pos:position pos:line="7" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="34">tok<pos:position pos:line="7" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="39">val<pos:position pos:line="7" pos:column="42"/></name></expr></argument>)<pos:position pos:line="7" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="44"/></expr_stmt></block></then>
	<else pos:line="8" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="17">printf<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><literal type="string" pos:line="9" pos:column="24">"%s%c %s\n"<pos:position pos:line="9" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="37">tok<pos:position pos:line="9" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="42">separators<pos:position pos:line="9" pos:column="52"/></name><index pos:line="9" pos:column="52">[<expr><literal type="number" pos:line="9" pos:column="53">0<pos:position pos:line="9" pos:column="54"/></literal></expr>]<pos:position pos:line="9" pos:column="55"/></index></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="57">val<pos:position pos:line="9" pos:column="60"/></name></expr></argument>)<pos:position pos:line="9" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="62"/></expr_stmt></block></else></if>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
