<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3527_git-2.9.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_cmd_result<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">imap_store<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">ctx<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="51">struct<pos:position pos:line="1" pos:column="57"/></name> <name pos:line="1" pos:column="58">imap_cmd<pos:position pos:line="1" pos:column="66"/></name></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">tcmd<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">imap<pos:position pos:line="3" pos:column="20"/></name></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">imap<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><name><name pos:line="3" pos:column="29">ctx<pos:position pos:line="3" pos:column="32"/></name><operator pos:line="3" pos:column="32">-&gt;<pos:position pos:line="3" pos:column="37"/></operator><name pos:line="3" pos:column="34">imap<pos:position pos:line="3" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">imap_cmd<pos:position pos:line="4" pos:column="24"/></name></name> <modifier pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></modifier></type><name pos:line="4" pos:column="26">cmdp<pos:position pos:line="4" pos:column="30"/></name></decl>, <modifier pos:line="4" pos:column="32">*<pos:position pos:line="4" pos:column="33"/></modifier><modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="34">pcmdp<pos:position pos:line="4" pos:column="39"/></name></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">cmd<pos:position pos:line="5" pos:column="18"/></name></decl>, <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="21">arg<pos:position pos:line="5" pos:column="24"/></name></decl>, <modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="27">arg1<pos:position pos:line="5" pos:column="31"/></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">n<pos:position pos:line="6" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="16">resp<pos:position pos:line="6" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="22">resp2<pos:position pos:line="6" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="29">tag<pos:position pos:line="6" pos:column="32"/></name></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>

	<for pos:line="8" pos:column="9">for <control pos:line="8" pos:column="13">(<init pos:line="8" pos:column="14">;<pos:position pos:line="8" pos:column="15"/></init><condition pos:line="8" pos:column="15">;<pos:position pos:line="8" pos:column="16"/></condition><incr/>)<pos:position pos:line="8" pos:column="17"/></control> <block pos:line="8" pos:column="18">{
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><call><name pos:line="9" pos:column="21">buffer_gets<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">(<argument><expr><operator pos:line="9" pos:column="33">&amp;<pos:position pos:line="9" pos:column="38"/></operator><name><name pos:line="9" pos:column="34">imap<pos:position pos:line="9" pos:column="38"/></name><operator pos:line="9" pos:column="38">-&gt;<pos:position pos:line="9" pos:column="43"/></operator><name pos:line="9" pos:column="40">buf<pos:position pos:line="9" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="45">&amp;<pos:position pos:line="9" pos:column="50"/></operator><name pos:line="9" pos:column="46">cmd<pos:position pos:line="9" pos:column="49"/></name></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="51"/></condition><then pos:line="9" pos:column="51">
			<block type="pseudo"><return pos:line="10" pos:column="25">return <expr><name pos:line="10" pos:column="32">RESP_BAD<pos:position pos:line="10" pos:column="40"/></name></expr>;<pos:position pos:line="10" pos:column="41"/></return></block></then></if>

		<expr_stmt><expr><name pos:line="12" pos:column="17">arg<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">=<pos:position pos:line="12" pos:column="22"/></operator> <call><name pos:line="12" pos:column="23">next_arg<pos:position pos:line="12" pos:column="31"/></name><argument_list pos:line="12" pos:column="31">(<argument><expr><operator pos:line="12" pos:column="32">&amp;<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="33">cmd<pos:position pos:line="12" pos:column="36"/></name></expr></argument>)<pos:position pos:line="12" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">*<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">arg<pos:position pos:line="13" pos:column="25"/></name> <operator pos:line="13" pos:column="26">==<pos:position pos:line="13" pos:column="28"/></operator> <literal type="char" pos:line="13" pos:column="29">'*'<pos:position pos:line="13" pos:column="32"/></literal></expr>)<pos:position pos:line="13" pos:column="33"/></condition><then pos:line="13" pos:column="33"> <block pos:line="13" pos:column="34">{
			<expr_stmt><expr><name pos:line="14" pos:column="25">arg<pos:position pos:line="14" pos:column="28"/></name> <operator pos:line="14" pos:column="29">=<pos:position pos:line="14" pos:column="30"/></operator> <call><name pos:line="14" pos:column="31">next_arg<pos:position pos:line="14" pos:column="39"/></name><argument_list pos:line="14" pos:column="39">(<argument><expr><operator pos:line="14" pos:column="40">&amp;<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="41">cmd<pos:position pos:line="14" pos:column="44"/></name></expr></argument>)<pos:position pos:line="14" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="46"/></expr_stmt>
			<if pos:line="15" pos:column="25">if <condition pos:line="15" pos:column="28">(<expr><operator pos:line="15" pos:column="29">!<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="30">arg<pos:position pos:line="15" pos:column="33"/></name></expr>)<pos:position pos:line="15" pos:column="34"/></condition><then pos:line="15" pos:column="34"> <block pos:line="15" pos:column="35">{
				<expr_stmt><expr><call><name pos:line="16" pos:column="33">fprintf<pos:position pos:line="16" pos:column="40"/></name><argument_list pos:line="16" pos:column="40">(<argument><expr><name pos:line="16" pos:column="41">stderr<pos:position pos:line="16" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="49">"IMAP error: unable to parse untagged response\n"<pos:position pos:line="16" pos:column="98"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="100"/></expr_stmt>
				<return pos:line="17" pos:column="33">return <expr><name pos:line="17" pos:column="40">RESP_BAD<pos:position pos:line="17" pos:column="48"/></name></expr>;<pos:position pos:line="17" pos:column="49"/></return>
			}<pos:position pos:line="18" pos:column="26"/></block></then></if>

			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><operator pos:line="20" pos:column="29">!<pos:position pos:line="20" pos:column="30"/></operator><call><name pos:line="20" pos:column="30">strcmp<pos:position pos:line="20" pos:column="36"/></name><argument_list pos:line="20" pos:column="36">(<argument><expr><literal type="string" pos:line="20" pos:column="37">"NAMESPACE"<pos:position pos:line="20" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="50">arg<pos:position pos:line="20" pos:column="53"/></name></expr></argument>)<pos:position pos:line="20" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="55"/></condition><then pos:line="20" pos:column="55"> <block pos:line="20" pos:column="56">{
				<comment type="block" pos:line="21" pos:column="33">/* rfc2342 NAMESPACE response. */</comment>
				<expr_stmt><expr><call><name pos:line="22" pos:column="33">skip_list<pos:position pos:line="22" pos:column="42"/></name><argument_list pos:line="22" pos:column="42">(<argument><expr><operator pos:line="22" pos:column="43">&amp;<pos:position pos:line="22" pos:column="48"/></operator><name pos:line="22" pos:column="44">cmd<pos:position pos:line="22" pos:column="47"/></name></expr></argument>)<pos:position pos:line="22" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="49"/></expr_stmt> <comment type="block" pos:line="22" pos:column="50">/* Personal mailboxes */</comment>
				<expr_stmt><expr><call><name pos:line="23" pos:column="33">skip_list<pos:position pos:line="23" pos:column="42"/></name><argument_list pos:line="23" pos:column="42">(<argument><expr><operator pos:line="23" pos:column="43">&amp;<pos:position pos:line="23" pos:column="48"/></operator><name pos:line="23" pos:column="44">cmd<pos:position pos:line="23" pos:column="47"/></name></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="49"/></expr_stmt> <comment type="block" pos:line="23" pos:column="50">/* Others' mailboxes */</comment>
				<expr_stmt><expr><call><name pos:line="24" pos:column="33">skip_list<pos:position pos:line="24" pos:column="42"/></name><argument_list pos:line="24" pos:column="42">(<argument><expr><operator pos:line="24" pos:column="43">&amp;<pos:position pos:line="24" pos:column="48"/></operator><name pos:line="24" pos:column="44">cmd<pos:position pos:line="24" pos:column="47"/></name></expr></argument>)<pos:position pos:line="24" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="49"/></expr_stmt> <comment type="block" pos:line="24" pos:column="50">/* Shared mailboxes */</comment>
			}<pos:position pos:line="25" pos:column="26"/></block></then> <elseif pos:line="25" pos:column="27">else <if pos:line="25" pos:column="32">if <condition pos:line="25" pos:column="35">(<expr><operator pos:line="25" pos:column="36">!<pos:position pos:line="25" pos:column="37"/></operator><call><name pos:line="25" pos:column="37">strcmp<pos:position pos:line="25" pos:column="43"/></name><argument_list pos:line="25" pos:column="43">(<argument><expr><literal type="string" pos:line="25" pos:column="44">"OK"<pos:position pos:line="25" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="50">arg<pos:position pos:line="25" pos:column="53"/></name></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call> <operator pos:line="25" pos:column="55">||<pos:position pos:line="25" pos:column="57"/></operator> <operator pos:line="25" pos:column="58">!<pos:position pos:line="25" pos:column="59"/></operator><call><name pos:line="25" pos:column="59">strcmp<pos:position pos:line="25" pos:column="65"/></name><argument_list pos:line="25" pos:column="65">(<argument><expr><literal type="string" pos:line="25" pos:column="66">"BAD"<pos:position pos:line="25" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="73">arg<pos:position pos:line="25" pos:column="76"/></name></expr></argument>)<pos:position pos:line="25" pos:column="77"/></argument_list></call> <operator pos:line="25" pos:column="78">||<pos:position pos:line="25" pos:column="80"/></operator>
				   <operator pos:line="26" pos:column="36">!<pos:position pos:line="26" pos:column="37"/></operator><call><name pos:line="26" pos:column="37">strcmp<pos:position pos:line="26" pos:column="43"/></name><argument_list pos:line="26" pos:column="43">(<argument><expr><literal type="string" pos:line="26" pos:column="44">"NO"<pos:position pos:line="26" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="50">arg<pos:position pos:line="26" pos:column="53"/></name></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></call> <operator pos:line="26" pos:column="55">||<pos:position pos:line="26" pos:column="57"/></operator> <operator pos:line="26" pos:column="58">!<pos:position pos:line="26" pos:column="59"/></operator><call><name pos:line="26" pos:column="59">strcmp<pos:position pos:line="26" pos:column="65"/></name><argument_list pos:line="26" pos:column="65">(<argument><expr><literal type="string" pos:line="26" pos:column="66">"BYE"<pos:position pos:line="26" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="73">arg<pos:position pos:line="26" pos:column="76"/></name></expr></argument>)<pos:position pos:line="26" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="78"/></condition><then pos:line="26" pos:column="78"> <block pos:line="26" pos:column="79">{
				<if pos:line="27" pos:column="33">if <condition pos:line="27" pos:column="36">(<expr><operator pos:line="27" pos:column="37">(<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="38">resp<pos:position pos:line="27" pos:column="42"/></name> <operator pos:line="27" pos:column="43">=<pos:position pos:line="27" pos:column="44"/></operator> <call><name pos:line="27" pos:column="45">parse_response_code<pos:position pos:line="27" pos:column="64"/></name><argument_list pos:line="27" pos:column="64">(<argument><expr><name pos:line="27" pos:column="65">ctx<pos:position pos:line="27" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="70">NULL<pos:position pos:line="27" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="76">cmd<pos:position pos:line="27" pos:column="79"/></name></expr></argument>)<pos:position pos:line="27" pos:column="80"/></argument_list></call><operator pos:line="27" pos:column="80">)<pos:position pos:line="27" pos:column="81"/></operator> <operator pos:line="27" pos:column="82">!=<pos:position pos:line="27" pos:column="84"/></operator> <name pos:line="27" pos:column="85">RESP_OK<pos:position pos:line="27" pos:column="92"/></name></expr>)<pos:position pos:line="27" pos:column="93"/></condition><then pos:line="27" pos:column="93">
					<block type="pseudo"><return pos:line="28" pos:column="41">return <expr><name pos:line="28" pos:column="48">resp<pos:position pos:line="28" pos:column="52"/></name></expr>;<pos:position pos:line="28" pos:column="53"/></return></block></then></if>
			}<pos:position pos:line="29" pos:column="26"/></block></then></if></elseif> <elseif pos:line="29" pos:column="27">else <if pos:line="29" pos:column="32">if <condition pos:line="29" pos:column="35">(<expr><operator pos:line="29" pos:column="36">!<pos:position pos:line="29" pos:column="37"/></operator><call><name pos:line="29" pos:column="37">strcmp<pos:position pos:line="29" pos:column="43"/></name><argument_list pos:line="29" pos:column="43">(<argument><expr><literal type="string" pos:line="29" pos:column="44">"CAPABILITY"<pos:position pos:line="29" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="58">arg<pos:position pos:line="29" pos:column="61"/></name></expr></argument>)<pos:position pos:line="29" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="63"/></condition><then pos:line="29" pos:column="63"> <block pos:line="29" pos:column="64">{
				<expr_stmt><expr><call><name pos:line="30" pos:column="33">parse_capability<pos:position pos:line="30" pos:column="49"/></name><argument_list pos:line="30" pos:column="49">(<argument><expr><name pos:line="30" pos:column="50">imap<pos:position pos:line="30" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="56">cmd<pos:position pos:line="30" pos:column="59"/></name></expr></argument>)<pos:position pos:line="30" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="61"/></expr_stmt>
			}<pos:position pos:line="31" pos:column="26"/></block></then></if></elseif> <elseif pos:line="31" pos:column="27">else <if pos:line="31" pos:column="32">if <condition pos:line="31" pos:column="35">(<expr><operator pos:line="31" pos:column="36">(<pos:position pos:line="31" pos:column="37"/></operator><name pos:line="31" pos:column="37">arg1<pos:position pos:line="31" pos:column="41"/></name> <operator pos:line="31" pos:column="42">=<pos:position pos:line="31" pos:column="43"/></operator> <call><name pos:line="31" pos:column="44">next_arg<pos:position pos:line="31" pos:column="52"/></name><argument_list pos:line="31" pos:column="52">(<argument><expr><operator pos:line="31" pos:column="53">&amp;<pos:position pos:line="31" pos:column="58"/></operator><name pos:line="31" pos:column="54">cmd<pos:position pos:line="31" pos:column="57"/></name></expr></argument>)<pos:position pos:line="31" pos:column="58"/></argument_list></call><operator pos:line="31" pos:column="58">)<pos:position pos:line="31" pos:column="59"/></operator></expr>)<pos:position pos:line="31" pos:column="60"/></condition><then pos:line="31" pos:column="60"> <block pos:line="31" pos:column="61">{
				<empty_stmt pos:line="32" pos:column="33">;<pos:position pos:line="32" pos:column="34"/></empty_stmt> <comment type="block" pos:line="32" pos:column="35">/*
				   * Unhandled response-data with at least two words.
				   * Ignore it.
				   *
				   * NEEDSWORK: Previously this case handled '&lt;num&gt; EXISTS'
				   * and '&lt;num&gt; RECENT' but as a probably-unintended side
				   * effect it ignores other unrecognized two-word
				   * responses.  imap-send doesn't ever try to read
				   * messages or mailboxes these days, so consider
				   * eliminating this case.
				   */</comment>
			}<pos:position pos:line="43" pos:column="26"/></block></then></if></elseif> <else pos:line="43" pos:column="27">else <block pos:line="43" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="44" pos:column="33">fprintf<pos:position pos:line="44" pos:column="40"/></name><argument_list pos:line="44" pos:column="40">(<argument><expr><name pos:line="44" pos:column="41">stderr<pos:position pos:line="44" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="49">"IMAP error: unable to parse untagged response\n"<pos:position pos:line="44" pos:column="98"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="100"/></expr_stmt>
				<return pos:line="45" pos:column="33">return <expr><name pos:line="45" pos:column="40">RESP_BAD<pos:position pos:line="45" pos:column="48"/></name></expr>;<pos:position pos:line="45" pos:column="49"/></return>
			}<pos:position pos:line="46" pos:column="26"/></block></else></if>
		}<pos:position pos:line="47" pos:column="18"/></block></then> <elseif pos:line="47" pos:column="19">else <if pos:line="47" pos:column="24">if <condition pos:line="47" pos:column="27">(<expr><operator pos:line="47" pos:column="28">!<pos:position pos:line="47" pos:column="29"/></operator><name><name pos:line="47" pos:column="29">imap<pos:position pos:line="47" pos:column="33"/></name><operator pos:line="47" pos:column="33">-&gt;<pos:position pos:line="47" pos:column="38"/></operator><name pos:line="47" pos:column="35">in_progress<pos:position pos:line="47" pos:column="46"/></name></name></expr>)<pos:position pos:line="47" pos:column="47"/></condition><then pos:line="47" pos:column="47"> <block pos:line="47" pos:column="48">{
			<expr_stmt><expr><call><name pos:line="48" pos:column="25">fprintf<pos:position pos:line="48" pos:column="32"/></name><argument_list pos:line="48" pos:column="32">(<argument><expr><name pos:line="48" pos:column="33">stderr<pos:position pos:line="48" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="41">"IMAP error: unexpected reply: %s %s\n"<pos:position pos:line="48" pos:column="80"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="82">arg<pos:position pos:line="48" pos:column="85"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="48" pos:column="87">cmd<pos:position pos:line="48" pos:column="90"/></name></expr> ?<pos:position pos:line="48" pos:column="92"/></condition><then pos:line="48" pos:column="92"> <expr><name pos:line="48" pos:column="93">cmd<pos:position pos:line="48" pos:column="96"/></name></expr> <pos:position pos:line="48" pos:column="97"/></then><else pos:line="48" pos:column="97">: <expr><literal type="string" pos:line="48" pos:column="99">""<pos:position pos:line="48" pos:column="101"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="48" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="103"/></expr_stmt>
			<return pos:line="49" pos:column="25">return <expr><name pos:line="49" pos:column="32">RESP_BAD<pos:position pos:line="49" pos:column="40"/></name></expr>;<pos:position pos:line="49" pos:column="41"/></return>
		}<pos:position pos:line="50" pos:column="18"/></block></then></if></elseif> <elseif pos:line="50" pos:column="19">else <if pos:line="50" pos:column="24">if <condition pos:line="50" pos:column="27">(<expr><operator pos:line="50" pos:column="28">*<pos:position pos:line="50" pos:column="29"/></operator><name pos:line="50" pos:column="29">arg<pos:position pos:line="50" pos:column="32"/></name> <operator pos:line="50" pos:column="33">==<pos:position pos:line="50" pos:column="35"/></operator> <literal type="char" pos:line="50" pos:column="36">'+'<pos:position pos:line="50" pos:column="39"/></literal></expr>)<pos:position pos:line="50" pos:column="40"/></condition><then pos:line="50" pos:column="40"> <block pos:line="50" pos:column="41">{
			<comment type="block" pos:line="51" pos:column="25">/* This can happen only with the last command underway, as
			   it enforces a round-trip. */</comment>
			<expr_stmt><expr><name pos:line="53" pos:column="25">cmdp<pos:position pos:line="53" pos:column="29"/></name> <operator pos:line="53" pos:column="30">=<pos:position pos:line="53" pos:column="31"/></operator> <operator pos:line="53" pos:column="32">(<pos:position pos:line="53" pos:column="33"/></operator>struct <name pos:line="53" pos:column="40">imap_cmd<pos:position pos:line="53" pos:column="48"/></name> <operator pos:line="53" pos:column="49">*<pos:position pos:line="53" pos:column="50"/></operator><operator pos:line="53" pos:column="50">)<pos:position pos:line="53" pos:column="51"/></operator><operator pos:line="53" pos:column="51">(<pos:position pos:line="53" pos:column="52"/></operator><operator pos:line="53" pos:column="52">(<pos:position pos:line="53" pos:column="53"/></operator><name pos:line="53" pos:column="53">char<pos:position pos:line="53" pos:column="57"/></name> <operator pos:line="53" pos:column="58">*<pos:position pos:line="53" pos:column="59"/></operator><operator pos:line="53" pos:column="59">)<pos:position pos:line="53" pos:column="60"/></operator><name><name pos:line="53" pos:column="60">imap<pos:position pos:line="53" pos:column="64"/></name><operator pos:line="53" pos:column="64">-&gt;<pos:position pos:line="53" pos:column="69"/></operator><name pos:line="53" pos:column="66">in_progress_append<pos:position pos:line="53" pos:column="84"/></name></name> <operator pos:line="53" pos:column="85">-<pos:position pos:line="53" pos:column="86"/></operator>
			       <call><name pos:line="54" pos:column="32">offsetof<pos:position pos:line="54" pos:column="40"/></name><argument_list pos:line="54" pos:column="40">(<argument><expr pos:line="54" pos:column="41">struct <name pos:line="54" pos:column="48">imap_cmd<pos:position pos:line="54" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="58">next<pos:position pos:line="54" pos:column="62"/></name></expr></argument>)<pos:position pos:line="54" pos:column="63"/></argument_list></call><operator pos:line="54" pos:column="63">)<pos:position pos:line="54" pos:column="64"/></operator></expr>;<pos:position pos:line="54" pos:column="65"/></expr_stmt>
			<if pos:line="55" pos:column="25">if <condition pos:line="55" pos:column="28">(<expr><name><name pos:line="55" pos:column="29">cmdp<pos:position pos:line="55" pos:column="33"/></name><operator pos:line="55" pos:column="33">-&gt;<pos:position pos:line="55" pos:column="38"/></operator><name pos:line="55" pos:column="35">cb<pos:position pos:line="55" pos:column="37"/></name><operator pos:line="55" pos:column="37">.<pos:position pos:line="55" pos:column="38"/></operator><name pos:line="55" pos:column="38">data<pos:position pos:line="55" pos:column="42"/></name></name></expr>)<pos:position pos:line="55" pos:column="43"/></condition><then pos:line="55" pos:column="43"> <block pos:line="55" pos:column="44">{
				<expr_stmt><expr><name pos:line="56" pos:column="33">n<pos:position pos:line="56" pos:column="34"/></name> <operator pos:line="56" pos:column="35">=<pos:position pos:line="56" pos:column="36"/></operator> <call><name pos:line="56" pos:column="37">socket_write<pos:position pos:line="56" pos:column="49"/></name><argument_list pos:line="56" pos:column="49">(<argument><expr><operator pos:line="56" pos:column="50">&amp;<pos:position pos:line="56" pos:column="55"/></operator><name><name pos:line="56" pos:column="51">imap<pos:position pos:line="56" pos:column="55"/></name><operator pos:line="56" pos:column="55">-&gt;<pos:position pos:line="56" pos:column="60"/></operator><name pos:line="56" pos:column="57">buf<pos:position pos:line="56" pos:column="60"/></name><operator pos:line="56" pos:column="60">.<pos:position pos:line="56" pos:column="61"/></operator><name pos:line="56" pos:column="61">sock<pos:position pos:line="56" pos:column="65"/></name></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="67">cmdp<pos:position pos:line="56" pos:column="71"/></name><operator pos:line="56" pos:column="71">-&gt;<pos:position pos:line="56" pos:column="76"/></operator><name pos:line="56" pos:column="73">cb<pos:position pos:line="56" pos:column="75"/></name><operator pos:line="56" pos:column="75">.<pos:position pos:line="56" pos:column="76"/></operator><name pos:line="56" pos:column="76">data<pos:position pos:line="56" pos:column="80"/></name></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="82">cmdp<pos:position pos:line="56" pos:column="86"/></name><operator pos:line="56" pos:column="86">-&gt;<pos:position pos:line="56" pos:column="91"/></operator><name pos:line="56" pos:column="88">cb<pos:position pos:line="56" pos:column="90"/></name><operator pos:line="56" pos:column="90">.<pos:position pos:line="56" pos:column="91"/></operator><name pos:line="56" pos:column="91">dlen<pos:position pos:line="56" pos:column="95"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="97"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="57" pos:column="33">free<pos:position pos:line="57" pos:column="37"/></name><argument_list pos:line="57" pos:column="37">(<argument><expr><name><name pos:line="57" pos:column="38">cmdp<pos:position pos:line="57" pos:column="42"/></name><operator pos:line="57" pos:column="42">-&gt;<pos:position pos:line="57" pos:column="47"/></operator><name pos:line="57" pos:column="44">cb<pos:position pos:line="57" pos:column="46"/></name><operator pos:line="57" pos:column="46">.<pos:position pos:line="57" pos:column="47"/></operator><name pos:line="57" pos:column="47">data<pos:position pos:line="57" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="53"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="58" pos:column="33">cmdp<pos:position pos:line="58" pos:column="37"/></name><operator pos:line="58" pos:column="37">-&gt;<pos:position pos:line="58" pos:column="42"/></operator><name pos:line="58" pos:column="39">cb<pos:position pos:line="58" pos:column="41"/></name><operator pos:line="58" pos:column="41">.<pos:position pos:line="58" pos:column="42"/></operator><name pos:line="58" pos:column="42">data<pos:position pos:line="58" pos:column="46"/></name></name> <operator pos:line="58" pos:column="47">=<pos:position pos:line="58" pos:column="48"/></operator> <name pos:line="58" pos:column="49">NULL<pos:position pos:line="58" pos:column="53"/></name></expr>;<pos:position pos:line="58" pos:column="54"/></expr_stmt>
				<if pos:line="59" pos:column="33">if <condition pos:line="59" pos:column="36">(<expr><name pos:line="59" pos:column="37">n<pos:position pos:line="59" pos:column="38"/></name> <operator pos:line="59" pos:column="39">!=<pos:position pos:line="59" pos:column="41"/></operator> <operator pos:line="59" pos:column="42">(<pos:position pos:line="59" pos:column="43"/></operator><name pos:line="59" pos:column="43">int<pos:position pos:line="59" pos:column="46"/></name><operator pos:line="59" pos:column="46">)<pos:position pos:line="59" pos:column="47"/></operator><name><name pos:line="59" pos:column="47">cmdp<pos:position pos:line="59" pos:column="51"/></name><operator pos:line="59" pos:column="51">-&gt;<pos:position pos:line="59" pos:column="56"/></operator><name pos:line="59" pos:column="53">cb<pos:position pos:line="59" pos:column="55"/></name><operator pos:line="59" pos:column="55">.<pos:position pos:line="59" pos:column="56"/></operator><name pos:line="59" pos:column="56">dlen<pos:position pos:line="59" pos:column="60"/></name></name></expr>)<pos:position pos:line="59" pos:column="61"/></condition><then pos:line="59" pos:column="61">
					<block type="pseudo"><return pos:line="60" pos:column="41">return <expr><name pos:line="60" pos:column="48">RESP_BAD<pos:position pos:line="60" pos:column="56"/></name></expr>;<pos:position pos:line="60" pos:column="57"/></return></block></then></if>
			}<pos:position pos:line="61" pos:column="26"/></block></then> <elseif pos:line="61" pos:column="27">else <if pos:line="61" pos:column="32">if <condition pos:line="61" pos:column="35">(<expr><name><name pos:line="61" pos:column="36">cmdp<pos:position pos:line="61" pos:column="40"/></name><operator pos:line="61" pos:column="40">-&gt;<pos:position pos:line="61" pos:column="45"/></operator><name pos:line="61" pos:column="42">cb<pos:position pos:line="61" pos:column="44"/></name><operator pos:line="61" pos:column="44">.<pos:position pos:line="61" pos:column="45"/></operator><name pos:line="61" pos:column="45">cont<pos:position pos:line="61" pos:column="49"/></name></name></expr>)<pos:position pos:line="61" pos:column="50"/></condition><then pos:line="61" pos:column="50"> <block pos:line="61" pos:column="51">{
				<if pos:line="62" pos:column="33">if <condition pos:line="62" pos:column="36">(<expr><call><name><name pos:line="62" pos:column="37">cmdp<pos:position pos:line="62" pos:column="41"/></name><operator pos:line="62" pos:column="41">-&gt;<pos:position pos:line="62" pos:column="46"/></operator><name pos:line="62" pos:column="43">cb<pos:position pos:line="62" pos:column="45"/></name><operator pos:line="62" pos:column="45">.<pos:position pos:line="62" pos:column="46"/></operator><name pos:line="62" pos:column="46">cont<pos:position pos:line="62" pos:column="50"/></name></name><argument_list pos:line="62" pos:column="50">(<argument><expr><name pos:line="62" pos:column="51">ctx<pos:position pos:line="62" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="56">cmdp<pos:position pos:line="62" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="62">cmd<pos:position pos:line="62" pos:column="65"/></name></expr></argument>)<pos:position pos:line="62" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="67"/></condition><then pos:line="62" pos:column="67">
					<block type="pseudo"><return pos:line="63" pos:column="41">return <expr><name pos:line="63" pos:column="48">RESP_BAD<pos:position pos:line="63" pos:column="56"/></name></expr>;<pos:position pos:line="63" pos:column="57"/></return></block></then></if>
			}<pos:position pos:line="64" pos:column="26"/></block></then></if></elseif> <else pos:line="64" pos:column="27">else <block pos:line="64" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="65" pos:column="33">fprintf<pos:position pos:line="65" pos:column="40"/></name><argument_list pos:line="65" pos:column="40">(<argument><expr><name pos:line="65" pos:column="41">stderr<pos:position pos:line="65" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="49">"IMAP error: unexpected command continuation request\n"<pos:position pos:line="65" pos:column="104"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="106"/></expr_stmt>
				<return pos:line="66" pos:column="33">return <expr><name pos:line="66" pos:column="40">RESP_BAD<pos:position pos:line="66" pos:column="48"/></name></expr>;<pos:position pos:line="66" pos:column="49"/></return>
			}<pos:position pos:line="67" pos:column="26"/></block></else></if>
			<if pos:line="68" pos:column="25">if <condition pos:line="68" pos:column="28">(<expr><call><name pos:line="68" pos:column="29">socket_write<pos:position pos:line="68" pos:column="41"/></name><argument_list pos:line="68" pos:column="41">(<argument><expr><operator pos:line="68" pos:column="42">&amp;<pos:position pos:line="68" pos:column="47"/></operator><name><name pos:line="68" pos:column="43">imap<pos:position pos:line="68" pos:column="47"/></name><operator pos:line="68" pos:column="47">-&gt;<pos:position pos:line="68" pos:column="52"/></operator><name pos:line="68" pos:column="49">buf<pos:position pos:line="68" pos:column="52"/></name><operator pos:line="68" pos:column="52">.<pos:position pos:line="68" pos:column="53"/></operator><name pos:line="68" pos:column="53">sock<pos:position pos:line="68" pos:column="57"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="59">"\r\n"<pos:position pos:line="68" pos:column="65"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="67">2<pos:position pos:line="68" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="69"/></argument_list></call> <operator pos:line="68" pos:column="70">!=<pos:position pos:line="68" pos:column="72"/></operator> <literal type="number" pos:line="68" pos:column="73">2<pos:position pos:line="68" pos:column="74"/></literal></expr>)<pos:position pos:line="68" pos:column="75"/></condition><then pos:line="68" pos:column="75">
				<block type="pseudo"><return pos:line="69" pos:column="33">return <expr><name pos:line="69" pos:column="40">RESP_BAD<pos:position pos:line="69" pos:column="48"/></name></expr>;<pos:position pos:line="69" pos:column="49"/></return></block></then></if>
			<if pos:line="70" pos:column="25">if <condition pos:line="70" pos:column="28">(<expr><operator pos:line="70" pos:column="29">!<pos:position pos:line="70" pos:column="30"/></operator><name><name pos:line="70" pos:column="30">cmdp<pos:position pos:line="70" pos:column="34"/></name><operator pos:line="70" pos:column="34">-&gt;<pos:position pos:line="70" pos:column="39"/></operator><name pos:line="70" pos:column="36">cb<pos:position pos:line="70" pos:column="38"/></name><operator pos:line="70" pos:column="38">.<pos:position pos:line="70" pos:column="39"/></operator><name pos:line="70" pos:column="39">cont<pos:position pos:line="70" pos:column="43"/></name></name></expr>)<pos:position pos:line="70" pos:column="44"/></condition><then pos:line="70" pos:column="44">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="71" pos:column="33">imap<pos:position pos:line="71" pos:column="37"/></name><operator pos:line="71" pos:column="37">-&gt;<pos:position pos:line="71" pos:column="42"/></operator><name pos:line="71" pos:column="39">literal_pending<pos:position pos:line="71" pos:column="54"/></name></name> <operator pos:line="71" pos:column="55">=<pos:position pos:line="71" pos:column="56"/></operator> <literal type="number" pos:line="71" pos:column="57">0<pos:position pos:line="71" pos:column="58"/></literal></expr>;<pos:position pos:line="71" pos:column="59"/></expr_stmt></block></then></if>
			<if pos:line="72" pos:column="25">if <condition pos:line="72" pos:column="28">(<expr><operator pos:line="72" pos:column="29">!<pos:position pos:line="72" pos:column="30"/></operator><name pos:line="72" pos:column="30">tcmd<pos:position pos:line="72" pos:column="34"/></name></expr>)<pos:position pos:line="72" pos:column="35"/></condition><then pos:line="72" pos:column="35">
				<block type="pseudo"><return pos:line="73" pos:column="33">return <expr><name pos:line="73" pos:column="40">DRV_OK<pos:position pos:line="73" pos:column="46"/></name></expr>;<pos:position pos:line="73" pos:column="47"/></return></block></then></if>
		}<pos:position pos:line="74" pos:column="18"/></block></then></if></elseif> <else pos:line="74" pos:column="19">else <block pos:line="74" pos:column="24">{
			<expr_stmt><expr><name pos:line="75" pos:column="25">tag<pos:position pos:line="75" pos:column="28"/></name> <operator pos:line="75" pos:column="29">=<pos:position pos:line="75" pos:column="30"/></operator> <call><name pos:line="75" pos:column="31">atoi<pos:position pos:line="75" pos:column="35"/></name><argument_list pos:line="75" pos:column="35">(<argument><expr><name pos:line="75" pos:column="36">arg<pos:position pos:line="75" pos:column="39"/></name></expr></argument>)<pos:position pos:line="75" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="41"/></expr_stmt>
			<for pos:line="76" pos:column="25">for <control pos:line="76" pos:column="29">(<init><expr><name pos:line="76" pos:column="30">pcmdp<pos:position pos:line="76" pos:column="35"/></name> <operator pos:line="76" pos:column="36">=<pos:position pos:line="76" pos:column="37"/></operator> <operator pos:line="76" pos:column="38">&amp;<pos:position pos:line="76" pos:column="43"/></operator><name><name pos:line="76" pos:column="39">imap<pos:position pos:line="76" pos:column="43"/></name><operator pos:line="76" pos:column="43">-&gt;<pos:position pos:line="76" pos:column="48"/></operator><name pos:line="76" pos:column="45">in_progress<pos:position pos:line="76" pos:column="56"/></name></name></expr>;<pos:position pos:line="76" pos:column="57"/></init> <condition><expr><operator pos:line="76" pos:column="58">(<pos:position pos:line="76" pos:column="59"/></operator><name pos:line="76" pos:column="59">cmdp<pos:position pos:line="76" pos:column="63"/></name> <operator pos:line="76" pos:column="64">=<pos:position pos:line="76" pos:column="65"/></operator> <operator pos:line="76" pos:column="66">*<pos:position pos:line="76" pos:column="67"/></operator><name pos:line="76" pos:column="67">pcmdp<pos:position pos:line="76" pos:column="72"/></name><operator pos:line="76" pos:column="72">)<pos:position pos:line="76" pos:column="73"/></operator></expr>;<pos:position pos:line="76" pos:column="74"/></condition> <incr><expr><name pos:line="76" pos:column="75">pcmdp<pos:position pos:line="76" pos:column="80"/></name> <operator pos:line="76" pos:column="81">=<pos:position pos:line="76" pos:column="82"/></operator> <operator pos:line="76" pos:column="83">&amp;<pos:position pos:line="76" pos:column="88"/></operator><name><name pos:line="76" pos:column="84">cmdp<pos:position pos:line="76" pos:column="88"/></name><operator pos:line="76" pos:column="88">-&gt;<pos:position pos:line="76" pos:column="93"/></operator><name pos:line="76" pos:column="90">next<pos:position pos:line="76" pos:column="94"/></name></name></expr></incr>)<pos:position pos:line="76" pos:column="95"/></control>
				<block type="pseudo"><if pos:line="77" pos:column="33">if <condition pos:line="77" pos:column="36">(<expr><name><name pos:line="77" pos:column="37">cmdp<pos:position pos:line="77" pos:column="41"/></name><operator pos:line="77" pos:column="41">-&gt;<pos:position pos:line="77" pos:column="46"/></operator><name pos:line="77" pos:column="43">tag<pos:position pos:line="77" pos:column="46"/></name></name> <operator pos:line="77" pos:column="47">==<pos:position pos:line="77" pos:column="49"/></operator> <name pos:line="77" pos:column="50">tag<pos:position pos:line="77" pos:column="53"/></name></expr>)<pos:position pos:line="77" pos:column="54"/></condition><then pos:line="77" pos:column="54">
					<block type="pseudo"><goto pos:line="78" pos:column="41">goto <name pos:line="78" pos:column="46">gottag<pos:position pos:line="78" pos:column="52"/></name>;<pos:position pos:line="78" pos:column="53"/></goto></block></then></if></block></for>
			<expr_stmt><expr><call><name pos:line="79" pos:column="25">fprintf<pos:position pos:line="79" pos:column="32"/></name><argument_list pos:line="79" pos:column="32">(<argument><expr><name pos:line="79" pos:column="33">stderr<pos:position pos:line="79" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="41">"IMAP error: unexpected tag %s\n"<pos:position pos:line="79" pos:column="74"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="76">arg<pos:position pos:line="79" pos:column="79"/></name></expr></argument>)<pos:position pos:line="79" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="81"/></expr_stmt>
			<return pos:line="80" pos:column="25">return <expr><name pos:line="80" pos:column="32">RESP_BAD<pos:position pos:line="80" pos:column="40"/></name></expr>;<pos:position pos:line="80" pos:column="41"/></return>
		<label><name pos:line="81" pos:column="17">gottag<pos:position pos:line="81" pos:column="23"/></name>:<pos:position pos:line="81" pos:column="24"/></label>
			<if pos:line="82" pos:column="25">if <condition pos:line="82" pos:column="28">(<expr><operator pos:line="82" pos:column="29">!<pos:position pos:line="82" pos:column="30"/></operator><operator pos:line="82" pos:column="30">(<pos:position pos:line="82" pos:column="31"/></operator><operator pos:line="82" pos:column="31">*<pos:position pos:line="82" pos:column="32"/></operator><name pos:line="82" pos:column="32">pcmdp<pos:position pos:line="82" pos:column="37"/></name> <operator pos:line="82" pos:column="38">=<pos:position pos:line="82" pos:column="39"/></operator> <name><name pos:line="82" pos:column="40">cmdp<pos:position pos:line="82" pos:column="44"/></name><operator pos:line="82" pos:column="44">-&gt;<pos:position pos:line="82" pos:column="49"/></operator><name pos:line="82" pos:column="46">next<pos:position pos:line="82" pos:column="50"/></name></name><operator pos:line="82" pos:column="50">)<pos:position pos:line="82" pos:column="51"/></operator></expr>)<pos:position pos:line="82" pos:column="52"/></condition><then pos:line="82" pos:column="52">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="83" pos:column="33">imap<pos:position pos:line="83" pos:column="37"/></name><operator pos:line="83" pos:column="37">-&gt;<pos:position pos:line="83" pos:column="42"/></operator><name pos:line="83" pos:column="39">in_progress_append<pos:position pos:line="83" pos:column="57"/></name></name> <operator pos:line="83" pos:column="58">=<pos:position pos:line="83" pos:column="59"/></operator> <name pos:line="83" pos:column="60">pcmdp<pos:position pos:line="83" pos:column="65"/></name></expr>;<pos:position pos:line="83" pos:column="66"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name><name pos:line="84" pos:column="25">imap<pos:position pos:line="84" pos:column="29"/></name><operator pos:line="84" pos:column="29">-&gt;<pos:position pos:line="84" pos:column="34"/></operator><name pos:line="84" pos:column="31">num_in_progress<pos:position pos:line="84" pos:column="46"/></name></name><operator pos:line="84" pos:column="46">--<pos:position pos:line="84" pos:column="48"/></operator></expr>;<pos:position pos:line="84" pos:column="49"/></expr_stmt>
			<if pos:line="85" pos:column="25">if <condition pos:line="85" pos:column="28">(<expr><name><name pos:line="85" pos:column="29">cmdp<pos:position pos:line="85" pos:column="33"/></name><operator pos:line="85" pos:column="33">-&gt;<pos:position pos:line="85" pos:column="38"/></operator><name pos:line="85" pos:column="35">cb<pos:position pos:line="85" pos:column="37"/></name><operator pos:line="85" pos:column="37">.<pos:position pos:line="85" pos:column="38"/></operator><name pos:line="85" pos:column="38">cont<pos:position pos:line="85" pos:column="42"/></name></name> <operator pos:line="85" pos:column="43">||<pos:position pos:line="85" pos:column="45"/></operator> <name><name pos:line="85" pos:column="46">cmdp<pos:position pos:line="85" pos:column="50"/></name><operator pos:line="85" pos:column="50">-&gt;<pos:position pos:line="85" pos:column="55"/></operator><name pos:line="85" pos:column="52">cb<pos:position pos:line="85" pos:column="54"/></name><operator pos:line="85" pos:column="54">.<pos:position pos:line="85" pos:column="55"/></operator><name pos:line="85" pos:column="55">data<pos:position pos:line="85" pos:column="59"/></name></name></expr>)<pos:position pos:line="85" pos:column="60"/></condition><then pos:line="85" pos:column="60">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="86" pos:column="33">imap<pos:position pos:line="86" pos:column="37"/></name><operator pos:line="86" pos:column="37">-&gt;<pos:position pos:line="86" pos:column="42"/></operator><name pos:line="86" pos:column="39">literal_pending<pos:position pos:line="86" pos:column="54"/></name></name> <operator pos:line="86" pos:column="55">=<pos:position pos:line="86" pos:column="56"/></operator> <literal type="number" pos:line="86" pos:column="57">0<pos:position pos:line="86" pos:column="58"/></literal></expr>;<pos:position pos:line="86" pos:column="59"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="87" pos:column="25">arg<pos:position pos:line="87" pos:column="28"/></name> <operator pos:line="87" pos:column="29">=<pos:position pos:line="87" pos:column="30"/></operator> <call><name pos:line="87" pos:column="31">next_arg<pos:position pos:line="87" pos:column="39"/></name><argument_list pos:line="87" pos:column="39">(<argument><expr><operator pos:line="87" pos:column="40">&amp;<pos:position pos:line="87" pos:column="45"/></operator><name pos:line="87" pos:column="41">cmd<pos:position pos:line="87" pos:column="44"/></name></expr></argument>)<pos:position pos:line="87" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="46"/></expr_stmt>
			<if pos:line="88" pos:column="25">if <condition pos:line="88" pos:column="28">(<expr><operator pos:line="88" pos:column="29">!<pos:position pos:line="88" pos:column="30"/></operator><call><name pos:line="88" pos:column="30">strcmp<pos:position pos:line="88" pos:column="36"/></name><argument_list pos:line="88" pos:column="36">(<argument><expr><literal type="string" pos:line="88" pos:column="37">"OK"<pos:position pos:line="88" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="88" pos:column="43">arg<pos:position pos:line="88" pos:column="46"/></name></expr></argument>)<pos:position pos:line="88" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="48"/></condition><then pos:line="88" pos:column="48">
				<block type="pseudo"><expr_stmt><expr><name pos:line="89" pos:column="33">resp<pos:position pos:line="89" pos:column="37"/></name> <operator pos:line="89" pos:column="38">=<pos:position pos:line="89" pos:column="39"/></operator> <name pos:line="89" pos:column="40">DRV_OK<pos:position pos:line="89" pos:column="46"/></name></expr>;<pos:position pos:line="89" pos:column="47"/></expr_stmt></block></then>
			<else pos:line="90" pos:column="25">else <block pos:line="90" pos:column="30">{
				<if pos:line="91" pos:column="33">if <condition pos:line="91" pos:column="36">(<expr><operator pos:line="91" pos:column="37">!<pos:position pos:line="91" pos:column="38"/></operator><call><name pos:line="91" pos:column="38">strcmp<pos:position pos:line="91" pos:column="44"/></name><argument_list pos:line="91" pos:column="44">(<argument><expr><literal type="string" pos:line="91" pos:column="45">"NO"<pos:position pos:line="91" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="91" pos:column="51">arg<pos:position pos:line="91" pos:column="54"/></name></expr></argument>)<pos:position pos:line="91" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="91" pos:column="56"/></condition><then pos:line="91" pos:column="56">
					<block type="pseudo"><expr_stmt><expr><name pos:line="92" pos:column="41">resp<pos:position pos:line="92" pos:column="45"/></name> <operator pos:line="92" pos:column="46">=<pos:position pos:line="92" pos:column="47"/></operator> <name pos:line="92" pos:column="48">RESP_NO<pos:position pos:line="92" pos:column="55"/></name></expr>;<pos:position pos:line="92" pos:column="56"/></expr_stmt></block></then>
				<else pos:line="93" pos:column="33">else <comment type="block" pos:line="93" pos:column="38">/*if (!strcmp("BAD", arg))*/</comment>
					<block type="pseudo"><expr_stmt><expr><name pos:line="94" pos:column="41">resp<pos:position pos:line="94" pos:column="45"/></name> <operator pos:line="94" pos:column="46">=<pos:position pos:line="94" pos:column="47"/></operator> <name pos:line="94" pos:column="48">RESP_BAD<pos:position pos:line="94" pos:column="56"/></name></expr>;<pos:position pos:line="94" pos:column="57"/></expr_stmt></block></else></if>
				<expr_stmt><expr><call><name pos:line="95" pos:column="33">fprintf<pos:position pos:line="95" pos:column="40"/></name><argument_list pos:line="95" pos:column="40">(<argument><expr><name pos:line="95" pos:column="41">stderr<pos:position pos:line="95" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="49">"IMAP command '%s' returned response (%s) - %s\n"<pos:position pos:line="95" pos:column="98"/></literal></expr></argument>,
					<argument><expr><ternary><condition><expr><operator pos:line="96" pos:column="41">!<pos:position pos:line="96" pos:column="42"/></operator><call><name pos:line="96" pos:column="42">starts_with<pos:position pos:line="96" pos:column="53"/></name><argument_list pos:line="96" pos:column="53">(<argument><expr><name><name pos:line="96" pos:column="54">cmdp<pos:position pos:line="96" pos:column="58"/></name><operator pos:line="96" pos:column="58">-&gt;<pos:position pos:line="96" pos:column="63"/></operator><name pos:line="96" pos:column="60">cmd<pos:position pos:line="96" pos:column="63"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="65">"LOGIN"<pos:position pos:line="96" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="73"/></argument_list></call></expr> ?<pos:position pos:line="96" pos:column="75"/></condition><then pos:line="96" pos:column="75">
							<expr><name><name pos:line="97" pos:column="57">cmdp<pos:position pos:line="97" pos:column="61"/></name><operator pos:line="97" pos:column="61">-&gt;<pos:position pos:line="97" pos:column="66"/></operator><name pos:line="97" pos:column="63">cmd<pos:position pos:line="97" pos:column="66"/></name></name></expr> <pos:position pos:line="97" pos:column="67"/></then><else pos:line="97" pos:column="67">: <expr><literal type="string" pos:line="97" pos:column="69">"LOGIN &lt;user&gt; &lt;pass&gt;"<pos:position pos:line="97" pos:column="102"/></literal></expr></else></ternary></expr></argument>,
							<argument><expr><name pos:line="98" pos:column="57">arg<pos:position pos:line="98" pos:column="60"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="98" pos:column="62">cmd<pos:position pos:line="98" pos:column="65"/></name></expr> ?<pos:position pos:line="98" pos:column="67"/></condition><then pos:line="98" pos:column="67"> <expr><name pos:line="98" pos:column="68">cmd<pos:position pos:line="98" pos:column="71"/></name></expr> <pos:position pos:line="98" pos:column="72"/></then><else pos:line="98" pos:column="72">: <expr><literal type="string" pos:line="98" pos:column="74">""<pos:position pos:line="98" pos:column="76"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="98" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="78"/></expr_stmt>
			}<pos:position pos:line="99" pos:column="26"/></block></else></if>
			<if pos:line="100" pos:column="25">if <condition pos:line="100" pos:column="28">(<expr><operator pos:line="100" pos:column="29">(<pos:position pos:line="100" pos:column="30"/></operator><name pos:line="100" pos:column="30">resp2<pos:position pos:line="100" pos:column="35"/></name> <operator pos:line="100" pos:column="36">=<pos:position pos:line="100" pos:column="37"/></operator> <call><name pos:line="100" pos:column="38">parse_response_code<pos:position pos:line="100" pos:column="57"/></name><argument_list pos:line="100" pos:column="57">(<argument><expr><name pos:line="100" pos:column="58">ctx<pos:position pos:line="100" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="100" pos:column="63">&amp;<pos:position pos:line="100" pos:column="68"/></operator><name><name pos:line="100" pos:column="64">cmdp<pos:position pos:line="100" pos:column="68"/></name><operator pos:line="100" pos:column="68">-&gt;<pos:position pos:line="100" pos:column="73"/></operator><name pos:line="100" pos:column="70">cb<pos:position pos:line="100" pos:column="72"/></name></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="74">cmd<pos:position pos:line="100" pos:column="77"/></name></expr></argument>)<pos:position pos:line="100" pos:column="78"/></argument_list></call><operator pos:line="100" pos:column="78">)<pos:position pos:line="100" pos:column="79"/></operator> <operator pos:line="100" pos:column="80">&gt;<pos:position pos:line="100" pos:column="84"/></operator> <name pos:line="100" pos:column="82">resp<pos:position pos:line="100" pos:column="86"/></name></expr>)<pos:position pos:line="100" pos:column="87"/></condition><then pos:line="100" pos:column="87">
				<block type="pseudo"><expr_stmt><expr><name pos:line="101" pos:column="33">resp<pos:position pos:line="101" pos:column="37"/></name> <operator pos:line="101" pos:column="38">=<pos:position pos:line="101" pos:column="39"/></operator> <name pos:line="101" pos:column="40">resp2<pos:position pos:line="101" pos:column="45"/></name></expr>;<pos:position pos:line="101" pos:column="46"/></expr_stmt></block></then></if>
			<if pos:line="102" pos:column="25">if <condition pos:line="102" pos:column="28">(<expr><name><name pos:line="102" pos:column="29">cmdp<pos:position pos:line="102" pos:column="33"/></name><operator pos:line="102" pos:column="33">-&gt;<pos:position pos:line="102" pos:column="38"/></operator><name pos:line="102" pos:column="35">cb<pos:position pos:line="102" pos:column="37"/></name><operator pos:line="102" pos:column="37">.<pos:position pos:line="102" pos:column="38"/></operator><name pos:line="102" pos:column="38">done<pos:position pos:line="102" pos:column="42"/></name></name></expr>)<pos:position pos:line="102" pos:column="43"/></condition><then pos:line="102" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><call><name><name pos:line="103" pos:column="33">cmdp<pos:position pos:line="103" pos:column="37"/></name><operator pos:line="103" pos:column="37">-&gt;<pos:position pos:line="103" pos:column="42"/></operator><name pos:line="103" pos:column="39">cb<pos:position pos:line="103" pos:column="41"/></name><operator pos:line="103" pos:column="41">.<pos:position pos:line="103" pos:column="42"/></operator><name pos:line="103" pos:column="42">done<pos:position pos:line="103" pos:column="46"/></name></name><argument_list pos:line="103" pos:column="46">(<argument><expr><name pos:line="103" pos:column="47">ctx<pos:position pos:line="103" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="52">cmdp<pos:position pos:line="103" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="58">resp<pos:position pos:line="103" pos:column="62"/></name></expr></argument>)<pos:position pos:line="103" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="64"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="104" pos:column="25">free<pos:position pos:line="104" pos:column="29"/></name><argument_list pos:line="104" pos:column="29">(<argument><expr><name><name pos:line="104" pos:column="30">cmdp<pos:position pos:line="104" pos:column="34"/></name><operator pos:line="104" pos:column="34">-&gt;<pos:position pos:line="104" pos:column="39"/></operator><name pos:line="104" pos:column="36">cb<pos:position pos:line="104" pos:column="38"/></name><operator pos:line="104" pos:column="38">.<pos:position pos:line="104" pos:column="39"/></operator><name pos:line="104" pos:column="39">data<pos:position pos:line="104" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="104" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="105" pos:column="25">free<pos:position pos:line="105" pos:column="29"/></name><argument_list pos:line="105" pos:column="29">(<argument><expr><name><name pos:line="105" pos:column="30">cmdp<pos:position pos:line="105" pos:column="34"/></name><operator pos:line="105" pos:column="34">-&gt;<pos:position pos:line="105" pos:column="39"/></operator><name pos:line="105" pos:column="36">cmd<pos:position pos:line="105" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="105" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="106" pos:column="25">free<pos:position pos:line="106" pos:column="29"/></name><argument_list pos:line="106" pos:column="29">(<argument><expr><name pos:line="106" pos:column="30">cmdp<pos:position pos:line="106" pos:column="34"/></name></expr></argument>)<pos:position pos:line="106" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="36"/></expr_stmt>
			<if pos:line="107" pos:column="25">if <condition pos:line="107" pos:column="28">(<expr><operator pos:line="107" pos:column="29">!<pos:position pos:line="107" pos:column="30"/></operator><name pos:line="107" pos:column="30">tcmd<pos:position pos:line="107" pos:column="34"/></name> <operator pos:line="107" pos:column="35">||<pos:position pos:line="107" pos:column="37"/></operator> <name pos:line="107" pos:column="38">tcmd<pos:position pos:line="107" pos:column="42"/></name> <operator pos:line="107" pos:column="43">==<pos:position pos:line="107" pos:column="45"/></operator> <name pos:line="107" pos:column="46">cmdp<pos:position pos:line="107" pos:column="50"/></name></expr>)<pos:position pos:line="107" pos:column="51"/></condition><then pos:line="107" pos:column="51">
				<block type="pseudo"><return pos:line="108" pos:column="33">return <expr><name pos:line="108" pos:column="40">resp<pos:position pos:line="108" pos:column="44"/></name></expr>;<pos:position pos:line="108" pos:column="45"/></return></block></then></if>
		}<pos:position pos:line="109" pos:column="18"/></block></else></if>
	}<pos:position pos:line="110" pos:column="10"/></block></for>
	<comment type="block" pos:line="111" pos:column="9">/* not reached */</comment>
}<pos:position pos:line="112" pos:column="2"/></block></function></unit>
