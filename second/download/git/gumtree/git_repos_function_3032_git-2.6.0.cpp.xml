<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3032_git-2.6.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">handle<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">incoming<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">sockaddr<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">addr<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">socklen_t<pos:position pos:line="1" pos:column="66"/></name></type> <name pos:line="1" pos:column="67">addrlen<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">child_process<pos:position pos:line="3" pos:column="29"/></name></name></type> <name pos:line="3" pos:column="30">cld<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><name pos:line="3" pos:column="36">CHILD_PROCESS_INIT<pos:position pos:line="3" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="55"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">addrbuf<pos:position pos:line="4" pos:column="21"/></name><index pos:line="4" pos:column="21">[<expr><literal type="number" pos:line="4" pos:column="22">300<pos:position pos:line="4" pos:column="25"/></literal></expr>]<pos:position pos:line="4" pos:column="26"/></index></name> <init pos:line="4" pos:column="27">= <expr><literal type="string" pos:line="4" pos:column="29">"REMOTE_ADDR="<pos:position pos:line="4" pos:column="43"/></literal></expr></init></decl>, <decl><type ref="prev"/><name><name pos:line="4" pos:column="45">portbuf<pos:position pos:line="4" pos:column="52"/></name><index pos:line="4" pos:column="52">[<expr><literal type="number" pos:line="4" pos:column="53">300<pos:position pos:line="4" pos:column="56"/></literal></expr>]<pos:position pos:line="4" pos:column="57"/></index></name></decl>;<pos:position pos:line="4" pos:column="58"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name><name pos:line="5" pos:column="15">env<pos:position pos:line="5" pos:column="18"/></name><index pos:line="5" pos:column="18">[]<pos:position pos:line="5" pos:column="20"/></index></name> <init pos:line="5" pos:column="21">= <expr><block pos:line="5" pos:column="23">{ <expr><name pos:line="5" pos:column="25">addrbuf<pos:position pos:line="5" pos:column="32"/></name></expr>, <expr><name pos:line="5" pos:column="34">portbuf<pos:position pos:line="5" pos:column="41"/></name></expr>, <expr><name pos:line="5" pos:column="43">NULL<pos:position pos:line="5" pos:column="47"/></name></expr> }<pos:position pos:line="5" pos:column="49"/></block></expr></init></decl>;<pos:position pos:line="5" pos:column="50"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">max_connections<pos:position pos:line="7" pos:column="28"/></name> <operator pos:line="7" pos:column="29">&amp;&amp;<pos:position pos:line="7" pos:column="39"/></operator> <name pos:line="7" pos:column="32">live_children<pos:position pos:line="7" pos:column="45"/></name> <operator pos:line="7" pos:column="46">&gt;=<pos:position pos:line="7" pos:column="51"/></operator> <name pos:line="7" pos:column="49">max_connections<pos:position pos:line="7" pos:column="64"/></name></expr>)<pos:position pos:line="7" pos:column="65"/></condition><then pos:line="7" pos:column="65"> <block pos:line="7" pos:column="66">{
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">kill_some_child<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">()<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">sleep<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><literal type="number" pos:line="9" pos:column="23">1<pos:position pos:line="9" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="26"/></expr_stmt>  <comment type="block" pos:line="9" pos:column="28">/* give it some time to die */</comment>
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">check_dead_children<pos:position pos:line="10" pos:column="36"/></name><argument_list pos:line="10" pos:column="36">()<pos:position pos:line="10" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="39"/></expr_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name pos:line="11" pos:column="21">live_children<pos:position pos:line="11" pos:column="34"/></name> <operator pos:line="11" pos:column="35">&gt;=<pos:position pos:line="11" pos:column="40"/></operator> <name pos:line="11" pos:column="38">max_connections<pos:position pos:line="11" pos:column="53"/></name></expr>)<pos:position pos:line="11" pos:column="54"/></condition><then pos:line="11" pos:column="54"> <block pos:line="11" pos:column="55">{
			<expr_stmt><expr><call><name pos:line="12" pos:column="25">close<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><name pos:line="12" pos:column="31">incoming<pos:position pos:line="12" pos:column="39"/></name></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">logerror<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">(<argument><expr><literal type="string" pos:line="13" pos:column="34">"Too many children, dropping connection"<pos:position pos:line="13" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="76"/></expr_stmt>
			<return pos:line="14" pos:column="25">return;<pos:position pos:line="14" pos:column="32"/></return>
		}<pos:position pos:line="15" pos:column="18"/></block></then></if>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name><name pos:line="18" pos:column="13">addr<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">-&gt;<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="19">sa_family<pos:position pos:line="18" pos:column="28"/></name></name> <operator pos:line="18" pos:column="29">==<pos:position pos:line="18" pos:column="31"/></operator> <name pos:line="18" pos:column="32">AF_INET<pos:position pos:line="18" pos:column="39"/></name></expr>)<pos:position pos:line="18" pos:column="40"/></condition><then pos:line="18" pos:column="40"> <block pos:line="18" pos:column="41">{
		<decl_stmt><decl><type><name><name pos:line="19" pos:column="17">struct<pos:position pos:line="19" pos:column="23"/></name> <name pos:line="19" pos:column="24">sockaddr_in<pos:position pos:line="19" pos:column="35"/></name></name> <modifier pos:line="19" pos:column="36">*<pos:position pos:line="19" pos:column="37"/></modifier></type><name pos:line="19" pos:column="37">sin_addr<pos:position pos:line="19" pos:column="45"/></name> <init pos:line="19" pos:column="46">= <expr><operator pos:line="19" pos:column="48">(<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="49">void<pos:position pos:line="19" pos:column="53"/></name> <operator pos:line="19" pos:column="54">*<pos:position pos:line="19" pos:column="55"/></operator><operator pos:line="19" pos:column="55">)<pos:position pos:line="19" pos:column="56"/></operator> <name pos:line="19" pos:column="57">addr<pos:position pos:line="19" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="62"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">inet_ntop<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">(<argument><expr><name><name pos:line="20" pos:column="27">addr<pos:position pos:line="20" pos:column="31"/></name><operator pos:line="20" pos:column="31">-&gt;<pos:position pos:line="20" pos:column="36"/></operator><name pos:line="20" pos:column="33">sa_family<pos:position pos:line="20" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="44">&amp;<pos:position pos:line="20" pos:column="49"/></operator><name><name pos:line="20" pos:column="45">sin_addr<pos:position pos:line="20" pos:column="53"/></name><operator pos:line="20" pos:column="53">-&gt;<pos:position pos:line="20" pos:column="58"/></operator><name pos:line="20" pos:column="55">sin_addr<pos:position pos:line="20" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="65">addrbuf<pos:position pos:line="20" pos:column="72"/></name> <operator pos:line="20" pos:column="73">+<pos:position pos:line="20" pos:column="74"/></operator> <literal type="number" pos:line="20" pos:column="75">12<pos:position pos:line="20" pos:column="77"/></literal></expr></argument>,
		    <argument><expr><sizeof pos:line="21" pos:column="21">sizeof<argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">addrbuf<pos:position pos:line="21" pos:column="35"/></name></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></sizeof> <operator pos:line="21" pos:column="37">-<pos:position pos:line="21" pos:column="38"/></operator> <literal type="number" pos:line="21" pos:column="39">12<pos:position pos:line="21" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">snprintf<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">portbuf<pos:position pos:line="22" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="35">sizeof<argument_list pos:line="22" pos:column="41">(<argument><expr><name pos:line="22" pos:column="42">portbuf<pos:position pos:line="22" pos:column="49"/></name></expr></argument>)<pos:position pos:line="22" pos:column="50"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="52">"REMOTE_PORT=%d"<pos:position pos:line="22" pos:column="68"/></literal></expr></argument>,
		    <argument><expr><call><name pos:line="23" pos:column="21">ntohs<pos:position pos:line="23" pos:column="26"/></name><argument_list pos:line="23" pos:column="26">(<argument><expr><name><name pos:line="23" pos:column="27">sin_addr<pos:position pos:line="23" pos:column="35"/></name><operator pos:line="23" pos:column="35">-&gt;<pos:position pos:line="23" pos:column="40"/></operator><name pos:line="23" pos:column="37">sin_port<pos:position pos:line="23" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="48"/></expr_stmt>
<cpp:ifndef pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">ifndef<pos:position pos:line="24" pos:column="8"/></cpp:directive> <name pos:line="24" pos:column="9">NO_IPV6<pos:position pos:line="24" pos:column="16"/></name></cpp:ifndef>
	}<pos:position pos:line="25" pos:column="10"/></block></then> <elseif pos:line="25" pos:column="11">else <if pos:line="25" pos:column="16">if <condition pos:line="25" pos:column="19">(<expr><name><name pos:line="25" pos:column="20">addr<pos:position pos:line="25" pos:column="24"/></name><operator pos:line="25" pos:column="24">-&gt;<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="26">sa_family<pos:position pos:line="25" pos:column="35"/></name></name> <operator pos:line="25" pos:column="36">==<pos:position pos:line="25" pos:column="38"/></operator> <name pos:line="25" pos:column="39">AF_INET6<pos:position pos:line="25" pos:column="47"/></name></expr>)<pos:position pos:line="25" pos:column="48"/></condition><then pos:line="25" pos:column="48"> <block pos:line="25" pos:column="49">{
		<decl_stmt><decl><type><name><name pos:line="26" pos:column="17">struct<pos:position pos:line="26" pos:column="23"/></name> <name pos:line="26" pos:column="24">sockaddr_in6<pos:position pos:line="26" pos:column="36"/></name></name> <modifier pos:line="26" pos:column="37">*<pos:position pos:line="26" pos:column="38"/></modifier></type><name pos:line="26" pos:column="38">sin6_addr<pos:position pos:line="26" pos:column="47"/></name> <init pos:line="26" pos:column="48">= <expr><operator pos:line="26" pos:column="50">(<pos:position pos:line="26" pos:column="51"/></operator><name pos:line="26" pos:column="51">void<pos:position pos:line="26" pos:column="55"/></name> <operator pos:line="26" pos:column="56">*<pos:position pos:line="26" pos:column="57"/></operator><operator pos:line="26" pos:column="57">)<pos:position pos:line="26" pos:column="58"/></operator> <name pos:line="26" pos:column="59">addr<pos:position pos:line="26" pos:column="63"/></name></expr></init></decl>;<pos:position pos:line="26" pos:column="64"/></decl_stmt>

		<decl_stmt><decl><type><name pos:line="28" pos:column="17">char<pos:position pos:line="28" pos:column="21"/></name> <modifier pos:line="28" pos:column="22">*<pos:position pos:line="28" pos:column="23"/></modifier></type><name pos:line="28" pos:column="23">buf<pos:position pos:line="28" pos:column="26"/></name> <init pos:line="28" pos:column="27">= <expr><name pos:line="28" pos:column="29">addrbuf<pos:position pos:line="28" pos:column="36"/></name> <operator pos:line="28" pos:column="37">+<pos:position pos:line="28" pos:column="38"/></operator> <literal type="number" pos:line="28" pos:column="39">12<pos:position pos:line="28" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="42"/></decl_stmt>
		<expr_stmt><expr><operator pos:line="29" pos:column="17">*<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="18">buf<pos:position pos:line="29" pos:column="21"/></name><operator pos:line="29" pos:column="21">++<pos:position pos:line="29" pos:column="23"/></operator> <operator pos:line="29" pos:column="24">=<pos:position pos:line="29" pos:column="25"/></operator> <literal type="char" pos:line="29" pos:column="26">'['<pos:position pos:line="29" pos:column="29"/></literal></expr>;<pos:position pos:line="29" pos:column="30"/></expr_stmt> <expr_stmt><expr><operator pos:line="29" pos:column="31">*<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="32">buf<pos:position pos:line="29" pos:column="35"/></name> <operator pos:line="29" pos:column="36">=<pos:position pos:line="29" pos:column="37"/></operator> <literal type="char" pos:line="29" pos:column="38">'\0'<pos:position pos:line="29" pos:column="42"/></literal></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt> <comment type="block" pos:line="29" pos:column="44">/* stpcpy() is cool */</comment>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">inet_ntop<pos:position pos:line="30" pos:column="26"/></name><argument_list pos:line="30" pos:column="26">(<argument><expr><name pos:line="30" pos:column="27">AF_INET6<pos:position pos:line="30" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="37">&amp;<pos:position pos:line="30" pos:column="42"/></operator><name><name pos:line="30" pos:column="38">sin6_addr<pos:position pos:line="30" pos:column="47"/></name><operator pos:line="30" pos:column="47">-&gt;<pos:position pos:line="30" pos:column="52"/></operator><name pos:line="30" pos:column="49">sin6_addr<pos:position pos:line="30" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="60">buf<pos:position pos:line="30" pos:column="63"/></name></expr></argument>,
		    <argument><expr><sizeof pos:line="31" pos:column="21">sizeof<argument_list pos:line="31" pos:column="27">(<argument><expr><name pos:line="31" pos:column="28">addrbuf<pos:position pos:line="31" pos:column="35"/></name></expr></argument>)<pos:position pos:line="31" pos:column="36"/></argument_list></sizeof> <operator pos:line="31" pos:column="37">-<pos:position pos:line="31" pos:column="38"/></operator> <literal type="number" pos:line="31" pos:column="39">13<pos:position pos:line="31" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">strcat<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><name pos:line="32" pos:column="24">buf<pos:position pos:line="32" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="29">"]"<pos:position pos:line="32" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="34" pos:column="17">snprintf<pos:position pos:line="34" pos:column="25"/></name><argument_list pos:line="34" pos:column="25">(<argument><expr><name pos:line="34" pos:column="26">portbuf<pos:position pos:line="34" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="35">sizeof<argument_list pos:line="34" pos:column="41">(<argument><expr><name pos:line="34" pos:column="42">portbuf<pos:position pos:line="34" pos:column="49"/></name></expr></argument>)<pos:position pos:line="34" pos:column="50"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="52">"REMOTE_PORT=%d"<pos:position pos:line="34" pos:column="68"/></literal></expr></argument>,
		    <argument><expr><call><name pos:line="35" pos:column="21">ntohs<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">(<argument><expr><name><name pos:line="35" pos:column="27">sin6_addr<pos:position pos:line="35" pos:column="36"/></name><operator pos:line="35" pos:column="36">-&gt;<pos:position pos:line="35" pos:column="41"/></operator><name pos:line="35" pos:column="38">sin6_port<pos:position pos:line="35" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="50"/></expr_stmt>
<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif<pos:position pos:line="36" pos:column="7"/></cpp:directive></cpp:endif>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if></elseif></if>

	<expr_stmt><expr><name><name pos:line="39" pos:column="9">cld<pos:position pos:line="39" pos:column="12"/></name><operator pos:line="39" pos:column="12">.<pos:position pos:line="39" pos:column="13"/></operator><name pos:line="39" pos:column="13">env<pos:position pos:line="39" pos:column="16"/></name></name> <operator pos:line="39" pos:column="17">=<pos:position pos:line="39" pos:column="18"/></operator> <operator pos:line="39" pos:column="19">(<pos:position pos:line="39" pos:column="20"/></operator><specifier pos:line="39" pos:column="20">const<pos:position pos:line="39" pos:column="25"/></specifier> <name pos:line="39" pos:column="26">char<pos:position pos:line="39" pos:column="30"/></name> <operator pos:line="39" pos:column="31">*<pos:position pos:line="39" pos:column="32"/></operator><operator pos:line="39" pos:column="32">*<pos:position pos:line="39" pos:column="33"/></operator><operator pos:line="39" pos:column="33">)<pos:position pos:line="39" pos:column="34"/></operator><name pos:line="39" pos:column="34">env<pos:position pos:line="39" pos:column="37"/></name></expr>;<pos:position pos:line="39" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="40" pos:column="9">cld<pos:position pos:line="40" pos:column="12"/></name><operator pos:line="40" pos:column="12">.<pos:position pos:line="40" pos:column="13"/></operator><name pos:line="40" pos:column="13">argv<pos:position pos:line="40" pos:column="17"/></name></name> <operator pos:line="40" pos:column="18">=<pos:position pos:line="40" pos:column="19"/></operator> <operator pos:line="40" pos:column="20">(<pos:position pos:line="40" pos:column="21"/></operator><specifier pos:line="40" pos:column="21">const<pos:position pos:line="40" pos:column="26"/></specifier> <name pos:line="40" pos:column="27">char<pos:position pos:line="40" pos:column="31"/></name> <operator pos:line="40" pos:column="32">*<pos:position pos:line="40" pos:column="33"/></operator><operator pos:line="40" pos:column="33">*<pos:position pos:line="40" pos:column="34"/></operator><operator pos:line="40" pos:column="34">)<pos:position pos:line="40" pos:column="35"/></operator><name pos:line="40" pos:column="35">cld_argv<pos:position pos:line="40" pos:column="43"/></name></expr>;<pos:position pos:line="40" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="41" pos:column="9">cld<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">.<pos:position pos:line="41" pos:column="13"/></operator><name pos:line="41" pos:column="13">in<pos:position pos:line="41" pos:column="15"/></name></name> <operator pos:line="41" pos:column="16">=<pos:position pos:line="41" pos:column="17"/></operator> <name pos:line="41" pos:column="18">incoming<pos:position pos:line="41" pos:column="26"/></name></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="42" pos:column="9">cld<pos:position pos:line="42" pos:column="12"/></name><operator pos:line="42" pos:column="12">.<pos:position pos:line="42" pos:column="13"/></operator><name pos:line="42" pos:column="13">out<pos:position pos:line="42" pos:column="16"/></name></name> <operator pos:line="42" pos:column="17">=<pos:position pos:line="42" pos:column="18"/></operator> <call><name pos:line="42" pos:column="19">dup<pos:position pos:line="42" pos:column="22"/></name><argument_list pos:line="42" pos:column="22">(<argument><expr><name pos:line="42" pos:column="23">incoming<pos:position pos:line="42" pos:column="31"/></name></expr></argument>)<pos:position pos:line="42" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="33"/></expr_stmt>

	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><call><name pos:line="44" pos:column="13">start_command<pos:position pos:line="44" pos:column="26"/></name><argument_list pos:line="44" pos:column="26">(<argument><expr><operator pos:line="44" pos:column="27">&amp;<pos:position pos:line="44" pos:column="32"/></operator><name pos:line="44" pos:column="28">cld<pos:position pos:line="44" pos:column="31"/></name></expr></argument>)<pos:position pos:line="44" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="33"/></condition><then pos:line="44" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="17">logerror<pos:position pos:line="45" pos:column="25"/></name><argument_list pos:line="45" pos:column="25">(<argument><expr><literal type="string" pos:line="45" pos:column="26">"unable to fork"<pos:position pos:line="45" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="44"/></expr_stmt></block></then>
	<else pos:line="46" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="17">add_child<pos:position pos:line="47" pos:column="26"/></name><argument_list pos:line="47" pos:column="26">(<argument><expr><operator pos:line="47" pos:column="27">&amp;<pos:position pos:line="47" pos:column="32"/></operator><name pos:line="47" pos:column="28">cld<pos:position pos:line="47" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="33">addr<pos:position pos:line="47" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="39">addrlen<pos:position pos:line="47" pos:column="46"/></name></expr></argument>)<pos:position pos:line="47" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="48"/></expr_stmt></block></else></if>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
