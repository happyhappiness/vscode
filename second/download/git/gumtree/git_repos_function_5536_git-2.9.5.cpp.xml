<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5536_git-2.9.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">work_item<pos:position pos:line="1" pos:column="24"/></name></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">get_work<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">void<pos:position pos:line="1" pos:column="39"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">work_item<pos:position pos:line="3" pos:column="25"/></name></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">ret<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">grep_lock<pos:position pos:line="5" pos:column="18"/></name><argument_list pos:line="5" pos:column="18">()<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt>
	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><name pos:line="6" pos:column="16">todo_start<pos:position pos:line="6" pos:column="26"/></name> <operator pos:line="6" pos:column="27">==<pos:position pos:line="6" pos:column="29"/></operator> <name pos:line="6" pos:column="30">todo_end<pos:position pos:line="6" pos:column="38"/></name> <operator pos:line="6" pos:column="39">&amp;&amp;<pos:position pos:line="6" pos:column="49"/></operator> <operator pos:line="6" pos:column="42">!<pos:position pos:line="6" pos:column="43"/></operator><name pos:line="6" pos:column="43">all_work_added<pos:position pos:line="6" pos:column="57"/></name></expr>)<pos:position pos:line="6" pos:column="58"/></condition> <block pos:line="6" pos:column="59">{
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">pthread_cond_wait<pos:position pos:line="7" pos:column="34"/></name><argument_list pos:line="7" pos:column="34">(<argument><expr><operator pos:line="7" pos:column="35">&amp;<pos:position pos:line="7" pos:column="40"/></operator><name pos:line="7" pos:column="36">cond_add<pos:position pos:line="7" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="46">&amp;<pos:position pos:line="7" pos:column="51"/></operator><name pos:line="7" pos:column="47">grep_mutex<pos:position pos:line="7" pos:column="57"/></name></expr></argument>)<pos:position pos:line="7" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="59"/></expr_stmt>
	}<pos:position pos:line="8" pos:column="10"/></block></while>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">todo_start<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">==<pos:position pos:line="10" pos:column="26"/></operator> <name pos:line="10" pos:column="27">todo_end<pos:position pos:line="10" pos:column="35"/></name> <operator pos:line="10" pos:column="36">&amp;&amp;<pos:position pos:line="10" pos:column="46"/></operator> <name pos:line="10" pos:column="39">all_work_added<pos:position pos:line="10" pos:column="53"/></name></expr>)<pos:position pos:line="10" pos:column="54"/></condition><then pos:line="10" pos:column="54"> <block pos:line="10" pos:column="55">{
		<expr_stmt><expr><name pos:line="11" pos:column="17">ret<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">=<pos:position pos:line="11" pos:column="22"/></operator> <name pos:line="11" pos:column="23">NULL<pos:position pos:line="11" pos:column="27"/></name></expr>;<pos:position pos:line="11" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="12" pos:column="10"/></block></then> <else pos:line="12" pos:column="11">else <block pos:line="12" pos:column="16">{
		<expr_stmt><expr><name pos:line="13" pos:column="17">ret<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <operator pos:line="13" pos:column="23">&amp;<pos:position pos:line="13" pos:column="28"/></operator><name><name pos:line="13" pos:column="24">todo<pos:position pos:line="13" pos:column="28"/></name><index pos:line="13" pos:column="28">[<expr><name pos:line="13" pos:column="29">todo_start<pos:position pos:line="13" pos:column="39"/></name></expr>]<pos:position pos:line="13" pos:column="40"/></index></name></expr>;<pos:position pos:line="13" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="14" pos:column="17">todo_start<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">=<pos:position pos:line="14" pos:column="29"/></operator> <operator pos:line="14" pos:column="30">(<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="31">todo_start<pos:position pos:line="14" pos:column="41"/></name> <operator pos:line="14" pos:column="42">+<pos:position pos:line="14" pos:column="43"/></operator> <literal type="number" pos:line="14" pos:column="44">1<pos:position pos:line="14" pos:column="45"/></literal><operator pos:line="14" pos:column="45">)<pos:position pos:line="14" pos:column="46"/></operator> <operator pos:line="14" pos:column="47">%<pos:position pos:line="14" pos:column="48"/></operator> <call><name pos:line="14" pos:column="49">ARRAY_SIZE<pos:position pos:line="14" pos:column="59"/></name><argument_list pos:line="14" pos:column="59">(<argument><expr><name pos:line="14" pos:column="60">todo<pos:position pos:line="14" pos:column="64"/></name></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="66"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="16" pos:column="9">grep_unlock<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">()<pos:position pos:line="16" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>
	<return pos:line="17" pos:column="9">return <expr><name pos:line="17" pos:column="16">ret<pos:position pos:line="17" pos:column="19"/></name></expr>;<pos:position pos:line="17" pos:column="20"/></return>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
