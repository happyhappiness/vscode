<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5174_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">checkout_merged<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">int<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">pos<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="37">const<pos:position pos:line="1" pos:column="42"/></specifier> <name><name pos:line="1" pos:column="43">struct<pos:position pos:line="1" pos:column="49"/></name> <name pos:line="1" pos:column="50">checkout<pos:position pos:line="1" pos:column="58"/></name></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">state<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">cache_entry<pos:position pos:line="3" pos:column="27"/></name></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">ce<pos:position pos:line="3" pos:column="31"/></name> <init pos:line="3" pos:column="32">= <expr><name><name pos:line="3" pos:column="34">active_cache<pos:position pos:line="3" pos:column="46"/></name><index pos:line="3" pos:column="46">[<expr><name pos:line="3" pos:column="47">pos<pos:position pos:line="3" pos:column="50"/></name></expr>]<pos:position pos:line="3" pos:column="51"/></index></name></expr></init></decl>;<pos:position pos:line="3" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">path<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name><name pos:line="4" pos:column="28">ce<pos:position pos:line="4" pos:column="30"/></name><operator pos:line="4" pos:column="30">-&gt;<pos:position pos:line="4" pos:column="35"/></operator><name pos:line="4" pos:column="32">name<pos:position pos:line="4" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">mmfile_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">ancestor<pos:position pos:line="5" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="28">ours<pos:position pos:line="5" pos:column="32"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="34">theirs<pos:position pos:line="5" pos:column="40"/></name></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">status<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">object_id<pos:position pos:line="7" pos:column="25"/></name></name></type> <name pos:line="7" pos:column="26">oid<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">mmbuffer_t<pos:position pos:line="8" pos:column="19"/></name></type> <name pos:line="8" pos:column="20">result_buf<pos:position pos:line="8" pos:column="30"/></name></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">object_id<pos:position pos:line="9" pos:column="25"/></name></name></type> <name><name pos:line="9" pos:column="26">threeway<pos:position pos:line="9" pos:column="34"/></name><index pos:line="9" pos:column="34">[<expr><literal type="number" pos:line="9" pos:column="35">3<pos:position pos:line="9" pos:column="36"/></literal></expr>]<pos:position pos:line="9" pos:column="37"/></index></name></decl>;<pos:position pos:line="9" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">unsigned<pos:position pos:line="10" pos:column="17"/></name></type> <name pos:line="10" pos:column="18">mode<pos:position pos:line="10" pos:column="22"/></name> <init pos:line="10" pos:column="23">= <expr><literal type="number" pos:line="10" pos:column="25">0<pos:position pos:line="10" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">memset<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">threeway<pos:position pos:line="12" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="26">0<pos:position pos:line="12" pos:column="27"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="29">sizeof<argument_list pos:line="12" pos:column="35">(<argument><expr><name pos:line="12" pos:column="36">threeway<pos:position pos:line="12" pos:column="44"/></name></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="47"/></expr_stmt>
	<while pos:line="13" pos:column="9">while <condition pos:line="13" pos:column="15">(<expr><name pos:line="13" pos:column="16">pos<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">&lt;<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="22">active_nr<pos:position pos:line="13" pos:column="31"/></name></expr>)<pos:position pos:line="13" pos:column="32"/></condition> <block pos:line="13" pos:column="33">{
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">int<pos:position pos:line="14" pos:column="20"/></name></type> <name pos:line="14" pos:column="21">stage<pos:position pos:line="14" pos:column="26"/></name></decl>;<pos:position pos:line="14" pos:column="27"/></decl_stmt>
		<expr_stmt><expr><name pos:line="15" pos:column="17">stage<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">=<pos:position pos:line="15" pos:column="24"/></operator> <call><name pos:line="15" pos:column="25">ce_stage<pos:position pos:line="15" pos:column="33"/></name><argument_list pos:line="15" pos:column="33">(<argument><expr><name pos:line="15" pos:column="34">ce<pos:position pos:line="15" pos:column="36"/></name></expr></argument>)<pos:position pos:line="15" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><operator pos:line="16" pos:column="21">!<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">stage<pos:position pos:line="16" pos:column="27"/></name> <operator pos:line="16" pos:column="28">||<pos:position pos:line="16" pos:column="30"/></operator> <call><name pos:line="16" pos:column="31">strcmp<pos:position pos:line="16" pos:column="37"/></name><argument_list pos:line="16" pos:column="37">(<argument><expr><name pos:line="16" pos:column="38">path<pos:position pos:line="16" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="44">ce<pos:position pos:line="16" pos:column="46"/></name><operator pos:line="16" pos:column="46">-&gt;<pos:position pos:line="16" pos:column="51"/></operator><name pos:line="16" pos:column="48">name<pos:position pos:line="16" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="54"/></condition><then pos:line="16" pos:column="54">
			<block type="pseudo"><break pos:line="17" pos:column="25">break;<pos:position pos:line="17" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">oidcpy<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><operator pos:line="18" pos:column="24">&amp;<pos:position pos:line="18" pos:column="29"/></operator><name><name pos:line="18" pos:column="25">threeway<pos:position pos:line="18" pos:column="33"/></name><index pos:line="18" pos:column="33">[<expr><name pos:line="18" pos:column="34">stage<pos:position pos:line="18" pos:column="39"/></name> <operator pos:line="18" pos:column="40">-<pos:position pos:line="18" pos:column="41"/></operator> <literal type="number" pos:line="18" pos:column="42">1<pos:position pos:line="18" pos:column="43"/></literal></expr>]<pos:position pos:line="18" pos:column="44"/></index></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="46">&amp;<pos:position pos:line="18" pos:column="51"/></operator><name><name pos:line="18" pos:column="47">ce<pos:position pos:line="18" pos:column="49"/></name><operator pos:line="18" pos:column="49">-&gt;<pos:position pos:line="18" pos:column="54"/></operator><name pos:line="18" pos:column="51">oid<pos:position pos:line="18" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="56"/></expr_stmt>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name pos:line="19" pos:column="21">stage<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">==<pos:position pos:line="19" pos:column="29"/></operator> <literal type="number" pos:line="19" pos:column="30">2<pos:position pos:line="19" pos:column="31"/></literal></expr>)<pos:position pos:line="19" pos:column="32"/></condition><then pos:line="19" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="25">mode<pos:position pos:line="20" pos:column="29"/></name> <operator pos:line="20" pos:column="30">=<pos:position pos:line="20" pos:column="31"/></operator> <call><name pos:line="20" pos:column="32">create_ce_mode<pos:position pos:line="20" pos:column="46"/></name><argument_list pos:line="20" pos:column="46">(<argument><expr><name><name pos:line="20" pos:column="47">ce<pos:position pos:line="20" pos:column="49"/></name><operator pos:line="20" pos:column="49">-&gt;<pos:position pos:line="20" pos:column="54"/></operator><name pos:line="20" pos:column="51">ce_mode<pos:position pos:line="20" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="60"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="21" pos:column="17">pos<pos:position pos:line="21" pos:column="20"/></name><operator pos:line="21" pos:column="20">++<pos:position pos:line="21" pos:column="22"/></operator></expr>;<pos:position pos:line="21" pos:column="23"/></expr_stmt>
		<expr_stmt><expr><name pos:line="22" pos:column="17">ce<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <name><name pos:line="22" pos:column="22">active_cache<pos:position pos:line="22" pos:column="34"/></name><index pos:line="22" pos:column="34">[<expr><name pos:line="22" pos:column="35">pos<pos:position pos:line="22" pos:column="38"/></name></expr>]<pos:position pos:line="22" pos:column="39"/></index></name></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></while>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><call><name pos:line="24" pos:column="13">is_null_oid<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><operator pos:line="24" pos:column="25">&amp;<pos:position pos:line="24" pos:column="30"/></operator><name><name pos:line="24" pos:column="26">threeway<pos:position pos:line="24" pos:column="34"/></name><index pos:line="24" pos:column="34">[<expr><literal type="number" pos:line="24" pos:column="35">1<pos:position pos:line="24" pos:column="36"/></literal></expr>]<pos:position pos:line="24" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="24" pos:column="38"/></argument_list></call> <operator pos:line="24" pos:column="39">||<pos:position pos:line="24" pos:column="41"/></operator> <call><name pos:line="24" pos:column="42">is_null_oid<pos:position pos:line="24" pos:column="53"/></name><argument_list pos:line="24" pos:column="53">(<argument><expr><operator pos:line="24" pos:column="54">&amp;<pos:position pos:line="24" pos:column="59"/></operator><name><name pos:line="24" pos:column="55">threeway<pos:position pos:line="24" pos:column="63"/></name><index pos:line="24" pos:column="63">[<expr><literal type="number" pos:line="24" pos:column="64">2<pos:position pos:line="24" pos:column="65"/></literal></expr>]<pos:position pos:line="24" pos:column="66"/></index></name></expr></argument>)<pos:position pos:line="24" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="68"/></condition><then pos:line="24" pos:column="68">
		<block type="pseudo"><return pos:line="25" pos:column="17">return <expr><call><name pos:line="25" pos:column="24">error<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><call><name pos:line="25" pos:column="30">_<pos:position pos:line="25" pos:column="31"/></name><argument_list pos:line="25" pos:column="31">(<argument><expr><literal type="string" pos:line="25" pos:column="32">"path '%s' does not have necessary versions"<pos:position pos:line="25" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="77"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="25" pos:column="79">path<pos:position pos:line="25" pos:column="83"/></name></expr></argument>)<pos:position pos:line="25" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="85"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="27" pos:column="9">read_mmblob<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><operator pos:line="27" pos:column="21">&amp;<pos:position pos:line="27" pos:column="26"/></operator><name pos:line="27" pos:column="22">ancestor<pos:position pos:line="27" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="32">&amp;<pos:position pos:line="27" pos:column="37"/></operator><name><name pos:line="27" pos:column="33">threeway<pos:position pos:line="27" pos:column="41"/></name><index pos:line="27" pos:column="41">[<expr><literal type="number" pos:line="27" pos:column="42">0<pos:position pos:line="27" pos:column="43"/></literal></expr>]<pos:position pos:line="27" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">read_mmblob<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><operator pos:line="28" pos:column="21">&amp;<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="22">ours<pos:position pos:line="28" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="28">&amp;<pos:position pos:line="28" pos:column="33"/></operator><name><name pos:line="28" pos:column="29">threeway<pos:position pos:line="28" pos:column="37"/></name><index pos:line="28" pos:column="37">[<expr><literal type="number" pos:line="28" pos:column="38">1<pos:position pos:line="28" pos:column="39"/></literal></expr>]<pos:position pos:line="28" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="28" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">read_mmblob<pos:position pos:line="29" pos:column="20"/></name><argument_list pos:line="29" pos:column="20">(<argument><expr><operator pos:line="29" pos:column="21">&amp;<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="22">theirs<pos:position pos:line="29" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="30">&amp;<pos:position pos:line="29" pos:column="35"/></operator><name><name pos:line="29" pos:column="31">threeway<pos:position pos:line="29" pos:column="39"/></name><index pos:line="29" pos:column="39">[<expr><literal type="number" pos:line="29" pos:column="40">2<pos:position pos:line="29" pos:column="41"/></literal></expr>]<pos:position pos:line="29" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="29" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt>

	<comment type="block" pos:line="31" pos:column="9">/*
	 * NEEDSWORK: re-create conflicts from merges with
	 * merge.renormalize set, too
	 */</comment>
	<expr_stmt><expr><name pos:line="35" pos:column="9">status<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <call><name pos:line="35" pos:column="18">ll_merge<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">(<argument><expr><operator pos:line="35" pos:column="27">&amp;<pos:position pos:line="35" pos:column="32"/></operator><name pos:line="35" pos:column="28">result_buf<pos:position pos:line="35" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="40">path<pos:position pos:line="35" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="46">&amp;<pos:position pos:line="35" pos:column="51"/></operator><name pos:line="35" pos:column="47">ancestor<pos:position pos:line="35" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="57">"base"<pos:position pos:line="35" pos:column="63"/></literal></expr></argument>,
			  <argument><expr><operator pos:line="36" pos:column="27">&amp;<pos:position pos:line="36" pos:column="32"/></operator><name pos:line="36" pos:column="28">ours<pos:position pos:line="36" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="34">"ours"<pos:position pos:line="36" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="36" pos:column="42">&amp;<pos:position pos:line="36" pos:column="47"/></operator><name pos:line="36" pos:column="43">theirs<pos:position pos:line="36" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="51">"theirs"<pos:position pos:line="36" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="61">NULL<pos:position pos:line="36" pos:column="65"/></name></expr></argument>)<pos:position pos:line="36" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="67"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">free<pos:position pos:line="37" pos:column="13"/></name><argument_list pos:line="37" pos:column="13">(<argument><expr><name><name pos:line="37" pos:column="14">ancestor<pos:position pos:line="37" pos:column="22"/></name><operator pos:line="37" pos:column="22">.<pos:position pos:line="37" pos:column="23"/></operator><name pos:line="37" pos:column="23">ptr<pos:position pos:line="37" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">free<pos:position pos:line="38" pos:column="13"/></name><argument_list pos:line="38" pos:column="13">(<argument><expr><name><name pos:line="38" pos:column="14">ours<pos:position pos:line="38" pos:column="18"/></name><operator pos:line="38" pos:column="18">.<pos:position pos:line="38" pos:column="19"/></operator><name pos:line="38" pos:column="19">ptr<pos:position pos:line="38" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">free<pos:position pos:line="39" pos:column="13"/></name><argument_list pos:line="39" pos:column="13">(<argument><expr><name><name pos:line="39" pos:column="14">theirs<pos:position pos:line="39" pos:column="20"/></name><operator pos:line="39" pos:column="20">.<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="21">ptr<pos:position pos:line="39" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="26"/></expr_stmt>
	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">status<pos:position pos:line="40" pos:column="19"/></name> <operator pos:line="40" pos:column="20">&lt;<pos:position pos:line="40" pos:column="24"/></operator> <literal type="number" pos:line="40" pos:column="22">0<pos:position pos:line="40" pos:column="23"/></literal> <operator pos:line="40" pos:column="24">||<pos:position pos:line="40" pos:column="26"/></operator> <operator pos:line="40" pos:column="27">!<pos:position pos:line="40" pos:column="28"/></operator><name><name pos:line="40" pos:column="28">result_buf<pos:position pos:line="40" pos:column="38"/></name><operator pos:line="40" pos:column="38">.<pos:position pos:line="40" pos:column="39"/></operator><name pos:line="40" pos:column="39">ptr<pos:position pos:line="40" pos:column="42"/></name></name></expr>)<pos:position pos:line="40" pos:column="43"/></condition><then pos:line="40" pos:column="43"> <block pos:line="40" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">free<pos:position pos:line="41" pos:column="21"/></name><argument_list pos:line="41" pos:column="21">(<argument><expr><name><name pos:line="41" pos:column="22">result_buf<pos:position pos:line="41" pos:column="32"/></name><operator pos:line="41" pos:column="32">.<pos:position pos:line="41" pos:column="33"/></operator><name pos:line="41" pos:column="33">ptr<pos:position pos:line="41" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="38"/></expr_stmt>
		<return pos:line="42" pos:column="17">return <expr><call><name pos:line="42" pos:column="24">error<pos:position pos:line="42" pos:column="29"/></name><argument_list pos:line="42" pos:column="29">(<argument><expr><call><name pos:line="42" pos:column="30">_<pos:position pos:line="42" pos:column="31"/></name><argument_list pos:line="42" pos:column="31">(<argument><expr><literal type="string" pos:line="42" pos:column="32">"path '%s': cannot merge"<pos:position pos:line="42" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="42" pos:column="60">path<pos:position pos:line="42" pos:column="64"/></name></expr></argument>)<pos:position pos:line="42" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="66"/></return>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="45" pos:column="9">/*
	 * NEEDSWORK:
	 * There is absolutely no reason to write this as a blob object
	 * and create a phony cache entry.  This hack is primarily to get
	 * to the write_entry() machinery that massages the contents to
	 * work-tree format and writes out which only allows it for a
	 * cache entry.  The code in write_entry() needs to be refactored
	 * to allow us to feed a &lt;buffer, size, mode&gt; instead of a cache
	 * entry.  Such a refactoring would help merge_recursive as well
	 * (it also writes the merge result to the object database even
	 * when it may contain conflicts).
	 */</comment>
	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><call><name pos:line="57" pos:column="13">write_sha1_file<pos:position pos:line="57" pos:column="28"/></name><argument_list pos:line="57" pos:column="28">(<argument><expr><name><name pos:line="57" pos:column="29">result_buf<pos:position pos:line="57" pos:column="39"/></name><operator pos:line="57" pos:column="39">.<pos:position pos:line="57" pos:column="40"/></operator><name pos:line="57" pos:column="40">ptr<pos:position pos:line="57" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="45">result_buf<pos:position pos:line="57" pos:column="55"/></name><operator pos:line="57" pos:column="55">.<pos:position pos:line="57" pos:column="56"/></operator><name pos:line="57" pos:column="56">size<pos:position pos:line="57" pos:column="60"/></name></name></expr></argument>,
			    <argument><expr><name pos:line="58" pos:column="29">blob_type<pos:position pos:line="58" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="40">oid<pos:position pos:line="58" pos:column="43"/></name><operator pos:line="58" pos:column="43">.<pos:position pos:line="58" pos:column="44"/></operator><name pos:line="58" pos:column="44">hash<pos:position pos:line="58" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="50"/></condition><then pos:line="58" pos:column="50">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="17">die<pos:position pos:line="59" pos:column="20"/></name><argument_list pos:line="59" pos:column="20">(<argument><expr><call><name pos:line="59" pos:column="21">_<pos:position pos:line="59" pos:column="22"/></name><argument_list pos:line="59" pos:column="22">(<argument><expr><literal type="string" pos:line="59" pos:column="23">"Unable to add merge result for '%s'"<pos:position pos:line="59" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="59" pos:column="63">path<pos:position pos:line="59" pos:column="67"/></name></expr></argument>)<pos:position pos:line="59" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="69"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="60" pos:column="9">free<pos:position pos:line="60" pos:column="13"/></name><argument_list pos:line="60" pos:column="13">(<argument><expr><name><name pos:line="60" pos:column="14">result_buf<pos:position pos:line="60" pos:column="24"/></name><operator pos:line="60" pos:column="24">.<pos:position pos:line="60" pos:column="25"/></operator><name pos:line="60" pos:column="25">ptr<pos:position pos:line="60" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name pos:line="61" pos:column="9">ce<pos:position pos:line="61" pos:column="11"/></name> <operator pos:line="61" pos:column="12">=<pos:position pos:line="61" pos:column="13"/></operator> <call><name pos:line="61" pos:column="14">make_cache_entry<pos:position pos:line="61" pos:column="30"/></name><argument_list pos:line="61" pos:column="30">(<argument><expr><name pos:line="61" pos:column="31">mode<pos:position pos:line="61" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="37">oid<pos:position pos:line="61" pos:column="40"/></name><operator pos:line="61" pos:column="40">.<pos:position pos:line="61" pos:column="41"/></operator><name pos:line="61" pos:column="41">hash<pos:position pos:line="61" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="47">path<pos:position pos:line="61" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="53">2<pos:position pos:line="61" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="56">0<pos:position pos:line="61" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="59"/></expr_stmt>
	<if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><operator pos:line="62" pos:column="13">!<pos:position pos:line="62" pos:column="14"/></operator><name pos:line="62" pos:column="14">ce<pos:position pos:line="62" pos:column="16"/></name></expr>)<pos:position pos:line="62" pos:column="17"/></condition><then pos:line="62" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="17">die<pos:position pos:line="63" pos:column="20"/></name><argument_list pos:line="63" pos:column="20">(<argument><expr><call><name pos:line="63" pos:column="21">_<pos:position pos:line="63" pos:column="22"/></name><argument_list pos:line="63" pos:column="22">(<argument><expr><literal type="string" pos:line="63" pos:column="23">"make_cache_entry failed for path '%s'"<pos:position pos:line="63" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="63" pos:column="65">path<pos:position pos:line="63" pos:column="69"/></name></expr></argument>)<pos:position pos:line="63" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="71"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="64" pos:column="9">status<pos:position pos:line="64" pos:column="15"/></name> <operator pos:line="64" pos:column="16">=<pos:position pos:line="64" pos:column="17"/></operator> <call><name pos:line="64" pos:column="18">checkout_entry<pos:position pos:line="64" pos:column="32"/></name><argument_list pos:line="64" pos:column="32">(<argument><expr><name pos:line="64" pos:column="33">ce<pos:position pos:line="64" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="37">state<pos:position pos:line="64" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="44">NULL<pos:position pos:line="64" pos:column="48"/></name></expr></argument>)<pos:position pos:line="64" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="65" pos:column="9">free<pos:position pos:line="65" pos:column="13"/></name><argument_list pos:line="65" pos:column="13">(<argument><expr><name pos:line="65" pos:column="14">ce<pos:position pos:line="65" pos:column="16"/></name></expr></argument>)<pos:position pos:line="65" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="18"/></expr_stmt>
	<return pos:line="66" pos:column="9">return <expr><name pos:line="66" pos:column="16">status<pos:position pos:line="66" pos:column="22"/></name></expr>;<pos:position pos:line="66" pos:column="23"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
