<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3222_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">compare_entry<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">cache_entry<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">ce<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="56">const<pos:position pos:line="1" pos:column="61"/></specifier> <name><name pos:line="1" pos:column="62">struct<pos:position pos:line="1" pos:column="68"/></name> <name pos:line="1" pos:column="69">traverse_info<pos:position pos:line="1" pos:column="82"/></name></name> <modifier pos:line="1" pos:column="83">*<pos:position pos:line="1" pos:column="84"/></modifier></type><name pos:line="1" pos:column="84">info<pos:position pos:line="1" pos:column="88"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="90">const<pos:position pos:line="1" pos:column="95"/></specifier> <name><name pos:line="1" pos:column="96">struct<pos:position pos:line="1" pos:column="102"/></name> <name pos:line="1" pos:column="103">name_entry<pos:position pos:line="1" pos:column="113"/></name></name> <modifier pos:line="1" pos:column="114">*<pos:position pos:line="1" pos:column="115"/></modifier></type><name pos:line="1" pos:column="115">n<pos:position pos:line="1" pos:column="116"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="117"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">cmp<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><call><name pos:line="3" pos:column="19">do_compare_entry<pos:position pos:line="3" pos:column="35"/></name><argument_list pos:line="3" pos:column="35">(<argument><expr><name pos:line="3" pos:column="36">ce<pos:position pos:line="3" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="40">info<pos:position pos:line="3" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="46">n<pos:position pos:line="3" pos:column="47"/></name></expr></argument>)<pos:position pos:line="3" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="49"/></decl_stmt>
	<if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><name pos:line="4" pos:column="13">cmp<pos:position pos:line="4" pos:column="16"/></name></expr>)<pos:position pos:line="4" pos:column="17"/></condition><then pos:line="4" pos:column="17">
		<block type="pseudo"><return pos:line="5" pos:column="17">return <expr><name pos:line="5" pos:column="24">cmp<pos:position pos:line="5" pos:column="27"/></name></expr>;<pos:position pos:line="5" pos:column="28"/></return></block></then></if>

	<comment type="block" pos:line="7" pos:column="9">/*
	 * Even if the beginning compared identically, the ce should
	 * compare as bigger than a directory leading up to it!
	 */</comment>
	<return pos:line="11" pos:column="9">return <expr><call><name pos:line="11" pos:column="16">ce_namelen<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><name pos:line="11" pos:column="27">ce<pos:position pos:line="11" pos:column="29"/></name></expr></argument>)<pos:position pos:line="11" pos:column="30"/></argument_list></call> <operator pos:line="11" pos:column="31">&gt;<pos:position pos:line="11" pos:column="35"/></operator> <call><name pos:line="11" pos:column="33">traverse_path_len<pos:position pos:line="11" pos:column="50"/></name><argument_list pos:line="11" pos:column="50">(<argument><expr><name pos:line="11" pos:column="51">info<pos:position pos:line="11" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="57">n<pos:position pos:line="11" pos:column="58"/></name></expr></argument>)<pos:position pos:line="11" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="60"/></return>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
