<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6259_git-2.9.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name><modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type> <name pos:line="1" pos:column="14">internal_memalign<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">mstate<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">m<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">size_t<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">alignment<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="60">size_t<pos:position pos:line="1" pos:column="66"/></name></type> <name pos:line="1" pos:column="67">bytes<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list> <block pos:line="1" pos:column="74">{
  <if pos:line="2" pos:column="3">if <condition pos:line="2" pos:column="6">(<expr><name pos:line="2" pos:column="7">alignment<pos:position pos:line="2" pos:column="16"/></name> <operator pos:line="2" pos:column="17">&lt;=<pos:position pos:line="2" pos:column="22"/></operator> <name pos:line="2" pos:column="20">MALLOC_ALIGNMENT<pos:position pos:line="2" pos:column="36"/></name></expr>)<pos:position pos:line="2" pos:column="37"/></condition><then pos:line="2" pos:column="37">    <comment type="block" pos:line="2" pos:column="41">/* Can just use malloc */</comment>
    <block type="pseudo"><return pos:line="3" pos:column="5">return <expr><call><name pos:line="3" pos:column="12">internal_malloc<pos:position pos:line="3" pos:column="27"/></name><argument_list pos:line="3" pos:column="27">(<argument><expr><name pos:line="3" pos:column="28">m<pos:position pos:line="3" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="31">bytes<pos:position pos:line="3" pos:column="36"/></name></expr></argument>)<pos:position pos:line="3" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="38"/></return></block></then></if>
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><name pos:line="4" pos:column="7">alignment<pos:position pos:line="4" pos:column="16"/></name> <operator pos:line="4" pos:column="17">&lt;<pos:position pos:line="4" pos:column="21"/></operator>  <name pos:line="4" pos:column="20">MIN_CHUNK_SIZE<pos:position pos:line="4" pos:column="34"/></name></expr>)<pos:position pos:line="4" pos:column="35"/></condition><then pos:line="4" pos:column="35"> <comment type="block" pos:line="4" pos:column="36">/* must be at least a minimum chunk size */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="5" pos:column="5">alignment<pos:position pos:line="5" pos:column="14"/></name> <operator pos:line="5" pos:column="15">=<pos:position pos:line="5" pos:column="16"/></operator> <name pos:line="5" pos:column="17">MIN_CHUNK_SIZE<pos:position pos:line="5" pos:column="31"/></name></expr>;<pos:position pos:line="5" pos:column="32"/></expr_stmt></block></then></if>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><operator pos:line="6" pos:column="7">(<pos:position pos:line="6" pos:column="8"/></operator><name pos:line="6" pos:column="8">alignment<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">&amp;<pos:position pos:line="6" pos:column="23"/></operator> <operator pos:line="6" pos:column="20">(<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="21">alignment<pos:position pos:line="6" pos:column="30"/></name><operator pos:line="6" pos:column="30">-<pos:position pos:line="6" pos:column="31"/></operator><name pos:line="6" pos:column="31">SIZE_T_ONE<pos:position pos:line="6" pos:column="41"/></name><operator pos:line="6" pos:column="41">)<pos:position pos:line="6" pos:column="42"/></operator><operator pos:line="6" pos:column="42">)<pos:position pos:line="6" pos:column="43"/></operator> <operator pos:line="6" pos:column="44">!=<pos:position pos:line="6" pos:column="46"/></operator> <literal type="number" pos:line="6" pos:column="47">0<pos:position pos:line="6" pos:column="48"/></literal></expr>)<pos:position pos:line="6" pos:column="49"/></condition><then pos:line="6" pos:column="49"> <block pos:line="6" pos:column="50">{<comment type="block" pos:line="6" pos:column="51">/* Ensure a power of 2 */</comment>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">size_t<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">a<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><name pos:line="7" pos:column="16">MALLOC_ALIGNMENT<pos:position pos:line="7" pos:column="32"/></name> <operator pos:line="7" pos:column="33">&lt;&lt;<pos:position pos:line="7" pos:column="41"/></operator> <literal type="number" pos:line="7" pos:column="36">1<pos:position pos:line="7" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="38"/></decl_stmt>
    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><name pos:line="8" pos:column="12">a<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">&lt;<pos:position pos:line="8" pos:column="18"/></operator> <name pos:line="8" pos:column="16">alignment<pos:position pos:line="8" pos:column="25"/></name></expr>)<pos:position pos:line="8" pos:column="26"/></condition> <block type="pseudo"><expr_stmt><expr><name pos:line="8" pos:column="27">a<pos:position pos:line="8" pos:column="28"/></name> <operator pos:line="8" pos:column="29">&lt;&lt;=<pos:position pos:line="8" pos:column="38"/></operator> <literal type="number" pos:line="8" pos:column="33">1<pos:position pos:line="8" pos:column="34"/></literal></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt></block></while>
    <expr_stmt><expr><name pos:line="9" pos:column="5">alignment<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <name pos:line="9" pos:column="17">a<pos:position pos:line="9" pos:column="18"/></name></expr>;<pos:position pos:line="9" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="10" pos:column="4"/></block></then></if>

  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><name pos:line="12" pos:column="7">bytes<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">&gt;=<pos:position pos:line="12" pos:column="18"/></operator> <name pos:line="12" pos:column="16">MAX_REQUEST<pos:position pos:line="12" pos:column="27"/></name> <operator pos:line="12" pos:column="28">-<pos:position pos:line="12" pos:column="29"/></operator> <name pos:line="12" pos:column="30">alignment<pos:position pos:line="12" pos:column="39"/></name></expr>)<pos:position pos:line="12" pos:column="40"/></condition><then pos:line="12" pos:column="40"> <block pos:line="12" pos:column="41">{
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">m<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">!=<pos:position pos:line="13" pos:column="13"/></operator> <literal type="number" pos:line="13" pos:column="14">0<pos:position pos:line="13" pos:column="15"/></literal></expr>)<pos:position pos:line="13" pos:column="16"/></condition><then pos:line="13" pos:column="16">  <block pos:line="13" pos:column="18">{ <comment type="block" pos:line="13" pos:column="20">/* Test isn't needed but avoids compiler warning */</comment>
      <expr_stmt><expr><name pos:line="14" pos:column="7">MALLOC_FAILURE_ACTION<pos:position pos:line="14" pos:column="28"/></name></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
  }<pos:position pos:line="16" pos:column="4"/></block></then>
  <else pos:line="17" pos:column="3">else <block pos:line="17" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">size_t<pos:position pos:line="18" pos:column="11"/></name></type> <name pos:line="18" pos:column="12">nb<pos:position pos:line="18" pos:column="14"/></name> <init pos:line="18" pos:column="15">= <expr><call><name pos:line="18" pos:column="17">request2size<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">bytes<pos:position pos:line="18" pos:column="35"/></name></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">size_t<pos:position pos:line="19" pos:column="11"/></name></type> <name pos:line="19" pos:column="12">req<pos:position pos:line="19" pos:column="15"/></name> <init pos:line="19" pos:column="16">= <expr><name pos:line="19" pos:column="18">nb<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">+<pos:position pos:line="19" pos:column="22"/></operator> <name pos:line="19" pos:column="23">alignment<pos:position pos:line="19" pos:column="32"/></name> <operator pos:line="19" pos:column="33">+<pos:position pos:line="19" pos:column="34"/></operator> <name pos:line="19" pos:column="35">MIN_CHUNK_SIZE<pos:position pos:line="19" pos:column="49"/></name> <operator pos:line="19" pos:column="50">-<pos:position pos:line="19" pos:column="51"/></operator> <name pos:line="19" pos:column="52">CHUNK_OVERHEAD<pos:position pos:line="19" pos:column="66"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="67"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">char<pos:position pos:line="20" pos:column="9"/></name><modifier pos:line="20" pos:column="9">*<pos:position pos:line="20" pos:column="10"/></modifier></type> <name pos:line="20" pos:column="11">mem<pos:position pos:line="20" pos:column="14"/></name> <init pos:line="20" pos:column="15">= <expr><operator pos:line="20" pos:column="17">(<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">char<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">*<pos:position pos:line="20" pos:column="23"/></operator><operator pos:line="20" pos:column="23">)<pos:position pos:line="20" pos:column="24"/></operator><call><name pos:line="20" pos:column="24">internal_malloc<pos:position pos:line="20" pos:column="39"/></name><argument_list pos:line="20" pos:column="39">(<argument><expr><name pos:line="20" pos:column="40">m<pos:position pos:line="20" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="43">req<pos:position pos:line="20" pos:column="46"/></name></expr></argument>)<pos:position pos:line="20" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="48"/></decl_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">mem<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">!=<pos:position pos:line="21" pos:column="15"/></operator> <literal type="number" pos:line="21" pos:column="16">0<pos:position pos:line="21" pos:column="17"/></literal></expr>)<pos:position pos:line="21" pos:column="18"/></condition><then pos:line="21" pos:column="18"> <block pos:line="21" pos:column="19">{
      <decl_stmt><decl><type><name pos:line="22" pos:column="7">void<pos:position pos:line="22" pos:column="11"/></name><modifier pos:line="22" pos:column="11">*<pos:position pos:line="22" pos:column="12"/></modifier></type> <name pos:line="22" pos:column="13">leader<pos:position pos:line="22" pos:column="19"/></name> <init pos:line="22" pos:column="20">= <expr><literal type="number" pos:line="22" pos:column="22">0<pos:position pos:line="22" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="24"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="23" pos:column="7">void<pos:position pos:line="23" pos:column="11"/></name><modifier pos:line="23" pos:column="11">*<pos:position pos:line="23" pos:column="12"/></modifier></type> <name pos:line="23" pos:column="13">trailer<pos:position pos:line="23" pos:column="20"/></name> <init pos:line="23" pos:column="21">= <expr><literal type="number" pos:line="23" pos:column="23">0<pos:position pos:line="23" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="23" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="24" pos:column="7">mchunkptr<pos:position pos:line="24" pos:column="16"/></name></type> <name pos:line="24" pos:column="17">p<pos:position pos:line="24" pos:column="18"/></name> <init pos:line="24" pos:column="19">= <expr><call><name pos:line="24" pos:column="21">mem2chunk<pos:position pos:line="24" pos:column="30"/></name><argument_list pos:line="24" pos:column="30">(<argument><expr><name pos:line="24" pos:column="31">mem<pos:position pos:line="24" pos:column="34"/></name></expr></argument>)<pos:position pos:line="24" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="36"/></decl_stmt>

      <if pos:line="26" pos:column="7">if <condition pos:line="26" pos:column="10">(<expr><call><name pos:line="26" pos:column="11">PREACTION<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><name pos:line="26" pos:column="21">m<pos:position pos:line="26" pos:column="22"/></name></expr></argument>)<pos:position pos:line="26" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="24"/></condition><then pos:line="26" pos:column="24"> <block type="pseudo"><return pos:line="26" pos:column="25">return <expr><literal type="number" pos:line="26" pos:column="32">0<pos:position pos:line="26" pos:column="33"/></literal></expr>;<pos:position pos:line="26" pos:column="34"/></return></block></then></if>
      <if pos:line="27" pos:column="7">if <condition pos:line="27" pos:column="10">(<expr><operator pos:line="27" pos:column="11">(<pos:position pos:line="27" pos:column="12"/></operator><operator pos:line="27" pos:column="12">(<pos:position pos:line="27" pos:column="13"/></operator><call pos:line="27" pos:column="13">(<name pos:line="27" pos:column="14">size_t<pos:position pos:line="27" pos:column="20"/></name>)<argument_list pos:line="27" pos:column="21">(<argument><expr><name pos:line="27" pos:column="22">mem<pos:position pos:line="27" pos:column="25"/></name></expr></argument>)<pos:position pos:line="27" pos:column="26"/></argument_list></call><operator pos:line="27" pos:column="26">)<pos:position pos:line="27" pos:column="27"/></operator> <operator pos:line="27" pos:column="28">%<pos:position pos:line="27" pos:column="29"/></operator> <name pos:line="27" pos:column="30">alignment<pos:position pos:line="27" pos:column="39"/></name><operator pos:line="27" pos:column="39">)<pos:position pos:line="27" pos:column="40"/></operator> <operator pos:line="27" pos:column="41">!=<pos:position pos:line="27" pos:column="43"/></operator> <literal type="number" pos:line="27" pos:column="44">0<pos:position pos:line="27" pos:column="45"/></literal></expr>)<pos:position pos:line="27" pos:column="46"/></condition><then pos:line="27" pos:column="46"> <block pos:line="27" pos:column="47">{ <comment type="block" pos:line="27" pos:column="49">/* misaligned */</comment>
	<comment type="block" pos:line="28" pos:column="9">/*
	  Find an aligned spot inside chunk.  Since we need to give
	  back leading space in a chunk of at least MIN_CHUNK_SIZE, if
	  the first calculation places us at a spot with less than
	  MIN_CHUNK_SIZE leader, we can move to the next aligned spot.
	  We've allocated enough total room so that this is always
	  possible.
	*/</comment>
	<decl_stmt><decl><type><name pos:line="36" pos:column="9">char<pos:position pos:line="36" pos:column="13"/></name><modifier pos:line="36" pos:column="13">*<pos:position pos:line="36" pos:column="14"/></modifier></type> <name pos:line="36" pos:column="15">br<pos:position pos:line="36" pos:column="17"/></name> <init pos:line="36" pos:column="18">= <expr><operator pos:line="36" pos:column="20">(<pos:position pos:line="36" pos:column="21"/></operator><name pos:line="36" pos:column="21">char<pos:position pos:line="36" pos:column="25"/></name><operator pos:line="36" pos:column="25">*<pos:position pos:line="36" pos:column="26"/></operator><operator pos:line="36" pos:column="26">)<pos:position pos:line="36" pos:column="27"/></operator><call><name pos:line="36" pos:column="27">mem2chunk<pos:position pos:line="36" pos:column="36"/></name><argument_list pos:line="36" pos:column="36">(<argument><expr><call pos:line="36" pos:column="37">(<name pos:line="36" pos:column="38">size_t<pos:position pos:line="36" pos:column="44"/></name>)<argument_list pos:line="36" pos:column="45">(<argument><expr><operator pos:line="36" pos:column="46">(<pos:position pos:line="36" pos:column="47"/></operator><call pos:line="36" pos:column="47">(<name pos:line="36" pos:column="48">size_t<pos:position pos:line="36" pos:column="54"/></name>)<argument_list pos:line="36" pos:column="55">(<argument><expr><name pos:line="36" pos:column="56">mem<pos:position pos:line="36" pos:column="59"/></name> <operator pos:line="36" pos:column="60">+<pos:position pos:line="36" pos:column="61"/></operator>
						       <name pos:line="37" pos:column="56">alignment<pos:position pos:line="37" pos:column="65"/></name> <operator pos:line="37" pos:column="66">-<pos:position pos:line="37" pos:column="67"/></operator>
						       <name pos:line="38" pos:column="56">SIZE_T_ONE<pos:position pos:line="38" pos:column="66"/></name></expr></argument>)<pos:position pos:line="38" pos:column="67"/></argument_list></call><operator pos:line="38" pos:column="67">)<pos:position pos:line="38" pos:column="68"/></operator> <operator pos:line="38" pos:column="69">&amp;<pos:position pos:line="38" pos:column="74"/></operator>
					     <operator pos:line="39" pos:column="46">-<pos:position pos:line="39" pos:column="47"/></operator><name pos:line="39" pos:column="47">alignment<pos:position pos:line="39" pos:column="56"/></name></expr></argument>)<pos:position pos:line="39" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="39" pos:column="59"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="40" pos:column="9">char<pos:position pos:line="40" pos:column="13"/></name><modifier pos:line="40" pos:column="13">*<pos:position pos:line="40" pos:column="14"/></modifier></type> <name pos:line="40" pos:column="15">pos<pos:position pos:line="40" pos:column="18"/></name> <init pos:line="40" pos:column="19">= <expr><ternary><condition><expr><operator pos:line="40" pos:column="21">(<pos:position pos:line="40" pos:column="22"/></operator><call pos:line="40" pos:column="22">(<name pos:line="40" pos:column="23">size_t<pos:position pos:line="40" pos:column="29"/></name>)<argument_list pos:line="40" pos:column="30">(<argument><expr><name pos:line="40" pos:column="31">br<pos:position pos:line="40" pos:column="33"/></name> <operator pos:line="40" pos:column="34">-<pos:position pos:line="40" pos:column="35"/></operator> <operator pos:line="40" pos:column="36">(<pos:position pos:line="40" pos:column="37"/></operator><name pos:line="40" pos:column="37">char<pos:position pos:line="40" pos:column="41"/></name><operator pos:line="40" pos:column="41">*<pos:position pos:line="40" pos:column="42"/></operator><operator pos:line="40" pos:column="42">)<pos:position pos:line="40" pos:column="43"/></operator><operator pos:line="40" pos:column="43">(<pos:position pos:line="40" pos:column="44"/></operator><name pos:line="40" pos:column="44">p<pos:position pos:line="40" pos:column="45"/></name><operator pos:line="40" pos:column="45">)<pos:position pos:line="40" pos:column="46"/></operator></expr></argument>)<pos:position pos:line="40" pos:column="47"/></argument_list></call> <operator pos:line="40" pos:column="48">&gt;=<pos:position pos:line="40" pos:column="53"/></operator> <name pos:line="40" pos:column="51">MIN_CHUNK_SIZE<pos:position pos:line="40" pos:column="65"/></name><operator pos:line="40" pos:column="65">)<pos:position pos:line="40" pos:column="66"/></operator></expr>?<pos:position pos:line="40" pos:column="67"/></condition><then pos:line="40" pos:column="67">
	  <expr><name pos:line="41" pos:column="11">br<pos:position pos:line="41" pos:column="13"/></name></expr> <pos:position pos:line="41" pos:column="14"/></then><else pos:line="41" pos:column="14">: <expr><name pos:line="41" pos:column="16">br<pos:position pos:line="41" pos:column="18"/></name><operator pos:line="41" pos:column="18">+<pos:position pos:line="41" pos:column="19"/></operator><name pos:line="41" pos:column="19">alignment<pos:position pos:line="41" pos:column="28"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="41" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="42" pos:column="9">mchunkptr<pos:position pos:line="42" pos:column="18"/></name></type> <name pos:line="42" pos:column="19">newp<pos:position pos:line="42" pos:column="23"/></name> <init pos:line="42" pos:column="24">= <expr><operator pos:line="42" pos:column="26">(<pos:position pos:line="42" pos:column="27"/></operator><name pos:line="42" pos:column="27">mchunkptr<pos:position pos:line="42" pos:column="36"/></name><operator pos:line="42" pos:column="36">)<pos:position pos:line="42" pos:column="37"/></operator><name pos:line="42" pos:column="37">pos<pos:position pos:line="42" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="42" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="43" pos:column="9">size_t<pos:position pos:line="43" pos:column="15"/></name></type> <name pos:line="43" pos:column="16">leadsize<pos:position pos:line="43" pos:column="24"/></name> <init pos:line="43" pos:column="25">= <expr><name pos:line="43" pos:column="27">pos<pos:position pos:line="43" pos:column="30"/></name> <operator pos:line="43" pos:column="31">-<pos:position pos:line="43" pos:column="32"/></operator> <operator pos:line="43" pos:column="33">(<pos:position pos:line="43" pos:column="34"/></operator><name pos:line="43" pos:column="34">char<pos:position pos:line="43" pos:column="38"/></name><operator pos:line="43" pos:column="38">*<pos:position pos:line="43" pos:column="39"/></operator><operator pos:line="43" pos:column="39">)<pos:position pos:line="43" pos:column="40"/></operator><operator pos:line="43" pos:column="40">(<pos:position pos:line="43" pos:column="41"/></operator><name pos:line="43" pos:column="41">p<pos:position pos:line="43" pos:column="42"/></name><operator pos:line="43" pos:column="42">)<pos:position pos:line="43" pos:column="43"/></operator></expr></init></decl>;<pos:position pos:line="43" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="44" pos:column="9">size_t<pos:position pos:line="44" pos:column="15"/></name></type> <name pos:line="44" pos:column="16">newsize<pos:position pos:line="44" pos:column="23"/></name> <init pos:line="44" pos:column="24">= <expr><call><name pos:line="44" pos:column="26">chunksize<pos:position pos:line="44" pos:column="35"/></name><argument_list pos:line="44" pos:column="35">(<argument><expr><name pos:line="44" pos:column="36">p<pos:position pos:line="44" pos:column="37"/></name></expr></argument>)<pos:position pos:line="44" pos:column="38"/></argument_list></call> <operator pos:line="44" pos:column="39">-<pos:position pos:line="44" pos:column="40"/></operator> <name pos:line="44" pos:column="41">leadsize<pos:position pos:line="44" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="44" pos:column="50"/></decl_stmt>

	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><call><name pos:line="46" pos:column="13">is_mmapped<pos:position pos:line="46" pos:column="23"/></name><argument_list pos:line="46" pos:column="23">(<argument><expr><name pos:line="46" pos:column="24">p<pos:position pos:line="46" pos:column="25"/></name></expr></argument>)<pos:position pos:line="46" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="27"/></condition><then pos:line="46" pos:column="27"> <block pos:line="46" pos:column="28">{ <comment type="block" pos:line="46" pos:column="30">/* For mmapped chunks, just adjust offset */</comment>
	  <expr_stmt><expr><name><name pos:line="47" pos:column="11">newp<pos:position pos:line="47" pos:column="15"/></name><operator pos:line="47" pos:column="15">-&gt;<pos:position pos:line="47" pos:column="20"/></operator><name pos:line="47" pos:column="17">prev_foot<pos:position pos:line="47" pos:column="26"/></name></name> <operator pos:line="47" pos:column="27">=<pos:position pos:line="47" pos:column="28"/></operator> <name><name pos:line="47" pos:column="29">p<pos:position pos:line="47" pos:column="30"/></name><operator pos:line="47" pos:column="30">-&gt;<pos:position pos:line="47" pos:column="35"/></operator><name pos:line="47" pos:column="32">prev_foot<pos:position pos:line="47" pos:column="41"/></name></name> <operator pos:line="47" pos:column="42">+<pos:position pos:line="47" pos:column="43"/></operator> <name pos:line="47" pos:column="44">leadsize<pos:position pos:line="47" pos:column="52"/></name></expr>;<pos:position pos:line="47" pos:column="53"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="48" pos:column="11">newp<pos:position pos:line="48" pos:column="15"/></name><operator pos:line="48" pos:column="15">-&gt;<pos:position pos:line="48" pos:column="20"/></operator><name pos:line="48" pos:column="17">head<pos:position pos:line="48" pos:column="21"/></name></name> <operator pos:line="48" pos:column="22">=<pos:position pos:line="48" pos:column="23"/></operator> <operator pos:line="48" pos:column="24">(<pos:position pos:line="48" pos:column="25"/></operator><name pos:line="48" pos:column="25">newsize<pos:position pos:line="48" pos:column="32"/></name><operator pos:line="48" pos:column="32">|<pos:position pos:line="48" pos:column="33"/></operator><name pos:line="48" pos:column="33">CINUSE_BIT<pos:position pos:line="48" pos:column="43"/></name><operator pos:line="48" pos:column="43">)<pos:position pos:line="48" pos:column="44"/></operator></expr>;<pos:position pos:line="48" pos:column="45"/></expr_stmt>
	}<pos:position pos:line="49" pos:column="10"/></block></then>
	<else pos:line="50" pos:column="9">else <block pos:line="50" pos:column="14">{ <comment type="block" pos:line="50" pos:column="16">/* Otherwise, give back leader, use the rest */</comment>
	  <expr_stmt><expr><call><name pos:line="51" pos:column="11">set_inuse<pos:position pos:line="51" pos:column="20"/></name><argument_list pos:line="51" pos:column="20">(<argument><expr><name pos:line="51" pos:column="21">m<pos:position pos:line="51" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="24">newp<pos:position pos:line="51" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="30">newsize<pos:position pos:line="51" pos:column="37"/></name></expr></argument>)<pos:position pos:line="51" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="39"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="52" pos:column="11">set_inuse<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><name pos:line="52" pos:column="21">m<pos:position pos:line="52" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="24">p<pos:position pos:line="52" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="27">leadsize<pos:position pos:line="52" pos:column="35"/></name></expr></argument>)<pos:position pos:line="52" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="37"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="53" pos:column="11">leader<pos:position pos:line="53" pos:column="17"/></name> <operator pos:line="53" pos:column="18">=<pos:position pos:line="53" pos:column="19"/></operator> <call><name pos:line="53" pos:column="20">chunk2mem<pos:position pos:line="53" pos:column="29"/></name><argument_list pos:line="53" pos:column="29">(<argument><expr><name pos:line="53" pos:column="30">p<pos:position pos:line="53" pos:column="31"/></name></expr></argument>)<pos:position pos:line="53" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="33"/></expr_stmt>
	}<pos:position pos:line="54" pos:column="10"/></block></else></if>
	<expr_stmt><expr><name pos:line="55" pos:column="9">p<pos:position pos:line="55" pos:column="10"/></name> <operator pos:line="55" pos:column="11">=<pos:position pos:line="55" pos:column="12"/></operator> <name pos:line="55" pos:column="13">newp<pos:position pos:line="55" pos:column="17"/></name></expr>;<pos:position pos:line="55" pos:column="18"/></expr_stmt>
      }<pos:position pos:line="56" pos:column="8"/></block></then></if>

      <comment type="block" pos:line="58" pos:column="7">/* Give back spare room at the end */</comment>
      <if pos:line="59" pos:column="7">if <condition pos:line="59" pos:column="10">(<expr><operator pos:line="59" pos:column="11">!<pos:position pos:line="59" pos:column="12"/></operator><call><name pos:line="59" pos:column="12">is_mmapped<pos:position pos:line="59" pos:column="22"/></name><argument_list pos:line="59" pos:column="22">(<argument><expr><name pos:line="59" pos:column="23">p<pos:position pos:line="59" pos:column="24"/></name></expr></argument>)<pos:position pos:line="59" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="26"/></condition><then pos:line="59" pos:column="26"> <block pos:line="59" pos:column="27">{
	<decl_stmt><decl><type><name pos:line="60" pos:column="9">size_t<pos:position pos:line="60" pos:column="15"/></name></type> <name pos:line="60" pos:column="16">size<pos:position pos:line="60" pos:column="20"/></name> <init pos:line="60" pos:column="21">= <expr><call><name pos:line="60" pos:column="23">chunksize<pos:position pos:line="60" pos:column="32"/></name><argument_list pos:line="60" pos:column="32">(<argument><expr><name pos:line="60" pos:column="33">p<pos:position pos:line="60" pos:column="34"/></name></expr></argument>)<pos:position pos:line="60" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="60" pos:column="36"/></decl_stmt>
	<if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><name pos:line="61" pos:column="13">size<pos:position pos:line="61" pos:column="17"/></name> <operator pos:line="61" pos:column="18">&gt;<pos:position pos:line="61" pos:column="22"/></operator> <name pos:line="61" pos:column="20">nb<pos:position pos:line="61" pos:column="22"/></name> <operator pos:line="61" pos:column="23">+<pos:position pos:line="61" pos:column="24"/></operator> <name pos:line="61" pos:column="25">MIN_CHUNK_SIZE<pos:position pos:line="61" pos:column="39"/></name></expr>)<pos:position pos:line="61" pos:column="40"/></condition><then pos:line="61" pos:column="40"> <block pos:line="61" pos:column="41">{
	  <decl_stmt><decl><type><name pos:line="62" pos:column="11">size_t<pos:position pos:line="62" pos:column="17"/></name></type> <name pos:line="62" pos:column="18">remainder_size<pos:position pos:line="62" pos:column="32"/></name> <init pos:line="62" pos:column="33">= <expr><name pos:line="62" pos:column="35">size<pos:position pos:line="62" pos:column="39"/></name> <operator pos:line="62" pos:column="40">-<pos:position pos:line="62" pos:column="41"/></operator> <name pos:line="62" pos:column="42">nb<pos:position pos:line="62" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="62" pos:column="45"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="63" pos:column="11">mchunkptr<pos:position pos:line="63" pos:column="20"/></name></type> <name pos:line="63" pos:column="21">remainder<pos:position pos:line="63" pos:column="30"/></name> <init pos:line="63" pos:column="31">= <expr><call><name pos:line="63" pos:column="33">chunk_plus_offset<pos:position pos:line="63" pos:column="50"/></name><argument_list pos:line="63" pos:column="50">(<argument><expr><name pos:line="63" pos:column="51">p<pos:position pos:line="63" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="54">nb<pos:position pos:line="63" pos:column="56"/></name></expr></argument>)<pos:position pos:line="63" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="63" pos:column="58"/></decl_stmt>
	  <expr_stmt><expr><call><name pos:line="64" pos:column="11">set_inuse<pos:position pos:line="64" pos:column="20"/></name><argument_list pos:line="64" pos:column="20">(<argument><expr><name pos:line="64" pos:column="21">m<pos:position pos:line="64" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="24">p<pos:position pos:line="64" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="27">nb<pos:position pos:line="64" pos:column="29"/></name></expr></argument>)<pos:position pos:line="64" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="31"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="65" pos:column="11">set_inuse<pos:position pos:line="65" pos:column="20"/></name><argument_list pos:line="65" pos:column="20">(<argument><expr><name pos:line="65" pos:column="21">m<pos:position pos:line="65" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="24">remainder<pos:position pos:line="65" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="35">remainder_size<pos:position pos:line="65" pos:column="49"/></name></expr></argument>)<pos:position pos:line="65" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="51"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="66" pos:column="11">trailer<pos:position pos:line="66" pos:column="18"/></name> <operator pos:line="66" pos:column="19">=<pos:position pos:line="66" pos:column="20"/></operator> <call><name pos:line="66" pos:column="21">chunk2mem<pos:position pos:line="66" pos:column="30"/></name><argument_list pos:line="66" pos:column="30">(<argument><expr><name pos:line="66" pos:column="31">remainder<pos:position pos:line="66" pos:column="40"/></name></expr></argument>)<pos:position pos:line="66" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="67" pos:column="10"/></block></then></if>
      }<pos:position pos:line="68" pos:column="8"/></block></then></if>

      <expr_stmt><expr><call><name pos:line="70" pos:column="7">assert<pos:position pos:line="70" pos:column="13"/></name> <argument_list pos:line="70" pos:column="14">(<argument><expr><call><name pos:line="70" pos:column="15">chunksize<pos:position pos:line="70" pos:column="24"/></name><argument_list pos:line="70" pos:column="24">(<argument><expr><name pos:line="70" pos:column="25">p<pos:position pos:line="70" pos:column="26"/></name></expr></argument>)<pos:position pos:line="70" pos:column="27"/></argument_list></call> <operator pos:line="70" pos:column="28">&gt;=<pos:position pos:line="70" pos:column="33"/></operator> <name pos:line="70" pos:column="31">nb<pos:position pos:line="70" pos:column="33"/></name></expr></argument>)<pos:position pos:line="70" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="71" pos:column="7">assert<pos:position pos:line="71" pos:column="13"/></name><argument_list pos:line="71" pos:column="13">(<argument><expr><operator pos:line="71" pos:column="14">(<pos:position pos:line="71" pos:column="15"/></operator><operator pos:line="71" pos:column="15">(<pos:position pos:line="71" pos:column="16"/></operator><call pos:line="71" pos:column="16">(<name pos:line="71" pos:column="17">size_t<pos:position pos:line="71" pos:column="23"/></name>)<argument_list pos:line="71" pos:column="24">(<argument><expr><call><name pos:line="71" pos:column="25">chunk2mem<pos:position pos:line="71" pos:column="34"/></name><argument_list pos:line="71" pos:column="34">(<argument><expr><name pos:line="71" pos:column="35">p<pos:position pos:line="71" pos:column="36"/></name></expr></argument>)<pos:position pos:line="71" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="71" pos:column="38"/></argument_list></call><operator pos:line="71" pos:column="38">)<pos:position pos:line="71" pos:column="39"/></operator> <operator pos:line="71" pos:column="40">%<pos:position pos:line="71" pos:column="41"/></operator> <name pos:line="71" pos:column="42">alignment<pos:position pos:line="71" pos:column="51"/></name><operator pos:line="71" pos:column="51">)<pos:position pos:line="71" pos:column="52"/></operator> <operator pos:line="71" pos:column="53">==<pos:position pos:line="71" pos:column="55"/></operator> <literal type="number" pos:line="71" pos:column="56">0<pos:position pos:line="71" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="59"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="72" pos:column="7">check_inuse_chunk<pos:position pos:line="72" pos:column="24"/></name><argument_list pos:line="72" pos:column="24">(<argument><expr><name pos:line="72" pos:column="25">m<pos:position pos:line="72" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="28">p<pos:position pos:line="72" pos:column="29"/></name></expr></argument>)<pos:position pos:line="72" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="31"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="73" pos:column="7">POSTACTION<pos:position pos:line="73" pos:column="17"/></name><argument_list pos:line="73" pos:column="17">(<argument><expr><name pos:line="73" pos:column="18">m<pos:position pos:line="73" pos:column="19"/></name></expr></argument>)<pos:position pos:line="73" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="21"/></expr_stmt>
      <if pos:line="74" pos:column="7">if <condition pos:line="74" pos:column="10">(<expr><name pos:line="74" pos:column="11">leader<pos:position pos:line="74" pos:column="17"/></name> <operator pos:line="74" pos:column="18">!=<pos:position pos:line="74" pos:column="20"/></operator> <literal type="number" pos:line="74" pos:column="21">0<pos:position pos:line="74" pos:column="22"/></literal></expr>)<pos:position pos:line="74" pos:column="23"/></condition><then pos:line="74" pos:column="23"> <block pos:line="74" pos:column="24">{
	<expr_stmt><expr><call><name pos:line="75" pos:column="9">internal_free<pos:position pos:line="75" pos:column="22"/></name><argument_list pos:line="75" pos:column="22">(<argument><expr><name pos:line="75" pos:column="23">m<pos:position pos:line="75" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="26">leader<pos:position pos:line="75" pos:column="32"/></name></expr></argument>)<pos:position pos:line="75" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="34"/></expr_stmt>
      }<pos:position pos:line="76" pos:column="8"/></block></then></if>
      <if pos:line="77" pos:column="7">if <condition pos:line="77" pos:column="10">(<expr><name pos:line="77" pos:column="11">trailer<pos:position pos:line="77" pos:column="18"/></name> <operator pos:line="77" pos:column="19">!=<pos:position pos:line="77" pos:column="21"/></operator> <literal type="number" pos:line="77" pos:column="22">0<pos:position pos:line="77" pos:column="23"/></literal></expr>)<pos:position pos:line="77" pos:column="24"/></condition><then pos:line="77" pos:column="24"> <block pos:line="77" pos:column="25">{
	<expr_stmt><expr><call><name pos:line="78" pos:column="9">internal_free<pos:position pos:line="78" pos:column="22"/></name><argument_list pos:line="78" pos:column="22">(<argument><expr><name pos:line="78" pos:column="23">m<pos:position pos:line="78" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="26">trailer<pos:position pos:line="78" pos:column="33"/></name></expr></argument>)<pos:position pos:line="78" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="35"/></expr_stmt>
      }<pos:position pos:line="79" pos:column="8"/></block></then></if>
      <return pos:line="80" pos:column="7">return <expr><call><name pos:line="80" pos:column="14">chunk2mem<pos:position pos:line="80" pos:column="23"/></name><argument_list pos:line="80" pos:column="23">(<argument><expr><name pos:line="80" pos:column="24">p<pos:position pos:line="80" pos:column="25"/></name></expr></argument>)<pos:position pos:line="80" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="27"/></return>
    }<pos:position pos:line="81" pos:column="6"/></block></then></if>
  }<pos:position pos:line="82" pos:column="4"/></block></else></if>
  <return pos:line="83" pos:column="3">return <expr><literal type="number" pos:line="83" pos:column="10">0<pos:position pos:line="83" pos:column="11"/></literal></expr>;<pos:position pos:line="83" pos:column="12"/></return>
}<pos:position pos:line="84" pos:column="2"/></block></function></unit>
