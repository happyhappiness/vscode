<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6410_git-2.10.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">unsigned<pos:position pos:line="1" pos:column="16"/></name></type>
<name pos:line="2" pos:column="1">re_copy_regs<pos:position pos:line="2" pos:column="13"/></name> <parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name><name pos:line="2" pos:column="15">struct<pos:position pos:line="2" pos:column="21"/></name> <name pos:line="2" pos:column="22">re_registers<pos:position pos:line="2" pos:column="34"/></name></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">regs<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>,
	      <parameter><decl><type><name pos:line="3" pos:column="15">regmatch_t<pos:position pos:line="3" pos:column="25"/></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">pmatch<pos:position pos:line="3" pos:column="33"/></name></decl></parameter>,
	      <parameter><decl><type><name pos:line="4" pos:column="15">int<pos:position pos:line="4" pos:column="18"/></name></type> <name pos:line="4" pos:column="19">nregs<pos:position pos:line="4" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="26">int<pos:position pos:line="4" pos:column="29"/></name></type> <name pos:line="4" pos:column="30">regs_allocated<pos:position pos:line="4" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="45"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">rval<pos:position pos:line="6" pos:column="11"/></name> <init pos:line="6" pos:column="12">= <expr><name pos:line="6" pos:column="14">REGS_REALLOCATE<pos:position pos:line="6" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">i<pos:position pos:line="7" pos:column="8"/></name></decl>;<pos:position pos:line="7" pos:column="9"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type> <name pos:line="8" pos:column="7">need_regs<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><name pos:line="8" pos:column="19">nregs<pos:position pos:line="8" pos:column="24"/></name> <operator pos:line="8" pos:column="25">+<pos:position pos:line="8" pos:column="26"/></operator> <literal type="number" pos:line="8" pos:column="27">1<pos:position pos:line="8" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
  <comment type="block" pos:line="9" pos:column="3">/* We need one extra element beyond `num_regs' for the `-1' marker GNU code
     uses.  */</comment>

  <comment type="block" pos:line="12" pos:column="3">/* Have the register data arrays been allocated?  */</comment>
  <if pos:line="13" pos:column="3">if <condition pos:line="13" pos:column="6">(<expr><name pos:line="13" pos:column="7">regs_allocated<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">==<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="25">REGS_UNALLOCATED<pos:position pos:line="13" pos:column="41"/></name></expr>)<pos:position pos:line="13" pos:column="42"/></condition><then pos:line="13" pos:column="42">
    <block pos:line="14" pos:column="5">{ <comment type="block" pos:line="14" pos:column="7">/* No.  So allocate them with malloc.  */</comment>
      <expr_stmt><expr><name><name pos:line="15" pos:column="7">regs<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">-&gt;<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="13">start<pos:position pos:line="15" pos:column="18"/></name></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <call><name pos:line="15" pos:column="21">re_malloc<pos:position pos:line="15" pos:column="30"/></name> <argument_list pos:line="15" pos:column="31">(<argument><expr><name pos:line="15" pos:column="32">regoff_t<pos:position pos:line="15" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="42">need_regs<pos:position pos:line="15" pos:column="51"/></name></expr></argument>)<pos:position pos:line="15" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="53"/></expr_stmt>
      <if pos:line="16" pos:column="7">if <condition pos:line="16" pos:column="10">(<expr><call><name pos:line="16" pos:column="11">BE<pos:position pos:line="16" pos:column="13"/></name> <argument_list pos:line="16" pos:column="14">(<argument><expr><name><name pos:line="16" pos:column="15">regs<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">-&gt;<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="21">start<pos:position pos:line="16" pos:column="26"/></name></name> <operator pos:line="16" pos:column="27">==<pos:position pos:line="16" pos:column="29"/></operator> <name pos:line="16" pos:column="30">NULL<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="36">0<pos:position pos:line="16" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="39"/></condition><then pos:line="16" pos:column="39">
	<block type="pseudo"><return pos:line="17" pos:column="9">return <expr><name pos:line="17" pos:column="16">REGS_UNALLOCATED<pos:position pos:line="17" pos:column="32"/></name></expr>;<pos:position pos:line="17" pos:column="33"/></return></block></then></if>
      <expr_stmt><expr><name><name pos:line="18" pos:column="7">regs<pos:position pos:line="18" pos:column="11"/></name><operator pos:line="18" pos:column="11">-&gt;<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="13">end<pos:position pos:line="18" pos:column="16"/></name></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <call><name pos:line="18" pos:column="19">re_malloc<pos:position pos:line="18" pos:column="28"/></name> <argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">regoff_t<pos:position pos:line="18" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="40">need_regs<pos:position pos:line="18" pos:column="49"/></name></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="51"/></expr_stmt>
      <if pos:line="19" pos:column="7">if <condition pos:line="19" pos:column="10">(<expr><call><name pos:line="19" pos:column="11">BE<pos:position pos:line="19" pos:column="13"/></name> <argument_list pos:line="19" pos:column="14">(<argument><expr><name><name pos:line="19" pos:column="15">regs<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">-&gt;<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="21">end<pos:position pos:line="19" pos:column="24"/></name></name> <operator pos:line="19" pos:column="25">==<pos:position pos:line="19" pos:column="27"/></operator> <name pos:line="19" pos:column="28">NULL<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="34">0<pos:position pos:line="19" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="37"/></condition><then pos:line="19" pos:column="37">
	<block pos:line="20" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="21" pos:column="11">re_free<pos:position pos:line="21" pos:column="18"/></name> <argument_list pos:line="21" pos:column="19">(<argument><expr><name><name pos:line="21" pos:column="20">regs<pos:position pos:line="21" pos:column="24"/></name><operator pos:line="21" pos:column="24">-&gt;<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="26">start<pos:position pos:line="21" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt>
	  <return pos:line="22" pos:column="11">return <expr><name pos:line="22" pos:column="18">REGS_UNALLOCATED<pos:position pos:line="22" pos:column="34"/></name></expr>;<pos:position pos:line="22" pos:column="35"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="24" pos:column="7">regs<pos:position pos:line="24" pos:column="11"/></name><operator pos:line="24" pos:column="11">-&gt;<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="13">num_regs<pos:position pos:line="24" pos:column="21"/></name></name> <operator pos:line="24" pos:column="22">=<pos:position pos:line="24" pos:column="23"/></operator> <name pos:line="24" pos:column="24">need_regs<pos:position pos:line="24" pos:column="33"/></name></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then>
  <elseif pos:line="26" pos:column="3">else <if pos:line="26" pos:column="8">if <condition pos:line="26" pos:column="11">(<expr><name pos:line="26" pos:column="12">regs_allocated<pos:position pos:line="26" pos:column="26"/></name> <operator pos:line="26" pos:column="27">==<pos:position pos:line="26" pos:column="29"/></operator> <name pos:line="26" pos:column="30">REGS_REALLOCATE<pos:position pos:line="26" pos:column="45"/></name></expr>)<pos:position pos:line="26" pos:column="46"/></condition><then pos:line="26" pos:column="46">
    <block pos:line="27" pos:column="5">{ <comment type="block" pos:line="27" pos:column="7">/* Yes.  If we need more elements than were already
	 allocated, reallocate them.  If we need fewer, just
	 leave it alone.  */</comment>
      <if pos:line="30" pos:column="7">if <condition pos:line="30" pos:column="10">(<expr><call><name pos:line="30" pos:column="11">BE<pos:position pos:line="30" pos:column="13"/></name> <argument_list pos:line="30" pos:column="14">(<argument><expr><name pos:line="30" pos:column="15">need_regs<pos:position pos:line="30" pos:column="24"/></name> <operator pos:line="30" pos:column="25">&gt;<pos:position pos:line="30" pos:column="29"/></operator> <name><name pos:line="30" pos:column="27">regs<pos:position pos:line="30" pos:column="31"/></name><operator pos:line="30" pos:column="31">-&gt;<pos:position pos:line="30" pos:column="36"/></operator><name pos:line="30" pos:column="33">num_regs<pos:position pos:line="30" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="43">0<pos:position pos:line="30" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="46"/></condition><then pos:line="30" pos:column="46">
	<block pos:line="31" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="32" pos:column="11">regoff_t<pos:position pos:line="32" pos:column="19"/></name> <modifier pos:line="32" pos:column="20">*<pos:position pos:line="32" pos:column="21"/></modifier></type><name pos:line="32" pos:column="21">new_start<pos:position pos:line="32" pos:column="30"/></name> <init pos:line="32" pos:column="31">= <expr><call><name pos:line="32" pos:column="33">re_realloc<pos:position pos:line="32" pos:column="43"/></name> <argument_list pos:line="32" pos:column="44">(<argument><expr><name><name pos:line="32" pos:column="45">regs<pos:position pos:line="32" pos:column="49"/></name><operator pos:line="32" pos:column="49">-&gt;<pos:position pos:line="32" pos:column="54"/></operator><name pos:line="32" pos:column="51">start<pos:position pos:line="32" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="58">regoff_t<pos:position pos:line="32" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="68">need_regs<pos:position pos:line="32" pos:column="77"/></name></expr></argument>)<pos:position pos:line="32" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="32" pos:column="79"/></decl_stmt>
	  <decl_stmt><decl><type><name pos:line="33" pos:column="11">regoff_t<pos:position pos:line="33" pos:column="19"/></name> <modifier pos:line="33" pos:column="20">*<pos:position pos:line="33" pos:column="21"/></modifier></type><name pos:line="33" pos:column="21">new_end<pos:position pos:line="33" pos:column="28"/></name></decl>;<pos:position pos:line="33" pos:column="29"/></decl_stmt>
	  <if pos:line="34" pos:column="11">if <condition pos:line="34" pos:column="14">(<expr><call><name pos:line="34" pos:column="15">BE<pos:position pos:line="34" pos:column="17"/></name> <argument_list pos:line="34" pos:column="18">(<argument><expr><name pos:line="34" pos:column="19">new_start<pos:position pos:line="34" pos:column="28"/></name> <operator pos:line="34" pos:column="29">==<pos:position pos:line="34" pos:column="31"/></operator> <name pos:line="34" pos:column="32">NULL<pos:position pos:line="34" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="38">0<pos:position pos:line="34" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="41"/></condition><then pos:line="34" pos:column="41">
	    <block type="pseudo"><return pos:line="35" pos:column="13">return <expr><name pos:line="35" pos:column="20">REGS_UNALLOCATED<pos:position pos:line="35" pos:column="36"/></name></expr>;<pos:position pos:line="35" pos:column="37"/></return></block></then></if>
	  <expr_stmt><expr><name pos:line="36" pos:column="11">new_end<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">=<pos:position pos:line="36" pos:column="20"/></operator> <call><name pos:line="36" pos:column="21">re_realloc<pos:position pos:line="36" pos:column="31"/></name> <argument_list pos:line="36" pos:column="32">(<argument><expr><name><name pos:line="36" pos:column="33">regs<pos:position pos:line="36" pos:column="37"/></name><operator pos:line="36" pos:column="37">-&gt;<pos:position pos:line="36" pos:column="42"/></operator><name pos:line="36" pos:column="39">end<pos:position pos:line="36" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="44">regoff_t<pos:position pos:line="36" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="54">need_regs<pos:position pos:line="36" pos:column="63"/></name></expr></argument>)<pos:position pos:line="36" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="65"/></expr_stmt>
	  <if pos:line="37" pos:column="11">if <condition pos:line="37" pos:column="14">(<expr><call><name pos:line="37" pos:column="15">BE<pos:position pos:line="37" pos:column="17"/></name> <argument_list pos:line="37" pos:column="18">(<argument><expr><name pos:line="37" pos:column="19">new_end<pos:position pos:line="37" pos:column="26"/></name> <operator pos:line="37" pos:column="27">==<pos:position pos:line="37" pos:column="29"/></operator> <name pos:line="37" pos:column="30">NULL<pos:position pos:line="37" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="36">0<pos:position pos:line="37" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="39"/></condition><then pos:line="37" pos:column="39">
	    <block pos:line="38" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="39" pos:column="15">re_free<pos:position pos:line="39" pos:column="22"/></name> <argument_list pos:line="39" pos:column="23">(<argument><expr><name pos:line="39" pos:column="24">new_start<pos:position pos:line="39" pos:column="33"/></name></expr></argument>)<pos:position pos:line="39" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="35"/></expr_stmt>
	      <return pos:line="40" pos:column="15">return <expr><name pos:line="40" pos:column="22">REGS_UNALLOCATED<pos:position pos:line="40" pos:column="38"/></name></expr>;<pos:position pos:line="40" pos:column="39"/></return>
	    }<pos:position pos:line="41" pos:column="14"/></block></then></if>
	  <expr_stmt><expr><name><name pos:line="42" pos:column="11">regs<pos:position pos:line="42" pos:column="15"/></name><operator pos:line="42" pos:column="15">-&gt;<pos:position pos:line="42" pos:column="20"/></operator><name pos:line="42" pos:column="17">start<pos:position pos:line="42" pos:column="22"/></name></name> <operator pos:line="42" pos:column="23">=<pos:position pos:line="42" pos:column="24"/></operator> <name pos:line="42" pos:column="25">new_start<pos:position pos:line="42" pos:column="34"/></name></expr>;<pos:position pos:line="42" pos:column="35"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="43" pos:column="11">regs<pos:position pos:line="43" pos:column="15"/></name><operator pos:line="43" pos:column="15">-&gt;<pos:position pos:line="43" pos:column="20"/></operator><name pos:line="43" pos:column="17">end<pos:position pos:line="43" pos:column="20"/></name></name> <operator pos:line="43" pos:column="21">=<pos:position pos:line="43" pos:column="22"/></operator> <name pos:line="43" pos:column="23">new_end<pos:position pos:line="43" pos:column="30"/></name></expr>;<pos:position pos:line="43" pos:column="31"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="44" pos:column="11">regs<pos:position pos:line="44" pos:column="15"/></name><operator pos:line="44" pos:column="15">-&gt;<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="17">num_regs<pos:position pos:line="44" pos:column="25"/></name></name> <operator pos:line="44" pos:column="26">=<pos:position pos:line="44" pos:column="27"/></operator> <name pos:line="44" pos:column="28">need_regs<pos:position pos:line="44" pos:column="37"/></name></expr>;<pos:position pos:line="44" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="45" pos:column="10"/></block></then></if>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if></elseif>
  <else pos:line="47" pos:column="3">else
    <block pos:line="48" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">assert<pos:position pos:line="49" pos:column="13"/></name> <argument_list pos:line="49" pos:column="14">(<argument><expr><name pos:line="49" pos:column="15">regs_allocated<pos:position pos:line="49" pos:column="29"/></name> <operator pos:line="49" pos:column="30">==<pos:position pos:line="49" pos:column="32"/></operator> <name pos:line="49" pos:column="33">REGS_FIXED<pos:position pos:line="49" pos:column="43"/></name></expr></argument>)<pos:position pos:line="49" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="45"/></expr_stmt>
      <comment type="block" pos:line="50" pos:column="7">/* This function may not be called with REGS_FIXED and nregs too big.  */</comment>
      <expr_stmt><expr><call><name pos:line="51" pos:column="7">assert<pos:position pos:line="51" pos:column="13"/></name> <argument_list pos:line="51" pos:column="14">(<argument><expr><name><name pos:line="51" pos:column="15">regs<pos:position pos:line="51" pos:column="19"/></name><operator pos:line="51" pos:column="19">-&gt;<pos:position pos:line="51" pos:column="24"/></operator><name pos:line="51" pos:column="21">num_regs<pos:position pos:line="51" pos:column="29"/></name></name> <operator pos:line="51" pos:column="30">&gt;=<pos:position pos:line="51" pos:column="35"/></operator> <name pos:line="51" pos:column="33">nregs<pos:position pos:line="51" pos:column="38"/></name></expr></argument>)<pos:position pos:line="51" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><name pos:line="52" pos:column="7">rval<pos:position pos:line="52" pos:column="11"/></name> <operator pos:line="52" pos:column="12">=<pos:position pos:line="52" pos:column="13"/></operator> <name pos:line="52" pos:column="14">REGS_FIXED<pos:position pos:line="52" pos:column="24"/></name></expr>;<pos:position pos:line="52" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></else></if>

  <comment type="block" pos:line="55" pos:column="3">/* Copy the regs.  */</comment>
  <for pos:line="56" pos:column="3">for <control pos:line="56" pos:column="7">(<init><expr><name pos:line="56" pos:column="8">i<pos:position pos:line="56" pos:column="9"/></name> <operator pos:line="56" pos:column="10">=<pos:position pos:line="56" pos:column="11"/></operator> <literal type="number" pos:line="56" pos:column="12">0<pos:position pos:line="56" pos:column="13"/></literal></expr>;<pos:position pos:line="56" pos:column="14"/></init> <condition><expr><name pos:line="56" pos:column="15">i<pos:position pos:line="56" pos:column="16"/></name> <operator pos:line="56" pos:column="17">&lt;<pos:position pos:line="56" pos:column="21"/></operator> <name pos:line="56" pos:column="19">nregs<pos:position pos:line="56" pos:column="24"/></name></expr>;<pos:position pos:line="56" pos:column="25"/></condition> <incr><expr><operator pos:line="56" pos:column="26">++<pos:position pos:line="56" pos:column="28"/></operator><name pos:line="56" pos:column="28">i<pos:position pos:line="56" pos:column="29"/></name></expr></incr>)<pos:position pos:line="56" pos:column="30"/></control>
    <block pos:line="57" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="58" pos:column="7">regs<pos:position pos:line="58" pos:column="11"/></name><operator pos:line="58" pos:column="11">-&gt;<pos:position pos:line="58" pos:column="16"/></operator><name pos:line="58" pos:column="13">start<pos:position pos:line="58" pos:column="18"/></name><index pos:line="58" pos:column="18">[<expr><name pos:line="58" pos:column="19">i<pos:position pos:line="58" pos:column="20"/></name></expr>]<pos:position pos:line="58" pos:column="21"/></index></name> <operator pos:line="58" pos:column="22">=<pos:position pos:line="58" pos:column="23"/></operator> <name><name pos:line="58" pos:column="24">pmatch<pos:position pos:line="58" pos:column="30"/></name><index pos:line="58" pos:column="30">[<expr><name pos:line="58" pos:column="31">i<pos:position pos:line="58" pos:column="32"/></name></expr>]<pos:position pos:line="58" pos:column="33"/></index></name><operator pos:line="58" pos:column="33">.<pos:position pos:line="58" pos:column="34"/></operator><name pos:line="58" pos:column="34">rm_so<pos:position pos:line="58" pos:column="39"/></name></expr>;<pos:position pos:line="58" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="59" pos:column="7">regs<pos:position pos:line="59" pos:column="11"/></name><operator pos:line="59" pos:column="11">-&gt;<pos:position pos:line="59" pos:column="16"/></operator><name pos:line="59" pos:column="13">end<pos:position pos:line="59" pos:column="16"/></name><index pos:line="59" pos:column="16">[<expr><name pos:line="59" pos:column="17">i<pos:position pos:line="59" pos:column="18"/></name></expr>]<pos:position pos:line="59" pos:column="19"/></index></name> <operator pos:line="59" pos:column="20">=<pos:position pos:line="59" pos:column="21"/></operator> <name><name pos:line="59" pos:column="22">pmatch<pos:position pos:line="59" pos:column="28"/></name><index pos:line="59" pos:column="28">[<expr><name pos:line="59" pos:column="29">i<pos:position pos:line="59" pos:column="30"/></name></expr>]<pos:position pos:line="59" pos:column="31"/></index></name><operator pos:line="59" pos:column="31">.<pos:position pos:line="59" pos:column="32"/></operator><name pos:line="59" pos:column="32">rm_eo<pos:position pos:line="59" pos:column="37"/></name></expr>;<pos:position pos:line="59" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="60" pos:column="6"/></block></for>
  <for pos:line="61" pos:column="3">for <control pos:line="61" pos:column="7">( <init pos:line="61" pos:column="9">;<pos:position pos:line="61" pos:column="10"/></init> <condition><expr><name pos:line="61" pos:column="11">i<pos:position pos:line="61" pos:column="12"/></name> <operator pos:line="61" pos:column="13">&lt;<pos:position pos:line="61" pos:column="17"/></operator> <name><name pos:line="61" pos:column="15">regs<pos:position pos:line="61" pos:column="19"/></name><operator pos:line="61" pos:column="19">-&gt;<pos:position pos:line="61" pos:column="24"/></operator><name pos:line="61" pos:column="21">num_regs<pos:position pos:line="61" pos:column="29"/></name></name></expr>;<pos:position pos:line="61" pos:column="30"/></condition> <incr><expr><operator pos:line="61" pos:column="31">++<pos:position pos:line="61" pos:column="33"/></operator><name pos:line="61" pos:column="33">i<pos:position pos:line="61" pos:column="34"/></name></expr></incr>)<pos:position pos:line="61" pos:column="35"/></control>
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="62" pos:column="5">regs<pos:position pos:line="62" pos:column="9"/></name><operator pos:line="62" pos:column="9">-&gt;<pos:position pos:line="62" pos:column="14"/></operator><name pos:line="62" pos:column="11">start<pos:position pos:line="62" pos:column="16"/></name><index pos:line="62" pos:column="16">[<expr><name pos:line="62" pos:column="17">i<pos:position pos:line="62" pos:column="18"/></name></expr>]<pos:position pos:line="62" pos:column="19"/></index></name> <operator pos:line="62" pos:column="20">=<pos:position pos:line="62" pos:column="21"/></operator> <name><name pos:line="62" pos:column="22">regs<pos:position pos:line="62" pos:column="26"/></name><operator pos:line="62" pos:column="26">-&gt;<pos:position pos:line="62" pos:column="31"/></operator><name pos:line="62" pos:column="28">end<pos:position pos:line="62" pos:column="31"/></name><index pos:line="62" pos:column="31">[<expr><name pos:line="62" pos:column="32">i<pos:position pos:line="62" pos:column="33"/></name></expr>]<pos:position pos:line="62" pos:column="34"/></index></name> <operator pos:line="62" pos:column="35">=<pos:position pos:line="62" pos:column="36"/></operator> <operator pos:line="62" pos:column="37">-<pos:position pos:line="62" pos:column="38"/></operator><literal type="number" pos:line="62" pos:column="38">1<pos:position pos:line="62" pos:column="39"/></literal></expr>;<pos:position pos:line="62" pos:column="40"/></expr_stmt></block></for>

  <return pos:line="64" pos:column="3">return <expr><name pos:line="64" pos:column="10">rval<pos:position pos:line="64" pos:column="14"/></name></expr>;<pos:position pos:line="64" pos:column="15"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
