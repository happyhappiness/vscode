<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2959_git-2.8.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">handle_file<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">path<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">unsigned<pos:position pos:line="1" pos:column="50"/></name> <name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">sha1<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="63">const<pos:position pos:line="1" pos:column="68"/></specifier> <name pos:line="1" pos:column="69">char<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">output<pos:position pos:line="1" pos:column="81"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="82"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">hunk_no<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><literal type="number" pos:line="3" pos:column="23">0<pos:position pos:line="3" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">rerere_io_file<pos:position pos:line="4" pos:column="30"/></name></name></type> <name pos:line="4" pos:column="31">io<pos:position pos:line="4" pos:column="33"/></name></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">marker_size<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><call><name pos:line="5" pos:column="27">ll_merge_marker_size<pos:position pos:line="5" pos:column="47"/></name><argument_list pos:line="5" pos:column="47">(<argument><expr><name pos:line="5" pos:column="48">path<pos:position pos:line="5" pos:column="52"/></name></expr></argument>)<pos:position pos:line="5" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="54"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">memset<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><operator pos:line="7" pos:column="16">&amp;<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="17">io<pos:position pos:line="7" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="21">0<pos:position pos:line="7" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="24">sizeof<argument_list pos:line="7" pos:column="30">(<argument><expr><name pos:line="7" pos:column="31">io<pos:position pos:line="7" pos:column="33"/></name></expr></argument>)<pos:position pos:line="7" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="8" pos:column="9">io<pos:position pos:line="8" pos:column="11"/></name><operator pos:line="8" pos:column="11">.<pos:position pos:line="8" pos:column="12"/></operator><name pos:line="8" pos:column="12">io<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">.<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="15">getline<pos:position pos:line="8" pos:column="22"/></name></name> <operator pos:line="8" pos:column="23">=<pos:position pos:line="8" pos:column="24"/></operator> <name pos:line="8" pos:column="25">rerere_file_getline<pos:position pos:line="8" pos:column="44"/></name></expr>;<pos:position pos:line="8" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="9" pos:column="9">io<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">.<pos:position pos:line="9" pos:column="12"/></operator><name pos:line="9" pos:column="12">input<pos:position pos:line="9" pos:column="17"/></name></name> <operator pos:line="9" pos:column="18">=<pos:position pos:line="9" pos:column="19"/></operator> <call><name pos:line="9" pos:column="20">fopen<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">path<pos:position pos:line="9" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="32">"r"<pos:position pos:line="9" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="10" pos:column="9">io<pos:position pos:line="10" pos:column="11"/></name><operator pos:line="10" pos:column="11">.<pos:position pos:line="10" pos:column="12"/></operator><name pos:line="10" pos:column="12">io<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">.<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">wrerror<pos:position pos:line="10" pos:column="22"/></name></name> <operator pos:line="10" pos:column="23">=<pos:position pos:line="10" pos:column="24"/></operator> <literal type="number" pos:line="10" pos:column="25">0<pos:position pos:line="10" pos:column="26"/></literal></expr>;<pos:position pos:line="10" pos:column="27"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name><name pos:line="11" pos:column="14">io<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">.<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">input<pos:position pos:line="11" pos:column="22"/></name></name></expr>)<pos:position pos:line="11" pos:column="23"/></condition><then pos:line="11" pos:column="23">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><call><name pos:line="12" pos:column="24">error<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><literal type="string" pos:line="12" pos:column="30">"Could not open %s"<pos:position pos:line="12" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="51">path<pos:position pos:line="12" pos:column="55"/></name></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="57"/></return></block></then></if>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">output<pos:position pos:line="14" pos:column="19"/></name></expr>)<pos:position pos:line="14" pos:column="20"/></condition><then pos:line="14" pos:column="20"> <block pos:line="14" pos:column="21">{
		<expr_stmt><expr><name><name pos:line="15" pos:column="17">io<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">.<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="20">io<pos:position pos:line="15" pos:column="22"/></name><operator pos:line="15" pos:column="22">.<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="23">output<pos:position pos:line="15" pos:column="29"/></name></name> <operator pos:line="15" pos:column="30">=<pos:position pos:line="15" pos:column="31"/></operator> <call><name pos:line="15" pos:column="32">fopen<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><name pos:line="15" pos:column="38">output<pos:position pos:line="15" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="46">"w"<pos:position pos:line="15" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="51"/></expr_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><operator pos:line="16" pos:column="21">!<pos:position pos:line="16" pos:column="22"/></operator><name><name pos:line="16" pos:column="22">io<pos:position pos:line="16" pos:column="24"/></name><operator pos:line="16" pos:column="24">.<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="25">io<pos:position pos:line="16" pos:column="27"/></name><operator pos:line="16" pos:column="27">.<pos:position pos:line="16" pos:column="28"/></operator><name pos:line="16" pos:column="28">output<pos:position pos:line="16" pos:column="34"/></name></name></expr>)<pos:position pos:line="16" pos:column="35"/></condition><then pos:line="16" pos:column="35"> <block pos:line="16" pos:column="36">{
			<expr_stmt><expr><call><name pos:line="17" pos:column="25">fclose<pos:position pos:line="17" pos:column="31"/></name><argument_list pos:line="17" pos:column="31">(<argument><expr><name><name pos:line="17" pos:column="32">io<pos:position pos:line="17" pos:column="34"/></name><operator pos:line="17" pos:column="34">.<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="35">input<pos:position pos:line="17" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt>
			<return pos:line="18" pos:column="25">return <expr><call><name pos:line="18" pos:column="32">error<pos:position pos:line="18" pos:column="37"/></name><argument_list pos:line="18" pos:column="37">(<argument><expr><literal type="string" pos:line="18" pos:column="38">"Could not write %s"<pos:position pos:line="18" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="60">output<pos:position pos:line="18" pos:column="66"/></name></expr></argument>)<pos:position pos:line="18" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="68"/></return>
		}<pos:position pos:line="19" pos:column="18"/></block></then></if>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="22" pos:column="9">hunk_no<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">=<pos:position pos:line="22" pos:column="18"/></operator> <call><name pos:line="22" pos:column="19">handle_path<pos:position pos:line="22" pos:column="30"/></name><argument_list pos:line="22" pos:column="30">(<argument><expr><name pos:line="22" pos:column="31">sha1<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="37">(<pos:position pos:line="22" pos:column="38"/></operator>struct <name pos:line="22" pos:column="45">rerere_io<pos:position pos:line="22" pos:column="54"/></name> <operator pos:line="22" pos:column="55">*<pos:position pos:line="22" pos:column="56"/></operator><operator pos:line="22" pos:column="56">)<pos:position pos:line="22" pos:column="57"/></operator><operator pos:line="22" pos:column="57">&amp;<pos:position pos:line="22" pos:column="62"/></operator><name pos:line="22" pos:column="58">io<pos:position pos:line="22" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="62">marker_size<pos:position pos:line="22" pos:column="73"/></name></expr></argument>)<pos:position pos:line="22" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="75"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="24" pos:column="9">fclose<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><name><name pos:line="24" pos:column="16">io<pos:position pos:line="24" pos:column="18"/></name><operator pos:line="24" pos:column="18">.<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="19">input<pos:position pos:line="24" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="26"/></expr_stmt>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name><name pos:line="25" pos:column="13">io<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">.<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="16">io<pos:position pos:line="25" pos:column="18"/></name><operator pos:line="25" pos:column="18">.<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="19">wrerror<pos:position pos:line="25" pos:column="26"/></name></name></expr>)<pos:position pos:line="25" pos:column="27"/></condition><then pos:line="25" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="17">error<pos:position pos:line="26" pos:column="22"/></name><argument_list pos:line="26" pos:column="22">(<argument><expr><literal type="string" pos:line="26" pos:column="23">"There were errors while writing %s (%s)"<pos:position pos:line="26" pos:column="64"/></literal></expr></argument>,
		      <argument><expr><name pos:line="27" pos:column="23">path<pos:position pos:line="27" pos:column="27"/></name></expr></argument>, <argument><expr><call><name pos:line="27" pos:column="29">strerror<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">(<argument><expr><name><name pos:line="27" pos:column="38">io<pos:position pos:line="27" pos:column="40"/></name><operator pos:line="27" pos:column="40">.<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="41">io<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">.<pos:position pos:line="27" pos:column="44"/></operator><name pos:line="27" pos:column="44">wrerror<pos:position pos:line="27" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="54"/></expr_stmt></block></then></if>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name><name pos:line="28" pos:column="13">io<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">.<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="16">io<pos:position pos:line="28" pos:column="18"/></name><operator pos:line="28" pos:column="18">.<pos:position pos:line="28" pos:column="19"/></operator><name pos:line="28" pos:column="19">output<pos:position pos:line="28" pos:column="25"/></name></name> <operator pos:line="28" pos:column="26">&amp;&amp;<pos:position pos:line="28" pos:column="36"/></operator> <call><name pos:line="28" pos:column="29">fclose<pos:position pos:line="28" pos:column="35"/></name><argument_list pos:line="28" pos:column="35">(<argument><expr><name><name pos:line="28" pos:column="36">io<pos:position pos:line="28" pos:column="38"/></name><operator pos:line="28" pos:column="38">.<pos:position pos:line="28" pos:column="39"/></operator><name pos:line="28" pos:column="39">io<pos:position pos:line="28" pos:column="41"/></name><operator pos:line="28" pos:column="41">.<pos:position pos:line="28" pos:column="42"/></operator><name pos:line="28" pos:column="42">output<pos:position pos:line="28" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="50"/></condition><then pos:line="28" pos:column="50">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="29" pos:column="17">io<pos:position pos:line="29" pos:column="19"/></name><operator pos:line="29" pos:column="19">.<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="20">io<pos:position pos:line="29" pos:column="22"/></name><operator pos:line="29" pos:column="22">.<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="23">wrerror<pos:position pos:line="29" pos:column="30"/></name></name> <operator pos:line="29" pos:column="31">=<pos:position pos:line="29" pos:column="32"/></operator> <call><name pos:line="29" pos:column="33">error<pos:position pos:line="29" pos:column="38"/></name><argument_list pos:line="29" pos:column="38">(<argument><expr><literal type="string" pos:line="29" pos:column="39">"Failed to flush %s: %s"<pos:position pos:line="29" pos:column="63"/></literal></expr></argument>,
				      <argument><expr><name pos:line="30" pos:column="39">path<pos:position pos:line="30" pos:column="43"/></name></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="45">strerror<pos:position pos:line="30" pos:column="53"/></name><argument_list pos:line="30" pos:column="53">(<argument><expr><name pos:line="30" pos:column="54">errno<pos:position pos:line="30" pos:column="59"/></name></expr></argument>)<pos:position pos:line="30" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="62"/></expr_stmt></block></then></if>

	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">hunk_no<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">&lt;<pos:position pos:line="32" pos:column="25"/></operator> <literal type="number" pos:line="32" pos:column="23">0<pos:position pos:line="32" pos:column="24"/></literal></expr>)<pos:position pos:line="32" pos:column="25"/></condition><then pos:line="32" pos:column="25"> <block pos:line="32" pos:column="26">{
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name pos:line="33" pos:column="21">output<pos:position pos:line="33" pos:column="27"/></name></expr>)<pos:position pos:line="33" pos:column="28"/></condition><then pos:line="33" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="25">unlink_or_warn<pos:position pos:line="34" pos:column="39"/></name><argument_list pos:line="34" pos:column="39">(<argument><expr><name pos:line="34" pos:column="40">output<pos:position pos:line="34" pos:column="46"/></name></expr></argument>)<pos:position pos:line="34" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="48"/></expr_stmt></block></then></if>
		<return pos:line="35" pos:column="17">return <expr><call><name pos:line="35" pos:column="24">error<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><literal type="string" pos:line="35" pos:column="30">"Could not parse conflict hunks in %s"<pos:position pos:line="35" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="70">path<pos:position pos:line="35" pos:column="74"/></name></expr></argument>)<pos:position pos:line="35" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="76"/></return>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name><name pos:line="37" pos:column="13">io<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">.<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="16">io<pos:position pos:line="37" pos:column="18"/></name><operator pos:line="37" pos:column="18">.<pos:position pos:line="37" pos:column="19"/></operator><name pos:line="37" pos:column="19">wrerror<pos:position pos:line="37" pos:column="26"/></name></name></expr>)<pos:position pos:line="37" pos:column="27"/></condition><then pos:line="37" pos:column="27">
		<block type="pseudo"><return pos:line="38" pos:column="17">return <expr><operator pos:line="38" pos:column="24">-<pos:position pos:line="38" pos:column="25"/></operator><literal type="number" pos:line="38" pos:column="25">1<pos:position pos:line="38" pos:column="26"/></literal></expr>;<pos:position pos:line="38" pos:column="27"/></return></block></then></if>
	<return pos:line="39" pos:column="9">return <expr><name pos:line="39" pos:column="16">hunk_no<pos:position pos:line="39" pos:column="23"/></name></expr>;<pos:position pos:line="39" pos:column="24"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
