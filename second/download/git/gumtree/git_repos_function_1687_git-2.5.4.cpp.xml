<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1687_git-2.5.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">read_packed_sha1<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">unsigned<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">sha1<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
			      <parameter><decl><type><name><name pos:line="2" pos:column="31">enum<pos:position pos:line="2" pos:column="35"/></name> <name pos:line="2" pos:column="36">object_type<pos:position pos:line="2" pos:column="47"/></name></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">type<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="55">unsigned<pos:position pos:line="2" pos:column="63"/></name> <name pos:line="2" pos:column="64">long<pos:position pos:line="2" pos:column="68"/></name> <modifier pos:line="2" pos:column="69">*<pos:position pos:line="2" pos:column="70"/></modifier></type><name pos:line="2" pos:column="70">size<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="75"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">pack_entry<pos:position pos:line="4" pos:column="26"/></name></name></type> <name pos:line="4" pos:column="27">e<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">void<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">data<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><call><name pos:line="7" pos:column="14">find_pack_entry<pos:position pos:line="7" pos:column="29"/></name><argument_list pos:line="7" pos:column="29">(<argument><expr><name pos:line="7" pos:column="30">sha1<pos:position pos:line="7" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="36">&amp;<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="37">e<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="40"/></condition><then pos:line="7" pos:column="40">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><name pos:line="8" pos:column="24">NULL<pos:position pos:line="8" pos:column="28"/></name></expr>;<pos:position pos:line="8" pos:column="29"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="9" pos:column="9">data<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <call><name pos:line="9" pos:column="16">cache_or_unpack_entry<pos:position pos:line="9" pos:column="37"/></name><argument_list pos:line="9" pos:column="37">(<argument><expr><name><name pos:line="9" pos:column="38">e<pos:position pos:line="9" pos:column="39"/></name><operator pos:line="9" pos:column="39">.<pos:position pos:line="9" pos:column="40"/></operator><name pos:line="9" pos:column="40">p<pos:position pos:line="9" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="43">e<pos:position pos:line="9" pos:column="44"/></name><operator pos:line="9" pos:column="44">.<pos:position pos:line="9" pos:column="45"/></operator><name pos:line="9" pos:column="45">offset<pos:position pos:line="9" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="53">size<pos:position pos:line="9" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="59">type<pos:position pos:line="9" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="65">1<pos:position pos:line="9" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="68"/></expr_stmt>
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">data<pos:position pos:line="10" pos:column="18"/></name></expr>)<pos:position pos:line="10" pos:column="19"/></condition><then pos:line="10" pos:column="19"> <block pos:line="10" pos:column="20">{
		<comment type="block" pos:line="11" pos:column="17">/*
		 * We're probably in deep shit, but let's try to fetch
		 * the required object anyway from another pack or loose.
		 * This should happen only in the presence of a corrupted
		 * pack, and is better than failing outright.
		 */</comment>
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">error<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><literal type="string" pos:line="17" pos:column="23">"failed to read object %s at offset %"<pos:position pos:line="17" pos:column="61"/></literal><name pos:line="17" pos:column="61">PRIuMAX<pos:position pos:line="17" pos:column="68"/></name><literal type="string" pos:line="17" pos:column="68">" from %s"<pos:position pos:line="17" pos:column="78"/></literal></expr></argument>,
		      <argument><expr><call><name pos:line="18" pos:column="23">sha1_to_hex<pos:position pos:line="18" pos:column="34"/></name><argument_list pos:line="18" pos:column="34">(<argument><expr><name pos:line="18" pos:column="35">sha1<pos:position pos:line="18" pos:column="39"/></name></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="18" pos:column="42">(<pos:position pos:line="18" pos:column="43"/></operator><name pos:line="18" pos:column="43">uintmax_t<pos:position pos:line="18" pos:column="52"/></name><operator pos:line="18" pos:column="52">)<pos:position pos:line="18" pos:column="53"/></operator><name><name pos:line="18" pos:column="53">e<pos:position pos:line="18" pos:column="54"/></name><operator pos:line="18" pos:column="54">.<pos:position pos:line="18" pos:column="55"/></operator><name pos:line="18" pos:column="55">offset<pos:position pos:line="18" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="63">e<pos:position pos:line="18" pos:column="64"/></name><operator pos:line="18" pos:column="64">.<pos:position pos:line="18" pos:column="65"/></operator><name pos:line="18" pos:column="65">p<pos:position pos:line="18" pos:column="66"/></name><operator pos:line="18" pos:column="66">-&gt;<pos:position pos:line="18" pos:column="71"/></operator><name pos:line="18" pos:column="68">pack_name<pos:position pos:line="18" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="79"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">mark_bad_packed_object<pos:position pos:line="19" pos:column="39"/></name><argument_list pos:line="19" pos:column="39">(<argument><expr><name><name pos:line="19" pos:column="40">e<pos:position pos:line="19" pos:column="41"/></name><operator pos:line="19" pos:column="41">.<pos:position pos:line="19" pos:column="42"/></operator><name pos:line="19" pos:column="42">p<pos:position pos:line="19" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="45">sha1<pos:position pos:line="19" pos:column="49"/></name></expr></argument>)<pos:position pos:line="19" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">data<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">=<pos:position pos:line="20" pos:column="23"/></operator> <call><name pos:line="20" pos:column="24">read_object<pos:position pos:line="20" pos:column="35"/></name><argument_list pos:line="20" pos:column="35">(<argument><expr><name pos:line="20" pos:column="36">sha1<pos:position pos:line="20" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="42">type<pos:position pos:line="20" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="48">size<pos:position pos:line="20" pos:column="52"/></name></expr></argument>)<pos:position pos:line="20" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>
	<return pos:line="22" pos:column="9">return <expr><name pos:line="22" pos:column="16">data<pos:position pos:line="22" pos:column="20"/></name></expr>;<pos:position pos:line="22" pos:column="21"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
