<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1253_git-2.8.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">opt_arg<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><specifier pos:line="1" pos:column="20">const<pos:position pos:line="1" pos:column="25"/></specifier> <name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">arg<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">int<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">arg_short<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">arg_long<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="74">int<pos:position pos:line="1" pos:column="77"/></name> <modifier pos:line="1" pos:column="78">*<pos:position pos:line="1" pos:column="79"/></modifier></type><name pos:line="1" pos:column="79">val<pos:position pos:line="1" pos:column="82"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="83"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name pos:line="3" pos:column="14">c<pos:position pos:line="3" pos:column="15"/></name></decl>, <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="18">eq<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">len<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">*<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">arg<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">!=<pos:position pos:line="6" pos:column="20"/></operator> <literal type="char" pos:line="6" pos:column="21">'-'<pos:position pos:line="6" pos:column="24"/></literal></expr>)<pos:position pos:line="6" pos:column="25"/></condition><then pos:line="6" pos:column="25">
		<block type="pseudo"><return pos:line="7" pos:column="17">return <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr>;<pos:position pos:line="7" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="8" pos:column="9">c<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">=<pos:position pos:line="8" pos:column="12"/></operator> <operator pos:line="8" pos:column="13">*<pos:position pos:line="8" pos:column="14"/></operator><operator pos:line="8" pos:column="14">++<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="16">arg<pos:position pos:line="8" pos:column="19"/></name></expr>;<pos:position pos:line="8" pos:column="20"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">c<pos:position pos:line="9" pos:column="15"/></name></expr>)<pos:position pos:line="9" pos:column="16"/></condition><then pos:line="9" pos:column="16">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal></expr>;<pos:position pos:line="10" pos:column="26"/></return></block></then></if>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">c<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">==<pos:position pos:line="11" pos:column="17"/></operator> <name pos:line="11" pos:column="18">arg_short<pos:position pos:line="11" pos:column="27"/></name></expr>)<pos:position pos:line="11" pos:column="28"/></condition><then pos:line="11" pos:column="28"> <block pos:line="11" pos:column="29">{
		<expr_stmt><expr><name pos:line="12" pos:column="17">c<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <operator pos:line="12" pos:column="21">*<pos:position pos:line="12" pos:column="22"/></operator><operator pos:line="12" pos:column="22">++<pos:position pos:line="12" pos:column="24"/></operator><name pos:line="12" pos:column="24">arg<pos:position pos:line="12" pos:column="27"/></name></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">!<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">c<pos:position pos:line="13" pos:column="23"/></name></expr>)<pos:position pos:line="13" pos:column="24"/></condition><then pos:line="13" pos:column="24">
			<block type="pseudo"><return pos:line="14" pos:column="25">return <expr><literal type="number" pos:line="14" pos:column="32">1<pos:position pos:line="14" pos:column="33"/></literal></expr>;<pos:position pos:line="14" pos:column="34"/></return></block></then></if>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">val<pos:position pos:line="15" pos:column="24"/></name> <operator pos:line="15" pos:column="25">&amp;&amp;<pos:position pos:line="15" pos:column="35"/></operator> <call><name pos:line="15" pos:column="28">isdigit<pos:position pos:line="15" pos:column="35"/></name><argument_list pos:line="15" pos:column="35">(<argument><expr><name pos:line="15" pos:column="36">c<pos:position pos:line="15" pos:column="37"/></name></expr></argument>)<pos:position pos:line="15" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="39"/></condition><then pos:line="15" pos:column="39"> <block pos:line="15" pos:column="40">{
			<decl_stmt><decl><type><name pos:line="16" pos:column="25">char<pos:position pos:line="16" pos:column="29"/></name> <modifier pos:line="16" pos:column="30">*<pos:position pos:line="16" pos:column="31"/></modifier></type><name pos:line="16" pos:column="31">end<pos:position pos:line="16" pos:column="34"/></name></decl>;<pos:position pos:line="16" pos:column="35"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="17" pos:column="25">int<pos:position pos:line="17" pos:column="28"/></name></type> <name pos:line="17" pos:column="29">n<pos:position pos:line="17" pos:column="30"/></name> <init pos:line="17" pos:column="31">= <expr><call><name pos:line="17" pos:column="33">strtoul<pos:position pos:line="17" pos:column="40"/></name><argument_list pos:line="17" pos:column="40">(<argument><expr><name pos:line="17" pos:column="41">arg<pos:position pos:line="17" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="46">&amp;<pos:position pos:line="17" pos:column="51"/></operator><name pos:line="17" pos:column="47">end<pos:position pos:line="17" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="52">10<pos:position pos:line="17" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="56"/></decl_stmt>
			<if pos:line="18" pos:column="25">if <condition pos:line="18" pos:column="28">(<expr><operator pos:line="18" pos:column="29">*<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="30">end<pos:position pos:line="18" pos:column="33"/></name></expr>)<pos:position pos:line="18" pos:column="34"/></condition><then pos:line="18" pos:column="34">
				<block type="pseudo"><return pos:line="19" pos:column="33">return <expr><literal type="number" pos:line="19" pos:column="40">0<pos:position pos:line="19" pos:column="41"/></literal></expr>;<pos:position pos:line="19" pos:column="42"/></return></block></then></if>
			<expr_stmt><expr><operator pos:line="20" pos:column="25">*<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="26">val<pos:position pos:line="20" pos:column="29"/></name> <operator pos:line="20" pos:column="30">=<pos:position pos:line="20" pos:column="31"/></operator> <name pos:line="20" pos:column="32">n<pos:position pos:line="20" pos:column="33"/></name></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>
			<return pos:line="21" pos:column="25">return <expr><literal type="number" pos:line="21" pos:column="32">1<pos:position pos:line="21" pos:column="33"/></literal></expr>;<pos:position pos:line="21" pos:column="34"/></return>
		}<pos:position pos:line="22" pos:column="18"/></block></then></if>
		<return pos:line="23" pos:column="17">return <expr><literal type="number" pos:line="23" pos:column="24">0<pos:position pos:line="23" pos:column="25"/></literal></expr>;<pos:position pos:line="23" pos:column="26"/></return>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">c<pos:position pos:line="25" pos:column="14"/></name> <operator pos:line="25" pos:column="15">!=<pos:position pos:line="25" pos:column="17"/></operator> <literal type="char" pos:line="25" pos:column="18">'-'<pos:position pos:line="25" pos:column="21"/></literal></expr>)<pos:position pos:line="25" pos:column="22"/></condition><then pos:line="25" pos:column="22">
		<block type="pseudo"><return pos:line="26" pos:column="17">return <expr><literal type="number" pos:line="26" pos:column="24">0<pos:position pos:line="26" pos:column="25"/></literal></expr>;<pos:position pos:line="26" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><name pos:line="27" pos:column="9">arg<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">++<pos:position pos:line="27" pos:column="14"/></operator></expr>;<pos:position pos:line="27" pos:column="15"/></expr_stmt>
	<expr_stmt><expr><name pos:line="28" pos:column="9">eq<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <call><name pos:line="28" pos:column="14">strchrnul<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">(<argument><expr><name pos:line="28" pos:column="24">arg<pos:position pos:line="28" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="28" pos:column="29">'='<pos:position pos:line="28" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name pos:line="29" pos:column="9">len<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <name pos:line="29" pos:column="15">eq<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">-<pos:position pos:line="29" pos:column="19"/></operator> <name pos:line="29" pos:column="20">arg<pos:position pos:line="29" pos:column="23"/></name></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><operator pos:line="30" pos:column="13">!<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">len<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">||<pos:position pos:line="30" pos:column="20"/></operator> <call><name pos:line="30" pos:column="21">strncmp<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><name pos:line="30" pos:column="29">arg<pos:position pos:line="30" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="34">arg_long<pos:position pos:line="30" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="44">len<pos:position pos:line="30" pos:column="47"/></name></expr></argument>)<pos:position pos:line="30" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="49"/></condition><then pos:line="30" pos:column="49">
		<block type="pseudo"><return pos:line="31" pos:column="17">return <expr><literal type="number" pos:line="31" pos:column="24">0<pos:position pos:line="31" pos:column="25"/></literal></expr>;<pos:position pos:line="31" pos:column="26"/></return></block></then></if>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><operator pos:line="32" pos:column="13">*<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">eq<pos:position pos:line="32" pos:column="16"/></name></expr>)<pos:position pos:line="32" pos:column="17"/></condition><then pos:line="32" pos:column="17"> <block pos:line="32" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="33" pos:column="17">int<pos:position pos:line="33" pos:column="20"/></name></type> <name pos:line="33" pos:column="21">n<pos:position pos:line="33" pos:column="22"/></name></decl>;<pos:position pos:line="33" pos:column="23"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="34" pos:column="17">char<pos:position pos:line="34" pos:column="21"/></name> <modifier pos:line="34" pos:column="22">*<pos:position pos:line="34" pos:column="23"/></modifier></type><name pos:line="34" pos:column="23">end<pos:position pos:line="34" pos:column="26"/></name></decl>;<pos:position pos:line="34" pos:column="27"/></decl_stmt>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><operator pos:line="35" pos:column="21">!<pos:position pos:line="35" pos:column="22"/></operator><call><name pos:line="35" pos:column="22">isdigit<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><operator pos:line="35" pos:column="30">*<pos:position pos:line="35" pos:column="31"/></operator><operator pos:line="35" pos:column="31">++<pos:position pos:line="35" pos:column="33"/></operator><name pos:line="35" pos:column="33">eq<pos:position pos:line="35" pos:column="35"/></name></expr></argument>)<pos:position pos:line="35" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="37"/></condition><then pos:line="35" pos:column="37">
			<block type="pseudo"><return pos:line="36" pos:column="25">return <expr><literal type="number" pos:line="36" pos:column="32">0<pos:position pos:line="36" pos:column="33"/></literal></expr>;<pos:position pos:line="36" pos:column="34"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="37" pos:column="17">n<pos:position pos:line="37" pos:column="18"/></name> <operator pos:line="37" pos:column="19">=<pos:position pos:line="37" pos:column="20"/></operator> <call><name pos:line="37" pos:column="21">strtoul<pos:position pos:line="37" pos:column="28"/></name><argument_list pos:line="37" pos:column="28">(<argument><expr><name pos:line="37" pos:column="29">eq<pos:position pos:line="37" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="33">&amp;<pos:position pos:line="37" pos:column="38"/></operator><name pos:line="37" pos:column="34">end<pos:position pos:line="37" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="39">10<pos:position pos:line="37" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="43"/></expr_stmt>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><operator pos:line="38" pos:column="21">*<pos:position pos:line="38" pos:column="22"/></operator><name pos:line="38" pos:column="22">end<pos:position pos:line="38" pos:column="25"/></name></expr>)<pos:position pos:line="38" pos:column="26"/></condition><then pos:line="38" pos:column="26">
			<block type="pseudo"><return pos:line="39" pos:column="25">return <expr><literal type="number" pos:line="39" pos:column="32">0<pos:position pos:line="39" pos:column="33"/></literal></expr>;<pos:position pos:line="39" pos:column="34"/></return></block></then></if>
		<expr_stmt><expr><operator pos:line="40" pos:column="17">*<pos:position pos:line="40" pos:column="18"/></operator><name pos:line="40" pos:column="18">val<pos:position pos:line="40" pos:column="21"/></name> <operator pos:line="40" pos:column="22">=<pos:position pos:line="40" pos:column="23"/></operator> <name pos:line="40" pos:column="24">n<pos:position pos:line="40" pos:column="25"/></name></expr>;<pos:position pos:line="40" pos:column="26"/></expr_stmt>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>
	<return pos:line="42" pos:column="9">return <expr><literal type="number" pos:line="42" pos:column="16">1<pos:position pos:line="42" pos:column="17"/></literal></expr>;<pos:position pos:line="42" pos:column="18"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
