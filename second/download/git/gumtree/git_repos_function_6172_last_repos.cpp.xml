<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6172_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">show_remote_info_item<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">string_list_item<pos:position pos:line="1" pos:column="57"/></name></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">item<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">void<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">cb_data<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">show_info<pos:position pos:line="3" pos:column="25"/></name></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">info<pos:position pos:line="3" pos:column="31"/></name> <init pos:line="3" pos:column="32">= <expr><name pos:line="3" pos:column="34">cb_data<pos:position pos:line="3" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">ref_states<pos:position pos:line="4" pos:column="26"/></name></name> <modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="28">states<pos:position pos:line="4" pos:column="34"/></name> <init pos:line="4" pos:column="35">= <expr><name><name pos:line="4" pos:column="37">info<pos:position pos:line="4" pos:column="41"/></name><operator pos:line="4" pos:column="41">-&gt;<pos:position pos:line="4" pos:column="46"/></operator><name pos:line="4" pos:column="43">states<pos:position pos:line="4" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">name<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name><name pos:line="5" pos:column="28">item<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">-&gt;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="34">string<pos:position pos:line="5" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name><name pos:line="7" pos:column="13">states<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">-&gt;<pos:position pos:line="7" pos:column="24"/></operator><name pos:line="7" pos:column="21">queried<pos:position pos:line="7" pos:column="28"/></name></name></expr>)<pos:position pos:line="7" pos:column="29"/></condition><then pos:line="7" pos:column="29"> <block pos:line="7" pos:column="30">{
		<decl_stmt><decl><type><specifier pos:line="8" pos:column="17">const<pos:position pos:line="8" pos:column="22"/></specifier> <name pos:line="8" pos:column="23">char<pos:position pos:line="8" pos:column="27"/></name> <modifier pos:line="8" pos:column="28">*<pos:position pos:line="8" pos:column="29"/></modifier></type><name pos:line="8" pos:column="29">fmt<pos:position pos:line="8" pos:column="32"/></name> <init pos:line="8" pos:column="33">= <expr><literal type="string" pos:line="8" pos:column="35">"%s"<pos:position pos:line="8" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="9" pos:column="17">const<pos:position pos:line="9" pos:column="22"/></specifier> <name pos:line="9" pos:column="23">char<pos:position pos:line="9" pos:column="27"/></name> <modifier pos:line="9" pos:column="28">*<pos:position pos:line="9" pos:column="29"/></modifier></type><name pos:line="9" pos:column="29">arg<pos:position pos:line="9" pos:column="32"/></name> <init pos:line="9" pos:column="33">= <expr><literal type="string" pos:line="9" pos:column="35">""<pos:position pos:line="9" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="38"/></decl_stmt>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name pos:line="10" pos:column="21">string_list_has_string<pos:position pos:line="10" pos:column="43"/></name><argument_list pos:line="10" pos:column="43">(<argument><expr><operator pos:line="10" pos:column="44">&amp;<pos:position pos:line="10" pos:column="49"/></operator><name><name pos:line="10" pos:column="45">states<pos:position pos:line="10" pos:column="51"/></name><operator pos:line="10" pos:column="51">-&gt;<pos:position pos:line="10" pos:column="56"/></operator></name><operator pos:line="10" pos:column="53">new<pos:position pos:line="10" pos:column="56"/></operator></expr></argument>, <argument><expr><name pos:line="10" pos:column="58">name<pos:position pos:line="10" pos:column="62"/></name></expr></argument>)<pos:position pos:line="10" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="64"/></condition><then pos:line="10" pos:column="64"> <block pos:line="10" pos:column="65">{
			<expr_stmt><expr><name pos:line="11" pos:column="25">fmt<pos:position pos:line="11" pos:column="28"/></name> <operator pos:line="11" pos:column="29">=<pos:position pos:line="11" pos:column="30"/></operator> <call><name pos:line="11" pos:column="31">_<pos:position pos:line="11" pos:column="32"/></name><argument_list pos:line="11" pos:column="32">(<argument><expr><literal type="string" pos:line="11" pos:column="33">" new (next fetch will store in remotes/%s)"<pos:position pos:line="11" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="79"/></expr_stmt>
			<expr_stmt><expr><name pos:line="12" pos:column="25">arg<pos:position pos:line="12" pos:column="28"/></name> <operator pos:line="12" pos:column="29">=<pos:position pos:line="12" pos:column="30"/></operator> <name><name pos:line="12" pos:column="31">states<pos:position pos:line="12" pos:column="37"/></name><operator pos:line="12" pos:column="37">-&gt;<pos:position pos:line="12" pos:column="42"/></operator><name pos:line="12" pos:column="39">remote<pos:position pos:line="12" pos:column="45"/></name><operator pos:line="12" pos:column="45">-&gt;<pos:position pos:line="12" pos:column="50"/></operator><name pos:line="12" pos:column="47">name<pos:position pos:line="12" pos:column="51"/></name></name></expr>;<pos:position pos:line="12" pos:column="52"/></expr_stmt>
		}<pos:position pos:line="13" pos:column="18"/></block></then> <elseif pos:line="13" pos:column="19">else <if pos:line="13" pos:column="24">if <condition pos:line="13" pos:column="27">(<expr><call><name pos:line="13" pos:column="28">string_list_has_string<pos:position pos:line="13" pos:column="50"/></name><argument_list pos:line="13" pos:column="50">(<argument><expr><operator pos:line="13" pos:column="51">&amp;<pos:position pos:line="13" pos:column="56"/></operator><name><name pos:line="13" pos:column="52">states<pos:position pos:line="13" pos:column="58"/></name><operator pos:line="13" pos:column="58">-&gt;<pos:position pos:line="13" pos:column="63"/></operator><name pos:line="13" pos:column="60">tracked<pos:position pos:line="13" pos:column="67"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="69">name<pos:position pos:line="13" pos:column="73"/></name></expr></argument>)<pos:position pos:line="13" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="75"/></condition><then pos:line="13" pos:column="75">
			<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="25">arg<pos:position pos:line="14" pos:column="28"/></name> <operator pos:line="14" pos:column="29">=<pos:position pos:line="14" pos:column="30"/></operator> <call><name pos:line="14" pos:column="31">_<pos:position pos:line="14" pos:column="32"/></name><argument_list pos:line="14" pos:column="32">(<argument><expr><literal type="string" pos:line="14" pos:column="33">" tracked"<pos:position pos:line="14" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt></block></then></if></elseif>
		<elseif pos:line="15" pos:column="17">else <if pos:line="15" pos:column="22">if <condition pos:line="15" pos:column="25">(<expr><call><name pos:line="15" pos:column="26">string_list_has_string<pos:position pos:line="15" pos:column="48"/></name><argument_list pos:line="15" pos:column="48">(<argument><expr><operator pos:line="15" pos:column="49">&amp;<pos:position pos:line="15" pos:column="54"/></operator><name><name pos:line="15" pos:column="50">states<pos:position pos:line="15" pos:column="56"/></name><operator pos:line="15" pos:column="56">-&gt;<pos:position pos:line="15" pos:column="61"/></operator><name pos:line="15" pos:column="58">stale<pos:position pos:line="15" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="65">name<pos:position pos:line="15" pos:column="69"/></name></expr></argument>)<pos:position pos:line="15" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="71"/></condition><then pos:line="15" pos:column="71">
			<block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="25">arg<pos:position pos:line="16" pos:column="28"/></name> <operator pos:line="16" pos:column="29">=<pos:position pos:line="16" pos:column="30"/></operator> <call><name pos:line="16" pos:column="31">_<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">(<argument><expr><literal type="string" pos:line="16" pos:column="33">" stale (use 'git remote prune' to remove)"<pos:position pos:line="16" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="78"/></expr_stmt></block></then></if></elseif>
		<else pos:line="17" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="25">arg<pos:position pos:line="18" pos:column="28"/></name> <operator pos:line="18" pos:column="29">=<pos:position pos:line="18" pos:column="30"/></operator> <call><name pos:line="18" pos:column="31">_<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><literal type="string" pos:line="18" pos:column="33">" ???"<pos:position pos:line="18" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt></block></else></if>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">printf<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><literal type="string" pos:line="19" pos:column="24">"    %-*s"<pos:position pos:line="19" pos:column="34"/></literal></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="36">info<pos:position pos:line="19" pos:column="40"/></name><operator pos:line="19" pos:column="40">-&gt;<pos:position pos:line="19" pos:column="45"/></operator><name pos:line="19" pos:column="42">width<pos:position pos:line="19" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="49">name<pos:position pos:line="19" pos:column="53"/></name></expr></argument>)<pos:position pos:line="19" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">printf<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><name pos:line="20" pos:column="24">fmt<pos:position pos:line="20" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="29">arg<pos:position pos:line="20" pos:column="32"/></name></expr></argument>)<pos:position pos:line="20" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">printf<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><literal type="string" pos:line="21" pos:column="24">"\n"<pos:position pos:line="21" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></then> <else pos:line="22" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="17">printf<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><literal type="string" pos:line="23" pos:column="24">"    %s\n"<pos:position pos:line="23" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="36">name<pos:position pos:line="23" pos:column="40"/></name></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt></block></else></if>

	<return pos:line="25" pos:column="9">return <expr><literal type="number" pos:line="25" pos:column="16">0<pos:position pos:line="25" pos:column="17"/></literal></expr>;<pos:position pos:line="25" pos:column="18"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
