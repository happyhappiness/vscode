<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1023_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">run_processes_parallel<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">int<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">n<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>,
			   <parameter><decl><type><name pos:line="2" pos:column="28">get_next_task_fn<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">get_next_task<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>,
			   <parameter><decl><type><name pos:line="3" pos:column="28">start_failure_fn<pos:position pos:line="3" pos:column="44"/></name></type> <name pos:line="3" pos:column="45">start_failure<pos:position pos:line="3" pos:column="58"/></name></decl></parameter>,
			   <parameter><decl><type><name pos:line="4" pos:column="28">task_finished_fn<pos:position pos:line="4" pos:column="44"/></name></type> <name pos:line="4" pos:column="45">task_finished<pos:position pos:line="4" pos:column="58"/></name></decl></parameter>,
			   <parameter><decl><type><name pos:line="5" pos:column="28">void<pos:position pos:line="5" pos:column="32"/></name> <modifier pos:line="5" pos:column="33">*<pos:position pos:line="5" pos:column="34"/></modifier></type><name pos:line="5" pos:column="34">pp_cb<pos:position pos:line="5" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="40"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">i<pos:position pos:line="7" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="16">code<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">output_timeout<pos:position pos:line="8" pos:column="27"/></name> <init pos:line="8" pos:column="28">= <expr><literal type="number" pos:line="8" pos:column="30">100<pos:position pos:line="8" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">spawn_cap<pos:position pos:line="9" pos:column="22"/></name> <init pos:line="9" pos:column="23">= <expr><literal type="number" pos:line="9" pos:column="25">4<pos:position pos:line="9" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">parallel_processes<pos:position pos:line="10" pos:column="34"/></name></name></type> <name pos:line="10" pos:column="35">pp<pos:position pos:line="10" pos:column="37"/></name></decl>;<pos:position pos:line="10" pos:column="38"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="12" pos:column="9">pp_init<pos:position pos:line="12" pos:column="16"/></name><argument_list pos:line="12" pos:column="16">(<argument><expr><operator pos:line="12" pos:column="17">&amp;<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="18">pp<pos:position pos:line="12" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="22">n<pos:position pos:line="12" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="25">get_next_task<pos:position pos:line="12" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="40">start_failure<pos:position pos:line="12" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="55">task_finished<pos:position pos:line="12" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="70">pp_cb<pos:position pos:line="12" pos:column="75"/></name></expr></argument>)<pos:position pos:line="12" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="77"/></expr_stmt>
	<while pos:line="13" pos:column="9">while <condition pos:line="13" pos:column="15">(<expr><literal type="number" pos:line="13" pos:column="16">1<pos:position pos:line="13" pos:column="17"/></literal></expr>)<pos:position pos:line="13" pos:column="18"/></condition> <block pos:line="13" pos:column="19">{
		<for pos:line="14" pos:column="17">for <control pos:line="14" pos:column="21">(<init><expr><name pos:line="14" pos:column="22">i<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">=<pos:position pos:line="14" pos:column="25"/></operator> <literal type="number" pos:line="14" pos:column="26">0<pos:position pos:line="14" pos:column="27"/></literal></expr>;<pos:position pos:line="14" pos:column="28"/></init>
		    <condition><expr><name pos:line="15" pos:column="21">i<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">&lt;<pos:position pos:line="15" pos:column="27"/></operator> <name pos:line="15" pos:column="25">spawn_cap<pos:position pos:line="15" pos:column="34"/></name> <operator pos:line="15" pos:column="35">&amp;&amp;<pos:position pos:line="15" pos:column="45"/></operator> <operator pos:line="15" pos:column="38">!<pos:position pos:line="15" pos:column="39"/></operator><name><name pos:line="15" pos:column="39">pp<pos:position pos:line="15" pos:column="41"/></name><operator pos:line="15" pos:column="41">.<pos:position pos:line="15" pos:column="42"/></operator><name pos:line="15" pos:column="42">shutdown<pos:position pos:line="15" pos:column="50"/></name></name> <operator pos:line="15" pos:column="51">&amp;&amp;<pos:position pos:line="15" pos:column="61"/></operator>
		    <name><name pos:line="16" pos:column="21">pp<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">.<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="24">nr_processes<pos:position pos:line="16" pos:column="36"/></name></name> <operator pos:line="16" pos:column="37">&lt;<pos:position pos:line="16" pos:column="41"/></operator> <name><name pos:line="16" pos:column="39">pp<pos:position pos:line="16" pos:column="41"/></name><operator pos:line="16" pos:column="41">.<pos:position pos:line="16" pos:column="42"/></operator><name pos:line="16" pos:column="42">max_processes<pos:position pos:line="16" pos:column="55"/></name></name></expr>;<pos:position pos:line="16" pos:column="56"/></condition>
		    <incr><expr><name pos:line="17" pos:column="21">i<pos:position pos:line="17" pos:column="22"/></name><operator pos:line="17" pos:column="22">++<pos:position pos:line="17" pos:column="24"/></operator></expr></incr>)<pos:position pos:line="17" pos:column="25"/></control> <block pos:line="17" pos:column="26">{
			<expr_stmt><expr><name pos:line="18" pos:column="25">code<pos:position pos:line="18" pos:column="29"/></name> <operator pos:line="18" pos:column="30">=<pos:position pos:line="18" pos:column="31"/></operator> <call><name pos:line="18" pos:column="32">pp_start_one<pos:position pos:line="18" pos:column="44"/></name><argument_list pos:line="18" pos:column="44">(<argument><expr><operator pos:line="18" pos:column="45">&amp;<pos:position pos:line="18" pos:column="50"/></operator><name pos:line="18" pos:column="46">pp<pos:position pos:line="18" pos:column="48"/></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="50"/></expr_stmt>
			<if pos:line="19" pos:column="25">if <condition pos:line="19" pos:column="28">(<expr><operator pos:line="19" pos:column="29">!<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="30">code<pos:position pos:line="19" pos:column="34"/></name></expr>)<pos:position pos:line="19" pos:column="35"/></condition><then pos:line="19" pos:column="35">
				<block type="pseudo"><continue pos:line="20" pos:column="33">continue;<pos:position pos:line="20" pos:column="42"/></continue></block></then></if>
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><name pos:line="21" pos:column="29">code<pos:position pos:line="21" pos:column="33"/></name> <operator pos:line="21" pos:column="34">&lt;<pos:position pos:line="21" pos:column="38"/></operator> <literal type="number" pos:line="21" pos:column="36">0<pos:position pos:line="21" pos:column="37"/></literal></expr>)<pos:position pos:line="21" pos:column="38"/></condition><then pos:line="21" pos:column="38"> <block pos:line="21" pos:column="39">{
				<expr_stmt><expr><name><name pos:line="22" pos:column="33">pp<pos:position pos:line="22" pos:column="35"/></name><operator pos:line="22" pos:column="35">.<pos:position pos:line="22" pos:column="36"/></operator><name pos:line="22" pos:column="36">shutdown<pos:position pos:line="22" pos:column="44"/></name></name> <operator pos:line="22" pos:column="45">=<pos:position pos:line="22" pos:column="46"/></operator> <literal type="number" pos:line="22" pos:column="47">1<pos:position pos:line="22" pos:column="48"/></literal></expr>;<pos:position pos:line="22" pos:column="49"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="23" pos:column="33">kill_children<pos:position pos:line="23" pos:column="46"/></name><argument_list pos:line="23" pos:column="46">(<argument><expr><operator pos:line="23" pos:column="47">&amp;<pos:position pos:line="23" pos:column="52"/></operator><name pos:line="23" pos:column="48">pp<pos:position pos:line="23" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="52">-<pos:position pos:line="23" pos:column="53"/></operator><name pos:line="23" pos:column="53">code<pos:position pos:line="23" pos:column="57"/></name></expr></argument>)<pos:position pos:line="23" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="59"/></expr_stmt>
			}<pos:position pos:line="24" pos:column="26"/></block></then></if>
			<break pos:line="25" pos:column="25">break;<pos:position pos:line="25" pos:column="31"/></break>
		}<pos:position pos:line="26" pos:column="18"/></block></for>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">!<pos:position pos:line="27" pos:column="22"/></operator><name><name pos:line="27" pos:column="22">pp<pos:position pos:line="27" pos:column="24"/></name><operator pos:line="27" pos:column="24">.<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="25">nr_processes<pos:position pos:line="27" pos:column="37"/></name></name></expr>)<pos:position pos:line="27" pos:column="38"/></condition><then pos:line="27" pos:column="38">
			<block type="pseudo"><break pos:line="28" pos:column="25">break;<pos:position pos:line="28" pos:column="31"/></break></block></then></if>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">pp_buffer_stderr<pos:position pos:line="29" pos:column="33"/></name><argument_list pos:line="29" pos:column="33">(<argument><expr><operator pos:line="29" pos:column="34">&amp;<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="35">pp<pos:position pos:line="29" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="39">output_timeout<pos:position pos:line="29" pos:column="53"/></name></expr></argument>)<pos:position pos:line="29" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">pp_output<pos:position pos:line="30" pos:column="26"/></name><argument_list pos:line="30" pos:column="26">(<argument><expr><operator pos:line="30" pos:column="27">&amp;<pos:position pos:line="30" pos:column="32"/></operator><name pos:line="30" pos:column="28">pp<pos:position pos:line="30" pos:column="30"/></name></expr></argument>)<pos:position pos:line="30" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name pos:line="31" pos:column="17">code<pos:position pos:line="31" pos:column="21"/></name> <operator pos:line="31" pos:column="22">=<pos:position pos:line="31" pos:column="23"/></operator> <call><name pos:line="31" pos:column="24">pp_collect_finished<pos:position pos:line="31" pos:column="43"/></name><argument_list pos:line="31" pos:column="43">(<argument><expr><operator pos:line="31" pos:column="44">&amp;<pos:position pos:line="31" pos:column="49"/></operator><name pos:line="31" pos:column="45">pp<pos:position pos:line="31" pos:column="47"/></name></expr></argument>)<pos:position pos:line="31" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="49"/></expr_stmt>
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><name pos:line="32" pos:column="21">code<pos:position pos:line="32" pos:column="25"/></name></expr>)<pos:position pos:line="32" pos:column="26"/></condition><then pos:line="32" pos:column="26"> <block pos:line="32" pos:column="27">{
			<expr_stmt><expr><name><name pos:line="33" pos:column="25">pp<pos:position pos:line="33" pos:column="27"/></name><operator pos:line="33" pos:column="27">.<pos:position pos:line="33" pos:column="28"/></operator><name pos:line="33" pos:column="28">shutdown<pos:position pos:line="33" pos:column="36"/></name></name> <operator pos:line="33" pos:column="37">=<pos:position pos:line="33" pos:column="38"/></operator> <literal type="number" pos:line="33" pos:column="39">1<pos:position pos:line="33" pos:column="40"/></literal></expr>;<pos:position pos:line="33" pos:column="41"/></expr_stmt>
			<if pos:line="34" pos:column="25">if <condition pos:line="34" pos:column="28">(<expr><name pos:line="34" pos:column="29">code<pos:position pos:line="34" pos:column="33"/></name> <operator pos:line="34" pos:column="34">&lt;<pos:position pos:line="34" pos:column="38"/></operator> <literal type="number" pos:line="34" pos:column="36">0<pos:position pos:line="34" pos:column="37"/></literal></expr>)<pos:position pos:line="34" pos:column="38"/></condition><then pos:line="34" pos:column="38">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="33">kill_children<pos:position pos:line="35" pos:column="46"/></name><argument_list pos:line="35" pos:column="46">(<argument><expr><operator pos:line="35" pos:column="47">&amp;<pos:position pos:line="35" pos:column="52"/></operator><name pos:line="35" pos:column="48">pp<pos:position pos:line="35" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="52">-<pos:position pos:line="35" pos:column="53"/></operator><name pos:line="35" pos:column="53">code<pos:position pos:line="35" pos:column="57"/></name></expr></argument>)<pos:position pos:line="35" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="59"/></expr_stmt></block></then></if>
		}<pos:position pos:line="36" pos:column="18"/></block></then></if>
	}<pos:position pos:line="37" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="39" pos:column="9">pp_cleanup<pos:position pos:line="39" pos:column="19"/></name><argument_list pos:line="39" pos:column="19">(<argument><expr><operator pos:line="39" pos:column="20">&amp;<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="21">pp<pos:position pos:line="39" pos:column="23"/></name></expr></argument>)<pos:position pos:line="39" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="25"/></expr_stmt>
	<return pos:line="40" pos:column="9">return <expr><literal type="number" pos:line="40" pos:column="16">0<pos:position pos:line="40" pos:column="17"/></literal></expr>;<pos:position pos:line="40" pos:column="18"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
