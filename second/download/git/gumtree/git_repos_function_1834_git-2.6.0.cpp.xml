<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1834_git-2.6.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">prepare_attr_stack<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">path<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">int<pos:position pos:line="1" pos:column="46"/></name></type> <name pos:line="1" pos:column="47">dirlen<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">attr_stack<pos:position pos:line="3" pos:column="26"/></name></name> <modifier pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></modifier></type><name pos:line="3" pos:column="28">elem<pos:position pos:line="3" pos:column="32"/></name></decl>, <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="35">info<pos:position pos:line="3" pos:column="39"/></name></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">len<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">cp<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/*
	 * At the bottom of the attribute stack is the built-in
	 * set of attribute definitions, followed by the contents
	 * of $(prefix)/etc/gitattributes and a file specified by
	 * core.attributesfile.  Then, contents from
	 * .gitattribute files from directories closer to the
	 * root to the ones in deeper directories are pushed
	 * to the stack.  Finally, at the very top of the stack
	 * we always keep the contents of $GIT_DIR/info/attributes.
	 *
	 * When checking, we use entries from near the top of the
	 * stack, preferring $GIT_DIR/info/attributes, then
	 * .gitattributes in deeper directories to shallower ones,
	 * and finally use the built-in set as the default.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">bootstrap_attr_stack<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">()<pos:position pos:line="22" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>

	<comment type="block" pos:line="24" pos:column="9">/*
	 * Pop the "info" one that is always at the top of the stack.
	 */</comment>
	<expr_stmt><expr><name pos:line="27" pos:column="9">info<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">=<pos:position pos:line="27" pos:column="15"/></operator> <name pos:line="27" pos:column="16">attr_stack<pos:position pos:line="27" pos:column="26"/></name></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name pos:line="28" pos:column="9">attr_stack<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">=<pos:position pos:line="28" pos:column="21"/></operator> <name><name pos:line="28" pos:column="22">info<pos:position pos:line="28" pos:column="26"/></name><operator pos:line="28" pos:column="26">-&gt;<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="28">prev<pos:position pos:line="28" pos:column="32"/></name></name></expr>;<pos:position pos:line="28" pos:column="33"/></expr_stmt>

	<comment type="block" pos:line="30" pos:column="9">/*
	 * Pop the ones from directories that are not the prefix of
	 * the path we are checking. Break out of the loop when we see
	 * the root one (whose origin is an empty string "") or the builtin
	 * one (whose origin is NULL) without popping it.
	 */</comment>
	<while pos:line="36" pos:column="9">while <condition pos:line="36" pos:column="15">(<expr><name><name pos:line="36" pos:column="16">attr_stack<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">-&gt;<pos:position pos:line="36" pos:column="31"/></operator><name pos:line="36" pos:column="28">origin<pos:position pos:line="36" pos:column="34"/></name></name></expr>)<pos:position pos:line="36" pos:column="35"/></condition> <block pos:line="36" pos:column="36">{
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">int<pos:position pos:line="37" pos:column="20"/></name></type> <name pos:line="37" pos:column="21">namelen<pos:position pos:line="37" pos:column="28"/></name> <init pos:line="37" pos:column="29">= <expr><call><name pos:line="37" pos:column="31">strlen<pos:position pos:line="37" pos:column="37"/></name><argument_list pos:line="37" pos:column="37">(<argument><expr><name><name pos:line="37" pos:column="38">attr_stack<pos:position pos:line="37" pos:column="48"/></name><operator pos:line="37" pos:column="48">-&gt;<pos:position pos:line="37" pos:column="53"/></operator><name pos:line="37" pos:column="50">origin<pos:position pos:line="37" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="58"/></decl_stmt>

		<expr_stmt><expr><name pos:line="39" pos:column="17">elem<pos:position pos:line="39" pos:column="21"/></name> <operator pos:line="39" pos:column="22">=<pos:position pos:line="39" pos:column="23"/></operator> <name pos:line="39" pos:column="24">attr_stack<pos:position pos:line="39" pos:column="34"/></name></expr>;<pos:position pos:line="39" pos:column="35"/></expr_stmt>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name pos:line="40" pos:column="21">namelen<pos:position pos:line="40" pos:column="28"/></name> <operator pos:line="40" pos:column="29">&lt;=<pos:position pos:line="40" pos:column="34"/></operator> <name pos:line="40" pos:column="32">dirlen<pos:position pos:line="40" pos:column="38"/></name> <operator pos:line="40" pos:column="39">&amp;&amp;<pos:position pos:line="40" pos:column="49"/></operator>
		    <operator pos:line="41" pos:column="21">!<pos:position pos:line="41" pos:column="22"/></operator><call><name pos:line="41" pos:column="22">strncmp<pos:position pos:line="41" pos:column="29"/></name><argument_list pos:line="41" pos:column="29">(<argument><expr><name><name pos:line="41" pos:column="30">elem<pos:position pos:line="41" pos:column="34"/></name><operator pos:line="41" pos:column="34">-&gt;<pos:position pos:line="41" pos:column="39"/></operator><name pos:line="41" pos:column="36">origin<pos:position pos:line="41" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="44">path<pos:position pos:line="41" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="50">namelen<pos:position pos:line="41" pos:column="57"/></name></expr></argument>)<pos:position pos:line="41" pos:column="58"/></argument_list></call> <operator pos:line="41" pos:column="59">&amp;&amp;<pos:position pos:line="41" pos:column="69"/></operator>
		    <operator pos:line="42" pos:column="21">(<pos:position pos:line="42" pos:column="22"/></operator><operator pos:line="42" pos:column="22">!<pos:position pos:line="42" pos:column="23"/></operator><name pos:line="42" pos:column="23">namelen<pos:position pos:line="42" pos:column="30"/></name> <operator pos:line="42" pos:column="31">||<pos:position pos:line="42" pos:column="33"/></operator> <name><name pos:line="42" pos:column="34">path<pos:position pos:line="42" pos:column="38"/></name><index pos:line="42" pos:column="38">[<expr><name pos:line="42" pos:column="39">namelen<pos:position pos:line="42" pos:column="46"/></name></expr>]<pos:position pos:line="42" pos:column="47"/></index></name> <operator pos:line="42" pos:column="48">==<pos:position pos:line="42" pos:column="50"/></operator> <literal type="char" pos:line="42" pos:column="51">'/'<pos:position pos:line="42" pos:column="54"/></literal><operator pos:line="42" pos:column="54">)<pos:position pos:line="42" pos:column="55"/></operator></expr>)<pos:position pos:line="42" pos:column="56"/></condition><then pos:line="42" pos:column="56">
			<block type="pseudo"><break pos:line="43" pos:column="25">break;<pos:position pos:line="43" pos:column="31"/></break></block></then></if>

		<expr_stmt><expr><call><name pos:line="45" pos:column="17">debug_pop<pos:position pos:line="45" pos:column="26"/></name><argument_list pos:line="45" pos:column="26">(<argument><expr><name pos:line="45" pos:column="27">elem<pos:position pos:line="45" pos:column="31"/></name></expr></argument>)<pos:position pos:line="45" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="46" pos:column="17">attr_stack<pos:position pos:line="46" pos:column="27"/></name> <operator pos:line="46" pos:column="28">=<pos:position pos:line="46" pos:column="29"/></operator> <name><name pos:line="46" pos:column="30">elem<pos:position pos:line="46" pos:column="34"/></name><operator pos:line="46" pos:column="34">-&gt;<pos:position pos:line="46" pos:column="39"/></operator><name pos:line="46" pos:column="36">prev<pos:position pos:line="46" pos:column="40"/></name></name></expr>;<pos:position pos:line="46" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="47" pos:column="17">free_attr_elem<pos:position pos:line="47" pos:column="31"/></name><argument_list pos:line="47" pos:column="31">(<argument><expr><name pos:line="47" pos:column="32">elem<pos:position pos:line="47" pos:column="36"/></name></expr></argument>)<pos:position pos:line="47" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="48" pos:column="10"/></block></while>

	<comment type="block" pos:line="50" pos:column="9">/*
	 * Read from parent directories and push them down
	 */</comment>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><operator pos:line="53" pos:column="13">!<pos:position pos:line="53" pos:column="14"/></operator><call><name pos:line="53" pos:column="14">is_bare_repository<pos:position pos:line="53" pos:column="32"/></name><argument_list pos:line="53" pos:column="32">()<pos:position pos:line="53" pos:column="34"/></argument_list></call> <operator pos:line="53" pos:column="35">||<pos:position pos:line="53" pos:column="37"/></operator> <name pos:line="53" pos:column="38">direction<pos:position pos:line="53" pos:column="47"/></name> <operator pos:line="53" pos:column="48">==<pos:position pos:line="53" pos:column="50"/></operator> <name pos:line="53" pos:column="51">GIT_ATTR_INDEX<pos:position pos:line="53" pos:column="65"/></name></expr>)<pos:position pos:line="53" pos:column="66"/></condition><then pos:line="53" pos:column="66"> <block pos:line="53" pos:column="67">{
		<comment type="block" pos:line="54" pos:column="17">/*
		 * bootstrap_attr_stack() should have added, and the
		 * above loop should have stopped before popping, the
		 * root element whose attr_stack-&gt;origin is set to an
		 * empty string.
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="60" pos:column="17">struct<pos:position pos:line="60" pos:column="23"/></name> <name pos:line="60" pos:column="24">strbuf<pos:position pos:line="60" pos:column="30"/></name></name></type> <name pos:line="60" pos:column="31">pathbuf<pos:position pos:line="60" pos:column="38"/></name> <init pos:line="60" pos:column="39">= <expr><name pos:line="60" pos:column="41">STRBUF_INIT<pos:position pos:line="60" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="60" pos:column="53"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="62" pos:column="17">assert<pos:position pos:line="62" pos:column="23"/></name><argument_list pos:line="62" pos:column="23">(<argument><expr><name><name pos:line="62" pos:column="24">attr_stack<pos:position pos:line="62" pos:column="34"/></name><operator pos:line="62" pos:column="34">-&gt;<pos:position pos:line="62" pos:column="39"/></operator><name pos:line="62" pos:column="36">origin<pos:position pos:line="62" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="44"/></expr_stmt>
		<while pos:line="63" pos:column="17">while <condition pos:line="63" pos:column="23">(<expr><literal type="number" pos:line="63" pos:column="24">1<pos:position pos:line="63" pos:column="25"/></literal></expr>)<pos:position pos:line="63" pos:column="26"/></condition> <block pos:line="63" pos:column="27">{
			<expr_stmt><expr><name pos:line="64" pos:column="25">len<pos:position pos:line="64" pos:column="28"/></name> <operator pos:line="64" pos:column="29">=<pos:position pos:line="64" pos:column="30"/></operator> <call><name pos:line="64" pos:column="31">strlen<pos:position pos:line="64" pos:column="37"/></name><argument_list pos:line="64" pos:column="37">(<argument><expr><name><name pos:line="64" pos:column="38">attr_stack<pos:position pos:line="64" pos:column="48"/></name><operator pos:line="64" pos:column="48">-&gt;<pos:position pos:line="64" pos:column="53"/></operator><name pos:line="64" pos:column="50">origin<pos:position pos:line="64" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="58"/></expr_stmt>
			<if pos:line="65" pos:column="25">if <condition pos:line="65" pos:column="28">(<expr><name pos:line="65" pos:column="29">dirlen<pos:position pos:line="65" pos:column="35"/></name> <operator pos:line="65" pos:column="36">&lt;=<pos:position pos:line="65" pos:column="41"/></operator> <name pos:line="65" pos:column="39">len<pos:position pos:line="65" pos:column="42"/></name></expr>)<pos:position pos:line="65" pos:column="43"/></condition><then pos:line="65" pos:column="43">
				<block type="pseudo"><break pos:line="66" pos:column="33">break;<pos:position pos:line="66" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><name pos:line="67" pos:column="25">cp<pos:position pos:line="67" pos:column="27"/></name> <operator pos:line="67" pos:column="28">=<pos:position pos:line="67" pos:column="29"/></operator> <call><name pos:line="67" pos:column="30">memchr<pos:position pos:line="67" pos:column="36"/></name><argument_list pos:line="67" pos:column="36">(<argument><expr><name pos:line="67" pos:column="37">path<pos:position pos:line="67" pos:column="41"/></name> <operator pos:line="67" pos:column="42">+<pos:position pos:line="67" pos:column="43"/></operator> <name pos:line="67" pos:column="44">len<pos:position pos:line="67" pos:column="47"/></name> <operator pos:line="67" pos:column="48">+<pos:position pos:line="67" pos:column="49"/></operator> <literal type="number" pos:line="67" pos:column="50">1<pos:position pos:line="67" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="67" pos:column="53">'/'<pos:position pos:line="67" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="58">dirlen<pos:position pos:line="67" pos:column="64"/></name> <operator pos:line="67" pos:column="65">-<pos:position pos:line="67" pos:column="66"/></operator> <name pos:line="67" pos:column="67">len<pos:position pos:line="67" pos:column="70"/></name> <operator pos:line="67" pos:column="71">-<pos:position pos:line="67" pos:column="72"/></operator> <literal type="number" pos:line="67" pos:column="73">1<pos:position pos:line="67" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="76"/></expr_stmt>
			<if pos:line="68" pos:column="25">if <condition pos:line="68" pos:column="28">(<expr><operator pos:line="68" pos:column="29">!<pos:position pos:line="68" pos:column="30"/></operator><name pos:line="68" pos:column="30">cp<pos:position pos:line="68" pos:column="32"/></name></expr>)<pos:position pos:line="68" pos:column="33"/></condition><then pos:line="68" pos:column="33">
				<block type="pseudo"><expr_stmt><expr><name pos:line="69" pos:column="33">cp<pos:position pos:line="69" pos:column="35"/></name> <operator pos:line="69" pos:column="36">=<pos:position pos:line="69" pos:column="37"/></operator> <name pos:line="69" pos:column="38">path<pos:position pos:line="69" pos:column="42"/></name> <operator pos:line="69" pos:column="43">+<pos:position pos:line="69" pos:column="44"/></operator> <name pos:line="69" pos:column="45">dirlen<pos:position pos:line="69" pos:column="51"/></name></expr>;<pos:position pos:line="69" pos:column="52"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="70" pos:column="25">strbuf_add<pos:position pos:line="70" pos:column="35"/></name><argument_list pos:line="70" pos:column="35">(<argument><expr><operator pos:line="70" pos:column="36">&amp;<pos:position pos:line="70" pos:column="41"/></operator><name pos:line="70" pos:column="37">pathbuf<pos:position pos:line="70" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="46">path<pos:position pos:line="70" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="52">cp<pos:position pos:line="70" pos:column="54"/></name> <operator pos:line="70" pos:column="55">-<pos:position pos:line="70" pos:column="56"/></operator> <name pos:line="70" pos:column="57">path<pos:position pos:line="70" pos:column="61"/></name></expr></argument>)<pos:position pos:line="70" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="63"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="71" pos:column="25">strbuf_addch<pos:position pos:line="71" pos:column="37"/></name><argument_list pos:line="71" pos:column="37">(<argument><expr><operator pos:line="71" pos:column="38">&amp;<pos:position pos:line="71" pos:column="43"/></operator><name pos:line="71" pos:column="39">pathbuf<pos:position pos:line="71" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="71" pos:column="48">'/'<pos:position pos:line="71" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="53"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="72" pos:column="25">strbuf_addstr<pos:position pos:line="72" pos:column="38"/></name><argument_list pos:line="72" pos:column="38">(<argument><expr><operator pos:line="72" pos:column="39">&amp;<pos:position pos:line="72" pos:column="44"/></operator><name pos:line="72" pos:column="40">pathbuf<pos:position pos:line="72" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="49">GITATTRIBUTES_FILE<pos:position pos:line="72" pos:column="67"/></name></expr></argument>)<pos:position pos:line="72" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><name pos:line="73" pos:column="25">elem<pos:position pos:line="73" pos:column="29"/></name> <operator pos:line="73" pos:column="30">=<pos:position pos:line="73" pos:column="31"/></operator> <call><name pos:line="73" pos:column="32">read_attr<pos:position pos:line="73" pos:column="41"/></name><argument_list pos:line="73" pos:column="41">(<argument><expr><name><name pos:line="73" pos:column="42">pathbuf<pos:position pos:line="73" pos:column="49"/></name><operator pos:line="73" pos:column="49">.<pos:position pos:line="73" pos:column="50"/></operator><name pos:line="73" pos:column="50">buf<pos:position pos:line="73" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="55">0<pos:position pos:line="73" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="58"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="74" pos:column="25">strbuf_setlen<pos:position pos:line="74" pos:column="38"/></name><argument_list pos:line="74" pos:column="38">(<argument><expr><operator pos:line="74" pos:column="39">&amp;<pos:position pos:line="74" pos:column="44"/></operator><name pos:line="74" pos:column="40">pathbuf<pos:position pos:line="74" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="49">cp<pos:position pos:line="74" pos:column="51"/></name> <operator pos:line="74" pos:column="52">-<pos:position pos:line="74" pos:column="53"/></operator> <name pos:line="74" pos:column="54">path<pos:position pos:line="74" pos:column="58"/></name></expr></argument>)<pos:position pos:line="74" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="75" pos:column="25">elem<pos:position pos:line="75" pos:column="29"/></name><operator pos:line="75" pos:column="29">-&gt;<pos:position pos:line="75" pos:column="34"/></operator><name pos:line="75" pos:column="31">origin<pos:position pos:line="75" pos:column="37"/></name></name> <operator pos:line="75" pos:column="38">=<pos:position pos:line="75" pos:column="39"/></operator> <call><name pos:line="75" pos:column="40">strbuf_detach<pos:position pos:line="75" pos:column="53"/></name><argument_list pos:line="75" pos:column="53">(<argument><expr><operator pos:line="75" pos:column="54">&amp;<pos:position pos:line="75" pos:column="59"/></operator><name pos:line="75" pos:column="55">pathbuf<pos:position pos:line="75" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="64">&amp;<pos:position pos:line="75" pos:column="69"/></operator><name><name pos:line="75" pos:column="65">elem<pos:position pos:line="75" pos:column="69"/></name><operator pos:line="75" pos:column="69">-&gt;<pos:position pos:line="75" pos:column="74"/></operator><name pos:line="75" pos:column="71">originlen<pos:position pos:line="75" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="82"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="76" pos:column="25">elem<pos:position pos:line="76" pos:column="29"/></name><operator pos:line="76" pos:column="29">-&gt;<pos:position pos:line="76" pos:column="34"/></operator><name pos:line="76" pos:column="31">prev<pos:position pos:line="76" pos:column="35"/></name></name> <operator pos:line="76" pos:column="36">=<pos:position pos:line="76" pos:column="37"/></operator> <name pos:line="76" pos:column="38">attr_stack<pos:position pos:line="76" pos:column="48"/></name></expr>;<pos:position pos:line="76" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><name pos:line="77" pos:column="25">attr_stack<pos:position pos:line="77" pos:column="35"/></name> <operator pos:line="77" pos:column="36">=<pos:position pos:line="77" pos:column="37"/></operator> <name pos:line="77" pos:column="38">elem<pos:position pos:line="77" pos:column="42"/></name></expr>;<pos:position pos:line="77" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="78" pos:column="25">debug_push<pos:position pos:line="78" pos:column="35"/></name><argument_list pos:line="78" pos:column="35">(<argument><expr><name pos:line="78" pos:column="36">elem<pos:position pos:line="78" pos:column="40"/></name></expr></argument>)<pos:position pos:line="78" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="79" pos:column="18"/></block></while>

		<expr_stmt><expr><call><name pos:line="81" pos:column="17">strbuf_release<pos:position pos:line="81" pos:column="31"/></name><argument_list pos:line="81" pos:column="31">(<argument><expr><operator pos:line="81" pos:column="32">&amp;<pos:position pos:line="81" pos:column="37"/></operator><name pos:line="81" pos:column="33">pathbuf<pos:position pos:line="81" pos:column="40"/></name></expr></argument>)<pos:position pos:line="81" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="82" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="84" pos:column="9">/*
	 * Finally push the "info" one at the top of the stack.
	 */</comment>
	<expr_stmt><expr><name><name pos:line="87" pos:column="9">info<pos:position pos:line="87" pos:column="13"/></name><operator pos:line="87" pos:column="13">-&gt;<pos:position pos:line="87" pos:column="18"/></operator><name pos:line="87" pos:column="15">prev<pos:position pos:line="87" pos:column="19"/></name></name> <operator pos:line="87" pos:column="20">=<pos:position pos:line="87" pos:column="21"/></operator> <name pos:line="87" pos:column="22">attr_stack<pos:position pos:line="87" pos:column="32"/></name></expr>;<pos:position pos:line="87" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name pos:line="88" pos:column="9">attr_stack<pos:position pos:line="88" pos:column="19"/></name> <operator pos:line="88" pos:column="20">=<pos:position pos:line="88" pos:column="21"/></operator> <name pos:line="88" pos:column="22">info<pos:position pos:line="88" pos:column="26"/></name></expr>;<pos:position pos:line="88" pos:column="27"/></expr_stmt>
}<pos:position pos:line="89" pos:column="2"/></block></function></unit>
