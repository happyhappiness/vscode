<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6949_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">set_regs<pos:position pos:line="3" pos:column="9"/></name> <parameter_list pos:line="3" pos:column="10">(<parameter><decl><type><specifier pos:line="3" pos:column="11">const<pos:position pos:line="3" pos:column="16"/></specifier> <name pos:line="3" pos:column="17">regex_t<pos:position pos:line="3" pos:column="24"/></name> <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier></type><name pos:line="3" pos:column="26">preg<pos:position pos:line="3" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="32">const<pos:position pos:line="3" pos:column="37"/></specifier> <name pos:line="3" pos:column="38">re_match_context_t<pos:position pos:line="3" pos:column="56"/></name> <modifier pos:line="3" pos:column="57">*<pos:position pos:line="3" pos:column="58"/></modifier></type><name pos:line="3" pos:column="58">mctx<pos:position pos:line="3" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="64">size_t<pos:position pos:line="3" pos:column="70"/></name></type> <name pos:line="3" pos:column="71">nmatch<pos:position pos:line="3" pos:column="77"/></name></decl></parameter>,
	  <parameter><decl><type><name pos:line="4" pos:column="11">regmatch_t<pos:position pos:line="4" pos:column="21"/></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">pmatch<pos:position pos:line="4" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="31">int<pos:position pos:line="4" pos:column="34"/></name></type> <name pos:line="4" pos:column="35">fl_backtrack<pos:position pos:line="4" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="48"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">re_dfa_t<pos:position pos:line="6" pos:column="17"/></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier></type><name pos:line="6" pos:column="19">dfa<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><operator pos:line="6" pos:column="25">(<pos:position pos:line="6" pos:column="26"/></operator><specifier pos:line="6" pos:column="26">const<pos:position pos:line="6" pos:column="31"/></specifier> <name pos:line="6" pos:column="32">re_dfa_t<pos:position pos:line="6" pos:column="40"/></name> <operator pos:line="6" pos:column="41">*<pos:position pos:line="6" pos:column="42"/></operator><operator pos:line="6" pos:column="42">)<pos:position pos:line="6" pos:column="43"/></operator> <name><name pos:line="6" pos:column="44">preg<pos:position pos:line="6" pos:column="48"/></name><operator pos:line="6" pos:column="48">-&gt;<pos:position pos:line="6" pos:column="53"/></operator><name pos:line="6" pos:column="50">buffer<pos:position pos:line="6" pos:column="56"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="57"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">idx<pos:position pos:line="7" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="12">cur_node<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">re_node_set<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">eps_via_nodes<pos:position pos:line="8" pos:column="28"/></name></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="9" pos:column="3">struct<pos:position pos:line="9" pos:column="9"/></name> <name pos:line="9" pos:column="10">re_fail_stack_t<pos:position pos:line="9" pos:column="25"/></name></name> <modifier pos:line="9" pos:column="26">*<pos:position pos:line="9" pos:column="27"/></modifier></type><name pos:line="9" pos:column="27">fs<pos:position pos:line="9" pos:column="29"/></name></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name><name pos:line="10" pos:column="3">struct<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">re_fail_stack_t<pos:position pos:line="10" pos:column="25"/></name></name></type> <name pos:line="10" pos:column="26">fs_body<pos:position pos:line="10" pos:column="33"/></name> <init pos:line="10" pos:column="34">= <expr><block pos:line="10" pos:column="36">{ <expr><literal type="number" pos:line="10" pos:column="38">0<pos:position pos:line="10" pos:column="39"/></literal></expr>, <expr><literal type="number" pos:line="10" pos:column="41">2<pos:position pos:line="10" pos:column="42"/></literal></expr>, <expr><name pos:line="10" pos:column="44">NULL<pos:position pos:line="10" pos:column="48"/></name></expr> }<pos:position pos:line="10" pos:column="50"/></block></expr></init></decl>;<pos:position pos:line="10" pos:column="51"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="11" pos:column="3">regmatch_t<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">prev_idx_match<pos:position pos:line="11" pos:column="29"/></name></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="12" pos:column="3">int<pos:position pos:line="12" pos:column="6"/></name></type> <name pos:line="12" pos:column="7">prev_idx_match_malloced<pos:position pos:line="12" pos:column="30"/></name> <init pos:line="12" pos:column="31">= <expr><literal type="number" pos:line="12" pos:column="33">0<pos:position pos:line="12" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="35"/></decl_stmt>

<cpp:ifdef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifdef<pos:position pos:line="14" pos:column="7"/></cpp:directive> <name pos:line="14" pos:column="8">DEBUG<pos:position pos:line="14" pos:column="13"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="15" pos:column="3">assert<pos:position pos:line="15" pos:column="9"/></name> <argument_list pos:line="15" pos:column="10">(<argument><expr><name pos:line="15" pos:column="11">nmatch<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">&gt;<pos:position pos:line="15" pos:column="22"/></operator> <literal type="number" pos:line="15" pos:column="20">1<pos:position pos:line="15" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="23"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">assert<pos:position pos:line="16" pos:column="9"/></name> <argument_list pos:line="16" pos:column="10">(<argument><expr><name><name pos:line="16" pos:column="11">mctx<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">-&gt;<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="17">state_log<pos:position pos:line="16" pos:column="26"/></name></name> <operator pos:line="16" pos:column="27">!=<pos:position pos:line="16" pos:column="29"/></operator> <name pos:line="16" pos:column="30">NULL<pos:position pos:line="16" pos:column="34"/></name></expr></argument>)<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><name pos:line="18" pos:column="7">fl_backtrack<pos:position pos:line="18" pos:column="19"/></name></expr>)<pos:position pos:line="18" pos:column="20"/></condition><then pos:line="18" pos:column="20">
    <block pos:line="19" pos:column="5">{
      <expr_stmt><expr><name pos:line="20" pos:column="7">fs<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator> <operator pos:line="20" pos:column="12">&amp;<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="13">fs_body<pos:position pos:line="20" pos:column="20"/></name></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="21" pos:column="7">fs<pos:position pos:line="21" pos:column="9"/></name><operator pos:line="21" pos:column="9">-&gt;<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="11">stack<pos:position pos:line="21" pos:column="16"/></name></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <call><name pos:line="21" pos:column="19">re_malloc<pos:position pos:line="21" pos:column="28"/></name> <argument_list pos:line="21" pos:column="29">(<argument><expr pos:line="21" pos:column="30">struct <name pos:line="21" pos:column="37">re_fail_stack_ent_t<pos:position pos:line="21" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="58">fs<pos:position pos:line="21" pos:column="60"/></name><operator pos:line="21" pos:column="60">-&gt;<pos:position pos:line="21" pos:column="65"/></operator><name pos:line="21" pos:column="62">alloc<pos:position pos:line="21" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="69"/></expr_stmt>
      <if pos:line="22" pos:column="7">if <condition pos:line="22" pos:column="10">(<expr><name><name pos:line="22" pos:column="11">fs<pos:position pos:line="22" pos:column="13"/></name><operator pos:line="22" pos:column="13">-&gt;<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="15">stack<pos:position pos:line="22" pos:column="20"/></name></name> <operator pos:line="22" pos:column="21">==<pos:position pos:line="22" pos:column="23"/></operator> <name pos:line="22" pos:column="24">NULL<pos:position pos:line="22" pos:column="28"/></name></expr>)<pos:position pos:line="22" pos:column="29"/></condition><then pos:line="22" pos:column="29">
	<block type="pseudo"><return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">REG_ESPACE<pos:position pos:line="23" pos:column="26"/></name></expr>;<pos:position pos:line="23" pos:column="27"/></return></block></then></if>
    }<pos:position pos:line="24" pos:column="6"/></block></then>
  <else pos:line="25" pos:column="3">else
    <block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="5">fs<pos:position pos:line="26" pos:column="7"/></name> <operator pos:line="26" pos:column="8">=<pos:position pos:line="26" pos:column="9"/></operator> <name pos:line="26" pos:column="10">NULL<pos:position pos:line="26" pos:column="14"/></name></expr>;<pos:position pos:line="26" pos:column="15"/></expr_stmt></block></else></if>

  <expr_stmt><expr><name pos:line="28" pos:column="3">cur_node<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <name><name pos:line="28" pos:column="14">dfa<pos:position pos:line="28" pos:column="17"/></name><operator pos:line="28" pos:column="17">-&gt;<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="19">init_node<pos:position pos:line="28" pos:column="28"/></name></name></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="29" pos:column="3">re_node_set_init_empty<pos:position pos:line="29" pos:column="25"/></name> <argument_list pos:line="29" pos:column="26">(<argument><expr><operator pos:line="29" pos:column="27">&amp;<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="28">eps_via_nodes<pos:position pos:line="29" pos:column="41"/></name></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt>

<cpp:ifdef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifdef<pos:position pos:line="31" pos:column="7"/></cpp:directive> <name pos:line="31" pos:column="8">HAVE_ALLOCA<pos:position pos:line="31" pos:column="19"/></name></cpp:ifdef>
  <if pos:line="32" pos:column="3">if <condition pos:line="32" pos:column="6">(<expr><call><name pos:line="32" pos:column="7">__libc_use_alloca<pos:position pos:line="32" pos:column="24"/></name> <argument_list pos:line="32" pos:column="25">(<argument><expr><name pos:line="32" pos:column="26">nmatch<pos:position pos:line="32" pos:column="32"/></name> <operator pos:line="32" pos:column="33">*<pos:position pos:line="32" pos:column="34"/></operator> <sizeof pos:line="32" pos:column="35">sizeof <argument_list pos:line="32" pos:column="42">(<argument><expr><name pos:line="32" pos:column="43">regmatch_t<pos:position pos:line="32" pos:column="53"/></name></expr></argument>)<pos:position pos:line="32" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="56"/></condition><then pos:line="32" pos:column="56">
    <block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="5">prev_idx_match<pos:position pos:line="33" pos:column="19"/></name> <operator pos:line="33" pos:column="20">=<pos:position pos:line="33" pos:column="21"/></operator> <operator pos:line="33" pos:column="22">(<pos:position pos:line="33" pos:column="23"/></operator><name pos:line="33" pos:column="23">regmatch_t<pos:position pos:line="33" pos:column="33"/></name> <operator pos:line="33" pos:column="34">*<pos:position pos:line="33" pos:column="35"/></operator><operator pos:line="33" pos:column="35">)<pos:position pos:line="33" pos:column="36"/></operator> <call><name pos:line="33" pos:column="37">alloca<pos:position pos:line="33" pos:column="43"/></name> <argument_list pos:line="33" pos:column="44">(<argument><expr><name pos:line="33" pos:column="45">nmatch<pos:position pos:line="33" pos:column="51"/></name> <operator pos:line="33" pos:column="52">*<pos:position pos:line="33" pos:column="53"/></operator> <sizeof pos:line="33" pos:column="54">sizeof <argument_list pos:line="33" pos:column="61">(<argument><expr><name pos:line="33" pos:column="62">regmatch_t<pos:position pos:line="33" pos:column="72"/></name></expr></argument>)<pos:position pos:line="33" pos:column="73"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="33" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="75"/></expr_stmt></block></then>
  <else pos:line="34" pos:column="3">else
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>
    <block pos:line="36" pos:column="5">{
      <expr_stmt><expr><name pos:line="37" pos:column="7">prev_idx_match<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">=<pos:position pos:line="37" pos:column="23"/></operator> <call><name pos:line="37" pos:column="24">re_malloc<pos:position pos:line="37" pos:column="33"/></name> <argument_list pos:line="37" pos:column="34">(<argument><expr><name pos:line="37" pos:column="35">regmatch_t<pos:position pos:line="37" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="47">nmatch<pos:position pos:line="37" pos:column="53"/></name></expr></argument>)<pos:position pos:line="37" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="55"/></expr_stmt>
      <if pos:line="38" pos:column="7">if <condition pos:line="38" pos:column="10">(<expr><name pos:line="38" pos:column="11">prev_idx_match<pos:position pos:line="38" pos:column="25"/></name> <operator pos:line="38" pos:column="26">==<pos:position pos:line="38" pos:column="28"/></operator> <name pos:line="38" pos:column="29">NULL<pos:position pos:line="38" pos:column="33"/></name></expr>)<pos:position pos:line="38" pos:column="34"/></condition><then pos:line="38" pos:column="34">
	<block pos:line="39" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="40" pos:column="11">free_fail_stack_return<pos:position pos:line="40" pos:column="33"/></name> <argument_list pos:line="40" pos:column="34">(<argument><expr><name pos:line="40" pos:column="35">fs<pos:position pos:line="40" pos:column="37"/></name></expr></argument>)<pos:position pos:line="40" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="39"/></expr_stmt>
	  <return pos:line="41" pos:column="11">return <expr><name pos:line="41" pos:column="18">REG_ESPACE<pos:position pos:line="41" pos:column="28"/></name></expr>;<pos:position pos:line="41" pos:column="29"/></return>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if>
      <expr_stmt><expr><name pos:line="43" pos:column="7">prev_idx_match_malloced<pos:position pos:line="43" pos:column="30"/></name> <operator pos:line="43" pos:column="31">=<pos:position pos:line="43" pos:column="32"/></operator> <literal type="number" pos:line="43" pos:column="33">1<pos:position pos:line="43" pos:column="34"/></literal></expr>;<pos:position pos:line="43" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="45" pos:column="3">memcpy<pos:position pos:line="45" pos:column="9"/></name> <argument_list pos:line="45" pos:column="10">(<argument><expr><name pos:line="45" pos:column="11">prev_idx_match<pos:position pos:line="45" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="27">pmatch<pos:position pos:line="45" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="45" pos:column="35">sizeof <argument_list pos:line="45" pos:column="42">(<argument><expr><name pos:line="45" pos:column="43">regmatch_t<pos:position pos:line="45" pos:column="53"/></name></expr></argument>)<pos:position pos:line="45" pos:column="54"/></argument_list></sizeof> <operator pos:line="45" pos:column="55">*<pos:position pos:line="45" pos:column="56"/></operator> <name pos:line="45" pos:column="57">nmatch<pos:position pos:line="45" pos:column="63"/></name></expr></argument>)<pos:position pos:line="45" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="65"/></expr_stmt>

  <for pos:line="47" pos:column="3">for <control pos:line="47" pos:column="7">(<init><expr><name pos:line="47" pos:column="8">idx<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">=<pos:position pos:line="47" pos:column="13"/></operator> <name><name pos:line="47" pos:column="14">pmatch<pos:position pos:line="47" pos:column="20"/></name><index pos:line="47" pos:column="20">[<expr><literal type="number" pos:line="47" pos:column="21">0<pos:position pos:line="47" pos:column="22"/></literal></expr>]<pos:position pos:line="47" pos:column="23"/></index></name><operator pos:line="47" pos:column="23">.<pos:position pos:line="47" pos:column="24"/></operator><name pos:line="47" pos:column="24">rm_so<pos:position pos:line="47" pos:column="29"/></name></expr>;<pos:position pos:line="47" pos:column="30"/></init> <condition><expr><name pos:line="47" pos:column="31">idx<pos:position pos:line="47" pos:column="34"/></name> <operator pos:line="47" pos:column="35">&lt;=<pos:position pos:line="47" pos:column="40"/></operator> <name><name pos:line="47" pos:column="38">pmatch<pos:position pos:line="47" pos:column="44"/></name><index pos:line="47" pos:column="44">[<expr><literal type="number" pos:line="47" pos:column="45">0<pos:position pos:line="47" pos:column="46"/></literal></expr>]<pos:position pos:line="47" pos:column="47"/></index></name><operator pos:line="47" pos:column="47">.<pos:position pos:line="47" pos:column="48"/></operator><name pos:line="47" pos:column="48">rm_eo<pos:position pos:line="47" pos:column="53"/></name></expr> ;<pos:position pos:line="47" pos:column="55"/></condition><incr/>)<pos:position pos:line="47" pos:column="56"/></control>
    <block pos:line="48" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="49" pos:column="7">update_regs<pos:position pos:line="49" pos:column="18"/></name> <argument_list pos:line="49" pos:column="19">(<argument><expr><name pos:line="49" pos:column="20">dfa<pos:position pos:line="49" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="25">pmatch<pos:position pos:line="49" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="33">prev_idx_match<pos:position pos:line="49" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="49">cur_node<pos:position pos:line="49" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="59">idx<pos:position pos:line="49" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="64">nmatch<pos:position pos:line="49" pos:column="70"/></name></expr></argument>)<pos:position pos:line="49" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="72"/></expr_stmt>

      <if pos:line="51" pos:column="7">if <condition pos:line="51" pos:column="10">(<expr><name pos:line="51" pos:column="11">idx<pos:position pos:line="51" pos:column="14"/></name> <operator pos:line="51" pos:column="15">==<pos:position pos:line="51" pos:column="17"/></operator> <name><name pos:line="51" pos:column="18">pmatch<pos:position pos:line="51" pos:column="24"/></name><index pos:line="51" pos:column="24">[<expr><literal type="number" pos:line="51" pos:column="25">0<pos:position pos:line="51" pos:column="26"/></literal></expr>]<pos:position pos:line="51" pos:column="27"/></index></name><operator pos:line="51" pos:column="27">.<pos:position pos:line="51" pos:column="28"/></operator><name pos:line="51" pos:column="28">rm_eo<pos:position pos:line="51" pos:column="33"/></name> <operator pos:line="51" pos:column="34">&amp;&amp;<pos:position pos:line="51" pos:column="44"/></operator> <name pos:line="51" pos:column="37">cur_node<pos:position pos:line="51" pos:column="45"/></name> <operator pos:line="51" pos:column="46">==<pos:position pos:line="51" pos:column="48"/></operator> <name><name pos:line="51" pos:column="49">mctx<pos:position pos:line="51" pos:column="53"/></name><operator pos:line="51" pos:column="53">-&gt;<pos:position pos:line="51" pos:column="58"/></operator><name pos:line="51" pos:column="55">last_node<pos:position pos:line="51" pos:column="64"/></name></name></expr>)<pos:position pos:line="51" pos:column="65"/></condition><then pos:line="51" pos:column="65">
	<block pos:line="52" pos:column="9">{
	  <decl_stmt><decl><type><name pos:line="53" pos:column="11">int<pos:position pos:line="53" pos:column="14"/></name></type> <name pos:line="53" pos:column="15">reg_idx<pos:position pos:line="53" pos:column="22"/></name></decl>;<pos:position pos:line="53" pos:column="23"/></decl_stmt>
	  <if pos:line="54" pos:column="11">if <condition pos:line="54" pos:column="14">(<expr><name pos:line="54" pos:column="15">fs<pos:position pos:line="54" pos:column="17"/></name></expr>)<pos:position pos:line="54" pos:column="18"/></condition><then pos:line="54" pos:column="18">
	    <block pos:line="55" pos:column="13">{
	      <for pos:line="56" pos:column="15">for <control pos:line="56" pos:column="19">(<init><expr><name pos:line="56" pos:column="20">reg_idx<pos:position pos:line="56" pos:column="27"/></name> <operator pos:line="56" pos:column="28">=<pos:position pos:line="56" pos:column="29"/></operator> <literal type="number" pos:line="56" pos:column="30">0<pos:position pos:line="56" pos:column="31"/></literal></expr>;<pos:position pos:line="56" pos:column="32"/></init> <condition><expr><name pos:line="56" pos:column="33">reg_idx<pos:position pos:line="56" pos:column="40"/></name> <operator pos:line="56" pos:column="41">&lt;<pos:position pos:line="56" pos:column="45"/></operator> <name pos:line="56" pos:column="43">nmatch<pos:position pos:line="56" pos:column="49"/></name></expr>;<pos:position pos:line="56" pos:column="50"/></condition> <incr><expr><operator pos:line="56" pos:column="51">++<pos:position pos:line="56" pos:column="53"/></operator><name pos:line="56" pos:column="53">reg_idx<pos:position pos:line="56" pos:column="60"/></name></expr></incr>)<pos:position pos:line="56" pos:column="61"/></control>
		<block type="pseudo"><if pos:line="57" pos:column="17">if <condition pos:line="57" pos:column="20">(<expr><name><name pos:line="57" pos:column="21">pmatch<pos:position pos:line="57" pos:column="27"/></name><index pos:line="57" pos:column="27">[<expr><name pos:line="57" pos:column="28">reg_idx<pos:position pos:line="57" pos:column="35"/></name></expr>]<pos:position pos:line="57" pos:column="36"/></index></name><operator pos:line="57" pos:column="36">.<pos:position pos:line="57" pos:column="37"/></operator><name pos:line="57" pos:column="37">rm_so<pos:position pos:line="57" pos:column="42"/></name> <operator pos:line="57" pos:column="43">&gt;<pos:position pos:line="57" pos:column="47"/></operator> <operator pos:line="57" pos:column="45">-<pos:position pos:line="57" pos:column="46"/></operator><literal type="number" pos:line="57" pos:column="46">1<pos:position pos:line="57" pos:column="47"/></literal> <operator pos:line="57" pos:column="48">&amp;&amp;<pos:position pos:line="57" pos:column="58"/></operator> <name><name pos:line="57" pos:column="51">pmatch<pos:position pos:line="57" pos:column="57"/></name><index pos:line="57" pos:column="57">[<expr><name pos:line="57" pos:column="58">reg_idx<pos:position pos:line="57" pos:column="65"/></name></expr>]<pos:position pos:line="57" pos:column="66"/></index></name><operator pos:line="57" pos:column="66">.<pos:position pos:line="57" pos:column="67"/></operator><name pos:line="57" pos:column="67">rm_eo<pos:position pos:line="57" pos:column="72"/></name> <operator pos:line="57" pos:column="73">==<pos:position pos:line="57" pos:column="75"/></operator> <operator pos:line="57" pos:column="76">-<pos:position pos:line="57" pos:column="77"/></operator><literal type="number" pos:line="57" pos:column="77">1<pos:position pos:line="57" pos:column="78"/></literal></expr>)<pos:position pos:line="57" pos:column="79"/></condition><then pos:line="57" pos:column="79">
		  <block type="pseudo"><break pos:line="58" pos:column="19">break;<pos:position pos:line="58" pos:column="25"/></break></block></then></if></block></for>
	      <if pos:line="59" pos:column="15">if <condition pos:line="59" pos:column="18">(<expr><name pos:line="59" pos:column="19">reg_idx<pos:position pos:line="59" pos:column="26"/></name> <operator pos:line="59" pos:column="27">==<pos:position pos:line="59" pos:column="29"/></operator> <name pos:line="59" pos:column="30">nmatch<pos:position pos:line="59" pos:column="36"/></name></expr>)<pos:position pos:line="59" pos:column="37"/></condition><then pos:line="59" pos:column="37">
		<block pos:line="60" pos:column="17">{
		  <expr_stmt><expr><call><name pos:line="61" pos:column="19">re_node_set_free<pos:position pos:line="61" pos:column="35"/></name> <argument_list pos:line="61" pos:column="36">(<argument><expr><operator pos:line="61" pos:column="37">&amp;<pos:position pos:line="61" pos:column="42"/></operator><name pos:line="61" pos:column="38">eps_via_nodes<pos:position pos:line="61" pos:column="51"/></name></expr></argument>)<pos:position pos:line="61" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="53"/></expr_stmt>
		  <if pos:line="62" pos:column="19">if <condition pos:line="62" pos:column="22">(<expr><name pos:line="62" pos:column="23">prev_idx_match_malloced<pos:position pos:line="62" pos:column="46"/></name></expr>)<pos:position pos:line="62" pos:column="47"/></condition><then pos:line="62" pos:column="47">
		    <block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="21">re_free<pos:position pos:line="63" pos:column="28"/></name> <argument_list pos:line="63" pos:column="29">(<argument><expr><name pos:line="63" pos:column="30">prev_idx_match<pos:position pos:line="63" pos:column="44"/></name></expr></argument>)<pos:position pos:line="63" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="46"/></expr_stmt></block></then></if>
		  <return pos:line="64" pos:column="19">return <expr><call><name pos:line="64" pos:column="26">free_fail_stack_return<pos:position pos:line="64" pos:column="48"/></name> <argument_list pos:line="64" pos:column="49">(<argument><expr><name pos:line="64" pos:column="50">fs<pos:position pos:line="64" pos:column="52"/></name></expr></argument>)<pos:position pos:line="64" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="54"/></return>
		}<pos:position pos:line="65" pos:column="18"/></block></then></if>
	      <expr_stmt><expr><name pos:line="66" pos:column="15">cur_node<pos:position pos:line="66" pos:column="23"/></name> <operator pos:line="66" pos:column="24">=<pos:position pos:line="66" pos:column="25"/></operator> <call><name pos:line="66" pos:column="26">pop_fail_stack<pos:position pos:line="66" pos:column="40"/></name> <argument_list pos:line="66" pos:column="41">(<argument><expr><name pos:line="66" pos:column="42">fs<pos:position pos:line="66" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="66" pos:column="46">&amp;<pos:position pos:line="66" pos:column="51"/></operator><name pos:line="66" pos:column="47">idx<pos:position pos:line="66" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="52">nmatch<pos:position pos:line="66" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="60">pmatch<pos:position pos:line="66" pos:column="66"/></name></expr></argument>,
					 <argument><expr><operator pos:line="67" pos:column="42">&amp;<pos:position pos:line="67" pos:column="47"/></operator><name pos:line="67" pos:column="43">eps_via_nodes<pos:position pos:line="67" pos:column="56"/></name></expr></argument>)<pos:position pos:line="67" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="58"/></expr_stmt>
	    }<pos:position pos:line="68" pos:column="14"/></block></then>
	  <else pos:line="69" pos:column="11">else
	    <block pos:line="70" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="71" pos:column="15">re_node_set_free<pos:position pos:line="71" pos:column="31"/></name> <argument_list pos:line="71" pos:column="32">(<argument><expr><operator pos:line="71" pos:column="33">&amp;<pos:position pos:line="71" pos:column="38"/></operator><name pos:line="71" pos:column="34">eps_via_nodes<pos:position pos:line="71" pos:column="47"/></name></expr></argument>)<pos:position pos:line="71" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="49"/></expr_stmt>
	      <if pos:line="72" pos:column="15">if <condition pos:line="72" pos:column="18">(<expr><name pos:line="72" pos:column="19">prev_idx_match_malloced<pos:position pos:line="72" pos:column="42"/></name></expr>)<pos:position pos:line="72" pos:column="43"/></condition><then pos:line="72" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="73" pos:column="17">re_free<pos:position pos:line="73" pos:column="24"/></name> <argument_list pos:line="73" pos:column="25">(<argument><expr><name pos:line="73" pos:column="26">prev_idx_match<pos:position pos:line="73" pos:column="40"/></name></expr></argument>)<pos:position pos:line="73" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="42"/></expr_stmt></block></then></if>
	      <return pos:line="74" pos:column="15">return <expr><name pos:line="74" pos:column="22">REG_NOERROR<pos:position pos:line="74" pos:column="33"/></name></expr>;<pos:position pos:line="74" pos:column="34"/></return>
	    }<pos:position pos:line="75" pos:column="14"/></block></else></if>
	}<pos:position pos:line="76" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="78" pos:column="7">/* Proceed to next node.  */</comment>
      <expr_stmt><expr><name pos:line="79" pos:column="7">cur_node<pos:position pos:line="79" pos:column="15"/></name> <operator pos:line="79" pos:column="16">=<pos:position pos:line="79" pos:column="17"/></operator> <call><name pos:line="79" pos:column="18">proceed_next_node<pos:position pos:line="79" pos:column="35"/></name> <argument_list pos:line="79" pos:column="36">(<argument><expr><name pos:line="79" pos:column="37">mctx<pos:position pos:line="79" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="43">nmatch<pos:position pos:line="79" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="51">pmatch<pos:position pos:line="79" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="59">&amp;<pos:position pos:line="79" pos:column="64"/></operator><name pos:line="79" pos:column="60">idx<pos:position pos:line="79" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="65">cur_node<pos:position pos:line="79" pos:column="73"/></name></expr></argument>,
				    <argument><expr><operator pos:line="80" pos:column="37">&amp;<pos:position pos:line="80" pos:column="42"/></operator><name pos:line="80" pos:column="38">eps_via_nodes<pos:position pos:line="80" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="53">fs<pos:position pos:line="80" pos:column="55"/></name></expr></argument>)<pos:position pos:line="80" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="57"/></expr_stmt>

      <if pos:line="82" pos:column="7">if <condition pos:line="82" pos:column="10">(<expr><call><name pos:line="82" pos:column="11">BE<pos:position pos:line="82" pos:column="13"/></name> <argument_list pos:line="82" pos:column="14">(<argument><expr><name pos:line="82" pos:column="15">cur_node<pos:position pos:line="82" pos:column="23"/></name> <operator pos:line="82" pos:column="24">&lt;<pos:position pos:line="82" pos:column="28"/></operator> <literal type="number" pos:line="82" pos:column="26">0<pos:position pos:line="82" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="82" pos:column="29">0<pos:position pos:line="82" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="82" pos:column="32"/></condition><then pos:line="82" pos:column="32">
	<block pos:line="83" pos:column="9">{
	  <if pos:line="84" pos:column="11">if <condition pos:line="84" pos:column="14">(<expr><call><name pos:line="84" pos:column="15">BE<pos:position pos:line="84" pos:column="17"/></name> <argument_list pos:line="84" pos:column="18">(<argument><expr><name pos:line="84" pos:column="19">cur_node<pos:position pos:line="84" pos:column="27"/></name> <operator pos:line="84" pos:column="28">==<pos:position pos:line="84" pos:column="30"/></operator> <operator pos:line="84" pos:column="31">-<pos:position pos:line="84" pos:column="32"/></operator><literal type="number" pos:line="84" pos:column="32">2<pos:position pos:line="84" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="84" pos:column="35">0<pos:position pos:line="84" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="38"/></condition><then pos:line="84" pos:column="38">
	    <block pos:line="85" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="86" pos:column="15">re_node_set_free<pos:position pos:line="86" pos:column="31"/></name> <argument_list pos:line="86" pos:column="32">(<argument><expr><operator pos:line="86" pos:column="33">&amp;<pos:position pos:line="86" pos:column="38"/></operator><name pos:line="86" pos:column="34">eps_via_nodes<pos:position pos:line="86" pos:column="47"/></name></expr></argument>)<pos:position pos:line="86" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="49"/></expr_stmt>
	      <if pos:line="87" pos:column="15">if <condition pos:line="87" pos:column="18">(<expr><name pos:line="87" pos:column="19">prev_idx_match_malloced<pos:position pos:line="87" pos:column="42"/></name></expr>)<pos:position pos:line="87" pos:column="43"/></condition><then pos:line="87" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="88" pos:column="17">re_free<pos:position pos:line="88" pos:column="24"/></name> <argument_list pos:line="88" pos:column="25">(<argument><expr><name pos:line="88" pos:column="26">prev_idx_match<pos:position pos:line="88" pos:column="40"/></name></expr></argument>)<pos:position pos:line="88" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="42"/></expr_stmt></block></then></if>
	      <expr_stmt><expr><call><name pos:line="89" pos:column="15">free_fail_stack_return<pos:position pos:line="89" pos:column="37"/></name> <argument_list pos:line="89" pos:column="38">(<argument><expr><name pos:line="89" pos:column="39">fs<pos:position pos:line="89" pos:column="41"/></name></expr></argument>)<pos:position pos:line="89" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="43"/></expr_stmt>
	      <return pos:line="90" pos:column="15">return <expr><name pos:line="90" pos:column="22">REG_ESPACE<pos:position pos:line="90" pos:column="32"/></name></expr>;<pos:position pos:line="90" pos:column="33"/></return>
	    }<pos:position pos:line="91" pos:column="14"/></block></then></if>
	  <if pos:line="92" pos:column="11">if <condition pos:line="92" pos:column="14">(<expr><name pos:line="92" pos:column="15">fs<pos:position pos:line="92" pos:column="17"/></name></expr>)<pos:position pos:line="92" pos:column="18"/></condition><then pos:line="92" pos:column="18">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="93" pos:column="13">cur_node<pos:position pos:line="93" pos:column="21"/></name> <operator pos:line="93" pos:column="22">=<pos:position pos:line="93" pos:column="23"/></operator> <call><name pos:line="93" pos:column="24">pop_fail_stack<pos:position pos:line="93" pos:column="38"/></name> <argument_list pos:line="93" pos:column="39">(<argument><expr><name pos:line="93" pos:column="40">fs<pos:position pos:line="93" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="44">&amp;<pos:position pos:line="93" pos:column="49"/></operator><name pos:line="93" pos:column="45">idx<pos:position pos:line="93" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="50">nmatch<pos:position pos:line="93" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="58">pmatch<pos:position pos:line="93" pos:column="64"/></name></expr></argument>,
				       <argument><expr><operator pos:line="94" pos:column="40">&amp;<pos:position pos:line="94" pos:column="45"/></operator><name pos:line="94" pos:column="41">eps_via_nodes<pos:position pos:line="94" pos:column="54"/></name></expr></argument>)<pos:position pos:line="94" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="56"/></expr_stmt></block></then>
	  <else pos:line="95" pos:column="11">else
	    <block pos:line="96" pos:column="13">{
	      <expr_stmt><expr><call><name pos:line="97" pos:column="15">re_node_set_free<pos:position pos:line="97" pos:column="31"/></name> <argument_list pos:line="97" pos:column="32">(<argument><expr><operator pos:line="97" pos:column="33">&amp;<pos:position pos:line="97" pos:column="38"/></operator><name pos:line="97" pos:column="34">eps_via_nodes<pos:position pos:line="97" pos:column="47"/></name></expr></argument>)<pos:position pos:line="97" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="49"/></expr_stmt>
	      <if pos:line="98" pos:column="15">if <condition pos:line="98" pos:column="18">(<expr><name pos:line="98" pos:column="19">prev_idx_match_malloced<pos:position pos:line="98" pos:column="42"/></name></expr>)<pos:position pos:line="98" pos:column="43"/></condition><then pos:line="98" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="99" pos:column="17">re_free<pos:position pos:line="99" pos:column="24"/></name> <argument_list pos:line="99" pos:column="25">(<argument><expr><name pos:line="99" pos:column="26">prev_idx_match<pos:position pos:line="99" pos:column="40"/></name></expr></argument>)<pos:position pos:line="99" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="42"/></expr_stmt></block></then></if>
	      <return pos:line="100" pos:column="15">return <expr><name pos:line="100" pos:column="22">REG_NOMATCH<pos:position pos:line="100" pos:column="33"/></name></expr>;<pos:position pos:line="100" pos:column="34"/></return>
	    }<pos:position pos:line="101" pos:column="14"/></block></else></if>
	}<pos:position pos:line="102" pos:column="10"/></block></then></if>
    }<pos:position pos:line="103" pos:column="6"/></block></for>
  <expr_stmt><expr><call><name pos:line="104" pos:column="3">re_node_set_free<pos:position pos:line="104" pos:column="19"/></name> <argument_list pos:line="104" pos:column="20">(<argument><expr><operator pos:line="104" pos:column="21">&amp;<pos:position pos:line="104" pos:column="26"/></operator><name pos:line="104" pos:column="22">eps_via_nodes<pos:position pos:line="104" pos:column="35"/></name></expr></argument>)<pos:position pos:line="104" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="37"/></expr_stmt>
  <if pos:line="105" pos:column="3">if <condition pos:line="105" pos:column="6">(<expr><name pos:line="105" pos:column="7">prev_idx_match_malloced<pos:position pos:line="105" pos:column="30"/></name></expr>)<pos:position pos:line="105" pos:column="31"/></condition><then pos:line="105" pos:column="31">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="106" pos:column="5">re_free<pos:position pos:line="106" pos:column="12"/></name> <argument_list pos:line="106" pos:column="13">(<argument><expr><name pos:line="106" pos:column="14">prev_idx_match<pos:position pos:line="106" pos:column="28"/></name></expr></argument>)<pos:position pos:line="106" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="30"/></expr_stmt></block></then></if>
  <return pos:line="107" pos:column="3">return <expr><call><name pos:line="107" pos:column="10">free_fail_stack_return<pos:position pos:line="107" pos:column="32"/></name> <argument_list pos:line="107" pos:column="33">(<argument><expr><name pos:line="107" pos:column="34">fs<pos:position pos:line="107" pos:column="36"/></name></expr></argument>)<pos:position pos:line="107" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="38"/></return>
}<pos:position pos:line="108" pos:column="2"/></block></function></unit>
