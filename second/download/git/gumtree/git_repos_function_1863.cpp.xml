<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1863.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">check_repo_format<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">var<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">value<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="66">void<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">cb<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">ext<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><call><name pos:line="5" pos:column="13">strcmp<pos:position pos:line="5" pos:column="19"/></name><argument_list pos:line="5" pos:column="19">(<argument><expr><name pos:line="5" pos:column="20">var<pos:position pos:line="5" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="25">"core.repositoryformatversion"<pos:position pos:line="5" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="56"/></argument_list></call> <operator pos:line="5" pos:column="57">==<pos:position pos:line="5" pos:column="59"/></operator> <literal type="number" pos:line="5" pos:column="60">0<pos:position pos:line="5" pos:column="61"/></literal></expr>)<pos:position pos:line="5" pos:column="62"/></condition><then pos:line="5" pos:column="62">
		<block type="pseudo"><expr_stmt><expr><name pos:line="6" pos:column="17">repository_format_version<pos:position pos:line="6" pos:column="42"/></name> <operator pos:line="6" pos:column="43">=<pos:position pos:line="6" pos:column="44"/></operator> <call><name pos:line="6" pos:column="45">git_config_int<pos:position pos:line="6" pos:column="59"/></name><argument_list pos:line="6" pos:column="59">(<argument><expr><name pos:line="6" pos:column="60">var<pos:position pos:line="6" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="65">value<pos:position pos:line="6" pos:column="70"/></name></expr></argument>)<pos:position pos:line="6" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="72"/></expr_stmt></block></then>
	<elseif pos:line="7" pos:column="9">else <if pos:line="7" pos:column="14">if <condition pos:line="7" pos:column="17">(<expr><call><name pos:line="7" pos:column="18">strcmp<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">(<argument><expr><name pos:line="7" pos:column="25">var<pos:position pos:line="7" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="30">"core.sharedrepository"<pos:position pos:line="7" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="54"/></argument_list></call> <operator pos:line="7" pos:column="55">==<pos:position pos:line="7" pos:column="57"/></operator> <literal type="number" pos:line="7" pos:column="58">0<pos:position pos:line="7" pos:column="59"/></literal></expr>)<pos:position pos:line="7" pos:column="60"/></condition><then pos:line="7" pos:column="60">
		<block type="pseudo"><expr_stmt><expr><name pos:line="8" pos:column="17">shared_repository<pos:position pos:line="8" pos:column="34"/></name> <operator pos:line="8" pos:column="35">=<pos:position pos:line="8" pos:column="36"/></operator> <call><name pos:line="8" pos:column="37">git_config_perm<pos:position pos:line="8" pos:column="52"/></name><argument_list pos:line="8" pos:column="52">(<argument><expr><name pos:line="8" pos:column="53">var<pos:position pos:line="8" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="58">value<pos:position pos:line="8" pos:column="63"/></name></expr></argument>)<pos:position pos:line="8" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="65"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="9" pos:column="9">else <if pos:line="9" pos:column="14">if <condition pos:line="9" pos:column="17">(<expr><call><name pos:line="9" pos:column="18">skip_prefix<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">var<pos:position pos:line="9" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="35">"extensions."<pos:position pos:line="9" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="9" pos:column="50">&amp;<pos:position pos:line="9" pos:column="55"/></operator><name pos:line="9" pos:column="51">ext<pos:position pos:line="9" pos:column="54"/></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="56"/></condition><then pos:line="9" pos:column="56"> <block pos:line="9" pos:column="57">{
		<comment type="block" pos:line="10" pos:column="17">/*
		 * record any known extensions here; otherwise,
		 * we fall through to recording it as unknown, and
		 * check_repository_format will complain
		 */</comment>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><operator pos:line="15" pos:column="21">!<pos:position pos:line="15" pos:column="22"/></operator><call><name pos:line="15" pos:column="22">strcmp<pos:position pos:line="15" pos:column="28"/></name><argument_list pos:line="15" pos:column="28">(<argument><expr><name pos:line="15" pos:column="29">ext<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="34">"noop"<pos:position pos:line="15" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="42"/></condition><then pos:line="15" pos:column="42">
			<block type="pseudo"><empty_stmt pos:line="16" pos:column="25">;<pos:position pos:line="16" pos:column="26"/></empty_stmt></block></then>
		<elseif pos:line="17" pos:column="17">else <if pos:line="17" pos:column="22">if <condition pos:line="17" pos:column="25">(<expr><operator pos:line="17" pos:column="26">!<pos:position pos:line="17" pos:column="27"/></operator><call><name pos:line="17" pos:column="27">strcmp<pos:position pos:line="17" pos:column="33"/></name><argument_list pos:line="17" pos:column="33">(<argument><expr><name pos:line="17" pos:column="34">ext<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="39">"preciousobjects"<pos:position pos:line="17" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="58"/></condition><then pos:line="17" pos:column="58">
			<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="25">repository_format_precious_objects<pos:position pos:line="18" pos:column="59"/></name> <operator pos:line="18" pos:column="60">=<pos:position pos:line="18" pos:column="61"/></operator> <call><name pos:line="18" pos:column="62">git_config_bool<pos:position pos:line="18" pos:column="77"/></name><argument_list pos:line="18" pos:column="77">(<argument><expr><name pos:line="18" pos:column="78">var<pos:position pos:line="18" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="83">value<pos:position pos:line="18" pos:column="88"/></name></expr></argument>)<pos:position pos:line="18" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="90"/></expr_stmt></block></then></if></elseif>
		<else pos:line="19" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="25">string_list_append<pos:position pos:line="20" pos:column="43"/></name><argument_list pos:line="20" pos:column="43">(<argument><expr><operator pos:line="20" pos:column="44">&amp;<pos:position pos:line="20" pos:column="49"/></operator><name pos:line="20" pos:column="45">unknown_extensions<pos:position pos:line="20" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="65">ext<pos:position pos:line="20" pos:column="68"/></name></expr></argument>)<pos:position pos:line="20" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="70"/></expr_stmt></block></else></if>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if></elseif></if>
	<return pos:line="22" pos:column="9">return <expr><literal type="number" pos:line="22" pos:column="16">0<pos:position pos:line="22" pos:column="17"/></literal></expr>;<pos:position pos:line="22" pos:column="18"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
