<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2564_git-2.7.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fetch_git<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name><name pos:line="1" pos:column="22">struct<pos:position pos:line="1" pos:column="28"/></name> <name pos:line="1" pos:column="29">discovery<pos:position pos:line="1" pos:column="38"/></name></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">heads<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>,
	<parameter><decl><type><name pos:line="2" pos:column="9">int<pos:position pos:line="2" pos:column="12"/></name></type> <name pos:line="2" pos:column="13">nr_heads<pos:position pos:line="2" pos:column="21"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="23">struct<pos:position pos:line="2" pos:column="29"/></name> <name pos:line="2" pos:column="30">ref<pos:position pos:line="2" pos:column="33"/></name></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier><modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">to_fetch<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">rpc_state<pos:position pos:line="4" pos:column="25"/></name></name></type> <name pos:line="4" pos:column="26">rpc<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">preamble<pos:position pos:line="5" pos:column="31"/></name> <init pos:line="5" pos:column="32">= <expr><name pos:line="5" pos:column="34">STRBUF_INIT<pos:position pos:line="5" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">depth_arg<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><name pos:line="6" pos:column="27">NULL<pos:position pos:line="6" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">argc<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><literal type="number" pos:line="7" pos:column="20">0<pos:position pos:line="7" pos:column="21"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="23">i<pos:position pos:line="7" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="26">err<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name><name pos:line="8" pos:column="21">argv<pos:position pos:line="8" pos:column="25"/></name><index pos:line="8" pos:column="25">[<expr><literal type="number" pos:line="8" pos:column="26">17<pos:position pos:line="8" pos:column="28"/></literal></expr>]<pos:position pos:line="8" pos:column="29"/></index></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>

	<expr_stmt><expr><name><name pos:line="10" pos:column="9">argv<pos:position pos:line="10" pos:column="13"/></name><index pos:line="10" pos:column="13">[<expr><name pos:line="10" pos:column="14">argc<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">++<pos:position pos:line="10" pos:column="20"/></operator></expr>]<pos:position pos:line="10" pos:column="21"/></index></name> <operator pos:line="10" pos:column="22">=<pos:position pos:line="10" pos:column="23"/></operator> <literal type="string" pos:line="10" pos:column="24">"fetch-pack"<pos:position pos:line="10" pos:column="36"/></literal></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="11" pos:column="9">argv<pos:position pos:line="11" pos:column="13"/></name><index pos:line="11" pos:column="13">[<expr><name pos:line="11" pos:column="14">argc<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">++<pos:position pos:line="11" pos:column="20"/></operator></expr>]<pos:position pos:line="11" pos:column="21"/></index></name> <operator pos:line="11" pos:column="22">=<pos:position pos:line="11" pos:column="23"/></operator> <literal type="string" pos:line="11" pos:column="24">"--stateless-rpc"<pos:position pos:line="11" pos:column="41"/></literal></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="12" pos:column="9">argv<pos:position pos:line="12" pos:column="13"/></name><index pos:line="12" pos:column="13">[<expr><name pos:line="12" pos:column="14">argc<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">++<pos:position pos:line="12" pos:column="20"/></operator></expr>]<pos:position pos:line="12" pos:column="21"/></index></name> <operator pos:line="12" pos:column="22">=<pos:position pos:line="12" pos:column="23"/></operator> <literal type="string" pos:line="12" pos:column="24">"--stdin"<pos:position pos:line="12" pos:column="33"/></literal></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="13" pos:column="9">argv<pos:position pos:line="13" pos:column="13"/></name><index pos:line="13" pos:column="13">[<expr><name pos:line="13" pos:column="14">argc<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">++<pos:position pos:line="13" pos:column="20"/></operator></expr>]<pos:position pos:line="13" pos:column="21"/></index></name> <operator pos:line="13" pos:column="22">=<pos:position pos:line="13" pos:column="23"/></operator> <literal type="string" pos:line="13" pos:column="24">"--lock-pack"<pos:position pos:line="13" pos:column="37"/></literal></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name><name pos:line="14" pos:column="13">options<pos:position pos:line="14" pos:column="20"/></name><operator pos:line="14" pos:column="20">.<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="21">followtags<pos:position pos:line="14" pos:column="31"/></name></name></expr>)<pos:position pos:line="14" pos:column="32"/></condition><then pos:line="14" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="15" pos:column="17">argv<pos:position pos:line="15" pos:column="21"/></name><index pos:line="15" pos:column="21">[<expr><name pos:line="15" pos:column="22">argc<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">++<pos:position pos:line="15" pos:column="28"/></operator></expr>]<pos:position pos:line="15" pos:column="29"/></index></name> <operator pos:line="15" pos:column="30">=<pos:position pos:line="15" pos:column="31"/></operator> <literal type="string" pos:line="15" pos:column="32">"--include-tag"<pos:position pos:line="15" pos:column="47"/></literal></expr>;<pos:position pos:line="15" pos:column="48"/></expr_stmt></block></then></if>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name><name pos:line="16" pos:column="13">options<pos:position pos:line="16" pos:column="20"/></name><operator pos:line="16" pos:column="20">.<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="21">thin<pos:position pos:line="16" pos:column="25"/></name></name></expr>)<pos:position pos:line="16" pos:column="26"/></condition><then pos:line="16" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="17" pos:column="17">argv<pos:position pos:line="17" pos:column="21"/></name><index pos:line="17" pos:column="21">[<expr><name pos:line="17" pos:column="22">argc<pos:position pos:line="17" pos:column="26"/></name><operator pos:line="17" pos:column="26">++<pos:position pos:line="17" pos:column="28"/></operator></expr>]<pos:position pos:line="17" pos:column="29"/></index></name> <operator pos:line="17" pos:column="30">=<pos:position pos:line="17" pos:column="31"/></operator> <literal type="string" pos:line="17" pos:column="32">"--thin"<pos:position pos:line="17" pos:column="40"/></literal></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt></block></then></if>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name><name pos:line="18" pos:column="13">options<pos:position pos:line="18" pos:column="20"/></name><operator pos:line="18" pos:column="20">.<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="21">verbosity<pos:position pos:line="18" pos:column="30"/></name></name> <operator pos:line="18" pos:column="31">&gt;=<pos:position pos:line="18" pos:column="36"/></operator> <literal type="number" pos:line="18" pos:column="34">3<pos:position pos:line="18" pos:column="35"/></literal></expr>)<pos:position pos:line="18" pos:column="36"/></condition><then pos:line="18" pos:column="36"> <block pos:line="18" pos:column="37">{
		<expr_stmt><expr><name><name pos:line="19" pos:column="17">argv<pos:position pos:line="19" pos:column="21"/></name><index pos:line="19" pos:column="21">[<expr><name pos:line="19" pos:column="22">argc<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">++<pos:position pos:line="19" pos:column="28"/></operator></expr>]<pos:position pos:line="19" pos:column="29"/></index></name> <operator pos:line="19" pos:column="30">=<pos:position pos:line="19" pos:column="31"/></operator> <literal type="string" pos:line="19" pos:column="32">"-v"<pos:position pos:line="19" pos:column="36"/></literal></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="20" pos:column="17">argv<pos:position pos:line="20" pos:column="21"/></name><index pos:line="20" pos:column="21">[<expr><name pos:line="20" pos:column="22">argc<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">++<pos:position pos:line="20" pos:column="28"/></operator></expr>]<pos:position pos:line="20" pos:column="29"/></index></name> <operator pos:line="20" pos:column="30">=<pos:position pos:line="20" pos:column="31"/></operator> <literal type="string" pos:line="20" pos:column="32">"-v"<pos:position pos:line="20" pos:column="36"/></literal></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>
	}<pos:position pos:line="21" pos:column="10"/></block></then></if>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name><name pos:line="22" pos:column="13">options<pos:position pos:line="22" pos:column="20"/></name><operator pos:line="22" pos:column="20">.<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="21">check_self_contained_and_connected<pos:position pos:line="22" pos:column="55"/></name></name></expr>)<pos:position pos:line="22" pos:column="56"/></condition><then pos:line="22" pos:column="56">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="23" pos:column="17">argv<pos:position pos:line="23" pos:column="21"/></name><index pos:line="23" pos:column="21">[<expr><name pos:line="23" pos:column="22">argc<pos:position pos:line="23" pos:column="26"/></name><operator pos:line="23" pos:column="26">++<pos:position pos:line="23" pos:column="28"/></operator></expr>]<pos:position pos:line="23" pos:column="29"/></index></name> <operator pos:line="23" pos:column="30">=<pos:position pos:line="23" pos:column="31"/></operator> <literal type="string" pos:line="23" pos:column="32">"--check-self-contained-and-connected"<pos:position pos:line="23" pos:column="70"/></literal></expr>;<pos:position pos:line="23" pos:column="71"/></expr_stmt></block></then></if>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name><name pos:line="24" pos:column="13">options<pos:position pos:line="24" pos:column="20"/></name><operator pos:line="24" pos:column="20">.<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="21">cloning<pos:position pos:line="24" pos:column="28"/></name></name></expr>)<pos:position pos:line="24" pos:column="29"/></condition><then pos:line="24" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="25" pos:column="17">argv<pos:position pos:line="25" pos:column="21"/></name><index pos:line="25" pos:column="21">[<expr><name pos:line="25" pos:column="22">argc<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">++<pos:position pos:line="25" pos:column="28"/></operator></expr>]<pos:position pos:line="25" pos:column="29"/></index></name> <operator pos:line="25" pos:column="30">=<pos:position pos:line="25" pos:column="31"/></operator> <literal type="string" pos:line="25" pos:column="32">"--cloning"<pos:position pos:line="25" pos:column="43"/></literal></expr>;<pos:position pos:line="25" pos:column="44"/></expr_stmt></block></then></if>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name><name pos:line="26" pos:column="13">options<pos:position pos:line="26" pos:column="20"/></name><operator pos:line="26" pos:column="20">.<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="21">update_shallow<pos:position pos:line="26" pos:column="35"/></name></name></expr>)<pos:position pos:line="26" pos:column="36"/></condition><then pos:line="26" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="27" pos:column="17">argv<pos:position pos:line="27" pos:column="21"/></name><index pos:line="27" pos:column="21">[<expr><name pos:line="27" pos:column="22">argc<pos:position pos:line="27" pos:column="26"/></name><operator pos:line="27" pos:column="26">++<pos:position pos:line="27" pos:column="28"/></operator></expr>]<pos:position pos:line="27" pos:column="29"/></index></name> <operator pos:line="27" pos:column="30">=<pos:position pos:line="27" pos:column="31"/></operator> <literal type="string" pos:line="27" pos:column="32">"--update-shallow"<pos:position pos:line="27" pos:column="50"/></literal></expr>;<pos:position pos:line="27" pos:column="51"/></expr_stmt></block></then></if>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><operator pos:line="28" pos:column="13">!<pos:position pos:line="28" pos:column="14"/></operator><name><name pos:line="28" pos:column="14">options<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">.<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="22">progress<pos:position pos:line="28" pos:column="30"/></name></name></expr>)<pos:position pos:line="28" pos:column="31"/></condition><then pos:line="28" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="29" pos:column="17">argv<pos:position pos:line="29" pos:column="21"/></name><index pos:line="29" pos:column="21">[<expr><name pos:line="29" pos:column="22">argc<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">++<pos:position pos:line="29" pos:column="28"/></operator></expr>]<pos:position pos:line="29" pos:column="29"/></index></name> <operator pos:line="29" pos:column="30">=<pos:position pos:line="29" pos:column="31"/></operator> <literal type="string" pos:line="29" pos:column="32">"--no-progress"<pos:position pos:line="29" pos:column="47"/></literal></expr>;<pos:position pos:line="29" pos:column="48"/></expr_stmt></block></then></if>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name><name pos:line="30" pos:column="13">options<pos:position pos:line="30" pos:column="20"/></name><operator pos:line="30" pos:column="20">.<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="21">depth<pos:position pos:line="30" pos:column="26"/></name></name></expr>)<pos:position pos:line="30" pos:column="27"/></condition><then pos:line="30" pos:column="27"> <block pos:line="30" pos:column="28">{
		<decl_stmt><decl><type><name><name pos:line="31" pos:column="17">struct<pos:position pos:line="31" pos:column="23"/></name> <name pos:line="31" pos:column="24">strbuf<pos:position pos:line="31" pos:column="30"/></name></name></type> <name pos:line="31" pos:column="31">buf<pos:position pos:line="31" pos:column="34"/></name> <init pos:line="31" pos:column="35">= <expr><name pos:line="31" pos:column="37">STRBUF_INIT<pos:position pos:line="31" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="31" pos:column="49"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">strbuf_addf<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><operator pos:line="32" pos:column="29">&amp;<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="30">buf<pos:position pos:line="32" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="35">"--depth=%lu"<pos:position pos:line="32" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="50">options<pos:position pos:line="32" pos:column="57"/></name><operator pos:line="32" pos:column="57">.<pos:position pos:line="32" pos:column="58"/></operator><name pos:line="32" pos:column="58">depth<pos:position pos:line="32" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="65"/></expr_stmt>
		<expr_stmt><expr><name pos:line="33" pos:column="17">depth_arg<pos:position pos:line="33" pos:column="26"/></name> <operator pos:line="33" pos:column="27">=<pos:position pos:line="33" pos:column="28"/></operator> <call><name pos:line="33" pos:column="29">strbuf_detach<pos:position pos:line="33" pos:column="42"/></name><argument_list pos:line="33" pos:column="42">(<argument><expr><operator pos:line="33" pos:column="43">&amp;<pos:position pos:line="33" pos:column="48"/></operator><name pos:line="33" pos:column="44">buf<pos:position pos:line="33" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="49">NULL<pos:position pos:line="33" pos:column="53"/></name></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="34" pos:column="17">argv<pos:position pos:line="34" pos:column="21"/></name><index pos:line="34" pos:column="21">[<expr><name pos:line="34" pos:column="22">argc<pos:position pos:line="34" pos:column="26"/></name><operator pos:line="34" pos:column="26">++<pos:position pos:line="34" pos:column="28"/></operator></expr>]<pos:position pos:line="34" pos:column="29"/></index></name> <operator pos:line="34" pos:column="30">=<pos:position pos:line="34" pos:column="31"/></operator> <name pos:line="34" pos:column="32">depth_arg<pos:position pos:line="34" pos:column="41"/></name></expr>;<pos:position pos:line="34" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="36" pos:column="9">argv<pos:position pos:line="36" pos:column="13"/></name><index pos:line="36" pos:column="13">[<expr><name pos:line="36" pos:column="14">argc<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">++<pos:position pos:line="36" pos:column="20"/></operator></expr>]<pos:position pos:line="36" pos:column="21"/></index></name> <operator pos:line="36" pos:column="22">=<pos:position pos:line="36" pos:column="23"/></operator> <name><name pos:line="36" pos:column="24">url<pos:position pos:line="36" pos:column="27"/></name><operator pos:line="36" pos:column="27">.<pos:position pos:line="36" pos:column="28"/></operator><name pos:line="36" pos:column="28">buf<pos:position pos:line="36" pos:column="31"/></name></name></expr>;<pos:position pos:line="36" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="37" pos:column="9">argv<pos:position pos:line="37" pos:column="13"/></name><index pos:line="37" pos:column="13">[<expr><name pos:line="37" pos:column="14">argc<pos:position pos:line="37" pos:column="18"/></name><operator pos:line="37" pos:column="18">++<pos:position pos:line="37" pos:column="20"/></operator></expr>]<pos:position pos:line="37" pos:column="21"/></index></name> <operator pos:line="37" pos:column="22">=<pos:position pos:line="37" pos:column="23"/></operator> <name pos:line="37" pos:column="24">NULL<pos:position pos:line="37" pos:column="28"/></name></expr>;<pos:position pos:line="37" pos:column="29"/></expr_stmt>

	<for pos:line="39" pos:column="9">for <control pos:line="39" pos:column="13">(<init><expr><name pos:line="39" pos:column="14">i<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">=<pos:position pos:line="39" pos:column="17"/></operator> <literal type="number" pos:line="39" pos:column="18">0<pos:position pos:line="39" pos:column="19"/></literal></expr>;<pos:position pos:line="39" pos:column="20"/></init> <condition><expr><name pos:line="39" pos:column="21">i<pos:position pos:line="39" pos:column="22"/></name> <operator pos:line="39" pos:column="23">&lt;<pos:position pos:line="39" pos:column="27"/></operator> <name pos:line="39" pos:column="25">nr_heads<pos:position pos:line="39" pos:column="33"/></name></expr>;<pos:position pos:line="39" pos:column="34"/></condition> <incr><expr><name pos:line="39" pos:column="35">i<pos:position pos:line="39" pos:column="36"/></name><operator pos:line="39" pos:column="36">++<pos:position pos:line="39" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="39" pos:column="39"/></control> <block pos:line="39" pos:column="40">{
		<decl_stmt><decl><type><name><name pos:line="40" pos:column="17">struct<pos:position pos:line="40" pos:column="23"/></name> <name pos:line="40" pos:column="24">ref<pos:position pos:line="40" pos:column="27"/></name></name> <modifier pos:line="40" pos:column="28">*<pos:position pos:line="40" pos:column="29"/></modifier></type><name pos:line="40" pos:column="29">ref<pos:position pos:line="40" pos:column="32"/></name> <init pos:line="40" pos:column="33">= <expr><name><name pos:line="40" pos:column="35">to_fetch<pos:position pos:line="40" pos:column="43"/></name><index pos:line="40" pos:column="43">[<expr><name pos:line="40" pos:column="44">i<pos:position pos:line="40" pos:column="45"/></name></expr>]<pos:position pos:line="40" pos:column="46"/></index></name></expr></init></decl>;<pos:position pos:line="40" pos:column="47"/></decl_stmt>
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><operator pos:line="41" pos:column="21">!<pos:position pos:line="41" pos:column="22"/></operator><operator pos:line="41" pos:column="22">*<pos:position pos:line="41" pos:column="23"/></operator><name><name pos:line="41" pos:column="23">ref<pos:position pos:line="41" pos:column="26"/></name><operator pos:line="41" pos:column="26">-&gt;<pos:position pos:line="41" pos:column="31"/></operator><name pos:line="41" pos:column="28">name<pos:position pos:line="41" pos:column="32"/></name></name></expr>)<pos:position pos:line="41" pos:column="33"/></condition><then pos:line="41" pos:column="33">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="25">die<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><literal type="string" pos:line="42" pos:column="29">"cannot fetch by sha1 over smart http"<pos:position pos:line="42" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="69"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">packet_buf_write<pos:position pos:line="43" pos:column="33"/></name><argument_list pos:line="43" pos:column="33">(<argument><expr><operator pos:line="43" pos:column="34">&amp;<pos:position pos:line="43" pos:column="39"/></operator><name pos:line="43" pos:column="35">preamble<pos:position pos:line="43" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="45">"%s %s\n"<pos:position pos:line="43" pos:column="54"/></literal></expr></argument>,
				 <argument><expr><call><name pos:line="44" pos:column="34">oid_to_hex<pos:position pos:line="44" pos:column="44"/></name><argument_list pos:line="44" pos:column="44">(<argument><expr><operator pos:line="44" pos:column="45">&amp;<pos:position pos:line="44" pos:column="50"/></operator><name><name pos:line="44" pos:column="46">ref<pos:position pos:line="44" pos:column="49"/></name><operator pos:line="44" pos:column="49">-&gt;<pos:position pos:line="44" pos:column="54"/></operator><name pos:line="44" pos:column="51">old_oid<pos:position pos:line="44" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="61">ref<pos:position pos:line="44" pos:column="64"/></name><operator pos:line="44" pos:column="64">-&gt;<pos:position pos:line="44" pos:column="69"/></operator><name pos:line="44" pos:column="66">name<pos:position pos:line="44" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="72"/></expr_stmt>
	}<pos:position pos:line="45" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="46" pos:column="9">packet_buf_flush<pos:position pos:line="46" pos:column="25"/></name><argument_list pos:line="46" pos:column="25">(<argument><expr><operator pos:line="46" pos:column="26">&amp;<pos:position pos:line="46" pos:column="31"/></operator><name pos:line="46" pos:column="27">preamble<pos:position pos:line="46" pos:column="35"/></name></expr></argument>)<pos:position pos:line="46" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="48" pos:column="9">memset<pos:position pos:line="48" pos:column="15"/></name><argument_list pos:line="48" pos:column="15">(<argument><expr><operator pos:line="48" pos:column="16">&amp;<pos:position pos:line="48" pos:column="21"/></operator><name pos:line="48" pos:column="17">rpc<pos:position pos:line="48" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="22">0<pos:position pos:line="48" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="48" pos:column="25">sizeof<argument_list pos:line="48" pos:column="31">(<argument><expr><name pos:line="48" pos:column="32">rpc<pos:position pos:line="48" pos:column="35"/></name></expr></argument>)<pos:position pos:line="48" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="48" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="49" pos:column="9">rpc<pos:position pos:line="49" pos:column="12"/></name><operator pos:line="49" pos:column="12">.<pos:position pos:line="49" pos:column="13"/></operator><name pos:line="49" pos:column="13">service_name<pos:position pos:line="49" pos:column="25"/></name></name> <operator pos:line="49" pos:column="26">=<pos:position pos:line="49" pos:column="27"/></operator> <literal type="string" pos:line="49" pos:column="28">"git-upload-pack"<pos:position pos:line="49" pos:column="45"/></literal></expr><operator pos:line="49" pos:column="45">,<pos:position pos:line="49" pos:column="46"/></operator>
	<expr><name><name pos:line="50" pos:column="9">rpc<pos:position pos:line="50" pos:column="12"/></name><operator pos:line="50" pos:column="12">.<pos:position pos:line="50" pos:column="13"/></operator><name pos:line="50" pos:column="13">argv<pos:position pos:line="50" pos:column="17"/></name></name> <operator pos:line="50" pos:column="18">=<pos:position pos:line="50" pos:column="19"/></operator> <name pos:line="50" pos:column="20">argv<pos:position pos:line="50" pos:column="24"/></name></expr>;<pos:position pos:line="50" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="51" pos:column="9">rpc<pos:position pos:line="51" pos:column="12"/></name><operator pos:line="51" pos:column="12">.<pos:position pos:line="51" pos:column="13"/></operator><name pos:line="51" pos:column="13">stdin_preamble<pos:position pos:line="51" pos:column="27"/></name></name> <operator pos:line="51" pos:column="28">=<pos:position pos:line="51" pos:column="29"/></operator> <operator pos:line="51" pos:column="30">&amp;<pos:position pos:line="51" pos:column="35"/></operator><name pos:line="51" pos:column="31">preamble<pos:position pos:line="51" pos:column="39"/></name></expr>;<pos:position pos:line="51" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="52" pos:column="9">rpc<pos:position pos:line="52" pos:column="12"/></name><operator pos:line="52" pos:column="12">.<pos:position pos:line="52" pos:column="13"/></operator><name pos:line="52" pos:column="13">gzip_request<pos:position pos:line="52" pos:column="25"/></name></name> <operator pos:line="52" pos:column="26">=<pos:position pos:line="52" pos:column="27"/></operator> <literal type="number" pos:line="52" pos:column="28">1<pos:position pos:line="52" pos:column="29"/></literal></expr>;<pos:position pos:line="52" pos:column="30"/></expr_stmt>

	<expr_stmt><expr><name pos:line="54" pos:column="9">err<pos:position pos:line="54" pos:column="12"/></name> <operator pos:line="54" pos:column="13">=<pos:position pos:line="54" pos:column="14"/></operator> <call><name pos:line="54" pos:column="15">rpc_service<pos:position pos:line="54" pos:column="26"/></name><argument_list pos:line="54" pos:column="26">(<argument><expr><operator pos:line="54" pos:column="27">&amp;<pos:position pos:line="54" pos:column="32"/></operator><name pos:line="54" pos:column="28">rpc<pos:position pos:line="54" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="33">heads<pos:position pos:line="54" pos:column="38"/></name></expr></argument>)<pos:position pos:line="54" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="40"/></expr_stmt>
	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><name><name pos:line="55" pos:column="13">rpc<pos:position pos:line="55" pos:column="16"/></name><operator pos:line="55" pos:column="16">.<pos:position pos:line="55" pos:column="17"/></operator><name pos:line="55" pos:column="17">result<pos:position pos:line="55" pos:column="23"/></name><operator pos:line="55" pos:column="23">.<pos:position pos:line="55" pos:column="24"/></operator><name pos:line="55" pos:column="24">len<pos:position pos:line="55" pos:column="27"/></name></name></expr>)<pos:position pos:line="55" pos:column="28"/></condition><then pos:line="55" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="17">write_or_die<pos:position pos:line="56" pos:column="29"/></name><argument_list pos:line="56" pos:column="29">(<argument><expr><literal type="number" pos:line="56" pos:column="30">1<pos:position pos:line="56" pos:column="31"/></literal></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="33">rpc<pos:position pos:line="56" pos:column="36"/></name><operator pos:line="56" pos:column="36">.<pos:position pos:line="56" pos:column="37"/></operator><name pos:line="56" pos:column="37">result<pos:position pos:line="56" pos:column="43"/></name><operator pos:line="56" pos:column="43">.<pos:position pos:line="56" pos:column="44"/></operator><name pos:line="56" pos:column="44">buf<pos:position pos:line="56" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="49">rpc<pos:position pos:line="56" pos:column="52"/></name><operator pos:line="56" pos:column="52">.<pos:position pos:line="56" pos:column="53"/></operator><name pos:line="56" pos:column="53">result<pos:position pos:line="56" pos:column="59"/></name><operator pos:line="56" pos:column="59">.<pos:position pos:line="56" pos:column="60"/></operator><name pos:line="56" pos:column="60">len<pos:position pos:line="56" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="65"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="57" pos:column="9">strbuf_release<pos:position pos:line="57" pos:column="23"/></name><argument_list pos:line="57" pos:column="23">(<argument><expr><operator pos:line="57" pos:column="24">&amp;<pos:position pos:line="57" pos:column="29"/></operator><name><name pos:line="57" pos:column="25">rpc<pos:position pos:line="57" pos:column="28"/></name><operator pos:line="57" pos:column="28">.<pos:position pos:line="57" pos:column="29"/></operator><name pos:line="57" pos:column="29">result<pos:position pos:line="57" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="58" pos:column="9">strbuf_release<pos:position pos:line="58" pos:column="23"/></name><argument_list pos:line="58" pos:column="23">(<argument><expr><operator pos:line="58" pos:column="24">&amp;<pos:position pos:line="58" pos:column="29"/></operator><name pos:line="58" pos:column="25">preamble<pos:position pos:line="58" pos:column="33"/></name></expr></argument>)<pos:position pos:line="58" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="59" pos:column="9">free<pos:position pos:line="59" pos:column="13"/></name><argument_list pos:line="59" pos:column="13">(<argument><expr><name pos:line="59" pos:column="14">depth_arg<pos:position pos:line="59" pos:column="23"/></name></expr></argument>)<pos:position pos:line="59" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="25"/></expr_stmt>
	<return pos:line="60" pos:column="9">return <expr><name pos:line="60" pos:column="16">err<pos:position pos:line="60" pos:column="19"/></name></expr>;<pos:position pos:line="60" pos:column="20"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
