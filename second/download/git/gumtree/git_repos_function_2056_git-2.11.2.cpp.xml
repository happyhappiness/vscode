<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2056_git-2.11.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">unpack_sha1_rest<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">git_zstream<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">stream<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">void<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">buffer<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="66">unsigned<pos:position pos:line="1" pos:column="74"/></name> <name pos:line="1" pos:column="75">long<pos:position pos:line="1" pos:column="79"/></name></type> <name pos:line="1" pos:column="80">size<pos:position pos:line="1" pos:column="84"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="86">const<pos:position pos:line="1" pos:column="91"/></specifier> <name pos:line="1" pos:column="92">unsigned<pos:position pos:line="1" pos:column="100"/></name> <name pos:line="1" pos:column="101">char<pos:position pos:line="1" pos:column="105"/></name> <modifier pos:line="1" pos:column="106">*<pos:position pos:line="1" pos:column="107"/></modifier></type><name pos:line="1" pos:column="107">sha1<pos:position pos:line="1" pos:column="111"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="112"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">bytes<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><call><name pos:line="3" pos:column="21">strlen<pos:position pos:line="3" pos:column="27"/></name><argument_list pos:line="3" pos:column="27">(<argument><expr><name pos:line="3" pos:column="28">buffer<pos:position pos:line="3" pos:column="34"/></name></expr></argument>)<pos:position pos:line="3" pos:column="35"/></argument_list></call> <operator pos:line="3" pos:column="36">+<pos:position pos:line="3" pos:column="37"/></operator> <literal type="number" pos:line="3" pos:column="38">1<pos:position pos:line="3" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">char<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">buf<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><call><name pos:line="4" pos:column="30">xmallocz<pos:position pos:line="4" pos:column="38"/></name><argument_list pos:line="4" pos:column="38">(<argument><expr><name pos:line="4" pos:column="39">size<pos:position pos:line="4" pos:column="43"/></name></expr></argument>)<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">long<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">n<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">status<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><name pos:line="6" pos:column="22">Z_OK<pos:position pos:line="6" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>

	<expr_stmt><expr><name pos:line="8" pos:column="9">n<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">=<pos:position pos:line="8" pos:column="12"/></operator> <name><name pos:line="8" pos:column="13">stream<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">-&gt;<pos:position pos:line="8" pos:column="24"/></operator><name pos:line="8" pos:column="21">total_out<pos:position pos:line="8" pos:column="30"/></name></name> <operator pos:line="8" pos:column="31">-<pos:position pos:line="8" pos:column="32"/></operator> <name pos:line="8" pos:column="33">bytes<pos:position pos:line="8" pos:column="38"/></name></expr>;<pos:position pos:line="8" pos:column="39"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">n<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">&gt;<pos:position pos:line="9" pos:column="19"/></operator> <name pos:line="9" pos:column="17">size<pos:position pos:line="9" pos:column="21"/></name></expr>)<pos:position pos:line="9" pos:column="22"/></condition><then pos:line="9" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="17">n<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <name pos:line="10" pos:column="21">size<pos:position pos:line="10" pos:column="25"/></name></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">memcpy<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><name pos:line="11" pos:column="16">buf<pos:position pos:line="11" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="21">(<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">char<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">*<pos:position pos:line="11" pos:column="28"/></operator><operator pos:line="11" pos:column="28">)<pos:position pos:line="11" pos:column="29"/></operator> <name pos:line="11" pos:column="30">buffer<pos:position pos:line="11" pos:column="36"/></name> <operator pos:line="11" pos:column="37">+<pos:position pos:line="11" pos:column="38"/></operator> <name pos:line="11" pos:column="39">bytes<pos:position pos:line="11" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="46">n<pos:position pos:line="11" pos:column="47"/></name></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><name pos:line="12" pos:column="9">bytes<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">=<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">n<pos:position pos:line="12" pos:column="18"/></name></expr>;<pos:position pos:line="12" pos:column="19"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">bytes<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">&lt;=<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="22">size<pos:position pos:line="13" pos:column="26"/></name></expr>)<pos:position pos:line="13" pos:column="27"/></condition><then pos:line="13" pos:column="27"> <block pos:line="13" pos:column="28">{
		<comment type="block" pos:line="14" pos:column="17">/*
		 * The above condition must be (bytes &lt;= size), not
		 * (bytes &lt; size).  In other words, even though we
		 * expect no more output and set avail_out to zero,
		 * the input zlib stream may have bytes that express
		 * "this concludes the stream", and we *do* want to
		 * eat that input.
		 *
		 * Otherwise we would not be able to test that we
		 * consumed all the input to reach the expected size;
		 * we also want to check that zlib tells us that all
		 * went well with status == Z_STREAM_END at the end.
		 */</comment>
		<expr_stmt><expr><name><name pos:line="27" pos:column="17">stream<pos:position pos:line="27" pos:column="23"/></name><operator pos:line="27" pos:column="23">-&gt;<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="25">next_out<pos:position pos:line="27" pos:column="33"/></name></name> <operator pos:line="27" pos:column="34">=<pos:position pos:line="27" pos:column="35"/></operator> <name pos:line="27" pos:column="36">buf<pos:position pos:line="27" pos:column="39"/></name> <operator pos:line="27" pos:column="40">+<pos:position pos:line="27" pos:column="41"/></operator> <name pos:line="27" pos:column="42">bytes<pos:position pos:line="27" pos:column="47"/></name></expr>;<pos:position pos:line="27" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="28" pos:column="17">stream<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">-&gt;<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="25">avail_out<pos:position pos:line="28" pos:column="34"/></name></name> <operator pos:line="28" pos:column="35">=<pos:position pos:line="28" pos:column="36"/></operator> <name pos:line="28" pos:column="37">size<pos:position pos:line="28" pos:column="41"/></name> <operator pos:line="28" pos:column="42">-<pos:position pos:line="28" pos:column="43"/></operator> <name pos:line="28" pos:column="44">bytes<pos:position pos:line="28" pos:column="49"/></name></expr>;<pos:position pos:line="28" pos:column="50"/></expr_stmt>
		<while pos:line="29" pos:column="17">while <condition pos:line="29" pos:column="23">(<expr><name pos:line="29" pos:column="24">status<pos:position pos:line="29" pos:column="30"/></name> <operator pos:line="29" pos:column="31">==<pos:position pos:line="29" pos:column="33"/></operator> <name pos:line="29" pos:column="34">Z_OK<pos:position pos:line="29" pos:column="38"/></name></expr>)<pos:position pos:line="29" pos:column="39"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="25">status<pos:position pos:line="30" pos:column="31"/></name> <operator pos:line="30" pos:column="32">=<pos:position pos:line="30" pos:column="33"/></operator> <call><name pos:line="30" pos:column="34">git_inflate<pos:position pos:line="30" pos:column="45"/></name><argument_list pos:line="30" pos:column="45">(<argument><expr><name pos:line="30" pos:column="46">stream<pos:position pos:line="30" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="54">Z_FINISH<pos:position pos:line="30" pos:column="62"/></name></expr></argument>)<pos:position pos:line="30" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="64"/></expr_stmt></block></while>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">status<pos:position pos:line="32" pos:column="19"/></name> <operator pos:line="32" pos:column="20">==<pos:position pos:line="32" pos:column="22"/></operator> <name pos:line="32" pos:column="23">Z_STREAM_END<pos:position pos:line="32" pos:column="35"/></name> <operator pos:line="32" pos:column="36">&amp;&amp;<pos:position pos:line="32" pos:column="46"/></operator> <operator pos:line="32" pos:column="39">!<pos:position pos:line="32" pos:column="40"/></operator><name><name pos:line="32" pos:column="40">stream<pos:position pos:line="32" pos:column="46"/></name><operator pos:line="32" pos:column="46">-&gt;<pos:position pos:line="32" pos:column="51"/></operator><name pos:line="32" pos:column="48">avail_in<pos:position pos:line="32" pos:column="56"/></name></name></expr>)<pos:position pos:line="32" pos:column="57"/></condition><then pos:line="32" pos:column="57"> <block pos:line="32" pos:column="58">{
		<expr_stmt><expr><call><name pos:line="33" pos:column="17">git_inflate_end<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><name pos:line="33" pos:column="33">stream<pos:position pos:line="33" pos:column="39"/></name></expr></argument>)<pos:position pos:line="33" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="41"/></expr_stmt>
		<return pos:line="34" pos:column="17">return <expr><name pos:line="34" pos:column="24">buf<pos:position pos:line="34" pos:column="27"/></name></expr>;<pos:position pos:line="34" pos:column="28"/></return>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>

	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">status<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">&lt;<pos:position pos:line="37" pos:column="24"/></operator> <literal type="number" pos:line="37" pos:column="22">0<pos:position pos:line="37" pos:column="23"/></literal></expr>)<pos:position pos:line="37" pos:column="24"/></condition><then pos:line="37" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="17">error<pos:position pos:line="38" pos:column="22"/></name><argument_list pos:line="38" pos:column="22">(<argument><expr><literal type="string" pos:line="38" pos:column="23">"corrupt loose object '%s'"<pos:position pos:line="38" pos:column="50"/></literal></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="52">sha1_to_hex<pos:position pos:line="38" pos:column="63"/></name><argument_list pos:line="38" pos:column="63">(<argument><expr><name pos:line="38" pos:column="64">sha1<pos:position pos:line="38" pos:column="68"/></name></expr></argument>)<pos:position pos:line="38" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="71"/></expr_stmt></block></then>
	<elseif pos:line="39" pos:column="9">else <if pos:line="39" pos:column="14">if <condition pos:line="39" pos:column="17">(<expr><name><name pos:line="39" pos:column="18">stream<pos:position pos:line="39" pos:column="24"/></name><operator pos:line="39" pos:column="24">-&gt;<pos:position pos:line="39" pos:column="29"/></operator><name pos:line="39" pos:column="26">avail_in<pos:position pos:line="39" pos:column="34"/></name></name></expr>)<pos:position pos:line="39" pos:column="35"/></condition><then pos:line="39" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="17">error<pos:position pos:line="40" pos:column="22"/></name><argument_list pos:line="40" pos:column="22">(<argument><expr><literal type="string" pos:line="40" pos:column="23">"garbage at end of loose object '%s'"<pos:position pos:line="40" pos:column="60"/></literal></expr></argument>,
		      <argument><expr><call><name pos:line="41" pos:column="23">sha1_to_hex<pos:position pos:line="41" pos:column="34"/></name><argument_list pos:line="41" pos:column="34">(<argument><expr><name pos:line="41" pos:column="35">sha1<pos:position pos:line="41" pos:column="39"/></name></expr></argument>)<pos:position pos:line="41" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="42"/></expr_stmt></block></then></if></elseif></if>
	<expr_stmt><expr><call><name pos:line="42" pos:column="9">free<pos:position pos:line="42" pos:column="13"/></name><argument_list pos:line="42" pos:column="13">(<argument><expr><name pos:line="42" pos:column="14">buf<pos:position pos:line="42" pos:column="17"/></name></expr></argument>)<pos:position pos:line="42" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="19"/></expr_stmt>
	<return pos:line="43" pos:column="9">return <expr><name pos:line="43" pos:column="16">NULL<pos:position pos:line="43" pos:column="20"/></name></expr>;<pos:position pos:line="43" pos:column="21"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
