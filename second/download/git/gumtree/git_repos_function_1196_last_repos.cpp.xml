<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1196_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">diffcore_merge_broken<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">void<pos:position pos:line="1" pos:column="32"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">diff_queue_struct<pos:position pos:line="3" pos:column="33"/></name></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">q<pos:position pos:line="3" pos:column="36"/></name> <init pos:line="3" pos:column="37">= <expr><operator pos:line="3" pos:column="39">&amp;<pos:position pos:line="3" pos:column="44"/></operator><name pos:line="3" pos:column="40">diff_queued_diff<pos:position pos:line="3" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="57"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">diff_queue_struct<pos:position pos:line="4" pos:column="33"/></name></name></type> <name pos:line="4" pos:column="34">outq<pos:position pos:line="4" pos:column="38"/></name></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">i<pos:position pos:line="5" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="16">j<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">DIFF_QUEUE_CLEAR<pos:position pos:line="7" pos:column="25"/></name><argument_list pos:line="7" pos:column="25">(<argument><expr><operator pos:line="7" pos:column="26">&amp;<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="27">outq<pos:position pos:line="7" pos:column="31"/></name></expr></argument>)<pos:position pos:line="7" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="33"/></expr_stmt>

	<for pos:line="9" pos:column="9">for <control pos:line="9" pos:column="13">(<init><expr><name pos:line="9" pos:column="14">i<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <literal type="number" pos:line="9" pos:column="18">0<pos:position pos:line="9" pos:column="19"/></literal></expr>;<pos:position pos:line="9" pos:column="20"/></init> <condition><expr><name pos:line="9" pos:column="21">i<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">&lt;<pos:position pos:line="9" pos:column="27"/></operator> <name><name pos:line="9" pos:column="25">q<pos:position pos:line="9" pos:column="26"/></name><operator pos:line="9" pos:column="26">-&gt;<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="28">nr<pos:position pos:line="9" pos:column="30"/></name></name></expr>;<pos:position pos:line="9" pos:column="31"/></condition> <incr><expr><name pos:line="9" pos:column="32">i<pos:position pos:line="9" pos:column="33"/></name><operator pos:line="9" pos:column="33">++<pos:position pos:line="9" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="9" pos:column="36"/></control> <block pos:line="9" pos:column="37">{
		<decl_stmt><decl><type><name><name pos:line="10" pos:column="17">struct<pos:position pos:line="10" pos:column="23"/></name> <name pos:line="10" pos:column="24">diff_filepair<pos:position pos:line="10" pos:column="37"/></name></name> <modifier pos:line="10" pos:column="38">*<pos:position pos:line="10" pos:column="39"/></modifier></type><name pos:line="10" pos:column="39">p<pos:position pos:line="10" pos:column="40"/></name> <init pos:line="10" pos:column="41">= <expr><name><name pos:line="10" pos:column="43">q<pos:position pos:line="10" pos:column="44"/></name><operator pos:line="10" pos:column="44">-&gt;<pos:position pos:line="10" pos:column="49"/></operator><name pos:line="10" pos:column="46">queue<pos:position pos:line="10" pos:column="51"/></name><index pos:line="10" pos:column="51">[<expr><name pos:line="10" pos:column="52">i<pos:position pos:line="10" pos:column="53"/></name></expr>]<pos:position pos:line="10" pos:column="54"/></index></name></expr></init></decl>;<pos:position pos:line="10" pos:column="55"/></decl_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">!<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">p<pos:position pos:line="11" pos:column="23"/></name></expr>)<pos:position pos:line="11" pos:column="24"/></condition><then pos:line="11" pos:column="24">
			<comment type="block" pos:line="12" pos:column="25">/* we already merged this with its peer */</comment>
			<block type="pseudo"><continue pos:line="13" pos:column="25">continue;<pos:position pos:line="13" pos:column="34"/></continue></block></then>
		<elseif pos:line="14" pos:column="17">else <if pos:line="14" pos:column="22">if <condition pos:line="14" pos:column="25">(<expr><name><name pos:line="14" pos:column="26">p<pos:position pos:line="14" pos:column="27"/></name><operator pos:line="14" pos:column="27">-&gt;<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="29">broken_pair<pos:position pos:line="14" pos:column="40"/></name></name> <operator pos:line="14" pos:column="41">&amp;&amp;<pos:position pos:line="14" pos:column="51"/></operator>
			 <operator pos:line="15" pos:column="26">!<pos:position pos:line="15" pos:column="27"/></operator><call><name pos:line="15" pos:column="27">strcmp<pos:position pos:line="15" pos:column="33"/></name><argument_list pos:line="15" pos:column="33">(<argument><expr><name><name pos:line="15" pos:column="34">p<pos:position pos:line="15" pos:column="35"/></name><operator pos:line="15" pos:column="35">-&gt;<pos:position pos:line="15" pos:column="40"/></operator><name pos:line="15" pos:column="37">one<pos:position pos:line="15" pos:column="40"/></name><operator pos:line="15" pos:column="40">-&gt;<pos:position pos:line="15" pos:column="45"/></operator><name pos:line="15" pos:column="42">path<pos:position pos:line="15" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="48">p<pos:position pos:line="15" pos:column="49"/></name><operator pos:line="15" pos:column="49">-&gt;<pos:position pos:line="15" pos:column="54"/></operator><name pos:line="15" pos:column="51">two<pos:position pos:line="15" pos:column="54"/></name><operator pos:line="15" pos:column="54">-&gt;<pos:position pos:line="15" pos:column="59"/></operator><name pos:line="15" pos:column="56">path<pos:position pos:line="15" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="62"/></condition><then pos:line="15" pos:column="62"> <block pos:line="15" pos:column="63">{
			<comment type="block" pos:line="16" pos:column="25">/* If the peer also survived rename/copy, then
			 * we merge them back together.
			 */</comment>
			<for pos:line="19" pos:column="25">for <control pos:line="19" pos:column="29">(<init><expr><name pos:line="19" pos:column="30">j<pos:position pos:line="19" pos:column="31"/></name> <operator pos:line="19" pos:column="32">=<pos:position pos:line="19" pos:column="33"/></operator> <name pos:line="19" pos:column="34">i<pos:position pos:line="19" pos:column="35"/></name> <operator pos:line="19" pos:column="36">+<pos:position pos:line="19" pos:column="37"/></operator> <literal type="number" pos:line="19" pos:column="38">1<pos:position pos:line="19" pos:column="39"/></literal></expr>;<pos:position pos:line="19" pos:column="40"/></init> <condition><expr><name pos:line="19" pos:column="41">j<pos:position pos:line="19" pos:column="42"/></name> <operator pos:line="19" pos:column="43">&lt;<pos:position pos:line="19" pos:column="47"/></operator> <name><name pos:line="19" pos:column="45">q<pos:position pos:line="19" pos:column="46"/></name><operator pos:line="19" pos:column="46">-&gt;<pos:position pos:line="19" pos:column="51"/></operator><name pos:line="19" pos:column="48">nr<pos:position pos:line="19" pos:column="50"/></name></name></expr>;<pos:position pos:line="19" pos:column="51"/></condition> <incr><expr><name pos:line="19" pos:column="52">j<pos:position pos:line="19" pos:column="53"/></name><operator pos:line="19" pos:column="53">++<pos:position pos:line="19" pos:column="55"/></operator></expr></incr>)<pos:position pos:line="19" pos:column="56"/></control> <block pos:line="19" pos:column="57">{
				<decl_stmt><decl><type><name><name pos:line="20" pos:column="33">struct<pos:position pos:line="20" pos:column="39"/></name> <name pos:line="20" pos:column="40">diff_filepair<pos:position pos:line="20" pos:column="53"/></name></name> <modifier pos:line="20" pos:column="54">*<pos:position pos:line="20" pos:column="55"/></modifier></type><name pos:line="20" pos:column="55">pp<pos:position pos:line="20" pos:column="57"/></name> <init pos:line="20" pos:column="58">= <expr><name><name pos:line="20" pos:column="60">q<pos:position pos:line="20" pos:column="61"/></name><operator pos:line="20" pos:column="61">-&gt;<pos:position pos:line="20" pos:column="66"/></operator><name pos:line="20" pos:column="63">queue<pos:position pos:line="20" pos:column="68"/></name><index pos:line="20" pos:column="68">[<expr><name pos:line="20" pos:column="69">j<pos:position pos:line="20" pos:column="70"/></name></expr>]<pos:position pos:line="20" pos:column="71"/></index></name></expr></init></decl>;<pos:position pos:line="20" pos:column="72"/></decl_stmt>
				<if pos:line="21" pos:column="33">if <condition pos:line="21" pos:column="36">(<expr><name><name pos:line="21" pos:column="37">pp<pos:position pos:line="21" pos:column="39"/></name><operator pos:line="21" pos:column="39">-&gt;<pos:position pos:line="21" pos:column="44"/></operator><name pos:line="21" pos:column="41">broken_pair<pos:position pos:line="21" pos:column="52"/></name></name> <operator pos:line="21" pos:column="53">&amp;&amp;<pos:position pos:line="21" pos:column="63"/></operator>
				    <operator pos:line="22" pos:column="37">!<pos:position pos:line="22" pos:column="38"/></operator><call><name pos:line="22" pos:column="38">strcmp<pos:position pos:line="22" pos:column="44"/></name><argument_list pos:line="22" pos:column="44">(<argument><expr><name><name pos:line="22" pos:column="45">pp<pos:position pos:line="22" pos:column="47"/></name><operator pos:line="22" pos:column="47">-&gt;<pos:position pos:line="22" pos:column="52"/></operator><name pos:line="22" pos:column="49">one<pos:position pos:line="22" pos:column="52"/></name><operator pos:line="22" pos:column="52">-&gt;<pos:position pos:line="22" pos:column="57"/></operator><name pos:line="22" pos:column="54">path<pos:position pos:line="22" pos:column="58"/></name></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="60">pp<pos:position pos:line="22" pos:column="62"/></name><operator pos:line="22" pos:column="62">-&gt;<pos:position pos:line="22" pos:column="67"/></operator><name pos:line="22" pos:column="64">two<pos:position pos:line="22" pos:column="67"/></name><operator pos:line="22" pos:column="67">-&gt;<pos:position pos:line="22" pos:column="72"/></operator><name pos:line="22" pos:column="69">path<pos:position pos:line="22" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="74"/></argument_list></call> <operator pos:line="22" pos:column="75">&amp;&amp;<pos:position pos:line="22" pos:column="85"/></operator>
				    <operator pos:line="23" pos:column="37">!<pos:position pos:line="23" pos:column="38"/></operator><call><name pos:line="23" pos:column="38">strcmp<pos:position pos:line="23" pos:column="44"/></name><argument_list pos:line="23" pos:column="44">(<argument><expr><name><name pos:line="23" pos:column="45">p<pos:position pos:line="23" pos:column="46"/></name><operator pos:line="23" pos:column="46">-&gt;<pos:position pos:line="23" pos:column="51"/></operator><name pos:line="23" pos:column="48">one<pos:position pos:line="23" pos:column="51"/></name><operator pos:line="23" pos:column="51">-&gt;<pos:position pos:line="23" pos:column="56"/></operator><name pos:line="23" pos:column="53">path<pos:position pos:line="23" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="59">pp<pos:position pos:line="23" pos:column="61"/></name><operator pos:line="23" pos:column="61">-&gt;<pos:position pos:line="23" pos:column="66"/></operator><name pos:line="23" pos:column="63">two<pos:position pos:line="23" pos:column="66"/></name><operator pos:line="23" pos:column="66">-&gt;<pos:position pos:line="23" pos:column="71"/></operator><name pos:line="23" pos:column="68">path<pos:position pos:line="23" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="74"/></condition><then pos:line="23" pos:column="74"> <block pos:line="23" pos:column="75">{
					<comment type="block" pos:line="24" pos:column="41">/* Peer survived.  Merge them */</comment>
					<expr_stmt><expr><call><name pos:line="25" pos:column="41">merge_broken<pos:position pos:line="25" pos:column="53"/></name><argument_list pos:line="25" pos:column="53">(<argument><expr><name pos:line="25" pos:column="54">p<pos:position pos:line="25" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="57">pp<pos:position pos:line="25" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="61">&amp;<pos:position pos:line="25" pos:column="66"/></operator><name pos:line="25" pos:column="62">outq<pos:position pos:line="25" pos:column="66"/></name></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt>
					<expr_stmt><expr><name><name pos:line="26" pos:column="41">q<pos:position pos:line="26" pos:column="42"/></name><operator pos:line="26" pos:column="42">-&gt;<pos:position pos:line="26" pos:column="47"/></operator><name pos:line="26" pos:column="44">queue<pos:position pos:line="26" pos:column="49"/></name><index pos:line="26" pos:column="49">[<expr><name pos:line="26" pos:column="50">j<pos:position pos:line="26" pos:column="51"/></name></expr>]<pos:position pos:line="26" pos:column="52"/></index></name> <operator pos:line="26" pos:column="53">=<pos:position pos:line="26" pos:column="54"/></operator> <name pos:line="26" pos:column="55">NULL<pos:position pos:line="26" pos:column="59"/></name></expr>;<pos:position pos:line="26" pos:column="60"/></expr_stmt>
					<break pos:line="27" pos:column="41">break;<pos:position pos:line="27" pos:column="47"/></break>
				}<pos:position pos:line="28" pos:column="34"/></block></then></if>
			}<pos:position pos:line="29" pos:column="26"/></block></for>
			<if pos:line="30" pos:column="25">if <condition pos:line="30" pos:column="28">(<expr><name><name pos:line="30" pos:column="29">q<pos:position pos:line="30" pos:column="30"/></name><operator pos:line="30" pos:column="30">-&gt;<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="32">nr<pos:position pos:line="30" pos:column="34"/></name></name> <operator pos:line="30" pos:column="35">&lt;=<pos:position pos:line="30" pos:column="40"/></operator> <name pos:line="30" pos:column="38">j<pos:position pos:line="30" pos:column="39"/></name></expr>)<pos:position pos:line="30" pos:column="40"/></condition><then pos:line="30" pos:column="40">
				<comment type="block" pos:line="31" pos:column="33">/* The peer did not survive, so we keep
				 * it in the output.
				 */</comment>
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="33">diff_q<pos:position pos:line="34" pos:column="39"/></name><argument_list pos:line="34" pos:column="39">(<argument><expr><operator pos:line="34" pos:column="40">&amp;<pos:position pos:line="34" pos:column="45"/></operator><name pos:line="34" pos:column="41">outq<pos:position pos:line="34" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="47">p<pos:position pos:line="34" pos:column="48"/></name></expr></argument>)<pos:position pos:line="34" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="50"/></expr_stmt></block></then></if>
		}<pos:position pos:line="35" pos:column="18"/></block></then></if></elseif>
		<else pos:line="36" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="25">diff_q<pos:position pos:line="37" pos:column="31"/></name><argument_list pos:line="37" pos:column="31">(<argument><expr><operator pos:line="37" pos:column="32">&amp;<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="33">outq<pos:position pos:line="37" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="39">p<pos:position pos:line="37" pos:column="40"/></name></expr></argument>)<pos:position pos:line="37" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="42"/></expr_stmt></block></else></if>
	}<pos:position pos:line="38" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">free<pos:position pos:line="39" pos:column="13"/></name><argument_list pos:line="39" pos:column="13">(<argument><expr><name><name pos:line="39" pos:column="14">q<pos:position pos:line="39" pos:column="15"/></name><operator pos:line="39" pos:column="15">-&gt;<pos:position pos:line="39" pos:column="20"/></operator><name pos:line="39" pos:column="17">queue<pos:position pos:line="39" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="40" pos:column="9">*<pos:position pos:line="40" pos:column="10"/></operator><name pos:line="40" pos:column="10">q<pos:position pos:line="40" pos:column="11"/></name> <operator pos:line="40" pos:column="12">=<pos:position pos:line="40" pos:column="13"/></operator> <name pos:line="40" pos:column="14">outq<pos:position pos:line="40" pos:column="18"/></name></expr>;<pos:position pos:line="40" pos:column="19"/></expr_stmt>

	<return pos:line="42" pos:column="9">return;<pos:position pos:line="42" pos:column="16"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
