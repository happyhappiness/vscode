<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6326_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">list_replace_refs<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">pattern<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="51">const<pos:position pos:line="1" pos:column="56"/></specifier> <name pos:line="1" pos:column="57">char<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">format<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">show_data<pos:position pos:line="3" pos:column="25"/></name></name></type> <name pos:line="3" pos:column="26">data<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">pattern<pos:position pos:line="5" pos:column="20"/></name> <operator pos:line="5" pos:column="21">==<pos:position pos:line="5" pos:column="23"/></operator> <name pos:line="5" pos:column="24">NULL<pos:position pos:line="5" pos:column="28"/></name></expr>)<pos:position pos:line="5" pos:column="29"/></condition><then pos:line="5" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name pos:line="6" pos:column="17">pattern<pos:position pos:line="6" pos:column="24"/></name> <operator pos:line="6" pos:column="25">=<pos:position pos:line="6" pos:column="26"/></operator> <literal type="string" pos:line="6" pos:column="27">"*"<pos:position pos:line="6" pos:column="30"/></literal></expr>;<pos:position pos:line="6" pos:column="31"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="7" pos:column="9">data<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">.<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">pattern<pos:position pos:line="7" pos:column="21"/></name></name> <operator pos:line="7" pos:column="22">=<pos:position pos:line="7" pos:column="23"/></operator> <name pos:line="7" pos:column="24">pattern<pos:position pos:line="7" pos:column="31"/></name></expr>;<pos:position pos:line="7" pos:column="32"/></expr_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">format<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">==<pos:position pos:line="9" pos:column="22"/></operator> <name pos:line="9" pos:column="23">NULL<pos:position pos:line="9" pos:column="27"/></name> <operator pos:line="9" pos:column="28">||<pos:position pos:line="9" pos:column="30"/></operator> <operator pos:line="9" pos:column="31">*<pos:position pos:line="9" pos:column="32"/></operator><name pos:line="9" pos:column="32">format<pos:position pos:line="9" pos:column="38"/></name> <operator pos:line="9" pos:column="39">==<pos:position pos:line="9" pos:column="41"/></operator> <literal type="char" pos:line="9" pos:column="42">'\0'<pos:position pos:line="9" pos:column="46"/></literal> <operator pos:line="9" pos:column="47">||<pos:position pos:line="9" pos:column="49"/></operator> <operator pos:line="9" pos:column="50">!<pos:position pos:line="9" pos:column="51"/></operator><call><name pos:line="9" pos:column="51">strcmp<pos:position pos:line="9" pos:column="57"/></name><argument_list pos:line="9" pos:column="57">(<argument><expr><name pos:line="9" pos:column="58">format<pos:position pos:line="9" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="66">"short"<pos:position pos:line="9" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="75"/></condition><then pos:line="9" pos:column="75">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="10" pos:column="17">data<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">.<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">format<pos:position pos:line="10" pos:column="28"/></name></name> <operator pos:line="10" pos:column="29">=<pos:position pos:line="10" pos:column="30"/></operator> <name pos:line="10" pos:column="31">REPLACE_FORMAT_SHORT<pos:position pos:line="10" pos:column="51"/></name></expr>;<pos:position pos:line="10" pos:column="52"/></expr_stmt></block></then>
	<elseif pos:line="11" pos:column="9">else <if pos:line="11" pos:column="14">if <condition pos:line="11" pos:column="17">(<expr><operator pos:line="11" pos:column="18">!<pos:position pos:line="11" pos:column="19"/></operator><call><name pos:line="11" pos:column="19">strcmp<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">format<pos:position pos:line="11" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="34">"medium"<pos:position pos:line="11" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="44"/></condition><then pos:line="11" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="12" pos:column="17">data<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">.<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">format<pos:position pos:line="12" pos:column="28"/></name></name> <operator pos:line="12" pos:column="29">=<pos:position pos:line="12" pos:column="30"/></operator> <name pos:line="12" pos:column="31">REPLACE_FORMAT_MEDIUM<pos:position pos:line="12" pos:column="52"/></name></expr>;<pos:position pos:line="12" pos:column="53"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="13" pos:column="9">else <if pos:line="13" pos:column="14">if <condition pos:line="13" pos:column="17">(<expr><operator pos:line="13" pos:column="18">!<pos:position pos:line="13" pos:column="19"/></operator><call><name pos:line="13" pos:column="19">strcmp<pos:position pos:line="13" pos:column="25"/></name><argument_list pos:line="13" pos:column="25">(<argument><expr><name pos:line="13" pos:column="26">format<pos:position pos:line="13" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="34">"long"<pos:position pos:line="13" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="42"/></condition><then pos:line="13" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="14" pos:column="17">data<pos:position pos:line="14" pos:column="21"/></name><operator pos:line="14" pos:column="21">.<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">format<pos:position pos:line="14" pos:column="28"/></name></name> <operator pos:line="14" pos:column="29">=<pos:position pos:line="14" pos:column="30"/></operator> <name pos:line="14" pos:column="31">REPLACE_FORMAT_LONG<pos:position pos:line="14" pos:column="50"/></name></expr>;<pos:position pos:line="14" pos:column="51"/></expr_stmt></block></then></if></elseif>
	<else pos:line="15" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="17">die<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><literal type="string" pos:line="16" pos:column="21">"invalid replace format '%s'\n"<pos:position pos:line="16" pos:column="52"/></literal>
		    <literal type="string" pos:line="17" pos:column="21">"valid formats are 'short', 'medium' and 'long'\n"<pos:position pos:line="17" pos:column="71"/></literal></expr></argument>,
		    <argument><expr><name pos:line="18" pos:column="21">format<pos:position pos:line="18" pos:column="27"/></name></expr></argument>)<pos:position pos:line="18" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="20" pos:column="9">for_each_replace_ref<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">show_reference<pos:position pos:line="20" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="46">(<pos:position pos:line="20" pos:column="47"/></operator><name pos:line="20" pos:column="47">void<pos:position pos:line="20" pos:column="51"/></name> <operator pos:line="20" pos:column="52">*<pos:position pos:line="20" pos:column="53"/></operator><operator pos:line="20" pos:column="53">)<pos:position pos:line="20" pos:column="54"/></operator><operator pos:line="20" pos:column="54">&amp;<pos:position pos:line="20" pos:column="59"/></operator><name pos:line="20" pos:column="55">data<pos:position pos:line="20" pos:column="59"/></name></expr></argument>)<pos:position pos:line="20" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="61"/></expr_stmt>

	<return pos:line="22" pos:column="9">return <expr><literal type="number" pos:line="22" pos:column="16">0<pos:position pos:line="22" pos:column="17"/></literal></expr>;<pos:position pos:line="22" pos:column="18"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
