<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6655_git-2.12.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name></type>
<name pos:line="2" pos:column="1">prune_impossible_nodes<pos:position pos:line="2" pos:column="23"/></name> <parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><name pos:line="2" pos:column="25">re_match_context_t<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">mctx<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">re_dfa_t<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier><specifier pos:line="4" pos:column="19">const<pos:position pos:line="4" pos:column="24"/></specifier></type> <name pos:line="4" pos:column="25">dfa<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><name><name pos:line="4" pos:column="31">mctx<pos:position pos:line="4" pos:column="35"/></name><operator pos:line="4" pos:column="35">-&gt;<pos:position pos:line="4" pos:column="40"/></operator><name pos:line="4" pos:column="37">dfa<pos:position pos:line="4" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">halt_node<pos:position pos:line="5" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="18">match_last<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">reg_errcode_t<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">ret<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">re_dfastate_t<pos:position pos:line="7" pos:column="16"/></name> <modifier pos:line="7" pos:column="17">*<pos:position pos:line="7" pos:column="18"/></modifier><modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier></type><name pos:line="7" pos:column="19">sifted_states<pos:position pos:line="7" pos:column="32"/></name></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">re_dfastate_t<pos:position pos:line="8" pos:column="16"/></name> <modifier pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></modifier><modifier pos:line="8" pos:column="18">*<pos:position pos:line="8" pos:column="19"/></modifier></type><name pos:line="8" pos:column="19">lim_states<pos:position pos:line="8" pos:column="29"/></name> <init pos:line="8" pos:column="30">= <expr><name pos:line="8" pos:column="32">NULL<pos:position pos:line="8" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="37"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">re_sift_context_t<pos:position pos:line="9" pos:column="20"/></name></type> <name pos:line="9" pos:column="21">sctx<pos:position pos:line="9" pos:column="25"/></name></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>
<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">DEBUG<pos:position pos:line="10" pos:column="13"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="11" pos:column="3">assert<pos:position pos:line="11" pos:column="9"/></name> <argument_list pos:line="11" pos:column="10">(<argument><expr><name><name pos:line="11" pos:column="11">mctx<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">-&gt;<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="17">state_log<pos:position pos:line="11" pos:column="26"/></name></name> <operator pos:line="11" pos:column="27">!=<pos:position pos:line="11" pos:column="29"/></operator> <name pos:line="11" pos:column="30">NULL<pos:position pos:line="11" pos:column="34"/></name></expr></argument>)<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><name pos:line="13" pos:column="3">match_last<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <name><name pos:line="13" pos:column="16">mctx<pos:position pos:line="13" pos:column="20"/></name><operator pos:line="13" pos:column="20">-&gt;<pos:position pos:line="13" pos:column="25"/></operator><name pos:line="13" pos:column="22">match_last<pos:position pos:line="13" pos:column="32"/></name></name></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="14" pos:column="3">halt_node<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">=<pos:position pos:line="14" pos:column="14"/></operator> <name><name pos:line="14" pos:column="15">mctx<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">-&gt;<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="21">last_node<pos:position pos:line="14" pos:column="30"/></name></name></expr>;<pos:position pos:line="14" pos:column="31"/></expr_stmt>

  <comment type="block" pos:line="16" pos:column="3">/* Avoid overflow.  */</comment>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><call><name pos:line="17" pos:column="7">BE<pos:position pos:line="17" pos:column="9"/></name> <argument_list pos:line="17" pos:column="10">(<argument><expr><name pos:line="17" pos:column="11">SIZE_MAX<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">/<pos:position pos:line="17" pos:column="21"/></operator> <sizeof pos:line="17" pos:column="22">sizeof <argument_list pos:line="17" pos:column="29">(<argument><expr><name pos:line="17" pos:column="30">re_dfastate_t<pos:position pos:line="17" pos:column="43"/></name> <operator pos:line="17" pos:column="44">*<pos:position pos:line="17" pos:column="45"/></operator></expr></argument>)<pos:position pos:line="17" pos:column="46"/></argument_list></sizeof> <operator pos:line="17" pos:column="47">&lt;=<pos:position pos:line="17" pos:column="52"/></operator> <name pos:line="17" pos:column="50">match_last<pos:position pos:line="17" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="62">0<pos:position pos:line="17" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="65"/></condition><then pos:line="17" pos:column="65">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">REG_ESPACE<pos:position pos:line="18" pos:column="22"/></name></expr>;<pos:position pos:line="18" pos:column="23"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="20" pos:column="3">sifted_states<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <call><name pos:line="20" pos:column="19">re_malloc<pos:position pos:line="20" pos:column="28"/></name> <argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">re_dfastate_t<pos:position pos:line="20" pos:column="43"/></name> <operator pos:line="20" pos:column="44">*<pos:position pos:line="20" pos:column="45"/></operator></expr></argument>, <argument><expr><name pos:line="20" pos:column="47">match_last<pos:position pos:line="20" pos:column="57"/></name> <operator pos:line="20" pos:column="58">+<pos:position pos:line="20" pos:column="59"/></operator> <literal type="number" pos:line="20" pos:column="60">1<pos:position pos:line="20" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="63"/></expr_stmt>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><call><name pos:line="21" pos:column="7">BE<pos:position pos:line="21" pos:column="9"/></name> <argument_list pos:line="21" pos:column="10">(<argument><expr><name pos:line="21" pos:column="11">sifted_states<pos:position pos:line="21" pos:column="24"/></name> <operator pos:line="21" pos:column="25">==<pos:position pos:line="21" pos:column="27"/></operator> <name pos:line="21" pos:column="28">NULL<pos:position pos:line="21" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="34">0<pos:position pos:line="21" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="37"/></condition><then pos:line="21" pos:column="37">
    <block pos:line="22" pos:column="5">{
      <expr_stmt><expr><name pos:line="23" pos:column="7">ret<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <name pos:line="23" pos:column="13">REG_ESPACE<pos:position pos:line="23" pos:column="23"/></name></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>
      <goto pos:line="24" pos:column="7">goto <name pos:line="24" pos:column="12">free_return<pos:position pos:line="24" pos:column="23"/></name>;<pos:position pos:line="24" pos:column="24"/></goto>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>
  <if pos:line="26" pos:column="3">if <condition pos:line="26" pos:column="6">(<expr><name><name pos:line="26" pos:column="7">dfa<pos:position pos:line="26" pos:column="10"/></name><operator pos:line="26" pos:column="10">-&gt;<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="12">nbackref<pos:position pos:line="26" pos:column="20"/></name></name></expr>)<pos:position pos:line="26" pos:column="21"/></condition><then pos:line="26" pos:column="21">
    <block pos:line="27" pos:column="5">{
      <expr_stmt><expr><name pos:line="28" pos:column="7">lim_states<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">=<pos:position pos:line="28" pos:column="19"/></operator> <call><name pos:line="28" pos:column="20">re_malloc<pos:position pos:line="28" pos:column="29"/></name> <argument_list pos:line="28" pos:column="30">(<argument><expr><name pos:line="28" pos:column="31">re_dfastate_t<pos:position pos:line="28" pos:column="44"/></name> <operator pos:line="28" pos:column="45">*<pos:position pos:line="28" pos:column="46"/></operator></expr></argument>, <argument><expr><name pos:line="28" pos:column="48">match_last<pos:position pos:line="28" pos:column="58"/></name> <operator pos:line="28" pos:column="59">+<pos:position pos:line="28" pos:column="60"/></operator> <literal type="number" pos:line="28" pos:column="61">1<pos:position pos:line="28" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="64"/></expr_stmt>
      <if pos:line="29" pos:column="7">if <condition pos:line="29" pos:column="10">(<expr><call><name pos:line="29" pos:column="11">BE<pos:position pos:line="29" pos:column="13"/></name> <argument_list pos:line="29" pos:column="14">(<argument><expr><name pos:line="29" pos:column="15">lim_states<pos:position pos:line="29" pos:column="25"/></name> <operator pos:line="29" pos:column="26">==<pos:position pos:line="29" pos:column="28"/></operator> <name pos:line="29" pos:column="29">NULL<pos:position pos:line="29" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="35">0<pos:position pos:line="29" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="38"/></condition><then pos:line="29" pos:column="38">
	<block pos:line="30" pos:column="9">{
	  <expr_stmt><expr><name pos:line="31" pos:column="11">ret<pos:position pos:line="31" pos:column="14"/></name> <operator pos:line="31" pos:column="15">=<pos:position pos:line="31" pos:column="16"/></operator> <name pos:line="31" pos:column="17">REG_ESPACE<pos:position pos:line="31" pos:column="27"/></name></expr>;<pos:position pos:line="31" pos:column="28"/></expr_stmt>
	  <goto pos:line="32" pos:column="11">goto <name pos:line="32" pos:column="16">free_return<pos:position pos:line="32" pos:column="27"/></name>;<pos:position pos:line="32" pos:column="28"/></goto>
	}<pos:position pos:line="33" pos:column="10"/></block></then></if>
      <while pos:line="34" pos:column="7">while <condition pos:line="34" pos:column="13">(<expr><literal type="number" pos:line="34" pos:column="14">1<pos:position pos:line="34" pos:column="15"/></literal></expr>)<pos:position pos:line="34" pos:column="16"/></condition>
	<block pos:line="35" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="36" pos:column="11">memset<pos:position pos:line="36" pos:column="17"/></name> <argument_list pos:line="36" pos:column="18">(<argument><expr><name pos:line="36" pos:column="19">lim_states<pos:position pos:line="36" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="36" pos:column="31">'\0'<pos:position pos:line="36" pos:column="35"/></literal></expr></argument>,
		  <argument><expr><sizeof pos:line="37" pos:column="19">sizeof <argument_list pos:line="37" pos:column="26">(<argument><expr><name pos:line="37" pos:column="27">re_dfastate_t<pos:position pos:line="37" pos:column="40"/></name> <operator pos:line="37" pos:column="41">*<pos:position pos:line="37" pos:column="42"/></operator></expr></argument>)<pos:position pos:line="37" pos:column="43"/></argument_list></sizeof> <operator pos:line="37" pos:column="44">*<pos:position pos:line="37" pos:column="45"/></operator> <operator pos:line="37" pos:column="46">(<pos:position pos:line="37" pos:column="47"/></operator><name pos:line="37" pos:column="47">match_last<pos:position pos:line="37" pos:column="57"/></name> <operator pos:line="37" pos:column="58">+<pos:position pos:line="37" pos:column="59"/></operator> <literal type="number" pos:line="37" pos:column="60">1<pos:position pos:line="37" pos:column="61"/></literal><operator pos:line="37" pos:column="61">)<pos:position pos:line="37" pos:column="62"/></operator></expr></argument>)<pos:position pos:line="37" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="64"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="38" pos:column="11">sift_ctx_init<pos:position pos:line="38" pos:column="24"/></name> <argument_list pos:line="38" pos:column="25">(<argument><expr><operator pos:line="38" pos:column="26">&amp;<pos:position pos:line="38" pos:column="31"/></operator><name pos:line="38" pos:column="27">sctx<pos:position pos:line="38" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="33">sifted_states<pos:position pos:line="38" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="48">lim_states<pos:position pos:line="38" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="60">halt_node<pos:position pos:line="38" pos:column="69"/></name></expr></argument>,
			 <argument><expr><name pos:line="39" pos:column="26">match_last<pos:position pos:line="39" pos:column="36"/></name></expr></argument>)<pos:position pos:line="39" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="38"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="40" pos:column="11">ret<pos:position pos:line="40" pos:column="14"/></name> <operator pos:line="40" pos:column="15">=<pos:position pos:line="40" pos:column="16"/></operator> <call><name pos:line="40" pos:column="17">sift_states_backward<pos:position pos:line="40" pos:column="37"/></name> <argument_list pos:line="40" pos:column="38">(<argument><expr><name pos:line="40" pos:column="39">mctx<pos:position pos:line="40" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="45">&amp;<pos:position pos:line="40" pos:column="50"/></operator><name pos:line="40" pos:column="46">sctx<pos:position pos:line="40" pos:column="50"/></name></expr></argument>)<pos:position pos:line="40" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="52"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="41" pos:column="11">re_node_set_free<pos:position pos:line="41" pos:column="27"/></name> <argument_list pos:line="41" pos:column="28">(<argument><expr><operator pos:line="41" pos:column="29">&amp;<pos:position pos:line="41" pos:column="34"/></operator><name><name pos:line="41" pos:column="30">sctx<pos:position pos:line="41" pos:column="34"/></name><operator pos:line="41" pos:column="34">.<pos:position pos:line="41" pos:column="35"/></operator><name pos:line="41" pos:column="35">limits<pos:position pos:line="41" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="43"/></expr_stmt>
	  <if pos:line="42" pos:column="11">if <condition pos:line="42" pos:column="14">(<expr><call><name pos:line="42" pos:column="15">BE<pos:position pos:line="42" pos:column="17"/></name> <argument_list pos:line="42" pos:column="18">(<argument><expr><name pos:line="42" pos:column="19">ret<pos:position pos:line="42" pos:column="22"/></name> <operator pos:line="42" pos:column="23">!=<pos:position pos:line="42" pos:column="25"/></operator> <name pos:line="42" pos:column="26">REG_NOERROR<pos:position pos:line="42" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="39">0<pos:position pos:line="42" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="42"/></condition><then pos:line="42" pos:column="42">
	      <block type="pseudo"><goto pos:line="43" pos:column="15">goto <name pos:line="43" pos:column="20">free_return<pos:position pos:line="43" pos:column="31"/></name>;<pos:position pos:line="43" pos:column="32"/></goto></block></then></if>
	  <if pos:line="44" pos:column="11">if <condition pos:line="44" pos:column="14">(<expr><name><name pos:line="44" pos:column="15">sifted_states<pos:position pos:line="44" pos:column="28"/></name><index pos:line="44" pos:column="28">[<expr><literal type="number" pos:line="44" pos:column="29">0<pos:position pos:line="44" pos:column="30"/></literal></expr>]<pos:position pos:line="44" pos:column="31"/></index></name> <operator pos:line="44" pos:column="32">!=<pos:position pos:line="44" pos:column="34"/></operator> <name pos:line="44" pos:column="35">NULL<pos:position pos:line="44" pos:column="39"/></name> <operator pos:line="44" pos:column="40">||<pos:position pos:line="44" pos:column="42"/></operator> <name><name pos:line="44" pos:column="43">lim_states<pos:position pos:line="44" pos:column="53"/></name><index pos:line="44" pos:column="53">[<expr><literal type="number" pos:line="44" pos:column="54">0<pos:position pos:line="44" pos:column="55"/></literal></expr>]<pos:position pos:line="44" pos:column="56"/></index></name> <operator pos:line="44" pos:column="57">!=<pos:position pos:line="44" pos:column="59"/></operator> <name pos:line="44" pos:column="60">NULL<pos:position pos:line="44" pos:column="64"/></name></expr>)<pos:position pos:line="44" pos:column="65"/></condition><then pos:line="44" pos:column="65">
	    <block type="pseudo"><break pos:line="45" pos:column="13">break;<pos:position pos:line="45" pos:column="19"/></break></block></then></if>
	  <do pos:line="46" pos:column="11">do
	    <block pos:line="47" pos:column="13">{
	      <expr_stmt><expr><operator pos:line="48" pos:column="15">--<pos:position pos:line="48" pos:column="17"/></operator><name pos:line="48" pos:column="17">match_last<pos:position pos:line="48" pos:column="27"/></name></expr>;<pos:position pos:line="48" pos:column="28"/></expr_stmt>
	      <if pos:line="49" pos:column="15">if <condition pos:line="49" pos:column="18">(<expr><name pos:line="49" pos:column="19">match_last<pos:position pos:line="49" pos:column="29"/></name> <operator pos:line="49" pos:column="30">&lt;<pos:position pos:line="49" pos:column="34"/></operator> <literal type="number" pos:line="49" pos:column="32">0<pos:position pos:line="49" pos:column="33"/></literal></expr>)<pos:position pos:line="49" pos:column="34"/></condition><then pos:line="49" pos:column="34">
		<block pos:line="50" pos:column="17">{
		  <expr_stmt><expr><name pos:line="51" pos:column="19">ret<pos:position pos:line="51" pos:column="22"/></name> <operator pos:line="51" pos:column="23">=<pos:position pos:line="51" pos:column="24"/></operator> <name pos:line="51" pos:column="25">REG_NOMATCH<pos:position pos:line="51" pos:column="36"/></name></expr>;<pos:position pos:line="51" pos:column="37"/></expr_stmt>
		  <goto pos:line="52" pos:column="19">goto <name pos:line="52" pos:column="24">free_return<pos:position pos:line="52" pos:column="35"/></name>;<pos:position pos:line="52" pos:column="36"/></goto>
		}<pos:position pos:line="53" pos:column="18"/></block></then></if>
	    }<pos:position pos:line="54" pos:column="14"/></block> while <condition pos:line="54" pos:column="21">(<expr><name><name pos:line="54" pos:column="22">mctx<pos:position pos:line="54" pos:column="26"/></name><operator pos:line="54" pos:column="26">-&gt;<pos:position pos:line="54" pos:column="31"/></operator><name pos:line="54" pos:column="28">state_log<pos:position pos:line="54" pos:column="37"/></name><index pos:line="54" pos:column="37">[<expr><name pos:line="54" pos:column="38">match_last<pos:position pos:line="54" pos:column="48"/></name></expr>]<pos:position pos:line="54" pos:column="49"/></index></name> <operator pos:line="54" pos:column="50">==<pos:position pos:line="54" pos:column="52"/></operator> <name pos:line="54" pos:column="53">NULL<pos:position pos:line="54" pos:column="57"/></name>
		     <operator pos:line="55" pos:column="22">||<pos:position pos:line="55" pos:column="24"/></operator> <operator pos:line="55" pos:column="25">!<pos:position pos:line="55" pos:column="26"/></operator><name><name pos:line="55" pos:column="26">mctx<pos:position pos:line="55" pos:column="30"/></name><operator pos:line="55" pos:column="30">-&gt;<pos:position pos:line="55" pos:column="35"/></operator><name pos:line="55" pos:column="32">state_log<pos:position pos:line="55" pos:column="41"/></name><index pos:line="55" pos:column="41">[<expr><name pos:line="55" pos:column="42">match_last<pos:position pos:line="55" pos:column="52"/></name></expr>]<pos:position pos:line="55" pos:column="53"/></index></name><operator pos:line="55" pos:column="53">-&gt;<pos:position pos:line="55" pos:column="58"/></operator><name pos:line="55" pos:column="55">halt<pos:position pos:line="55" pos:column="59"/></name></expr>)<pos:position pos:line="55" pos:column="60"/></condition>;<pos:position pos:line="55" pos:column="61"/></do>
	  <expr_stmt><expr><name pos:line="56" pos:column="11">halt_node<pos:position pos:line="56" pos:column="20"/></name> <operator pos:line="56" pos:column="21">=<pos:position pos:line="56" pos:column="22"/></operator> <call><name pos:line="56" pos:column="23">check_halt_state_context<pos:position pos:line="56" pos:column="47"/></name> <argument_list pos:line="56" pos:column="48">(<argument><expr><name pos:line="56" pos:column="49">mctx<pos:position pos:line="56" pos:column="53"/></name></expr></argument>,
						<argument><expr><name><name pos:line="57" pos:column="49">mctx<pos:position pos:line="57" pos:column="53"/></name><operator pos:line="57" pos:column="53">-&gt;<pos:position pos:line="57" pos:column="58"/></operator><name pos:line="57" pos:column="55">state_log<pos:position pos:line="57" pos:column="64"/></name><index pos:line="57" pos:column="64">[<expr><name pos:line="57" pos:column="65">match_last<pos:position pos:line="57" pos:column="75"/></name></expr>]<pos:position pos:line="57" pos:column="76"/></index></name></expr></argument>,
						<argument><expr><name pos:line="58" pos:column="49">match_last<pos:position pos:line="58" pos:column="59"/></name></expr></argument>)<pos:position pos:line="58" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="61"/></expr_stmt>
	}<pos:position pos:line="59" pos:column="10"/></block></while>
      <expr_stmt><expr><name pos:line="60" pos:column="7">ret<pos:position pos:line="60" pos:column="10"/></name> <operator pos:line="60" pos:column="11">=<pos:position pos:line="60" pos:column="12"/></operator> <call><name pos:line="60" pos:column="13">merge_state_array<pos:position pos:line="60" pos:column="30"/></name> <argument_list pos:line="60" pos:column="31">(<argument><expr><name pos:line="60" pos:column="32">dfa<pos:position pos:line="60" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="37">sifted_states<pos:position pos:line="60" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="52">lim_states<pos:position pos:line="60" pos:column="62"/></name></expr></argument>,
			       <argument><expr><name pos:line="61" pos:column="32">match_last<pos:position pos:line="61" pos:column="42"/></name> <operator pos:line="61" pos:column="43">+<pos:position pos:line="61" pos:column="44"/></operator> <literal type="number" pos:line="61" pos:column="45">1<pos:position pos:line="61" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="62" pos:column="7">re_free<pos:position pos:line="62" pos:column="14"/></name> <argument_list pos:line="62" pos:column="15">(<argument><expr><name pos:line="62" pos:column="16">lim_states<pos:position pos:line="62" pos:column="26"/></name></expr></argument>)<pos:position pos:line="62" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name pos:line="63" pos:column="7">lim_states<pos:position pos:line="63" pos:column="17"/></name> <operator pos:line="63" pos:column="18">=<pos:position pos:line="63" pos:column="19"/></operator> <name pos:line="63" pos:column="20">NULL<pos:position pos:line="63" pos:column="24"/></name></expr>;<pos:position pos:line="63" pos:column="25"/></expr_stmt>
      <if pos:line="64" pos:column="7">if <condition pos:line="64" pos:column="10">(<expr><call><name pos:line="64" pos:column="11">BE<pos:position pos:line="64" pos:column="13"/></name> <argument_list pos:line="64" pos:column="14">(<argument><expr><name pos:line="64" pos:column="15">ret<pos:position pos:line="64" pos:column="18"/></name> <operator pos:line="64" pos:column="19">!=<pos:position pos:line="64" pos:column="21"/></operator> <name pos:line="64" pos:column="22">REG_NOERROR<pos:position pos:line="64" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="64" pos:column="35">0<pos:position pos:line="64" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="38"/></condition><then pos:line="64" pos:column="38">
	<block type="pseudo"><goto pos:line="65" pos:column="9">goto <name pos:line="65" pos:column="14">free_return<pos:position pos:line="65" pos:column="25"/></name>;<pos:position pos:line="65" pos:column="26"/></goto></block></then></if>
    }<pos:position pos:line="66" pos:column="6"/></block></then>
  <else pos:line="67" pos:column="3">else
    <block pos:line="68" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="69" pos:column="7">sift_ctx_init<pos:position pos:line="69" pos:column="20"/></name> <argument_list pos:line="69" pos:column="21">(<argument><expr><operator pos:line="69" pos:column="22">&amp;<pos:position pos:line="69" pos:column="27"/></operator><name pos:line="69" pos:column="23">sctx<pos:position pos:line="69" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="29">sifted_states<pos:position pos:line="69" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="44">lim_states<pos:position pos:line="69" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="56">halt_node<pos:position pos:line="69" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="67">match_last<pos:position pos:line="69" pos:column="77"/></name></expr></argument>)<pos:position pos:line="69" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="79"/></expr_stmt>
      <expr_stmt><expr><name pos:line="70" pos:column="7">ret<pos:position pos:line="70" pos:column="10"/></name> <operator pos:line="70" pos:column="11">=<pos:position pos:line="70" pos:column="12"/></operator> <call><name pos:line="70" pos:column="13">sift_states_backward<pos:position pos:line="70" pos:column="33"/></name> <argument_list pos:line="70" pos:column="34">(<argument><expr><name pos:line="70" pos:column="35">mctx<pos:position pos:line="70" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="70" pos:column="41">&amp;<pos:position pos:line="70" pos:column="46"/></operator><name pos:line="70" pos:column="42">sctx<pos:position pos:line="70" pos:column="46"/></name></expr></argument>)<pos:position pos:line="70" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="71" pos:column="7">re_node_set_free<pos:position pos:line="71" pos:column="23"/></name> <argument_list pos:line="71" pos:column="24">(<argument><expr><operator pos:line="71" pos:column="25">&amp;<pos:position pos:line="71" pos:column="30"/></operator><name><name pos:line="71" pos:column="26">sctx<pos:position pos:line="71" pos:column="30"/></name><operator pos:line="71" pos:column="30">.<pos:position pos:line="71" pos:column="31"/></operator><name pos:line="71" pos:column="31">limits<pos:position pos:line="71" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="39"/></expr_stmt>
      <if pos:line="72" pos:column="7">if <condition pos:line="72" pos:column="10">(<expr><call><name pos:line="72" pos:column="11">BE<pos:position pos:line="72" pos:column="13"/></name> <argument_list pos:line="72" pos:column="14">(<argument><expr><name pos:line="72" pos:column="15">ret<pos:position pos:line="72" pos:column="18"/></name> <operator pos:line="72" pos:column="19">!=<pos:position pos:line="72" pos:column="21"/></operator> <name pos:line="72" pos:column="22">REG_NOERROR<pos:position pos:line="72" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="72" pos:column="35">0<pos:position pos:line="72" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="38"/></condition><then pos:line="72" pos:column="38">
	<block type="pseudo"><goto pos:line="73" pos:column="9">goto <name pos:line="73" pos:column="14">free_return<pos:position pos:line="73" pos:column="25"/></name>;<pos:position pos:line="73" pos:column="26"/></goto></block></then></if>
      <if pos:line="74" pos:column="7">if <condition pos:line="74" pos:column="10">(<expr><name><name pos:line="74" pos:column="11">sifted_states<pos:position pos:line="74" pos:column="24"/></name><index pos:line="74" pos:column="24">[<expr><literal type="number" pos:line="74" pos:column="25">0<pos:position pos:line="74" pos:column="26"/></literal></expr>]<pos:position pos:line="74" pos:column="27"/></index></name> <operator pos:line="74" pos:column="28">==<pos:position pos:line="74" pos:column="30"/></operator> <name pos:line="74" pos:column="31">NULL<pos:position pos:line="74" pos:column="35"/></name></expr>)<pos:position pos:line="74" pos:column="36"/></condition><then pos:line="74" pos:column="36">
	<block pos:line="75" pos:column="9">{
	  <expr_stmt><expr><name pos:line="76" pos:column="11">ret<pos:position pos:line="76" pos:column="14"/></name> <operator pos:line="76" pos:column="15">=<pos:position pos:line="76" pos:column="16"/></operator> <name pos:line="76" pos:column="17">REG_NOMATCH<pos:position pos:line="76" pos:column="28"/></name></expr>;<pos:position pos:line="76" pos:column="29"/></expr_stmt>
	  <goto pos:line="77" pos:column="11">goto <name pos:line="77" pos:column="16">free_return<pos:position pos:line="77" pos:column="27"/></name>;<pos:position pos:line="77" pos:column="28"/></goto>
	}<pos:position pos:line="78" pos:column="10"/></block></then></if>
    }<pos:position pos:line="79" pos:column="6"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="80" pos:column="3">re_free<pos:position pos:line="80" pos:column="10"/></name> <argument_list pos:line="80" pos:column="11">(<argument><expr><name><name pos:line="80" pos:column="12">mctx<pos:position pos:line="80" pos:column="16"/></name><operator pos:line="80" pos:column="16">-&gt;<pos:position pos:line="80" pos:column="21"/></operator><name pos:line="80" pos:column="18">state_log<pos:position pos:line="80" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="81" pos:column="3">mctx<pos:position pos:line="81" pos:column="7"/></name><operator pos:line="81" pos:column="7">-&gt;<pos:position pos:line="81" pos:column="12"/></operator><name pos:line="81" pos:column="9">state_log<pos:position pos:line="81" pos:column="18"/></name></name> <operator pos:line="81" pos:column="19">=<pos:position pos:line="81" pos:column="20"/></operator> <name pos:line="81" pos:column="21">sifted_states<pos:position pos:line="81" pos:column="34"/></name></expr>;<pos:position pos:line="81" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name pos:line="82" pos:column="3">sifted_states<pos:position pos:line="82" pos:column="16"/></name> <operator pos:line="82" pos:column="17">=<pos:position pos:line="82" pos:column="18"/></operator> <name pos:line="82" pos:column="19">NULL<pos:position pos:line="82" pos:column="23"/></name></expr>;<pos:position pos:line="82" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="83" pos:column="3">mctx<pos:position pos:line="83" pos:column="7"/></name><operator pos:line="83" pos:column="7">-&gt;<pos:position pos:line="83" pos:column="12"/></operator><name pos:line="83" pos:column="9">last_node<pos:position pos:line="83" pos:column="18"/></name></name> <operator pos:line="83" pos:column="19">=<pos:position pos:line="83" pos:column="20"/></operator> <name pos:line="83" pos:column="21">halt_node<pos:position pos:line="83" pos:column="30"/></name></expr>;<pos:position pos:line="83" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="84" pos:column="3">mctx<pos:position pos:line="84" pos:column="7"/></name><operator pos:line="84" pos:column="7">-&gt;<pos:position pos:line="84" pos:column="12"/></operator><name pos:line="84" pos:column="9">match_last<pos:position pos:line="84" pos:column="19"/></name></name> <operator pos:line="84" pos:column="20">=<pos:position pos:line="84" pos:column="21"/></operator> <name pos:line="84" pos:column="22">match_last<pos:position pos:line="84" pos:column="32"/></name></expr>;<pos:position pos:line="84" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="85" pos:column="3">ret<pos:position pos:line="85" pos:column="6"/></name> <operator pos:line="85" pos:column="7">=<pos:position pos:line="85" pos:column="8"/></operator> <name pos:line="85" pos:column="9">REG_NOERROR<pos:position pos:line="85" pos:column="20"/></name></expr>;<pos:position pos:line="85" pos:column="21"/></expr_stmt>
 <label><name pos:line="86" pos:column="2">free_return<pos:position pos:line="86" pos:column="13"/></name>:<pos:position pos:line="86" pos:column="14"/></label>
  <expr_stmt><expr><call><name pos:line="87" pos:column="3">re_free<pos:position pos:line="87" pos:column="10"/></name> <argument_list pos:line="87" pos:column="11">(<argument><expr><name pos:line="87" pos:column="12">sifted_states<pos:position pos:line="87" pos:column="25"/></name></expr></argument>)<pos:position pos:line="87" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="27"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="88" pos:column="3">re_free<pos:position pos:line="88" pos:column="10"/></name> <argument_list pos:line="88" pos:column="11">(<argument><expr><name pos:line="88" pos:column="12">lim_states<pos:position pos:line="88" pos:column="22"/></name></expr></argument>)<pos:position pos:line="88" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="24"/></expr_stmt>
  <return pos:line="89" pos:column="3">return <expr><name pos:line="89" pos:column="10">ret<pos:position pos:line="89" pos:column="13"/></name></expr>;<pos:position pos:line="89" pos:column="14"/></return>
}<pos:position pos:line="90" pos:column="2"/></block></function></unit>
