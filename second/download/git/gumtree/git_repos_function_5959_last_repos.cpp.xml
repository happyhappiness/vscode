<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5959_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">pack_list<pos:position pos:line="1" pos:column="24"/></name></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type> <name pos:line="1" pos:column="27">pack_list_difference<pos:position pos:line="1" pos:column="47"/></name><parameter_list pos:line="1" pos:column="47">(<parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name><name pos:line="1" pos:column="54">struct<pos:position pos:line="1" pos:column="60"/></name> <name pos:line="1" pos:column="61">pack_list<pos:position pos:line="1" pos:column="70"/></name></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">A<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
					       <parameter><decl><type><specifier pos:line="2" pos:column="48">const<pos:position pos:line="2" pos:column="53"/></specifier> <name><name pos:line="2" pos:column="54">struct<pos:position pos:line="2" pos:column="60"/></name> <name pos:line="2" pos:column="61">pack_list<pos:position pos:line="2" pos:column="70"/></name></name> <modifier pos:line="2" pos:column="71">*<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="72">B<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="74"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">pack_list<pos:position pos:line="4" pos:column="25"/></name></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">ret<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name><name pos:line="5" pos:column="15">struct<pos:position pos:line="5" pos:column="21"/></name> <name pos:line="5" pos:column="22">pack_list<pos:position pos:line="5" pos:column="31"/></name></name> <modifier pos:line="5" pos:column="32">*<pos:position pos:line="5" pos:column="33"/></modifier></type><name pos:line="5" pos:column="33">pl<pos:position pos:line="5" pos:column="35"/></name></decl>;<pos:position pos:line="5" pos:column="36"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">A<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">==<pos:position pos:line="7" pos:column="17"/></operator> <name pos:line="7" pos:column="18">NULL<pos:position pos:line="7" pos:column="22"/></name></expr>)<pos:position pos:line="7" pos:column="23"/></condition><then pos:line="7" pos:column="23">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><name pos:line="8" pos:column="24">NULL<pos:position pos:line="8" pos:column="28"/></name></expr>;<pos:position pos:line="8" pos:column="29"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="10" pos:column="9">pl<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <name pos:line="10" pos:column="14">B<pos:position pos:line="10" pos:column="15"/></name></expr>;<pos:position pos:line="10" pos:column="16"/></expr_stmt>
	<while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><name pos:line="11" pos:column="16">pl<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">!=<pos:position pos:line="11" pos:column="21"/></operator> <name pos:line="11" pos:column="22">NULL<pos:position pos:line="11" pos:column="26"/></name></expr>)<pos:position pos:line="11" pos:column="27"/></condition> <block pos:line="11" pos:column="28">{
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name><name pos:line="12" pos:column="21">A<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">-&gt;<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="24">pack<pos:position pos:line="12" pos:column="28"/></name></name> <operator pos:line="12" pos:column="29">==<pos:position pos:line="12" pos:column="31"/></operator> <name><name pos:line="12" pos:column="32">pl<pos:position pos:line="12" pos:column="34"/></name><operator pos:line="12" pos:column="34">-&gt;<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="36">pack<pos:position pos:line="12" pos:column="40"/></name></name></expr>)<pos:position pos:line="12" pos:column="41"/></condition><then pos:line="12" pos:column="41">
			<block type="pseudo"><return pos:line="13" pos:column="25">return <expr><call><name pos:line="13" pos:column="32">pack_list_difference<pos:position pos:line="13" pos:column="52"/></name><argument_list pos:line="13" pos:column="52">(<argument><expr><name><name pos:line="13" pos:column="53">A<pos:position pos:line="13" pos:column="54"/></name><operator pos:line="13" pos:column="54">-&gt;<pos:position pos:line="13" pos:column="59"/></operator><name pos:line="13" pos:column="56">next<pos:position pos:line="13" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="62">B<pos:position pos:line="13" pos:column="63"/></name></expr></argument>)<pos:position pos:line="13" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="65"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="14" pos:column="17">pl<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">=<pos:position pos:line="14" pos:column="21"/></operator> <name><name pos:line="14" pos:column="22">pl<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">-&gt;<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="26">next<pos:position pos:line="14" pos:column="30"/></name></name></expr>;<pos:position pos:line="14" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></while>
	<expr_stmt><expr><name pos:line="16" pos:column="9">ret<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <call><name pos:line="16" pos:column="15">xmalloc<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><sizeof pos:line="16" pos:column="23">sizeof<argument_list pos:line="16" pos:column="29">(<argument><expr pos:line="16" pos:column="30">struct <name pos:line="16" pos:column="37">pack_list<pos:position pos:line="16" pos:column="46"/></name></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="17" pos:column="9">memcpy<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><name pos:line="17" pos:column="16">ret<pos:position pos:line="17" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="21">A<pos:position pos:line="17" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="24">sizeof<argument_list pos:line="17" pos:column="30">(<argument><expr pos:line="17" pos:column="31">struct <name pos:line="17" pos:column="38">pack_list<pos:position pos:line="17" pos:column="47"/></name></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="18" pos:column="9">ret<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">next<pos:position pos:line="18" pos:column="18"/></name></name> <operator pos:line="18" pos:column="19">=<pos:position pos:line="18" pos:column="20"/></operator> <call><name pos:line="18" pos:column="21">pack_list_difference<pos:position pos:line="18" pos:column="41"/></name><argument_list pos:line="18" pos:column="41">(<argument><expr><name><name pos:line="18" pos:column="42">A<pos:position pos:line="18" pos:column="43"/></name><operator pos:line="18" pos:column="43">-&gt;<pos:position pos:line="18" pos:column="48"/></operator><name pos:line="18" pos:column="45">next<pos:position pos:line="18" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="51">B<pos:position pos:line="18" pos:column="52"/></name></expr></argument>)<pos:position pos:line="18" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="54"/></expr_stmt>
	<return pos:line="19" pos:column="9">return <expr><name pos:line="19" pos:column="16">ret<pos:position pos:line="19" pos:column="19"/></name></expr>;<pos:position pos:line="19" pos:column="20"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
