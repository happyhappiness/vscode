<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2239_git-2.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">enum<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">object_type<pos:position pos:line="1" pos:column="24"/></name></name></type> <name pos:line="1" pos:column="25">packed_to_object_type<pos:position pos:line="1" pos:column="46"/></name><parameter_list pos:line="1" pos:column="46">(<parameter><decl><type><name><name pos:line="1" pos:column="47">struct<pos:position pos:line="1" pos:column="53"/></name> <name pos:line="1" pos:column="54">packed_git<pos:position pos:line="1" pos:column="64"/></name></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">p<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
					      <parameter><decl><type><name pos:line="2" pos:column="47">off_t<pos:position pos:line="2" pos:column="52"/></name></type> <name pos:line="2" pos:column="53">obj_offset<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>,
					      <parameter><decl><type><name><name pos:line="3" pos:column="47">enum<pos:position pos:line="3" pos:column="51"/></name> <name pos:line="3" pos:column="52">object_type<pos:position pos:line="3" pos:column="63"/></name></name></type> <name pos:line="3" pos:column="64">type<pos:position pos:line="3" pos:column="68"/></name></decl></parameter>,
					      <parameter><decl><type><name><name pos:line="4" pos:column="47">struct<pos:position pos:line="4" pos:column="53"/></name> <name pos:line="4" pos:column="54">pack_window<pos:position pos:line="4" pos:column="65"/></name></name> <modifier pos:line="4" pos:column="66">*<pos:position pos:line="4" pos:column="67"/></modifier><modifier pos:line="4" pos:column="67">*<pos:position pos:line="4" pos:column="68"/></modifier></type><name pos:line="4" pos:column="68">w_curs<pos:position pos:line="4" pos:column="74"/></name></decl></parameter>,
					      <parameter><decl><type><name pos:line="5" pos:column="47">off_t<pos:position pos:line="5" pos:column="52"/></name></type> <name pos:line="5" pos:column="53">curpos<pos:position pos:line="5" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="60"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">off_t<pos:position pos:line="7" pos:column="14"/></name></type> <name><name pos:line="7" pos:column="15">small_poi_stack<pos:position pos:line="7" pos:column="30"/></name><index pos:line="7" pos:column="30">[<expr><name pos:line="7" pos:column="31">POI_STACK_PREALLOC<pos:position pos:line="7" pos:column="49"/></name></expr>]<pos:position pos:line="7" pos:column="50"/></index></name></decl>;<pos:position pos:line="7" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">off_t<pos:position pos:line="8" pos:column="14"/></name> <modifier pos:line="8" pos:column="15">*<pos:position pos:line="8" pos:column="16"/></modifier></type><name pos:line="8" pos:column="16">poi_stack<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><name pos:line="8" pos:column="28">small_poi_stack<pos:position pos:line="8" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">poi_stack_nr<pos:position pos:line="9" pos:column="25"/></name> <init pos:line="9" pos:column="26">= <expr><literal type="number" pos:line="9" pos:column="28">0<pos:position pos:line="9" pos:column="29"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="31">poi_stack_alloc<pos:position pos:line="9" pos:column="46"/></name> <init pos:line="9" pos:column="47">= <expr><name pos:line="9" pos:column="49">POI_STACK_PREALLOC<pos:position pos:line="9" pos:column="67"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="68"/></decl_stmt>

	<while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><name pos:line="11" pos:column="16">type<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">==<pos:position pos:line="11" pos:column="23"/></operator> <name pos:line="11" pos:column="24">OBJ_OFS_DELTA<pos:position pos:line="11" pos:column="37"/></name> <operator pos:line="11" pos:column="38">||<pos:position pos:line="11" pos:column="40"/></operator> <name pos:line="11" pos:column="41">type<pos:position pos:line="11" pos:column="45"/></name> <operator pos:line="11" pos:column="46">==<pos:position pos:line="11" pos:column="48"/></operator> <name pos:line="11" pos:column="49">OBJ_REF_DELTA<pos:position pos:line="11" pos:column="62"/></name></expr>)<pos:position pos:line="11" pos:column="63"/></condition> <block pos:line="11" pos:column="64">{
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">off_t<pos:position pos:line="12" pos:column="22"/></name></type> <name pos:line="12" pos:column="23">base_offset<pos:position pos:line="12" pos:column="34"/></name></decl>;<pos:position pos:line="12" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">unsigned<pos:position pos:line="13" pos:column="25"/></name> <name pos:line="13" pos:column="26">long<pos:position pos:line="13" pos:column="30"/></name></type> <name pos:line="13" pos:column="31">size<pos:position pos:line="13" pos:column="35"/></name></decl>;<pos:position pos:line="13" pos:column="36"/></decl_stmt>
		<comment type="block" pos:line="14" pos:column="17">/* Push the object we're going to leave behind */</comment>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">poi_stack_nr<pos:position pos:line="15" pos:column="33"/></name> <operator pos:line="15" pos:column="34">&gt;=<pos:position pos:line="15" pos:column="39"/></operator> <name pos:line="15" pos:column="37">poi_stack_alloc<pos:position pos:line="15" pos:column="52"/></name> <operator pos:line="15" pos:column="53">&amp;&amp;<pos:position pos:line="15" pos:column="63"/></operator> <name pos:line="15" pos:column="56">poi_stack<pos:position pos:line="15" pos:column="65"/></name> <operator pos:line="15" pos:column="66">==<pos:position pos:line="15" pos:column="68"/></operator> <name pos:line="15" pos:column="69">small_poi_stack<pos:position pos:line="15" pos:column="84"/></name></expr>)<pos:position pos:line="15" pos:column="85"/></condition><then pos:line="15" pos:column="85"> <block pos:line="15" pos:column="86">{
			<expr_stmt><expr><name pos:line="16" pos:column="25">poi_stack_alloc<pos:position pos:line="16" pos:column="40"/></name> <operator pos:line="16" pos:column="41">=<pos:position pos:line="16" pos:column="42"/></operator> <call><name pos:line="16" pos:column="43">alloc_nr<pos:position pos:line="16" pos:column="51"/></name><argument_list pos:line="16" pos:column="51">(<argument><expr><name pos:line="16" pos:column="52">poi_stack_nr<pos:position pos:line="16" pos:column="64"/></name></expr></argument>)<pos:position pos:line="16" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="66"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="17" pos:column="25">ALLOC_ARRAY<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><name pos:line="17" pos:column="37">poi_stack<pos:position pos:line="17" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="48">poi_stack_alloc<pos:position pos:line="17" pos:column="63"/></name></expr></argument>)<pos:position pos:line="17" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">memcpy<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><name pos:line="18" pos:column="32">poi_stack<pos:position pos:line="18" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="43">small_poi_stack<pos:position pos:line="18" pos:column="58"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="60">sizeof<argument_list pos:line="18" pos:column="66">(<argument><expr><name pos:line="18" pos:column="67">off_t<pos:position pos:line="18" pos:column="72"/></name></expr></argument>)<pos:position pos:line="18" pos:column="73"/></argument_list></sizeof><operator pos:line="18" pos:column="73">*<pos:position pos:line="18" pos:column="74"/></operator><name pos:line="18" pos:column="74">poi_stack_nr<pos:position pos:line="18" pos:column="86"/></name></expr></argument>)<pos:position pos:line="18" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="88"/></expr_stmt>
		}<pos:position pos:line="19" pos:column="18"/></block></then> <else pos:line="19" pos:column="19">else <block pos:line="19" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="20" pos:column="25">ALLOC_GROW<pos:position pos:line="20" pos:column="35"/></name><argument_list pos:line="20" pos:column="35">(<argument><expr><name pos:line="20" pos:column="36">poi_stack<pos:position pos:line="20" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="47">poi_stack_nr<pos:position pos:line="20" pos:column="59"/></name><operator pos:line="20" pos:column="59">+<pos:position pos:line="20" pos:column="60"/></operator><literal type="number" pos:line="20" pos:column="60">1<pos:position pos:line="20" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="63">poi_stack_alloc<pos:position pos:line="20" pos:column="78"/></name></expr></argument>)<pos:position pos:line="20" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="80"/></expr_stmt>
		}<pos:position pos:line="21" pos:column="18"/></block></else></if>
		<expr_stmt><expr><name><name pos:line="22" pos:column="17">poi_stack<pos:position pos:line="22" pos:column="26"/></name><index pos:line="22" pos:column="26">[<expr><name pos:line="22" pos:column="27">poi_stack_nr<pos:position pos:line="22" pos:column="39"/></name><operator pos:line="22" pos:column="39">++<pos:position pos:line="22" pos:column="41"/></operator></expr>]<pos:position pos:line="22" pos:column="42"/></index></name> <operator pos:line="22" pos:column="43">=<pos:position pos:line="22" pos:column="44"/></operator> <name pos:line="22" pos:column="45">obj_offset<pos:position pos:line="22" pos:column="55"/></name></expr>;<pos:position pos:line="22" pos:column="56"/></expr_stmt>
		<comment type="block" pos:line="23" pos:column="17">/* If parsing the base offset fails, just unwind */</comment>
		<expr_stmt><expr><name pos:line="24" pos:column="17">base_offset<pos:position pos:line="24" pos:column="28"/></name> <operator pos:line="24" pos:column="29">=<pos:position pos:line="24" pos:column="30"/></operator> <call><name pos:line="24" pos:column="31">get_delta_base<pos:position pos:line="24" pos:column="45"/></name><argument_list pos:line="24" pos:column="45">(<argument><expr><name pos:line="24" pos:column="46">p<pos:position pos:line="24" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="49">w_curs<pos:position pos:line="24" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="57">&amp;<pos:position pos:line="24" pos:column="62"/></operator><name pos:line="24" pos:column="58">curpos<pos:position pos:line="24" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="66">type<pos:position pos:line="24" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="72">obj_offset<pos:position pos:line="24" pos:column="82"/></name></expr></argument>)<pos:position pos:line="24" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="84"/></expr_stmt>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><operator pos:line="25" pos:column="21">!<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="22">base_offset<pos:position pos:line="25" pos:column="33"/></name></expr>)<pos:position pos:line="25" pos:column="34"/></condition><then pos:line="25" pos:column="34">
			<block type="pseudo"><goto pos:line="26" pos:column="25">goto <name pos:line="26" pos:column="30">unwind<pos:position pos:line="26" pos:column="36"/></name>;<pos:position pos:line="26" pos:column="37"/></goto></block></then></if>
		<expr_stmt><expr><name pos:line="27" pos:column="17">curpos<pos:position pos:line="27" pos:column="23"/></name> <operator pos:line="27" pos:column="24">=<pos:position pos:line="27" pos:column="25"/></operator> <name pos:line="27" pos:column="26">obj_offset<pos:position pos:line="27" pos:column="36"/></name> <operator pos:line="27" pos:column="37">=<pos:position pos:line="27" pos:column="38"/></operator> <name pos:line="27" pos:column="39">base_offset<pos:position pos:line="27" pos:column="50"/></name></expr>;<pos:position pos:line="27" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><name pos:line="28" pos:column="17">type<pos:position pos:line="28" pos:column="21"/></name> <operator pos:line="28" pos:column="22">=<pos:position pos:line="28" pos:column="23"/></operator> <call><name pos:line="28" pos:column="24">unpack_object_header<pos:position pos:line="28" pos:column="44"/></name><argument_list pos:line="28" pos:column="44">(<argument><expr><name pos:line="28" pos:column="45">p<pos:position pos:line="28" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="48">w_curs<pos:position pos:line="28" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="56">&amp;<pos:position pos:line="28" pos:column="61"/></operator><name pos:line="28" pos:column="57">curpos<pos:position pos:line="28" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="65">&amp;<pos:position pos:line="28" pos:column="70"/></operator><name pos:line="28" pos:column="66">size<pos:position pos:line="28" pos:column="70"/></name></expr></argument>)<pos:position pos:line="28" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="72"/></expr_stmt>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">type<pos:position pos:line="29" pos:column="25"/></name> <operator pos:line="29" pos:column="26">&lt;=<pos:position pos:line="29" pos:column="31"/></operator> <name pos:line="29" pos:column="29">OBJ_NONE<pos:position pos:line="29" pos:column="37"/></name></expr>)<pos:position pos:line="29" pos:column="38"/></condition><then pos:line="29" pos:column="38"> <block pos:line="29" pos:column="39">{
			<comment type="block" pos:line="30" pos:column="25">/* If getting the base itself fails, we first
			 * retry the base, otherwise unwind */</comment>
			<expr_stmt><expr><name pos:line="32" pos:column="25">type<pos:position pos:line="32" pos:column="29"/></name> <operator pos:line="32" pos:column="30">=<pos:position pos:line="32" pos:column="31"/></operator> <call><name pos:line="32" pos:column="32">retry_bad_packed_offset<pos:position pos:line="32" pos:column="55"/></name><argument_list pos:line="32" pos:column="55">(<argument><expr><name pos:line="32" pos:column="56">p<pos:position pos:line="32" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="59">base_offset<pos:position pos:line="32" pos:column="70"/></name></expr></argument>)<pos:position pos:line="32" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="72"/></expr_stmt>
			<if pos:line="33" pos:column="25">if <condition pos:line="33" pos:column="28">(<expr><name pos:line="33" pos:column="29">type<pos:position pos:line="33" pos:column="33"/></name> <operator pos:line="33" pos:column="34">&gt;<pos:position pos:line="33" pos:column="38"/></operator> <name pos:line="33" pos:column="36">OBJ_NONE<pos:position pos:line="33" pos:column="44"/></name></expr>)<pos:position pos:line="33" pos:column="45"/></condition><then pos:line="33" pos:column="45">
				<block type="pseudo"><goto pos:line="34" pos:column="33">goto <name pos:line="34" pos:column="38">out<pos:position pos:line="34" pos:column="41"/></name>;<pos:position pos:line="34" pos:column="42"/></goto></block></then></if>
			<goto pos:line="35" pos:column="25">goto <name pos:line="35" pos:column="30">unwind<pos:position pos:line="35" pos:column="36"/></name>;<pos:position pos:line="35" pos:column="37"/></goto>
		}<pos:position pos:line="36" pos:column="18"/></block></then></if>
	}<pos:position pos:line="37" pos:column="10"/></block></while>

	<switch pos:line="39" pos:column="9">switch <condition pos:line="39" pos:column="16">(<expr><name pos:line="39" pos:column="17">type<pos:position pos:line="39" pos:column="21"/></name></expr>)<pos:position pos:line="39" pos:column="22"/></condition> <block pos:line="39" pos:column="23">{
	<case pos:line="40" pos:column="9">case <expr><name pos:line="40" pos:column="14">OBJ_BAD<pos:position pos:line="40" pos:column="21"/></name></expr>:<pos:position pos:line="40" pos:column="22"/></case>
	<case pos:line="41" pos:column="9">case <expr><name pos:line="41" pos:column="14">OBJ_COMMIT<pos:position pos:line="41" pos:column="24"/></name></expr>:<pos:position pos:line="41" pos:column="25"/></case>
	<case pos:line="42" pos:column="9">case <expr><name pos:line="42" pos:column="14">OBJ_TREE<pos:position pos:line="42" pos:column="22"/></name></expr>:<pos:position pos:line="42" pos:column="23"/></case>
	<case pos:line="43" pos:column="9">case <expr><name pos:line="43" pos:column="14">OBJ_BLOB<pos:position pos:line="43" pos:column="22"/></name></expr>:<pos:position pos:line="43" pos:column="23"/></case>
	<case pos:line="44" pos:column="9">case <expr><name pos:line="44" pos:column="14">OBJ_TAG<pos:position pos:line="44" pos:column="21"/></name></expr>:<pos:position pos:line="44" pos:column="22"/></case>
		<break pos:line="45" pos:column="17">break;<pos:position pos:line="45" pos:column="23"/></break>
	<default pos:line="46" pos:column="9">default:<pos:position pos:line="46" pos:column="17"/></default>
		<expr_stmt><expr><call><name pos:line="47" pos:column="17">error<pos:position pos:line="47" pos:column="22"/></name><argument_list pos:line="47" pos:column="22">(<argument><expr><literal type="string" pos:line="47" pos:column="23">"unknown object type %i at offset %"<pos:position pos:line="47" pos:column="59"/></literal><name pos:line="47" pos:column="59">PRIuMAX<pos:position pos:line="47" pos:column="66"/></name><literal type="string" pos:line="47" pos:column="66">" in %s"<pos:position pos:line="47" pos:column="74"/></literal></expr></argument>,
		      <argument><expr><name pos:line="48" pos:column="23">type<pos:position pos:line="48" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="29">(<pos:position pos:line="48" pos:column="30"/></operator><name pos:line="48" pos:column="30">uintmax_t<pos:position pos:line="48" pos:column="39"/></name><operator pos:line="48" pos:column="39">)<pos:position pos:line="48" pos:column="40"/></operator><name pos:line="48" pos:column="40">obj_offset<pos:position pos:line="48" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="52">p<pos:position pos:line="48" pos:column="53"/></name><operator pos:line="48" pos:column="53">-&gt;<pos:position pos:line="48" pos:column="58"/></operator><name pos:line="48" pos:column="55">pack_name<pos:position pos:line="48" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="66"/></expr_stmt>
		<expr_stmt><expr><name pos:line="49" pos:column="17">type<pos:position pos:line="49" pos:column="21"/></name> <operator pos:line="49" pos:column="22">=<pos:position pos:line="49" pos:column="23"/></operator> <name pos:line="49" pos:column="24">OBJ_BAD<pos:position pos:line="49" pos:column="31"/></name></expr>;<pos:position pos:line="49" pos:column="32"/></expr_stmt>
	}<pos:position pos:line="50" pos:column="10"/></block></switch>

<label><name pos:line="52" pos:column="1">out<pos:position pos:line="52" pos:column="4"/></name>:<pos:position pos:line="52" pos:column="5"/></label>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name pos:line="53" pos:column="13">poi_stack<pos:position pos:line="53" pos:column="22"/></name> <operator pos:line="53" pos:column="23">!=<pos:position pos:line="53" pos:column="25"/></operator> <name pos:line="53" pos:column="26">small_poi_stack<pos:position pos:line="53" pos:column="41"/></name></expr>)<pos:position pos:line="53" pos:column="42"/></condition><then pos:line="53" pos:column="42">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="17">free<pos:position pos:line="54" pos:column="21"/></name><argument_list pos:line="54" pos:column="21">(<argument><expr><name pos:line="54" pos:column="22">poi_stack<pos:position pos:line="54" pos:column="31"/></name></expr></argument>)<pos:position pos:line="54" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="33"/></expr_stmt></block></then></if>
	<return pos:line="55" pos:column="9">return <expr><name pos:line="55" pos:column="16">type<pos:position pos:line="55" pos:column="20"/></name></expr>;<pos:position pos:line="55" pos:column="21"/></return>

<label><name pos:line="57" pos:column="1">unwind<pos:position pos:line="57" pos:column="7"/></name>:<pos:position pos:line="57" pos:column="8"/></label>
	<while pos:line="58" pos:column="9">while <condition pos:line="58" pos:column="15">(<expr><name pos:line="58" pos:column="16">poi_stack_nr<pos:position pos:line="58" pos:column="28"/></name></expr>)<pos:position pos:line="58" pos:column="29"/></condition> <block pos:line="58" pos:column="30">{
		<expr_stmt><expr><name pos:line="59" pos:column="17">obj_offset<pos:position pos:line="59" pos:column="27"/></name> <operator pos:line="59" pos:column="28">=<pos:position pos:line="59" pos:column="29"/></operator> <name><name pos:line="59" pos:column="30">poi_stack<pos:position pos:line="59" pos:column="39"/></name><index pos:line="59" pos:column="39">[<expr><operator pos:line="59" pos:column="40">--<pos:position pos:line="59" pos:column="42"/></operator><name pos:line="59" pos:column="42">poi_stack_nr<pos:position pos:line="59" pos:column="54"/></name></expr>]<pos:position pos:line="59" pos:column="55"/></index></name></expr>;<pos:position pos:line="59" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><name pos:line="60" pos:column="17">type<pos:position pos:line="60" pos:column="21"/></name> <operator pos:line="60" pos:column="22">=<pos:position pos:line="60" pos:column="23"/></operator> <call><name pos:line="60" pos:column="24">retry_bad_packed_offset<pos:position pos:line="60" pos:column="47"/></name><argument_list pos:line="60" pos:column="47">(<argument><expr><name pos:line="60" pos:column="48">p<pos:position pos:line="60" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="51">obj_offset<pos:position pos:line="60" pos:column="61"/></name></expr></argument>)<pos:position pos:line="60" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="63"/></expr_stmt>
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><name pos:line="61" pos:column="21">type<pos:position pos:line="61" pos:column="25"/></name> <operator pos:line="61" pos:column="26">&gt;<pos:position pos:line="61" pos:column="30"/></operator> <name pos:line="61" pos:column="28">OBJ_NONE<pos:position pos:line="61" pos:column="36"/></name></expr>)<pos:position pos:line="61" pos:column="37"/></condition><then pos:line="61" pos:column="37">
			<block type="pseudo"><goto pos:line="62" pos:column="25">goto <name pos:line="62" pos:column="30">out<pos:position pos:line="62" pos:column="33"/></name>;<pos:position pos:line="62" pos:column="34"/></goto></block></then></if>
	}<pos:position pos:line="63" pos:column="10"/></block></while>
	<expr_stmt><expr><name pos:line="64" pos:column="9">type<pos:position pos:line="64" pos:column="13"/></name> <operator pos:line="64" pos:column="14">=<pos:position pos:line="64" pos:column="15"/></operator> <name pos:line="64" pos:column="16">OBJ_BAD<pos:position pos:line="64" pos:column="23"/></name></expr>;<pos:position pos:line="64" pos:column="24"/></expr_stmt>
	<goto pos:line="65" pos:column="9">goto <name pos:line="65" pos:column="14">out<pos:position pos:line="65" pos:column="17"/></name>;<pos:position pos:line="65" pos:column="18"/></goto>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
