<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2257_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">clear_delta_base_cache<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">void<pos:position pos:line="1" pos:column="33"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">list_head<pos:position pos:line="3" pos:column="25"/></name></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">lru<pos:position pos:line="3" pos:column="30"/></name></decl>, <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="33">tmp<pos:position pos:line="3" pos:column="36"/></name></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
	<macro><name pos:line="4" pos:column="9">list_for_each_safe<pos:position pos:line="4" pos:column="27"/></name><argument_list pos:line="4" pos:column="27">(<argument pos:line="4" pos:column="28">lru<pos:position pos:line="4" pos:column="31"/></argument>, <argument pos:line="4" pos:column="33">tmp<pos:position pos:line="4" pos:column="36"/></argument>, <argument pos:line="4" pos:column="38">&amp;delta_base_cache_lru<pos:position pos:line="4" pos:column="59"/></argument>)<pos:position pos:line="4" pos:column="60"/></argument_list></macro> <block pos:line="4" pos:column="61">{
		<decl_stmt><decl><type><name><name pos:line="5" pos:column="17">struct<pos:position pos:line="5" pos:column="23"/></name> <name pos:line="5" pos:column="24">delta_base_cache_entry<pos:position pos:line="5" pos:column="46"/></name></name> <modifier pos:line="5" pos:column="47">*<pos:position pos:line="5" pos:column="48"/></modifier></type><name pos:line="5" pos:column="48">entry<pos:position pos:line="5" pos:column="53"/></name> <init pos:line="5" pos:column="54">=
			<expr><call><name pos:line="6" pos:column="25">list_entry<pos:position pos:line="6" pos:column="35"/></name><argument_list pos:line="6" pos:column="35">(<argument><expr><name pos:line="6" pos:column="36">lru<pos:position pos:line="6" pos:column="39"/></name></expr></argument>, <argument><expr pos:line="6" pos:column="41">struct <name pos:line="6" pos:column="48">delta_base_cache_entry<pos:position pos:line="6" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="72">lru<pos:position pos:line="6" pos:column="75"/></name></expr></argument>)<pos:position pos:line="6" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="77"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">release_delta_base_cache<pos:position pos:line="7" pos:column="41"/></name><argument_list pos:line="7" pos:column="41">(<argument><expr><name pos:line="7" pos:column="42">entry<pos:position pos:line="7" pos:column="47"/></name></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="8" pos:column="10"/></block>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
