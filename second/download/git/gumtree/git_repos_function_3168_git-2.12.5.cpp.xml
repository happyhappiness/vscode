<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3168_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">warn_if_dangling_symref<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">refname<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="57">const<pos:position pos:line="1" pos:column="62"/></specifier> <name><name pos:line="1" pos:column="63">struct<pos:position pos:line="1" pos:column="69"/></name> <name pos:line="1" pos:column="70">object_id<pos:position pos:line="1" pos:column="79"/></name></name> <modifier pos:line="1" pos:column="80">*<pos:position pos:line="1" pos:column="81"/></modifier></type><name pos:line="1" pos:column="81">oid<pos:position pos:line="1" pos:column="84"/></name></decl></parameter>,
				   <parameter><decl><type><name pos:line="2" pos:column="36">int<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">flags<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="47">void<pos:position pos:line="2" pos:column="51"/></name> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="53">cb_data<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">warn_if_dangling_data<pos:position pos:line="4" pos:column="37"/></name></name> <modifier pos:line="4" pos:column="38">*<pos:position pos:line="4" pos:column="39"/></modifier></type><name pos:line="4" pos:column="39">d<pos:position pos:line="4" pos:column="40"/></name> <init pos:line="4" pos:column="41">= <expr><name pos:line="4" pos:column="43">cb_data<pos:position pos:line="4" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">resolves_to<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">object_id<pos:position pos:line="6" pos:column="25"/></name></name></type> <name pos:line="6" pos:column="26">junk<pos:position pos:line="6" pos:column="30"/></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><operator pos:line="8" pos:column="14">(<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="15">flags<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">&amp;<pos:position pos:line="8" pos:column="26"/></operator> <name pos:line="8" pos:column="23">REF_ISSYMREF<pos:position pos:line="8" pos:column="35"/></name><operator pos:line="8" pos:column="35">)<pos:position pos:line="8" pos:column="36"/></operator></expr>)<pos:position pos:line="8" pos:column="37"/></condition><then pos:line="8" pos:column="37">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr>;<pos:position pos:line="9" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="11" pos:column="9">resolves_to<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">=<pos:position pos:line="11" pos:column="22"/></operator> <call><name pos:line="11" pos:column="23">resolve_ref_unsafe<pos:position pos:line="11" pos:column="41"/></name><argument_list pos:line="11" pos:column="41">(<argument><expr><name pos:line="11" pos:column="42">refname<pos:position pos:line="11" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="51">0<pos:position pos:line="11" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="54">junk<pos:position pos:line="11" pos:column="58"/></name><operator pos:line="11" pos:column="58">.<pos:position pos:line="11" pos:column="59"/></operator><name pos:line="11" pos:column="59">hash<pos:position pos:line="11" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="65">NULL<pos:position pos:line="11" pos:column="69"/></name></expr></argument>)<pos:position pos:line="11" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="71"/></expr_stmt>
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">resolves_to<pos:position pos:line="12" pos:column="25"/></name>
	    <operator pos:line="13" pos:column="13">||<pos:position pos:line="13" pos:column="15"/></operator> <operator pos:line="13" pos:column="16">(<pos:position pos:line="13" pos:column="17"/></operator><ternary><condition><expr><name><name pos:line="13" pos:column="17">d<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">-&gt;<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="20">refname<pos:position pos:line="13" pos:column="27"/></name></name></expr>
		?<pos:position pos:line="14" pos:column="18"/></condition><then pos:line="14" pos:column="18"> <expr><call><name pos:line="14" pos:column="19">strcmp<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><name pos:line="14" pos:column="26">resolves_to<pos:position pos:line="14" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="39">d<pos:position pos:line="14" pos:column="40"/></name><operator pos:line="14" pos:column="40">-&gt;<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="42">refname<pos:position pos:line="14" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></call></expr>
		<pos:position pos:line="15" pos:column="3"/></then><else pos:line="15" pos:column="17">: <expr><operator pos:line="15" pos:column="19">!<pos:position pos:line="15" pos:column="20"/></operator><call><name pos:line="15" pos:column="20">string_list_has_string<pos:position pos:line="15" pos:column="42"/></name><argument_list pos:line="15" pos:column="42">(<argument><expr><name><name pos:line="15" pos:column="43">d<pos:position pos:line="15" pos:column="44"/></name><operator pos:line="15" pos:column="44">-&gt;<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="46">refnames<pos:position pos:line="15" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="56">resolves_to<pos:position pos:line="15" pos:column="67"/></name></expr></argument>)<pos:position pos:line="15" pos:column="68"/></argument_list></call></expr></else></ternary><operator pos:line="15" pos:column="68">)<pos:position pos:line="15" pos:column="69"/></operator></expr>)<pos:position pos:line="15" pos:column="70"/></condition><then pos:line="15" pos:column="70"> <block pos:line="15" pos:column="71">{
		<return pos:line="16" pos:column="17">return <expr><literal type="number" pos:line="16" pos:column="24">0<pos:position pos:line="16" pos:column="25"/></literal></expr>;<pos:position pos:line="16" pos:column="26"/></return>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="19" pos:column="9">fprintf<pos:position pos:line="19" pos:column="16"/></name><argument_list pos:line="19" pos:column="16">(<argument><expr><name><name pos:line="19" pos:column="17">d<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">-&gt;<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="20">fp<pos:position pos:line="19" pos:column="22"/></name></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="24">d<pos:position pos:line="19" pos:column="25"/></name><operator pos:line="19" pos:column="25">-&gt;<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="27">msg_fmt<pos:position pos:line="19" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="36">refname<pos:position pos:line="19" pos:column="43"/></name></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">fputc<pos:position pos:line="20" pos:column="14"/></name><argument_list pos:line="20" pos:column="14">(<argument><expr><literal type="char" pos:line="20" pos:column="15">'\n'<pos:position pos:line="20" pos:column="19"/></literal></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="21">d<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">-&gt;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="24">fp<pos:position pos:line="20" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>
	<return pos:line="21" pos:column="9">return <expr><literal type="number" pos:line="21" pos:column="16">0<pos:position pos:line="21" pos:column="17"/></literal></expr>;<pos:position pos:line="21" pos:column="18"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
