<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6709_git-2.13.1.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">NOINLINE<pos:position pos:line="1" pos:column="16"/></name> <name pos:line="1" pos:column="17">mstate<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">FindMSpace<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">nedpool<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">p<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">threadcache<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">tc<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="64">int<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">lastUsed<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="79">size_t<pos:position pos:line="1" pos:column="85"/></name></type> <name pos:line="1" pos:column="86">size<pos:position pos:line="1" pos:column="90"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="91"/></parameter_list> <name pos:line="1" pos:column="92">THROWSPEC<pos:position pos:line="1" pos:column="101"/></name>
<block pos:line="2" pos:column="1">{	<comment type="block" pos:line="2" pos:column="9">/* Gets called when thread's last used mspace is in use. The strategy
	is to run through the list of all available mspaces looking for an
	unlocked one and if we fail, we create a new one so long as we don't
	exceed p-&gt;threads */</comment>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">n<pos:position pos:line="6" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="16">end<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
	<for pos:line="7" pos:column="9">for<control pos:line="7" pos:column="12">(<init><expr><name pos:line="7" pos:column="13">n<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">=<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="15">end<pos:position pos:line="7" pos:column="18"/></name><operator pos:line="7" pos:column="18">=<pos:position pos:line="7" pos:column="19"/></operator><operator pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></operator><name pos:line="7" pos:column="20">lastUsed<pos:position pos:line="7" pos:column="28"/></name><operator pos:line="7" pos:column="28">+<pos:position pos:line="7" pos:column="29"/></operator><literal type="number" pos:line="7" pos:column="29">1<pos:position pos:line="7" pos:column="30"/></literal></expr>;<pos:position pos:line="7" pos:column="31"/></init> <condition><expr><name><name pos:line="7" pos:column="32">p<pos:position pos:line="7" pos:column="33"/></name><operator pos:line="7" pos:column="33">-&gt;<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="35">m<pos:position pos:line="7" pos:column="36"/></name><index pos:line="7" pos:column="36">[<expr><name pos:line="7" pos:column="37">n<pos:position pos:line="7" pos:column="38"/></name></expr>]<pos:position pos:line="7" pos:column="39"/></index></name></expr>;<pos:position pos:line="7" pos:column="40"/></condition> <incr><expr><name pos:line="7" pos:column="41">end<pos:position pos:line="7" pos:column="44"/></name><operator pos:line="7" pos:column="44">=<pos:position pos:line="7" pos:column="45"/></operator><operator pos:line="7" pos:column="45">++<pos:position pos:line="7" pos:column="47"/></operator><name pos:line="7" pos:column="47">n<pos:position pos:line="7" pos:column="48"/></name></expr></incr>)<pos:position pos:line="7" pos:column="49"/></control>
	<block pos:line="8" pos:column="9">{
		<if pos:line="9" pos:column="17">if<condition pos:line="9" pos:column="19">(<expr><call><name pos:line="9" pos:column="20">TRY_LOCK<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><operator pos:line="9" pos:column="29">&amp;<pos:position pos:line="9" pos:column="34"/></operator><name><name pos:line="9" pos:column="30">p<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">-&gt;<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="33">m<pos:position pos:line="9" pos:column="34"/></name><index pos:line="9" pos:column="34">[<expr><name pos:line="9" pos:column="35">n<pos:position pos:line="9" pos:column="36"/></name></expr>]<pos:position pos:line="9" pos:column="37"/></index></name><operator pos:line="9" pos:column="37">-&gt;<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="39">mutex<pos:position pos:line="9" pos:column="44"/></name></expr></argument>)<pos:position pos:line="9" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="46"/></condition><then pos:line="9" pos:column="46"> <block type="pseudo"><goto pos:line="9" pos:column="47">goto <name pos:line="9" pos:column="52">found<pos:position pos:line="9" pos:column="57"/></name>;<pos:position pos:line="9" pos:column="58"/></goto></block></then></if>
	}<pos:position pos:line="10" pos:column="10"/></block></for>
	<for pos:line="11" pos:column="9">for<control pos:line="11" pos:column="12">(<init><expr><name pos:line="11" pos:column="13">n<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator><literal type="number" pos:line="11" pos:column="15">0<pos:position pos:line="11" pos:column="16"/></literal></expr>;<pos:position pos:line="11" pos:column="17"/></init> <condition><expr><name pos:line="11" pos:column="18">n<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">&lt;<pos:position pos:line="11" pos:column="23"/></operator><operator pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="21">lastUsed<pos:position pos:line="11" pos:column="29"/></name> <operator pos:line="11" pos:column="30">&amp;&amp;<pos:position pos:line="11" pos:column="40"/></operator> <name><name pos:line="11" pos:column="33">p<pos:position pos:line="11" pos:column="34"/></name><operator pos:line="11" pos:column="34">-&gt;<pos:position pos:line="11" pos:column="39"/></operator><name pos:line="11" pos:column="36">m<pos:position pos:line="11" pos:column="37"/></name><index pos:line="11" pos:column="37">[<expr><name pos:line="11" pos:column="38">n<pos:position pos:line="11" pos:column="39"/></name></expr>]<pos:position pos:line="11" pos:column="40"/></index></name></expr>;<pos:position pos:line="11" pos:column="41"/></condition> <incr><expr><name pos:line="11" pos:column="42">n<pos:position pos:line="11" pos:column="43"/></name><operator pos:line="11" pos:column="43">++<pos:position pos:line="11" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="11" pos:column="46"/></control>
	<block pos:line="12" pos:column="9">{
		<if pos:line="13" pos:column="17">if<condition pos:line="13" pos:column="19">(<expr><call><name pos:line="13" pos:column="20">TRY_LOCK<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><operator pos:line="13" pos:column="29">&amp;<pos:position pos:line="13" pos:column="34"/></operator><name><name pos:line="13" pos:column="30">p<pos:position pos:line="13" pos:column="31"/></name><operator pos:line="13" pos:column="31">-&gt;<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="33">m<pos:position pos:line="13" pos:column="34"/></name><index pos:line="13" pos:column="34">[<expr><name pos:line="13" pos:column="35">n<pos:position pos:line="13" pos:column="36"/></name></expr>]<pos:position pos:line="13" pos:column="37"/></index></name><operator pos:line="13" pos:column="37">-&gt;<pos:position pos:line="13" pos:column="42"/></operator><name pos:line="13" pos:column="39">mutex<pos:position pos:line="13" pos:column="44"/></name></expr></argument>)<pos:position pos:line="13" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="46"/></condition><then pos:line="13" pos:column="46"> <block type="pseudo"><goto pos:line="13" pos:column="47">goto <name pos:line="13" pos:column="52">found<pos:position pos:line="13" pos:column="57"/></name>;<pos:position pos:line="13" pos:column="58"/></goto></block></then></if>
	}<pos:position pos:line="14" pos:column="10"/></block></for>
	<if pos:line="15" pos:column="9">if<condition pos:line="15" pos:column="11">(<expr><name pos:line="15" pos:column="12">end<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">&lt;<pos:position pos:line="15" pos:column="19"/></operator><name><name pos:line="15" pos:column="16">p<pos:position pos:line="15" pos:column="17"/></name><operator pos:line="15" pos:column="17">-&gt;<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="19">threads<pos:position pos:line="15" pos:column="26"/></name></name></expr>)<pos:position pos:line="15" pos:column="27"/></condition><then pos:line="15" pos:column="27">
	<block pos:line="16" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="17" pos:column="17">mstate<pos:position pos:line="17" pos:column="23"/></name></type> <name pos:line="17" pos:column="24">temp<pos:position pos:line="17" pos:column="28"/></name></decl>;<pos:position pos:line="17" pos:column="29"/></decl_stmt>
		<if pos:line="18" pos:column="17">if<condition pos:line="18" pos:column="19">(<expr><operator pos:line="18" pos:column="20">!<pos:position pos:line="18" pos:column="21"/></operator><operator pos:line="18" pos:column="21">(<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">temp<pos:position pos:line="18" pos:column="26"/></name><operator pos:line="18" pos:column="26">=<pos:position pos:line="18" pos:column="27"/></operator><operator pos:line="18" pos:column="27">(<pos:position pos:line="18" pos:column="28"/></operator><name pos:line="18" pos:column="28">mstate<pos:position pos:line="18" pos:column="34"/></name><operator pos:line="18" pos:column="34">)<pos:position pos:line="18" pos:column="35"/></operator> <call><name pos:line="18" pos:column="36">create_mspace<pos:position pos:line="18" pos:column="49"/></name><argument_list pos:line="18" pos:column="49">(<argument><expr><name pos:line="18" pos:column="50">size<pos:position pos:line="18" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="56">1<pos:position pos:line="18" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="58"/></argument_list></call><operator pos:line="18" pos:column="58">)<pos:position pos:line="18" pos:column="59"/></operator></expr>)<pos:position pos:line="18" pos:column="60"/></condition><then pos:line="18" pos:column="60">
			<block type="pseudo"><goto pos:line="19" pos:column="25">goto <name pos:line="19" pos:column="30">badexit<pos:position pos:line="19" pos:column="37"/></name>;<pos:position pos:line="19" pos:column="38"/></goto></block></then></if>
		<comment type="block" pos:line="20" pos:column="17">/* Now we're ready to modify the lists, we lock */</comment>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">ACQUIRE_LOCK<pos:position pos:line="21" pos:column="29"/></name><argument_list pos:line="21" pos:column="29">(<argument><expr><operator pos:line="21" pos:column="30">&amp;<pos:position pos:line="21" pos:column="35"/></operator><name><name pos:line="21" pos:column="31">p<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">-&gt;<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="34">mutex<pos:position pos:line="21" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="41"/></expr_stmt>
		<while pos:line="22" pos:column="17">while<condition pos:line="22" pos:column="22">(<expr><name><name pos:line="22" pos:column="23">p<pos:position pos:line="22" pos:column="24"/></name><operator pos:line="22" pos:column="24">-&gt;<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="26">m<pos:position pos:line="22" pos:column="27"/></name><index pos:line="22" pos:column="27">[<expr><name pos:line="22" pos:column="28">end<pos:position pos:line="22" pos:column="31"/></name></expr>]<pos:position pos:line="22" pos:column="32"/></index></name> <operator pos:line="22" pos:column="33">&amp;&amp;<pos:position pos:line="22" pos:column="43"/></operator> <name pos:line="22" pos:column="36">end<pos:position pos:line="22" pos:column="39"/></name><operator pos:line="22" pos:column="39">&lt;<pos:position pos:line="22" pos:column="43"/></operator><name><name pos:line="22" pos:column="40">p<pos:position pos:line="22" pos:column="41"/></name><operator pos:line="22" pos:column="41">-&gt;<pos:position pos:line="22" pos:column="46"/></operator><name pos:line="22" pos:column="43">threads<pos:position pos:line="22" pos:column="50"/></name></name></expr>)<pos:position pos:line="22" pos:column="51"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="25">end<pos:position pos:line="23" pos:column="28"/></name><operator pos:line="23" pos:column="28">++<pos:position pos:line="23" pos:column="30"/></operator></expr>;<pos:position pos:line="23" pos:column="31"/></expr_stmt></block></while>
		<if pos:line="24" pos:column="17">if<condition pos:line="24" pos:column="19">(<expr><name pos:line="24" pos:column="20">end<pos:position pos:line="24" pos:column="23"/></name><operator pos:line="24" pos:column="23">&gt;=<pos:position pos:line="24" pos:column="28"/></operator><name><name pos:line="24" pos:column="25">p<pos:position pos:line="24" pos:column="26"/></name><operator pos:line="24" pos:column="26">-&gt;<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="28">threads<pos:position pos:line="24" pos:column="35"/></name></name></expr>)<pos:position pos:line="24" pos:column="36"/></condition><then pos:line="24" pos:column="36">
		<block pos:line="25" pos:column="17">{	<comment type="block" pos:line="25" pos:column="25">/* Drat, must destroy it now */</comment>
			<expr_stmt><expr><call><name pos:line="26" pos:column="25">RELEASE_LOCK<pos:position pos:line="26" pos:column="37"/></name><argument_list pos:line="26" pos:column="37">(<argument><expr><operator pos:line="26" pos:column="38">&amp;<pos:position pos:line="26" pos:column="43"/></operator><name><name pos:line="26" pos:column="39">p<pos:position pos:line="26" pos:column="40"/></name><operator pos:line="26" pos:column="40">-&gt;<pos:position pos:line="26" pos:column="45"/></operator><name pos:line="26" pos:column="42">mutex<pos:position pos:line="26" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="49"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">destroy_mspace<pos:position pos:line="27" pos:column="39"/></name><argument_list pos:line="27" pos:column="39">(<argument><expr><operator pos:line="27" pos:column="40">(<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="41">mspace<pos:position pos:line="27" pos:column="47"/></name><operator pos:line="27" pos:column="47">)<pos:position pos:line="27" pos:column="48"/></operator> <name pos:line="27" pos:column="49">temp<pos:position pos:line="27" pos:column="53"/></name></expr></argument>)<pos:position pos:line="27" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="55"/></expr_stmt>
			<goto pos:line="28" pos:column="25">goto <name pos:line="28" pos:column="30">badexit<pos:position pos:line="28" pos:column="37"/></name>;<pos:position pos:line="28" pos:column="38"/></goto>
		}<pos:position pos:line="29" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="30" pos:column="17">/* We really want to make sure this goes into memory now but we
		have to be careful of breaking aliasing rules, so write it twice */</comment>
		<block pos:line="32" pos:column="17">{
			<decl_stmt><decl><type><specifier pos:line="33" pos:column="25">volatile<pos:position pos:line="33" pos:column="33"/></specifier> <name><name pos:line="33" pos:column="34">struct<pos:position pos:line="33" pos:column="40"/></name> <name pos:line="33" pos:column="41">malloc_state<pos:position pos:line="33" pos:column="53"/></name></name> <modifier pos:line="33" pos:column="54">*<pos:position pos:line="33" pos:column="55"/></modifier><modifier pos:line="33" pos:column="55">*<pos:position pos:line="33" pos:column="56"/></modifier></type><name pos:line="33" pos:column="56">_m<pos:position pos:line="33" pos:column="58"/></name><init pos:line="33" pos:column="58">=<expr><operator pos:line="33" pos:column="59">(<pos:position pos:line="33" pos:column="60"/></operator><specifier pos:line="33" pos:column="60">volatile<pos:position pos:line="33" pos:column="68"/></specifier> struct <name pos:line="33" pos:column="76">malloc_state<pos:position pos:line="33" pos:column="88"/></name> <operator pos:line="33" pos:column="89">*<pos:position pos:line="33" pos:column="90"/></operator><operator pos:line="33" pos:column="90">*<pos:position pos:line="33" pos:column="91"/></operator><operator pos:line="33" pos:column="91">)<pos:position pos:line="33" pos:column="92"/></operator> <operator pos:line="33" pos:column="93">&amp;<pos:position pos:line="33" pos:column="98"/></operator><name><name pos:line="33" pos:column="94">p<pos:position pos:line="33" pos:column="95"/></name><operator pos:line="33" pos:column="95">-&gt;<pos:position pos:line="33" pos:column="100"/></operator><name pos:line="33" pos:column="97">m<pos:position pos:line="33" pos:column="98"/></name><index pos:line="33" pos:column="98">[<expr><name pos:line="33" pos:column="99">end<pos:position pos:line="33" pos:column="102"/></name></expr>]<pos:position pos:line="33" pos:column="103"/></index></name></expr></init></decl>;<pos:position pos:line="33" pos:column="104"/></decl_stmt>
			<expr_stmt><expr><operator pos:line="34" pos:column="25">*<pos:position pos:line="34" pos:column="26"/></operator><name pos:line="34" pos:column="26">_m<pos:position pos:line="34" pos:column="28"/></name><operator pos:line="34" pos:column="28">=<pos:position pos:line="34" pos:column="29"/></operator><operator pos:line="34" pos:column="29">(<pos:position pos:line="34" pos:column="30"/></operator><name><name pos:line="34" pos:column="30">p<pos:position pos:line="34" pos:column="31"/></name><operator pos:line="34" pos:column="31">-&gt;<pos:position pos:line="34" pos:column="36"/></operator><name pos:line="34" pos:column="33">m<pos:position pos:line="34" pos:column="34"/></name><index pos:line="34" pos:column="34">[<expr><name pos:line="34" pos:column="35">end<pos:position pos:line="34" pos:column="38"/></name></expr>]<pos:position pos:line="34" pos:column="39"/></index></name><operator pos:line="34" pos:column="39">=<pos:position pos:line="34" pos:column="40"/></operator><name pos:line="34" pos:column="40">temp<pos:position pos:line="34" pos:column="44"/></name><operator pos:line="34" pos:column="44">)<pos:position pos:line="34" pos:column="45"/></operator></expr>;<pos:position pos:line="34" pos:column="46"/></expr_stmt>
		}<pos:position pos:line="35" pos:column="18"/></block>
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">ACQUIRE_LOCK<pos:position pos:line="36" pos:column="29"/></name><argument_list pos:line="36" pos:column="29">(<argument><expr><operator pos:line="36" pos:column="30">&amp;<pos:position pos:line="36" pos:column="35"/></operator><name><name pos:line="36" pos:column="31">p<pos:position pos:line="36" pos:column="32"/></name><operator pos:line="36" pos:column="32">-&gt;<pos:position pos:line="36" pos:column="37"/></operator><name pos:line="36" pos:column="34">m<pos:position pos:line="36" pos:column="35"/></name><index pos:line="36" pos:column="35">[<expr><name pos:line="36" pos:column="36">end<pos:position pos:line="36" pos:column="39"/></name></expr>]<pos:position pos:line="36" pos:column="40"/></index></name><operator pos:line="36" pos:column="40">-&gt;<pos:position pos:line="36" pos:column="45"/></operator><name pos:line="36" pos:column="42">mutex<pos:position pos:line="36" pos:column="47"/></name></expr></argument>)<pos:position pos:line="36" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="49"/></expr_stmt>
		<comment type="block" pos:line="37" pos:column="17">/*printf("Created mspace idx %d\n", end);*/</comment>
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">RELEASE_LOCK<pos:position pos:line="38" pos:column="29"/></name><argument_list pos:line="38" pos:column="29">(<argument><expr><operator pos:line="38" pos:column="30">&amp;<pos:position pos:line="38" pos:column="35"/></operator><name><name pos:line="38" pos:column="31">p<pos:position pos:line="38" pos:column="32"/></name><operator pos:line="38" pos:column="32">-&gt;<pos:position pos:line="38" pos:column="37"/></operator><name pos:line="38" pos:column="34">mutex<pos:position pos:line="38" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><name pos:line="39" pos:column="17">n<pos:position pos:line="39" pos:column="18"/></name><operator pos:line="39" pos:column="18">=<pos:position pos:line="39" pos:column="19"/></operator><name pos:line="39" pos:column="19">end<pos:position pos:line="39" pos:column="22"/></name></expr>;<pos:position pos:line="39" pos:column="23"/></expr_stmt>
		<goto pos:line="40" pos:column="17">goto <name pos:line="40" pos:column="22">found<pos:position pos:line="40" pos:column="27"/></name>;<pos:position pos:line="40" pos:column="28"/></goto>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>
	<comment type="block" pos:line="42" pos:column="9">/* Let it lock on the last one it used */</comment>
<label><name pos:line="43" pos:column="1">badexit<pos:position pos:line="43" pos:column="8"/></name>:<pos:position pos:line="43" pos:column="9"/></label>
	<expr_stmt><expr><call><name pos:line="44" pos:column="9">ACQUIRE_LOCK<pos:position pos:line="44" pos:column="21"/></name><argument_list pos:line="44" pos:column="21">(<argument><expr><operator pos:line="44" pos:column="22">&amp;<pos:position pos:line="44" pos:column="27"/></operator><name><name pos:line="44" pos:column="23">p<pos:position pos:line="44" pos:column="24"/></name><operator pos:line="44" pos:column="24">-&gt;<pos:position pos:line="44" pos:column="29"/></operator><name pos:line="44" pos:column="26">m<pos:position pos:line="44" pos:column="27"/></name><index pos:line="44" pos:column="27">[<expr><operator pos:line="44" pos:column="28">*<pos:position pos:line="44" pos:column="29"/></operator><name pos:line="44" pos:column="29">lastUsed<pos:position pos:line="44" pos:column="37"/></name></expr>]<pos:position pos:line="44" pos:column="38"/></index></name><operator pos:line="44" pos:column="38">-&gt;<pos:position pos:line="44" pos:column="43"/></operator><name pos:line="44" pos:column="40">mutex<pos:position pos:line="44" pos:column="45"/></name></expr></argument>)<pos:position pos:line="44" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="47"/></expr_stmt>
	<return pos:line="45" pos:column="9">return <expr><name><name pos:line="45" pos:column="16">p<pos:position pos:line="45" pos:column="17"/></name><operator pos:line="45" pos:column="17">-&gt;<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="19">m<pos:position pos:line="45" pos:column="20"/></name><index pos:line="45" pos:column="20">[<expr><operator pos:line="45" pos:column="21">*<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="22">lastUsed<pos:position pos:line="45" pos:column="30"/></name></expr>]<pos:position pos:line="45" pos:column="31"/></index></name></expr>;<pos:position pos:line="45" pos:column="32"/></return>
<label><name pos:line="46" pos:column="1">found<pos:position pos:line="46" pos:column="6"/></name>:<pos:position pos:line="46" pos:column="7"/></label>
	<expr_stmt><expr><operator pos:line="47" pos:column="9">*<pos:position pos:line="47" pos:column="10"/></operator><name pos:line="47" pos:column="10">lastUsed<pos:position pos:line="47" pos:column="18"/></name><operator pos:line="47" pos:column="18">=<pos:position pos:line="47" pos:column="19"/></operator><name pos:line="47" pos:column="19">n<pos:position pos:line="47" pos:column="20"/></name></expr>;<pos:position pos:line="47" pos:column="21"/></expr_stmt>
	<if pos:line="48" pos:column="9">if<condition pos:line="48" pos:column="11">(<expr><name pos:line="48" pos:column="12">tc<pos:position pos:line="48" pos:column="14"/></name></expr>)<pos:position pos:line="48" pos:column="15"/></condition><then pos:line="48" pos:column="15">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="49" pos:column="17">tc<pos:position pos:line="49" pos:column="19"/></name><operator pos:line="49" pos:column="19">-&gt;<pos:position pos:line="49" pos:column="24"/></operator><name pos:line="49" pos:column="21">mymspace<pos:position pos:line="49" pos:column="29"/></name></name><operator pos:line="49" pos:column="29">=<pos:position pos:line="49" pos:column="30"/></operator><name pos:line="49" pos:column="30">n<pos:position pos:line="49" pos:column="31"/></name></expr>;<pos:position pos:line="49" pos:column="32"/></expr_stmt></block></then>
	<else pos:line="50" pos:column="9">else
	<block pos:line="51" pos:column="9">{
		<if pos:line="52" pos:column="17">if<condition pos:line="52" pos:column="19">(<expr><call><name pos:line="52" pos:column="20">TLSSET<pos:position pos:line="52" pos:column="26"/></name><argument_list pos:line="52" pos:column="26">(<argument><expr><name><name pos:line="52" pos:column="27">p<pos:position pos:line="52" pos:column="28"/></name><operator pos:line="52" pos:column="28">-&gt;<pos:position pos:line="52" pos:column="33"/></operator><name pos:line="52" pos:column="30">mycache<pos:position pos:line="52" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="39">(<pos:position pos:line="52" pos:column="40"/></operator><name pos:line="52" pos:column="40">void<pos:position pos:line="52" pos:column="44"/></name> <operator pos:line="52" pos:column="45">*<pos:position pos:line="52" pos:column="46"/></operator><operator pos:line="52" pos:column="46">)<pos:position pos:line="52" pos:column="47"/></operator><call pos:line="52" pos:column="47">(<name pos:line="52" pos:column="48">size_t<pos:position pos:line="52" pos:column="54"/></name>)<argument_list pos:line="52" pos:column="55">(<argument><expr><operator pos:line="52" pos:column="56">-<pos:position pos:line="52" pos:column="57"/></operator><operator pos:line="52" pos:column="57">(<pos:position pos:line="52" pos:column="58"/></operator><name pos:line="52" pos:column="58">n<pos:position pos:line="52" pos:column="59"/></name><operator pos:line="52" pos:column="59">+<pos:position pos:line="52" pos:column="60"/></operator><literal type="number" pos:line="52" pos:column="60">1<pos:position pos:line="52" pos:column="61"/></literal><operator pos:line="52" pos:column="61">)<pos:position pos:line="52" pos:column="62"/></operator></expr></argument>)<pos:position pos:line="52" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="65"/></condition><then pos:line="52" pos:column="65"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="66">abort<pos:position pos:line="52" pos:column="71"/></name><argument_list pos:line="52" pos:column="71">()<pos:position pos:line="52" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="74"/></expr_stmt></block></then></if>
	}<pos:position pos:line="53" pos:column="10"/></block></else></if>
	<return pos:line="54" pos:column="9">return <expr><name><name pos:line="54" pos:column="16">p<pos:position pos:line="54" pos:column="17"/></name><operator pos:line="54" pos:column="17">-&gt;<pos:position pos:line="54" pos:column="22"/></operator><name pos:line="54" pos:column="19">m<pos:position pos:line="54" pos:column="20"/></name><index pos:line="54" pos:column="20">[<expr><name pos:line="54" pos:column="21">n<pos:position pos:line="54" pos:column="22"/></name></expr>]<pos:position pos:line="54" pos:column="23"/></index></name></expr>;<pos:position pos:line="54" pos:column="24"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
