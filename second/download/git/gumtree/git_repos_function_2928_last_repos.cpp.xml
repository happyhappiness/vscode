<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2928_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">cmd_main<pos:position pos:line="2" pos:column="9"/></name> <parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">int<pos:position pos:line="2" pos:column="14"/></name></type> <name pos:line="2" pos:column="15">argc<pos:position pos:line="2" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="21">const<pos:position pos:line="2" pos:column="26"/></specifier> <name pos:line="2" pos:column="27">char<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name><name pos:line="2" pos:column="33">argv<pos:position pos:line="2" pos:column="37"/></name><index pos:line="2" pos:column="37">[]<pos:position pos:line="2" pos:column="39"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="40"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <comment type="block" pos:line="4" pos:column="3">/* Default values for command line options.  */</comment>
  <comment type="block" pos:line="5" pos:column="3">/* unsigned short int show_variables = 0; */</comment>

  <switch pos:line="7" pos:column="3">switch <condition pos:line="7" pos:column="10">(<expr><name pos:line="7" pos:column="11">argc<pos:position pos:line="7" pos:column="15"/></name></expr>)<pos:position pos:line="7" pos:column="16"/></condition>
	<block pos:line="8" pos:column="9">{
	<case pos:line="9" pos:column="9">case <expr><literal type="number" pos:line="9" pos:column="14">1<pos:position pos:line="9" pos:column="15"/></literal></expr>:<pos:position pos:line="9" pos:column="16"/></case>
	  <expr_stmt><expr><call><name pos:line="10" pos:column="11">error<pos:position pos:line="10" pos:column="16"/></name> <argument_list pos:line="10" pos:column="17">(<argument><expr><literal type="string" pos:line="10" pos:column="18">"we won't substitute all variables on stdin for you"<pos:position pos:line="10" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="72"/></expr_stmt>
	  <break pos:line="11" pos:column="11">break;<pos:position pos:line="11" pos:column="17"/></break>
	  <comment type="block" pos:line="12" pos:column="11">/*
	  all_variables = 1;
      subst_from_stdin ();
	  */</comment>
	<case pos:line="16" pos:column="9">case <expr><literal type="number" pos:line="16" pos:column="14">2<pos:position pos:line="16" pos:column="15"/></literal></expr>:<pos:position pos:line="16" pos:column="16"/></case>
	  <comment type="block" pos:line="17" pos:column="11">/* echo '$foo and $bar' | git sh-i18n--envsubst --variables '$foo and $bar' */</comment>
	  <expr_stmt><expr><name pos:line="18" pos:column="11">all_variables<pos:position pos:line="18" pos:column="24"/></name> <operator pos:line="18" pos:column="25">=<pos:position pos:line="18" pos:column="26"/></operator> <literal type="number" pos:line="18" pos:column="27">0<pos:position pos:line="18" pos:column="28"/></literal></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="19" pos:column="11">note_variables<pos:position pos:line="19" pos:column="25"/></name> <argument_list pos:line="19" pos:column="26">(<argument><expr><name><name pos:line="19" pos:column="27">argv<pos:position pos:line="19" pos:column="31"/></name><index pos:line="19" pos:column="31">[<expr><literal type="number" pos:line="19" pos:column="32">1<pos:position pos:line="19" pos:column="33"/></literal></expr>]<pos:position pos:line="19" pos:column="34"/></index></name></expr></argument>)<pos:position pos:line="19" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="20" pos:column="7">subst_from_stdin<pos:position pos:line="20" pos:column="23"/></name> <argument_list pos:line="20" pos:column="24">()<pos:position pos:line="20" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt>
	  <break pos:line="21" pos:column="11">break;<pos:position pos:line="21" pos:column="17"/></break>
	<case pos:line="22" pos:column="9">case <expr><literal type="number" pos:line="22" pos:column="14">3<pos:position pos:line="22" pos:column="15"/></literal></expr>:<pos:position pos:line="22" pos:column="16"/></case>
	  <comment type="block" pos:line="23" pos:column="11">/* git sh-i18n--envsubst --variables '$foo and $bar' */</comment>
	  <if pos:line="24" pos:column="11">if <condition pos:line="24" pos:column="14">(<expr><call><name pos:line="24" pos:column="15">strcmp<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name><name pos:line="24" pos:column="22">argv<pos:position pos:line="24" pos:column="26"/></name><index pos:line="24" pos:column="26">[<expr><literal type="number" pos:line="24" pos:column="27">1<pos:position pos:line="24" pos:column="28"/></literal></expr>]<pos:position pos:line="24" pos:column="29"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="31">"--variables"<pos:position pos:line="24" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="46"/></condition><then pos:line="24" pos:column="46">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="17">error<pos:position pos:line="25" pos:column="22"/></name> <argument_list pos:line="25" pos:column="23">(<argument><expr><literal type="string" pos:line="25" pos:column="24">"first argument must be --variables when two are given"<pos:position pos:line="25" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="81"/></expr_stmt></block></then></if>
	  <comment type="block" pos:line="26" pos:column="11">/* show_variables = 1; */</comment>
      <expr_stmt><expr><call><name pos:line="27" pos:column="7">print_variables<pos:position pos:line="27" pos:column="22"/></name> <argument_list pos:line="27" pos:column="23">(<argument><expr><name><name pos:line="27" pos:column="24">argv<pos:position pos:line="27" pos:column="28"/></name><index pos:line="27" pos:column="28">[<expr><literal type="number" pos:line="27" pos:column="29">2<pos:position pos:line="27" pos:column="30"/></literal></expr>]<pos:position pos:line="27" pos:column="31"/></index></name></expr></argument>)<pos:position pos:line="27" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="33"/></expr_stmt>
	  <break pos:line="28" pos:column="11">break;<pos:position pos:line="28" pos:column="17"/></break>
	<default pos:line="29" pos:column="9">default:<pos:position pos:line="29" pos:column="17"/></default>
	  <expr_stmt><expr><call><name pos:line="30" pos:column="11">error<pos:position pos:line="30" pos:column="16"/></name> <argument_list pos:line="30" pos:column="17">(<argument><expr><literal type="string" pos:line="30" pos:column="18">"too many arguments"<pos:position pos:line="30" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt>
	  <break pos:line="31" pos:column="11">break;<pos:position pos:line="31" pos:column="17"/></break>
	}<pos:position pos:line="32" pos:column="10"/></block></switch>

  <comment type="block" pos:line="34" pos:column="3">/* Close standard error.  This is simpler than fwriteerror_no_ebadf, because
     upon failure we don't need an errno - all we can do at this point is to
     set an exit status.  */</comment>
  <expr_stmt><expr><name pos:line="37" pos:column="3">errno<pos:position pos:line="37" pos:column="8"/></name> <operator pos:line="37" pos:column="9">=<pos:position pos:line="37" pos:column="10"/></operator> <literal type="number" pos:line="37" pos:column="11">0<pos:position pos:line="37" pos:column="12"/></literal></expr>;<pos:position pos:line="37" pos:column="13"/></expr_stmt>
  <if pos:line="38" pos:column="3">if <condition pos:line="38" pos:column="6">(<expr><call><name pos:line="38" pos:column="7">ferror<pos:position pos:line="38" pos:column="13"/></name> <argument_list pos:line="38" pos:column="14">(<argument><expr><name pos:line="38" pos:column="15">stderr<pos:position pos:line="38" pos:column="21"/></name></expr></argument>)<pos:position pos:line="38" pos:column="22"/></argument_list></call> <operator pos:line="38" pos:column="23">||<pos:position pos:line="38" pos:column="25"/></operator> <call><name pos:line="38" pos:column="26">fflush<pos:position pos:line="38" pos:column="32"/></name> <argument_list pos:line="38" pos:column="33">(<argument><expr><name pos:line="38" pos:column="34">stderr<pos:position pos:line="38" pos:column="40"/></name></expr></argument>)<pos:position pos:line="38" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="42"/></condition><then pos:line="38" pos:column="42">
    <block pos:line="39" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="40" pos:column="7">fclose<pos:position pos:line="40" pos:column="13"/></name> <argument_list pos:line="40" pos:column="14">(<argument><expr><name pos:line="40" pos:column="15">stderr<pos:position pos:line="40" pos:column="21"/></name></expr></argument>)<pos:position pos:line="40" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="41" pos:column="7">exit<pos:position pos:line="41" pos:column="11"/></name> <argument_list pos:line="41" pos:column="12">(<argument><expr><name pos:line="41" pos:column="13">EXIT_FAILURE<pos:position pos:line="41" pos:column="25"/></name></expr></argument>)<pos:position pos:line="41" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>
  <if pos:line="43" pos:column="3">if <condition pos:line="43" pos:column="6">(<expr><call><name pos:line="43" pos:column="7">fclose<pos:position pos:line="43" pos:column="13"/></name> <argument_list pos:line="43" pos:column="14">(<argument><expr><name pos:line="43" pos:column="15">stderr<pos:position pos:line="43" pos:column="21"/></name></expr></argument>)<pos:position pos:line="43" pos:column="22"/></argument_list></call> <operator pos:line="43" pos:column="23">&amp;&amp;<pos:position pos:line="43" pos:column="33"/></operator> <name pos:line="43" pos:column="26">errno<pos:position pos:line="43" pos:column="31"/></name> <operator pos:line="43" pos:column="32">!=<pos:position pos:line="43" pos:column="34"/></operator> <name pos:line="43" pos:column="35">EBADF<pos:position pos:line="43" pos:column="40"/></name></expr>)<pos:position pos:line="43" pos:column="41"/></condition><then pos:line="43" pos:column="41">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="5">exit<pos:position pos:line="44" pos:column="9"/></name> <argument_list pos:line="44" pos:column="10">(<argument><expr><name pos:line="44" pos:column="11">EXIT_FAILURE<pos:position pos:line="44" pos:column="23"/></name></expr></argument>)<pos:position pos:line="44" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="25"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="46" pos:column="3">exit<pos:position pos:line="46" pos:column="7"/></name> <argument_list pos:line="46" pos:column="8">(<argument><expr><name pos:line="46" pos:column="9">EXIT_SUCCESS<pos:position pos:line="46" pos:column="21"/></name></expr></argument>)<pos:position pos:line="46" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="23"/></expr_stmt>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
