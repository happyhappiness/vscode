<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2231.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">prune_shallow<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name pos:line="1" pos:column="20">int<pos:position pos:line="1" pos:column="23"/></name></type> <name pos:line="1" pos:column="24">show_only<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name><name pos:line="3" pos:column="16">struct<pos:position pos:line="3" pos:column="22"/></name> <name pos:line="3" pos:column="23">lock_file<pos:position pos:line="3" pos:column="32"/></name></name></type> <name pos:line="3" pos:column="33">shallow_lock<pos:position pos:line="3" pos:column="45"/></name></decl>;<pos:position pos:line="3" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">sb<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name pos:line="4" pos:column="28">STRBUF_INIT<pos:position pos:line="4" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">fd<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">show_only<pos:position pos:line="7" pos:column="22"/></name></expr>)<pos:position pos:line="7" pos:column="23"/></condition><then pos:line="7" pos:column="23"> <block pos:line="7" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">write_shallow_commits_1<pos:position pos:line="8" pos:column="40"/></name><argument_list pos:line="8" pos:column="40">(<argument><expr><operator pos:line="8" pos:column="41">&amp;<pos:position pos:line="8" pos:column="46"/></operator><name pos:line="8" pos:column="42">sb<pos:position pos:line="8" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="46">0<pos:position pos:line="8" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="49">NULL<pos:position pos:line="8" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="55">SEEN_ONLY<pos:position pos:line="8" pos:column="64"/></name> <operator pos:line="8" pos:column="65">|<pos:position pos:line="8" pos:column="66"/></operator> <name pos:line="8" pos:column="67">VERBOSE<pos:position pos:line="8" pos:column="74"/></name></expr></argument>)<pos:position pos:line="8" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="76"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="9" pos:column="17">strbuf_release<pos:position pos:line="9" pos:column="31"/></name><argument_list pos:line="9" pos:column="31">(<argument><expr><operator pos:line="9" pos:column="32">&amp;<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="33">sb<pos:position pos:line="9" pos:column="35"/></name></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>
		<return pos:line="10" pos:column="17">return;<pos:position pos:line="10" pos:column="24"/></return>
	}<pos:position pos:line="11" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="12" pos:column="9">fd<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">hold_lock_file_for_update<pos:position pos:line="12" pos:column="39"/></name><argument_list pos:line="12" pos:column="39">(<argument><expr><operator pos:line="12" pos:column="40">&amp;<pos:position pos:line="12" pos:column="45"/></operator><name pos:line="12" pos:column="41">shallow_lock<pos:position pos:line="12" pos:column="53"/></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="55">git_path<pos:position pos:line="12" pos:column="63"/></name><argument_list pos:line="12" pos:column="63">(<argument><expr><literal type="string" pos:line="12" pos:column="64">"shallow"<pos:position pos:line="12" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="74"/></argument_list></call></expr></argument>,
				       <argument><expr><name pos:line="13" pos:column="40">LOCK_DIE_ON_ERROR<pos:position pos:line="13" pos:column="57"/></name></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">check_shallow_file_for_update<pos:position pos:line="14" pos:column="38"/></name><argument_list pos:line="14" pos:column="38">()<pos:position pos:line="14" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">write_shallow_commits_1<pos:position pos:line="15" pos:column="36"/></name><argument_list pos:line="15" pos:column="36">(<argument><expr><operator pos:line="15" pos:column="37">&amp;<pos:position pos:line="15" pos:column="42"/></operator><name pos:line="15" pos:column="38">sb<pos:position pos:line="15" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="42">0<pos:position pos:line="15" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="45">NULL<pos:position pos:line="15" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="51">SEEN_ONLY<pos:position pos:line="15" pos:column="60"/></name></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="62"/></condition><then pos:line="15" pos:column="62"> <block pos:line="15" pos:column="63">{
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><call><name pos:line="16" pos:column="21">write_in_full<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><name pos:line="16" pos:column="35">fd<pos:position pos:line="16" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="39">sb<pos:position pos:line="16" pos:column="41"/></name><operator pos:line="16" pos:column="41">.<pos:position pos:line="16" pos:column="42"/></operator><name pos:line="16" pos:column="42">buf<pos:position pos:line="16" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="47">sb<pos:position pos:line="16" pos:column="49"/></name><operator pos:line="16" pos:column="49">.<pos:position pos:line="16" pos:column="50"/></operator><name pos:line="16" pos:column="50">len<pos:position pos:line="16" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call> <operator pos:line="16" pos:column="55">!=<pos:position pos:line="16" pos:column="57"/></operator> <name><name pos:line="16" pos:column="58">sb<pos:position pos:line="16" pos:column="60"/></name><operator pos:line="16" pos:column="60">.<pos:position pos:line="16" pos:column="61"/></operator><name pos:line="16" pos:column="61">len<pos:position pos:line="16" pos:column="64"/></name></name></expr>)<pos:position pos:line="16" pos:column="65"/></condition><then pos:line="16" pos:column="65">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="25">die_errno<pos:position pos:line="17" pos:column="34"/></name><argument_list pos:line="17" pos:column="34">(<argument><expr><literal type="string" pos:line="17" pos:column="35">"failed to write to %s"<pos:position pos:line="17" pos:column="58"/></literal></expr></argument>,
				  <argument><expr><name><name pos:line="18" pos:column="35">shallow_lock<pos:position pos:line="18" pos:column="47"/></name><operator pos:line="18" pos:column="47">.<pos:position pos:line="18" pos:column="48"/></operator><name pos:line="18" pos:column="48">filename<pos:position pos:line="18" pos:column="56"/></name><operator pos:line="18" pos:column="56">.<pos:position pos:line="18" pos:column="57"/></operator><name pos:line="18" pos:column="57">buf<pos:position pos:line="18" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="62"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">commit_lock_file<pos:position pos:line="19" pos:column="33"/></name><argument_list pos:line="19" pos:column="33">(<argument><expr><operator pos:line="19" pos:column="34">&amp;<pos:position pos:line="19" pos:column="39"/></operator><name pos:line="19" pos:column="35">shallow_lock<pos:position pos:line="19" pos:column="47"/></name></expr></argument>)<pos:position pos:line="19" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="20" pos:column="10"/></block></then> <else pos:line="20" pos:column="11">else <block pos:line="20" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">unlink<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><call><name pos:line="21" pos:column="24">git_path<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">(<argument><expr><literal type="string" pos:line="21" pos:column="33">"shallow"<pos:position pos:line="21" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="45"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">rollback_lock_file<pos:position pos:line="22" pos:column="35"/></name><argument_list pos:line="22" pos:column="35">(<argument><expr><operator pos:line="22" pos:column="36">&amp;<pos:position pos:line="22" pos:column="41"/></operator><name pos:line="22" pos:column="37">shallow_lock<pos:position pos:line="22" pos:column="49"/></name></expr></argument>)<pos:position pos:line="22" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></else></if>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">strbuf_release<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><operator pos:line="24" pos:column="24">&amp;<pos:position pos:line="24" pos:column="29"/></operator><name pos:line="24" pos:column="25">sb<pos:position pos:line="24" pos:column="27"/></name></expr></argument>)<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
