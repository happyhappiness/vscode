<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2644_git-2.13.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">pack_objects<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">int<pos:position pos:line="1" pos:column="28"/></name></type> <name pos:line="1" pos:column="29">fd<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="33">struct<pos:position pos:line="1" pos:column="39"/></name> <name pos:line="1" pos:column="40">ref<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">refs<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="51">struct<pos:position pos:line="1" pos:column="57"/></name> <name pos:line="1" pos:column="58">oid_array<pos:position pos:line="1" pos:column="67"/></name></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">extra<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="76">struct<pos:position pos:line="1" pos:column="82"/></name> <name pos:line="1" pos:column="83">send_pack_args<pos:position pos:line="1" pos:column="97"/></name></name> <modifier pos:line="1" pos:column="98">*<pos:position pos:line="1" pos:column="99"/></modifier></type><name pos:line="1" pos:column="99">args<pos:position pos:line="1" pos:column="103"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="104"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<comment type="block" pos:line="3" pos:column="9">/*
	 * The child becomes pack-objects --revs; we feed
	 * the revision parameters to it via its stdin and
	 * let its stdout go back to the other end.
	 */</comment>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name><name pos:line="8" pos:column="21">argv<pos:position pos:line="8" pos:column="25"/></name><index pos:line="8" pos:column="25">[]<pos:position pos:line="8" pos:column="27"/></index></name> <init pos:line="8" pos:column="28">= <expr><block pos:line="8" pos:column="30">{
		<expr><literal type="string" pos:line="9" pos:column="17">"pack-objects"<pos:position pos:line="9" pos:column="31"/></literal></expr>,
		<expr><literal type="string" pos:line="10" pos:column="17">"--all-progress-implied"<pos:position pos:line="10" pos:column="41"/></literal></expr>,
		<expr><literal type="string" pos:line="11" pos:column="17">"--revs"<pos:position pos:line="11" pos:column="25"/></literal></expr>,
		<expr><literal type="string" pos:line="12" pos:column="17">"--stdout"<pos:position pos:line="12" pos:column="27"/></literal></expr>,
		<expr><name pos:line="13" pos:column="17">NULL<pos:position pos:line="13" pos:column="21"/></name></expr>,
		<expr><name pos:line="14" pos:column="17">NULL<pos:position pos:line="14" pos:column="21"/></name></expr>,
		<expr><name pos:line="15" pos:column="17">NULL<pos:position pos:line="15" pos:column="21"/></name></expr>,
		<expr><name pos:line="16" pos:column="17">NULL<pos:position pos:line="16" pos:column="21"/></name></expr>,
		<expr><name pos:line="17" pos:column="17">NULL<pos:position pos:line="17" pos:column="21"/></name></expr>,
		<expr><name pos:line="18" pos:column="17">NULL<pos:position pos:line="18" pos:column="21"/></name></expr>,
	}<pos:position pos:line="19" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="19" pos:column="11"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="20" pos:column="9">struct<pos:position pos:line="20" pos:column="15"/></name> <name pos:line="20" pos:column="16">child_process<pos:position pos:line="20" pos:column="29"/></name></name></type> <name pos:line="20" pos:column="30">po<pos:position pos:line="20" pos:column="32"/></name> <init pos:line="20" pos:column="33">= <expr><name pos:line="20" pos:column="35">CHILD_PROCESS_INIT<pos:position pos:line="20" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="54"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="21" pos:column="9">FILE<pos:position pos:line="21" pos:column="13"/></name> <modifier pos:line="21" pos:column="14">*<pos:position pos:line="21" pos:column="15"/></modifier></type><name pos:line="21" pos:column="15">po_in<pos:position pos:line="21" pos:column="20"/></name></decl>;<pos:position pos:line="21" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="22" pos:column="9">int<pos:position pos:line="22" pos:column="12"/></name></type> <name pos:line="22" pos:column="13">i<pos:position pos:line="22" pos:column="14"/></name></decl>;<pos:position pos:line="22" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="23" pos:column="9">int<pos:position pos:line="23" pos:column="12"/></name></type> <name pos:line="23" pos:column="13">rc<pos:position pos:line="23" pos:column="15"/></name></decl>;<pos:position pos:line="23" pos:column="16"/></decl_stmt>

	<expr_stmt><expr><name pos:line="25" pos:column="9">i<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <literal type="number" pos:line="25" pos:column="13">4<pos:position pos:line="25" pos:column="14"/></literal></expr>;<pos:position pos:line="25" pos:column="15"/></expr_stmt>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name><name pos:line="26" pos:column="13">args<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">-&gt;<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="19">use_thin_pack<pos:position pos:line="26" pos:column="32"/></name></name></expr>)<pos:position pos:line="26" pos:column="33"/></condition><then pos:line="26" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="27" pos:column="17">argv<pos:position pos:line="27" pos:column="21"/></name><index pos:line="27" pos:column="21">[<expr><name pos:line="27" pos:column="22">i<pos:position pos:line="27" pos:column="23"/></name><operator pos:line="27" pos:column="23">++<pos:position pos:line="27" pos:column="25"/></operator></expr>]<pos:position pos:line="27" pos:column="26"/></index></name> <operator pos:line="27" pos:column="27">=<pos:position pos:line="27" pos:column="28"/></operator> <literal type="string" pos:line="27" pos:column="29">"--thin"<pos:position pos:line="27" pos:column="37"/></literal></expr>;<pos:position pos:line="27" pos:column="38"/></expr_stmt></block></then></if>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name><name pos:line="28" pos:column="13">args<pos:position pos:line="28" pos:column="17"/></name><operator pos:line="28" pos:column="17">-&gt;<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="19">use_ofs_delta<pos:position pos:line="28" pos:column="32"/></name></name></expr>)<pos:position pos:line="28" pos:column="33"/></condition><then pos:line="28" pos:column="33">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="29" pos:column="17">argv<pos:position pos:line="29" pos:column="21"/></name><index pos:line="29" pos:column="21">[<expr><name pos:line="29" pos:column="22">i<pos:position pos:line="29" pos:column="23"/></name><operator pos:line="29" pos:column="23">++<pos:position pos:line="29" pos:column="25"/></operator></expr>]<pos:position pos:line="29" pos:column="26"/></index></name> <operator pos:line="29" pos:column="27">=<pos:position pos:line="29" pos:column="28"/></operator> <literal type="string" pos:line="29" pos:column="29">"--delta-base-offset"<pos:position pos:line="29" pos:column="50"/></literal></expr>;<pos:position pos:line="29" pos:column="51"/></expr_stmt></block></then></if>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name><name pos:line="30" pos:column="13">args<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">-&gt;<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="19">quiet<pos:position pos:line="30" pos:column="24"/></name></name> <operator pos:line="30" pos:column="25">||<pos:position pos:line="30" pos:column="27"/></operator> <operator pos:line="30" pos:column="28">!<pos:position pos:line="30" pos:column="29"/></operator><name><name pos:line="30" pos:column="29">args<pos:position pos:line="30" pos:column="33"/></name><operator pos:line="30" pos:column="33">-&gt;<pos:position pos:line="30" pos:column="38"/></operator><name pos:line="30" pos:column="35">progress<pos:position pos:line="30" pos:column="43"/></name></name></expr>)<pos:position pos:line="30" pos:column="44"/></condition><then pos:line="30" pos:column="44">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="31" pos:column="17">argv<pos:position pos:line="31" pos:column="21"/></name><index pos:line="31" pos:column="21">[<expr><name pos:line="31" pos:column="22">i<pos:position pos:line="31" pos:column="23"/></name><operator pos:line="31" pos:column="23">++<pos:position pos:line="31" pos:column="25"/></operator></expr>]<pos:position pos:line="31" pos:column="26"/></index></name> <operator pos:line="31" pos:column="27">=<pos:position pos:line="31" pos:column="28"/></operator> <literal type="string" pos:line="31" pos:column="29">"-q"<pos:position pos:line="31" pos:column="33"/></literal></expr>;<pos:position pos:line="31" pos:column="34"/></expr_stmt></block></then></if>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name><name pos:line="32" pos:column="13">args<pos:position pos:line="32" pos:column="17"/></name><operator pos:line="32" pos:column="17">-&gt;<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="19">progress<pos:position pos:line="32" pos:column="27"/></name></name></expr>)<pos:position pos:line="32" pos:column="28"/></condition><then pos:line="32" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="33" pos:column="17">argv<pos:position pos:line="33" pos:column="21"/></name><index pos:line="33" pos:column="21">[<expr><name pos:line="33" pos:column="22">i<pos:position pos:line="33" pos:column="23"/></name><operator pos:line="33" pos:column="23">++<pos:position pos:line="33" pos:column="25"/></operator></expr>]<pos:position pos:line="33" pos:column="26"/></index></name> <operator pos:line="33" pos:column="27">=<pos:position pos:line="33" pos:column="28"/></operator> <literal type="string" pos:line="33" pos:column="29">"--progress"<pos:position pos:line="33" pos:column="41"/></literal></expr>;<pos:position pos:line="33" pos:column="42"/></expr_stmt></block></then></if>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><call><name pos:line="34" pos:column="13">is_repository_shallow<pos:position pos:line="34" pos:column="34"/></name><argument_list pos:line="34" pos:column="34">()<pos:position pos:line="34" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="37"/></condition><then pos:line="34" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="35" pos:column="17">argv<pos:position pos:line="35" pos:column="21"/></name><index pos:line="35" pos:column="21">[<expr><name pos:line="35" pos:column="22">i<pos:position pos:line="35" pos:column="23"/></name><operator pos:line="35" pos:column="23">++<pos:position pos:line="35" pos:column="25"/></operator></expr>]<pos:position pos:line="35" pos:column="26"/></index></name> <operator pos:line="35" pos:column="27">=<pos:position pos:line="35" pos:column="28"/></operator> <literal type="string" pos:line="35" pos:column="29">"--shallow"<pos:position pos:line="35" pos:column="40"/></literal></expr>;<pos:position pos:line="35" pos:column="41"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name><name pos:line="36" pos:column="9">po<pos:position pos:line="36" pos:column="11"/></name><operator pos:line="36" pos:column="11">.<pos:position pos:line="36" pos:column="12"/></operator><name pos:line="36" pos:column="12">argv<pos:position pos:line="36" pos:column="16"/></name></name> <operator pos:line="36" pos:column="17">=<pos:position pos:line="36" pos:column="18"/></operator> <name pos:line="36" pos:column="19">argv<pos:position pos:line="36" pos:column="23"/></name></expr>;<pos:position pos:line="36" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="37" pos:column="9">po<pos:position pos:line="37" pos:column="11"/></name><operator pos:line="37" pos:column="11">.<pos:position pos:line="37" pos:column="12"/></operator><name pos:line="37" pos:column="12">in<pos:position pos:line="37" pos:column="14"/></name></name> <operator pos:line="37" pos:column="15">=<pos:position pos:line="37" pos:column="16"/></operator> <operator pos:line="37" pos:column="17">-<pos:position pos:line="37" pos:column="18"/></operator><literal type="number" pos:line="37" pos:column="18">1<pos:position pos:line="37" pos:column="19"/></literal></expr>;<pos:position pos:line="37" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="38" pos:column="9">po<pos:position pos:line="38" pos:column="11"/></name><operator pos:line="38" pos:column="11">.<pos:position pos:line="38" pos:column="12"/></operator><name pos:line="38" pos:column="12">out<pos:position pos:line="38" pos:column="15"/></name></name> <operator pos:line="38" pos:column="16">=<pos:position pos:line="38" pos:column="17"/></operator> <ternary><condition><expr><name><name pos:line="38" pos:column="18">args<pos:position pos:line="38" pos:column="22"/></name><operator pos:line="38" pos:column="22">-&gt;<pos:position pos:line="38" pos:column="27"/></operator><name pos:line="38" pos:column="24">stateless_rpc<pos:position pos:line="38" pos:column="37"/></name></name></expr> ?<pos:position pos:line="38" pos:column="39"/></condition><then pos:line="38" pos:column="39"> <expr><operator pos:line="38" pos:column="40">-<pos:position pos:line="38" pos:column="41"/></operator><literal type="number" pos:line="38" pos:column="41">1<pos:position pos:line="38" pos:column="42"/></literal></expr> <pos:position pos:line="38" pos:column="43"/></then><else pos:line="38" pos:column="43">: <expr><name pos:line="38" pos:column="45">fd<pos:position pos:line="38" pos:column="47"/></name></expr></else></ternary></expr>;<pos:position pos:line="38" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="39" pos:column="9">po<pos:position pos:line="39" pos:column="11"/></name><operator pos:line="39" pos:column="11">.<pos:position pos:line="39" pos:column="12"/></operator><name pos:line="39" pos:column="12">git_cmd<pos:position pos:line="39" pos:column="19"/></name></name> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <literal type="number" pos:line="39" pos:column="22">1<pos:position pos:line="39" pos:column="23"/></literal></expr>;<pos:position pos:line="39" pos:column="24"/></expr_stmt>
	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><call><name pos:line="40" pos:column="13">start_command<pos:position pos:line="40" pos:column="26"/></name><argument_list pos:line="40" pos:column="26">(<argument><expr><operator pos:line="40" pos:column="27">&amp;<pos:position pos:line="40" pos:column="32"/></operator><name pos:line="40" pos:column="28">po<pos:position pos:line="40" pos:column="30"/></name></expr></argument>)<pos:position pos:line="40" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="32"/></condition><then pos:line="40" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="17">die_errno<pos:position pos:line="41" pos:column="26"/></name><argument_list pos:line="41" pos:column="26">(<argument><expr><literal type="string" pos:line="41" pos:column="27">"git pack-objects failed"<pos:position pos:line="41" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="54"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="43" pos:column="9">/*
	 * We feed the pack-objects we just spawned with revision
	 * parameters by writing to the pipe.
	 */</comment>
	<expr_stmt><expr><name pos:line="47" pos:column="9">po_in<pos:position pos:line="47" pos:column="14"/></name> <operator pos:line="47" pos:column="15">=<pos:position pos:line="47" pos:column="16"/></operator> <call><name pos:line="47" pos:column="17">xfdopen<pos:position pos:line="47" pos:column="24"/></name><argument_list pos:line="47" pos:column="24">(<argument><expr><name><name pos:line="47" pos:column="25">po<pos:position pos:line="47" pos:column="27"/></name><operator pos:line="47" pos:column="27">.<pos:position pos:line="47" pos:column="28"/></operator><name pos:line="47" pos:column="28">in<pos:position pos:line="47" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="32">"w"<pos:position pos:line="47" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="37"/></expr_stmt>
	<for pos:line="48" pos:column="9">for <control pos:line="48" pos:column="13">(<init><expr><name pos:line="48" pos:column="14">i<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">=<pos:position pos:line="48" pos:column="17"/></operator> <literal type="number" pos:line="48" pos:column="18">0<pos:position pos:line="48" pos:column="19"/></literal></expr>;<pos:position pos:line="48" pos:column="20"/></init> <condition><expr><name pos:line="48" pos:column="21">i<pos:position pos:line="48" pos:column="22"/></name> <operator pos:line="48" pos:column="23">&lt;<pos:position pos:line="48" pos:column="27"/></operator> <name><name pos:line="48" pos:column="25">extra<pos:position pos:line="48" pos:column="30"/></name><operator pos:line="48" pos:column="30">-&gt;<pos:position pos:line="48" pos:column="35"/></operator><name pos:line="48" pos:column="32">nr<pos:position pos:line="48" pos:column="34"/></name></name></expr>;<pos:position pos:line="48" pos:column="35"/></condition> <incr><expr><name pos:line="48" pos:column="36">i<pos:position pos:line="48" pos:column="37"/></name><operator pos:line="48" pos:column="37">++<pos:position pos:line="48" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="48" pos:column="40"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="17">feed_object<pos:position pos:line="49" pos:column="28"/></name><argument_list pos:line="49" pos:column="28">(<argument><expr><name><name pos:line="49" pos:column="29">extra<pos:position pos:line="49" pos:column="34"/></name><operator pos:line="49" pos:column="34">-&gt;<pos:position pos:line="49" pos:column="39"/></operator><name pos:line="49" pos:column="36">oid<pos:position pos:line="49" pos:column="39"/></name><index pos:line="49" pos:column="39">[<expr><name pos:line="49" pos:column="40">i<pos:position pos:line="49" pos:column="41"/></name></expr>]<pos:position pos:line="49" pos:column="42"/></index></name><operator pos:line="49" pos:column="42">.<pos:position pos:line="49" pos:column="43"/></operator><name pos:line="49" pos:column="43">hash<pos:position pos:line="49" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="49">po_in<pos:position pos:line="49" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="56">1<pos:position pos:line="49" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="59"/></expr_stmt></block></for>

	<while pos:line="51" pos:column="9">while <condition pos:line="51" pos:column="15">(<expr><name pos:line="51" pos:column="16">refs<pos:position pos:line="51" pos:column="20"/></name></expr>)<pos:position pos:line="51" pos:column="21"/></condition> <block pos:line="51" pos:column="22">{
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><operator pos:line="52" pos:column="21">!<pos:position pos:line="52" pos:column="22"/></operator><call><name pos:line="52" pos:column="22">is_null_oid<pos:position pos:line="52" pos:column="33"/></name><argument_list pos:line="52" pos:column="33">(<argument><expr><operator pos:line="52" pos:column="34">&amp;<pos:position pos:line="52" pos:column="39"/></operator><name><name pos:line="52" pos:column="35">refs<pos:position pos:line="52" pos:column="39"/></name><operator pos:line="52" pos:column="39">-&gt;<pos:position pos:line="52" pos:column="44"/></operator><name pos:line="52" pos:column="41">old_oid<pos:position pos:line="52" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="50"/></condition><then pos:line="52" pos:column="50">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="25">feed_object<pos:position pos:line="53" pos:column="36"/></name><argument_list pos:line="53" pos:column="36">(<argument><expr><name><name pos:line="53" pos:column="37">refs<pos:position pos:line="53" pos:column="41"/></name><operator pos:line="53" pos:column="41">-&gt;<pos:position pos:line="53" pos:column="46"/></operator><name pos:line="53" pos:column="43">old_oid<pos:position pos:line="53" pos:column="50"/></name><operator pos:line="53" pos:column="50">.<pos:position pos:line="53" pos:column="51"/></operator><name pos:line="53" pos:column="51">hash<pos:position pos:line="53" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="57">po_in<pos:position pos:line="53" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="64">1<pos:position pos:line="53" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="67"/></expr_stmt></block></then></if>
		<if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><operator pos:line="54" pos:column="21">!<pos:position pos:line="54" pos:column="22"/></operator><call><name pos:line="54" pos:column="22">is_null_oid<pos:position pos:line="54" pos:column="33"/></name><argument_list pos:line="54" pos:column="33">(<argument><expr><operator pos:line="54" pos:column="34">&amp;<pos:position pos:line="54" pos:column="39"/></operator><name><name pos:line="54" pos:column="35">refs<pos:position pos:line="54" pos:column="39"/></name><operator pos:line="54" pos:column="39">-&gt;<pos:position pos:line="54" pos:column="44"/></operator><name pos:line="54" pos:column="41">new_oid<pos:position pos:line="54" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="50"/></condition><then pos:line="54" pos:column="50">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="25">feed_object<pos:position pos:line="55" pos:column="36"/></name><argument_list pos:line="55" pos:column="36">(<argument><expr><name><name pos:line="55" pos:column="37">refs<pos:position pos:line="55" pos:column="41"/></name><operator pos:line="55" pos:column="41">-&gt;<pos:position pos:line="55" pos:column="46"/></operator><name pos:line="55" pos:column="43">new_oid<pos:position pos:line="55" pos:column="50"/></name><operator pos:line="55" pos:column="50">.<pos:position pos:line="55" pos:column="51"/></operator><name pos:line="55" pos:column="51">hash<pos:position pos:line="55" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="57">po_in<pos:position pos:line="55" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="64">0<pos:position pos:line="55" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="67"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="56" pos:column="17">refs<pos:position pos:line="56" pos:column="21"/></name> <operator pos:line="56" pos:column="22">=<pos:position pos:line="56" pos:column="23"/></operator> <name><name pos:line="56" pos:column="24">refs<pos:position pos:line="56" pos:column="28"/></name><operator pos:line="56" pos:column="28">-&gt;<pos:position pos:line="56" pos:column="33"/></operator><name pos:line="56" pos:column="30">next<pos:position pos:line="56" pos:column="34"/></name></name></expr>;<pos:position pos:line="56" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="57" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="59" pos:column="9">fflush<pos:position pos:line="59" pos:column="15"/></name><argument_list pos:line="59" pos:column="15">(<argument><expr><name pos:line="59" pos:column="16">po_in<pos:position pos:line="59" pos:column="21"/></name></expr></argument>)<pos:position pos:line="59" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="23"/></expr_stmt>
	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><call><name pos:line="60" pos:column="13">ferror<pos:position pos:line="60" pos:column="19"/></name><argument_list pos:line="60" pos:column="19">(<argument><expr><name pos:line="60" pos:column="20">po_in<pos:position pos:line="60" pos:column="25"/></name></expr></argument>)<pos:position pos:line="60" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="27"/></condition><then pos:line="60" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="61" pos:column="17">die_errno<pos:position pos:line="61" pos:column="26"/></name><argument_list pos:line="61" pos:column="26">(<argument><expr><literal type="string" pos:line="61" pos:column="27">"error writing to pack-objects"<pos:position pos:line="61" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="60"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="62" pos:column="9">fclose<pos:position pos:line="62" pos:column="15"/></name><argument_list pos:line="62" pos:column="15">(<argument><expr><name pos:line="62" pos:column="16">po_in<pos:position pos:line="62" pos:column="21"/></name></expr></argument>)<pos:position pos:line="62" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="23"/></expr_stmt>

	<if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><name><name pos:line="64" pos:column="13">args<pos:position pos:line="64" pos:column="17"/></name><operator pos:line="64" pos:column="17">-&gt;<pos:position pos:line="64" pos:column="22"/></operator><name pos:line="64" pos:column="19">stateless_rpc<pos:position pos:line="64" pos:column="32"/></name></name></expr>)<pos:position pos:line="64" pos:column="33"/></condition><then pos:line="64" pos:column="33"> <block pos:line="64" pos:column="34">{
		<decl_stmt><decl><type><name pos:line="65" pos:column="17">char<pos:position pos:line="65" pos:column="21"/></name> <modifier pos:line="65" pos:column="22">*<pos:position pos:line="65" pos:column="23"/></modifier></type><name pos:line="65" pos:column="23">buf<pos:position pos:line="65" pos:column="26"/></name> <init pos:line="65" pos:column="27">= <expr><call><name pos:line="65" pos:column="29">xmalloc<pos:position pos:line="65" pos:column="36"/></name><argument_list pos:line="65" pos:column="36">(<argument><expr><name pos:line="65" pos:column="37">LARGE_PACKET_MAX<pos:position pos:line="65" pos:column="53"/></name></expr></argument>)<pos:position pos:line="65" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="65" pos:column="55"/></decl_stmt>
		<while pos:line="66" pos:column="17">while <condition pos:line="66" pos:column="23">(<expr><literal type="number" pos:line="66" pos:column="24">1<pos:position pos:line="66" pos:column="25"/></literal></expr>)<pos:position pos:line="66" pos:column="26"/></condition> <block pos:line="66" pos:column="27">{
			<decl_stmt><decl><type><name pos:line="67" pos:column="25">ssize_t<pos:position pos:line="67" pos:column="32"/></name></type> <name pos:line="67" pos:column="33">n<pos:position pos:line="67" pos:column="34"/></name> <init pos:line="67" pos:column="35">= <expr><call><name pos:line="67" pos:column="37">xread<pos:position pos:line="67" pos:column="42"/></name><argument_list pos:line="67" pos:column="42">(<argument><expr><name><name pos:line="67" pos:column="43">po<pos:position pos:line="67" pos:column="45"/></name><operator pos:line="67" pos:column="45">.<pos:position pos:line="67" pos:column="46"/></operator><name pos:line="67" pos:column="46">out<pos:position pos:line="67" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="51">buf<pos:position pos:line="67" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="56">LARGE_PACKET_MAX<pos:position pos:line="67" pos:column="72"/></name></expr></argument>)<pos:position pos:line="67" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="67" pos:column="74"/></decl_stmt>
			<if pos:line="68" pos:column="25">if <condition pos:line="68" pos:column="28">(<expr><name pos:line="68" pos:column="29">n<pos:position pos:line="68" pos:column="30"/></name> <operator pos:line="68" pos:column="31">&lt;=<pos:position pos:line="68" pos:column="36"/></operator> <literal type="number" pos:line="68" pos:column="34">0<pos:position pos:line="68" pos:column="35"/></literal></expr>)<pos:position pos:line="68" pos:column="36"/></condition><then pos:line="68" pos:column="36">
				<block type="pseudo"><break pos:line="69" pos:column="33">break;<pos:position pos:line="69" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><call><name pos:line="70" pos:column="25">send_sideband<pos:position pos:line="70" pos:column="38"/></name><argument_list pos:line="70" pos:column="38">(<argument><expr><name pos:line="70" pos:column="39">fd<pos:position pos:line="70" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="70" pos:column="43">-<pos:position pos:line="70" pos:column="44"/></operator><literal type="number" pos:line="70" pos:column="44">1<pos:position pos:line="70" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="47">buf<pos:position pos:line="70" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="52">n<pos:position pos:line="70" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="55">LARGE_PACKET_MAX<pos:position pos:line="70" pos:column="71"/></name></expr></argument>)<pos:position pos:line="70" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="73"/></expr_stmt>
		}<pos:position pos:line="71" pos:column="18"/></block></while>
		<expr_stmt><expr><call><name pos:line="72" pos:column="17">free<pos:position pos:line="72" pos:column="21"/></name><argument_list pos:line="72" pos:column="21">(<argument><expr><name pos:line="72" pos:column="22">buf<pos:position pos:line="72" pos:column="25"/></name></expr></argument>)<pos:position pos:line="72" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="73" pos:column="17">close<pos:position pos:line="73" pos:column="22"/></name><argument_list pos:line="73" pos:column="22">(<argument><expr><name><name pos:line="73" pos:column="23">po<pos:position pos:line="73" pos:column="25"/></name><operator pos:line="73" pos:column="25">.<pos:position pos:line="73" pos:column="26"/></operator><name pos:line="73" pos:column="26">out<pos:position pos:line="73" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="73" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="74" pos:column="17">po<pos:position pos:line="74" pos:column="19"/></name><operator pos:line="74" pos:column="19">.<pos:position pos:line="74" pos:column="20"/></operator><name pos:line="74" pos:column="20">out<pos:position pos:line="74" pos:column="23"/></name></name> <operator pos:line="74" pos:column="24">=<pos:position pos:line="74" pos:column="25"/></operator> <operator pos:line="74" pos:column="26">-<pos:position pos:line="74" pos:column="27"/></operator><literal type="number" pos:line="74" pos:column="27">1<pos:position pos:line="74" pos:column="28"/></literal></expr>;<pos:position pos:line="74" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="75" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="77" pos:column="9">rc<pos:position pos:line="77" pos:column="11"/></name> <operator pos:line="77" pos:column="12">=<pos:position pos:line="77" pos:column="13"/></operator> <call><name pos:line="77" pos:column="14">finish_command<pos:position pos:line="77" pos:column="28"/></name><argument_list pos:line="77" pos:column="28">(<argument><expr><operator pos:line="77" pos:column="29">&amp;<pos:position pos:line="77" pos:column="34"/></operator><name pos:line="77" pos:column="30">po<pos:position pos:line="77" pos:column="32"/></name></expr></argument>)<pos:position pos:line="77" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="34"/></expr_stmt>
	<if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><name pos:line="78" pos:column="13">rc<pos:position pos:line="78" pos:column="15"/></name></expr>)<pos:position pos:line="78" pos:column="16"/></condition><then pos:line="78" pos:column="16"> <block pos:line="78" pos:column="17">{
		<comment type="block" pos:line="79" pos:column="17">/*
		 * For a normal non-zero exit, we assume pack-objects wrote
		 * something useful to stderr. For death by signal, though,
		 * we should mention it to the user. The exception is SIGPIPE
		 * (141), because that's a normal occurence if the remote end
		 * hangs up (and we'll report that by trying to read the unpack
		 * status).
		 */</comment>
		<if pos:line="87" pos:column="17">if <condition pos:line="87" pos:column="20">(<expr><name pos:line="87" pos:column="21">rc<pos:position pos:line="87" pos:column="23"/></name> <operator pos:line="87" pos:column="24">&gt;<pos:position pos:line="87" pos:column="28"/></operator> <literal type="number" pos:line="87" pos:column="26">128<pos:position pos:line="87" pos:column="29"/></literal> <operator pos:line="87" pos:column="30">&amp;&amp;<pos:position pos:line="87" pos:column="40"/></operator> <name pos:line="87" pos:column="33">rc<pos:position pos:line="87" pos:column="35"/></name> <operator pos:line="87" pos:column="36">!=<pos:position pos:line="87" pos:column="38"/></operator> <literal type="number" pos:line="87" pos:column="39">141<pos:position pos:line="87" pos:column="42"/></literal></expr>)<pos:position pos:line="87" pos:column="43"/></condition><then pos:line="87" pos:column="43">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="88" pos:column="25">error<pos:position pos:line="88" pos:column="30"/></name><argument_list pos:line="88" pos:column="30">(<argument><expr><literal type="string" pos:line="88" pos:column="31">"pack-objects died of signal %d"<pos:position pos:line="88" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="88" pos:column="65">rc<pos:position pos:line="88" pos:column="67"/></name> <operator pos:line="88" pos:column="68">-<pos:position pos:line="88" pos:column="69"/></operator> <literal type="number" pos:line="88" pos:column="70">128<pos:position pos:line="88" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="75"/></expr_stmt></block></then></if>
		<return pos:line="89" pos:column="17">return <expr><operator pos:line="89" pos:column="24">-<pos:position pos:line="89" pos:column="25"/></operator><literal type="number" pos:line="89" pos:column="25">1<pos:position pos:line="89" pos:column="26"/></literal></expr>;<pos:position pos:line="89" pos:column="27"/></return>
	}<pos:position pos:line="90" pos:column="10"/></block></then></if>
	<return pos:line="91" pos:column="9">return <expr><literal type="number" pos:line="91" pos:column="16">0<pos:position pos:line="91" pos:column="17"/></literal></expr>;<pos:position pos:line="91" pos:column="18"/></return>
}<pos:position pos:line="92" pos:column="2"/></block></function></unit>
