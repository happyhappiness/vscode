<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5759_git-2.10.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">threaded_find_deltas<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">void<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">arg<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">thread_params<pos:position pos:line="3" pos:column="29"/></name></name> <modifier pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></modifier></type><name pos:line="3" pos:column="31">me<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><name pos:line="3" pos:column="36">arg<pos:position pos:line="3" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>

	<while pos:line="5" pos:column="9">while <condition pos:line="5" pos:column="15">(<expr><name><name pos:line="5" pos:column="16">me<pos:position pos:line="5" pos:column="18"/></name><operator pos:line="5" pos:column="18">-&gt;<pos:position pos:line="5" pos:column="23"/></operator><name pos:line="5" pos:column="20">remaining<pos:position pos:line="5" pos:column="29"/></name></name></expr>)<pos:position pos:line="5" pos:column="30"/></condition> <block pos:line="5" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="6" pos:column="17">find_deltas<pos:position pos:line="6" pos:column="28"/></name><argument_list pos:line="6" pos:column="28">(<argument><expr><name><name pos:line="6" pos:column="29">me<pos:position pos:line="6" pos:column="31"/></name><operator pos:line="6" pos:column="31">-&gt;<pos:position pos:line="6" pos:column="36"/></operator><name pos:line="6" pos:column="33">list<pos:position pos:line="6" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="39">&amp;<pos:position pos:line="6" pos:column="44"/></operator><name><name pos:line="6" pos:column="40">me<pos:position pos:line="6" pos:column="42"/></name><operator pos:line="6" pos:column="42">-&gt;<pos:position pos:line="6" pos:column="47"/></operator><name pos:line="6" pos:column="44">remaining<pos:position pos:line="6" pos:column="53"/></name></name></expr></argument>,
			    <argument><expr><name><name pos:line="7" pos:column="29">me<pos:position pos:line="7" pos:column="31"/></name><operator pos:line="7" pos:column="31">-&gt;<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="33">window<pos:position pos:line="7" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="41">me<pos:position pos:line="7" pos:column="43"/></name><operator pos:line="7" pos:column="43">-&gt;<pos:position pos:line="7" pos:column="48"/></operator><name pos:line="7" pos:column="45">depth<pos:position pos:line="7" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="52">me<pos:position pos:line="7" pos:column="54"/></name><operator pos:line="7" pos:column="54">-&gt;<pos:position pos:line="7" pos:column="59"/></operator><name pos:line="7" pos:column="56">processed<pos:position pos:line="7" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="67"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="9" pos:column="17">progress_lock<pos:position pos:line="9" pos:column="30"/></name><argument_list pos:line="9" pos:column="30">()<pos:position pos:line="9" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="10" pos:column="17">me<pos:position pos:line="10" pos:column="19"/></name><operator pos:line="10" pos:column="19">-&gt;<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="21">working<pos:position pos:line="10" pos:column="28"/></name></name> <operator pos:line="10" pos:column="29">=<pos:position pos:line="10" pos:column="30"/></operator> <literal type="number" pos:line="10" pos:column="31">0<pos:position pos:line="10" pos:column="32"/></literal></expr>;<pos:position pos:line="10" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">pthread_cond_signal<pos:position pos:line="11" pos:column="36"/></name><argument_list pos:line="11" pos:column="36">(<argument><expr><operator pos:line="11" pos:column="37">&amp;<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="38">progress_cond<pos:position pos:line="11" pos:column="51"/></name></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">progress_unlock<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">()<pos:position pos:line="12" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt>

		<comment type="block" pos:line="14" pos:column="17">/*
		 * We must not set -&gt;data_ready before we wait on the
		 * condition because the main thread may have set it to 1
		 * before we get here. In order to be sure that new
		 * work is available if we see 1 in -&gt;data_ready, it
		 * was initialized to 0 before this thread was spawned
		 * and we reset it to 0 right away.
		 */</comment>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">pthread_mutex_lock<pos:position pos:line="22" pos:column="35"/></name><argument_list pos:line="22" pos:column="35">(<argument><expr><operator pos:line="22" pos:column="36">&amp;<pos:position pos:line="22" pos:column="41"/></operator><name><name pos:line="22" pos:column="37">me<pos:position pos:line="22" pos:column="39"/></name><operator pos:line="22" pos:column="39">-&gt;<pos:position pos:line="22" pos:column="44"/></operator><name pos:line="22" pos:column="41">mutex<pos:position pos:line="22" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="48"/></expr_stmt>
		<while pos:line="23" pos:column="17">while <condition pos:line="23" pos:column="23">(<expr><operator pos:line="23" pos:column="24">!<pos:position pos:line="23" pos:column="25"/></operator><name><name pos:line="23" pos:column="25">me<pos:position pos:line="23" pos:column="27"/></name><operator pos:line="23" pos:column="27">-&gt;<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="29">data_ready<pos:position pos:line="23" pos:column="39"/></name></name></expr>)<pos:position pos:line="23" pos:column="40"/></condition>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="25">pthread_cond_wait<pos:position pos:line="24" pos:column="42"/></name><argument_list pos:line="24" pos:column="42">(<argument><expr><operator pos:line="24" pos:column="43">&amp;<pos:position pos:line="24" pos:column="48"/></operator><name><name pos:line="24" pos:column="44">me<pos:position pos:line="24" pos:column="46"/></name><operator pos:line="24" pos:column="46">-&gt;<pos:position pos:line="24" pos:column="51"/></operator><name pos:line="24" pos:column="48">cond<pos:position pos:line="24" pos:column="52"/></name></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="54">&amp;<pos:position pos:line="24" pos:column="59"/></operator><name><name pos:line="24" pos:column="55">me<pos:position pos:line="24" pos:column="57"/></name><operator pos:line="24" pos:column="57">-&gt;<pos:position pos:line="24" pos:column="62"/></operator><name pos:line="24" pos:column="59">mutex<pos:position pos:line="24" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="66"/></expr_stmt></block></while>
		<expr_stmt><expr><name><name pos:line="25" pos:column="17">me<pos:position pos:line="25" pos:column="19"/></name><operator pos:line="25" pos:column="19">-&gt;<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="21">data_ready<pos:position pos:line="25" pos:column="31"/></name></name> <operator pos:line="25" pos:column="32">=<pos:position pos:line="25" pos:column="33"/></operator> <literal type="number" pos:line="25" pos:column="34">0<pos:position pos:line="25" pos:column="35"/></literal></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">pthread_mutex_unlock<pos:position pos:line="26" pos:column="37"/></name><argument_list pos:line="26" pos:column="37">(<argument><expr><operator pos:line="26" pos:column="38">&amp;<pos:position pos:line="26" pos:column="43"/></operator><name><name pos:line="26" pos:column="39">me<pos:position pos:line="26" pos:column="41"/></name><operator pos:line="26" pos:column="41">-&gt;<pos:position pos:line="26" pos:column="46"/></operator><name pos:line="26" pos:column="43">mutex<pos:position pos:line="26" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="50"/></expr_stmt>
	}<pos:position pos:line="27" pos:column="10"/></block></while>
	<comment type="block" pos:line="28" pos:column="9">/* leave -&gt;working 1 so that this doesn't get more work assigned */</comment>
	<return pos:line="29" pos:column="9">return <expr><name pos:line="29" pos:column="16">NULL<pos:position pos:line="29" pos:column="20"/></name></expr>;<pos:position pos:line="29" pos:column="21"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
