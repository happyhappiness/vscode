<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3749_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">submodule_has_commits<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">path<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="52">struct<pos:position pos:line="1" pos:column="58"/></name> <name pos:line="1" pos:column="59">oid_array<pos:position pos:line="1" pos:column="68"/></name></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">commits<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">has_commit<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><literal type="number" pos:line="3" pos:column="26">1<pos:position pos:line="3" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>

	<comment type="block" pos:line="5" pos:column="9">/*
	 * Perform a cheap, but incorrect check for the existence of 'commits'.
	 * This is done by adding the submodule's object store to the in-core
	 * object store, and then querying for each commit's existence.  If we
	 * do not have the commit object anywhere, there is no chance we have
	 * it in the object store of the correct submodule and have it
	 * reachable from a ref, so we can fail early without spawning rev-list
	 * which is expensive.
	 */</comment>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><call><name pos:line="14" pos:column="13">add_submodule_odb<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><name pos:line="14" pos:column="31">path<pos:position pos:line="14" pos:column="35"/></name></expr></argument>)<pos:position pos:line="14" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="37"/></condition><then pos:line="14" pos:column="37">
		<block type="pseudo"><return pos:line="15" pos:column="17">return <expr><literal type="number" pos:line="15" pos:column="24">0<pos:position pos:line="15" pos:column="25"/></literal></expr>;<pos:position pos:line="15" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="17" pos:column="9">oid_array_for_each_unique<pos:position pos:line="17" pos:column="34"/></name><argument_list pos:line="17" pos:column="34">(<argument><expr><name pos:line="17" pos:column="35">commits<pos:position pos:line="17" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="44">check_has_commit<pos:position pos:line="17" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="62">&amp;<pos:position pos:line="17" pos:column="67"/></operator><name pos:line="17" pos:column="63">has_commit<pos:position pos:line="17" pos:column="73"/></name></expr></argument>)<pos:position pos:line="17" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="75"/></expr_stmt>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">has_commit<pos:position pos:line="19" pos:column="23"/></name></expr>)<pos:position pos:line="19" pos:column="24"/></condition><then pos:line="19" pos:column="24"> <block pos:line="19" pos:column="25">{
		<comment type="block" pos:line="20" pos:column="17">/*
		 * Even if the submodule is checked out and the commit is
		 * present, make sure it exists in the submodule's object store
		 * and that it is reachable from a ref.
		 */</comment>
		<decl_stmt><decl><type><name><name pos:line="25" pos:column="17">struct<pos:position pos:line="25" pos:column="23"/></name> <name pos:line="25" pos:column="24">child_process<pos:position pos:line="25" pos:column="37"/></name></name></type> <name pos:line="25" pos:column="38">cp<pos:position pos:line="25" pos:column="40"/></name> <init pos:line="25" pos:column="41">= <expr><name pos:line="25" pos:column="43">CHILD_PROCESS_INIT<pos:position pos:line="25" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="25" pos:column="62"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="26" pos:column="17">struct<pos:position pos:line="26" pos:column="23"/></name> <name pos:line="26" pos:column="24">strbuf<pos:position pos:line="26" pos:column="30"/></name></name></type> <name pos:line="26" pos:column="31">out<pos:position pos:line="26" pos:column="34"/></name> <init pos:line="26" pos:column="35">= <expr><name pos:line="26" pos:column="37">STRBUF_INIT<pos:position pos:line="26" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="26" pos:column="49"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="28" pos:column="17">argv_array_pushl<pos:position pos:line="28" pos:column="33"/></name><argument_list pos:line="28" pos:column="33">(<argument><expr><operator pos:line="28" pos:column="34">&amp;<pos:position pos:line="28" pos:column="39"/></operator><name><name pos:line="28" pos:column="35">cp<pos:position pos:line="28" pos:column="37"/></name><operator pos:line="28" pos:column="37">.<pos:position pos:line="28" pos:column="38"/></operator><name pos:line="28" pos:column="38">args<pos:position pos:line="28" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="44">"rev-list"<pos:position pos:line="28" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="56">"-n"<pos:position pos:line="28" pos:column="60"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="62">"1"<pos:position pos:line="28" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="67">NULL<pos:position pos:line="28" pos:column="71"/></name></expr></argument>)<pos:position pos:line="28" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="73"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">oid_array_for_each_unique<pos:position pos:line="29" pos:column="42"/></name><argument_list pos:line="29" pos:column="42">(<argument><expr><name pos:line="29" pos:column="43">commits<pos:position pos:line="29" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="52">append_oid_to_argv<pos:position pos:line="29" pos:column="70"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="72">&amp;<pos:position pos:line="29" pos:column="77"/></operator><name><name pos:line="29" pos:column="73">cp<pos:position pos:line="29" pos:column="75"/></name><operator pos:line="29" pos:column="75">.<pos:position pos:line="29" pos:column="76"/></operator><name pos:line="29" pos:column="76">args<pos:position pos:line="29" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="82"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">argv_array_pushl<pos:position pos:line="30" pos:column="33"/></name><argument_list pos:line="30" pos:column="33">(<argument><expr><operator pos:line="30" pos:column="34">&amp;<pos:position pos:line="30" pos:column="39"/></operator><name><name pos:line="30" pos:column="35">cp<pos:position pos:line="30" pos:column="37"/></name><operator pos:line="30" pos:column="37">.<pos:position pos:line="30" pos:column="38"/></operator><name pos:line="30" pos:column="38">args<pos:position pos:line="30" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="44">"--not"<pos:position pos:line="30" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="53">"--all"<pos:position pos:line="30" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="62">NULL<pos:position pos:line="30" pos:column="66"/></name></expr></argument>)<pos:position pos:line="30" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="68"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="32" pos:column="17">prepare_submodule_repo_env<pos:position pos:line="32" pos:column="43"/></name><argument_list pos:line="32" pos:column="43">(<argument><expr><operator pos:line="32" pos:column="44">&amp;<pos:position pos:line="32" pos:column="49"/></operator><name><name pos:line="32" pos:column="45">cp<pos:position pos:line="32" pos:column="47"/></name><operator pos:line="32" pos:column="47">.<pos:position pos:line="32" pos:column="48"/></operator><name pos:line="32" pos:column="48">env_array<pos:position pos:line="32" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="33" pos:column="17">cp<pos:position pos:line="33" pos:column="19"/></name><operator pos:line="33" pos:column="19">.<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="20">git_cmd<pos:position pos:line="33" pos:column="27"/></name></name> <operator pos:line="33" pos:column="28">=<pos:position pos:line="33" pos:column="29"/></operator> <literal type="number" pos:line="33" pos:column="30">1<pos:position pos:line="33" pos:column="31"/></literal></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="34" pos:column="17">cp<pos:position pos:line="34" pos:column="19"/></name><operator pos:line="34" pos:column="19">.<pos:position pos:line="34" pos:column="20"/></operator><name pos:line="34" pos:column="20">no_stdin<pos:position pos:line="34" pos:column="28"/></name></name> <operator pos:line="34" pos:column="29">=<pos:position pos:line="34" pos:column="30"/></operator> <literal type="number" pos:line="34" pos:column="31">1<pos:position pos:line="34" pos:column="32"/></literal></expr>;<pos:position pos:line="34" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="35" pos:column="17">cp<pos:position pos:line="35" pos:column="19"/></name><operator pos:line="35" pos:column="19">.<pos:position pos:line="35" pos:column="20"/></operator><name pos:line="35" pos:column="20">dir<pos:position pos:line="35" pos:column="23"/></name></name> <operator pos:line="35" pos:column="24">=<pos:position pos:line="35" pos:column="25"/></operator> <name pos:line="35" pos:column="26">path<pos:position pos:line="35" pos:column="30"/></name></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>

		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><call><name pos:line="37" pos:column="21">capture_command<pos:position pos:line="37" pos:column="36"/></name><argument_list pos:line="37" pos:column="36">(<argument><expr><operator pos:line="37" pos:column="37">&amp;<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="38">cp<pos:position pos:line="37" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="42">&amp;<pos:position pos:line="37" pos:column="47"/></operator><name pos:line="37" pos:column="43">out<pos:position pos:line="37" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="48">GIT_MAX_HEXSZ<pos:position pos:line="37" pos:column="61"/></name> <operator pos:line="37" pos:column="62">+<pos:position pos:line="37" pos:column="63"/></operator> <literal type="number" pos:line="37" pos:column="64">1<pos:position pos:line="37" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="66"/></argument_list></call> <operator pos:line="37" pos:column="67">||<pos:position pos:line="37" pos:column="69"/></operator> <name><name pos:line="37" pos:column="70">out<pos:position pos:line="37" pos:column="73"/></name><operator pos:line="37" pos:column="73">.<pos:position pos:line="37" pos:column="74"/></operator><name pos:line="37" pos:column="74">len<pos:position pos:line="37" pos:column="77"/></name></name></expr>)<pos:position pos:line="37" pos:column="78"/></condition><then pos:line="37" pos:column="78">
			<block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="25">has_commit<pos:position pos:line="38" pos:column="35"/></name> <operator pos:line="38" pos:column="36">=<pos:position pos:line="38" pos:column="37"/></operator> <literal type="number" pos:line="38" pos:column="38">0<pos:position pos:line="38" pos:column="39"/></literal></expr>;<pos:position pos:line="38" pos:column="40"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="40" pos:column="17">strbuf_release<pos:position pos:line="40" pos:column="31"/></name><argument_list pos:line="40" pos:column="31">(<argument><expr><operator pos:line="40" pos:column="32">&amp;<pos:position pos:line="40" pos:column="37"/></operator><name pos:line="40" pos:column="33">out<pos:position pos:line="40" pos:column="36"/></name></expr></argument>)<pos:position pos:line="40" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>

	<return pos:line="43" pos:column="9">return <expr><name pos:line="43" pos:column="16">has_commit<pos:position pos:line="43" pos:column="26"/></name></expr>;<pos:position pos:line="43" pos:column="27"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
