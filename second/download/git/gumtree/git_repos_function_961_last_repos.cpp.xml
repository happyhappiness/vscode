<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_961_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">cleanup_children<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">sig<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="39">int<pos:position pos:line="1" pos:column="42"/></name></type> <name pos:line="1" pos:column="43">in_signal<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">child_to_clean<pos:position pos:line="3" pos:column="30"/></name></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier></type><name pos:line="3" pos:column="32">children_to_wait_for<pos:position pos:line="3" pos:column="52"/></name> <init pos:line="3" pos:column="53">= <expr><name pos:line="3" pos:column="55">NULL<pos:position pos:line="3" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="60"/></decl_stmt>

	<while pos:line="5" pos:column="9">while <condition pos:line="5" pos:column="15">(<expr><name pos:line="5" pos:column="16">children_to_clean<pos:position pos:line="5" pos:column="33"/></name></expr>)<pos:position pos:line="5" pos:column="34"/></condition> <block pos:line="5" pos:column="35">{
		<decl_stmt><decl><type><name><name pos:line="6" pos:column="17">struct<pos:position pos:line="6" pos:column="23"/></name> <name pos:line="6" pos:column="24">child_to_clean<pos:position pos:line="6" pos:column="38"/></name></name> <modifier pos:line="6" pos:column="39">*<pos:position pos:line="6" pos:column="40"/></modifier></type><name pos:line="6" pos:column="40">p<pos:position pos:line="6" pos:column="41"/></name> <init pos:line="6" pos:column="42">= <expr><name pos:line="6" pos:column="44">children_to_clean<pos:position pos:line="6" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="62"/></decl_stmt>
		<expr_stmt><expr><name pos:line="7" pos:column="17">children_to_clean<pos:position pos:line="7" pos:column="34"/></name> <operator pos:line="7" pos:column="35">=<pos:position pos:line="7" pos:column="36"/></operator> <name><name pos:line="7" pos:column="37">p<pos:position pos:line="7" pos:column="38"/></name><operator pos:line="7" pos:column="38">-&gt;<pos:position pos:line="7" pos:column="43"/></operator><name pos:line="7" pos:column="40">next<pos:position pos:line="7" pos:column="44"/></name></name></expr>;<pos:position pos:line="7" pos:column="45"/></expr_stmt>

		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name><name pos:line="9" pos:column="21">p<pos:position pos:line="9" pos:column="22"/></name><operator pos:line="9" pos:column="22">-&gt;<pos:position pos:line="9" pos:column="27"/></operator><name pos:line="9" pos:column="24">process<pos:position pos:line="9" pos:column="31"/></name></name> <operator pos:line="9" pos:column="32">&amp;&amp;<pos:position pos:line="9" pos:column="42"/></operator> <operator pos:line="9" pos:column="35">!<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="36">in_signal<pos:position pos:line="9" pos:column="45"/></name></expr>)<pos:position pos:line="9" pos:column="46"/></condition><then pos:line="9" pos:column="46"> <block pos:line="9" pos:column="47">{
			<decl_stmt><decl><type><name><name pos:line="10" pos:column="25">struct<pos:position pos:line="10" pos:column="31"/></name> <name pos:line="10" pos:column="32">child_process<pos:position pos:line="10" pos:column="45"/></name></name> <modifier pos:line="10" pos:column="46">*<pos:position pos:line="10" pos:column="47"/></modifier></type><name pos:line="10" pos:column="47">process<pos:position pos:line="10" pos:column="54"/></name> <init pos:line="10" pos:column="55">= <expr><name><name pos:line="10" pos:column="57">p<pos:position pos:line="10" pos:column="58"/></name><operator pos:line="10" pos:column="58">-&gt;<pos:position pos:line="10" pos:column="63"/></operator><name pos:line="10" pos:column="60">process<pos:position pos:line="10" pos:column="67"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="68"/></decl_stmt>
			<if pos:line="11" pos:column="25">if <condition pos:line="11" pos:column="28">(<expr><name><name pos:line="11" pos:column="29">process<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">-&gt;<pos:position pos:line="11" pos:column="41"/></operator><name pos:line="11" pos:column="38">clean_on_exit_handler<pos:position pos:line="11" pos:column="59"/></name></name></expr>)<pos:position pos:line="11" pos:column="60"/></condition><then pos:line="11" pos:column="60"> <block pos:line="11" pos:column="61">{
				<expr_stmt><expr><call><name pos:line="12" pos:column="33">trace_printf<pos:position pos:line="12" pos:column="45"/></name><argument_list pos:line="12" pos:column="45">(
					<argument><expr><literal type="string" pos:line="13" pos:column="41">"trace: run_command: running exit handler for pid %"<pos:position pos:line="13" pos:column="93"/></literal>
					<name pos:line="14" pos:column="41">PRIuMAX<pos:position pos:line="14" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="50">(<pos:position pos:line="14" pos:column="51"/></operator><name pos:line="14" pos:column="51">uintmax_t<pos:position pos:line="14" pos:column="60"/></name><operator pos:line="14" pos:column="60">)<pos:position pos:line="14" pos:column="61"/></operator><name><name pos:line="14" pos:column="61">p<pos:position pos:line="14" pos:column="62"/></name><operator pos:line="14" pos:column="62">-&gt;<pos:position pos:line="14" pos:column="67"/></operator><name pos:line="14" pos:column="64">pid<pos:position pos:line="14" pos:column="67"/></name></name></expr></argument>
				)<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="16" pos:column="33">process<pos:position pos:line="16" pos:column="40"/></name><operator pos:line="16" pos:column="40">-&gt;<pos:position pos:line="16" pos:column="45"/></operator><name pos:line="16" pos:column="42">clean_on_exit_handler<pos:position pos:line="16" pos:column="63"/></name></name><argument_list pos:line="16" pos:column="63">(<argument><expr><name pos:line="16" pos:column="64">process<pos:position pos:line="16" pos:column="71"/></name></expr></argument>)<pos:position pos:line="16" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="73"/></expr_stmt>
			}<pos:position pos:line="17" pos:column="26"/></block></then></if>
		}<pos:position pos:line="18" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="20" pos:column="17">kill<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><name><name pos:line="20" pos:column="22">p<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">-&gt;<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="25">pid<pos:position pos:line="20" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="30">sig<pos:position pos:line="20" pos:column="33"/></name></expr></argument>)<pos:position pos:line="20" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="35"/></expr_stmt>

		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name><name pos:line="22" pos:column="21">p<pos:position pos:line="22" pos:column="22"/></name><operator pos:line="22" pos:column="22">-&gt;<pos:position pos:line="22" pos:column="27"/></operator><name pos:line="22" pos:column="24">process<pos:position pos:line="22" pos:column="31"/></name></name> <operator pos:line="22" pos:column="32">&amp;&amp;<pos:position pos:line="22" pos:column="42"/></operator> <name><name pos:line="22" pos:column="35">p<pos:position pos:line="22" pos:column="36"/></name><operator pos:line="22" pos:column="36">-&gt;<pos:position pos:line="22" pos:column="41"/></operator><name pos:line="22" pos:column="38">process<pos:position pos:line="22" pos:column="45"/></name><operator pos:line="22" pos:column="45">-&gt;<pos:position pos:line="22" pos:column="50"/></operator><name pos:line="22" pos:column="47">wait_after_clean<pos:position pos:line="22" pos:column="63"/></name></name></expr>)<pos:position pos:line="22" pos:column="64"/></condition><then pos:line="22" pos:column="64"> <block pos:line="22" pos:column="65">{
			<expr_stmt><expr><name><name pos:line="23" pos:column="25">p<pos:position pos:line="23" pos:column="26"/></name><operator pos:line="23" pos:column="26">-&gt;<pos:position pos:line="23" pos:column="31"/></operator><name pos:line="23" pos:column="28">next<pos:position pos:line="23" pos:column="32"/></name></name> <operator pos:line="23" pos:column="33">=<pos:position pos:line="23" pos:column="34"/></operator> <name pos:line="23" pos:column="35">children_to_wait_for<pos:position pos:line="23" pos:column="55"/></name></expr>;<pos:position pos:line="23" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><name pos:line="24" pos:column="25">children_to_wait_for<pos:position pos:line="24" pos:column="45"/></name> <operator pos:line="24" pos:column="46">=<pos:position pos:line="24" pos:column="47"/></operator> <name pos:line="24" pos:column="48">p<pos:position pos:line="24" pos:column="49"/></name></expr>;<pos:position pos:line="24" pos:column="50"/></expr_stmt>
		}<pos:position pos:line="25" pos:column="18"/></block></then> <else pos:line="25" pos:column="19">else <block pos:line="25" pos:column="24">{
			<if pos:line="26" pos:column="25">if <condition pos:line="26" pos:column="28">(<expr><operator pos:line="26" pos:column="29">!<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="30">in_signal<pos:position pos:line="26" pos:column="39"/></name></expr>)<pos:position pos:line="26" pos:column="40"/></condition><then pos:line="26" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="33">free<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">(<argument><expr><name pos:line="27" pos:column="38">p<pos:position pos:line="27" pos:column="39"/></name></expr></argument>)<pos:position pos:line="27" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="41"/></expr_stmt></block></then></if>
		}<pos:position pos:line="28" pos:column="18"/></block></else></if>
	}<pos:position pos:line="29" pos:column="10"/></block></while>

	<while pos:line="31" pos:column="9">while <condition pos:line="31" pos:column="15">(<expr><name pos:line="31" pos:column="16">children_to_wait_for<pos:position pos:line="31" pos:column="36"/></name></expr>)<pos:position pos:line="31" pos:column="37"/></condition> <block pos:line="31" pos:column="38">{
		<decl_stmt><decl><type><name><name pos:line="32" pos:column="17">struct<pos:position pos:line="32" pos:column="23"/></name> <name pos:line="32" pos:column="24">child_to_clean<pos:position pos:line="32" pos:column="38"/></name></name> <modifier pos:line="32" pos:column="39">*<pos:position pos:line="32" pos:column="40"/></modifier></type><name pos:line="32" pos:column="40">p<pos:position pos:line="32" pos:column="41"/></name> <init pos:line="32" pos:column="42">= <expr><name pos:line="32" pos:column="44">children_to_wait_for<pos:position pos:line="32" pos:column="64"/></name></expr></init></decl>;<pos:position pos:line="32" pos:column="65"/></decl_stmt>
		<expr_stmt><expr><name pos:line="33" pos:column="17">children_to_wait_for<pos:position pos:line="33" pos:column="37"/></name> <operator pos:line="33" pos:column="38">=<pos:position pos:line="33" pos:column="39"/></operator> <name><name pos:line="33" pos:column="40">p<pos:position pos:line="33" pos:column="41"/></name><operator pos:line="33" pos:column="41">-&gt;<pos:position pos:line="33" pos:column="46"/></operator><name pos:line="33" pos:column="43">next<pos:position pos:line="33" pos:column="47"/></name></name></expr>;<pos:position pos:line="33" pos:column="48"/></expr_stmt>

		<while pos:line="35" pos:column="17">while <condition pos:line="35" pos:column="23">(<expr><call><name pos:line="35" pos:column="24">waitpid<pos:position pos:line="35" pos:column="31"/></name><argument_list pos:line="35" pos:column="31">(<argument><expr><name><name pos:line="35" pos:column="32">p<pos:position pos:line="35" pos:column="33"/></name><operator pos:line="35" pos:column="33">-&gt;<pos:position pos:line="35" pos:column="38"/></operator><name pos:line="35" pos:column="35">pid<pos:position pos:line="35" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="40">NULL<pos:position pos:line="35" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="46">0<pos:position pos:line="35" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="48"/></argument_list></call> <operator pos:line="35" pos:column="49">&lt;<pos:position pos:line="35" pos:column="53"/></operator> <literal type="number" pos:line="35" pos:column="51">0<pos:position pos:line="35" pos:column="52"/></literal> <operator pos:line="35" pos:column="53">&amp;&amp;<pos:position pos:line="35" pos:column="63"/></operator> <name pos:line="35" pos:column="56">errno<pos:position pos:line="35" pos:column="61"/></name> <operator pos:line="35" pos:column="62">==<pos:position pos:line="35" pos:column="64"/></operator> <name pos:line="35" pos:column="65">EINTR<pos:position pos:line="35" pos:column="70"/></name></expr>)<pos:position pos:line="35" pos:column="71"/></condition>
			<block type="pseudo"><empty_stmt pos:line="36" pos:column="25">;<pos:position pos:line="36" pos:column="26"/></empty_stmt></block></while> <comment type="block" pos:line="36" pos:column="27">/* spin waiting for process exit or error */</comment>

		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><operator pos:line="38" pos:column="21">!<pos:position pos:line="38" pos:column="22"/></operator><name pos:line="38" pos:column="22">in_signal<pos:position pos:line="38" pos:column="31"/></name></expr>)<pos:position pos:line="38" pos:column="32"/></condition><then pos:line="38" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="25">free<pos:position pos:line="39" pos:column="29"/></name><argument_list pos:line="39" pos:column="29">(<argument><expr><name pos:line="39" pos:column="30">p<pos:position pos:line="39" pos:column="31"/></name></expr></argument>)<pos:position pos:line="39" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="33"/></expr_stmt></block></then></if>
	}<pos:position pos:line="40" pos:column="10"/></block></while>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
