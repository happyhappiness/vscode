<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6864_git-2.14.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">sys_trim<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">mstate<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">m<pos:position pos:line="1" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="31">size_t<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">pad<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list> <block pos:line="1" pos:column="43">{
  <decl_stmt><decl><type><name pos:line="2" pos:column="3">size_t<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">released<pos:position pos:line="2" pos:column="18"/></name> <init pos:line="2" pos:column="19">= <expr><literal type="number" pos:line="2" pos:column="21">0<pos:position pos:line="2" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="2" pos:column="23"/></decl_stmt>
  <expr_stmt><expr><call><name pos:line="3" pos:column="3">ensure_initialization<pos:position pos:line="3" pos:column="24"/></name><argument_list pos:line="3" pos:column="24">()<pos:position pos:line="3" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="27"/></expr_stmt>
  <if pos:line="4" pos:column="3">if <condition pos:line="4" pos:column="6">(<expr><name pos:line="4" pos:column="7">pad<pos:position pos:line="4" pos:column="10"/></name> <operator pos:line="4" pos:column="11">&lt;<pos:position pos:line="4" pos:column="15"/></operator> <name pos:line="4" pos:column="13">MAX_REQUEST<pos:position pos:line="4" pos:column="24"/></name> <operator pos:line="4" pos:column="25">&amp;&amp;<pos:position pos:line="4" pos:column="35"/></operator> <call><name pos:line="4" pos:column="28">is_initialized<pos:position pos:line="4" pos:column="42"/></name><argument_list pos:line="4" pos:column="42">(<argument><expr><name pos:line="4" pos:column="43">m<pos:position pos:line="4" pos:column="44"/></name></expr></argument>)<pos:position pos:line="4" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="46"/></condition><then pos:line="4" pos:column="46"> <block pos:line="4" pos:column="47">{
    <expr_stmt><expr><name pos:line="5" pos:column="5">pad<pos:position pos:line="5" pos:column="8"/></name> <operator pos:line="5" pos:column="9">+=<pos:position pos:line="5" pos:column="11"/></operator> <name pos:line="5" pos:column="12">TOP_FOOT_SIZE<pos:position pos:line="5" pos:column="25"/></name></expr>;<pos:position pos:line="5" pos:column="26"/></expr_stmt> <comment type="block" pos:line="5" pos:column="27">/* ensure enough room for segment overhead */</comment>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name><name pos:line="7" pos:column="9">m<pos:position pos:line="7" pos:column="10"/></name><operator pos:line="7" pos:column="10">-&gt;<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="12">topsize<pos:position pos:line="7" pos:column="19"/></name></name> <operator pos:line="7" pos:column="20">&gt;<pos:position pos:line="7" pos:column="24"/></operator> <name pos:line="7" pos:column="22">pad<pos:position pos:line="7" pos:column="25"/></name></expr>)<pos:position pos:line="7" pos:column="26"/></condition><then pos:line="7" pos:column="26"> <block pos:line="7" pos:column="27">{
      <comment type="block" pos:line="8" pos:column="7">/* Shrink top space in granularity-size units, keeping at least one */</comment>
      <decl_stmt><decl><type><name pos:line="9" pos:column="7">size_t<pos:position pos:line="9" pos:column="13"/></name></type> <name pos:line="9" pos:column="14">unit<pos:position pos:line="9" pos:column="18"/></name> <init pos:line="9" pos:column="19">= <expr><name><name pos:line="9" pos:column="21">mparams<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">.<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="29">granularity<pos:position pos:line="9" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="41"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="10" pos:column="7">size_t<pos:position pos:line="10" pos:column="13"/></name></type> <name pos:line="10" pos:column="14">extra<pos:position pos:line="10" pos:column="19"/></name> <init pos:line="10" pos:column="20">= <expr><operator pos:line="10" pos:column="22">(<pos:position pos:line="10" pos:column="23"/></operator><operator pos:line="10" pos:column="23">(<pos:position pos:line="10" pos:column="24"/></operator><name><name pos:line="10" pos:column="24">m<pos:position pos:line="10" pos:column="25"/></name><operator pos:line="10" pos:column="25">-&gt;<pos:position pos:line="10" pos:column="30"/></operator><name pos:line="10" pos:column="27">topsize<pos:position pos:line="10" pos:column="34"/></name></name> <operator pos:line="10" pos:column="35">-<pos:position pos:line="10" pos:column="36"/></operator> <name pos:line="10" pos:column="37">pad<pos:position pos:line="10" pos:column="40"/></name> <operator pos:line="10" pos:column="41">+<pos:position pos:line="10" pos:column="42"/></operator> <operator pos:line="10" pos:column="43">(<pos:position pos:line="10" pos:column="44"/></operator><name pos:line="10" pos:column="44">unit<pos:position pos:line="10" pos:column="48"/></name> <operator pos:line="10" pos:column="49">-<pos:position pos:line="10" pos:column="50"/></operator> <name pos:line="10" pos:column="51">SIZE_T_ONE<pos:position pos:line="10" pos:column="61"/></name><operator pos:line="10" pos:column="61">)<pos:position pos:line="10" pos:column="62"/></operator><operator pos:line="10" pos:column="62">)<pos:position pos:line="10" pos:column="63"/></operator> <operator pos:line="10" pos:column="64">/<pos:position pos:line="10" pos:column="65"/></operator> <name pos:line="10" pos:column="66">unit<pos:position pos:line="10" pos:column="70"/></name> <operator pos:line="10" pos:column="71">-<pos:position pos:line="10" pos:column="72"/></operator>
		      <name pos:line="11" pos:column="23">SIZE_T_ONE<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">)<pos:position pos:line="11" pos:column="34"/></operator> <operator pos:line="11" pos:column="35">*<pos:position pos:line="11" pos:column="36"/></operator> <name pos:line="11" pos:column="37">unit<pos:position pos:line="11" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="42"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="12" pos:column="7">msegmentptr<pos:position pos:line="12" pos:column="18"/></name></type> <name pos:line="12" pos:column="19">sp<pos:position pos:line="12" pos:column="21"/></name> <init pos:line="12" pos:column="22">= <expr><call><name pos:line="12" pos:column="24">segment_holding<pos:position pos:line="12" pos:column="39"/></name><argument_list pos:line="12" pos:column="39">(<argument><expr><name pos:line="12" pos:column="40">m<pos:position pos:line="12" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="43">(<pos:position pos:line="12" pos:column="44"/></operator><name pos:line="12" pos:column="44">char<pos:position pos:line="12" pos:column="48"/></name><operator pos:line="12" pos:column="48">*<pos:position pos:line="12" pos:column="49"/></operator><operator pos:line="12" pos:column="49">)<pos:position pos:line="12" pos:column="50"/></operator><name><name pos:line="12" pos:column="50">m<pos:position pos:line="12" pos:column="51"/></name><operator pos:line="12" pos:column="51">-&gt;<pos:position pos:line="12" pos:column="56"/></operator><name pos:line="12" pos:column="53">top<pos:position pos:line="12" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="58"/></decl_stmt>

      <if pos:line="14" pos:column="7">if <condition pos:line="14" pos:column="10">(<expr><operator pos:line="14" pos:column="11">!<pos:position pos:line="14" pos:column="12"/></operator><call><name pos:line="14" pos:column="12">is_extern_segment<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">sp<pos:position pos:line="14" pos:column="32"/></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="34"/></condition><then pos:line="14" pos:column="34"> <block pos:line="14" pos:column="35">{
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">is_mmapped_segment<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><name pos:line="15" pos:column="32">sp<pos:position pos:line="15" pos:column="34"/></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="36"/></condition><then pos:line="15" pos:column="36"> <block pos:line="15" pos:column="37">{
	  <if pos:line="16" pos:column="11">if <condition pos:line="16" pos:column="14">(<expr><name pos:line="16" pos:column="15">HAVE_MMAP<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">&amp;&amp;<pos:position pos:line="16" pos:column="35"/></operator>
	      <name><name pos:line="17" pos:column="15">sp<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">-&gt;<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="19">size<pos:position pos:line="17" pos:column="23"/></name></name> <operator pos:line="17" pos:column="24">&gt;=<pos:position pos:line="17" pos:column="29"/></operator> <name pos:line="17" pos:column="27">extra<pos:position pos:line="17" pos:column="32"/></name> <operator pos:line="17" pos:column="33">&amp;&amp;<pos:position pos:line="17" pos:column="43"/></operator>
	      <operator pos:line="18" pos:column="15">!<pos:position pos:line="18" pos:column="16"/></operator><call><name pos:line="18" pos:column="16">has_segment_link<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">m<pos:position pos:line="18" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="36">sp<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="40"/></condition><then pos:line="18" pos:column="40"> <block pos:line="18" pos:column="41">{ <comment type="block" pos:line="18" pos:column="43">/* can't shrink if pinned */</comment>
	    <decl_stmt><decl><type><name pos:line="19" pos:column="13">size_t<pos:position pos:line="19" pos:column="19"/></name></type> <name pos:line="19" pos:column="20">newsize<pos:position pos:line="19" pos:column="27"/></name> <init pos:line="19" pos:column="28">= <expr><name><name pos:line="19" pos:column="30">sp<pos:position pos:line="19" pos:column="32"/></name><operator pos:line="19" pos:column="32">-&gt;<pos:position pos:line="19" pos:column="37"/></operator><name pos:line="19" pos:column="34">size<pos:position pos:line="19" pos:column="38"/></name></name> <operator pos:line="19" pos:column="39">-<pos:position pos:line="19" pos:column="40"/></operator> <name pos:line="19" pos:column="41">extra<pos:position pos:line="19" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="47"/></decl_stmt>
	    <comment type="block" pos:line="20" pos:column="13">/* Prefer mremap, fall back to munmap */</comment>
	    <if pos:line="21" pos:column="13">if <condition pos:line="21" pos:column="16">(<expr><operator pos:line="21" pos:column="17">(<pos:position pos:line="21" pos:column="18"/></operator><call><name pos:line="21" pos:column="18">CALL_MREMAP<pos:position pos:line="21" pos:column="29"/></name><argument_list pos:line="21" pos:column="29">(<argument><expr><name><name pos:line="21" pos:column="30">sp<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">-&gt;<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="34">base<pos:position pos:line="21" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="40">sp<pos:position pos:line="21" pos:column="42"/></name><operator pos:line="21" pos:column="42">-&gt;<pos:position pos:line="21" pos:column="47"/></operator><name pos:line="21" pos:column="44">size<pos:position pos:line="21" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="50">newsize<pos:position pos:line="21" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="59">0<pos:position pos:line="21" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="61"/></argument_list></call> <operator pos:line="21" pos:column="62">!=<pos:position pos:line="21" pos:column="64"/></operator> <name pos:line="21" pos:column="65">MFAIL<pos:position pos:line="21" pos:column="70"/></name><operator pos:line="21" pos:column="70">)<pos:position pos:line="21" pos:column="71"/></operator> <operator pos:line="21" pos:column="72">||<pos:position pos:line="21" pos:column="74"/></operator>
		<operator pos:line="22" pos:column="17">(<pos:position pos:line="22" pos:column="18"/></operator><call><name pos:line="22" pos:column="18">CALL_MUNMAP<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name><name pos:line="22" pos:column="30">sp<pos:position pos:line="22" pos:column="32"/></name><operator pos:line="22" pos:column="32">-&gt;<pos:position pos:line="22" pos:column="37"/></operator><name pos:line="22" pos:column="34">base<pos:position pos:line="22" pos:column="38"/></name></name> <operator pos:line="22" pos:column="39">+<pos:position pos:line="22" pos:column="40"/></operator> <name pos:line="22" pos:column="41">newsize<pos:position pos:line="22" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="50">extra<pos:position pos:line="22" pos:column="55"/></name></expr></argument>)<pos:position pos:line="22" pos:column="56"/></argument_list></call> <operator pos:line="22" pos:column="57">==<pos:position pos:line="22" pos:column="59"/></operator> <literal type="number" pos:line="22" pos:column="60">0<pos:position pos:line="22" pos:column="61"/></literal><operator pos:line="22" pos:column="61">)<pos:position pos:line="22" pos:column="62"/></operator></expr>)<pos:position pos:line="22" pos:column="63"/></condition><then pos:line="22" pos:column="63"> <block pos:line="22" pos:column="64">{
	      <expr_stmt><expr><name pos:line="23" pos:column="15">released<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">=<pos:position pos:line="23" pos:column="25"/></operator> <name pos:line="23" pos:column="26">extra<pos:position pos:line="23" pos:column="31"/></name></expr>;<pos:position pos:line="23" pos:column="32"/></expr_stmt>
	    }<pos:position pos:line="24" pos:column="14"/></block></then></if>
	  }<pos:position pos:line="25" pos:column="12"/></block></then></if>
	}<pos:position pos:line="26" pos:column="10"/></block></then>
	<elseif pos:line="27" pos:column="9">else <if pos:line="27" pos:column="14">if <condition pos:line="27" pos:column="17">(<expr><name pos:line="27" pos:column="18">HAVE_MORECORE<pos:position pos:line="27" pos:column="31"/></name></expr>)<pos:position pos:line="27" pos:column="32"/></condition><then pos:line="27" pos:column="32"> <block pos:line="27" pos:column="33">{
	  <if pos:line="28" pos:column="11">if <condition pos:line="28" pos:column="14">(<expr><name pos:line="28" pos:column="15">extra<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">&gt;=<pos:position pos:line="28" pos:column="26"/></operator> <name pos:line="28" pos:column="24">HALF_MAX_SIZE_T<pos:position pos:line="28" pos:column="39"/></name></expr>)<pos:position pos:line="28" pos:column="40"/></condition><then pos:line="28" pos:column="40"> <comment type="block" pos:line="28" pos:column="41">/* Avoid wrapping negative */</comment>
	    <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="13">extra<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <operator pos:line="29" pos:column="21">(<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="22">HALF_MAX_SIZE_T<pos:position pos:line="29" pos:column="37"/></name><operator pos:line="29" pos:column="37">)<pos:position pos:line="29" pos:column="38"/></operator> <operator pos:line="29" pos:column="39">+<pos:position pos:line="29" pos:column="40"/></operator> <name pos:line="29" pos:column="41">SIZE_T_ONE<pos:position pos:line="29" pos:column="51"/></name> <operator pos:line="29" pos:column="52">-<pos:position pos:line="29" pos:column="53"/></operator> <name pos:line="29" pos:column="54">unit<pos:position pos:line="29" pos:column="58"/></name></expr>;<pos:position pos:line="29" pos:column="59"/></expr_stmt></block></then></if>
	  <expr_stmt><expr><call><name pos:line="30" pos:column="11">ACQUIRE_MALLOC_GLOBAL_LOCK<pos:position pos:line="30" pos:column="37"/></name><argument_list pos:line="30" pos:column="37">()<pos:position pos:line="30" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt>
	  <block pos:line="31" pos:column="11">{
	    <comment type="block" pos:line="32" pos:column="13">/* Make sure end of memory is where we last set it. */</comment>
	    <decl_stmt><decl><type><name pos:line="33" pos:column="13">char<pos:position pos:line="33" pos:column="17"/></name><modifier pos:line="33" pos:column="17">*<pos:position pos:line="33" pos:column="18"/></modifier></type> <name pos:line="33" pos:column="19">old_br<pos:position pos:line="33" pos:column="25"/></name> <init pos:line="33" pos:column="26">= <expr><operator pos:line="33" pos:column="28">(<pos:position pos:line="33" pos:column="29"/></operator><name pos:line="33" pos:column="29">char<pos:position pos:line="33" pos:column="33"/></name><operator pos:line="33" pos:column="33">*<pos:position pos:line="33" pos:column="34"/></operator><operator pos:line="33" pos:column="34">)<pos:position pos:line="33" pos:column="35"/></operator><operator pos:line="33" pos:column="35">(<pos:position pos:line="33" pos:column="36"/></operator><call><name pos:line="33" pos:column="36">CALL_MORECORE<pos:position pos:line="33" pos:column="49"/></name><argument_list pos:line="33" pos:column="49">(<argument><expr><literal type="number" pos:line="33" pos:column="50">0<pos:position pos:line="33" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="52"/></argument_list></call><operator pos:line="33" pos:column="52">)<pos:position pos:line="33" pos:column="53"/></operator></expr></init></decl>;<pos:position pos:line="33" pos:column="54"/></decl_stmt>
	    <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">(<expr><name pos:line="34" pos:column="17">old_br<pos:position pos:line="34" pos:column="23"/></name> <operator pos:line="34" pos:column="24">==<pos:position pos:line="34" pos:column="26"/></operator> <name><name pos:line="34" pos:column="27">sp<pos:position pos:line="34" pos:column="29"/></name><operator pos:line="34" pos:column="29">-&gt;<pos:position pos:line="34" pos:column="34"/></operator><name pos:line="34" pos:column="31">base<pos:position pos:line="34" pos:column="35"/></name></name> <operator pos:line="34" pos:column="36">+<pos:position pos:line="34" pos:column="37"/></operator> <name><name pos:line="34" pos:column="38">sp<pos:position pos:line="34" pos:column="40"/></name><operator pos:line="34" pos:column="40">-&gt;<pos:position pos:line="34" pos:column="45"/></operator><name pos:line="34" pos:column="42">size<pos:position pos:line="34" pos:column="46"/></name></name></expr>)<pos:position pos:line="34" pos:column="47"/></condition><then pos:line="34" pos:column="47"> <block pos:line="34" pos:column="48">{
	      <decl_stmt><decl><type><name pos:line="35" pos:column="15">char<pos:position pos:line="35" pos:column="19"/></name><modifier pos:line="35" pos:column="19">*<pos:position pos:line="35" pos:column="20"/></modifier></type> <name pos:line="35" pos:column="21">rel_br<pos:position pos:line="35" pos:column="27"/></name> <init pos:line="35" pos:column="28">= <expr><operator pos:line="35" pos:column="30">(<pos:position pos:line="35" pos:column="31"/></operator><name pos:line="35" pos:column="31">char<pos:position pos:line="35" pos:column="35"/></name><operator pos:line="35" pos:column="35">*<pos:position pos:line="35" pos:column="36"/></operator><operator pos:line="35" pos:column="36">)<pos:position pos:line="35" pos:column="37"/></operator><operator pos:line="35" pos:column="37">(<pos:position pos:line="35" pos:column="38"/></operator><call><name pos:line="35" pos:column="38">CALL_MORECORE<pos:position pos:line="35" pos:column="51"/></name><argument_list pos:line="35" pos:column="51">(<argument><expr><operator pos:line="35" pos:column="52">-<pos:position pos:line="35" pos:column="53"/></operator><name pos:line="35" pos:column="53">extra<pos:position pos:line="35" pos:column="58"/></name></expr></argument>)<pos:position pos:line="35" pos:column="59"/></argument_list></call><operator pos:line="35" pos:column="59">)<pos:position pos:line="35" pos:column="60"/></operator></expr></init></decl>;<pos:position pos:line="35" pos:column="61"/></decl_stmt>
	      <decl_stmt><decl><type><name pos:line="36" pos:column="15">char<pos:position pos:line="36" pos:column="19"/></name><modifier pos:line="36" pos:column="19">*<pos:position pos:line="36" pos:column="20"/></modifier></type> <name pos:line="36" pos:column="21">new_br<pos:position pos:line="36" pos:column="27"/></name> <init pos:line="36" pos:column="28">= <expr><operator pos:line="36" pos:column="30">(<pos:position pos:line="36" pos:column="31"/></operator><name pos:line="36" pos:column="31">char<pos:position pos:line="36" pos:column="35"/></name><operator pos:line="36" pos:column="35">*<pos:position pos:line="36" pos:column="36"/></operator><operator pos:line="36" pos:column="36">)<pos:position pos:line="36" pos:column="37"/></operator><operator pos:line="36" pos:column="37">(<pos:position pos:line="36" pos:column="38"/></operator><call><name pos:line="36" pos:column="38">CALL_MORECORE<pos:position pos:line="36" pos:column="51"/></name><argument_list pos:line="36" pos:column="51">(<argument><expr><literal type="number" pos:line="36" pos:column="52">0<pos:position pos:line="36" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="54"/></argument_list></call><operator pos:line="36" pos:column="54">)<pos:position pos:line="36" pos:column="55"/></operator></expr></init></decl>;<pos:position pos:line="36" pos:column="56"/></decl_stmt>
	      <if pos:line="37" pos:column="15">if <condition pos:line="37" pos:column="18">(<expr><name pos:line="37" pos:column="19">rel_br<pos:position pos:line="37" pos:column="25"/></name> <operator pos:line="37" pos:column="26">!=<pos:position pos:line="37" pos:column="28"/></operator> <name pos:line="37" pos:column="29">CMFAIL<pos:position pos:line="37" pos:column="35"/></name> <operator pos:line="37" pos:column="36">&amp;&amp;<pos:position pos:line="37" pos:column="46"/></operator> <name pos:line="37" pos:column="39">new_br<pos:position pos:line="37" pos:column="45"/></name> <operator pos:line="37" pos:column="46">&lt;<pos:position pos:line="37" pos:column="50"/></operator> <name pos:line="37" pos:column="48">old_br<pos:position pos:line="37" pos:column="54"/></name></expr>)<pos:position pos:line="37" pos:column="55"/></condition><then pos:line="37" pos:column="55">
		<block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="17">released<pos:position pos:line="38" pos:column="25"/></name> <operator pos:line="38" pos:column="26">=<pos:position pos:line="38" pos:column="27"/></operator> <name pos:line="38" pos:column="28">old_br<pos:position pos:line="38" pos:column="34"/></name> <operator pos:line="38" pos:column="35">-<pos:position pos:line="38" pos:column="36"/></operator> <name pos:line="38" pos:column="37">new_br<pos:position pos:line="38" pos:column="43"/></name></expr>;<pos:position pos:line="38" pos:column="44"/></expr_stmt></block></then></if>
	    }<pos:position pos:line="39" pos:column="14"/></block></then></if>
	  }<pos:position pos:line="40" pos:column="12"/></block>
	  <expr_stmt><expr><call><name pos:line="41" pos:column="11">RELEASE_MALLOC_GLOBAL_LOCK<pos:position pos:line="41" pos:column="37"/></name><argument_list pos:line="41" pos:column="37">()<pos:position pos:line="41" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="42" pos:column="10"/></block></then></if></elseif></if>
      }<pos:position pos:line="43" pos:column="8"/></block></then></if>

      <if pos:line="45" pos:column="7">if <condition pos:line="45" pos:column="10">(<expr><name pos:line="45" pos:column="11">released<pos:position pos:line="45" pos:column="19"/></name> <operator pos:line="45" pos:column="20">!=<pos:position pos:line="45" pos:column="22"/></operator> <literal type="number" pos:line="45" pos:column="23">0<pos:position pos:line="45" pos:column="24"/></literal></expr>)<pos:position pos:line="45" pos:column="25"/></condition><then pos:line="45" pos:column="25"> <block pos:line="45" pos:column="26">{
	<expr_stmt><expr><name><name pos:line="46" pos:column="9">sp<pos:position pos:line="46" pos:column="11"/></name><operator pos:line="46" pos:column="11">-&gt;<pos:position pos:line="46" pos:column="16"/></operator><name pos:line="46" pos:column="13">size<pos:position pos:line="46" pos:column="17"/></name></name> <operator pos:line="46" pos:column="18">-=<pos:position pos:line="46" pos:column="20"/></operator> <name pos:line="46" pos:column="21">released<pos:position pos:line="46" pos:column="29"/></name></expr>;<pos:position pos:line="46" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="47" pos:column="9">m<pos:position pos:line="47" pos:column="10"/></name><operator pos:line="47" pos:column="10">-&gt;<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="12">footprint<pos:position pos:line="47" pos:column="21"/></name></name> <operator pos:line="47" pos:column="22">-=<pos:position pos:line="47" pos:column="24"/></operator> <name pos:line="47" pos:column="25">released<pos:position pos:line="47" pos:column="33"/></name></expr>;<pos:position pos:line="47" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="48" pos:column="9">init_top<pos:position pos:line="48" pos:column="17"/></name><argument_list pos:line="48" pos:column="17">(<argument><expr><name pos:line="48" pos:column="18">m<pos:position pos:line="48" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="21">m<pos:position pos:line="48" pos:column="22"/></name><operator pos:line="48" pos:column="22">-&gt;<pos:position pos:line="48" pos:column="27"/></operator><name pos:line="48" pos:column="24">top<pos:position pos:line="48" pos:column="27"/></name></name></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="29">m<pos:position pos:line="48" pos:column="30"/></name><operator pos:line="48" pos:column="30">-&gt;<pos:position pos:line="48" pos:column="35"/></operator><name pos:line="48" pos:column="32">topsize<pos:position pos:line="48" pos:column="39"/></name></name> <operator pos:line="48" pos:column="40">-<pos:position pos:line="48" pos:column="41"/></operator> <name pos:line="48" pos:column="42">released<pos:position pos:line="48" pos:column="50"/></name></expr></argument>)<pos:position pos:line="48" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="49" pos:column="9">check_top_chunk<pos:position pos:line="49" pos:column="24"/></name><argument_list pos:line="49" pos:column="24">(<argument><expr><name pos:line="49" pos:column="25">m<pos:position pos:line="49" pos:column="26"/></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="28">m<pos:position pos:line="49" pos:column="29"/></name><operator pos:line="49" pos:column="29">-&gt;<pos:position pos:line="49" pos:column="34"/></operator><name pos:line="49" pos:column="31">top<pos:position pos:line="49" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="36"/></expr_stmt>
      }<pos:position pos:line="50" pos:column="8"/></block></then></if>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="53" pos:column="5">/* Unmap any unused mmapped segments */</comment>
    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><name pos:line="54" pos:column="9">HAVE_MMAP<pos:position pos:line="54" pos:column="18"/></name></expr>)<pos:position pos:line="54" pos:column="19"/></condition><then pos:line="54" pos:column="19">
      <block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="7">released<pos:position pos:line="55" pos:column="15"/></name> <operator pos:line="55" pos:column="16">+=<pos:position pos:line="55" pos:column="18"/></operator> <call><name pos:line="55" pos:column="19">release_unused_segments<pos:position pos:line="55" pos:column="42"/></name><argument_list pos:line="55" pos:column="42">(<argument><expr><name pos:line="55" pos:column="43">m<pos:position pos:line="55" pos:column="44"/></name></expr></argument>)<pos:position pos:line="55" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="46"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="57" pos:column="5">/* On failure, disable autotrim to avoid repeated failed future calls */</comment>
    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><name pos:line="58" pos:column="9">released<pos:position pos:line="58" pos:column="17"/></name> <operator pos:line="58" pos:column="18">==<pos:position pos:line="58" pos:column="20"/></operator> <literal type="number" pos:line="58" pos:column="21">0<pos:position pos:line="58" pos:column="22"/></literal> <operator pos:line="58" pos:column="23">&amp;&amp;<pos:position pos:line="58" pos:column="33"/></operator> <name><name pos:line="58" pos:column="26">m<pos:position pos:line="58" pos:column="27"/></name><operator pos:line="58" pos:column="27">-&gt;<pos:position pos:line="58" pos:column="32"/></operator><name pos:line="58" pos:column="29">topsize<pos:position pos:line="58" pos:column="36"/></name></name> <operator pos:line="58" pos:column="37">&gt;<pos:position pos:line="58" pos:column="41"/></operator> <name><name pos:line="58" pos:column="39">m<pos:position pos:line="58" pos:column="40"/></name><operator pos:line="58" pos:column="40">-&gt;<pos:position pos:line="58" pos:column="45"/></operator><name pos:line="58" pos:column="42">trim_check<pos:position pos:line="58" pos:column="52"/></name></name></expr>)<pos:position pos:line="58" pos:column="53"/></condition><then pos:line="58" pos:column="53">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="59" pos:column="7">m<pos:position pos:line="59" pos:column="8"/></name><operator pos:line="59" pos:column="8">-&gt;<pos:position pos:line="59" pos:column="13"/></operator><name pos:line="59" pos:column="10">trim_check<pos:position pos:line="59" pos:column="20"/></name></name> <operator pos:line="59" pos:column="21">=<pos:position pos:line="59" pos:column="22"/></operator> <name pos:line="59" pos:column="23">MAX_SIZE_T<pos:position pos:line="59" pos:column="33"/></name></expr>;<pos:position pos:line="59" pos:column="34"/></expr_stmt></block></then></if>
  }<pos:position pos:line="60" pos:column="4"/></block></then></if>

  <return pos:line="62" pos:column="3">return <expr><ternary><condition><expr><operator pos:line="62" pos:column="10">(<pos:position pos:line="62" pos:column="11"/></operator><name pos:line="62" pos:column="11">released<pos:position pos:line="62" pos:column="19"/></name> <operator pos:line="62" pos:column="20">!=<pos:position pos:line="62" pos:column="22"/></operator> <literal type="number" pos:line="62" pos:column="23">0<pos:position pos:line="62" pos:column="24"/></literal><operator pos:line="62" pos:column="24">)<pos:position pos:line="62" pos:column="25"/></operator></expr>?<pos:position pos:line="62" pos:column="26"/></condition><then pos:line="62" pos:column="26"> <expr><literal type="number" pos:line="62" pos:column="27">1<pos:position pos:line="62" pos:column="28"/></literal></expr> <pos:position pos:line="62" pos:column="29"/></then><else pos:line="62" pos:column="29">: <expr><literal type="number" pos:line="62" pos:column="31">0<pos:position pos:line="62" pos:column="32"/></literal></expr></else></ternary></expr>;<pos:position pos:line="62" pos:column="33"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
