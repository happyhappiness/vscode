<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3326_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">has_only_ascii<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">s<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="41"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<for pos:line="3" pos:column="9">for <control pos:line="3" pos:column="13">(<init pos:line="3" pos:column="14">;<pos:position pos:line="3" pos:column="15"/></init><condition pos:line="3" pos:column="15">;<pos:position pos:line="3" pos:column="16"/></condition><incr/>)<pos:position pos:line="3" pos:column="17"/></control> <block pos:line="3" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="4" pos:column="17">int<pos:position pos:line="4" pos:column="20"/></name></type> <name pos:line="4" pos:column="21">c<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><operator pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></operator><name pos:line="4" pos:column="26">s<pos:position pos:line="4" pos:column="27"/></name><operator pos:line="4" pos:column="27">++<pos:position pos:line="4" pos:column="29"/></operator></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
		<if pos:line="5" pos:column="17">if <condition pos:line="5" pos:column="20">(<expr><name pos:line="5" pos:column="21">c<pos:position pos:line="5" pos:column="22"/></name> <operator pos:line="5" pos:column="23">==<pos:position pos:line="5" pos:column="25"/></operator> <literal type="char" pos:line="5" pos:column="26">'\0'<pos:position pos:line="5" pos:column="30"/></literal></expr>)<pos:position pos:line="5" pos:column="31"/></condition><then pos:line="5" pos:column="31">
			<block type="pseudo"><return pos:line="6" pos:column="25">return <expr><literal type="number" pos:line="6" pos:column="32">1<pos:position pos:line="6" pos:column="33"/></literal></expr>;<pos:position pos:line="6" pos:column="34"/></return></block></then></if>
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><operator pos:line="7" pos:column="21">!<pos:position pos:line="7" pos:column="22"/></operator><call><name pos:line="7" pos:column="22">isascii<pos:position pos:line="7" pos:column="29"/></name><argument_list pos:line="7" pos:column="29">(<argument><expr><name pos:line="7" pos:column="30">c<pos:position pos:line="7" pos:column="31"/></name></expr></argument>)<pos:position pos:line="7" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="33"/></condition><then pos:line="7" pos:column="33">
			<block type="pseudo"><return pos:line="8" pos:column="25">return <expr><literal type="number" pos:line="8" pos:column="32">0<pos:position pos:line="8" pos:column="33"/></literal></expr>;<pos:position pos:line="8" pos:column="34"/></return></block></then></if>
	}<pos:position pos:line="9" pos:column="10"/></block></for>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
