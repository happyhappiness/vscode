<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1468_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">redact_sensitive_header<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name><name pos:line="1" pos:column="37">struct<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">strbuf<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">header<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">sensitive_header<pos:position pos:line="3" pos:column="37"/></name></decl>;<pos:position pos:line="3" pos:column="38"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><call><name pos:line="5" pos:column="13">skip_prefix<pos:position pos:line="5" pos:column="24"/></name><argument_list pos:line="5" pos:column="24">(<argument><expr><name><name pos:line="5" pos:column="25">header<pos:position pos:line="5" pos:column="31"/></name><operator pos:line="5" pos:column="31">-&gt;<pos:position pos:line="5" pos:column="36"/></operator><name pos:line="5" pos:column="33">buf<pos:position pos:line="5" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="38">"Authorization:"<pos:position pos:line="5" pos:column="54"/></literal></expr></argument>, <argument><expr><operator pos:line="5" pos:column="56">&amp;<pos:position pos:line="5" pos:column="61"/></operator><name pos:line="5" pos:column="57">sensitive_header<pos:position pos:line="5" pos:column="73"/></name></expr></argument>)<pos:position pos:line="5" pos:column="74"/></argument_list></call> <operator pos:line="5" pos:column="75">||<pos:position pos:line="5" pos:column="77"/></operator>
	    <call><name pos:line="6" pos:column="13">skip_prefix<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><name><name pos:line="6" pos:column="25">header<pos:position pos:line="6" pos:column="31"/></name><operator pos:line="6" pos:column="31">-&gt;<pos:position pos:line="6" pos:column="36"/></operator><name pos:line="6" pos:column="33">buf<pos:position pos:line="6" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="38">"Proxy-Authorization:"<pos:position pos:line="6" pos:column="60"/></literal></expr></argument>, <argument><expr><operator pos:line="6" pos:column="62">&amp;<pos:position pos:line="6" pos:column="67"/></operator><name pos:line="6" pos:column="63">sensitive_header<pos:position pos:line="6" pos:column="79"/></name></expr></argument>)<pos:position pos:line="6" pos:column="80"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="81"/></condition><then pos:line="6" pos:column="81"> <block pos:line="6" pos:column="82">{
		<comment type="block" pos:line="7" pos:column="17">/* The first token is the type, which is OK to log */</comment>
		<while pos:line="8" pos:column="17">while <condition pos:line="8" pos:column="23">(<expr><call><name pos:line="8" pos:column="24">isspace<pos:position pos:line="8" pos:column="31"/></name><argument_list pos:line="8" pos:column="31">(<argument><expr><operator pos:line="8" pos:column="32">*<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="33">sensitive_header<pos:position pos:line="8" pos:column="49"/></name></expr></argument>)<pos:position pos:line="8" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="51"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="25">sensitive_header<pos:position pos:line="9" pos:column="41"/></name><operator pos:line="9" pos:column="41">++<pos:position pos:line="9" pos:column="43"/></operator></expr>;<pos:position pos:line="9" pos:column="44"/></expr_stmt></block></while>
		<while pos:line="10" pos:column="17">while <condition pos:line="10" pos:column="23">(<expr><operator pos:line="10" pos:column="24">*<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="25">sensitive_header<pos:position pos:line="10" pos:column="41"/></name> <operator pos:line="10" pos:column="42">&amp;&amp;<pos:position pos:line="10" pos:column="52"/></operator> <operator pos:line="10" pos:column="45">!<pos:position pos:line="10" pos:column="46"/></operator><call><name pos:line="10" pos:column="46">isspace<pos:position pos:line="10" pos:column="53"/></name><argument_list pos:line="10" pos:column="53">(<argument><expr><operator pos:line="10" pos:column="54">*<pos:position pos:line="10" pos:column="55"/></operator><name pos:line="10" pos:column="55">sensitive_header<pos:position pos:line="10" pos:column="71"/></name></expr></argument>)<pos:position pos:line="10" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="73"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="25">sensitive_header<pos:position pos:line="11" pos:column="41"/></name><operator pos:line="11" pos:column="41">++<pos:position pos:line="11" pos:column="43"/></operator></expr>;<pos:position pos:line="11" pos:column="44"/></expr_stmt></block></while>
		<comment type="block" pos:line="12" pos:column="17">/* Everything else is opaque and possibly sensitive */</comment>
		<expr_stmt><expr><call><name pos:line="13" pos:column="17">strbuf_setlen<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><name pos:line="13" pos:column="31">header<pos:position pos:line="13" pos:column="37"/></name></expr></argument>,  <argument><expr><name pos:line="13" pos:column="40">sensitive_header<pos:position pos:line="13" pos:column="56"/></name> <operator pos:line="13" pos:column="57">-<pos:position pos:line="13" pos:column="58"/></operator> <name><name pos:line="13" pos:column="59">header<pos:position pos:line="13" pos:column="65"/></name><operator pos:line="13" pos:column="65">-&gt;<pos:position pos:line="13" pos:column="70"/></operator><name pos:line="13" pos:column="67">buf<pos:position pos:line="13" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="72"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">strbuf_addstr<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><name pos:line="14" pos:column="31">header<pos:position pos:line="14" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="39">" &lt;redacted&gt;"<pos:position pos:line="14" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="15" pos:column="10"/></block></then></if>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
