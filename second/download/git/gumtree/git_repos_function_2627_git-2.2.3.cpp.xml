<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2627_git-2.2.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">write_ref_sha1<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">ref_lock<pos:position pos:line="1" pos:column="42"/></name></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">lock<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>,
	<parameter><decl><type><specifier pos:line="2" pos:column="9">const<pos:position pos:line="2" pos:column="14"/></specifier> <name pos:line="2" pos:column="15">unsigned<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">char<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">sha1<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier> <name pos:line="2" pos:column="42">char<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">logmsg<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">char<pos:position pos:line="4" pos:column="20"/></name></type> <name pos:line="4" pos:column="21">term<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><literal type="char" pos:line="4" pos:column="28">'\n'<pos:position pos:line="4" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">object<pos:position pos:line="5" pos:column="22"/></name></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">o<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">lock<pos:position pos:line="7" pos:column="18"/></name></expr>)<pos:position pos:line="7" pos:column="19"/></condition><then pos:line="7" pos:column="19"> <block pos:line="7" pos:column="20">{
		<expr_stmt><expr><name pos:line="8" pos:column="17">errno<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">=<pos:position pos:line="8" pos:column="24"/></operator> <name pos:line="8" pos:column="25">EINVAL<pos:position pos:line="8" pos:column="31"/></name></expr>;<pos:position pos:line="8" pos:column="32"/></expr_stmt>
		<return pos:line="9" pos:column="17">return <expr><operator pos:line="9" pos:column="24">-<pos:position pos:line="9" pos:column="25"/></operator><literal type="number" pos:line="9" pos:column="25">1<pos:position pos:line="9" pos:column="26"/></literal></expr>;<pos:position pos:line="9" pos:column="27"/></return>
	}<pos:position pos:line="10" pos:column="10"/></block></then></if>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name><name pos:line="11" pos:column="14">lock<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">-&gt;<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="20">force_write<pos:position pos:line="11" pos:column="31"/></name></name> <operator pos:line="11" pos:column="32">&amp;&amp;<pos:position pos:line="11" pos:column="42"/></operator> <operator pos:line="11" pos:column="35">!<pos:position pos:line="11" pos:column="36"/></operator><call><name pos:line="11" pos:column="36">hashcmp<pos:position pos:line="11" pos:column="43"/></name><argument_list pos:line="11" pos:column="43">(<argument><expr><name><name pos:line="11" pos:column="44">lock<pos:position pos:line="11" pos:column="48"/></name><operator pos:line="11" pos:column="48">-&gt;<pos:position pos:line="11" pos:column="53"/></operator><name pos:line="11" pos:column="50">old_sha1<pos:position pos:line="11" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="60">sha1<pos:position pos:line="11" pos:column="64"/></name></expr></argument>)<pos:position pos:line="11" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="66"/></condition><then pos:line="11" pos:column="66"> <block pos:line="11" pos:column="67">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">unlock_ref<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">lock<pos:position pos:line="12" pos:column="32"/></name></expr></argument>)<pos:position pos:line="12" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
		<return pos:line="13" pos:column="17">return <expr><literal type="number" pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></literal></expr>;<pos:position pos:line="13" pos:column="26"/></return>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="15" pos:column="9">o<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">=<pos:position pos:line="15" pos:column="12"/></operator> <call><name pos:line="15" pos:column="13">parse_object<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><name pos:line="15" pos:column="26">sha1<pos:position pos:line="15" pos:column="30"/></name></expr></argument>)<pos:position pos:line="15" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="32"/></expr_stmt>
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">o<pos:position pos:line="16" pos:column="15"/></name></expr>)<pos:position pos:line="16" pos:column="16"/></condition><then pos:line="16" pos:column="16"> <block pos:line="16" pos:column="17">{
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">error<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><literal type="string" pos:line="17" pos:column="23">"Trying to write ref %s with nonexistent object %s"<pos:position pos:line="17" pos:column="74"/></literal></expr></argument>,
			<argument><expr><name><name pos:line="18" pos:column="25">lock<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">-&gt;<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="31">ref_name<pos:position pos:line="18" pos:column="39"/></name></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="41">sha1_to_hex<pos:position pos:line="18" pos:column="52"/></name><argument_list pos:line="18" pos:column="52">(<argument><expr><name pos:line="18" pos:column="53">sha1<pos:position pos:line="18" pos:column="57"/></name></expr></argument>)<pos:position pos:line="18" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">unlock_ref<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">(<argument><expr><name pos:line="19" pos:column="28">lock<pos:position pos:line="19" pos:column="32"/></name></expr></argument>)<pos:position pos:line="19" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">errno<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">=<pos:position pos:line="20" pos:column="24"/></operator> <name pos:line="20" pos:column="25">EINVAL<pos:position pos:line="20" pos:column="31"/></name></expr>;<pos:position pos:line="20" pos:column="32"/></expr_stmt>
		<return pos:line="21" pos:column="17">return <expr><operator pos:line="21" pos:column="24">-<pos:position pos:line="21" pos:column="25"/></operator><literal type="number" pos:line="21" pos:column="25">1<pos:position pos:line="21" pos:column="26"/></literal></expr>;<pos:position pos:line="21" pos:column="27"/></return>
	}<pos:position pos:line="22" pos:column="10"/></block></then></if>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name><name pos:line="23" pos:column="13">o<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">-&gt;<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="16">type<pos:position pos:line="23" pos:column="20"/></name></name> <operator pos:line="23" pos:column="21">!=<pos:position pos:line="23" pos:column="23"/></operator> <name pos:line="23" pos:column="24">OBJ_COMMIT<pos:position pos:line="23" pos:column="34"/></name> <operator pos:line="23" pos:column="35">&amp;&amp;<pos:position pos:line="23" pos:column="45"/></operator> <call><name pos:line="23" pos:column="38">is_branch<pos:position pos:line="23" pos:column="47"/></name><argument_list pos:line="23" pos:column="47">(<argument><expr><name><name pos:line="23" pos:column="48">lock<pos:position pos:line="23" pos:column="52"/></name><operator pos:line="23" pos:column="52">-&gt;<pos:position pos:line="23" pos:column="57"/></operator><name pos:line="23" pos:column="54">ref_name<pos:position pos:line="23" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="64"/></condition><then pos:line="23" pos:column="64"> <block pos:line="23" pos:column="65">{
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">error<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><literal type="string" pos:line="24" pos:column="23">"Trying to write non-commit object %s to branch %s"<pos:position pos:line="24" pos:column="74"/></literal></expr></argument>,
			<argument><expr><call><name pos:line="25" pos:column="25">sha1_to_hex<pos:position pos:line="25" pos:column="36"/></name><argument_list pos:line="25" pos:column="36">(<argument><expr><name pos:line="25" pos:column="37">sha1<pos:position pos:line="25" pos:column="41"/></name></expr></argument>)<pos:position pos:line="25" pos:column="42"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="44">lock<pos:position pos:line="25" pos:column="48"/></name><operator pos:line="25" pos:column="48">-&gt;<pos:position pos:line="25" pos:column="53"/></operator><name pos:line="25" pos:column="50">ref_name<pos:position pos:line="25" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">unlock_ref<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><name pos:line="26" pos:column="28">lock<pos:position pos:line="26" pos:column="32"/></name></expr></argument>)<pos:position pos:line="26" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="27" pos:column="17">errno<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">=<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">EINVAL<pos:position pos:line="27" pos:column="31"/></name></expr>;<pos:position pos:line="27" pos:column="32"/></expr_stmt>
		<return pos:line="28" pos:column="17">return <expr><operator pos:line="28" pos:column="24">-<pos:position pos:line="28" pos:column="25"/></operator><literal type="number" pos:line="28" pos:column="25">1<pos:position pos:line="28" pos:column="26"/></literal></expr>;<pos:position pos:line="28" pos:column="27"/></return>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><call><name pos:line="30" pos:column="13">write_in_full<pos:position pos:line="30" pos:column="26"/></name><argument_list pos:line="30" pos:column="26">(<argument><expr><name><name pos:line="30" pos:column="27">lock<pos:position pos:line="30" pos:column="31"/></name><operator pos:line="30" pos:column="31">-&gt;<pos:position pos:line="30" pos:column="36"/></operator><name pos:line="30" pos:column="33">lock_fd<pos:position pos:line="30" pos:column="40"/></name></name></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="42">sha1_to_hex<pos:position pos:line="30" pos:column="53"/></name><argument_list pos:line="30" pos:column="53">(<argument><expr><name pos:line="30" pos:column="54">sha1<pos:position pos:line="30" pos:column="58"/></name></expr></argument>)<pos:position pos:line="30" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="61">40<pos:position pos:line="30" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="64"/></argument_list></call> <operator pos:line="30" pos:column="65">!=<pos:position pos:line="30" pos:column="67"/></operator> <literal type="number" pos:line="30" pos:column="68">40<pos:position pos:line="30" pos:column="70"/></literal> <operator pos:line="30" pos:column="71">||<pos:position pos:line="30" pos:column="73"/></operator>
	    <call><name pos:line="31" pos:column="13">write_in_full<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">(<argument><expr><name><name pos:line="31" pos:column="27">lock<pos:position pos:line="31" pos:column="31"/></name><operator pos:line="31" pos:column="31">-&gt;<pos:position pos:line="31" pos:column="36"/></operator><name pos:line="31" pos:column="33">lock_fd<pos:position pos:line="31" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="42">&amp;<pos:position pos:line="31" pos:column="47"/></operator><name pos:line="31" pos:column="43">term<pos:position pos:line="31" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="49">1<pos:position pos:line="31" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="51"/></argument_list></call> <operator pos:line="31" pos:column="52">!=<pos:position pos:line="31" pos:column="54"/></operator> <literal type="number" pos:line="31" pos:column="55">1<pos:position pos:line="31" pos:column="56"/></literal> <operator pos:line="31" pos:column="57">||<pos:position pos:line="31" pos:column="59"/></operator>
	    <call><name pos:line="32" pos:column="13">close_ref<pos:position pos:line="32" pos:column="22"/></name><argument_list pos:line="32" pos:column="22">(<argument><expr><name pos:line="32" pos:column="23">lock<pos:position pos:line="32" pos:column="27"/></name></expr></argument>)<pos:position pos:line="32" pos:column="28"/></argument_list></call> <operator pos:line="32" pos:column="29">&lt;<pos:position pos:line="32" pos:column="33"/></operator> <literal type="number" pos:line="32" pos:column="31">0<pos:position pos:line="32" pos:column="32"/></literal></expr>)<pos:position pos:line="32" pos:column="33"/></condition><then pos:line="32" pos:column="33"> <block pos:line="32" pos:column="34">{
		<decl_stmt><decl><type><name pos:line="33" pos:column="17">int<pos:position pos:line="33" pos:column="20"/></name></type> <name pos:line="33" pos:column="21">save_errno<pos:position pos:line="33" pos:column="31"/></name> <init pos:line="33" pos:column="32">= <expr><name pos:line="33" pos:column="34">errno<pos:position pos:line="33" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="33" pos:column="40"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">error<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><literal type="string" pos:line="34" pos:column="23">"Couldn't write %s"<pos:position pos:line="34" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="44">lock<pos:position pos:line="34" pos:column="48"/></name><operator pos:line="34" pos:column="48">-&gt;<pos:position pos:line="34" pos:column="53"/></operator><name pos:line="34" pos:column="50">lk<pos:position pos:line="34" pos:column="52"/></name><operator pos:line="34" pos:column="52">-&gt;<pos:position pos:line="34" pos:column="57"/></operator><name pos:line="34" pos:column="54">filename<pos:position pos:line="34" pos:column="62"/></name><operator pos:line="34" pos:column="62">.<pos:position pos:line="34" pos:column="63"/></operator><name pos:line="34" pos:column="63">buf<pos:position pos:line="34" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="68"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">unlock_ref<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">lock<pos:position pos:line="35" pos:column="32"/></name></expr></argument>)<pos:position pos:line="35" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="36" pos:column="17">errno<pos:position pos:line="36" pos:column="22"/></name> <operator pos:line="36" pos:column="23">=<pos:position pos:line="36" pos:column="24"/></operator> <name pos:line="36" pos:column="25">save_errno<pos:position pos:line="36" pos:column="35"/></name></expr>;<pos:position pos:line="36" pos:column="36"/></expr_stmt>
		<return pos:line="37" pos:column="17">return <expr><operator pos:line="37" pos:column="24">-<pos:position pos:line="37" pos:column="25"/></operator><literal type="number" pos:line="37" pos:column="25">1<pos:position pos:line="37" pos:column="26"/></literal></expr>;<pos:position pos:line="37" pos:column="27"/></return>
	}<pos:position pos:line="38" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">clear_loose_ref_cache<pos:position pos:line="39" pos:column="30"/></name><argument_list pos:line="39" pos:column="30">(<argument><expr><operator pos:line="39" pos:column="31">&amp;<pos:position pos:line="39" pos:column="36"/></operator><name pos:line="39" pos:column="32">ref_cache<pos:position pos:line="39" pos:column="41"/></name></expr></argument>)<pos:position pos:line="39" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="43"/></expr_stmt>
	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><call><name pos:line="40" pos:column="13">log_ref_write<pos:position pos:line="40" pos:column="26"/></name><argument_list pos:line="40" pos:column="26">(<argument><expr><name><name pos:line="40" pos:column="27">lock<pos:position pos:line="40" pos:column="31"/></name><operator pos:line="40" pos:column="31">-&gt;<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="33">ref_name<pos:position pos:line="40" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="43">lock<pos:position pos:line="40" pos:column="47"/></name><operator pos:line="40" pos:column="47">-&gt;<pos:position pos:line="40" pos:column="52"/></operator><name pos:line="40" pos:column="49">old_sha1<pos:position pos:line="40" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="59">sha1<pos:position pos:line="40" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="65">logmsg<pos:position pos:line="40" pos:column="71"/></name></expr></argument>)<pos:position pos:line="40" pos:column="72"/></argument_list></call> <operator pos:line="40" pos:column="73">&lt;<pos:position pos:line="40" pos:column="77"/></operator> <literal type="number" pos:line="40" pos:column="75">0<pos:position pos:line="40" pos:column="76"/></literal> <operator pos:line="40" pos:column="77">||<pos:position pos:line="40" pos:column="79"/></operator>
	    <operator pos:line="41" pos:column="13">(<pos:position pos:line="41" pos:column="14"/></operator><call><name pos:line="41" pos:column="14">strcmp<pos:position pos:line="41" pos:column="20"/></name><argument_list pos:line="41" pos:column="20">(<argument><expr><name><name pos:line="41" pos:column="21">lock<pos:position pos:line="41" pos:column="25"/></name><operator pos:line="41" pos:column="25">-&gt;<pos:position pos:line="41" pos:column="30"/></operator><name pos:line="41" pos:column="27">ref_name<pos:position pos:line="41" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="37">lock<pos:position pos:line="41" pos:column="41"/></name><operator pos:line="41" pos:column="41">-&gt;<pos:position pos:line="41" pos:column="46"/></operator><name pos:line="41" pos:column="43">orig_ref_name<pos:position pos:line="41" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="57"/></argument_list></call> <operator pos:line="41" pos:column="58">&amp;&amp;<pos:position pos:line="41" pos:column="68"/></operator>
	     <call><name pos:line="42" pos:column="14">log_ref_write<pos:position pos:line="42" pos:column="27"/></name><argument_list pos:line="42" pos:column="27">(<argument><expr><name><name pos:line="42" pos:column="28">lock<pos:position pos:line="42" pos:column="32"/></name><operator pos:line="42" pos:column="32">-&gt;<pos:position pos:line="42" pos:column="37"/></operator><name pos:line="42" pos:column="34">orig_ref_name<pos:position pos:line="42" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="49">lock<pos:position pos:line="42" pos:column="53"/></name><operator pos:line="42" pos:column="53">-&gt;<pos:position pos:line="42" pos:column="58"/></operator><name pos:line="42" pos:column="55">old_sha1<pos:position pos:line="42" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="65">sha1<pos:position pos:line="42" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="71">logmsg<pos:position pos:line="42" pos:column="77"/></name></expr></argument>)<pos:position pos:line="42" pos:column="78"/></argument_list></call> <operator pos:line="42" pos:column="79">&lt;<pos:position pos:line="42" pos:column="83"/></operator> <literal type="number" pos:line="42" pos:column="81">0<pos:position pos:line="42" pos:column="82"/></literal><operator pos:line="42" pos:column="82">)<pos:position pos:line="42" pos:column="83"/></operator></expr>)<pos:position pos:line="42" pos:column="84"/></condition><then pos:line="42" pos:column="84"> <block pos:line="42" pos:column="85">{
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">unlock_ref<pos:position pos:line="43" pos:column="27"/></name><argument_list pos:line="43" pos:column="27">(<argument><expr><name pos:line="43" pos:column="28">lock<pos:position pos:line="43" pos:column="32"/></name></expr></argument>)<pos:position pos:line="43" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="34"/></expr_stmt>
		<return pos:line="44" pos:column="17">return <expr><operator pos:line="44" pos:column="24">-<pos:position pos:line="44" pos:column="25"/></operator><literal type="number" pos:line="44" pos:column="25">1<pos:position pos:line="44" pos:column="26"/></literal></expr>;<pos:position pos:line="44" pos:column="27"/></return>
	}<pos:position pos:line="45" pos:column="10"/></block></then></if>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><call><name pos:line="46" pos:column="13">strcmp<pos:position pos:line="46" pos:column="19"/></name><argument_list pos:line="46" pos:column="19">(<argument><expr><name><name pos:line="46" pos:column="20">lock<pos:position pos:line="46" pos:column="24"/></name><operator pos:line="46" pos:column="24">-&gt;<pos:position pos:line="46" pos:column="29"/></operator><name pos:line="46" pos:column="26">orig_ref_name<pos:position pos:line="46" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="41">"HEAD"<pos:position pos:line="46" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="48"/></argument_list></call> <operator pos:line="46" pos:column="49">!=<pos:position pos:line="46" pos:column="51"/></operator> <literal type="number" pos:line="46" pos:column="52">0<pos:position pos:line="46" pos:column="53"/></literal></expr>)<pos:position pos:line="46" pos:column="54"/></condition><then pos:line="46" pos:column="54"> <block pos:line="46" pos:column="55">{
		<comment type="block" pos:line="47" pos:column="17">/*
		 * Special hack: If a branch is updated directly and HEAD
		 * points to it (may happen on the remote side of a push
		 * for example) then logically the HEAD reflog should be
		 * updated too.
		 * A generic solution implies reverse symref information,
		 * but finding all symrefs pointing to the given branch
		 * would be rather costly for this rare event (the direct
		 * update of a branch) to be worth it.  So let's cheat and
		 * check with HEAD only which should cover 99% of all usage
		 * scenarios (even 100% of the default ones).
		 */</comment>
		<decl_stmt><decl><type><name pos:line="59" pos:column="17">unsigned<pos:position pos:line="59" pos:column="25"/></name> <name pos:line="59" pos:column="26">char<pos:position pos:line="59" pos:column="30"/></name></type> <name><name pos:line="59" pos:column="31">head_sha1<pos:position pos:line="59" pos:column="40"/></name><index pos:line="59" pos:column="40">[<expr><literal type="number" pos:line="59" pos:column="41">20<pos:position pos:line="59" pos:column="43"/></literal></expr>]<pos:position pos:line="59" pos:column="44"/></index></name></decl>;<pos:position pos:line="59" pos:column="45"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="60" pos:column="17">int<pos:position pos:line="60" pos:column="20"/></name></type> <name pos:line="60" pos:column="21">head_flag<pos:position pos:line="60" pos:column="30"/></name></decl>;<pos:position pos:line="60" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="61" pos:column="17">const<pos:position pos:line="61" pos:column="22"/></specifier> <name pos:line="61" pos:column="23">char<pos:position pos:line="61" pos:column="27"/></name> <modifier pos:line="61" pos:column="28">*<pos:position pos:line="61" pos:column="29"/></modifier></type><name pos:line="61" pos:column="29">head_ref<pos:position pos:line="61" pos:column="37"/></name></decl>;<pos:position pos:line="61" pos:column="38"/></decl_stmt>
		<expr_stmt><expr><name pos:line="62" pos:column="17">head_ref<pos:position pos:line="62" pos:column="25"/></name> <operator pos:line="62" pos:column="26">=<pos:position pos:line="62" pos:column="27"/></operator> <call><name pos:line="62" pos:column="28">resolve_ref_unsafe<pos:position pos:line="62" pos:column="46"/></name><argument_list pos:line="62" pos:column="46">(<argument><expr><literal type="string" pos:line="62" pos:column="47">"HEAD"<pos:position pos:line="62" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="55">RESOLVE_REF_READING<pos:position pos:line="62" pos:column="74"/></name></expr></argument>,
					      <argument><expr><name pos:line="63" pos:column="47">head_sha1<pos:position pos:line="63" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="58">&amp;<pos:position pos:line="63" pos:column="63"/></operator><name pos:line="63" pos:column="59">head_flag<pos:position pos:line="63" pos:column="68"/></name></expr></argument>)<pos:position pos:line="63" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="70"/></expr_stmt>
		<if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name pos:line="64" pos:column="21">head_ref<pos:position pos:line="64" pos:column="29"/></name> <operator pos:line="64" pos:column="30">&amp;&amp;<pos:position pos:line="64" pos:column="40"/></operator> <operator pos:line="64" pos:column="33">(<pos:position pos:line="64" pos:column="34"/></operator><name pos:line="64" pos:column="34">head_flag<pos:position pos:line="64" pos:column="43"/></name> <operator pos:line="64" pos:column="44">&amp;<pos:position pos:line="64" pos:column="49"/></operator> <name pos:line="64" pos:column="46">REF_ISSYMREF<pos:position pos:line="64" pos:column="58"/></name><operator pos:line="64" pos:column="58">)<pos:position pos:line="64" pos:column="59"/></operator> <operator pos:line="64" pos:column="60">&amp;&amp;<pos:position pos:line="64" pos:column="70"/></operator>
		    <operator pos:line="65" pos:column="21">!<pos:position pos:line="65" pos:column="22"/></operator><call><name pos:line="65" pos:column="22">strcmp<pos:position pos:line="65" pos:column="28"/></name><argument_list pos:line="65" pos:column="28">(<argument><expr><name pos:line="65" pos:column="29">head_ref<pos:position pos:line="65" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="39">lock<pos:position pos:line="65" pos:column="43"/></name><operator pos:line="65" pos:column="43">-&gt;<pos:position pos:line="65" pos:column="48"/></operator><name pos:line="65" pos:column="45">ref_name<pos:position pos:line="65" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="55"/></condition><then pos:line="65" pos:column="55">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="66" pos:column="25">log_ref_write<pos:position pos:line="66" pos:column="38"/></name><argument_list pos:line="66" pos:column="38">(<argument><expr><literal type="string" pos:line="66" pos:column="39">"HEAD"<pos:position pos:line="66" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="47">lock<pos:position pos:line="66" pos:column="51"/></name><operator pos:line="66" pos:column="51">-&gt;<pos:position pos:line="66" pos:column="56"/></operator><name pos:line="66" pos:column="53">old_sha1<pos:position pos:line="66" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="63">sha1<pos:position pos:line="66" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="69">logmsg<pos:position pos:line="66" pos:column="75"/></name></expr></argument>)<pos:position pos:line="66" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="77"/></expr_stmt></block></then></if>
	}<pos:position pos:line="67" pos:column="10"/></block></then></if>
	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><call><name pos:line="68" pos:column="13">commit_ref<pos:position pos:line="68" pos:column="23"/></name><argument_list pos:line="68" pos:column="23">(<argument><expr><name pos:line="68" pos:column="24">lock<pos:position pos:line="68" pos:column="28"/></name></expr></argument>)<pos:position pos:line="68" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="68" pos:column="30"/></condition><then pos:line="68" pos:column="30"> <block pos:line="68" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">error<pos:position pos:line="69" pos:column="22"/></name><argument_list pos:line="69" pos:column="22">(<argument><expr><literal type="string" pos:line="69" pos:column="23">"Couldn't set %s"<pos:position pos:line="69" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="42">lock<pos:position pos:line="69" pos:column="46"/></name><operator pos:line="69" pos:column="46">-&gt;<pos:position pos:line="69" pos:column="51"/></operator><name pos:line="69" pos:column="48">ref_name<pos:position pos:line="69" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="70" pos:column="17">unlock_ref<pos:position pos:line="70" pos:column="27"/></name><argument_list pos:line="70" pos:column="27">(<argument><expr><name pos:line="70" pos:column="28">lock<pos:position pos:line="70" pos:column="32"/></name></expr></argument>)<pos:position pos:line="70" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="34"/></expr_stmt>
		<return pos:line="71" pos:column="17">return <expr><operator pos:line="71" pos:column="24">-<pos:position pos:line="71" pos:column="25"/></operator><literal type="number" pos:line="71" pos:column="25">1<pos:position pos:line="71" pos:column="26"/></literal></expr>;<pos:position pos:line="71" pos:column="27"/></return>
	}<pos:position pos:line="72" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="73" pos:column="9">unlock_ref<pos:position pos:line="73" pos:column="19"/></name><argument_list pos:line="73" pos:column="19">(<argument><expr><name pos:line="73" pos:column="20">lock<pos:position pos:line="73" pos:column="24"/></name></expr></argument>)<pos:position pos:line="73" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="26"/></expr_stmt>
	<return pos:line="74" pos:column="9">return <expr><literal type="number" pos:line="74" pos:column="16">0<pos:position pos:line="74" pos:column="17"/></literal></expr>;<pos:position pos:line="74" pos:column="18"/></return>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
