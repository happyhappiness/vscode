<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2657_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">parse_host_arg<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">extra_args<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">int<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">buflen<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">val<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">vallen<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">end<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">extra_args<pos:position pos:line="5" pos:column="31"/></name> <operator pos:line="5" pos:column="32">+<pos:position pos:line="5" pos:column="33"/></operator> <name pos:line="5" pos:column="34">buflen<pos:position pos:line="5" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt>

	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">extra_args<pos:position pos:line="7" pos:column="23"/></name> <operator pos:line="7" pos:column="24">&lt;<pos:position pos:line="7" pos:column="28"/></operator> <name pos:line="7" pos:column="26">end<pos:position pos:line="7" pos:column="29"/></name> <operator pos:line="7" pos:column="30">&amp;&amp;<pos:position pos:line="7" pos:column="40"/></operator> <operator pos:line="7" pos:column="33">*<pos:position pos:line="7" pos:column="34"/></operator><name pos:line="7" pos:column="34">extra_args<pos:position pos:line="7" pos:column="44"/></name></expr>)<pos:position pos:line="7" pos:column="45"/></condition><then pos:line="7" pos:column="45"> <block pos:line="7" pos:column="46">{
		<expr_stmt><expr><name pos:line="8" pos:column="17">saw_extended_args<pos:position pos:line="8" pos:column="34"/></name> <operator pos:line="8" pos:column="35">=<pos:position pos:line="8" pos:column="36"/></operator> <literal type="number" pos:line="8" pos:column="37">1<pos:position pos:line="8" pos:column="38"/></literal></expr>;<pos:position pos:line="8" pos:column="39"/></expr_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><call><name pos:line="9" pos:column="21">strncasecmp<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">(<argument><expr><literal type="string" pos:line="9" pos:column="33">"host="<pos:position pos:line="9" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="42">extra_args<pos:position pos:line="9" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="54">5<pos:position pos:line="9" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="56"/></argument_list></call> <operator pos:line="9" pos:column="57">==<pos:position pos:line="9" pos:column="59"/></operator> <literal type="number" pos:line="9" pos:column="60">0<pos:position pos:line="9" pos:column="61"/></literal></expr>)<pos:position pos:line="9" pos:column="62"/></condition><then pos:line="9" pos:column="62"> <block pos:line="9" pos:column="63">{
			<expr_stmt><expr><name pos:line="10" pos:column="25">val<pos:position pos:line="10" pos:column="28"/></name> <operator pos:line="10" pos:column="29">=<pos:position pos:line="10" pos:column="30"/></operator> <name pos:line="10" pos:column="31">extra_args<pos:position pos:line="10" pos:column="41"/></name> <operator pos:line="10" pos:column="42">+<pos:position pos:line="10" pos:column="43"/></operator> <literal type="number" pos:line="10" pos:column="44">5<pos:position pos:line="10" pos:column="45"/></literal></expr>;<pos:position pos:line="10" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="11" pos:column="25">vallen<pos:position pos:line="11" pos:column="31"/></name> <operator pos:line="11" pos:column="32">=<pos:position pos:line="11" pos:column="33"/></operator> <call><name pos:line="11" pos:column="34">strlen<pos:position pos:line="11" pos:column="40"/></name><argument_list pos:line="11" pos:column="40">(<argument><expr><name pos:line="11" pos:column="41">val<pos:position pos:line="11" pos:column="44"/></name></expr></argument>)<pos:position pos:line="11" pos:column="45"/></argument_list></call> <operator pos:line="11" pos:column="46">+<pos:position pos:line="11" pos:column="47"/></operator> <literal type="number" pos:line="11" pos:column="48">1<pos:position pos:line="11" pos:column="49"/></literal></expr>;<pos:position pos:line="11" pos:column="50"/></expr_stmt>
			<if pos:line="12" pos:column="25">if <condition pos:line="12" pos:column="28">(<expr><operator pos:line="12" pos:column="29">*<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="30">val<pos:position pos:line="12" pos:column="33"/></name></expr>)<pos:position pos:line="12" pos:column="34"/></condition><then pos:line="12" pos:column="34"> <block pos:line="12" pos:column="35">{
				<comment type="block" pos:line="13" pos:column="33">/* Split &lt;host&gt;:&lt;port&gt; at colon. */</comment>
				<decl_stmt><decl><type><name pos:line="14" pos:column="33">char<pos:position pos:line="14" pos:column="37"/></name> <modifier pos:line="14" pos:column="38">*<pos:position pos:line="14" pos:column="39"/></modifier></type><name pos:line="14" pos:column="39">host<pos:position pos:line="14" pos:column="43"/></name></decl>;<pos:position pos:line="14" pos:column="44"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="15" pos:column="33">char<pos:position pos:line="15" pos:column="37"/></name> <modifier pos:line="15" pos:column="38">*<pos:position pos:line="15" pos:column="39"/></modifier></type><name pos:line="15" pos:column="39">port<pos:position pos:line="15" pos:column="43"/></name></decl>;<pos:position pos:line="15" pos:column="44"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="16" pos:column="33">parse_host_and_port<pos:position pos:line="16" pos:column="52"/></name><argument_list pos:line="16" pos:column="52">(<argument><expr><name pos:line="16" pos:column="53">val<pos:position pos:line="16" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="58">&amp;<pos:position pos:line="16" pos:column="63"/></operator><name pos:line="16" pos:column="59">host<pos:position pos:line="16" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="65">&amp;<pos:position pos:line="16" pos:column="70"/></operator><name pos:line="16" pos:column="66">port<pos:position pos:line="16" pos:column="70"/></name></expr></argument>)<pos:position pos:line="16" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="72"/></expr_stmt>
				<if pos:line="17" pos:column="33">if <condition pos:line="17" pos:column="36">(<expr><name pos:line="17" pos:column="37">port<pos:position pos:line="17" pos:column="41"/></name></expr>)<pos:position pos:line="17" pos:column="42"/></condition><then pos:line="17" pos:column="42"> <block pos:line="17" pos:column="43">{
					<expr_stmt><expr><call><name pos:line="18" pos:column="41">free<pos:position pos:line="18" pos:column="45"/></name><argument_list pos:line="18" pos:column="45">(<argument><expr><name pos:line="18" pos:column="46">tcp_port<pos:position pos:line="18" pos:column="54"/></name></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="56"/></expr_stmt>
					<expr_stmt><expr><name pos:line="19" pos:column="41">tcp_port<pos:position pos:line="19" pos:column="49"/></name> <operator pos:line="19" pos:column="50">=<pos:position pos:line="19" pos:column="51"/></operator> <call><name pos:line="19" pos:column="52">xstrdup<pos:position pos:line="19" pos:column="59"/></name><argument_list pos:line="19" pos:column="59">(<argument><expr><name pos:line="19" pos:column="60">port<pos:position pos:line="19" pos:column="64"/></name></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="66"/></expr_stmt>
				}<pos:position pos:line="20" pos:column="34"/></block></then></if>
				<expr_stmt><expr><call><name pos:line="21" pos:column="33">free<pos:position pos:line="21" pos:column="37"/></name><argument_list pos:line="21" pos:column="37">(<argument><expr><name pos:line="21" pos:column="38">hostname<pos:position pos:line="21" pos:column="46"/></name></expr></argument>)<pos:position pos:line="21" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="48"/></expr_stmt>
				<expr_stmt><expr><name pos:line="22" pos:column="33">hostname<pos:position pos:line="22" pos:column="41"/></name> <operator pos:line="22" pos:column="42">=<pos:position pos:line="22" pos:column="43"/></operator> <call><name pos:line="22" pos:column="44">xstrdup_tolower<pos:position pos:line="22" pos:column="59"/></name><argument_list pos:line="22" pos:column="59">(<argument><expr><name pos:line="22" pos:column="60">host<pos:position pos:line="22" pos:column="64"/></name></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="66"/></expr_stmt>
			}<pos:position pos:line="23" pos:column="26"/></block></then></if>

			<comment type="block" pos:line="25" pos:column="25">/* On to the next one */</comment>
			<expr_stmt><expr><name pos:line="26" pos:column="25">extra_args<pos:position pos:line="26" pos:column="35"/></name> <operator pos:line="26" pos:column="36">=<pos:position pos:line="26" pos:column="37"/></operator> <name pos:line="26" pos:column="38">val<pos:position pos:line="26" pos:column="41"/></name> <operator pos:line="26" pos:column="42">+<pos:position pos:line="26" pos:column="43"/></operator> <name pos:line="26" pos:column="44">vallen<pos:position pos:line="26" pos:column="50"/></name></expr>;<pos:position pos:line="26" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="27" pos:column="18"/></block></then></if>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">extra_args<pos:position pos:line="28" pos:column="31"/></name> <operator pos:line="28" pos:column="32">&lt;<pos:position pos:line="28" pos:column="36"/></operator> <name pos:line="28" pos:column="34">end<pos:position pos:line="28" pos:column="37"/></name> <operator pos:line="28" pos:column="38">&amp;&amp;<pos:position pos:line="28" pos:column="48"/></operator> <operator pos:line="28" pos:column="41">*<pos:position pos:line="28" pos:column="42"/></operator><name pos:line="28" pos:column="42">extra_args<pos:position pos:line="28" pos:column="52"/></name></expr>)<pos:position pos:line="28" pos:column="53"/></condition><then pos:line="28" pos:column="53">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="25">die<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><literal type="string" pos:line="29" pos:column="29">"Invalid request"<pos:position pos:line="29" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="48"/></expr_stmt></block></then></if>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="32" pos:column="9">/*
	 * Locate canonical hostname and its IP address.
	 */</comment>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">hostname<pos:position pos:line="35" pos:column="21"/></name></expr>)<pos:position pos:line="35" pos:column="22"/></condition><then pos:line="35" pos:column="22"> <block pos:line="35" pos:column="23">{
<cpp:ifndef pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">ifndef<pos:position pos:line="36" pos:column="8"/></cpp:directive> <name pos:line="36" pos:column="9">NO_IPV6<pos:position pos:line="36" pos:column="16"/></name></cpp:ifndef>
		<decl_stmt><decl><type><name><name pos:line="37" pos:column="17">struct<pos:position pos:line="37" pos:column="23"/></name> <name pos:line="37" pos:column="24">addrinfo<pos:position pos:line="37" pos:column="32"/></name></name></type> <name pos:line="37" pos:column="33">hints<pos:position pos:line="37" pos:column="38"/></name></decl>;<pos:position pos:line="37" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="38" pos:column="17">struct<pos:position pos:line="38" pos:column="23"/></name> <name pos:line="38" pos:column="24">addrinfo<pos:position pos:line="38" pos:column="32"/></name></name> <modifier pos:line="38" pos:column="33">*<pos:position pos:line="38" pos:column="34"/></modifier></type><name pos:line="38" pos:column="34">ai<pos:position pos:line="38" pos:column="36"/></name></decl>;<pos:position pos:line="38" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="39" pos:column="17">int<pos:position pos:line="39" pos:column="20"/></name></type> <name pos:line="39" pos:column="21">gai<pos:position pos:line="39" pos:column="24"/></name></decl>;<pos:position pos:line="39" pos:column="25"/></decl_stmt>
		<decl_stmt><decl><specifier pos:line="40" pos:column="17">static<pos:position pos:line="40" pos:column="23"/></specifier> <type><name pos:line="40" pos:column="24">char<pos:position pos:line="40" pos:column="28"/></name></type> <name><name pos:line="40" pos:column="29">addrbuf<pos:position pos:line="40" pos:column="36"/></name><index pos:line="40" pos:column="36">[<expr><name pos:line="40" pos:column="37">HOST_NAME_MAX<pos:position pos:line="40" pos:column="50"/></name> <operator pos:line="40" pos:column="51">+<pos:position pos:line="40" pos:column="52"/></operator> <literal type="number" pos:line="40" pos:column="53">1<pos:position pos:line="40" pos:column="54"/></literal></expr>]<pos:position pos:line="40" pos:column="55"/></index></name></decl>;<pos:position pos:line="40" pos:column="56"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="42" pos:column="17">memset<pos:position pos:line="42" pos:column="23"/></name><argument_list pos:line="42" pos:column="23">(<argument><expr><operator pos:line="42" pos:column="24">&amp;<pos:position pos:line="42" pos:column="29"/></operator><name pos:line="42" pos:column="25">hints<pos:position pos:line="42" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="32">0<pos:position pos:line="42" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="35">sizeof<argument_list pos:line="42" pos:column="41">(<argument><expr><name pos:line="42" pos:column="42">hints<pos:position pos:line="42" pos:column="47"/></name></expr></argument>)<pos:position pos:line="42" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="42" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="43" pos:column="17">hints<pos:position pos:line="43" pos:column="22"/></name><operator pos:line="43" pos:column="22">.<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="23">ai_flags<pos:position pos:line="43" pos:column="31"/></name></name> <operator pos:line="43" pos:column="32">=<pos:position pos:line="43" pos:column="33"/></operator> <name pos:line="43" pos:column="34">AI_CANONNAME<pos:position pos:line="43" pos:column="46"/></name></expr>;<pos:position pos:line="43" pos:column="47"/></expr_stmt>

		<expr_stmt><expr><name pos:line="45" pos:column="17">gai<pos:position pos:line="45" pos:column="20"/></name> <operator pos:line="45" pos:column="21">=<pos:position pos:line="45" pos:column="22"/></operator> <call><name pos:line="45" pos:column="23">getaddrinfo<pos:position pos:line="45" pos:column="34"/></name><argument_list pos:line="45" pos:column="34">(<argument><expr><name pos:line="45" pos:column="35">hostname<pos:position pos:line="45" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="45">NULL<pos:position pos:line="45" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="51">&amp;<pos:position pos:line="45" pos:column="56"/></operator><name pos:line="45" pos:column="52">hints<pos:position pos:line="45" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="59">&amp;<pos:position pos:line="45" pos:column="64"/></operator><name pos:line="45" pos:column="60">ai<pos:position pos:line="45" pos:column="62"/></name></expr></argument>)<pos:position pos:line="45" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="64"/></expr_stmt>
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><operator pos:line="46" pos:column="21">!<pos:position pos:line="46" pos:column="22"/></operator><name pos:line="46" pos:column="22">gai<pos:position pos:line="46" pos:column="25"/></name></expr>)<pos:position pos:line="46" pos:column="26"/></condition><then pos:line="46" pos:column="26"> <block pos:line="46" pos:column="27">{
			<decl_stmt><decl><type><name><name pos:line="47" pos:column="25">struct<pos:position pos:line="47" pos:column="31"/></name> <name pos:line="47" pos:column="32">sockaddr_in<pos:position pos:line="47" pos:column="43"/></name></name> <modifier pos:line="47" pos:column="44">*<pos:position pos:line="47" pos:column="45"/></modifier></type><name pos:line="47" pos:column="45">sin_addr<pos:position pos:line="47" pos:column="53"/></name> <init pos:line="47" pos:column="54">= <expr><operator pos:line="47" pos:column="56">(<pos:position pos:line="47" pos:column="57"/></operator><name pos:line="47" pos:column="57">void<pos:position pos:line="47" pos:column="61"/></name> <operator pos:line="47" pos:column="62">*<pos:position pos:line="47" pos:column="63"/></operator><operator pos:line="47" pos:column="63">)<pos:position pos:line="47" pos:column="64"/></operator><name><name pos:line="47" pos:column="64">ai<pos:position pos:line="47" pos:column="66"/></name><operator pos:line="47" pos:column="66">-&gt;<pos:position pos:line="47" pos:column="71"/></operator><name pos:line="47" pos:column="68">ai_addr<pos:position pos:line="47" pos:column="75"/></name></name></expr></init></decl>;<pos:position pos:line="47" pos:column="76"/></decl_stmt>

			<expr_stmt><expr><call><name pos:line="49" pos:column="25">inet_ntop<pos:position pos:line="49" pos:column="34"/></name><argument_list pos:line="49" pos:column="34">(<argument><expr><name pos:line="49" pos:column="35">AF_INET<pos:position pos:line="49" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="44">&amp;<pos:position pos:line="49" pos:column="49"/></operator><name><name pos:line="49" pos:column="45">sin_addr<pos:position pos:line="49" pos:column="53"/></name><operator pos:line="49" pos:column="53">-&gt;<pos:position pos:line="49" pos:column="58"/></operator><name pos:line="49" pos:column="55">sin_addr<pos:position pos:line="49" pos:column="63"/></name></name></expr></argument>,
				  <argument><expr><name pos:line="50" pos:column="35">addrbuf<pos:position pos:line="50" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="50" pos:column="44">sizeof<argument_list pos:line="50" pos:column="50">(<argument><expr><name pos:line="50" pos:column="51">addrbuf<pos:position pos:line="50" pos:column="58"/></name></expr></argument>)<pos:position pos:line="50" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="50" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="61"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="51" pos:column="25">free<pos:position pos:line="51" pos:column="29"/></name><argument_list pos:line="51" pos:column="29">(<argument><expr><name pos:line="51" pos:column="30">ip_address<pos:position pos:line="51" pos:column="40"/></name></expr></argument>)<pos:position pos:line="51" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="52" pos:column="25">ip_address<pos:position pos:line="52" pos:column="35"/></name> <operator pos:line="52" pos:column="36">=<pos:position pos:line="52" pos:column="37"/></operator> <call><name pos:line="52" pos:column="38">xstrdup<pos:position pos:line="52" pos:column="45"/></name><argument_list pos:line="52" pos:column="45">(<argument><expr><name pos:line="52" pos:column="46">addrbuf<pos:position pos:line="52" pos:column="53"/></name></expr></argument>)<pos:position pos:line="52" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="55"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="54" pos:column="25">free<pos:position pos:line="54" pos:column="29"/></name><argument_list pos:line="54" pos:column="29">(<argument><expr><name pos:line="54" pos:column="30">canon_hostname<pos:position pos:line="54" pos:column="44"/></name></expr></argument>)<pos:position pos:line="54" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="55" pos:column="25">canon_hostname<pos:position pos:line="55" pos:column="39"/></name> <operator pos:line="55" pos:column="40">=<pos:position pos:line="55" pos:column="41"/></operator> <call><name pos:line="55" pos:column="42">xstrdup<pos:position pos:line="55" pos:column="49"/></name><argument_list pos:line="55" pos:column="49">(<argument><expr><ternary><condition><expr><name><name pos:line="55" pos:column="50">ai<pos:position pos:line="55" pos:column="52"/></name><operator pos:line="55" pos:column="52">-&gt;<pos:position pos:line="55" pos:column="57"/></operator><name pos:line="55" pos:column="54">ai_canonname<pos:position pos:line="55" pos:column="66"/></name></name></expr> ?<pos:position pos:line="55" pos:column="68"/></condition><then pos:line="55" pos:column="68">
						 <expr><name><name pos:line="56" pos:column="50">ai<pos:position pos:line="56" pos:column="52"/></name><operator pos:line="56" pos:column="52">-&gt;<pos:position pos:line="56" pos:column="57"/></operator><name pos:line="56" pos:column="54">ai_canonname<pos:position pos:line="56" pos:column="66"/></name></name></expr> <pos:position pos:line="56" pos:column="67"/></then><else pos:line="56" pos:column="67">: <expr><name pos:line="56" pos:column="69">ip_address<pos:position pos:line="56" pos:column="79"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="56" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="81"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="58" pos:column="25">freeaddrinfo<pos:position pos:line="58" pos:column="37"/></name><argument_list pos:line="58" pos:column="37">(<argument><expr><name pos:line="58" pos:column="38">ai<pos:position pos:line="58" pos:column="40"/></name></expr></argument>)<pos:position pos:line="58" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="42"/></expr_stmt>
		}<pos:position pos:line="59" pos:column="18"/></block></then></if>
<cpp:else pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">else<pos:position pos:line="60" pos:column="6"/></cpp:directive></cpp:else>
		<decl_stmt><decl><type><name><name pos:line="61" pos:column="17">struct<pos:position pos:line="61" pos:column="23"/></name> <name pos:line="61" pos:column="24">hostent<pos:position pos:line="61" pos:column="31"/></name></name> <modifier pos:line="61" pos:column="32">*<pos:position pos:line="61" pos:column="33"/></modifier></type><name pos:line="61" pos:column="33">hent<pos:position pos:line="61" pos:column="37"/></name></decl>;<pos:position pos:line="61" pos:column="38"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="62" pos:column="17">struct<pos:position pos:line="62" pos:column="23"/></name> <name pos:line="62" pos:column="24">sockaddr_in<pos:position pos:line="62" pos:column="35"/></name></name></type> <name pos:line="62" pos:column="36">sa<pos:position pos:line="62" pos:column="38"/></name></decl>;<pos:position pos:line="62" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="63" pos:column="17">char<pos:position pos:line="63" pos:column="21"/></name> <modifier pos:line="63" pos:column="22">*<pos:position pos:line="63" pos:column="23"/></modifier><modifier pos:line="63" pos:column="23">*<pos:position pos:line="63" pos:column="24"/></modifier></type><name pos:line="63" pos:column="24">ap<pos:position pos:line="63" pos:column="26"/></name></decl>;<pos:position pos:line="63" pos:column="27"/></decl_stmt>
		<decl_stmt><decl><specifier pos:line="64" pos:column="17">static<pos:position pos:line="64" pos:column="23"/></specifier> <type><name pos:line="64" pos:column="24">char<pos:position pos:line="64" pos:column="28"/></name></type> <name><name pos:line="64" pos:column="29">addrbuf<pos:position pos:line="64" pos:column="36"/></name><index pos:line="64" pos:column="36">[<expr><name pos:line="64" pos:column="37">HOST_NAME_MAX<pos:position pos:line="64" pos:column="50"/></name> <operator pos:line="64" pos:column="51">+<pos:position pos:line="64" pos:column="52"/></operator> <literal type="number" pos:line="64" pos:column="53">1<pos:position pos:line="64" pos:column="54"/></literal></expr>]<pos:position pos:line="64" pos:column="55"/></index></name></decl>;<pos:position pos:line="64" pos:column="56"/></decl_stmt>

		<expr_stmt><expr><name pos:line="66" pos:column="17">hent<pos:position pos:line="66" pos:column="21"/></name> <operator pos:line="66" pos:column="22">=<pos:position pos:line="66" pos:column="23"/></operator> <call><name pos:line="66" pos:column="24">gethostbyname<pos:position pos:line="66" pos:column="37"/></name><argument_list pos:line="66" pos:column="37">(<argument><expr><name pos:line="66" pos:column="38">hostname<pos:position pos:line="66" pos:column="46"/></name></expr></argument>)<pos:position pos:line="66" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="48"/></expr_stmt>

		<expr_stmt><expr><name pos:line="68" pos:column="17">ap<pos:position pos:line="68" pos:column="19"/></name> <operator pos:line="68" pos:column="20">=<pos:position pos:line="68" pos:column="21"/></operator> <name><name pos:line="68" pos:column="22">hent<pos:position pos:line="68" pos:column="26"/></name><operator pos:line="68" pos:column="26">-&gt;<pos:position pos:line="68" pos:column="31"/></operator><name pos:line="68" pos:column="28">h_addr_list<pos:position pos:line="68" pos:column="39"/></name></name></expr>;<pos:position pos:line="68" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">memset<pos:position pos:line="69" pos:column="23"/></name><argument_list pos:line="69" pos:column="23">(<argument><expr><operator pos:line="69" pos:column="24">&amp;<pos:position pos:line="69" pos:column="29"/></operator><name pos:line="69" pos:column="25">sa<pos:position pos:line="69" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="29">0<pos:position pos:line="69" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="69" pos:column="32">sizeof <name pos:line="69" pos:column="39">sa<pos:position pos:line="69" pos:column="41"/></name></sizeof></expr></argument>)<pos:position pos:line="69" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="43"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="70" pos:column="17">sa<pos:position pos:line="70" pos:column="19"/></name><operator pos:line="70" pos:column="19">.<pos:position pos:line="70" pos:column="20"/></operator><name pos:line="70" pos:column="20">sin_family<pos:position pos:line="70" pos:column="30"/></name></name> <operator pos:line="70" pos:column="31">=<pos:position pos:line="70" pos:column="32"/></operator> <name><name pos:line="70" pos:column="33">hent<pos:position pos:line="70" pos:column="37"/></name><operator pos:line="70" pos:column="37">-&gt;<pos:position pos:line="70" pos:column="42"/></operator><name pos:line="70" pos:column="39">h_addrtype<pos:position pos:line="70" pos:column="49"/></name></name></expr>;<pos:position pos:line="70" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="71" pos:column="17">sa<pos:position pos:line="71" pos:column="19"/></name><operator pos:line="71" pos:column="19">.<pos:position pos:line="71" pos:column="20"/></operator><name pos:line="71" pos:column="20">sin_port<pos:position pos:line="71" pos:column="28"/></name></name> <operator pos:line="71" pos:column="29">=<pos:position pos:line="71" pos:column="30"/></operator> <call><name pos:line="71" pos:column="31">htons<pos:position pos:line="71" pos:column="36"/></name><argument_list pos:line="71" pos:column="36">(<argument><expr><literal type="number" pos:line="71" pos:column="37">0<pos:position pos:line="71" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="72" pos:column="17">memcpy<pos:position pos:line="72" pos:column="23"/></name><argument_list pos:line="72" pos:column="23">(<argument><expr><operator pos:line="72" pos:column="24">&amp;<pos:position pos:line="72" pos:column="29"/></operator><name><name pos:line="72" pos:column="25">sa<pos:position pos:line="72" pos:column="27"/></name><operator pos:line="72" pos:column="27">.<pos:position pos:line="72" pos:column="28"/></operator><name pos:line="72" pos:column="28">sin_addr<pos:position pos:line="72" pos:column="36"/></name></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="38">*<pos:position pos:line="72" pos:column="39"/></operator><name pos:line="72" pos:column="39">ap<pos:position pos:line="72" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="43">hent<pos:position pos:line="72" pos:column="47"/></name><operator pos:line="72" pos:column="47">-&gt;<pos:position pos:line="72" pos:column="52"/></operator><name pos:line="72" pos:column="49">h_length<pos:position pos:line="72" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="59"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="74" pos:column="17">inet_ntop<pos:position pos:line="74" pos:column="26"/></name><argument_list pos:line="74" pos:column="26">(<argument><expr><name><name pos:line="74" pos:column="27">hent<pos:position pos:line="74" pos:column="31"/></name><operator pos:line="74" pos:column="31">-&gt;<pos:position pos:line="74" pos:column="36"/></operator><name pos:line="74" pos:column="33">h_addrtype<pos:position pos:line="74" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="45">&amp;<pos:position pos:line="74" pos:column="50"/></operator><name><name pos:line="74" pos:column="46">sa<pos:position pos:line="74" pos:column="48"/></name><operator pos:line="74" pos:column="48">.<pos:position pos:line="74" pos:column="49"/></operator><name pos:line="74" pos:column="49">sin_addr<pos:position pos:line="74" pos:column="57"/></name></name></expr></argument>,
			  <argument><expr><name pos:line="75" pos:column="27">addrbuf<pos:position pos:line="75" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="75" pos:column="36">sizeof<argument_list pos:line="75" pos:column="42">(<argument><expr><name pos:line="75" pos:column="43">addrbuf<pos:position pos:line="75" pos:column="50"/></name></expr></argument>)<pos:position pos:line="75" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="75" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="53"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="77" pos:column="17">free<pos:position pos:line="77" pos:column="21"/></name><argument_list pos:line="77" pos:column="21">(<argument><expr><name pos:line="77" pos:column="22">canon_hostname<pos:position pos:line="77" pos:column="36"/></name></expr></argument>)<pos:position pos:line="77" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="78" pos:column="17">canon_hostname<pos:position pos:line="78" pos:column="31"/></name> <operator pos:line="78" pos:column="32">=<pos:position pos:line="78" pos:column="33"/></operator> <call><name pos:line="78" pos:column="34">xstrdup<pos:position pos:line="78" pos:column="41"/></name><argument_list pos:line="78" pos:column="41">(<argument><expr><name><name pos:line="78" pos:column="42">hent<pos:position pos:line="78" pos:column="46"/></name><operator pos:line="78" pos:column="46">-&gt;<pos:position pos:line="78" pos:column="51"/></operator><name pos:line="78" pos:column="48">h_name<pos:position pos:line="78" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="79" pos:column="17">free<pos:position pos:line="79" pos:column="21"/></name><argument_list pos:line="79" pos:column="21">(<argument><expr><name pos:line="79" pos:column="22">ip_address<pos:position pos:line="79" pos:column="32"/></name></expr></argument>)<pos:position pos:line="79" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="80" pos:column="17">ip_address<pos:position pos:line="80" pos:column="27"/></name> <operator pos:line="80" pos:column="28">=<pos:position pos:line="80" pos:column="29"/></operator> <call><name pos:line="80" pos:column="30">xstrdup<pos:position pos:line="80" pos:column="37"/></name><argument_list pos:line="80" pos:column="37">(<argument><expr><name pos:line="80" pos:column="38">addrbuf<pos:position pos:line="80" pos:column="45"/></name></expr></argument>)<pos:position pos:line="80" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="47"/></expr_stmt>
<cpp:endif pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">endif<pos:position pos:line="81" pos:column="7"/></cpp:directive></cpp:endif>
	}<pos:position pos:line="82" pos:column="10"/></block></then></if>
}<pos:position pos:line="83" pos:column="2"/></block></function></unit>
