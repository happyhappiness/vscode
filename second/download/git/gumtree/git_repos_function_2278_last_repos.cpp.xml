<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2278_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">read_sha1_file_extended<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">unsigned<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">sha1<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
			      <parameter><decl><type><name><name pos:line="2" pos:column="31">enum<pos:position pos:line="2" pos:column="35"/></name> <name pos:line="2" pos:column="36">object_type<pos:position pos:line="2" pos:column="47"/></name></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">type<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>,
			      <parameter><decl><type><name pos:line="3" pos:column="31">unsigned<pos:position pos:line="3" pos:column="39"/></name> <name pos:line="3" pos:column="40">long<pos:position pos:line="3" pos:column="44"/></name> <modifier pos:line="3" pos:column="45">*<pos:position pos:line="3" pos:column="46"/></modifier></type><name pos:line="3" pos:column="46">size<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>,
			      <parameter><decl><type><name pos:line="4" pos:column="31">int<pos:position pos:line="4" pos:column="34"/></name></type> <name pos:line="4" pos:column="35">lookup_replace<pos:position pos:line="4" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="50"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">void<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">data<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name><name pos:line="7" pos:column="15">struct<pos:position pos:line="7" pos:column="21"/></name> <name pos:line="7" pos:column="22">packed_git<pos:position pos:line="7" pos:column="32"/></name></name> <modifier pos:line="7" pos:column="33">*<pos:position pos:line="7" pos:column="34"/></modifier></type><name pos:line="7" pos:column="34">p<pos:position pos:line="7" pos:column="35"/></name></decl>;<pos:position pos:line="7" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">path<pos:position pos:line="8" pos:column="25"/></name></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">stat<pos:position pos:line="9" pos:column="20"/></name></name></type> <name pos:line="9" pos:column="21">st<pos:position pos:line="9" pos:column="23"/></name></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">unsigned<pos:position pos:line="10" pos:column="23"/></name> <name pos:line="10" pos:column="24">char<pos:position pos:line="10" pos:column="28"/></name> <modifier pos:line="10" pos:column="29">*<pos:position pos:line="10" pos:column="30"/></modifier></type><name pos:line="10" pos:column="30">repl<pos:position pos:line="10" pos:column="34"/></name> <init pos:line="10" pos:column="35">= <expr><ternary><condition><expr><name pos:line="10" pos:column="37">lookup_replace<pos:position pos:line="10" pos:column="51"/></name></expr> ?<pos:position pos:line="10" pos:column="53"/></condition><then pos:line="10" pos:column="53"> <expr><call><name pos:line="10" pos:column="54">lookup_replace_object<pos:position pos:line="10" pos:column="75"/></name><argument_list pos:line="10" pos:column="75">(<argument><expr><name pos:line="10" pos:column="76">sha1<pos:position pos:line="10" pos:column="80"/></name></expr></argument>)<pos:position pos:line="10" pos:column="81"/></argument_list></call></expr>
						   <pos:position pos:line="11" pos:column="10"/></then><else pos:line="11" pos:column="52">: <expr><name pos:line="11" pos:column="54">sha1<pos:position pos:line="11" pos:column="58"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="11" pos:column="59"/></decl_stmt>

	<expr_stmt><expr><name pos:line="13" pos:column="9">errno<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal></expr>;<pos:position pos:line="13" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><name pos:line="14" pos:column="9">data<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <call><name pos:line="14" pos:column="16">read_object<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><name pos:line="14" pos:column="28">repl<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="34">type<pos:position pos:line="14" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="40">size<pos:position pos:line="14" pos:column="44"/></name></expr></argument>)<pos:position pos:line="14" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="46"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">data<pos:position pos:line="15" pos:column="17"/></name></expr>)<pos:position pos:line="15" pos:column="18"/></condition><then pos:line="15" pos:column="18">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><name pos:line="16" pos:column="24">data<pos:position pos:line="16" pos:column="28"/></name></expr>;<pos:position pos:line="16" pos:column="29"/></return></block></then></if>

	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">errno<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">&amp;&amp;<pos:position pos:line="18" pos:column="29"/></operator> <name pos:line="18" pos:column="22">errno<pos:position pos:line="18" pos:column="27"/></name> <operator pos:line="18" pos:column="28">!=<pos:position pos:line="18" pos:column="30"/></operator> <name pos:line="18" pos:column="31">ENOENT<pos:position pos:line="18" pos:column="37"/></name></expr>)<pos:position pos:line="18" pos:column="38"/></condition><then pos:line="18" pos:column="38">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="17">die_errno<pos:position pos:line="19" pos:column="26"/></name><argument_list pos:line="19" pos:column="26">(<argument><expr><literal type="string" pos:line="19" pos:column="27">"failed to read object %s"<pos:position pos:line="19" pos:column="53"/></literal></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="55">sha1_to_hex<pos:position pos:line="19" pos:column="66"/></name><argument_list pos:line="19" pos:column="66">(<argument><expr><name pos:line="19" pos:column="67">sha1<pos:position pos:line="19" pos:column="71"/></name></expr></argument>)<pos:position pos:line="19" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="74"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="21" pos:column="9">/* die if we replaced an object with one that does not exist */</comment>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">repl<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">!=<pos:position pos:line="22" pos:column="20"/></operator> <name pos:line="22" pos:column="21">sha1<pos:position pos:line="22" pos:column="25"/></name></expr>)<pos:position pos:line="22" pos:column="26"/></condition><then pos:line="22" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="17">die<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><literal type="string" pos:line="23" pos:column="21">"replacement %s not found for %s"<pos:position pos:line="23" pos:column="54"/></literal></expr></argument>,
		    <argument><expr><call><name pos:line="24" pos:column="21">sha1_to_hex<pos:position pos:line="24" pos:column="32"/></name><argument_list pos:line="24" pos:column="32">(<argument><expr><name pos:line="24" pos:column="33">repl<pos:position pos:line="24" pos:column="37"/></name></expr></argument>)<pos:position pos:line="24" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="40">sha1_to_hex<pos:position pos:line="24" pos:column="51"/></name><argument_list pos:line="24" pos:column="51">(<argument><expr><name pos:line="24" pos:column="52">sha1<pos:position pos:line="24" pos:column="56"/></name></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="59"/></expr_stmt></block></then></if>

	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><operator pos:line="26" pos:column="13">!<pos:position pos:line="26" pos:column="14"/></operator><call><name pos:line="26" pos:column="14">stat_sha1_file<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><name pos:line="26" pos:column="29">repl<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="35">&amp;<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="36">st<pos:position pos:line="26" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="40">&amp;<pos:position pos:line="26" pos:column="45"/></operator><name pos:line="26" pos:column="41">path<pos:position pos:line="26" pos:column="45"/></name></expr></argument>)<pos:position pos:line="26" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="47"/></condition><then pos:line="26" pos:column="47">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="17">die<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><literal type="string" pos:line="27" pos:column="21">"loose object %s (stored in %s) is corrupt"<pos:position pos:line="27" pos:column="64"/></literal></expr></argument>,
		    <argument><expr><call><name pos:line="28" pos:column="21">sha1_to_hex<pos:position pos:line="28" pos:column="32"/></name><argument_list pos:line="28" pos:column="32">(<argument><expr><name pos:line="28" pos:column="33">repl<pos:position pos:line="28" pos:column="37"/></name></expr></argument>)<pos:position pos:line="28" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="28" pos:column="40">path<pos:position pos:line="28" pos:column="44"/></name></expr></argument>)<pos:position pos:line="28" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="46"/></expr_stmt></block></then></if>

	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><operator pos:line="30" pos:column="13">(<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">p<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <call><name pos:line="30" pos:column="18">has_packed_and_bad<pos:position pos:line="30" pos:column="36"/></name><argument_list pos:line="30" pos:column="36">(<argument><expr><name pos:line="30" pos:column="37">repl<pos:position pos:line="30" pos:column="41"/></name></expr></argument>)<pos:position pos:line="30" pos:column="42"/></argument_list></call><operator pos:line="30" pos:column="42">)<pos:position pos:line="30" pos:column="43"/></operator> <operator pos:line="30" pos:column="44">!=<pos:position pos:line="30" pos:column="46"/></operator> <name pos:line="30" pos:column="47">NULL<pos:position pos:line="30" pos:column="51"/></name></expr>)<pos:position pos:line="30" pos:column="52"/></condition><then pos:line="30" pos:column="52">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="17">die<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><literal type="string" pos:line="31" pos:column="21">"packed object %s (stored in %s) is corrupt"<pos:position pos:line="31" pos:column="65"/></literal></expr></argument>,
		    <argument><expr><call><name pos:line="32" pos:column="21">sha1_to_hex<pos:position pos:line="32" pos:column="32"/></name><argument_list pos:line="32" pos:column="32">(<argument><expr><name pos:line="32" pos:column="33">repl<pos:position pos:line="32" pos:column="37"/></name></expr></argument>)<pos:position pos:line="32" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="40">p<pos:position pos:line="32" pos:column="41"/></name><operator pos:line="32" pos:column="41">-&gt;<pos:position pos:line="32" pos:column="46"/></operator><name pos:line="32" pos:column="43">pack_name<pos:position pos:line="32" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="54"/></expr_stmt></block></then></if>

	<return pos:line="34" pos:column="9">return <expr><name pos:line="34" pos:column="16">NULL<pos:position pos:line="34" pos:column="20"/></name></expr>;<pos:position pos:line="34" pos:column="21"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
