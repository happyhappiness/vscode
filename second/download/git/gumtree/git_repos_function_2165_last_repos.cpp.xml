<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2165_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">fill_sha1_path<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">strbuf<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">buf<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">unsigned<pos:position pos:line="1" pos:column="62"/></name> <name pos:line="1" pos:column="63">char<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">sha1<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">i<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
	<for pos:line="4" pos:column="9">for <control pos:line="4" pos:column="13">(<init><expr><name pos:line="4" pos:column="14">i<pos:position pos:line="4" pos:column="15"/></name> <operator pos:line="4" pos:column="16">=<pos:position pos:line="4" pos:column="17"/></operator> <literal type="number" pos:line="4" pos:column="18">0<pos:position pos:line="4" pos:column="19"/></literal></expr>;<pos:position pos:line="4" pos:column="20"/></init> <condition><expr><name pos:line="4" pos:column="21">i<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;<pos:position pos:line="4" pos:column="27"/></operator> <literal type="number" pos:line="4" pos:column="25">20<pos:position pos:line="4" pos:column="27"/></literal></expr>;<pos:position pos:line="4" pos:column="28"/></condition> <incr><expr><name pos:line="4" pos:column="29">i<pos:position pos:line="4" pos:column="30"/></name><operator pos:line="4" pos:column="30">++<pos:position pos:line="4" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="4" pos:column="33"/></control> <block pos:line="4" pos:column="34">{
		<decl_stmt><decl><specifier pos:line="5" pos:column="17">static<pos:position pos:line="5" pos:column="23"/></specifier> <type><name pos:line="5" pos:column="24">char<pos:position pos:line="5" pos:column="28"/></name></type> <name><name pos:line="5" pos:column="29">hex<pos:position pos:line="5" pos:column="32"/></name><index pos:line="5" pos:column="32">[]<pos:position pos:line="5" pos:column="34"/></index></name> <init pos:line="5" pos:column="35">= <expr><literal type="string" pos:line="5" pos:column="37">"0123456789abcdef"<pos:position pos:line="5" pos:column="55"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="56"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">unsigned<pos:position pos:line="6" pos:column="25"/></name> <name pos:line="6" pos:column="26">int<pos:position pos:line="6" pos:column="29"/></name></type> <name pos:line="6" pos:column="30">val<pos:position pos:line="6" pos:column="33"/></name> <init pos:line="6" pos:column="34">= <expr><name><name pos:line="6" pos:column="36">sha1<pos:position pos:line="6" pos:column="40"/></name><index pos:line="6" pos:column="40">[<expr><name pos:line="6" pos:column="41">i<pos:position pos:line="6" pos:column="42"/></name></expr>]<pos:position pos:line="6" pos:column="43"/></index></name></expr></init></decl>;<pos:position pos:line="6" pos:column="44"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">strbuf_addch<pos:position pos:line="7" pos:column="29"/></name><argument_list pos:line="7" pos:column="29">(<argument><expr><name pos:line="7" pos:column="30">buf<pos:position pos:line="7" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="35">hex<pos:position pos:line="7" pos:column="38"/></name><index pos:line="7" pos:column="38">[<expr><name pos:line="7" pos:column="39">val<pos:position pos:line="7" pos:column="42"/></name> <operator pos:line="7" pos:column="43">&gt;&gt;<pos:position pos:line="7" pos:column="48"/></operator> <literal type="number" pos:line="7" pos:column="46">4<pos:position pos:line="7" pos:column="47"/></literal></expr>]<pos:position pos:line="7" pos:column="48"/></index></name></expr></argument>)<pos:position pos:line="7" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">strbuf_addch<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">(<argument><expr><name pos:line="8" pos:column="30">buf<pos:position pos:line="8" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="35">hex<pos:position pos:line="8" pos:column="38"/></name><index pos:line="8" pos:column="38">[<expr><name pos:line="8" pos:column="39">val<pos:position pos:line="8" pos:column="42"/></name> <operator pos:line="8" pos:column="43">&amp;<pos:position pos:line="8" pos:column="48"/></operator> <literal type="number" pos:line="8" pos:column="45">0xf<pos:position pos:line="8" pos:column="48"/></literal></expr>]<pos:position pos:line="8" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="8" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="51"/></expr_stmt>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><operator pos:line="9" pos:column="21">!<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="22">i<pos:position pos:line="9" pos:column="23"/></name></expr>)<pos:position pos:line="9" pos:column="24"/></condition><then pos:line="9" pos:column="24">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="25">strbuf_addch<pos:position pos:line="10" pos:column="37"/></name><argument_list pos:line="10" pos:column="37">(<argument><expr><name pos:line="10" pos:column="38">buf<pos:position pos:line="10" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="10" pos:column="43">'/'<pos:position pos:line="10" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="48"/></expr_stmt></block></then></if>
	}<pos:position pos:line="11" pos:column="10"/></block></for>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
