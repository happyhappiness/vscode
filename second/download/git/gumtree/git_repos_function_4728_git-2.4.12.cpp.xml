<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4728_git-2.4.12.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">find_header<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">msg<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">size_t<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">len<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <name pos:line="1" pos:column="61">char<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">key<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">key_len<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><call><name pos:line="3" pos:column="23">strlen<pos:position pos:line="3" pos:column="29"/></name><argument_list pos:line="3" pos:column="29">(<argument><expr><name pos:line="3" pos:column="30">key<pos:position pos:line="3" pos:column="33"/></name></expr></argument>)<pos:position pos:line="3" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">line<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name pos:line="4" pos:column="28">msg<pos:position pos:line="4" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>

	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><name pos:line="6" pos:column="16">line<pos:position pos:line="6" pos:column="20"/></name> <operator pos:line="6" pos:column="21">&amp;&amp;<pos:position pos:line="6" pos:column="31"/></operator> <name pos:line="6" pos:column="24">line<pos:position pos:line="6" pos:column="28"/></name> <operator pos:line="6" pos:column="29">&lt;<pos:position pos:line="6" pos:column="33"/></operator> <name pos:line="6" pos:column="31">msg<pos:position pos:line="6" pos:column="34"/></name> <operator pos:line="6" pos:column="35">+<pos:position pos:line="6" pos:column="36"/></operator> <name pos:line="6" pos:column="37">len<pos:position pos:line="6" pos:column="40"/></name></expr>)<pos:position pos:line="6" pos:column="41"/></condition> <block pos:line="6" pos:column="42">{
		<decl_stmt><decl><type><specifier pos:line="7" pos:column="17">const<pos:position pos:line="7" pos:column="22"/></specifier> <name pos:line="7" pos:column="23">char<pos:position pos:line="7" pos:column="27"/></name> <modifier pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></modifier></type><name pos:line="7" pos:column="29">eol<pos:position pos:line="7" pos:column="32"/></name> <init pos:line="7" pos:column="33">= <expr><call><name pos:line="7" pos:column="35">strchrnul<pos:position pos:line="7" pos:column="44"/></name><argument_list pos:line="7" pos:column="44">(<argument><expr><name pos:line="7" pos:column="45">line<pos:position pos:line="7" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="7" pos:column="51">'\n'<pos:position pos:line="7" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="57"/></decl_stmt>

		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><operator pos:line="9" pos:column="21">(<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="22">msg<pos:position pos:line="9" pos:column="25"/></name> <operator pos:line="9" pos:column="26">+<pos:position pos:line="9" pos:column="27"/></operator> <name pos:line="9" pos:column="28">len<pos:position pos:line="9" pos:column="31"/></name> <operator pos:line="9" pos:column="32">&lt;=<pos:position pos:line="9" pos:column="37"/></operator> <name pos:line="9" pos:column="35">eol<pos:position pos:line="9" pos:column="38"/></name><operator pos:line="9" pos:column="38">)<pos:position pos:line="9" pos:column="39"/></operator> <operator pos:line="9" pos:column="40">||<pos:position pos:line="9" pos:column="42"/></operator> <name pos:line="9" pos:column="43">line<pos:position pos:line="9" pos:column="47"/></name> <operator pos:line="9" pos:column="48">==<pos:position pos:line="9" pos:column="50"/></operator> <name pos:line="9" pos:column="51">eol<pos:position pos:line="9" pos:column="54"/></name></expr>)<pos:position pos:line="9" pos:column="55"/></condition><then pos:line="9" pos:column="55">
			<block type="pseudo"><return pos:line="10" pos:column="25">return <expr><name pos:line="10" pos:column="32">NULL<pos:position pos:line="10" pos:column="36"/></name></expr>;<pos:position pos:line="10" pos:column="37"/></return></block></then></if>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name pos:line="11" pos:column="21">line<pos:position pos:line="11" pos:column="25"/></name> <operator pos:line="11" pos:column="26">+<pos:position pos:line="11" pos:column="27"/></operator> <name pos:line="11" pos:column="28">key_len<pos:position pos:line="11" pos:column="35"/></name> <operator pos:line="11" pos:column="36">&lt;<pos:position pos:line="11" pos:column="40"/></operator> <name pos:line="11" pos:column="38">eol<pos:position pos:line="11" pos:column="41"/></name> <operator pos:line="11" pos:column="42">&amp;&amp;<pos:position pos:line="11" pos:column="52"/></operator>
		    <operator pos:line="12" pos:column="21">!<pos:position pos:line="12" pos:column="22"/></operator><call><name pos:line="12" pos:column="22">memcmp<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><name pos:line="12" pos:column="29">line<pos:position pos:line="12" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="35">key<pos:position pos:line="12" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="40">key_len<pos:position pos:line="12" pos:column="47"/></name></expr></argument>)<pos:position pos:line="12" pos:column="48"/></argument_list></call> <operator pos:line="12" pos:column="49">&amp;&amp;<pos:position pos:line="12" pos:column="59"/></operator> <name><name pos:line="12" pos:column="52">line<pos:position pos:line="12" pos:column="56"/></name><index pos:line="12" pos:column="56">[<expr><name pos:line="12" pos:column="57">key_len<pos:position pos:line="12" pos:column="64"/></name></expr>]<pos:position pos:line="12" pos:column="65"/></index></name> <operator pos:line="12" pos:column="66">==<pos:position pos:line="12" pos:column="68"/></operator> <literal type="char" pos:line="12" pos:column="69">' '<pos:position pos:line="12" pos:column="72"/></literal></expr>)<pos:position pos:line="12" pos:column="73"/></condition><then pos:line="12" pos:column="73"> <block pos:line="12" pos:column="74">{
			<decl_stmt><decl><type><name pos:line="13" pos:column="25">int<pos:position pos:line="13" pos:column="28"/></name></type> <name pos:line="13" pos:column="29">offset<pos:position pos:line="13" pos:column="35"/></name> <init pos:line="13" pos:column="36">= <expr><name pos:line="13" pos:column="38">key_len<pos:position pos:line="13" pos:column="45"/></name> <operator pos:line="13" pos:column="46">+<pos:position pos:line="13" pos:column="47"/></operator> <literal type="number" pos:line="13" pos:column="48">1<pos:position pos:line="13" pos:column="49"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="50"/></decl_stmt>
			<return pos:line="14" pos:column="25">return <expr><call><name pos:line="14" pos:column="32">xmemdupz<pos:position pos:line="14" pos:column="40"/></name><argument_list pos:line="14" pos:column="40">(<argument><expr><name pos:line="14" pos:column="41">line<pos:position pos:line="14" pos:column="45"/></name> <operator pos:line="14" pos:column="46">+<pos:position pos:line="14" pos:column="47"/></operator> <name pos:line="14" pos:column="48">offset<pos:position pos:line="14" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="56">(<pos:position pos:line="14" pos:column="57"/></operator><name pos:line="14" pos:column="57">eol<pos:position pos:line="14" pos:column="60"/></name> <operator pos:line="14" pos:column="61">-<pos:position pos:line="14" pos:column="62"/></operator> <name pos:line="14" pos:column="63">line<pos:position pos:line="14" pos:column="67"/></name><operator pos:line="14" pos:column="67">)<pos:position pos:line="14" pos:column="68"/></operator> <operator pos:line="14" pos:column="69">-<pos:position pos:line="14" pos:column="70"/></operator> <name pos:line="14" pos:column="71">offset<pos:position pos:line="14" pos:column="77"/></name></expr></argument>)<pos:position pos:line="14" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="79"/></return>
		}<pos:position pos:line="15" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="16" pos:column="17">line<pos:position pos:line="16" pos:column="21"/></name> <operator pos:line="16" pos:column="22">=<pos:position pos:line="16" pos:column="23"/></operator> <ternary><condition><expr><operator pos:line="16" pos:column="24">*<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="25">eol<pos:position pos:line="16" pos:column="28"/></name></expr> ?<pos:position pos:line="16" pos:column="30"/></condition><then pos:line="16" pos:column="30"> <expr><name pos:line="16" pos:column="31">eol<pos:position pos:line="16" pos:column="34"/></name> <operator pos:line="16" pos:column="35">+<pos:position pos:line="16" pos:column="36"/></operator> <literal type="number" pos:line="16" pos:column="37">1<pos:position pos:line="16" pos:column="38"/></literal></expr> <pos:position pos:line="16" pos:column="39"/></then><else pos:line="16" pos:column="39">: <expr><name pos:line="16" pos:column="41">NULL<pos:position pos:line="16" pos:column="45"/></name></expr></else></ternary></expr>;<pos:position pos:line="16" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="17" pos:column="10"/></block></while>
	<return pos:line="18" pos:column="9">return <expr><name pos:line="18" pos:column="16">NULL<pos:position pos:line="18" pos:column="20"/></name></expr>;<pos:position pos:line="18" pos:column="21"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
