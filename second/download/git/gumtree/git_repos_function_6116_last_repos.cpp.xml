<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6116_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">split_mbox<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><specifier pos:line="1" pos:column="23">const<pos:position pos:line="1" pos:column="28"/></specifier> <name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">file<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">dir<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">int<pos:position pos:line="1" pos:column="61"/></name></type> <name pos:line="1" pos:column="62">allow_bare<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
		      <parameter><decl><type><name pos:line="2" pos:column="23">int<pos:position pos:line="2" pos:column="26"/></name></type> <name pos:line="2" pos:column="27">nr_prec<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">int<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">skip<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">ret<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><operator pos:line="4" pos:column="19">-<pos:position pos:line="4" pos:column="20"/></operator><literal type="number" pos:line="4" pos:column="20">1<pos:position pos:line="4" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">peek<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>

	<decl_stmt><decl><type><name pos:line="7" pos:column="9">FILE<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">f<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><ternary><condition><expr><operator pos:line="7" pos:column="19">!<pos:position pos:line="7" pos:column="20"/></operator><call><name pos:line="7" pos:column="20">strcmp<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><name pos:line="7" pos:column="27">file<pos:position pos:line="7" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="33">"-"<pos:position pos:line="7" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="37"/></argument_list></call></expr> ?<pos:position pos:line="7" pos:column="39"/></condition><then pos:line="7" pos:column="39"> <expr><name pos:line="7" pos:column="40">stdin<pos:position pos:line="7" pos:column="45"/></name></expr> <pos:position pos:line="7" pos:column="46"/></then><else pos:line="7" pos:column="46">: <expr><call><name pos:line="7" pos:column="48">fopen<pos:position pos:line="7" pos:column="53"/></name><argument_list pos:line="7" pos:column="53">(<argument><expr><name pos:line="7" pos:column="54">file<pos:position pos:line="7" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="60">"r"<pos:position pos:line="7" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="64"/></argument_list></call></expr></else></ternary></expr></init></decl>;<pos:position pos:line="7" pos:column="65"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">file_done<pos:position pos:line="8" pos:column="22"/></name> <init pos:line="8" pos:column="23">= <expr><literal type="number" pos:line="8" pos:column="25">0<pos:position pos:line="8" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">f<pos:position pos:line="10" pos:column="15"/></name></expr>)<pos:position pos:line="10" pos:column="16"/></condition><then pos:line="10" pos:column="16"> <block pos:line="10" pos:column="17">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">error_errno<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><literal type="string" pos:line="11" pos:column="29">"cannot open mbox %s"<pos:position pos:line="11" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="52">file<pos:position pos:line="11" pos:column="56"/></name></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="58"/></expr_stmt>
		<goto pos:line="12" pos:column="17">goto <name pos:line="12" pos:column="22">out<pos:position pos:line="12" pos:column="25"/></name>;<pos:position pos:line="12" pos:column="26"/></goto>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<do pos:line="15" pos:column="9">do <block pos:line="15" pos:column="12">{
		<expr_stmt><expr><name pos:line="16" pos:column="17">peek<pos:position pos:line="16" pos:column="21"/></name> <operator pos:line="16" pos:column="22">=<pos:position pos:line="16" pos:column="23"/></operator> <call><name pos:line="16" pos:column="24">fgetc<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">f<pos:position pos:line="16" pos:column="31"/></name></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">peek<pos:position pos:line="17" pos:column="25"/></name> <operator pos:line="17" pos:column="26">==<pos:position pos:line="17" pos:column="28"/></operator> <name pos:line="17" pos:column="29">EOF<pos:position pos:line="17" pos:column="32"/></name></expr>)<pos:position pos:line="17" pos:column="33"/></condition><then pos:line="17" pos:column="33"> <block pos:line="17" pos:column="34">{
			<if pos:line="18" pos:column="25">if <condition pos:line="18" pos:column="28">(<expr><name pos:line="18" pos:column="29">f<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">==<pos:position pos:line="18" pos:column="33"/></operator> <name pos:line="18" pos:column="34">stdin<pos:position pos:line="18" pos:column="39"/></name></expr>)<pos:position pos:line="18" pos:column="40"/></condition><then pos:line="18" pos:column="40">
				<comment type="block" pos:line="19" pos:column="33">/* empty stdin is OK */</comment>
				<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="33">ret<pos:position pos:line="20" pos:column="36"/></name> <operator pos:line="20" pos:column="37">=<pos:position pos:line="20" pos:column="38"/></operator> <name pos:line="20" pos:column="39">skip<pos:position pos:line="20" pos:column="43"/></name></expr>;<pos:position pos:line="20" pos:column="44"/></expr_stmt></block></then>
			<else pos:line="21" pos:column="25">else <block pos:line="21" pos:column="30">{
				<expr_stmt><expr><call><name pos:line="22" pos:column="33">fclose<pos:position pos:line="22" pos:column="39"/></name><argument_list pos:line="22" pos:column="39">(<argument><expr><name pos:line="22" pos:column="40">f<pos:position pos:line="22" pos:column="41"/></name></expr></argument>)<pos:position pos:line="22" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="43"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="23" pos:column="33">error<pos:position pos:line="23" pos:column="38"/></name><argument_list pos:line="23" pos:column="38">(<argument><expr><call><name pos:line="23" pos:column="39">_<pos:position pos:line="23" pos:column="40"/></name><argument_list pos:line="23" pos:column="40">(<argument><expr><literal type="string" pos:line="23" pos:column="41">"empty mbox: '%s'"<pos:position pos:line="23" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="23" pos:column="62">file<pos:position pos:line="23" pos:column="66"/></name></expr></argument>)<pos:position pos:line="23" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="68"/></expr_stmt>
			}<pos:position pos:line="24" pos:column="26"/></block></else></if>
			<goto pos:line="25" pos:column="25">goto <name pos:line="25" pos:column="30">out<pos:position pos:line="25" pos:column="33"/></name>;<pos:position pos:line="25" pos:column="34"/></goto>
		}<pos:position pos:line="26" pos:column="18"/></block></then></if>
	}<pos:position pos:line="27" pos:column="10"/></block> while <condition pos:line="27" pos:column="17">(<expr><call><name pos:line="27" pos:column="18">isspace<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name pos:line="27" pos:column="26">peek<pos:position pos:line="27" pos:column="30"/></name></expr></argument>)<pos:position pos:line="27" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="32"/></condition>;<pos:position pos:line="27" pos:column="33"/></do>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">ungetc<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><name pos:line="28" pos:column="16">peek<pos:position pos:line="28" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="22">f<pos:position pos:line="28" pos:column="23"/></name></expr></argument>)<pos:position pos:line="28" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="25"/></expr_stmt>

	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><call><name pos:line="30" pos:column="13">strbuf_getwholeline<pos:position pos:line="30" pos:column="32"/></name><argument_list pos:line="30" pos:column="32">(<argument><expr><operator pos:line="30" pos:column="33">&amp;<pos:position pos:line="30" pos:column="38"/></operator><name pos:line="30" pos:column="34">buf<pos:position pos:line="30" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="39">f<pos:position pos:line="30" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="30" pos:column="42">'\n'<pos:position pos:line="30" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="48"/></condition><then pos:line="30" pos:column="48"> <block pos:line="30" pos:column="49">{
		<comment type="block" pos:line="31" pos:column="17">/* empty stdin is OK */</comment>
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><name pos:line="32" pos:column="21">f<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">!=<pos:position pos:line="32" pos:column="25"/></operator> <name pos:line="32" pos:column="26">stdin<pos:position pos:line="32" pos:column="31"/></name></expr>)<pos:position pos:line="32" pos:column="32"/></condition><then pos:line="32" pos:column="32"> <block pos:line="32" pos:column="33">{
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">error<pos:position pos:line="33" pos:column="30"/></name><argument_list pos:line="33" pos:column="30">(<argument><expr><literal type="string" pos:line="33" pos:column="31">"cannot read mbox %s"<pos:position pos:line="33" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="54">file<pos:position pos:line="33" pos:column="58"/></name></expr></argument>)<pos:position pos:line="33" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="60"/></expr_stmt>
			<goto pos:line="34" pos:column="25">goto <name pos:line="34" pos:column="30">out<pos:position pos:line="34" pos:column="33"/></name>;<pos:position pos:line="34" pos:column="34"/></goto>
		}<pos:position pos:line="35" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="36" pos:column="17">file_done<pos:position pos:line="36" pos:column="26"/></name> <operator pos:line="36" pos:column="27">=<pos:position pos:line="36" pos:column="28"/></operator> <literal type="number" pos:line="36" pos:column="29">1<pos:position pos:line="36" pos:column="30"/></literal></expr>;<pos:position pos:line="36" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if>

	<while pos:line="39" pos:column="9">while <condition pos:line="39" pos:column="15">(<expr><operator pos:line="39" pos:column="16">!<pos:position pos:line="39" pos:column="17"/></operator><name pos:line="39" pos:column="17">file_done<pos:position pos:line="39" pos:column="26"/></name></expr>)<pos:position pos:line="39" pos:column="27"/></condition> <block pos:line="39" pos:column="28">{
		<decl_stmt><decl><type><name pos:line="40" pos:column="17">char<pos:position pos:line="40" pos:column="21"/></name> <modifier pos:line="40" pos:column="22">*<pos:position pos:line="40" pos:column="23"/></modifier></type><name pos:line="40" pos:column="23">name<pos:position pos:line="40" pos:column="27"/></name> <init pos:line="40" pos:column="28">= <expr><call><name pos:line="40" pos:column="30">xstrfmt<pos:position pos:line="40" pos:column="37"/></name><argument_list pos:line="40" pos:column="37">(<argument><expr><literal type="string" pos:line="40" pos:column="38">"%s/%0*d"<pos:position pos:line="40" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="49">dir<pos:position pos:line="40" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="54">nr_prec<pos:position pos:line="40" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="63">++<pos:position pos:line="40" pos:column="65"/></operator><name pos:line="40" pos:column="65">skip<pos:position pos:line="40" pos:column="69"/></name></expr></argument>)<pos:position pos:line="40" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="40" pos:column="71"/></decl_stmt>
		<expr_stmt><expr><name pos:line="41" pos:column="17">file_done<pos:position pos:line="41" pos:column="26"/></name> <operator pos:line="41" pos:column="27">=<pos:position pos:line="41" pos:column="28"/></operator> <call><name pos:line="41" pos:column="29">split_one<pos:position pos:line="41" pos:column="38"/></name><argument_list pos:line="41" pos:column="38">(<argument><expr><name pos:line="41" pos:column="39">f<pos:position pos:line="41" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="42">name<pos:position pos:line="41" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="48">allow_bare<pos:position pos:line="41" pos:column="58"/></name></expr></argument>)<pos:position pos:line="41" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="60"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">free<pos:position pos:line="42" pos:column="21"/></name><argument_list pos:line="42" pos:column="21">(<argument><expr><name pos:line="42" pos:column="22">name<pos:position pos:line="42" pos:column="26"/></name></expr></argument>)<pos:position pos:line="42" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="43" pos:column="10"/></block></while>

	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">f<pos:position pos:line="45" pos:column="14"/></name> <operator pos:line="45" pos:column="15">!=<pos:position pos:line="45" pos:column="17"/></operator> <name pos:line="45" pos:column="18">stdin<pos:position pos:line="45" pos:column="23"/></name></expr>)<pos:position pos:line="45" pos:column="24"/></condition><then pos:line="45" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="17">fclose<pos:position pos:line="46" pos:column="23"/></name><argument_list pos:line="46" pos:column="23">(<argument><expr><name pos:line="46" pos:column="24">f<pos:position pos:line="46" pos:column="25"/></name></expr></argument>)<pos:position pos:line="46" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="27"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="48" pos:column="9">ret<pos:position pos:line="48" pos:column="12"/></name> <operator pos:line="48" pos:column="13">=<pos:position pos:line="48" pos:column="14"/></operator> <name pos:line="48" pos:column="15">skip<pos:position pos:line="48" pos:column="19"/></name></expr>;<pos:position pos:line="48" pos:column="20"/></expr_stmt>
<label><name pos:line="49" pos:column="1">out<pos:position pos:line="49" pos:column="4"/></name>:<pos:position pos:line="49" pos:column="5"/></label>
	<return pos:line="50" pos:column="9">return <expr><name pos:line="50" pos:column="16">ret<pos:position pos:line="50" pos:column="19"/></name></expr>;<pos:position pos:line="50" pos:column="20"/></return>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
