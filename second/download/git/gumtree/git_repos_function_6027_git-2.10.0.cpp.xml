<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6027_git-2.10.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">handle_property<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name><name pos:line="1" pos:column="35">struct<pos:position pos:line="1" pos:column="41"/></name> <name pos:line="1" pos:column="42">strbuf<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">key_buf<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
				<parameter><decl><type><name><name pos:line="2" pos:column="33">struct<pos:position pos:line="2" pos:column="39"/></name> <name pos:line="2" pos:column="40">strbuf<pos:position pos:line="2" pos:column="46"/></name></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">val<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>,
				<parameter><decl><type><name pos:line="3" pos:column="33">uint32_t<pos:position pos:line="3" pos:column="41"/></name> <modifier pos:line="3" pos:column="42">*<pos:position pos:line="3" pos:column="43"/></modifier></type><name pos:line="3" pos:column="43">type_set<pos:position pos:line="3" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="52"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">key<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><name><name pos:line="5" pos:column="27">key_buf<pos:position pos:line="5" pos:column="34"/></name><operator pos:line="5" pos:column="34">-&gt;<pos:position pos:line="5" pos:column="39"/></operator><name pos:line="5" pos:column="36">buf<pos:position pos:line="5" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">size_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">keylen<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><name><name pos:line="6" pos:column="25">key_buf<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">len<pos:position pos:line="6" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="38"/></decl_stmt>

	<switch pos:line="8" pos:column="9">switch <condition pos:line="8" pos:column="16">(<expr><name pos:line="8" pos:column="17">keylen<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">+<pos:position pos:line="8" pos:column="25"/></operator> <literal type="number" pos:line="8" pos:column="26">1<pos:position pos:line="8" pos:column="27"/></literal></expr>)<pos:position pos:line="8" pos:column="28"/></condition> <block pos:line="8" pos:column="29">{
	<case pos:line="9" pos:column="9">case <expr><sizeof pos:line="9" pos:column="14">sizeof<argument_list pos:line="9" pos:column="20">(<argument><expr><literal type="string" pos:line="9" pos:column="21">"svn:log"<pos:position pos:line="9" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="31"/></argument_list></sizeof></expr>:<pos:position pos:line="9" pos:column="32"/></case>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name pos:line="10" pos:column="21">constcmp<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">key<pos:position pos:line="10" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="35">"svn:log"<pos:position pos:line="10" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="46"/></condition><then pos:line="10" pos:column="46">
			<block type="pseudo"><break pos:line="11" pos:column="25">break;<pos:position pos:line="11" pos:column="31"/></break></block></then></if>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><operator pos:line="12" pos:column="21">!<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">val<pos:position pos:line="12" pos:column="25"/></name></expr>)<pos:position pos:line="12" pos:column="26"/></condition><then pos:line="12" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="25">die<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><literal type="string" pos:line="13" pos:column="29">"invalid dump: unsets svn:log"<pos:position pos:line="13" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="61"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="14" pos:column="17">strbuf_swap<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><operator pos:line="14" pos:column="29">&amp;<pos:position pos:line="14" pos:column="34"/></operator><name><name pos:line="14" pos:column="30">rev_ctx<pos:position pos:line="14" pos:column="37"/></name><operator pos:line="14" pos:column="37">.<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="38">log<pos:position pos:line="14" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="43">val<pos:position pos:line="14" pos:column="46"/></name></expr></argument>)<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt>
		<break pos:line="15" pos:column="17">break;<pos:position pos:line="15" pos:column="23"/></break>
	<case pos:line="16" pos:column="9">case <expr><sizeof pos:line="16" pos:column="14">sizeof<argument_list pos:line="16" pos:column="20">(<argument><expr><literal type="string" pos:line="16" pos:column="21">"svn:author"<pos:position pos:line="16" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></sizeof></expr>:<pos:position pos:line="16" pos:column="35"/></case>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><call><name pos:line="17" pos:column="21">constcmp<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><name pos:line="17" pos:column="30">key<pos:position pos:line="17" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="35">"svn:author"<pos:position pos:line="17" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="49"/></condition><then pos:line="17" pos:column="49">
			<block type="pseudo"><break pos:line="18" pos:column="25">break;<pos:position pos:line="18" pos:column="31"/></break></block></then></if>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><operator pos:line="19" pos:column="21">!<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">val<pos:position pos:line="19" pos:column="25"/></name></expr>)<pos:position pos:line="19" pos:column="26"/></condition><then pos:line="19" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="25">strbuf_reset<pos:position pos:line="20" pos:column="37"/></name><argument_list pos:line="20" pos:column="37">(<argument><expr><operator pos:line="20" pos:column="38">&amp;<pos:position pos:line="20" pos:column="43"/></operator><name><name pos:line="20" pos:column="39">rev_ctx<pos:position pos:line="20" pos:column="46"/></name><operator pos:line="20" pos:column="46">.<pos:position pos:line="20" pos:column="47"/></operator><name pos:line="20" pos:column="47">author<pos:position pos:line="20" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="55"/></expr_stmt></block></then>
		<else pos:line="21" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="25">strbuf_swap<pos:position pos:line="22" pos:column="36"/></name><argument_list pos:line="22" pos:column="36">(<argument><expr><operator pos:line="22" pos:column="37">&amp;<pos:position pos:line="22" pos:column="42"/></operator><name><name pos:line="22" pos:column="38">rev_ctx<pos:position pos:line="22" pos:column="45"/></name><operator pos:line="22" pos:column="45">.<pos:position pos:line="22" pos:column="46"/></operator><name pos:line="22" pos:column="46">author<pos:position pos:line="22" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="54">val<pos:position pos:line="22" pos:column="57"/></name></expr></argument>)<pos:position pos:line="22" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="59"/></expr_stmt></block></else></if>
		<break pos:line="23" pos:column="17">break;<pos:position pos:line="23" pos:column="23"/></break>
	<case pos:line="24" pos:column="9">case <expr><sizeof pos:line="24" pos:column="14">sizeof<argument_list pos:line="24" pos:column="20">(<argument><expr><literal type="string" pos:line="24" pos:column="21">"svn:date"<pos:position pos:line="24" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></sizeof></expr>:<pos:position pos:line="24" pos:column="33"/></case>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><call><name pos:line="25" pos:column="21">constcmp<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><name pos:line="25" pos:column="30">key<pos:position pos:line="25" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="35">"svn:date"<pos:position pos:line="25" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="47"/></condition><then pos:line="25" pos:column="47">
			<block type="pseudo"><break pos:line="26" pos:column="25">break;<pos:position pos:line="26" pos:column="31"/></break></block></then></if>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">!<pos:position pos:line="27" pos:column="22"/></operator><name pos:line="27" pos:column="22">val<pos:position pos:line="27" pos:column="25"/></name></expr>)<pos:position pos:line="27" pos:column="26"/></condition><then pos:line="27" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="25">die<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><literal type="string" pos:line="28" pos:column="29">"invalid dump: unsets svn:date"<pos:position pos:line="28" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="62"/></expr_stmt></block></then></if>
		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><call><name pos:line="29" pos:column="21">parse_date_basic<pos:position pos:line="29" pos:column="37"/></name><argument_list pos:line="29" pos:column="37">(<argument><expr><name><name pos:line="29" pos:column="38">val<pos:position pos:line="29" pos:column="41"/></name><operator pos:line="29" pos:column="41">-&gt;<pos:position pos:line="29" pos:column="46"/></operator><name pos:line="29" pos:column="43">buf<pos:position pos:line="29" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="48">&amp;<pos:position pos:line="29" pos:column="53"/></operator><name><name pos:line="29" pos:column="49">rev_ctx<pos:position pos:line="29" pos:column="56"/></name><operator pos:line="29" pos:column="56">.<pos:position pos:line="29" pos:column="57"/></operator><name pos:line="29" pos:column="57">timestamp<pos:position pos:line="29" pos:column="66"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="68">NULL<pos:position pos:line="29" pos:column="72"/></name></expr></argument>)<pos:position pos:line="29" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="74"/></condition><then pos:line="29" pos:column="74">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="25">warning<pos:position pos:line="30" pos:column="32"/></name><argument_list pos:line="30" pos:column="32">(<argument><expr><literal type="string" pos:line="30" pos:column="33">"invalid timestamp: %s"<pos:position pos:line="30" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="58">val<pos:position pos:line="30" pos:column="61"/></name><operator pos:line="30" pos:column="61">-&gt;<pos:position pos:line="30" pos:column="66"/></operator><name pos:line="30" pos:column="63">buf<pos:position pos:line="30" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="68"/></expr_stmt></block></then></if>
		<break pos:line="31" pos:column="17">break;<pos:position pos:line="31" pos:column="23"/></break>
	<case pos:line="32" pos:column="9">case <expr><sizeof pos:line="32" pos:column="14">sizeof<argument_list pos:line="32" pos:column="20">(<argument><expr><literal type="string" pos:line="32" pos:column="21">"svn:executable"<pos:position pos:line="32" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="38"/></argument_list></sizeof></expr>:<pos:position pos:line="32" pos:column="39"/></case>
	<case pos:line="33" pos:column="9">case <expr><sizeof pos:line="33" pos:column="14">sizeof<argument_list pos:line="33" pos:column="20">(<argument><expr><literal type="string" pos:line="33" pos:column="21">"svn:special"<pos:position pos:line="33" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="35"/></argument_list></sizeof></expr>:<pos:position pos:line="33" pos:column="36"/></case>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">keylen<pos:position pos:line="34" pos:column="27"/></name> <operator pos:line="34" pos:column="28">==<pos:position pos:line="34" pos:column="30"/></operator> <call><name pos:line="34" pos:column="31">strlen<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><literal type="string" pos:line="34" pos:column="38">"svn:executable"<pos:position pos:line="34" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="55"/></argument_list></call> <operator pos:line="34" pos:column="56">&amp;&amp;<pos:position pos:line="34" pos:column="66"/></operator>
		    <call><name pos:line="35" pos:column="21">constcmp<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><name pos:line="35" pos:column="30">key<pos:position pos:line="35" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="35">"svn:executable"<pos:position pos:line="35" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="53"/></condition><then pos:line="35" pos:column="53">
			<block type="pseudo"><break pos:line="36" pos:column="25">break;<pos:position pos:line="36" pos:column="31"/></break></block></then></if>
		<if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><name pos:line="37" pos:column="21">keylen<pos:position pos:line="37" pos:column="27"/></name> <operator pos:line="37" pos:column="28">==<pos:position pos:line="37" pos:column="30"/></operator> <call><name pos:line="37" pos:column="31">strlen<pos:position pos:line="37" pos:column="37"/></name><argument_list pos:line="37" pos:column="37">(<argument><expr><literal type="string" pos:line="37" pos:column="38">"svn:special"<pos:position pos:line="37" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="52"/></argument_list></call> <operator pos:line="37" pos:column="53">&amp;&amp;<pos:position pos:line="37" pos:column="63"/></operator>
		    <call><name pos:line="38" pos:column="21">constcmp<pos:position pos:line="38" pos:column="29"/></name><argument_list pos:line="38" pos:column="29">(<argument><expr><name pos:line="38" pos:column="30">key<pos:position pos:line="38" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="35">"svn:special"<pos:position pos:line="38" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="50"/></condition><then pos:line="38" pos:column="50">
			<block type="pseudo"><break pos:line="39" pos:column="25">break;<pos:position pos:line="39" pos:column="31"/></break></block></then></if>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><operator pos:line="40" pos:column="21">*<pos:position pos:line="40" pos:column="22"/></operator><name pos:line="40" pos:column="22">type_set<pos:position pos:line="40" pos:column="30"/></name></expr>)<pos:position pos:line="40" pos:column="31"/></condition><then pos:line="40" pos:column="31"> <block pos:line="40" pos:column="32">{
			<if pos:line="41" pos:column="25">if <condition pos:line="41" pos:column="28">(<expr><operator pos:line="41" pos:column="29">!<pos:position pos:line="41" pos:column="30"/></operator><name pos:line="41" pos:column="30">val<pos:position pos:line="41" pos:column="33"/></name></expr>)<pos:position pos:line="41" pos:column="34"/></condition><then pos:line="41" pos:column="34">
				<block type="pseudo"><return pos:line="42" pos:column="33">return;<pos:position pos:line="42" pos:column="40"/></return></block></then></if>
			<expr_stmt><expr><call><name pos:line="43" pos:column="25">die<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><literal type="string" pos:line="43" pos:column="29">"invalid dump: sets type twice"<pos:position pos:line="43" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="62"/></expr_stmt>
		}<pos:position pos:line="44" pos:column="18"/></block></then></if>
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><operator pos:line="45" pos:column="21">!<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="22">val<pos:position pos:line="45" pos:column="25"/></name></expr>)<pos:position pos:line="45" pos:column="26"/></condition><then pos:line="45" pos:column="26"> <block pos:line="45" pos:column="27">{
			<expr_stmt><expr><name><name pos:line="46" pos:column="25">node_ctx<pos:position pos:line="46" pos:column="33"/></name><operator pos:line="46" pos:column="33">.<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="34">type<pos:position pos:line="46" pos:column="38"/></name></name> <operator pos:line="46" pos:column="39">=<pos:position pos:line="46" pos:column="40"/></operator> <name pos:line="46" pos:column="41">REPO_MODE_BLB<pos:position pos:line="46" pos:column="54"/></name></expr>;<pos:position pos:line="46" pos:column="55"/></expr_stmt>
			<return pos:line="47" pos:column="25">return;<pos:position pos:line="47" pos:column="32"/></return>
		}<pos:position pos:line="48" pos:column="18"/></block></then></if>
		<expr_stmt><expr><operator pos:line="49" pos:column="17">*<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="18">type_set<pos:position pos:line="49" pos:column="26"/></name> <operator pos:line="49" pos:column="27">=<pos:position pos:line="49" pos:column="28"/></operator> <literal type="number" pos:line="49" pos:column="29">1<pos:position pos:line="49" pos:column="30"/></literal></expr>;<pos:position pos:line="49" pos:column="31"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="50" pos:column="17">node_ctx<pos:position pos:line="50" pos:column="25"/></name><operator pos:line="50" pos:column="25">.<pos:position pos:line="50" pos:column="26"/></operator><name pos:line="50" pos:column="26">type<pos:position pos:line="50" pos:column="30"/></name></name> <operator pos:line="50" pos:column="31">=<pos:position pos:line="50" pos:column="32"/></operator> <ternary><condition><expr><name pos:line="50" pos:column="33">keylen<pos:position pos:line="50" pos:column="39"/></name> <operator pos:line="50" pos:column="40">==<pos:position pos:line="50" pos:column="42"/></operator> <call><name pos:line="50" pos:column="43">strlen<pos:position pos:line="50" pos:column="49"/></name><argument_list pos:line="50" pos:column="49">(<argument><expr><literal type="string" pos:line="50" pos:column="50">"svn:executable"<pos:position pos:line="50" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="67"/></argument_list></call></expr> ?<pos:position pos:line="50" pos:column="69"/></condition><then pos:line="50" pos:column="69">
				<expr><name pos:line="51" pos:column="33">REPO_MODE_EXE<pos:position pos:line="51" pos:column="46"/></name></expr> <pos:position pos:line="51" pos:column="47"/></then><else pos:line="51" pos:column="47">:
				<expr><name pos:line="52" pos:column="33">REPO_MODE_LNK<pos:position pos:line="52" pos:column="46"/></name></expr></else></ternary></expr>;<pos:position pos:line="52" pos:column="47"/></expr_stmt>
	}<pos:position pos:line="53" pos:column="10"/></block></switch>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
