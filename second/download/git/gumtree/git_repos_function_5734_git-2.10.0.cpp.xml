<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5734_git-2.10.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">add_pbase_object<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">tree_desc<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">tree<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">name<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>,
			     <parameter><decl><type><name pos:line="3" pos:column="30">int<pos:position pos:line="3" pos:column="33"/></name></type> <name pos:line="3" pos:column="34">cmplen<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="4" pos:column="30">const<pos:position pos:line="4" pos:column="35"/></specifier> <name pos:line="4" pos:column="36">char<pos:position pos:line="4" pos:column="40"/></name> <modifier pos:line="4" pos:column="41">*<pos:position pos:line="4" pos:column="42"/></modifier></type><name pos:line="4" pos:column="42">fullname<pos:position pos:line="4" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="51"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">name_entry<pos:position pos:line="6" pos:column="26"/></name></name></type> <name pos:line="6" pos:column="27">entry<pos:position pos:line="6" pos:column="32"/></name></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">cmp<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>

	<while pos:line="9" pos:column="9">while <condition pos:line="9" pos:column="15">(<expr><call><name pos:line="9" pos:column="16">tree_entry<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">(<argument><expr><name pos:line="9" pos:column="27">tree<pos:position pos:line="9" pos:column="31"/></name></expr></argument>,<argument><expr><operator pos:line="9" pos:column="32">&amp;<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="33">entry<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="40"/></condition> <block pos:line="9" pos:column="41">{
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><call><name pos:line="10" pos:column="21">S_ISGITLINK<pos:position pos:line="10" pos:column="32"/></name><argument_list pos:line="10" pos:column="32">(<argument><expr><name><name pos:line="10" pos:column="33">entry<pos:position pos:line="10" pos:column="38"/></name><operator pos:line="10" pos:column="38">.<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="39">mode<pos:position pos:line="10" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="45"/></condition><then pos:line="10" pos:column="45">
			<block type="pseudo"><continue pos:line="11" pos:column="25">continue;<pos:position pos:line="11" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="12" pos:column="17">cmp<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">=<pos:position pos:line="12" pos:column="22"/></operator> <ternary><condition><expr><call><name pos:line="12" pos:column="23">tree_entry_len<pos:position pos:line="12" pos:column="37"/></name><argument_list pos:line="12" pos:column="37">(<argument><expr><operator pos:line="12" pos:column="38">&amp;<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="39">entry<pos:position pos:line="12" pos:column="44"/></name></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></call> <operator pos:line="12" pos:column="46">!=<pos:position pos:line="12" pos:column="48"/></operator> <name pos:line="12" pos:column="49">cmplen<pos:position pos:line="12" pos:column="55"/></name></expr> ?<pos:position pos:line="12" pos:column="57"/></condition><then pos:line="12" pos:column="57"> <expr><literal type="number" pos:line="12" pos:column="58">1<pos:position pos:line="12" pos:column="59"/></literal></expr> <pos:position pos:line="12" pos:column="60"/></then><else pos:line="12" pos:column="60">:
		      <expr><call><name pos:line="13" pos:column="23">memcmp<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">name<pos:position pos:line="13" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="36">entry<pos:position pos:line="13" pos:column="41"/></name><operator pos:line="13" pos:column="41">.<pos:position pos:line="13" pos:column="42"/></operator><name pos:line="13" pos:column="42">path<pos:position pos:line="13" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="48">cmplen<pos:position pos:line="13" pos:column="54"/></name></expr></argument>)<pos:position pos:line="13" pos:column="55"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="13" pos:column="56"/></expr_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">cmp<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">&gt;<pos:position pos:line="14" pos:column="29"/></operator> <literal type="number" pos:line="14" pos:column="27">0<pos:position pos:line="14" pos:column="28"/></literal></expr>)<pos:position pos:line="14" pos:column="29"/></condition><then pos:line="14" pos:column="29">
			<block type="pseudo"><continue pos:line="15" pos:column="25">continue;<pos:position pos:line="15" pos:column="34"/></continue></block></then></if>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">cmp<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">&lt;<pos:position pos:line="16" pos:column="29"/></operator> <literal type="number" pos:line="16" pos:column="27">0<pos:position pos:line="16" pos:column="28"/></literal></expr>)<pos:position pos:line="16" pos:column="29"/></condition><then pos:line="16" pos:column="29">
			<block type="pseudo"><return pos:line="17" pos:column="25">return;<pos:position pos:line="17" pos:column="32"/></return></block></then></if>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><name><name pos:line="18" pos:column="21">name<pos:position pos:line="18" pos:column="25"/></name><index pos:line="18" pos:column="25">[<expr><name pos:line="18" pos:column="26">cmplen<pos:position pos:line="18" pos:column="32"/></name></expr>]<pos:position pos:line="18" pos:column="33"/></index></name> <operator pos:line="18" pos:column="34">!=<pos:position pos:line="18" pos:column="36"/></operator> <literal type="char" pos:line="18" pos:column="37">'/'<pos:position pos:line="18" pos:column="40"/></literal></expr>)<pos:position pos:line="18" pos:column="41"/></condition><then pos:line="18" pos:column="41"> <block pos:line="18" pos:column="42">{
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">add_object_entry<pos:position pos:line="19" pos:column="41"/></name><argument_list pos:line="19" pos:column="41">(<argument><expr><name><name pos:line="19" pos:column="42">entry<pos:position pos:line="19" pos:column="47"/></name><operator pos:line="19" pos:column="47">.<pos:position pos:line="19" pos:column="48"/></operator><name pos:line="19" pos:column="48">oid<pos:position pos:line="19" pos:column="51"/></name><operator pos:line="19" pos:column="51">-&gt;<pos:position pos:line="19" pos:column="56"/></operator><name pos:line="19" pos:column="53">hash<pos:position pos:line="19" pos:column="57"/></name></name></expr></argument>,
					 <argument><expr><call><name pos:line="20" pos:column="42">object_type<pos:position pos:line="20" pos:column="53"/></name><argument_list pos:line="20" pos:column="53">(<argument><expr><name><name pos:line="20" pos:column="54">entry<pos:position pos:line="20" pos:column="59"/></name><operator pos:line="20" pos:column="59">.<pos:position pos:line="20" pos:column="60"/></operator><name pos:line="20" pos:column="60">mode<pos:position pos:line="20" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="65"/></argument_list></call></expr></argument>,
					 <argument><expr><name pos:line="21" pos:column="42">fullname<pos:position pos:line="21" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="52">1<pos:position pos:line="21" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="55"/></expr_stmt>
			<return pos:line="22" pos:column="25">return;<pos:position pos:line="22" pos:column="32"/></return>
		}<pos:position pos:line="23" pos:column="18"/></block></then></if>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><call><name pos:line="24" pos:column="21">S_ISDIR<pos:position pos:line="24" pos:column="28"/></name><argument_list pos:line="24" pos:column="28">(<argument><expr><name><name pos:line="24" pos:column="29">entry<pos:position pos:line="24" pos:column="34"/></name><operator pos:line="24" pos:column="34">.<pos:position pos:line="24" pos:column="35"/></operator><name pos:line="24" pos:column="35">mode<pos:position pos:line="24" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="41"/></condition><then pos:line="24" pos:column="41"> <block pos:line="24" pos:column="42">{
			<decl_stmt><decl><type><name><name pos:line="25" pos:column="25">struct<pos:position pos:line="25" pos:column="31"/></name> <name pos:line="25" pos:column="32">tree_desc<pos:position pos:line="25" pos:column="41"/></name></name></type> <name pos:line="25" pos:column="42">sub<pos:position pos:line="25" pos:column="45"/></name></decl>;<pos:position pos:line="25" pos:column="46"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="26" pos:column="25">struct<pos:position pos:line="26" pos:column="31"/></name> <name pos:line="26" pos:column="32">pbase_tree_cache<pos:position pos:line="26" pos:column="48"/></name></name> <modifier pos:line="26" pos:column="49">*<pos:position pos:line="26" pos:column="50"/></modifier></type><name pos:line="26" pos:column="50">tree<pos:position pos:line="26" pos:column="54"/></name></decl>;<pos:position pos:line="26" pos:column="55"/></decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="27" pos:column="25">const<pos:position pos:line="27" pos:column="30"/></specifier> <name pos:line="27" pos:column="31">char<pos:position pos:line="27" pos:column="35"/></name> <modifier pos:line="27" pos:column="36">*<pos:position pos:line="27" pos:column="37"/></modifier></type><name pos:line="27" pos:column="37">down<pos:position pos:line="27" pos:column="41"/></name> <init pos:line="27" pos:column="42">= <expr><name pos:line="27" pos:column="44">name<pos:position pos:line="27" pos:column="48"/></name><operator pos:line="27" pos:column="48">+<pos:position pos:line="27" pos:column="49"/></operator><name pos:line="27" pos:column="49">cmplen<pos:position pos:line="27" pos:column="55"/></name><operator pos:line="27" pos:column="55">+<pos:position pos:line="27" pos:column="56"/></operator><literal type="number" pos:line="27" pos:column="56">1<pos:position pos:line="27" pos:column="57"/></literal></expr></init></decl>;<pos:position pos:line="27" pos:column="58"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="28" pos:column="25">int<pos:position pos:line="28" pos:column="28"/></name></type> <name pos:line="28" pos:column="29">downlen<pos:position pos:line="28" pos:column="36"/></name> <init pos:line="28" pos:column="37">= <expr><call><name pos:line="28" pos:column="39">name_cmp_len<pos:position pos:line="28" pos:column="51"/></name><argument_list pos:line="28" pos:column="51">(<argument><expr><name pos:line="28" pos:column="52">down<pos:position pos:line="28" pos:column="56"/></name></expr></argument>)<pos:position pos:line="28" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="58"/></decl_stmt>

			<expr_stmt><expr><name pos:line="30" pos:column="25">tree<pos:position pos:line="30" pos:column="29"/></name> <operator pos:line="30" pos:column="30">=<pos:position pos:line="30" pos:column="31"/></operator> <call><name pos:line="30" pos:column="32">pbase_tree_get<pos:position pos:line="30" pos:column="46"/></name><argument_list pos:line="30" pos:column="46">(<argument><expr><name><name pos:line="30" pos:column="47">entry<pos:position pos:line="30" pos:column="52"/></name><operator pos:line="30" pos:column="52">.<pos:position pos:line="30" pos:column="53"/></operator><name pos:line="30" pos:column="53">oid<pos:position pos:line="30" pos:column="56"/></name><operator pos:line="30" pos:column="56">-&gt;<pos:position pos:line="30" pos:column="61"/></operator><name pos:line="30" pos:column="58">hash<pos:position pos:line="30" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="64"/></expr_stmt>
			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><operator pos:line="31" pos:column="29">!<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="30">tree<pos:position pos:line="31" pos:column="34"/></name></expr>)<pos:position pos:line="31" pos:column="35"/></condition><then pos:line="31" pos:column="35">
				<block type="pseudo"><return pos:line="32" pos:column="33">return;<pos:position pos:line="32" pos:column="40"/></return></block></then></if>
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">init_tree_desc<pos:position pos:line="33" pos:column="39"/></name><argument_list pos:line="33" pos:column="39">(<argument><expr><operator pos:line="33" pos:column="40">&amp;<pos:position pos:line="33" pos:column="45"/></operator><name pos:line="33" pos:column="41">sub<pos:position pos:line="33" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="46">tree<pos:position pos:line="33" pos:column="50"/></name><operator pos:line="33" pos:column="50">-&gt;<pos:position pos:line="33" pos:column="55"/></operator><name pos:line="33" pos:column="52">tree_data<pos:position pos:line="33" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="63">tree<pos:position pos:line="33" pos:column="67"/></name><operator pos:line="33" pos:column="67">-&gt;<pos:position pos:line="33" pos:column="72"/></operator><name pos:line="33" pos:column="69">tree_size<pos:position pos:line="33" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="80"/></expr_stmt>

			<expr_stmt><expr><call><name pos:line="35" pos:column="25">add_pbase_object<pos:position pos:line="35" pos:column="41"/></name><argument_list pos:line="35" pos:column="41">(<argument><expr><operator pos:line="35" pos:column="42">&amp;<pos:position pos:line="35" pos:column="47"/></operator><name pos:line="35" pos:column="43">sub<pos:position pos:line="35" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="48">down<pos:position pos:line="35" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="54">downlen<pos:position pos:line="35" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="63">fullname<pos:position pos:line="35" pos:column="71"/></name></expr></argument>)<pos:position pos:line="35" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="73"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="36" pos:column="25">pbase_tree_put<pos:position pos:line="36" pos:column="39"/></name><argument_list pos:line="36" pos:column="39">(<argument><expr><name pos:line="36" pos:column="40">tree<pos:position pos:line="36" pos:column="44"/></name></expr></argument>)<pos:position pos:line="36" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="46"/></expr_stmt>
		}<pos:position pos:line="37" pos:column="18"/></block></then></if>
	}<pos:position pos:line="38" pos:column="10"/></block></while>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
