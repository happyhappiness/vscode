<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3671_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">size_t<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">expand_path<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">strbuf<pos:position pos:line="1" pos:column="40"/></name></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">sb<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">placeholder<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="71">void<pos:position pos:line="1" pos:column="75"/></name> <modifier pos:line="1" pos:column="76">*<pos:position pos:line="1" pos:column="77"/></modifier></type><name pos:line="1" pos:column="77">ctx<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="81"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">expand_path_context<pos:position pos:line="3" pos:column="35"/></name></name> <modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier></type><name pos:line="3" pos:column="37">context<pos:position pos:line="3" pos:column="44"/></name> <init pos:line="3" pos:column="45">= <expr><name pos:line="3" pos:column="47">ctx<pos:position pos:line="3" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">hostinfo<pos:position pos:line="4" pos:column="24"/></name></name> <modifier pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></modifier></type><name pos:line="4" pos:column="26">hi<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><name><name pos:line="4" pos:column="31">context<pos:position pos:line="4" pos:column="38"/></name><operator pos:line="4" pos:column="38">-&gt;<pos:position pos:line="4" pos:column="43"/></operator><name pos:line="4" pos:column="40">hostinfo<pos:position pos:line="4" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="49"/></decl_stmt>

	<switch pos:line="6" pos:column="9">switch <condition pos:line="6" pos:column="16">(<expr><name><name pos:line="6" pos:column="17">placeholder<pos:position pos:line="6" pos:column="28"/></name><index pos:line="6" pos:column="28">[<expr><literal type="number" pos:line="6" pos:column="29">0<pos:position pos:line="6" pos:column="30"/></literal></expr>]<pos:position pos:line="6" pos:column="31"/></index></name></expr>)<pos:position pos:line="6" pos:column="32"/></condition> <block pos:line="6" pos:column="33">{
	<case pos:line="7" pos:column="9">case <expr><literal type="char" pos:line="7" pos:column="14">'H'<pos:position pos:line="7" pos:column="17"/></literal></expr>:<pos:position pos:line="7" pos:column="18"/></case>
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">strbuf_addbuf<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">sb<pos:position pos:line="8" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="35">&amp;<pos:position pos:line="8" pos:column="40"/></operator><name><name pos:line="8" pos:column="36">hi<pos:position pos:line="8" pos:column="38"/></name><operator pos:line="8" pos:column="38">-&gt;<pos:position pos:line="8" pos:column="43"/></operator><name pos:line="8" pos:column="40">hostname<pos:position pos:line="8" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="50"/></expr_stmt>
		<return pos:line="9" pos:column="17">return <expr><literal type="number" pos:line="9" pos:column="24">1<pos:position pos:line="9" pos:column="25"/></literal></expr>;<pos:position pos:line="9" pos:column="26"/></return>
	<case pos:line="10" pos:column="9">case <expr><literal type="char" pos:line="10" pos:column="14">'C'<pos:position pos:line="10" pos:column="17"/></literal></expr>:<pos:position pos:line="10" pos:column="18"/></case>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name><name pos:line="11" pos:column="21">placeholder<pos:position pos:line="11" pos:column="32"/></name><index pos:line="11" pos:column="32">[<expr><literal type="number" pos:line="11" pos:column="33">1<pos:position pos:line="11" pos:column="34"/></literal></expr>]<pos:position pos:line="11" pos:column="35"/></index></name> <operator pos:line="11" pos:column="36">==<pos:position pos:line="11" pos:column="38"/></operator> <literal type="char" pos:line="11" pos:column="39">'H'<pos:position pos:line="11" pos:column="42"/></literal></expr>)<pos:position pos:line="11" pos:column="43"/></condition><then pos:line="11" pos:column="43"> <block pos:line="11" pos:column="44">{
			<expr_stmt><expr><call><name pos:line="12" pos:column="25">strbuf_addstr<pos:position pos:line="12" pos:column="38"/></name><argument_list pos:line="12" pos:column="38">(<argument><expr><name pos:line="12" pos:column="39">sb<pos:position pos:line="12" pos:column="41"/></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="43">get_canon_hostname<pos:position pos:line="12" pos:column="61"/></name><argument_list pos:line="12" pos:column="61">(<argument><expr><name pos:line="12" pos:column="62">hi<pos:position pos:line="12" pos:column="64"/></name></expr></argument>)<pos:position pos:line="12" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="67"/></expr_stmt>
			<return pos:line="13" pos:column="25">return <expr><literal type="number" pos:line="13" pos:column="32">2<pos:position pos:line="13" pos:column="33"/></literal></expr>;<pos:position pos:line="13" pos:column="34"/></return>
		}<pos:position pos:line="14" pos:column="18"/></block></then></if>
		<break pos:line="15" pos:column="17">break;<pos:position pos:line="15" pos:column="23"/></break>
	<case pos:line="16" pos:column="9">case <expr><literal type="char" pos:line="16" pos:column="14">'I'<pos:position pos:line="16" pos:column="17"/></literal></expr>:<pos:position pos:line="16" pos:column="18"/></case>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name><name pos:line="17" pos:column="21">placeholder<pos:position pos:line="17" pos:column="32"/></name><index pos:line="17" pos:column="32">[<expr><literal type="number" pos:line="17" pos:column="33">1<pos:position pos:line="17" pos:column="34"/></literal></expr>]<pos:position pos:line="17" pos:column="35"/></index></name> <operator pos:line="17" pos:column="36">==<pos:position pos:line="17" pos:column="38"/></operator> <literal type="char" pos:line="17" pos:column="39">'P'<pos:position pos:line="17" pos:column="42"/></literal></expr>)<pos:position pos:line="17" pos:column="43"/></condition><then pos:line="17" pos:column="43"> <block pos:line="17" pos:column="44">{
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">strbuf_addstr<pos:position pos:line="18" pos:column="38"/></name><argument_list pos:line="18" pos:column="38">(<argument><expr><name pos:line="18" pos:column="39">sb<pos:position pos:line="18" pos:column="41"/></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="43">get_ip_address<pos:position pos:line="18" pos:column="57"/></name><argument_list pos:line="18" pos:column="57">(<argument><expr><name pos:line="18" pos:column="58">hi<pos:position pos:line="18" pos:column="60"/></name></expr></argument>)<pos:position pos:line="18" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="63"/></expr_stmt>
			<return pos:line="19" pos:column="25">return <expr><literal type="number" pos:line="19" pos:column="32">2<pos:position pos:line="19" pos:column="33"/></literal></expr>;<pos:position pos:line="19" pos:column="34"/></return>
		}<pos:position pos:line="20" pos:column="18"/></block></then></if>
		<break pos:line="21" pos:column="17">break;<pos:position pos:line="21" pos:column="23"/></break>
	<case pos:line="22" pos:column="9">case <expr><literal type="char" pos:line="22" pos:column="14">'P'<pos:position pos:line="22" pos:column="17"/></literal></expr>:<pos:position pos:line="22" pos:column="18"/></case>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">strbuf_addbuf<pos:position pos:line="23" pos:column="30"/></name><argument_list pos:line="23" pos:column="30">(<argument><expr><name pos:line="23" pos:column="31">sb<pos:position pos:line="23" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="35">&amp;<pos:position pos:line="23" pos:column="40"/></operator><name><name pos:line="23" pos:column="36">hi<pos:position pos:line="23" pos:column="38"/></name><operator pos:line="23" pos:column="38">-&gt;<pos:position pos:line="23" pos:column="43"/></operator><name pos:line="23" pos:column="40">tcp_port<pos:position pos:line="23" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="50"/></expr_stmt>
		<return pos:line="24" pos:column="17">return <expr><literal type="number" pos:line="24" pos:column="24">1<pos:position pos:line="24" pos:column="25"/></literal></expr>;<pos:position pos:line="24" pos:column="26"/></return>
	<case pos:line="25" pos:column="9">case <expr><literal type="char" pos:line="25" pos:column="14">'D'<pos:position pos:line="25" pos:column="17"/></literal></expr>:<pos:position pos:line="25" pos:column="18"/></case>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">strbuf_addstr<pos:position pos:line="26" pos:column="30"/></name><argument_list pos:line="26" pos:column="30">(<argument><expr><name pos:line="26" pos:column="31">sb<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="35">context<pos:position pos:line="26" pos:column="42"/></name><operator pos:line="26" pos:column="42">-&gt;<pos:position pos:line="26" pos:column="47"/></operator><name pos:line="26" pos:column="44">directory<pos:position pos:line="26" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="55"/></expr_stmt>
		<return pos:line="27" pos:column="17">return <expr><literal type="number" pos:line="27" pos:column="24">1<pos:position pos:line="27" pos:column="25"/></literal></expr>;<pos:position pos:line="27" pos:column="26"/></return>
	}<pos:position pos:line="28" pos:column="10"/></block></switch>
	<return pos:line="29" pos:column="9">return <expr><literal type="number" pos:line="29" pos:column="16">0<pos:position pos:line="29" pos:column="17"/></literal></expr>;<pos:position pos:line="29" pos:column="18"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
