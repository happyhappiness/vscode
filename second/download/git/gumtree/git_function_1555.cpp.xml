<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1555.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">create_bundle<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name><name pos:line="1" pos:column="19">struct<pos:position pos:line="1" pos:column="25"/></name> <name pos:line="1" pos:column="26">bundle_header<pos:position pos:line="1" pos:column="39"/></name></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">header<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <name pos:line="1" pos:column="55">char<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">path<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
		  <parameter><decl><type><name pos:line="2" pos:column="19">int<pos:position pos:line="2" pos:column="22"/></name></type> <name pos:line="2" pos:column="23">argc<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier><modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">argv<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name><name pos:line="4" pos:column="16">struct<pos:position pos:line="4" pos:column="22"/></name> <name pos:line="4" pos:column="23">lock_file<pos:position pos:line="4" pos:column="32"/></name></name></type> <name pos:line="4" pos:column="33">lock<pos:position pos:line="4" pos:column="37"/></name></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">bundle_fd<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><operator pos:line="5" pos:column="25">-<pos:position pos:line="5" pos:column="26"/></operator><literal type="number" pos:line="5" pos:column="26">1<pos:position pos:line="5" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">bundle_to_stdout<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">ref_count<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><literal type="number" pos:line="7" pos:column="25">0<pos:position pos:line="7" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">rev_info<pos:position pos:line="8" pos:column="24"/></name></name></type> <name pos:line="8" pos:column="25">revs<pos:position pos:line="8" pos:column="29"/></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">bundle_to_stdout<pos:position pos:line="10" pos:column="25"/></name> <operator pos:line="10" pos:column="26">=<pos:position pos:line="10" pos:column="27"/></operator> <operator pos:line="10" pos:column="28">!<pos:position pos:line="10" pos:column="29"/></operator><call><name pos:line="10" pos:column="29">strcmp<pos:position pos:line="10" pos:column="35"/></name><argument_list pos:line="10" pos:column="35">(<argument><expr><name pos:line="10" pos:column="36">path<pos:position pos:line="10" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="42">"-"<pos:position pos:line="10" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="47"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">bundle_to_stdout<pos:position pos:line="11" pos:column="29"/></name></expr>)<pos:position pos:line="11" pos:column="30"/></condition><then pos:line="11" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="17">bundle_fd<pos:position pos:line="12" pos:column="26"/></name> <operator pos:line="12" pos:column="27">=<pos:position pos:line="12" pos:column="28"/></operator> <literal type="number" pos:line="12" pos:column="29">1<pos:position pos:line="12" pos:column="30"/></literal></expr>;<pos:position pos:line="12" pos:column="31"/></expr_stmt></block></then>
	<else pos:line="13" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="17">bundle_fd<pos:position pos:line="14" pos:column="26"/></name> <operator pos:line="14" pos:column="27">=<pos:position pos:line="14" pos:column="28"/></operator> <call><name pos:line="14" pos:column="29">hold_lock_file_for_update<pos:position pos:line="14" pos:column="54"/></name><argument_list pos:line="14" pos:column="54">(<argument><expr><operator pos:line="14" pos:column="55">&amp;<pos:position pos:line="14" pos:column="60"/></operator><name pos:line="14" pos:column="56">lock<pos:position pos:line="14" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="62">path<pos:position pos:line="14" pos:column="66"/></name></expr></argument>,
						      <argument><expr><name pos:line="15" pos:column="55">LOCK_DIE_ON_ERROR<pos:position pos:line="15" pos:column="72"/></name></expr></argument>)<pos:position pos:line="15" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="74"/></expr_stmt></block></else></if>

	<comment type="block" pos:line="17" pos:column="9">/* write signature */</comment>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">write_or_die<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><name pos:line="18" pos:column="22">bundle_fd<pos:position pos:line="18" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="33">bundle_signature<pos:position pos:line="18" pos:column="49"/></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="51">strlen<pos:position pos:line="18" pos:column="57"/></name><argument_list pos:line="18" pos:column="57">(<argument><expr><name pos:line="18" pos:column="58">bundle_signature<pos:position pos:line="18" pos:column="74"/></name></expr></argument>)<pos:position pos:line="18" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="77"/></expr_stmt>

	<comment type="block" pos:line="20" pos:column="9">/* init revs to list objects for pack-objects later */</comment>
	<expr_stmt><expr><name pos:line="21" pos:column="9">save_commit_buffer<pos:position pos:line="21" pos:column="27"/></name> <operator pos:line="21" pos:column="28">=<pos:position pos:line="21" pos:column="29"/></operator> <literal type="number" pos:line="21" pos:column="30">0<pos:position pos:line="21" pos:column="31"/></literal></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">init_revisions<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><operator pos:line="22" pos:column="24">&amp;<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="25">revs<pos:position pos:line="22" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="31">NULL<pos:position pos:line="22" pos:column="35"/></name></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>

	<comment type="block" pos:line="24" pos:column="9">/* write prerequisites */</comment>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><call><name pos:line="25" pos:column="13">compute_and_write_prerequisites<pos:position pos:line="25" pos:column="44"/></name><argument_list pos:line="25" pos:column="44">(<argument><expr><name pos:line="25" pos:column="45">bundle_fd<pos:position pos:line="25" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="56">&amp;<pos:position pos:line="25" pos:column="61"/></operator><name pos:line="25" pos:column="57">revs<pos:position pos:line="25" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="63">argc<pos:position pos:line="25" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="69">argv<pos:position pos:line="25" pos:column="73"/></name></expr></argument>)<pos:position pos:line="25" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="75"/></condition><then pos:line="25" pos:column="75">
		<block type="pseudo"><return pos:line="26" pos:column="17">return <expr><operator pos:line="26" pos:column="24">-<pos:position pos:line="26" pos:column="25"/></operator><literal type="number" pos:line="26" pos:column="25">1<pos:position pos:line="26" pos:column="26"/></literal></expr>;<pos:position pos:line="26" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="28" pos:column="9">argc<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">=<pos:position pos:line="28" pos:column="15"/></operator> <call><name pos:line="28" pos:column="16">setup_revisions<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><name pos:line="28" pos:column="32">argc<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="38">argv<pos:position pos:line="28" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="44">&amp;<pos:position pos:line="28" pos:column="49"/></operator><name pos:line="28" pos:column="45">revs<pos:position pos:line="28" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="51">NULL<pos:position pos:line="28" pos:column="55"/></name></expr></argument>)<pos:position pos:line="28" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="57"/></expr_stmt>

	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">argc<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">&gt;<pos:position pos:line="30" pos:column="22"/></operator> <literal type="number" pos:line="30" pos:column="20">1<pos:position pos:line="30" pos:column="21"/></literal></expr>)<pos:position pos:line="30" pos:column="22"/></condition><then pos:line="30" pos:column="22">
		<block type="pseudo"><return pos:line="31" pos:column="17">return <expr><call><name pos:line="31" pos:column="24">error<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><call><name pos:line="31" pos:column="30">_<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">(<argument><expr><literal type="string" pos:line="31" pos:column="32">"unrecognized argument: %s"<pos:position pos:line="31" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="62">argv<pos:position pos:line="31" pos:column="66"/></name><index pos:line="31" pos:column="66">[<expr><literal type="number" pos:line="31" pos:column="67">1<pos:position pos:line="31" pos:column="68"/></literal></expr>]<pos:position pos:line="31" pos:column="69"/></index></name></expr></argument>)<pos:position pos:line="31" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="71"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="33" pos:column="9">object_array_remove_duplicates<pos:position pos:line="33" pos:column="39"/></name><argument_list pos:line="33" pos:column="39">(<argument><expr><operator pos:line="33" pos:column="40">&amp;<pos:position pos:line="33" pos:column="45"/></operator><name><name pos:line="33" pos:column="41">revs<pos:position pos:line="33" pos:column="45"/></name><operator pos:line="33" pos:column="45">.<pos:position pos:line="33" pos:column="46"/></operator><name pos:line="33" pos:column="46">pending<pos:position pos:line="33" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt>

	<expr_stmt><expr><name pos:line="35" pos:column="9">ref_count<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">=<pos:position pos:line="35" pos:column="20"/></operator> <call><name pos:line="35" pos:column="21">write_bundle_refs<pos:position pos:line="35" pos:column="38"/></name><argument_list pos:line="35" pos:column="38">(<argument><expr><name pos:line="35" pos:column="39">bundle_fd<pos:position pos:line="35" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="50">&amp;<pos:position pos:line="35" pos:column="55"/></operator><name pos:line="35" pos:column="51">revs<pos:position pos:line="35" pos:column="55"/></name></expr></argument>)<pos:position pos:line="35" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="57"/></expr_stmt>
	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><operator pos:line="36" pos:column="13">!<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="14">ref_count<pos:position pos:line="36" pos:column="23"/></name></expr>)<pos:position pos:line="36" pos:column="24"/></condition><then pos:line="36" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="17">die<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><call><name pos:line="37" pos:column="21">_<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><literal type="string" pos:line="37" pos:column="23">"Refusing to create empty bundle."<pos:position pos:line="37" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="60"/></expr_stmt></block></then>
	<elseif pos:line="38" pos:column="9">else <if pos:line="38" pos:column="14">if <condition pos:line="38" pos:column="17">(<expr><name pos:line="38" pos:column="18">ref_count<pos:position pos:line="38" pos:column="27"/></name> <operator pos:line="38" pos:column="28">&lt;<pos:position pos:line="38" pos:column="32"/></operator> <literal type="number" pos:line="38" pos:column="30">0<pos:position pos:line="38" pos:column="31"/></literal></expr>)<pos:position pos:line="38" pos:column="32"/></condition><then pos:line="38" pos:column="32">
		<block type="pseudo"><return pos:line="39" pos:column="17">return <expr><operator pos:line="39" pos:column="24">-<pos:position pos:line="39" pos:column="25"/></operator><literal type="number" pos:line="39" pos:column="25">1<pos:position pos:line="39" pos:column="26"/></literal></expr>;<pos:position pos:line="39" pos:column="27"/></return></block></then></if></elseif></if>

	<comment type="block" pos:line="41" pos:column="9">/* write pack */</comment>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><call><name pos:line="42" pos:column="13">write_pack_data<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><name pos:line="42" pos:column="29">bundle_fd<pos:position pos:line="42" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="40">&amp;<pos:position pos:line="42" pos:column="45"/></operator><name pos:line="42" pos:column="41">lock<pos:position pos:line="42" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="47">&amp;<pos:position pos:line="42" pos:column="52"/></operator><name pos:line="42" pos:column="48">revs<pos:position pos:line="42" pos:column="52"/></name></expr></argument>)<pos:position pos:line="42" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="54"/></condition><then pos:line="42" pos:column="54">
		<block type="pseudo"><return pos:line="43" pos:column="17">return <expr><operator pos:line="43" pos:column="24">-<pos:position pos:line="43" pos:column="25"/></operator><literal type="number" pos:line="43" pos:column="25">1<pos:position pos:line="43" pos:column="26"/></literal></expr>;<pos:position pos:line="43" pos:column="27"/></return></block></then></if>

	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><operator pos:line="45" pos:column="13">!<pos:position pos:line="45" pos:column="14"/></operator><name pos:line="45" pos:column="14">bundle_to_stdout<pos:position pos:line="45" pos:column="30"/></name></expr>)<pos:position pos:line="45" pos:column="31"/></condition><then pos:line="45" pos:column="31"> <block pos:line="45" pos:column="32">{
		<if pos:line="46" pos:column="17">if <condition pos:line="46" pos:column="20">(<expr><call><name pos:line="46" pos:column="21">commit_lock_file<pos:position pos:line="46" pos:column="37"/></name><argument_list pos:line="46" pos:column="37">(<argument><expr><operator pos:line="46" pos:column="38">&amp;<pos:position pos:line="46" pos:column="43"/></operator><name pos:line="46" pos:column="39">lock<pos:position pos:line="46" pos:column="43"/></name></expr></argument>)<pos:position pos:line="46" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="45"/></condition><then pos:line="46" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="25">die_errno<pos:position pos:line="47" pos:column="34"/></name><argument_list pos:line="47" pos:column="34">(<argument><expr><call><name pos:line="47" pos:column="35">_<pos:position pos:line="47" pos:column="36"/></name><argument_list pos:line="47" pos:column="36">(<argument><expr><literal type="string" pos:line="47" pos:column="37">"cannot create '%s'"<pos:position pos:line="47" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="47" pos:column="60">path<pos:position pos:line="47" pos:column="64"/></name></expr></argument>)<pos:position pos:line="47" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="66"/></expr_stmt></block></then></if>
	}<pos:position pos:line="48" pos:column="10"/></block></then></if>
	<return pos:line="49" pos:column="9">return <expr><literal type="number" pos:line="49" pos:column="16">0<pos:position pos:line="49" pos:column="17"/></literal></expr>;<pos:position pos:line="49" pos:column="18"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
