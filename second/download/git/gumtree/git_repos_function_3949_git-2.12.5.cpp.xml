<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3949_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">parse_pathspec_arg<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier><modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">pathspec<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="2" pos:column="17">struct<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">archiver_args<pos:position pos:line="2" pos:column="37"/></name></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">ar_args<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<comment type="block" pos:line="4" pos:column="9">/*
	 * must be consistent with parse_pathspec in path_exists()
	 * Also if pathspec patterns are dependent, we're in big
	 * trouble as we test each one separately
	 */</comment>
	<expr_stmt><expr><call><name pos:line="9" pos:column="9">parse_pathspec<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><operator pos:line="9" pos:column="24">&amp;<pos:position pos:line="9" pos:column="29"/></operator><name><name pos:line="9" pos:column="25">ar_args<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">-&gt;<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="34">pathspec<pos:position pos:line="9" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="44">0<pos:position pos:line="9" pos:column="45"/></literal></expr></argument>,
		       <argument><expr><name pos:line="10" pos:column="24">PATHSPEC_PREFER_FULL<pos:position pos:line="10" pos:column="44"/></name></expr></argument>,
		       <argument><expr><literal type="string" pos:line="11" pos:column="24">""<pos:position pos:line="11" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="28">pathspec<pos:position pos:line="11" pos:column="36"/></name></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="12" pos:column="9">ar_args<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">-&gt;<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="18">pathspec<pos:position pos:line="12" pos:column="26"/></name><operator pos:line="12" pos:column="26">.<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="27">recursive<pos:position pos:line="12" pos:column="36"/></name></name> <operator pos:line="12" pos:column="37">=<pos:position pos:line="12" pos:column="38"/></operator> <literal type="number" pos:line="12" pos:column="39">1<pos:position pos:line="12" pos:column="40"/></literal></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">pathspec<pos:position pos:line="13" pos:column="21"/></name></expr>)<pos:position pos:line="13" pos:column="22"/></condition><then pos:line="13" pos:column="22"> <block pos:line="13" pos:column="23">{
		<while pos:line="14" pos:column="17">while <condition pos:line="14" pos:column="23">(<expr><operator pos:line="14" pos:column="24">*<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="25">pathspec<pos:position pos:line="14" pos:column="33"/></name></expr>)<pos:position pos:line="14" pos:column="34"/></condition> <block pos:line="14" pos:column="35">{
			<if pos:line="15" pos:column="25">if <condition pos:line="15" pos:column="28">(<expr><operator pos:line="15" pos:column="29">*<pos:position pos:line="15" pos:column="30"/></operator><operator pos:line="15" pos:column="30">*<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="31">pathspec<pos:position pos:line="15" pos:column="39"/></name> <operator pos:line="15" pos:column="40">&amp;&amp;<pos:position pos:line="15" pos:column="50"/></operator> <operator pos:line="15" pos:column="43">!<pos:position pos:line="15" pos:column="44"/></operator><call><name pos:line="15" pos:column="44">path_exists<pos:position pos:line="15" pos:column="55"/></name><argument_list pos:line="15" pos:column="55">(<argument><expr><name><name pos:line="15" pos:column="56">ar_args<pos:position pos:line="15" pos:column="63"/></name><operator pos:line="15" pos:column="63">-&gt;<pos:position pos:line="15" pos:column="68"/></operator><name pos:line="15" pos:column="65">tree<pos:position pos:line="15" pos:column="69"/></name></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="71">*<pos:position pos:line="15" pos:column="72"/></operator><name pos:line="15" pos:column="72">pathspec<pos:position pos:line="15" pos:column="80"/></name></expr></argument>)<pos:position pos:line="15" pos:column="81"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="82"/></condition><then pos:line="15" pos:column="82">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="33">die<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">(<argument><expr><call><name pos:line="16" pos:column="37">_<pos:position pos:line="16" pos:column="38"/></name><argument_list pos:line="16" pos:column="38">(<argument><expr><literal type="string" pos:line="16" pos:column="39">"pathspec '%s' did not match any files"<pos:position pos:line="16" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="79"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="16" pos:column="81">*<pos:position pos:line="16" pos:column="82"/></operator><name pos:line="16" pos:column="82">pathspec<pos:position pos:line="16" pos:column="90"/></name></expr></argument>)<pos:position pos:line="16" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="92"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="17" pos:column="25">pathspec<pos:position pos:line="17" pos:column="33"/></name><operator pos:line="17" pos:column="33">++<pos:position pos:line="17" pos:column="35"/></operator></expr>;<pos:position pos:line="17" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="18" pos:column="18"/></block></while>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
