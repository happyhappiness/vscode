<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_7009_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name></type>
<name pos:line="2" pos:column="1">analyze<pos:position pos:line="2" pos:column="8"/></name> <parameter_list pos:line="2" pos:column="9">(<parameter><decl><type><name pos:line="2" pos:column="10">regex_t<pos:position pos:line="2" pos:column="17"/></name> <modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier></type><name pos:line="2" pos:column="19">preg<pos:position pos:line="2" pos:column="23"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">re_dfa_t<pos:position pos:line="4" pos:column="11"/></name> <modifier pos:line="4" pos:column="12">*<pos:position pos:line="4" pos:column="13"/></modifier></type><name pos:line="4" pos:column="13">dfa<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><operator pos:line="4" pos:column="19">(<pos:position pos:line="4" pos:column="20"/></operator><name pos:line="4" pos:column="20">re_dfa_t<pos:position pos:line="4" pos:column="28"/></name> <operator pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></operator><operator pos:line="4" pos:column="30">)<pos:position pos:line="4" pos:column="31"/></operator> <name><name pos:line="4" pos:column="32">preg<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">-&gt;<pos:position pos:line="4" pos:column="41"/></operator><name pos:line="4" pos:column="38">buffer<pos:position pos:line="4" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="45"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">reg_errcode_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">ret<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

  <comment type="block" pos:line="7" pos:column="3">/* Allocate arrays.  */</comment>
  <expr_stmt><expr><name><name pos:line="8" pos:column="3">dfa<pos:position pos:line="8" pos:column="6"/></name><operator pos:line="8" pos:column="6">-&gt;<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="8">nexts<pos:position pos:line="8" pos:column="13"/></name></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <call><name pos:line="8" pos:column="16">re_malloc<pos:position pos:line="8" pos:column="25"/></name> <argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">int<pos:position pos:line="8" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="32">dfa<pos:position pos:line="8" pos:column="35"/></name><operator pos:line="8" pos:column="35">-&gt;<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="37">nodes_alloc<pos:position pos:line="8" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="50"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="9" pos:column="3">dfa<pos:position pos:line="9" pos:column="6"/></name><operator pos:line="9" pos:column="6">-&gt;<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="8">org_indices<pos:position pos:line="9" pos:column="19"/></name></name> <operator pos:line="9" pos:column="20">=<pos:position pos:line="9" pos:column="21"/></operator> <call><name pos:line="9" pos:column="22">re_malloc<pos:position pos:line="9" pos:column="31"/></name> <argument_list pos:line="9" pos:column="32">(<argument><expr><name pos:line="9" pos:column="33">int<pos:position pos:line="9" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="38">dfa<pos:position pos:line="9" pos:column="41"/></name><operator pos:line="9" pos:column="41">-&gt;<pos:position pos:line="9" pos:column="46"/></operator><name pos:line="9" pos:column="43">nodes_alloc<pos:position pos:line="9" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="56"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="10" pos:column="3">dfa<pos:position pos:line="10" pos:column="6"/></name><operator pos:line="10" pos:column="6">-&gt;<pos:position pos:line="10" pos:column="11"/></operator><name pos:line="10" pos:column="8">edests<pos:position pos:line="10" pos:column="14"/></name></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <call><name pos:line="10" pos:column="17">re_malloc<pos:position pos:line="10" pos:column="26"/></name> <argument_list pos:line="10" pos:column="27">(<argument><expr><name pos:line="10" pos:column="28">re_node_set<pos:position pos:line="10" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="41">dfa<pos:position pos:line="10" pos:column="44"/></name><operator pos:line="10" pos:column="44">-&gt;<pos:position pos:line="10" pos:column="49"/></operator><name pos:line="10" pos:column="46">nodes_alloc<pos:position pos:line="10" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="59"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="11" pos:column="3">dfa<pos:position pos:line="11" pos:column="6"/></name><operator pos:line="11" pos:column="6">-&gt;<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="8">eclosures<pos:position pos:line="11" pos:column="17"/></name></name> <operator pos:line="11" pos:column="18">=<pos:position pos:line="11" pos:column="19"/></operator> <call><name pos:line="11" pos:column="20">re_malloc<pos:position pos:line="11" pos:column="29"/></name> <argument_list pos:line="11" pos:column="30">(<argument><expr><name pos:line="11" pos:column="31">re_node_set<pos:position pos:line="11" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="44">dfa<pos:position pos:line="11" pos:column="47"/></name><operator pos:line="11" pos:column="47">-&gt;<pos:position pos:line="11" pos:column="52"/></operator><name pos:line="11" pos:column="49">nodes_alloc<pos:position pos:line="11" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="62"/></expr_stmt>
  <if pos:line="12" pos:column="3">if <condition pos:line="12" pos:column="6">(<expr><call><name pos:line="12" pos:column="7">BE<pos:position pos:line="12" pos:column="9"/></name> <argument_list pos:line="12" pos:column="10">(<argument><expr><name><name pos:line="12" pos:column="11">dfa<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">-&gt;<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="16">nexts<pos:position pos:line="12" pos:column="21"/></name></name> <operator pos:line="12" pos:column="22">==<pos:position pos:line="12" pos:column="24"/></operator> <name pos:line="12" pos:column="25">NULL<pos:position pos:line="12" pos:column="29"/></name> <operator pos:line="12" pos:column="30">||<pos:position pos:line="12" pos:column="32"/></operator> <name><name pos:line="12" pos:column="33">dfa<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">-&gt;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="38">org_indices<pos:position pos:line="12" pos:column="49"/></name></name> <operator pos:line="12" pos:column="50">==<pos:position pos:line="12" pos:column="52"/></operator> <name pos:line="12" pos:column="53">NULL<pos:position pos:line="12" pos:column="57"/></name> <operator pos:line="12" pos:column="58">||<pos:position pos:line="12" pos:column="60"/></operator> <name><name pos:line="12" pos:column="61">dfa<pos:position pos:line="12" pos:column="64"/></name><operator pos:line="12" pos:column="64">-&gt;<pos:position pos:line="12" pos:column="69"/></operator><name pos:line="12" pos:column="66">edests<pos:position pos:line="12" pos:column="72"/></name></name> <operator pos:line="12" pos:column="73">==<pos:position pos:line="12" pos:column="75"/></operator> <name pos:line="12" pos:column="76">NULL<pos:position pos:line="12" pos:column="80"/></name>
	  <operator pos:line="13" pos:column="11">||<pos:position pos:line="13" pos:column="13"/></operator> <name><name pos:line="13" pos:column="14">dfa<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">-&gt;<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="19">eclosures<pos:position pos:line="13" pos:column="28"/></name></name> <operator pos:line="13" pos:column="29">==<pos:position pos:line="13" pos:column="31"/></operator> <name pos:line="13" pos:column="32">NULL<pos:position pos:line="13" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="38">0<pos:position pos:line="13" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="41"/></condition><then pos:line="13" pos:column="41">
    <block type="pseudo"><return pos:line="14" pos:column="5">return <expr><name pos:line="14" pos:column="12">REG_ESPACE<pos:position pos:line="14" pos:column="22"/></name></expr>;<pos:position pos:line="14" pos:column="23"/></return></block></then></if>

  <expr_stmt><expr><name><name pos:line="16" pos:column="3">dfa<pos:position pos:line="16" pos:column="6"/></name><operator pos:line="16" pos:column="6">-&gt;<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="8">subexp_map<pos:position pos:line="16" pos:column="18"/></name></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <call><name pos:line="16" pos:column="21">re_malloc<pos:position pos:line="16" pos:column="30"/></name> <argument_list pos:line="16" pos:column="31">(<argument><expr><name pos:line="16" pos:column="32">int<pos:position pos:line="16" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="37">preg<pos:position pos:line="16" pos:column="41"/></name><operator pos:line="16" pos:column="41">-&gt;<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="43">re_nsub<pos:position pos:line="16" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="52"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><name><name pos:line="17" pos:column="7">dfa<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">-&gt;<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="12">subexp_map<pos:position pos:line="17" pos:column="22"/></name></name> <operator pos:line="17" pos:column="23">!=<pos:position pos:line="17" pos:column="25"/></operator> <name pos:line="17" pos:column="26">NULL<pos:position pos:line="17" pos:column="30"/></name></expr>)<pos:position pos:line="17" pos:column="31"/></condition><then pos:line="17" pos:column="31">
    <block pos:line="18" pos:column="5">{
      <decl_stmt><decl><type><name pos:line="19" pos:column="7">int<pos:position pos:line="19" pos:column="10"/></name></type> <name pos:line="19" pos:column="11">i<pos:position pos:line="19" pos:column="12"/></name></decl>;<pos:position pos:line="19" pos:column="13"/></decl_stmt>
      <for pos:line="20" pos:column="7">for <control pos:line="20" pos:column="11">(<init><expr><name pos:line="20" pos:column="12">i<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <literal type="number" pos:line="20" pos:column="16">0<pos:position pos:line="20" pos:column="17"/></literal></expr>;<pos:position pos:line="20" pos:column="18"/></init> <condition><expr><name pos:line="20" pos:column="19">i<pos:position pos:line="20" pos:column="20"/></name> <operator pos:line="20" pos:column="21">&lt;<pos:position pos:line="20" pos:column="25"/></operator> <name><name pos:line="20" pos:column="23">preg<pos:position pos:line="20" pos:column="27"/></name><operator pos:line="20" pos:column="27">-&gt;<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="29">re_nsub<pos:position pos:line="20" pos:column="36"/></name></name></expr>;<pos:position pos:line="20" pos:column="37"/></condition> <incr><expr><name pos:line="20" pos:column="38">i<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">++<pos:position pos:line="20" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="20" pos:column="42"/></control>
	<block type="pseudo"><expr_stmt><expr><name><name pos:line="21" pos:column="9">dfa<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">-&gt;<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="14">subexp_map<pos:position pos:line="21" pos:column="24"/></name><index pos:line="21" pos:column="24">[<expr><name pos:line="21" pos:column="25">i<pos:position pos:line="21" pos:column="26"/></name></expr>]<pos:position pos:line="21" pos:column="27"/></index></name> <operator pos:line="21" pos:column="28">=<pos:position pos:line="21" pos:column="29"/></operator> <name pos:line="21" pos:column="30">i<pos:position pos:line="21" pos:column="31"/></name></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt></block></for>
      <expr_stmt><expr><call><name pos:line="22" pos:column="7">preorder<pos:position pos:line="22" pos:column="15"/></name> <argument_list pos:line="22" pos:column="16">(<argument><expr><name><name pos:line="22" pos:column="17">dfa<pos:position pos:line="22" pos:column="20"/></name><operator pos:line="22" pos:column="20">-&gt;<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="22">str_tree<pos:position pos:line="22" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="32">optimize_subexps<pos:position pos:line="22" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="50">dfa<pos:position pos:line="22" pos:column="53"/></name></expr></argument>)<pos:position pos:line="22" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="55"/></expr_stmt>
      <for pos:line="23" pos:column="7">for <control pos:line="23" pos:column="11">(<init><expr><name pos:line="23" pos:column="12">i<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">=<pos:position pos:line="23" pos:column="15"/></operator> <literal type="number" pos:line="23" pos:column="16">0<pos:position pos:line="23" pos:column="17"/></literal></expr>;<pos:position pos:line="23" pos:column="18"/></init> <condition><expr><name pos:line="23" pos:column="19">i<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">&lt;<pos:position pos:line="23" pos:column="25"/></operator> <name><name pos:line="23" pos:column="23">preg<pos:position pos:line="23" pos:column="27"/></name><operator pos:line="23" pos:column="27">-&gt;<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="29">re_nsub<pos:position pos:line="23" pos:column="36"/></name></name></expr>;<pos:position pos:line="23" pos:column="37"/></condition> <incr><expr><name pos:line="23" pos:column="38">i<pos:position pos:line="23" pos:column="39"/></name><operator pos:line="23" pos:column="39">++<pos:position pos:line="23" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="23" pos:column="42"/></control>
	<block type="pseudo"><if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name><name pos:line="24" pos:column="13">dfa<pos:position pos:line="24" pos:column="16"/></name><operator pos:line="24" pos:column="16">-&gt;<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="18">subexp_map<pos:position pos:line="24" pos:column="28"/></name><index pos:line="24" pos:column="28">[<expr><name pos:line="24" pos:column="29">i<pos:position pos:line="24" pos:column="30"/></name></expr>]<pos:position pos:line="24" pos:column="31"/></index></name> <operator pos:line="24" pos:column="32">!=<pos:position pos:line="24" pos:column="34"/></operator> <name pos:line="24" pos:column="35">i<pos:position pos:line="24" pos:column="36"/></name></expr>)<pos:position pos:line="24" pos:column="37"/></condition><then pos:line="24" pos:column="37">
	  <block type="pseudo"><break pos:line="25" pos:column="11">break;<pos:position pos:line="25" pos:column="17"/></break></block></then></if></block></for>
      <if pos:line="26" pos:column="7">if <condition pos:line="26" pos:column="10">(<expr><name pos:line="26" pos:column="11">i<pos:position pos:line="26" pos:column="12"/></name> <operator pos:line="26" pos:column="13">==<pos:position pos:line="26" pos:column="15"/></operator> <name><name pos:line="26" pos:column="16">preg<pos:position pos:line="26" pos:column="20"/></name><operator pos:line="26" pos:column="20">-&gt;<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="22">re_nsub<pos:position pos:line="26" pos:column="29"/></name></name></expr>)<pos:position pos:line="26" pos:column="30"/></condition><then pos:line="26" pos:column="30">
	<block pos:line="27" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="28" pos:column="11">free<pos:position pos:line="28" pos:column="15"/></name> <argument_list pos:line="28" pos:column="16">(<argument><expr><name><name pos:line="28" pos:column="17">dfa<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">-&gt;<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="22">subexp_map<pos:position pos:line="28" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="34"/></expr_stmt>
	  <expr_stmt><expr><name><name pos:line="29" pos:column="11">dfa<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">-&gt;<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="16">subexp_map<pos:position pos:line="29" pos:column="26"/></name></name> <operator pos:line="29" pos:column="27">=<pos:position pos:line="29" pos:column="28"/></operator> <name pos:line="29" pos:column="29">NULL<pos:position pos:line="29" pos:column="33"/></name></expr>;<pos:position pos:line="29" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

  <expr_stmt><expr><name pos:line="33" pos:column="3">ret<pos:position pos:line="33" pos:column="6"/></name> <operator pos:line="33" pos:column="7">=<pos:position pos:line="33" pos:column="8"/></operator> <call><name pos:line="33" pos:column="9">postorder<pos:position pos:line="33" pos:column="18"/></name> <argument_list pos:line="33" pos:column="19">(<argument><expr><name><name pos:line="33" pos:column="20">dfa<pos:position pos:line="33" pos:column="23"/></name><operator pos:line="33" pos:column="23">-&gt;<pos:position pos:line="33" pos:column="28"/></operator><name pos:line="33" pos:column="25">str_tree<pos:position pos:line="33" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="35">lower_subexps<pos:position pos:line="33" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="50">preg<pos:position pos:line="33" pos:column="54"/></name></expr></argument>)<pos:position pos:line="33" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="56"/></expr_stmt>
  <if pos:line="34" pos:column="3">if <condition pos:line="34" pos:column="6">(<expr><call><name pos:line="34" pos:column="7">BE<pos:position pos:line="34" pos:column="9"/></name> <argument_list pos:line="34" pos:column="10">(<argument><expr><name pos:line="34" pos:column="11">ret<pos:position pos:line="34" pos:column="14"/></name> <operator pos:line="34" pos:column="15">!=<pos:position pos:line="34" pos:column="17"/></operator> <name pos:line="34" pos:column="18">REG_NOERROR<pos:position pos:line="34" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="31">0<pos:position pos:line="34" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="34"/></condition><then pos:line="34" pos:column="34">
    <block type="pseudo"><return pos:line="35" pos:column="5">return <expr><name pos:line="35" pos:column="12">ret<pos:position pos:line="35" pos:column="15"/></name></expr>;<pos:position pos:line="35" pos:column="16"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="36" pos:column="3">ret<pos:position pos:line="36" pos:column="6"/></name> <operator pos:line="36" pos:column="7">=<pos:position pos:line="36" pos:column="8"/></operator> <call><name pos:line="36" pos:column="9">postorder<pos:position pos:line="36" pos:column="18"/></name> <argument_list pos:line="36" pos:column="19">(<argument><expr><name><name pos:line="36" pos:column="20">dfa<pos:position pos:line="36" pos:column="23"/></name><operator pos:line="36" pos:column="23">-&gt;<pos:position pos:line="36" pos:column="28"/></operator><name pos:line="36" pos:column="25">str_tree<pos:position pos:line="36" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="35">calc_first<pos:position pos:line="36" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="47">dfa<pos:position pos:line="36" pos:column="50"/></name></expr></argument>)<pos:position pos:line="36" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="52"/></expr_stmt>
  <if pos:line="37" pos:column="3">if <condition pos:line="37" pos:column="6">(<expr><call><name pos:line="37" pos:column="7">BE<pos:position pos:line="37" pos:column="9"/></name> <argument_list pos:line="37" pos:column="10">(<argument><expr><name pos:line="37" pos:column="11">ret<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">!=<pos:position pos:line="37" pos:column="17"/></operator> <name pos:line="37" pos:column="18">REG_NOERROR<pos:position pos:line="37" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="31">0<pos:position pos:line="37" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="34"/></condition><then pos:line="37" pos:column="34">
    <block type="pseudo"><return pos:line="38" pos:column="5">return <expr><name pos:line="38" pos:column="12">ret<pos:position pos:line="38" pos:column="15"/></name></expr>;<pos:position pos:line="38" pos:column="16"/></return></block></then></if>
  <expr_stmt><expr><call><name pos:line="39" pos:column="3">preorder<pos:position pos:line="39" pos:column="11"/></name> <argument_list pos:line="39" pos:column="12">(<argument><expr><name><name pos:line="39" pos:column="13">dfa<pos:position pos:line="39" pos:column="16"/></name><operator pos:line="39" pos:column="16">-&gt;<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="18">str_tree<pos:position pos:line="39" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="28">calc_next<pos:position pos:line="39" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="39">dfa<pos:position pos:line="39" pos:column="42"/></name></expr></argument>)<pos:position pos:line="39" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="44"/></expr_stmt>
  <expr_stmt><expr><name pos:line="40" pos:column="3">ret<pos:position pos:line="40" pos:column="6"/></name> <operator pos:line="40" pos:column="7">=<pos:position pos:line="40" pos:column="8"/></operator> <call><name pos:line="40" pos:column="9">preorder<pos:position pos:line="40" pos:column="17"/></name> <argument_list pos:line="40" pos:column="18">(<argument><expr><name><name pos:line="40" pos:column="19">dfa<pos:position pos:line="40" pos:column="22"/></name><operator pos:line="40" pos:column="22">-&gt;<pos:position pos:line="40" pos:column="27"/></operator><name pos:line="40" pos:column="24">str_tree<pos:position pos:line="40" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="34">link_nfa_nodes<pos:position pos:line="40" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="50">dfa<pos:position pos:line="40" pos:column="53"/></name></expr></argument>)<pos:position pos:line="40" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="55"/></expr_stmt>
  <if pos:line="41" pos:column="3">if <condition pos:line="41" pos:column="6">(<expr><call><name pos:line="41" pos:column="7">BE<pos:position pos:line="41" pos:column="9"/></name> <argument_list pos:line="41" pos:column="10">(<argument><expr><name pos:line="41" pos:column="11">ret<pos:position pos:line="41" pos:column="14"/></name> <operator pos:line="41" pos:column="15">!=<pos:position pos:line="41" pos:column="17"/></operator> <name pos:line="41" pos:column="18">REG_NOERROR<pos:position pos:line="41" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="31">0<pos:position pos:line="41" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="34"/></condition><then pos:line="41" pos:column="34">
    <block type="pseudo"><return pos:line="42" pos:column="5">return <expr><name pos:line="42" pos:column="12">ret<pos:position pos:line="42" pos:column="15"/></name></expr>;<pos:position pos:line="42" pos:column="16"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="43" pos:column="3">ret<pos:position pos:line="43" pos:column="6"/></name> <operator pos:line="43" pos:column="7">=<pos:position pos:line="43" pos:column="8"/></operator> <call><name pos:line="43" pos:column="9">calc_eclosure<pos:position pos:line="43" pos:column="22"/></name> <argument_list pos:line="43" pos:column="23">(<argument><expr><name pos:line="43" pos:column="24">dfa<pos:position pos:line="43" pos:column="27"/></name></expr></argument>)<pos:position pos:line="43" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="29"/></expr_stmt>
  <if pos:line="44" pos:column="3">if <condition pos:line="44" pos:column="6">(<expr><call><name pos:line="44" pos:column="7">BE<pos:position pos:line="44" pos:column="9"/></name> <argument_list pos:line="44" pos:column="10">(<argument><expr><name pos:line="44" pos:column="11">ret<pos:position pos:line="44" pos:column="14"/></name> <operator pos:line="44" pos:column="15">!=<pos:position pos:line="44" pos:column="17"/></operator> <name pos:line="44" pos:column="18">REG_NOERROR<pos:position pos:line="44" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="31">0<pos:position pos:line="44" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="34"/></condition><then pos:line="44" pos:column="34">
    <block type="pseudo"><return pos:line="45" pos:column="5">return <expr><name pos:line="45" pos:column="12">ret<pos:position pos:line="45" pos:column="15"/></name></expr>;<pos:position pos:line="45" pos:column="16"/></return></block></then></if>

  <comment type="block" pos:line="47" pos:column="3">/* We only need this during the prune_impossible_nodes pass in regexec.c;
     skip it if p_i_n will not run, as calc_inveclosure can be quadratic.  */</comment>
  <if pos:line="49" pos:column="3">if <condition pos:line="49" pos:column="6">(<expr><operator pos:line="49" pos:column="7">(<pos:position pos:line="49" pos:column="8"/></operator><operator pos:line="49" pos:column="8">!<pos:position pos:line="49" pos:column="9"/></operator><name><name pos:line="49" pos:column="9">preg<pos:position pos:line="49" pos:column="13"/></name><operator pos:line="49" pos:column="13">-&gt;<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="15">no_sub<pos:position pos:line="49" pos:column="21"/></name></name> <operator pos:line="49" pos:column="22">&amp;&amp;<pos:position pos:line="49" pos:column="32"/></operator> <name><name pos:line="49" pos:column="25">preg<pos:position pos:line="49" pos:column="29"/></name><operator pos:line="49" pos:column="29">-&gt;<pos:position pos:line="49" pos:column="34"/></operator><name pos:line="49" pos:column="31">re_nsub<pos:position pos:line="49" pos:column="38"/></name></name> <operator pos:line="49" pos:column="39">&gt;<pos:position pos:line="49" pos:column="43"/></operator> <literal type="number" pos:line="49" pos:column="41">0<pos:position pos:line="49" pos:column="42"/></literal> <operator pos:line="49" pos:column="43">&amp;&amp;<pos:position pos:line="49" pos:column="53"/></operator> <name><name pos:line="49" pos:column="46">dfa<pos:position pos:line="49" pos:column="49"/></name><operator pos:line="49" pos:column="49">-&gt;<pos:position pos:line="49" pos:column="54"/></operator><name pos:line="49" pos:column="51">has_plural_match<pos:position pos:line="49" pos:column="67"/></name></name><operator pos:line="49" pos:column="67">)<pos:position pos:line="49" pos:column="68"/></operator>
      <operator pos:line="50" pos:column="7">||<pos:position pos:line="50" pos:column="9"/></operator> <name><name pos:line="50" pos:column="10">dfa<pos:position pos:line="50" pos:column="13"/></name><operator pos:line="50" pos:column="13">-&gt;<pos:position pos:line="50" pos:column="18"/></operator><name pos:line="50" pos:column="15">nbackref<pos:position pos:line="50" pos:column="23"/></name></name></expr>)<pos:position pos:line="50" pos:column="24"/></condition><then pos:line="50" pos:column="24">
    <block pos:line="51" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="52" pos:column="7">dfa<pos:position pos:line="52" pos:column="10"/></name><operator pos:line="52" pos:column="10">-&gt;<pos:position pos:line="52" pos:column="15"/></operator><name pos:line="52" pos:column="12">inveclosures<pos:position pos:line="52" pos:column="24"/></name></name> <operator pos:line="52" pos:column="25">=<pos:position pos:line="52" pos:column="26"/></operator> <call><name pos:line="52" pos:column="27">re_malloc<pos:position pos:line="52" pos:column="36"/></name> <argument_list pos:line="52" pos:column="37">(<argument><expr><name pos:line="52" pos:column="38">re_node_set<pos:position pos:line="52" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="51">dfa<pos:position pos:line="52" pos:column="54"/></name><operator pos:line="52" pos:column="54">-&gt;<pos:position pos:line="52" pos:column="59"/></operator><name pos:line="52" pos:column="56">nodes_len<pos:position pos:line="52" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="67"/></expr_stmt>
      <if pos:line="53" pos:column="7">if <condition pos:line="53" pos:column="10">(<expr><call><name pos:line="53" pos:column="11">BE<pos:position pos:line="53" pos:column="13"/></name> <argument_list pos:line="53" pos:column="14">(<argument><expr><name><name pos:line="53" pos:column="15">dfa<pos:position pos:line="53" pos:column="18"/></name><operator pos:line="53" pos:column="18">-&gt;<pos:position pos:line="53" pos:column="23"/></operator><name pos:line="53" pos:column="20">inveclosures<pos:position pos:line="53" pos:column="32"/></name></name> <operator pos:line="53" pos:column="33">==<pos:position pos:line="53" pos:column="35"/></operator> <name pos:line="53" pos:column="36">NULL<pos:position pos:line="53" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="42">0<pos:position pos:line="53" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="45"/></condition><then pos:line="53" pos:column="45">
	<block type="pseudo"><return pos:line="54" pos:column="9">return <expr><name pos:line="54" pos:column="16">REG_ESPACE<pos:position pos:line="54" pos:column="26"/></name></expr>;<pos:position pos:line="54" pos:column="27"/></return></block></then></if>
      <expr_stmt><expr><name pos:line="55" pos:column="7">ret<pos:position pos:line="55" pos:column="10"/></name> <operator pos:line="55" pos:column="11">=<pos:position pos:line="55" pos:column="12"/></operator> <call><name pos:line="55" pos:column="13">calc_inveclosure<pos:position pos:line="55" pos:column="29"/></name> <argument_list pos:line="55" pos:column="30">(<argument><expr><name pos:line="55" pos:column="31">dfa<pos:position pos:line="55" pos:column="34"/></name></expr></argument>)<pos:position pos:line="55" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>

  <return pos:line="58" pos:column="3">return <expr><name pos:line="58" pos:column="10">ret<pos:position pos:line="58" pos:column="13"/></name></expr>;<pos:position pos:line="58" pos:column="14"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
