<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4217_git-2.6.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">get_tracking_branch<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">remote<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="60">const<pos:position pos:line="1" pos:column="65"/></specifier> <name pos:line="1" pos:column="66">char<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">refspec<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">refspec<pos:position pos:line="3" pos:column="23"/></name></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">spec<pos:position pos:line="3" pos:column="29"/></name></decl>;<pos:position pos:line="3" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">spec_src<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">merge_branch<pos:position pos:line="5" pos:column="33"/></name></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">spec<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">=<pos:position pos:line="7" pos:column="15"/></operator> <call><name pos:line="7" pos:column="16">parse_fetch_refspec<pos:position pos:line="7" pos:column="35"/></name><argument_list pos:line="7" pos:column="35">(<argument><expr><literal type="number" pos:line="7" pos:column="36">1<pos:position pos:line="7" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="7" pos:column="39">&amp;<pos:position pos:line="7" pos:column="44"/></operator><name pos:line="7" pos:column="40">refspec<pos:position pos:line="7" pos:column="47"/></name></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><name pos:line="8" pos:column="9">spec_src<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">=<pos:position pos:line="8" pos:column="19"/></operator> <name><name pos:line="8" pos:column="20">spec<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">-&gt;<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="26">src<pos:position pos:line="8" pos:column="29"/></name></name></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt>
	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><operator pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="15">spec_src<pos:position pos:line="9" pos:column="23"/></name> <operator pos:line="9" pos:column="24">||<pos:position pos:line="9" pos:column="26"/></operator> <operator pos:line="9" pos:column="27">!<pos:position pos:line="9" pos:column="28"/></operator><call><name pos:line="9" pos:column="28">strcmp<pos:position pos:line="9" pos:column="34"/></name><argument_list pos:line="9" pos:column="34">(<argument><expr><name pos:line="9" pos:column="35">spec_src<pos:position pos:line="9" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="45">"HEAD"<pos:position pos:line="9" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="53"/></condition><then pos:line="9" pos:column="53">
		<block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="17">spec_src<pos:position pos:line="10" pos:column="25"/></name> <operator pos:line="10" pos:column="26">=<pos:position pos:line="10" pos:column="27"/></operator> <literal type="string" pos:line="10" pos:column="28">"HEAD"<pos:position pos:line="10" pos:column="34"/></literal></expr>;<pos:position pos:line="10" pos:column="35"/></expr_stmt></block></then>
	<elseif pos:line="11" pos:column="9">else <if pos:line="11" pos:column="14">if <condition pos:line="11" pos:column="17">(<expr><call><name pos:line="11" pos:column="18">skip_prefix<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><name pos:line="11" pos:column="30">spec_src<pos:position pos:line="11" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="40">"heads/"<pos:position pos:line="11" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="11" pos:column="50">&amp;<pos:position pos:line="11" pos:column="55"/></operator><name pos:line="11" pos:column="51">spec_src<pos:position pos:line="11" pos:column="59"/></name></expr></argument>)<pos:position pos:line="11" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="61"/></condition><then pos:line="11" pos:column="61">
		<block type="pseudo"><empty_stmt pos:line="12" pos:column="17">;<pos:position pos:line="12" pos:column="18"/></empty_stmt></block></then></if></elseif>
	<elseif pos:line="13" pos:column="9">else <if pos:line="13" pos:column="14">if <condition pos:line="13" pos:column="17">(<expr><call><name pos:line="13" pos:column="18">skip_prefix<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">spec_src<pos:position pos:line="13" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="40">"refs/heads/"<pos:position pos:line="13" pos:column="53"/></literal></expr></argument>, <argument><expr><operator pos:line="13" pos:column="55">&amp;<pos:position pos:line="13" pos:column="60"/></operator><name pos:line="13" pos:column="56">spec_src<pos:position pos:line="13" pos:column="64"/></name></expr></argument>)<pos:position pos:line="13" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="66"/></condition><then pos:line="13" pos:column="66">
		<block type="pseudo"><empty_stmt pos:line="14" pos:column="17">;<pos:position pos:line="14" pos:column="18"/></empty_stmt></block></then></if></elseif>
	<elseif pos:line="15" pos:column="9">else <if pos:line="15" pos:column="14">if <condition pos:line="15" pos:column="17">(<expr><call><name pos:line="15" pos:column="18">starts_with<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><name pos:line="15" pos:column="30">spec_src<pos:position pos:line="15" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="40">"refs/"<pos:position pos:line="15" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></call> <operator pos:line="15" pos:column="49">||<pos:position pos:line="15" pos:column="51"/></operator>
		<call><name pos:line="16" pos:column="17">starts_with<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name pos:line="16" pos:column="29">spec_src<pos:position pos:line="16" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="39">"tags/"<pos:position pos:line="16" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call> <operator pos:line="16" pos:column="48">||<pos:position pos:line="16" pos:column="50"/></operator>
		<call><name pos:line="17" pos:column="17">starts_with<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><name pos:line="17" pos:column="29">spec_src<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="39">"remotes/"<pos:position pos:line="17" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="51"/></condition><then pos:line="17" pos:column="51">
		<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="17">spec_src<pos:position pos:line="18" pos:column="25"/></name> <operator pos:line="18" pos:column="26">=<pos:position pos:line="18" pos:column="27"/></operator> <literal type="string" pos:line="18" pos:column="28">""<pos:position pos:line="18" pos:column="30"/></literal></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt></block></then></if></elseif></if>

	<if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">*<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">spec_src<pos:position pos:line="20" pos:column="22"/></name></expr>)<pos:position pos:line="20" pos:column="23"/></condition><then pos:line="20" pos:column="23"> <block pos:line="20" pos:column="24">{
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">!<pos:position pos:line="21" pos:column="22"/></operator><call><name pos:line="21" pos:column="22">strcmp<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name pos:line="21" pos:column="29">remote<pos:position pos:line="21" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="37">"."<pos:position pos:line="21" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="42"/></condition><then pos:line="21" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="25">merge_branch<pos:position pos:line="22" pos:column="37"/></name> <operator pos:line="22" pos:column="38">=<pos:position pos:line="22" pos:column="39"/></operator> <call><name pos:line="22" pos:column="40">mkpath<pos:position pos:line="22" pos:column="46"/></name><argument_list pos:line="22" pos:column="46">(<argument><expr><literal type="string" pos:line="22" pos:column="47">"refs/heads/%s"<pos:position pos:line="22" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="64">spec_src<pos:position pos:line="22" pos:column="72"/></name></expr></argument>)<pos:position pos:line="22" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="74"/></expr_stmt></block></then>
		<else pos:line="23" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="25">merge_branch<pos:position pos:line="24" pos:column="37"/></name> <operator pos:line="24" pos:column="38">=<pos:position pos:line="24" pos:column="39"/></operator> <call><name pos:line="24" pos:column="40">mkpath<pos:position pos:line="24" pos:column="46"/></name><argument_list pos:line="24" pos:column="46">(<argument><expr><literal type="string" pos:line="24" pos:column="47">"refs/remotes/%s/%s"<pos:position pos:line="24" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="69">remote<pos:position pos:line="24" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="77">spec_src<pos:position pos:line="24" pos:column="85"/></name></expr></argument>)<pos:position pos:line="24" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="87"/></expr_stmt></block></else></if>
	}<pos:position pos:line="25" pos:column="10"/></block></then> <else pos:line="25" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="17">merge_branch<pos:position pos:line="26" pos:column="29"/></name> <operator pos:line="26" pos:column="30">=<pos:position pos:line="26" pos:column="31"/></operator> <name pos:line="26" pos:column="32">NULL<pos:position pos:line="26" pos:column="36"/></name></expr>;<pos:position pos:line="26" pos:column="37"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="28" pos:column="9">free_refspec<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><literal type="number" pos:line="28" pos:column="22">1<pos:position pos:line="28" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="25">spec<pos:position pos:line="28" pos:column="29"/></name></expr></argument>)<pos:position pos:line="28" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="31"/></expr_stmt>
	<return pos:line="29" pos:column="9">return <expr><name pos:line="29" pos:column="16">merge_branch<pos:position pos:line="29" pos:column="28"/></name></expr>;<pos:position pos:line="29" pos:column="29"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
