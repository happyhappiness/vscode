<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_213.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">path_ok<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">directory<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="51">struct<pos:position pos:line="1" pos:column="57"/></name> <name pos:line="1" pos:column="58">hostinfo<pos:position pos:line="1" pos:column="66"/></name></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">hi<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><name pos:line="3" pos:column="16">char<pos:position pos:line="3" pos:column="20"/></name></type> <name><name pos:line="3" pos:column="21">rpath<pos:position pos:line="3" pos:column="26"/></name><index pos:line="3" pos:column="26">[<expr><name pos:line="3" pos:column="27">PATH_MAX<pos:position pos:line="3" pos:column="35"/></name></expr>]<pos:position pos:line="3" pos:column="36"/></index></name></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="4" pos:column="9">static<pos:position pos:line="4" pos:column="15"/></specifier> <type><name pos:line="4" pos:column="16">char<pos:position pos:line="4" pos:column="20"/></name></type> <name><name pos:line="4" pos:column="21">interp_path<pos:position pos:line="4" pos:column="32"/></name><index pos:line="4" pos:column="32">[<expr><name pos:line="4" pos:column="33">PATH_MAX<pos:position pos:line="4" pos:column="41"/></name></expr>]<pos:position pos:line="4" pos:column="42"/></index></name></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">rlen<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">path<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">char<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">dir<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>

	<expr_stmt><expr><name pos:line="9" pos:column="9">dir<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <name pos:line="9" pos:column="15">directory<pos:position pos:line="9" pos:column="24"/></name></expr>;<pos:position pos:line="9" pos:column="25"/></expr_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">daemon_avoid_alias<pos:position pos:line="11" pos:column="31"/></name><argument_list pos:line="11" pos:column="31">(<argument><expr><name pos:line="11" pos:column="32">dir<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="37"/></condition><then pos:line="11" pos:column="37"> <block pos:line="11" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">logerror<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><literal type="string" pos:line="12" pos:column="26">"'%s': aliased"<pos:position pos:line="12" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="43">dir<pos:position pos:line="12" pos:column="46"/></name></expr></argument>)<pos:position pos:line="12" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="48"/></expr_stmt>
		<return pos:line="13" pos:column="17">return <expr><name pos:line="13" pos:column="24">NULL<pos:position pos:line="13" pos:column="28"/></name></expr>;<pos:position pos:line="13" pos:column="29"/></return>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">*<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">dir<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">==<pos:position pos:line="16" pos:column="20"/></operator> <literal type="char" pos:line="16" pos:column="21">'~'<pos:position pos:line="16" pos:column="24"/></literal></expr>)<pos:position pos:line="16" pos:column="25"/></condition><then pos:line="16" pos:column="25"> <block pos:line="16" pos:column="26">{
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><operator pos:line="17" pos:column="21">!<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="22">user_path<pos:position pos:line="17" pos:column="31"/></name></expr>)<pos:position pos:line="17" pos:column="32"/></condition><then pos:line="17" pos:column="32"> <block pos:line="17" pos:column="33">{
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">logerror<pos:position pos:line="18" pos:column="33"/></name><argument_list pos:line="18" pos:column="33">(<argument><expr><literal type="string" pos:line="18" pos:column="34">"'%s': User-path not allowed"<pos:position pos:line="18" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="65">dir<pos:position pos:line="18" pos:column="68"/></name></expr></argument>)<pos:position pos:line="18" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="70"/></expr_stmt>
			<return pos:line="19" pos:column="25">return <expr><name pos:line="19" pos:column="32">NULL<pos:position pos:line="19" pos:column="36"/></name></expr>;<pos:position pos:line="19" pos:column="37"/></return>
		}<pos:position pos:line="20" pos:column="18"/></block></then></if>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><operator pos:line="21" pos:column="21">*<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">user_path<pos:position pos:line="21" pos:column="31"/></name></expr>)<pos:position pos:line="21" pos:column="32"/></condition><then pos:line="21" pos:column="32"> <block pos:line="21" pos:column="33">{
			<comment type="block" pos:line="22" pos:column="25">/* Got either "~alice" or "~alice/foo";
			 * rewrite them to "~alice/%s" or
			 * "~alice/%s/foo".
			 */</comment>
			<decl_stmt><decl><type><name pos:line="26" pos:column="25">int<pos:position pos:line="26" pos:column="28"/></name></type> <name pos:line="26" pos:column="29">namlen<pos:position pos:line="26" pos:column="35"/></name></decl>, <decl><type ref="prev"/><name pos:line="26" pos:column="37">restlen<pos:position pos:line="26" pos:column="44"/></name> <init pos:line="26" pos:column="45">= <expr><call><name pos:line="26" pos:column="47">strlen<pos:position pos:line="26" pos:column="53"/></name><argument_list pos:line="26" pos:column="53">(<argument><expr><name pos:line="26" pos:column="54">dir<pos:position pos:line="26" pos:column="57"/></name></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="59"/></decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="27" pos:column="25">const<pos:position pos:line="27" pos:column="30"/></specifier> <name pos:line="27" pos:column="31">char<pos:position pos:line="27" pos:column="35"/></name> <modifier pos:line="27" pos:column="36">*<pos:position pos:line="27" pos:column="37"/></modifier></type><name pos:line="27" pos:column="37">slash<pos:position pos:line="27" pos:column="42"/></name> <init pos:line="27" pos:column="43">= <expr><call><name pos:line="27" pos:column="45">strchr<pos:position pos:line="27" pos:column="51"/></name><argument_list pos:line="27" pos:column="51">(<argument><expr><name pos:line="27" pos:column="52">dir<pos:position pos:line="27" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="27" pos:column="57">'/'<pos:position pos:line="27" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="62"/></decl_stmt>
			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><operator pos:line="28" pos:column="29">!<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="30">slash<pos:position pos:line="28" pos:column="35"/></name></expr>)<pos:position pos:line="28" pos:column="36"/></condition><then pos:line="28" pos:column="36">
				<block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="33">slash<pos:position pos:line="29" pos:column="38"/></name> <operator pos:line="29" pos:column="39">=<pos:position pos:line="29" pos:column="40"/></operator> <name pos:line="29" pos:column="41">dir<pos:position pos:line="29" pos:column="44"/></name> <operator pos:line="29" pos:column="45">+<pos:position pos:line="29" pos:column="46"/></operator> <name pos:line="29" pos:column="47">restlen<pos:position pos:line="29" pos:column="54"/></name></expr>;<pos:position pos:line="29" pos:column="55"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="30" pos:column="25">namlen<pos:position pos:line="30" pos:column="31"/></name> <operator pos:line="30" pos:column="32">=<pos:position pos:line="30" pos:column="33"/></operator> <name pos:line="30" pos:column="34">slash<pos:position pos:line="30" pos:column="39"/></name> <operator pos:line="30" pos:column="40">-<pos:position pos:line="30" pos:column="41"/></operator> <name pos:line="30" pos:column="42">dir<pos:position pos:line="30" pos:column="45"/></name></expr>;<pos:position pos:line="30" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="31" pos:column="25">restlen<pos:position pos:line="31" pos:column="32"/></name> <operator pos:line="31" pos:column="33">-=<pos:position pos:line="31" pos:column="35"/></operator> <name pos:line="31" pos:column="36">namlen<pos:position pos:line="31" pos:column="42"/></name></expr>;<pos:position pos:line="31" pos:column="43"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">loginfo<pos:position pos:line="32" pos:column="32"/></name><argument_list pos:line="32" pos:column="32">(<argument><expr><literal type="string" pos:line="32" pos:column="33">"userpath &lt;%s&gt;, request &lt;%s&gt;, namlen %d, restlen %d, slash &lt;%s&gt;"<pos:position pos:line="32" pos:column="115"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="99">user_path<pos:position pos:line="32" pos:column="108"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="110">dir<pos:position pos:line="32" pos:column="113"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="115">namlen<pos:position pos:line="32" pos:column="121"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="123">restlen<pos:position pos:line="32" pos:column="130"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="132">slash<pos:position pos:line="32" pos:column="137"/></name></expr></argument>)<pos:position pos:line="32" pos:column="138"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="139"/></expr_stmt>
			<expr_stmt><expr><name pos:line="33" pos:column="25">rlen<pos:position pos:line="33" pos:column="29"/></name> <operator pos:line="33" pos:column="30">=<pos:position pos:line="33" pos:column="31"/></operator> <call><name pos:line="33" pos:column="32">snprintf<pos:position pos:line="33" pos:column="40"/></name><argument_list pos:line="33" pos:column="40">(<argument><expr><name pos:line="33" pos:column="41">rpath<pos:position pos:line="33" pos:column="46"/></name></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="48">sizeof<argument_list pos:line="33" pos:column="54">(<argument><expr><name pos:line="33" pos:column="55">rpath<pos:position pos:line="33" pos:column="60"/></name></expr></argument>)<pos:position pos:line="33" pos:column="61"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="63">"%.*s/%s%.*s"<pos:position pos:line="33" pos:column="76"/></literal></expr></argument>,
					<argument><expr><name pos:line="34" pos:column="41">namlen<pos:position pos:line="34" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="49">dir<pos:position pos:line="34" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="54">user_path<pos:position pos:line="34" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="65">restlen<pos:position pos:line="34" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="74">slash<pos:position pos:line="34" pos:column="79"/></name></expr></argument>)<pos:position pos:line="34" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="81"/></expr_stmt>
			<if pos:line="35" pos:column="25">if <condition pos:line="35" pos:column="28">(<expr><name pos:line="35" pos:column="29">rlen<pos:position pos:line="35" pos:column="33"/></name> <operator pos:line="35" pos:column="34">&gt;=<pos:position pos:line="35" pos:column="39"/></operator> <sizeof pos:line="35" pos:column="37">sizeof<argument_list pos:line="35" pos:column="43">(<argument><expr><name pos:line="35" pos:column="44">rpath<pos:position pos:line="35" pos:column="49"/></name></expr></argument>)<pos:position pos:line="35" pos:column="50"/></argument_list></sizeof></expr>)<pos:position pos:line="35" pos:column="51"/></condition><then pos:line="35" pos:column="51"> <block pos:line="35" pos:column="52">{
				<expr_stmt><expr><call><name pos:line="36" pos:column="33">logerror<pos:position pos:line="36" pos:column="41"/></name><argument_list pos:line="36" pos:column="41">(<argument><expr><literal type="string" pos:line="36" pos:column="42">"user-path too large: %s"<pos:position pos:line="36" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="69">rpath<pos:position pos:line="36" pos:column="74"/></name></expr></argument>)<pos:position pos:line="36" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="76"/></expr_stmt>
				<return pos:line="37" pos:column="33">return <expr><name pos:line="37" pos:column="40">NULL<pos:position pos:line="37" pos:column="44"/></name></expr>;<pos:position pos:line="37" pos:column="45"/></return>
			}<pos:position pos:line="38" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="39" pos:column="25">dir<pos:position pos:line="39" pos:column="28"/></name> <operator pos:line="39" pos:column="29">=<pos:position pos:line="39" pos:column="30"/></operator> <name pos:line="39" pos:column="31">rpath<pos:position pos:line="39" pos:column="36"/></name></expr>;<pos:position pos:line="39" pos:column="37"/></expr_stmt>
		}<pos:position pos:line="40" pos:column="18"/></block></then></if>
	}<pos:position pos:line="41" pos:column="10"/></block></then>
	<elseif pos:line="42" pos:column="9">else <if pos:line="42" pos:column="14">if <condition pos:line="42" pos:column="17">(<expr><name pos:line="42" pos:column="18">interpolated_path<pos:position pos:line="42" pos:column="35"/></name> <operator pos:line="42" pos:column="36">&amp;&amp;<pos:position pos:line="42" pos:column="46"/></operator> <name><name pos:line="42" pos:column="39">hi<pos:position pos:line="42" pos:column="41"/></name><operator pos:line="42" pos:column="41">-&gt;<pos:position pos:line="42" pos:column="46"/></operator><name pos:line="42" pos:column="43">saw_extended_args<pos:position pos:line="42" pos:column="60"/></name></name></expr>)<pos:position pos:line="42" pos:column="61"/></condition><then pos:line="42" pos:column="61"> <block pos:line="42" pos:column="62">{
		<decl_stmt><decl><type><name><name pos:line="43" pos:column="17">struct<pos:position pos:line="43" pos:column="23"/></name> <name pos:line="43" pos:column="24">strbuf<pos:position pos:line="43" pos:column="30"/></name></name></type> <name pos:line="43" pos:column="31">expanded_path<pos:position pos:line="43" pos:column="44"/></name> <init pos:line="43" pos:column="45">= <expr><name pos:line="43" pos:column="47">STRBUF_INIT<pos:position pos:line="43" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="43" pos:column="59"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="44" pos:column="17">struct<pos:position pos:line="44" pos:column="23"/></name> <name pos:line="44" pos:column="24">expand_path_context<pos:position pos:line="44" pos:column="43"/></name></name></type> <name pos:line="44" pos:column="44">context<pos:position pos:line="44" pos:column="51"/></name></decl>;<pos:position pos:line="44" pos:column="52"/></decl_stmt>

		<expr_stmt><expr><name><name pos:line="46" pos:column="17">context<pos:position pos:line="46" pos:column="24"/></name><operator pos:line="46" pos:column="24">.<pos:position pos:line="46" pos:column="25"/></operator><name pos:line="46" pos:column="25">directory<pos:position pos:line="46" pos:column="34"/></name></name> <operator pos:line="46" pos:column="35">=<pos:position pos:line="46" pos:column="36"/></operator> <name pos:line="46" pos:column="37">directory<pos:position pos:line="46" pos:column="46"/></name></expr>;<pos:position pos:line="46" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="47" pos:column="17">context<pos:position pos:line="47" pos:column="24"/></name><operator pos:line="47" pos:column="24">.<pos:position pos:line="47" pos:column="25"/></operator><name pos:line="47" pos:column="25">hostinfo<pos:position pos:line="47" pos:column="33"/></name></name> <operator pos:line="47" pos:column="34">=<pos:position pos:line="47" pos:column="35"/></operator> <name pos:line="47" pos:column="36">hi<pos:position pos:line="47" pos:column="38"/></name></expr>;<pos:position pos:line="47" pos:column="39"/></expr_stmt>

		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><operator pos:line="49" pos:column="21">*<pos:position pos:line="49" pos:column="22"/></operator><name pos:line="49" pos:column="22">dir<pos:position pos:line="49" pos:column="25"/></name> <operator pos:line="49" pos:column="26">!=<pos:position pos:line="49" pos:column="28"/></operator> <literal type="char" pos:line="49" pos:column="29">'/'<pos:position pos:line="49" pos:column="32"/></literal></expr>)<pos:position pos:line="49" pos:column="33"/></condition><then pos:line="49" pos:column="33"> <block pos:line="49" pos:column="34">{
			<comment type="block" pos:line="50" pos:column="25">/* Allow only absolute */</comment>
			<expr_stmt><expr><call><name pos:line="51" pos:column="25">logerror<pos:position pos:line="51" pos:column="33"/></name><argument_list pos:line="51" pos:column="33">(<argument><expr><literal type="string" pos:line="51" pos:column="34">"'%s': Non-absolute path denied (interpolated-path active)"<pos:position pos:line="51" pos:column="93"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="95">dir<pos:position pos:line="51" pos:column="98"/></name></expr></argument>)<pos:position pos:line="51" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="100"/></expr_stmt>
			<return pos:line="52" pos:column="25">return <expr><name pos:line="52" pos:column="32">NULL<pos:position pos:line="52" pos:column="36"/></name></expr>;<pos:position pos:line="52" pos:column="37"/></return>
		}<pos:position pos:line="53" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="55" pos:column="17">strbuf_expand<pos:position pos:line="55" pos:column="30"/></name><argument_list pos:line="55" pos:column="30">(<argument><expr><operator pos:line="55" pos:column="31">&amp;<pos:position pos:line="55" pos:column="36"/></operator><name pos:line="55" pos:column="32">expanded_path<pos:position pos:line="55" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="47">interpolated_path<pos:position pos:line="55" pos:column="64"/></name></expr></argument>,
			      <argument><expr><name pos:line="56" pos:column="31">expand_path<pos:position pos:line="56" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="56" pos:column="44">&amp;<pos:position pos:line="56" pos:column="49"/></operator><name pos:line="56" pos:column="45">context<pos:position pos:line="56" pos:column="52"/></name></expr></argument>)<pos:position pos:line="56" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="54"/></expr_stmt>

		<expr_stmt><expr><name pos:line="58" pos:column="17">rlen<pos:position pos:line="58" pos:column="21"/></name> <operator pos:line="58" pos:column="22">=<pos:position pos:line="58" pos:column="23"/></operator> <call><name pos:line="58" pos:column="24">strlcpy<pos:position pos:line="58" pos:column="31"/></name><argument_list pos:line="58" pos:column="31">(<argument><expr><name pos:line="58" pos:column="32">interp_path<pos:position pos:line="58" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="45">expanded_path<pos:position pos:line="58" pos:column="58"/></name><operator pos:line="58" pos:column="58">.<pos:position pos:line="58" pos:column="59"/></operator><name pos:line="58" pos:column="59">buf<pos:position pos:line="58" pos:column="62"/></name></name></expr></argument>,
			       <argument><expr><sizeof pos:line="59" pos:column="32">sizeof<argument_list pos:line="59" pos:column="38">(<argument><expr><name pos:line="59" pos:column="39">interp_path<pos:position pos:line="59" pos:column="50"/></name></expr></argument>)<pos:position pos:line="59" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="59" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="53"/></expr_stmt>
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><name pos:line="60" pos:column="21">rlen<pos:position pos:line="60" pos:column="25"/></name> <operator pos:line="60" pos:column="26">&gt;=<pos:position pos:line="60" pos:column="31"/></operator> <sizeof pos:line="60" pos:column="29">sizeof<argument_list pos:line="60" pos:column="35">(<argument><expr><name pos:line="60" pos:column="36">interp_path<pos:position pos:line="60" pos:column="47"/></name></expr></argument>)<pos:position pos:line="60" pos:column="48"/></argument_list></sizeof></expr>)<pos:position pos:line="60" pos:column="49"/></condition><then pos:line="60" pos:column="49"> <block pos:line="60" pos:column="50">{
			<expr_stmt><expr><call><name pos:line="61" pos:column="25">logerror<pos:position pos:line="61" pos:column="33"/></name><argument_list pos:line="61" pos:column="33">(<argument><expr><literal type="string" pos:line="61" pos:column="34">"interpolated path too large: %s"<pos:position pos:line="61" pos:column="67"/></literal></expr></argument>,
				 <argument><expr><name pos:line="62" pos:column="34">interp_path<pos:position pos:line="62" pos:column="45"/></name></expr></argument>)<pos:position pos:line="62" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="47"/></expr_stmt>
			<return pos:line="63" pos:column="25">return <expr><name pos:line="63" pos:column="32">NULL<pos:position pos:line="63" pos:column="36"/></name></expr>;<pos:position pos:line="63" pos:column="37"/></return>
		}<pos:position pos:line="64" pos:column="18"/></block></then></if>

		<expr_stmt><expr><call><name pos:line="66" pos:column="17">strbuf_release<pos:position pos:line="66" pos:column="31"/></name><argument_list pos:line="66" pos:column="31">(<argument><expr><operator pos:line="66" pos:column="32">&amp;<pos:position pos:line="66" pos:column="37"/></operator><name pos:line="66" pos:column="33">expanded_path<pos:position pos:line="66" pos:column="46"/></name></expr></argument>)<pos:position pos:line="66" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="67" pos:column="17">loginfo<pos:position pos:line="67" pos:column="24"/></name><argument_list pos:line="67" pos:column="24">(<argument><expr><literal type="string" pos:line="67" pos:column="25">"Interpolated dir '%s'"<pos:position pos:line="67" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="50">interp_path<pos:position pos:line="67" pos:column="61"/></name></expr></argument>)<pos:position pos:line="67" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="63"/></expr_stmt>

		<expr_stmt><expr><name pos:line="69" pos:column="17">dir<pos:position pos:line="69" pos:column="20"/></name> <operator pos:line="69" pos:column="21">=<pos:position pos:line="69" pos:column="22"/></operator> <name pos:line="69" pos:column="23">interp_path<pos:position pos:line="69" pos:column="34"/></name></expr>;<pos:position pos:line="69" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="70" pos:column="10"/></block></then></if></elseif>
	<elseif pos:line="71" pos:column="9">else <if pos:line="71" pos:column="14">if <condition pos:line="71" pos:column="17">(<expr><name pos:line="71" pos:column="18">base_path<pos:position pos:line="71" pos:column="27"/></name></expr>)<pos:position pos:line="71" pos:column="28"/></condition><then pos:line="71" pos:column="28"> <block pos:line="71" pos:column="29">{
		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><operator pos:line="72" pos:column="21">*<pos:position pos:line="72" pos:column="22"/></operator><name pos:line="72" pos:column="22">dir<pos:position pos:line="72" pos:column="25"/></name> <operator pos:line="72" pos:column="26">!=<pos:position pos:line="72" pos:column="28"/></operator> <literal type="char" pos:line="72" pos:column="29">'/'<pos:position pos:line="72" pos:column="32"/></literal></expr>)<pos:position pos:line="72" pos:column="33"/></condition><then pos:line="72" pos:column="33"> <block pos:line="72" pos:column="34">{
			<comment type="block" pos:line="73" pos:column="25">/* Allow only absolute */</comment>
			<expr_stmt><expr><call><name pos:line="74" pos:column="25">logerror<pos:position pos:line="74" pos:column="33"/></name><argument_list pos:line="74" pos:column="33">(<argument><expr><literal type="string" pos:line="74" pos:column="34">"'%s': Non-absolute path denied (base-path active)"<pos:position pos:line="74" pos:column="85"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="87">dir<pos:position pos:line="74" pos:column="90"/></name></expr></argument>)<pos:position pos:line="74" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="92"/></expr_stmt>
			<return pos:line="75" pos:column="25">return <expr><name pos:line="75" pos:column="32">NULL<pos:position pos:line="75" pos:column="36"/></name></expr>;<pos:position pos:line="75" pos:column="37"/></return>
		}<pos:position pos:line="76" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="77" pos:column="17">rlen<pos:position pos:line="77" pos:column="21"/></name> <operator pos:line="77" pos:column="22">=<pos:position pos:line="77" pos:column="23"/></operator> <call><name pos:line="77" pos:column="24">snprintf<pos:position pos:line="77" pos:column="32"/></name><argument_list pos:line="77" pos:column="32">(<argument><expr><name pos:line="77" pos:column="33">rpath<pos:position pos:line="77" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="77" pos:column="40">sizeof<argument_list pos:line="77" pos:column="46">(<argument><expr><name pos:line="77" pos:column="47">rpath<pos:position pos:line="77" pos:column="52"/></name></expr></argument>)<pos:position pos:line="77" pos:column="53"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="55">"%s%s"<pos:position pos:line="77" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="63">base_path<pos:position pos:line="77" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="74">dir<pos:position pos:line="77" pos:column="77"/></name></expr></argument>)<pos:position pos:line="77" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="79"/></expr_stmt>
		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><name pos:line="78" pos:column="21">rlen<pos:position pos:line="78" pos:column="25"/></name> <operator pos:line="78" pos:column="26">&gt;=<pos:position pos:line="78" pos:column="31"/></operator> <sizeof pos:line="78" pos:column="29">sizeof<argument_list pos:line="78" pos:column="35">(<argument><expr><name pos:line="78" pos:column="36">rpath<pos:position pos:line="78" pos:column="41"/></name></expr></argument>)<pos:position pos:line="78" pos:column="42"/></argument_list></sizeof></expr>)<pos:position pos:line="78" pos:column="43"/></condition><then pos:line="78" pos:column="43"> <block pos:line="78" pos:column="44">{
			<expr_stmt><expr><call><name pos:line="79" pos:column="25">logerror<pos:position pos:line="79" pos:column="33"/></name><argument_list pos:line="79" pos:column="33">(<argument><expr><literal type="string" pos:line="79" pos:column="34">"base-path too large: %s"<pos:position pos:line="79" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="61">rpath<pos:position pos:line="79" pos:column="66"/></name></expr></argument>)<pos:position pos:line="79" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="68"/></expr_stmt>
			<return pos:line="80" pos:column="25">return <expr><name pos:line="80" pos:column="32">NULL<pos:position pos:line="80" pos:column="36"/></name></expr>;<pos:position pos:line="80" pos:column="37"/></return>
		}<pos:position pos:line="81" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="82" pos:column="17">dir<pos:position pos:line="82" pos:column="20"/></name> <operator pos:line="82" pos:column="21">=<pos:position pos:line="82" pos:column="22"/></operator> <name pos:line="82" pos:column="23">rpath<pos:position pos:line="82" pos:column="28"/></name></expr>;<pos:position pos:line="82" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="83" pos:column="10"/></block></then></if></elseif></if>

	<expr_stmt><expr><name pos:line="85" pos:column="9">path<pos:position pos:line="85" pos:column="13"/></name> <operator pos:line="85" pos:column="14">=<pos:position pos:line="85" pos:column="15"/></operator> <call><name pos:line="85" pos:column="16">enter_repo<pos:position pos:line="85" pos:column="26"/></name><argument_list pos:line="85" pos:column="26">(<argument><expr><name pos:line="85" pos:column="27">dir<pos:position pos:line="85" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="32">strict_paths<pos:position pos:line="85" pos:column="44"/></name></expr></argument>)<pos:position pos:line="85" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="46"/></expr_stmt>
	<if pos:line="86" pos:column="9">if <condition pos:line="86" pos:column="12">(<expr><operator pos:line="86" pos:column="13">!<pos:position pos:line="86" pos:column="14"/></operator><name pos:line="86" pos:column="14">path<pos:position pos:line="86" pos:column="18"/></name> <operator pos:line="86" pos:column="19">&amp;&amp;<pos:position pos:line="86" pos:column="29"/></operator> <name pos:line="86" pos:column="22">base_path<pos:position pos:line="86" pos:column="31"/></name> <operator pos:line="86" pos:column="32">&amp;&amp;<pos:position pos:line="86" pos:column="42"/></operator> <name pos:line="86" pos:column="35">base_path_relaxed<pos:position pos:line="86" pos:column="52"/></name></expr>)<pos:position pos:line="86" pos:column="53"/></condition><then pos:line="86" pos:column="53"> <block pos:line="86" pos:column="54">{
		<comment type="block" pos:line="87" pos:column="17">/*
		 * if we fail and base_path_relaxed is enabled, try without
		 * prefixing the base path
		 */</comment>
		<expr_stmt><expr><name pos:line="91" pos:column="17">dir<pos:position pos:line="91" pos:column="20"/></name> <operator pos:line="91" pos:column="21">=<pos:position pos:line="91" pos:column="22"/></operator> <name pos:line="91" pos:column="23">directory<pos:position pos:line="91" pos:column="32"/></name></expr>;<pos:position pos:line="91" pos:column="33"/></expr_stmt>
		<expr_stmt><expr><name pos:line="92" pos:column="17">path<pos:position pos:line="92" pos:column="21"/></name> <operator pos:line="92" pos:column="22">=<pos:position pos:line="92" pos:column="23"/></operator> <call><name pos:line="92" pos:column="24">enter_repo<pos:position pos:line="92" pos:column="34"/></name><argument_list pos:line="92" pos:column="34">(<argument><expr><name pos:line="92" pos:column="35">dir<pos:position pos:line="92" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="40">strict_paths<pos:position pos:line="92" pos:column="52"/></name></expr></argument>)<pos:position pos:line="92" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="93" pos:column="10"/></block></then></if>

	<if pos:line="95" pos:column="9">if <condition pos:line="95" pos:column="12">(<expr><operator pos:line="95" pos:column="13">!<pos:position pos:line="95" pos:column="14"/></operator><name pos:line="95" pos:column="14">path<pos:position pos:line="95" pos:column="18"/></name></expr>)<pos:position pos:line="95" pos:column="19"/></condition><then pos:line="95" pos:column="19"> <block pos:line="95" pos:column="20">{
		<expr_stmt><expr><call><name pos:line="96" pos:column="17">logerror<pos:position pos:line="96" pos:column="25"/></name><argument_list pos:line="96" pos:column="25">(<argument><expr><literal type="string" pos:line="96" pos:column="26">"'%s' does not appear to be a git repository"<pos:position pos:line="96" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="96" pos:column="73">dir<pos:position pos:line="96" pos:column="76"/></name></expr></argument>)<pos:position pos:line="96" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="78"/></expr_stmt>
		<return pos:line="97" pos:column="17">return <expr><name pos:line="97" pos:column="24">NULL<pos:position pos:line="97" pos:column="28"/></name></expr>;<pos:position pos:line="97" pos:column="29"/></return>
	}<pos:position pos:line="98" pos:column="10"/></block></then></if>

	<if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">( <expr><name pos:line="100" pos:column="14">ok_paths<pos:position pos:line="100" pos:column="22"/></name> <operator pos:line="100" pos:column="23">&amp;&amp;<pos:position pos:line="100" pos:column="33"/></operator> <operator pos:line="100" pos:column="26">*<pos:position pos:line="100" pos:column="27"/></operator><name pos:line="100" pos:column="27">ok_paths<pos:position pos:line="100" pos:column="35"/></name></expr> )<pos:position pos:line="100" pos:column="37"/></condition><then pos:line="100" pos:column="37"> <block pos:line="100" pos:column="38">{
		<decl_stmt><decl><type><specifier pos:line="101" pos:column="17">const<pos:position pos:line="101" pos:column="22"/></specifier> <name pos:line="101" pos:column="23">char<pos:position pos:line="101" pos:column="27"/></name> <modifier pos:line="101" pos:column="28">*<pos:position pos:line="101" pos:column="29"/></modifier><modifier pos:line="101" pos:column="29">*<pos:position pos:line="101" pos:column="30"/></modifier></type><name pos:line="101" pos:column="30">pp<pos:position pos:line="101" pos:column="32"/></name></decl>;<pos:position pos:line="101" pos:column="33"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="102" pos:column="17">int<pos:position pos:line="102" pos:column="20"/></name></type> <name pos:line="102" pos:column="21">pathlen<pos:position pos:line="102" pos:column="28"/></name> <init pos:line="102" pos:column="29">= <expr><call><name pos:line="102" pos:column="31">strlen<pos:position pos:line="102" pos:column="37"/></name><argument_list pos:line="102" pos:column="37">(<argument><expr><name pos:line="102" pos:column="38">path<pos:position pos:line="102" pos:column="42"/></name></expr></argument>)<pos:position pos:line="102" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="102" pos:column="44"/></decl_stmt>

		<comment type="block" pos:line="104" pos:column="17">/* The validation is done on the paths after enter_repo
		 * appends optional {.git,.git/.git} and friends, but
		 * it does not use getcwd().  So if your /pub is
		 * a symlink to /mnt/pub, you can whitelist /pub and
		 * do not have to say /mnt/pub.
		 * Do not say /pub/.
		 */</comment>
		<for pos:line="111" pos:column="17">for <control pos:line="111" pos:column="21">( <init><expr><name pos:line="111" pos:column="23">pp<pos:position pos:line="111" pos:column="25"/></name> <operator pos:line="111" pos:column="26">=<pos:position pos:line="111" pos:column="27"/></operator> <name pos:line="111" pos:column="28">ok_paths<pos:position pos:line="111" pos:column="36"/></name></expr> ;<pos:position pos:line="111" pos:column="38"/></init> <condition><expr><operator pos:line="111" pos:column="39">*<pos:position pos:line="111" pos:column="40"/></operator><name pos:line="111" pos:column="40">pp<pos:position pos:line="111" pos:column="42"/></name></expr> ;<pos:position pos:line="111" pos:column="44"/></condition> <incr><expr><name pos:line="111" pos:column="45">pp<pos:position pos:line="111" pos:column="47"/></name><operator pos:line="111" pos:column="47">++<pos:position pos:line="111" pos:column="49"/></operator></expr></incr> )<pos:position pos:line="111" pos:column="51"/></control> <block pos:line="111" pos:column="52">{
			<decl_stmt><decl><type><name pos:line="112" pos:column="25">int<pos:position pos:line="112" pos:column="28"/></name></type> <name pos:line="112" pos:column="29">len<pos:position pos:line="112" pos:column="32"/></name> <init pos:line="112" pos:column="33">= <expr><call><name pos:line="112" pos:column="35">strlen<pos:position pos:line="112" pos:column="41"/></name><argument_list pos:line="112" pos:column="41">(<argument><expr><operator pos:line="112" pos:column="42">*<pos:position pos:line="112" pos:column="43"/></operator><name pos:line="112" pos:column="43">pp<pos:position pos:line="112" pos:column="45"/></name></expr></argument>)<pos:position pos:line="112" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="112" pos:column="47"/></decl_stmt>
			<if pos:line="113" pos:column="25">if <condition pos:line="113" pos:column="28">(<expr><name pos:line="113" pos:column="29">len<pos:position pos:line="113" pos:column="32"/></name> <operator pos:line="113" pos:column="33">&lt;=<pos:position pos:line="113" pos:column="38"/></operator> <name pos:line="113" pos:column="36">pathlen<pos:position pos:line="113" pos:column="43"/></name> <operator pos:line="113" pos:column="44">&amp;&amp;<pos:position pos:line="113" pos:column="54"/></operator>
			    <operator pos:line="114" pos:column="29">!<pos:position pos:line="114" pos:column="30"/></operator><call><name pos:line="114" pos:column="30">memcmp<pos:position pos:line="114" pos:column="36"/></name><argument_list pos:line="114" pos:column="36">(<argument><expr><operator pos:line="114" pos:column="37">*<pos:position pos:line="114" pos:column="38"/></operator><name pos:line="114" pos:column="38">pp<pos:position pos:line="114" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="42">path<pos:position pos:line="114" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="48">len<pos:position pos:line="114" pos:column="51"/></name></expr></argument>)<pos:position pos:line="114" pos:column="52"/></argument_list></call> <operator pos:line="114" pos:column="53">&amp;&amp;<pos:position pos:line="114" pos:column="63"/></operator>
			    <operator pos:line="115" pos:column="29">(<pos:position pos:line="115" pos:column="30"/></operator><name><name pos:line="115" pos:column="30">path<pos:position pos:line="115" pos:column="34"/></name><index pos:line="115" pos:column="34">[<expr><name pos:line="115" pos:column="35">len<pos:position pos:line="115" pos:column="38"/></name></expr>]<pos:position pos:line="115" pos:column="39"/></index></name> <operator pos:line="115" pos:column="40">==<pos:position pos:line="115" pos:column="42"/></operator> <literal type="char" pos:line="115" pos:column="43">'\0'<pos:position pos:line="115" pos:column="47"/></literal> <operator pos:line="115" pos:column="48">||<pos:position pos:line="115" pos:column="50"/></operator>
			     <operator pos:line="116" pos:column="30">(<pos:position pos:line="116" pos:column="31"/></operator><operator pos:line="116" pos:column="31">!<pos:position pos:line="116" pos:column="32"/></operator><name pos:line="116" pos:column="32">strict_paths<pos:position pos:line="116" pos:column="44"/></name> <operator pos:line="116" pos:column="45">&amp;&amp;<pos:position pos:line="116" pos:column="55"/></operator> <name><name pos:line="116" pos:column="48">path<pos:position pos:line="116" pos:column="52"/></name><index pos:line="116" pos:column="52">[<expr><name pos:line="116" pos:column="53">len<pos:position pos:line="116" pos:column="56"/></name></expr>]<pos:position pos:line="116" pos:column="57"/></index></name> <operator pos:line="116" pos:column="58">==<pos:position pos:line="116" pos:column="60"/></operator> <literal type="char" pos:line="116" pos:column="61">'/'<pos:position pos:line="116" pos:column="64"/></literal><operator pos:line="116" pos:column="64">)<pos:position pos:line="116" pos:column="65"/></operator><operator pos:line="116" pos:column="65">)<pos:position pos:line="116" pos:column="66"/></operator></expr>)<pos:position pos:line="116" pos:column="67"/></condition><then pos:line="116" pos:column="67">
				<block type="pseudo"><return pos:line="117" pos:column="33">return <expr><name pos:line="117" pos:column="40">path<pos:position pos:line="117" pos:column="44"/></name></expr>;<pos:position pos:line="117" pos:column="45"/></return></block></then></if>
		}<pos:position pos:line="118" pos:column="18"/></block></for>
	}<pos:position pos:line="119" pos:column="10"/></block></then>
	<else pos:line="120" pos:column="9">else <block pos:line="120" pos:column="14">{
		<comment type="block" pos:line="121" pos:column="17">/* be backwards compatible */</comment>
		<if pos:line="122" pos:column="17">if <condition pos:line="122" pos:column="20">(<expr><operator pos:line="122" pos:column="21">!<pos:position pos:line="122" pos:column="22"/></operator><name pos:line="122" pos:column="22">strict_paths<pos:position pos:line="122" pos:column="34"/></name></expr>)<pos:position pos:line="122" pos:column="35"/></condition><then pos:line="122" pos:column="35">
			<block type="pseudo"><return pos:line="123" pos:column="25">return <expr><name pos:line="123" pos:column="32">path<pos:position pos:line="123" pos:column="36"/></name></expr>;<pos:position pos:line="123" pos:column="37"/></return></block></then></if>
	}<pos:position pos:line="124" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="126" pos:column="9">logerror<pos:position pos:line="126" pos:column="17"/></name><argument_list pos:line="126" pos:column="17">(<argument><expr><literal type="string" pos:line="126" pos:column="18">"'%s': not in whitelist"<pos:position pos:line="126" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="126" pos:column="44">path<pos:position pos:line="126" pos:column="48"/></name></expr></argument>)<pos:position pos:line="126" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="50"/></expr_stmt>
	<return pos:line="127" pos:column="9">return <expr><name pos:line="127" pos:column="16">NULL<pos:position pos:line="127" pos:column="20"/></name></expr>;<pos:position pos:line="127" pos:column="21"/></return>		<comment type="block" pos:line="127" pos:column="33">/* Fallthrough. Deny by default */</comment>
}<pos:position pos:line="128" pos:column="2"/></block></function></unit>
