<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_7034_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name></type>
<name pos:line="2" pos:column="1">parse_bracket_element<pos:position pos:line="2" pos:column="22"/></name> <parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">bracket_elem_t<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">elem<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">re_string_t<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">regexp<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>,
		       <parameter><decl><type><name pos:line="3" pos:column="24">re_token_t<pos:position pos:line="3" pos:column="34"/></name> <modifier pos:line="3" pos:column="35">*<pos:position pos:line="3" pos:column="36"/></modifier></type><name pos:line="3" pos:column="36">token<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="43">int<pos:position pos:line="3" pos:column="46"/></name></type> <name pos:line="3" pos:column="47">token_len<pos:position pos:line="3" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="58">re_dfa_t<pos:position pos:line="3" pos:column="66"/></name> <modifier pos:line="3" pos:column="67">*<pos:position pos:line="3" pos:column="68"/></modifier></type><name pos:line="3" pos:column="68">dfa<pos:position pos:line="3" pos:column="71"/></name></decl></parameter>,
		       <parameter><decl><type><name pos:line="4" pos:column="24">reg_syntax_t<pos:position pos:line="4" pos:column="36"/></name></type> <name pos:line="4" pos:column="37">syntax<pos:position pos:line="4" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="45">int<pos:position pos:line="4" pos:column="48"/></name></type> <name pos:line="4" pos:column="49">accept_hyphen<pos:position pos:line="4" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="63"/></parameter_list>
<block pos:line="5" pos:column="1">{
<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="6" pos:column="22"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">cur_char_size<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
  <expr_stmt><expr><name pos:line="8" pos:column="3">cur_char_size<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator> <call><name pos:line="8" pos:column="19">re_string_char_size_at<pos:position pos:line="8" pos:column="41"/></name> <argument_list pos:line="8" pos:column="42">(<argument><expr><name pos:line="8" pos:column="43">regexp<pos:position pos:line="8" pos:column="49"/></name></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="51">re_string_cur_idx<pos:position pos:line="8" pos:column="68"/></name> <argument_list pos:line="8" pos:column="69">(<argument><expr><name pos:line="8" pos:column="70">regexp<pos:position pos:line="8" pos:column="76"/></name></expr></argument>)<pos:position pos:line="8" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="79"/></expr_stmt>
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">cur_char_size<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">&gt;<pos:position pos:line="9" pos:column="25"/></operator> <literal type="number" pos:line="9" pos:column="23">1<pos:position pos:line="9" pos:column="24"/></literal></expr>)<pos:position pos:line="9" pos:column="25"/></condition><then pos:line="9" pos:column="25">
    <block pos:line="10" pos:column="5">{
      <expr_stmt><expr><name><name pos:line="11" pos:column="7">elem<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">-&gt;<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="13">type<pos:position pos:line="11" pos:column="17"/></name></name> <operator pos:line="11" pos:column="18">=<pos:position pos:line="11" pos:column="19"/></operator> <name pos:line="11" pos:column="20">MB_CHAR<pos:position pos:line="11" pos:column="27"/></name></expr>;<pos:position pos:line="11" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="12" pos:column="7">elem<pos:position pos:line="12" pos:column="11"/></name><operator pos:line="12" pos:column="11">-&gt;<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="13">opr<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">.<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">wch<pos:position pos:line="12" pos:column="20"/></name></name> <operator pos:line="12" pos:column="21">=<pos:position pos:line="12" pos:column="22"/></operator> <call><name pos:line="12" pos:column="23">re_string_wchar_at<pos:position pos:line="12" pos:column="41"/></name> <argument_list pos:line="12" pos:column="42">(<argument><expr><name pos:line="12" pos:column="43">regexp<pos:position pos:line="12" pos:column="49"/></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="51">re_string_cur_idx<pos:position pos:line="12" pos:column="68"/></name> <argument_list pos:line="12" pos:column="69">(<argument><expr><name pos:line="12" pos:column="70">regexp<pos:position pos:line="12" pos:column="76"/></name></expr></argument>)<pos:position pos:line="12" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="79"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="13" pos:column="7">re_string_skip_bytes<pos:position pos:line="13" pos:column="27"/></name> <argument_list pos:line="13" pos:column="28">(<argument><expr><name pos:line="13" pos:column="29">regexp<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="37">cur_char_size<pos:position pos:line="13" pos:column="50"/></name></expr></argument>)<pos:position pos:line="13" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="52"/></expr_stmt>
      <return pos:line="14" pos:column="7">return <expr><name pos:line="14" pos:column="14">REG_NOERROR<pos:position pos:line="14" pos:column="25"/></name></expr>;<pos:position pos:line="14" pos:column="26"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="16" pos:column="8">/* RE_ENABLE_I18N */</comment>
  <expr_stmt><expr><call><name pos:line="17" pos:column="3">re_string_skip_bytes<pos:position pos:line="17" pos:column="23"/></name> <argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">regexp<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="33">token_len<pos:position pos:line="17" pos:column="42"/></name></expr></argument>)<pos:position pos:line="17" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="44"/></expr_stmt> <comment type="block" pos:line="17" pos:column="45">/* Skip a token.  */</comment>
  <if pos:line="18" pos:column="3">if <condition pos:line="18" pos:column="6">(<expr><name><name pos:line="18" pos:column="7">token<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">type<pos:position pos:line="18" pos:column="18"/></name></name> <operator pos:line="18" pos:column="19">==<pos:position pos:line="18" pos:column="21"/></operator> <name pos:line="18" pos:column="22">OP_OPEN_COLL_ELEM<pos:position pos:line="18" pos:column="39"/></name> <operator pos:line="18" pos:column="40">||<pos:position pos:line="18" pos:column="42"/></operator> <name><name pos:line="18" pos:column="43">token<pos:position pos:line="18" pos:column="48"/></name><operator pos:line="18" pos:column="48">-&gt;<pos:position pos:line="18" pos:column="53"/></operator><name pos:line="18" pos:column="50">type<pos:position pos:line="18" pos:column="54"/></name></name> <operator pos:line="18" pos:column="55">==<pos:position pos:line="18" pos:column="57"/></operator> <name pos:line="18" pos:column="58">OP_OPEN_CHAR_CLASS<pos:position pos:line="18" pos:column="76"/></name>
      <operator pos:line="19" pos:column="7">||<pos:position pos:line="19" pos:column="9"/></operator> <name><name pos:line="19" pos:column="10">token<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">-&gt;<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="17">type<pos:position pos:line="19" pos:column="21"/></name></name> <operator pos:line="19" pos:column="22">==<pos:position pos:line="19" pos:column="24"/></operator> <name pos:line="19" pos:column="25">OP_OPEN_EQUIV_CLASS<pos:position pos:line="19" pos:column="44"/></name></expr>)<pos:position pos:line="19" pos:column="45"/></condition><then pos:line="19" pos:column="45">
    <block type="pseudo"><return pos:line="20" pos:column="5">return <expr><call><name pos:line="20" pos:column="12">parse_bracket_symbol<pos:position pos:line="20" pos:column="32"/></name> <argument_list pos:line="20" pos:column="33">(<argument><expr><name pos:line="20" pos:column="34">elem<pos:position pos:line="20" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="40">regexp<pos:position pos:line="20" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="48">token<pos:position pos:line="20" pos:column="53"/></name></expr></argument>)<pos:position pos:line="20" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="55"/></return></block></then></if>
  <if pos:line="21" pos:column="3">if <condition pos:line="21" pos:column="6">(<expr><call><name pos:line="21" pos:column="7">BE<pos:position pos:line="21" pos:column="9"/></name> <argument_list pos:line="21" pos:column="10">(<argument><expr><name><name pos:line="21" pos:column="11">token<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">-&gt;<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="18">type<pos:position pos:line="21" pos:column="22"/></name></name> <operator pos:line="21" pos:column="23">==<pos:position pos:line="21" pos:column="25"/></operator> <name pos:line="21" pos:column="26">OP_CHARSET_RANGE<pos:position pos:line="21" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="44">0<pos:position pos:line="21" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="46"/></argument_list></call> <operator pos:line="21" pos:column="47">&amp;&amp;<pos:position pos:line="21" pos:column="57"/></operator> <operator pos:line="21" pos:column="50">!<pos:position pos:line="21" pos:column="51"/></operator><name pos:line="21" pos:column="51">accept_hyphen<pos:position pos:line="21" pos:column="64"/></name></expr>)<pos:position pos:line="21" pos:column="65"/></condition><then pos:line="21" pos:column="65">
    <block pos:line="22" pos:column="5">{
      <comment type="block" pos:line="23" pos:column="7">/* A '-' must only appear as anything but a range indicator before
	 the closing bracket.  Everything else is an error.  */</comment>
      <decl_stmt><decl><type><name pos:line="25" pos:column="7">re_token_t<pos:position pos:line="25" pos:column="17"/></name></type> <name pos:line="25" pos:column="18">token2<pos:position pos:line="25" pos:column="24"/></name></decl>;<pos:position pos:line="25" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><operator pos:line="26" pos:column="7">(<pos:position pos:line="26" pos:column="8"/></operator><name pos:line="26" pos:column="8">void<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">)<pos:position pos:line="26" pos:column="13"/></operator> <call><name pos:line="26" pos:column="14">peek_token_bracket<pos:position pos:line="26" pos:column="32"/></name> <argument_list pos:line="26" pos:column="33">(<argument><expr><operator pos:line="26" pos:column="34">&amp;<pos:position pos:line="26" pos:column="39"/></operator><name pos:line="26" pos:column="35">token2<pos:position pos:line="26" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="43">regexp<pos:position pos:line="26" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="51">syntax<pos:position pos:line="26" pos:column="57"/></name></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="59"/></expr_stmt>
      <if pos:line="27" pos:column="7">if <condition pos:line="27" pos:column="10">(<expr><name><name pos:line="27" pos:column="11">token2<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">.<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="18">type<pos:position pos:line="27" pos:column="22"/></name></name> <operator pos:line="27" pos:column="23">!=<pos:position pos:line="27" pos:column="25"/></operator> <name pos:line="27" pos:column="26">OP_CLOSE_BRACKET<pos:position pos:line="27" pos:column="42"/></name></expr>)<pos:position pos:line="27" pos:column="43"/></condition><then pos:line="27" pos:column="43">
	<comment type="block" pos:line="28" pos:column="9">/* The actual error value is not standardized since this whole
	   case is undefined.  But ERANGE makes good sense.  */</comment>
	<block type="pseudo"><return pos:line="30" pos:column="9">return <expr><name pos:line="30" pos:column="16">REG_ERANGE<pos:position pos:line="30" pos:column="26"/></name></expr>;<pos:position pos:line="30" pos:column="27"/></return></block></then></if>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
  <expr_stmt><expr><name><name pos:line="32" pos:column="3">elem<pos:position pos:line="32" pos:column="7"/></name><operator pos:line="32" pos:column="7">-&gt;<pos:position pos:line="32" pos:column="12"/></operator><name pos:line="32" pos:column="9">type<pos:position pos:line="32" pos:column="13"/></name></name> <operator pos:line="32" pos:column="14">=<pos:position pos:line="32" pos:column="15"/></operator> <name pos:line="32" pos:column="16">SB_CHAR<pos:position pos:line="32" pos:column="23"/></name></expr>;<pos:position pos:line="32" pos:column="24"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="33" pos:column="3">elem<pos:position pos:line="33" pos:column="7"/></name><operator pos:line="33" pos:column="7">-&gt;<pos:position pos:line="33" pos:column="12"/></operator><name pos:line="33" pos:column="9">opr<pos:position pos:line="33" pos:column="12"/></name><operator pos:line="33" pos:column="12">.<pos:position pos:line="33" pos:column="13"/></operator><name pos:line="33" pos:column="13">ch<pos:position pos:line="33" pos:column="15"/></name></name> <operator pos:line="33" pos:column="16">=<pos:position pos:line="33" pos:column="17"/></operator> <name><name pos:line="33" pos:column="18">token<pos:position pos:line="33" pos:column="23"/></name><operator pos:line="33" pos:column="23">-&gt;<pos:position pos:line="33" pos:column="28"/></operator><name pos:line="33" pos:column="25">opr<pos:position pos:line="33" pos:column="28"/></name><operator pos:line="33" pos:column="28">.<pos:position pos:line="33" pos:column="29"/></operator><name pos:line="33" pos:column="29">c<pos:position pos:line="33" pos:column="30"/></name></name></expr>;<pos:position pos:line="33" pos:column="31"/></expr_stmt>
  <return pos:line="34" pos:column="3">return <expr><name pos:line="34" pos:column="10">REG_NOERROR<pos:position pos:line="34" pos:column="21"/></name></expr>;<pos:position pos:line="34" pos:column="22"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
