<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3572_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">rerere_io_putconflict<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">int<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">ch<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">int<pos:position pos:line="1" pos:column="46"/></name></type> <name pos:line="1" pos:column="47">size<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="53">struct<pos:position pos:line="1" pos:column="59"/></name> <name pos:line="1" pos:column="60">rerere_io<pos:position pos:line="1" pos:column="69"/></name></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">io<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name><name pos:line="3" pos:column="14">buf<pos:position pos:line="3" pos:column="17"/></name><index pos:line="3" pos:column="17">[<expr><literal type="number" pos:line="3" pos:column="18">64<pos:position pos:line="3" pos:column="20"/></literal></expr>]<pos:position pos:line="3" pos:column="21"/></index></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>

	<while pos:line="5" pos:column="9">while <condition pos:line="5" pos:column="15">(<expr><name pos:line="5" pos:column="16">size<pos:position pos:line="5" pos:column="20"/></name></expr>)<pos:position pos:line="5" pos:column="21"/></condition> <block pos:line="5" pos:column="22">{
		<if pos:line="6" pos:column="17">if <condition pos:line="6" pos:column="20">(<expr><name pos:line="6" pos:column="21">size<pos:position pos:line="6" pos:column="25"/></name> <operator pos:line="6" pos:column="26">&lt;=<pos:position pos:line="6" pos:column="31"/></operator> <sizeof pos:line="6" pos:column="29">sizeof<argument_list pos:line="6" pos:column="35">(<argument><expr><name pos:line="6" pos:column="36">buf<pos:position pos:line="6" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></sizeof> <operator pos:line="6" pos:column="41">-<pos:position pos:line="6" pos:column="42"/></operator> <literal type="number" pos:line="6" pos:column="43">2<pos:position pos:line="6" pos:column="44"/></literal></expr>)<pos:position pos:line="6" pos:column="45"/></condition><then pos:line="6" pos:column="45"> <block pos:line="6" pos:column="46">{
			<expr_stmt><expr><call><name pos:line="7" pos:column="25">memset<pos:position pos:line="7" pos:column="31"/></name><argument_list pos:line="7" pos:column="31">(<argument><expr><name pos:line="7" pos:column="32">buf<pos:position pos:line="7" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="37">ch<pos:position pos:line="7" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="41">size<pos:position pos:line="7" pos:column="45"/></name></expr></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="8" pos:column="25">buf<pos:position pos:line="8" pos:column="28"/></name><index pos:line="8" pos:column="28">[<expr><name pos:line="8" pos:column="29">size<pos:position pos:line="8" pos:column="33"/></name></expr>]<pos:position pos:line="8" pos:column="34"/></index></name> <operator pos:line="8" pos:column="35">=<pos:position pos:line="8" pos:column="36"/></operator> <literal type="char" pos:line="8" pos:column="37">'\n'<pos:position pos:line="8" pos:column="41"/></literal></expr>;<pos:position pos:line="8" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="9" pos:column="25">buf<pos:position pos:line="9" pos:column="28"/></name><index pos:line="9" pos:column="28">[<expr><name pos:line="9" pos:column="29">size<pos:position pos:line="9" pos:column="33"/></name> <operator pos:line="9" pos:column="34">+<pos:position pos:line="9" pos:column="35"/></operator> <literal type="number" pos:line="9" pos:column="36">1<pos:position pos:line="9" pos:column="37"/></literal></expr>]<pos:position pos:line="9" pos:column="38"/></index></name> <operator pos:line="9" pos:column="39">=<pos:position pos:line="9" pos:column="40"/></operator> <literal type="char" pos:line="9" pos:column="41">'\0'<pos:position pos:line="9" pos:column="45"/></literal></expr>;<pos:position pos:line="9" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><name pos:line="10" pos:column="25">size<pos:position pos:line="10" pos:column="29"/></name> <operator pos:line="10" pos:column="30">=<pos:position pos:line="10" pos:column="31"/></operator> <literal type="number" pos:line="10" pos:column="32">0<pos:position pos:line="10" pos:column="33"/></literal></expr>;<pos:position pos:line="10" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="11" pos:column="18"/></block></then> <else pos:line="11" pos:column="19">else <block pos:line="11" pos:column="24">{
			<decl_stmt><decl><type><name pos:line="12" pos:column="25">int<pos:position pos:line="12" pos:column="28"/></name></type> <name pos:line="12" pos:column="29">sz<pos:position pos:line="12" pos:column="31"/></name> <init pos:line="12" pos:column="32">= <expr><sizeof pos:line="12" pos:column="34">sizeof<argument_list pos:line="12" pos:column="40">(<argument><expr><name pos:line="12" pos:column="41">buf<pos:position pos:line="12" pos:column="44"/></name></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></sizeof> <operator pos:line="12" pos:column="46">-<pos:position pos:line="12" pos:column="47"/></operator> <literal type="number" pos:line="12" pos:column="48">1<pos:position pos:line="12" pos:column="49"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="50"/></decl_stmt>

			<comment type="block" pos:line="14" pos:column="25">/*
			 * Make sure we will not write everything out
			 * in this round by leaving at least 1 byte
			 * for the next round, giving the next round
			 * a chance to add the terminating LF.  Yuck.
			 */</comment>
			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><name pos:line="20" pos:column="29">size<pos:position pos:line="20" pos:column="33"/></name> <operator pos:line="20" pos:column="34">&lt;=<pos:position pos:line="20" pos:column="39"/></operator> <name pos:line="20" pos:column="37">sz<pos:position pos:line="20" pos:column="39"/></name></expr>)<pos:position pos:line="20" pos:column="40"/></condition><then pos:line="20" pos:column="40">
				<block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="33">sz<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">-=<pos:position pos:line="21" pos:column="38"/></operator> <operator pos:line="21" pos:column="39">(<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="40">sz<pos:position pos:line="21" pos:column="42"/></name> <operator pos:line="21" pos:column="43">-<pos:position pos:line="21" pos:column="44"/></operator> <name pos:line="21" pos:column="45">size<pos:position pos:line="21" pos:column="49"/></name><operator pos:line="21" pos:column="49">)<pos:position pos:line="21" pos:column="50"/></operator> <operator pos:line="21" pos:column="51">+<pos:position pos:line="21" pos:column="52"/></operator> <literal type="number" pos:line="21" pos:column="53">1<pos:position pos:line="21" pos:column="54"/></literal></expr>;<pos:position pos:line="21" pos:column="55"/></expr_stmt></block></then></if>
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">memset<pos:position pos:line="22" pos:column="31"/></name><argument_list pos:line="22" pos:column="31">(<argument><expr><name pos:line="22" pos:column="32">buf<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="37">ch<pos:position pos:line="22" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="41">sz<pos:position pos:line="22" pos:column="43"/></name></expr></argument>)<pos:position pos:line="22" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="23" pos:column="25">buf<pos:position pos:line="23" pos:column="28"/></name><index pos:line="23" pos:column="28">[<expr><name pos:line="23" pos:column="29">sz<pos:position pos:line="23" pos:column="31"/></name></expr>]<pos:position pos:line="23" pos:column="32"/></index></name> <operator pos:line="23" pos:column="33">=<pos:position pos:line="23" pos:column="34"/></operator> <literal type="char" pos:line="23" pos:column="35">'\0'<pos:position pos:line="23" pos:column="39"/></literal></expr>;<pos:position pos:line="23" pos:column="40"/></expr_stmt>
			<expr_stmt><expr><name pos:line="24" pos:column="25">size<pos:position pos:line="24" pos:column="29"/></name> <operator pos:line="24" pos:column="30">-=<pos:position pos:line="24" pos:column="32"/></operator> <name pos:line="24" pos:column="33">sz<pos:position pos:line="24" pos:column="35"/></name></expr>;<pos:position pos:line="24" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="25" pos:column="18"/></block></else></if>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">rerere_io_putstr<pos:position pos:line="26" pos:column="33"/></name><argument_list pos:line="26" pos:column="33">(<argument><expr><name pos:line="26" pos:column="34">buf<pos:position pos:line="26" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="39">io<pos:position pos:line="26" pos:column="41"/></name></expr></argument>)<pos:position pos:line="26" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="27" pos:column="10"/></block></while>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
