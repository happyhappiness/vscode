<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_187.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">show_entry<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">diff_options<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">opt<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="50">const<pos:position pos:line="1" pos:column="55"/></specifier> <name pos:line="1" pos:column="56">char<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">prefix<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,
		       <parameter><decl><type><name><name pos:line="2" pos:column="24">struct<pos:position pos:line="2" pos:column="30"/></name> <name pos:line="2" pos:column="31">tree_desc<pos:position pos:line="2" pos:column="40"/></name></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">desc<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="48">struct<pos:position pos:line="2" pos:column="54"/></name> <name pos:line="2" pos:column="55">strbuf<pos:position pos:line="2" pos:column="61"/></name></name> <modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="63">base<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">mode<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">path<pos:position pos:line="5" pos:column="25"/></name></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">unsigned<pos:position pos:line="6" pos:column="23"/></name> <name pos:line="6" pos:column="24">char<pos:position pos:line="6" pos:column="28"/></name> <modifier pos:line="6" pos:column="29">*<pos:position pos:line="6" pos:column="30"/></modifier></type><name pos:line="6" pos:column="30">sha1<pos:position pos:line="6" pos:column="34"/></name> <init pos:line="6" pos:column="35">= <expr><call><name pos:line="6" pos:column="37">tree_entry_extract<pos:position pos:line="6" pos:column="55"/></name><argument_list pos:line="6" pos:column="55">(<argument><expr><name pos:line="6" pos:column="56">desc<pos:position pos:line="6" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="62">&amp;<pos:position pos:line="6" pos:column="67"/></operator><name pos:line="6" pos:column="63">path<pos:position pos:line="6" pos:column="67"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="69">&amp;<pos:position pos:line="6" pos:column="74"/></operator><name pos:line="6" pos:column="70">mode<pos:position pos:line="6" pos:column="74"/></name></expr></argument>)<pos:position pos:line="6" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="76"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">pathlen<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><call><name pos:line="7" pos:column="23">tree_entry_len<pos:position pos:line="7" pos:column="37"/></name><argument_list pos:line="7" pos:column="37">(<argument><expr><operator pos:line="7" pos:column="38">&amp;<pos:position pos:line="7" pos:column="43"/></operator><name><name pos:line="7" pos:column="39">desc<pos:position pos:line="7" pos:column="43"/></name><operator pos:line="7" pos:column="43">-&gt;<pos:position pos:line="7" pos:column="48"/></operator><name pos:line="7" pos:column="45">entry<pos:position pos:line="7" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">old_baselen<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><name><name pos:line="8" pos:column="27">base<pos:position pos:line="8" pos:column="31"/></name><operator pos:line="8" pos:column="31">-&gt;<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="33">len<pos:position pos:line="8" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="37"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">strbuf_add<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">base<pos:position pos:line="10" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="26">path<pos:position pos:line="10" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="32">pathlen<pos:position pos:line="10" pos:column="39"/></name></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">DIFF_OPT_TST<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">opt<pos:position pos:line="11" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="31">RECURSIVE<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call> <operator pos:line="11" pos:column="42">&amp;&amp;<pos:position pos:line="11" pos:column="52"/></operator> <call><name pos:line="11" pos:column="45">S_ISDIR<pos:position pos:line="11" pos:column="52"/></name><argument_list pos:line="11" pos:column="52">(<argument><expr><name pos:line="11" pos:column="53">mode<pos:position pos:line="11" pos:column="57"/></name></expr></argument>)<pos:position pos:line="11" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="59"/></condition><then pos:line="11" pos:column="59"> <block pos:line="11" pos:column="60">{
		<decl_stmt><decl><type><name><name pos:line="12" pos:column="17">enum<pos:position pos:line="12" pos:column="21"/></name> <name pos:line="12" pos:column="22">object_type<pos:position pos:line="12" pos:column="33"/></name></name></type> <name pos:line="12" pos:column="34">type<pos:position pos:line="12" pos:column="38"/></name></decl>;<pos:position pos:line="12" pos:column="39"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="13" pos:column="17">struct<pos:position pos:line="13" pos:column="23"/></name> <name pos:line="13" pos:column="24">tree_desc<pos:position pos:line="13" pos:column="33"/></name></name></type> <name pos:line="13" pos:column="34">inner<pos:position pos:line="13" pos:column="39"/></name></decl>;<pos:position pos:line="13" pos:column="40"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">void<pos:position pos:line="14" pos:column="21"/></name> <modifier pos:line="14" pos:column="22">*<pos:position pos:line="14" pos:column="23"/></modifier></type><name pos:line="14" pos:column="23">tree<pos:position pos:line="14" pos:column="27"/></name></decl>;<pos:position pos:line="14" pos:column="28"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">unsigned<pos:position pos:line="15" pos:column="25"/></name> <name pos:line="15" pos:column="26">long<pos:position pos:line="15" pos:column="30"/></name></type> <name pos:line="15" pos:column="31">size<pos:position pos:line="15" pos:column="35"/></name></decl>;<pos:position pos:line="15" pos:column="36"/></decl_stmt>

		<expr_stmt><expr><name pos:line="17" pos:column="17">tree<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <call><name pos:line="17" pos:column="24">read_sha1_file<pos:position pos:line="17" pos:column="38"/></name><argument_list pos:line="17" pos:column="38">(<argument><expr><name pos:line="17" pos:column="39">sha1<pos:position pos:line="17" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="45">&amp;<pos:position pos:line="17" pos:column="50"/></operator><name pos:line="17" pos:column="46">type<pos:position pos:line="17" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="52">&amp;<pos:position pos:line="17" pos:column="57"/></operator><name pos:line="17" pos:column="53">size<pos:position pos:line="17" pos:column="57"/></name></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="59"/></expr_stmt>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><operator pos:line="18" pos:column="21">!<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">tree<pos:position pos:line="18" pos:column="26"/></name> <operator pos:line="18" pos:column="27">||<pos:position pos:line="18" pos:column="29"/></operator> <name pos:line="18" pos:column="30">type<pos:position pos:line="18" pos:column="34"/></name> <operator pos:line="18" pos:column="35">!=<pos:position pos:line="18" pos:column="37"/></operator> <name pos:line="18" pos:column="38">OBJ_TREE<pos:position pos:line="18" pos:column="46"/></name></expr>)<pos:position pos:line="18" pos:column="47"/></condition><then pos:line="18" pos:column="47">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="25">die<pos:position pos:line="19" pos:column="28"/></name><argument_list pos:line="19" pos:column="28">(<argument><expr><literal type="string" pos:line="19" pos:column="29">"corrupt tree sha %s"<pos:position pos:line="19" pos:column="50"/></literal></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="52">sha1_to_hex<pos:position pos:line="19" pos:column="63"/></name><argument_list pos:line="19" pos:column="63">(<argument><expr><name pos:line="19" pos:column="64">sha1<pos:position pos:line="19" pos:column="68"/></name></expr></argument>)<pos:position pos:line="19" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="71"/></expr_stmt></block></then></if>

		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><call><name pos:line="21" pos:column="21">DIFF_OPT_TST<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">opt<pos:position pos:line="21" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="39">TREE_IN_RECURSIVE<pos:position pos:line="21" pos:column="56"/></name></expr></argument>)<pos:position pos:line="21" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="58"/></condition><then pos:line="21" pos:column="58">
			<block type="pseudo"><expr_stmt><expr><call><name><name pos:line="22" pos:column="25">opt<pos:position pos:line="22" pos:column="28"/></name><operator pos:line="22" pos:column="28">-&gt;<pos:position pos:line="22" pos:column="33"/></operator><name pos:line="22" pos:column="30">add_remove<pos:position pos:line="22" pos:column="40"/></name></name><argument_list pos:line="22" pos:column="40">(<argument><expr><name pos:line="22" pos:column="41">opt<pos:position pos:line="22" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="46">*<pos:position pos:line="22" pos:column="47"/></operator><name pos:line="22" pos:column="47">prefix<pos:position pos:line="22" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="55">mode<pos:position pos:line="22" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="61">sha1<pos:position pos:line="22" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="67">1<pos:position pos:line="22" pos:column="68"/></literal></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="70">base<pos:position pos:line="22" pos:column="74"/></name><operator pos:line="22" pos:column="74">-&gt;<pos:position pos:line="22" pos:column="79"/></operator><name pos:line="22" pos:column="76">buf<pos:position pos:line="22" pos:column="79"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="81">0<pos:position pos:line="22" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="84"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="24" pos:column="17">strbuf_addch<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">base<pos:position pos:line="24" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="24" pos:column="36">'/'<pos:position pos:line="24" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="41"/></expr_stmt>

		<expr_stmt><expr><call><name pos:line="26" pos:column="17">init_tree_desc<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">(<argument><expr><operator pos:line="26" pos:column="32">&amp;<pos:position pos:line="26" pos:column="37"/></operator><name pos:line="26" pos:column="33">inner<pos:position pos:line="26" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="40">tree<pos:position pos:line="26" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="46">size<pos:position pos:line="26" pos:column="50"/></name></expr></argument>)<pos:position pos:line="26" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">show_tree<pos:position pos:line="27" pos:column="26"/></name><argument_list pos:line="27" pos:column="26">(<argument><expr><name pos:line="27" pos:column="27">opt<pos:position pos:line="27" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="32">prefix<pos:position pos:line="27" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="40">&amp;<pos:position pos:line="27" pos:column="45"/></operator><name pos:line="27" pos:column="41">inner<pos:position pos:line="27" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="48">base<pos:position pos:line="27" pos:column="52"/></name></expr></argument>)<pos:position pos:line="27" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">free<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><name pos:line="28" pos:column="22">tree<pos:position pos:line="28" pos:column="26"/></name></expr></argument>)<pos:position pos:line="28" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></then> <else pos:line="29" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name><name pos:line="30" pos:column="17">opt<pos:position pos:line="30" pos:column="20"/></name><operator pos:line="30" pos:column="20">-&gt;<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="22">add_remove<pos:position pos:line="30" pos:column="32"/></name></name><argument_list pos:line="30" pos:column="32">(<argument><expr><name pos:line="30" pos:column="33">opt<pos:position pos:line="30" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="38">prefix<pos:position pos:line="30" pos:column="44"/></name><index pos:line="30" pos:column="44">[<expr><literal type="number" pos:line="30" pos:column="45">0<pos:position pos:line="30" pos:column="46"/></literal></expr>]<pos:position pos:line="30" pos:column="47"/></index></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="49">mode<pos:position pos:line="30" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="55">sha1<pos:position pos:line="30" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="61">1<pos:position pos:line="30" pos:column="62"/></literal></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="64">base<pos:position pos:line="30" pos:column="68"/></name><operator pos:line="30" pos:column="68">-&gt;<pos:position pos:line="30" pos:column="73"/></operator><name pos:line="30" pos:column="70">buf<pos:position pos:line="30" pos:column="73"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="75">0<pos:position pos:line="30" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="78"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="32" pos:column="9">strbuf_setlen<pos:position pos:line="32" pos:column="22"/></name><argument_list pos:line="32" pos:column="22">(<argument><expr><name pos:line="32" pos:column="23">base<pos:position pos:line="32" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="29">old_baselen<pos:position pos:line="32" pos:column="40"/></name></expr></argument>)<pos:position pos:line="32" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="42"/></expr_stmt>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
