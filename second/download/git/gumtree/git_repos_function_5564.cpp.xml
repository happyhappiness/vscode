<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5564.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">split_merge_strategies<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">string<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="56">struct<pos:position pos:line="1" pos:column="62"/></name> <name pos:line="1" pos:column="63">strategy<pos:position pos:line="1" pos:column="71"/></name></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier><modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">list<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>,
				   <parameter><decl><type><name pos:line="2" pos:column="36">int<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">nr<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">int<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">alloc<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">p<pos:position pos:line="4" pos:column="16"/></name></decl>, <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="19">q<pos:position pos:line="4" pos:column="20"/></name></decl>, <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="23">buf<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">string<pos:position pos:line="6" pos:column="20"/></name></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21">
		<block type="pseudo"><return pos:line="7" pos:column="17">return;<pos:position pos:line="7" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="9" pos:column="9">buf<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <call><name pos:line="9" pos:column="15">xstrdup<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">string<pos:position pos:line="9" pos:column="29"/></name></expr></argument>)<pos:position pos:line="9" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><name pos:line="10" pos:column="9">q<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <name pos:line="10" pos:column="13">buf<pos:position pos:line="10" pos:column="16"/></name></expr>;<pos:position pos:line="10" pos:column="17"/></expr_stmt>
	<for pos:line="11" pos:column="9">for <control pos:line="11" pos:column="13">(<init pos:line="11" pos:column="14">;<pos:position pos:line="11" pos:column="15"/></init><condition pos:line="11" pos:column="15">;<pos:position pos:line="11" pos:column="16"/></condition><incr/>)<pos:position pos:line="11" pos:column="17"/></control> <block pos:line="11" pos:column="18">{
		<expr_stmt><expr><name pos:line="12" pos:column="17">p<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <call><name pos:line="12" pos:column="21">strchr<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">q<pos:position pos:line="12" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="12" pos:column="31">' '<pos:position pos:line="12" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">!<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">p<pos:position pos:line="13" pos:column="23"/></name></expr>)<pos:position pos:line="13" pos:column="24"/></condition><then pos:line="13" pos:column="24"> <block pos:line="13" pos:column="25">{
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">ALLOC_GROW<pos:position pos:line="14" pos:column="35"/></name><argument_list pos:line="14" pos:column="35">(<argument><expr><operator pos:line="14" pos:column="36">*<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="37">list<pos:position pos:line="14" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="43">*<pos:position pos:line="14" pos:column="44"/></operator><name pos:line="14" pos:column="44">nr<pos:position pos:line="14" pos:column="46"/></name> <operator pos:line="14" pos:column="47">+<pos:position pos:line="14" pos:column="48"/></operator> <literal type="number" pos:line="14" pos:column="49">1<pos:position pos:line="14" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="14" pos:column="52">*<pos:position pos:line="14" pos:column="53"/></operator><name pos:line="14" pos:column="53">alloc<pos:position pos:line="14" pos:column="58"/></name></expr></argument>)<pos:position pos:line="14" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="15" pos:column="25">(<pos:position pos:line="15" pos:column="26"/></operator><operator pos:line="15" pos:column="26">*<pos:position pos:line="15" pos:column="27"/></operator><name pos:line="15" pos:column="27">list<pos:position pos:line="15" pos:column="31"/></name><operator pos:line="15" pos:column="31">)<pos:position pos:line="15" pos:column="32"/></operator><index pos:line="15" pos:column="32">[<expr><operator pos:line="15" pos:column="33">(<pos:position pos:line="15" pos:column="34"/></operator><operator pos:line="15" pos:column="34">*<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="35">nr<pos:position pos:line="15" pos:column="37"/></name><operator pos:line="15" pos:column="37">)<pos:position pos:line="15" pos:column="38"/></operator><operator pos:line="15" pos:column="38">++<pos:position pos:line="15" pos:column="40"/></operator></expr>]<pos:position pos:line="15" pos:column="41"/></index><operator pos:line="15" pos:column="41">.<pos:position pos:line="15" pos:column="42"/></operator><name pos:line="15" pos:column="42">name<pos:position pos:line="15" pos:column="46"/></name> <operator pos:line="15" pos:column="47">=<pos:position pos:line="15" pos:column="48"/></operator> <call><name pos:line="15" pos:column="49">xstrdup<pos:position pos:line="15" pos:column="56"/></name><argument_list pos:line="15" pos:column="56">(<argument><expr><name pos:line="15" pos:column="57">q<pos:position pos:line="15" pos:column="58"/></name></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="16" pos:column="25">free<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">buf<pos:position pos:line="16" pos:column="33"/></name></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt>
			<return pos:line="17" pos:column="25">return;<pos:position pos:line="17" pos:column="32"/></return>
		}<pos:position pos:line="18" pos:column="18"/></block></then> <else pos:line="18" pos:column="19">else <block pos:line="18" pos:column="24">{
			<expr_stmt><expr><operator pos:line="19" pos:column="25">*<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="26">p<pos:position pos:line="19" pos:column="27"/></name> <operator pos:line="19" pos:column="28">=<pos:position pos:line="19" pos:column="29"/></operator> <literal type="char" pos:line="19" pos:column="30">'\0'<pos:position pos:line="19" pos:column="34"/></literal></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="20" pos:column="25">ALLOC_GROW<pos:position pos:line="20" pos:column="35"/></name><argument_list pos:line="20" pos:column="35">(<argument><expr><operator pos:line="20" pos:column="36">*<pos:position pos:line="20" pos:column="37"/></operator><name pos:line="20" pos:column="37">list<pos:position pos:line="20" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="43">*<pos:position pos:line="20" pos:column="44"/></operator><name pos:line="20" pos:column="44">nr<pos:position pos:line="20" pos:column="46"/></name> <operator pos:line="20" pos:column="47">+<pos:position pos:line="20" pos:column="48"/></operator> <literal type="number" pos:line="20" pos:column="49">1<pos:position pos:line="20" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="20" pos:column="52">*<pos:position pos:line="20" pos:column="53"/></operator><name pos:line="20" pos:column="53">alloc<pos:position pos:line="20" pos:column="58"/></name></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><operator pos:line="21" pos:column="25">(<pos:position pos:line="21" pos:column="26"/></operator><operator pos:line="21" pos:column="26">*<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="27">list<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">)<pos:position pos:line="21" pos:column="32"/></operator><index pos:line="21" pos:column="32">[<expr><operator pos:line="21" pos:column="33">(<pos:position pos:line="21" pos:column="34"/></operator><operator pos:line="21" pos:column="34">*<pos:position pos:line="21" pos:column="35"/></operator><name pos:line="21" pos:column="35">nr<pos:position pos:line="21" pos:column="37"/></name><operator pos:line="21" pos:column="37">)<pos:position pos:line="21" pos:column="38"/></operator><operator pos:line="21" pos:column="38">++<pos:position pos:line="21" pos:column="40"/></operator></expr>]<pos:position pos:line="21" pos:column="41"/></index><operator pos:line="21" pos:column="41">.<pos:position pos:line="21" pos:column="42"/></operator><name pos:line="21" pos:column="42">name<pos:position pos:line="21" pos:column="46"/></name> <operator pos:line="21" pos:column="47">=<pos:position pos:line="21" pos:column="48"/></operator> <call><name pos:line="21" pos:column="49">xstrdup<pos:position pos:line="21" pos:column="56"/></name><argument_list pos:line="21" pos:column="56">(<argument><expr><name pos:line="21" pos:column="57">q<pos:position pos:line="21" pos:column="58"/></name></expr></argument>)<pos:position pos:line="21" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><name pos:line="22" pos:column="25">q<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">=<pos:position pos:line="22" pos:column="28"/></operator> <operator pos:line="22" pos:column="29">++<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="31">p<pos:position pos:line="22" pos:column="32"/></name></expr>;<pos:position pos:line="22" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="23" pos:column="18"/></block></else></if>
	}<pos:position pos:line="24" pos:column="10"/></block></for>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
