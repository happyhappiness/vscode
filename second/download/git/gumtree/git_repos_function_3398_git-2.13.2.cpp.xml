<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3398_git-2.13.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">verify_cache<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">cache_entry<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier><modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">cache<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
			<parameter><decl><type><name pos:line="2" pos:column="25">int<pos:position pos:line="2" pos:column="28"/></name></type> <name pos:line="2" pos:column="29">entries<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="38">int<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">flags<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">i<pos:position pos:line="4" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="16">funny<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">silent<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><name pos:line="5" pos:column="22">flags<pos:position pos:line="5" pos:column="27"/></name> <operator pos:line="5" pos:column="28">&amp;<pos:position pos:line="5" pos:column="33"/></operator> <name pos:line="5" pos:column="30">WRITE_TREE_SILENT<pos:position pos:line="5" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/* Verify that the tree is merged */</comment>
	<expr_stmt><expr><name pos:line="8" pos:column="9">funny<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">=<pos:position pos:line="8" pos:column="16"/></operator> <literal type="number" pos:line="8" pos:column="17">0<pos:position pos:line="8" pos:column="18"/></literal></expr>;<pos:position pos:line="8" pos:column="19"/></expr_stmt>
	<for pos:line="9" pos:column="9">for <control pos:line="9" pos:column="13">(<init><expr><name pos:line="9" pos:column="14">i<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <literal type="number" pos:line="9" pos:column="18">0<pos:position pos:line="9" pos:column="19"/></literal></expr>;<pos:position pos:line="9" pos:column="20"/></init> <condition><expr><name pos:line="9" pos:column="21">i<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">&lt;<pos:position pos:line="9" pos:column="27"/></operator> <name pos:line="9" pos:column="25">entries<pos:position pos:line="9" pos:column="32"/></name></expr>;<pos:position pos:line="9" pos:column="33"/></condition> <incr><expr><name pos:line="9" pos:column="34">i<pos:position pos:line="9" pos:column="35"/></name><operator pos:line="9" pos:column="35">++<pos:position pos:line="9" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="9" pos:column="38"/></control> <block pos:line="9" pos:column="39">{
		<decl_stmt><decl><type><specifier pos:line="10" pos:column="17">const<pos:position pos:line="10" pos:column="22"/></specifier> <name><name pos:line="10" pos:column="23">struct<pos:position pos:line="10" pos:column="29"/></name> <name pos:line="10" pos:column="30">cache_entry<pos:position pos:line="10" pos:column="41"/></name></name> <modifier pos:line="10" pos:column="42">*<pos:position pos:line="10" pos:column="43"/></modifier></type><name pos:line="10" pos:column="43">ce<pos:position pos:line="10" pos:column="45"/></name> <init pos:line="10" pos:column="46">= <expr><name><name pos:line="10" pos:column="48">cache<pos:position pos:line="10" pos:column="53"/></name><index pos:line="10" pos:column="53">[<expr><name pos:line="10" pos:column="54">i<pos:position pos:line="10" pos:column="55"/></name></expr>]<pos:position pos:line="10" pos:column="56"/></index></name></expr></init></decl>;<pos:position pos:line="10" pos:column="57"/></decl_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><call><name pos:line="11" pos:column="21">ce_stage<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><name pos:line="11" pos:column="30">ce<pos:position pos:line="11" pos:column="32"/></name></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="34"/></condition><then pos:line="11" pos:column="34"> <block pos:line="11" pos:column="35">{
			<if pos:line="12" pos:column="25">if <condition pos:line="12" pos:column="28">(<expr><name pos:line="12" pos:column="29">silent<pos:position pos:line="12" pos:column="35"/></name></expr>)<pos:position pos:line="12" pos:column="36"/></condition><then pos:line="12" pos:column="36">
				<block type="pseudo"><return pos:line="13" pos:column="33">return <expr><operator pos:line="13" pos:column="40">-<pos:position pos:line="13" pos:column="41"/></operator><literal type="number" pos:line="13" pos:column="41">1<pos:position pos:line="13" pos:column="42"/></literal></expr>;<pos:position pos:line="13" pos:column="43"/></return></block></then></if>
			<if pos:line="14" pos:column="25">if <condition pos:line="14" pos:column="28">(<expr><literal type="number" pos:line="14" pos:column="29">10<pos:position pos:line="14" pos:column="31"/></literal> <operator pos:line="14" pos:column="32">&lt;<pos:position pos:line="14" pos:column="36"/></operator> <operator pos:line="14" pos:column="34">++<pos:position pos:line="14" pos:column="36"/></operator><name pos:line="14" pos:column="36">funny<pos:position pos:line="14" pos:column="41"/></name></expr>)<pos:position pos:line="14" pos:column="42"/></condition><then pos:line="14" pos:column="42"> <block pos:line="14" pos:column="43">{
				<expr_stmt><expr><call><name pos:line="15" pos:column="33">fprintf<pos:position pos:line="15" pos:column="40"/></name><argument_list pos:line="15" pos:column="40">(<argument><expr><name pos:line="15" pos:column="41">stderr<pos:position pos:line="15" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="49">"...\n"<pos:position pos:line="15" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="58"/></expr_stmt>
				<break pos:line="16" pos:column="33">break;<pos:position pos:line="16" pos:column="39"/></break>
			}<pos:position pos:line="17" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="18" pos:column="25">fprintf<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">stderr<pos:position pos:line="18" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="41">"%s: unmerged (%s)\n"<pos:position pos:line="18" pos:column="62"/></literal></expr></argument>,
				<argument><expr><name><name pos:line="19" pos:column="33">ce<pos:position pos:line="19" pos:column="35"/></name><operator pos:line="19" pos:column="35">-&gt;<pos:position pos:line="19" pos:column="40"/></operator><name pos:line="19" pos:column="37">name<pos:position pos:line="19" pos:column="41"/></name></name></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="43">oid_to_hex<pos:position pos:line="19" pos:column="53"/></name><argument_list pos:line="19" pos:column="53">(<argument><expr><operator pos:line="19" pos:column="54">&amp;<pos:position pos:line="19" pos:column="59"/></operator><name><name pos:line="19" pos:column="55">ce<pos:position pos:line="19" pos:column="57"/></name><operator pos:line="19" pos:column="57">-&gt;<pos:position pos:line="19" pos:column="62"/></operator><name pos:line="19" pos:column="59">oid<pos:position pos:line="19" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="65"/></expr_stmt>
		}<pos:position pos:line="20" pos:column="18"/></block></then></if>
	}<pos:position pos:line="21" pos:column="10"/></block></for>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">funny<pos:position pos:line="22" pos:column="18"/></name></expr>)<pos:position pos:line="22" pos:column="19"/></condition><then pos:line="22" pos:column="19">
		<block type="pseudo"><return pos:line="23" pos:column="17">return <expr><operator pos:line="23" pos:column="24">-<pos:position pos:line="23" pos:column="25"/></operator><literal type="number" pos:line="23" pos:column="25">1<pos:position pos:line="23" pos:column="26"/></literal></expr>;<pos:position pos:line="23" pos:column="27"/></return></block></then></if>

	<comment type="block" pos:line="25" pos:column="9">/* Also verify that the cache does not have path and path/file
	 * at the same time.  At this point we know the cache has only
	 * stage 0 entries.
	 */</comment>
	<expr_stmt><expr><name pos:line="29" pos:column="9">funny<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">=<pos:position pos:line="29" pos:column="16"/></operator> <literal type="number" pos:line="29" pos:column="17">0<pos:position pos:line="29" pos:column="18"/></literal></expr>;<pos:position pos:line="29" pos:column="19"/></expr_stmt>
	<for pos:line="30" pos:column="9">for <control pos:line="30" pos:column="13">(<init><expr><name pos:line="30" pos:column="14">i<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <literal type="number" pos:line="30" pos:column="18">0<pos:position pos:line="30" pos:column="19"/></literal></expr>;<pos:position pos:line="30" pos:column="20"/></init> <condition><expr><name pos:line="30" pos:column="21">i<pos:position pos:line="30" pos:column="22"/></name> <operator pos:line="30" pos:column="23">&lt;<pos:position pos:line="30" pos:column="27"/></operator> <name pos:line="30" pos:column="25">entries<pos:position pos:line="30" pos:column="32"/></name> <operator pos:line="30" pos:column="33">-<pos:position pos:line="30" pos:column="34"/></operator> <literal type="number" pos:line="30" pos:column="35">1<pos:position pos:line="30" pos:column="36"/></literal></expr>;<pos:position pos:line="30" pos:column="37"/></condition> <incr><expr><name pos:line="30" pos:column="38">i<pos:position pos:line="30" pos:column="39"/></name><operator pos:line="30" pos:column="39">++<pos:position pos:line="30" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="30" pos:column="42"/></control> <block pos:line="30" pos:column="43">{
		<comment type="block" pos:line="31" pos:column="17">/* path/file always comes after path because of the way
		 * the cache is sorted.  Also path can appear only once,
		 * which means conflicting one would immediately follow.
		 */</comment>
		<decl_stmt><decl><type><specifier pos:line="35" pos:column="17">const<pos:position pos:line="35" pos:column="22"/></specifier> <name pos:line="35" pos:column="23">char<pos:position pos:line="35" pos:column="27"/></name> <modifier pos:line="35" pos:column="28">*<pos:position pos:line="35" pos:column="29"/></modifier></type><name pos:line="35" pos:column="29">this_name<pos:position pos:line="35" pos:column="38"/></name> <init pos:line="35" pos:column="39">= <expr><name><name pos:line="35" pos:column="41">cache<pos:position pos:line="35" pos:column="46"/></name><index pos:line="35" pos:column="46">[<expr><name pos:line="35" pos:column="47">i<pos:position pos:line="35" pos:column="48"/></name></expr>]<pos:position pos:line="35" pos:column="49"/></index></name><operator pos:line="35" pos:column="49">-&gt;<pos:position pos:line="35" pos:column="54"/></operator><name pos:line="35" pos:column="51">name<pos:position pos:line="35" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="35" pos:column="56"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="36" pos:column="17">const<pos:position pos:line="36" pos:column="22"/></specifier> <name pos:line="36" pos:column="23">char<pos:position pos:line="36" pos:column="27"/></name> <modifier pos:line="36" pos:column="28">*<pos:position pos:line="36" pos:column="29"/></modifier></type><name pos:line="36" pos:column="29">next_name<pos:position pos:line="36" pos:column="38"/></name> <init pos:line="36" pos:column="39">= <expr><name><name pos:line="36" pos:column="41">cache<pos:position pos:line="36" pos:column="46"/></name><index pos:line="36" pos:column="46">[<expr><name pos:line="36" pos:column="47">i<pos:position pos:line="36" pos:column="48"/></name><operator pos:line="36" pos:column="48">+<pos:position pos:line="36" pos:column="49"/></operator><literal type="number" pos:line="36" pos:column="49">1<pos:position pos:line="36" pos:column="50"/></literal></expr>]<pos:position pos:line="36" pos:column="51"/></index></name><operator pos:line="36" pos:column="51">-&gt;<pos:position pos:line="36" pos:column="56"/></operator><name pos:line="36" pos:column="53">name<pos:position pos:line="36" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="36" pos:column="58"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="37" pos:column="17">int<pos:position pos:line="37" pos:column="20"/></name></type> <name pos:line="37" pos:column="21">this_len<pos:position pos:line="37" pos:column="29"/></name> <init pos:line="37" pos:column="30">= <expr><call><name pos:line="37" pos:column="32">strlen<pos:position pos:line="37" pos:column="38"/></name><argument_list pos:line="37" pos:column="38">(<argument><expr><name pos:line="37" pos:column="39">this_name<pos:position pos:line="37" pos:column="48"/></name></expr></argument>)<pos:position pos:line="37" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="50"/></decl_stmt>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">this_len<pos:position pos:line="38" pos:column="29"/></name> <operator pos:line="38" pos:column="30">&lt;<pos:position pos:line="38" pos:column="34"/></operator> <call><name pos:line="38" pos:column="32">strlen<pos:position pos:line="38" pos:column="38"/></name><argument_list pos:line="38" pos:column="38">(<argument><expr><name pos:line="38" pos:column="39">next_name<pos:position pos:line="38" pos:column="48"/></name></expr></argument>)<pos:position pos:line="38" pos:column="49"/></argument_list></call> <operator pos:line="38" pos:column="50">&amp;&amp;<pos:position pos:line="38" pos:column="60"/></operator>
		    <call><name pos:line="39" pos:column="21">strncmp<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">(<argument><expr><name pos:line="39" pos:column="29">this_name<pos:position pos:line="39" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="40">next_name<pos:position pos:line="39" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="51">this_len<pos:position pos:line="39" pos:column="59"/></name></expr></argument>)<pos:position pos:line="39" pos:column="60"/></argument_list></call> <operator pos:line="39" pos:column="61">==<pos:position pos:line="39" pos:column="63"/></operator> <literal type="number" pos:line="39" pos:column="64">0<pos:position pos:line="39" pos:column="65"/></literal> <operator pos:line="39" pos:column="66">&amp;&amp;<pos:position pos:line="39" pos:column="76"/></operator>
		    <name><name pos:line="40" pos:column="21">next_name<pos:position pos:line="40" pos:column="30"/></name><index pos:line="40" pos:column="30">[<expr><name pos:line="40" pos:column="31">this_len<pos:position pos:line="40" pos:column="39"/></name></expr>]<pos:position pos:line="40" pos:column="40"/></index></name> <operator pos:line="40" pos:column="41">==<pos:position pos:line="40" pos:column="43"/></operator> <literal type="char" pos:line="40" pos:column="44">'/'<pos:position pos:line="40" pos:column="47"/></literal></expr>)<pos:position pos:line="40" pos:column="48"/></condition><then pos:line="40" pos:column="48"> <block pos:line="40" pos:column="49">{
			<if pos:line="41" pos:column="25">if <condition pos:line="41" pos:column="28">(<expr><literal type="number" pos:line="41" pos:column="29">10<pos:position pos:line="41" pos:column="31"/></literal> <operator pos:line="41" pos:column="32">&lt;<pos:position pos:line="41" pos:column="36"/></operator> <operator pos:line="41" pos:column="34">++<pos:position pos:line="41" pos:column="36"/></operator><name pos:line="41" pos:column="36">funny<pos:position pos:line="41" pos:column="41"/></name></expr>)<pos:position pos:line="41" pos:column="42"/></condition><then pos:line="41" pos:column="42"> <block pos:line="41" pos:column="43">{
				<expr_stmt><expr><call><name pos:line="42" pos:column="33">fprintf<pos:position pos:line="42" pos:column="40"/></name><argument_list pos:line="42" pos:column="40">(<argument><expr><name pos:line="42" pos:column="41">stderr<pos:position pos:line="42" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="49">"...\n"<pos:position pos:line="42" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="58"/></expr_stmt>
				<break pos:line="43" pos:column="33">break;<pos:position pos:line="43" pos:column="39"/></break>
			}<pos:position pos:line="44" pos:column="26"/></block></then></if>
			<expr_stmt><expr><call><name pos:line="45" pos:column="25">fprintf<pos:position pos:line="45" pos:column="32"/></name><argument_list pos:line="45" pos:column="32">(<argument><expr><name pos:line="45" pos:column="33">stderr<pos:position pos:line="45" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="41">"You have both %s and %s\n"<pos:position pos:line="45" pos:column="68"/></literal></expr></argument>,
				<argument><expr><name pos:line="46" pos:column="33">this_name<pos:position pos:line="46" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="44">next_name<pos:position pos:line="46" pos:column="53"/></name></expr></argument>)<pos:position pos:line="46" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="47" pos:column="18"/></block></then></if>
	}<pos:position pos:line="48" pos:column="10"/></block></for>
	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name pos:line="49" pos:column="13">funny<pos:position pos:line="49" pos:column="18"/></name></expr>)<pos:position pos:line="49" pos:column="19"/></condition><then pos:line="49" pos:column="19">
		<block type="pseudo"><return pos:line="50" pos:column="17">return <expr><operator pos:line="50" pos:column="24">-<pos:position pos:line="50" pos:column="25"/></operator><literal type="number" pos:line="50" pos:column="25">1<pos:position pos:line="50" pos:column="26"/></literal></expr>;<pos:position pos:line="50" pos:column="27"/></return></block></then></if>
	<return pos:line="51" pos:column="9">return <expr><literal type="number" pos:line="51" pos:column="16">0<pos:position pos:line="51" pos:column="17"/></literal></expr>;<pos:position pos:line="51" pos:column="18"/></return>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
