<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5549_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">git_show_branch_config<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">var<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">value<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="71">void<pos:position pos:line="1" pos:column="75"/></name> <modifier pos:line="1" pos:column="76">*<pos:position pos:line="1" pos:column="77"/></modifier></type><name pos:line="1" pos:column="77">cb<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><operator pos:line="3" pos:column="13">!<pos:position pos:line="3" pos:column="14"/></operator><call><name pos:line="3" pos:column="14">strcmp<pos:position pos:line="3" pos:column="20"/></name><argument_list pos:line="3" pos:column="20">(<argument><expr><name pos:line="3" pos:column="21">var<pos:position pos:line="3" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="26">"showbranch.default"<pos:position pos:line="3" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="48"/></condition><then pos:line="3" pos:column="48"> <block pos:line="3" pos:column="49">{
		<if pos:line="4" pos:column="17">if <condition pos:line="4" pos:column="20">(<expr><operator pos:line="4" pos:column="21">!<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="22">value<pos:position pos:line="4" pos:column="27"/></name></expr>)<pos:position pos:line="4" pos:column="28"/></condition><then pos:line="4" pos:column="28">
			<block type="pseudo"><return pos:line="5" pos:column="25">return <expr><call><name pos:line="5" pos:column="32">config_error_nonbool<pos:position pos:line="5" pos:column="52"/></name><argument_list pos:line="5" pos:column="52">(<argument><expr><name pos:line="5" pos:column="53">var<pos:position pos:line="5" pos:column="56"/></name></expr></argument>)<pos:position pos:line="5" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="58"/></return></block></then></if>
		<comment type="block" pos:line="6" pos:column="17">/*
		 * default_arg is now passed to parse_options(), so we need to
		 * mimic the real argv a bit better.
		 */</comment>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><operator pos:line="10" pos:column="21">!<pos:position pos:line="10" pos:column="22"/></operator><name><name pos:line="10" pos:column="22">default_args<pos:position pos:line="10" pos:column="34"/></name><operator pos:line="10" pos:column="34">.<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="35">argc<pos:position pos:line="10" pos:column="39"/></name></name></expr>)<pos:position pos:line="10" pos:column="40"/></condition><then pos:line="10" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="25">argv_array_push<pos:position pos:line="11" pos:column="40"/></name><argument_list pos:line="11" pos:column="40">(<argument><expr><operator pos:line="11" pos:column="41">&amp;<pos:position pos:line="11" pos:column="46"/></operator><name pos:line="11" pos:column="42">default_args<pos:position pos:line="11" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="56">"show-branch"<pos:position pos:line="11" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="71"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">argv_array_push<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><operator pos:line="12" pos:column="33">&amp;<pos:position pos:line="12" pos:column="38"/></operator><name pos:line="12" pos:column="34">default_args<pos:position pos:line="12" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="48">value<pos:position pos:line="12" pos:column="53"/></name></expr></argument>)<pos:position pos:line="12" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="55"/></expr_stmt>
		<return pos:line="13" pos:column="17">return <expr><literal type="number" pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></literal></expr>;<pos:position pos:line="13" pos:column="26"/></return>
	}<pos:position pos:line="14" pos:column="10"/></block></then></if>

	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><operator pos:line="16" pos:column="13">!<pos:position pos:line="16" pos:column="14"/></operator><call><name pos:line="16" pos:column="14">strcmp<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><name pos:line="16" pos:column="21">var<pos:position pos:line="16" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="26">"color.showbranch"<pos:position pos:line="16" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="46"/></condition><then pos:line="16" pos:column="46"> <block pos:line="16" pos:column="47">{
		<expr_stmt><expr><name pos:line="17" pos:column="17">showbranch_use_color<pos:position pos:line="17" pos:column="37"/></name> <operator pos:line="17" pos:column="38">=<pos:position pos:line="17" pos:column="39"/></operator> <call><name pos:line="17" pos:column="40">git_config_colorbool<pos:position pos:line="17" pos:column="60"/></name><argument_list pos:line="17" pos:column="60">(<argument><expr><name pos:line="17" pos:column="61">var<pos:position pos:line="17" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="66">value<pos:position pos:line="17" pos:column="71"/></name></expr></argument>)<pos:position pos:line="17" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="73"/></expr_stmt>
		<return pos:line="18" pos:column="17">return <expr><literal type="number" pos:line="18" pos:column="24">0<pos:position pos:line="18" pos:column="25"/></literal></expr>;<pos:position pos:line="18" pos:column="26"/></return>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<return pos:line="21" pos:column="9">return <expr><call><name pos:line="21" pos:column="16">git_default_config<pos:position pos:line="21" pos:column="34"/></name><argument_list pos:line="21" pos:column="34">(<argument><expr><name pos:line="21" pos:column="35">var<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="40">value<pos:position pos:line="21" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="47">cb<pos:position pos:line="21" pos:column="49"/></name></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="51"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
