<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6046_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">read_index_info<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">nul_term_line<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="47"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">buf<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><name pos:line="3" pos:column="29">STRBUF_INIT<pos:position pos:line="3" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">uq<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name pos:line="4" pos:column="28">STRBUF_INIT<pos:position pos:line="4" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">strbuf_getline_fn<pos:position pos:line="5" pos:column="26"/></name></type> <name pos:line="5" pos:column="27">getline_fn<pos:position pos:line="5" pos:column="37"/></name></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>

	<expr_stmt><expr><name pos:line="7" pos:column="9">getline_fn<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">=<pos:position pos:line="7" pos:column="21"/></operator> <ternary><condition><expr><name pos:line="7" pos:column="22">nul_term_line<pos:position pos:line="7" pos:column="35"/></name></expr> ?<pos:position pos:line="7" pos:column="37"/></condition><then pos:line="7" pos:column="37"> <expr><name pos:line="7" pos:column="38">strbuf_getline_nul<pos:position pos:line="7" pos:column="56"/></name></expr> <pos:position pos:line="7" pos:column="57"/></then><else pos:line="7" pos:column="57">: <expr><name pos:line="7" pos:column="59">strbuf_getline_lf<pos:position pos:line="7" pos:column="76"/></name></expr></else></ternary></expr>;<pos:position pos:line="7" pos:column="77"/></expr_stmt>
	<while pos:line="8" pos:column="9">while <condition pos:line="8" pos:column="15">(<expr><call><name pos:line="8" pos:column="16">getline_fn<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><operator pos:line="8" pos:column="27">&amp;<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="28">buf<pos:position pos:line="8" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="33">stdin<pos:position pos:line="8" pos:column="38"/></name></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></call> <operator pos:line="8" pos:column="40">!=<pos:position pos:line="8" pos:column="42"/></operator> <name pos:line="8" pos:column="43">EOF<pos:position pos:line="8" pos:column="46"/></name></expr>)<pos:position pos:line="8" pos:column="47"/></condition> <block pos:line="8" pos:column="48">{
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">char<pos:position pos:line="9" pos:column="21"/></name> <modifier pos:line="9" pos:column="22">*<pos:position pos:line="9" pos:column="23"/></modifier></type><name pos:line="9" pos:column="23">ptr<pos:position pos:line="9" pos:column="26"/></name></decl>, <modifier pos:line="9" pos:column="28">*<pos:position pos:line="9" pos:column="29"/></modifier><decl><type ref="prev"/><name pos:line="9" pos:column="29">tab<pos:position pos:line="9" pos:column="32"/></name></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">char<pos:position pos:line="10" pos:column="21"/></name> <modifier pos:line="10" pos:column="22">*<pos:position pos:line="10" pos:column="23"/></modifier></type><name pos:line="10" pos:column="23">path_name<pos:position pos:line="10" pos:column="32"/></name></decl>;<pos:position pos:line="10" pos:column="33"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="11" pos:column="17">struct<pos:position pos:line="11" pos:column="23"/></name> <name pos:line="11" pos:column="24">object_id<pos:position pos:line="11" pos:column="33"/></name></name></type> <name pos:line="11" pos:column="34">oid<pos:position pos:line="11" pos:column="37"/></name></decl>;<pos:position pos:line="11" pos:column="38"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">unsigned<pos:position pos:line="12" pos:column="25"/></name> <name pos:line="12" pos:column="26">int<pos:position pos:line="12" pos:column="29"/></name></type> <name pos:line="12" pos:column="30">mode<pos:position pos:line="12" pos:column="34"/></name></decl>;<pos:position pos:line="12" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">unsigned<pos:position pos:line="13" pos:column="25"/></name> <name pos:line="13" pos:column="26">long<pos:position pos:line="13" pos:column="30"/></name></type> <name pos:line="13" pos:column="31">ul<pos:position pos:line="13" pos:column="33"/></name></decl>;<pos:position pos:line="13" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">int<pos:position pos:line="14" pos:column="20"/></name></type> <name pos:line="14" pos:column="21">stage<pos:position pos:line="14" pos:column="26"/></name></decl>;<pos:position pos:line="14" pos:column="27"/></decl_stmt>

		<comment type="block" pos:line="16" pos:column="17">/* This reads lines formatted in one of three formats:
		 *
		 * (1) mode         SP sha1          TAB path
		 * The first format is what "git apply --index-info"
		 * reports, and used to reconstruct a partial tree
		 * that is used for phony merge base tree when falling
		 * back on 3-way merge.
		 *
		 * (2) mode SP type SP sha1          TAB path
		 * The second format is to stuff "git ls-tree" output
		 * into the index file.
		 *
		 * (3) mode         SP sha1 SP stage TAB path
		 * This format is to put higher order stages into the
		 * index file and matches "git ls-files --stage" output.
		 */</comment>
		<expr_stmt><expr><name pos:line="32" pos:column="17">errno<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">=<pos:position pos:line="32" pos:column="24"/></operator> <literal type="number" pos:line="32" pos:column="25">0<pos:position pos:line="32" pos:column="26"/></literal></expr>;<pos:position pos:line="32" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="33" pos:column="17">ul<pos:position pos:line="33" pos:column="19"/></name> <operator pos:line="33" pos:column="20">=<pos:position pos:line="33" pos:column="21"/></operator> <call><name pos:line="33" pos:column="22">strtoul<pos:position pos:line="33" pos:column="29"/></name><argument_list pos:line="33" pos:column="29">(<argument><expr><name><name pos:line="33" pos:column="30">buf<pos:position pos:line="33" pos:column="33"/></name><operator pos:line="33" pos:column="33">.<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="34">buf<pos:position pos:line="33" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="39">&amp;<pos:position pos:line="33" pos:column="44"/></operator><name pos:line="33" pos:column="40">ptr<pos:position pos:line="33" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="45">8<pos:position pos:line="33" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="48"/></expr_stmt>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><name pos:line="34" pos:column="21">ptr<pos:position pos:line="34" pos:column="24"/></name> <operator pos:line="34" pos:column="25">==<pos:position pos:line="34" pos:column="27"/></operator> <name><name pos:line="34" pos:column="28">buf<pos:position pos:line="34" pos:column="31"/></name><operator pos:line="34" pos:column="31">.<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="32">buf<pos:position pos:line="34" pos:column="35"/></name></name> <operator pos:line="34" pos:column="36">||<pos:position pos:line="34" pos:column="38"/></operator> <operator pos:line="34" pos:column="39">*<pos:position pos:line="34" pos:column="40"/></operator><name pos:line="34" pos:column="40">ptr<pos:position pos:line="34" pos:column="43"/></name> <operator pos:line="34" pos:column="44">!=<pos:position pos:line="34" pos:column="46"/></operator> <literal type="char" pos:line="34" pos:column="47">' '<pos:position pos:line="34" pos:column="50"/></literal>
		    <operator pos:line="35" pos:column="21">||<pos:position pos:line="35" pos:column="23"/></operator> <name pos:line="35" pos:column="24">errno<pos:position pos:line="35" pos:column="29"/></name> <operator pos:line="35" pos:column="30">||<pos:position pos:line="35" pos:column="32"/></operator> <operator pos:line="35" pos:column="33">(<pos:position pos:line="35" pos:column="34"/></operator><name pos:line="35" pos:column="34">unsigned<pos:position pos:line="35" pos:column="42"/></name> <name pos:line="35" pos:column="43">int<pos:position pos:line="35" pos:column="46"/></name><operator pos:line="35" pos:column="46">)<pos:position pos:line="35" pos:column="47"/></operator> <name pos:line="35" pos:column="48">ul<pos:position pos:line="35" pos:column="50"/></name> <operator pos:line="35" pos:column="51">!=<pos:position pos:line="35" pos:column="53"/></operator> <name pos:line="35" pos:column="54">ul<pos:position pos:line="35" pos:column="56"/></name></expr>)<pos:position pos:line="35" pos:column="57"/></condition><then pos:line="35" pos:column="57">
			<block type="pseudo"><goto pos:line="36" pos:column="25">goto <name pos:line="36" pos:column="30">bad_line<pos:position pos:line="36" pos:column="38"/></name>;<pos:position pos:line="36" pos:column="39"/></goto></block></then></if>
		<expr_stmt><expr><name pos:line="37" pos:column="17">mode<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">=<pos:position pos:line="37" pos:column="23"/></operator> <name pos:line="37" pos:column="24">ul<pos:position pos:line="37" pos:column="26"/></name></expr>;<pos:position pos:line="37" pos:column="27"/></expr_stmt>

		<expr_stmt><expr><name pos:line="39" pos:column="17">tab<pos:position pos:line="39" pos:column="20"/></name> <operator pos:line="39" pos:column="21">=<pos:position pos:line="39" pos:column="22"/></operator> <call><name pos:line="39" pos:column="23">strchr<pos:position pos:line="39" pos:column="29"/></name><argument_list pos:line="39" pos:column="29">(<argument><expr><name pos:line="39" pos:column="30">ptr<pos:position pos:line="39" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="39" pos:column="35">'\t'<pos:position pos:line="39" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="41"/></expr_stmt>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><operator pos:line="40" pos:column="21">!<pos:position pos:line="40" pos:column="22"/></operator><name pos:line="40" pos:column="22">tab<pos:position pos:line="40" pos:column="25"/></name> <operator pos:line="40" pos:column="26">||<pos:position pos:line="40" pos:column="28"/></operator> <name pos:line="40" pos:column="29">tab<pos:position pos:line="40" pos:column="32"/></name> <operator pos:line="40" pos:column="33">-<pos:position pos:line="40" pos:column="34"/></operator> <name pos:line="40" pos:column="35">ptr<pos:position pos:line="40" pos:column="38"/></name> <operator pos:line="40" pos:column="39">&lt;<pos:position pos:line="40" pos:column="43"/></operator> <name pos:line="40" pos:column="41">GIT_SHA1_HEXSZ<pos:position pos:line="40" pos:column="55"/></name> <operator pos:line="40" pos:column="56">+<pos:position pos:line="40" pos:column="57"/></operator> <literal type="number" pos:line="40" pos:column="58">1<pos:position pos:line="40" pos:column="59"/></literal></expr>)<pos:position pos:line="40" pos:column="60"/></condition><then pos:line="40" pos:column="60">
			<block type="pseudo"><goto pos:line="41" pos:column="25">goto <name pos:line="41" pos:column="30">bad_line<pos:position pos:line="41" pos:column="38"/></name>;<pos:position pos:line="41" pos:column="39"/></goto></block></then></if>

		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name><name pos:line="43" pos:column="21">tab<pos:position pos:line="43" pos:column="24"/></name><index pos:line="43" pos:column="24">[<expr><operator pos:line="43" pos:column="25">-<pos:position pos:line="43" pos:column="26"/></operator><literal type="number" pos:line="43" pos:column="26">2<pos:position pos:line="43" pos:column="27"/></literal></expr>]<pos:position pos:line="43" pos:column="28"/></index></name> <operator pos:line="43" pos:column="29">==<pos:position pos:line="43" pos:column="31"/></operator> <literal type="char" pos:line="43" pos:column="32">' '<pos:position pos:line="43" pos:column="35"/></literal> <operator pos:line="43" pos:column="36">&amp;&amp;<pos:position pos:line="43" pos:column="46"/></operator> <literal type="char" pos:line="43" pos:column="39">'0'<pos:position pos:line="43" pos:column="42"/></literal> <operator pos:line="43" pos:column="43">&lt;=<pos:position pos:line="43" pos:column="48"/></operator> <name><name pos:line="43" pos:column="46">tab<pos:position pos:line="43" pos:column="49"/></name><index pos:line="43" pos:column="49">[<expr><operator pos:line="43" pos:column="50">-<pos:position pos:line="43" pos:column="51"/></operator><literal type="number" pos:line="43" pos:column="51">1<pos:position pos:line="43" pos:column="52"/></literal></expr>]<pos:position pos:line="43" pos:column="53"/></index></name> <operator pos:line="43" pos:column="54">&amp;&amp;<pos:position pos:line="43" pos:column="64"/></operator> <name><name pos:line="43" pos:column="57">tab<pos:position pos:line="43" pos:column="60"/></name><index pos:line="43" pos:column="60">[<expr><operator pos:line="43" pos:column="61">-<pos:position pos:line="43" pos:column="62"/></operator><literal type="number" pos:line="43" pos:column="62">1<pos:position pos:line="43" pos:column="63"/></literal></expr>]<pos:position pos:line="43" pos:column="64"/></index></name> <operator pos:line="43" pos:column="65">&lt;=<pos:position pos:line="43" pos:column="70"/></operator> <literal type="char" pos:line="43" pos:column="68">'3'<pos:position pos:line="43" pos:column="71"/></literal></expr>)<pos:position pos:line="43" pos:column="72"/></condition><then pos:line="43" pos:column="72"> <block pos:line="43" pos:column="73">{
			<expr_stmt><expr><name pos:line="44" pos:column="25">stage<pos:position pos:line="44" pos:column="30"/></name> <operator pos:line="44" pos:column="31">=<pos:position pos:line="44" pos:column="32"/></operator> <name><name pos:line="44" pos:column="33">tab<pos:position pos:line="44" pos:column="36"/></name><index pos:line="44" pos:column="36">[<expr><operator pos:line="44" pos:column="37">-<pos:position pos:line="44" pos:column="38"/></operator><literal type="number" pos:line="44" pos:column="38">1<pos:position pos:line="44" pos:column="39"/></literal></expr>]<pos:position pos:line="44" pos:column="40"/></index></name> <operator pos:line="44" pos:column="41">-<pos:position pos:line="44" pos:column="42"/></operator> <literal type="char" pos:line="44" pos:column="43">'0'<pos:position pos:line="44" pos:column="46"/></literal></expr>;<pos:position pos:line="44" pos:column="47"/></expr_stmt>
			<expr_stmt><expr><name pos:line="45" pos:column="25">ptr<pos:position pos:line="45" pos:column="28"/></name> <operator pos:line="45" pos:column="29">=<pos:position pos:line="45" pos:column="30"/></operator> <name pos:line="45" pos:column="31">tab<pos:position pos:line="45" pos:column="34"/></name> <operator pos:line="45" pos:column="35">+<pos:position pos:line="45" pos:column="36"/></operator> <literal type="number" pos:line="45" pos:column="37">1<pos:position pos:line="45" pos:column="38"/></literal></expr>;<pos:position pos:line="45" pos:column="39"/></expr_stmt> <comment type="block" pos:line="45" pos:column="40">/* point at the head of path */</comment>
			<expr_stmt><expr><name pos:line="46" pos:column="25">tab<pos:position pos:line="46" pos:column="28"/></name> <operator pos:line="46" pos:column="29">=<pos:position pos:line="46" pos:column="30"/></operator> <name pos:line="46" pos:column="31">tab<pos:position pos:line="46" pos:column="34"/></name> <operator pos:line="46" pos:column="35">-<pos:position pos:line="46" pos:column="36"/></operator> <literal type="number" pos:line="46" pos:column="37">2<pos:position pos:line="46" pos:column="38"/></literal></expr>;<pos:position pos:line="46" pos:column="39"/></expr_stmt> <comment type="block" pos:line="46" pos:column="40">/* point at tail of sha1 */</comment>
		}<pos:position pos:line="47" pos:column="18"/></block></then>
		<else pos:line="48" pos:column="17">else <block pos:line="48" pos:column="22">{
			<expr_stmt><expr><name pos:line="49" pos:column="25">stage<pos:position pos:line="49" pos:column="30"/></name> <operator pos:line="49" pos:column="31">=<pos:position pos:line="49" pos:column="32"/></operator> <literal type="number" pos:line="49" pos:column="33">0<pos:position pos:line="49" pos:column="34"/></literal></expr>;<pos:position pos:line="49" pos:column="35"/></expr_stmt>
			<expr_stmt><expr><name pos:line="50" pos:column="25">ptr<pos:position pos:line="50" pos:column="28"/></name> <operator pos:line="50" pos:column="29">=<pos:position pos:line="50" pos:column="30"/></operator> <name pos:line="50" pos:column="31">tab<pos:position pos:line="50" pos:column="34"/></name> <operator pos:line="50" pos:column="35">+<pos:position pos:line="50" pos:column="36"/></operator> <literal type="number" pos:line="50" pos:column="37">1<pos:position pos:line="50" pos:column="38"/></literal></expr>;<pos:position pos:line="50" pos:column="39"/></expr_stmt> <comment type="block" pos:line="50" pos:column="40">/* point at the head of path */</comment>
		}<pos:position pos:line="51" pos:column="18"/></block></else></if>

		<if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><call><name pos:line="53" pos:column="21">get_oid_hex<pos:position pos:line="53" pos:column="32"/></name><argument_list pos:line="53" pos:column="32">(<argument><expr><name pos:line="53" pos:column="33">tab<pos:position pos:line="53" pos:column="36"/></name> <operator pos:line="53" pos:column="37">-<pos:position pos:line="53" pos:column="38"/></operator> <name pos:line="53" pos:column="39">GIT_SHA1_HEXSZ<pos:position pos:line="53" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="55">&amp;<pos:position pos:line="53" pos:column="60"/></operator><name pos:line="53" pos:column="56">oid<pos:position pos:line="53" pos:column="59"/></name></expr></argument>)<pos:position pos:line="53" pos:column="60"/></argument_list></call> <operator pos:line="53" pos:column="61">||<pos:position pos:line="53" pos:column="63"/></operator>
			<name><name pos:line="54" pos:column="25">tab<pos:position pos:line="54" pos:column="28"/></name><index pos:line="54" pos:column="28">[<expr><operator pos:line="54" pos:column="29">-<pos:position pos:line="54" pos:column="30"/></operator><operator pos:line="54" pos:column="30">(<pos:position pos:line="54" pos:column="31"/></operator><name pos:line="54" pos:column="31">GIT_SHA1_HEXSZ<pos:position pos:line="54" pos:column="45"/></name> <operator pos:line="54" pos:column="46">+<pos:position pos:line="54" pos:column="47"/></operator> <literal type="number" pos:line="54" pos:column="48">1<pos:position pos:line="54" pos:column="49"/></literal><operator pos:line="54" pos:column="49">)<pos:position pos:line="54" pos:column="50"/></operator></expr>]<pos:position pos:line="54" pos:column="51"/></index></name> <operator pos:line="54" pos:column="52">!=<pos:position pos:line="54" pos:column="54"/></operator> <literal type="char" pos:line="54" pos:column="55">' '<pos:position pos:line="54" pos:column="58"/></literal></expr>)<pos:position pos:line="54" pos:column="59"/></condition><then pos:line="54" pos:column="59">
			<block type="pseudo"><goto pos:line="55" pos:column="25">goto <name pos:line="55" pos:column="30">bad_line<pos:position pos:line="55" pos:column="38"/></name>;<pos:position pos:line="55" pos:column="39"/></goto></block></then></if>

		<expr_stmt><expr><name pos:line="57" pos:column="17">path_name<pos:position pos:line="57" pos:column="26"/></name> <operator pos:line="57" pos:column="27">=<pos:position pos:line="57" pos:column="28"/></operator> <name pos:line="57" pos:column="29">ptr<pos:position pos:line="57" pos:column="32"/></name></expr>;<pos:position pos:line="57" pos:column="33"/></expr_stmt>
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><operator pos:line="58" pos:column="21">!<pos:position pos:line="58" pos:column="22"/></operator><name pos:line="58" pos:column="22">nul_term_line<pos:position pos:line="58" pos:column="35"/></name> <operator pos:line="58" pos:column="36">&amp;&amp;<pos:position pos:line="58" pos:column="46"/></operator> <name><name pos:line="58" pos:column="39">path_name<pos:position pos:line="58" pos:column="48"/></name><index pos:line="58" pos:column="48">[<expr><literal type="number" pos:line="58" pos:column="49">0<pos:position pos:line="58" pos:column="50"/></literal></expr>]<pos:position pos:line="58" pos:column="51"/></index></name> <operator pos:line="58" pos:column="52">==<pos:position pos:line="58" pos:column="54"/></operator> <literal type="char" pos:line="58" pos:column="55">'"'<pos:position pos:line="58" pos:column="58"/></literal></expr>)<pos:position pos:line="58" pos:column="59"/></condition><then pos:line="58" pos:column="59"> <block pos:line="58" pos:column="60">{
			<expr_stmt><expr><call><name pos:line="59" pos:column="25">strbuf_reset<pos:position pos:line="59" pos:column="37"/></name><argument_list pos:line="59" pos:column="37">(<argument><expr><operator pos:line="59" pos:column="38">&amp;<pos:position pos:line="59" pos:column="43"/></operator><name pos:line="59" pos:column="39">uq<pos:position pos:line="59" pos:column="41"/></name></expr></argument>)<pos:position pos:line="59" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="43"/></expr_stmt>
			<if pos:line="60" pos:column="25">if <condition pos:line="60" pos:column="28">(<expr><call><name pos:line="60" pos:column="29">unquote_c_style<pos:position pos:line="60" pos:column="44"/></name><argument_list pos:line="60" pos:column="44">(<argument><expr><operator pos:line="60" pos:column="45">&amp;<pos:position pos:line="60" pos:column="50"/></operator><name pos:line="60" pos:column="46">uq<pos:position pos:line="60" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="50">path_name<pos:position pos:line="60" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="61">NULL<pos:position pos:line="60" pos:column="65"/></name></expr></argument>)<pos:position pos:line="60" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="67"/></condition><then pos:line="60" pos:column="67"> <block pos:line="60" pos:column="68">{
				<expr_stmt><expr><call><name pos:line="61" pos:column="33">die<pos:position pos:line="61" pos:column="36"/></name><argument_list pos:line="61" pos:column="36">(<argument><expr><literal type="string" pos:line="61" pos:column="37">"git update-index: bad quoting of path name"<pos:position pos:line="61" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="83"/></expr_stmt>
			}<pos:position pos:line="62" pos:column="26"/></block></then></if>
			<expr_stmt><expr><name pos:line="63" pos:column="25">path_name<pos:position pos:line="63" pos:column="34"/></name> <operator pos:line="63" pos:column="35">=<pos:position pos:line="63" pos:column="36"/></operator> <name><name pos:line="63" pos:column="37">uq<pos:position pos:line="63" pos:column="39"/></name><operator pos:line="63" pos:column="39">.<pos:position pos:line="63" pos:column="40"/></operator><name pos:line="63" pos:column="40">buf<pos:position pos:line="63" pos:column="43"/></name></name></expr>;<pos:position pos:line="63" pos:column="44"/></expr_stmt>
		}<pos:position pos:line="64" pos:column="18"/></block></then></if>

		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><operator pos:line="66" pos:column="21">!<pos:position pos:line="66" pos:column="22"/></operator><call><name pos:line="66" pos:column="22">verify_path<pos:position pos:line="66" pos:column="33"/></name><argument_list pos:line="66" pos:column="33">(<argument><expr><name pos:line="66" pos:column="34">path_name<pos:position pos:line="66" pos:column="43"/></name></expr></argument>)<pos:position pos:line="66" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="45"/></condition><then pos:line="66" pos:column="45"> <block pos:line="66" pos:column="46">{
			<expr_stmt><expr><call><name pos:line="67" pos:column="25">fprintf<pos:position pos:line="67" pos:column="32"/></name><argument_list pos:line="67" pos:column="32">(<argument><expr><name pos:line="67" pos:column="33">stderr<pos:position pos:line="67" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="41">"Ignoring path %s\n"<pos:position pos:line="67" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="63">path_name<pos:position pos:line="67" pos:column="72"/></name></expr></argument>)<pos:position pos:line="67" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="74"/></expr_stmt>
			<continue pos:line="68" pos:column="25">continue;<pos:position pos:line="68" pos:column="34"/></continue>
		}<pos:position pos:line="69" pos:column="18"/></block></then></if>

		<if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><operator pos:line="71" pos:column="21">!<pos:position pos:line="71" pos:column="22"/></operator><name pos:line="71" pos:column="22">mode<pos:position pos:line="71" pos:column="26"/></name></expr>)<pos:position pos:line="71" pos:column="27"/></condition><then pos:line="71" pos:column="27"> <block pos:line="71" pos:column="28">{
			<comment type="block" pos:line="72" pos:column="25">/* mode == 0 means there is no such path -- remove */</comment>
			<if pos:line="73" pos:column="25">if <condition pos:line="73" pos:column="28">(<expr><call><name pos:line="73" pos:column="29">remove_file_from_cache<pos:position pos:line="73" pos:column="51"/></name><argument_list pos:line="73" pos:column="51">(<argument><expr><name pos:line="73" pos:column="52">path_name<pos:position pos:line="73" pos:column="61"/></name></expr></argument>)<pos:position pos:line="73" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="63"/></condition><then pos:line="73" pos:column="63">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="74" pos:column="33">die<pos:position pos:line="74" pos:column="36"/></name><argument_list pos:line="74" pos:column="36">(<argument><expr><literal type="string" pos:line="74" pos:column="37">"git update-index: unable to remove %s"<pos:position pos:line="74" pos:column="76"/></literal></expr></argument>,
				    <argument><expr><name pos:line="75" pos:column="37">ptr<pos:position pos:line="75" pos:column="40"/></name></expr></argument>)<pos:position pos:line="75" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="42"/></expr_stmt></block></then></if>
		}<pos:position pos:line="76" pos:column="18"/></block></then>
		<else pos:line="77" pos:column="17">else <block pos:line="77" pos:column="22">{
			<comment type="block" pos:line="78" pos:column="25">/* mode ' ' sha1 '\t' name
			 * ptr[-1] points at tab,
			 * ptr[-41] is at the beginning of sha1
			 */</comment>
			<expr_stmt><expr><name><name pos:line="82" pos:column="25">ptr<pos:position pos:line="82" pos:column="28"/></name><index pos:line="82" pos:column="28">[<expr><operator pos:line="82" pos:column="29">-<pos:position pos:line="82" pos:column="30"/></operator><operator pos:line="82" pos:column="30">(<pos:position pos:line="82" pos:column="31"/></operator><name pos:line="82" pos:column="31">GIT_SHA1_HEXSZ<pos:position pos:line="82" pos:column="45"/></name> <operator pos:line="82" pos:column="46">+<pos:position pos:line="82" pos:column="47"/></operator> <literal type="number" pos:line="82" pos:column="48">2<pos:position pos:line="82" pos:column="49"/></literal><operator pos:line="82" pos:column="49">)<pos:position pos:line="82" pos:column="50"/></operator></expr>]<pos:position pos:line="82" pos:column="51"/></index></name> <operator pos:line="82" pos:column="52">=<pos:position pos:line="82" pos:column="53"/></operator> <name><name pos:line="82" pos:column="54">ptr<pos:position pos:line="82" pos:column="57"/></name><index pos:line="82" pos:column="57">[<expr><operator pos:line="82" pos:column="58">-<pos:position pos:line="82" pos:column="59"/></operator><literal type="number" pos:line="82" pos:column="59">1<pos:position pos:line="82" pos:column="60"/></literal></expr>]<pos:position pos:line="82" pos:column="61"/></index></name> <operator pos:line="82" pos:column="62">=<pos:position pos:line="82" pos:column="63"/></operator> <literal type="number" pos:line="82" pos:column="64">0<pos:position pos:line="82" pos:column="65"/></literal></expr>;<pos:position pos:line="82" pos:column="66"/></expr_stmt>
			<if pos:line="83" pos:column="25">if <condition pos:line="83" pos:column="28">(<expr><call><name pos:line="83" pos:column="29">add_cacheinfo<pos:position pos:line="83" pos:column="42"/></name><argument_list pos:line="83" pos:column="42">(<argument><expr><name pos:line="83" pos:column="43">mode<pos:position pos:line="83" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="49">&amp;<pos:position pos:line="83" pos:column="54"/></operator><name pos:line="83" pos:column="50">oid<pos:position pos:line="83" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="55">path_name<pos:position pos:line="83" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="66">stage<pos:position pos:line="83" pos:column="71"/></name></expr></argument>)<pos:position pos:line="83" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="83" pos:column="73"/></condition><then pos:line="83" pos:column="73">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="84" pos:column="33">die<pos:position pos:line="84" pos:column="36"/></name><argument_list pos:line="84" pos:column="36">(<argument><expr><literal type="string" pos:line="84" pos:column="37">"git update-index: unable to update %s"<pos:position pos:line="84" pos:column="76"/></literal></expr></argument>,
				    <argument><expr><name pos:line="85" pos:column="37">path_name<pos:position pos:line="85" pos:column="46"/></name></expr></argument>)<pos:position pos:line="85" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="48"/></expr_stmt></block></then></if>
		}<pos:position pos:line="86" pos:column="18"/></block></else></if>
		<continue pos:line="87" pos:column="17">continue;<pos:position pos:line="87" pos:column="26"/></continue>

	<label><name pos:line="89" pos:column="9">bad_line<pos:position pos:line="89" pos:column="17"/></name>:<pos:position pos:line="89" pos:column="18"/></label>
		<expr_stmt><expr><call><name pos:line="90" pos:column="17">die<pos:position pos:line="90" pos:column="20"/></name><argument_list pos:line="90" pos:column="20">(<argument><expr><literal type="string" pos:line="90" pos:column="21">"malformed index info %s"<pos:position pos:line="90" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="48">buf<pos:position pos:line="90" pos:column="51"/></name><operator pos:line="90" pos:column="51">.<pos:position pos:line="90" pos:column="52"/></operator><name pos:line="90" pos:column="52">buf<pos:position pos:line="90" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="90" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="57"/></expr_stmt>
	}<pos:position pos:line="91" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="92" pos:column="9">strbuf_release<pos:position pos:line="92" pos:column="23"/></name><argument_list pos:line="92" pos:column="23">(<argument><expr><operator pos:line="92" pos:column="24">&amp;<pos:position pos:line="92" pos:column="29"/></operator><name pos:line="92" pos:column="25">buf<pos:position pos:line="92" pos:column="28"/></name></expr></argument>)<pos:position pos:line="92" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="93" pos:column="9">strbuf_release<pos:position pos:line="93" pos:column="23"/></name><argument_list pos:line="93" pos:column="23">(<argument><expr><operator pos:line="93" pos:column="24">&amp;<pos:position pos:line="93" pos:column="29"/></operator><name pos:line="93" pos:column="25">uq<pos:position pos:line="93" pos:column="27"/></name></expr></argument>)<pos:position pos:line="93" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="29"/></expr_stmt>
}<pos:position pos:line="94" pos:column="2"/></block></function></unit>
