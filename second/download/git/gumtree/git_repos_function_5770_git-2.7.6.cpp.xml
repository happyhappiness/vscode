<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5770_git-2.7.6.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">create_symref<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">ref_target<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">refs_heads_master<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
		  <parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">logmsg<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">lockpath<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><name pos:line="4" pos:column="26">NULL<pos:position pos:line="4" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">ref<pos:position pos:line="5" pos:column="17"/></name><index pos:line="5" pos:column="17">[<expr><literal type="number" pos:line="5" pos:column="18">1000<pos:position pos:line="5" pos:column="22"/></literal></expr>]<pos:position pos:line="5" pos:column="23"/></index></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">fd<pos:position pos:line="6" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="17">len<pos:position pos:line="6" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="22">written<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">git_HEAD<pos:position pos:line="7" pos:column="23"/></name> <init pos:line="7" pos:column="24">= <expr><call><name pos:line="7" pos:column="26">git_pathdup<pos:position pos:line="7" pos:column="37"/></name><argument_list pos:line="7" pos:column="37">(<argument><expr><literal type="string" pos:line="7" pos:column="38">"%s"<pos:position pos:line="7" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="44">ref_target<pos:position pos:line="7" pos:column="54"/></name></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="56"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">unsigned<pos:position pos:line="8" pos:column="17"/></name> <name pos:line="8" pos:column="18">char<pos:position pos:line="8" pos:column="22"/></name></type> <name><name pos:line="8" pos:column="23">old_sha1<pos:position pos:line="8" pos:column="31"/></name><index pos:line="8" pos:column="31">[<expr><literal type="number" pos:line="8" pos:column="32">20<pos:position pos:line="8" pos:column="34"/></literal></expr>]<pos:position pos:line="8" pos:column="35"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="8" pos:column="37">new_sha1<pos:position pos:line="8" pos:column="45"/></name><index pos:line="8" pos:column="45">[<expr><literal type="number" pos:line="8" pos:column="46">20<pos:position pos:line="8" pos:column="48"/></literal></expr>]<pos:position pos:line="8" pos:column="49"/></index></name></decl>;<pos:position pos:line="8" pos:column="50"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">strbuf<pos:position pos:line="9" pos:column="22"/></name></name></type> <name pos:line="9" pos:column="23">err<pos:position pos:line="9" pos:column="26"/></name> <init pos:line="9" pos:column="27">= <expr><name pos:line="9" pos:column="29">STRBUF_INIT<pos:position pos:line="9" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="41"/></decl_stmt>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">logmsg<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">&amp;&amp;<pos:position pos:line="11" pos:column="30"/></operator> <call><name pos:line="11" pos:column="23">read_ref<pos:position pos:line="11" pos:column="31"/></name><argument_list pos:line="11" pos:column="31">(<argument><expr><name pos:line="11" pos:column="32">ref_target<pos:position pos:line="11" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="44">old_sha1<pos:position pos:line="11" pos:column="52"/></name></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="54"/></condition><then pos:line="11" pos:column="54">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="17">hashclr<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">(<argument><expr><name pos:line="12" pos:column="25">old_sha1<pos:position pos:line="12" pos:column="33"/></name></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt></block></then></if>

	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><call><name pos:line="14" pos:column="13">safe_create_leading_directories<pos:position pos:line="14" pos:column="44"/></name><argument_list pos:line="14" pos:column="44">(<argument><expr><name pos:line="14" pos:column="45">git_HEAD<pos:position pos:line="14" pos:column="53"/></name></expr></argument>)<pos:position pos:line="14" pos:column="54"/></argument_list></call> <operator pos:line="14" pos:column="55">&lt;<pos:position pos:line="14" pos:column="59"/></operator> <literal type="number" pos:line="14" pos:column="57">0<pos:position pos:line="14" pos:column="58"/></literal></expr>)<pos:position pos:line="14" pos:column="59"/></condition><then pos:line="14" pos:column="59">
		<block type="pseudo"><return pos:line="15" pos:column="17">return <expr><call><name pos:line="15" pos:column="24">error<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><literal type="string" pos:line="15" pos:column="30">"unable to create directory for %s"<pos:position pos:line="15" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="67">git_HEAD<pos:position pos:line="15" pos:column="75"/></name></expr></argument>)<pos:position pos:line="15" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="77"/></return></block></then></if>

<cpp:ifndef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifndef<pos:position pos:line="17" pos:column="8"/></cpp:directive> <name pos:line="17" pos:column="9">NO_SYMLINK_HEAD<pos:position pos:line="17" pos:column="24"/></name></cpp:ifndef>
	<if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">prefer_symlink_refs<pos:position pos:line="18" pos:column="32"/></name></expr>)<pos:position pos:line="18" pos:column="33"/></condition><then pos:line="18" pos:column="33"> <block pos:line="18" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">unlink<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><name pos:line="19" pos:column="24">git_HEAD<pos:position pos:line="19" pos:column="32"/></name></expr></argument>)<pos:position pos:line="19" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="34"/></expr_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><operator pos:line="20" pos:column="21">!<pos:position pos:line="20" pos:column="22"/></operator><call><name pos:line="20" pos:column="22">symlink<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">refs_heads_master<pos:position pos:line="20" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="49">git_HEAD<pos:position pos:line="20" pos:column="57"/></name></expr></argument>)<pos:position pos:line="20" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="59"/></condition><then pos:line="20" pos:column="59">
			<block type="pseudo"><goto pos:line="21" pos:column="25">goto <name pos:line="21" pos:column="30">done<pos:position pos:line="21" pos:column="34"/></name>;<pos:position pos:line="21" pos:column="35"/></goto></block></then></if>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">fprintf<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><name pos:line="22" pos:column="25">stderr<pos:position pos:line="22" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="33">"no symlink - falling back to symbolic ref\n"<pos:position pos:line="22" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="80"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>

	<expr_stmt><expr><name pos:line="26" pos:column="9">len<pos:position pos:line="26" pos:column="12"/></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <call><name pos:line="26" pos:column="15">snprintf<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><name pos:line="26" pos:column="24">ref<pos:position pos:line="26" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="29">sizeof<argument_list pos:line="26" pos:column="35">(<argument><expr><name pos:line="26" pos:column="36">ref<pos:position pos:line="26" pos:column="39"/></name></expr></argument>)<pos:position pos:line="26" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="42">"ref: %s\n"<pos:position pos:line="26" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="55">refs_heads_master<pos:position pos:line="26" pos:column="72"/></name></expr></argument>)<pos:position pos:line="26" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="74"/></expr_stmt>
	<if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><sizeof pos:line="27" pos:column="13">sizeof<argument_list pos:line="27" pos:column="19">(<argument><expr><name pos:line="27" pos:column="20">ref<pos:position pos:line="27" pos:column="23"/></name></expr></argument>)<pos:position pos:line="27" pos:column="24"/></argument_list></sizeof> <operator pos:line="27" pos:column="25">&lt;=<pos:position pos:line="27" pos:column="30"/></operator> <name pos:line="27" pos:column="28">len<pos:position pos:line="27" pos:column="31"/></name></expr>)<pos:position pos:line="27" pos:column="32"/></condition><then pos:line="27" pos:column="32"> <block pos:line="27" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">error<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><literal type="string" pos:line="28" pos:column="23">"refname too long: %s"<pos:position pos:line="28" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="47">refs_heads_master<pos:position pos:line="28" pos:column="64"/></name></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="66"/></expr_stmt>
		<goto pos:line="29" pos:column="17">goto <name pos:line="29" pos:column="22">error_free_return<pos:position pos:line="29" pos:column="39"/></name>;<pos:position pos:line="29" pos:column="40"/></goto>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="31" pos:column="9">lockpath<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">=<pos:position pos:line="31" pos:column="19"/></operator> <call><name pos:line="31" pos:column="20">mkpathdup<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><literal type="string" pos:line="31" pos:column="30">"%s.lock"<pos:position pos:line="31" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="41">git_HEAD<pos:position pos:line="31" pos:column="49"/></name></expr></argument>)<pos:position pos:line="31" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><name pos:line="32" pos:column="9">fd<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <call><name pos:line="32" pos:column="14">open<pos:position pos:line="32" pos:column="18"/></name><argument_list pos:line="32" pos:column="18">(<argument><expr><name pos:line="32" pos:column="19">lockpath<pos:position pos:line="32" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="29">O_CREAT<pos:position pos:line="32" pos:column="36"/></name> <operator pos:line="32" pos:column="37">|<pos:position pos:line="32" pos:column="38"/></operator> <name pos:line="32" pos:column="39">O_EXCL<pos:position pos:line="32" pos:column="45"/></name> <operator pos:line="32" pos:column="46">|<pos:position pos:line="32" pos:column="47"/></operator> <name pos:line="32" pos:column="48">O_WRONLY<pos:position pos:line="32" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="58">0666<pos:position pos:line="32" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="64"/></expr_stmt>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name pos:line="33" pos:column="13">fd<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">&lt;<pos:position pos:line="33" pos:column="20"/></operator> <literal type="number" pos:line="33" pos:column="18">0<pos:position pos:line="33" pos:column="19"/></literal></expr>)<pos:position pos:line="33" pos:column="20"/></condition><then pos:line="33" pos:column="20"> <block pos:line="33" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="34" pos:column="17">error<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><literal type="string" pos:line="34" pos:column="23">"Unable to open %s for writing"<pos:position pos:line="34" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="56">lockpath<pos:position pos:line="34" pos:column="64"/></name></expr></argument>)<pos:position pos:line="34" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="66"/></expr_stmt>
		<goto pos:line="35" pos:column="17">goto <name pos:line="35" pos:column="22">error_free_return<pos:position pos:line="35" pos:column="39"/></name>;<pos:position pos:line="35" pos:column="40"/></goto>
	}<pos:position pos:line="36" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="37" pos:column="9">written<pos:position pos:line="37" pos:column="16"/></name> <operator pos:line="37" pos:column="17">=<pos:position pos:line="37" pos:column="18"/></operator> <call><name pos:line="37" pos:column="19">write_in_full<pos:position pos:line="37" pos:column="32"/></name><argument_list pos:line="37" pos:column="32">(<argument><expr><name pos:line="37" pos:column="33">fd<pos:position pos:line="37" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="37">ref<pos:position pos:line="37" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="42">len<pos:position pos:line="37" pos:column="45"/></name></expr></argument>)<pos:position pos:line="37" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="47"/></expr_stmt>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">close<pos:position pos:line="38" pos:column="18"/></name><argument_list pos:line="38" pos:column="18">(<argument><expr><name pos:line="38" pos:column="19">fd<pos:position pos:line="38" pos:column="21"/></name></expr></argument>)<pos:position pos:line="38" pos:column="22"/></argument_list></call> <operator pos:line="38" pos:column="23">!=<pos:position pos:line="38" pos:column="25"/></operator> <literal type="number" pos:line="38" pos:column="26">0<pos:position pos:line="38" pos:column="27"/></literal> <operator pos:line="38" pos:column="28">||<pos:position pos:line="38" pos:column="30"/></operator> <name pos:line="38" pos:column="31">written<pos:position pos:line="38" pos:column="38"/></name> <operator pos:line="38" pos:column="39">!=<pos:position pos:line="38" pos:column="41"/></operator> <name pos:line="38" pos:column="42">len<pos:position pos:line="38" pos:column="45"/></name></expr>)<pos:position pos:line="38" pos:column="46"/></condition><then pos:line="38" pos:column="46"> <block pos:line="38" pos:column="47">{
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">error<pos:position pos:line="39" pos:column="22"/></name><argument_list pos:line="39" pos:column="22">(<argument><expr><literal type="string" pos:line="39" pos:column="23">"Unable to write to %s"<pos:position pos:line="39" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="48">lockpath<pos:position pos:line="39" pos:column="56"/></name></expr></argument>)<pos:position pos:line="39" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="58"/></expr_stmt>
		<goto pos:line="40" pos:column="17">goto <name pos:line="40" pos:column="22">error_unlink_return<pos:position pos:line="40" pos:column="41"/></name>;<pos:position pos:line="40" pos:column="42"/></goto>
	}<pos:position pos:line="41" pos:column="10"/></block></then></if>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><call><name pos:line="42" pos:column="13">rename<pos:position pos:line="42" pos:column="19"/></name><argument_list pos:line="42" pos:column="19">(<argument><expr><name pos:line="42" pos:column="20">lockpath<pos:position pos:line="42" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="30">git_HEAD<pos:position pos:line="42" pos:column="38"/></name></expr></argument>)<pos:position pos:line="42" pos:column="39"/></argument_list></call> <operator pos:line="42" pos:column="40">&lt;<pos:position pos:line="42" pos:column="44"/></operator> <literal type="number" pos:line="42" pos:column="42">0<pos:position pos:line="42" pos:column="43"/></literal></expr>)<pos:position pos:line="42" pos:column="44"/></condition><then pos:line="42" pos:column="44"> <block pos:line="42" pos:column="45">{
		<expr_stmt><expr><call><name pos:line="43" pos:column="17">error<pos:position pos:line="43" pos:column="22"/></name><argument_list pos:line="43" pos:column="22">(<argument><expr><literal type="string" pos:line="43" pos:column="23">"Unable to create %s"<pos:position pos:line="43" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="46">git_HEAD<pos:position pos:line="43" pos:column="54"/></name></expr></argument>)<pos:position pos:line="43" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="56"/></expr_stmt>
		<goto pos:line="44" pos:column="17">goto <name pos:line="44" pos:column="22">error_unlink_return<pos:position pos:line="44" pos:column="41"/></name>;<pos:position pos:line="44" pos:column="42"/></goto>
	}<pos:position pos:line="45" pos:column="10"/></block></then></if>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><call><name pos:line="46" pos:column="13">adjust_shared_perm<pos:position pos:line="46" pos:column="31"/></name><argument_list pos:line="46" pos:column="31">(<argument><expr><name pos:line="46" pos:column="32">git_HEAD<pos:position pos:line="46" pos:column="40"/></name></expr></argument>)<pos:position pos:line="46" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="42"/></condition><then pos:line="46" pos:column="42"> <block pos:line="46" pos:column="43">{
		<expr_stmt><expr><call><name pos:line="47" pos:column="17">error<pos:position pos:line="47" pos:column="22"/></name><argument_list pos:line="47" pos:column="22">(<argument><expr><literal type="string" pos:line="47" pos:column="23">"Unable to fix permissions on %s"<pos:position pos:line="47" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="58">lockpath<pos:position pos:line="47" pos:column="66"/></name></expr></argument>)<pos:position pos:line="47" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="68"/></expr_stmt>
	<label><name pos:line="48" pos:column="9">error_unlink_return<pos:position pos:line="48" pos:column="28"/></name>:<pos:position pos:line="48" pos:column="29"/></label>
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">unlink_or_warn<pos:position pos:line="49" pos:column="31"/></name><argument_list pos:line="49" pos:column="31">(<argument><expr><name pos:line="49" pos:column="32">lockpath<pos:position pos:line="49" pos:column="40"/></name></expr></argument>)<pos:position pos:line="49" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="42"/></expr_stmt>
	<label><name pos:line="50" pos:column="9">error_free_return<pos:position pos:line="50" pos:column="26"/></name>:<pos:position pos:line="50" pos:column="27"/></label>
		<expr_stmt><expr><call><name pos:line="51" pos:column="17">free<pos:position pos:line="51" pos:column="21"/></name><argument_list pos:line="51" pos:column="21">(<argument><expr><name pos:line="51" pos:column="22">lockpath<pos:position pos:line="51" pos:column="30"/></name></expr></argument>)<pos:position pos:line="51" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="52" pos:column="17">free<pos:position pos:line="52" pos:column="21"/></name><argument_list pos:line="52" pos:column="21">(<argument><expr><name pos:line="52" pos:column="22">git_HEAD<pos:position pos:line="52" pos:column="30"/></name></expr></argument>)<pos:position pos:line="52" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="32"/></expr_stmt>
		<return pos:line="53" pos:column="17">return <expr><operator pos:line="53" pos:column="24">-<pos:position pos:line="53" pos:column="25"/></operator><literal type="number" pos:line="53" pos:column="25">1<pos:position pos:line="53" pos:column="26"/></literal></expr>;<pos:position pos:line="53" pos:column="27"/></return>
	}<pos:position pos:line="54" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="55" pos:column="9">free<pos:position pos:line="55" pos:column="13"/></name><argument_list pos:line="55" pos:column="13">(<argument><expr><name pos:line="55" pos:column="14">lockpath<pos:position pos:line="55" pos:column="22"/></name></expr></argument>)<pos:position pos:line="55" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="24"/></expr_stmt>

<cpp:ifndef pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">ifndef<pos:position pos:line="57" pos:column="8"/></cpp:directive> <name pos:line="57" pos:column="9">NO_SYMLINK_HEAD<pos:position pos:line="57" pos:column="24"/></name></cpp:ifndef>
	<label><name pos:line="58" pos:column="9">done<pos:position pos:line="58" pos:column="13"/></name>:<pos:position pos:line="58" pos:column="14"/></label>
<cpp:endif pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">endif<pos:position pos:line="59" pos:column="7"/></cpp:directive></cpp:endif>
	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><name pos:line="60" pos:column="13">logmsg<pos:position pos:line="60" pos:column="19"/></name> <operator pos:line="60" pos:column="20">&amp;&amp;<pos:position pos:line="60" pos:column="30"/></operator> <operator pos:line="60" pos:column="23">!<pos:position pos:line="60" pos:column="24"/></operator><call><name pos:line="60" pos:column="24">read_ref<pos:position pos:line="60" pos:column="32"/></name><argument_list pos:line="60" pos:column="32">(<argument><expr><name pos:line="60" pos:column="33">refs_heads_master<pos:position pos:line="60" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="52">new_sha1<pos:position pos:line="60" pos:column="60"/></name></expr></argument>)<pos:position pos:line="60" pos:column="61"/></argument_list></call> <operator pos:line="60" pos:column="62">&amp;&amp;<pos:position pos:line="60" pos:column="72"/></operator>
		<call><name pos:line="61" pos:column="17">log_ref_write<pos:position pos:line="61" pos:column="30"/></name><argument_list pos:line="61" pos:column="30">(<argument><expr><name pos:line="61" pos:column="31">ref_target<pos:position pos:line="61" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="43">old_sha1<pos:position pos:line="61" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="53">new_sha1<pos:position pos:line="61" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="63">logmsg<pos:position pos:line="61" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="71">0<pos:position pos:line="61" pos:column="72"/></literal></expr></argument>, <argument><expr><operator pos:line="61" pos:column="74">&amp;<pos:position pos:line="61" pos:column="79"/></operator><name pos:line="61" pos:column="75">err<pos:position pos:line="61" pos:column="78"/></name></expr></argument>)<pos:position pos:line="61" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="80"/></condition><then pos:line="61" pos:column="80"> <block pos:line="61" pos:column="81">{
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">error<pos:position pos:line="62" pos:column="22"/></name><argument_list pos:line="62" pos:column="22">(<argument><expr><literal type="string" pos:line="62" pos:column="23">"%s"<pos:position pos:line="62" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="29">err<pos:position pos:line="62" pos:column="32"/></name><operator pos:line="62" pos:column="32">.<pos:position pos:line="62" pos:column="33"/></operator><name pos:line="62" pos:column="33">buf<pos:position pos:line="62" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">strbuf_release<pos:position pos:line="63" pos:column="31"/></name><argument_list pos:line="63" pos:column="31">(<argument><expr><operator pos:line="63" pos:column="32">&amp;<pos:position pos:line="63" pos:column="37"/></operator><name pos:line="63" pos:column="33">err<pos:position pos:line="63" pos:column="36"/></name></expr></argument>)<pos:position pos:line="63" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="64" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="66" pos:column="9">free<pos:position pos:line="66" pos:column="13"/></name><argument_list pos:line="66" pos:column="13">(<argument><expr><name pos:line="66" pos:column="14">git_HEAD<pos:position pos:line="66" pos:column="22"/></name></expr></argument>)<pos:position pos:line="66" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="24"/></expr_stmt>
	<return pos:line="67" pos:column="9">return <expr><literal type="number" pos:line="67" pos:column="16">0<pos:position pos:line="67" pos:column="17"/></literal></expr>;<pos:position pos:line="67" pos:column="18"/></return>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
