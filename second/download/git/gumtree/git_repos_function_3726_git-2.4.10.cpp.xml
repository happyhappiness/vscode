<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3726_git-2.4.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">note_tree_remove<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">notes_tree<pos:position pos:line="1" pos:column="47"/></name></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">t<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="2" pos:column="17">struct<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">int_node<pos:position pos:line="2" pos:column="32"/></name></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">tree<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">unsigned<pos:position pos:line="2" pos:column="48"/></name> <name pos:line="2" pos:column="49">char<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">n<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="3" pos:column="17">struct<pos:position pos:line="3" pos:column="23"/></name> <name pos:line="3" pos:column="24">leaf_node<pos:position pos:line="3" pos:column="33"/></name></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">entry<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="41"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">leaf_node<pos:position pos:line="5" pos:column="25"/></name></name> <modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier></type><name pos:line="5" pos:column="27">l<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">int_node<pos:position pos:line="6" pos:column="24"/></name></name> <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier></type><name><name pos:line="6" pos:column="26">parent_stack<pos:position pos:line="6" pos:column="38"/></name><index pos:line="6" pos:column="38">[<expr><literal type="number" pos:line="6" pos:column="39">20<pos:position pos:line="6" pos:column="41"/></literal></expr>]<pos:position pos:line="6" pos:column="42"/></index></name></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">char<pos:position pos:line="7" pos:column="22"/></name></type> <name pos:line="7" pos:column="23">i<pos:position pos:line="7" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="26">j<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">void<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier><modifier pos:line="8" pos:column="15">*<pos:position pos:line="8" pos:column="16"/></modifier></type><name pos:line="8" pos:column="16">p<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">= <expr><call><name pos:line="8" pos:column="20">note_tree_search<pos:position pos:line="8" pos:column="36"/></name><argument_list pos:line="8" pos:column="36">(<argument><expr><name pos:line="8" pos:column="37">t<pos:position pos:line="8" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="40">&amp;<pos:position pos:line="8" pos:column="45"/></operator><name pos:line="8" pos:column="41">tree<pos:position pos:line="8" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="47">&amp;<pos:position pos:line="8" pos:column="52"/></operator><name pos:line="8" pos:column="48">n<pos:position pos:line="8" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="51">entry<pos:position pos:line="8" pos:column="56"/></name><operator pos:line="8" pos:column="56">-&gt;<pos:position pos:line="8" pos:column="61"/></operator><name pos:line="8" pos:column="58">key_sha1<pos:position pos:line="8" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="68"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">assert<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><call><name pos:line="10" pos:column="16">GET_PTR_TYPE<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><name pos:line="10" pos:column="29">entry<pos:position pos:line="10" pos:column="34"/></name></expr></argument>)<pos:position pos:line="10" pos:column="35"/></argument_list></call> <operator pos:line="10" pos:column="36">==<pos:position pos:line="10" pos:column="38"/></operator> <literal type="number" pos:line="10" pos:column="39">0<pos:position pos:line="10" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="42"/></expr_stmt> <comment type="block" pos:line="10" pos:column="43">/* no type bits set */</comment>
	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">GET_PTR_TYPE<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><operator pos:line="11" pos:column="26">*<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="27">p<pos:position pos:line="11" pos:column="28"/></name></expr></argument>)<pos:position pos:line="11" pos:column="29"/></argument_list></call> <operator pos:line="11" pos:column="30">!=<pos:position pos:line="11" pos:column="32"/></operator> <name pos:line="11" pos:column="33">PTR_TYPE_NOTE<pos:position pos:line="11" pos:column="46"/></name></expr>)<pos:position pos:line="11" pos:column="47"/></condition><then pos:line="11" pos:column="47">
		<block type="pseudo"><return pos:line="12" pos:column="17">return;<pos:position pos:line="12" pos:column="24"/></return></block></then></if> <comment type="block" pos:line="12" pos:column="25">/* type mismatch, nothing to remove */</comment>
	<expr_stmt><expr><name pos:line="13" pos:column="9">l<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <operator pos:line="13" pos:column="13">(<pos:position pos:line="13" pos:column="14"/></operator>struct <name pos:line="13" pos:column="21">leaf_node<pos:position pos:line="13" pos:column="30"/></name> <operator pos:line="13" pos:column="31">*<pos:position pos:line="13" pos:column="32"/></operator><operator pos:line="13" pos:column="32">)<pos:position pos:line="13" pos:column="33"/></operator> <call><name pos:line="13" pos:column="34">CLR_PTR_TYPE<pos:position pos:line="13" pos:column="46"/></name><argument_list pos:line="13" pos:column="46">(<argument><expr><operator pos:line="13" pos:column="47">*<pos:position pos:line="13" pos:column="48"/></operator><name pos:line="13" pos:column="48">p<pos:position pos:line="13" pos:column="49"/></name></expr></argument>)<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="51"/></expr_stmt>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><call><name pos:line="14" pos:column="13">hashcmp<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name><name pos:line="14" pos:column="21">l<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">-&gt;<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="24">key_sha1<pos:position pos:line="14" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="34">entry<pos:position pos:line="14" pos:column="39"/></name><operator pos:line="14" pos:column="39">-&gt;<pos:position pos:line="14" pos:column="44"/></operator><name pos:line="14" pos:column="41">key_sha1<pos:position pos:line="14" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="51"/></condition><then pos:line="14" pos:column="51">
		<block type="pseudo"><return pos:line="15" pos:column="17">return;<pos:position pos:line="15" pos:column="24"/></return></block></then></if> <comment type="block" pos:line="15" pos:column="25">/* key mismatch, nothing to remove */</comment>

	<comment type="block" pos:line="17" pos:column="9">/* we have found a matching entry */</comment>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">hashcpy<pos:position pos:line="18" pos:column="16"/></name><argument_list pos:line="18" pos:column="16">(<argument><expr><name><name pos:line="18" pos:column="17">entry<pos:position pos:line="18" pos:column="22"/></name><operator pos:line="18" pos:column="22">-&gt;<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="24">val_sha1<pos:position pos:line="18" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="34">l<pos:position pos:line="18" pos:column="35"/></name><operator pos:line="18" pos:column="35">-&gt;<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="37">val_sha1<pos:position pos:line="18" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">free<pos:position pos:line="19" pos:column="13"/></name><argument_list pos:line="19" pos:column="13">(<argument><expr><name pos:line="19" pos:column="14">l<pos:position pos:line="19" pos:column="15"/></name></expr></argument>)<pos:position pos:line="19" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="17"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="20" pos:column="9">*<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">p<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <call><name pos:line="20" pos:column="14">SET_PTR_TYPE<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">(<argument><expr><name pos:line="20" pos:column="27">NULL<pos:position pos:line="20" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="33">PTR_TYPE_NULL<pos:position pos:line="20" pos:column="46"/></name></expr></argument>)<pos:position pos:line="20" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="48"/></expr_stmt>

	<comment type="block" pos:line="22" pos:column="9">/* consolidate this tree level, and parent levels, if possible */</comment>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">!<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">n<pos:position pos:line="23" pos:column="15"/></name></expr>)<pos:position pos:line="23" pos:column="16"/></condition><then pos:line="23" pos:column="16">
		<block type="pseudo"><return pos:line="24" pos:column="17">return;<pos:position pos:line="24" pos:column="24"/></return></block></then></if> <comment type="block" pos:line="24" pos:column="25">/* cannot consolidate top level */</comment>
	<comment type="block" pos:line="25" pos:column="9">/* first, build stack of ancestors between root and current node */</comment>
	<expr_stmt><expr><name><name pos:line="26" pos:column="9">parent_stack<pos:position pos:line="26" pos:column="21"/></name><index pos:line="26" pos:column="21">[<expr><literal type="number" pos:line="26" pos:column="22">0<pos:position pos:line="26" pos:column="23"/></literal></expr>]<pos:position pos:line="26" pos:column="24"/></index></name> <operator pos:line="26" pos:column="25">=<pos:position pos:line="26" pos:column="26"/></operator> <name><name pos:line="26" pos:column="27">t<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">-&gt;<pos:position pos:line="26" pos:column="33"/></operator><name pos:line="26" pos:column="30">root<pos:position pos:line="26" pos:column="34"/></name></name></expr>;<pos:position pos:line="26" pos:column="35"/></expr_stmt>
	<for pos:line="27" pos:column="9">for <control pos:line="27" pos:column="13">(<init><expr><name pos:line="27" pos:column="14">i<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <literal type="number" pos:line="27" pos:column="18">0<pos:position pos:line="27" pos:column="19"/></literal></expr>;<pos:position pos:line="27" pos:column="20"/></init> <condition><expr><name pos:line="27" pos:column="21">i<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">&lt;<pos:position pos:line="27" pos:column="27"/></operator> <name pos:line="27" pos:column="25">n<pos:position pos:line="27" pos:column="26"/></name></expr>;<pos:position pos:line="27" pos:column="27"/></condition> <incr><expr><name pos:line="27" pos:column="28">i<pos:position pos:line="27" pos:column="29"/></name><operator pos:line="27" pos:column="29">++<pos:position pos:line="27" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="27" pos:column="32"/></control> <block pos:line="27" pos:column="33">{
		<expr_stmt><expr><name pos:line="28" pos:column="17">j<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">=<pos:position pos:line="28" pos:column="20"/></operator> <call><name pos:line="28" pos:column="21">GET_NIBBLE<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><name pos:line="28" pos:column="32">i<pos:position pos:line="28" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="35">entry<pos:position pos:line="28" pos:column="40"/></name><operator pos:line="28" pos:column="40">-&gt;<pos:position pos:line="28" pos:column="45"/></operator><name pos:line="28" pos:column="42">key_sha1<pos:position pos:line="28" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="52"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="29" pos:column="17">parent_stack<pos:position pos:line="29" pos:column="29"/></name><index pos:line="29" pos:column="29">[<expr><name pos:line="29" pos:column="30">i<pos:position pos:line="29" pos:column="31"/></name> <operator pos:line="29" pos:column="32">+<pos:position pos:line="29" pos:column="33"/></operator> <literal type="number" pos:line="29" pos:column="34">1<pos:position pos:line="29" pos:column="35"/></literal></expr>]<pos:position pos:line="29" pos:column="36"/></index></name> <operator pos:line="29" pos:column="37">=<pos:position pos:line="29" pos:column="38"/></operator> <call><name pos:line="29" pos:column="39">CLR_PTR_TYPE<pos:position pos:line="29" pos:column="51"/></name><argument_list pos:line="29" pos:column="51">(<argument><expr><name><name pos:line="29" pos:column="52">parent_stack<pos:position pos:line="29" pos:column="64"/></name><index pos:line="29" pos:column="64">[<expr><name pos:line="29" pos:column="65">i<pos:position pos:line="29" pos:column="66"/></name></expr>]<pos:position pos:line="29" pos:column="67"/></index></name><operator pos:line="29" pos:column="67">-&gt;<pos:position pos:line="29" pos:column="72"/></operator><name><name pos:line="29" pos:column="69">a<pos:position pos:line="29" pos:column="70"/></name><index pos:line="29" pos:column="70">[<expr><name pos:line="29" pos:column="71">j<pos:position pos:line="29" pos:column="72"/></name></expr>]<pos:position pos:line="29" pos:column="73"/></index></name></expr></argument>)<pos:position pos:line="29" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="75"/></expr_stmt>
	}<pos:position pos:line="30" pos:column="10"/></block></for>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">assert<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><name pos:line="31" pos:column="16">i<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">==<pos:position pos:line="31" pos:column="20"/></operator> <name pos:line="31" pos:column="21">n<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">&amp;&amp;<pos:position pos:line="31" pos:column="33"/></operator> <name><name pos:line="31" pos:column="26">parent_stack<pos:position pos:line="31" pos:column="38"/></name><index pos:line="31" pos:column="38">[<expr><name pos:line="31" pos:column="39">i<pos:position pos:line="31" pos:column="40"/></name></expr>]<pos:position pos:line="31" pos:column="41"/></index></name> <operator pos:line="31" pos:column="42">==<pos:position pos:line="31" pos:column="44"/></operator> <name pos:line="31" pos:column="45">tree<pos:position pos:line="31" pos:column="49"/></name></expr></argument>)<pos:position pos:line="31" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="51"/></expr_stmt>
	<comment type="block" pos:line="32" pos:column="9">/* next, unwind stack until note_tree_consolidate() is done */</comment>
	<while pos:line="33" pos:column="9">while <condition pos:line="33" pos:column="15">(<expr><name pos:line="33" pos:column="16">i<pos:position pos:line="33" pos:column="17"/></name> <operator pos:line="33" pos:column="18">&gt;<pos:position pos:line="33" pos:column="22"/></operator> <literal type="number" pos:line="33" pos:column="20">0<pos:position pos:line="33" pos:column="21"/></literal> <operator pos:line="33" pos:column="22">&amp;&amp;<pos:position pos:line="33" pos:column="32"/></operator>
	       <operator pos:line="34" pos:column="16">!<pos:position pos:line="34" pos:column="17"/></operator><call><name pos:line="34" pos:column="17">note_tree_consolidate<pos:position pos:line="34" pos:column="38"/></name><argument_list pos:line="34" pos:column="38">(<argument><expr><name><name pos:line="34" pos:column="39">parent_stack<pos:position pos:line="34" pos:column="51"/></name><index pos:line="34" pos:column="51">[<expr><name pos:line="34" pos:column="52">i<pos:position pos:line="34" pos:column="53"/></name></expr>]<pos:position pos:line="34" pos:column="54"/></index></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="56">parent_stack<pos:position pos:line="34" pos:column="68"/></name><index pos:line="34" pos:column="68">[<expr><name pos:line="34" pos:column="69">i<pos:position pos:line="34" pos:column="70"/></name> <operator pos:line="34" pos:column="71">-<pos:position pos:line="34" pos:column="72"/></operator> <literal type="number" pos:line="34" pos:column="73">1<pos:position pos:line="34" pos:column="74"/></literal></expr>]<pos:position pos:line="34" pos:column="75"/></index></name></expr></argument>,
				      <argument><expr><call><name pos:line="35" pos:column="39">GET_NIBBLE<pos:position pos:line="35" pos:column="49"/></name><argument_list pos:line="35" pos:column="49">(<argument><expr><name pos:line="35" pos:column="50">i<pos:position pos:line="35" pos:column="51"/></name> <operator pos:line="35" pos:column="52">-<pos:position pos:line="35" pos:column="53"/></operator> <literal type="number" pos:line="35" pos:column="54">1<pos:position pos:line="35" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="57">entry<pos:position pos:line="35" pos:column="62"/></name><operator pos:line="35" pos:column="62">-&gt;<pos:position pos:line="35" pos:column="67"/></operator><name pos:line="35" pos:column="64">key_sha1<pos:position pos:line="35" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="75"/></condition>
		<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="17">i<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">--<pos:position pos:line="36" pos:column="20"/></operator></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt></block></while>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
