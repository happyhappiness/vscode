<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3633_git-2.10.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">splice_tree<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">unsigned<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">char<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">hash1<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
		       <parameter><decl><type><specifier pos:line="2" pos:column="24">const<pos:position pos:line="2" pos:column="29"/></specifier> <name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">prefix<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>,
		       <parameter><decl><type><specifier pos:line="3" pos:column="24">const<pos:position pos:line="3" pos:column="29"/></specifier> <name pos:line="3" pos:column="30">unsigned<pos:position pos:line="3" pos:column="38"/></name> <name pos:line="3" pos:column="39">char<pos:position pos:line="3" pos:column="43"/></name> <modifier pos:line="3" pos:column="44">*<pos:position pos:line="3" pos:column="45"/></modifier></type><name pos:line="3" pos:column="45">hash2<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>,
		       <parameter><decl><type><name pos:line="4" pos:column="24">unsigned<pos:position pos:line="4" pos:column="32"/></name> <name pos:line="4" pos:column="33">char<pos:position pos:line="4" pos:column="37"/></name> <modifier pos:line="4" pos:column="38">*<pos:position pos:line="4" pos:column="39"/></modifier></type><name pos:line="4" pos:column="39">result<pos:position pos:line="4" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="46"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">subpath<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">toplen<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">buf<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">unsigned<pos:position pos:line="9" pos:column="17"/></name> <name pos:line="9" pos:column="18">long<pos:position pos:line="9" pos:column="22"/></name></type> <name pos:line="9" pos:column="23">sz<pos:position pos:line="9" pos:column="25"/></name></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">tree_desc<pos:position pos:line="10" pos:column="25"/></name></name></type> <name pos:line="10" pos:column="26">desc<pos:position pos:line="10" pos:column="30"/></name></decl>;<pos:position pos:line="10" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">unsigned<pos:position pos:line="11" pos:column="17"/></name> <name pos:line="11" pos:column="18">char<pos:position pos:line="11" pos:column="22"/></name> <modifier pos:line="11" pos:column="23">*<pos:position pos:line="11" pos:column="24"/></modifier></type><name pos:line="11" pos:column="24">rewrite_here<pos:position pos:line="11" pos:column="36"/></name></decl>;<pos:position pos:line="11" pos:column="37"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="12" pos:column="9">const<pos:position pos:line="12" pos:column="14"/></specifier> <name pos:line="12" pos:column="15">unsigned<pos:position pos:line="12" pos:column="23"/></name> <name pos:line="12" pos:column="24">char<pos:position pos:line="12" pos:column="28"/></name> <modifier pos:line="12" pos:column="29">*<pos:position pos:line="12" pos:column="30"/></modifier></type><name pos:line="12" pos:column="30">rewrite_with<pos:position pos:line="12" pos:column="42"/></name></decl>;<pos:position pos:line="12" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">unsigned<pos:position pos:line="13" pos:column="17"/></name> <name pos:line="13" pos:column="18">char<pos:position pos:line="13" pos:column="22"/></name></type> <name><name pos:line="13" pos:column="23">subtree<pos:position pos:line="13" pos:column="30"/></name><index pos:line="13" pos:column="30">[<expr><literal type="number" pos:line="13" pos:column="31">20<pos:position pos:line="13" pos:column="33"/></literal></expr>]<pos:position pos:line="13" pos:column="34"/></index></name></decl>;<pos:position pos:line="13" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="14" pos:column="9">enum<pos:position pos:line="14" pos:column="13"/></name> <name pos:line="14" pos:column="14">object_type<pos:position pos:line="14" pos:column="25"/></name></name></type> <name pos:line="14" pos:column="26">type<pos:position pos:line="14" pos:column="30"/></name></decl>;<pos:position pos:line="14" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="15" pos:column="9">int<pos:position pos:line="15" pos:column="12"/></name></type> <name pos:line="15" pos:column="13">status<pos:position pos:line="15" pos:column="19"/></name></decl>;<pos:position pos:line="15" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><name pos:line="17" pos:column="9">subpath<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">=<pos:position pos:line="17" pos:column="18"/></operator> <call><name pos:line="17" pos:column="19">strchrnul<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><name pos:line="17" pos:column="29">prefix<pos:position pos:line="17" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="17" pos:column="37">'/'<pos:position pos:line="17" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name pos:line="18" pos:column="9">toplen<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">=<pos:position pos:line="18" pos:column="17"/></operator> <name pos:line="18" pos:column="18">subpath<pos:position pos:line="18" pos:column="25"/></name> <operator pos:line="18" pos:column="26">-<pos:position pos:line="18" pos:column="27"/></operator> <name pos:line="18" pos:column="28">prefix<pos:position pos:line="18" pos:column="34"/></name></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">*<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">subpath<pos:position pos:line="19" pos:column="21"/></name></expr>)<pos:position pos:line="19" pos:column="22"/></condition><then pos:line="19" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="17">subpath<pos:position pos:line="20" pos:column="24"/></name><operator pos:line="20" pos:column="24">++<pos:position pos:line="20" pos:column="26"/></operator></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="22" pos:column="9">buf<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <call><name pos:line="22" pos:column="15">read_sha1_file<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">hash1<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="37">&amp;<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="38">type<pos:position pos:line="22" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="44">&amp;<pos:position pos:line="22" pos:column="49"/></operator><name pos:line="22" pos:column="45">sz<pos:position pos:line="22" pos:column="47"/></name></expr></argument>)<pos:position pos:line="22" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="49"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">!<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">buf<pos:position pos:line="23" pos:column="17"/></name></expr>)<pos:position pos:line="23" pos:column="18"/></condition><then pos:line="23" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="17">die<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><literal type="string" pos:line="24" pos:column="21">"cannot read tree %s"<pos:position pos:line="24" pos:column="42"/></literal></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="44">sha1_to_hex<pos:position pos:line="24" pos:column="55"/></name><argument_list pos:line="24" pos:column="55">(<argument><expr><name pos:line="24" pos:column="56">hash1<pos:position pos:line="24" pos:column="61"/></name></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="64"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">init_tree_desc<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><operator pos:line="25" pos:column="24">&amp;<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="25">desc<pos:position pos:line="25" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="31">buf<pos:position pos:line="25" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="36">sz<pos:position pos:line="25" pos:column="38"/></name></expr></argument>)<pos:position pos:line="25" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="40"/></expr_stmt>

	<expr_stmt><expr><name pos:line="27" pos:column="9">rewrite_here<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">=<pos:position pos:line="27" pos:column="23"/></operator> <name pos:line="27" pos:column="24">NULL<pos:position pos:line="27" pos:column="28"/></name></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt>
	<while pos:line="28" pos:column="9">while <condition pos:line="28" pos:column="15">(<expr><name><name pos:line="28" pos:column="16">desc<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">.<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="21">size<pos:position pos:line="28" pos:column="25"/></name></name></expr>)<pos:position pos:line="28" pos:column="26"/></condition> <block pos:line="28" pos:column="27">{
		<decl_stmt><decl><type><specifier pos:line="29" pos:column="17">const<pos:position pos:line="29" pos:column="22"/></specifier> <name pos:line="29" pos:column="23">char<pos:position pos:line="29" pos:column="27"/></name> <modifier pos:line="29" pos:column="28">*<pos:position pos:line="29" pos:column="29"/></modifier></type><name pos:line="29" pos:column="29">name<pos:position pos:line="29" pos:column="33"/></name></decl>;<pos:position pos:line="29" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="30" pos:column="17">unsigned<pos:position pos:line="30" pos:column="25"/></name></type> <name pos:line="30" pos:column="26">mode<pos:position pos:line="30" pos:column="30"/></name></decl>;<pos:position pos:line="30" pos:column="31"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="31" pos:column="17">const<pos:position pos:line="31" pos:column="22"/></specifier> <name><name pos:line="31" pos:column="23">struct<pos:position pos:line="31" pos:column="29"/></name> <name pos:line="31" pos:column="30">object_id<pos:position pos:line="31" pos:column="39"/></name></name> <modifier pos:line="31" pos:column="40">*<pos:position pos:line="31" pos:column="41"/></modifier></type><name pos:line="31" pos:column="41">oid<pos:position pos:line="31" pos:column="44"/></name></decl>;<pos:position pos:line="31" pos:column="45"/></decl_stmt>

		<expr_stmt><expr><name pos:line="33" pos:column="17">oid<pos:position pos:line="33" pos:column="20"/></name> <operator pos:line="33" pos:column="21">=<pos:position pos:line="33" pos:column="22"/></operator> <call><name pos:line="33" pos:column="23">tree_entry_extract<pos:position pos:line="33" pos:column="41"/></name><argument_list pos:line="33" pos:column="41">(<argument><expr><operator pos:line="33" pos:column="42">&amp;<pos:position pos:line="33" pos:column="47"/></operator><name pos:line="33" pos:column="43">desc<pos:position pos:line="33" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="49">&amp;<pos:position pos:line="33" pos:column="54"/></operator><name pos:line="33" pos:column="50">name<pos:position pos:line="33" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="56">&amp;<pos:position pos:line="33" pos:column="61"/></operator><name pos:line="33" pos:column="57">mode<pos:position pos:line="33" pos:column="61"/></name></expr></argument>)<pos:position pos:line="33" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="63"/></expr_stmt>
		<if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><call><name pos:line="34" pos:column="21">strlen<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><name pos:line="34" pos:column="28">name<pos:position pos:line="34" pos:column="32"/></name></expr></argument>)<pos:position pos:line="34" pos:column="33"/></argument_list></call> <operator pos:line="34" pos:column="34">==<pos:position pos:line="34" pos:column="36"/></operator> <name pos:line="34" pos:column="37">toplen<pos:position pos:line="34" pos:column="43"/></name> <operator pos:line="34" pos:column="44">&amp;&amp;<pos:position pos:line="34" pos:column="54"/></operator>
		    <operator pos:line="35" pos:column="21">!<pos:position pos:line="35" pos:column="22"/></operator><call><name pos:line="35" pos:column="22">memcmp<pos:position pos:line="35" pos:column="28"/></name><argument_list pos:line="35" pos:column="28">(<argument><expr><name pos:line="35" pos:column="29">name<pos:position pos:line="35" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="35">prefix<pos:position pos:line="35" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="43">toplen<pos:position pos:line="35" pos:column="49"/></name></expr></argument>)<pos:position pos:line="35" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="51"/></condition><then pos:line="35" pos:column="51"> <block pos:line="35" pos:column="52">{
			<if pos:line="36" pos:column="25">if <condition pos:line="36" pos:column="28">(<expr><operator pos:line="36" pos:column="29">!<pos:position pos:line="36" pos:column="30"/></operator><call><name pos:line="36" pos:column="30">S_ISDIR<pos:position pos:line="36" pos:column="37"/></name><argument_list pos:line="36" pos:column="37">(<argument><expr><name pos:line="36" pos:column="38">mode<pos:position pos:line="36" pos:column="42"/></name></expr></argument>)<pos:position pos:line="36" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="44"/></condition><then pos:line="36" pos:column="44">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="33">die<pos:position pos:line="37" pos:column="36"/></name><argument_list pos:line="37" pos:column="36">(<argument><expr><literal type="string" pos:line="37" pos:column="37">"entry %s in tree %s is not a tree"<pos:position pos:line="37" pos:column="72"/></literal></expr></argument>,
				    <argument><expr><name pos:line="38" pos:column="37">name<pos:position pos:line="38" pos:column="41"/></name></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="43">sha1_to_hex<pos:position pos:line="38" pos:column="54"/></name><argument_list pos:line="38" pos:column="54">(<argument><expr><name pos:line="38" pos:column="55">hash1<pos:position pos:line="38" pos:column="60"/></name></expr></argument>)<pos:position pos:line="38" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="63"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="39" pos:column="25">rewrite_here<pos:position pos:line="39" pos:column="37"/></name> <operator pos:line="39" pos:column="38">=<pos:position pos:line="39" pos:column="39"/></operator> <operator pos:line="39" pos:column="40">(<pos:position pos:line="39" pos:column="41"/></operator><name pos:line="39" pos:column="41">unsigned<pos:position pos:line="39" pos:column="49"/></name> <name pos:line="39" pos:column="50">char<pos:position pos:line="39" pos:column="54"/></name> <operator pos:line="39" pos:column="55">*<pos:position pos:line="39" pos:column="56"/></operator><operator pos:line="39" pos:column="56">)<pos:position pos:line="39" pos:column="57"/></operator> <name><name pos:line="39" pos:column="58">oid<pos:position pos:line="39" pos:column="61"/></name><operator pos:line="39" pos:column="61">-&gt;<pos:position pos:line="39" pos:column="66"/></operator><name pos:line="39" pos:column="63">hash<pos:position pos:line="39" pos:column="67"/></name></name></expr>;<pos:position pos:line="39" pos:column="68"/></expr_stmt>
			<break pos:line="40" pos:column="25">break;<pos:position pos:line="40" pos:column="31"/></break>
		}<pos:position pos:line="41" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">update_tree_entry<pos:position pos:line="42" pos:column="34"/></name><argument_list pos:line="42" pos:column="34">(<argument><expr><operator pos:line="42" pos:column="35">&amp;<pos:position pos:line="42" pos:column="40"/></operator><name pos:line="42" pos:column="36">desc<pos:position pos:line="42" pos:column="40"/></name></expr></argument>)<pos:position pos:line="42" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="43" pos:column="10"/></block></while>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><operator pos:line="44" pos:column="13">!<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="14">rewrite_here<pos:position pos:line="44" pos:column="26"/></name></expr>)<pos:position pos:line="44" pos:column="27"/></condition><then pos:line="44" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="17">die<pos:position pos:line="45" pos:column="20"/></name><argument_list pos:line="45" pos:column="20">(<argument><expr><literal type="string" pos:line="45" pos:column="21">"entry %.*s not found in tree %s"<pos:position pos:line="45" pos:column="54"/></literal></expr></argument>,
		    <argument><expr><name pos:line="46" pos:column="21">toplen<pos:position pos:line="46" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="29">prefix<pos:position pos:line="46" pos:column="35"/></name></expr></argument>, <argument><expr><call><name pos:line="46" pos:column="37">sha1_to_hex<pos:position pos:line="46" pos:column="48"/></name><argument_list pos:line="46" pos:column="48">(<argument><expr><name pos:line="46" pos:column="49">hash1<pos:position pos:line="46" pos:column="54"/></name></expr></argument>)<pos:position pos:line="46" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="57"/></expr_stmt></block></then></if>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><operator pos:line="47" pos:column="13">*<pos:position pos:line="47" pos:column="14"/></operator><name pos:line="47" pos:column="14">subpath<pos:position pos:line="47" pos:column="21"/></name></expr>)<pos:position pos:line="47" pos:column="22"/></condition><then pos:line="47" pos:column="22"> <block pos:line="47" pos:column="23">{
		<expr_stmt><expr><name pos:line="48" pos:column="17">status<pos:position pos:line="48" pos:column="23"/></name> <operator pos:line="48" pos:column="24">=<pos:position pos:line="48" pos:column="25"/></operator> <call><name pos:line="48" pos:column="26">splice_tree<pos:position pos:line="48" pos:column="37"/></name><argument_list pos:line="48" pos:column="37">(<argument><expr><name pos:line="48" pos:column="38">rewrite_here<pos:position pos:line="48" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="52">subpath<pos:position pos:line="48" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="61">hash2<pos:position pos:line="48" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="68">subtree<pos:position pos:line="48" pos:column="75"/></name></expr></argument>)<pos:position pos:line="48" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="77"/></expr_stmt>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name pos:line="49" pos:column="21">status<pos:position pos:line="49" pos:column="27"/></name></expr>)<pos:position pos:line="49" pos:column="28"/></condition><then pos:line="49" pos:column="28">
			<block type="pseudo"><return pos:line="50" pos:column="25">return <expr><name pos:line="50" pos:column="32">status<pos:position pos:line="50" pos:column="38"/></name></expr>;<pos:position pos:line="50" pos:column="39"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="51" pos:column="17">rewrite_with<pos:position pos:line="51" pos:column="29"/></name> <operator pos:line="51" pos:column="30">=<pos:position pos:line="51" pos:column="31"/></operator> <name pos:line="51" pos:column="32">subtree<pos:position pos:line="51" pos:column="39"/></name></expr>;<pos:position pos:line="51" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="52" pos:column="10"/></block></then>
	<else pos:line="53" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="17">rewrite_with<pos:position pos:line="54" pos:column="29"/></name> <operator pos:line="54" pos:column="30">=<pos:position pos:line="54" pos:column="31"/></operator> <name pos:line="54" pos:column="32">hash2<pos:position pos:line="54" pos:column="37"/></name></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="55" pos:column="9">hashcpy<pos:position pos:line="55" pos:column="16"/></name><argument_list pos:line="55" pos:column="16">(<argument><expr><name pos:line="55" pos:column="17">rewrite_here<pos:position pos:line="55" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="31">rewrite_with<pos:position pos:line="55" pos:column="43"/></name></expr></argument>)<pos:position pos:line="55" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="45"/></expr_stmt>
	<expr_stmt><expr><name pos:line="56" pos:column="9">status<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">=<pos:position pos:line="56" pos:column="17"/></operator> <call><name pos:line="56" pos:column="18">write_sha1_file<pos:position pos:line="56" pos:column="33"/></name><argument_list pos:line="56" pos:column="33">(<argument><expr><name pos:line="56" pos:column="34">buf<pos:position pos:line="56" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="39">sz<pos:position pos:line="56" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="43">tree_type<pos:position pos:line="56" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="54">result<pos:position pos:line="56" pos:column="60"/></name></expr></argument>)<pos:position pos:line="56" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="62"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="57" pos:column="9">free<pos:position pos:line="57" pos:column="13"/></name><argument_list pos:line="57" pos:column="13">(<argument><expr><name pos:line="57" pos:column="14">buf<pos:position pos:line="57" pos:column="17"/></name></expr></argument>)<pos:position pos:line="57" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="19"/></expr_stmt>
	<return pos:line="58" pos:column="9">return <expr><name pos:line="58" pos:column="16">status<pos:position pos:line="58" pos:column="22"/></name></expr>;<pos:position pos:line="58" pos:column="23"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
