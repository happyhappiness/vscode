<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5569_git-2.4.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">print_and_abort<pos:position pos:line="2" pos:column="16"/></name> <parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">void<pos:position pos:line="2" pos:column="22"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="23"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <comment type="block" pos:line="4" pos:column="3">/* Don't change any of these strings.  Yes, it would be possible to add
     the newline to the string and use fputs or so.  But this must not
     happen because the "memory exhausted" message appears in other places
     like this and the translation should be reused instead of creating
     a very similar string which requires a separate translation.  */</comment>
<cpp:ifdef pos:line="9" pos:column="1"># <cpp:directive pos:line="9" pos:column="3">ifdef<pos:position pos:line="9" pos:column="8"/></cpp:directive> <name pos:line="9" pos:column="9">_LIBC<pos:position pos:line="9" pos:column="14"/></name></cpp:ifdef>
  <expr_stmt><expr><operator pos:line="10" pos:column="3">(<pos:position pos:line="10" pos:column="4"/></operator><name pos:line="10" pos:column="4">void<pos:position pos:line="10" pos:column="8"/></name><operator pos:line="10" pos:column="8">)<pos:position pos:line="10" pos:column="9"/></operator> <call><name pos:line="10" pos:column="10">__fxprintf<pos:position pos:line="10" pos:column="20"/></name> <argument_list pos:line="10" pos:column="21">(<argument><expr><name pos:line="10" pos:column="22">NULL<pos:position pos:line="10" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="28">"%s\n"<pos:position pos:line="10" pos:column="34"/></literal></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="36">_<pos:position pos:line="10" pos:column="37"/></name><argument_list pos:line="10" pos:column="37">(<argument><expr><literal type="string" pos:line="10" pos:column="38">"memory exhausted"<pos:position pos:line="10" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="59"/></expr_stmt>
<cpp:else pos:line="11" pos:column="1"># <cpp:directive pos:line="11" pos:column="3">else<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:else>
  <expr_stmt><expr><call><name pos:line="12" pos:column="3">fprintf<pos:position pos:line="12" pos:column="10"/></name> <argument_list pos:line="12" pos:column="11">(<argument><expr><name pos:line="12" pos:column="12">stderr<pos:position pos:line="12" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="20">"%s\n"<pos:position pos:line="12" pos:column="26"/></literal></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="28">_<pos:position pos:line="12" pos:column="29"/></name><argument_list pos:line="12" pos:column="29">(<argument><expr><literal type="string" pos:line="12" pos:column="30">"memory exhausted"<pos:position pos:line="12" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="51"/></expr_stmt>
<cpp:endif pos:line="13" pos:column="1"># <cpp:directive pos:line="13" pos:column="3">endif<pos:position pos:line="13" pos:column="8"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name pos:line="14" pos:column="3">exit<pos:position pos:line="14" pos:column="7"/></name> <argument_list pos:line="14" pos:column="8">(<argument><expr><literal type="number" pos:line="14" pos:column="9">1<pos:position pos:line="14" pos:column="10"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="11"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="12"/></expr_stmt>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
