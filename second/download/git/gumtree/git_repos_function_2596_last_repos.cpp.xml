<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2596_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">handle_body<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">mailinfo<pos:position pos:line="1" pos:column="40"/></name></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">mi<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="46">struct<pos:position pos:line="1" pos:column="52"/></name> <name pos:line="1" pos:column="53">strbuf<pos:position pos:line="1" pos:column="59"/></name></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">line<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">prev<pos:position pos:line="3" pos:column="27"/></name> <init pos:line="3" pos:column="28">= <expr><name pos:line="3" pos:column="30">STRBUF_INIT<pos:position pos:line="3" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="42"/></decl_stmt>

	<comment type="block" pos:line="5" pos:column="9">/* Skip up to the first boundary */</comment>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">*<pos:position pos:line="6" pos:column="14"/></operator><operator pos:line="6" pos:column="14">(<pos:position pos:line="6" pos:column="15"/></operator><name><name pos:line="6" pos:column="15">mi<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">-&gt;<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="19">content_top<pos:position pos:line="6" pos:column="30"/></name></name><operator pos:line="6" pos:column="30">)<pos:position pos:line="6" pos:column="31"/></operator></expr>)<pos:position pos:line="6" pos:column="32"/></condition><then pos:line="6" pos:column="32"> <block pos:line="6" pos:column="33">{
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><operator pos:line="7" pos:column="21">!<pos:position pos:line="7" pos:column="22"/></operator><call><name pos:line="7" pos:column="22">find_boundary<pos:position pos:line="7" pos:column="35"/></name><argument_list pos:line="7" pos:column="35">(<argument><expr><name pos:line="7" pos:column="36">mi<pos:position pos:line="7" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="40">line<pos:position pos:line="7" pos:column="44"/></name></expr></argument>)<pos:position pos:line="7" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="46"/></condition><then pos:line="7" pos:column="46">
			<block type="pseudo"><goto pos:line="8" pos:column="25">goto <name pos:line="8" pos:column="30">handle_body_out<pos:position pos:line="8" pos:column="45"/></name>;<pos:position pos:line="8" pos:column="46"/></goto></block></then></if>
	}<pos:position pos:line="9" pos:column="10"/></block></then></if>

	<do pos:line="11" pos:column="9">do <block pos:line="11" pos:column="12">{
		<comment type="block" pos:line="12" pos:column="17">/* process any boundary lines */</comment>
		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">*<pos:position pos:line="13" pos:column="22"/></operator><operator pos:line="13" pos:column="22">(<pos:position pos:line="13" pos:column="23"/></operator><name><name pos:line="13" pos:column="23">mi<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">-&gt;<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="27">content_top<pos:position pos:line="13" pos:column="38"/></name></name><operator pos:line="13" pos:column="38">)<pos:position pos:line="13" pos:column="39"/></operator> <operator pos:line="13" pos:column="40">&amp;&amp;<pos:position pos:line="13" pos:column="50"/></operator> <call><name pos:line="13" pos:column="43">is_multipart_boundary<pos:position pos:line="13" pos:column="64"/></name><argument_list pos:line="13" pos:column="64">(<argument><expr><name pos:line="13" pos:column="65">mi<pos:position pos:line="13" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="69">line<pos:position pos:line="13" pos:column="73"/></name></expr></argument>)<pos:position pos:line="13" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="75"/></condition><then pos:line="13" pos:column="75"> <block pos:line="13" pos:column="76">{
			<comment type="block" pos:line="14" pos:column="25">/* flush any leftover */</comment>
			<if pos:line="15" pos:column="25">if <condition pos:line="15" pos:column="28">(<expr><name><name pos:line="15" pos:column="29">prev<pos:position pos:line="15" pos:column="33"/></name><operator pos:line="15" pos:column="33">.<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="34">len<pos:position pos:line="15" pos:column="37"/></name></name></expr>)<pos:position pos:line="15" pos:column="38"/></condition><then pos:line="15" pos:column="38"> <block pos:line="15" pos:column="39">{
				<expr_stmt><expr><call><name pos:line="16" pos:column="33">handle_filter<pos:position pos:line="16" pos:column="46"/></name><argument_list pos:line="16" pos:column="46">(<argument><expr><name pos:line="16" pos:column="47">mi<pos:position pos:line="16" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="51">&amp;<pos:position pos:line="16" pos:column="56"/></operator><name pos:line="16" pos:column="52">prev<pos:position pos:line="16" pos:column="56"/></name></expr></argument>)<pos:position pos:line="16" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="58"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="17" pos:column="33">strbuf_reset<pos:position pos:line="17" pos:column="45"/></name><argument_list pos:line="17" pos:column="45">(<argument><expr><operator pos:line="17" pos:column="46">&amp;<pos:position pos:line="17" pos:column="51"/></operator><name pos:line="17" pos:column="47">prev<pos:position pos:line="17" pos:column="51"/></name></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="53"/></expr_stmt>
			}<pos:position pos:line="18" pos:column="26"/></block></then></if>
			<if pos:line="19" pos:column="25">if <condition pos:line="19" pos:column="28">(<expr><operator pos:line="19" pos:column="29">!<pos:position pos:line="19" pos:column="30"/></operator><call><name pos:line="19" pos:column="30">handle_boundary<pos:position pos:line="19" pos:column="45"/></name><argument_list pos:line="19" pos:column="45">(<argument><expr><name pos:line="19" pos:column="46">mi<pos:position pos:line="19" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="50">line<pos:position pos:line="19" pos:column="54"/></name></expr></argument>)<pos:position pos:line="19" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="56"/></condition><then pos:line="19" pos:column="56">
				<block type="pseudo"><goto pos:line="20" pos:column="33">goto <name pos:line="20" pos:column="38">handle_body_out<pos:position pos:line="20" pos:column="53"/></name>;<pos:position pos:line="20" pos:column="54"/></goto></block></then></if>
		}<pos:position pos:line="21" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="23" pos:column="17">/* Unwrap transfer encoding */</comment>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">decode_transfer_encoding<pos:position pos:line="24" pos:column="41"/></name><argument_list pos:line="24" pos:column="41">(<argument><expr><name pos:line="24" pos:column="42">mi<pos:position pos:line="24" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="46">line<pos:position pos:line="24" pos:column="50"/></name></expr></argument>)<pos:position pos:line="24" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="52"/></expr_stmt>

		<switch pos:line="26" pos:column="17">switch <condition pos:line="26" pos:column="24">(<expr><name><name pos:line="26" pos:column="25">mi<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">-&gt;<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="29">transfer_encoding<pos:position pos:line="26" pos:column="46"/></name></name></expr>)<pos:position pos:line="26" pos:column="47"/></condition> <block pos:line="26" pos:column="48">{
		<case pos:line="27" pos:column="17">case <expr><name pos:line="27" pos:column="22">TE_BASE64<pos:position pos:line="27" pos:column="31"/></name></expr>:<pos:position pos:line="27" pos:column="32"/></case>
		<case pos:line="28" pos:column="17">case <expr><name pos:line="28" pos:column="22">TE_QP<pos:position pos:line="28" pos:column="27"/></name></expr>:<pos:position pos:line="28" pos:column="28"/></case>
		<block pos:line="29" pos:column="17">{
			<decl_stmt><decl><type><name><name pos:line="30" pos:column="25">struct<pos:position pos:line="30" pos:column="31"/></name> <name pos:line="30" pos:column="32">strbuf<pos:position pos:line="30" pos:column="38"/></name></name> <modifier pos:line="30" pos:column="39">*<pos:position pos:line="30" pos:column="40"/></modifier><modifier pos:line="30" pos:column="40">*<pos:position pos:line="30" pos:column="41"/></modifier></type><name pos:line="30" pos:column="41">lines<pos:position pos:line="30" pos:column="46"/></name></decl>, <modifier pos:line="30" pos:column="48">*<pos:position pos:line="30" pos:column="49"/></modifier><modifier pos:line="30" pos:column="49">*<pos:position pos:line="30" pos:column="50"/></modifier><decl><type ref="prev"/><name pos:line="30" pos:column="50">it<pos:position pos:line="30" pos:column="52"/></name></decl>, <modifier pos:line="30" pos:column="54">*<pos:position pos:line="30" pos:column="55"/></modifier><decl><type ref="prev"/><name pos:line="30" pos:column="55">sb<pos:position pos:line="30" pos:column="57"/></name></decl>;<pos:position pos:line="30" pos:column="58"/></decl_stmt>

			<comment type="block" pos:line="32" pos:column="25">/* Prepend any previous partial lines */</comment>
			<expr_stmt><expr><call><name pos:line="33" pos:column="25">strbuf_insert<pos:position pos:line="33" pos:column="38"/></name><argument_list pos:line="33" pos:column="38">(<argument><expr><name pos:line="33" pos:column="39">line<pos:position pos:line="33" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="45">0<pos:position pos:line="33" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="48">prev<pos:position pos:line="33" pos:column="52"/></name><operator pos:line="33" pos:column="52">.<pos:position pos:line="33" pos:column="53"/></operator><name pos:line="33" pos:column="53">buf<pos:position pos:line="33" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="58">prev<pos:position pos:line="33" pos:column="62"/></name><operator pos:line="33" pos:column="62">.<pos:position pos:line="33" pos:column="63"/></operator><name pos:line="33" pos:column="63">len<pos:position pos:line="33" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="68"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">strbuf_reset<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><operator pos:line="34" pos:column="38">&amp;<pos:position pos:line="34" pos:column="43"/></operator><name pos:line="34" pos:column="39">prev<pos:position pos:line="34" pos:column="43"/></name></expr></argument>)<pos:position pos:line="34" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="45"/></expr_stmt>

			<comment type="block" pos:line="36" pos:column="25">/*
			 * This is a decoded line that may contain
			 * multiple new lines.  Pass only one chunk
			 * at a time to handle_filter()
			 */</comment>
			<expr_stmt><expr><name pos:line="41" pos:column="25">lines<pos:position pos:line="41" pos:column="30"/></name> <operator pos:line="41" pos:column="31">=<pos:position pos:line="41" pos:column="32"/></operator> <call><name pos:line="41" pos:column="33">strbuf_split<pos:position pos:line="41" pos:column="45"/></name><argument_list pos:line="41" pos:column="45">(<argument><expr><name pos:line="41" pos:column="46">line<pos:position pos:line="41" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="41" pos:column="52">'\n'<pos:position pos:line="41" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="58"/></expr_stmt>
			<for pos:line="42" pos:column="25">for <control pos:line="42" pos:column="29">(<init><expr><name pos:line="42" pos:column="30">it<pos:position pos:line="42" pos:column="32"/></name> <operator pos:line="42" pos:column="33">=<pos:position pos:line="42" pos:column="34"/></operator> <name pos:line="42" pos:column="35">lines<pos:position pos:line="42" pos:column="40"/></name></expr>;<pos:position pos:line="42" pos:column="41"/></init> <condition><expr><operator pos:line="42" pos:column="42">(<pos:position pos:line="42" pos:column="43"/></operator><name pos:line="42" pos:column="43">sb<pos:position pos:line="42" pos:column="45"/></name> <operator pos:line="42" pos:column="46">=<pos:position pos:line="42" pos:column="47"/></operator> <operator pos:line="42" pos:column="48">*<pos:position pos:line="42" pos:column="49"/></operator><name pos:line="42" pos:column="49">it<pos:position pos:line="42" pos:column="51"/></name><operator pos:line="42" pos:column="51">)<pos:position pos:line="42" pos:column="52"/></operator></expr>;<pos:position pos:line="42" pos:column="53"/></condition> <incr><expr><name pos:line="42" pos:column="54">it<pos:position pos:line="42" pos:column="56"/></name><operator pos:line="42" pos:column="56">++<pos:position pos:line="42" pos:column="58"/></operator></expr></incr>)<pos:position pos:line="42" pos:column="59"/></control> <block pos:line="42" pos:column="60">{
				<if pos:line="43" pos:column="33">if <condition pos:line="43" pos:column="36">(<expr><operator pos:line="43" pos:column="37">*<pos:position pos:line="43" pos:column="38"/></operator><operator pos:line="43" pos:column="38">(<pos:position pos:line="43" pos:column="39"/></operator><name pos:line="43" pos:column="39">it<pos:position pos:line="43" pos:column="41"/></name> <operator pos:line="43" pos:column="42">+<pos:position pos:line="43" pos:column="43"/></operator> <literal type="number" pos:line="43" pos:column="44">1<pos:position pos:line="43" pos:column="45"/></literal><operator pos:line="43" pos:column="45">)<pos:position pos:line="43" pos:column="46"/></operator> <operator pos:line="43" pos:column="47">==<pos:position pos:line="43" pos:column="49"/></operator> <name pos:line="43" pos:column="50">NULL<pos:position pos:line="43" pos:column="54"/></name></expr>)<pos:position pos:line="43" pos:column="55"/></condition><then pos:line="43" pos:column="55"> <comment type="block" pos:line="43" pos:column="56">/* The last line */</comment>
					<block type="pseudo"><if pos:line="44" pos:column="41">if <condition pos:line="44" pos:column="44">(<expr><name><name pos:line="44" pos:column="45">sb<pos:position pos:line="44" pos:column="47"/></name><operator pos:line="44" pos:column="47">-&gt;<pos:position pos:line="44" pos:column="52"/></operator><name pos:line="44" pos:column="49">buf<pos:position pos:line="44" pos:column="52"/></name><index pos:line="44" pos:column="52">[<expr><name><name pos:line="44" pos:column="53">sb<pos:position pos:line="44" pos:column="55"/></name><operator pos:line="44" pos:column="55">-&gt;<pos:position pos:line="44" pos:column="60"/></operator><name pos:line="44" pos:column="57">len<pos:position pos:line="44" pos:column="60"/></name></name> <operator pos:line="44" pos:column="61">-<pos:position pos:line="44" pos:column="62"/></operator> <literal type="number" pos:line="44" pos:column="63">1<pos:position pos:line="44" pos:column="64"/></literal></expr>]<pos:position pos:line="44" pos:column="65"/></index></name> <operator pos:line="44" pos:column="66">!=<pos:position pos:line="44" pos:column="68"/></operator> <literal type="char" pos:line="44" pos:column="69">'\n'<pos:position pos:line="44" pos:column="73"/></literal></expr>)<pos:position pos:line="44" pos:column="74"/></condition><then pos:line="44" pos:column="74"> <block pos:line="44" pos:column="75">{
						<comment type="block" pos:line="45" pos:column="49">/* Partial line, save it for later. */</comment>
						<expr_stmt><expr><call><name pos:line="46" pos:column="49">strbuf_addbuf<pos:position pos:line="46" pos:column="62"/></name><argument_list pos:line="46" pos:column="62">(<argument><expr><operator pos:line="46" pos:column="63">&amp;<pos:position pos:line="46" pos:column="68"/></operator><name pos:line="46" pos:column="64">prev<pos:position pos:line="46" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="70">sb<pos:position pos:line="46" pos:column="72"/></name></expr></argument>)<pos:position pos:line="46" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="74"/></expr_stmt>
						<break pos:line="47" pos:column="49">break;<pos:position pos:line="47" pos:column="55"/></break>
					}<pos:position pos:line="48" pos:column="42"/></block></then></if></block></then></if>
				<expr_stmt><expr><call><name pos:line="49" pos:column="33">handle_filter<pos:position pos:line="49" pos:column="46"/></name><argument_list pos:line="49" pos:column="46">(<argument><expr><name pos:line="49" pos:column="47">mi<pos:position pos:line="49" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="51">sb<pos:position pos:line="49" pos:column="53"/></name></expr></argument>)<pos:position pos:line="49" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="55"/></expr_stmt>
			}<pos:position pos:line="50" pos:column="26"/></block></for>
			<comment type="block" pos:line="51" pos:column="25">/*
			 * The partial chunk is saved in "prev" and will be
			 * appended by the next iteration of read_line_with_nul().
			 */</comment>
			<expr_stmt><expr><call><name pos:line="55" pos:column="25">strbuf_list_free<pos:position pos:line="55" pos:column="41"/></name><argument_list pos:line="55" pos:column="41">(<argument><expr><name pos:line="55" pos:column="42">lines<pos:position pos:line="55" pos:column="47"/></name></expr></argument>)<pos:position pos:line="55" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="49"/></expr_stmt>
			<break pos:line="56" pos:column="25">break;<pos:position pos:line="56" pos:column="31"/></break>
		}<pos:position pos:line="57" pos:column="18"/></block>
		<default pos:line="58" pos:column="17">default:<pos:position pos:line="58" pos:column="25"/></default>
			<expr_stmt><expr><call><name pos:line="59" pos:column="25">handle_filter<pos:position pos:line="59" pos:column="38"/></name><argument_list pos:line="59" pos:column="38">(<argument><expr><name pos:line="59" pos:column="39">mi<pos:position pos:line="59" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="43">line<pos:position pos:line="59" pos:column="47"/></name></expr></argument>)<pos:position pos:line="59" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="60" pos:column="18"/></block></switch>

		<if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><name><name pos:line="62" pos:column="21">mi<pos:position pos:line="62" pos:column="23"/></name><operator pos:line="62" pos:column="23">-&gt;<pos:position pos:line="62" pos:column="28"/></operator><name pos:line="62" pos:column="25">input_error<pos:position pos:line="62" pos:column="36"/></name></name></expr>)<pos:position pos:line="62" pos:column="37"/></condition><then pos:line="62" pos:column="37">
			<block type="pseudo"><break pos:line="63" pos:column="25">break;<pos:position pos:line="63" pos:column="31"/></break></block></then></if>
	}<pos:position pos:line="64" pos:column="10"/></block> while <condition pos:line="64" pos:column="17">(<expr><operator pos:line="64" pos:column="18">!<pos:position pos:line="64" pos:column="19"/></operator><call><name pos:line="64" pos:column="19">strbuf_getwholeline<pos:position pos:line="64" pos:column="38"/></name><argument_list pos:line="64" pos:column="38">(<argument><expr><name pos:line="64" pos:column="39">line<pos:position pos:line="64" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="45">mi<pos:position pos:line="64" pos:column="47"/></name><operator pos:line="64" pos:column="47">-&gt;<pos:position pos:line="64" pos:column="52"/></operator><name pos:line="64" pos:column="49">input<pos:position pos:line="64" pos:column="54"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="64" pos:column="56">'\n'<pos:position pos:line="64" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="62"/></condition>;<pos:position pos:line="64" pos:column="63"/></do>

	<expr_stmt><expr><call><name pos:line="66" pos:column="9">flush_inbody_header_accum<pos:position pos:line="66" pos:column="34"/></name><argument_list pos:line="66" pos:column="34">(<argument><expr><name pos:line="66" pos:column="35">mi<pos:position pos:line="66" pos:column="37"/></name></expr></argument>)<pos:position pos:line="66" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="39"/></expr_stmt>

<label><name pos:line="68" pos:column="1">handle_body_out<pos:position pos:line="68" pos:column="16"/></name>:<pos:position pos:line="68" pos:column="17"/></label>
	<expr_stmt><expr><call><name pos:line="69" pos:column="9">strbuf_release<pos:position pos:line="69" pos:column="23"/></name><argument_list pos:line="69" pos:column="23">(<argument><expr><operator pos:line="69" pos:column="24">&amp;<pos:position pos:line="69" pos:column="29"/></operator><name pos:line="69" pos:column="25">prev<pos:position pos:line="69" pos:column="29"/></name></expr></argument>)<pos:position pos:line="69" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="31"/></expr_stmt>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
