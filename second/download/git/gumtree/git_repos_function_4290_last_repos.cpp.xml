<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4290_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">get_sha1_1<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><specifier pos:line="1" pos:column="23">const<pos:position pos:line="1" pos:column="28"/></specifier> <name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">name<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">int<pos:position pos:line="1" pos:column="44"/></name></type> <name pos:line="1" pos:column="45">len<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">unsigned<pos:position pos:line="1" pos:column="58"/></name> <name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">sha1<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="71">unsigned<pos:position pos:line="1" pos:column="79"/></name></type> <name pos:line="1" pos:column="80">lookup_flags<pos:position pos:line="1" pos:column="92"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="93"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">ret<pos:position pos:line="3" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="18">has_suffix<pos:position pos:line="3" pos:column="28"/></name></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">cp<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/*
	 * "name~3" is "name^^^", "name~" is "name~1", and "name^" is "name^1".
	 */</comment>
	<expr_stmt><expr><name pos:line="9" pos:column="9">has_suffix<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">=<pos:position pos:line="9" pos:column="21"/></operator> <literal type="number" pos:line="9" pos:column="22">0<pos:position pos:line="9" pos:column="23"/></literal></expr>;<pos:position pos:line="9" pos:column="24"/></expr_stmt>
	<for pos:line="10" pos:column="9">for <control pos:line="10" pos:column="13">(<init><expr><name pos:line="10" pos:column="14">cp<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">=<pos:position pos:line="10" pos:column="18"/></operator> <name pos:line="10" pos:column="19">name<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">+<pos:position pos:line="10" pos:column="25"/></operator> <name pos:line="10" pos:column="26">len<pos:position pos:line="10" pos:column="29"/></name> <operator pos:line="10" pos:column="30">-<pos:position pos:line="10" pos:column="31"/></operator> <literal type="number" pos:line="10" pos:column="32">1<pos:position pos:line="10" pos:column="33"/></literal></expr>;<pos:position pos:line="10" pos:column="34"/></init> <condition><expr><name pos:line="10" pos:column="35">name<pos:position pos:line="10" pos:column="39"/></name> <operator pos:line="10" pos:column="40">&lt;=<pos:position pos:line="10" pos:column="45"/></operator> <name pos:line="10" pos:column="43">cp<pos:position pos:line="10" pos:column="45"/></name></expr>;<pos:position pos:line="10" pos:column="46"/></condition> <incr><expr><name pos:line="10" pos:column="47">cp<pos:position pos:line="10" pos:column="49"/></name><operator pos:line="10" pos:column="49">--<pos:position pos:line="10" pos:column="51"/></operator></expr></incr>)<pos:position pos:line="10" pos:column="52"/></control> <block pos:line="10" pos:column="53">{
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">int<pos:position pos:line="11" pos:column="20"/></name></type> <name pos:line="11" pos:column="21">ch<pos:position pos:line="11" pos:column="23"/></name> <init pos:line="11" pos:column="24">= <expr><operator pos:line="11" pos:column="26">*<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="27">cp<pos:position pos:line="11" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><literal type="char" pos:line="12" pos:column="21">'0'<pos:position pos:line="12" pos:column="24"/></literal> <operator pos:line="12" pos:column="25">&lt;=<pos:position pos:line="12" pos:column="30"/></operator> <name pos:line="12" pos:column="28">ch<pos:position pos:line="12" pos:column="30"/></name> <operator pos:line="12" pos:column="31">&amp;&amp;<pos:position pos:line="12" pos:column="41"/></operator> <name pos:line="12" pos:column="34">ch<pos:position pos:line="12" pos:column="36"/></name> <operator pos:line="12" pos:column="37">&lt;=<pos:position pos:line="12" pos:column="42"/></operator> <literal type="char" pos:line="12" pos:column="40">'9'<pos:position pos:line="12" pos:column="43"/></literal></expr>)<pos:position pos:line="12" pos:column="44"/></condition><then pos:line="12" pos:column="44">
			<block type="pseudo"><continue pos:line="13" pos:column="25">continue;<pos:position pos:line="13" pos:column="34"/></continue></block></then></if>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name pos:line="14" pos:column="21">ch<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">==<pos:position pos:line="14" pos:column="26"/></operator> <literal type="char" pos:line="14" pos:column="27">'~'<pos:position pos:line="14" pos:column="30"/></literal> <operator pos:line="14" pos:column="31">||<pos:position pos:line="14" pos:column="33"/></operator> <name pos:line="14" pos:column="34">ch<pos:position pos:line="14" pos:column="36"/></name> <operator pos:line="14" pos:column="37">==<pos:position pos:line="14" pos:column="39"/></operator> <literal type="char" pos:line="14" pos:column="40">'^'<pos:position pos:line="14" pos:column="43"/></literal></expr>)<pos:position pos:line="14" pos:column="44"/></condition><then pos:line="14" pos:column="44">
			<block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="25">has_suffix<pos:position pos:line="15" pos:column="35"/></name> <operator pos:line="15" pos:column="36">=<pos:position pos:line="15" pos:column="37"/></operator> <name pos:line="15" pos:column="38">ch<pos:position pos:line="15" pos:column="40"/></name></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt></block></then></if>
		<break pos:line="16" pos:column="17">break;<pos:position pos:line="16" pos:column="23"/></break>
	}<pos:position pos:line="17" pos:column="10"/></block></for>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">has_suffix<pos:position pos:line="19" pos:column="23"/></name></expr>)<pos:position pos:line="19" pos:column="24"/></condition><then pos:line="19" pos:column="24"> <block pos:line="19" pos:column="25">{
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">int<pos:position pos:line="20" pos:column="20"/></name></type> <name pos:line="20" pos:column="21">num<pos:position pos:line="20" pos:column="24"/></name> <init pos:line="20" pos:column="25">= <expr><literal type="number" pos:line="20" pos:column="27">0<pos:position pos:line="20" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="20" pos:column="29"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="21" pos:column="17">int<pos:position pos:line="21" pos:column="20"/></name></type> <name pos:line="21" pos:column="21">len1<pos:position pos:line="21" pos:column="25"/></name> <init pos:line="21" pos:column="26">= <expr><name pos:line="21" pos:column="28">cp<pos:position pos:line="21" pos:column="30"/></name> <operator pos:line="21" pos:column="31">-<pos:position pos:line="21" pos:column="32"/></operator> <name pos:line="21" pos:column="33">name<pos:position pos:line="21" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="38"/></decl_stmt>
		<expr_stmt><expr><name pos:line="22" pos:column="17">cp<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">++<pos:position pos:line="22" pos:column="21"/></operator></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt>
		<while pos:line="23" pos:column="17">while <condition pos:line="23" pos:column="23">(<expr><name pos:line="23" pos:column="24">cp<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">&lt;<pos:position pos:line="23" pos:column="31"/></operator> <name pos:line="23" pos:column="29">name<pos:position pos:line="23" pos:column="33"/></name> <operator pos:line="23" pos:column="34">+<pos:position pos:line="23" pos:column="35"/></operator> <name pos:line="23" pos:column="36">len<pos:position pos:line="23" pos:column="39"/></name></expr>)<pos:position pos:line="23" pos:column="40"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="25">num<pos:position pos:line="24" pos:column="28"/></name> <operator pos:line="24" pos:column="29">=<pos:position pos:line="24" pos:column="30"/></operator> <name pos:line="24" pos:column="31">num<pos:position pos:line="24" pos:column="34"/></name> <operator pos:line="24" pos:column="35">*<pos:position pos:line="24" pos:column="36"/></operator> <literal type="number" pos:line="24" pos:column="37">10<pos:position pos:line="24" pos:column="39"/></literal> <operator pos:line="24" pos:column="40">+<pos:position pos:line="24" pos:column="41"/></operator> <operator pos:line="24" pos:column="42">*<pos:position pos:line="24" pos:column="43"/></operator><name pos:line="24" pos:column="43">cp<pos:position pos:line="24" pos:column="45"/></name><operator pos:line="24" pos:column="45">++<pos:position pos:line="24" pos:column="47"/></operator> <operator pos:line="24" pos:column="48">-<pos:position pos:line="24" pos:column="49"/></operator> <literal type="char" pos:line="24" pos:column="50">'0'<pos:position pos:line="24" pos:column="53"/></literal></expr>;<pos:position pos:line="24" pos:column="54"/></expr_stmt></block></while>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><operator pos:line="25" pos:column="21">!<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="22">num<pos:position pos:line="25" pos:column="25"/></name> <operator pos:line="25" pos:column="26">&amp;&amp;<pos:position pos:line="25" pos:column="36"/></operator> <name pos:line="25" pos:column="29">len1<pos:position pos:line="25" pos:column="33"/></name> <operator pos:line="25" pos:column="34">==<pos:position pos:line="25" pos:column="36"/></operator> <name pos:line="25" pos:column="37">len<pos:position pos:line="25" pos:column="40"/></name> <operator pos:line="25" pos:column="41">-<pos:position pos:line="25" pos:column="42"/></operator> <literal type="number" pos:line="25" pos:column="43">1<pos:position pos:line="25" pos:column="44"/></literal></expr>)<pos:position pos:line="25" pos:column="45"/></condition><then pos:line="25" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="25">num<pos:position pos:line="26" pos:column="28"/></name> <operator pos:line="26" pos:column="29">=<pos:position pos:line="26" pos:column="30"/></operator> <literal type="number" pos:line="26" pos:column="31">1<pos:position pos:line="26" pos:column="32"/></literal></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt></block></then></if>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">has_suffix<pos:position pos:line="27" pos:column="31"/></name> <operator pos:line="27" pos:column="32">==<pos:position pos:line="27" pos:column="34"/></operator> <literal type="char" pos:line="27" pos:column="35">'^'<pos:position pos:line="27" pos:column="38"/></literal></expr>)<pos:position pos:line="27" pos:column="39"/></condition><then pos:line="27" pos:column="39">
			<block type="pseudo"><return pos:line="28" pos:column="25">return <expr><call><name pos:line="28" pos:column="32">get_parent<pos:position pos:line="28" pos:column="42"/></name><argument_list pos:line="28" pos:column="42">(<argument><expr><name pos:line="28" pos:column="43">name<pos:position pos:line="28" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="49">len1<pos:position pos:line="28" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="55">sha1<pos:position pos:line="28" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="61">num<pos:position pos:line="28" pos:column="64"/></name></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="66"/></return></block></then></if>
		<comment type="block" pos:line="29" pos:column="17">/* else if (has_suffix == '~') -- goes without saying */</comment>
		<return pos:line="30" pos:column="17">return <expr><call><name pos:line="30" pos:column="24">get_nth_ancestor<pos:position pos:line="30" pos:column="40"/></name><argument_list pos:line="30" pos:column="40">(<argument><expr><name pos:line="30" pos:column="41">name<pos:position pos:line="30" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="47">len1<pos:position pos:line="30" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="53">sha1<pos:position pos:line="30" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="59">num<pos:position pos:line="30" pos:column="62"/></name></expr></argument>)<pos:position pos:line="30" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="64"/></return>
	}<pos:position pos:line="31" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="33" pos:column="9">ret<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator> <call><name pos:line="33" pos:column="15">peel_onion<pos:position pos:line="33" pos:column="25"/></name><argument_list pos:line="33" pos:column="25">(<argument><expr><name pos:line="33" pos:column="26">name<pos:position pos:line="33" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="32">len<pos:position pos:line="33" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="37">sha1<pos:position pos:line="33" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="43">lookup_flags<pos:position pos:line="33" pos:column="55"/></name></expr></argument>)<pos:position pos:line="33" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="57"/></expr_stmt>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="14">ret<pos:position pos:line="34" pos:column="17"/></name></expr>)<pos:position pos:line="34" pos:column="18"/></condition><then pos:line="34" pos:column="18">
		<block type="pseudo"><return pos:line="35" pos:column="17">return <expr><literal type="number" pos:line="35" pos:column="24">0<pos:position pos:line="35" pos:column="25"/></literal></expr>;<pos:position pos:line="35" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="37" pos:column="9">ret<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <call><name pos:line="37" pos:column="15">get_sha1_basic<pos:position pos:line="37" pos:column="29"/></name><argument_list pos:line="37" pos:column="29">(<argument><expr><name pos:line="37" pos:column="30">name<pos:position pos:line="37" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="36">len<pos:position pos:line="37" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="41">sha1<pos:position pos:line="37" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="47">lookup_flags<pos:position pos:line="37" pos:column="59"/></name></expr></argument>)<pos:position pos:line="37" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="61"/></expr_stmt>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">!<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="14">ret<pos:position pos:line="38" pos:column="17"/></name></expr>)<pos:position pos:line="38" pos:column="18"/></condition><then pos:line="38" pos:column="18">
		<block type="pseudo"><return pos:line="39" pos:column="17">return <expr><literal type="number" pos:line="39" pos:column="24">0<pos:position pos:line="39" pos:column="25"/></literal></expr>;<pos:position pos:line="39" pos:column="26"/></return></block></then></if>

	<comment type="block" pos:line="41" pos:column="9">/* It could be describe output that is "SOMETHING-gXXXX" */</comment>
	<expr_stmt><expr><name pos:line="42" pos:column="9">ret<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">=<pos:position pos:line="42" pos:column="14"/></operator> <call><name pos:line="42" pos:column="15">get_describe_name<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><name pos:line="42" pos:column="33">name<pos:position pos:line="42" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="39">len<pos:position pos:line="42" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="44">sha1<pos:position pos:line="42" pos:column="48"/></name></expr></argument>)<pos:position pos:line="42" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="50"/></expr_stmt>
	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><operator pos:line="43" pos:column="13">!<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="14">ret<pos:position pos:line="43" pos:column="17"/></name></expr>)<pos:position pos:line="43" pos:column="18"/></condition><then pos:line="43" pos:column="18">
		<block type="pseudo"><return pos:line="44" pos:column="17">return <expr><literal type="number" pos:line="44" pos:column="24">0<pos:position pos:line="44" pos:column="25"/></literal></expr>;<pos:position pos:line="44" pos:column="26"/></return></block></then></if>

	<return pos:line="46" pos:column="9">return <expr><call><name pos:line="46" pos:column="16">get_short_sha1<pos:position pos:line="46" pos:column="30"/></name><argument_list pos:line="46" pos:column="30">(<argument><expr><name pos:line="46" pos:column="31">name<pos:position pos:line="46" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="37">len<pos:position pos:line="46" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="42">sha1<pos:position pos:line="46" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="48">lookup_flags<pos:position pos:line="46" pos:column="60"/></name></expr></argument>)<pos:position pos:line="46" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="62"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
