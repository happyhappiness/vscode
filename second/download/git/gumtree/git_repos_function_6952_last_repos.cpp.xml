<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6952_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">sift_states_backward<pos:position pos:line="3" pos:column="21"/></name> <parameter_list pos:line="3" pos:column="22">(<parameter><decl><type><specifier pos:line="3" pos:column="23">const<pos:position pos:line="3" pos:column="28"/></specifier> <name pos:line="3" pos:column="29">re_match_context_t<pos:position pos:line="3" pos:column="47"/></name> <modifier pos:line="3" pos:column="48">*<pos:position pos:line="3" pos:column="49"/></modifier></type><name pos:line="3" pos:column="49">mctx<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="55">re_sift_context_t<pos:position pos:line="3" pos:column="72"/></name> <modifier pos:line="3" pos:column="73">*<pos:position pos:line="3" pos:column="74"/></modifier></type><name pos:line="3" pos:column="74">sctx<pos:position pos:line="3" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="79"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">reg_errcode_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">err<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">null_cnt<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><literal type="number" pos:line="6" pos:column="18">0<pos:position pos:line="6" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">str_idx<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><name><name pos:line="7" pos:column="17">sctx<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">-&gt;<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="23">last_str_idx<pos:position pos:line="7" pos:column="35"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="36"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">re_node_set<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">cur_dest<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>

<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">DEBUG<pos:position pos:line="10" pos:column="13"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="11" pos:column="3">assert<pos:position pos:line="11" pos:column="9"/></name> <argument_list pos:line="11" pos:column="10">(<argument><expr><name><name pos:line="11" pos:column="11">mctx<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">-&gt;<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="17">state_log<pos:position pos:line="11" pos:column="26"/></name></name> <operator pos:line="11" pos:column="27">!=<pos:position pos:line="11" pos:column="29"/></operator> <name pos:line="11" pos:column="30">NULL<pos:position pos:line="11" pos:column="34"/></name> <operator pos:line="11" pos:column="35">&amp;&amp;<pos:position pos:line="11" pos:column="45"/></operator> <name><name pos:line="11" pos:column="38">mctx<pos:position pos:line="11" pos:column="42"/></name><operator pos:line="11" pos:column="42">-&gt;<pos:position pos:line="11" pos:column="47"/></operator><name pos:line="11" pos:column="44">state_log<pos:position pos:line="11" pos:column="53"/></name><index pos:line="11" pos:column="53">[<expr><name pos:line="11" pos:column="54">str_idx<pos:position pos:line="11" pos:column="61"/></name></expr>]<pos:position pos:line="11" pos:column="62"/></index></name> <operator pos:line="11" pos:column="63">!=<pos:position pos:line="11" pos:column="65"/></operator> <name pos:line="11" pos:column="66">NULL<pos:position pos:line="11" pos:column="70"/></name></expr></argument>)<pos:position pos:line="11" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="72"/></expr_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="14" pos:column="3">/* Build sifted state_log[str_idx].  It has the nodes which can epsilon
     transit to the last_node and the last_node itself.  */</comment>
  <expr_stmt><expr><name pos:line="16" pos:column="3">err<pos:position pos:line="16" pos:column="6"/></name> <operator pos:line="16" pos:column="7">=<pos:position pos:line="16" pos:column="8"/></operator> <call><name pos:line="16" pos:column="9">re_node_set_init_1<pos:position pos:line="16" pos:column="27"/></name> <argument_list pos:line="16" pos:column="28">(<argument><expr><operator pos:line="16" pos:column="29">&amp;<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="30">cur_dest<pos:position pos:line="16" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="40">sctx<pos:position pos:line="16" pos:column="44"/></name><operator pos:line="16" pos:column="44">-&gt;<pos:position pos:line="16" pos:column="49"/></operator><name pos:line="16" pos:column="46">last_node<pos:position pos:line="16" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="57"/></expr_stmt>
  <if pos:line="17" pos:column="3">if <condition pos:line="17" pos:column="6">(<expr><call><name pos:line="17" pos:column="7">BE<pos:position pos:line="17" pos:column="9"/></name> <argument_list pos:line="17" pos:column="10">(<argument><expr><name pos:line="17" pos:column="11">err<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">!=<pos:position pos:line="17" pos:column="17"/></operator> <name pos:line="17" pos:column="18">REG_NOERROR<pos:position pos:line="17" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="31">0<pos:position pos:line="17" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="34"/></condition><then pos:line="17" pos:column="34">
    <block type="pseudo"><return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">err<pos:position pos:line="18" pos:column="15"/></name></expr>;<pos:position pos:line="18" pos:column="16"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="19" pos:column="3">err<pos:position pos:line="19" pos:column="6"/></name> <operator pos:line="19" pos:column="7">=<pos:position pos:line="19" pos:column="8"/></operator> <call><name pos:line="19" pos:column="9">update_cur_sifted_state<pos:position pos:line="19" pos:column="32"/></name> <argument_list pos:line="19" pos:column="33">(<argument><expr><name pos:line="19" pos:column="34">mctx<pos:position pos:line="19" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="40">sctx<pos:position pos:line="19" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="46">str_idx<pos:position pos:line="19" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="55">&amp;<pos:position pos:line="19" pos:column="60"/></operator><name pos:line="19" pos:column="56">cur_dest<pos:position pos:line="19" pos:column="64"/></name></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="66"/></expr_stmt>
  <if pos:line="20" pos:column="3">if <condition pos:line="20" pos:column="6">(<expr><call><name pos:line="20" pos:column="7">BE<pos:position pos:line="20" pos:column="9"/></name> <argument_list pos:line="20" pos:column="10">(<argument><expr><name pos:line="20" pos:column="11">err<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">!=<pos:position pos:line="20" pos:column="17"/></operator> <name pos:line="20" pos:column="18">REG_NOERROR<pos:position pos:line="20" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="31">0<pos:position pos:line="20" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="34"/></condition><then pos:line="20" pos:column="34">
    <block type="pseudo"><goto pos:line="21" pos:column="5">goto <name pos:line="21" pos:column="10">free_return<pos:position pos:line="21" pos:column="21"/></name>;<pos:position pos:line="21" pos:column="22"/></goto></block></then></if>

  <comment type="block" pos:line="23" pos:column="3">/* Then check each states in the state_log.  */</comment>
  <while pos:line="24" pos:column="3">while <condition pos:line="24" pos:column="9">(<expr><name pos:line="24" pos:column="10">str_idx<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">&gt;<pos:position pos:line="24" pos:column="22"/></operator> <literal type="number" pos:line="24" pos:column="20">0<pos:position pos:line="24" pos:column="21"/></literal></expr>)<pos:position pos:line="24" pos:column="22"/></condition>
    <block pos:line="25" pos:column="5">{
      <comment type="block" pos:line="26" pos:column="7">/* Update counters.  */</comment>
      <expr_stmt><expr><name pos:line="27" pos:column="7">null_cnt<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <ternary><condition><expr><operator pos:line="27" pos:column="18">(<pos:position pos:line="27" pos:column="19"/></operator><name><name pos:line="27" pos:column="19">sctx<pos:position pos:line="27" pos:column="23"/></name><operator pos:line="27" pos:column="23">-&gt;<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="25">sifted_states<pos:position pos:line="27" pos:column="38"/></name><index pos:line="27" pos:column="38">[<expr><name pos:line="27" pos:column="39">str_idx<pos:position pos:line="27" pos:column="46"/></name></expr>]<pos:position pos:line="27" pos:column="47"/></index></name> <operator pos:line="27" pos:column="48">==<pos:position pos:line="27" pos:column="50"/></operator> <name pos:line="27" pos:column="51">NULL<pos:position pos:line="27" pos:column="55"/></name><operator pos:line="27" pos:column="55">)<pos:position pos:line="27" pos:column="56"/></operator></expr> ?<pos:position pos:line="27" pos:column="58"/></condition><then pos:line="27" pos:column="58"> <expr><name pos:line="27" pos:column="59">null_cnt<pos:position pos:line="27" pos:column="67"/></name> <operator pos:line="27" pos:column="68">+<pos:position pos:line="27" pos:column="69"/></operator> <literal type="number" pos:line="27" pos:column="70">1<pos:position pos:line="27" pos:column="71"/></literal></expr> <pos:position pos:line="27" pos:column="72"/></then><else pos:line="27" pos:column="72">: <expr><literal type="number" pos:line="27" pos:column="74">0<pos:position pos:line="27" pos:column="75"/></literal></expr></else></ternary></expr>;<pos:position pos:line="27" pos:column="76"/></expr_stmt>
      <if pos:line="28" pos:column="7">if <condition pos:line="28" pos:column="10">(<expr><name pos:line="28" pos:column="11">null_cnt<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">&gt;<pos:position pos:line="28" pos:column="24"/></operator> <name><name pos:line="28" pos:column="22">mctx<pos:position pos:line="28" pos:column="26"/></name><operator pos:line="28" pos:column="26">-&gt;<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="28">max_mb_elem_len<pos:position pos:line="28" pos:column="43"/></name></name></expr>)<pos:position pos:line="28" pos:column="44"/></condition><then pos:line="28" pos:column="44">
	<block pos:line="29" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="30" pos:column="11">memset<pos:position pos:line="30" pos:column="17"/></name> <argument_list pos:line="30" pos:column="18">(<argument><expr><name><name pos:line="30" pos:column="19">sctx<pos:position pos:line="30" pos:column="23"/></name><operator pos:line="30" pos:column="23">-&gt;<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="25">sifted_states<pos:position pos:line="30" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="30" pos:column="40">'\0'<pos:position pos:line="30" pos:column="44"/></literal></expr></argument>,
		  <argument><expr><sizeof pos:line="31" pos:column="19">sizeof <argument_list pos:line="31" pos:column="26">(<argument><expr><name pos:line="31" pos:column="27">re_dfastate_t<pos:position pos:line="31" pos:column="40"/></name> <operator pos:line="31" pos:column="41">*<pos:position pos:line="31" pos:column="42"/></operator></expr></argument>)<pos:position pos:line="31" pos:column="43"/></argument_list></sizeof> <operator pos:line="31" pos:column="44">*<pos:position pos:line="31" pos:column="45"/></operator> <name pos:line="31" pos:column="46">str_idx<pos:position pos:line="31" pos:column="53"/></name></expr></argument>)<pos:position pos:line="31" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="55"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="32" pos:column="11">re_node_set_free<pos:position pos:line="32" pos:column="27"/></name> <argument_list pos:line="32" pos:column="28">(<argument><expr><operator pos:line="32" pos:column="29">&amp;<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="30">cur_dest<pos:position pos:line="32" pos:column="38"/></name></expr></argument>)<pos:position pos:line="32" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="40"/></expr_stmt>
	  <return pos:line="33" pos:column="11">return <expr><name pos:line="33" pos:column="18">REG_NOERROR<pos:position pos:line="33" pos:column="29"/></name></expr>;<pos:position pos:line="33" pos:column="30"/></return>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="35" pos:column="7">re_node_set_empty<pos:position pos:line="35" pos:column="24"/></name> <argument_list pos:line="35" pos:column="25">(<argument><expr><operator pos:line="35" pos:column="26">&amp;<pos:position pos:line="35" pos:column="31"/></operator><name pos:line="35" pos:column="27">cur_dest<pos:position pos:line="35" pos:column="35"/></name></expr></argument>)<pos:position pos:line="35" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="36" pos:column="7">--<pos:position pos:line="36" pos:column="9"/></operator><name pos:line="36" pos:column="9">str_idx<pos:position pos:line="36" pos:column="16"/></name></expr>;<pos:position pos:line="36" pos:column="17"/></expr_stmt>

      <if pos:line="38" pos:column="7">if <condition pos:line="38" pos:column="10">(<expr><name><name pos:line="38" pos:column="11">mctx<pos:position pos:line="38" pos:column="15"/></name><operator pos:line="38" pos:column="15">-&gt;<pos:position pos:line="38" pos:column="20"/></operator><name pos:line="38" pos:column="17">state_log<pos:position pos:line="38" pos:column="26"/></name><index pos:line="38" pos:column="26">[<expr><name pos:line="38" pos:column="27">str_idx<pos:position pos:line="38" pos:column="34"/></name></expr>]<pos:position pos:line="38" pos:column="35"/></index></name></expr>)<pos:position pos:line="38" pos:column="36"/></condition><then pos:line="38" pos:column="36">
	<block pos:line="39" pos:column="9">{
	  <expr_stmt><expr><name pos:line="40" pos:column="11">err<pos:position pos:line="40" pos:column="14"/></name> <operator pos:line="40" pos:column="15">=<pos:position pos:line="40" pos:column="16"/></operator> <call><name pos:line="40" pos:column="17">build_sifted_states<pos:position pos:line="40" pos:column="36"/></name> <argument_list pos:line="40" pos:column="37">(<argument><expr><name pos:line="40" pos:column="38">mctx<pos:position pos:line="40" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="44">sctx<pos:position pos:line="40" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="50">str_idx<pos:position pos:line="40" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="59">&amp;<pos:position pos:line="40" pos:column="64"/></operator><name pos:line="40" pos:column="60">cur_dest<pos:position pos:line="40" pos:column="68"/></name></expr></argument>)<pos:position pos:line="40" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="70"/></expr_stmt>
	  <if pos:line="41" pos:column="11">if <condition pos:line="41" pos:column="14">(<expr><call><name pos:line="41" pos:column="15">BE<pos:position pos:line="41" pos:column="17"/></name> <argument_list pos:line="41" pos:column="18">(<argument><expr><name pos:line="41" pos:column="19">err<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">!=<pos:position pos:line="41" pos:column="25"/></operator> <name pos:line="41" pos:column="26">REG_NOERROR<pos:position pos:line="41" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="39">0<pos:position pos:line="41" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="42"/></condition><then pos:line="41" pos:column="42">
	    <block type="pseudo"><goto pos:line="42" pos:column="13">goto <name pos:line="42" pos:column="18">free_return<pos:position pos:line="42" pos:column="29"/></name>;<pos:position pos:line="42" pos:column="30"/></goto></block></then></if>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="45" pos:column="7">/* Add all the nodes which satisfy the following conditions:
	 - It can epsilon transit to a node in CUR_DEST.
	 - It is in CUR_SRC.
	 And update state_log.  */</comment>
      <expr_stmt><expr><name pos:line="49" pos:column="7">err<pos:position pos:line="49" pos:column="10"/></name> <operator pos:line="49" pos:column="11">=<pos:position pos:line="49" pos:column="12"/></operator> <call><name pos:line="49" pos:column="13">update_cur_sifted_state<pos:position pos:line="49" pos:column="36"/></name> <argument_list pos:line="49" pos:column="37">(<argument><expr><name pos:line="49" pos:column="38">mctx<pos:position pos:line="49" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="44">sctx<pos:position pos:line="49" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="50">str_idx<pos:position pos:line="49" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="59">&amp;<pos:position pos:line="49" pos:column="64"/></operator><name pos:line="49" pos:column="60">cur_dest<pos:position pos:line="49" pos:column="68"/></name></expr></argument>)<pos:position pos:line="49" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="70"/></expr_stmt>
      <if pos:line="50" pos:column="7">if <condition pos:line="50" pos:column="10">(<expr><call><name pos:line="50" pos:column="11">BE<pos:position pos:line="50" pos:column="13"/></name> <argument_list pos:line="50" pos:column="14">(<argument><expr><name pos:line="50" pos:column="15">err<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">!=<pos:position pos:line="50" pos:column="21"/></operator> <name pos:line="50" pos:column="22">REG_NOERROR<pos:position pos:line="50" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="35">0<pos:position pos:line="50" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="38"/></condition><then pos:line="50" pos:column="38">
	<block type="pseudo"><goto pos:line="51" pos:column="9">goto <name pos:line="51" pos:column="14">free_return<pos:position pos:line="51" pos:column="25"/></name>;<pos:position pos:line="51" pos:column="26"/></goto></block></then></if>
    }<pos:position pos:line="52" pos:column="6"/></block></while>
  <expr_stmt><expr><name pos:line="53" pos:column="3">err<pos:position pos:line="53" pos:column="6"/></name> <operator pos:line="53" pos:column="7">=<pos:position pos:line="53" pos:column="8"/></operator> <name pos:line="53" pos:column="9">REG_NOERROR<pos:position pos:line="53" pos:column="20"/></name></expr>;<pos:position pos:line="53" pos:column="21"/></expr_stmt>
 <label><name pos:line="54" pos:column="2">free_return<pos:position pos:line="54" pos:column="13"/></name>:<pos:position pos:line="54" pos:column="14"/></label>
  <expr_stmt><expr><call><name pos:line="55" pos:column="3">re_node_set_free<pos:position pos:line="55" pos:column="19"/></name> <argument_list pos:line="55" pos:column="20">(<argument><expr><operator pos:line="55" pos:column="21">&amp;<pos:position pos:line="55" pos:column="26"/></operator><name pos:line="55" pos:column="22">cur_dest<pos:position pos:line="55" pos:column="30"/></name></expr></argument>)<pos:position pos:line="55" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="32"/></expr_stmt>
  <return pos:line="56" pos:column="3">return <expr><name pos:line="56" pos:column="10">err<pos:position pos:line="56" pos:column="13"/></name></expr>;<pos:position pos:line="56" pos:column="14"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
