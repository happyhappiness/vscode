<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_837_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">deflate_to_pack<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">bulk_checkin_state<pos:position pos:line="1" pos:column="53"/></name></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">state<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
			   <parameter><decl><type><name pos:line="2" pos:column="28">unsigned<pos:position pos:line="2" pos:column="36"/></name> <name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name></type> <name><name pos:line="2" pos:column="42">result_sha1<pos:position pos:line="2" pos:column="53"/></name><index pos:line="2" pos:column="53">[]<pos:position pos:line="2" pos:column="55"/></index></name></decl></parameter>,
			   <parameter><decl><type><name pos:line="3" pos:column="28">int<pos:position pos:line="3" pos:column="31"/></name></type> <name pos:line="3" pos:column="32">fd<pos:position pos:line="3" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="36">size_t<pos:position pos:line="3" pos:column="42"/></name></type> <name pos:line="3" pos:column="43">size<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>,
			   <parameter><decl><type><name><name pos:line="4" pos:column="28">enum<pos:position pos:line="4" pos:column="32"/></name> <name pos:line="4" pos:column="33">object_type<pos:position pos:line="4" pos:column="44"/></name></name></type> <name pos:line="4" pos:column="45">type<pos:position pos:line="4" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="4" pos:column="51">const<pos:position pos:line="4" pos:column="56"/></specifier> <name pos:line="4" pos:column="57">char<pos:position pos:line="4" pos:column="61"/></name> <modifier pos:line="4" pos:column="62">*<pos:position pos:line="4" pos:column="63"/></modifier></type><name pos:line="4" pos:column="63">path<pos:position pos:line="4" pos:column="67"/></name></decl></parameter>,
			   <parameter><decl><type><name pos:line="5" pos:column="28">unsigned<pos:position pos:line="5" pos:column="36"/></name></type> <name pos:line="5" pos:column="37">flags<pos:position pos:line="5" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="43"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">off_t<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">seekback<pos:position pos:line="7" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="25">already_hashed_to<pos:position pos:line="7" pos:column="42"/></name></decl>;<pos:position pos:line="7" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">git_SHA_CTX<pos:position pos:line="8" pos:column="20"/></name></type> <name pos:line="8" pos:column="21">ctx<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">unsigned<pos:position pos:line="9" pos:column="17"/></name> <name pos:line="9" pos:column="18">char<pos:position pos:line="9" pos:column="22"/></name></type> <name><name pos:line="9" pos:column="23">obuf<pos:position pos:line="9" pos:column="27"/></name><index pos:line="9" pos:column="27">[<expr><literal type="number" pos:line="9" pos:column="28">16384<pos:position pos:line="9" pos:column="33"/></literal></expr>]<pos:position pos:line="9" pos:column="34"/></index></name></decl>;<pos:position pos:line="9" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">unsigned<pos:position pos:line="10" pos:column="17"/></name></type> <name pos:line="10" pos:column="18">header_len<pos:position pos:line="10" pos:column="28"/></name></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">sha1file_checkpoint<pos:position pos:line="11" pos:column="35"/></name></name></type> <name pos:line="11" pos:column="36">checkpoint<pos:position pos:line="11" pos:column="46"/></name></decl>;<pos:position pos:line="11" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">pack_idx_entry<pos:position pos:line="12" pos:column="30"/></name></name> <modifier pos:line="12" pos:column="31">*<pos:position pos:line="12" pos:column="32"/></modifier></type><name pos:line="12" pos:column="32">idx<pos:position pos:line="12" pos:column="35"/></name> <init pos:line="12" pos:column="36">= <expr><name pos:line="12" pos:column="38">NULL<pos:position pos:line="12" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="43"/></decl_stmt>

	<expr_stmt><expr><name pos:line="14" pos:column="9">seekback<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <call><name pos:line="14" pos:column="20">lseek<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><name pos:line="14" pos:column="26">fd<pos:position pos:line="14" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="30">0<pos:position pos:line="14" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="33">SEEK_CUR<pos:position pos:line="14" pos:column="41"/></name></expr></argument>)<pos:position pos:line="14" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="43"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">seekback<pos:position pos:line="15" pos:column="21"/></name> <operator pos:line="15" pos:column="22">==<pos:position pos:line="15" pos:column="24"/></operator> <operator pos:line="15" pos:column="25">(<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="26">off_t<pos:position pos:line="15" pos:column="31"/></name><operator pos:line="15" pos:column="31">)<pos:position pos:line="15" pos:column="32"/></operator> <operator pos:line="15" pos:column="33">-<pos:position pos:line="15" pos:column="34"/></operator><literal type="number" pos:line="15" pos:column="34">1<pos:position pos:line="15" pos:column="35"/></literal></expr>)<pos:position pos:line="15" pos:column="36"/></condition><then pos:line="15" pos:column="36">
		<block type="pseudo"><return pos:line="16" pos:column="17">return <expr><call><name pos:line="16" pos:column="24">error<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><literal type="string" pos:line="16" pos:column="30">"cannot find the current offset"<pos:position pos:line="16" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="64"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="18" pos:column="9">header_len<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">=<pos:position pos:line="18" pos:column="21"/></operator> <call><name pos:line="18" pos:column="22">xsnprintf<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><operator pos:line="18" pos:column="32">(<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="33">char<pos:position pos:line="18" pos:column="37"/></name> <operator pos:line="18" pos:column="38">*<pos:position pos:line="18" pos:column="39"/></operator><operator pos:line="18" pos:column="39">)<pos:position pos:line="18" pos:column="40"/></operator><name pos:line="18" pos:column="40">obuf<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="46">sizeof<argument_list pos:line="18" pos:column="52">(<argument><expr><name pos:line="18" pos:column="53">obuf<pos:position pos:line="18" pos:column="57"/></name></expr></argument>)<pos:position pos:line="18" pos:column="58"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="60">"%s %"<pos:position pos:line="18" pos:column="66"/></literal> <name pos:line="18" pos:column="67">PRIuMAX<pos:position pos:line="18" pos:column="74"/></name></expr></argument>,
			       <argument><expr><name><typename pos:line="19" pos:column="32">typename<pos:position pos:line="19" pos:column="40"/></typename></name><operator pos:line="19" pos:column="40">(<pos:position pos:line="19" pos:column="41"/></operator><name pos:line="19" pos:column="41">type<pos:position pos:line="19" pos:column="45"/></name><operator pos:line="19" pos:column="45">)<pos:position pos:line="19" pos:column="46"/></operator></expr></argument>, <argument><expr><operator pos:line="19" pos:column="48">(<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="49">uintmax_t<pos:position pos:line="19" pos:column="58"/></name><operator pos:line="19" pos:column="58">)<pos:position pos:line="19" pos:column="59"/></operator><name pos:line="19" pos:column="59">size<pos:position pos:line="19" pos:column="63"/></name></expr></argument>)<pos:position pos:line="19" pos:column="64"/></argument_list></call> <operator pos:line="19" pos:column="65">+<pos:position pos:line="19" pos:column="66"/></operator> <literal type="number" pos:line="19" pos:column="67">1<pos:position pos:line="19" pos:column="68"/></literal></expr>;<pos:position pos:line="19" pos:column="69"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">git_SHA1_Init<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><operator pos:line="20" pos:column="23">&amp;<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="24">ctx<pos:position pos:line="20" pos:column="27"/></name></expr></argument>)<pos:position pos:line="20" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">git_SHA1_Update<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><operator pos:line="21" pos:column="25">&amp;<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="26">ctx<pos:position pos:line="21" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="31">obuf<pos:position pos:line="21" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="37">header_len<pos:position pos:line="21" pos:column="47"/></name></expr></argument>)<pos:position pos:line="21" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="49"/></expr_stmt>

	<comment type="block" pos:line="23" pos:column="9">/* Note: idx is non-NULL when we are writing */</comment>
	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">(<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="14">flags<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">&amp;<pos:position pos:line="24" pos:column="25"/></operator> <name pos:line="24" pos:column="22">HASH_WRITE_OBJECT<pos:position pos:line="24" pos:column="39"/></name><operator pos:line="24" pos:column="39">)<pos:position pos:line="24" pos:column="40"/></operator> <operator pos:line="24" pos:column="41">!=<pos:position pos:line="24" pos:column="43"/></operator> <literal type="number" pos:line="24" pos:column="44">0<pos:position pos:line="24" pos:column="45"/></literal></expr>)<pos:position pos:line="24" pos:column="46"/></condition><then pos:line="24" pos:column="46">
		<block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="17">idx<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <call><name pos:line="25" pos:column="23">xcalloc<pos:position pos:line="25" pos:column="30"/></name><argument_list pos:line="25" pos:column="30">(<argument><expr><literal type="number" pos:line="25" pos:column="31">1<pos:position pos:line="25" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="34">sizeof<argument_list pos:line="25" pos:column="40">(<argument><expr><operator pos:line="25" pos:column="41">*<pos:position pos:line="25" pos:column="42"/></operator><name pos:line="25" pos:column="42">idx<pos:position pos:line="25" pos:column="45"/></name></expr></argument>)<pos:position pos:line="25" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="48"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="27" pos:column="9">already_hashed_to<pos:position pos:line="27" pos:column="26"/></name> <operator pos:line="27" pos:column="27">=<pos:position pos:line="27" pos:column="28"/></operator> <literal type="number" pos:line="27" pos:column="29">0<pos:position pos:line="27" pos:column="30"/></literal></expr>;<pos:position pos:line="27" pos:column="31"/></expr_stmt>

	<while pos:line="29" pos:column="9">while <condition pos:line="29" pos:column="15">(<expr><literal type="number" pos:line="29" pos:column="16">1<pos:position pos:line="29" pos:column="17"/></literal></expr>)<pos:position pos:line="29" pos:column="18"/></condition> <block pos:line="29" pos:column="19">{
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">prepare_to_stream<pos:position pos:line="30" pos:column="34"/></name><argument_list pos:line="30" pos:column="34">(<argument><expr><name pos:line="30" pos:column="35">state<pos:position pos:line="30" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="42">flags<pos:position pos:line="30" pos:column="47"/></name></expr></argument>)<pos:position pos:line="30" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="49"/></expr_stmt>
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">idx<pos:position pos:line="31" pos:column="24"/></name></expr>)<pos:position pos:line="31" pos:column="25"/></condition><then pos:line="31" pos:column="25"> <block pos:line="31" pos:column="26">{
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">sha1file_checkpoint<pos:position pos:line="32" pos:column="44"/></name><argument_list pos:line="32" pos:column="44">(<argument><expr><name><name pos:line="32" pos:column="45">state<pos:position pos:line="32" pos:column="50"/></name><operator pos:line="32" pos:column="50">-&gt;<pos:position pos:line="32" pos:column="55"/></operator><name pos:line="32" pos:column="52">f<pos:position pos:line="32" pos:column="53"/></name></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="55">&amp;<pos:position pos:line="32" pos:column="60"/></operator><name pos:line="32" pos:column="56">checkpoint<pos:position pos:line="32" pos:column="66"/></name></expr></argument>)<pos:position pos:line="32" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="68"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="33" pos:column="25">idx<pos:position pos:line="33" pos:column="28"/></name><operator pos:line="33" pos:column="28">-&gt;<pos:position pos:line="33" pos:column="33"/></operator><name pos:line="33" pos:column="30">offset<pos:position pos:line="33" pos:column="36"/></name></name> <operator pos:line="33" pos:column="37">=<pos:position pos:line="33" pos:column="38"/></operator> <name><name pos:line="33" pos:column="39">state<pos:position pos:line="33" pos:column="44"/></name><operator pos:line="33" pos:column="44">-&gt;<pos:position pos:line="33" pos:column="49"/></operator><name pos:line="33" pos:column="46">offset<pos:position pos:line="33" pos:column="52"/></name></name></expr>;<pos:position pos:line="33" pos:column="53"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">crc32_begin<pos:position pos:line="34" pos:column="36"/></name><argument_list pos:line="34" pos:column="36">(<argument><expr><name><name pos:line="34" pos:column="37">state<pos:position pos:line="34" pos:column="42"/></name><operator pos:line="34" pos:column="42">-&gt;<pos:position pos:line="34" pos:column="47"/></operator><name pos:line="34" pos:column="44">f<pos:position pos:line="34" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="47"/></expr_stmt>
		}<pos:position pos:line="35" pos:column="18"/></block></then></if>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><operator pos:line="36" pos:column="21">!<pos:position pos:line="36" pos:column="22"/></operator><call><name pos:line="36" pos:column="22">stream_to_pack<pos:position pos:line="36" pos:column="36"/></name><argument_list pos:line="36" pos:column="36">(<argument><expr><name pos:line="36" pos:column="37">state<pos:position pos:line="36" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="44">&amp;<pos:position pos:line="36" pos:column="49"/></operator><name pos:line="36" pos:column="45">ctx<pos:position pos:line="36" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="50">&amp;<pos:position pos:line="36" pos:column="55"/></operator><name pos:line="36" pos:column="51">already_hashed_to<pos:position pos:line="36" pos:column="68"/></name></expr></argument>,
				    <argument><expr><name pos:line="37" pos:column="37">fd<pos:position pos:line="37" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="41">size<pos:position pos:line="37" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="47">type<pos:position pos:line="37" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="53">path<pos:position pos:line="37" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="59">flags<pos:position pos:line="37" pos:column="64"/></name></expr></argument>)<pos:position pos:line="37" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="66"/></condition><then pos:line="37" pos:column="66">
			<block type="pseudo"><break pos:line="38" pos:column="25">break;<pos:position pos:line="38" pos:column="31"/></break></block></then></if>
		<comment type="block" pos:line="39" pos:column="17">/*
		 * Writing this object to the current pack will make
		 * it too big; we need to truncate it, start a new
		 * pack, and write into it.
		 */</comment>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><operator pos:line="44" pos:column="21">!<pos:position pos:line="44" pos:column="22"/></operator><name pos:line="44" pos:column="22">idx<pos:position pos:line="44" pos:column="25"/></name></expr>)<pos:position pos:line="44" pos:column="26"/></condition><then pos:line="44" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="25">die<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">(<argument><expr><literal type="string" pos:line="45" pos:column="29">"BUG: should not happen"<pos:position pos:line="45" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="55"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">sha1file_truncate<pos:position pos:line="46" pos:column="34"/></name><argument_list pos:line="46" pos:column="34">(<argument><expr><name><name pos:line="46" pos:column="35">state<pos:position pos:line="46" pos:column="40"/></name><operator pos:line="46" pos:column="40">-&gt;<pos:position pos:line="46" pos:column="45"/></operator><name pos:line="46" pos:column="42">f<pos:position pos:line="46" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="45">&amp;<pos:position pos:line="46" pos:column="50"/></operator><name pos:line="46" pos:column="46">checkpoint<pos:position pos:line="46" pos:column="56"/></name></expr></argument>)<pos:position pos:line="46" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="47" pos:column="17">state<pos:position pos:line="47" pos:column="22"/></name><operator pos:line="47" pos:column="22">-&gt;<pos:position pos:line="47" pos:column="27"/></operator><name pos:line="47" pos:column="24">offset<pos:position pos:line="47" pos:column="30"/></name></name> <operator pos:line="47" pos:column="31">=<pos:position pos:line="47" pos:column="32"/></operator> <name><name pos:line="47" pos:column="33">checkpoint<pos:position pos:line="47" pos:column="43"/></name><operator pos:line="47" pos:column="43">.<pos:position pos:line="47" pos:column="44"/></operator><name pos:line="47" pos:column="44">offset<pos:position pos:line="47" pos:column="50"/></name></name></expr>;<pos:position pos:line="47" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="48" pos:column="17">finish_bulk_checkin<pos:position pos:line="48" pos:column="36"/></name><argument_list pos:line="48" pos:column="36">(<argument><expr><name pos:line="48" pos:column="37">state<pos:position pos:line="48" pos:column="42"/></name></expr></argument>)<pos:position pos:line="48" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="44"/></expr_stmt>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><call><name pos:line="49" pos:column="21">lseek<pos:position pos:line="49" pos:column="26"/></name><argument_list pos:line="49" pos:column="26">(<argument><expr><name pos:line="49" pos:column="27">fd<pos:position pos:line="49" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="31">seekback<pos:position pos:line="49" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="41">SEEK_SET<pos:position pos:line="49" pos:column="49"/></name></expr></argument>)<pos:position pos:line="49" pos:column="50"/></argument_list></call> <operator pos:line="49" pos:column="51">==<pos:position pos:line="49" pos:column="53"/></operator> <operator pos:line="49" pos:column="54">(<pos:position pos:line="49" pos:column="55"/></operator><name pos:line="49" pos:column="55">off_t<pos:position pos:line="49" pos:column="60"/></name><operator pos:line="49" pos:column="60">)<pos:position pos:line="49" pos:column="61"/></operator> <operator pos:line="49" pos:column="62">-<pos:position pos:line="49" pos:column="63"/></operator><literal type="number" pos:line="49" pos:column="63">1<pos:position pos:line="49" pos:column="64"/></literal></expr>)<pos:position pos:line="49" pos:column="65"/></condition><then pos:line="49" pos:column="65">
			<block type="pseudo"><return pos:line="50" pos:column="25">return <expr><call><name pos:line="50" pos:column="32">error<pos:position pos:line="50" pos:column="37"/></name><argument_list pos:line="50" pos:column="37">(<argument><expr><literal type="string" pos:line="50" pos:column="38">"cannot seek back"<pos:position pos:line="50" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="58"/></return></block></then></if>
	}<pos:position pos:line="51" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="52" pos:column="9">git_SHA1_Final<pos:position pos:line="52" pos:column="23"/></name><argument_list pos:line="52" pos:column="23">(<argument><expr><name pos:line="52" pos:column="24">result_sha1<pos:position pos:line="52" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="37">&amp;<pos:position pos:line="52" pos:column="42"/></operator><name pos:line="52" pos:column="38">ctx<pos:position pos:line="52" pos:column="41"/></name></expr></argument>)<pos:position pos:line="52" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="43"/></expr_stmt>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><operator pos:line="53" pos:column="13">!<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="14">idx<pos:position pos:line="53" pos:column="17"/></name></expr>)<pos:position pos:line="53" pos:column="18"/></condition><then pos:line="53" pos:column="18">
		<block type="pseudo"><return pos:line="54" pos:column="17">return <expr><literal type="number" pos:line="54" pos:column="24">0<pos:position pos:line="54" pos:column="25"/></literal></expr>;<pos:position pos:line="54" pos:column="26"/></return></block></then></if>

	<expr_stmt><expr><name><name pos:line="56" pos:column="9">idx<pos:position pos:line="56" pos:column="12"/></name><operator pos:line="56" pos:column="12">-&gt;<pos:position pos:line="56" pos:column="17"/></operator><name pos:line="56" pos:column="14">crc32<pos:position pos:line="56" pos:column="19"/></name></name> <operator pos:line="56" pos:column="20">=<pos:position pos:line="56" pos:column="21"/></operator> <call><name pos:line="56" pos:column="22">crc32_end<pos:position pos:line="56" pos:column="31"/></name><argument_list pos:line="56" pos:column="31">(<argument><expr><name><name pos:line="56" pos:column="32">state<pos:position pos:line="56" pos:column="37"/></name><operator pos:line="56" pos:column="37">-&gt;<pos:position pos:line="56" pos:column="42"/></operator><name pos:line="56" pos:column="39">f<pos:position pos:line="56" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="42"/></expr_stmt>
	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><call><name pos:line="57" pos:column="13">already_written<pos:position pos:line="57" pos:column="28"/></name><argument_list pos:line="57" pos:column="28">(<argument><expr><name pos:line="57" pos:column="29">state<pos:position pos:line="57" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="36">result_sha1<pos:position pos:line="57" pos:column="47"/></name></expr></argument>)<pos:position pos:line="57" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="49"/></condition><then pos:line="57" pos:column="49"> <block pos:line="57" pos:column="50">{
		<expr_stmt><expr><call><name pos:line="58" pos:column="17">sha1file_truncate<pos:position pos:line="58" pos:column="34"/></name><argument_list pos:line="58" pos:column="34">(<argument><expr><name><name pos:line="58" pos:column="35">state<pos:position pos:line="58" pos:column="40"/></name><operator pos:line="58" pos:column="40">-&gt;<pos:position pos:line="58" pos:column="45"/></operator><name pos:line="58" pos:column="42">f<pos:position pos:line="58" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="45">&amp;<pos:position pos:line="58" pos:column="50"/></operator><name pos:line="58" pos:column="46">checkpoint<pos:position pos:line="58" pos:column="56"/></name></expr></argument>)<pos:position pos:line="58" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="59" pos:column="17">state<pos:position pos:line="59" pos:column="22"/></name><operator pos:line="59" pos:column="22">-&gt;<pos:position pos:line="59" pos:column="27"/></operator><name pos:line="59" pos:column="24">offset<pos:position pos:line="59" pos:column="30"/></name></name> <operator pos:line="59" pos:column="31">=<pos:position pos:line="59" pos:column="32"/></operator> <name><name pos:line="59" pos:column="33">checkpoint<pos:position pos:line="59" pos:column="43"/></name><operator pos:line="59" pos:column="43">.<pos:position pos:line="59" pos:column="44"/></operator><name pos:line="59" pos:column="44">offset<pos:position pos:line="59" pos:column="50"/></name></name></expr>;<pos:position pos:line="59" pos:column="51"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="60" pos:column="17">free<pos:position pos:line="60" pos:column="21"/></name><argument_list pos:line="60" pos:column="21">(<argument><expr><name pos:line="60" pos:column="22">idx<pos:position pos:line="60" pos:column="25"/></name></expr></argument>)<pos:position pos:line="60" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="61" pos:column="10"/></block></then> <else pos:line="61" pos:column="11">else <block pos:line="61" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">hashcpy<pos:position pos:line="62" pos:column="24"/></name><argument_list pos:line="62" pos:column="24">(<argument><expr><name><name pos:line="62" pos:column="25">idx<pos:position pos:line="62" pos:column="28"/></name><operator pos:line="62" pos:column="28">-&gt;<pos:position pos:line="62" pos:column="33"/></operator><name pos:line="62" pos:column="30">oid<pos:position pos:line="62" pos:column="33"/></name><operator pos:line="62" pos:column="33">.<pos:position pos:line="62" pos:column="34"/></operator><name pos:line="62" pos:column="34">hash<pos:position pos:line="62" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="40">result_sha1<pos:position pos:line="62" pos:column="51"/></name></expr></argument>)<pos:position pos:line="62" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="63" pos:column="17">ALLOC_GROW<pos:position pos:line="63" pos:column="27"/></name><argument_list pos:line="63" pos:column="27">(<argument><expr><name><name pos:line="63" pos:column="28">state<pos:position pos:line="63" pos:column="33"/></name><operator pos:line="63" pos:column="33">-&gt;<pos:position pos:line="63" pos:column="38"/></operator><name pos:line="63" pos:column="35">written<pos:position pos:line="63" pos:column="42"/></name></name></expr></argument>,
			   <argument><expr><name><name pos:line="64" pos:column="28">state<pos:position pos:line="64" pos:column="33"/></name><operator pos:line="64" pos:column="33">-&gt;<pos:position pos:line="64" pos:column="38"/></operator><name pos:line="64" pos:column="35">nr_written<pos:position pos:line="64" pos:column="45"/></name></name> <operator pos:line="64" pos:column="46">+<pos:position pos:line="64" pos:column="47"/></operator> <literal type="number" pos:line="64" pos:column="48">1<pos:position pos:line="64" pos:column="49"/></literal></expr></argument>,
			   <argument><expr><name><name pos:line="65" pos:column="28">state<pos:position pos:line="65" pos:column="33"/></name><operator pos:line="65" pos:column="33">-&gt;<pos:position pos:line="65" pos:column="38"/></operator><name pos:line="65" pos:column="35">alloc_written<pos:position pos:line="65" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="66" pos:column="17">state<pos:position pos:line="66" pos:column="22"/></name><operator pos:line="66" pos:column="22">-&gt;<pos:position pos:line="66" pos:column="27"/></operator><name pos:line="66" pos:column="24">written<pos:position pos:line="66" pos:column="31"/></name><index pos:line="66" pos:column="31">[<expr><name><name pos:line="66" pos:column="32">state<pos:position pos:line="66" pos:column="37"/></name><operator pos:line="66" pos:column="37">-&gt;<pos:position pos:line="66" pos:column="42"/></operator><name pos:line="66" pos:column="39">nr_written<pos:position pos:line="66" pos:column="49"/></name></name><operator pos:line="66" pos:column="49">++<pos:position pos:line="66" pos:column="51"/></operator></expr>]<pos:position pos:line="66" pos:column="52"/></index></name> <operator pos:line="66" pos:column="53">=<pos:position pos:line="66" pos:column="54"/></operator> <name pos:line="66" pos:column="55">idx<pos:position pos:line="66" pos:column="58"/></name></expr>;<pos:position pos:line="66" pos:column="59"/></expr_stmt>
	}<pos:position pos:line="67" pos:column="10"/></block></else></if>
	<return pos:line="68" pos:column="9">return <expr><literal type="number" pos:line="68" pos:column="16">0<pos:position pos:line="68" pos:column="17"/></literal></expr>;<pos:position pos:line="68" pos:column="18"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
