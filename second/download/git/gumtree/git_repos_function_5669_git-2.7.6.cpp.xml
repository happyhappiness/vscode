<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5669_git-2.7.6.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">cmd_ls_tree<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name pos:line="1" pos:column="17">int<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">argc<pos:position pos:line="1" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier><modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">argv<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">prefix<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">char<pos:position pos:line="3" pos:column="22"/></name></type> <name><name pos:line="3" pos:column="23">sha1<pos:position pos:line="3" pos:column="27"/></name><index pos:line="3" pos:column="27">[<expr><literal type="number" pos:line="3" pos:column="28">20<pos:position pos:line="3" pos:column="30"/></literal></expr>]<pos:position pos:line="3" pos:column="31"/></index></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">tree<pos:position pos:line="4" pos:column="20"/></name></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">tree<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">i<pos:position pos:line="5" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="16">full_tree<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><literal type="number" pos:line="5" pos:column="28">0<pos:position pos:line="5" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name><name pos:line="6" pos:column="15">struct<pos:position pos:line="6" pos:column="21"/></name> <name pos:line="6" pos:column="22">option<pos:position pos:line="6" pos:column="28"/></name></name></type> <name><name pos:line="6" pos:column="29">ls_tree_options<pos:position pos:line="6" pos:column="44"/></name><index pos:line="6" pos:column="44">[]<pos:position pos:line="6" pos:column="46"/></index></name> <init pos:line="6" pos:column="47">= <expr><block pos:line="6" pos:column="49">{
		<expr><call><name pos:line="7" pos:column="17">OPT_BIT<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">(<argument><expr><literal type="char" pos:line="7" pos:column="25">'d'<pos:position pos:line="7" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="30">NULL<pos:position pos:line="7" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="36">&amp;<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="37">ls_options<pos:position pos:line="7" pos:column="47"/></name></expr></argument>, <argument><expr><call><name pos:line="7" pos:column="49">N_<pos:position pos:line="7" pos:column="51"/></name><argument_list pos:line="7" pos:column="51">(<argument><expr><literal type="string" pos:line="7" pos:column="52">"only show trees"<pos:position pos:line="7" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="70"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="8" pos:column="25">LS_TREE_ONLY<pos:position pos:line="8" pos:column="37"/></name></expr></argument>)<pos:position pos:line="8" pos:column="38"/></argument_list></call></expr>,
		<expr><call><name pos:line="9" pos:column="17">OPT_BIT<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><literal type="char" pos:line="9" pos:column="25">'r'<pos:position pos:line="9" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="30">NULL<pos:position pos:line="9" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="36">&amp;<pos:position pos:line="9" pos:column="41"/></operator><name pos:line="9" pos:column="37">ls_options<pos:position pos:line="9" pos:column="47"/></name></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="49">N_<pos:position pos:line="9" pos:column="51"/></name><argument_list pos:line="9" pos:column="51">(<argument><expr><literal type="string" pos:line="9" pos:column="52">"recurse into subtrees"<pos:position pos:line="9" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="76"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="10" pos:column="25">LS_RECURSIVE<pos:position pos:line="10" pos:column="37"/></name></expr></argument>)<pos:position pos:line="10" pos:column="38"/></argument_list></call></expr>,
		<expr><call><name pos:line="11" pos:column="17">OPT_BIT<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><literal type="char" pos:line="11" pos:column="25">'t'<pos:position pos:line="11" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="30">NULL<pos:position pos:line="11" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="36">&amp;<pos:position pos:line="11" pos:column="41"/></operator><name pos:line="11" pos:column="37">ls_options<pos:position pos:line="11" pos:column="47"/></name></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="49">N_<pos:position pos:line="11" pos:column="51"/></name><argument_list pos:line="11" pos:column="51">(<argument><expr><literal type="string" pos:line="11" pos:column="52">"show trees when recursing"<pos:position pos:line="11" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="80"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="12" pos:column="25">LS_SHOW_TREES<pos:position pos:line="12" pos:column="38"/></name></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></call></expr>,
		<expr><call><name pos:line="13" pos:column="17">OPT_SET_INT<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><literal type="char" pos:line="13" pos:column="29">'z'<pos:position pos:line="13" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="34">NULL<pos:position pos:line="13" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="40">&amp;<pos:position pos:line="13" pos:column="45"/></operator><name pos:line="13" pos:column="41">line_termination<pos:position pos:line="13" pos:column="57"/></name></expr></argument>,
			    <argument><expr><call><name pos:line="14" pos:column="29">N_<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">(<argument><expr><literal type="string" pos:line="14" pos:column="32">"terminate entries with NUL byte"<pos:position pos:line="14" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="68">0<pos:position pos:line="14" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="70"/></argument_list></call></expr>,
		<expr><call><name pos:line="15" pos:column="17">OPT_BIT<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><literal type="char" pos:line="15" pos:column="25">'l'<pos:position pos:line="15" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="30">"long"<pos:position pos:line="15" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="15" pos:column="38">&amp;<pos:position pos:line="15" pos:column="43"/></operator><name pos:line="15" pos:column="39">ls_options<pos:position pos:line="15" pos:column="49"/></name></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="51">N_<pos:position pos:line="15" pos:column="53"/></name><argument_list pos:line="15" pos:column="53">(<argument><expr><literal type="string" pos:line="15" pos:column="54">"include object size"<pos:position pos:line="15" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="76"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="16" pos:column="25">LS_SHOW_SIZE<pos:position pos:line="16" pos:column="37"/></name></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call></expr>,
		<expr><call><name pos:line="17" pos:column="17">OPT_BIT<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><literal type="number" pos:line="17" pos:column="25">0<pos:position pos:line="17" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="28">"name-only"<pos:position pos:line="17" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="17" pos:column="41">&amp;<pos:position pos:line="17" pos:column="46"/></operator><name pos:line="17" pos:column="42">ls_options<pos:position pos:line="17" pos:column="52"/></name></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="54">N_<pos:position pos:line="17" pos:column="56"/></name><argument_list pos:line="17" pos:column="56">(<argument><expr><literal type="string" pos:line="17" pos:column="57">"list only filenames"<pos:position pos:line="17" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="79"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="18" pos:column="25">LS_NAME_ONLY<pos:position pos:line="18" pos:column="37"/></name></expr></argument>)<pos:position pos:line="18" pos:column="38"/></argument_list></call></expr>,
		<expr><call><name pos:line="19" pos:column="17">OPT_BIT<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><literal type="number" pos:line="19" pos:column="25">0<pos:position pos:line="19" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="28">"name-status"<pos:position pos:line="19" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="19" pos:column="43">&amp;<pos:position pos:line="19" pos:column="48"/></operator><name pos:line="19" pos:column="44">ls_options<pos:position pos:line="19" pos:column="54"/></name></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="56">N_<pos:position pos:line="19" pos:column="58"/></name><argument_list pos:line="19" pos:column="58">(<argument><expr><literal type="string" pos:line="19" pos:column="59">"list only filenames"<pos:position pos:line="19" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="81"/></argument_list></call></expr></argument>,
			<argument><expr><name pos:line="20" pos:column="25">LS_NAME_ONLY<pos:position pos:line="20" pos:column="37"/></name></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></call></expr>,
		<expr><call><name pos:line="21" pos:column="17">OPT_SET_INT<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><literal type="number" pos:line="21" pos:column="29">0<pos:position pos:line="21" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="32">"full-name"<pos:position pos:line="21" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="21" pos:column="45">&amp;<pos:position pos:line="21" pos:column="50"/></operator><name pos:line="21" pos:column="46">chomp_prefix<pos:position pos:line="21" pos:column="58"/></name></expr></argument>,
			    <argument><expr><call><name pos:line="22" pos:column="29">N_<pos:position pos:line="22" pos:column="31"/></name><argument_list pos:line="22" pos:column="31">(<argument><expr><literal type="string" pos:line="22" pos:column="32">"use full path names"<pos:position pos:line="22" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="56">0<pos:position pos:line="22" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="58"/></argument_list></call></expr>,
		<expr><call><name pos:line="23" pos:column="17">OPT_BOOL<pos:position pos:line="23" pos:column="25"/></name><argument_list pos:line="23" pos:column="25">(<argument><expr><literal type="number" pos:line="23" pos:column="26">0<pos:position pos:line="23" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="29">"full-tree"<pos:position pos:line="23" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="23" pos:column="42">&amp;<pos:position pos:line="23" pos:column="47"/></operator><name pos:line="23" pos:column="43">full_tree<pos:position pos:line="23" pos:column="52"/></name></expr></argument>,
			 <argument><expr><call><name pos:line="24" pos:column="26">N_<pos:position pos:line="24" pos:column="28"/></name><argument_list pos:line="24" pos:column="28">(<argument><expr><literal type="string" pos:line="24" pos:column="29">"list entire tree; not just current directory "<pos:position pos:line="24" pos:column="76"/></literal>
			    <literal type="string" pos:line="25" pos:column="29">"(implies --full-name)"<pos:position pos:line="25" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call></expr>,
		<expr><call><name pos:line="26" pos:column="17">OPT__ABBREV<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><operator pos:line="26" pos:column="29">&amp;<pos:position pos:line="26" pos:column="34"/></operator><name pos:line="26" pos:column="30">abbrev<pos:position pos:line="26" pos:column="36"/></name></expr></argument>)<pos:position pos:line="26" pos:column="37"/></argument_list></call></expr>,
		<macro><name pos:line="27" pos:column="17">OPT_END<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">()<pos:position pos:line="27" pos:column="26"/></argument_list></macro>
	}<pos:position pos:line="28" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="28" pos:column="11"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="30" pos:column="9">git_config<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><name pos:line="30" pos:column="20">git_default_config<pos:position pos:line="30" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="40">NULL<pos:position pos:line="30" pos:column="44"/></name></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name pos:line="31" pos:column="9">ls_tree_prefix<pos:position pos:line="31" pos:column="23"/></name> <operator pos:line="31" pos:column="24">=<pos:position pos:line="31" pos:column="25"/></operator> <name pos:line="31" pos:column="26">prefix<pos:position pos:line="31" pos:column="32"/></name></expr>;<pos:position pos:line="31" pos:column="33"/></expr_stmt>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">prefix<pos:position pos:line="32" pos:column="19"/></name> <operator pos:line="32" pos:column="20">&amp;&amp;<pos:position pos:line="32" pos:column="30"/></operator> <operator pos:line="32" pos:column="23">*<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="24">prefix<pos:position pos:line="32" pos:column="30"/></name></expr>)<pos:position pos:line="32" pos:column="31"/></condition><then pos:line="32" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="17">chomp_prefix<pos:position pos:line="33" pos:column="29"/></name> <operator pos:line="33" pos:column="30">=<pos:position pos:line="33" pos:column="31"/></operator> <call><name pos:line="33" pos:column="32">strlen<pos:position pos:line="33" pos:column="38"/></name><argument_list pos:line="33" pos:column="38">(<argument><expr><name pos:line="33" pos:column="39">prefix<pos:position pos:line="33" pos:column="45"/></name></expr></argument>)<pos:position pos:line="33" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="47"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="35" pos:column="9">argc<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">=<pos:position pos:line="35" pos:column="15"/></operator> <call><name pos:line="35" pos:column="16">parse_options<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><name pos:line="35" pos:column="30">argc<pos:position pos:line="35" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="36">argv<pos:position pos:line="35" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="42">prefix<pos:position pos:line="35" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="50">ls_tree_options<pos:position pos:line="35" pos:column="65"/></name></expr></argument>,
			     <argument><expr><name pos:line="36" pos:column="30">ls_tree_usage<pos:position pos:line="36" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="45">0<pos:position pos:line="36" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="48"/></expr_stmt>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">full_tree<pos:position pos:line="37" pos:column="22"/></name></expr>)<pos:position pos:line="37" pos:column="23"/></condition><then pos:line="37" pos:column="23"> <block pos:line="37" pos:column="24">{
		<expr_stmt><expr><name pos:line="38" pos:column="17">ls_tree_prefix<pos:position pos:line="38" pos:column="31"/></name> <operator pos:line="38" pos:column="32">=<pos:position pos:line="38" pos:column="33"/></operator> <name pos:line="38" pos:column="34">prefix<pos:position pos:line="38" pos:column="40"/></name> <operator pos:line="38" pos:column="41">=<pos:position pos:line="38" pos:column="42"/></operator> <name pos:line="38" pos:column="43">NULL<pos:position pos:line="38" pos:column="47"/></name></expr>;<pos:position pos:line="38" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name pos:line="39" pos:column="17">chomp_prefix<pos:position pos:line="39" pos:column="29"/></name> <operator pos:line="39" pos:column="30">=<pos:position pos:line="39" pos:column="31"/></operator> <literal type="number" pos:line="39" pos:column="32">0<pos:position pos:line="39" pos:column="33"/></literal></expr>;<pos:position pos:line="39" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></then></if>
	<comment type="block" pos:line="41" pos:column="9">/* -d -r should imply -t, but -d by itself should not have to. */</comment>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">( <expr><operator pos:line="42" pos:column="14">(<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="15">LS_TREE_ONLY<pos:position pos:line="42" pos:column="27"/></name><operator pos:line="42" pos:column="27">|<pos:position pos:line="42" pos:column="28"/></operator><name pos:line="42" pos:column="28">LS_RECURSIVE<pos:position pos:line="42" pos:column="40"/></name><operator pos:line="42" pos:column="40">)<pos:position pos:line="42" pos:column="41"/></operator> <operator pos:line="42" pos:column="42">==<pos:position pos:line="42" pos:column="44"/></operator>
	    <operator pos:line="43" pos:column="13">(<pos:position pos:line="43" pos:column="14"/></operator><operator pos:line="43" pos:column="14">(<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="15">LS_TREE_ONLY<pos:position pos:line="43" pos:column="27"/></name><operator pos:line="43" pos:column="27">|<pos:position pos:line="43" pos:column="28"/></operator><name pos:line="43" pos:column="28">LS_RECURSIVE<pos:position pos:line="43" pos:column="40"/></name><operator pos:line="43" pos:column="40">)<pos:position pos:line="43" pos:column="41"/></operator> <operator pos:line="43" pos:column="42">&amp;<pos:position pos:line="43" pos:column="47"/></operator> <name pos:line="43" pos:column="44">ls_options<pos:position pos:line="43" pos:column="54"/></name><operator pos:line="43" pos:column="54">)<pos:position pos:line="43" pos:column="55"/></operator></expr>)<pos:position pos:line="43" pos:column="56"/></condition><then pos:line="43" pos:column="56">
		<block type="pseudo"><expr_stmt><expr><name pos:line="44" pos:column="17">ls_options<pos:position pos:line="44" pos:column="27"/></name> <operator pos:line="44" pos:column="28">|=<pos:position pos:line="44" pos:column="30"/></operator> <name pos:line="44" pos:column="31">LS_SHOW_TREES<pos:position pos:line="44" pos:column="44"/></name></expr>;<pos:position pos:line="44" pos:column="45"/></expr_stmt></block></then></if>

	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">argc<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">&lt;<pos:position pos:line="46" pos:column="22"/></operator> <literal type="number" pos:line="46" pos:column="20">1<pos:position pos:line="46" pos:column="21"/></literal></expr>)<pos:position pos:line="46" pos:column="22"/></condition><then pos:line="46" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="17">usage_with_options<pos:position pos:line="47" pos:column="35"/></name><argument_list pos:line="47" pos:column="35">(<argument><expr><name pos:line="47" pos:column="36">ls_tree_usage<pos:position pos:line="47" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="51">ls_tree_options<pos:position pos:line="47" pos:column="66"/></name></expr></argument>)<pos:position pos:line="47" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="68"/></expr_stmt></block></then></if>
	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><call><name pos:line="48" pos:column="13">get_sha1<pos:position pos:line="48" pos:column="21"/></name><argument_list pos:line="48" pos:column="21">(<argument><expr><name><name pos:line="48" pos:column="22">argv<pos:position pos:line="48" pos:column="26"/></name><index pos:line="48" pos:column="26">[<expr><literal type="number" pos:line="48" pos:column="27">0<pos:position pos:line="48" pos:column="28"/></literal></expr>]<pos:position pos:line="48" pos:column="29"/></index></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="31">sha1<pos:position pos:line="48" pos:column="35"/></name></expr></argument>)<pos:position pos:line="48" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="37"/></condition><then pos:line="48" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="17">die<pos:position pos:line="49" pos:column="20"/></name><argument_list pos:line="49" pos:column="20">(<argument><expr><literal type="string" pos:line="49" pos:column="21">"Not a valid object name %s"<pos:position pos:line="49" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="51">argv<pos:position pos:line="49" pos:column="55"/></name><index pos:line="49" pos:column="55">[<expr><literal type="number" pos:line="49" pos:column="56">0<pos:position pos:line="49" pos:column="57"/></literal></expr>]<pos:position pos:line="49" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="49" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="60"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="51" pos:column="9">/*
	 * show_recursive() rolls its own matching code and is
	 * generally ignorant of 'struct pathspec'. The magic mask
	 * cannot be lifted until it is converted to use
	 * match_pathspec() or tree_entry_interesting()
	 */</comment>
	<expr_stmt><expr><call><name pos:line="57" pos:column="9">parse_pathspec<pos:position pos:line="57" pos:column="23"/></name><argument_list pos:line="57" pos:column="23">(<argument><expr><operator pos:line="57" pos:column="24">&amp;<pos:position pos:line="57" pos:column="29"/></operator><name pos:line="57" pos:column="25">pathspec<pos:position pos:line="57" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="35">PATHSPEC_GLOB<pos:position pos:line="57" pos:column="48"/></name> <operator pos:line="57" pos:column="49">|<pos:position pos:line="57" pos:column="50"/></operator> <name pos:line="57" pos:column="51">PATHSPEC_ICASE<pos:position pos:line="57" pos:column="65"/></name> <operator pos:line="57" pos:column="66">|<pos:position pos:line="57" pos:column="67"/></operator>
				  <name pos:line="58" pos:column="35">PATHSPEC_EXCLUDE<pos:position pos:line="58" pos:column="51"/></name></expr></argument>,
		       <argument><expr><name pos:line="59" pos:column="24">PATHSPEC_PREFER_CWD<pos:position pos:line="59" pos:column="43"/></name></expr></argument>,
		       <argument><expr><name pos:line="60" pos:column="24">prefix<pos:position pos:line="60" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="32">argv<pos:position pos:line="60" pos:column="36"/></name> <operator pos:line="60" pos:column="37">+<pos:position pos:line="60" pos:column="38"/></operator> <literal type="number" pos:line="60" pos:column="39">1<pos:position pos:line="60" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="42"/></expr_stmt>
	<for pos:line="61" pos:column="9">for <control pos:line="61" pos:column="13">(<init><expr><name pos:line="61" pos:column="14">i<pos:position pos:line="61" pos:column="15"/></name> <operator pos:line="61" pos:column="16">=<pos:position pos:line="61" pos:column="17"/></operator> <literal type="number" pos:line="61" pos:column="18">0<pos:position pos:line="61" pos:column="19"/></literal></expr>;<pos:position pos:line="61" pos:column="20"/></init> <condition><expr><name pos:line="61" pos:column="21">i<pos:position pos:line="61" pos:column="22"/></name> <operator pos:line="61" pos:column="23">&lt;<pos:position pos:line="61" pos:column="27"/></operator> <name><name pos:line="61" pos:column="25">pathspec<pos:position pos:line="61" pos:column="33"/></name><operator pos:line="61" pos:column="33">.<pos:position pos:line="61" pos:column="34"/></operator><name pos:line="61" pos:column="34">nr<pos:position pos:line="61" pos:column="36"/></name></name></expr>;<pos:position pos:line="61" pos:column="37"/></condition> <incr><expr><name pos:line="61" pos:column="38">i<pos:position pos:line="61" pos:column="39"/></name><operator pos:line="61" pos:column="39">++<pos:position pos:line="61" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="61" pos:column="42"/></control>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="62" pos:column="17">pathspec<pos:position pos:line="62" pos:column="25"/></name><operator pos:line="62" pos:column="25">.<pos:position pos:line="62" pos:column="26"/></operator><name pos:line="62" pos:column="26">items<pos:position pos:line="62" pos:column="31"/></name><index pos:line="62" pos:column="31">[<expr><name pos:line="62" pos:column="32">i<pos:position pos:line="62" pos:column="33"/></name></expr>]<pos:position pos:line="62" pos:column="34"/></index></name><operator pos:line="62" pos:column="34">.<pos:position pos:line="62" pos:column="35"/></operator><name pos:line="62" pos:column="35">nowildcard_len<pos:position pos:line="62" pos:column="49"/></name> <operator pos:line="62" pos:column="50">=<pos:position pos:line="62" pos:column="51"/></operator> <name><name pos:line="62" pos:column="52">pathspec<pos:position pos:line="62" pos:column="60"/></name><operator pos:line="62" pos:column="60">.<pos:position pos:line="62" pos:column="61"/></operator><name pos:line="62" pos:column="61">items<pos:position pos:line="62" pos:column="66"/></name><index pos:line="62" pos:column="66">[<expr><name pos:line="62" pos:column="67">i<pos:position pos:line="62" pos:column="68"/></name></expr>]<pos:position pos:line="62" pos:column="69"/></index></name><operator pos:line="62" pos:column="69">.<pos:position pos:line="62" pos:column="70"/></operator><name pos:line="62" pos:column="70">len<pos:position pos:line="62" pos:column="73"/></name></expr>;<pos:position pos:line="62" pos:column="74"/></expr_stmt></block></for>
	<expr_stmt><expr><name><name pos:line="63" pos:column="9">pathspec<pos:position pos:line="63" pos:column="17"/></name><operator pos:line="63" pos:column="17">.<pos:position pos:line="63" pos:column="18"/></operator><name pos:line="63" pos:column="18">has_wildcard<pos:position pos:line="63" pos:column="30"/></name></name> <operator pos:line="63" pos:column="31">=<pos:position pos:line="63" pos:column="32"/></operator> <literal type="number" pos:line="63" pos:column="33">0<pos:position pos:line="63" pos:column="34"/></literal></expr>;<pos:position pos:line="63" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name pos:line="64" pos:column="9">tree<pos:position pos:line="64" pos:column="13"/></name> <operator pos:line="64" pos:column="14">=<pos:position pos:line="64" pos:column="15"/></operator> <call><name pos:line="64" pos:column="16">parse_tree_indirect<pos:position pos:line="64" pos:column="35"/></name><argument_list pos:line="64" pos:column="35">(<argument><expr><name pos:line="64" pos:column="36">sha1<pos:position pos:line="64" pos:column="40"/></name></expr></argument>)<pos:position pos:line="64" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="42"/></expr_stmt>
	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><operator pos:line="65" pos:column="13">!<pos:position pos:line="65" pos:column="14"/></operator><name pos:line="65" pos:column="14">tree<pos:position pos:line="65" pos:column="18"/></name></expr>)<pos:position pos:line="65" pos:column="19"/></condition><then pos:line="65" pos:column="19">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="66" pos:column="17">die<pos:position pos:line="66" pos:column="20"/></name><argument_list pos:line="66" pos:column="20">(<argument><expr><literal type="string" pos:line="66" pos:column="21">"not a tree object"<pos:position pos:line="66" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="42"/></expr_stmt></block></then></if>
	<return pos:line="67" pos:column="9">return <expr><operator pos:line="67" pos:column="16">!<pos:position pos:line="67" pos:column="17"/></operator><operator pos:line="67" pos:column="17">!<pos:position pos:line="67" pos:column="18"/></operator><call><name pos:line="67" pos:column="18">read_tree_recursive<pos:position pos:line="67" pos:column="37"/></name><argument_list pos:line="67" pos:column="37">(<argument><expr><name pos:line="67" pos:column="38">tree<pos:position pos:line="67" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="44">""<pos:position pos:line="67" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="48">0<pos:position pos:line="67" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="51">0<pos:position pos:line="67" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="67" pos:column="54">&amp;<pos:position pos:line="67" pos:column="59"/></operator><name pos:line="67" pos:column="55">pathspec<pos:position pos:line="67" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="65">show_tree<pos:position pos:line="67" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="76">NULL<pos:position pos:line="67" pos:column="80"/></name></expr></argument>)<pos:position pos:line="67" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="82"/></return>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
