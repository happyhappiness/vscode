<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1061.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">handle_range_dir<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(
	<parameter><decl><type><name><name pos:line="2" pos:column="9">struct<pos:position pos:line="2" pos:column="15"/></name> <name pos:line="2" pos:column="16">index_state<pos:position pos:line="2" pos:column="27"/></name></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">istate<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>,
	<parameter><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">k_start<pos:position pos:line="3" pos:column="20"/></name></decl></parameter>,
	<parameter><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">k_end<pos:position pos:line="4" pos:column="18"/></name></decl></parameter>,
	<parameter><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">dir_entry<pos:position pos:line="5" pos:column="25"/></name></name> <modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier></type><name pos:line="5" pos:column="27">parent<pos:position pos:line="5" pos:column="33"/></name></decl></parameter>,
	<parameter><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">strbuf<pos:position pos:line="6" pos:column="22"/></name></name> <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type><name pos:line="6" pos:column="24">prefix<pos:position pos:line="6" pos:column="30"/></name></decl></parameter>,
	<parameter><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">lazy_entry<pos:position pos:line="7" pos:column="26"/></name></name> <modifier pos:line="7" pos:column="27">*<pos:position pos:line="7" pos:column="28"/></modifier></type><name pos:line="7" pos:column="28">lazy_entries<pos:position pos:line="7" pos:column="40"/></name></decl></parameter>,
	<parameter><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">dir_entry<pos:position pos:line="8" pos:column="25"/></name></name> <modifier pos:line="8" pos:column="26">*<pos:position pos:line="8" pos:column="27"/></modifier><modifier pos:line="8" pos:column="27">*<pos:position pos:line="8" pos:column="28"/></modifier></type><name pos:line="8" pos:column="28">dir_new_out<pos:position pos:line="8" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="8" pos:column="40"/></parameter_list>
<block pos:line="9" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">rc<pos:position pos:line="10" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="17">k<pos:position pos:line="10" pos:column="18"/></name></decl>;<pos:position pos:line="10" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">input_prefix_len<pos:position pos:line="11" pos:column="29"/></name> <init pos:line="11" pos:column="30">= <expr><name><name pos:line="11" pos:column="32">prefix<pos:position pos:line="11" pos:column="38"/></name><operator pos:line="11" pos:column="38">-&gt;<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="40">len<pos:position pos:line="11" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">dir_entry<pos:position pos:line="12" pos:column="25"/></name></name> <modifier pos:line="12" pos:column="26">*<pos:position pos:line="12" pos:column="27"/></modifier></type><name pos:line="12" pos:column="27">dir_new<pos:position pos:line="12" pos:column="34"/></name></decl>;<pos:position pos:line="12" pos:column="35"/></decl_stmt>

	<expr_stmt><expr><name pos:line="14" pos:column="9">dir_new<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <call><name pos:line="14" pos:column="19">hash_dir_entry_with_parent_and_prefix<pos:position pos:line="14" pos:column="56"/></name><argument_list pos:line="14" pos:column="56">(<argument><expr><name pos:line="14" pos:column="57">istate<pos:position pos:line="14" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="65">parent<pos:position pos:line="14" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="73">prefix<pos:position pos:line="14" pos:column="79"/></name></expr></argument>)<pos:position pos:line="14" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="81"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="16" pos:column="9">strbuf_addch<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><name pos:line="16" pos:column="22">prefix<pos:position pos:line="16" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="16" pos:column="30">'/'<pos:position pos:line="16" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt>

	<comment type="block" pos:line="18" pos:column="9">/*
	 * Scan forward in the index array for index entries having the same
	 * path prefix (that are also in this directory).
	 */</comment>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">k_start<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">+<pos:position pos:line="22" pos:column="22"/></operator> <literal type="number" pos:line="22" pos:column="23">1<pos:position pos:line="22" pos:column="24"/></literal> <operator pos:line="22" pos:column="25">&gt;=<pos:position pos:line="22" pos:column="30"/></operator> <name pos:line="22" pos:column="28">k_end<pos:position pos:line="22" pos:column="33"/></name></expr>)<pos:position pos:line="22" pos:column="34"/></condition><then pos:line="22" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="17">k<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <name pos:line="23" pos:column="21">k_end<pos:position pos:line="23" pos:column="26"/></name></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt></block></then>
	<elseif pos:line="24" pos:column="9">else <if pos:line="24" pos:column="14">if <condition pos:line="24" pos:column="17">(<expr><call><name pos:line="24" pos:column="18">strncmp<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name><name pos:line="24" pos:column="26">istate<pos:position pos:line="24" pos:column="32"/></name><operator pos:line="24" pos:column="32">-&gt;<pos:position pos:line="24" pos:column="37"/></operator><name pos:line="24" pos:column="34">cache<pos:position pos:line="24" pos:column="39"/></name><index pos:line="24" pos:column="39">[<expr><name pos:line="24" pos:column="40">k_start<pos:position pos:line="24" pos:column="47"/></name> <operator pos:line="24" pos:column="48">+<pos:position pos:line="24" pos:column="49"/></operator> <literal type="number" pos:line="24" pos:column="50">1<pos:position pos:line="24" pos:column="51"/></literal></expr>]<pos:position pos:line="24" pos:column="52"/></index></name><operator pos:line="24" pos:column="52">-&gt;<pos:position pos:line="24" pos:column="57"/></operator><name pos:line="24" pos:column="54">name<pos:position pos:line="24" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="60">prefix<pos:position pos:line="24" pos:column="66"/></name><operator pos:line="24" pos:column="66">-&gt;<pos:position pos:line="24" pos:column="71"/></operator><name pos:line="24" pos:column="68">buf<pos:position pos:line="24" pos:column="71"/></name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="73">prefix<pos:position pos:line="24" pos:column="79"/></name><operator pos:line="24" pos:column="79">-&gt;<pos:position pos:line="24" pos:column="84"/></operator><name pos:line="24" pos:column="81">len<pos:position pos:line="24" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="85"/></argument_list></call> <operator pos:line="24" pos:column="86">&gt;<pos:position pos:line="24" pos:column="90"/></operator> <literal type="number" pos:line="24" pos:column="88">0<pos:position pos:line="24" pos:column="89"/></literal></expr>)<pos:position pos:line="24" pos:column="90"/></condition><then pos:line="24" pos:column="90">
		<block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="17">k<pos:position pos:line="25" pos:column="18"/></name> <operator pos:line="25" pos:column="19">=<pos:position pos:line="25" pos:column="20"/></operator> <name pos:line="25" pos:column="21">k_start<pos:position pos:line="25" pos:column="28"/></name> <operator pos:line="25" pos:column="29">+<pos:position pos:line="25" pos:column="30"/></operator> <literal type="number" pos:line="25" pos:column="31">1<pos:position pos:line="25" pos:column="32"/></literal></expr>;<pos:position pos:line="25" pos:column="33"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="26" pos:column="9">else <if pos:line="26" pos:column="14">if <condition pos:line="26" pos:column="17">(<expr><call><name pos:line="26" pos:column="18">strncmp<pos:position pos:line="26" pos:column="25"/></name><argument_list pos:line="26" pos:column="25">(<argument><expr><name><name pos:line="26" pos:column="26">istate<pos:position pos:line="26" pos:column="32"/></name><operator pos:line="26" pos:column="32">-&gt;<pos:position pos:line="26" pos:column="37"/></operator><name pos:line="26" pos:column="34">cache<pos:position pos:line="26" pos:column="39"/></name><index pos:line="26" pos:column="39">[<expr><name pos:line="26" pos:column="40">k_end<pos:position pos:line="26" pos:column="45"/></name> <operator pos:line="26" pos:column="46">-<pos:position pos:line="26" pos:column="47"/></operator> <literal type="number" pos:line="26" pos:column="48">1<pos:position pos:line="26" pos:column="49"/></literal></expr>]<pos:position pos:line="26" pos:column="50"/></index></name><operator pos:line="26" pos:column="50">-&gt;<pos:position pos:line="26" pos:column="55"/></operator><name pos:line="26" pos:column="52">name<pos:position pos:line="26" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="58">prefix<pos:position pos:line="26" pos:column="64"/></name><operator pos:line="26" pos:column="64">-&gt;<pos:position pos:line="26" pos:column="69"/></operator><name pos:line="26" pos:column="66">buf<pos:position pos:line="26" pos:column="69"/></name></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="71">prefix<pos:position pos:line="26" pos:column="77"/></name><operator pos:line="26" pos:column="77">-&gt;<pos:position pos:line="26" pos:column="82"/></operator><name pos:line="26" pos:column="79">len<pos:position pos:line="26" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="83"/></argument_list></call> <operator pos:line="26" pos:column="84">==<pos:position pos:line="26" pos:column="86"/></operator> <literal type="number" pos:line="26" pos:column="87">0<pos:position pos:line="26" pos:column="88"/></literal></expr>)<pos:position pos:line="26" pos:column="89"/></condition><then pos:line="26" pos:column="89">
		<block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="17">k<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">=<pos:position pos:line="27" pos:column="20"/></operator> <name pos:line="27" pos:column="21">k_end<pos:position pos:line="27" pos:column="26"/></name></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt></block></then></if></elseif>
	<else pos:line="28" pos:column="9">else <block pos:line="28" pos:column="14">{
		<decl_stmt><decl><type><name pos:line="29" pos:column="17">int<pos:position pos:line="29" pos:column="20"/></name></type> <name pos:line="29" pos:column="21">begin<pos:position pos:line="29" pos:column="26"/></name> <init pos:line="29" pos:column="27">= <expr><name pos:line="29" pos:column="29">k_start<pos:position pos:line="29" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="29" pos:column="37"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="30" pos:column="17">int<pos:position pos:line="30" pos:column="20"/></name></type> <name pos:line="30" pos:column="21">end<pos:position pos:line="30" pos:column="24"/></name> <init pos:line="30" pos:column="25">= <expr><name pos:line="30" pos:column="27">k_end<pos:position pos:line="30" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="30" pos:column="33"/></decl_stmt>
		<while pos:line="31" pos:column="17">while <condition pos:line="31" pos:column="23">(<expr><name pos:line="31" pos:column="24">begin<pos:position pos:line="31" pos:column="29"/></name> <operator pos:line="31" pos:column="30">&lt;<pos:position pos:line="31" pos:column="34"/></operator> <name pos:line="31" pos:column="32">end<pos:position pos:line="31" pos:column="35"/></name></expr>)<pos:position pos:line="31" pos:column="36"/></condition> <block pos:line="31" pos:column="37">{
			<decl_stmt><decl><type><name pos:line="32" pos:column="25">int<pos:position pos:line="32" pos:column="28"/></name></type> <name pos:line="32" pos:column="29">mid<pos:position pos:line="32" pos:column="32"/></name> <init pos:line="32" pos:column="33">= <expr><operator pos:line="32" pos:column="35">(<pos:position pos:line="32" pos:column="36"/></operator><name pos:line="32" pos:column="36">begin<pos:position pos:line="32" pos:column="41"/></name> <operator pos:line="32" pos:column="42">+<pos:position pos:line="32" pos:column="43"/></operator> <name pos:line="32" pos:column="44">end<pos:position pos:line="32" pos:column="47"/></name><operator pos:line="32" pos:column="47">)<pos:position pos:line="32" pos:column="48"/></operator> <operator pos:line="32" pos:column="49">&gt;&gt;<pos:position pos:line="32" pos:column="54"/></operator> <literal type="number" pos:line="32" pos:column="52">1<pos:position pos:line="32" pos:column="53"/></literal></expr></init></decl>;<pos:position pos:line="32" pos:column="54"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="33" pos:column="25">int<pos:position pos:line="33" pos:column="28"/></name></type> <name pos:line="33" pos:column="29">cmp<pos:position pos:line="33" pos:column="32"/></name> <init pos:line="33" pos:column="33">= <expr><call><name pos:line="33" pos:column="35">strncmp<pos:position pos:line="33" pos:column="42"/></name><argument_list pos:line="33" pos:column="42">(<argument><expr><name><name pos:line="33" pos:column="43">istate<pos:position pos:line="33" pos:column="49"/></name><operator pos:line="33" pos:column="49">-&gt;<pos:position pos:line="33" pos:column="54"/></operator><name pos:line="33" pos:column="51">cache<pos:position pos:line="33" pos:column="56"/></name><index pos:line="33" pos:column="56">[<expr><name pos:line="33" pos:column="57">mid<pos:position pos:line="33" pos:column="60"/></name></expr>]<pos:position pos:line="33" pos:column="61"/></index></name><operator pos:line="33" pos:column="61">-&gt;<pos:position pos:line="33" pos:column="66"/></operator><name pos:line="33" pos:column="63">name<pos:position pos:line="33" pos:column="67"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="69">prefix<pos:position pos:line="33" pos:column="75"/></name><operator pos:line="33" pos:column="75">-&gt;<pos:position pos:line="33" pos:column="80"/></operator><name pos:line="33" pos:column="77">buf<pos:position pos:line="33" pos:column="80"/></name></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="82">prefix<pos:position pos:line="33" pos:column="88"/></name><operator pos:line="33" pos:column="88">-&gt;<pos:position pos:line="33" pos:column="93"/></operator><name pos:line="33" pos:column="90">len<pos:position pos:line="33" pos:column="93"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="94"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="95"/></decl_stmt>
			<if pos:line="34" pos:column="25">if <condition pos:line="34" pos:column="28">(<expr><name pos:line="34" pos:column="29">cmp<pos:position pos:line="34" pos:column="32"/></name> <operator pos:line="34" pos:column="33">==<pos:position pos:line="34" pos:column="35"/></operator> <literal type="number" pos:line="34" pos:column="36">0<pos:position pos:line="34" pos:column="37"/></literal></expr>)<pos:position pos:line="34" pos:column="38"/></condition><then pos:line="34" pos:column="38"> <comment type="block" pos:line="34" pos:column="39">/* mid has same prefix; look in second part */</comment>
				<block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="33">begin<pos:position pos:line="35" pos:column="38"/></name> <operator pos:line="35" pos:column="39">=<pos:position pos:line="35" pos:column="40"/></operator> <name pos:line="35" pos:column="41">mid<pos:position pos:line="35" pos:column="44"/></name> <operator pos:line="35" pos:column="45">+<pos:position pos:line="35" pos:column="46"/></operator> <literal type="number" pos:line="35" pos:column="47">1<pos:position pos:line="35" pos:column="48"/></literal></expr>;<pos:position pos:line="35" pos:column="49"/></expr_stmt></block></then>
			<elseif pos:line="36" pos:column="25">else <if pos:line="36" pos:column="30">if <condition pos:line="36" pos:column="33">(<expr><name pos:line="36" pos:column="34">cmp<pos:position pos:line="36" pos:column="37"/></name> <operator pos:line="36" pos:column="38">&gt;<pos:position pos:line="36" pos:column="42"/></operator> <literal type="number" pos:line="36" pos:column="40">0<pos:position pos:line="36" pos:column="41"/></literal></expr>)<pos:position pos:line="36" pos:column="42"/></condition><then pos:line="36" pos:column="42"> <comment type="block" pos:line="36" pos:column="43">/* mid is past group; look in first part */</comment>
				<block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="33">end<pos:position pos:line="37" pos:column="36"/></name> <operator pos:line="37" pos:column="37">=<pos:position pos:line="37" pos:column="38"/></operator> <name pos:line="37" pos:column="39">mid<pos:position pos:line="37" pos:column="42"/></name></expr>;<pos:position pos:line="37" pos:column="43"/></expr_stmt></block></then></if></elseif>
			<else pos:line="38" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="33">die<pos:position pos:line="39" pos:column="36"/></name><argument_list pos:line="39" pos:column="36">(<argument><expr><literal type="string" pos:line="39" pos:column="37">"cache entry out of order"<pos:position pos:line="39" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="65"/></expr_stmt></block></else></if>
		}<pos:position pos:line="40" pos:column="18"/></block></while>
		<expr_stmt><expr><name pos:line="41" pos:column="17">k<pos:position pos:line="41" pos:column="18"/></name> <operator pos:line="41" pos:column="19">=<pos:position pos:line="41" pos:column="20"/></operator> <name pos:line="41" pos:column="21">begin<pos:position pos:line="41" pos:column="26"/></name></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="42" pos:column="10"/></block></else></if>

	<comment type="block" pos:line="44" pos:column="9">/*
	 * Recurse and process what we can of this subset [k_start, k).
	 */</comment>
	<expr_stmt><expr><name pos:line="47" pos:column="9">rc<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">=<pos:position pos:line="47" pos:column="13"/></operator> <call><name pos:line="47" pos:column="14">handle_range_1<pos:position pos:line="47" pos:column="28"/></name><argument_list pos:line="47" pos:column="28">(<argument><expr><name pos:line="47" pos:column="29">istate<pos:position pos:line="47" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="37">k_start<pos:position pos:line="47" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="46">k<pos:position pos:line="47" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="49">dir_new<pos:position pos:line="47" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="58">prefix<pos:position pos:line="47" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="66">lazy_entries<pos:position pos:line="47" pos:column="78"/></name></expr></argument>)<pos:position pos:line="47" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="80"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="49" pos:column="9">strbuf_setlen<pos:position pos:line="49" pos:column="22"/></name><argument_list pos:line="49" pos:column="22">(<argument><expr><name pos:line="49" pos:column="23">prefix<pos:position pos:line="49" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="31">input_prefix_len<pos:position pos:line="49" pos:column="47"/></name></expr></argument>)<pos:position pos:line="49" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="49"/></expr_stmt>

	<expr_stmt><expr><operator pos:line="51" pos:column="9">*<pos:position pos:line="51" pos:column="10"/></operator><name pos:line="51" pos:column="10">dir_new_out<pos:position pos:line="51" pos:column="21"/></name> <operator pos:line="51" pos:column="22">=<pos:position pos:line="51" pos:column="23"/></operator> <name pos:line="51" pos:column="24">dir_new<pos:position pos:line="51" pos:column="31"/></name></expr>;<pos:position pos:line="51" pos:column="32"/></expr_stmt>
	<return pos:line="52" pos:column="9">return <expr><name pos:line="52" pos:column="16">rc<pos:position pos:line="52" pos:column="18"/></name></expr>;<pos:position pos:line="52" pos:column="19"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
