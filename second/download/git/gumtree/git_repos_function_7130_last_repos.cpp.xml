<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_7130_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">credential_read<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">credential<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">c<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">buf<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">line_len<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">key<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">value<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>

	<expr_stmt><expr><name pos:line="8" pos:column="9">key<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">=<pos:position pos:line="8" pos:column="14"/></operator> <name pos:line="8" pos:column="15">buf<pos:position pos:line="8" pos:column="18"/></name> <operator pos:line="8" pos:column="19">=<pos:position pos:line="8" pos:column="20"/></operator> <call><name pos:line="8" pos:column="21">g_malloc<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">(<argument><expr><literal type="number" pos:line="8" pos:column="30">1024<pos:position pos:line="8" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>

	<while pos:line="10" pos:column="9">while <condition pos:line="10" pos:column="15">(<expr><call><name pos:line="10" pos:column="16">fgets<pos:position pos:line="10" pos:column="21"/></name><argument_list pos:line="10" pos:column="21">(<argument><expr><name pos:line="10" pos:column="22">buf<pos:position pos:line="10" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="27">1024<pos:position pos:line="10" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="33">stdin<pos:position pos:line="10" pos:column="38"/></name></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="40"/></condition> <block pos:line="10" pos:column="41">{
		<expr_stmt><expr><name pos:line="11" pos:column="17">line_len<pos:position pos:line="11" pos:column="25"/></name> <operator pos:line="11" pos:column="26">=<pos:position pos:line="11" pos:column="27"/></operator> <call><name pos:line="11" pos:column="28">strlen<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument><expr><name pos:line="11" pos:column="35">buf<pos:position pos:line="11" pos:column="38"/></name></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>

		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><name pos:line="13" pos:column="21">line_len<pos:position pos:line="13" pos:column="29"/></name> <operator pos:line="13" pos:column="30">&amp;&amp;<pos:position pos:line="13" pos:column="40"/></operator> <name><name pos:line="13" pos:column="33">buf<pos:position pos:line="13" pos:column="36"/></name><index pos:line="13" pos:column="36">[<expr><name pos:line="13" pos:column="37">line_len<pos:position pos:line="13" pos:column="45"/></name><operator pos:line="13" pos:column="45">-<pos:position pos:line="13" pos:column="46"/></operator><literal type="number" pos:line="13" pos:column="46">1<pos:position pos:line="13" pos:column="47"/></literal></expr>]<pos:position pos:line="13" pos:column="48"/></index></name> <operator pos:line="13" pos:column="49">==<pos:position pos:line="13" pos:column="51"/></operator> <literal type="char" pos:line="13" pos:column="52">'\n'<pos:position pos:line="13" pos:column="56"/></literal></expr>)<pos:position pos:line="13" pos:column="57"/></condition><then pos:line="13" pos:column="57">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="14" pos:column="25">buf<pos:position pos:line="14" pos:column="28"/></name><index pos:line="14" pos:column="28">[<expr><operator pos:line="14" pos:column="29">--<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="31">line_len<pos:position pos:line="14" pos:column="39"/></name></expr>]<pos:position pos:line="14" pos:column="40"/></index></name> <operator pos:line="14" pos:column="41">=<pos:position pos:line="14" pos:column="42"/></operator> <literal type="char" pos:line="14" pos:column="43">'\0'<pos:position pos:line="14" pos:column="47"/></literal></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt></block></then></if>

		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><operator pos:line="16" pos:column="21">!<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">line_len<pos:position pos:line="16" pos:column="30"/></name></expr>)<pos:position pos:line="16" pos:column="31"/></condition><then pos:line="16" pos:column="31">
			<block type="pseudo"><break pos:line="17" pos:column="25">break;<pos:position pos:line="17" pos:column="31"/></break></block></then></if>

		<expr_stmt><expr><name pos:line="19" pos:column="17">value<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">=<pos:position pos:line="19" pos:column="24"/></operator> <call><name pos:line="19" pos:column="25">strchr<pos:position pos:line="19" pos:column="31"/></name><argument_list pos:line="19" pos:column="31">(<argument><expr><name pos:line="19" pos:column="32">buf<pos:position pos:line="19" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="19" pos:column="37">'='<pos:position pos:line="19" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><operator pos:line="20" pos:column="21">!<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">value<pos:position pos:line="20" pos:column="27"/></name></expr>)<pos:position pos:line="20" pos:column="28"/></condition><then pos:line="20" pos:column="28"> <block pos:line="20" pos:column="29">{
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">g_warning<pos:position pos:line="21" pos:column="34"/></name><argument_list pos:line="21" pos:column="34">(<argument><expr><literal type="string" pos:line="21" pos:column="35">"invalid credential line: %s"<pos:position pos:line="21" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="66">key<pos:position pos:line="21" pos:column="69"/></name></expr></argument>)<pos:position pos:line="21" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="71"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">g_free<pos:position pos:line="22" pos:column="31"/></name><argument_list pos:line="22" pos:column="31">(<argument><expr><name pos:line="22" pos:column="32">buf<pos:position pos:line="22" pos:column="35"/></name></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>
			<return pos:line="23" pos:column="25">return <expr><operator pos:line="23" pos:column="32">-<pos:position pos:line="23" pos:column="33"/></operator><literal type="number" pos:line="23" pos:column="33">1<pos:position pos:line="23" pos:column="34"/></literal></expr>;<pos:position pos:line="23" pos:column="35"/></return>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if>
		<expr_stmt><expr><operator pos:line="25" pos:column="17">*<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="18">value<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">++<pos:position pos:line="25" pos:column="25"/></operator> <operator pos:line="25" pos:column="26">=<pos:position pos:line="25" pos:column="27"/></operator> <literal type="char" pos:line="25" pos:column="28">'\0'<pos:position pos:line="25" pos:column="32"/></literal></expr>;<pos:position pos:line="25" pos:column="33"/></expr_stmt>

		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">!<pos:position pos:line="27" pos:column="22"/></operator><call><name pos:line="27" pos:column="22">strcmp<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">key<pos:position pos:line="27" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="34">"protocol"<pos:position pos:line="27" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="46"/></condition><then pos:line="27" pos:column="46"> <block pos:line="27" pos:column="47">{
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">g_free<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><name><name pos:line="28" pos:column="32">c<pos:position pos:line="28" pos:column="33"/></name><operator pos:line="28" pos:column="33">-&gt;<pos:position pos:line="28" pos:column="38"/></operator><name pos:line="28" pos:column="35">protocol<pos:position pos:line="28" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="29" pos:column="25">c<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">-&gt;<pos:position pos:line="29" pos:column="31"/></operator><name pos:line="29" pos:column="28">protocol<pos:position pos:line="29" pos:column="36"/></name></name> <operator pos:line="29" pos:column="37">=<pos:position pos:line="29" pos:column="38"/></operator> <call><name pos:line="29" pos:column="39">g_strdup<pos:position pos:line="29" pos:column="47"/></name><argument_list pos:line="29" pos:column="47">(<argument><expr><name pos:line="29" pos:column="48">value<pos:position pos:line="29" pos:column="53"/></name></expr></argument>)<pos:position pos:line="29" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="30" pos:column="18"/></block></then> <elseif pos:line="30" pos:column="19">else <if pos:line="30" pos:column="24">if <condition pos:line="30" pos:column="27">(<expr><operator pos:line="30" pos:column="28">!<pos:position pos:line="30" pos:column="29"/></operator><call><name pos:line="30" pos:column="29">strcmp<pos:position pos:line="30" pos:column="35"/></name><argument_list pos:line="30" pos:column="35">(<argument><expr><name pos:line="30" pos:column="36">key<pos:position pos:line="30" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="41">"host"<pos:position pos:line="30" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="49"/></condition><then pos:line="30" pos:column="49"> <block pos:line="30" pos:column="50">{
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">g_free<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">(<argument><expr><name><name pos:line="31" pos:column="32">c<pos:position pos:line="31" pos:column="33"/></name><operator pos:line="31" pos:column="33">-&gt;<pos:position pos:line="31" pos:column="38"/></operator><name pos:line="31" pos:column="35">host<pos:position pos:line="31" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="32" pos:column="25">c<pos:position pos:line="32" pos:column="26"/></name><operator pos:line="32" pos:column="26">-&gt;<pos:position pos:line="32" pos:column="31"/></operator><name pos:line="32" pos:column="28">host<pos:position pos:line="32" pos:column="32"/></name></name> <operator pos:line="32" pos:column="33">=<pos:position pos:line="32" pos:column="34"/></operator> <call><name pos:line="32" pos:column="35">g_strdup<pos:position pos:line="32" pos:column="43"/></name><argument_list pos:line="32" pos:column="43">(<argument><expr><name pos:line="32" pos:column="44">value<pos:position pos:line="32" pos:column="49"/></name></expr></argument>)<pos:position pos:line="32" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><name pos:line="33" pos:column="25">value<pos:position pos:line="33" pos:column="30"/></name> <operator pos:line="33" pos:column="31">=<pos:position pos:line="33" pos:column="32"/></operator> <call><name pos:line="33" pos:column="33">strrchr<pos:position pos:line="33" pos:column="40"/></name><argument_list pos:line="33" pos:column="40">(<argument><expr><name><name pos:line="33" pos:column="41">c<pos:position pos:line="33" pos:column="42"/></name><operator pos:line="33" pos:column="42">-&gt;<pos:position pos:line="33" pos:column="47"/></operator><name pos:line="33" pos:column="44">host<pos:position pos:line="33" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="33" pos:column="50">':'<pos:position pos:line="33" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt>
			<if pos:line="34" pos:column="25">if <condition pos:line="34" pos:column="28">(<expr><name pos:line="34" pos:column="29">value<pos:position pos:line="34" pos:column="34"/></name></expr>)<pos:position pos:line="34" pos:column="35"/></condition><then pos:line="34" pos:column="35"> <block pos:line="34" pos:column="36">{
				<expr_stmt><expr><operator pos:line="35" pos:column="33">*<pos:position pos:line="35" pos:column="34"/></operator><name pos:line="35" pos:column="34">value<pos:position pos:line="35" pos:column="39"/></name><operator pos:line="35" pos:column="39">++<pos:position pos:line="35" pos:column="41"/></operator> <operator pos:line="35" pos:column="42">=<pos:position pos:line="35" pos:column="43"/></operator> <literal type="char" pos:line="35" pos:column="44">'\0'<pos:position pos:line="35" pos:column="48"/></literal></expr>;<pos:position pos:line="35" pos:column="49"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="36" pos:column="33">c<pos:position pos:line="36" pos:column="34"/></name><operator pos:line="36" pos:column="34">-&gt;<pos:position pos:line="36" pos:column="39"/></operator><name pos:line="36" pos:column="36">port<pos:position pos:line="36" pos:column="40"/></name></name> <operator pos:line="36" pos:column="41">=<pos:position pos:line="36" pos:column="42"/></operator> <call><name pos:line="36" pos:column="43">atoi<pos:position pos:line="36" pos:column="47"/></name><argument_list pos:line="36" pos:column="47">(<argument><expr><name pos:line="36" pos:column="48">value<pos:position pos:line="36" pos:column="53"/></name></expr></argument>)<pos:position pos:line="36" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="55"/></expr_stmt>
			}<pos:position pos:line="37" pos:column="26"/></block></then></if>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if></elseif> <elseif pos:line="38" pos:column="19">else <if pos:line="38" pos:column="24">if <condition pos:line="38" pos:column="27">(<expr><operator pos:line="38" pos:column="28">!<pos:position pos:line="38" pos:column="29"/></operator><call><name pos:line="38" pos:column="29">strcmp<pos:position pos:line="38" pos:column="35"/></name><argument_list pos:line="38" pos:column="35">(<argument><expr><name pos:line="38" pos:column="36">key<pos:position pos:line="38" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="41">"path"<pos:position pos:line="38" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="49"/></condition><then pos:line="38" pos:column="49"> <block pos:line="38" pos:column="50">{
			<expr_stmt><expr><call><name pos:line="39" pos:column="25">g_free<pos:position pos:line="39" pos:column="31"/></name><argument_list pos:line="39" pos:column="31">(<argument><expr><name><name pos:line="39" pos:column="32">c<pos:position pos:line="39" pos:column="33"/></name><operator pos:line="39" pos:column="33">-&gt;<pos:position pos:line="39" pos:column="38"/></operator><name pos:line="39" pos:column="35">path<pos:position pos:line="39" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="40" pos:column="25">c<pos:position pos:line="40" pos:column="26"/></name><operator pos:line="40" pos:column="26">-&gt;<pos:position pos:line="40" pos:column="31"/></operator><name pos:line="40" pos:column="28">path<pos:position pos:line="40" pos:column="32"/></name></name> <operator pos:line="40" pos:column="33">=<pos:position pos:line="40" pos:column="34"/></operator> <call><name pos:line="40" pos:column="35">g_strdup<pos:position pos:line="40" pos:column="43"/></name><argument_list pos:line="40" pos:column="43">(<argument><expr><name pos:line="40" pos:column="44">value<pos:position pos:line="40" pos:column="49"/></name></expr></argument>)<pos:position pos:line="40" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="51"/></expr_stmt>
		}<pos:position pos:line="41" pos:column="18"/></block></then></if></elseif> <elseif pos:line="41" pos:column="19">else <if pos:line="41" pos:column="24">if <condition pos:line="41" pos:column="27">(<expr><operator pos:line="41" pos:column="28">!<pos:position pos:line="41" pos:column="29"/></operator><call><name pos:line="41" pos:column="29">strcmp<pos:position pos:line="41" pos:column="35"/></name><argument_list pos:line="41" pos:column="35">(<argument><expr><name pos:line="41" pos:column="36">key<pos:position pos:line="41" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="41">"username"<pos:position pos:line="41" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="53"/></condition><then pos:line="41" pos:column="53"> <block pos:line="41" pos:column="54">{
			<expr_stmt><expr><call><name pos:line="42" pos:column="25">g_free<pos:position pos:line="42" pos:column="31"/></name><argument_list pos:line="42" pos:column="31">(<argument><expr><name><name pos:line="42" pos:column="32">c<pos:position pos:line="42" pos:column="33"/></name><operator pos:line="42" pos:column="33">-&gt;<pos:position pos:line="42" pos:column="38"/></operator><name pos:line="42" pos:column="35">username<pos:position pos:line="42" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="43" pos:column="25">c<pos:position pos:line="43" pos:column="26"/></name><operator pos:line="43" pos:column="26">-&gt;<pos:position pos:line="43" pos:column="31"/></operator><name pos:line="43" pos:column="28">username<pos:position pos:line="43" pos:column="36"/></name></name> <operator pos:line="43" pos:column="37">=<pos:position pos:line="43" pos:column="38"/></operator> <call><name pos:line="43" pos:column="39">g_strdup<pos:position pos:line="43" pos:column="47"/></name><argument_list pos:line="43" pos:column="47">(<argument><expr><name pos:line="43" pos:column="48">value<pos:position pos:line="43" pos:column="53"/></name></expr></argument>)<pos:position pos:line="43" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="55"/></expr_stmt>
		}<pos:position pos:line="44" pos:column="18"/></block></then></if></elseif> <elseif pos:line="44" pos:column="19">else <if pos:line="44" pos:column="24">if <condition pos:line="44" pos:column="27">(<expr><operator pos:line="44" pos:column="28">!<pos:position pos:line="44" pos:column="29"/></operator><call><name pos:line="44" pos:column="29">strcmp<pos:position pos:line="44" pos:column="35"/></name><argument_list pos:line="44" pos:column="35">(<argument><expr><name pos:line="44" pos:column="36">key<pos:position pos:line="44" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="41">"password"<pos:position pos:line="44" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="53"/></condition><then pos:line="44" pos:column="53"> <block pos:line="44" pos:column="54">{
			<expr_stmt><expr><call><name pos:line="45" pos:column="25">g_free<pos:position pos:line="45" pos:column="31"/></name><argument_list pos:line="45" pos:column="31">(<argument><expr><name><name pos:line="45" pos:column="32">c<pos:position pos:line="45" pos:column="33"/></name><operator pos:line="45" pos:column="33">-&gt;<pos:position pos:line="45" pos:column="38"/></operator><name pos:line="45" pos:column="35">password<pos:position pos:line="45" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="45"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="46" pos:column="25">c<pos:position pos:line="46" pos:column="26"/></name><operator pos:line="46" pos:column="26">-&gt;<pos:position pos:line="46" pos:column="31"/></operator><name pos:line="46" pos:column="28">password<pos:position pos:line="46" pos:column="36"/></name></name> <operator pos:line="46" pos:column="37">=<pos:position pos:line="46" pos:column="38"/></operator> <call><name pos:line="46" pos:column="39">g_strdup<pos:position pos:line="46" pos:column="47"/></name><argument_list pos:line="46" pos:column="47">(<argument><expr><name pos:line="46" pos:column="48">value<pos:position pos:line="46" pos:column="53"/></name></expr></argument>)<pos:position pos:line="46" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="55"/></expr_stmt>
			<while pos:line="47" pos:column="25">while <condition pos:line="47" pos:column="31">(<expr><operator pos:line="47" pos:column="32">*<pos:position pos:line="47" pos:column="33"/></operator><name pos:line="47" pos:column="33">value<pos:position pos:line="47" pos:column="38"/></name></expr>)<pos:position pos:line="47" pos:column="39"/></condition>
				<block type="pseudo"><expr_stmt><expr><operator pos:line="48" pos:column="33">*<pos:position pos:line="48" pos:column="34"/></operator><name pos:line="48" pos:column="34">value<pos:position pos:line="48" pos:column="39"/></name><operator pos:line="48" pos:column="39">++<pos:position pos:line="48" pos:column="41"/></operator> <operator pos:line="48" pos:column="42">=<pos:position pos:line="48" pos:column="43"/></operator> <literal type="char" pos:line="48" pos:column="44">'\0'<pos:position pos:line="48" pos:column="48"/></literal></expr>;<pos:position pos:line="48" pos:column="49"/></expr_stmt></block></while>
		}<pos:position pos:line="49" pos:column="18"/></block></then></if></elseif></if>
		<comment type="block" pos:line="50" pos:column="17">/*
		 * Ignore other lines; we don't know what they mean, but
		 * this future-proofs us when later versions of git do
		 * learn new lines, and the helpers are updated to match.
		 */</comment>
	}<pos:position pos:line="55" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="57" pos:column="9">g_free<pos:position pos:line="57" pos:column="15"/></name><argument_list pos:line="57" pos:column="15">(<argument><expr><name pos:line="57" pos:column="16">buf<pos:position pos:line="57" pos:column="19"/></name></expr></argument>)<pos:position pos:line="57" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="21"/></expr_stmt>

	<return pos:line="59" pos:column="9">return <expr><literal type="number" pos:line="59" pos:column="16">0<pos:position pos:line="59" pos:column="17"/></literal></expr>;<pos:position pos:line="59" pos:column="18"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
