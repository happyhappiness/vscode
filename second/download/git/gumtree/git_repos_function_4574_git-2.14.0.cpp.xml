<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4574_git-2.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">assign_shallow_commits_to_refs<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name><name pos:line="1" pos:column="37">struct<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">shallow_info<pos:position pos:line="1" pos:column="56"/></name></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">info<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
				    <parameter><decl><type><name pos:line="2" pos:column="37">uint32_t<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier><modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">used<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">int<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">ref_status<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">object_id<pos:position pos:line="4" pos:column="25"/></name></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">oid<pos:position pos:line="4" pos:column="30"/></name> <init pos:line="4" pos:column="31">= <expr><name><name pos:line="4" pos:column="33">info<pos:position pos:line="4" pos:column="37"/></name><operator pos:line="4" pos:column="37">-&gt;<pos:position pos:line="4" pos:column="42"/></operator><name pos:line="4" pos:column="39">shallow<pos:position pos:line="4" pos:column="46"/></name><operator pos:line="4" pos:column="46">-&gt;<pos:position pos:line="4" pos:column="51"/></operator><name pos:line="4" pos:column="48">oid<pos:position pos:line="4" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">oid_array<pos:position pos:line="5" pos:column="25"/></name></name> <modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier></type><name pos:line="5" pos:column="27">ref<pos:position pos:line="5" pos:column="30"/></name> <init pos:line="5" pos:column="31">= <expr><name><name pos:line="5" pos:column="33">info<pos:position pos:line="5" pos:column="37"/></name><operator pos:line="5" pos:column="37">-&gt;<pos:position pos:line="5" pos:column="42"/></operator><name pos:line="5" pos:column="39">ref<pos:position pos:line="5" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned<pos:position pos:line="6" pos:column="17"/></name> <name pos:line="6" pos:column="18">int<pos:position pos:line="6" pos:column="21"/></name></type> <name pos:line="6" pos:column="22">i<pos:position pos:line="6" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="25">nr<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name> <modifier pos:line="7" pos:column="13">*<pos:position pos:line="7" pos:column="14"/></modifier></type><name pos:line="7" pos:column="14">shallow<pos:position pos:line="7" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="23">nr_shallow<pos:position pos:line="7" pos:column="33"/></name> <init pos:line="7" pos:column="34">= <expr><literal type="number" pos:line="7" pos:column="36">0<pos:position pos:line="7" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">paint_info<pos:position pos:line="8" pos:column="26"/></name></name></type> <name pos:line="8" pos:column="27">pi<pos:position pos:line="8" pos:column="29"/></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="10" pos:column="9">trace_printf_key<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><operator pos:line="10" pos:column="26">&amp;<pos:position pos:line="10" pos:column="31"/></operator><name pos:line="10" pos:column="27">trace_shallow<pos:position pos:line="10" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="42">"shallow: assign_shallow_commits_to_refs\n"<pos:position pos:line="10" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="87"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="11" pos:column="9">ALLOC_ARRAY<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">shallow<pos:position pos:line="11" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="30">info<pos:position pos:line="11" pos:column="34"/></name><operator pos:line="11" pos:column="34">-&gt;<pos:position pos:line="11" pos:column="39"/></operator><name pos:line="11" pos:column="36">nr_ours<pos:position pos:line="11" pos:column="43"/></name></name> <operator pos:line="11" pos:column="44">+<pos:position pos:line="11" pos:column="45"/></operator> <name><name pos:line="11" pos:column="46">info<pos:position pos:line="11" pos:column="50"/></name><operator pos:line="11" pos:column="50">-&gt;<pos:position pos:line="11" pos:column="55"/></operator><name pos:line="11" pos:column="52">nr_theirs<pos:position pos:line="11" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="63"/></expr_stmt>
	<for pos:line="12" pos:column="9">for <control pos:line="12" pos:column="13">(<init><expr><name pos:line="12" pos:column="14">i<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <literal type="number" pos:line="12" pos:column="18">0<pos:position pos:line="12" pos:column="19"/></literal></expr>;<pos:position pos:line="12" pos:column="20"/></init> <condition><expr><name pos:line="12" pos:column="21">i<pos:position pos:line="12" pos:column="22"/></name> <operator pos:line="12" pos:column="23">&lt;<pos:position pos:line="12" pos:column="27"/></operator> <name><name pos:line="12" pos:column="25">info<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">-&gt;<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="31">nr_ours<pos:position pos:line="12" pos:column="38"/></name></name></expr>;<pos:position pos:line="12" pos:column="39"/></condition> <incr><expr><name pos:line="12" pos:column="40">i<pos:position pos:line="12" pos:column="41"/></name><operator pos:line="12" pos:column="41">++<pos:position pos:line="12" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="12" pos:column="44"/></control>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="13" pos:column="17">shallow<pos:position pos:line="13" pos:column="24"/></name><index pos:line="13" pos:column="24">[<expr><name pos:line="13" pos:column="25">nr_shallow<pos:position pos:line="13" pos:column="35"/></name><operator pos:line="13" pos:column="35">++<pos:position pos:line="13" pos:column="37"/></operator></expr>]<pos:position pos:line="13" pos:column="38"/></index></name> <operator pos:line="13" pos:column="39">=<pos:position pos:line="13" pos:column="40"/></operator> <name><name pos:line="13" pos:column="41">info<pos:position pos:line="13" pos:column="45"/></name><operator pos:line="13" pos:column="45">-&gt;<pos:position pos:line="13" pos:column="50"/></operator><name pos:line="13" pos:column="47">ours<pos:position pos:line="13" pos:column="51"/></name><index pos:line="13" pos:column="51">[<expr><name pos:line="13" pos:column="52">i<pos:position pos:line="13" pos:column="53"/></name></expr>]<pos:position pos:line="13" pos:column="54"/></index></name></expr>;<pos:position pos:line="13" pos:column="55"/></expr_stmt></block></for>
	<for pos:line="14" pos:column="9">for <control pos:line="14" pos:column="13">(<init><expr><name pos:line="14" pos:column="14">i<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <literal type="number" pos:line="14" pos:column="18">0<pos:position pos:line="14" pos:column="19"/></literal></expr>;<pos:position pos:line="14" pos:column="20"/></init> <condition><expr><name pos:line="14" pos:column="21">i<pos:position pos:line="14" pos:column="22"/></name> <operator pos:line="14" pos:column="23">&lt;<pos:position pos:line="14" pos:column="27"/></operator> <name><name pos:line="14" pos:column="25">info<pos:position pos:line="14" pos:column="29"/></name><operator pos:line="14" pos:column="29">-&gt;<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="31">nr_theirs<pos:position pos:line="14" pos:column="40"/></name></name></expr>;<pos:position pos:line="14" pos:column="41"/></condition> <incr><expr><name pos:line="14" pos:column="42">i<pos:position pos:line="14" pos:column="43"/></name><operator pos:line="14" pos:column="43">++<pos:position pos:line="14" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="14" pos:column="46"/></control>
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="15" pos:column="17">shallow<pos:position pos:line="15" pos:column="24"/></name><index pos:line="15" pos:column="24">[<expr><name pos:line="15" pos:column="25">nr_shallow<pos:position pos:line="15" pos:column="35"/></name><operator pos:line="15" pos:column="35">++<pos:position pos:line="15" pos:column="37"/></operator></expr>]<pos:position pos:line="15" pos:column="38"/></index></name> <operator pos:line="15" pos:column="39">=<pos:position pos:line="15" pos:column="40"/></operator> <name><name pos:line="15" pos:column="41">info<pos:position pos:line="15" pos:column="45"/></name><operator pos:line="15" pos:column="45">-&gt;<pos:position pos:line="15" pos:column="50"/></operator><name pos:line="15" pos:column="47">theirs<pos:position pos:line="15" pos:column="53"/></name><index pos:line="15" pos:column="53">[<expr><name pos:line="15" pos:column="54">i<pos:position pos:line="15" pos:column="55"/></name></expr>]<pos:position pos:line="15" pos:column="56"/></index></name></expr>;<pos:position pos:line="15" pos:column="57"/></expr_stmt></block></for>

	<comment type="block" pos:line="17" pos:column="9">/*
	 * Prepare the commit graph to track what refs can reach what
	 * (new) shallow commits.
	 */</comment>
	<expr_stmt><expr><name pos:line="21" pos:column="9">nr<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <call><name pos:line="21" pos:column="14">get_max_object_index<pos:position pos:line="21" pos:column="34"/></name><argument_list pos:line="21" pos:column="34">()<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt>
	<for pos:line="22" pos:column="9">for <control pos:line="22" pos:column="13">(<init><expr><name pos:line="22" pos:column="14">i<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <literal type="number" pos:line="22" pos:column="18">0<pos:position pos:line="22" pos:column="19"/></literal></expr>;<pos:position pos:line="22" pos:column="20"/></init> <condition><expr><name pos:line="22" pos:column="21">i<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">&lt;<pos:position pos:line="22" pos:column="27"/></operator> <name pos:line="22" pos:column="25">nr<pos:position pos:line="22" pos:column="27"/></name></expr>;<pos:position pos:line="22" pos:column="28"/></condition> <incr><expr><name pos:line="22" pos:column="29">i<pos:position pos:line="22" pos:column="30"/></name><operator pos:line="22" pos:column="30">++<pos:position pos:line="22" pos:column="32"/></operator></expr></incr>)<pos:position pos:line="22" pos:column="33"/></control> <block pos:line="22" pos:column="34">{
		<decl_stmt><decl><type><name><name pos:line="23" pos:column="17">struct<pos:position pos:line="23" pos:column="23"/></name> <name pos:line="23" pos:column="24">object<pos:position pos:line="23" pos:column="30"/></name></name> <modifier pos:line="23" pos:column="31">*<pos:position pos:line="23" pos:column="32"/></modifier></type><name pos:line="23" pos:column="32">o<pos:position pos:line="23" pos:column="33"/></name> <init pos:line="23" pos:column="34">= <expr><call><name pos:line="23" pos:column="36">get_indexed_object<pos:position pos:line="23" pos:column="54"/></name><argument_list pos:line="23" pos:column="54">(<argument><expr><name pos:line="23" pos:column="55">i<pos:position pos:line="23" pos:column="56"/></name></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="58"/></decl_stmt>
		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><operator pos:line="24" pos:column="21">!<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="22">o<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">||<pos:position pos:line="24" pos:column="26"/></operator> <name><name pos:line="24" pos:column="27">o<pos:position pos:line="24" pos:column="28"/></name><operator pos:line="24" pos:column="28">-&gt;<pos:position pos:line="24" pos:column="33"/></operator><name pos:line="24" pos:column="30">type<pos:position pos:line="24" pos:column="34"/></name></name> <operator pos:line="24" pos:column="35">!=<pos:position pos:line="24" pos:column="37"/></operator> <name pos:line="24" pos:column="38">OBJ_COMMIT<pos:position pos:line="24" pos:column="48"/></name></expr>)<pos:position pos:line="24" pos:column="49"/></condition><then pos:line="24" pos:column="49">
			<block type="pseudo"><continue pos:line="25" pos:column="25">continue;<pos:position pos:line="25" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><name><name pos:line="27" pos:column="17">o<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">-&gt;<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="20">flags<pos:position pos:line="27" pos:column="25"/></name></name> <operator pos:line="27" pos:column="26">&amp;=<pos:position pos:line="27" pos:column="32"/></operator> <operator pos:line="27" pos:column="29">~<pos:position pos:line="27" pos:column="30"/></operator><operator pos:line="27" pos:column="30">(<pos:position pos:line="27" pos:column="31"/></operator><name pos:line="27" pos:column="31">UNINTERESTING<pos:position pos:line="27" pos:column="44"/></name> <operator pos:line="27" pos:column="45">|<pos:position pos:line="27" pos:column="46"/></operator> <name pos:line="27" pos:column="47">BOTTOM<pos:position pos:line="27" pos:column="53"/></name> <operator pos:line="27" pos:column="54">|<pos:position pos:line="27" pos:column="55"/></operator> <name pos:line="27" pos:column="56">SEEN<pos:position pos:line="27" pos:column="60"/></name><operator pos:line="27" pos:column="60">)<pos:position pos:line="27" pos:column="61"/></operator></expr>;<pos:position pos:line="27" pos:column="62"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="30" pos:column="9">memset<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><operator pos:line="30" pos:column="16">&amp;<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="17">pi<pos:position pos:line="30" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="21">0<pos:position pos:line="30" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="24">sizeof<argument_list pos:line="30" pos:column="30">(<argument><expr><name pos:line="30" pos:column="31">pi<pos:position pos:line="30" pos:column="33"/></name></expr></argument>)<pos:position pos:line="30" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="31" pos:column="9">init_ref_bitmap<pos:position pos:line="31" pos:column="24"/></name><argument_list pos:line="31" pos:column="24">(<argument><expr><operator pos:line="31" pos:column="25">&amp;<pos:position pos:line="31" pos:column="30"/></operator><name><name pos:line="31" pos:column="26">pi<pos:position pos:line="31" pos:column="28"/></name><operator pos:line="31" pos:column="28">.<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="29">ref_bitmap<pos:position pos:line="31" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="32" pos:column="9">pi<pos:position pos:line="32" pos:column="11"/></name><operator pos:line="32" pos:column="11">.<pos:position pos:line="32" pos:column="12"/></operator><name pos:line="32" pos:column="12">nr_bits<pos:position pos:line="32" pos:column="19"/></name></name> <operator pos:line="32" pos:column="20">=<pos:position pos:line="32" pos:column="21"/></operator> <name><name pos:line="32" pos:column="22">ref<pos:position pos:line="32" pos:column="25"/></name><operator pos:line="32" pos:column="25">-&gt;<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="27">nr<pos:position pos:line="32" pos:column="29"/></name></name></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt>

	<comment type="block" pos:line="34" pos:column="9">/*
	 * "--not --all" to cut short the traversal if new refs
	 * connect to old refs. If not (e.g. force ref updates) it'll
	 * have to go down to the current shallow commits.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">head_ref<pos:position pos:line="39" pos:column="17"/></name><argument_list pos:line="39" pos:column="17">(<argument><expr><name pos:line="39" pos:column="18">mark_uninteresting<pos:position pos:line="39" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="38">NULL<pos:position pos:line="39" pos:column="42"/></name></expr></argument>)<pos:position pos:line="39" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="40" pos:column="9">for_each_ref<pos:position pos:line="40" pos:column="21"/></name><argument_list pos:line="40" pos:column="21">(<argument><expr><name pos:line="40" pos:column="22">mark_uninteresting<pos:position pos:line="40" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="42">NULL<pos:position pos:line="40" pos:column="46"/></name></expr></argument>)<pos:position pos:line="40" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="48"/></expr_stmt>

	<comment type="block" pos:line="42" pos:column="9">/* Mark potential bottoms so we won't go out of bound */</comment>
	<for pos:line="43" pos:column="9">for <control pos:line="43" pos:column="13">(<init><expr><name pos:line="43" pos:column="14">i<pos:position pos:line="43" pos:column="15"/></name> <operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator> <literal type="number" pos:line="43" pos:column="18">0<pos:position pos:line="43" pos:column="19"/></literal></expr>;<pos:position pos:line="43" pos:column="20"/></init> <condition><expr><name pos:line="43" pos:column="21">i<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">&lt;<pos:position pos:line="43" pos:column="27"/></operator> <name pos:line="43" pos:column="25">nr_shallow<pos:position pos:line="43" pos:column="35"/></name></expr>;<pos:position pos:line="43" pos:column="36"/></condition> <incr><expr><name pos:line="43" pos:column="37">i<pos:position pos:line="43" pos:column="38"/></name><operator pos:line="43" pos:column="38">++<pos:position pos:line="43" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="43" pos:column="41"/></control> <block pos:line="43" pos:column="42">{
		<decl_stmt><decl><type><name><name pos:line="44" pos:column="17">struct<pos:position pos:line="44" pos:column="23"/></name> <name pos:line="44" pos:column="24">commit<pos:position pos:line="44" pos:column="30"/></name></name> <modifier pos:line="44" pos:column="31">*<pos:position pos:line="44" pos:column="32"/></modifier></type><name pos:line="44" pos:column="32">c<pos:position pos:line="44" pos:column="33"/></name> <init pos:line="44" pos:column="34">= <expr><call><name pos:line="44" pos:column="36">lookup_commit<pos:position pos:line="44" pos:column="49"/></name><argument_list pos:line="44" pos:column="49">(<argument><expr><operator pos:line="44" pos:column="50">&amp;<pos:position pos:line="44" pos:column="55"/></operator><name><name pos:line="44" pos:column="51">oid<pos:position pos:line="44" pos:column="54"/></name><index pos:line="44" pos:column="54">[<expr><name><name pos:line="44" pos:column="55">shallow<pos:position pos:line="44" pos:column="62"/></name><index pos:line="44" pos:column="62">[<expr><name pos:line="44" pos:column="63">i<pos:position pos:line="44" pos:column="64"/></name></expr>]<pos:position pos:line="44" pos:column="65"/></index></name></expr>]<pos:position pos:line="44" pos:column="66"/></index></name></expr></argument>)<pos:position pos:line="44" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="44" pos:column="68"/></decl_stmt>
		<expr_stmt><expr><name><name pos:line="45" pos:column="17">c<pos:position pos:line="45" pos:column="18"/></name><operator pos:line="45" pos:column="18">-&gt;<pos:position pos:line="45" pos:column="23"/></operator><name pos:line="45" pos:column="20">object<pos:position pos:line="45" pos:column="26"/></name><operator pos:line="45" pos:column="26">.<pos:position pos:line="45" pos:column="27"/></operator><name pos:line="45" pos:column="27">flags<pos:position pos:line="45" pos:column="32"/></name></name> <operator pos:line="45" pos:column="33">|=<pos:position pos:line="45" pos:column="35"/></operator> <name pos:line="45" pos:column="36">BOTTOM<pos:position pos:line="45" pos:column="42"/></name></expr>;<pos:position pos:line="45" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="46" pos:column="10"/></block></for>

	<for pos:line="48" pos:column="9">for <control pos:line="48" pos:column="13">(<init><expr><name pos:line="48" pos:column="14">i<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">=<pos:position pos:line="48" pos:column="17"/></operator> <literal type="number" pos:line="48" pos:column="18">0<pos:position pos:line="48" pos:column="19"/></literal></expr>;<pos:position pos:line="48" pos:column="20"/></init> <condition><expr><name pos:line="48" pos:column="21">i<pos:position pos:line="48" pos:column="22"/></name> <operator pos:line="48" pos:column="23">&lt;<pos:position pos:line="48" pos:column="27"/></operator> <name><name pos:line="48" pos:column="25">ref<pos:position pos:line="48" pos:column="28"/></name><operator pos:line="48" pos:column="28">-&gt;<pos:position pos:line="48" pos:column="33"/></operator><name pos:line="48" pos:column="30">nr<pos:position pos:line="48" pos:column="32"/></name></name></expr>;<pos:position pos:line="48" pos:column="33"/></condition> <incr><expr><name pos:line="48" pos:column="34">i<pos:position pos:line="48" pos:column="35"/></name><operator pos:line="48" pos:column="35">++<pos:position pos:line="48" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="48" pos:column="38"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="17">paint_down<pos:position pos:line="49" pos:column="27"/></name><argument_list pos:line="49" pos:column="27">(<argument><expr><operator pos:line="49" pos:column="28">&amp;<pos:position pos:line="49" pos:column="33"/></operator><name pos:line="49" pos:column="29">pi<pos:position pos:line="49" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="33">ref<pos:position pos:line="49" pos:column="36"/></name><operator pos:line="49" pos:column="36">-&gt;<pos:position pos:line="49" pos:column="41"/></operator><name pos:line="49" pos:column="38">oid<pos:position pos:line="49" pos:column="41"/></name></name> <operator pos:line="49" pos:column="42">+<pos:position pos:line="49" pos:column="43"/></operator> <name pos:line="49" pos:column="44">i<pos:position pos:line="49" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="47">i<pos:position pos:line="49" pos:column="48"/></name></expr></argument>)<pos:position pos:line="49" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="50"/></expr_stmt></block></for>

	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">used<pos:position pos:line="51" pos:column="17"/></name></expr>)<pos:position pos:line="51" pos:column="18"/></condition><then pos:line="51" pos:column="18"> <block pos:line="51" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="52" pos:column="17">int<pos:position pos:line="52" pos:column="20"/></name></type> <name pos:line="52" pos:column="21">bitmap_size<pos:position pos:line="52" pos:column="32"/></name> <init pos:line="52" pos:column="33">= <expr><call><name pos:line="52" pos:column="35">DIV_ROUND_UP<pos:position pos:line="52" pos:column="47"/></name><argument_list pos:line="52" pos:column="47">(<argument><expr><name><name pos:line="52" pos:column="48">pi<pos:position pos:line="52" pos:column="50"/></name><operator pos:line="52" pos:column="50">.<pos:position pos:line="52" pos:column="51"/></operator><name pos:line="52" pos:column="51">nr_bits<pos:position pos:line="52" pos:column="58"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="60">32<pos:position pos:line="52" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="63"/></argument_list></call> <operator pos:line="52" pos:column="64">*<pos:position pos:line="52" pos:column="65"/></operator> <sizeof pos:line="52" pos:column="66">sizeof<argument_list pos:line="52" pos:column="72">(<argument><expr><name pos:line="52" pos:column="73">uint32_t<pos:position pos:line="52" pos:column="81"/></name></expr></argument>)<pos:position pos:line="52" pos:column="82"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="52" pos:column="83"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="53" pos:column="17">memset<pos:position pos:line="53" pos:column="23"/></name><argument_list pos:line="53" pos:column="23">(<argument><expr><name pos:line="53" pos:column="24">used<pos:position pos:line="53" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="30">0<pos:position pos:line="53" pos:column="31"/></literal></expr></argument>, <argument><expr><sizeof pos:line="53" pos:column="33">sizeof<argument_list pos:line="53" pos:column="39">(<argument><expr><operator pos:line="53" pos:column="40">*<pos:position pos:line="53" pos:column="41"/></operator><name pos:line="53" pos:column="41">used<pos:position pos:line="53" pos:column="45"/></name></expr></argument>)<pos:position pos:line="53" pos:column="46"/></argument_list></sizeof> <operator pos:line="53" pos:column="47">*<pos:position pos:line="53" pos:column="48"/></operator> <name><name pos:line="53" pos:column="49">info<pos:position pos:line="53" pos:column="53"/></name><operator pos:line="53" pos:column="53">-&gt;<pos:position pos:line="53" pos:column="58"/></operator><name pos:line="53" pos:column="55">shallow<pos:position pos:line="53" pos:column="62"/></name><operator pos:line="53" pos:column="62">-&gt;<pos:position pos:line="53" pos:column="67"/></operator><name pos:line="53" pos:column="64">nr<pos:position pos:line="53" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="68"/></expr_stmt>
		<for pos:line="54" pos:column="17">for <control pos:line="54" pos:column="21">(<init><expr><name pos:line="54" pos:column="22">i<pos:position pos:line="54" pos:column="23"/></name> <operator pos:line="54" pos:column="24">=<pos:position pos:line="54" pos:column="25"/></operator> <literal type="number" pos:line="54" pos:column="26">0<pos:position pos:line="54" pos:column="27"/></literal></expr>;<pos:position pos:line="54" pos:column="28"/></init> <condition><expr><name pos:line="54" pos:column="29">i<pos:position pos:line="54" pos:column="30"/></name> <operator pos:line="54" pos:column="31">&lt;<pos:position pos:line="54" pos:column="35"/></operator> <name pos:line="54" pos:column="33">nr_shallow<pos:position pos:line="54" pos:column="43"/></name></expr>;<pos:position pos:line="54" pos:column="44"/></condition> <incr><expr><name pos:line="54" pos:column="45">i<pos:position pos:line="54" pos:column="46"/></name><operator pos:line="54" pos:column="46">++<pos:position pos:line="54" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="54" pos:column="49"/></control> <block pos:line="54" pos:column="50">{
			<decl_stmt><decl><type><specifier pos:line="55" pos:column="25">const<pos:position pos:line="55" pos:column="30"/></specifier> <name><name pos:line="55" pos:column="31">struct<pos:position pos:line="55" pos:column="37"/></name> <name pos:line="55" pos:column="38">commit<pos:position pos:line="55" pos:column="44"/></name></name> <modifier pos:line="55" pos:column="45">*<pos:position pos:line="55" pos:column="46"/></modifier></type><name pos:line="55" pos:column="46">c<pos:position pos:line="55" pos:column="47"/></name> <init pos:line="55" pos:column="48">= <expr><call><name pos:line="55" pos:column="50">lookup_commit<pos:position pos:line="55" pos:column="63"/></name><argument_list pos:line="55" pos:column="63">(<argument><expr><operator pos:line="55" pos:column="64">&amp;<pos:position pos:line="55" pos:column="69"/></operator><name><name pos:line="55" pos:column="65">oid<pos:position pos:line="55" pos:column="68"/></name><index pos:line="55" pos:column="68">[<expr><name><name pos:line="55" pos:column="69">shallow<pos:position pos:line="55" pos:column="76"/></name><index pos:line="55" pos:column="76">[<expr><name pos:line="55" pos:column="77">i<pos:position pos:line="55" pos:column="78"/></name></expr>]<pos:position pos:line="55" pos:column="79"/></index></name></expr>]<pos:position pos:line="55" pos:column="80"/></index></name></expr></argument>)<pos:position pos:line="55" pos:column="81"/></argument_list></call></expr></init></decl>;<pos:position pos:line="55" pos:column="82"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="56" pos:column="25">uint32_t<pos:position pos:line="56" pos:column="33"/></name> <modifier pos:line="56" pos:column="34">*<pos:position pos:line="56" pos:column="35"/></modifier><modifier pos:line="56" pos:column="35">*<pos:position pos:line="56" pos:column="36"/></modifier></type><name pos:line="56" pos:column="36">map<pos:position pos:line="56" pos:column="39"/></name> <init pos:line="56" pos:column="40">= <expr><call><name pos:line="56" pos:column="42">ref_bitmap_at<pos:position pos:line="56" pos:column="55"/></name><argument_list pos:line="56" pos:column="55">(<argument><expr><operator pos:line="56" pos:column="56">&amp;<pos:position pos:line="56" pos:column="61"/></operator><name><name pos:line="56" pos:column="57">pi<pos:position pos:line="56" pos:column="59"/></name><operator pos:line="56" pos:column="59">.<pos:position pos:line="56" pos:column="60"/></operator><name pos:line="56" pos:column="60">ref_bitmap<pos:position pos:line="56" pos:column="70"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="72">c<pos:position pos:line="56" pos:column="73"/></name></expr></argument>)<pos:position pos:line="56" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="56" pos:column="75"/></decl_stmt>
			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><operator pos:line="57" pos:column="29">*<pos:position pos:line="57" pos:column="30"/></operator><name pos:line="57" pos:column="30">map<pos:position pos:line="57" pos:column="33"/></name></expr>)<pos:position pos:line="57" pos:column="34"/></condition><then pos:line="57" pos:column="34">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="58" pos:column="33">used<pos:position pos:line="58" pos:column="37"/></name><index pos:line="58" pos:column="37">[<expr><name><name pos:line="58" pos:column="38">shallow<pos:position pos:line="58" pos:column="45"/></name><index pos:line="58" pos:column="45">[<expr><name pos:line="58" pos:column="46">i<pos:position pos:line="58" pos:column="47"/></name></expr>]<pos:position pos:line="58" pos:column="48"/></index></name></expr>]<pos:position pos:line="58" pos:column="49"/></index></name> <operator pos:line="58" pos:column="50">=<pos:position pos:line="58" pos:column="51"/></operator> <call><name pos:line="58" pos:column="52">xmemdupz<pos:position pos:line="58" pos:column="60"/></name><argument_list pos:line="58" pos:column="60">(<argument><expr><operator pos:line="58" pos:column="61">*<pos:position pos:line="58" pos:column="62"/></operator><name pos:line="58" pos:column="62">map<pos:position pos:line="58" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="67">bitmap_size<pos:position pos:line="58" pos:column="78"/></name></expr></argument>)<pos:position pos:line="58" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="80"/></expr_stmt></block></then></if>
		}<pos:position pos:line="59" pos:column="18"/></block></for>
		<comment type="block" pos:line="60" pos:column="17">/*
		 * unreachable shallow commits are not removed from
		 * "ours" and "theirs". The user is supposed to run
		 * step 7 on every ref separately and not trust "ours"
		 * and "theirs" any more.
		 */</comment>
	}<pos:position pos:line="66" pos:column="10"/></block></then> <else pos:line="66" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="17">post_assign_shallow<pos:position pos:line="67" pos:column="36"/></name><argument_list pos:line="67" pos:column="36">(<argument><expr><name pos:line="67" pos:column="37">info<pos:position pos:line="67" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="43">&amp;<pos:position pos:line="67" pos:column="48"/></operator><name><name pos:line="67" pos:column="44">pi<pos:position pos:line="67" pos:column="46"/></name><operator pos:line="67" pos:column="46">.<pos:position pos:line="67" pos:column="47"/></operator><name pos:line="67" pos:column="47">ref_bitmap<pos:position pos:line="67" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="59">ref_status<pos:position pos:line="67" pos:column="69"/></name></expr></argument>)<pos:position pos:line="67" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="71"/></expr_stmt></block></else></if>

	<expr_stmt><expr><call><name pos:line="69" pos:column="9">clear_ref_bitmap<pos:position pos:line="69" pos:column="25"/></name><argument_list pos:line="69" pos:column="25">(<argument><expr><operator pos:line="69" pos:column="26">&amp;<pos:position pos:line="69" pos:column="31"/></operator><name><name pos:line="69" pos:column="27">pi<pos:position pos:line="69" pos:column="29"/></name><operator pos:line="69" pos:column="29">.<pos:position pos:line="69" pos:column="30"/></operator><name pos:line="69" pos:column="30">ref_bitmap<pos:position pos:line="69" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="42"/></expr_stmt>
	<for pos:line="70" pos:column="9">for <control pos:line="70" pos:column="13">(<init><expr><name pos:line="70" pos:column="14">i<pos:position pos:line="70" pos:column="15"/></name> <operator pos:line="70" pos:column="16">=<pos:position pos:line="70" pos:column="17"/></operator> <literal type="number" pos:line="70" pos:column="18">0<pos:position pos:line="70" pos:column="19"/></literal></expr>;<pos:position pos:line="70" pos:column="20"/></init> <condition><expr><name pos:line="70" pos:column="21">i<pos:position pos:line="70" pos:column="22"/></name> <operator pos:line="70" pos:column="23">&lt;<pos:position pos:line="70" pos:column="27"/></operator> <name><name pos:line="70" pos:column="25">pi<pos:position pos:line="70" pos:column="27"/></name><operator pos:line="70" pos:column="27">.<pos:position pos:line="70" pos:column="28"/></operator><name pos:line="70" pos:column="28">pool_count<pos:position pos:line="70" pos:column="38"/></name></name></expr>;<pos:position pos:line="70" pos:column="39"/></condition> <incr><expr><name pos:line="70" pos:column="40">i<pos:position pos:line="70" pos:column="41"/></name><operator pos:line="70" pos:column="41">++<pos:position pos:line="70" pos:column="43"/></operator></expr></incr>)<pos:position pos:line="70" pos:column="44"/></control>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="17">free<pos:position pos:line="71" pos:column="21"/></name><argument_list pos:line="71" pos:column="21">(<argument><expr><name><name pos:line="71" pos:column="22">pi<pos:position pos:line="71" pos:column="24"/></name><operator pos:line="71" pos:column="24">.<pos:position pos:line="71" pos:column="25"/></operator><name pos:line="71" pos:column="25">pools<pos:position pos:line="71" pos:column="30"/></name><index pos:line="71" pos:column="30">[<expr><name pos:line="71" pos:column="31">i<pos:position pos:line="71" pos:column="32"/></name></expr>]<pos:position pos:line="71" pos:column="33"/></index></name></expr></argument>)<pos:position pos:line="71" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="35"/></expr_stmt></block></for>
	<expr_stmt><expr><call><name pos:line="72" pos:column="9">free<pos:position pos:line="72" pos:column="13"/></name><argument_list pos:line="72" pos:column="13">(<argument><expr><name><name pos:line="72" pos:column="14">pi<pos:position pos:line="72" pos:column="16"/></name><operator pos:line="72" pos:column="16">.<pos:position pos:line="72" pos:column="17"/></operator><name pos:line="72" pos:column="17">pools<pos:position pos:line="72" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="73" pos:column="9">free<pos:position pos:line="73" pos:column="13"/></name><argument_list pos:line="73" pos:column="13">(<argument><expr><name pos:line="73" pos:column="14">shallow<pos:position pos:line="73" pos:column="21"/></name></expr></argument>)<pos:position pos:line="73" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="23"/></expr_stmt>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
