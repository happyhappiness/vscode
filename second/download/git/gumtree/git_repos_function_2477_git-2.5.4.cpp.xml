<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2477_git-2.5.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">unpack_callback<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">int<pos:position pos:line="1" pos:column="31"/></name></type> <name pos:line="1" pos:column="32">n<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">unsigned<pos:position pos:line="1" pos:column="43"/></name> <name pos:line="1" pos:column="44">long<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">mask<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">unsigned<pos:position pos:line="1" pos:column="63"/></name> <name pos:line="1" pos:column="64">long<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">dirmask<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="78">struct<pos:position pos:line="1" pos:column="84"/></name> <name pos:line="1" pos:column="85">name_entry<pos:position pos:line="1" pos:column="95"/></name></name> <modifier pos:line="1" pos:column="96">*<pos:position pos:line="1" pos:column="97"/></modifier></type><name pos:line="1" pos:column="97">names<pos:position pos:line="1" pos:column="102"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="104">struct<pos:position pos:line="1" pos:column="110"/></name> <name pos:line="1" pos:column="111">traverse_info<pos:position pos:line="1" pos:column="124"/></name></name> <modifier pos:line="1" pos:column="125">*<pos:position pos:line="1" pos:column="126"/></modifier></type><name pos:line="1" pos:column="126">info<pos:position pos:line="1" pos:column="130"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="131"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">cache_entry<pos:position pos:line="3" pos:column="27"/></name></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name><name pos:line="3" pos:column="29">src<pos:position pos:line="3" pos:column="32"/></name><index pos:line="3" pos:column="32">[<expr><name pos:line="3" pos:column="33">MAX_UNPACK_TREES<pos:position pos:line="3" pos:column="49"/></name> <operator pos:line="3" pos:column="50">+<pos:position pos:line="3" pos:column="51"/></operator> <literal type="number" pos:line="3" pos:column="52">1<pos:position pos:line="3" pos:column="53"/></literal></expr>]<pos:position pos:line="3" pos:column="54"/></index></name> <init pos:line="3" pos:column="55">= <expr><block pos:line="3" pos:column="57">{ <expr><name pos:line="3" pos:column="59">NULL<pos:position pos:line="3" pos:column="63"/></name></expr>, }<pos:position pos:line="3" pos:column="66"/></block></expr></init></decl>;<pos:position pos:line="3" pos:column="67"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">unpack_trees_options<pos:position pos:line="4" pos:column="36"/></name></name> <modifier pos:line="4" pos:column="37">*<pos:position pos:line="4" pos:column="38"/></modifier></type><name pos:line="4" pos:column="38">o<pos:position pos:line="4" pos:column="39"/></name> <init pos:line="4" pos:column="40">= <expr><name><name pos:line="4" pos:column="42">info<pos:position pos:line="4" pos:column="46"/></name><operator pos:line="4" pos:column="46">-&gt;<pos:position pos:line="4" pos:column="51"/></operator><name pos:line="4" pos:column="48">data<pos:position pos:line="4" pos:column="52"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="53"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name><name pos:line="5" pos:column="15">struct<pos:position pos:line="5" pos:column="21"/></name> <name pos:line="5" pos:column="22">name_entry<pos:position pos:line="5" pos:column="32"/></name></name> <modifier pos:line="5" pos:column="33">*<pos:position pos:line="5" pos:column="34"/></modifier></type><name pos:line="5" pos:column="34">p<pos:position pos:line="5" pos:column="35"/></name> <init pos:line="5" pos:column="36">= <expr><name pos:line="5" pos:column="38">names<pos:position pos:line="5" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="44"/></decl_stmt>

	<comment type="block" pos:line="7" pos:column="9">/* Find first entry with a real name (we could use "mask" too) */</comment>
	<while pos:line="8" pos:column="9">while <condition pos:line="8" pos:column="15">(<expr><operator pos:line="8" pos:column="16">!<pos:position pos:line="8" pos:column="17"/></operator><name><name pos:line="8" pos:column="17">p<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">-&gt;<pos:position pos:line="8" pos:column="23"/></operator><name pos:line="8" pos:column="20">mode<pos:position pos:line="8" pos:column="24"/></name></name></expr>)<pos:position pos:line="8" pos:column="25"/></condition>
		<block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="17">p<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">++<pos:position pos:line="9" pos:column="20"/></operator></expr>;<pos:position pos:line="9" pos:column="21"/></expr_stmt></block></while>

	<if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name><name pos:line="11" pos:column="13">o<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">-&gt;<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="16">debug_unpack<pos:position pos:line="11" pos:column="28"/></name></name></expr>)<pos:position pos:line="11" pos:column="29"/></condition><then pos:line="11" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="17">debug_unpack_callback<pos:position pos:line="12" pos:column="38"/></name><argument_list pos:line="12" pos:column="38">(<argument><expr><name pos:line="12" pos:column="39">n<pos:position pos:line="12" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="42">mask<pos:position pos:line="12" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="48">dirmask<pos:position pos:line="12" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="57">names<pos:position pos:line="12" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="64">info<pos:position pos:line="12" pos:column="68"/></name></expr></argument>)<pos:position pos:line="12" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="70"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="14" pos:column="9">/* Are we supposed to look at the index too? */</comment>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name><name pos:line="15" pos:column="13">o<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">-&gt;<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="16">merge<pos:position pos:line="15" pos:column="21"/></name></name></expr>)<pos:position pos:line="15" pos:column="22"/></condition><then pos:line="15" pos:column="22"> <block pos:line="15" pos:column="23">{
		<while pos:line="16" pos:column="17">while <condition pos:line="16" pos:column="23">(<expr><literal type="number" pos:line="16" pos:column="24">1<pos:position pos:line="16" pos:column="25"/></literal></expr>)<pos:position pos:line="16" pos:column="26"/></condition> <block pos:line="16" pos:column="27">{
			<decl_stmt><decl><type><name pos:line="17" pos:column="25">int<pos:position pos:line="17" pos:column="28"/></name></type> <name pos:line="17" pos:column="29">cmp<pos:position pos:line="17" pos:column="32"/></name></decl>;<pos:position pos:line="17" pos:column="33"/></decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="18" pos:column="25">struct<pos:position pos:line="18" pos:column="31"/></name> <name pos:line="18" pos:column="32">cache_entry<pos:position pos:line="18" pos:column="43"/></name></name> <modifier pos:line="18" pos:column="44">*<pos:position pos:line="18" pos:column="45"/></modifier></type><name pos:line="18" pos:column="45">ce<pos:position pos:line="18" pos:column="47"/></name></decl>;<pos:position pos:line="18" pos:column="48"/></decl_stmt>

			<if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><name><name pos:line="20" pos:column="29">o<pos:position pos:line="20" pos:column="30"/></name><operator pos:line="20" pos:column="30">-&gt;<pos:position pos:line="20" pos:column="35"/></operator><name pos:line="20" pos:column="32">diff_index_cached<pos:position pos:line="20" pos:column="49"/></name></name></expr>)<pos:position pos:line="20" pos:column="50"/></condition><then pos:line="20" pos:column="50">
				<block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="33">ce<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">=<pos:position pos:line="21" pos:column="37"/></operator> <call><name pos:line="21" pos:column="38">next_cache_entry<pos:position pos:line="21" pos:column="54"/></name><argument_list pos:line="21" pos:column="54">(<argument><expr><name pos:line="21" pos:column="55">o<pos:position pos:line="21" pos:column="56"/></name></expr></argument>)<pos:position pos:line="21" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="58"/></expr_stmt></block></then>
			<else pos:line="22" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="33">ce<pos:position pos:line="23" pos:column="35"/></name> <operator pos:line="23" pos:column="36">=<pos:position pos:line="23" pos:column="37"/></operator> <call><name pos:line="23" pos:column="38">find_cache_entry<pos:position pos:line="23" pos:column="54"/></name><argument_list pos:line="23" pos:column="54">(<argument><expr><name pos:line="23" pos:column="55">info<pos:position pos:line="23" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="61">p<pos:position pos:line="23" pos:column="62"/></name></expr></argument>)<pos:position pos:line="23" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="64"/></expr_stmt></block></else></if>

			<if pos:line="25" pos:column="25">if <condition pos:line="25" pos:column="28">(<expr><operator pos:line="25" pos:column="29">!<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="30">ce<pos:position pos:line="25" pos:column="32"/></name></expr>)<pos:position pos:line="25" pos:column="33"/></condition><then pos:line="25" pos:column="33">
				<block type="pseudo"><break pos:line="26" pos:column="33">break;<pos:position pos:line="26" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><name pos:line="27" pos:column="25">cmp<pos:position pos:line="27" pos:column="28"/></name> <operator pos:line="27" pos:column="29">=<pos:position pos:line="27" pos:column="30"/></operator> <call><name pos:line="27" pos:column="31">compare_entry<pos:position pos:line="27" pos:column="44"/></name><argument_list pos:line="27" pos:column="44">(<argument><expr><name pos:line="27" pos:column="45">ce<pos:position pos:line="27" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="49">info<pos:position pos:line="27" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="55">p<pos:position pos:line="27" pos:column="56"/></name></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="58"/></expr_stmt>
			<if pos:line="28" pos:column="25">if <condition pos:line="28" pos:column="28">(<expr><name pos:line="28" pos:column="29">cmp<pos:position pos:line="28" pos:column="32"/></name> <operator pos:line="28" pos:column="33">&lt;<pos:position pos:line="28" pos:column="37"/></operator> <literal type="number" pos:line="28" pos:column="35">0<pos:position pos:line="28" pos:column="36"/></literal></expr>)<pos:position pos:line="28" pos:column="37"/></condition><then pos:line="28" pos:column="37"> <block pos:line="28" pos:column="38">{
				<if pos:line="29" pos:column="33">if <condition pos:line="29" pos:column="36">(<expr><call><name pos:line="29" pos:column="37">unpack_index_entry<pos:position pos:line="29" pos:column="55"/></name><argument_list pos:line="29" pos:column="55">(<argument><expr><name pos:line="29" pos:column="56">ce<pos:position pos:line="29" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="60">o<pos:position pos:line="29" pos:column="61"/></name></expr></argument>)<pos:position pos:line="29" pos:column="62"/></argument_list></call> <operator pos:line="29" pos:column="63">&lt;<pos:position pos:line="29" pos:column="67"/></operator> <literal type="number" pos:line="29" pos:column="65">0<pos:position pos:line="29" pos:column="66"/></literal></expr>)<pos:position pos:line="29" pos:column="67"/></condition><then pos:line="29" pos:column="67">
					<block type="pseudo"><return pos:line="30" pos:column="41">return <expr><call><name pos:line="30" pos:column="48">unpack_failed<pos:position pos:line="30" pos:column="61"/></name><argument_list pos:line="30" pos:column="61">(<argument><expr><name pos:line="30" pos:column="62">o<pos:position pos:line="30" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="65">NULL<pos:position pos:line="30" pos:column="69"/></name></expr></argument>)<pos:position pos:line="30" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="71"/></return></block></then></if>
				<continue pos:line="31" pos:column="33">continue;<pos:position pos:line="31" pos:column="42"/></continue>
			}<pos:position pos:line="32" pos:column="26"/></block></then></if>
			<if pos:line="33" pos:column="25">if <condition pos:line="33" pos:column="28">(<expr><operator pos:line="33" pos:column="29">!<pos:position pos:line="33" pos:column="30"/></operator><name pos:line="33" pos:column="30">cmp<pos:position pos:line="33" pos:column="33"/></name></expr>)<pos:position pos:line="33" pos:column="34"/></condition><then pos:line="33" pos:column="34"> <block pos:line="33" pos:column="35">{
				<if pos:line="34" pos:column="33">if <condition pos:line="34" pos:column="36">(<expr><call><name pos:line="34" pos:column="37">ce_stage<pos:position pos:line="34" pos:column="45"/></name><argument_list pos:line="34" pos:column="45">(<argument><expr><name pos:line="34" pos:column="46">ce<pos:position pos:line="34" pos:column="48"/></name></expr></argument>)<pos:position pos:line="34" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="50"/></condition><then pos:line="34" pos:column="50"> <block pos:line="34" pos:column="51">{
					<comment type="block" pos:line="35" pos:column="41">/*
					 * If we skip unmerged index
					 * entries, we'll skip this
					 * entry *and* the tree
					 * entries associated with it!
					 */</comment>
					<if pos:line="41" pos:column="41">if <condition pos:line="41" pos:column="44">(<expr><name><name pos:line="41" pos:column="45">o<pos:position pos:line="41" pos:column="46"/></name><operator pos:line="41" pos:column="46">-&gt;<pos:position pos:line="41" pos:column="51"/></operator><name pos:line="41" pos:column="48">skip_unmerged<pos:position pos:line="41" pos:column="61"/></name></name></expr>)<pos:position pos:line="41" pos:column="62"/></condition><then pos:line="41" pos:column="62"> <block pos:line="41" pos:column="63">{
						<expr_stmt><expr><call><name pos:line="42" pos:column="49">add_same_unmerged<pos:position pos:line="42" pos:column="66"/></name><argument_list pos:line="42" pos:column="66">(<argument><expr><name pos:line="42" pos:column="67">ce<pos:position pos:line="42" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="71">o<pos:position pos:line="42" pos:column="72"/></name></expr></argument>)<pos:position pos:line="42" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="74"/></expr_stmt>
						<return pos:line="43" pos:column="49">return <expr><name pos:line="43" pos:column="56">mask<pos:position pos:line="43" pos:column="60"/></name></expr>;<pos:position pos:line="43" pos:column="61"/></return>
					}<pos:position pos:line="44" pos:column="42"/></block></then></if>
				}<pos:position pos:line="45" pos:column="34"/></block></then></if>
				<expr_stmt><expr><name><name pos:line="46" pos:column="33">src<pos:position pos:line="46" pos:column="36"/></name><index pos:line="46" pos:column="36">[<expr><literal type="number" pos:line="46" pos:column="37">0<pos:position pos:line="46" pos:column="38"/></literal></expr>]<pos:position pos:line="46" pos:column="39"/></index></name> <operator pos:line="46" pos:column="40">=<pos:position pos:line="46" pos:column="41"/></operator> <name pos:line="46" pos:column="42">ce<pos:position pos:line="46" pos:column="44"/></name></expr>;<pos:position pos:line="46" pos:column="45"/></expr_stmt>
			}<pos:position pos:line="47" pos:column="26"/></block></then></if>
			<break pos:line="48" pos:column="25">break;<pos:position pos:line="48" pos:column="31"/></break>
		}<pos:position pos:line="49" pos:column="18"/></block></while>
	}<pos:position pos:line="50" pos:column="10"/></block></then></if>

	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><call><name pos:line="52" pos:column="13">unpack_nondirectories<pos:position pos:line="52" pos:column="34"/></name><argument_list pos:line="52" pos:column="34">(<argument><expr><name pos:line="52" pos:column="35">n<pos:position pos:line="52" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="38">mask<pos:position pos:line="52" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="44">dirmask<pos:position pos:line="52" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="53">src<pos:position pos:line="52" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="58">names<pos:position pos:line="52" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="65">info<pos:position pos:line="52" pos:column="69"/></name></expr></argument>)<pos:position pos:line="52" pos:column="70"/></argument_list></call> <operator pos:line="52" pos:column="71">&lt;<pos:position pos:line="52" pos:column="75"/></operator> <literal type="number" pos:line="52" pos:column="73">0<pos:position pos:line="52" pos:column="74"/></literal></expr>)<pos:position pos:line="52" pos:column="75"/></condition><then pos:line="52" pos:column="75">
		<block type="pseudo"><return pos:line="53" pos:column="17">return <expr><operator pos:line="53" pos:column="24">-<pos:position pos:line="53" pos:column="25"/></operator><literal type="number" pos:line="53" pos:column="25">1<pos:position pos:line="53" pos:column="26"/></literal></expr>;<pos:position pos:line="53" pos:column="27"/></return></block></then></if>

	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><name><name pos:line="55" pos:column="13">o<pos:position pos:line="55" pos:column="14"/></name><operator pos:line="55" pos:column="14">-&gt;<pos:position pos:line="55" pos:column="19"/></operator><name pos:line="55" pos:column="16">merge<pos:position pos:line="55" pos:column="21"/></name></name> <operator pos:line="55" pos:column="22">&amp;&amp;<pos:position pos:line="55" pos:column="32"/></operator> <name><name pos:line="55" pos:column="25">src<pos:position pos:line="55" pos:column="28"/></name><index pos:line="55" pos:column="28">[<expr><literal type="number" pos:line="55" pos:column="29">0<pos:position pos:line="55" pos:column="30"/></literal></expr>]<pos:position pos:line="55" pos:column="31"/></index></name></expr>)<pos:position pos:line="55" pos:column="32"/></condition><then pos:line="55" pos:column="32"> <block pos:line="55" pos:column="33">{
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><call><name pos:line="56" pos:column="21">ce_stage<pos:position pos:line="56" pos:column="29"/></name><argument_list pos:line="56" pos:column="29">(<argument><expr><name><name pos:line="56" pos:column="30">src<pos:position pos:line="56" pos:column="33"/></name><index pos:line="56" pos:column="33">[<expr><literal type="number" pos:line="56" pos:column="34">0<pos:position pos:line="56" pos:column="35"/></literal></expr>]<pos:position pos:line="56" pos:column="36"/></index></name></expr></argument>)<pos:position pos:line="56" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="38"/></condition><then pos:line="56" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="25">mark_ce_used_same_name<pos:position pos:line="57" pos:column="47"/></name><argument_list pos:line="57" pos:column="47">(<argument><expr><name><name pos:line="57" pos:column="48">src<pos:position pos:line="57" pos:column="51"/></name><index pos:line="57" pos:column="51">[<expr><literal type="number" pos:line="57" pos:column="52">0<pos:position pos:line="57" pos:column="53"/></literal></expr>]<pos:position pos:line="57" pos:column="54"/></index></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="56">o<pos:position pos:line="57" pos:column="57"/></name></expr></argument>)<pos:position pos:line="57" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="59"/></expr_stmt></block></then>
		<else pos:line="58" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="25">mark_ce_used<pos:position pos:line="59" pos:column="37"/></name><argument_list pos:line="59" pos:column="37">(<argument><expr><name><name pos:line="59" pos:column="38">src<pos:position pos:line="59" pos:column="41"/></name><index pos:line="59" pos:column="41">[<expr><literal type="number" pos:line="59" pos:column="42">0<pos:position pos:line="59" pos:column="43"/></literal></expr>]<pos:position pos:line="59" pos:column="44"/></index></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="46">o<pos:position pos:line="59" pos:column="47"/></name></expr></argument>)<pos:position pos:line="59" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="49"/></expr_stmt></block></else></if>
	}<pos:position pos:line="60" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="62" pos:column="9">/* Now handle any directories.. */</comment>
	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">dirmask<pos:position pos:line="63" pos:column="20"/></name></expr>)<pos:position pos:line="63" pos:column="21"/></condition><then pos:line="63" pos:column="21"> <block pos:line="63" pos:column="22">{
		<comment type="block" pos:line="64" pos:column="17">/* special case: "diff-index --cached" looking at a tree */</comment>
		<if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><name><name pos:line="65" pos:column="21">o<pos:position pos:line="65" pos:column="22"/></name><operator pos:line="65" pos:column="22">-&gt;<pos:position pos:line="65" pos:column="27"/></operator><name pos:line="65" pos:column="24">diff_index_cached<pos:position pos:line="65" pos:column="41"/></name></name> <operator pos:line="65" pos:column="42">&amp;&amp;<pos:position pos:line="65" pos:column="52"/></operator>
		    <name pos:line="66" pos:column="21">n<pos:position pos:line="66" pos:column="22"/></name> <operator pos:line="66" pos:column="23">==<pos:position pos:line="66" pos:column="25"/></operator> <literal type="number" pos:line="66" pos:column="26">1<pos:position pos:line="66" pos:column="27"/></literal> <operator pos:line="66" pos:column="28">&amp;&amp;<pos:position pos:line="66" pos:column="38"/></operator> <name pos:line="66" pos:column="31">dirmask<pos:position pos:line="66" pos:column="38"/></name> <operator pos:line="66" pos:column="39">==<pos:position pos:line="66" pos:column="41"/></operator> <literal type="number" pos:line="66" pos:column="42">1<pos:position pos:line="66" pos:column="43"/></literal> <operator pos:line="66" pos:column="44">&amp;&amp;<pos:position pos:line="66" pos:column="54"/></operator> <call><name pos:line="66" pos:column="47">S_ISDIR<pos:position pos:line="66" pos:column="54"/></name><argument_list pos:line="66" pos:column="54">(<argument><expr><name><name pos:line="66" pos:column="55">names<pos:position pos:line="66" pos:column="60"/></name><operator pos:line="66" pos:column="60">-&gt;<pos:position pos:line="66" pos:column="65"/></operator><name pos:line="66" pos:column="62">mode<pos:position pos:line="66" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="68"/></condition><then pos:line="66" pos:column="68"> <block pos:line="66" pos:column="69">{
			<decl_stmt><decl><type><name pos:line="67" pos:column="25">int<pos:position pos:line="67" pos:column="28"/></name></type> <name pos:line="67" pos:column="29">matches<pos:position pos:line="67" pos:column="36"/></name></decl>;<pos:position pos:line="67" pos:column="37"/></decl_stmt>
			<expr_stmt><expr><name pos:line="68" pos:column="25">matches<pos:position pos:line="68" pos:column="32"/></name> <operator pos:line="68" pos:column="33">=<pos:position pos:line="68" pos:column="34"/></operator> <call><name pos:line="68" pos:column="35">cache_tree_matches_traversal<pos:position pos:line="68" pos:column="63"/></name><argument_list pos:line="68" pos:column="63">(<argument><expr><name><name pos:line="68" pos:column="64">o<pos:position pos:line="68" pos:column="65"/></name><operator pos:line="68" pos:column="65">-&gt;<pos:position pos:line="68" pos:column="70"/></operator><name pos:line="68" pos:column="67">src_index<pos:position pos:line="68" pos:column="76"/></name><operator pos:line="68" pos:column="76">-&gt;<pos:position pos:line="68" pos:column="81"/></operator><name pos:line="68" pos:column="78">cache_tree<pos:position pos:line="68" pos:column="88"/></name></name></expr></argument>,
							       <argument><expr><name pos:line="69" pos:column="64">names<pos:position pos:line="69" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="71">info<pos:position pos:line="69" pos:column="75"/></name></expr></argument>)<pos:position pos:line="69" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="77"/></expr_stmt>
			<comment type="block" pos:line="70" pos:column="25">/*
			 * Everything under the name matches; skip the
			 * entire hierarchy.  diff_index_cached codepath
			 * special cases D/F conflicts in such a way that
			 * it does not do any look-ahead, so this is safe.
			 */</comment>
			<if pos:line="76" pos:column="25">if <condition pos:line="76" pos:column="28">(<expr><name pos:line="76" pos:column="29">matches<pos:position pos:line="76" pos:column="36"/></name></expr>)<pos:position pos:line="76" pos:column="37"/></condition><then pos:line="76" pos:column="37"> <block pos:line="76" pos:column="38">{
				<expr_stmt><expr><name><name pos:line="77" pos:column="33">o<pos:position pos:line="77" pos:column="34"/></name><operator pos:line="77" pos:column="34">-&gt;<pos:position pos:line="77" pos:column="39"/></operator><name pos:line="77" pos:column="36">cache_bottom<pos:position pos:line="77" pos:column="48"/></name></name> <operator pos:line="77" pos:column="49">+=<pos:position pos:line="77" pos:column="51"/></operator> <name pos:line="77" pos:column="52">matches<pos:position pos:line="77" pos:column="59"/></name></expr>;<pos:position pos:line="77" pos:column="60"/></expr_stmt>
				<return pos:line="78" pos:column="33">return <expr><name pos:line="78" pos:column="40">mask<pos:position pos:line="78" pos:column="44"/></name></expr>;<pos:position pos:line="78" pos:column="45"/></return>
			}<pos:position pos:line="79" pos:column="26"/></block></then></if>
		}<pos:position pos:line="80" pos:column="18"/></block></then></if>

		<if pos:line="82" pos:column="17">if <condition pos:line="82" pos:column="20">(<expr><call><name pos:line="82" pos:column="21">traverse_trees_recursive<pos:position pos:line="82" pos:column="45"/></name><argument_list pos:line="82" pos:column="45">(<argument><expr><name pos:line="82" pos:column="46">n<pos:position pos:line="82" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="49">dirmask<pos:position pos:line="82" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="58">mask<pos:position pos:line="82" pos:column="62"/></name> <operator pos:line="82" pos:column="63">&amp;<pos:position pos:line="82" pos:column="68"/></operator> <operator pos:line="82" pos:column="65">~<pos:position pos:line="82" pos:column="66"/></operator><name pos:line="82" pos:column="66">dirmask<pos:position pos:line="82" pos:column="73"/></name></expr></argument>,
					     <argument><expr><name pos:line="83" pos:column="46">names<pos:position pos:line="83" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="53">info<pos:position pos:line="83" pos:column="57"/></name></expr></argument>)<pos:position pos:line="83" pos:column="58"/></argument_list></call> <operator pos:line="83" pos:column="59">&lt;<pos:position pos:line="83" pos:column="63"/></operator> <literal type="number" pos:line="83" pos:column="61">0<pos:position pos:line="83" pos:column="62"/></literal></expr>)<pos:position pos:line="83" pos:column="63"/></condition><then pos:line="83" pos:column="63">
			<block type="pseudo"><return pos:line="84" pos:column="25">return <expr><operator pos:line="84" pos:column="32">-<pos:position pos:line="84" pos:column="33"/></operator><literal type="number" pos:line="84" pos:column="33">1<pos:position pos:line="84" pos:column="34"/></literal></expr>;<pos:position pos:line="84" pos:column="35"/></return></block></then></if>
		<return pos:line="85" pos:column="17">return <expr><name pos:line="85" pos:column="24">mask<pos:position pos:line="85" pos:column="28"/></name></expr>;<pos:position pos:line="85" pos:column="29"/></return>
	}<pos:position pos:line="86" pos:column="10"/></block></then></if>

	<return pos:line="88" pos:column="9">return <expr><name pos:line="88" pos:column="16">mask<pos:position pos:line="88" pos:column="20"/></name></expr>;<pos:position pos:line="88" pos:column="21"/></return>
}<pos:position pos:line="89" pos:column="2"/></block></function></unit>
