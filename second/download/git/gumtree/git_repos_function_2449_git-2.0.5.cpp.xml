<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2449_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">write_packed_entry_fn<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">ref_entry<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">entry<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">void<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">cb_data<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name> <modifier pos:line="3" pos:column="13">*<pos:position pos:line="3" pos:column="14"/></modifier></type><name pos:line="3" pos:column="14">fd<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><name pos:line="3" pos:column="19">cb_data<pos:position pos:line="3" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">enum<pos:position pos:line="4" pos:column="13"/></name> <name pos:line="4" pos:column="14">peel_status<pos:position pos:line="4" pos:column="25"/></name></name></type> <name pos:line="4" pos:column="26">peel_status<pos:position pos:line="4" pos:column="37"/></name> <init pos:line="4" pos:column="38">= <expr><call><name pos:line="4" pos:column="40">peel_entry<pos:position pos:line="4" pos:column="50"/></name><argument_list pos:line="4" pos:column="50">(<argument><expr><name pos:line="4" pos:column="51">entry<pos:position pos:line="4" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="58">0<pos:position pos:line="4" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="61"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">peel_status<pos:position pos:line="6" pos:column="24"/></name> <operator pos:line="6" pos:column="25">!=<pos:position pos:line="6" pos:column="27"/></operator> <name pos:line="6" pos:column="28">PEEL_PEELED<pos:position pos:line="6" pos:column="39"/></name> <operator pos:line="6" pos:column="40">&amp;&amp;<pos:position pos:line="6" pos:column="50"/></operator> <name pos:line="6" pos:column="43">peel_status<pos:position pos:line="6" pos:column="54"/></name> <operator pos:line="6" pos:column="55">!=<pos:position pos:line="6" pos:column="57"/></operator> <name pos:line="6" pos:column="58">PEEL_NON_TAG<pos:position pos:line="6" pos:column="70"/></name></expr>)<pos:position pos:line="6" pos:column="71"/></condition><then pos:line="6" pos:column="71">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">error<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><literal type="string" pos:line="7" pos:column="23">"internal error: %s is not a valid packed reference!"<pos:position pos:line="7" pos:column="76"/></literal></expr></argument>,
		      <argument><expr><name><name pos:line="8" pos:column="23">entry<pos:position pos:line="8" pos:column="28"/></name><operator pos:line="8" pos:column="28">-&gt;<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="30">name<pos:position pos:line="8" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="9" pos:column="9">write_packed_entry<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">(<argument><expr><operator pos:line="9" pos:column="28">*<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="29">fd<pos:position pos:line="9" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="33">entry<pos:position pos:line="9" pos:column="38"/></name><operator pos:line="9" pos:column="38">-&gt;<pos:position pos:line="9" pos:column="43"/></operator><name pos:line="9" pos:column="40">name<pos:position pos:line="9" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="46">entry<pos:position pos:line="9" pos:column="51"/></name><operator pos:line="9" pos:column="51">-&gt;<pos:position pos:line="9" pos:column="56"/></operator><name pos:line="9" pos:column="53">u<pos:position pos:line="9" pos:column="54"/></name><operator pos:line="9" pos:column="54">.<pos:position pos:line="9" pos:column="55"/></operator><name pos:line="9" pos:column="55">value<pos:position pos:line="9" pos:column="60"/></name><operator pos:line="9" pos:column="60">.<pos:position pos:line="9" pos:column="61"/></operator><name pos:line="9" pos:column="61">sha1<pos:position pos:line="9" pos:column="65"/></name></name></expr></argument>,
			   <argument><expr><ternary><condition><expr><name pos:line="10" pos:column="28">peel_status<pos:position pos:line="10" pos:column="39"/></name> <operator pos:line="10" pos:column="40">==<pos:position pos:line="10" pos:column="42"/></operator> <name pos:line="10" pos:column="43">PEEL_PEELED<pos:position pos:line="10" pos:column="54"/></name></expr> ?<pos:position pos:line="10" pos:column="56"/></condition><then pos:line="10" pos:column="56">
			   <expr><name><name pos:line="11" pos:column="28">entry<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">-&gt;<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="35">u<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">.<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="37">value<pos:position pos:line="11" pos:column="42"/></name><operator pos:line="11" pos:column="42">.<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="43">peeled<pos:position pos:line="11" pos:column="49"/></name></name></expr> <pos:position pos:line="11" pos:column="50"/></then><else pos:line="11" pos:column="50">: <expr><name pos:line="11" pos:column="52">NULL<pos:position pos:line="11" pos:column="56"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="58"/></expr_stmt>
	<return pos:line="12" pos:column="9">return <expr><literal type="number" pos:line="12" pos:column="16">0<pos:position pos:line="12" pos:column="17"/></literal></expr>;<pos:position pos:line="12" pos:column="18"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
