<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4204_git-2.2.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">insert_one_record<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name><name pos:line="1" pos:column="31">struct<pos:position pos:line="1" pos:column="37"/></name> <name pos:line="1" pos:column="38">shortlog<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">log<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>,
			      <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">author<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>,
			      <parameter><decl><type><specifier pos:line="3" pos:column="31">const<pos:position pos:line="3" pos:column="36"/></specifier> <name pos:line="3" pos:column="37">char<pos:position pos:line="3" pos:column="41"/></name> <modifier pos:line="3" pos:column="42">*<pos:position pos:line="3" pos:column="43"/></modifier></type><name pos:line="3" pos:column="43">oneline<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="51"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">dot3<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name><name pos:line="5" pos:column="28">log<pos:position pos:line="5" pos:column="31"/></name><operator pos:line="5" pos:column="31">-&gt;<pos:position pos:line="5" pos:column="36"/></operator><name pos:line="5" pos:column="33">common_repo_prefix<pos:position pos:line="5" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">buffer<pos:position pos:line="6" pos:column="21"/></name></decl>, <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="24">p<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">string_list_item<pos:position pos:line="7" pos:column="32"/></name></name> <modifier pos:line="7" pos:column="33">*<pos:position pos:line="7" pos:column="34"/></modifier></type><name pos:line="7" pos:column="34">item<pos:position pos:line="7" pos:column="38"/></name></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">mailbuf<pos:position pos:line="8" pos:column="28"/></name></decl>, <modifier pos:line="8" pos:column="30">*<pos:position pos:line="8" pos:column="31"/></modifier><decl><type ref="prev"/><name pos:line="8" pos:column="31">namebuf<pos:position pos:line="8" pos:column="38"/></name></decl>;<pos:position pos:line="8" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">size_t<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">namelen<pos:position pos:line="9" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="25">maillen<pos:position pos:line="9" pos:column="32"/></name></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">char<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">eol<pos:position pos:line="10" pos:column="24"/></name></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">strbuf<pos:position pos:line="11" pos:column="22"/></name></name></type> <name pos:line="11" pos:column="23">subject<pos:position pos:line="11" pos:column="30"/></name> <init pos:line="11" pos:column="31">= <expr><name pos:line="11" pos:column="33">STRBUF_INIT<pos:position pos:line="11" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="12" pos:column="9">struct<pos:position pos:line="12" pos:column="15"/></name> <name pos:line="12" pos:column="16">strbuf<pos:position pos:line="12" pos:column="22"/></name></name></type> <name pos:line="12" pos:column="23">namemailbuf<pos:position pos:line="12" pos:column="34"/></name> <init pos:line="12" pos:column="35">= <expr><name pos:line="12" pos:column="37">STRBUF_INIT<pos:position pos:line="12" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="13" pos:column="9">struct<pos:position pos:line="13" pos:column="15"/></name> <name pos:line="13" pos:column="16">ident_split<pos:position pos:line="13" pos:column="27"/></name></name></type> <name pos:line="13" pos:column="28">ident<pos:position pos:line="13" pos:column="33"/></name></decl>;<pos:position pos:line="13" pos:column="34"/></decl_stmt>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">split_ident_line<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><operator pos:line="15" pos:column="30">&amp;<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="31">ident<pos:position pos:line="15" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="38">author<pos:position pos:line="15" pos:column="44"/></name></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="46">strlen<pos:position pos:line="15" pos:column="52"/></name><argument_list pos:line="15" pos:column="52">(<argument><expr><name pos:line="15" pos:column="53">author<pos:position pos:line="15" pos:column="59"/></name></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="62"/></condition><then pos:line="15" pos:column="62">
		<block type="pseudo"><return pos:line="16" pos:column="17">return;<pos:position pos:line="16" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><name pos:line="18" pos:column="9">namebuf<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <name><name pos:line="18" pos:column="19">ident<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">.<pos:position pos:line="18" pos:column="25"/></operator><name pos:line="18" pos:column="25">name_begin<pos:position pos:line="18" pos:column="35"/></name></name></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="19" pos:column="9">mailbuf<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <name><name pos:line="19" pos:column="19">ident<pos:position pos:line="19" pos:column="24"/></name><operator pos:line="19" pos:column="24">.<pos:position pos:line="19" pos:column="25"/></operator><name pos:line="19" pos:column="25">mail_begin<pos:position pos:line="19" pos:column="35"/></name></name></expr>;<pos:position pos:line="19" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name pos:line="20" pos:column="9">namelen<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <name><name pos:line="20" pos:column="19">ident<pos:position pos:line="20" pos:column="24"/></name><operator pos:line="20" pos:column="24">.<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="25">name_end<pos:position pos:line="20" pos:column="33"/></name></name> <operator pos:line="20" pos:column="34">-<pos:position pos:line="20" pos:column="35"/></operator> <name><name pos:line="20" pos:column="36">ident<pos:position pos:line="20" pos:column="41"/></name><operator pos:line="20" pos:column="41">.<pos:position pos:line="20" pos:column="42"/></operator><name pos:line="20" pos:column="42">name_begin<pos:position pos:line="20" pos:column="52"/></name></name></expr>;<pos:position pos:line="20" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><name pos:line="21" pos:column="9">maillen<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <name><name pos:line="21" pos:column="19">ident<pos:position pos:line="21" pos:column="24"/></name><operator pos:line="21" pos:column="24">.<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="25">mail_end<pos:position pos:line="21" pos:column="33"/></name></name> <operator pos:line="21" pos:column="34">-<pos:position pos:line="21" pos:column="35"/></operator> <name><name pos:line="21" pos:column="36">ident<pos:position pos:line="21" pos:column="41"/></name><operator pos:line="21" pos:column="41">.<pos:position pos:line="21" pos:column="42"/></operator><name pos:line="21" pos:column="42">mail_begin<pos:position pos:line="21" pos:column="52"/></name></name></expr>;<pos:position pos:line="21" pos:column="53"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="23" pos:column="9">map_user<pos:position pos:line="23" pos:column="17"/></name><argument_list pos:line="23" pos:column="17">(<argument><expr><operator pos:line="23" pos:column="18">&amp;<pos:position pos:line="23" pos:column="23"/></operator><name><name pos:line="23" pos:column="19">log<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">-&gt;<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="24">mailmap<pos:position pos:line="23" pos:column="31"/></name></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="33">&amp;<pos:position pos:line="23" pos:column="38"/></operator><name pos:line="23" pos:column="34">mailbuf<pos:position pos:line="23" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="43">&amp;<pos:position pos:line="23" pos:column="48"/></operator><name pos:line="23" pos:column="44">maillen<pos:position pos:line="23" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="53">&amp;<pos:position pos:line="23" pos:column="58"/></operator><name pos:line="23" pos:column="54">namebuf<pos:position pos:line="23" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="63">&amp;<pos:position pos:line="23" pos:column="68"/></operator><name pos:line="23" pos:column="64">namelen<pos:position pos:line="23" pos:column="71"/></name></expr></argument>)<pos:position pos:line="23" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="73"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">strbuf_add<pos:position pos:line="24" pos:column="19"/></name><argument_list pos:line="24" pos:column="19">(<argument><expr><operator pos:line="24" pos:column="20">&amp;<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="21">namemailbuf<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="34">namebuf<pos:position pos:line="24" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="43">namelen<pos:position pos:line="24" pos:column="50"/></name></expr></argument>)<pos:position pos:line="24" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="52"/></expr_stmt>

	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name><name pos:line="26" pos:column="13">log<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">-&gt;<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="18">email<pos:position pos:line="26" pos:column="23"/></name></name></expr>)<pos:position pos:line="26" pos:column="24"/></condition><then pos:line="26" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="17">strbuf_addf<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><operator pos:line="27" pos:column="29">&amp;<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="30">namemailbuf<pos:position pos:line="27" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="43">" &lt;%.*s&gt;"<pos:position pos:line="27" pos:column="58"/></literal></expr></argument>, <argument><expr><operator pos:line="27" pos:column="54">(<pos:position pos:line="27" pos:column="55"/></operator><name pos:line="27" pos:column="55">int<pos:position pos:line="27" pos:column="58"/></name><operator pos:line="27" pos:column="58">)<pos:position pos:line="27" pos:column="59"/></operator><name pos:line="27" pos:column="59">maillen<pos:position pos:line="27" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="68">mailbuf<pos:position pos:line="27" pos:column="75"/></name></expr></argument>)<pos:position pos:line="27" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="77"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="29" pos:column="9">item<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">=<pos:position pos:line="29" pos:column="15"/></operator> <call><name pos:line="29" pos:column="16">string_list_insert<pos:position pos:line="29" pos:column="34"/></name><argument_list pos:line="29" pos:column="34">(<argument><expr><operator pos:line="29" pos:column="35">&amp;<pos:position pos:line="29" pos:column="40"/></operator><name><name pos:line="29" pos:column="36">log<pos:position pos:line="29" pos:column="39"/></name><operator pos:line="29" pos:column="39">-&gt;<pos:position pos:line="29" pos:column="44"/></operator><name pos:line="29" pos:column="41">list<pos:position pos:line="29" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="47">namemailbuf<pos:position pos:line="29" pos:column="58"/></name><operator pos:line="29" pos:column="58">.<pos:position pos:line="29" pos:column="59"/></operator><name pos:line="29" pos:column="59">buf<pos:position pos:line="29" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="64"/></expr_stmt>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name><name pos:line="30" pos:column="13">item<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">-&gt;<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="19">util<pos:position pos:line="30" pos:column="23"/></name></name> <operator pos:line="30" pos:column="24">==<pos:position pos:line="30" pos:column="26"/></operator> <name pos:line="30" pos:column="27">NULL<pos:position pos:line="30" pos:column="31"/></name></expr>)<pos:position pos:line="30" pos:column="32"/></condition><then pos:line="30" pos:column="32">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="31" pos:column="17">item<pos:position pos:line="31" pos:column="21"/></name><operator pos:line="31" pos:column="21">-&gt;<pos:position pos:line="31" pos:column="26"/></operator><name pos:line="31" pos:column="23">util<pos:position pos:line="31" pos:column="27"/></name></name> <operator pos:line="31" pos:column="28">=<pos:position pos:line="31" pos:column="29"/></operator> <call><name pos:line="31" pos:column="30">xcalloc<pos:position pos:line="31" pos:column="37"/></name><argument_list pos:line="31" pos:column="37">(<argument><expr><literal type="number" pos:line="31" pos:column="38">1<pos:position pos:line="31" pos:column="39"/></literal></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="41">sizeof<argument_list pos:line="31" pos:column="47">(<argument><expr pos:line="31" pos:column="48">struct <name pos:line="31" pos:column="55">string_list<pos:position pos:line="31" pos:column="66"/></name></expr></argument>)<pos:position pos:line="31" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="69"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="33" pos:column="9">/* Skip any leading whitespace, including any blank lines. */</comment>
	<while pos:line="34" pos:column="9">while <condition pos:line="34" pos:column="15">(<expr><operator pos:line="34" pos:column="16">*<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="17">oneline<pos:position pos:line="34" pos:column="24"/></name> <operator pos:line="34" pos:column="25">&amp;&amp;<pos:position pos:line="34" pos:column="35"/></operator> <call><name pos:line="34" pos:column="28">isspace<pos:position pos:line="34" pos:column="35"/></name><argument_list pos:line="34" pos:column="35">(<argument><expr><operator pos:line="34" pos:column="36">*<pos:position pos:line="34" pos:column="37"/></operator><name pos:line="34" pos:column="37">oneline<pos:position pos:line="34" pos:column="44"/></name></expr></argument>)<pos:position pos:line="34" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="46"/></condition>
		<block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="17">oneline<pos:position pos:line="35" pos:column="24"/></name><operator pos:line="35" pos:column="24">++<pos:position pos:line="35" pos:column="26"/></operator></expr>;<pos:position pos:line="35" pos:column="27"/></expr_stmt></block></while>
	<expr_stmt><expr><name pos:line="36" pos:column="9">eol<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <call><name pos:line="36" pos:column="15">strchr<pos:position pos:line="36" pos:column="21"/></name><argument_list pos:line="36" pos:column="21">(<argument><expr><name pos:line="36" pos:column="22">oneline<pos:position pos:line="36" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="36" pos:column="31">'\n'<pos:position pos:line="36" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="37"/></expr_stmt>
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><operator pos:line="37" pos:column="13">!<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="14">eol<pos:position pos:line="37" pos:column="17"/></name></expr>)<pos:position pos:line="37" pos:column="18"/></condition><then pos:line="37" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="17">eol<pos:position pos:line="38" pos:column="20"/></name> <operator pos:line="38" pos:column="21">=<pos:position pos:line="38" pos:column="22"/></operator> <name pos:line="38" pos:column="23">oneline<pos:position pos:line="38" pos:column="30"/></name> <operator pos:line="38" pos:column="31">+<pos:position pos:line="38" pos:column="32"/></operator> <call><name pos:line="38" pos:column="33">strlen<pos:position pos:line="38" pos:column="39"/></name><argument_list pos:line="38" pos:column="39">(<argument><expr><name pos:line="38" pos:column="40">oneline<pos:position pos:line="38" pos:column="47"/></name></expr></argument>)<pos:position pos:line="38" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="49"/></expr_stmt></block></then></if>
	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><call><name pos:line="39" pos:column="13">starts_with<pos:position pos:line="39" pos:column="24"/></name><argument_list pos:line="39" pos:column="24">(<argument><expr><name pos:line="39" pos:column="25">oneline<pos:position pos:line="39" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="34">"[PATCH"<pos:position pos:line="39" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="44"/></condition><then pos:line="39" pos:column="44"> <block pos:line="39" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="40" pos:column="17">char<pos:position pos:line="40" pos:column="21"/></name> <modifier pos:line="40" pos:column="22">*<pos:position pos:line="40" pos:column="23"/></modifier></type><name pos:line="40" pos:column="23">eob<pos:position pos:line="40" pos:column="26"/></name> <init pos:line="40" pos:column="27">= <expr><call><name pos:line="40" pos:column="29">strchr<pos:position pos:line="40" pos:column="35"/></name><argument_list pos:line="40" pos:column="35">(<argument><expr><name pos:line="40" pos:column="36">oneline<pos:position pos:line="40" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="40" pos:column="45">']'<pos:position pos:line="40" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="40" pos:column="50"/></decl_stmt>
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">eob<pos:position pos:line="41" pos:column="24"/></name> <operator pos:line="41" pos:column="25">&amp;&amp;<pos:position pos:line="41" pos:column="35"/></operator> <operator pos:line="41" pos:column="28">(<pos:position pos:line="41" pos:column="29"/></operator><operator pos:line="41" pos:column="29">!<pos:position pos:line="41" pos:column="30"/></operator><name pos:line="41" pos:column="30">eol<pos:position pos:line="41" pos:column="33"/></name> <operator pos:line="41" pos:column="34">||<pos:position pos:line="41" pos:column="36"/></operator> <name pos:line="41" pos:column="37">eob<pos:position pos:line="41" pos:column="40"/></name> <operator pos:line="41" pos:column="41">&lt;<pos:position pos:line="41" pos:column="45"/></operator> <name pos:line="41" pos:column="43">eol<pos:position pos:line="41" pos:column="46"/></name><operator pos:line="41" pos:column="46">)<pos:position pos:line="41" pos:column="47"/></operator></expr>)<pos:position pos:line="41" pos:column="48"/></condition><then pos:line="41" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="25">oneline<pos:position pos:line="42" pos:column="32"/></name> <operator pos:line="42" pos:column="33">=<pos:position pos:line="42" pos:column="34"/></operator> <name pos:line="42" pos:column="35">eob<pos:position pos:line="42" pos:column="38"/></name> <operator pos:line="42" pos:column="39">+<pos:position pos:line="42" pos:column="40"/></operator> <literal type="number" pos:line="42" pos:column="41">1<pos:position pos:line="42" pos:column="42"/></literal></expr>;<pos:position pos:line="42" pos:column="43"/></expr_stmt></block></then></if>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>
	<while pos:line="44" pos:column="9">while <condition pos:line="44" pos:column="15">(<expr><operator pos:line="44" pos:column="16">*<pos:position pos:line="44" pos:column="17"/></operator><name pos:line="44" pos:column="17">oneline<pos:position pos:line="44" pos:column="24"/></name> <operator pos:line="44" pos:column="25">&amp;&amp;<pos:position pos:line="44" pos:column="35"/></operator> <call><name pos:line="44" pos:column="28">isspace<pos:position pos:line="44" pos:column="35"/></name><argument_list pos:line="44" pos:column="35">(<argument><expr><operator pos:line="44" pos:column="36">*<pos:position pos:line="44" pos:column="37"/></operator><name pos:line="44" pos:column="37">oneline<pos:position pos:line="44" pos:column="44"/></name></expr></argument>)<pos:position pos:line="44" pos:column="45"/></argument_list></call> <operator pos:line="44" pos:column="46">&amp;&amp;<pos:position pos:line="44" pos:column="56"/></operator> <operator pos:line="44" pos:column="49">*<pos:position pos:line="44" pos:column="50"/></operator><name pos:line="44" pos:column="50">oneline<pos:position pos:line="44" pos:column="57"/></name> <operator pos:line="44" pos:column="58">!=<pos:position pos:line="44" pos:column="60"/></operator> <literal type="char" pos:line="44" pos:column="61">'\n'<pos:position pos:line="44" pos:column="65"/></literal></expr>)<pos:position pos:line="44" pos:column="66"/></condition>
		<block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="17">oneline<pos:position pos:line="45" pos:column="24"/></name><operator pos:line="45" pos:column="24">++<pos:position pos:line="45" pos:column="26"/></operator></expr>;<pos:position pos:line="45" pos:column="27"/></expr_stmt></block></while>
	<expr_stmt><expr><call><name pos:line="46" pos:column="9">format_subject<pos:position pos:line="46" pos:column="23"/></name><argument_list pos:line="46" pos:column="23">(<argument><expr><operator pos:line="46" pos:column="24">&amp;<pos:position pos:line="46" pos:column="29"/></operator><name pos:line="46" pos:column="25">subject<pos:position pos:line="46" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="34">oneline<pos:position pos:line="46" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="43">" "<pos:position pos:line="46" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="48"/></expr_stmt>
	<expr_stmt><expr><name pos:line="47" pos:column="9">buffer<pos:position pos:line="47" pos:column="15"/></name> <operator pos:line="47" pos:column="16">=<pos:position pos:line="47" pos:column="17"/></operator> <call><name pos:line="47" pos:column="18">strbuf_detach<pos:position pos:line="47" pos:column="31"/></name><argument_list pos:line="47" pos:column="31">(<argument><expr><operator pos:line="47" pos:column="32">&amp;<pos:position pos:line="47" pos:column="37"/></operator><name pos:line="47" pos:column="33">subject<pos:position pos:line="47" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="42">NULL<pos:position pos:line="47" pos:column="46"/></name></expr></argument>)<pos:position pos:line="47" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="48"/></expr_stmt>

	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name pos:line="49" pos:column="13">dot3<pos:position pos:line="49" pos:column="17"/></name></expr>)<pos:position pos:line="49" pos:column="18"/></condition><then pos:line="49" pos:column="18"> <block pos:line="49" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="50" pos:column="17">int<pos:position pos:line="50" pos:column="20"/></name></type> <name pos:line="50" pos:column="21">dot3len<pos:position pos:line="50" pos:column="28"/></name> <init pos:line="50" pos:column="29">= <expr><call><name pos:line="50" pos:column="31">strlen<pos:position pos:line="50" pos:column="37"/></name><argument_list pos:line="50" pos:column="37">(<argument><expr><name pos:line="50" pos:column="38">dot3<pos:position pos:line="50" pos:column="42"/></name></expr></argument>)<pos:position pos:line="50" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="50" pos:column="44"/></decl_stmt>
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><name pos:line="51" pos:column="21">dot3len<pos:position pos:line="51" pos:column="28"/></name> <operator pos:line="51" pos:column="29">&gt;<pos:position pos:line="51" pos:column="33"/></operator> <literal type="number" pos:line="51" pos:column="31">5<pos:position pos:line="51" pos:column="32"/></literal></expr>)<pos:position pos:line="51" pos:column="33"/></condition><then pos:line="51" pos:column="33"> <block pos:line="51" pos:column="34">{
			<while pos:line="52" pos:column="25">while <condition pos:line="52" pos:column="31">(<expr><operator pos:line="52" pos:column="32">(<pos:position pos:line="52" pos:column="33"/></operator><name pos:line="52" pos:column="33">p<pos:position pos:line="52" pos:column="34"/></name> <operator pos:line="52" pos:column="35">=<pos:position pos:line="52" pos:column="36"/></operator> <call><name pos:line="52" pos:column="37">strstr<pos:position pos:line="52" pos:column="43"/></name><argument_list pos:line="52" pos:column="43">(<argument><expr><name pos:line="52" pos:column="44">buffer<pos:position pos:line="52" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="52">dot3<pos:position pos:line="52" pos:column="56"/></name></expr></argument>)<pos:position pos:line="52" pos:column="57"/></argument_list></call><operator pos:line="52" pos:column="57">)<pos:position pos:line="52" pos:column="58"/></operator> <operator pos:line="52" pos:column="59">!=<pos:position pos:line="52" pos:column="61"/></operator> <name pos:line="52" pos:column="62">NULL<pos:position pos:line="52" pos:column="66"/></name></expr>)<pos:position pos:line="52" pos:column="67"/></condition> <block pos:line="52" pos:column="68">{
				<decl_stmt><decl><type><name pos:line="53" pos:column="33">int<pos:position pos:line="53" pos:column="36"/></name></type> <name pos:line="53" pos:column="37">taillen<pos:position pos:line="53" pos:column="44"/></name> <init pos:line="53" pos:column="45">= <expr><call><name pos:line="53" pos:column="47">strlen<pos:position pos:line="53" pos:column="53"/></name><argument_list pos:line="53" pos:column="53">(<argument><expr><name pos:line="53" pos:column="54">p<pos:position pos:line="53" pos:column="55"/></name></expr></argument>)<pos:position pos:line="53" pos:column="56"/></argument_list></call> <operator pos:line="53" pos:column="57">-<pos:position pos:line="53" pos:column="58"/></operator> <name pos:line="53" pos:column="59">dot3len<pos:position pos:line="53" pos:column="66"/></name></expr></init></decl>;<pos:position pos:line="53" pos:column="67"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="54" pos:column="33">memcpy<pos:position pos:line="54" pos:column="39"/></name><argument_list pos:line="54" pos:column="39">(<argument><expr><name pos:line="54" pos:column="40">p<pos:position pos:line="54" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="43">"/.../"<pos:position pos:line="54" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="52">5<pos:position pos:line="54" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="55"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="55" pos:column="33">memmove<pos:position pos:line="55" pos:column="40"/></name><argument_list pos:line="55" pos:column="40">(<argument><expr><name pos:line="55" pos:column="41">p<pos:position pos:line="55" pos:column="42"/></name> <operator pos:line="55" pos:column="43">+<pos:position pos:line="55" pos:column="44"/></operator> <literal type="number" pos:line="55" pos:column="45">5<pos:position pos:line="55" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="48">p<pos:position pos:line="55" pos:column="49"/></name> <operator pos:line="55" pos:column="50">+<pos:position pos:line="55" pos:column="51"/></operator> <name pos:line="55" pos:column="52">dot3len<pos:position pos:line="55" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="61">taillen<pos:position pos:line="55" pos:column="68"/></name> <operator pos:line="55" pos:column="69">+<pos:position pos:line="55" pos:column="70"/></operator> <literal type="number" pos:line="55" pos:column="71">1<pos:position pos:line="55" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="74"/></expr_stmt>
			}<pos:position pos:line="56" pos:column="26"/></block></while>
		}<pos:position pos:line="57" pos:column="18"/></block></then></if>
	}<pos:position pos:line="58" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="60" pos:column="9">string_list_append<pos:position pos:line="60" pos:column="27"/></name><argument_list pos:line="60" pos:column="27">(<argument><expr><name><name pos:line="60" pos:column="28">item<pos:position pos:line="60" pos:column="32"/></name><operator pos:line="60" pos:column="32">-&gt;<pos:position pos:line="60" pos:column="37"/></operator><name pos:line="60" pos:column="34">util<pos:position pos:line="60" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="40">buffer<pos:position pos:line="60" pos:column="46"/></name></expr></argument>)<pos:position pos:line="60" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="48"/></expr_stmt>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
