<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1843_git-2.8.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">unpack_entry<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name><name pos:line="1" pos:column="20">struct<pos:position pos:line="1" pos:column="26"/></name> <name pos:line="1" pos:column="27">packed_git<pos:position pos:line="1" pos:column="37"/></name></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">p<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">off_t<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">obj_offset<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
		   <parameter><decl><type><name><name pos:line="2" pos:column="20">enum<pos:position pos:line="2" pos:column="24"/></name> <name pos:line="2" pos:column="25">object_type<pos:position pos:line="2" pos:column="36"/></name></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">final_type<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">unsigned<pos:position pos:line="2" pos:column="58"/></name> <name pos:line="2" pos:column="59">long<pos:position pos:line="2" pos:column="63"/></name> <modifier pos:line="2" pos:column="64">*<pos:position pos:line="2" pos:column="65"/></modifier></type><name pos:line="2" pos:column="65">final_size<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="76"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">pack_window<pos:position pos:line="4" pos:column="27"/></name></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">w_curs<pos:position pos:line="4" pos:column="35"/></name> <init pos:line="4" pos:column="36">= <expr><name pos:line="4" pos:column="38">NULL<pos:position pos:line="4" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">off_t<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">curpos<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><name pos:line="5" pos:column="24">obj_offset<pos:position pos:line="5" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">void<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">data<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><name pos:line="6" pos:column="22">NULL<pos:position pos:line="6" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">long<pos:position pos:line="7" pos:column="22"/></name></type> <name pos:line="7" pos:column="23">size<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">enum<pos:position pos:line="8" pos:column="13"/></name> <name pos:line="8" pos:column="14">object_type<pos:position pos:line="8" pos:column="25"/></name></name></type> <name pos:line="8" pos:column="26">type<pos:position pos:line="8" pos:column="30"/></name></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">unpack_entry_stack_ent<pos:position pos:line="9" pos:column="38"/></name></name></type> <name><name pos:line="9" pos:column="39">small_delta_stack<pos:position pos:line="9" pos:column="56"/></name><index pos:line="9" pos:column="56">[<expr><name pos:line="9" pos:column="57">UNPACK_ENTRY_STACK_PREALLOC<pos:position pos:line="9" pos:column="84"/></name></expr>]<pos:position pos:line="9" pos:column="85"/></index></name></decl>;<pos:position pos:line="9" pos:column="86"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">unpack_entry_stack_ent<pos:position pos:line="10" pos:column="38"/></name></name> <modifier pos:line="10" pos:column="39">*<pos:position pos:line="10" pos:column="40"/></modifier></type><name pos:line="10" pos:column="40">delta_stack<pos:position pos:line="10" pos:column="51"/></name> <init pos:line="10" pos:column="52">= <expr><name pos:line="10" pos:column="54">small_delta_stack<pos:position pos:line="10" pos:column="71"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="72"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">delta_stack_nr<pos:position pos:line="11" pos:column="27"/></name> <init pos:line="11" pos:column="28">= <expr><literal type="number" pos:line="11" pos:column="30">0<pos:position pos:line="11" pos:column="31"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="33">delta_stack_alloc<pos:position pos:line="11" pos:column="50"/></name> <init pos:line="11" pos:column="51">= <expr><name pos:line="11" pos:column="53">UNPACK_ENTRY_STACK_PREALLOC<pos:position pos:line="11" pos:column="80"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="81"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">base_from_cache<pos:position pos:line="12" pos:column="28"/></name> <init pos:line="12" pos:column="29">= <expr><literal type="number" pos:line="12" pos:column="31">0<pos:position pos:line="12" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="33"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">write_pack_access_log<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><name pos:line="14" pos:column="31">p<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="34">obj_offset<pos:position pos:line="14" pos:column="44"/></name></expr></argument>)<pos:position pos:line="14" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="46"/></expr_stmt>

	<comment type="block" pos:line="16" pos:column="9">/* PHASE 1: drill down to the innermost base object */</comment>
	<for pos:line="17" pos:column="9">for <control pos:line="17" pos:column="13">(<init pos:line="17" pos:column="14">;<pos:position pos:line="17" pos:column="15"/></init><condition pos:line="17" pos:column="15">;<pos:position pos:line="17" pos:column="16"/></condition><incr/>)<pos:position pos:line="17" pos:column="17"/></control> <block pos:line="17" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">off_t<pos:position pos:line="18" pos:column="22"/></name></type> <name pos:line="18" pos:column="23">base_offset<pos:position pos:line="18" pos:column="34"/></name></decl>;<pos:position pos:line="18" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">int<pos:position pos:line="19" pos:column="20"/></name></type> <name pos:line="19" pos:column="21">i<pos:position pos:line="19" pos:column="22"/></name></decl>;<pos:position pos:line="19" pos:column="23"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="20" pos:column="17">struct<pos:position pos:line="20" pos:column="23"/></name> <name pos:line="20" pos:column="24">delta_base_cache_entry<pos:position pos:line="20" pos:column="46"/></name></name> <modifier pos:line="20" pos:column="47">*<pos:position pos:line="20" pos:column="48"/></modifier></type><name pos:line="20" pos:column="48">ent<pos:position pos:line="20" pos:column="51"/></name></decl>;<pos:position pos:line="20" pos:column="52"/></decl_stmt>

		<expr_stmt><expr><name pos:line="22" pos:column="17">ent<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <call><name pos:line="22" pos:column="23">get_delta_base_cache_entry<pos:position pos:line="22" pos:column="49"/></name><argument_list pos:line="22" pos:column="49">(<argument><expr><name pos:line="22" pos:column="50">p<pos:position pos:line="22" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="53">curpos<pos:position pos:line="22" pos:column="59"/></name></expr></argument>)<pos:position pos:line="22" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="61"/></expr_stmt>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><call><name pos:line="23" pos:column="21">eq_delta_base_cache_entry<pos:position pos:line="23" pos:column="46"/></name><argument_list pos:line="23" pos:column="46">(<argument><expr><name pos:line="23" pos:column="47">ent<pos:position pos:line="23" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="52">p<pos:position pos:line="23" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="55">curpos<pos:position pos:line="23" pos:column="61"/></name></expr></argument>)<pos:position pos:line="23" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="63"/></condition><then pos:line="23" pos:column="63"> <block pos:line="23" pos:column="64">{
			<expr_stmt><expr><name pos:line="24" pos:column="25">type<pos:position pos:line="24" pos:column="29"/></name> <operator pos:line="24" pos:column="30">=<pos:position pos:line="24" pos:column="31"/></operator> <name><name pos:line="24" pos:column="32">ent<pos:position pos:line="24" pos:column="35"/></name><operator pos:line="24" pos:column="35">-&gt;<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="37">type<pos:position pos:line="24" pos:column="41"/></name></name></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="25" pos:column="25">data<pos:position pos:line="25" pos:column="29"/></name> <operator pos:line="25" pos:column="30">=<pos:position pos:line="25" pos:column="31"/></operator> <name><name pos:line="25" pos:column="32">ent<pos:position pos:line="25" pos:column="35"/></name><operator pos:line="25" pos:column="35">-&gt;<pos:position pos:line="25" pos:column="40"/></operator><name pos:line="25" pos:column="37">data<pos:position pos:line="25" pos:column="41"/></name></name></expr>;<pos:position pos:line="25" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><name pos:line="26" pos:column="25">size<pos:position pos:line="26" pos:column="29"/></name> <operator pos:line="26" pos:column="30">=<pos:position pos:line="26" pos:column="31"/></operator> <name><name pos:line="26" pos:column="32">ent<pos:position pos:line="26" pos:column="35"/></name><operator pos:line="26" pos:column="35">-&gt;<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="37">size<pos:position pos:line="26" pos:column="41"/></name></name></expr>;<pos:position pos:line="26" pos:column="42"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="27" pos:column="25">clear_delta_base_cache_entry<pos:position pos:line="27" pos:column="53"/></name><argument_list pos:line="27" pos:column="53">(<argument><expr><name pos:line="27" pos:column="54">ent<pos:position pos:line="27" pos:column="57"/></name></expr></argument>)<pos:position pos:line="27" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><name pos:line="28" pos:column="25">base_from_cache<pos:position pos:line="28" pos:column="40"/></name> <operator pos:line="28" pos:column="41">=<pos:position pos:line="28" pos:column="42"/></operator> <literal type="number" pos:line="28" pos:column="43">1<pos:position pos:line="28" pos:column="44"/></literal></expr>;<pos:position pos:line="28" pos:column="45"/></expr_stmt>
			<break pos:line="29" pos:column="25">break;<pos:position pos:line="29" pos:column="31"/></break>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if>

		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><name pos:line="32" pos:column="21">do_check_packed_object_crc<pos:position pos:line="32" pos:column="47"/></name> <operator pos:line="32" pos:column="48">&amp;&amp;<pos:position pos:line="32" pos:column="58"/></operator> <name><name pos:line="32" pos:column="51">p<pos:position pos:line="32" pos:column="52"/></name><operator pos:line="32" pos:column="52">-&gt;<pos:position pos:line="32" pos:column="57"/></operator><name pos:line="32" pos:column="54">index_version<pos:position pos:line="32" pos:column="67"/></name></name> <operator pos:line="32" pos:column="68">&gt;<pos:position pos:line="32" pos:column="72"/></operator> <literal type="number" pos:line="32" pos:column="70">1<pos:position pos:line="32" pos:column="71"/></literal></expr>)<pos:position pos:line="32" pos:column="72"/></condition><then pos:line="32" pos:column="72"> <block pos:line="32" pos:column="73">{
			<decl_stmt><decl><type><name><name pos:line="33" pos:column="25">struct<pos:position pos:line="33" pos:column="31"/></name> <name pos:line="33" pos:column="32">revindex_entry<pos:position pos:line="33" pos:column="46"/></name></name> <modifier pos:line="33" pos:column="47">*<pos:position pos:line="33" pos:column="48"/></modifier></type><name pos:line="33" pos:column="48">revidx<pos:position pos:line="33" pos:column="54"/></name> <init pos:line="33" pos:column="55">= <expr><call><name pos:line="33" pos:column="57">find_pack_revindex<pos:position pos:line="33" pos:column="75"/></name><argument_list pos:line="33" pos:column="75">(<argument><expr><name pos:line="33" pos:column="76">p<pos:position pos:line="33" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="79">obj_offset<pos:position pos:line="33" pos:column="89"/></name></expr></argument>)<pos:position pos:line="33" pos:column="90"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="91"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="34" pos:column="25">unsigned<pos:position pos:line="34" pos:column="33"/></name> <name pos:line="34" pos:column="34">long<pos:position pos:line="34" pos:column="38"/></name></type> <name pos:line="34" pos:column="39">len<pos:position pos:line="34" pos:column="42"/></name> <init pos:line="34" pos:column="43">= <expr><name><name pos:line="34" pos:column="45">revidx<pos:position pos:line="34" pos:column="51"/></name><index pos:line="34" pos:column="51">[<expr><literal type="number" pos:line="34" pos:column="52">1<pos:position pos:line="34" pos:column="53"/></literal></expr>]<pos:position pos:line="34" pos:column="54"/></index></name><operator pos:line="34" pos:column="54">.<pos:position pos:line="34" pos:column="55"/></operator><name pos:line="34" pos:column="55">offset<pos:position pos:line="34" pos:column="61"/></name> <operator pos:line="34" pos:column="62">-<pos:position pos:line="34" pos:column="63"/></operator> <name pos:line="34" pos:column="64">obj_offset<pos:position pos:line="34" pos:column="74"/></name></expr></init></decl>;<pos:position pos:line="34" pos:column="75"/></decl_stmt>
			<if pos:line="35" pos:column="25">if <condition pos:line="35" pos:column="28">(<expr><call><name pos:line="35" pos:column="29">check_pack_crc<pos:position pos:line="35" pos:column="43"/></name><argument_list pos:line="35" pos:column="43">(<argument><expr><name pos:line="35" pos:column="44">p<pos:position pos:line="35" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="47">&amp;<pos:position pos:line="35" pos:column="52"/></operator><name pos:line="35" pos:column="48">w_curs<pos:position pos:line="35" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="56">obj_offset<pos:position pos:line="35" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="68">len<pos:position pos:line="35" pos:column="71"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="73">revidx<pos:position pos:line="35" pos:column="79"/></name><operator pos:line="35" pos:column="79">-&gt;<pos:position pos:line="35" pos:column="84"/></operator><name pos:line="35" pos:column="81">nr<pos:position pos:line="35" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="84"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="85"/></condition><then pos:line="35" pos:column="85"> <block pos:line="35" pos:column="86">{
				<decl_stmt><decl><type><specifier pos:line="36" pos:column="33">const<pos:position pos:line="36" pos:column="38"/></specifier> <name pos:line="36" pos:column="39">unsigned<pos:position pos:line="36" pos:column="47"/></name> <name pos:line="36" pos:column="48">char<pos:position pos:line="36" pos:column="52"/></name> <modifier pos:line="36" pos:column="53">*<pos:position pos:line="36" pos:column="54"/></modifier></type><name pos:line="36" pos:column="54">sha1<pos:position pos:line="36" pos:column="58"/></name> <init pos:line="36" pos:column="59">=
					<expr><call><name pos:line="37" pos:column="41">nth_packed_object_sha1<pos:position pos:line="37" pos:column="63"/></name><argument_list pos:line="37" pos:column="63">(<argument><expr><name pos:line="37" pos:column="64">p<pos:position pos:line="37" pos:column="65"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="67">revidx<pos:position pos:line="37" pos:column="73"/></name><operator pos:line="37" pos:column="73">-&gt;<pos:position pos:line="37" pos:column="78"/></operator><name pos:line="37" pos:column="75">nr<pos:position pos:line="37" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="79"/></decl_stmt>
				<expr_stmt><expr><call><name pos:line="38" pos:column="33">error<pos:position pos:line="38" pos:column="38"/></name><argument_list pos:line="38" pos:column="38">(<argument><expr><literal type="string" pos:line="38" pos:column="39">"bad packed object CRC for %s"<pos:position pos:line="38" pos:column="69"/></literal></expr></argument>,
				      <argument><expr><call><name pos:line="39" pos:column="39">sha1_to_hex<pos:position pos:line="39" pos:column="50"/></name><argument_list pos:line="39" pos:column="50">(<argument><expr><name pos:line="39" pos:column="51">sha1<pos:position pos:line="39" pos:column="55"/></name></expr></argument>)<pos:position pos:line="39" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="58"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="40" pos:column="33">mark_bad_packed_object<pos:position pos:line="40" pos:column="55"/></name><argument_list pos:line="40" pos:column="55">(<argument><expr><name pos:line="40" pos:column="56">p<pos:position pos:line="40" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="59">sha1<pos:position pos:line="40" pos:column="63"/></name></expr></argument>)<pos:position pos:line="40" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="65"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="41" pos:column="33">unuse_pack<pos:position pos:line="41" pos:column="43"/></name><argument_list pos:line="41" pos:column="43">(<argument><expr><operator pos:line="41" pos:column="44">&amp;<pos:position pos:line="41" pos:column="49"/></operator><name pos:line="41" pos:column="45">w_curs<pos:position pos:line="41" pos:column="51"/></name></expr></argument>)<pos:position pos:line="41" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="53"/></expr_stmt>
				<return pos:line="42" pos:column="33">return <expr><name pos:line="42" pos:column="40">NULL<pos:position pos:line="42" pos:column="44"/></name></expr>;<pos:position pos:line="42" pos:column="45"/></return>
			}<pos:position pos:line="43" pos:column="26"/></block></then></if>
		}<pos:position pos:line="44" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="46" pos:column="17">type<pos:position pos:line="46" pos:column="21"/></name> <operator pos:line="46" pos:column="22">=<pos:position pos:line="46" pos:column="23"/></operator> <call><name pos:line="46" pos:column="24">unpack_object_header<pos:position pos:line="46" pos:column="44"/></name><argument_list pos:line="46" pos:column="44">(<argument><expr><name pos:line="46" pos:column="45">p<pos:position pos:line="46" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="48">&amp;<pos:position pos:line="46" pos:column="53"/></operator><name pos:line="46" pos:column="49">w_curs<pos:position pos:line="46" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="57">&amp;<pos:position pos:line="46" pos:column="62"/></operator><name pos:line="46" pos:column="58">curpos<pos:position pos:line="46" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="66">&amp;<pos:position pos:line="46" pos:column="71"/></operator><name pos:line="46" pos:column="67">size<pos:position pos:line="46" pos:column="71"/></name></expr></argument>)<pos:position pos:line="46" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="73"/></expr_stmt>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">type<pos:position pos:line="47" pos:column="25"/></name> <operator pos:line="47" pos:column="26">!=<pos:position pos:line="47" pos:column="28"/></operator> <name pos:line="47" pos:column="29">OBJ_OFS_DELTA<pos:position pos:line="47" pos:column="42"/></name> <operator pos:line="47" pos:column="43">&amp;&amp;<pos:position pos:line="47" pos:column="53"/></operator> <name pos:line="47" pos:column="46">type<pos:position pos:line="47" pos:column="50"/></name> <operator pos:line="47" pos:column="51">!=<pos:position pos:line="47" pos:column="53"/></operator> <name pos:line="47" pos:column="54">OBJ_REF_DELTA<pos:position pos:line="47" pos:column="67"/></name></expr>)<pos:position pos:line="47" pos:column="68"/></condition><then pos:line="47" pos:column="68">
			<block type="pseudo"><break pos:line="48" pos:column="25">break;<pos:position pos:line="48" pos:column="31"/></break></block></then></if>

		<expr_stmt><expr><name pos:line="50" pos:column="17">base_offset<pos:position pos:line="50" pos:column="28"/></name> <operator pos:line="50" pos:column="29">=<pos:position pos:line="50" pos:column="30"/></operator> <call><name pos:line="50" pos:column="31">get_delta_base<pos:position pos:line="50" pos:column="45"/></name><argument_list pos:line="50" pos:column="45">(<argument><expr><name pos:line="50" pos:column="46">p<pos:position pos:line="50" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="49">&amp;<pos:position pos:line="50" pos:column="54"/></operator><name pos:line="50" pos:column="50">w_curs<pos:position pos:line="50" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="58">&amp;<pos:position pos:line="50" pos:column="63"/></operator><name pos:line="50" pos:column="59">curpos<pos:position pos:line="50" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="67">type<pos:position pos:line="50" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="73">obj_offset<pos:position pos:line="50" pos:column="83"/></name></expr></argument>)<pos:position pos:line="50" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="85"/></expr_stmt>
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><operator pos:line="51" pos:column="21">!<pos:position pos:line="51" pos:column="22"/></operator><name pos:line="51" pos:column="22">base_offset<pos:position pos:line="51" pos:column="33"/></name></expr>)<pos:position pos:line="51" pos:column="34"/></condition><then pos:line="51" pos:column="34"> <block pos:line="51" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="52" pos:column="25">error<pos:position pos:line="52" pos:column="30"/></name><argument_list pos:line="52" pos:column="30">(<argument><expr><literal type="string" pos:line="52" pos:column="31">"failed to validate delta base reference "<pos:position pos:line="52" pos:column="73"/></literal>
			      <literal type="string" pos:line="53" pos:column="31">"at offset %"<pos:position pos:line="53" pos:column="44"/></literal><name pos:line="53" pos:column="44">PRIuMAX<pos:position pos:line="53" pos:column="51"/></name><literal type="string" pos:line="53" pos:column="51">" from %s"<pos:position pos:line="53" pos:column="61"/></literal></expr></argument>,
			      <argument><expr><operator pos:line="54" pos:column="31">(<pos:position pos:line="54" pos:column="32"/></operator><name pos:line="54" pos:column="32">uintmax_t<pos:position pos:line="54" pos:column="41"/></name><operator pos:line="54" pos:column="41">)<pos:position pos:line="54" pos:column="42"/></operator><name pos:line="54" pos:column="42">curpos<pos:position pos:line="54" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="50">p<pos:position pos:line="54" pos:column="51"/></name><operator pos:line="54" pos:column="51">-&gt;<pos:position pos:line="54" pos:column="56"/></operator><name pos:line="54" pos:column="53">pack_name<pos:position pos:line="54" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="64"/></expr_stmt>
			<comment type="block" pos:line="55" pos:column="25">/* bail to phase 2, in hopes of recovery */</comment>
			<expr_stmt><expr><name pos:line="56" pos:column="25">data<pos:position pos:line="56" pos:column="29"/></name> <operator pos:line="56" pos:column="30">=<pos:position pos:line="56" pos:column="31"/></operator> <name pos:line="56" pos:column="32">NULL<pos:position pos:line="56" pos:column="36"/></name></expr>;<pos:position pos:line="56" pos:column="37"/></expr_stmt>
			<break pos:line="57" pos:column="25">break;<pos:position pos:line="57" pos:column="31"/></break>
		}<pos:position pos:line="58" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="60" pos:column="17">/* push object, proceed to base */</comment>
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><name pos:line="61" pos:column="21">delta_stack_nr<pos:position pos:line="61" pos:column="35"/></name> <operator pos:line="61" pos:column="36">&gt;=<pos:position pos:line="61" pos:column="41"/></operator> <name pos:line="61" pos:column="39">delta_stack_alloc<pos:position pos:line="61" pos:column="56"/></name>
		    <operator pos:line="62" pos:column="21">&amp;&amp;<pos:position pos:line="62" pos:column="31"/></operator> <name pos:line="62" pos:column="24">delta_stack<pos:position pos:line="62" pos:column="35"/></name> <operator pos:line="62" pos:column="36">==<pos:position pos:line="62" pos:column="38"/></operator> <name pos:line="62" pos:column="39">small_delta_stack<pos:position pos:line="62" pos:column="56"/></name></expr>)<pos:position pos:line="62" pos:column="57"/></condition><then pos:line="62" pos:column="57"> <block pos:line="62" pos:column="58">{
			<expr_stmt><expr><name pos:line="63" pos:column="25">delta_stack_alloc<pos:position pos:line="63" pos:column="42"/></name> <operator pos:line="63" pos:column="43">=<pos:position pos:line="63" pos:column="44"/></operator> <call><name pos:line="63" pos:column="45">alloc_nr<pos:position pos:line="63" pos:column="53"/></name><argument_list pos:line="63" pos:column="53">(<argument><expr><name pos:line="63" pos:column="54">delta_stack_nr<pos:position pos:line="63" pos:column="68"/></name></expr></argument>)<pos:position pos:line="63" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="70"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="64" pos:column="25">ALLOC_ARRAY<pos:position pos:line="64" pos:column="36"/></name><argument_list pos:line="64" pos:column="36">(<argument><expr><name pos:line="64" pos:column="37">delta_stack<pos:position pos:line="64" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="50">delta_stack_alloc<pos:position pos:line="64" pos:column="67"/></name></expr></argument>)<pos:position pos:line="64" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="69"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="65" pos:column="25">memcpy<pos:position pos:line="65" pos:column="31"/></name><argument_list pos:line="65" pos:column="31">(<argument><expr><name pos:line="65" pos:column="32">delta_stack<pos:position pos:line="65" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="45">small_delta_stack<pos:position pos:line="65" pos:column="62"/></name></expr></argument>,
			       <argument><expr><sizeof pos:line="66" pos:column="32">sizeof<argument_list pos:line="66" pos:column="38">(<argument><expr><operator pos:line="66" pos:column="39">*<pos:position pos:line="66" pos:column="40"/></operator><name pos:line="66" pos:column="40">delta_stack<pos:position pos:line="66" pos:column="51"/></name></expr></argument>)<pos:position pos:line="66" pos:column="52"/></argument_list></sizeof><operator pos:line="66" pos:column="52">*<pos:position pos:line="66" pos:column="53"/></operator><name pos:line="66" pos:column="53">delta_stack_nr<pos:position pos:line="66" pos:column="67"/></name></expr></argument>)<pos:position pos:line="66" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="69"/></expr_stmt>
		}<pos:position pos:line="67" pos:column="18"/></block></then> <else pos:line="67" pos:column="19">else <block pos:line="67" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="68" pos:column="25">ALLOC_GROW<pos:position pos:line="68" pos:column="35"/></name><argument_list pos:line="68" pos:column="35">(<argument><expr><name pos:line="68" pos:column="36">delta_stack<pos:position pos:line="68" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="49">delta_stack_nr<pos:position pos:line="68" pos:column="63"/></name><operator pos:line="68" pos:column="63">+<pos:position pos:line="68" pos:column="64"/></operator><literal type="number" pos:line="68" pos:column="64">1<pos:position pos:line="68" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="67">delta_stack_alloc<pos:position pos:line="68" pos:column="84"/></name></expr></argument>)<pos:position pos:line="68" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="86"/></expr_stmt>
		}<pos:position pos:line="69" pos:column="18"/></block></else></if>
		<expr_stmt><expr><name pos:line="70" pos:column="17">i<pos:position pos:line="70" pos:column="18"/></name> <operator pos:line="70" pos:column="19">=<pos:position pos:line="70" pos:column="20"/></operator> <name pos:line="70" pos:column="21">delta_stack_nr<pos:position pos:line="70" pos:column="35"/></name><operator pos:line="70" pos:column="35">++<pos:position pos:line="70" pos:column="37"/></operator></expr>;<pos:position pos:line="70" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="71" pos:column="17">delta_stack<pos:position pos:line="71" pos:column="28"/></name><index pos:line="71" pos:column="28">[<expr><name pos:line="71" pos:column="29">i<pos:position pos:line="71" pos:column="30"/></name></expr>]<pos:position pos:line="71" pos:column="31"/></index></name><operator pos:line="71" pos:column="31">.<pos:position pos:line="71" pos:column="32"/></operator><name pos:line="71" pos:column="32">obj_offset<pos:position pos:line="71" pos:column="42"/></name> <operator pos:line="71" pos:column="43">=<pos:position pos:line="71" pos:column="44"/></operator> <name pos:line="71" pos:column="45">obj_offset<pos:position pos:line="71" pos:column="55"/></name></expr>;<pos:position pos:line="71" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="72" pos:column="17">delta_stack<pos:position pos:line="72" pos:column="28"/></name><index pos:line="72" pos:column="28">[<expr><name pos:line="72" pos:column="29">i<pos:position pos:line="72" pos:column="30"/></name></expr>]<pos:position pos:line="72" pos:column="31"/></index></name><operator pos:line="72" pos:column="31">.<pos:position pos:line="72" pos:column="32"/></operator><name pos:line="72" pos:column="32">curpos<pos:position pos:line="72" pos:column="38"/></name> <operator pos:line="72" pos:column="39">=<pos:position pos:line="72" pos:column="40"/></operator> <name pos:line="72" pos:column="41">curpos<pos:position pos:line="72" pos:column="47"/></name></expr>;<pos:position pos:line="72" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="73" pos:column="17">delta_stack<pos:position pos:line="73" pos:column="28"/></name><index pos:line="73" pos:column="28">[<expr><name pos:line="73" pos:column="29">i<pos:position pos:line="73" pos:column="30"/></name></expr>]<pos:position pos:line="73" pos:column="31"/></index></name><operator pos:line="73" pos:column="31">.<pos:position pos:line="73" pos:column="32"/></operator><name pos:line="73" pos:column="32">size<pos:position pos:line="73" pos:column="36"/></name> <operator pos:line="73" pos:column="37">=<pos:position pos:line="73" pos:column="38"/></operator> <name pos:line="73" pos:column="39">size<pos:position pos:line="73" pos:column="43"/></name></expr>;<pos:position pos:line="73" pos:column="44"/></expr_stmt>

		<expr_stmt><expr><name pos:line="75" pos:column="17">curpos<pos:position pos:line="75" pos:column="23"/></name> <operator pos:line="75" pos:column="24">=<pos:position pos:line="75" pos:column="25"/></operator> <name pos:line="75" pos:column="26">obj_offset<pos:position pos:line="75" pos:column="36"/></name> <operator pos:line="75" pos:column="37">=<pos:position pos:line="75" pos:column="38"/></operator> <name pos:line="75" pos:column="39">base_offset<pos:position pos:line="75" pos:column="50"/></name></expr>;<pos:position pos:line="75" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="76" pos:column="10"/></block></for>

	<comment type="block" pos:line="78" pos:column="9">/* PHASE 2: handle the base */</comment>
	<switch pos:line="79" pos:column="9">switch <condition pos:line="79" pos:column="16">(<expr><name pos:line="79" pos:column="17">type<pos:position pos:line="79" pos:column="21"/></name></expr>)<pos:position pos:line="79" pos:column="22"/></condition> <block pos:line="79" pos:column="23">{
	<case pos:line="80" pos:column="9">case <expr><name pos:line="80" pos:column="14">OBJ_OFS_DELTA<pos:position pos:line="80" pos:column="27"/></name></expr>:<pos:position pos:line="80" pos:column="28"/></case>
	<case pos:line="81" pos:column="9">case <expr><name pos:line="81" pos:column="14">OBJ_REF_DELTA<pos:position pos:line="81" pos:column="27"/></name></expr>:<pos:position pos:line="81" pos:column="28"/></case>
		<if pos:line="82" pos:column="17">if <condition pos:line="82" pos:column="20">(<expr><name pos:line="82" pos:column="21">data<pos:position pos:line="82" pos:column="25"/></name></expr>)<pos:position pos:line="82" pos:column="26"/></condition><then pos:line="82" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="83" pos:column="25">die<pos:position pos:line="83" pos:column="28"/></name><argument_list pos:line="83" pos:column="28">(<argument><expr><literal type="string" pos:line="83" pos:column="29">"BUG in unpack_entry: left loop at a valid delta"<pos:position pos:line="83" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="80"/></expr_stmt></block></then></if>
		<break pos:line="84" pos:column="17">break;<pos:position pos:line="84" pos:column="23"/></break>
	<case pos:line="85" pos:column="9">case <expr><name pos:line="85" pos:column="14">OBJ_COMMIT<pos:position pos:line="85" pos:column="24"/></name></expr>:<pos:position pos:line="85" pos:column="25"/></case>
	<case pos:line="86" pos:column="9">case <expr><name pos:line="86" pos:column="14">OBJ_TREE<pos:position pos:line="86" pos:column="22"/></name></expr>:<pos:position pos:line="86" pos:column="23"/></case>
	<case pos:line="87" pos:column="9">case <expr><name pos:line="87" pos:column="14">OBJ_BLOB<pos:position pos:line="87" pos:column="22"/></name></expr>:<pos:position pos:line="87" pos:column="23"/></case>
	<case pos:line="88" pos:column="9">case <expr><name pos:line="88" pos:column="14">OBJ_TAG<pos:position pos:line="88" pos:column="21"/></name></expr>:<pos:position pos:line="88" pos:column="22"/></case>
		<if pos:line="89" pos:column="17">if <condition pos:line="89" pos:column="20">(<expr><operator pos:line="89" pos:column="21">!<pos:position pos:line="89" pos:column="22"/></operator><name pos:line="89" pos:column="22">base_from_cache<pos:position pos:line="89" pos:column="37"/></name></expr>)<pos:position pos:line="89" pos:column="38"/></condition><then pos:line="89" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><name pos:line="90" pos:column="25">data<pos:position pos:line="90" pos:column="29"/></name> <operator pos:line="90" pos:column="30">=<pos:position pos:line="90" pos:column="31"/></operator> <call><name pos:line="90" pos:column="32">unpack_compressed_entry<pos:position pos:line="90" pos:column="55"/></name><argument_list pos:line="90" pos:column="55">(<argument><expr><name pos:line="90" pos:column="56">p<pos:position pos:line="90" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="90" pos:column="59">&amp;<pos:position pos:line="90" pos:column="64"/></operator><name pos:line="90" pos:column="60">w_curs<pos:position pos:line="90" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="68">curpos<pos:position pos:line="90" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="76">size<pos:position pos:line="90" pos:column="80"/></name></expr></argument>)<pos:position pos:line="90" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="82"/></expr_stmt></block></then></if>
		<break pos:line="91" pos:column="17">break;<pos:position pos:line="91" pos:column="23"/></break>
	<default pos:line="92" pos:column="9">default:<pos:position pos:line="92" pos:column="17"/></default>
		<expr_stmt><expr><name pos:line="93" pos:column="17">data<pos:position pos:line="93" pos:column="21"/></name> <operator pos:line="93" pos:column="22">=<pos:position pos:line="93" pos:column="23"/></operator> <name pos:line="93" pos:column="24">NULL<pos:position pos:line="93" pos:column="28"/></name></expr>;<pos:position pos:line="93" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="94" pos:column="17">error<pos:position pos:line="94" pos:column="22"/></name><argument_list pos:line="94" pos:column="22">(<argument><expr><literal type="string" pos:line="94" pos:column="23">"unknown object type %i at offset %"<pos:position pos:line="94" pos:column="59"/></literal><name pos:line="94" pos:column="59">PRIuMAX<pos:position pos:line="94" pos:column="66"/></name><literal type="string" pos:line="94" pos:column="66">" in %s"<pos:position pos:line="94" pos:column="74"/></literal></expr></argument>,
		      <argument><expr><name pos:line="95" pos:column="23">type<pos:position pos:line="95" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="29">(<pos:position pos:line="95" pos:column="30"/></operator><name pos:line="95" pos:column="30">uintmax_t<pos:position pos:line="95" pos:column="39"/></name><operator pos:line="95" pos:column="39">)<pos:position pos:line="95" pos:column="40"/></operator><name pos:line="95" pos:column="40">obj_offset<pos:position pos:line="95" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="95" pos:column="52">p<pos:position pos:line="95" pos:column="53"/></name><operator pos:line="95" pos:column="53">-&gt;<pos:position pos:line="95" pos:column="58"/></operator><name pos:line="95" pos:column="55">pack_name<pos:position pos:line="95" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="95" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="66"/></expr_stmt>
	}<pos:position pos:line="96" pos:column="10"/></block></switch>

	<comment type="block" pos:line="98" pos:column="9">/* PHASE 3: apply deltas in order */</comment>

	<comment type="block" pos:line="100" pos:column="9">/* invariants:
	 *   'data' holds the base data, or NULL if there was corruption
	 */</comment>
	<while pos:line="103" pos:column="9">while <condition pos:line="103" pos:column="15">(<expr><name pos:line="103" pos:column="16">delta_stack_nr<pos:position pos:line="103" pos:column="30"/></name></expr>)<pos:position pos:line="103" pos:column="31"/></condition> <block pos:line="103" pos:column="32">{
		<decl_stmt><decl><type><name pos:line="104" pos:column="17">void<pos:position pos:line="104" pos:column="21"/></name> <modifier pos:line="104" pos:column="22">*<pos:position pos:line="104" pos:column="23"/></modifier></type><name pos:line="104" pos:column="23">delta_data<pos:position pos:line="104" pos:column="33"/></name></decl>;<pos:position pos:line="104" pos:column="34"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="105" pos:column="17">void<pos:position pos:line="105" pos:column="21"/></name> <modifier pos:line="105" pos:column="22">*<pos:position pos:line="105" pos:column="23"/></modifier></type><name pos:line="105" pos:column="23">base<pos:position pos:line="105" pos:column="27"/></name> <init pos:line="105" pos:column="28">= <expr><name pos:line="105" pos:column="30">data<pos:position pos:line="105" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="105" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="106" pos:column="17">unsigned<pos:position pos:line="106" pos:column="25"/></name> <name pos:line="106" pos:column="26">long<pos:position pos:line="106" pos:column="30"/></name></type> <name pos:line="106" pos:column="31">delta_size<pos:position pos:line="106" pos:column="41"/></name></decl>, <decl><type ref="prev"/><name pos:line="106" pos:column="43">base_size<pos:position pos:line="106" pos:column="52"/></name> <init pos:line="106" pos:column="53">= <expr><name pos:line="106" pos:column="55">size<pos:position pos:line="106" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="106" pos:column="60"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="107" pos:column="17">int<pos:position pos:line="107" pos:column="20"/></name></type> <name pos:line="107" pos:column="21">i<pos:position pos:line="107" pos:column="22"/></name></decl>;<pos:position pos:line="107" pos:column="23"/></decl_stmt>

		<expr_stmt><expr><name pos:line="109" pos:column="17">data<pos:position pos:line="109" pos:column="21"/></name> <operator pos:line="109" pos:column="22">=<pos:position pos:line="109" pos:column="23"/></operator> <name pos:line="109" pos:column="24">NULL<pos:position pos:line="109" pos:column="28"/></name></expr>;<pos:position pos:line="109" pos:column="29"/></expr_stmt>

		<if pos:line="111" pos:column="17">if <condition pos:line="111" pos:column="20">(<expr><name pos:line="111" pos:column="21">base<pos:position pos:line="111" pos:column="25"/></name></expr>)<pos:position pos:line="111" pos:column="26"/></condition><then pos:line="111" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="112" pos:column="25">add_delta_base_cache<pos:position pos:line="112" pos:column="45"/></name><argument_list pos:line="112" pos:column="45">(<argument><expr><name pos:line="112" pos:column="46">p<pos:position pos:line="112" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="49">obj_offset<pos:position pos:line="112" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="61">base<pos:position pos:line="112" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="67">base_size<pos:position pos:line="112" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="78">type<pos:position pos:line="112" pos:column="82"/></name></expr></argument>)<pos:position pos:line="112" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="84"/></expr_stmt></block></then></if>

		<if pos:line="114" pos:column="17">if <condition pos:line="114" pos:column="20">(<expr><operator pos:line="114" pos:column="21">!<pos:position pos:line="114" pos:column="22"/></operator><name pos:line="114" pos:column="22">base<pos:position pos:line="114" pos:column="26"/></name></expr>)<pos:position pos:line="114" pos:column="27"/></condition><then pos:line="114" pos:column="27"> <block pos:line="114" pos:column="28">{
			<comment type="block" pos:line="115" pos:column="25">/*
			 * We're probably in deep shit, but let's try to fetch
			 * the required base anyway from another pack or loose.
			 * This is costly but should happen only in the presence
			 * of a corrupted pack, and is better than failing outright.
			 */</comment>
			<decl_stmt><decl><type><name><name pos:line="121" pos:column="25">struct<pos:position pos:line="121" pos:column="31"/></name> <name pos:line="121" pos:column="32">revindex_entry<pos:position pos:line="121" pos:column="46"/></name></name> <modifier pos:line="121" pos:column="47">*<pos:position pos:line="121" pos:column="48"/></modifier></type><name pos:line="121" pos:column="48">revidx<pos:position pos:line="121" pos:column="54"/></name></decl>;<pos:position pos:line="121" pos:column="55"/></decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="122" pos:column="25">const<pos:position pos:line="122" pos:column="30"/></specifier> <name pos:line="122" pos:column="31">unsigned<pos:position pos:line="122" pos:column="39"/></name> <name pos:line="122" pos:column="40">char<pos:position pos:line="122" pos:column="44"/></name> <modifier pos:line="122" pos:column="45">*<pos:position pos:line="122" pos:column="46"/></modifier></type><name pos:line="122" pos:column="46">base_sha1<pos:position pos:line="122" pos:column="55"/></name></decl>;<pos:position pos:line="122" pos:column="56"/></decl_stmt>
			<expr_stmt><expr><name pos:line="123" pos:column="25">revidx<pos:position pos:line="123" pos:column="31"/></name> <operator pos:line="123" pos:column="32">=<pos:position pos:line="123" pos:column="33"/></operator> <call><name pos:line="123" pos:column="34">find_pack_revindex<pos:position pos:line="123" pos:column="52"/></name><argument_list pos:line="123" pos:column="52">(<argument><expr><name pos:line="123" pos:column="53">p<pos:position pos:line="123" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="56">obj_offset<pos:position pos:line="123" pos:column="66"/></name></expr></argument>)<pos:position pos:line="123" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="68"/></expr_stmt>
			<if pos:line="124" pos:column="25">if <condition pos:line="124" pos:column="28">(<expr><name pos:line="124" pos:column="29">revidx<pos:position pos:line="124" pos:column="35"/></name></expr>)<pos:position pos:line="124" pos:column="36"/></condition><then pos:line="124" pos:column="36"> <block pos:line="124" pos:column="37">{
				<expr_stmt><expr><name pos:line="125" pos:column="33">base_sha1<pos:position pos:line="125" pos:column="42"/></name> <operator pos:line="125" pos:column="43">=<pos:position pos:line="125" pos:column="44"/></operator> <call><name pos:line="125" pos:column="45">nth_packed_object_sha1<pos:position pos:line="125" pos:column="67"/></name><argument_list pos:line="125" pos:column="67">(<argument><expr><name pos:line="125" pos:column="68">p<pos:position pos:line="125" pos:column="69"/></name></expr></argument>, <argument><expr><name><name pos:line="125" pos:column="71">revidx<pos:position pos:line="125" pos:column="77"/></name><operator pos:line="125" pos:column="77">-&gt;<pos:position pos:line="125" pos:column="82"/></operator><name pos:line="125" pos:column="79">nr<pos:position pos:line="125" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="125" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="83"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="126" pos:column="33">error<pos:position pos:line="126" pos:column="38"/></name><argument_list pos:line="126" pos:column="38">(<argument><expr><literal type="string" pos:line="126" pos:column="39">"failed to read delta base object %s"<pos:position pos:line="126" pos:column="76"/></literal>
				      <literal type="string" pos:line="127" pos:column="39">" at offset %"<pos:position pos:line="127" pos:column="53"/></literal><name pos:line="127" pos:column="53">PRIuMAX<pos:position pos:line="127" pos:column="60"/></name><literal type="string" pos:line="127" pos:column="60">" from %s"<pos:position pos:line="127" pos:column="70"/></literal></expr></argument>,
				      <argument><expr><call><name pos:line="128" pos:column="39">sha1_to_hex<pos:position pos:line="128" pos:column="50"/></name><argument_list pos:line="128" pos:column="50">(<argument><expr><name pos:line="128" pos:column="51">base_sha1<pos:position pos:line="128" pos:column="60"/></name></expr></argument>)<pos:position pos:line="128" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="128" pos:column="63">(<pos:position pos:line="128" pos:column="64"/></operator><name pos:line="128" pos:column="64">uintmax_t<pos:position pos:line="128" pos:column="73"/></name><operator pos:line="128" pos:column="73">)<pos:position pos:line="128" pos:column="74"/></operator><name pos:line="128" pos:column="74">obj_offset<pos:position pos:line="128" pos:column="84"/></name></expr></argument>,
				      <argument><expr><name><name pos:line="129" pos:column="39">p<pos:position pos:line="129" pos:column="40"/></name><operator pos:line="129" pos:column="40">-&gt;<pos:position pos:line="129" pos:column="45"/></operator><name pos:line="129" pos:column="42">pack_name<pos:position pos:line="129" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="129" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="53"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="130" pos:column="33">mark_bad_packed_object<pos:position pos:line="130" pos:column="55"/></name><argument_list pos:line="130" pos:column="55">(<argument><expr><name pos:line="130" pos:column="56">p<pos:position pos:line="130" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="59">base_sha1<pos:position pos:line="130" pos:column="68"/></name></expr></argument>)<pos:position pos:line="130" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="70"/></expr_stmt>
				<expr_stmt><expr><name pos:line="131" pos:column="33">base<pos:position pos:line="131" pos:column="37"/></name> <operator pos:line="131" pos:column="38">=<pos:position pos:line="131" pos:column="39"/></operator> <call><name pos:line="131" pos:column="40">read_object<pos:position pos:line="131" pos:column="51"/></name><argument_list pos:line="131" pos:column="51">(<argument><expr><name pos:line="131" pos:column="52">base_sha1<pos:position pos:line="131" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="131" pos:column="63">&amp;<pos:position pos:line="131" pos:column="68"/></operator><name pos:line="131" pos:column="64">type<pos:position pos:line="131" pos:column="68"/></name></expr></argument>, <argument><expr><operator pos:line="131" pos:column="70">&amp;<pos:position pos:line="131" pos:column="75"/></operator><name pos:line="131" pos:column="71">base_size<pos:position pos:line="131" pos:column="80"/></name></expr></argument>)<pos:position pos:line="131" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="82"/></expr_stmt>
			}<pos:position pos:line="132" pos:column="26"/></block></then></if>
		}<pos:position pos:line="133" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="135" pos:column="17">i<pos:position pos:line="135" pos:column="18"/></name> <operator pos:line="135" pos:column="19">=<pos:position pos:line="135" pos:column="20"/></operator> <operator pos:line="135" pos:column="21">--<pos:position pos:line="135" pos:column="23"/></operator><name pos:line="135" pos:column="23">delta_stack_nr<pos:position pos:line="135" pos:column="37"/></name></expr>;<pos:position pos:line="135" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><name pos:line="136" pos:column="17">obj_offset<pos:position pos:line="136" pos:column="27"/></name> <operator pos:line="136" pos:column="28">=<pos:position pos:line="136" pos:column="29"/></operator> <name><name pos:line="136" pos:column="30">delta_stack<pos:position pos:line="136" pos:column="41"/></name><index pos:line="136" pos:column="41">[<expr><name pos:line="136" pos:column="42">i<pos:position pos:line="136" pos:column="43"/></name></expr>]<pos:position pos:line="136" pos:column="44"/></index></name><operator pos:line="136" pos:column="44">.<pos:position pos:line="136" pos:column="45"/></operator><name pos:line="136" pos:column="45">obj_offset<pos:position pos:line="136" pos:column="55"/></name></expr>;<pos:position pos:line="136" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><name pos:line="137" pos:column="17">curpos<pos:position pos:line="137" pos:column="23"/></name> <operator pos:line="137" pos:column="24">=<pos:position pos:line="137" pos:column="25"/></operator> <name><name pos:line="137" pos:column="26">delta_stack<pos:position pos:line="137" pos:column="37"/></name><index pos:line="137" pos:column="37">[<expr><name pos:line="137" pos:column="38">i<pos:position pos:line="137" pos:column="39"/></name></expr>]<pos:position pos:line="137" pos:column="40"/></index></name><operator pos:line="137" pos:column="40">.<pos:position pos:line="137" pos:column="41"/></operator><name pos:line="137" pos:column="41">curpos<pos:position pos:line="137" pos:column="47"/></name></expr>;<pos:position pos:line="137" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name pos:line="138" pos:column="17">delta_size<pos:position pos:line="138" pos:column="27"/></name> <operator pos:line="138" pos:column="28">=<pos:position pos:line="138" pos:column="29"/></operator> <name><name pos:line="138" pos:column="30">delta_stack<pos:position pos:line="138" pos:column="41"/></name><index pos:line="138" pos:column="41">[<expr><name pos:line="138" pos:column="42">i<pos:position pos:line="138" pos:column="43"/></name></expr>]<pos:position pos:line="138" pos:column="44"/></index></name><operator pos:line="138" pos:column="44">.<pos:position pos:line="138" pos:column="45"/></operator><name pos:line="138" pos:column="45">size<pos:position pos:line="138" pos:column="49"/></name></expr>;<pos:position pos:line="138" pos:column="50"/></expr_stmt>

		<if pos:line="140" pos:column="17">if <condition pos:line="140" pos:column="20">(<expr><operator pos:line="140" pos:column="21">!<pos:position pos:line="140" pos:column="22"/></operator><name pos:line="140" pos:column="22">base<pos:position pos:line="140" pos:column="26"/></name></expr>)<pos:position pos:line="140" pos:column="27"/></condition><then pos:line="140" pos:column="27">
			<block type="pseudo"><continue pos:line="141" pos:column="25">continue;<pos:position pos:line="141" pos:column="34"/></continue></block></then></if>

		<expr_stmt><expr><name pos:line="143" pos:column="17">delta_data<pos:position pos:line="143" pos:column="27"/></name> <operator pos:line="143" pos:column="28">=<pos:position pos:line="143" pos:column="29"/></operator> <call><name pos:line="143" pos:column="30">unpack_compressed_entry<pos:position pos:line="143" pos:column="53"/></name><argument_list pos:line="143" pos:column="53">(<argument><expr><name pos:line="143" pos:column="54">p<pos:position pos:line="143" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="143" pos:column="57">&amp;<pos:position pos:line="143" pos:column="62"/></operator><name pos:line="143" pos:column="58">w_curs<pos:position pos:line="143" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="66">curpos<pos:position pos:line="143" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="74">delta_size<pos:position pos:line="143" pos:column="84"/></name></expr></argument>)<pos:position pos:line="143" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="86"/></expr_stmt>

		<if pos:line="145" pos:column="17">if <condition pos:line="145" pos:column="20">(<expr><operator pos:line="145" pos:column="21">!<pos:position pos:line="145" pos:column="22"/></operator><name pos:line="145" pos:column="22">delta_data<pos:position pos:line="145" pos:column="32"/></name></expr>)<pos:position pos:line="145" pos:column="33"/></condition><then pos:line="145" pos:column="33"> <block pos:line="145" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="146" pos:column="25">error<pos:position pos:line="146" pos:column="30"/></name><argument_list pos:line="146" pos:column="30">(<argument><expr><literal type="string" pos:line="146" pos:column="31">"failed to unpack compressed delta "<pos:position pos:line="146" pos:column="67"/></literal>
			      <literal type="string" pos:line="147" pos:column="31">"at offset %"<pos:position pos:line="147" pos:column="44"/></literal><name pos:line="147" pos:column="44">PRIuMAX<pos:position pos:line="147" pos:column="51"/></name><literal type="string" pos:line="147" pos:column="51">" from %s"<pos:position pos:line="147" pos:column="61"/></literal></expr></argument>,
			      <argument><expr><operator pos:line="148" pos:column="31">(<pos:position pos:line="148" pos:column="32"/></operator><name pos:line="148" pos:column="32">uintmax_t<pos:position pos:line="148" pos:column="41"/></name><operator pos:line="148" pos:column="41">)<pos:position pos:line="148" pos:column="42"/></operator><name pos:line="148" pos:column="42">curpos<pos:position pos:line="148" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="148" pos:column="50">p<pos:position pos:line="148" pos:column="51"/></name><operator pos:line="148" pos:column="51">-&gt;<pos:position pos:line="148" pos:column="56"/></operator><name pos:line="148" pos:column="53">pack_name<pos:position pos:line="148" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="148" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="64"/></expr_stmt>
			<expr_stmt><expr><name pos:line="149" pos:column="25">data<pos:position pos:line="149" pos:column="29"/></name> <operator pos:line="149" pos:column="30">=<pos:position pos:line="149" pos:column="31"/></operator> <name pos:line="149" pos:column="32">NULL<pos:position pos:line="149" pos:column="36"/></name></expr>;<pos:position pos:line="149" pos:column="37"/></expr_stmt>
			<continue pos:line="150" pos:column="25">continue;<pos:position pos:line="150" pos:column="34"/></continue>
		}<pos:position pos:line="151" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="153" pos:column="17">data<pos:position pos:line="153" pos:column="21"/></name> <operator pos:line="153" pos:column="22">=<pos:position pos:line="153" pos:column="23"/></operator> <call><name pos:line="153" pos:column="24">patch_delta<pos:position pos:line="153" pos:column="35"/></name><argument_list pos:line="153" pos:column="35">(<argument><expr><name pos:line="153" pos:column="36">base<pos:position pos:line="153" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="42">base_size<pos:position pos:line="153" pos:column="51"/></name></expr></argument>,
				   <argument><expr><name pos:line="154" pos:column="36">delta_data<pos:position pos:line="154" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="48">delta_size<pos:position pos:line="154" pos:column="58"/></name></expr></argument>,
				   <argument><expr><operator pos:line="155" pos:column="36">&amp;<pos:position pos:line="155" pos:column="41"/></operator><name pos:line="155" pos:column="37">size<pos:position pos:line="155" pos:column="41"/></name></expr></argument>)<pos:position pos:line="155" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="43"/></expr_stmt>

		<comment type="block" pos:line="157" pos:column="17">/*
		 * We could not apply the delta; warn the user, but keep going.
		 * Our failure will be noticed either in the next iteration of
		 * the loop, or if this is the final delta, in the caller when
		 * we return NULL. Those code paths will take care of making
		 * a more explicit warning and retrying with another copy of
		 * the object.
		 */</comment>
		<if pos:line="165" pos:column="17">if <condition pos:line="165" pos:column="20">(<expr><operator pos:line="165" pos:column="21">!<pos:position pos:line="165" pos:column="22"/></operator><name pos:line="165" pos:column="22">data<pos:position pos:line="165" pos:column="26"/></name></expr>)<pos:position pos:line="165" pos:column="27"/></condition><then pos:line="165" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="166" pos:column="25">error<pos:position pos:line="166" pos:column="30"/></name><argument_list pos:line="166" pos:column="30">(<argument><expr><literal type="string" pos:line="166" pos:column="31">"failed to apply delta"<pos:position pos:line="166" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="166" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="56"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="168" pos:column="17">free<pos:position pos:line="168" pos:column="21"/></name><argument_list pos:line="168" pos:column="21">(<argument><expr><name pos:line="168" pos:column="22">delta_data<pos:position pos:line="168" pos:column="32"/></name></expr></argument>)<pos:position pos:line="168" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="34"/></expr_stmt>
	}<pos:position pos:line="169" pos:column="10"/></block></while>

	<expr_stmt><expr><operator pos:line="171" pos:column="9">*<pos:position pos:line="171" pos:column="10"/></operator><name pos:line="171" pos:column="10">final_type<pos:position pos:line="171" pos:column="20"/></name> <operator pos:line="171" pos:column="21">=<pos:position pos:line="171" pos:column="22"/></operator> <name pos:line="171" pos:column="23">type<pos:position pos:line="171" pos:column="27"/></name></expr>;<pos:position pos:line="171" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="172" pos:column="9">*<pos:position pos:line="172" pos:column="10"/></operator><name pos:line="172" pos:column="10">final_size<pos:position pos:line="172" pos:column="20"/></name> <operator pos:line="172" pos:column="21">=<pos:position pos:line="172" pos:column="22"/></operator> <name pos:line="172" pos:column="23">size<pos:position pos:line="172" pos:column="27"/></name></expr>;<pos:position pos:line="172" pos:column="28"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="174" pos:column="9">unuse_pack<pos:position pos:line="174" pos:column="19"/></name><argument_list pos:line="174" pos:column="19">(<argument><expr><operator pos:line="174" pos:column="20">&amp;<pos:position pos:line="174" pos:column="25"/></operator><name pos:line="174" pos:column="21">w_curs<pos:position pos:line="174" pos:column="27"/></name></expr></argument>)<pos:position pos:line="174" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="29"/></expr_stmt>

	<if pos:line="176" pos:column="9">if <condition pos:line="176" pos:column="12">(<expr><name pos:line="176" pos:column="13">delta_stack<pos:position pos:line="176" pos:column="24"/></name> <operator pos:line="176" pos:column="25">!=<pos:position pos:line="176" pos:column="27"/></operator> <name pos:line="176" pos:column="28">small_delta_stack<pos:position pos:line="176" pos:column="45"/></name></expr>)<pos:position pos:line="176" pos:column="46"/></condition><then pos:line="176" pos:column="46">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="177" pos:column="17">free<pos:position pos:line="177" pos:column="21"/></name><argument_list pos:line="177" pos:column="21">(<argument><expr><name pos:line="177" pos:column="22">delta_stack<pos:position pos:line="177" pos:column="33"/></name></expr></argument>)<pos:position pos:line="177" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="35"/></expr_stmt></block></then></if>

	<return pos:line="179" pos:column="9">return <expr><name pos:line="179" pos:column="16">data<pos:position pos:line="179" pos:column="20"/></name></expr>;<pos:position pos:line="179" pos:column="21"/></return>
}<pos:position pos:line="180" pos:column="2"/></block></function></unit>
