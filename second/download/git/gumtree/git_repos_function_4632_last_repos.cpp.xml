<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4632_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">consume_shallow_list<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">struct<pos:position pos:line="1" pos:column="40"/></name> <name pos:line="1" pos:column="41">fetch_pack_args<pos:position pos:line="1" pos:column="56"/></name></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">args<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="64">int<pos:position pos:line="1" pos:column="67"/></name></type> <name pos:line="1" pos:column="68">fd<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name><name pos:line="3" pos:column="13">args<pos:position pos:line="3" pos:column="17"/></name><operator pos:line="3" pos:column="17">-&gt;<pos:position pos:line="3" pos:column="22"/></operator><name pos:line="3" pos:column="19">stateless_rpc<pos:position pos:line="3" pos:column="32"/></name></name> <operator pos:line="3" pos:column="33">&amp;&amp;<pos:position pos:line="3" pos:column="43"/></operator> <name><name pos:line="3" pos:column="36">args<pos:position pos:line="3" pos:column="40"/></name><operator pos:line="3" pos:column="40">-&gt;<pos:position pos:line="3" pos:column="45"/></operator><name pos:line="3" pos:column="42">deepen<pos:position pos:line="3" pos:column="48"/></name></name></expr>)<pos:position pos:line="3" pos:column="49"/></condition><then pos:line="3" pos:column="49"> <block pos:line="3" pos:column="50">{
		<comment type="block" pos:line="4" pos:column="17">/* If we sent a depth we will get back "duplicate"
		 * shallow and unshallow commands every time there
		 * is a block of have lines exchanged.
		 */</comment>
		<decl_stmt><decl><type><name pos:line="8" pos:column="17">char<pos:position pos:line="8" pos:column="21"/></name> <modifier pos:line="8" pos:column="22">*<pos:position pos:line="8" pos:column="23"/></modifier></type><name pos:line="8" pos:column="23">line<pos:position pos:line="8" pos:column="27"/></name></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
		<while pos:line="9" pos:column="17">while <condition pos:line="9" pos:column="23">(<expr><operator pos:line="9" pos:column="24">(<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="25">line<pos:position pos:line="9" pos:column="29"/></name> <operator pos:line="9" pos:column="30">=<pos:position pos:line="9" pos:column="31"/></operator> <call><name pos:line="9" pos:column="32">packet_read_line<pos:position pos:line="9" pos:column="48"/></name><argument_list pos:line="9" pos:column="48">(<argument><expr><name pos:line="9" pos:column="49">fd<pos:position pos:line="9" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="53">NULL<pos:position pos:line="9" pos:column="57"/></name></expr></argument>)<pos:position pos:line="9" pos:column="58"/></argument_list></call><operator pos:line="9" pos:column="58">)<pos:position pos:line="9" pos:column="59"/></operator></expr>)<pos:position pos:line="9" pos:column="60"/></condition> <block pos:line="9" pos:column="61">{
			<if pos:line="10" pos:column="25">if <condition pos:line="10" pos:column="28">(<expr><call><name pos:line="10" pos:column="29">starts_with<pos:position pos:line="10" pos:column="40"/></name><argument_list pos:line="10" pos:column="40">(<argument><expr><name pos:line="10" pos:column="41">line<pos:position pos:line="10" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="47">"shallow "<pos:position pos:line="10" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="59"/></condition><then pos:line="10" pos:column="59">
				<block type="pseudo"><continue pos:line="11" pos:column="33">continue;<pos:position pos:line="11" pos:column="42"/></continue></block></then></if>
			<if pos:line="12" pos:column="25">if <condition pos:line="12" pos:column="28">(<expr><call><name pos:line="12" pos:column="29">starts_with<pos:position pos:line="12" pos:column="40"/></name><argument_list pos:line="12" pos:column="40">(<argument><expr><name pos:line="12" pos:column="41">line<pos:position pos:line="12" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="47">"unshallow "<pos:position pos:line="12" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="61"/></condition><then pos:line="12" pos:column="61">
				<block type="pseudo"><continue pos:line="13" pos:column="33">continue;<pos:position pos:line="13" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">die<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><call><name pos:line="14" pos:column="29">_<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><literal type="string" pos:line="14" pos:column="31">"git fetch-pack: expected shallow list"<pos:position pos:line="14" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="73"/></expr_stmt>
		}<pos:position pos:line="15" pos:column="18"/></block></while>
	}<pos:position pos:line="16" pos:column="10"/></block></then></if>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
