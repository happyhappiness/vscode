<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6338_git-2.6.0.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">unsigned<pos:position pos:line="1" pos:column="16"/></name> <name pos:line="1" pos:column="17">long<pos:position pos:line="1" pos:column="21"/></name></type> <name pos:line="1" pos:column="22">parse_oldstyle_date<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">buf<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name></type> <name pos:line="3" pos:column="14">c<pos:position pos:line="3" pos:column="15"/></name></decl>, <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="18">p<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">buffer<pos:position pos:line="4" pos:column="20"/></name><index pos:line="4" pos:column="20">[<expr><literal type="number" pos:line="4" pos:column="21">100<pos:position pos:line="4" pos:column="24"/></literal></expr>]<pos:position pos:line="4" pos:column="25"/></index></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">tm<pos:position pos:line="5" pos:column="18"/></name></name></type> <name pos:line="5" pos:column="19">tm<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name><name pos:line="6" pos:column="21">formats<pos:position pos:line="6" pos:column="28"/></name><index pos:line="6" pos:column="28">[]<pos:position pos:line="6" pos:column="30"/></index></name> <init pos:line="6" pos:column="31">= <expr><block pos:line="6" pos:column="33">{
		<expr><literal type="string" pos:line="7" pos:column="17">"%c"<pos:position pos:line="7" pos:column="21"/></literal></expr>,
		<expr><literal type="string" pos:line="8" pos:column="17">"%a %b %d %T"<pos:position pos:line="8" pos:column="30"/></literal></expr>,
		<expr><literal type="string" pos:line="9" pos:column="17">"%Z"<pos:position pos:line="9" pos:column="21"/></literal></expr>,
		<expr><literal type="string" pos:line="10" pos:column="17">"%Y"<pos:position pos:line="10" pos:column="21"/></literal></expr>,
		<expr><literal type="string" pos:line="11" pos:column="17">" %Y"<pos:position pos:line="11" pos:column="22"/></literal></expr>,
		<expr><name pos:line="12" pos:column="17">NULL<pos:position pos:line="12" pos:column="21"/></name></expr>
	}<pos:position pos:line="13" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="13" pos:column="11"/></decl_stmt>
	<comment type="block" pos:line="14" pos:column="9">/* We only ever did two timezones in the bad old format .. */</comment>
	<decl_stmt><decl><type><specifier pos:line="15" pos:column="9">const<pos:position pos:line="15" pos:column="14"/></specifier> <name pos:line="15" pos:column="15">char<pos:position pos:line="15" pos:column="19"/></name> <modifier pos:line="15" pos:column="20">*<pos:position pos:line="15" pos:column="21"/></modifier></type><name><name pos:line="15" pos:column="21">timezones<pos:position pos:line="15" pos:column="30"/></name><index pos:line="15" pos:column="30">[]<pos:position pos:line="15" pos:column="32"/></index></name> <init pos:line="15" pos:column="33">= <expr><block pos:line="15" pos:column="35">{
		<expr><literal type="string" pos:line="16" pos:column="17">"PDT"<pos:position pos:line="16" pos:column="22"/></literal></expr>, <expr><literal type="string" pos:line="16" pos:column="24">"PST"<pos:position pos:line="16" pos:column="29"/></literal></expr>, <expr><literal type="string" pos:line="16" pos:column="31">"CEST"<pos:position pos:line="16" pos:column="37"/></literal></expr>, <expr><name pos:line="16" pos:column="39">NULL<pos:position pos:line="16" pos:column="43"/></name></expr>
	}<pos:position pos:line="17" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="17" pos:column="11"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="18" pos:column="9">const<pos:position pos:line="18" pos:column="14"/></specifier> <name pos:line="18" pos:column="15">char<pos:position pos:line="18" pos:column="19"/></name> <modifier pos:line="18" pos:column="20">*<pos:position pos:line="18" pos:column="21"/></modifier><modifier pos:line="18" pos:column="21">*<pos:position pos:line="18" pos:column="22"/></modifier></type><name pos:line="18" pos:column="22">fmt<pos:position pos:line="18" pos:column="25"/></name> <init pos:line="18" pos:column="26">= <expr><name pos:line="18" pos:column="28">formats<pos:position pos:line="18" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="36"/></decl_stmt>

	<expr_stmt><expr><name pos:line="20" pos:column="9">p<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <name pos:line="20" pos:column="13">buffer<pos:position pos:line="20" pos:column="19"/></name></expr>;<pos:position pos:line="20" pos:column="20"/></expr_stmt>
	<while pos:line="21" pos:column="9">while <condition pos:line="21" pos:column="15">(<expr><call><name pos:line="21" pos:column="16">isspace<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name pos:line="21" pos:column="24">c<pos:position pos:line="21" pos:column="25"/></name> <operator pos:line="21" pos:column="26">=<pos:position pos:line="21" pos:column="27"/></operator> <operator pos:line="21" pos:column="28">*<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="29">buf<pos:position pos:line="21" pos:column="32"/></name></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="34"/></condition>
		<block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="17">buf<pos:position pos:line="22" pos:column="20"/></name><operator pos:line="22" pos:column="20">++<pos:position pos:line="22" pos:column="22"/></operator></expr>;<pos:position pos:line="22" pos:column="23"/></expr_stmt></block></while>
	<while pos:line="23" pos:column="9">while <condition pos:line="23" pos:column="15">(<expr><operator pos:line="23" pos:column="16">(<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="17">c<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <operator pos:line="23" pos:column="21">*<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="22">buf<pos:position pos:line="23" pos:column="25"/></name><operator pos:line="23" pos:column="25">++<pos:position pos:line="23" pos:column="27"/></operator><operator pos:line="23" pos:column="27">)<pos:position pos:line="23" pos:column="28"/></operator> <operator pos:line="23" pos:column="29">!=<pos:position pos:line="23" pos:column="31"/></operator> <literal type="char" pos:line="23" pos:column="32">'\n'<pos:position pos:line="23" pos:column="36"/></literal></expr>)<pos:position pos:line="23" pos:column="37"/></condition>
		<block type="pseudo"><expr_stmt><expr><operator pos:line="24" pos:column="17">*<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">p<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">++<pos:position pos:line="24" pos:column="21"/></operator> <operator pos:line="24" pos:column="22">=<pos:position pos:line="24" pos:column="23"/></operator> <name pos:line="24" pos:column="24">c<pos:position pos:line="24" pos:column="25"/></name></expr>;<pos:position pos:line="24" pos:column="26"/></expr_stmt></block></while>
	<expr_stmt><expr><operator pos:line="25" pos:column="9">*<pos:position pos:line="25" pos:column="10"/></operator><name pos:line="25" pos:column="10">p<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">++<pos:position pos:line="25" pos:column="13"/></operator> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <literal type="number" pos:line="25" pos:column="16">0<pos:position pos:line="25" pos:column="17"/></literal></expr>;<pos:position pos:line="25" pos:column="18"/></expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">buf<pos:position pos:line="26" pos:column="12"/></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <name pos:line="26" pos:column="15">buffer<pos:position pos:line="26" pos:column="21"/></name></expr>;<pos:position pos:line="26" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">memset<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><operator pos:line="27" pos:column="16">&amp;<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="17">tm<pos:position pos:line="27" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="21">0<pos:position pos:line="27" pos:column="22"/></literal></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="24">sizeof<argument_list pos:line="27" pos:column="30">(<argument><expr><name pos:line="27" pos:column="31">tm<pos:position pos:line="27" pos:column="33"/></name></expr></argument>)<pos:position pos:line="27" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>
	<do pos:line="28" pos:column="9">do <block pos:line="28" pos:column="12">{
		<decl_stmt><decl><type><specifier pos:line="29" pos:column="17">const<pos:position pos:line="29" pos:column="22"/></specifier> <name pos:line="29" pos:column="23">char<pos:position pos:line="29" pos:column="27"/></name> <modifier pos:line="29" pos:column="28">*<pos:position pos:line="29" pos:column="29"/></modifier></type><name pos:line="29" pos:column="29">next<pos:position pos:line="29" pos:column="33"/></name> <init pos:line="29" pos:column="34">= <expr><call><name pos:line="29" pos:column="36">strptime<pos:position pos:line="29" pos:column="44"/></name><argument_list pos:line="29" pos:column="44">(<argument><expr><name pos:line="29" pos:column="45">buf<pos:position pos:line="29" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="50">*<pos:position pos:line="29" pos:column="51"/></operator><name pos:line="29" pos:column="51">fmt<pos:position pos:line="29" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="56">&amp;<pos:position pos:line="29" pos:column="61"/></operator><name pos:line="29" pos:column="57">tm<pos:position pos:line="29" pos:column="59"/></name></expr></argument>)<pos:position pos:line="29" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="61"/></decl_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">next<pos:position pos:line="30" pos:column="25"/></name></expr>)<pos:position pos:line="30" pos:column="26"/></condition><then pos:line="30" pos:column="26"> <block pos:line="30" pos:column="27">{
			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><operator pos:line="31" pos:column="29">!<pos:position pos:line="31" pos:column="30"/></operator><operator pos:line="31" pos:column="30">*<pos:position pos:line="31" pos:column="31"/></operator><name pos:line="31" pos:column="31">next<pos:position pos:line="31" pos:column="35"/></name></expr>)<pos:position pos:line="31" pos:column="36"/></condition><then pos:line="31" pos:column="36">
				<block type="pseudo"><return pos:line="32" pos:column="33">return <expr><call><name pos:line="32" pos:column="40">mktime<pos:position pos:line="32" pos:column="46"/></name><argument_list pos:line="32" pos:column="46">(<argument><expr><operator pos:line="32" pos:column="47">&amp;<pos:position pos:line="32" pos:column="52"/></operator><name pos:line="32" pos:column="48">tm<pos:position pos:line="32" pos:column="50"/></name></expr></argument>)<pos:position pos:line="32" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="52"/></return></block></then></if>
			<expr_stmt><expr><name pos:line="33" pos:column="25">buf<pos:position pos:line="33" pos:column="28"/></name> <operator pos:line="33" pos:column="29">=<pos:position pos:line="33" pos:column="30"/></operator> <name pos:line="33" pos:column="31">next<pos:position pos:line="33" pos:column="35"/></name></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt>
		}<pos:position pos:line="34" pos:column="18"/></block></then> <else pos:line="34" pos:column="19">else <block pos:line="34" pos:column="24">{
			<decl_stmt><decl><type><specifier pos:line="35" pos:column="25">const<pos:position pos:line="35" pos:column="30"/></specifier> <name pos:line="35" pos:column="31">char<pos:position pos:line="35" pos:column="35"/></name> <modifier pos:line="35" pos:column="36">*<pos:position pos:line="35" pos:column="37"/></modifier><modifier pos:line="35" pos:column="37">*<pos:position pos:line="35" pos:column="38"/></modifier></type><name pos:line="35" pos:column="38">p<pos:position pos:line="35" pos:column="39"/></name> <init pos:line="35" pos:column="40">= <expr><name pos:line="35" pos:column="42">timezones<pos:position pos:line="35" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="35" pos:column="52"/></decl_stmt>
			<while pos:line="36" pos:column="25">while <condition pos:line="36" pos:column="31">(<expr><call><name pos:line="36" pos:column="32">isspace<pos:position pos:line="36" pos:column="39"/></name><argument_list pos:line="36" pos:column="39">(<argument><expr><operator pos:line="36" pos:column="40">*<pos:position pos:line="36" pos:column="41"/></operator><name pos:line="36" pos:column="41">buf<pos:position pos:line="36" pos:column="44"/></name></expr></argument>)<pos:position pos:line="36" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="46"/></condition>
				<block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="33">buf<pos:position pos:line="37" pos:column="36"/></name><operator pos:line="37" pos:column="36">++<pos:position pos:line="37" pos:column="38"/></operator></expr>;<pos:position pos:line="37" pos:column="39"/></expr_stmt></block></while>
			<while pos:line="38" pos:column="25">while <condition pos:line="38" pos:column="31">(<expr><operator pos:line="38" pos:column="32">*<pos:position pos:line="38" pos:column="33"/></operator><name pos:line="38" pos:column="33">p<pos:position pos:line="38" pos:column="34"/></name></expr>)<pos:position pos:line="38" pos:column="35"/></condition> <block pos:line="38" pos:column="36">{
				<if pos:line="39" pos:column="33">if <condition pos:line="39" pos:column="36">(<expr><operator pos:line="39" pos:column="37">!<pos:position pos:line="39" pos:column="38"/></operator><call><name pos:line="39" pos:column="38">memcmp<pos:position pos:line="39" pos:column="44"/></name><argument_list pos:line="39" pos:column="44">(<argument><expr><name pos:line="39" pos:column="45">buf<pos:position pos:line="39" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="50">*<pos:position pos:line="39" pos:column="51"/></operator><name pos:line="39" pos:column="51">p<pos:position pos:line="39" pos:column="52"/></name></expr></argument>, <argument><expr><call><name pos:line="39" pos:column="54">strlen<pos:position pos:line="39" pos:column="60"/></name><argument_list pos:line="39" pos:column="60">(<argument><expr><operator pos:line="39" pos:column="61">*<pos:position pos:line="39" pos:column="62"/></operator><name pos:line="39" pos:column="62">p<pos:position pos:line="39" pos:column="63"/></name></expr></argument>)<pos:position pos:line="39" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="66"/></condition><then pos:line="39" pos:column="66"> <block pos:line="39" pos:column="67">{
					<expr_stmt><expr><name pos:line="40" pos:column="41">buf<pos:position pos:line="40" pos:column="44"/></name> <operator pos:line="40" pos:column="45">+=<pos:position pos:line="40" pos:column="47"/></operator> <call><name pos:line="40" pos:column="48">strlen<pos:position pos:line="40" pos:column="54"/></name><argument_list pos:line="40" pos:column="54">(<argument><expr><operator pos:line="40" pos:column="55">*<pos:position pos:line="40" pos:column="56"/></operator><name pos:line="40" pos:column="56">p<pos:position pos:line="40" pos:column="57"/></name></expr></argument>)<pos:position pos:line="40" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="59"/></expr_stmt>
					<break pos:line="41" pos:column="41">break;<pos:position pos:line="41" pos:column="47"/></break>
				}<pos:position pos:line="42" pos:column="34"/></block></then></if>
				<expr_stmt><expr><name pos:line="43" pos:column="33">p<pos:position pos:line="43" pos:column="34"/></name><operator pos:line="43" pos:column="34">++<pos:position pos:line="43" pos:column="36"/></operator></expr>;<pos:position pos:line="43" pos:column="37"/></expr_stmt>
			}<pos:position pos:line="44" pos:column="26"/></block></while>
		}<pos:position pos:line="45" pos:column="18"/></block></else></if>
		<expr_stmt><expr><name pos:line="46" pos:column="17">fmt<pos:position pos:line="46" pos:column="20"/></name><operator pos:line="46" pos:column="20">++<pos:position pos:line="46" pos:column="22"/></operator></expr>;<pos:position pos:line="46" pos:column="23"/></expr_stmt>
	}<pos:position pos:line="47" pos:column="10"/></block> while <condition pos:line="47" pos:column="17">(<expr><operator pos:line="47" pos:column="18">*<pos:position pos:line="47" pos:column="19"/></operator><name pos:line="47" pos:column="19">buf<pos:position pos:line="47" pos:column="22"/></name> <operator pos:line="47" pos:column="23">&amp;&amp;<pos:position pos:line="47" pos:column="33"/></operator> <operator pos:line="47" pos:column="26">*<pos:position pos:line="47" pos:column="27"/></operator><name pos:line="47" pos:column="27">fmt<pos:position pos:line="47" pos:column="30"/></name></expr>)<pos:position pos:line="47" pos:column="31"/></condition>;<pos:position pos:line="47" pos:column="32"/></do>
	<expr_stmt><expr><call><name pos:line="48" pos:column="9">printf<pos:position pos:line="48" pos:column="15"/></name><argument_list pos:line="48" pos:column="15">(<argument><expr><literal type="string" pos:line="48" pos:column="16">"left: %s\n"<pos:position pos:line="48" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="30">buf<pos:position pos:line="48" pos:column="33"/></name></expr></argument>)<pos:position pos:line="48" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="35"/></expr_stmt>
	<return pos:line="49" pos:column="9">return <expr><call><name pos:line="49" pos:column="16">mktime<pos:position pos:line="49" pos:column="22"/></name><argument_list pos:line="49" pos:column="22">(<argument><expr><operator pos:line="49" pos:column="23">&amp;<pos:position pos:line="49" pos:column="28"/></operator><name pos:line="49" pos:column="24">tm<pos:position pos:line="49" pos:column="26"/></name></expr></argument>)<pos:position pos:line="49" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="28"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
