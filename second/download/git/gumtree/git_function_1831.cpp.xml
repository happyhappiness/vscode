<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1831.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">repack_without_refs<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">string_list<pos:position pos:line="1" pos:column="43"/></name></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">refnames<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="55">struct<pos:position pos:line="1" pos:column="61"/></name> <name pos:line="1" pos:column="62">strbuf<pos:position pos:line="1" pos:column="68"/></name></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">err<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">ref_dir<pos:position pos:line="3" pos:column="23"/></name></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">packed<pos:position pos:line="3" pos:column="31"/></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">string_list<pos:position pos:line="4" pos:column="27"/></name></name></type> <name pos:line="4" pos:column="28">refs_to_delete<pos:position pos:line="4" pos:column="42"/></name> <init pos:line="4" pos:column="43">= <expr><name pos:line="4" pos:column="45">STRING_LIST_INIT_DUP<pos:position pos:line="4" pos:column="65"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="66"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">string_list_item<pos:position pos:line="5" pos:column="32"/></name></name> <modifier pos:line="5" pos:column="33">*<pos:position pos:line="5" pos:column="34"/></modifier></type><name pos:line="5" pos:column="34">refname<pos:position pos:line="5" pos:column="41"/></name></decl>, <modifier pos:line="5" pos:column="43">*<pos:position pos:line="5" pos:column="44"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="44">ref_to_delete<pos:position pos:line="5" pos:column="57"/></name></decl>;<pos:position pos:line="5" pos:column="58"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">ret<pos:position pos:line="6" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="18">needs_repacking<pos:position pos:line="6" pos:column="33"/></name> <init pos:line="6" pos:column="34">= <expr><literal type="number" pos:line="6" pos:column="36">0<pos:position pos:line="6" pos:column="37"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="39">removed<pos:position pos:line="6" pos:column="46"/></name> <init pos:line="6" pos:column="47">= <expr><literal type="number" pos:line="6" pos:column="49">0<pos:position pos:line="6" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="51"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">assert<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><name pos:line="8" pos:column="16">err<pos:position pos:line="8" pos:column="19"/></name></expr></argument>)<pos:position pos:line="8" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="21"/></expr_stmt>

	<comment type="block" pos:line="10" pos:column="9">/* Look for a packed ref */</comment>
	<macro><name pos:line="11" pos:column="9">for_each_string_list_item<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument pos:line="11" pos:column="35">refname<pos:position pos:line="11" pos:column="42"/></argument>, <argument pos:line="11" pos:column="44">refnames<pos:position pos:line="11" pos:column="52"/></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></macro> <block pos:line="11" pos:column="54">{
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><call><name pos:line="12" pos:column="21">get_packed_ref<pos:position pos:line="12" pos:column="35"/></name><argument_list pos:line="12" pos:column="35">(<argument><expr><name><name pos:line="12" pos:column="36">refname<pos:position pos:line="12" pos:column="43"/></name><operator pos:line="12" pos:column="43">-&gt;<pos:position pos:line="12" pos:column="48"/></operator><name pos:line="12" pos:column="45">string<pos:position pos:line="12" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="53"/></condition><then pos:line="12" pos:column="53"> <block pos:line="12" pos:column="54">{
			<expr_stmt><expr><name pos:line="13" pos:column="25">needs_repacking<pos:position pos:line="13" pos:column="40"/></name> <operator pos:line="13" pos:column="41">=<pos:position pos:line="13" pos:column="42"/></operator> <literal type="number" pos:line="13" pos:column="43">1<pos:position pos:line="13" pos:column="44"/></literal></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>
			<break pos:line="14" pos:column="25">break;<pos:position pos:line="14" pos:column="31"/></break>
		}<pos:position pos:line="15" pos:column="18"/></block></then></if>
	}<pos:position pos:line="16" pos:column="10"/></block>

	<comment type="block" pos:line="18" pos:column="9">/* Avoid locking if we have nothing to do */</comment>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">needs_repacking<pos:position pos:line="19" pos:column="29"/></name></expr>)<pos:position pos:line="19" pos:column="30"/></condition><then pos:line="19" pos:column="30">
		<block type="pseudo"><return pos:line="20" pos:column="17">return <expr><literal type="number" pos:line="20" pos:column="24">0<pos:position pos:line="20" pos:column="25"/></literal></expr>;<pos:position pos:line="20" pos:column="26"/></return></block></then></if> <comment type="block" pos:line="20" pos:column="27">/* no refname exists in packed refs */</comment>

	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><call><name pos:line="22" pos:column="13">lock_packed_refs<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><literal type="number" pos:line="22" pos:column="30">0<pos:position pos:line="22" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="33"/></condition><then pos:line="22" pos:column="33"> <block pos:line="22" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">unable_to_lock_message<pos:position pos:line="23" pos:column="39"/></name><argument_list pos:line="23" pos:column="39">(<argument><expr><call><name pos:line="23" pos:column="40">git_path<pos:position pos:line="23" pos:column="48"/></name><argument_list pos:line="23" pos:column="48">(<argument><expr><literal type="string" pos:line="23" pos:column="49">"packed-refs"<pos:position pos:line="23" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="23" pos:column="65">errno<pos:position pos:line="23" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="72">err<pos:position pos:line="23" pos:column="75"/></name></expr></argument>)<pos:position pos:line="23" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="77"/></expr_stmt>
		<return pos:line="24" pos:column="17">return <expr><operator pos:line="24" pos:column="24">-<pos:position pos:line="24" pos:column="25"/></operator><literal type="number" pos:line="24" pos:column="25">1<pos:position pos:line="24" pos:column="26"/></literal></expr>;<pos:position pos:line="24" pos:column="27"/></return>
	}<pos:position pos:line="25" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="26" pos:column="9">packed<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <call><name pos:line="26" pos:column="18">get_packed_refs<pos:position pos:line="26" pos:column="33"/></name><argument_list pos:line="26" pos:column="33">(<argument><expr><operator pos:line="26" pos:column="34">&amp;<pos:position pos:line="26" pos:column="39"/></operator><name pos:line="26" pos:column="35">ref_cache<pos:position pos:line="26" pos:column="44"/></name></expr></argument>)<pos:position pos:line="26" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="46"/></expr_stmt>

	<comment type="block" pos:line="28" pos:column="9">/* Remove refnames from the cache */</comment>
	<macro><name pos:line="29" pos:column="9">for_each_string_list_item<pos:position pos:line="29" pos:column="34"/></name><argument_list pos:line="29" pos:column="34">(<argument pos:line="29" pos:column="35">refname<pos:position pos:line="29" pos:column="42"/></argument>, <argument pos:line="29" pos:column="44">refnames<pos:position pos:line="29" pos:column="52"/></argument>)<pos:position pos:line="29" pos:column="53"/></argument_list></macro>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><call><name pos:line="30" pos:column="21">remove_entry<pos:position pos:line="30" pos:column="33"/></name><argument_list pos:line="30" pos:column="33">(<argument><expr><name pos:line="30" pos:column="34">packed<pos:position pos:line="30" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="42">refname<pos:position pos:line="30" pos:column="49"/></name><operator pos:line="30" pos:column="49">-&gt;<pos:position pos:line="30" pos:column="54"/></operator><name pos:line="30" pos:column="51">string<pos:position pos:line="30" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call> <operator pos:line="30" pos:column="59">!=<pos:position pos:line="30" pos:column="61"/></operator> <operator pos:line="30" pos:column="62">-<pos:position pos:line="30" pos:column="63"/></operator><literal type="number" pos:line="30" pos:column="63">1<pos:position pos:line="30" pos:column="64"/></literal></expr>)<pos:position pos:line="30" pos:column="65"/></condition><then pos:line="30" pos:column="65">
			<block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="25">removed<pos:position pos:line="31" pos:column="32"/></name> <operator pos:line="31" pos:column="33">=<pos:position pos:line="31" pos:column="34"/></operator> <literal type="number" pos:line="31" pos:column="35">1<pos:position pos:line="31" pos:column="36"/></literal></expr>;<pos:position pos:line="31" pos:column="37"/></expr_stmt></block></then></if>
	<if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><operator pos:line="32" pos:column="13">!<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">removed<pos:position pos:line="32" pos:column="21"/></name></expr>)<pos:position pos:line="32" pos:column="22"/></condition><then pos:line="32" pos:column="22"> <block pos:line="32" pos:column="23">{
		<comment type="block" pos:line="33" pos:column="17">/*
		 * All packed entries disappeared while we were
		 * acquiring the lock.
		 */</comment>
		<expr_stmt><expr><call><name pos:line="37" pos:column="17">rollback_packed_refs<pos:position pos:line="37" pos:column="37"/></name><argument_list pos:line="37" pos:column="37">()<pos:position pos:line="37" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="40"/></expr_stmt>
		<return pos:line="38" pos:column="17">return <expr><literal type="number" pos:line="38" pos:column="24">0<pos:position pos:line="38" pos:column="25"/></literal></expr>;<pos:position pos:line="38" pos:column="26"/></return>
	}<pos:position pos:line="39" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="41" pos:column="9">/* Remove any other accumulated cruft */</comment>
	<expr_stmt><expr><call><name pos:line="42" pos:column="9">do_for_each_entry_in_dir<pos:position pos:line="42" pos:column="33"/></name><argument_list pos:line="42" pos:column="33">(<argument><expr><name pos:line="42" pos:column="34">packed<pos:position pos:line="42" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="42">0<pos:position pos:line="42" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="45">curate_packed_ref_fn<pos:position pos:line="42" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="67">&amp;<pos:position pos:line="42" pos:column="72"/></operator><name pos:line="42" pos:column="68">refs_to_delete<pos:position pos:line="42" pos:column="82"/></name></expr></argument>)<pos:position pos:line="42" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="84"/></expr_stmt>
	<macro><name pos:line="43" pos:column="9">for_each_string_list_item<pos:position pos:line="43" pos:column="34"/></name><argument_list pos:line="43" pos:column="34">(<argument pos:line="43" pos:column="35">ref_to_delete<pos:position pos:line="43" pos:column="48"/></argument>, <argument pos:line="43" pos:column="50">&amp;refs_to_delete<pos:position pos:line="43" pos:column="65"/></argument>)<pos:position pos:line="43" pos:column="66"/></argument_list></macro> <block pos:line="43" pos:column="67">{
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><call><name pos:line="44" pos:column="21">remove_entry<pos:position pos:line="44" pos:column="33"/></name><argument_list pos:line="44" pos:column="33">(<argument><expr><name pos:line="44" pos:column="34">packed<pos:position pos:line="44" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="42">ref_to_delete<pos:position pos:line="44" pos:column="55"/></name><operator pos:line="44" pos:column="55">-&gt;<pos:position pos:line="44" pos:column="60"/></operator><name pos:line="44" pos:column="57">string<pos:position pos:line="44" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="64"/></argument_list></call> <operator pos:line="44" pos:column="65">==<pos:position pos:line="44" pos:column="67"/></operator> <operator pos:line="44" pos:column="68">-<pos:position pos:line="44" pos:column="69"/></operator><literal type="number" pos:line="44" pos:column="69">1<pos:position pos:line="44" pos:column="70"/></literal></expr>)<pos:position pos:line="44" pos:column="71"/></condition><then pos:line="44" pos:column="71">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="25">die<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">(<argument><expr><literal type="string" pos:line="45" pos:column="29">"internal error"<pos:position pos:line="45" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="47"/></expr_stmt></block></then></if>
	}<pos:position pos:line="46" pos:column="10"/></block>

	<comment type="block" pos:line="48" pos:column="9">/* Write what remains */</comment>
	<expr_stmt><expr><name pos:line="49" pos:column="9">ret<pos:position pos:line="49" pos:column="12"/></name> <operator pos:line="49" pos:column="13">=<pos:position pos:line="49" pos:column="14"/></operator> <call><name pos:line="49" pos:column="15">commit_packed_refs<pos:position pos:line="49" pos:column="33"/></name><argument_list pos:line="49" pos:column="33">()<pos:position pos:line="49" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="36"/></expr_stmt>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">ret<pos:position pos:line="50" pos:column="16"/></name></expr>)<pos:position pos:line="50" pos:column="17"/></condition><then pos:line="50" pos:column="17">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="17">strbuf_addf<pos:position pos:line="51" pos:column="28"/></name><argument_list pos:line="51" pos:column="28">(<argument><expr><name pos:line="51" pos:column="29">err<pos:position pos:line="51" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="34">"unable to overwrite old ref-pack file: %s"<pos:position pos:line="51" pos:column="77"/></literal></expr></argument>,
			    <argument><expr><call><name pos:line="52" pos:column="29">strerror<pos:position pos:line="52" pos:column="37"/></name><argument_list pos:line="52" pos:column="37">(<argument><expr><name pos:line="52" pos:column="38">errno<pos:position pos:line="52" pos:column="43"/></name></expr></argument>)<pos:position pos:line="52" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="46"/></expr_stmt></block></then></if>
	<return pos:line="53" pos:column="9">return <expr><name pos:line="53" pos:column="16">ret<pos:position pos:line="53" pos:column="19"/></name></expr>;<pos:position pos:line="53" pos:column="20"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
