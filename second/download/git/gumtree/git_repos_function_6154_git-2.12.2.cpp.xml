<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6154_git-2.12.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">ref_lock<pos:position pos:line="1" pos:column="23"/></name></name> <modifier pos:line="1" pos:column="24">*<pos:position pos:line="1" pos:column="25"/></modifier></type><name pos:line="1" pos:column="25">lock_ref_sha1_basic<pos:position pos:line="1" pos:column="44"/></name><parameter_list pos:line="1" pos:column="44">(<parameter><decl><type><name><name pos:line="1" pos:column="45">struct<pos:position pos:line="1" pos:column="51"/></name> <name pos:line="1" pos:column="52">files_ref_store<pos:position pos:line="1" pos:column="67"/></name></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">refs<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
					    <parameter><decl><type><specifier pos:line="2" pos:column="45">const<pos:position pos:line="2" pos:column="50"/></specifier> <name pos:line="2" pos:column="51">char<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">refname<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>,
					    <parameter><decl><type><specifier pos:line="3" pos:column="45">const<pos:position pos:line="3" pos:column="50"/></specifier> <name pos:line="3" pos:column="51">unsigned<pos:position pos:line="3" pos:column="59"/></name> <name pos:line="3" pos:column="60">char<pos:position pos:line="3" pos:column="64"/></name> <modifier pos:line="3" pos:column="65">*<pos:position pos:line="3" pos:column="66"/></modifier></type><name pos:line="3" pos:column="66">old_sha1<pos:position pos:line="3" pos:column="74"/></name></decl></parameter>,
					    <parameter><decl><type><specifier pos:line="4" pos:column="45">const<pos:position pos:line="4" pos:column="50"/></specifier> <name><name pos:line="4" pos:column="51">struct<pos:position pos:line="4" pos:column="57"/></name> <name pos:line="4" pos:column="58">string_list<pos:position pos:line="4" pos:column="69"/></name></name> <modifier pos:line="4" pos:column="70">*<pos:position pos:line="4" pos:column="71"/></modifier></type><name pos:line="4" pos:column="71">extras<pos:position pos:line="4" pos:column="77"/></name></decl></parameter>,
					    <parameter><decl><type><specifier pos:line="5" pos:column="45">const<pos:position pos:line="5" pos:column="50"/></specifier> <name><name pos:line="5" pos:column="51">struct<pos:position pos:line="5" pos:column="57"/></name> <name pos:line="5" pos:column="58">string_list<pos:position pos:line="5" pos:column="69"/></name></name> <modifier pos:line="5" pos:column="70">*<pos:position pos:line="5" pos:column="71"/></modifier></type><name pos:line="5" pos:column="71">skip<pos:position pos:line="5" pos:column="75"/></name></decl></parameter>,
					    <parameter><decl><type><name pos:line="6" pos:column="45">unsigned<pos:position pos:line="6" pos:column="53"/></name> <name pos:line="6" pos:column="54">int<pos:position pos:line="6" pos:column="57"/></name></type> <name pos:line="6" pos:column="58">flags<pos:position pos:line="6" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="6" pos:column="65">int<pos:position pos:line="6" pos:column="68"/></name> <modifier pos:line="6" pos:column="69">*<pos:position pos:line="6" pos:column="70"/></modifier></type><name pos:line="6" pos:column="70">type<pos:position pos:line="6" pos:column="74"/></name></decl></parameter>,
					    <parameter><decl><type><name><name pos:line="7" pos:column="45">struct<pos:position pos:line="7" pos:column="51"/></name> <name pos:line="7" pos:column="52">strbuf<pos:position pos:line="7" pos:column="58"/></name></name> <modifier pos:line="7" pos:column="59">*<pos:position pos:line="7" pos:column="60"/></modifier></type><name pos:line="7" pos:column="60">err<pos:position pos:line="7" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="7" pos:column="64"/></parameter_list>
<block pos:line="8" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">strbuf<pos:position pos:line="9" pos:column="22"/></name></name></type> <name pos:line="9" pos:column="23">ref_file<pos:position pos:line="9" pos:column="31"/></name> <init pos:line="9" pos:column="32">= <expr><name pos:line="9" pos:column="34">STRBUF_INIT<pos:position pos:line="9" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="46"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">ref_lock<pos:position pos:line="10" pos:column="24"/></name></name> <modifier pos:line="10" pos:column="25">*<pos:position pos:line="10" pos:column="26"/></modifier></type><name pos:line="10" pos:column="26">lock<pos:position pos:line="10" pos:column="30"/></name></decl>;<pos:position pos:line="10" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">last_errno<pos:position pos:line="11" pos:column="23"/></name> <init pos:line="11" pos:column="24">= <expr><literal type="number" pos:line="11" pos:column="26">0<pos:position pos:line="11" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">lflags<pos:position pos:line="12" pos:column="19"/></name> <init pos:line="12" pos:column="20">= <expr><name pos:line="12" pos:column="22">LOCK_NO_DEREF<pos:position pos:line="12" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="13" pos:column="9">int<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">mustexist<pos:position pos:line="13" pos:column="22"/></name> <init pos:line="13" pos:column="23">= <expr><operator pos:line="13" pos:column="25">(<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="26">old_sha1<pos:position pos:line="13" pos:column="34"/></name> <operator pos:line="13" pos:column="35">&amp;&amp;<pos:position pos:line="13" pos:column="45"/></operator> <operator pos:line="13" pos:column="38">!<pos:position pos:line="13" pos:column="39"/></operator><call><name pos:line="13" pos:column="39">is_null_sha1<pos:position pos:line="13" pos:column="51"/></name><argument_list pos:line="13" pos:column="51">(<argument><expr><name pos:line="13" pos:column="52">old_sha1<pos:position pos:line="13" pos:column="60"/></name></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></call><operator pos:line="13" pos:column="61">)<pos:position pos:line="13" pos:column="62"/></operator></expr></init></decl>;<pos:position pos:line="13" pos:column="63"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="14" pos:column="9">int<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">resolve_flags<pos:position pos:line="14" pos:column="26"/></name> <init pos:line="14" pos:column="27">= <expr><name pos:line="14" pos:column="29">RESOLVE_REF_NO_RECURSE<pos:position pos:line="14" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="15" pos:column="9">int<pos:position pos:line="15" pos:column="12"/></name></type> <name pos:line="15" pos:column="13">attempts_remaining<pos:position pos:line="15" pos:column="31"/></name> <init pos:line="15" pos:column="32">= <expr><literal type="number" pos:line="15" pos:column="34">3<pos:position pos:line="15" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="36"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">int<pos:position pos:line="16" pos:column="12"/></name></type> <name pos:line="16" pos:column="13">resolved<pos:position pos:line="16" pos:column="21"/></name></decl>;<pos:position pos:line="16" pos:column="22"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="18" pos:column="9">assert_main_repository<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><operator pos:line="18" pos:column="32">&amp;<pos:position pos:line="18" pos:column="37"/></operator><name><name pos:line="18" pos:column="33">refs<pos:position pos:line="18" pos:column="37"/></name><operator pos:line="18" pos:column="37">-&gt;<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="39">base<pos:position pos:line="18" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="45">"lock_ref_sha1_basic"<pos:position pos:line="18" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="68"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">assert<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><name pos:line="19" pos:column="16">err<pos:position pos:line="19" pos:column="19"/></name></expr></argument>)<pos:position pos:line="19" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="21"/></expr_stmt>

	<expr_stmt><expr><name pos:line="21" pos:column="9">lock<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <call><name pos:line="21" pos:column="16">xcalloc<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><literal type="number" pos:line="21" pos:column="24">1<pos:position pos:line="21" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="27">sizeof<argument_list pos:line="21" pos:column="33">(<argument><expr pos:line="21" pos:column="34">struct <name pos:line="21" pos:column="41">ref_lock<pos:position pos:line="21" pos:column="49"/></name></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="52"/></expr_stmt>

	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">mustexist<pos:position pos:line="23" pos:column="22"/></name></expr>)<pos:position pos:line="23" pos:column="23"/></condition><then pos:line="23" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="17">resolve_flags<pos:position pos:line="24" pos:column="30"/></name> <operator pos:line="24" pos:column="31">|=<pos:position pos:line="24" pos:column="33"/></operator> <name pos:line="24" pos:column="34">RESOLVE_REF_READING<pos:position pos:line="24" pos:column="53"/></name></expr>;<pos:position pos:line="24" pos:column="54"/></expr_stmt></block></then></if>
	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">flags<pos:position pos:line="25" pos:column="18"/></name> <operator pos:line="25" pos:column="19">&amp;<pos:position pos:line="25" pos:column="24"/></operator> <name pos:line="25" pos:column="21">REF_DELETING<pos:position pos:line="25" pos:column="33"/></name></expr>)<pos:position pos:line="25" pos:column="34"/></condition><then pos:line="25" pos:column="34">
		<block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="17">resolve_flags<pos:position pos:line="26" pos:column="30"/></name> <operator pos:line="26" pos:column="31">|=<pos:position pos:line="26" pos:column="33"/></operator> <name pos:line="26" pos:column="34">RESOLVE_REF_ALLOW_BAD_NAME<pos:position pos:line="26" pos:column="60"/></name></expr>;<pos:position pos:line="26" pos:column="61"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="28" pos:column="9">strbuf_git_path<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><operator pos:line="28" pos:column="25">&amp;<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="26">ref_file<pos:position pos:line="28" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="36">"%s"<pos:position pos:line="28" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="42">refname<pos:position pos:line="28" pos:column="49"/></name></expr></argument>)<pos:position pos:line="28" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt>
	<expr_stmt><expr><name pos:line="29" pos:column="9">resolved<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">=<pos:position pos:line="29" pos:column="19"/></operator> <operator pos:line="29" pos:column="20">!<pos:position pos:line="29" pos:column="21"/></operator><operator pos:line="29" pos:column="21">!<pos:position pos:line="29" pos:column="22"/></operator><call><name pos:line="29" pos:column="22">resolve_ref_unsafe<pos:position pos:line="29" pos:column="40"/></name><argument_list pos:line="29" pos:column="40">(<argument><expr><name pos:line="29" pos:column="41">refname<pos:position pos:line="29" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="50">resolve_flags<pos:position pos:line="29" pos:column="63"/></name></expr></argument>,
					<argument><expr><name><name pos:line="30" pos:column="41">lock<pos:position pos:line="30" pos:column="45"/></name><operator pos:line="30" pos:column="45">-&gt;<pos:position pos:line="30" pos:column="50"/></operator><name pos:line="30" pos:column="47">old_oid<pos:position pos:line="30" pos:column="54"/></name><operator pos:line="30" pos:column="54">.<pos:position pos:line="30" pos:column="55"/></operator><name pos:line="30" pos:column="55">hash<pos:position pos:line="30" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="61">type<pos:position pos:line="30" pos:column="65"/></name></expr></argument>)<pos:position pos:line="30" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="67"/></expr_stmt>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">!<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">resolved<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">&amp;&amp;<pos:position pos:line="31" pos:column="33"/></operator> <name pos:line="31" pos:column="26">errno<pos:position pos:line="31" pos:column="31"/></name> <operator pos:line="31" pos:column="32">==<pos:position pos:line="31" pos:column="34"/></operator> <name pos:line="31" pos:column="35">EISDIR<pos:position pos:line="31" pos:column="41"/></name></expr>)<pos:position pos:line="31" pos:column="42"/></condition><then pos:line="31" pos:column="42"> <block pos:line="31" pos:column="43">{
		<comment type="block" pos:line="32" pos:column="17">/*
		 * we are trying to lock foo but we used to
		 * have foo/bar which now does not exist;
		 * it is normal for the empty directory 'foo'
		 * to remain.
		 */</comment>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><call><name pos:line="38" pos:column="21">remove_empty_directories<pos:position pos:line="38" pos:column="45"/></name><argument_list pos:line="38" pos:column="45">(<argument><expr><operator pos:line="38" pos:column="46">&amp;<pos:position pos:line="38" pos:column="51"/></operator><name pos:line="38" pos:column="47">ref_file<pos:position pos:line="38" pos:column="55"/></name></expr></argument>)<pos:position pos:line="38" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="57"/></condition><then pos:line="38" pos:column="57"> <block pos:line="38" pos:column="58">{
			<expr_stmt><expr><name pos:line="39" pos:column="25">last_errno<pos:position pos:line="39" pos:column="35"/></name> <operator pos:line="39" pos:column="36">=<pos:position pos:line="39" pos:column="37"/></operator> <name pos:line="39" pos:column="38">errno<pos:position pos:line="39" pos:column="43"/></name></expr>;<pos:position pos:line="39" pos:column="44"/></expr_stmt>
			<if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><operator pos:line="40" pos:column="29">!<pos:position pos:line="40" pos:column="30"/></operator><call><name pos:line="40" pos:column="30">verify_refname_available_dir<pos:position pos:line="40" pos:column="58"/></name><argument_list pos:line="40" pos:column="58">(
					    <argument><expr><name pos:line="41" pos:column="45">refname<pos:position pos:line="41" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="54">extras<pos:position pos:line="41" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="62">skip<pos:position pos:line="41" pos:column="66"/></name></expr></argument>,
					    <argument><expr><call><name pos:line="42" pos:column="45">get_loose_refs<pos:position pos:line="42" pos:column="59"/></name><argument_list pos:line="42" pos:column="59">(<argument><expr><name pos:line="42" pos:column="60">refs<pos:position pos:line="42" pos:column="64"/></name></expr></argument>)<pos:position pos:line="42" pos:column="65"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="42" pos:column="67">err<pos:position pos:line="42" pos:column="70"/></name></expr></argument>)<pos:position pos:line="42" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="72"/></condition><then pos:line="42" pos:column="72">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="33">strbuf_addf<pos:position pos:line="43" pos:column="44"/></name><argument_list pos:line="43" pos:column="44">(<argument><expr><name pos:line="43" pos:column="45">err<pos:position pos:line="43" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="50">"there are still refs under '%s'"<pos:position pos:line="43" pos:column="83"/></literal></expr></argument>,
					    <argument><expr><name pos:line="44" pos:column="45">refname<pos:position pos:line="44" pos:column="52"/></name></expr></argument>)<pos:position pos:line="44" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="54"/></expr_stmt></block></then></if>
			<goto pos:line="45" pos:column="25">goto <name pos:line="45" pos:column="30">error_return<pos:position pos:line="45" pos:column="42"/></name>;<pos:position pos:line="45" pos:column="43"/></goto>
		}<pos:position pos:line="46" pos:column="18"/></block></then></if>
		<expr_stmt><expr><name pos:line="47" pos:column="17">resolved<pos:position pos:line="47" pos:column="25"/></name> <operator pos:line="47" pos:column="26">=<pos:position pos:line="47" pos:column="27"/></operator> <operator pos:line="47" pos:column="28">!<pos:position pos:line="47" pos:column="29"/></operator><operator pos:line="47" pos:column="29">!<pos:position pos:line="47" pos:column="30"/></operator><call><name pos:line="47" pos:column="30">resolve_ref_unsafe<pos:position pos:line="47" pos:column="48"/></name><argument_list pos:line="47" pos:column="48">(<argument><expr><name pos:line="47" pos:column="49">refname<pos:position pos:line="47" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="58">resolve_flags<pos:position pos:line="47" pos:column="71"/></name></expr></argument>,
						<argument><expr><name><name pos:line="48" pos:column="49">lock<pos:position pos:line="48" pos:column="53"/></name><operator pos:line="48" pos:column="53">-&gt;<pos:position pos:line="48" pos:column="58"/></operator><name pos:line="48" pos:column="55">old_oid<pos:position pos:line="48" pos:column="62"/></name><operator pos:line="48" pos:column="62">.<pos:position pos:line="48" pos:column="63"/></operator><name pos:line="48" pos:column="63">hash<pos:position pos:line="48" pos:column="67"/></name></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="69">type<pos:position pos:line="48" pos:column="73"/></name></expr></argument>)<pos:position pos:line="48" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="75"/></expr_stmt>
	}<pos:position pos:line="49" pos:column="10"/></block></then></if>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><operator pos:line="50" pos:column="13">!<pos:position pos:line="50" pos:column="14"/></operator><name pos:line="50" pos:column="14">resolved<pos:position pos:line="50" pos:column="22"/></name></expr>)<pos:position pos:line="50" pos:column="23"/></condition><then pos:line="50" pos:column="23"> <block pos:line="50" pos:column="24">{
		<expr_stmt><expr><name pos:line="51" pos:column="17">last_errno<pos:position pos:line="51" pos:column="27"/></name> <operator pos:line="51" pos:column="28">=<pos:position pos:line="51" pos:column="29"/></operator> <name pos:line="51" pos:column="30">errno<pos:position pos:line="51" pos:column="35"/></name></expr>;<pos:position pos:line="51" pos:column="36"/></expr_stmt>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">last_errno<pos:position pos:line="52" pos:column="31"/></name> <operator pos:line="52" pos:column="32">!=<pos:position pos:line="52" pos:column="34"/></operator> <name pos:line="52" pos:column="35">ENOTDIR<pos:position pos:line="52" pos:column="42"/></name> <operator pos:line="52" pos:column="43">||<pos:position pos:line="52" pos:column="45"/></operator>
		    <operator pos:line="53" pos:column="21">!<pos:position pos:line="53" pos:column="22"/></operator><call><name pos:line="53" pos:column="22">verify_refname_available_dir<pos:position pos:line="53" pos:column="50"/></name><argument_list pos:line="53" pos:column="50">(
				    <argument><expr><name pos:line="54" pos:column="37">refname<pos:position pos:line="54" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="46">extras<pos:position pos:line="54" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="54">skip<pos:position pos:line="54" pos:column="58"/></name></expr></argument>,
				    <argument><expr><call><name pos:line="55" pos:column="37">get_loose_refs<pos:position pos:line="55" pos:column="51"/></name><argument_list pos:line="55" pos:column="51">(<argument><expr><name pos:line="55" pos:column="52">refs<pos:position pos:line="55" pos:column="56"/></name></expr></argument>)<pos:position pos:line="55" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="55" pos:column="59">err<pos:position pos:line="55" pos:column="62"/></name></expr></argument>)<pos:position pos:line="55" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="64"/></condition><then pos:line="55" pos:column="64">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="25">strbuf_addf<pos:position pos:line="56" pos:column="36"/></name><argument_list pos:line="56" pos:column="36">(<argument><expr><name pos:line="56" pos:column="37">err<pos:position pos:line="56" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="42">"unable to resolve reference '%s': %s"<pos:position pos:line="56" pos:column="80"/></literal></expr></argument>,
				    <argument><expr><name pos:line="57" pos:column="37">refname<pos:position pos:line="57" pos:column="44"/></name></expr></argument>, <argument><expr><call><name pos:line="57" pos:column="46">strerror<pos:position pos:line="57" pos:column="54"/></name><argument_list pos:line="57" pos:column="54">(<argument><expr><name pos:line="57" pos:column="55">last_errno<pos:position pos:line="57" pos:column="65"/></name></expr></argument>)<pos:position pos:line="57" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="57" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="68"/></expr_stmt></block></then></if>

		<goto pos:line="59" pos:column="17">goto <name pos:line="59" pos:column="22">error_return<pos:position pos:line="59" pos:column="34"/></name>;<pos:position pos:line="59" pos:column="35"/></goto>
	}<pos:position pos:line="60" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="62" pos:column="9">/*
	 * If the ref did not exist and we are creating it, make sure
	 * there is no existing packed ref whose name begins with our
	 * refname, nor a packed ref whose name is a proper prefix of
	 * our refname.
	 */</comment>
	<if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><call><name pos:line="68" pos:column="13">is_null_oid<pos:position pos:line="68" pos:column="24"/></name><argument_list pos:line="68" pos:column="24">(<argument><expr><operator pos:line="68" pos:column="25">&amp;<pos:position pos:line="68" pos:column="30"/></operator><name><name pos:line="68" pos:column="26">lock<pos:position pos:line="68" pos:column="30"/></name><operator pos:line="68" pos:column="30">-&gt;<pos:position pos:line="68" pos:column="35"/></operator><name pos:line="68" pos:column="32">old_oid<pos:position pos:line="68" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="40"/></argument_list></call> <operator pos:line="68" pos:column="41">&amp;&amp;<pos:position pos:line="68" pos:column="51"/></operator>
	    <call><name pos:line="69" pos:column="13">verify_refname_available_dir<pos:position pos:line="69" pos:column="41"/></name><argument_list pos:line="69" pos:column="41">(<argument><expr><name pos:line="69" pos:column="42">refname<pos:position pos:line="69" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="51">extras<pos:position pos:line="69" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="59">skip<pos:position pos:line="69" pos:column="63"/></name></expr></argument>,
					 <argument><expr><call><name pos:line="70" pos:column="42">get_packed_refs<pos:position pos:line="70" pos:column="57"/></name><argument_list pos:line="70" pos:column="57">(<argument><expr><name pos:line="70" pos:column="58">refs<pos:position pos:line="70" pos:column="62"/></name></expr></argument>)<pos:position pos:line="70" pos:column="63"/></argument_list></call></expr></argument>,
					 <argument><expr><name pos:line="71" pos:column="42">err<pos:position pos:line="71" pos:column="45"/></name></expr></argument>)<pos:position pos:line="71" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="71" pos:column="47"/></condition><then pos:line="71" pos:column="47"> <block pos:line="71" pos:column="48">{
		<expr_stmt><expr><name pos:line="72" pos:column="17">last_errno<pos:position pos:line="72" pos:column="27"/></name> <operator pos:line="72" pos:column="28">=<pos:position pos:line="72" pos:column="29"/></operator> <name pos:line="72" pos:column="30">ENOTDIR<pos:position pos:line="72" pos:column="37"/></name></expr>;<pos:position pos:line="72" pos:column="38"/></expr_stmt>
		<goto pos:line="73" pos:column="17">goto <name pos:line="73" pos:column="22">error_return<pos:position pos:line="73" pos:column="34"/></name>;<pos:position pos:line="73" pos:column="35"/></goto>
	}<pos:position pos:line="74" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="76" pos:column="9">lock<pos:position pos:line="76" pos:column="13"/></name><operator pos:line="76" pos:column="13">-&gt;<pos:position pos:line="76" pos:column="18"/></operator><name pos:line="76" pos:column="15">lk<pos:position pos:line="76" pos:column="17"/></name></name> <operator pos:line="76" pos:column="18">=<pos:position pos:line="76" pos:column="19"/></operator> <call><name pos:line="76" pos:column="20">xcalloc<pos:position pos:line="76" pos:column="27"/></name><argument_list pos:line="76" pos:column="27">(<argument><expr><literal type="number" pos:line="76" pos:column="28">1<pos:position pos:line="76" pos:column="29"/></literal></expr></argument>, <argument><expr><sizeof pos:line="76" pos:column="31">sizeof<argument_list pos:line="76" pos:column="37">(<argument><expr pos:line="76" pos:column="38">struct <name pos:line="76" pos:column="45">lock_file<pos:position pos:line="76" pos:column="54"/></name></expr></argument>)<pos:position pos:line="76" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="76" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="57"/></expr_stmt>

	<expr_stmt><expr><name><name pos:line="78" pos:column="9">lock<pos:position pos:line="78" pos:column="13"/></name><operator pos:line="78" pos:column="13">-&gt;<pos:position pos:line="78" pos:column="18"/></operator><name pos:line="78" pos:column="15">ref_name<pos:position pos:line="78" pos:column="23"/></name></name> <operator pos:line="78" pos:column="24">=<pos:position pos:line="78" pos:column="25"/></operator> <call><name pos:line="78" pos:column="26">xstrdup<pos:position pos:line="78" pos:column="33"/></name><argument_list pos:line="78" pos:column="33">(<argument><expr><name pos:line="78" pos:column="34">refname<pos:position pos:line="78" pos:column="41"/></name></expr></argument>)<pos:position pos:line="78" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="43"/></expr_stmt>

 <label><name pos:line="80" pos:column="2">retry<pos:position pos:line="80" pos:column="7"/></name>:<pos:position pos:line="80" pos:column="8"/></label>
	<switch pos:line="81" pos:column="9">switch <condition pos:line="81" pos:column="16">(<expr><call><name pos:line="81" pos:column="17">safe_create_leading_directories_const<pos:position pos:line="81" pos:column="54"/></name><argument_list pos:line="81" pos:column="54">(<argument><expr><name><name pos:line="81" pos:column="55">ref_file<pos:position pos:line="81" pos:column="63"/></name><operator pos:line="81" pos:column="63">.<pos:position pos:line="81" pos:column="64"/></operator><name pos:line="81" pos:column="64">buf<pos:position pos:line="81" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="69"/></condition> <block pos:line="81" pos:column="70">{
	<case pos:line="82" pos:column="9">case <expr><name pos:line="82" pos:column="14">SCLD_OK<pos:position pos:line="82" pos:column="21"/></name></expr>:<pos:position pos:line="82" pos:column="22"/></case>
		<break pos:line="83" pos:column="17">break;<pos:position pos:line="83" pos:column="23"/></break> <comment type="block" pos:line="83" pos:column="24">/* success */</comment>
	<case pos:line="84" pos:column="9">case <expr><name pos:line="84" pos:column="14">SCLD_VANISHED<pos:position pos:line="84" pos:column="27"/></name></expr>:<pos:position pos:line="84" pos:column="28"/></case>
		<if pos:line="85" pos:column="17">if <condition pos:line="85" pos:column="20">(<expr><operator pos:line="85" pos:column="21">--<pos:position pos:line="85" pos:column="23"/></operator><name pos:line="85" pos:column="23">attempts_remaining<pos:position pos:line="85" pos:column="41"/></name> <operator pos:line="85" pos:column="42">&gt;<pos:position pos:line="85" pos:column="46"/></operator> <literal type="number" pos:line="85" pos:column="44">0<pos:position pos:line="85" pos:column="45"/></literal></expr>)<pos:position pos:line="85" pos:column="46"/></condition><then pos:line="85" pos:column="46">
			<block type="pseudo"><goto pos:line="86" pos:column="25">goto <name pos:line="86" pos:column="30">retry<pos:position pos:line="86" pos:column="35"/></name>;<pos:position pos:line="86" pos:column="36"/></goto></block></then></if>
		<comment type="block" pos:line="87" pos:column="17">/* fall through */</comment>
	<default pos:line="88" pos:column="9">default:<pos:position pos:line="88" pos:column="17"/></default>
		<expr_stmt><expr><name pos:line="89" pos:column="17">last_errno<pos:position pos:line="89" pos:column="27"/></name> <operator pos:line="89" pos:column="28">=<pos:position pos:line="89" pos:column="29"/></operator> <name pos:line="89" pos:column="30">errno<pos:position pos:line="89" pos:column="35"/></name></expr>;<pos:position pos:line="89" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="90" pos:column="17">strbuf_addf<pos:position pos:line="90" pos:column="28"/></name><argument_list pos:line="90" pos:column="28">(<argument><expr><name pos:line="90" pos:column="29">err<pos:position pos:line="90" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="34">"unable to create directory for '%s'"<pos:position pos:line="90" pos:column="71"/></literal></expr></argument>,
			    <argument><expr><name><name pos:line="91" pos:column="29">ref_file<pos:position pos:line="91" pos:column="37"/></name><operator pos:line="91" pos:column="37">.<pos:position pos:line="91" pos:column="38"/></operator><name pos:line="91" pos:column="38">buf<pos:position pos:line="91" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="91" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="43"/></expr_stmt>
		<goto pos:line="92" pos:column="17">goto <name pos:line="92" pos:column="22">error_return<pos:position pos:line="92" pos:column="34"/></name>;<pos:position pos:line="92" pos:column="35"/></goto>
	}<pos:position pos:line="93" pos:column="10"/></block></switch>

	<if pos:line="95" pos:column="9">if <condition pos:line="95" pos:column="12">(<expr><call><name pos:line="95" pos:column="13">hold_lock_file_for_update<pos:position pos:line="95" pos:column="38"/></name><argument_list pos:line="95" pos:column="38">(<argument><expr><name><name pos:line="95" pos:column="39">lock<pos:position pos:line="95" pos:column="43"/></name><operator pos:line="95" pos:column="43">-&gt;<pos:position pos:line="95" pos:column="48"/></operator><name pos:line="95" pos:column="45">lk<pos:position pos:line="95" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="95" pos:column="49">ref_file<pos:position pos:line="95" pos:column="57"/></name><operator pos:line="95" pos:column="57">.<pos:position pos:line="95" pos:column="58"/></operator><name pos:line="95" pos:column="58">buf<pos:position pos:line="95" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="63">lflags<pos:position pos:line="95" pos:column="69"/></name></expr></argument>)<pos:position pos:line="95" pos:column="70"/></argument_list></call> <operator pos:line="95" pos:column="71">&lt;<pos:position pos:line="95" pos:column="75"/></operator> <literal type="number" pos:line="95" pos:column="73">0<pos:position pos:line="95" pos:column="74"/></literal></expr>)<pos:position pos:line="95" pos:column="75"/></condition><then pos:line="95" pos:column="75"> <block pos:line="95" pos:column="76">{
		<expr_stmt><expr><name pos:line="96" pos:column="17">last_errno<pos:position pos:line="96" pos:column="27"/></name> <operator pos:line="96" pos:column="28">=<pos:position pos:line="96" pos:column="29"/></operator> <name pos:line="96" pos:column="30">errno<pos:position pos:line="96" pos:column="35"/></name></expr>;<pos:position pos:line="96" pos:column="36"/></expr_stmt>
		<if pos:line="97" pos:column="17">if <condition pos:line="97" pos:column="20">(<expr><name pos:line="97" pos:column="21">errno<pos:position pos:line="97" pos:column="26"/></name> <operator pos:line="97" pos:column="27">==<pos:position pos:line="97" pos:column="29"/></operator> <name pos:line="97" pos:column="30">ENOENT<pos:position pos:line="97" pos:column="36"/></name> <operator pos:line="97" pos:column="37">&amp;&amp;<pos:position pos:line="97" pos:column="47"/></operator> <operator pos:line="97" pos:column="40">--<pos:position pos:line="97" pos:column="42"/></operator><name pos:line="97" pos:column="42">attempts_remaining<pos:position pos:line="97" pos:column="60"/></name> <operator pos:line="97" pos:column="61">&gt;<pos:position pos:line="97" pos:column="65"/></operator> <literal type="number" pos:line="97" pos:column="63">0<pos:position pos:line="97" pos:column="64"/></literal></expr>)<pos:position pos:line="97" pos:column="65"/></condition><then pos:line="97" pos:column="65">
			<comment type="block" pos:line="98" pos:column="25">/*
			 * Maybe somebody just deleted one of the
			 * directories leading to ref_file.  Try
			 * again:
			 */</comment>
			<block type="pseudo"><goto pos:line="103" pos:column="25">goto <name pos:line="103" pos:column="30">retry<pos:position pos:line="103" pos:column="35"/></name>;<pos:position pos:line="103" pos:column="36"/></goto></block></then>
		<else pos:line="104" pos:column="17">else <block pos:line="104" pos:column="22">{
			<expr_stmt><expr><call><name pos:line="105" pos:column="25">unable_to_lock_message<pos:position pos:line="105" pos:column="47"/></name><argument_list pos:line="105" pos:column="47">(<argument><expr><name><name pos:line="105" pos:column="48">ref_file<pos:position pos:line="105" pos:column="56"/></name><operator pos:line="105" pos:column="56">.<pos:position pos:line="105" pos:column="57"/></operator><name pos:line="105" pos:column="57">buf<pos:position pos:line="105" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="62">errno<pos:position pos:line="105" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="69">err<pos:position pos:line="105" pos:column="72"/></name></expr></argument>)<pos:position pos:line="105" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="74"/></expr_stmt>
			<goto pos:line="106" pos:column="25">goto <name pos:line="106" pos:column="30">error_return<pos:position pos:line="106" pos:column="42"/></name>;<pos:position pos:line="106" pos:column="43"/></goto>
		}<pos:position pos:line="107" pos:column="18"/></block></else></if>
	}<pos:position pos:line="108" pos:column="10"/></block></then></if>
	<if pos:line="109" pos:column="9">if <condition pos:line="109" pos:column="12">(<expr><call><name pos:line="109" pos:column="13">verify_lock<pos:position pos:line="109" pos:column="24"/></name><argument_list pos:line="109" pos:column="24">(<argument><expr><name pos:line="109" pos:column="25">lock<pos:position pos:line="109" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="31">old_sha1<pos:position pos:line="109" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="41">mustexist<pos:position pos:line="109" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="52">err<pos:position pos:line="109" pos:column="55"/></name></expr></argument>)<pos:position pos:line="109" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="109" pos:column="57"/></condition><then pos:line="109" pos:column="57"> <block pos:line="109" pos:column="58">{
		<expr_stmt><expr><name pos:line="110" pos:column="17">last_errno<pos:position pos:line="110" pos:column="27"/></name> <operator pos:line="110" pos:column="28">=<pos:position pos:line="110" pos:column="29"/></operator> <name pos:line="110" pos:column="30">errno<pos:position pos:line="110" pos:column="35"/></name></expr>;<pos:position pos:line="110" pos:column="36"/></expr_stmt>
		<goto pos:line="111" pos:column="17">goto <name pos:line="111" pos:column="22">error_return<pos:position pos:line="111" pos:column="34"/></name>;<pos:position pos:line="111" pos:column="35"/></goto>
	}<pos:position pos:line="112" pos:column="10"/></block></then></if>
	<goto pos:line="113" pos:column="9">goto <name pos:line="113" pos:column="14">out<pos:position pos:line="113" pos:column="17"/></name>;<pos:position pos:line="113" pos:column="18"/></goto>

 <label><name pos:line="115" pos:column="2">error_return<pos:position pos:line="115" pos:column="14"/></name>:<pos:position pos:line="115" pos:column="15"/></label>
	<expr_stmt><expr><call><name pos:line="116" pos:column="9">unlock_ref<pos:position pos:line="116" pos:column="19"/></name><argument_list pos:line="116" pos:column="19">(<argument><expr><name pos:line="116" pos:column="20">lock<pos:position pos:line="116" pos:column="24"/></name></expr></argument>)<pos:position pos:line="116" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="26"/></expr_stmt>
	<expr_stmt><expr><name pos:line="117" pos:column="9">lock<pos:position pos:line="117" pos:column="13"/></name> <operator pos:line="117" pos:column="14">=<pos:position pos:line="117" pos:column="15"/></operator> <name pos:line="117" pos:column="16">NULL<pos:position pos:line="117" pos:column="20"/></name></expr>;<pos:position pos:line="117" pos:column="21"/></expr_stmt>

 <label><name pos:line="119" pos:column="2">out<pos:position pos:line="119" pos:column="5"/></name>:<pos:position pos:line="119" pos:column="6"/></label>
	<expr_stmt><expr><call><name pos:line="120" pos:column="9">strbuf_release<pos:position pos:line="120" pos:column="23"/></name><argument_list pos:line="120" pos:column="23">(<argument><expr><operator pos:line="120" pos:column="24">&amp;<pos:position pos:line="120" pos:column="29"/></operator><name pos:line="120" pos:column="25">ref_file<pos:position pos:line="120" pos:column="33"/></name></expr></argument>)<pos:position pos:line="120" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name pos:line="121" pos:column="9">errno<pos:position pos:line="121" pos:column="14"/></name> <operator pos:line="121" pos:column="15">=<pos:position pos:line="121" pos:column="16"/></operator> <name pos:line="121" pos:column="17">last_errno<pos:position pos:line="121" pos:column="27"/></name></expr>;<pos:position pos:line="121" pos:column="28"/></expr_stmt>
	<return pos:line="122" pos:column="9">return <expr><name pos:line="122" pos:column="16">lock<pos:position pos:line="122" pos:column="20"/></name></expr>;<pos:position pos:line="122" pos:column="21"/></return>
}<pos:position pos:line="123" pos:column="2"/></block></function></unit>
