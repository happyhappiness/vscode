<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2060_git-2.13.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">parse_alt_odb_entry<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">string<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
				       <parameter><decl><type><name pos:line="2" pos:column="40">int<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">sep<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>,
				       <parameter><decl><type><name><name pos:line="3" pos:column="40">struct<pos:position pos:line="3" pos:column="46"/></name> <name pos:line="3" pos:column="47">strbuf<pos:position pos:line="3" pos:column="53"/></name></name> <modifier pos:line="3" pos:column="54">*<pos:position pos:line="3" pos:column="55"/></modifier></type><name pos:line="3" pos:column="55">out<pos:position pos:line="3" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="59"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">end<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="7" pos:column="9">strbuf_reset<pos:position pos:line="7" pos:column="21"/></name><argument_list pos:line="7" pos:column="21">(<argument><expr><name pos:line="7" pos:column="22">out<pos:position pos:line="7" pos:column="25"/></name></expr></argument>)<pos:position pos:line="7" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="27"/></expr_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">*<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">string<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">==<pos:position pos:line="9" pos:column="23"/></operator> <literal type="char" pos:line="9" pos:column="24">'#'<pos:position pos:line="9" pos:column="27"/></literal></expr>)<pos:position pos:line="9" pos:column="28"/></condition><then pos:line="9" pos:column="28"> <block pos:line="9" pos:column="29">{
		<comment type="block" pos:line="10" pos:column="17">/* comment; consume up to next separator */</comment>
		<expr_stmt><expr><name pos:line="11" pos:column="17">end<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">=<pos:position pos:line="11" pos:column="22"/></operator> <call><name pos:line="11" pos:column="23">strchrnul<pos:position pos:line="11" pos:column="32"/></name><argument_list pos:line="11" pos:column="32">(<argument><expr><name pos:line="11" pos:column="33">string<pos:position pos:line="11" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="41">sep<pos:position pos:line="11" pos:column="44"/></name></expr></argument>)<pos:position pos:line="11" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="12" pos:column="10"/></block></then> <elseif pos:line="12" pos:column="11">else <if pos:line="12" pos:column="16">if <condition pos:line="12" pos:column="19">(<expr><operator pos:line="12" pos:column="20">*<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="21">string<pos:position pos:line="12" pos:column="27"/></name> <operator pos:line="12" pos:column="28">==<pos:position pos:line="12" pos:column="30"/></operator> <literal type="char" pos:line="12" pos:column="31">'"'<pos:position pos:line="12" pos:column="34"/></literal> <operator pos:line="12" pos:column="35">&amp;&amp;<pos:position pos:line="12" pos:column="45"/></operator> <operator pos:line="12" pos:column="38">!<pos:position pos:line="12" pos:column="39"/></operator><call><name pos:line="12" pos:column="39">unquote_c_style<pos:position pos:line="12" pos:column="54"/></name><argument_list pos:line="12" pos:column="54">(<argument><expr><name pos:line="12" pos:column="55">out<pos:position pos:line="12" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="60">string<pos:position pos:line="12" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="68">&amp;<pos:position pos:line="12" pos:column="73"/></operator><name pos:line="12" pos:column="69">end<pos:position pos:line="12" pos:column="72"/></name></expr></argument>)<pos:position pos:line="12" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="74"/></condition><then pos:line="12" pos:column="74"> <block pos:line="12" pos:column="75">{
		<comment type="block" pos:line="13" pos:column="17">/*
		 * quoted path; unquote_c_style has copied the
		 * data for us and set "end". Broken quoting (e.g.,
		 * an entry that doesn't end with a quote) falls
		 * back to the unquoted case below.
		 */</comment>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if></elseif> <else pos:line="19" pos:column="11">else <block pos:line="19" pos:column="16">{
		<comment type="block" pos:line="20" pos:column="17">/* normal, unquoted path */</comment>
		<expr_stmt><expr><name pos:line="21" pos:column="17">end<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">=<pos:position pos:line="21" pos:column="22"/></operator> <call><name pos:line="21" pos:column="23">strchrnul<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">(<argument><expr><name pos:line="21" pos:column="33">string<pos:position pos:line="21" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="41">sep<pos:position pos:line="21" pos:column="44"/></name></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">strbuf_add<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><name pos:line="22" pos:column="28">out<pos:position pos:line="22" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="33">string<pos:position pos:line="22" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="41">end<pos:position pos:line="22" pos:column="44"/></name> <operator pos:line="22" pos:column="45">-<pos:position pos:line="22" pos:column="46"/></operator> <name pos:line="22" pos:column="47">string<pos:position pos:line="22" pos:column="53"/></name></expr></argument>)<pos:position pos:line="22" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="55"/></expr_stmt>
	}<pos:position pos:line="23" pos:column="10"/></block></else></if>

	<if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">*<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">end<pos:position pos:line="25" pos:column="17"/></name></expr>)<pos:position pos:line="25" pos:column="18"/></condition><then pos:line="25" pos:column="18">
		<block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="17">end<pos:position pos:line="26" pos:column="20"/></name><operator pos:line="26" pos:column="20">++<pos:position pos:line="26" pos:column="22"/></operator></expr>;<pos:position pos:line="26" pos:column="23"/></expr_stmt></block></then></if>
	<return pos:line="27" pos:column="9">return <expr><name pos:line="27" pos:column="16">end<pos:position pos:line="27" pos:column="19"/></name></expr>;<pos:position pos:line="27" pos:column="20"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
