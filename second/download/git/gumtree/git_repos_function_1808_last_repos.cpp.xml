<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1808_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_data<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name><name pos:line="1" pos:column="23">struct<pos:position pos:line="1" pos:column="29"/></name> <name pos:line="1" pos:column="30">strbuf<pos:position pos:line="1" pos:column="36"/></name></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">sb<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">uintmax_t<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">limit<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">uintmax_t<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">len_res<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">const<pos:position pos:line="3" pos:column="14"/></specifier> <name pos:line="3" pos:column="15">char<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">data<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="4" pos:column="9">strbuf_reset<pos:position pos:line="4" pos:column="21"/></name><argument_list pos:line="4" pos:column="21">(<argument><expr><name pos:line="4" pos:column="22">sb<pos:position pos:line="4" pos:column="24"/></name></expr></argument>)<pos:position pos:line="4" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="26"/></expr_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><call><name pos:line="6" pos:column="14">skip_prefix<pos:position pos:line="6" pos:column="25"/></name><argument_list pos:line="6" pos:column="25">(<argument><expr><name><name pos:line="6" pos:column="26">command_buf<pos:position pos:line="6" pos:column="37"/></name><operator pos:line="6" pos:column="37">.<pos:position pos:line="6" pos:column="38"/></operator><name pos:line="6" pos:column="38">buf<pos:position pos:line="6" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="43">"data "<pos:position pos:line="6" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="6" pos:column="52">&amp;<pos:position pos:line="6" pos:column="57"/></operator><name pos:line="6" pos:column="53">data<pos:position pos:line="6" pos:column="57"/></name></expr></argument>)<pos:position pos:line="6" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="59"/></condition><then pos:line="6" pos:column="59">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="17">die<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><literal type="string" pos:line="7" pos:column="21">"Expected 'data n' command, found: %s"<pos:position pos:line="7" pos:column="59"/></literal></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="61">command_buf<pos:position pos:line="7" pos:column="72"/></name><operator pos:line="7" pos:column="72">.<pos:position pos:line="7" pos:column="73"/></operator><name pos:line="7" pos:column="73">buf<pos:position pos:line="7" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="78"/></expr_stmt></block></then></if>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">skip_prefix<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><name pos:line="9" pos:column="25">data<pos:position pos:line="9" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="31">"&lt;&lt;"<pos:position pos:line="9" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="9" pos:column="37">&amp;<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="38">data<pos:position pos:line="9" pos:column="42"/></name></expr></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="44"/></condition><then pos:line="9" pos:column="44"> <block pos:line="9" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">char<pos:position pos:line="10" pos:column="21"/></name> <modifier pos:line="10" pos:column="22">*<pos:position pos:line="10" pos:column="23"/></modifier></type><name pos:line="10" pos:column="23">term<pos:position pos:line="10" pos:column="27"/></name> <init pos:line="10" pos:column="28">= <expr><call><name pos:line="10" pos:column="30">xstrdup<pos:position pos:line="10" pos:column="37"/></name><argument_list pos:line="10" pos:column="37">(<argument><expr><name pos:line="10" pos:column="38">data<pos:position pos:line="10" pos:column="42"/></name></expr></argument>)<pos:position pos:line="10" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="44"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">size_t<pos:position pos:line="11" pos:column="23"/></name></type> <name pos:line="11" pos:column="24">term_len<pos:position pos:line="11" pos:column="32"/></name> <init pos:line="11" pos:column="33">= <expr><name><name pos:line="11" pos:column="35">command_buf<pos:position pos:line="11" pos:column="46"/></name><operator pos:line="11" pos:column="46">.<pos:position pos:line="11" pos:column="47"/></operator><name pos:line="11" pos:column="47">len<pos:position pos:line="11" pos:column="50"/></name></name> <operator pos:line="11" pos:column="51">-<pos:position pos:line="11" pos:column="52"/></operator> <operator pos:line="11" pos:column="53">(<pos:position pos:line="11" pos:column="54"/></operator><name pos:line="11" pos:column="54">data<pos:position pos:line="11" pos:column="58"/></name> <operator pos:line="11" pos:column="59">-<pos:position pos:line="11" pos:column="60"/></operator> <name><name pos:line="11" pos:column="61">command_buf<pos:position pos:line="11" pos:column="72"/></name><operator pos:line="11" pos:column="72">.<pos:position pos:line="11" pos:column="73"/></operator><name pos:line="11" pos:column="73">buf<pos:position pos:line="11" pos:column="76"/></name></name><operator pos:line="11" pos:column="76">)<pos:position pos:line="11" pos:column="77"/></operator></expr></init></decl>;<pos:position pos:line="11" pos:column="78"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="13" pos:column="17">strbuf_detach<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><operator pos:line="13" pos:column="31">&amp;<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="32">command_buf<pos:position pos:line="13" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="45">NULL<pos:position pos:line="13" pos:column="49"/></name></expr></argument>)<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="51"/></expr_stmt>
		<for pos:line="14" pos:column="17">for <control pos:line="14" pos:column="21">(<init pos:line="14" pos:column="22">;<pos:position pos:line="14" pos:column="23"/></init><condition pos:line="14" pos:column="23">;<pos:position pos:line="14" pos:column="24"/></condition><incr/>)<pos:position pos:line="14" pos:column="25"/></control> <block pos:line="14" pos:column="26">{
			<if pos:line="15" pos:column="25">if <condition pos:line="15" pos:column="28">(<expr><call><name pos:line="15" pos:column="29">strbuf_getline_lf<pos:position pos:line="15" pos:column="46"/></name><argument_list pos:line="15" pos:column="46">(<argument><expr><operator pos:line="15" pos:column="47">&amp;<pos:position pos:line="15" pos:column="52"/></operator><name pos:line="15" pos:column="48">command_buf<pos:position pos:line="15" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="61">stdin<pos:position pos:line="15" pos:column="66"/></name></expr></argument>)<pos:position pos:line="15" pos:column="67"/></argument_list></call> <operator pos:line="15" pos:column="68">==<pos:position pos:line="15" pos:column="70"/></operator> <name pos:line="15" pos:column="71">EOF<pos:position pos:line="15" pos:column="74"/></name></expr>)<pos:position pos:line="15" pos:column="75"/></condition><then pos:line="15" pos:column="75">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="33">die<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">(<argument><expr><literal type="string" pos:line="16" pos:column="37">"EOF in data (terminator '%s' not found)"<pos:position pos:line="16" pos:column="78"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="80">term<pos:position pos:line="16" pos:column="84"/></name></expr></argument>)<pos:position pos:line="16" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="86"/></expr_stmt></block></then></if>
			<if pos:line="17" pos:column="25">if <condition pos:line="17" pos:column="28">(<expr><name pos:line="17" pos:column="29">term_len<pos:position pos:line="17" pos:column="37"/></name> <operator pos:line="17" pos:column="38">==<pos:position pos:line="17" pos:column="40"/></operator> <name><name pos:line="17" pos:column="41">command_buf<pos:position pos:line="17" pos:column="52"/></name><operator pos:line="17" pos:column="52">.<pos:position pos:line="17" pos:column="53"/></operator><name pos:line="17" pos:column="53">len<pos:position pos:line="17" pos:column="56"/></name></name>
				<operator pos:line="18" pos:column="33">&amp;&amp;<pos:position pos:line="18" pos:column="43"/></operator> <operator pos:line="18" pos:column="36">!<pos:position pos:line="18" pos:column="37"/></operator><call><name pos:line="18" pos:column="37">strcmp<pos:position pos:line="18" pos:column="43"/></name><argument_list pos:line="18" pos:column="43">(<argument><expr><name pos:line="18" pos:column="44">term<pos:position pos:line="18" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="50">command_buf<pos:position pos:line="18" pos:column="61"/></name><operator pos:line="18" pos:column="61">.<pos:position pos:line="18" pos:column="62"/></operator><name pos:line="18" pos:column="62">buf<pos:position pos:line="18" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="67"/></condition><then pos:line="18" pos:column="67">
				<block type="pseudo"><break pos:line="19" pos:column="33">break;<pos:position pos:line="19" pos:column="39"/></break></block></then></if>
			<expr_stmt><expr><call><name pos:line="20" pos:column="25">strbuf_addbuf<pos:position pos:line="20" pos:column="38"/></name><argument_list pos:line="20" pos:column="38">(<argument><expr><name pos:line="20" pos:column="39">sb<pos:position pos:line="20" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="43">&amp;<pos:position pos:line="20" pos:column="48"/></operator><name pos:line="20" pos:column="44">command_buf<pos:position pos:line="20" pos:column="55"/></name></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="57"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">strbuf_addch<pos:position pos:line="21" pos:column="37"/></name><argument_list pos:line="21" pos:column="37">(<argument><expr><name pos:line="21" pos:column="38">sb<pos:position pos:line="21" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="21" pos:column="42">'\n'<pos:position pos:line="21" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="48"/></expr_stmt>
		}<pos:position pos:line="22" pos:column="18"/></block></for>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">free<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">(<argument><expr><name pos:line="23" pos:column="22">term<pos:position pos:line="23" pos:column="26"/></name></expr></argument>)<pos:position pos:line="23" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="28"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then>
	<else pos:line="25" pos:column="9">else <block pos:line="25" pos:column="14">{
		<decl_stmt><decl><type><name pos:line="26" pos:column="17">uintmax_t<pos:position pos:line="26" pos:column="26"/></name></type> <name pos:line="26" pos:column="27">len<pos:position pos:line="26" pos:column="30"/></name> <init pos:line="26" pos:column="31">= <expr><call><name pos:line="26" pos:column="33">strtoumax<pos:position pos:line="26" pos:column="42"/></name><argument_list pos:line="26" pos:column="42">(<argument><expr><name pos:line="26" pos:column="43">data<pos:position pos:line="26" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="49">NULL<pos:position pos:line="26" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="55">10<pos:position pos:line="26" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="59"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="27" pos:column="17">size_t<pos:position pos:line="27" pos:column="23"/></name></type> <name pos:line="27" pos:column="24">n<pos:position pos:line="27" pos:column="25"/></name> <init pos:line="27" pos:column="26">= <expr><literal type="number" pos:line="27" pos:column="28">0<pos:position pos:line="27" pos:column="29"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="27" pos:column="31">length<pos:position pos:line="27" pos:column="37"/></name> <init pos:line="27" pos:column="38">= <expr><operator pos:line="27" pos:column="40">(<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="41">size_t<pos:position pos:line="27" pos:column="47"/></name><operator pos:line="27" pos:column="47">)<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="48">len<pos:position pos:line="27" pos:column="51"/></name></expr></init></decl>;<pos:position pos:line="27" pos:column="52"/></decl_stmt>

		<if pos:line="29" pos:column="17">if <condition pos:line="29" pos:column="20">(<expr><name pos:line="29" pos:column="21">limit<pos:position pos:line="29" pos:column="26"/></name> <operator pos:line="29" pos:column="27">&amp;&amp;<pos:position pos:line="29" pos:column="37"/></operator> <name pos:line="29" pos:column="30">limit<pos:position pos:line="29" pos:column="35"/></name> <operator pos:line="29" pos:column="36">&lt;<pos:position pos:line="29" pos:column="40"/></operator> <name pos:line="29" pos:column="38">len<pos:position pos:line="29" pos:column="41"/></name></expr>)<pos:position pos:line="29" pos:column="42"/></condition><then pos:line="29" pos:column="42"> <block pos:line="29" pos:column="43">{
			<expr_stmt><expr><operator pos:line="30" pos:column="25">*<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="26">len_res<pos:position pos:line="30" pos:column="33"/></name> <operator pos:line="30" pos:column="34">=<pos:position pos:line="30" pos:column="35"/></operator> <name pos:line="30" pos:column="36">len<pos:position pos:line="30" pos:column="39"/></name></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt>
			<return pos:line="31" pos:column="25">return <expr><literal type="number" pos:line="31" pos:column="32">0<pos:position pos:line="31" pos:column="33"/></literal></expr>;<pos:position pos:line="31" pos:column="34"/></return>
		}<pos:position pos:line="32" pos:column="18"/></block></then></if>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name pos:line="33" pos:column="21">length<pos:position pos:line="33" pos:column="27"/></name> <operator pos:line="33" pos:column="28">&lt;<pos:position pos:line="33" pos:column="32"/></operator> <name pos:line="33" pos:column="30">len<pos:position pos:line="33" pos:column="33"/></name></expr>)<pos:position pos:line="33" pos:column="34"/></condition><then pos:line="33" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="25">die<pos:position pos:line="34" pos:column="28"/></name><argument_list pos:line="34" pos:column="28">(<argument><expr><literal type="string" pos:line="34" pos:column="29">"data is too large to use in this context"<pos:position pos:line="34" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="73"/></expr_stmt></block></then></if>

		<while pos:line="36" pos:column="17">while <condition pos:line="36" pos:column="23">(<expr><name pos:line="36" pos:column="24">n<pos:position pos:line="36" pos:column="25"/></name> <operator pos:line="36" pos:column="26">&lt;<pos:position pos:line="36" pos:column="30"/></operator> <name pos:line="36" pos:column="28">length<pos:position pos:line="36" pos:column="34"/></name></expr>)<pos:position pos:line="36" pos:column="35"/></condition> <block pos:line="36" pos:column="36">{
			<decl_stmt><decl><type><name pos:line="37" pos:column="25">size_t<pos:position pos:line="37" pos:column="31"/></name></type> <name pos:line="37" pos:column="32">s<pos:position pos:line="37" pos:column="33"/></name> <init pos:line="37" pos:column="34">= <expr><call><name pos:line="37" pos:column="36">strbuf_fread<pos:position pos:line="37" pos:column="48"/></name><argument_list pos:line="37" pos:column="48">(<argument><expr><name pos:line="37" pos:column="49">sb<pos:position pos:line="37" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="53">length<pos:position pos:line="37" pos:column="59"/></name> <operator pos:line="37" pos:column="60">-<pos:position pos:line="37" pos:column="61"/></operator> <name pos:line="37" pos:column="62">n<pos:position pos:line="37" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="65">stdin<pos:position pos:line="37" pos:column="70"/></name></expr></argument>)<pos:position pos:line="37" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="72"/></decl_stmt>
			<if pos:line="38" pos:column="25">if <condition pos:line="38" pos:column="28">(<expr><operator pos:line="38" pos:column="29">!<pos:position pos:line="38" pos:column="30"/></operator><name pos:line="38" pos:column="30">s<pos:position pos:line="38" pos:column="31"/></name> <operator pos:line="38" pos:column="32">&amp;&amp;<pos:position pos:line="38" pos:column="42"/></operator> <call><name pos:line="38" pos:column="35">feof<pos:position pos:line="38" pos:column="39"/></name><argument_list pos:line="38" pos:column="39">(<argument><expr><name pos:line="38" pos:column="40">stdin<pos:position pos:line="38" pos:column="45"/></name></expr></argument>)<pos:position pos:line="38" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="47"/></condition><then pos:line="38" pos:column="47">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="33">die<pos:position pos:line="39" pos:column="36"/></name><argument_list pos:line="39" pos:column="36">(<argument><expr><literal type="string" pos:line="39" pos:column="37">"EOF in data (%lu bytes remaining)"<pos:position pos:line="39" pos:column="72"/></literal></expr></argument>,
					<argument><expr><call pos:line="40" pos:column="41">(<name pos:line="40" pos:column="42">unsigned<pos:position pos:line="40" pos:column="50"/></name> <name pos:line="40" pos:column="51">long<pos:position pos:line="40" pos:column="55"/></name>)<argument_list pos:line="40" pos:column="56">(<argument><expr><name pos:line="40" pos:column="57">length<pos:position pos:line="40" pos:column="63"/></name> <operator pos:line="40" pos:column="64">-<pos:position pos:line="40" pos:column="65"/></operator> <name pos:line="40" pos:column="66">n<pos:position pos:line="40" pos:column="67"/></name></expr></argument>)<pos:position pos:line="40" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="70"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="41" pos:column="25">n<pos:position pos:line="41" pos:column="26"/></name> <operator pos:line="41" pos:column="27">+=<pos:position pos:line="41" pos:column="29"/></operator> <name pos:line="41" pos:column="30">s<pos:position pos:line="41" pos:column="31"/></name></expr>;<pos:position pos:line="41" pos:column="32"/></expr_stmt>
		}<pos:position pos:line="42" pos:column="18"/></block></while>
	}<pos:position pos:line="43" pos:column="10"/></block></else></if>

	<expr_stmt><expr><call><name pos:line="45" pos:column="9">skip_optional_lf<pos:position pos:line="45" pos:column="25"/></name><argument_list pos:line="45" pos:column="25">()<pos:position pos:line="45" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="28"/></expr_stmt>
	<return pos:line="46" pos:column="9">return <expr><literal type="number" pos:line="46" pos:column="16">1<pos:position pos:line="46" pos:column="17"/></literal></expr>;<pos:position pos:line="46" pos:column="18"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
