<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3230_git-2.5.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">process_connect_service<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name><name pos:line="1" pos:column="36">struct<pos:position pos:line="1" pos:column="42"/></name> <name pos:line="1" pos:column="43">transport<pos:position pos:line="1" pos:column="52"/></name></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">transport<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>,
				   <parameter><decl><type><specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier> <name pos:line="2" pos:column="42">char<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">name<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="54">const<pos:position pos:line="2" pos:column="59"/></specifier> <name pos:line="2" pos:column="60">char<pos:position pos:line="2" pos:column="64"/></name> <modifier pos:line="2" pos:column="65">*<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="66">exec<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">helper_data<pos:position pos:line="4" pos:column="27"/></name></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">data<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><name><name pos:line="4" pos:column="36">transport<pos:position pos:line="4" pos:column="45"/></name><operator pos:line="4" pos:column="45">-&gt;<pos:position pos:line="4" pos:column="50"/></operator><name pos:line="4" pos:column="47">data<pos:position pos:line="4" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">strbuf<pos:position pos:line="5" pos:column="22"/></name></name></type> <name pos:line="5" pos:column="23">cmdbuf<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><name pos:line="5" pos:column="32">STRBUF_INIT<pos:position pos:line="5" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">child_process<pos:position pos:line="6" pos:column="29"/></name></name> <modifier pos:line="6" pos:column="30">*<pos:position pos:line="6" pos:column="31"/></modifier></type><name pos:line="6" pos:column="31">helper<pos:position pos:line="6" pos:column="37"/></name></decl>;<pos:position pos:line="6" pos:column="38"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">r<pos:position pos:line="7" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="16">duped<pos:position pos:line="7" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="23">ret<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><literal type="number" pos:line="7" pos:column="29">0<pos:position pos:line="7" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">FILE<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">input<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>

	<expr_stmt><expr><name pos:line="10" pos:column="9">helper<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <call><name pos:line="10" pos:column="18">get_helper<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><name pos:line="10" pos:column="29">transport<pos:position pos:line="10" pos:column="38"/></name></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="40"/></expr_stmt>

	<comment type="block" pos:line="12" pos:column="9">/*
	 * Yes, dup the pipe another time, as we need unbuffered version
	 * of input pipe as FILE*. fclose() closes the underlying fd and
	 * stream buffering only can be changed before first I/O operation
	 * on it.
	 */</comment>
	<expr_stmt><expr><name pos:line="18" pos:column="9">duped<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <call><name pos:line="18" pos:column="17">dup<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><name><name pos:line="18" pos:column="21">helper<pos:position pos:line="18" pos:column="27"/></name><operator pos:line="18" pos:column="27">-&gt;<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="29">out<pos:position pos:line="18" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt>
	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">duped<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">&lt;<pos:position pos:line="19" pos:column="23"/></operator> <literal type="number" pos:line="19" pos:column="21">0<pos:position pos:line="19" pos:column="22"/></literal></expr>)<pos:position pos:line="19" pos:column="23"/></condition><then pos:line="19" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="17">die_errno<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">(<argument><expr><literal type="string" pos:line="20" pos:column="27">"Can't dup helper output fd"<pos:position pos:line="20" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="57"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="21" pos:column="9">input<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <call><name pos:line="21" pos:column="17">xfdopen<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">duped<pos:position pos:line="21" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="32">"r"<pos:position pos:line="21" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">setvbuf<pos:position pos:line="22" pos:column="16"/></name><argument_list pos:line="22" pos:column="16">(<argument><expr><name pos:line="22" pos:column="17">input<pos:position pos:line="22" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="24">NULL<pos:position pos:line="22" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="30">_IONBF<pos:position pos:line="22" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="38">0<pos:position pos:line="22" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="41"/></expr_stmt>

	<comment type="block" pos:line="24" pos:column="9">/*
	 * Handle --upload-pack and friends. This is fire and forget...
	 * just warn if it fails.
	 */</comment>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><call><name pos:line="28" pos:column="13">strcmp<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><name pos:line="28" pos:column="20">name<pos:position pos:line="28" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="26">exec<pos:position pos:line="28" pos:column="30"/></name></expr></argument>)<pos:position pos:line="28" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="32"/></condition><then pos:line="28" pos:column="32"> <block pos:line="28" pos:column="33">{
		<expr_stmt><expr><name pos:line="29" pos:column="17">r<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <call><name pos:line="29" pos:column="21">set_helper_option<pos:position pos:line="29" pos:column="38"/></name><argument_list pos:line="29" pos:column="38">(<argument><expr><name pos:line="29" pos:column="39">transport<pos:position pos:line="29" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="50">"servpath"<pos:position pos:line="29" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="62">exec<pos:position pos:line="29" pos:column="66"/></name></expr></argument>)<pos:position pos:line="29" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="68"/></expr_stmt>
		<if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><name pos:line="30" pos:column="21">r<pos:position pos:line="30" pos:column="22"/></name> <operator pos:line="30" pos:column="23">&gt;<pos:position pos:line="30" pos:column="27"/></operator> <literal type="number" pos:line="30" pos:column="25">0<pos:position pos:line="30" pos:column="26"/></literal></expr>)<pos:position pos:line="30" pos:column="27"/></condition><then pos:line="30" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="25">warning<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">(<argument><expr><literal type="string" pos:line="31" pos:column="33">"Setting remote service path not supported by protocol."<pos:position pos:line="31" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="91"/></expr_stmt></block></then>
		<elseif pos:line="32" pos:column="17">else <if pos:line="32" pos:column="22">if <condition pos:line="32" pos:column="25">(<expr><name pos:line="32" pos:column="26">r<pos:position pos:line="32" pos:column="27"/></name> <operator pos:line="32" pos:column="28">&lt;<pos:position pos:line="32" pos:column="32"/></operator> <literal type="number" pos:line="32" pos:column="30">0<pos:position pos:line="32" pos:column="31"/></literal></expr>)<pos:position pos:line="32" pos:column="32"/></condition><then pos:line="32" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="25">warning<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><literal type="string" pos:line="33" pos:column="33">"Invalid remote service path."<pos:position pos:line="33" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="65"/></expr_stmt></block></then></if></elseif></if>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>

	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name><name pos:line="36" pos:column="13">data<pos:position pos:line="36" pos:column="17"/></name><operator pos:line="36" pos:column="17">-&gt;<pos:position pos:line="36" pos:column="22"/></operator><name pos:line="36" pos:column="19">connect<pos:position pos:line="36" pos:column="26"/></name></name></expr>)<pos:position pos:line="36" pos:column="27"/></condition><then pos:line="36" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="17">strbuf_addf<pos:position pos:line="37" pos:column="28"/></name><argument_list pos:line="37" pos:column="28">(<argument><expr><operator pos:line="37" pos:column="29">&amp;<pos:position pos:line="37" pos:column="34"/></operator><name pos:line="37" pos:column="30">cmdbuf<pos:position pos:line="37" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="38">"connect %s\n"<pos:position pos:line="37" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="54">name<pos:position pos:line="37" pos:column="58"/></name></expr></argument>)<pos:position pos:line="37" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="60"/></expr_stmt></block></then>
	<else pos:line="38" pos:column="9">else
		<block type="pseudo"><goto pos:line="39" pos:column="17">goto <name pos:line="39" pos:column="22">exit<pos:position pos:line="39" pos:column="26"/></name>;<pos:position pos:line="39" pos:column="27"/></goto></block></else></if>

	<expr_stmt><expr><call><name pos:line="41" pos:column="9">sendline<pos:position pos:line="41" pos:column="17"/></name><argument_list pos:line="41" pos:column="17">(<argument><expr><name pos:line="41" pos:column="18">data<pos:position pos:line="41" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="24">&amp;<pos:position pos:line="41" pos:column="29"/></operator><name pos:line="41" pos:column="25">cmdbuf<pos:position pos:line="41" pos:column="31"/></name></expr></argument>)<pos:position pos:line="41" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="33"/></expr_stmt>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><call><name pos:line="42" pos:column="13">recvline_fh<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">(<argument><expr><name pos:line="42" pos:column="25">input<pos:position pos:line="42" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="32">&amp;<pos:position pos:line="42" pos:column="37"/></operator><name pos:line="42" pos:column="33">cmdbuf<pos:position pos:line="42" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="41">name<pos:position pos:line="42" pos:column="45"/></name></expr></argument>)<pos:position pos:line="42" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="47"/></condition><then pos:line="42" pos:column="47">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="17">exit<pos:position pos:line="43" pos:column="21"/></name><argument_list pos:line="43" pos:column="21">(<argument><expr><literal type="number" pos:line="43" pos:column="22">128<pos:position pos:line="43" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="27"/></expr_stmt></block></then></if>

	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><operator pos:line="45" pos:column="13">!<pos:position pos:line="45" pos:column="14"/></operator><call><name pos:line="45" pos:column="14">strcmp<pos:position pos:line="45" pos:column="20"/></name><argument_list pos:line="45" pos:column="20">(<argument><expr><name><name pos:line="45" pos:column="21">cmdbuf<pos:position pos:line="45" pos:column="27"/></name><operator pos:line="45" pos:column="27">.<pos:position pos:line="45" pos:column="28"/></operator><name pos:line="45" pos:column="28">buf<pos:position pos:line="45" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="33">""<pos:position pos:line="45" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="37"/></condition><then pos:line="45" pos:column="37"> <block pos:line="45" pos:column="38">{
		<expr_stmt><expr><name><name pos:line="46" pos:column="17">data<pos:position pos:line="46" pos:column="21"/></name><operator pos:line="46" pos:column="21">-&gt;<pos:position pos:line="46" pos:column="26"/></operator><name pos:line="46" pos:column="23">no_disconnect_req<pos:position pos:line="46" pos:column="40"/></name></name> <operator pos:line="46" pos:column="41">=<pos:position pos:line="46" pos:column="42"/></operator> <literal type="number" pos:line="46" pos:column="43">1<pos:position pos:line="46" pos:column="44"/></literal></expr>;<pos:position pos:line="46" pos:column="45"/></expr_stmt>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">debug<pos:position pos:line="47" pos:column="26"/></name></expr>)<pos:position pos:line="47" pos:column="27"/></condition><then pos:line="47" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="25">fprintf<pos:position pos:line="48" pos:column="32"/></name><argument_list pos:line="48" pos:column="32">(<argument><expr><name pos:line="48" pos:column="33">stderr<pos:position pos:line="48" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="41">"Debug: Smart transport connection "<pos:position pos:line="48" pos:column="77"/></literal>
				<literal type="string" pos:line="49" pos:column="33">"ready.\n"<pos:position pos:line="49" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="45"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name pos:line="50" pos:column="17">ret<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">=<pos:position pos:line="50" pos:column="22"/></operator> <literal type="number" pos:line="50" pos:column="23">1<pos:position pos:line="50" pos:column="24"/></literal></expr>;<pos:position pos:line="50" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="51" pos:column="10"/></block></then> <elseif pos:line="51" pos:column="11">else <if pos:line="51" pos:column="16">if <condition pos:line="51" pos:column="19">(<expr><operator pos:line="51" pos:column="20">!<pos:position pos:line="51" pos:column="21"/></operator><call><name pos:line="51" pos:column="21">strcmp<pos:position pos:line="51" pos:column="27"/></name><argument_list pos:line="51" pos:column="27">(<argument><expr><name><name pos:line="51" pos:column="28">cmdbuf<pos:position pos:line="51" pos:column="34"/></name><operator pos:line="51" pos:column="34">.<pos:position pos:line="51" pos:column="35"/></operator><name pos:line="51" pos:column="35">buf<pos:position pos:line="51" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="40">"fallback"<pos:position pos:line="51" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="52"/></condition><then pos:line="51" pos:column="52"> <block pos:line="51" pos:column="53">{
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">debug<pos:position pos:line="52" pos:column="26"/></name></expr>)<pos:position pos:line="52" pos:column="27"/></condition><then pos:line="52" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="25">fprintf<pos:position pos:line="53" pos:column="32"/></name><argument_list pos:line="53" pos:column="32">(<argument><expr><name pos:line="53" pos:column="33">stderr<pos:position pos:line="53" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="41">"Debug: Falling back to dumb "<pos:position pos:line="53" pos:column="71"/></literal>
				<literal type="string" pos:line="54" pos:column="33">"transport.\n"<pos:position pos:line="54" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="49"/></expr_stmt></block></then></if>
	}<pos:position pos:line="55" pos:column="10"/></block></then></if></elseif> <else pos:line="55" pos:column="11">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="17">die<pos:position pos:line="56" pos:column="20"/></name><argument_list pos:line="56" pos:column="20">(<argument><expr><literal type="string" pos:line="56" pos:column="21">"Unknown response to connect: %s"<pos:position pos:line="56" pos:column="54"/></literal></expr></argument>,
			<argument><expr><name><name pos:line="57" pos:column="25">cmdbuf<pos:position pos:line="57" pos:column="31"/></name><operator pos:line="57" pos:column="31">.<pos:position pos:line="57" pos:column="32"/></operator><name pos:line="57" pos:column="32">buf<pos:position pos:line="57" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="37"/></expr_stmt></block></else></if>

<label><name pos:line="59" pos:column="1">exit<pos:position pos:line="59" pos:column="5"/></name>:<pos:position pos:line="59" pos:column="6"/></label>
	<expr_stmt><expr><call><name pos:line="60" pos:column="9">fclose<pos:position pos:line="60" pos:column="15"/></name><argument_list pos:line="60" pos:column="15">(<argument><expr><name pos:line="60" pos:column="16">input<pos:position pos:line="60" pos:column="21"/></name></expr></argument>)<pos:position pos:line="60" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="23"/></expr_stmt>
	<return pos:line="61" pos:column="9">return <expr><name pos:line="61" pos:column="16">ret<pos:position pos:line="61" pos:column="19"/></name></expr>;<pos:position pos:line="61" pos:column="20"/></return>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
