<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_802_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">write_trailer<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">void<pos:position pos:line="1" pos:column="31"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="32"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">tail<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><name pos:line="3" pos:column="20">BLOCKSIZE<pos:position pos:line="3" pos:column="29"/></name> <operator pos:line="3" pos:column="30">-<pos:position pos:line="3" pos:column="31"/></operator> <name pos:line="3" pos:column="32">offset<pos:position pos:line="3" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="4" pos:column="9">memset<pos:position pos:line="4" pos:column="15"/></name><argument_list pos:line="4" pos:column="15">(<argument><expr><name pos:line="4" pos:column="16">block<pos:position pos:line="4" pos:column="21"/></name> <operator pos:line="4" pos:column="22">+<pos:position pos:line="4" pos:column="23"/></operator> <name pos:line="4" pos:column="24">offset<pos:position pos:line="4" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="32">0<pos:position pos:line="4" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="35">tail<pos:position pos:line="4" pos:column="39"/></name></expr></argument>)<pos:position pos:line="4" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="5" pos:column="9">write_or_die<pos:position pos:line="5" pos:column="21"/></name><argument_list pos:line="5" pos:column="21">(<argument><expr><literal type="number" pos:line="5" pos:column="22">1<pos:position pos:line="5" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="25">block<pos:position pos:line="5" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="32">BLOCKSIZE<pos:position pos:line="5" pos:column="41"/></name></expr></argument>)<pos:position pos:line="5" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="43"/></expr_stmt>
	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><name pos:line="6" pos:column="13">tail<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">&lt;<pos:position pos:line="6" pos:column="22"/></operator> <literal type="number" pos:line="6" pos:column="20">2<pos:position pos:line="6" pos:column="21"/></literal> <operator pos:line="6" pos:column="22">*<pos:position pos:line="6" pos:column="23"/></operator> <name pos:line="6" pos:column="24">RECORDSIZE<pos:position pos:line="6" pos:column="34"/></name></expr>)<pos:position pos:line="6" pos:column="35"/></condition><then pos:line="6" pos:column="35"> <block pos:line="6" pos:column="36">{
		<expr_stmt><expr><call><name pos:line="7" pos:column="17">memset<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">(<argument><expr><name pos:line="7" pos:column="24">block<pos:position pos:line="7" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="31">0<pos:position pos:line="7" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="34">offset<pos:position pos:line="7" pos:column="40"/></name></expr></argument>)<pos:position pos:line="7" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="8" pos:column="17">write_or_die<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">(<argument><expr><literal type="number" pos:line="8" pos:column="30">1<pos:position pos:line="8" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="33">block<pos:position pos:line="8" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="40">BLOCKSIZE<pos:position pos:line="8" pos:column="49"/></name></expr></argument>)<pos:position pos:line="8" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="51"/></expr_stmt>
	}<pos:position pos:line="9" pos:column="10"/></block></then></if>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
