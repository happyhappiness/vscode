<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5392_git-2.12.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">unpack<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">int<pos:position pos:line="1" pos:column="30"/></name></type> <name pos:line="1" pos:column="31">err_fd<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="39">struct<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">shallow_info<pos:position pos:line="1" pos:column="58"/></name></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">si<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">pack_header<pos:position pos:line="3" pos:column="27"/></name></name></type> <name pos:line="3" pos:column="28">hdr<pos:position pos:line="3" pos:column="31"/></name></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">hdr_err<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">status<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name></type> <name><name pos:line="6" pos:column="14">hdr_arg<pos:position pos:line="6" pos:column="21"/></name><index pos:line="6" pos:column="21">[<expr><literal type="number" pos:line="6" pos:column="22">38<pos:position pos:line="6" pos:column="24"/></literal></expr>]<pos:position pos:line="6" pos:column="25"/></index></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">child_process<pos:position pos:line="7" pos:column="29"/></name></name></type> <name pos:line="7" pos:column="30">child<pos:position pos:line="7" pos:column="35"/></name> <init pos:line="7" pos:column="36">= <expr><name pos:line="7" pos:column="38">CHILD_PROCESS_INIT<pos:position pos:line="7" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="57"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="8" pos:column="9">int<pos:position pos:line="8" pos:column="12"/></name></type> <name pos:line="8" pos:column="13">fsck_objects<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><operator pos:line="8" pos:column="28">(<pos:position pos:line="8" pos:column="29"/></operator><ternary><condition><expr><name pos:line="8" pos:column="29">receive_fsck_objects<pos:position pos:line="8" pos:column="49"/></name> <operator pos:line="8" pos:column="50">&gt;=<pos:position pos:line="8" pos:column="55"/></operator> <literal type="number" pos:line="8" pos:column="53">0<pos:position pos:line="8" pos:column="54"/></literal></expr>
			    ?<pos:position pos:line="9" pos:column="30"/></condition><then pos:line="9" pos:column="30"> <expr><name pos:line="9" pos:column="31">receive_fsck_objects<pos:position pos:line="9" pos:column="51"/></name></expr>
			    <pos:position pos:line="10" pos:column="8"/></then><else pos:line="10" pos:column="29">: <expr><ternary><condition><expr><name pos:line="10" pos:column="31">transfer_fsck_objects<pos:position pos:line="10" pos:column="52"/></name> <operator pos:line="10" pos:column="53">&gt;=<pos:position pos:line="10" pos:column="58"/></operator> <literal type="number" pos:line="10" pos:column="56">0<pos:position pos:line="10" pos:column="57"/></literal></expr>
			    ?<pos:position pos:line="11" pos:column="30"/></condition><then pos:line="11" pos:column="30"> <expr><name pos:line="11" pos:column="31">transfer_fsck_objects<pos:position pos:line="11" pos:column="52"/></name></expr>
			    <pos:position pos:line="12" pos:column="8"/></then><else pos:line="12" pos:column="29">: <expr><literal type="number" pos:line="12" pos:column="31">0<pos:position pos:line="12" pos:column="32"/></literal></expr></else></ternary></expr></else></ternary><operator pos:line="12" pos:column="32">)<pos:position pos:line="12" pos:column="33"/></operator></expr></init></decl>;<pos:position pos:line="12" pos:column="34"/></decl_stmt>

	<expr_stmt><expr><name pos:line="14" pos:column="9">hdr_err<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <call><name pos:line="14" pos:column="19">parse_pack_header<pos:position pos:line="14" pos:column="36"/></name><argument_list pos:line="14" pos:column="36">(<argument><expr><operator pos:line="14" pos:column="37">&amp;<pos:position pos:line="14" pos:column="42"/></operator><name pos:line="14" pos:column="38">hdr<pos:position pos:line="14" pos:column="41"/></name></expr></argument>)<pos:position pos:line="14" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="43"/></expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">hdr_err<pos:position pos:line="15" pos:column="20"/></name></expr>)<pos:position pos:line="15" pos:column="21"/></condition><then pos:line="15" pos:column="21"> <block pos:line="15" pos:column="22">{
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">err_fd<pos:position pos:line="16" pos:column="27"/></name> <operator pos:line="16" pos:column="28">&gt;<pos:position pos:line="16" pos:column="32"/></operator> <literal type="number" pos:line="16" pos:column="30">0<pos:position pos:line="16" pos:column="31"/></literal></expr>)<pos:position pos:line="16" pos:column="32"/></condition><then pos:line="16" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="25">close<pos:position pos:line="17" pos:column="30"/></name><argument_list pos:line="17" pos:column="30">(<argument><expr><name pos:line="17" pos:column="31">err_fd<pos:position pos:line="17" pos:column="37"/></name></expr></argument>)<pos:position pos:line="17" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="39"/></expr_stmt></block></then></if>
		<return pos:line="18" pos:column="17">return <expr><name pos:line="18" pos:column="24">hdr_err<pos:position pos:line="18" pos:column="31"/></name></expr>;<pos:position pos:line="18" pos:column="32"/></return>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">snprintf<pos:position pos:line="20" pos:column="17"/></name><argument_list pos:line="20" pos:column="17">(<argument><expr><name pos:line="20" pos:column="18">hdr_arg<pos:position pos:line="20" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="27">sizeof<argument_list pos:line="20" pos:column="33">(<argument><expr><name pos:line="20" pos:column="34">hdr_arg<pos:position pos:line="20" pos:column="41"/></name></expr></argument>)<pos:position pos:line="20" pos:column="42"/></argument_list></sizeof></expr></argument>,
			<argument><expr><literal type="string" pos:line="21" pos:column="25">"--pack_header=%"<pos:position pos:line="21" pos:column="42"/></literal><name pos:line="21" pos:column="42">PRIu32<pos:position pos:line="21" pos:column="48"/></name><literal type="string" pos:line="21" pos:column="48">",%"<pos:position pos:line="21" pos:column="52"/></literal><name pos:line="21" pos:column="52">PRIu32<pos:position pos:line="21" pos:column="58"/></name></expr></argument>,
			<argument><expr><call><name pos:line="22" pos:column="25">ntohl<pos:position pos:line="22" pos:column="30"/></name><argument_list pos:line="22" pos:column="30">(<argument><expr><name><name pos:line="22" pos:column="31">hdr<pos:position pos:line="22" pos:column="34"/></name><operator pos:line="22" pos:column="34">.<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="35">hdr_version<pos:position pos:line="22" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="49">ntohl<pos:position pos:line="22" pos:column="54"/></name><argument_list pos:line="22" pos:column="54">(<argument><expr><name><name pos:line="22" pos:column="55">hdr<pos:position pos:line="22" pos:column="58"/></name><operator pos:line="22" pos:column="58">.<pos:position pos:line="22" pos:column="59"/></operator><name pos:line="22" pos:column="59">hdr_entries<pos:position pos:line="22" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="73"/></expr_stmt>

	<if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name><name pos:line="24" pos:column="13">si<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">-&gt;<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="17">nr_ours<pos:position pos:line="24" pos:column="24"/></name></name> <operator pos:line="24" pos:column="25">||<pos:position pos:line="24" pos:column="27"/></operator> <name><name pos:line="24" pos:column="28">si<pos:position pos:line="24" pos:column="30"/></name><operator pos:line="24" pos:column="30">-&gt;<pos:position pos:line="24" pos:column="35"/></operator><name pos:line="24" pos:column="32">nr_theirs<pos:position pos:line="24" pos:column="41"/></name></name></expr>)<pos:position pos:line="24" pos:column="42"/></condition><then pos:line="24" pos:column="42"> <block pos:line="24" pos:column="43">{
		<expr_stmt><expr><name pos:line="25" pos:column="17">alt_shallow_file<pos:position pos:line="25" pos:column="33"/></name> <operator pos:line="25" pos:column="34">=<pos:position pos:line="25" pos:column="35"/></operator> <call><name pos:line="25" pos:column="36">setup_temporary_shallow<pos:position pos:line="25" pos:column="59"/></name><argument_list pos:line="25" pos:column="59">(<argument><expr><name><name pos:line="25" pos:column="60">si<pos:position pos:line="25" pos:column="62"/></name><operator pos:line="25" pos:column="62">-&gt;<pos:position pos:line="25" pos:column="67"/></operator><name pos:line="25" pos:column="64">shallow<pos:position pos:line="25" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="73"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">argv_array_push<pos:position pos:line="26" pos:column="32"/></name><argument_list pos:line="26" pos:column="32">(<argument><expr><operator pos:line="26" pos:column="33">&amp;<pos:position pos:line="26" pos:column="38"/></operator><name><name pos:line="26" pos:column="34">child<pos:position pos:line="26" pos:column="39"/></name><operator pos:line="26" pos:column="39">.<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="40">args<pos:position pos:line="26" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="46">"--shallow-file"<pos:position pos:line="26" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">argv_array_push<pos:position pos:line="27" pos:column="32"/></name><argument_list pos:line="27" pos:column="32">(<argument><expr><operator pos:line="27" pos:column="33">&amp;<pos:position pos:line="27" pos:column="38"/></operator><name><name pos:line="27" pos:column="34">child<pos:position pos:line="27" pos:column="39"/></name><operator pos:line="27" pos:column="39">.<pos:position pos:line="27" pos:column="40"/></operator><name pos:line="27" pos:column="40">args<pos:position pos:line="27" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="46">alt_shallow_file<pos:position pos:line="27" pos:column="62"/></name></expr></argument>)<pos:position pos:line="27" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="64"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="30" pos:column="9">tmp_objdir<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <call><name pos:line="30" pos:column="22">tmp_objdir_create<pos:position pos:line="30" pos:column="39"/></name><argument_list pos:line="30" pos:column="39">()<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">!<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">tmp_objdir<pos:position pos:line="31" pos:column="24"/></name></expr>)<pos:position pos:line="31" pos:column="25"/></condition><then pos:line="31" pos:column="25"> <block pos:line="31" pos:column="26">{
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><name pos:line="32" pos:column="21">err_fd<pos:position pos:line="32" pos:column="27"/></name> <operator pos:line="32" pos:column="28">&gt;<pos:position pos:line="32" pos:column="32"/></operator> <literal type="number" pos:line="32" pos:column="30">0<pos:position pos:line="32" pos:column="31"/></literal></expr>)<pos:position pos:line="32" pos:column="32"/></condition><then pos:line="32" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="25">close<pos:position pos:line="33" pos:column="30"/></name><argument_list pos:line="33" pos:column="30">(<argument><expr><name pos:line="33" pos:column="31">err_fd<pos:position pos:line="33" pos:column="37"/></name></expr></argument>)<pos:position pos:line="33" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="39"/></expr_stmt></block></then></if>
		<return pos:line="34" pos:column="17">return <expr><literal type="string" pos:line="34" pos:column="24">"unable to create temporary object directory"<pos:position pos:line="34" pos:column="69"/></literal></expr>;<pos:position pos:line="34" pos:column="70"/></return>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name><name pos:line="36" pos:column="9">child<pos:position pos:line="36" pos:column="14"/></name><operator pos:line="36" pos:column="14">.<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="15">env<pos:position pos:line="36" pos:column="18"/></name></name> <operator pos:line="36" pos:column="19">=<pos:position pos:line="36" pos:column="20"/></operator> <call><name pos:line="36" pos:column="21">tmp_objdir_env<pos:position pos:line="36" pos:column="35"/></name><argument_list pos:line="36" pos:column="35">(<argument><expr><name pos:line="36" pos:column="36">tmp_objdir<pos:position pos:line="36" pos:column="46"/></name></expr></argument>)<pos:position pos:line="36" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="48"/></expr_stmt>

	<comment type="block" pos:line="38" pos:column="9">/*
	 * Normally we just pass the tmp_objdir environment to the child
	 * processes that do the heavy lifting, but we may need to see these
	 * objects ourselves to set up shallow information.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">tmp_objdir_add_as_alternate<pos:position pos:line="43" pos:column="36"/></name><argument_list pos:line="43" pos:column="36">(<argument><expr><name pos:line="43" pos:column="37">tmp_objdir<pos:position pos:line="43" pos:column="47"/></name></expr></argument>)<pos:position pos:line="43" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="49"/></expr_stmt>

	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><call><name pos:line="45" pos:column="13">ntohl<pos:position pos:line="45" pos:column="18"/></name><argument_list pos:line="45" pos:column="18">(<argument><expr><name><name pos:line="45" pos:column="19">hdr<pos:position pos:line="45" pos:column="22"/></name><operator pos:line="45" pos:column="22">.<pos:position pos:line="45" pos:column="23"/></operator><name pos:line="45" pos:column="23">hdr_entries<pos:position pos:line="45" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="35"/></argument_list></call> <operator pos:line="45" pos:column="36">&lt;<pos:position pos:line="45" pos:column="40"/></operator> <name pos:line="45" pos:column="38">unpack_limit<pos:position pos:line="45" pos:column="50"/></name></expr>)<pos:position pos:line="45" pos:column="51"/></condition><then pos:line="45" pos:column="51"> <block pos:line="45" pos:column="52">{
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">argv_array_pushl<pos:position pos:line="46" pos:column="33"/></name><argument_list pos:line="46" pos:column="33">(<argument><expr><operator pos:line="46" pos:column="34">&amp;<pos:position pos:line="46" pos:column="39"/></operator><name><name pos:line="46" pos:column="35">child<pos:position pos:line="46" pos:column="40"/></name><operator pos:line="46" pos:column="40">.<pos:position pos:line="46" pos:column="41"/></operator><name pos:line="46" pos:column="41">args<pos:position pos:line="46" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="47">"unpack-objects"<pos:position pos:line="46" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="65">hdr_arg<pos:position pos:line="46" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="74">NULL<pos:position pos:line="46" pos:column="78"/></name></expr></argument>)<pos:position pos:line="46" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="80"/></expr_stmt>
		<if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">quiet<pos:position pos:line="47" pos:column="26"/></name></expr>)<pos:position pos:line="47" pos:column="27"/></condition><then pos:line="47" pos:column="27">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="25">argv_array_push<pos:position pos:line="48" pos:column="40"/></name><argument_list pos:line="48" pos:column="40">(<argument><expr><operator pos:line="48" pos:column="41">&amp;<pos:position pos:line="48" pos:column="46"/></operator><name><name pos:line="48" pos:column="42">child<pos:position pos:line="48" pos:column="47"/></name><operator pos:line="48" pos:column="47">.<pos:position pos:line="48" pos:column="48"/></operator><name pos:line="48" pos:column="48">args<pos:position pos:line="48" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="54">"-q"<pos:position pos:line="48" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="60"/></expr_stmt></block></then></if>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name pos:line="49" pos:column="21">fsck_objects<pos:position pos:line="49" pos:column="33"/></name></expr>)<pos:position pos:line="49" pos:column="34"/></condition><then pos:line="49" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="50" pos:column="25">argv_array_pushf<pos:position pos:line="50" pos:column="41"/></name><argument_list pos:line="50" pos:column="41">(<argument><expr><operator pos:line="50" pos:column="42">&amp;<pos:position pos:line="50" pos:column="47"/></operator><name><name pos:line="50" pos:column="43">child<pos:position pos:line="50" pos:column="48"/></name><operator pos:line="50" pos:column="48">.<pos:position pos:line="50" pos:column="49"/></operator><name pos:line="50" pos:column="49">args<pos:position pos:line="50" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="55">"--strict%s"<pos:position pos:line="50" pos:column="67"/></literal></expr></argument>,
				<argument><expr><name><name pos:line="51" pos:column="33">fsck_msg_types<pos:position pos:line="51" pos:column="47"/></name><operator pos:line="51" pos:column="47">.<pos:position pos:line="51" pos:column="48"/></operator><name pos:line="51" pos:column="48">buf<pos:position pos:line="51" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="53"/></expr_stmt></block></then></if>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">max_input_size<pos:position pos:line="52" pos:column="35"/></name></expr>)<pos:position pos:line="52" pos:column="36"/></condition><then pos:line="52" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="53" pos:column="25">argv_array_pushf<pos:position pos:line="53" pos:column="41"/></name><argument_list pos:line="53" pos:column="41">(<argument><expr><operator pos:line="53" pos:column="42">&amp;<pos:position pos:line="53" pos:column="47"/></operator><name><name pos:line="53" pos:column="43">child<pos:position pos:line="53" pos:column="48"/></name><operator pos:line="53" pos:column="48">.<pos:position pos:line="53" pos:column="49"/></operator><name pos:line="53" pos:column="49">args<pos:position pos:line="53" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="55">"--max-input-size=%"<pos:position pos:line="53" pos:column="75"/></literal><name pos:line="53" pos:column="75">PRIuMAX<pos:position pos:line="53" pos:column="82"/></name></expr></argument>,
				<argument><expr><operator pos:line="54" pos:column="33">(<pos:position pos:line="54" pos:column="34"/></operator><name pos:line="54" pos:column="34">uintmax_t<pos:position pos:line="54" pos:column="43"/></name><operator pos:line="54" pos:column="43">)<pos:position pos:line="54" pos:column="44"/></operator><name pos:line="54" pos:column="44">max_input_size<pos:position pos:line="54" pos:column="58"/></name></expr></argument>)<pos:position pos:line="54" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="60"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="55" pos:column="17">child<pos:position pos:line="55" pos:column="22"/></name><operator pos:line="55" pos:column="22">.<pos:position pos:line="55" pos:column="23"/></operator><name pos:line="55" pos:column="23">no_stdout<pos:position pos:line="55" pos:column="32"/></name></name> <operator pos:line="55" pos:column="33">=<pos:position pos:line="55" pos:column="34"/></operator> <literal type="number" pos:line="55" pos:column="35">1<pos:position pos:line="55" pos:column="36"/></literal></expr>;<pos:position pos:line="55" pos:column="37"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="56" pos:column="17">child<pos:position pos:line="56" pos:column="22"/></name><operator pos:line="56" pos:column="22">.<pos:position pos:line="56" pos:column="23"/></operator><name pos:line="56" pos:column="23">err<pos:position pos:line="56" pos:column="26"/></name></name> <operator pos:line="56" pos:column="27">=<pos:position pos:line="56" pos:column="28"/></operator> <name pos:line="56" pos:column="29">err_fd<pos:position pos:line="56" pos:column="35"/></name></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="57" pos:column="17">child<pos:position pos:line="57" pos:column="22"/></name><operator pos:line="57" pos:column="22">.<pos:position pos:line="57" pos:column="23"/></operator><name pos:line="57" pos:column="23">git_cmd<pos:position pos:line="57" pos:column="30"/></name></name> <operator pos:line="57" pos:column="31">=<pos:position pos:line="57" pos:column="32"/></operator> <literal type="number" pos:line="57" pos:column="33">1<pos:position pos:line="57" pos:column="34"/></literal></expr>;<pos:position pos:line="57" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="58" pos:column="17">status<pos:position pos:line="58" pos:column="23"/></name> <operator pos:line="58" pos:column="24">=<pos:position pos:line="58" pos:column="25"/></operator> <call><name pos:line="58" pos:column="26">run_command<pos:position pos:line="58" pos:column="37"/></name><argument_list pos:line="58" pos:column="37">(<argument><expr><operator pos:line="58" pos:column="38">&amp;<pos:position pos:line="58" pos:column="43"/></operator><name pos:line="58" pos:column="39">child<pos:position pos:line="58" pos:column="44"/></name></expr></argument>)<pos:position pos:line="58" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="46"/></expr_stmt>
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><name pos:line="59" pos:column="21">status<pos:position pos:line="59" pos:column="27"/></name></expr>)<pos:position pos:line="59" pos:column="28"/></condition><then pos:line="59" pos:column="28">
			<block type="pseudo"><return pos:line="60" pos:column="25">return <expr><literal type="string" pos:line="60" pos:column="32">"unpack-objects abnormal exit"<pos:position pos:line="60" pos:column="62"/></literal></expr>;<pos:position pos:line="60" pos:column="63"/></return></block></then></if>
	}<pos:position pos:line="61" pos:column="10"/></block></then> <else pos:line="61" pos:column="11">else <block pos:line="61" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="62" pos:column="17">char<pos:position pos:line="62" pos:column="21"/></name></type> <name><name pos:line="62" pos:column="22">hostname<pos:position pos:line="62" pos:column="30"/></name><index pos:line="62" pos:column="30">[<expr><literal type="number" pos:line="62" pos:column="31">256<pos:position pos:line="62" pos:column="34"/></literal></expr>]<pos:position pos:line="62" pos:column="35"/></index></name></decl>;<pos:position pos:line="62" pos:column="36"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="64" pos:column="17">argv_array_pushl<pos:position pos:line="64" pos:column="33"/></name><argument_list pos:line="64" pos:column="33">(<argument><expr><operator pos:line="64" pos:column="34">&amp;<pos:position pos:line="64" pos:column="39"/></operator><name><name pos:line="64" pos:column="35">child<pos:position pos:line="64" pos:column="40"/></name><operator pos:line="64" pos:column="40">.<pos:position pos:line="64" pos:column="41"/></operator><name pos:line="64" pos:column="41">args<pos:position pos:line="64" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="47">"index-pack"<pos:position pos:line="64" pos:column="59"/></literal></expr></argument>,
				 <argument><expr><literal type="string" pos:line="65" pos:column="34">"--stdin"<pos:position pos:line="65" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="45">hdr_arg<pos:position pos:line="65" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="54">NULL<pos:position pos:line="65" pos:column="58"/></name></expr></argument>)<pos:position pos:line="65" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="60"/></expr_stmt>

		<if pos:line="67" pos:column="17">if <condition pos:line="67" pos:column="20">(<expr><call><name pos:line="67" pos:column="21">gethostname<pos:position pos:line="67" pos:column="32"/></name><argument_list pos:line="67" pos:column="32">(<argument><expr><name pos:line="67" pos:column="33">hostname<pos:position pos:line="67" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="67" pos:column="43">sizeof<argument_list pos:line="67" pos:column="49">(<argument><expr><name pos:line="67" pos:column="50">hostname<pos:position pos:line="67" pos:column="58"/></name></expr></argument>)<pos:position pos:line="67" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="67" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="61"/></condition><then pos:line="67" pos:column="61">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="25">xsnprintf<pos:position pos:line="68" pos:column="34"/></name><argument_list pos:line="68" pos:column="34">(<argument><expr><name pos:line="68" pos:column="35">hostname<pos:position pos:line="68" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="68" pos:column="45">sizeof<argument_list pos:line="68" pos:column="51">(<argument><expr><name pos:line="68" pos:column="52">hostname<pos:position pos:line="68" pos:column="60"/></name></expr></argument>)<pos:position pos:line="68" pos:column="61"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="63">"localhost"<pos:position pos:line="68" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="76"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="69" pos:column="17">argv_array_pushf<pos:position pos:line="69" pos:column="33"/></name><argument_list pos:line="69" pos:column="33">(<argument><expr><operator pos:line="69" pos:column="34">&amp;<pos:position pos:line="69" pos:column="39"/></operator><name><name pos:line="69" pos:column="35">child<pos:position pos:line="69" pos:column="40"/></name><operator pos:line="69" pos:column="40">.<pos:position pos:line="69" pos:column="41"/></operator><name pos:line="69" pos:column="41">args<pos:position pos:line="69" pos:column="45"/></name></name></expr></argument>,
				 <argument><expr><literal type="string" pos:line="70" pos:column="34">"--keep=receive-pack %"<pos:position pos:line="70" pos:column="57"/></literal><name pos:line="70" pos:column="57">PRIuMAX<pos:position pos:line="70" pos:column="64"/></name><literal type="string" pos:line="70" pos:column="64">" on %s"<pos:position pos:line="70" pos:column="72"/></literal></expr></argument>,
				 <argument><expr><operator pos:line="71" pos:column="34">(<pos:position pos:line="71" pos:column="35"/></operator><name pos:line="71" pos:column="35">uintmax_t<pos:position pos:line="71" pos:column="44"/></name><operator pos:line="71" pos:column="44">)<pos:position pos:line="71" pos:column="45"/></operator><call><name pos:line="71" pos:column="45">getpid<pos:position pos:line="71" pos:column="51"/></name><argument_list pos:line="71" pos:column="51">()<pos:position pos:line="71" pos:column="53"/></argument_list></call></expr></argument>,
				 <argument><expr><name pos:line="72" pos:column="34">hostname<pos:position pos:line="72" pos:column="42"/></name></expr></argument>)<pos:position pos:line="72" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="44"/></expr_stmt>

		<if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><operator pos:line="74" pos:column="21">!<pos:position pos:line="74" pos:column="22"/></operator><name pos:line="74" pos:column="22">quiet<pos:position pos:line="74" pos:column="27"/></name> <operator pos:line="74" pos:column="28">&amp;&amp;<pos:position pos:line="74" pos:column="38"/></operator> <name pos:line="74" pos:column="31">err_fd<pos:position pos:line="74" pos:column="37"/></name></expr>)<pos:position pos:line="74" pos:column="38"/></condition><then pos:line="74" pos:column="38">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="25">argv_array_push<pos:position pos:line="75" pos:column="40"/></name><argument_list pos:line="75" pos:column="40">(<argument><expr><operator pos:line="75" pos:column="41">&amp;<pos:position pos:line="75" pos:column="46"/></operator><name><name pos:line="75" pos:column="42">child<pos:position pos:line="75" pos:column="47"/></name><operator pos:line="75" pos:column="47">.<pos:position pos:line="75" pos:column="48"/></operator><name pos:line="75" pos:column="48">args<pos:position pos:line="75" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="54">"--show-resolving-progress"<pos:position pos:line="75" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="83"/></expr_stmt></block></then></if>
		<if pos:line="76" pos:column="17">if <condition pos:line="76" pos:column="20">(<expr><name pos:line="76" pos:column="21">use_sideband<pos:position pos:line="76" pos:column="33"/></name></expr>)<pos:position pos:line="76" pos:column="34"/></condition><then pos:line="76" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="77" pos:column="25">argv_array_push<pos:position pos:line="77" pos:column="40"/></name><argument_list pos:line="77" pos:column="40">(<argument><expr><operator pos:line="77" pos:column="41">&amp;<pos:position pos:line="77" pos:column="46"/></operator><name><name pos:line="77" pos:column="42">child<pos:position pos:line="77" pos:column="47"/></name><operator pos:line="77" pos:column="47">.<pos:position pos:line="77" pos:column="48"/></operator><name pos:line="77" pos:column="48">args<pos:position pos:line="77" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="54">"--report-end-of-input"<pos:position pos:line="77" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="79"/></expr_stmt></block></then></if>
		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><name pos:line="78" pos:column="21">fsck_objects<pos:position pos:line="78" pos:column="33"/></name></expr>)<pos:position pos:line="78" pos:column="34"/></condition><then pos:line="78" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="25">argv_array_pushf<pos:position pos:line="79" pos:column="41"/></name><argument_list pos:line="79" pos:column="41">(<argument><expr><operator pos:line="79" pos:column="42">&amp;<pos:position pos:line="79" pos:column="47"/></operator><name><name pos:line="79" pos:column="43">child<pos:position pos:line="79" pos:column="48"/></name><operator pos:line="79" pos:column="48">.<pos:position pos:line="79" pos:column="49"/></operator><name pos:line="79" pos:column="49">args<pos:position pos:line="79" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="55">"--strict%s"<pos:position pos:line="79" pos:column="67"/></literal></expr></argument>,
				<argument><expr><name><name pos:line="80" pos:column="33">fsck_msg_types<pos:position pos:line="80" pos:column="47"/></name><operator pos:line="80" pos:column="47">.<pos:position pos:line="80" pos:column="48"/></operator><name pos:line="80" pos:column="48">buf<pos:position pos:line="80" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="53"/></expr_stmt></block></then></if>
		<if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><operator pos:line="81" pos:column="21">!<pos:position pos:line="81" pos:column="22"/></operator><name pos:line="81" pos:column="22">reject_thin<pos:position pos:line="81" pos:column="33"/></name></expr>)<pos:position pos:line="81" pos:column="34"/></condition><then pos:line="81" pos:column="34">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="82" pos:column="25">argv_array_push<pos:position pos:line="82" pos:column="40"/></name><argument_list pos:line="82" pos:column="40">(<argument><expr><operator pos:line="82" pos:column="41">&amp;<pos:position pos:line="82" pos:column="46"/></operator><name><name pos:line="82" pos:column="42">child<pos:position pos:line="82" pos:column="47"/></name><operator pos:line="82" pos:column="47">.<pos:position pos:line="82" pos:column="48"/></operator><name pos:line="82" pos:column="48">args<pos:position pos:line="82" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="54">"--fix-thin"<pos:position pos:line="82" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="68"/></expr_stmt></block></then></if>
		<if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><name pos:line="83" pos:column="21">max_input_size<pos:position pos:line="83" pos:column="35"/></name></expr>)<pos:position pos:line="83" pos:column="36"/></condition><then pos:line="83" pos:column="36">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="84" pos:column="25">argv_array_pushf<pos:position pos:line="84" pos:column="41"/></name><argument_list pos:line="84" pos:column="41">(<argument><expr><operator pos:line="84" pos:column="42">&amp;<pos:position pos:line="84" pos:column="47"/></operator><name><name pos:line="84" pos:column="43">child<pos:position pos:line="84" pos:column="48"/></name><operator pos:line="84" pos:column="48">.<pos:position pos:line="84" pos:column="49"/></operator><name pos:line="84" pos:column="49">args<pos:position pos:line="84" pos:column="53"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="55">"--max-input-size=%"<pos:position pos:line="84" pos:column="75"/></literal><name pos:line="84" pos:column="75">PRIuMAX<pos:position pos:line="84" pos:column="82"/></name></expr></argument>,
				<argument><expr><operator pos:line="85" pos:column="33">(<pos:position pos:line="85" pos:column="34"/></operator><name pos:line="85" pos:column="34">uintmax_t<pos:position pos:line="85" pos:column="43"/></name><operator pos:line="85" pos:column="43">)<pos:position pos:line="85" pos:column="44"/></operator><name pos:line="85" pos:column="44">max_input_size<pos:position pos:line="85" pos:column="58"/></name></expr></argument>)<pos:position pos:line="85" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="60"/></expr_stmt></block></then></if>
		<expr_stmt><expr><name><name pos:line="86" pos:column="17">child<pos:position pos:line="86" pos:column="22"/></name><operator pos:line="86" pos:column="22">.<pos:position pos:line="86" pos:column="23"/></operator><name pos:line="86" pos:column="23">out<pos:position pos:line="86" pos:column="26"/></name></name> <operator pos:line="86" pos:column="27">=<pos:position pos:line="86" pos:column="28"/></operator> <operator pos:line="86" pos:column="29">-<pos:position pos:line="86" pos:column="30"/></operator><literal type="number" pos:line="86" pos:column="30">1<pos:position pos:line="86" pos:column="31"/></literal></expr>;<pos:position pos:line="86" pos:column="32"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="87" pos:column="17">child<pos:position pos:line="87" pos:column="22"/></name><operator pos:line="87" pos:column="22">.<pos:position pos:line="87" pos:column="23"/></operator><name pos:line="87" pos:column="23">err<pos:position pos:line="87" pos:column="26"/></name></name> <operator pos:line="87" pos:column="27">=<pos:position pos:line="87" pos:column="28"/></operator> <name pos:line="87" pos:column="29">err_fd<pos:position pos:line="87" pos:column="35"/></name></expr>;<pos:position pos:line="87" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="88" pos:column="17">child<pos:position pos:line="88" pos:column="22"/></name><operator pos:line="88" pos:column="22">.<pos:position pos:line="88" pos:column="23"/></operator><name pos:line="88" pos:column="23">git_cmd<pos:position pos:line="88" pos:column="30"/></name></name> <operator pos:line="88" pos:column="31">=<pos:position pos:line="88" pos:column="32"/></operator> <literal type="number" pos:line="88" pos:column="33">1<pos:position pos:line="88" pos:column="34"/></literal></expr>;<pos:position pos:line="88" pos:column="35"/></expr_stmt>
		<expr_stmt><expr><name pos:line="89" pos:column="17">status<pos:position pos:line="89" pos:column="23"/></name> <operator pos:line="89" pos:column="24">=<pos:position pos:line="89" pos:column="25"/></operator> <call><name pos:line="89" pos:column="26">start_command<pos:position pos:line="89" pos:column="39"/></name><argument_list pos:line="89" pos:column="39">(<argument><expr><operator pos:line="89" pos:column="40">&amp;<pos:position pos:line="89" pos:column="45"/></operator><name pos:line="89" pos:column="41">child<pos:position pos:line="89" pos:column="46"/></name></expr></argument>)<pos:position pos:line="89" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="48"/></expr_stmt>
		<if pos:line="90" pos:column="17">if <condition pos:line="90" pos:column="20">(<expr><name pos:line="90" pos:column="21">status<pos:position pos:line="90" pos:column="27"/></name></expr>)<pos:position pos:line="90" pos:column="28"/></condition><then pos:line="90" pos:column="28">
			<block type="pseudo"><return pos:line="91" pos:column="25">return <expr><literal type="string" pos:line="91" pos:column="32">"index-pack fork failed"<pos:position pos:line="91" pos:column="56"/></literal></expr>;<pos:position pos:line="91" pos:column="57"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="92" pos:column="17">pack_lockfile<pos:position pos:line="92" pos:column="30"/></name> <operator pos:line="92" pos:column="31">=<pos:position pos:line="92" pos:column="32"/></operator> <call><name pos:line="92" pos:column="33">index_pack_lockfile<pos:position pos:line="92" pos:column="52"/></name><argument_list pos:line="92" pos:column="52">(<argument><expr><name><name pos:line="92" pos:column="53">child<pos:position pos:line="92" pos:column="58"/></name><operator pos:line="92" pos:column="58">.<pos:position pos:line="92" pos:column="59"/></operator><name pos:line="92" pos:column="59">out<pos:position pos:line="92" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="93" pos:column="17">close<pos:position pos:line="93" pos:column="22"/></name><argument_list pos:line="93" pos:column="22">(<argument><expr><name><name pos:line="93" pos:column="23">child<pos:position pos:line="93" pos:column="28"/></name><operator pos:line="93" pos:column="28">.<pos:position pos:line="93" pos:column="29"/></operator><name pos:line="93" pos:column="29">out<pos:position pos:line="93" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="34"/></expr_stmt>
		<expr_stmt><expr><name pos:line="94" pos:column="17">status<pos:position pos:line="94" pos:column="23"/></name> <operator pos:line="94" pos:column="24">=<pos:position pos:line="94" pos:column="25"/></operator> <call><name pos:line="94" pos:column="26">finish_command<pos:position pos:line="94" pos:column="40"/></name><argument_list pos:line="94" pos:column="40">(<argument><expr><operator pos:line="94" pos:column="41">&amp;<pos:position pos:line="94" pos:column="46"/></operator><name pos:line="94" pos:column="42">child<pos:position pos:line="94" pos:column="47"/></name></expr></argument>)<pos:position pos:line="94" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="49"/></expr_stmt>
		<if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><name pos:line="95" pos:column="21">status<pos:position pos:line="95" pos:column="27"/></name></expr>)<pos:position pos:line="95" pos:column="28"/></condition><then pos:line="95" pos:column="28">
			<block type="pseudo"><return pos:line="96" pos:column="25">return <expr><literal type="string" pos:line="96" pos:column="32">"index-pack abnormal exit"<pos:position pos:line="96" pos:column="58"/></literal></expr>;<pos:position pos:line="96" pos:column="59"/></return></block></then></if>
		<expr_stmt><expr><call><name pos:line="97" pos:column="17">reprepare_packed_git<pos:position pos:line="97" pos:column="37"/></name><argument_list pos:line="97" pos:column="37">()<pos:position pos:line="97" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="98" pos:column="10"/></block></else></if>
	<return pos:line="99" pos:column="9">return <expr><name pos:line="99" pos:column="16">NULL<pos:position pos:line="99" pos:column="20"/></name></expr>;<pos:position pos:line="99" pos:column="21"/></return>
}<pos:position pos:line="100" pos:column="2"/></block></function></unit>
