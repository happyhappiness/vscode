<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_122_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">pp_header<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name><name pos:line="1" pos:column="23">struct<pos:position pos:line="1" pos:column="29"/></name> <name pos:line="1" pos:column="30">pretty_print_context<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">pp<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
		      <parameter><decl><type><specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <name pos:line="2" pos:column="29">char<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">encoding<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>,
		      <parameter><decl><type><specifier pos:line="3" pos:column="23">const<pos:position pos:line="3" pos:column="28"/></specifier> <name><name pos:line="3" pos:column="29">struct<pos:position pos:line="3" pos:column="35"/></name> <name pos:line="3" pos:column="36">commit<pos:position pos:line="3" pos:column="42"/></name></name> <modifier pos:line="3" pos:column="43">*<pos:position pos:line="3" pos:column="44"/></modifier></type><name pos:line="3" pos:column="44">commit<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>,
		      <parameter><decl><type><specifier pos:line="4" pos:column="23">const<pos:position pos:line="4" pos:column="28"/></specifier> <name pos:line="4" pos:column="29">char<pos:position pos:line="4" pos:column="33"/></name> <modifier pos:line="4" pos:column="34">*<pos:position pos:line="4" pos:column="35"/></modifier><modifier pos:line="4" pos:column="35">*<pos:position pos:line="4" pos:column="36"/></modifier></type><name pos:line="4" pos:column="36">msg_p<pos:position pos:line="4" pos:column="41"/></name></decl></parameter>,
		      <parameter><decl><type><name><name pos:line="5" pos:column="23">struct<pos:position pos:line="5" pos:column="29"/></name> <name pos:line="5" pos:column="30">strbuf<pos:position pos:line="5" pos:column="36"/></name></name> <modifier pos:line="5" pos:column="37">*<pos:position pos:line="5" pos:column="38"/></modifier></type><name pos:line="5" pos:column="38">sb<pos:position pos:line="5" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="41"/></parameter_list>
<block pos:line="6" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">parents_shown<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><literal type="number" pos:line="7" pos:column="29">0<pos:position pos:line="7" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>

	<for pos:line="9" pos:column="9">for <control pos:line="9" pos:column="13">(<init pos:line="9" pos:column="14">;<pos:position pos:line="9" pos:column="15"/></init><condition pos:line="9" pos:column="15">;<pos:position pos:line="9" pos:column="16"/></condition><incr/>)<pos:position pos:line="9" pos:column="17"/></control> <block pos:line="9" pos:column="18">{
		<decl_stmt><decl><type><specifier pos:line="10" pos:column="17">const<pos:position pos:line="10" pos:column="22"/></specifier> <name pos:line="10" pos:column="23">char<pos:position pos:line="10" pos:column="27"/></name> <modifier pos:line="10" pos:column="28">*<pos:position pos:line="10" pos:column="29"/></modifier></type><name pos:line="10" pos:column="29">name<pos:position pos:line="10" pos:column="33"/></name></decl>, <modifier pos:line="10" pos:column="35">*<pos:position pos:line="10" pos:column="36"/></modifier><decl><type ref="prev"/><name pos:line="10" pos:column="36">line<pos:position pos:line="10" pos:column="40"/></name> <init pos:line="10" pos:column="41">= <expr><operator pos:line="10" pos:column="43">*<pos:position pos:line="10" pos:column="44"/></operator><name pos:line="10" pos:column="44">msg_p<pos:position pos:line="10" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="50"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="11" pos:column="17">int<pos:position pos:line="11" pos:column="20"/></name></type> <name pos:line="11" pos:column="21">linelen<pos:position pos:line="11" pos:column="28"/></name> <init pos:line="11" pos:column="29">= <expr><call><name pos:line="11" pos:column="31">get_one_line<pos:position pos:line="11" pos:column="43"/></name><argument_list pos:line="11" pos:column="43">(<argument><expr><operator pos:line="11" pos:column="44">*<pos:position pos:line="11" pos:column="45"/></operator><name pos:line="11" pos:column="45">msg_p<pos:position pos:line="11" pos:column="50"/></name></expr></argument>)<pos:position pos:line="11" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="52"/></decl_stmt>

		<if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<expr><operator pos:line="13" pos:column="21">!<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">linelen<pos:position pos:line="13" pos:column="29"/></name></expr>)<pos:position pos:line="13" pos:column="30"/></condition><then pos:line="13" pos:column="30">
			<block type="pseudo"><return pos:line="14" pos:column="25">return;<pos:position pos:line="14" pos:column="32"/></return></block></then></if>
		<expr_stmt><expr><operator pos:line="15" pos:column="17">*<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="18">msg_p<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">+=<pos:position pos:line="15" pos:column="26"/></operator> <name pos:line="15" pos:column="27">linelen<pos:position pos:line="15" pos:column="34"/></name></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>

		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">linelen<pos:position pos:line="17" pos:column="28"/></name> <operator pos:line="17" pos:column="29">==<pos:position pos:line="17" pos:column="31"/></operator> <literal type="number" pos:line="17" pos:column="32">1<pos:position pos:line="17" pos:column="33"/></literal></expr>)<pos:position pos:line="17" pos:column="34"/></condition><then pos:line="17" pos:column="34">
			<comment type="block" pos:line="18" pos:column="25">/* End of header */</comment>
			<block type="pseudo"><return pos:line="19" pos:column="25">return;<pos:position pos:line="19" pos:column="32"/></return></block></then></if>

		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name><name pos:line="21" pos:column="21">pp<pos:position pos:line="21" pos:column="23"/></name><operator pos:line="21" pos:column="23">-&gt;<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="25">fmt<pos:position pos:line="21" pos:column="28"/></name></name> <operator pos:line="21" pos:column="29">==<pos:position pos:line="21" pos:column="31"/></operator> <name pos:line="21" pos:column="32">CMIT_FMT_RAW<pos:position pos:line="21" pos:column="44"/></name></expr>)<pos:position pos:line="21" pos:column="45"/></condition><then pos:line="21" pos:column="45"> <block pos:line="21" pos:column="46">{
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">strbuf_add<pos:position pos:line="22" pos:column="35"/></name><argument_list pos:line="22" pos:column="35">(<argument><expr><name pos:line="22" pos:column="36">sb<pos:position pos:line="22" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="40">line<pos:position pos:line="22" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="46">linelen<pos:position pos:line="22" pos:column="53"/></name></expr></argument>)<pos:position pos:line="22" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="55"/></expr_stmt>
			<continue pos:line="23" pos:column="25">continue;<pos:position pos:line="23" pos:column="34"/></continue>
		}<pos:position pos:line="24" pos:column="18"/></block></then></if>

		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><call><name pos:line="26" pos:column="21">starts_with<pos:position pos:line="26" pos:column="32"/></name><argument_list pos:line="26" pos:column="32">(<argument><expr><name pos:line="26" pos:column="33">line<pos:position pos:line="26" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="39">"parent "<pos:position pos:line="26" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="50"/></condition><then pos:line="26" pos:column="50"> <block pos:line="26" pos:column="51">{
			<if pos:line="27" pos:column="25">if <condition pos:line="27" pos:column="28">(<expr><name pos:line="27" pos:column="29">linelen<pos:position pos:line="27" pos:column="36"/></name> <operator pos:line="27" pos:column="37">!=<pos:position pos:line="27" pos:column="39"/></operator> <literal type="number" pos:line="27" pos:column="40">48<pos:position pos:line="27" pos:column="42"/></literal></expr>)<pos:position pos:line="27" pos:column="43"/></condition><then pos:line="27" pos:column="43">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="33">die<pos:position pos:line="28" pos:column="36"/></name><argument_list pos:line="28" pos:column="36">(<argument><expr><literal type="string" pos:line="28" pos:column="37">"bad parent line in commit"<pos:position pos:line="28" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="66"/></expr_stmt></block></then></if>
			<continue pos:line="29" pos:column="25">continue;<pos:position pos:line="29" pos:column="34"/></continue>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if>

		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><operator pos:line="32" pos:column="21">!<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="22">parents_shown<pos:position pos:line="32" pos:column="35"/></name></expr>)<pos:position pos:line="32" pos:column="36"/></condition><then pos:line="32" pos:column="36"> <block pos:line="32" pos:column="37">{
			<decl_stmt><decl><type><name pos:line="33" pos:column="25">unsigned<pos:position pos:line="33" pos:column="33"/></name></type> <name pos:line="33" pos:column="34">num<pos:position pos:line="33" pos:column="37"/></name> <init pos:line="33" pos:column="38">= <expr><call><name pos:line="33" pos:column="40">commit_list_count<pos:position pos:line="33" pos:column="57"/></name><argument_list pos:line="33" pos:column="57">(<argument><expr><name><name pos:line="33" pos:column="58">commit<pos:position pos:line="33" pos:column="64"/></name><operator pos:line="33" pos:column="64">-&gt;<pos:position pos:line="33" pos:column="69"/></operator><name pos:line="33" pos:column="66">parents<pos:position pos:line="33" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="75"/></decl_stmt>
			<comment type="block" pos:line="34" pos:column="25">/* with enough slop */</comment>
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">strbuf_grow<pos:position pos:line="35" pos:column="36"/></name><argument_list pos:line="35" pos:column="36">(<argument><expr><name pos:line="35" pos:column="37">sb<pos:position pos:line="35" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="41">num<pos:position pos:line="35" pos:column="44"/></name> <operator pos:line="35" pos:column="45">*<pos:position pos:line="35" pos:column="46"/></operator> <literal type="number" pos:line="35" pos:column="47">50<pos:position pos:line="35" pos:column="49"/></literal> <operator pos:line="35" pos:column="50">+<pos:position pos:line="35" pos:column="51"/></operator> <literal type="number" pos:line="35" pos:column="52">20<pos:position pos:line="35" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="36" pos:column="25">add_merge_info<pos:position pos:line="36" pos:column="39"/></name><argument_list pos:line="36" pos:column="39">(<argument><expr><name pos:line="36" pos:column="40">pp<pos:position pos:line="36" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="44">sb<pos:position pos:line="36" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="48">commit<pos:position pos:line="36" pos:column="54"/></name></expr></argument>)<pos:position pos:line="36" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="56"/></expr_stmt>
			<expr_stmt><expr><name pos:line="37" pos:column="25">parents_shown<pos:position pos:line="37" pos:column="38"/></name> <operator pos:line="37" pos:column="39">=<pos:position pos:line="37" pos:column="40"/></operator> <literal type="number" pos:line="37" pos:column="41">1<pos:position pos:line="37" pos:column="42"/></literal></expr>;<pos:position pos:line="37" pos:column="43"/></expr_stmt>
		}<pos:position pos:line="38" pos:column="18"/></block></then></if>

		<comment type="block" pos:line="40" pos:column="17">/*
		 * MEDIUM == DEFAULT shows only author with dates.
		 * FULL shows both authors but not dates.
		 * FULLER shows both authors and dates.
		 */</comment>
		<if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><call><name pos:line="45" pos:column="21">skip_prefix<pos:position pos:line="45" pos:column="32"/></name><argument_list pos:line="45" pos:column="32">(<argument><expr><name pos:line="45" pos:column="33">line<pos:position pos:line="45" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="39">"author "<pos:position pos:line="45" pos:column="48"/></literal></expr></argument>, <argument><expr><operator pos:line="45" pos:column="50">&amp;<pos:position pos:line="45" pos:column="55"/></operator><name pos:line="45" pos:column="51">name<pos:position pos:line="45" pos:column="55"/></name></expr></argument>)<pos:position pos:line="45" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="57"/></condition><then pos:line="45" pos:column="57"> <block pos:line="45" pos:column="58">{
			<expr_stmt><expr><call><name pos:line="46" pos:column="25">strbuf_grow<pos:position pos:line="46" pos:column="36"/></name><argument_list pos:line="46" pos:column="36">(<argument><expr><name pos:line="46" pos:column="37">sb<pos:position pos:line="46" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="41">linelen<pos:position pos:line="46" pos:column="48"/></name> <operator pos:line="46" pos:column="49">+<pos:position pos:line="46" pos:column="50"/></operator> <literal type="number" pos:line="46" pos:column="51">80<pos:position pos:line="46" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="47" pos:column="25">pp_user_info<pos:position pos:line="47" pos:column="37"/></name><argument_list pos:line="47" pos:column="37">(<argument><expr><name pos:line="47" pos:column="38">pp<pos:position pos:line="47" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="42">"Author"<pos:position pos:line="47" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="52">sb<pos:position pos:line="47" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="56">name<pos:position pos:line="47" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="62">encoding<pos:position pos:line="47" pos:column="70"/></name></expr></argument>)<pos:position pos:line="47" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="72"/></expr_stmt>
		}<pos:position pos:line="48" pos:column="18"/></block></then></if>
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><call><name pos:line="49" pos:column="21">skip_prefix<pos:position pos:line="49" pos:column="32"/></name><argument_list pos:line="49" pos:column="32">(<argument><expr><name pos:line="49" pos:column="33">line<pos:position pos:line="49" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="39">"committer "<pos:position pos:line="49" pos:column="51"/></literal></expr></argument>, <argument><expr><operator pos:line="49" pos:column="53">&amp;<pos:position pos:line="49" pos:column="58"/></operator><name pos:line="49" pos:column="54">name<pos:position pos:line="49" pos:column="58"/></name></expr></argument>)<pos:position pos:line="49" pos:column="59"/></argument_list></call> <operator pos:line="49" pos:column="60">&amp;&amp;<pos:position pos:line="49" pos:column="70"/></operator>
		    <operator pos:line="50" pos:column="21">(<pos:position pos:line="50" pos:column="22"/></operator><name><name pos:line="50" pos:column="22">pp<pos:position pos:line="50" pos:column="24"/></name><operator pos:line="50" pos:column="24">-&gt;<pos:position pos:line="50" pos:column="29"/></operator><name pos:line="50" pos:column="26">fmt<pos:position pos:line="50" pos:column="29"/></name></name> <operator pos:line="50" pos:column="30">==<pos:position pos:line="50" pos:column="32"/></operator> <name pos:line="50" pos:column="33">CMIT_FMT_FULL<pos:position pos:line="50" pos:column="46"/></name> <operator pos:line="50" pos:column="47">||<pos:position pos:line="50" pos:column="49"/></operator> <name><name pos:line="50" pos:column="50">pp<pos:position pos:line="50" pos:column="52"/></name><operator pos:line="50" pos:column="52">-&gt;<pos:position pos:line="50" pos:column="57"/></operator><name pos:line="50" pos:column="54">fmt<pos:position pos:line="50" pos:column="57"/></name></name> <operator pos:line="50" pos:column="58">==<pos:position pos:line="50" pos:column="60"/></operator> <name pos:line="50" pos:column="61">CMIT_FMT_FULLER<pos:position pos:line="50" pos:column="76"/></name><operator pos:line="50" pos:column="76">)<pos:position pos:line="50" pos:column="77"/></operator></expr>)<pos:position pos:line="50" pos:column="78"/></condition><then pos:line="50" pos:column="78"> <block pos:line="50" pos:column="79">{
			<expr_stmt><expr><call><name pos:line="51" pos:column="25">strbuf_grow<pos:position pos:line="51" pos:column="36"/></name><argument_list pos:line="51" pos:column="36">(<argument><expr><name pos:line="51" pos:column="37">sb<pos:position pos:line="51" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="41">linelen<pos:position pos:line="51" pos:column="48"/></name> <operator pos:line="51" pos:column="49">+<pos:position pos:line="51" pos:column="50"/></operator> <literal type="number" pos:line="51" pos:column="51">80<pos:position pos:line="51" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="52" pos:column="25">pp_user_info<pos:position pos:line="52" pos:column="37"/></name><argument_list pos:line="52" pos:column="37">(<argument><expr><name pos:line="52" pos:column="38">pp<pos:position pos:line="52" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="42">"Commit"<pos:position pos:line="52" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="52">sb<pos:position pos:line="52" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="56">name<pos:position pos:line="52" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="62">encoding<pos:position pos:line="52" pos:column="70"/></name></expr></argument>)<pos:position pos:line="52" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="72"/></expr_stmt>
		}<pos:position pos:line="53" pos:column="18"/></block></then></if>
	}<pos:position pos:line="54" pos:column="10"/></block></for>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
