<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_7000_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">free_dfa_content<pos:position pos:line="2" pos:column="17"/></name> <parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">re_dfa_t<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">dfa<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="33"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">i<pos:position pos:line="4" pos:column="8"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="10">j<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>

  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name><name pos:line="6" pos:column="7">dfa<pos:position pos:line="6" pos:column="10"/></name><operator pos:line="6" pos:column="10">-&gt;<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="12">nodes<pos:position pos:line="6" pos:column="17"/></name></name></expr>)<pos:position pos:line="6" pos:column="18"/></condition><then pos:line="6" pos:column="18">
    <block type="pseudo"><for pos:line="7" pos:column="5">for <control pos:line="7" pos:column="9">(<init><expr><name pos:line="7" pos:column="10">i<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <literal type="number" pos:line="7" pos:column="14">0<pos:position pos:line="7" pos:column="15"/></literal></expr>;<pos:position pos:line="7" pos:column="16"/></init> <condition><expr><name pos:line="7" pos:column="17">i<pos:position pos:line="7" pos:column="18"/></name> <operator pos:line="7" pos:column="19">&lt;<pos:position pos:line="7" pos:column="23"/></operator> <name><name pos:line="7" pos:column="21">dfa<pos:position pos:line="7" pos:column="24"/></name><operator pos:line="7" pos:column="24">-&gt;<pos:position pos:line="7" pos:column="29"/></operator><name pos:line="7" pos:column="26">nodes_len<pos:position pos:line="7" pos:column="35"/></name></name></expr>;<pos:position pos:line="7" pos:column="36"/></condition> <incr><expr><operator pos:line="7" pos:column="37">++<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="39">i<pos:position pos:line="7" pos:column="40"/></name></expr></incr>)<pos:position pos:line="7" pos:column="41"/></control>
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="7">free_token<pos:position pos:line="8" pos:column="17"/></name> <argument_list pos:line="8" pos:column="18">(<argument><expr><name><name pos:line="8" pos:column="19">dfa<pos:position pos:line="8" pos:column="22"/></name><operator pos:line="8" pos:column="22">-&gt;<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="24">nodes<pos:position pos:line="8" pos:column="29"/></name></name> <operator pos:line="8" pos:column="30">+<pos:position pos:line="8" pos:column="31"/></operator> <name pos:line="8" pos:column="32">i<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt></block></for></block></then></if>
  <expr_stmt><expr><call><name pos:line="9" pos:column="3">re_free<pos:position pos:line="9" pos:column="10"/></name> <argument_list pos:line="9" pos:column="11">(<argument><expr><name><name pos:line="9" pos:column="12">dfa<pos:position pos:line="9" pos:column="15"/></name><operator pos:line="9" pos:column="15">-&gt;<pos:position pos:line="9" pos:column="20"/></operator><name pos:line="9" pos:column="17">nexts<pos:position pos:line="9" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="24"/></expr_stmt>
  <for pos:line="10" pos:column="3">for <control pos:line="10" pos:column="7">(<init><expr><name pos:line="10" pos:column="8">i<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <literal type="number" pos:line="10" pos:column="12">0<pos:position pos:line="10" pos:column="13"/></literal></expr>;<pos:position pos:line="10" pos:column="14"/></init> <condition><expr><name pos:line="10" pos:column="15">i<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">&lt;<pos:position pos:line="10" pos:column="21"/></operator> <name><name pos:line="10" pos:column="19">dfa<pos:position pos:line="10" pos:column="22"/></name><operator pos:line="10" pos:column="22">-&gt;<pos:position pos:line="10" pos:column="27"/></operator><name pos:line="10" pos:column="24">nodes_len<pos:position pos:line="10" pos:column="33"/></name></name></expr>;<pos:position pos:line="10" pos:column="34"/></condition> <incr><expr><operator pos:line="10" pos:column="35">++<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="37">i<pos:position pos:line="10" pos:column="38"/></name></expr></incr>)<pos:position pos:line="10" pos:column="39"/></control>
    <block pos:line="11" pos:column="5">{
      <if pos:line="12" pos:column="7">if <condition pos:line="12" pos:column="10">(<expr><name><name pos:line="12" pos:column="11">dfa<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">-&gt;<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="16">eclosures<pos:position pos:line="12" pos:column="25"/></name></name> <operator pos:line="12" pos:column="26">!=<pos:position pos:line="12" pos:column="28"/></operator> <name pos:line="12" pos:column="29">NULL<pos:position pos:line="12" pos:column="33"/></name></expr>)<pos:position pos:line="12" pos:column="34"/></condition><then pos:line="12" pos:column="34">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="9">re_node_set_free<pos:position pos:line="13" pos:column="25"/></name> <argument_list pos:line="13" pos:column="26">(<argument><expr><name><name pos:line="13" pos:column="27">dfa<pos:position pos:line="13" pos:column="30"/></name><operator pos:line="13" pos:column="30">-&gt;<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="32">eclosures<pos:position pos:line="13" pos:column="41"/></name></name> <operator pos:line="13" pos:column="42">+<pos:position pos:line="13" pos:column="43"/></operator> <name pos:line="13" pos:column="44">i<pos:position pos:line="13" pos:column="45"/></name></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="47"/></expr_stmt></block></then></if>
      <if pos:line="14" pos:column="7">if <condition pos:line="14" pos:column="10">(<expr><name><name pos:line="14" pos:column="11">dfa<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">-&gt;<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="16">inveclosures<pos:position pos:line="14" pos:column="28"/></name></name> <operator pos:line="14" pos:column="29">!=<pos:position pos:line="14" pos:column="31"/></operator> <name pos:line="14" pos:column="32">NULL<pos:position pos:line="14" pos:column="36"/></name></expr>)<pos:position pos:line="14" pos:column="37"/></condition><then pos:line="14" pos:column="37">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="9">re_node_set_free<pos:position pos:line="15" pos:column="25"/></name> <argument_list pos:line="15" pos:column="26">(<argument><expr><name><name pos:line="15" pos:column="27">dfa<pos:position pos:line="15" pos:column="30"/></name><operator pos:line="15" pos:column="30">-&gt;<pos:position pos:line="15" pos:column="35"/></operator><name pos:line="15" pos:column="32">inveclosures<pos:position pos:line="15" pos:column="44"/></name></name> <operator pos:line="15" pos:column="45">+<pos:position pos:line="15" pos:column="46"/></operator> <name pos:line="15" pos:column="47">i<pos:position pos:line="15" pos:column="48"/></name></expr></argument>)<pos:position pos:line="15" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="50"/></expr_stmt></block></then></if>
      <if pos:line="16" pos:column="7">if <condition pos:line="16" pos:column="10">(<expr><name><name pos:line="16" pos:column="11">dfa<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">-&gt;<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="16">edests<pos:position pos:line="16" pos:column="22"/></name></name> <operator pos:line="16" pos:column="23">!=<pos:position pos:line="16" pos:column="25"/></operator> <name pos:line="16" pos:column="26">NULL<pos:position pos:line="16" pos:column="30"/></name></expr>)<pos:position pos:line="16" pos:column="31"/></condition><then pos:line="16" pos:column="31">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="9">re_node_set_free<pos:position pos:line="17" pos:column="25"/></name> <argument_list pos:line="17" pos:column="26">(<argument><expr><name><name pos:line="17" pos:column="27">dfa<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">-&gt;<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="32">edests<pos:position pos:line="17" pos:column="38"/></name></name> <operator pos:line="17" pos:column="39">+<pos:position pos:line="17" pos:column="40"/></operator> <name pos:line="17" pos:column="41">i<pos:position pos:line="17" pos:column="42"/></name></expr></argument>)<pos:position pos:line="17" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="44"/></expr_stmt></block></then></if>
    }<pos:position pos:line="18" pos:column="6"/></block></for>
  <expr_stmt><expr><call><name pos:line="19" pos:column="3">re_free<pos:position pos:line="19" pos:column="10"/></name> <argument_list pos:line="19" pos:column="11">(<argument><expr><name><name pos:line="19" pos:column="12">dfa<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">-&gt;<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="17">edests<pos:position pos:line="19" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="20" pos:column="3">re_free<pos:position pos:line="20" pos:column="10"/></name> <argument_list pos:line="20" pos:column="11">(<argument><expr><name><name pos:line="20" pos:column="12">dfa<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">-&gt;<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="17">eclosures<pos:position pos:line="20" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="21" pos:column="3">re_free<pos:position pos:line="21" pos:column="10"/></name> <argument_list pos:line="21" pos:column="11">(<argument><expr><name><name pos:line="21" pos:column="12">dfa<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">-&gt;<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="17">inveclosures<pos:position pos:line="21" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="22" pos:column="3">re_free<pos:position pos:line="22" pos:column="10"/></name> <argument_list pos:line="22" pos:column="11">(<argument><expr><name><name pos:line="22" pos:column="12">dfa<pos:position pos:line="22" pos:column="15"/></name><operator pos:line="22" pos:column="15">-&gt;<pos:position pos:line="22" pos:column="20"/></operator><name pos:line="22" pos:column="17">nodes<pos:position pos:line="22" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="24"/></expr_stmt>

  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><name><name pos:line="24" pos:column="7">dfa<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">-&gt;<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="12">state_table<pos:position pos:line="24" pos:column="23"/></name></name></expr>)<pos:position pos:line="24" pos:column="24"/></condition><then pos:line="24" pos:column="24">
    <block type="pseudo"><for pos:line="25" pos:column="5">for <control pos:line="25" pos:column="9">(<init><expr><name pos:line="25" pos:column="10">i<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <literal type="number" pos:line="25" pos:column="14">0<pos:position pos:line="25" pos:column="15"/></literal></expr>;<pos:position pos:line="25" pos:column="16"/></init> <condition><expr><name pos:line="25" pos:column="17">i<pos:position pos:line="25" pos:column="18"/></name> <operator pos:line="25" pos:column="19">&lt;=<pos:position pos:line="25" pos:column="24"/></operator> <name><name pos:line="25" pos:column="22">dfa<pos:position pos:line="25" pos:column="25"/></name><operator pos:line="25" pos:column="25">-&gt;<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="27">state_hash_mask<pos:position pos:line="25" pos:column="42"/></name></name></expr>;<pos:position pos:line="25" pos:column="43"/></condition> <incr><expr><operator pos:line="25" pos:column="44">++<pos:position pos:line="25" pos:column="46"/></operator><name pos:line="25" pos:column="46">i<pos:position pos:line="25" pos:column="47"/></name></expr></incr>)<pos:position pos:line="25" pos:column="48"/></control>
      <block pos:line="26" pos:column="7">{
	<decl_stmt><decl><type><name><name pos:line="27" pos:column="9">struct<pos:position pos:line="27" pos:column="15"/></name> <name pos:line="27" pos:column="16">re_state_table_entry<pos:position pos:line="27" pos:column="36"/></name></name> <modifier pos:line="27" pos:column="37">*<pos:position pos:line="27" pos:column="38"/></modifier></type><name pos:line="27" pos:column="38">entry<pos:position pos:line="27" pos:column="43"/></name> <init pos:line="27" pos:column="44">= <expr><name><name pos:line="27" pos:column="46">dfa<pos:position pos:line="27" pos:column="49"/></name><operator pos:line="27" pos:column="49">-&gt;<pos:position pos:line="27" pos:column="54"/></operator><name pos:line="27" pos:column="51">state_table<pos:position pos:line="27" pos:column="62"/></name></name> <operator pos:line="27" pos:column="63">+<pos:position pos:line="27" pos:column="64"/></operator> <name pos:line="27" pos:column="65">i<pos:position pos:line="27" pos:column="66"/></name></expr></init></decl>;<pos:position pos:line="27" pos:column="67"/></decl_stmt>
	<for pos:line="28" pos:column="9">for <control pos:line="28" pos:column="13">(<init><expr><name pos:line="28" pos:column="14">j<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <literal type="number" pos:line="28" pos:column="18">0<pos:position pos:line="28" pos:column="19"/></literal></expr>;<pos:position pos:line="28" pos:column="20"/></init> <condition><expr><name pos:line="28" pos:column="21">j<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">&lt;<pos:position pos:line="28" pos:column="27"/></operator> <name><name pos:line="28" pos:column="25">entry<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">-&gt;<pos:position pos:line="28" pos:column="35"/></operator><name pos:line="28" pos:column="32">num<pos:position pos:line="28" pos:column="35"/></name></name></expr>;<pos:position pos:line="28" pos:column="36"/></condition> <incr><expr><operator pos:line="28" pos:column="37">++<pos:position pos:line="28" pos:column="39"/></operator><name pos:line="28" pos:column="39">j<pos:position pos:line="28" pos:column="40"/></name></expr></incr>)<pos:position pos:line="28" pos:column="41"/></control>
	  <block pos:line="29" pos:column="11">{
	    <decl_stmt><decl><type><name pos:line="30" pos:column="13">re_dfastate_t<pos:position pos:line="30" pos:column="26"/></name> <modifier pos:line="30" pos:column="27">*<pos:position pos:line="30" pos:column="28"/></modifier></type><name pos:line="30" pos:column="28">state<pos:position pos:line="30" pos:column="33"/></name> <init pos:line="30" pos:column="34">= <expr><name><name pos:line="30" pos:column="36">entry<pos:position pos:line="30" pos:column="41"/></name><operator pos:line="30" pos:column="41">-&gt;<pos:position pos:line="30" pos:column="46"/></operator><name pos:line="30" pos:column="43">array<pos:position pos:line="30" pos:column="48"/></name><index pos:line="30" pos:column="48">[<expr><name pos:line="30" pos:column="49">j<pos:position pos:line="30" pos:column="50"/></name></expr>]<pos:position pos:line="30" pos:column="51"/></index></name></expr></init></decl>;<pos:position pos:line="30" pos:column="52"/></decl_stmt>
	    <expr_stmt><expr><call><name pos:line="31" pos:column="13">free_state<pos:position pos:line="31" pos:column="23"/></name> <argument_list pos:line="31" pos:column="24">(<argument><expr><name pos:line="31" pos:column="25">state<pos:position pos:line="31" pos:column="30"/></name></expr></argument>)<pos:position pos:line="31" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="32"/></expr_stmt>
	  }<pos:position pos:line="32" pos:column="12"/></block></for>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">re_free<pos:position pos:line="33" pos:column="16"/></name> <argument_list pos:line="33" pos:column="17">(<argument><expr><name><name pos:line="33" pos:column="18">entry<pos:position pos:line="33" pos:column="23"/></name><operator pos:line="33" pos:column="23">-&gt;<pos:position pos:line="33" pos:column="28"/></operator><name pos:line="33" pos:column="25">array<pos:position pos:line="33" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>
      }<pos:position pos:line="34" pos:column="8"/></block></for></block></then></if>
  <expr_stmt><expr><call><name pos:line="35" pos:column="3">re_free<pos:position pos:line="35" pos:column="10"/></name> <argument_list pos:line="35" pos:column="11">(<argument><expr><name><name pos:line="35" pos:column="12">dfa<pos:position pos:line="35" pos:column="15"/></name><operator pos:line="35" pos:column="15">-&gt;<pos:position pos:line="35" pos:column="20"/></operator><name pos:line="35" pos:column="17">state_table<pos:position pos:line="35" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="30"/></expr_stmt>
<cpp:ifdef pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">ifdef<pos:position pos:line="36" pos:column="7"/></cpp:directive> <name pos:line="36" pos:column="8">RE_ENABLE_I18N<pos:position pos:line="36" pos:column="22"/></name></cpp:ifdef>
  <if pos:line="37" pos:column="3">if <condition pos:line="37" pos:column="6">(<expr><name><name pos:line="37" pos:column="7">dfa<pos:position pos:line="37" pos:column="10"/></name><operator pos:line="37" pos:column="10">-&gt;<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="12">sb_char<pos:position pos:line="37" pos:column="19"/></name></name> <operator pos:line="37" pos:column="20">!=<pos:position pos:line="37" pos:column="22"/></operator> <name pos:line="37" pos:column="23">utf8_sb_map<pos:position pos:line="37" pos:column="34"/></name></expr>)<pos:position pos:line="37" pos:column="35"/></condition><then pos:line="37" pos:column="35">
    <block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="5">re_free<pos:position pos:line="38" pos:column="12"/></name> <argument_list pos:line="38" pos:column="13">(<argument><expr><name><name pos:line="38" pos:column="14">dfa<pos:position pos:line="38" pos:column="17"/></name><operator pos:line="38" pos:column="17">-&gt;<pos:position pos:line="38" pos:column="22"/></operator><name pos:line="38" pos:column="19">sb_char<pos:position pos:line="38" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="28"/></expr_stmt></block></then></if>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name pos:line="40" pos:column="3">re_free<pos:position pos:line="40" pos:column="10"/></name> <argument_list pos:line="40" pos:column="11">(<argument><expr><name><name pos:line="40" pos:column="12">dfa<pos:position pos:line="40" pos:column="15"/></name><operator pos:line="40" pos:column="15">-&gt;<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="17">subexp_map<pos:position pos:line="40" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="29"/></expr_stmt>
<cpp:ifdef pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">ifdef<pos:position pos:line="41" pos:column="7"/></cpp:directive> <name pos:line="41" pos:column="8">DEBUG<pos:position pos:line="41" pos:column="13"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="42" pos:column="3">re_free<pos:position pos:line="42" pos:column="10"/></name> <argument_list pos:line="42" pos:column="11">(<argument><expr><name><name pos:line="42" pos:column="12">dfa<pos:position pos:line="42" pos:column="15"/></name><operator pos:line="42" pos:column="15">-&gt;<pos:position pos:line="42" pos:column="20"/></operator><name pos:line="42" pos:column="17">re_str<pos:position pos:line="42" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name pos:line="45" pos:column="3">re_free<pos:position pos:line="45" pos:column="10"/></name> <argument_list pos:line="45" pos:column="11">(<argument><expr><name pos:line="45" pos:column="12">dfa<pos:position pos:line="45" pos:column="15"/></name></expr></argument>)<pos:position pos:line="45" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="17"/></expr_stmt>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
