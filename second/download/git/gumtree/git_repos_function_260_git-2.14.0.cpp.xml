<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_260_git-2.14.0.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">prepare_bitmap_walk<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name><name pos:line="1" pos:column="25">struct<pos:position pos:line="1" pos:column="31"/></name> <name pos:line="1" pos:column="32">rev_info<pos:position pos:line="1" pos:column="40"/></name></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">revs<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="47"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">int<pos:position pos:line="3" pos:column="21"/></name></type> <name pos:line="3" pos:column="22">i<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">int<pos:position pos:line="4" pos:column="21"/></name></type> <name pos:line="4" pos:column="22">pending_nr<pos:position pos:line="4" pos:column="32"/></name> <init pos:line="4" pos:column="33">= <expr><name><name pos:line="4" pos:column="35">revs<pos:position pos:line="4" pos:column="39"/></name><operator pos:line="4" pos:column="39">-&gt;<pos:position pos:line="4" pos:column="44"/></operator><name pos:line="4" pos:column="41">pending<pos:position pos:line="4" pos:column="48"/></name><operator pos:line="4" pos:column="48">.<pos:position pos:line="4" pos:column="49"/></operator><name pos:line="4" pos:column="49">nr<pos:position pos:line="4" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="52"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">object_array_entry<pos:position pos:line="5" pos:column="34"/></name></name> <modifier pos:line="5" pos:column="35">*<pos:position pos:line="5" pos:column="36"/></modifier></type><name pos:line="5" pos:column="36">pending_e<pos:position pos:line="5" pos:column="45"/></name> <init pos:line="5" pos:column="46">= <expr><name><name pos:line="5" pos:column="48">revs<pos:position pos:line="5" pos:column="52"/></name><operator pos:line="5" pos:column="52">-&gt;<pos:position pos:line="5" pos:column="57"/></operator><name pos:line="5" pos:column="54">pending<pos:position pos:line="5" pos:column="61"/></name><operator pos:line="5" pos:column="61">.<pos:position pos:line="5" pos:column="62"/></operator><name pos:line="5" pos:column="62">objects<pos:position pos:line="5" pos:column="69"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="70"/></decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">object_list<pos:position pos:line="7" pos:column="27"/></name></name> <modifier pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></modifier></type><name pos:line="7" pos:column="29">wants<pos:position pos:line="7" pos:column="34"/></name> <init pos:line="7" pos:column="35">= <expr><name pos:line="7" pos:column="37">NULL<pos:position pos:line="7" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">object_list<pos:position pos:line="8" pos:column="27"/></name></name> <modifier pos:line="8" pos:column="28">*<pos:position pos:line="8" pos:column="29"/></modifier></type><name pos:line="8" pos:column="29">haves<pos:position pos:line="8" pos:column="34"/></name> <init pos:line="8" pos:column="35">= <expr><name pos:line="8" pos:column="37">NULL<pos:position pos:line="8" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="42"/></decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">bitmap<pos:position pos:line="10" pos:column="22"/></name></name> <modifier pos:line="10" pos:column="23">*<pos:position pos:line="10" pos:column="24"/></modifier></type><name pos:line="10" pos:column="24">wants_bitmap<pos:position pos:line="10" pos:column="36"/></name> <init pos:line="10" pos:column="37">= <expr><name pos:line="10" pos:column="39">NULL<pos:position pos:line="10" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">bitmap<pos:position pos:line="11" pos:column="22"/></name></name> <modifier pos:line="11" pos:column="23">*<pos:position pos:line="11" pos:column="24"/></modifier></type><name pos:line="11" pos:column="24">haves_bitmap<pos:position pos:line="11" pos:column="36"/></name> <init pos:line="11" pos:column="37">= <expr><name pos:line="11" pos:column="39">NULL<pos:position pos:line="11" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="44"/></decl_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><name><name pos:line="13" pos:column="14">bitmap_git<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">.<pos:position pos:line="13" pos:column="25"/></operator><name pos:line="13" pos:column="25">loaded<pos:position pos:line="13" pos:column="31"/></name></name></expr>)<pos:position pos:line="13" pos:column="32"/></condition><then pos:line="13" pos:column="32"> <block pos:line="13" pos:column="33">{
		<comment type="block" pos:line="14" pos:column="17">/* try to open a bitmapped pack, but don't parse it yet
		 * because we may not need to use it */</comment>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><call><name pos:line="16" pos:column="21">open_pack_bitmap<pos:position pos:line="16" pos:column="37"/></name><argument_list pos:line="16" pos:column="37">()<pos:position pos:line="16" pos:column="39"/></argument_list></call> <operator pos:line="16" pos:column="40">&lt;<pos:position pos:line="16" pos:column="44"/></operator> <literal type="number" pos:line="16" pos:column="42">0<pos:position pos:line="16" pos:column="43"/></literal></expr>)<pos:position pos:line="16" pos:column="44"/></condition><then pos:line="16" pos:column="44">
			<block type="pseudo"><return pos:line="17" pos:column="25">return <expr><operator pos:line="17" pos:column="32">-<pos:position pos:line="17" pos:column="33"/></operator><literal type="number" pos:line="17" pos:column="33">1<pos:position pos:line="17" pos:column="34"/></literal></expr>;<pos:position pos:line="17" pos:column="35"/></return></block></then></if>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>

	<for pos:line="20" pos:column="9">for <control pos:line="20" pos:column="13">(<init><expr><name pos:line="20" pos:column="14">i<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <literal type="number" pos:line="20" pos:column="18">0<pos:position pos:line="20" pos:column="19"/></literal></expr>;<pos:position pos:line="20" pos:column="20"/></init> <condition><expr><name pos:line="20" pos:column="21">i<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">&lt;<pos:position pos:line="20" pos:column="27"/></operator> <name pos:line="20" pos:column="25">pending_nr<pos:position pos:line="20" pos:column="35"/></name></expr>;<pos:position pos:line="20" pos:column="36"/></condition> <incr><expr><operator pos:line="20" pos:column="37">++<pos:position pos:line="20" pos:column="39"/></operator><name pos:line="20" pos:column="39">i<pos:position pos:line="20" pos:column="40"/></name></expr></incr>)<pos:position pos:line="20" pos:column="41"/></control> <block pos:line="20" pos:column="42">{
		<decl_stmt><decl><type><name><name pos:line="21" pos:column="17">struct<pos:position pos:line="21" pos:column="23"/></name> <name pos:line="21" pos:column="24">object<pos:position pos:line="21" pos:column="30"/></name></name> <modifier pos:line="21" pos:column="31">*<pos:position pos:line="21" pos:column="32"/></modifier></type><name pos:line="21" pos:column="32">object<pos:position pos:line="21" pos:column="38"/></name> <init pos:line="21" pos:column="39">= <expr><name><name pos:line="21" pos:column="41">pending_e<pos:position pos:line="21" pos:column="50"/></name><index pos:line="21" pos:column="50">[<expr><name pos:line="21" pos:column="51">i<pos:position pos:line="21" pos:column="52"/></name></expr>]<pos:position pos:line="21" pos:column="53"/></index></name><operator pos:line="21" pos:column="53">.<pos:position pos:line="21" pos:column="54"/></operator><name pos:line="21" pos:column="54">item<pos:position pos:line="21" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="59"/></decl_stmt>

		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name><name pos:line="23" pos:column="21">object<pos:position pos:line="23" pos:column="27"/></name><operator pos:line="23" pos:column="27">-&gt;<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="29">type<pos:position pos:line="23" pos:column="33"/></name></name> <operator pos:line="23" pos:column="34">==<pos:position pos:line="23" pos:column="36"/></operator> <name pos:line="23" pos:column="37">OBJ_NONE<pos:position pos:line="23" pos:column="45"/></name></expr>)<pos:position pos:line="23" pos:column="46"/></condition><then pos:line="23" pos:column="46">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="25">parse_object_or_die<pos:position pos:line="24" pos:column="44"/></name><argument_list pos:line="24" pos:column="44">(<argument><expr><operator pos:line="24" pos:column="45">&amp;<pos:position pos:line="24" pos:column="50"/></operator><name><name pos:line="24" pos:column="46">object<pos:position pos:line="24" pos:column="52"/></name><operator pos:line="24" pos:column="52">-&gt;<pos:position pos:line="24" pos:column="57"/></operator><name pos:line="24" pos:column="54">oid<pos:position pos:line="24" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="59">NULL<pos:position pos:line="24" pos:column="63"/></name></expr></argument>)<pos:position pos:line="24" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="65"/></expr_stmt></block></then></if>

		<while pos:line="26" pos:column="17">while <condition pos:line="26" pos:column="23">(<expr><name><name pos:line="26" pos:column="24">object<pos:position pos:line="26" pos:column="30"/></name><operator pos:line="26" pos:column="30">-&gt;<pos:position pos:line="26" pos:column="35"/></operator><name pos:line="26" pos:column="32">type<pos:position pos:line="26" pos:column="36"/></name></name> <operator pos:line="26" pos:column="37">==<pos:position pos:line="26" pos:column="39"/></operator> <name pos:line="26" pos:column="40">OBJ_TAG<pos:position pos:line="26" pos:column="47"/></name></expr>)<pos:position pos:line="26" pos:column="48"/></condition> <block pos:line="26" pos:column="49">{
			<decl_stmt><decl><type><name><name pos:line="27" pos:column="25">struct<pos:position pos:line="27" pos:column="31"/></name> <name pos:line="27" pos:column="32">tag<pos:position pos:line="27" pos:column="35"/></name></name> <modifier pos:line="27" pos:column="36">*<pos:position pos:line="27" pos:column="37"/></modifier></type><name pos:line="27" pos:column="37">tag<pos:position pos:line="27" pos:column="40"/></name> <init pos:line="27" pos:column="41">= <expr><operator pos:line="27" pos:column="43">(<pos:position pos:line="27" pos:column="44"/></operator>struct <name pos:line="27" pos:column="51">tag<pos:position pos:line="27" pos:column="54"/></name> <operator pos:line="27" pos:column="55">*<pos:position pos:line="27" pos:column="56"/></operator><operator pos:line="27" pos:column="56">)<pos:position pos:line="27" pos:column="57"/></operator> <name pos:line="27" pos:column="58">object<pos:position pos:line="27" pos:column="64"/></name></expr></init></decl>;<pos:position pos:line="27" pos:column="65"/></decl_stmt>

			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><name><name pos:line="29" pos:column="29">object<pos:position pos:line="29" pos:column="35"/></name><operator pos:line="29" pos:column="35">-&gt;<pos:position pos:line="29" pos:column="40"/></operator><name pos:line="29" pos:column="37">flags<pos:position pos:line="29" pos:column="42"/></name></name> <operator pos:line="29" pos:column="43">&amp;<pos:position pos:line="29" pos:column="48"/></operator> <name pos:line="29" pos:column="45">UNINTERESTING<pos:position pos:line="29" pos:column="58"/></name></expr>)<pos:position pos:line="29" pos:column="59"/></condition><then pos:line="29" pos:column="59">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="33">object_list_insert<pos:position pos:line="30" pos:column="51"/></name><argument_list pos:line="30" pos:column="51">(<argument><expr><name pos:line="30" pos:column="52">object<pos:position pos:line="30" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="60">&amp;<pos:position pos:line="30" pos:column="65"/></operator><name pos:line="30" pos:column="61">haves<pos:position pos:line="30" pos:column="66"/></name></expr></argument>)<pos:position pos:line="30" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="68"/></expr_stmt></block></then>
			<else pos:line="31" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="32" pos:column="33">object_list_insert<pos:position pos:line="32" pos:column="51"/></name><argument_list pos:line="32" pos:column="51">(<argument><expr><name pos:line="32" pos:column="52">object<pos:position pos:line="32" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="60">&amp;<pos:position pos:line="32" pos:column="65"/></operator><name pos:line="32" pos:column="61">wants<pos:position pos:line="32" pos:column="66"/></name></expr></argument>)<pos:position pos:line="32" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="68"/></expr_stmt></block></else></if>

			<if pos:line="34" pos:column="25">if <condition pos:line="34" pos:column="28">(<expr><operator pos:line="34" pos:column="29">!<pos:position pos:line="34" pos:column="30"/></operator><name><name pos:line="34" pos:column="30">tag<pos:position pos:line="34" pos:column="33"/></name><operator pos:line="34" pos:column="33">-&gt;<pos:position pos:line="34" pos:column="38"/></operator><name pos:line="34" pos:column="35">tagged<pos:position pos:line="34" pos:column="41"/></name></name></expr>)<pos:position pos:line="34" pos:column="42"/></condition><then pos:line="34" pos:column="42">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="33">die<pos:position pos:line="35" pos:column="36"/></name><argument_list pos:line="35" pos:column="36">(<argument><expr><literal type="string" pos:line="35" pos:column="37">"bad tag"<pos:position pos:line="35" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="48"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="36" pos:column="25">object<pos:position pos:line="36" pos:column="31"/></name> <operator pos:line="36" pos:column="32">=<pos:position pos:line="36" pos:column="33"/></operator> <call><name pos:line="36" pos:column="34">parse_object_or_die<pos:position pos:line="36" pos:column="53"/></name><argument_list pos:line="36" pos:column="53">(<argument><expr><operator pos:line="36" pos:column="54">&amp;<pos:position pos:line="36" pos:column="59"/></operator><name><name pos:line="36" pos:column="55">tag<pos:position pos:line="36" pos:column="58"/></name><operator pos:line="36" pos:column="58">-&gt;<pos:position pos:line="36" pos:column="63"/></operator><name pos:line="36" pos:column="60">tagged<pos:position pos:line="36" pos:column="66"/></name><operator pos:line="36" pos:column="66">-&gt;<pos:position pos:line="36" pos:column="71"/></operator><name pos:line="36" pos:column="68">oid<pos:position pos:line="36" pos:column="71"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="73">NULL<pos:position pos:line="36" pos:column="77"/></name></expr></argument>)<pos:position pos:line="36" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="79"/></expr_stmt>
		}<pos:position pos:line="37" pos:column="18"/></block></while>

		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><name><name pos:line="39" pos:column="21">object<pos:position pos:line="39" pos:column="27"/></name><operator pos:line="39" pos:column="27">-&gt;<pos:position pos:line="39" pos:column="32"/></operator><name pos:line="39" pos:column="29">flags<pos:position pos:line="39" pos:column="34"/></name></name> <operator pos:line="39" pos:column="35">&amp;<pos:position pos:line="39" pos:column="40"/></operator> <name pos:line="39" pos:column="37">UNINTERESTING<pos:position pos:line="39" pos:column="50"/></name></expr>)<pos:position pos:line="39" pos:column="51"/></condition><then pos:line="39" pos:column="51">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="25">object_list_insert<pos:position pos:line="40" pos:column="43"/></name><argument_list pos:line="40" pos:column="43">(<argument><expr><name pos:line="40" pos:column="44">object<pos:position pos:line="40" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="52">&amp;<pos:position pos:line="40" pos:column="57"/></operator><name pos:line="40" pos:column="53">haves<pos:position pos:line="40" pos:column="58"/></name></expr></argument>)<pos:position pos:line="40" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="60"/></expr_stmt></block></then>
		<else pos:line="41" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="25">object_list_insert<pos:position pos:line="42" pos:column="43"/></name><argument_list pos:line="42" pos:column="43">(<argument><expr><name pos:line="42" pos:column="44">object<pos:position pos:line="42" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="52">&amp;<pos:position pos:line="42" pos:column="57"/></operator><name pos:line="42" pos:column="53">wants<pos:position pos:line="42" pos:column="58"/></name></expr></argument>)<pos:position pos:line="42" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="60"/></expr_stmt></block></else></if>
	}<pos:position pos:line="43" pos:column="10"/></block></for>

	<comment type="block" pos:line="45" pos:column="9">/*
	 * if we have a HAVES list, but none of those haves is contained
	 * in the packfile that has a bitmap, we don't have anything to
	 * optimize here
	 */</comment>
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">haves<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">&amp;&amp;<pos:position pos:line="50" pos:column="29"/></operator> <operator pos:line="50" pos:column="22">!<pos:position pos:line="50" pos:column="23"/></operator><call><name pos:line="50" pos:column="23">in_bitmapped_pack<pos:position pos:line="50" pos:column="40"/></name><argument_list pos:line="50" pos:column="40">(<argument><expr><name pos:line="50" pos:column="41">haves<pos:position pos:line="50" pos:column="46"/></name></expr></argument>)<pos:position pos:line="50" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="48"/></condition><then pos:line="50" pos:column="48">
		<block type="pseudo"><return pos:line="51" pos:column="17">return <expr><operator pos:line="51" pos:column="24">-<pos:position pos:line="51" pos:column="25"/></operator><literal type="number" pos:line="51" pos:column="25">1<pos:position pos:line="51" pos:column="26"/></literal></expr>;<pos:position pos:line="51" pos:column="27"/></return></block></then></if>

	<comment type="block" pos:line="53" pos:column="9">/* if we don't want anything, we're done here */</comment>
	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><operator pos:line="54" pos:column="13">!<pos:position pos:line="54" pos:column="14"/></operator><name pos:line="54" pos:column="14">wants<pos:position pos:line="54" pos:column="19"/></name></expr>)<pos:position pos:line="54" pos:column="20"/></condition><then pos:line="54" pos:column="20">
		<block type="pseudo"><return pos:line="55" pos:column="17">return <expr><operator pos:line="55" pos:column="24">-<pos:position pos:line="55" pos:column="25"/></operator><literal type="number" pos:line="55" pos:column="25">1<pos:position pos:line="55" pos:column="26"/></literal></expr>;<pos:position pos:line="55" pos:column="27"/></return></block></then></if>

	<comment type="block" pos:line="57" pos:column="9">/*
	 * now we're going to use bitmaps, so load the actual bitmap entries
	 * from disk. this is the point of no return; after this the rev_list
	 * becomes invalidated and we must perform the revwalk through bitmaps
	 */</comment>
	<if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><operator pos:line="62" pos:column="13">!<pos:position pos:line="62" pos:column="14"/></operator><name><name pos:line="62" pos:column="14">bitmap_git<pos:position pos:line="62" pos:column="24"/></name><operator pos:line="62" pos:column="24">.<pos:position pos:line="62" pos:column="25"/></operator><name pos:line="62" pos:column="25">loaded<pos:position pos:line="62" pos:column="31"/></name></name> <operator pos:line="62" pos:column="32">&amp;&amp;<pos:position pos:line="62" pos:column="42"/></operator> <call><name pos:line="62" pos:column="35">load_pack_bitmap<pos:position pos:line="62" pos:column="51"/></name><argument_list pos:line="62" pos:column="51">()<pos:position pos:line="62" pos:column="53"/></argument_list></call> <operator pos:line="62" pos:column="54">&lt;<pos:position pos:line="62" pos:column="58"/></operator> <literal type="number" pos:line="62" pos:column="56">0<pos:position pos:line="62" pos:column="57"/></literal></expr>)<pos:position pos:line="62" pos:column="58"/></condition><then pos:line="62" pos:column="58">
		<block type="pseudo"><return pos:line="63" pos:column="17">return <expr><operator pos:line="63" pos:column="24">-<pos:position pos:line="63" pos:column="25"/></operator><literal type="number" pos:line="63" pos:column="25">1<pos:position pos:line="63" pos:column="26"/></literal></expr>;<pos:position pos:line="63" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><name><name pos:line="65" pos:column="9">revs<pos:position pos:line="65" pos:column="13"/></name><operator pos:line="65" pos:column="13">-&gt;<pos:position pos:line="65" pos:column="18"/></operator><name pos:line="65" pos:column="15">pending<pos:position pos:line="65" pos:column="22"/></name><operator pos:line="65" pos:column="22">.<pos:position pos:line="65" pos:column="23"/></operator><name pos:line="65" pos:column="23">nr<pos:position pos:line="65" pos:column="25"/></name></name> <operator pos:line="65" pos:column="26">=<pos:position pos:line="65" pos:column="27"/></operator> <literal type="number" pos:line="65" pos:column="28">0<pos:position pos:line="65" pos:column="29"/></literal></expr>;<pos:position pos:line="65" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="66" pos:column="9">revs<pos:position pos:line="66" pos:column="13"/></name><operator pos:line="66" pos:column="13">-&gt;<pos:position pos:line="66" pos:column="18"/></operator><name pos:line="66" pos:column="15">pending<pos:position pos:line="66" pos:column="22"/></name><operator pos:line="66" pos:column="22">.<pos:position pos:line="66" pos:column="23"/></operator><name pos:line="66" pos:column="23">alloc<pos:position pos:line="66" pos:column="28"/></name></name> <operator pos:line="66" pos:column="29">=<pos:position pos:line="66" pos:column="30"/></operator> <literal type="number" pos:line="66" pos:column="31">0<pos:position pos:line="66" pos:column="32"/></literal></expr>;<pos:position pos:line="66" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="67" pos:column="9">revs<pos:position pos:line="67" pos:column="13"/></name><operator pos:line="67" pos:column="13">-&gt;<pos:position pos:line="67" pos:column="18"/></operator><name pos:line="67" pos:column="15">pending<pos:position pos:line="67" pos:column="22"/></name><operator pos:line="67" pos:column="22">.<pos:position pos:line="67" pos:column="23"/></operator><name pos:line="67" pos:column="23">objects<pos:position pos:line="67" pos:column="30"/></name></name> <operator pos:line="67" pos:column="31">=<pos:position pos:line="67" pos:column="32"/></operator> <name pos:line="67" pos:column="33">NULL<pos:position pos:line="67" pos:column="37"/></name></expr>;<pos:position pos:line="67" pos:column="38"/></expr_stmt>

	<if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name pos:line="69" pos:column="13">haves<pos:position pos:line="69" pos:column="18"/></name></expr>)<pos:position pos:line="69" pos:column="19"/></condition><then pos:line="69" pos:column="19"> <block pos:line="69" pos:column="20">{
		<expr_stmt><expr><name><name pos:line="70" pos:column="17">revs<pos:position pos:line="70" pos:column="21"/></name><operator pos:line="70" pos:column="21">-&gt;<pos:position pos:line="70" pos:column="26"/></operator><name pos:line="70" pos:column="23">ignore_missing_links<pos:position pos:line="70" pos:column="43"/></name></name> <operator pos:line="70" pos:column="44">=<pos:position pos:line="70" pos:column="45"/></operator> <literal type="number" pos:line="70" pos:column="46">1<pos:position pos:line="70" pos:column="47"/></literal></expr>;<pos:position pos:line="70" pos:column="48"/></expr_stmt>
		<expr_stmt><expr><name pos:line="71" pos:column="17">haves_bitmap<pos:position pos:line="71" pos:column="29"/></name> <operator pos:line="71" pos:column="30">=<pos:position pos:line="71" pos:column="31"/></operator> <call><name pos:line="71" pos:column="32">find_objects<pos:position pos:line="71" pos:column="44"/></name><argument_list pos:line="71" pos:column="44">(<argument><expr><name pos:line="71" pos:column="45">revs<pos:position pos:line="71" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="51">haves<pos:position pos:line="71" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="58">NULL<pos:position pos:line="71" pos:column="62"/></name></expr></argument>)<pos:position pos:line="71" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="72" pos:column="17">reset_revision_walk<pos:position pos:line="72" pos:column="36"/></name><argument_list pos:line="72" pos:column="36">()<pos:position pos:line="72" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="39"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="73" pos:column="17">revs<pos:position pos:line="73" pos:column="21"/></name><operator pos:line="73" pos:column="21">-&gt;<pos:position pos:line="73" pos:column="26"/></operator><name pos:line="73" pos:column="23">ignore_missing_links<pos:position pos:line="73" pos:column="43"/></name></name> <operator pos:line="73" pos:column="44">=<pos:position pos:line="73" pos:column="45"/></operator> <literal type="number" pos:line="73" pos:column="46">0<pos:position pos:line="73" pos:column="47"/></literal></expr>;<pos:position pos:line="73" pos:column="48"/></expr_stmt>

		<if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><name pos:line="75" pos:column="21">haves_bitmap<pos:position pos:line="75" pos:column="33"/></name> <operator pos:line="75" pos:column="34">==<pos:position pos:line="75" pos:column="36"/></operator> <name pos:line="75" pos:column="37">NULL<pos:position pos:line="75" pos:column="41"/></name></expr>)<pos:position pos:line="75" pos:column="42"/></condition><then pos:line="75" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="76" pos:column="25">die<pos:position pos:line="76" pos:column="28"/></name><argument_list pos:line="76" pos:column="28">(<argument><expr><literal type="string" pos:line="76" pos:column="29">"BUG: failed to perform bitmap walk"<pos:position pos:line="76" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="67"/></expr_stmt></block></then></if>
	}<pos:position pos:line="77" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="79" pos:column="9">wants_bitmap<pos:position pos:line="79" pos:column="21"/></name> <operator pos:line="79" pos:column="22">=<pos:position pos:line="79" pos:column="23"/></operator> <call><name pos:line="79" pos:column="24">find_objects<pos:position pos:line="79" pos:column="36"/></name><argument_list pos:line="79" pos:column="36">(<argument><expr><name pos:line="79" pos:column="37">revs<pos:position pos:line="79" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="43">wants<pos:position pos:line="79" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="50">haves_bitmap<pos:position pos:line="79" pos:column="62"/></name></expr></argument>)<pos:position pos:line="79" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="64"/></expr_stmt>

	<if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><operator pos:line="81" pos:column="13">!<pos:position pos:line="81" pos:column="14"/></operator><name pos:line="81" pos:column="14">wants_bitmap<pos:position pos:line="81" pos:column="26"/></name></expr>)<pos:position pos:line="81" pos:column="27"/></condition><then pos:line="81" pos:column="27">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="82" pos:column="17">die<pos:position pos:line="82" pos:column="20"/></name><argument_list pos:line="82" pos:column="20">(<argument><expr><literal type="string" pos:line="82" pos:column="21">"BUG: failed to perform bitmap walk"<pos:position pos:line="82" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="59"/></expr_stmt></block></then></if>

	<if pos:line="84" pos:column="9">if <condition pos:line="84" pos:column="12">(<expr><name pos:line="84" pos:column="13">haves_bitmap<pos:position pos:line="84" pos:column="25"/></name></expr>)<pos:position pos:line="84" pos:column="26"/></condition><then pos:line="84" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="85" pos:column="17">bitmap_and_not<pos:position pos:line="85" pos:column="31"/></name><argument_list pos:line="85" pos:column="31">(<argument><expr><name pos:line="85" pos:column="32">wants_bitmap<pos:position pos:line="85" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="46">haves_bitmap<pos:position pos:line="85" pos:column="58"/></name></expr></argument>)<pos:position pos:line="85" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="60"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name><name pos:line="87" pos:column="9">bitmap_git<pos:position pos:line="87" pos:column="19"/></name><operator pos:line="87" pos:column="19">.<pos:position pos:line="87" pos:column="20"/></operator><name pos:line="87" pos:column="20">result<pos:position pos:line="87" pos:column="26"/></name></name> <operator pos:line="87" pos:column="27">=<pos:position pos:line="87" pos:column="28"/></operator> <name pos:line="87" pos:column="29">wants_bitmap<pos:position pos:line="87" pos:column="41"/></name></expr>;<pos:position pos:line="87" pos:column="42"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="89" pos:column="9">bitmap_free<pos:position pos:line="89" pos:column="20"/></name><argument_list pos:line="89" pos:column="20">(<argument><expr><name pos:line="89" pos:column="21">haves_bitmap<pos:position pos:line="89" pos:column="33"/></name></expr></argument>)<pos:position pos:line="89" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="35"/></expr_stmt>
	<return pos:line="90" pos:column="9">return <expr><literal type="number" pos:line="90" pos:column="16">0<pos:position pos:line="90" pos:column="17"/></literal></expr>;<pos:position pos:line="90" pos:column="18"/></return>
}<pos:position pos:line="91" pos:column="2"/></block></function></unit>
