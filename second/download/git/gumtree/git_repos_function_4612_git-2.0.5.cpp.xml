<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4612_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">batch_one_object<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><specifier pos:line="1" pos:column="29">const<pos:position pos:line="1" pos:column="34"/></specifier> <name pos:line="1" pos:column="35">char<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">obj_name<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="51">struct<pos:position pos:line="1" pos:column="57"/></name> <name pos:line="1" pos:column="58">batch_options<pos:position pos:line="1" pos:column="71"/></name></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">opt<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
			    <parameter><decl><type><name><name pos:line="2" pos:column="29">struct<pos:position pos:line="2" pos:column="35"/></name> <name pos:line="2" pos:column="36">expand_data<pos:position pos:line="2" pos:column="47"/></name></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">data<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">buf<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><name pos:line="4" pos:column="29">STRBUF_INIT<pos:position pos:line="4" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>

	<if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><operator pos:line="6" pos:column="13">!<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">obj_name<pos:position pos:line="6" pos:column="22"/></name></expr>)<pos:position pos:line="6" pos:column="23"/></condition><then pos:line="6" pos:column="23">
	   <block type="pseudo"><return pos:line="7" pos:column="12">return <expr><literal type="number" pos:line="7" pos:column="19">1<pos:position pos:line="7" pos:column="20"/></literal></expr>;<pos:position pos:line="7" pos:column="21"/></return></block></then></if>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">get_sha1<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><name pos:line="9" pos:column="22">obj_name<pos:position pos:line="9" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="32">data<pos:position pos:line="9" pos:column="36"/></name><operator pos:line="9" pos:column="36">-&gt;<pos:position pos:line="9" pos:column="41"/></operator><name pos:line="9" pos:column="38">sha1<pos:position pos:line="9" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="44"/></condition><then pos:line="9" pos:column="44"> <block pos:line="9" pos:column="45">{
		<expr_stmt><expr><call><name pos:line="10" pos:column="17">printf<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><literal type="string" pos:line="10" pos:column="24">"%s missing\n"<pos:position pos:line="10" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="40">obj_name<pos:position pos:line="10" pos:column="48"/></name></expr></argument>)<pos:position pos:line="10" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">fflush<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">stdout<pos:position pos:line="11" pos:column="30"/></name></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="32"/></expr_stmt>
		<return pos:line="12" pos:column="17">return <expr><literal type="number" pos:line="12" pos:column="24">0<pos:position pos:line="12" pos:column="25"/></literal></expr>;<pos:position pos:line="12" pos:column="26"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">sha1_object_info_extended<pos:position pos:line="15" pos:column="38"/></name><argument_list pos:line="15" pos:column="38">(<argument><expr><name><name pos:line="15" pos:column="39">data<pos:position pos:line="15" pos:column="43"/></name><operator pos:line="15" pos:column="43">-&gt;<pos:position pos:line="15" pos:column="48"/></operator><name pos:line="15" pos:column="45">sha1<pos:position pos:line="15" pos:column="49"/></name></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="51">&amp;<pos:position pos:line="15" pos:column="56"/></operator><name><name pos:line="15" pos:column="52">data<pos:position pos:line="15" pos:column="56"/></name><operator pos:line="15" pos:column="56">-&gt;<pos:position pos:line="15" pos:column="61"/></operator><name pos:line="15" pos:column="58">info<pos:position pos:line="15" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="64">LOOKUP_REPLACE_OBJECT<pos:position pos:line="15" pos:column="85"/></name></expr></argument>)<pos:position pos:line="15" pos:column="86"/></argument_list></call> <operator pos:line="15" pos:column="87">&lt;<pos:position pos:line="15" pos:column="91"/></operator> <literal type="number" pos:line="15" pos:column="89">0<pos:position pos:line="15" pos:column="90"/></literal></expr>)<pos:position pos:line="15" pos:column="91"/></condition><then pos:line="15" pos:column="91"> <block pos:line="15" pos:column="92">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">printf<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><literal type="string" pos:line="16" pos:column="24">"%s missing\n"<pos:position pos:line="16" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="40">obj_name<pos:position pos:line="16" pos:column="48"/></name></expr></argument>)<pos:position pos:line="16" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="17" pos:column="17">fflush<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><name pos:line="17" pos:column="24">stdout<pos:position pos:line="17" pos:column="30"/></name></expr></argument>)<pos:position pos:line="17" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
		<return pos:line="18" pos:column="17">return <expr><literal type="number" pos:line="18" pos:column="24">0<pos:position pos:line="18" pos:column="25"/></literal></expr>;<pos:position pos:line="18" pos:column="26"/></return>
	}<pos:position pos:line="19" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="21" pos:column="9">strbuf_expand<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><operator pos:line="21" pos:column="23">&amp;<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="24">buf<pos:position pos:line="21" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="29">opt<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">-&gt;<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="34">format<pos:position pos:line="21" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="42">expand_format<pos:position pos:line="21" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="57">data<pos:position pos:line="21" pos:column="61"/></name></expr></argument>)<pos:position pos:line="21" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="63"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">strbuf_addch<pos:position pos:line="22" pos:column="21"/></name><argument_list pos:line="22" pos:column="21">(<argument><expr><operator pos:line="22" pos:column="22">&amp;<pos:position pos:line="22" pos:column="27"/></operator><name pos:line="22" pos:column="23">buf<pos:position pos:line="22" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="22" pos:column="28">'\n'<pos:position pos:line="22" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="23" pos:column="9">write_or_die<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">(<argument><expr><literal type="number" pos:line="23" pos:column="22">1<pos:position pos:line="23" pos:column="23"/></literal></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="25">buf<pos:position pos:line="23" pos:column="28"/></name><operator pos:line="23" pos:column="28">.<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="29">buf<pos:position pos:line="23" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="34">buf<pos:position pos:line="23" pos:column="37"/></name><operator pos:line="23" pos:column="37">.<pos:position pos:line="23" pos:column="38"/></operator><name pos:line="23" pos:column="38">len<pos:position pos:line="23" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">strbuf_release<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><operator pos:line="24" pos:column="24">&amp;<pos:position pos:line="24" pos:column="29"/></operator><name pos:line="24" pos:column="25">buf<pos:position pos:line="24" pos:column="28"/></name></expr></argument>)<pos:position pos:line="24" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>

	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name><name pos:line="26" pos:column="13">opt<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">-&gt;<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="18">print_contents<pos:position pos:line="26" pos:column="32"/></name></name></expr>)<pos:position pos:line="26" pos:column="33"/></condition><then pos:line="26" pos:column="33"> <block pos:line="26" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">print_object_or_die<pos:position pos:line="27" pos:column="36"/></name><argument_list pos:line="27" pos:column="36">(<argument><expr><literal type="number" pos:line="27" pos:column="37">1<pos:position pos:line="27" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="40">data<pos:position pos:line="27" pos:column="44"/></name></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">write_or_die<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><literal type="number" pos:line="28" pos:column="30">1<pos:position pos:line="28" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="33">"\n"<pos:position pos:line="28" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="39">1<pos:position pos:line="28" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="42"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>
	<return pos:line="30" pos:column="9">return <expr><literal type="number" pos:line="30" pos:column="16">0<pos:position pos:line="30" pos:column="17"/></literal></expr>;<pos:position pos:line="30" pos:column="18"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
