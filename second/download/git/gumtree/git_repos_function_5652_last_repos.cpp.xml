<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5652_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">execute_commands<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">command<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">commands<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">unpacker_error<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>,
			     <parameter><decl><type><name><name pos:line="3" pos:column="30">struct<pos:position pos:line="3" pos:column="36"/></name> <name pos:line="3" pos:column="37">shallow_info<pos:position pos:line="3" pos:column="49"/></name></name> <modifier pos:line="3" pos:column="50">*<pos:position pos:line="3" pos:column="51"/></modifier></type><name pos:line="3" pos:column="51">si<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>,
			     <parameter><decl><type><specifier pos:line="4" pos:column="30">const<pos:position pos:line="4" pos:column="35"/></specifier> <name><name pos:line="4" pos:column="36">struct<pos:position pos:line="4" pos:column="42"/></name> <name pos:line="4" pos:column="43">string_list<pos:position pos:line="4" pos:column="54"/></name></name> <modifier pos:line="4" pos:column="55">*<pos:position pos:line="4" pos:column="56"/></modifier></type><name pos:line="4" pos:column="56">push_options<pos:position pos:line="4" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="69"/></parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">check_connected_options<pos:position pos:line="6" pos:column="39"/></name></name></type> <name pos:line="6" pos:column="40">opt<pos:position pos:line="6" pos:column="43"/></name> <init pos:line="6" pos:column="44">= <expr><name pos:line="6" pos:column="46">CHECK_CONNECTED_INIT<pos:position pos:line="6" pos:column="66"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="67"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">command<pos:position pos:line="7" pos:column="23"/></name></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">cmd<pos:position pos:line="7" pos:column="28"/></name></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">object_id<pos:position pos:line="8" pos:column="25"/></name></name></type> <name pos:line="8" pos:column="26">oid<pos:position pos:line="8" pos:column="29"/></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">iterate_data<pos:position pos:line="9" pos:column="28"/></name></name></type> <name pos:line="9" pos:column="29">data<pos:position pos:line="9" pos:column="33"/></name></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">async<pos:position pos:line="10" pos:column="21"/></name></name></type> <name pos:line="10" pos:column="22">muxer<pos:position pos:line="10" pos:column="27"/></name></decl>;<pos:position pos:line="10" pos:column="28"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">err_fd<pos:position pos:line="11" pos:column="19"/></name> <init pos:line="11" pos:column="20">= <expr><literal type="number" pos:line="11" pos:column="22">0<pos:position pos:line="11" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="24"/></decl_stmt>

	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">unpacker_error<pos:position pos:line="13" pos:column="27"/></name></expr>)<pos:position pos:line="13" pos:column="28"/></condition><then pos:line="13" pos:column="28"> <block pos:line="13" pos:column="29">{
		<for pos:line="14" pos:column="17">for <control pos:line="14" pos:column="21">(<init><expr><name pos:line="14" pos:column="22">cmd<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">=<pos:position pos:line="14" pos:column="27"/></operator> <name pos:line="14" pos:column="28">commands<pos:position pos:line="14" pos:column="36"/></name></expr>;<pos:position pos:line="14" pos:column="37"/></init> <condition><expr><name pos:line="14" pos:column="38">cmd<pos:position pos:line="14" pos:column="41"/></name></expr>;<pos:position pos:line="14" pos:column="42"/></condition> <incr><expr><name pos:line="14" pos:column="43">cmd<pos:position pos:line="14" pos:column="46"/></name> <operator pos:line="14" pos:column="47">=<pos:position pos:line="14" pos:column="48"/></operator> <name><name pos:line="14" pos:column="49">cmd<pos:position pos:line="14" pos:column="52"/></name><operator pos:line="14" pos:column="52">-&gt;<pos:position pos:line="14" pos:column="57"/></operator><name pos:line="14" pos:column="54">next<pos:position pos:line="14" pos:column="58"/></name></name></expr></incr>)<pos:position pos:line="14" pos:column="59"/></control>
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="15" pos:column="25">cmd<pos:position pos:line="15" pos:column="28"/></name><operator pos:line="15" pos:column="28">-&gt;<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="30">error_string<pos:position pos:line="15" pos:column="42"/></name></name> <operator pos:line="15" pos:column="43">=<pos:position pos:line="15" pos:column="44"/></operator> <literal type="string" pos:line="15" pos:column="45">"unpacker error"<pos:position pos:line="15" pos:column="61"/></literal></expr>;<pos:position pos:line="15" pos:column="62"/></expr_stmt></block></for>
		<return pos:line="16" pos:column="17">return;<pos:position pos:line="16" pos:column="24"/></return>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">use_sideband<pos:position pos:line="19" pos:column="25"/></name></expr>)<pos:position pos:line="19" pos:column="26"/></condition><then pos:line="19" pos:column="26"> <block pos:line="19" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">memset<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><operator pos:line="20" pos:column="24">&amp;<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="25">muxer<pos:position pos:line="20" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="32">0<pos:position pos:line="20" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="35">sizeof<argument_list pos:line="20" pos:column="41">(<argument><expr><name pos:line="20" pos:column="42">muxer<pos:position pos:line="20" pos:column="47"/></name></expr></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="21" pos:column="17">muxer<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">.<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">proc<pos:position pos:line="21" pos:column="27"/></name></name> <operator pos:line="21" pos:column="28">=<pos:position pos:line="21" pos:column="29"/></operator> <name pos:line="21" pos:column="30">copy_to_sideband<pos:position pos:line="21" pos:column="46"/></name></expr>;<pos:position pos:line="21" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="22" pos:column="17">muxer<pos:position pos:line="22" pos:column="22"/></name><operator pos:line="22" pos:column="22">.<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="23">in<pos:position pos:line="22" pos:column="25"/></name></name> <operator pos:line="22" pos:column="26">=<pos:position pos:line="22" pos:column="27"/></operator> <operator pos:line="22" pos:column="28">-<pos:position pos:line="22" pos:column="29"/></operator><literal type="number" pos:line="22" pos:column="29">1<pos:position pos:line="22" pos:column="30"/></literal></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><operator pos:line="23" pos:column="21">!<pos:position pos:line="23" pos:column="22"/></operator><call><name pos:line="23" pos:column="22">start_async<pos:position pos:line="23" pos:column="33"/></name><argument_list pos:line="23" pos:column="33">(<argument><expr><operator pos:line="23" pos:column="34">&amp;<pos:position pos:line="23" pos:column="39"/></operator><name pos:line="23" pos:column="35">muxer<pos:position pos:line="23" pos:column="40"/></name></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="42"/></condition><then pos:line="23" pos:column="42">
			<block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="25">err_fd<pos:position pos:line="24" pos:column="31"/></name> <operator pos:line="24" pos:column="32">=<pos:position pos:line="24" pos:column="33"/></operator> <name><name pos:line="24" pos:column="34">muxer<pos:position pos:line="24" pos:column="39"/></name><operator pos:line="24" pos:column="39">.<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="40">in<pos:position pos:line="24" pos:column="42"/></name></name></expr>;<pos:position pos:line="24" pos:column="43"/></expr_stmt></block></then></if>
		<comment type="block" pos:line="25" pos:column="17">/* ...else, continue without relaying sideband */</comment>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name><name pos:line="28" pos:column="9">data<pos:position pos:line="28" pos:column="13"/></name><operator pos:line="28" pos:column="13">.<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">cmds<pos:position pos:line="28" pos:column="18"/></name></name> <operator pos:line="28" pos:column="19">=<pos:position pos:line="28" pos:column="20"/></operator> <name pos:line="28" pos:column="21">commands<pos:position pos:line="28" pos:column="29"/></name></expr>;<pos:position pos:line="28" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="29" pos:column="9">data<pos:position pos:line="29" pos:column="13"/></name><operator pos:line="29" pos:column="13">.<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">si<pos:position pos:line="29" pos:column="16"/></name></name> <operator pos:line="29" pos:column="17">=<pos:position pos:line="29" pos:column="18"/></operator> <name pos:line="29" pos:column="19">si<pos:position pos:line="29" pos:column="21"/></name></expr>;<pos:position pos:line="29" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="30" pos:column="9">opt<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">.<pos:position pos:line="30" pos:column="13"/></operator><name pos:line="30" pos:column="13">err_fd<pos:position pos:line="30" pos:column="19"/></name></name> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <name pos:line="30" pos:column="22">err_fd<pos:position pos:line="30" pos:column="28"/></name></expr>;<pos:position pos:line="30" pos:column="29"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="31" pos:column="9">opt<pos:position pos:line="31" pos:column="12"/></name><operator pos:line="31" pos:column="12">.<pos:position pos:line="31" pos:column="13"/></operator><name pos:line="31" pos:column="13">progress<pos:position pos:line="31" pos:column="21"/></name></name> <operator pos:line="31" pos:column="22">=<pos:position pos:line="31" pos:column="23"/></operator> <name pos:line="31" pos:column="24">err_fd<pos:position pos:line="31" pos:column="30"/></name> <operator pos:line="31" pos:column="31">&amp;&amp;<pos:position pos:line="31" pos:column="41"/></operator> <operator pos:line="31" pos:column="34">!<pos:position pos:line="31" pos:column="35"/></operator><name pos:line="31" pos:column="35">quiet<pos:position pos:line="31" pos:column="40"/></name></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="32" pos:column="9">opt<pos:position pos:line="32" pos:column="12"/></name><operator pos:line="32" pos:column="12">.<pos:position pos:line="32" pos:column="13"/></operator><name pos:line="32" pos:column="13">env<pos:position pos:line="32" pos:column="16"/></name></name> <operator pos:line="32" pos:column="17">=<pos:position pos:line="32" pos:column="18"/></operator> <call><name pos:line="32" pos:column="19">tmp_objdir_env<pos:position pos:line="32" pos:column="33"/></name><argument_list pos:line="32" pos:column="33">(<argument><expr><name pos:line="32" pos:column="34">tmp_objdir<pos:position pos:line="32" pos:column="44"/></name></expr></argument>)<pos:position pos:line="32" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="46"/></expr_stmt>
	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><call><name pos:line="33" pos:column="13">check_connected<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><name pos:line="33" pos:column="29">iterate_receive_command_list<pos:position pos:line="33" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="59">&amp;<pos:position pos:line="33" pos:column="64"/></operator><name pos:line="33" pos:column="60">data<pos:position pos:line="33" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="66">&amp;<pos:position pos:line="33" pos:column="71"/></operator><name pos:line="33" pos:column="67">opt<pos:position pos:line="33" pos:column="70"/></name></expr></argument>)<pos:position pos:line="33" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="72"/></condition><then pos:line="33" pos:column="72">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="17">set_connectivity_errors<pos:position pos:line="34" pos:column="40"/></name><argument_list pos:line="34" pos:column="40">(<argument><expr><name pos:line="34" pos:column="41">commands<pos:position pos:line="34" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="51">si<pos:position pos:line="34" pos:column="53"/></name></expr></argument>)<pos:position pos:line="34" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="55"/></expr_stmt></block></then></if>

	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">use_sideband<pos:position pos:line="36" pos:column="25"/></name></expr>)<pos:position pos:line="36" pos:column="26"/></condition><then pos:line="36" pos:column="26">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="17">finish_async<pos:position pos:line="37" pos:column="29"/></name><argument_list pos:line="37" pos:column="29">(<argument><expr><operator pos:line="37" pos:column="30">&amp;<pos:position pos:line="37" pos:column="35"/></operator><name pos:line="37" pos:column="31">muxer<pos:position pos:line="37" pos:column="36"/></name></expr></argument>)<pos:position pos:line="37" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="38"/></expr_stmt></block></then></if>

	<expr_stmt><expr><call><name pos:line="39" pos:column="9">reject_updates_to_hidden<pos:position pos:line="39" pos:column="33"/></name><argument_list pos:line="39" pos:column="33">(<argument><expr><name pos:line="39" pos:column="34">commands<pos:position pos:line="39" pos:column="42"/></name></expr></argument>)<pos:position pos:line="39" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="44"/></expr_stmt>

	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><call><name pos:line="41" pos:column="13">run_receive_hook<pos:position pos:line="41" pos:column="29"/></name><argument_list pos:line="41" pos:column="29">(<argument><expr><name pos:line="41" pos:column="30">commands<pos:position pos:line="41" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="40">"pre-receive"<pos:position pos:line="41" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="55">0<pos:position pos:line="41" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="58">push_options<pos:position pos:line="41" pos:column="70"/></name></expr></argument>)<pos:position pos:line="41" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="72"/></condition><then pos:line="41" pos:column="72"> <block pos:line="41" pos:column="73">{
		<for pos:line="42" pos:column="17">for <control pos:line="42" pos:column="21">(<init><expr><name pos:line="42" pos:column="22">cmd<pos:position pos:line="42" pos:column="25"/></name> <operator pos:line="42" pos:column="26">=<pos:position pos:line="42" pos:column="27"/></operator> <name pos:line="42" pos:column="28">commands<pos:position pos:line="42" pos:column="36"/></name></expr>;<pos:position pos:line="42" pos:column="37"/></init> <condition><expr><name pos:line="42" pos:column="38">cmd<pos:position pos:line="42" pos:column="41"/></name></expr>;<pos:position pos:line="42" pos:column="42"/></condition> <incr><expr><name pos:line="42" pos:column="43">cmd<pos:position pos:line="42" pos:column="46"/></name> <operator pos:line="42" pos:column="47">=<pos:position pos:line="42" pos:column="48"/></operator> <name><name pos:line="42" pos:column="49">cmd<pos:position pos:line="42" pos:column="52"/></name><operator pos:line="42" pos:column="52">-&gt;<pos:position pos:line="42" pos:column="57"/></operator><name pos:line="42" pos:column="54">next<pos:position pos:line="42" pos:column="58"/></name></name></expr></incr>)<pos:position pos:line="42" pos:column="59"/></control> <block pos:line="42" pos:column="60">{
			<if pos:line="43" pos:column="25">if <condition pos:line="43" pos:column="28">(<expr><operator pos:line="43" pos:column="29">!<pos:position pos:line="43" pos:column="30"/></operator><name><name pos:line="43" pos:column="30">cmd<pos:position pos:line="43" pos:column="33"/></name><operator pos:line="43" pos:column="33">-&gt;<pos:position pos:line="43" pos:column="38"/></operator><name pos:line="43" pos:column="35">error_string<pos:position pos:line="43" pos:column="47"/></name></name></expr>)<pos:position pos:line="43" pos:column="48"/></condition><then pos:line="43" pos:column="48">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="44" pos:column="33">cmd<pos:position pos:line="44" pos:column="36"/></name><operator pos:line="44" pos:column="36">-&gt;<pos:position pos:line="44" pos:column="41"/></operator><name pos:line="44" pos:column="38">error_string<pos:position pos:line="44" pos:column="50"/></name></name> <operator pos:line="44" pos:column="51">=<pos:position pos:line="44" pos:column="52"/></operator> <literal type="string" pos:line="44" pos:column="53">"pre-receive hook declined"<pos:position pos:line="44" pos:column="80"/></literal></expr>;<pos:position pos:line="44" pos:column="81"/></expr_stmt></block></then></if>
		}<pos:position pos:line="45" pos:column="18"/></block></for>
		<return pos:line="46" pos:column="17">return;<pos:position pos:line="46" pos:column="24"/></return>
	}<pos:position pos:line="47" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="49" pos:column="9">/*
	 * Now we'll start writing out refs, which means the objects need
	 * to be in their final positions so that other processes can see them.
	 */</comment>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><call><name pos:line="53" pos:column="13">tmp_objdir_migrate<pos:position pos:line="53" pos:column="31"/></name><argument_list pos:line="53" pos:column="31">(<argument><expr><name pos:line="53" pos:column="32">tmp_objdir<pos:position pos:line="53" pos:column="42"/></name></expr></argument>)<pos:position pos:line="53" pos:column="43"/></argument_list></call> <operator pos:line="53" pos:column="44">&lt;<pos:position pos:line="53" pos:column="48"/></operator> <literal type="number" pos:line="53" pos:column="46">0<pos:position pos:line="53" pos:column="47"/></literal></expr>)<pos:position pos:line="53" pos:column="48"/></condition><then pos:line="53" pos:column="48"> <block pos:line="53" pos:column="49">{
		<for pos:line="54" pos:column="17">for <control pos:line="54" pos:column="21">(<init><expr><name pos:line="54" pos:column="22">cmd<pos:position pos:line="54" pos:column="25"/></name> <operator pos:line="54" pos:column="26">=<pos:position pos:line="54" pos:column="27"/></operator> <name pos:line="54" pos:column="28">commands<pos:position pos:line="54" pos:column="36"/></name></expr>;<pos:position pos:line="54" pos:column="37"/></init> <condition><expr><name pos:line="54" pos:column="38">cmd<pos:position pos:line="54" pos:column="41"/></name></expr>;<pos:position pos:line="54" pos:column="42"/></condition> <incr><expr><name pos:line="54" pos:column="43">cmd<pos:position pos:line="54" pos:column="46"/></name> <operator pos:line="54" pos:column="47">=<pos:position pos:line="54" pos:column="48"/></operator> <name><name pos:line="54" pos:column="49">cmd<pos:position pos:line="54" pos:column="52"/></name><operator pos:line="54" pos:column="52">-&gt;<pos:position pos:line="54" pos:column="57"/></operator><name pos:line="54" pos:column="54">next<pos:position pos:line="54" pos:column="58"/></name></name></expr></incr>)<pos:position pos:line="54" pos:column="59"/></control> <block pos:line="54" pos:column="60">{
			<if pos:line="55" pos:column="25">if <condition pos:line="55" pos:column="28">(<expr><operator pos:line="55" pos:column="29">!<pos:position pos:line="55" pos:column="30"/></operator><name><name pos:line="55" pos:column="30">cmd<pos:position pos:line="55" pos:column="33"/></name><operator pos:line="55" pos:column="33">-&gt;<pos:position pos:line="55" pos:column="38"/></operator><name pos:line="55" pos:column="35">error_string<pos:position pos:line="55" pos:column="47"/></name></name></expr>)<pos:position pos:line="55" pos:column="48"/></condition><then pos:line="55" pos:column="48">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="56" pos:column="33">cmd<pos:position pos:line="56" pos:column="36"/></name><operator pos:line="56" pos:column="36">-&gt;<pos:position pos:line="56" pos:column="41"/></operator><name pos:line="56" pos:column="38">error_string<pos:position pos:line="56" pos:column="50"/></name></name> <operator pos:line="56" pos:column="51">=<pos:position pos:line="56" pos:column="52"/></operator> <literal type="string" pos:line="56" pos:column="53">"unable to migrate objects to permanent storage"<pos:position pos:line="56" pos:column="101"/></literal></expr>;<pos:position pos:line="56" pos:column="102"/></expr_stmt></block></then></if>
		}<pos:position pos:line="57" pos:column="18"/></block></for>
		<return pos:line="58" pos:column="17">return;<pos:position pos:line="58" pos:column="24"/></return>
	}<pos:position pos:line="59" pos:column="10"/></block></then></if>
	<expr_stmt><expr><name pos:line="60" pos:column="9">tmp_objdir<pos:position pos:line="60" pos:column="19"/></name> <operator pos:line="60" pos:column="20">=<pos:position pos:line="60" pos:column="21"/></operator> <name pos:line="60" pos:column="22">NULL<pos:position pos:line="60" pos:column="26"/></name></expr>;<pos:position pos:line="60" pos:column="27"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="62" pos:column="9">check_aliased_updates<pos:position pos:line="62" pos:column="30"/></name><argument_list pos:line="62" pos:column="30">(<argument><expr><name pos:line="62" pos:column="31">commands<pos:position pos:line="62" pos:column="39"/></name></expr></argument>)<pos:position pos:line="62" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="41"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="64" pos:column="9">free<pos:position pos:line="64" pos:column="13"/></name><argument_list pos:line="64" pos:column="13">(<argument><expr><name pos:line="64" pos:column="14">head_name_to_free<pos:position pos:line="64" pos:column="31"/></name></expr></argument>)<pos:position pos:line="64" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name pos:line="65" pos:column="9">head_name<pos:position pos:line="65" pos:column="18"/></name> <operator pos:line="65" pos:column="19">=<pos:position pos:line="65" pos:column="20"/></operator> <name pos:line="65" pos:column="21">head_name_to_free<pos:position pos:line="65" pos:column="38"/></name> <operator pos:line="65" pos:column="39">=<pos:position pos:line="65" pos:column="40"/></operator> <call><name pos:line="65" pos:column="41">resolve_refdup<pos:position pos:line="65" pos:column="55"/></name><argument_list pos:line="65" pos:column="55">(<argument><expr><literal type="string" pos:line="65" pos:column="56">"HEAD"<pos:position pos:line="65" pos:column="62"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="64">0<pos:position pos:line="65" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="67">oid<pos:position pos:line="65" pos:column="70"/></name><operator pos:line="65" pos:column="70">.<pos:position pos:line="65" pos:column="71"/></operator><name pos:line="65" pos:column="71">hash<pos:position pos:line="65" pos:column="75"/></name></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="77">NULL<pos:position pos:line="65" pos:column="81"/></name></expr></argument>)<pos:position pos:line="65" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="83"/></expr_stmt>

	<if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><name pos:line="67" pos:column="13">use_atomic<pos:position pos:line="67" pos:column="23"/></name></expr>)<pos:position pos:line="67" pos:column="24"/></condition><then pos:line="67" pos:column="24">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="17">execute_commands_atomic<pos:position pos:line="68" pos:column="40"/></name><argument_list pos:line="68" pos:column="40">(<argument><expr><name pos:line="68" pos:column="41">commands<pos:position pos:line="68" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="51">si<pos:position pos:line="68" pos:column="53"/></name></expr></argument>)<pos:position pos:line="68" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="55"/></expr_stmt></block></then>
	<else pos:line="69" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="17">execute_commands_non_atomic<pos:position pos:line="70" pos:column="44"/></name><argument_list pos:line="70" pos:column="44">(<argument><expr><name pos:line="70" pos:column="45">commands<pos:position pos:line="70" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="55">si<pos:position pos:line="70" pos:column="57"/></name></expr></argument>)<pos:position pos:line="70" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="59"/></expr_stmt></block></else></if>

	<if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><name pos:line="72" pos:column="13">shallow_update<pos:position pos:line="72" pos:column="27"/></name></expr>)<pos:position pos:line="72" pos:column="28"/></condition><then pos:line="72" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="73" pos:column="17">warn_if_skipped_connectivity_check<pos:position pos:line="73" pos:column="51"/></name><argument_list pos:line="73" pos:column="51">(<argument><expr><name pos:line="73" pos:column="52">commands<pos:position pos:line="73" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="62">si<pos:position pos:line="73" pos:column="64"/></name></expr></argument>)<pos:position pos:line="73" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="66"/></expr_stmt></block></then></if>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
