<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3716_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">git_modules_config<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><specifier pos:line="1" pos:column="31">const<pos:position pos:line="1" pos:column="36"/></specifier> <name pos:line="1" pos:column="37">char<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">var<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">value<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">void<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type><name pos:line="1" pos:column="73">cb<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><operator pos:line="3" pos:column="13">!<pos:position pos:line="3" pos:column="14"/></operator><call><name pos:line="3" pos:column="14">strcmp<pos:position pos:line="3" pos:column="20"/></name><argument_list pos:line="3" pos:column="20">(<argument><expr><name pos:line="3" pos:column="21">var<pos:position pos:line="3" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="26">"submodule.fetchjobs"<pos:position pos:line="3" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="49"/></condition><then pos:line="3" pos:column="49"> <block pos:line="3" pos:column="50">{
		<expr_stmt><expr><name pos:line="4" pos:column="17">parallel_jobs<pos:position pos:line="4" pos:column="30"/></name> <operator pos:line="4" pos:column="31">=<pos:position pos:line="4" pos:column="32"/></operator> <call><name pos:line="4" pos:column="33">git_config_int<pos:position pos:line="4" pos:column="47"/></name><argument_list pos:line="4" pos:column="47">(<argument><expr><name pos:line="4" pos:column="48">var<pos:position pos:line="4" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="53">value<pos:position pos:line="4" pos:column="58"/></name></expr></argument>)<pos:position pos:line="4" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="60"/></expr_stmt>
		<if pos:line="5" pos:column="17">if <condition pos:line="5" pos:column="20">(<expr><name pos:line="5" pos:column="21">parallel_jobs<pos:position pos:line="5" pos:column="34"/></name> <operator pos:line="5" pos:column="35">&lt;<pos:position pos:line="5" pos:column="39"/></operator> <literal type="number" pos:line="5" pos:column="37">0<pos:position pos:line="5" pos:column="38"/></literal></expr>)<pos:position pos:line="5" pos:column="39"/></condition><then pos:line="5" pos:column="39">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="25">die<pos:position pos:line="6" pos:column="28"/></name><argument_list pos:line="6" pos:column="28">(<argument><expr><call><name pos:line="6" pos:column="29">_<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><literal type="string" pos:line="6" pos:column="31">"negative values not allowed for submodule.fetchJobs"<pos:position pos:line="6" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="87"/></expr_stmt></block></then></if>
		<return pos:line="7" pos:column="17">return <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr>;<pos:position pos:line="7" pos:column="26"/></return>
	}<pos:position pos:line="8" pos:column="10"/></block></then> <elseif pos:line="8" pos:column="11">else <if pos:line="8" pos:column="16">if <condition pos:line="8" pos:column="19">(<expr><call><name pos:line="8" pos:column="20">starts_with<pos:position pos:line="8" pos:column="31"/></name><argument_list pos:line="8" pos:column="31">(<argument><expr><name pos:line="8" pos:column="32">var<pos:position pos:line="8" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="37">"submodule."<pos:position pos:line="8" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="51"/></condition><then pos:line="8" pos:column="51">
		<block type="pseudo"><return pos:line="9" pos:column="17">return <expr><call><name pos:line="9" pos:column="24">parse_submodule_config_option<pos:position pos:line="9" pos:column="53"/></name><argument_list pos:line="9" pos:column="53">(<argument><expr><name pos:line="9" pos:column="54">var<pos:position pos:line="9" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="59">value<pos:position pos:line="9" pos:column="64"/></name></expr></argument>)<pos:position pos:line="9" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="66"/></return></block></then></if></elseif>
	<elseif pos:line="10" pos:column="9">else <if pos:line="10" pos:column="14">if <condition pos:line="10" pos:column="17">(<expr><operator pos:line="10" pos:column="18">!<pos:position pos:line="10" pos:column="19"/></operator><call><name pos:line="10" pos:column="19">strcmp<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><name pos:line="10" pos:column="26">var<pos:position pos:line="10" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="31">"fetch.recursesubmodules"<pos:position pos:line="10" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="58"/></condition><then pos:line="10" pos:column="58"> <block pos:line="10" pos:column="59">{
		<expr_stmt><expr><name pos:line="11" pos:column="17">config_fetch_recurse_submodules<pos:position pos:line="11" pos:column="48"/></name> <operator pos:line="11" pos:column="49">=<pos:position pos:line="11" pos:column="50"/></operator> <call><name pos:line="11" pos:column="51">parse_fetch_recurse_submodules_arg<pos:position pos:line="11" pos:column="85"/></name><argument_list pos:line="11" pos:column="85">(<argument><expr><name pos:line="11" pos:column="86">var<pos:position pos:line="11" pos:column="89"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="91">value<pos:position pos:line="11" pos:column="96"/></name></expr></argument>)<pos:position pos:line="11" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="98"/></expr_stmt>
		<return pos:line="12" pos:column="17">return <expr><literal type="number" pos:line="12" pos:column="24">0<pos:position pos:line="12" pos:column="25"/></literal></expr>;<pos:position pos:line="12" pos:column="26"/></return>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if></elseif></if>
	<return pos:line="14" pos:column="9">return <expr><literal type="number" pos:line="14" pos:column="16">0<pos:position pos:line="14" pos:column="17"/></literal></expr>;<pos:position pos:line="14" pos:column="18"/></return>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
