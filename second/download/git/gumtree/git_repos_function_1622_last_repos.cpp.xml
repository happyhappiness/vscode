<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_1622_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">diff_abbrev_oid<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name><name pos:line="1" pos:column="42">struct<pos:position pos:line="1" pos:column="48"/></name> <name pos:line="1" pos:column="49">object_id<pos:position pos:line="1" pos:column="58"/></name></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">oid<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">int<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">abbrev<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name><name pos:line="3" pos:column="13">startup_info<pos:position pos:line="3" pos:column="25"/></name><operator pos:line="3" pos:column="25">-&gt;<pos:position pos:line="3" pos:column="30"/></operator><name pos:line="3" pos:column="27">have_repository<pos:position pos:line="3" pos:column="42"/></name></name></expr>)<pos:position pos:line="3" pos:column="43"/></condition><then pos:line="3" pos:column="43">
		<block type="pseudo"><return pos:line="4" pos:column="17">return <expr><call><name pos:line="4" pos:column="24">find_unique_abbrev<pos:position pos:line="4" pos:column="42"/></name><argument_list pos:line="4" pos:column="42">(<argument><expr><name><name pos:line="4" pos:column="43">oid<pos:position pos:line="4" pos:column="46"/></name><operator pos:line="4" pos:column="46">-&gt;<pos:position pos:line="4" pos:column="51"/></operator><name pos:line="4" pos:column="48">hash<pos:position pos:line="4" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="54">abbrev<pos:position pos:line="4" pos:column="60"/></name></expr></argument>)<pos:position pos:line="4" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="62"/></return></block></then>
	<else pos:line="5" pos:column="9">else <block pos:line="5" pos:column="14">{
		<decl_stmt><decl><type><name pos:line="6" pos:column="17">char<pos:position pos:line="6" pos:column="21"/></name> <modifier pos:line="6" pos:column="22">*<pos:position pos:line="6" pos:column="23"/></modifier></type><name pos:line="6" pos:column="23">hex<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><call><name pos:line="6" pos:column="29">oid_to_hex<pos:position pos:line="6" pos:column="39"/></name><argument_list pos:line="6" pos:column="39">(<argument><expr><name pos:line="6" pos:column="40">oid<pos:position pos:line="6" pos:column="43"/></name></expr></argument>)<pos:position pos:line="6" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="45"/></decl_stmt>
		<if pos:line="7" pos:column="17">if <condition pos:line="7" pos:column="20">(<expr><name pos:line="7" pos:column="21">abbrev<pos:position pos:line="7" pos:column="27"/></name> <operator pos:line="7" pos:column="28">&lt;<pos:position pos:line="7" pos:column="32"/></operator> <literal type="number" pos:line="7" pos:column="30">0<pos:position pos:line="7" pos:column="31"/></literal></expr>)<pos:position pos:line="7" pos:column="32"/></condition><then pos:line="7" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><name pos:line="8" pos:column="25">abbrev<pos:position pos:line="8" pos:column="31"/></name> <operator pos:line="8" pos:column="32">=<pos:position pos:line="8" pos:column="33"/></operator> <name pos:line="8" pos:column="34">FALLBACK_DEFAULT_ABBREV<pos:position pos:line="8" pos:column="57"/></name></expr>;<pos:position pos:line="8" pos:column="58"/></expr_stmt></block></then></if>
		<if pos:line="9" pos:column="17">if <condition pos:line="9" pos:column="20">(<expr><name pos:line="9" pos:column="21">abbrev<pos:position pos:line="9" pos:column="27"/></name> <operator pos:line="9" pos:column="28">&gt;<pos:position pos:line="9" pos:column="32"/></operator> <name pos:line="9" pos:column="30">GIT_SHA1_HEXSZ<pos:position pos:line="9" pos:column="44"/></name></expr>)<pos:position pos:line="9" pos:column="45"/></condition><then pos:line="9" pos:column="45">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="25">die<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><literal type="string" pos:line="10" pos:column="29">"BUG: oid abbreviation out of range: %d"<pos:position pos:line="10" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="71">abbrev<pos:position pos:line="10" pos:column="77"/></name></expr></argument>)<pos:position pos:line="10" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="79"/></expr_stmt></block></then></if>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name pos:line="11" pos:column="21">abbrev<pos:position pos:line="11" pos:column="27"/></name></expr>)<pos:position pos:line="11" pos:column="28"/></condition><then pos:line="11" pos:column="28">
			<block type="pseudo"><expr_stmt><expr><name><name pos:line="12" pos:column="25">hex<pos:position pos:line="12" pos:column="28"/></name><index pos:line="12" pos:column="28">[<expr><name pos:line="12" pos:column="29">abbrev<pos:position pos:line="12" pos:column="35"/></name></expr>]<pos:position pos:line="12" pos:column="36"/></index></name> <operator pos:line="12" pos:column="37">=<pos:position pos:line="12" pos:column="38"/></operator> <literal type="char" pos:line="12" pos:column="39">'\0'<pos:position pos:line="12" pos:column="43"/></literal></expr>;<pos:position pos:line="12" pos:column="44"/></expr_stmt></block></then></if>
		<return pos:line="13" pos:column="17">return <expr><name pos:line="13" pos:column="24">hex<pos:position pos:line="13" pos:column="27"/></name></expr>;<pos:position pos:line="13" pos:column="28"/></return>
	}<pos:position pos:line="14" pos:column="10"/></block></else></if>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
