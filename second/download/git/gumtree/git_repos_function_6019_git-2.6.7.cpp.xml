<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6019_git-2.6.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">threadcache_free<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">nedpool<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">p<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">threadcache<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">tc<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">int<pos:position pos:line="1" pos:column="62"/></name></type> <name pos:line="1" pos:column="63">mymspace<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="73">void<pos:position pos:line="1" pos:column="77"/></name> <modifier pos:line="1" pos:column="78">*<pos:position pos:line="1" pos:column="79"/></modifier></type><name pos:line="1" pos:column="79">mem<pos:position pos:line="1" pos:column="82"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="84">size_t<pos:position pos:line="1" pos:column="90"/></name></type> <name pos:line="1" pos:column="91">size<pos:position pos:line="1" pos:column="95"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="96"/></parameter_list> <name pos:line="1" pos:column="97">THROWSPEC<pos:position pos:line="1" pos:column="106"/></name>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">int<pos:position pos:line="3" pos:column="21"/></name></type> <name pos:line="3" pos:column="22">bestsize<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">unsigned<pos:position pos:line="4" pos:column="17"/></name> <name pos:line="4" pos:column="18">int<pos:position pos:line="4" pos:column="21"/></name></type> <name pos:line="4" pos:column="22">idx<pos:position pos:line="4" pos:column="25"/></name><init pos:line="4" pos:column="25">=<expr><call><name pos:line="4" pos:column="26">size2binidx<pos:position pos:line="4" pos:column="37"/></name><argument_list pos:line="4" pos:column="37">(<argument><expr><name pos:line="4" pos:column="38">size<pos:position pos:line="4" pos:column="42"/></name></expr></argument>)<pos:position pos:line="4" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">threadcacheblk<pos:position pos:line="5" pos:column="23"/></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier><modifier pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></modifier></type><name pos:line="5" pos:column="26">binsptr<pos:position pos:line="5" pos:column="33"/></name></decl>, <modifier pos:line="5" pos:column="35">*<pos:position pos:line="5" pos:column="36"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="36">tck<pos:position pos:line="5" pos:column="39"/></name><init pos:line="5" pos:column="39">=<expr><operator pos:line="5" pos:column="40">(<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="41">threadcacheblk<pos:position pos:line="5" pos:column="55"/></name> <operator pos:line="5" pos:column="56">*<pos:position pos:line="5" pos:column="57"/></operator><operator pos:line="5" pos:column="57">)<pos:position pos:line="5" pos:column="58"/></operator> <name pos:line="5" pos:column="59">mem<pos:position pos:line="5" pos:column="62"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="63"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="6" pos:column="9">assert<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><name pos:line="6" pos:column="16">size<pos:position pos:line="6" pos:column="20"/></name><operator pos:line="6" pos:column="20">&gt;=<pos:position pos:line="6" pos:column="25"/></operator><sizeof pos:line="6" pos:column="22">sizeof<argument_list pos:line="6" pos:column="28">(<argument><expr><name pos:line="6" pos:column="29">threadcacheblk<pos:position pos:line="6" pos:column="43"/></name></expr></argument>)<pos:position pos:line="6" pos:column="44"/></argument_list></sizeof> <operator pos:line="6" pos:column="45">&amp;&amp;<pos:position pos:line="6" pos:column="55"/></operator> <name pos:line="6" pos:column="48">size<pos:position pos:line="6" pos:column="52"/></name><operator pos:line="6" pos:column="52">&lt;=<pos:position pos:line="6" pos:column="57"/></operator><name pos:line="6" pos:column="54">THREADCACHEMAX<pos:position pos:line="6" pos:column="68"/></name><operator pos:line="6" pos:column="68">+<pos:position pos:line="6" pos:column="69"/></operator><name pos:line="6" pos:column="69">CHUNK_OVERHEAD<pos:position pos:line="6" pos:column="83"/></name></expr></argument>)<pos:position pos:line="6" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="85"/></expr_stmt>
<cpp:ifdef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifdef<pos:position pos:line="7" pos:column="7"/></cpp:directive> <name pos:line="7" pos:column="8">DEBUG<pos:position pos:line="7" pos:column="13"/></name></cpp:ifdef>
	<block pos:line="8" pos:column="9">{	<comment type="block" pos:line="8" pos:column="17">/* Make sure this is a valid memory block */</comment>
	    <decl_stmt><decl><type><name pos:line="9" pos:column="13">mchunkptr<pos:position pos:line="9" pos:column="22"/></name></type> <name pos:line="9" pos:column="23">p<pos:position pos:line="9" pos:column="24"/></name>  <init pos:line="9" pos:column="26">= <expr><call><name pos:line="9" pos:column="28">mem2chunk<pos:position pos:line="9" pos:column="37"/></name><argument_list pos:line="9" pos:column="37">(<argument><expr><name pos:line="9" pos:column="38">mem<pos:position pos:line="9" pos:column="41"/></name></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="43"/></decl_stmt>
	    <decl_stmt><decl><type><name pos:line="10" pos:column="13">mstate<pos:position pos:line="10" pos:column="19"/></name></type> <name pos:line="10" pos:column="20">fm<pos:position pos:line="10" pos:column="22"/></name> <init pos:line="10" pos:column="23">= <expr><call><name pos:line="10" pos:column="25">get_mstate_for<pos:position pos:line="10" pos:column="39"/></name><argument_list pos:line="10" pos:column="39">(<argument><expr><name pos:line="10" pos:column="40">p<pos:position pos:line="10" pos:column="41"/></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="43"/></decl_stmt>
	    <if pos:line="11" pos:column="13">if <condition pos:line="11" pos:column="16">(<expr><operator pos:line="11" pos:column="17">!<pos:position pos:line="11" pos:column="18"/></operator><call><name pos:line="11" pos:column="18">ok_magic<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><name pos:line="11" pos:column="27">fm<pos:position pos:line="11" pos:column="29"/></name></expr></argument>)<pos:position pos:line="11" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="31"/></condition><then pos:line="11" pos:column="31"> <block pos:line="11" pos:column="32">{
	      <expr_stmt><expr><call><name pos:line="12" pos:column="15">USAGE_ERROR_ACTION<pos:position pos:line="12" pos:column="33"/></name><argument_list pos:line="12" pos:column="33">(<argument><expr><name pos:line="12" pos:column="34">fm<pos:position pos:line="12" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="38">p<pos:position pos:line="12" pos:column="39"/></name></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
	      <return pos:line="13" pos:column="15">return;<pos:position pos:line="13" pos:column="22"/></return>
	    }<pos:position pos:line="14" pos:column="14"/></block></then></if>
	}<pos:position pos:line="15" pos:column="10"/></block>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef<pos:position pos:line="17" pos:column="7"/></cpp:directive> <name pos:line="17" pos:column="8">FULLSANITYCHECKS<pos:position pos:line="17" pos:column="24"/></name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">tcfullsanitycheck<pos:position pos:line="18" pos:column="26"/></name><argument_list pos:line="18" pos:column="26">(<argument><expr><name pos:line="18" pos:column="27">tc<pos:position pos:line="18" pos:column="29"/></name></expr></argument>)<pos:position pos:line="18" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
	<comment type="block" pos:line="20" pos:column="9">/* Calculate best fit bin size */</comment>
	<expr_stmt><expr><name pos:line="21" pos:column="9">bestsize<pos:position pos:line="21" pos:column="17"/></name><operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator><literal type="number" pos:line="21" pos:column="18">1<pos:position pos:line="21" pos:column="19"/></literal><operator pos:line="21" pos:column="19">&lt;&lt;<pos:position pos:line="21" pos:column="27"/></operator><operator pos:line="21" pos:column="21">(<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">idx<pos:position pos:line="21" pos:column="25"/></name><operator pos:line="21" pos:column="25">+<pos:position pos:line="21" pos:column="26"/></operator><literal type="number" pos:line="21" pos:column="26">4<pos:position pos:line="21" pos:column="27"/></literal><operator pos:line="21" pos:column="27">)<pos:position pos:line="21" pos:column="28"/></operator></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>
<cpp:if pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">if<pos:position pos:line="22" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="22" pos:column="5">0<pos:position pos:line="22" pos:column="6"/></literal></expr></cpp:if>
	<comment type="block" pos:line="23" pos:column="9">/* Finer grained bin fit */</comment>
	idx&lt;&lt;=1;
	if(size&gt;bestsize)
	{
		unsigned int biggerbestsize=bestsize+bestsize&lt;&lt;1;
		if(size&gt;=biggerbestsize)
		{
			idx++;
			bestsize=biggerbestsize;
		}
	}
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>
	<if pos:line="35" pos:column="9">if<condition pos:line="35" pos:column="11">(<expr><name pos:line="35" pos:column="12">bestsize<pos:position pos:line="35" pos:column="20"/></name><operator pos:line="35" pos:column="20">!=<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="22">size<pos:position pos:line="35" pos:column="26"/></name></expr>)<pos:position pos:line="35" pos:column="27"/></condition><then pos:line="35" pos:column="27">	<comment type="block" pos:line="35" pos:column="33">/* dlmalloc can round up, so we round down to preserve indexing */</comment>
		<block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="17">size<pos:position pos:line="36" pos:column="21"/></name><operator pos:line="36" pos:column="21">=<pos:position pos:line="36" pos:column="22"/></operator><name pos:line="36" pos:column="22">bestsize<pos:position pos:line="36" pos:column="30"/></name></expr>;<pos:position pos:line="36" pos:column="31"/></expr_stmt></block></then></if>
	<expr_stmt><expr><name pos:line="37" pos:column="9">binsptr<pos:position pos:line="37" pos:column="16"/></name><operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator><operator pos:line="37" pos:column="17">&amp;<pos:position pos:line="37" pos:column="22"/></operator><name><name pos:line="37" pos:column="18">tc<pos:position pos:line="37" pos:column="20"/></name><operator pos:line="37" pos:column="20">-&gt;<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="22">bins<pos:position pos:line="37" pos:column="26"/></name><index pos:line="37" pos:column="26">[<expr><name pos:line="37" pos:column="27">idx<pos:position pos:line="37" pos:column="30"/></name><operator pos:line="37" pos:column="30">*<pos:position pos:line="37" pos:column="31"/></operator><literal type="number" pos:line="37" pos:column="31">2<pos:position pos:line="37" pos:column="32"/></literal></expr>]<pos:position pos:line="37" pos:column="33"/></index></name></expr>;<pos:position pos:line="37" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">assert<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><name pos:line="38" pos:column="16">idx<pos:position pos:line="38" pos:column="19"/></name><operator pos:line="38" pos:column="19">&lt;=<pos:position pos:line="38" pos:column="24"/></operator><name pos:line="38" pos:column="21">THREADCACHEMAXBINS<pos:position pos:line="38" pos:column="39"/></name></expr></argument>)<pos:position pos:line="38" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="41"/></expr_stmt>
	<if pos:line="39" pos:column="9">if<condition pos:line="39" pos:column="11">(<expr><name pos:line="39" pos:column="12">tck<pos:position pos:line="39" pos:column="15"/></name><operator pos:line="39" pos:column="15">==<pos:position pos:line="39" pos:column="17"/></operator><operator pos:line="39" pos:column="17">*<pos:position pos:line="39" pos:column="18"/></operator><name pos:line="39" pos:column="18">binsptr<pos:position pos:line="39" pos:column="25"/></name></expr>)<pos:position pos:line="39" pos:column="26"/></condition><then pos:line="39" pos:column="26">
	<block pos:line="40" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="41" pos:column="17">fprintf<pos:position pos:line="41" pos:column="24"/></name><argument_list pos:line="41" pos:column="24">(<argument><expr><name pos:line="41" pos:column="25">stderr<pos:position pos:line="41" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="33">"Attempt to free already freed memory block %p - aborting!\n"<pos:position pos:line="41" pos:column="94"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="96">tck<pos:position pos:line="41" pos:column="99"/></name></expr></argument>)<pos:position pos:line="41" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="101"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="42" pos:column="17">abort<pos:position pos:line="42" pos:column="22"/></name><argument_list pos:line="42" pos:column="22">()<pos:position pos:line="42" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="25"/></expr_stmt>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>
<cpp:ifdef pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">ifdef<pos:position pos:line="44" pos:column="7"/></cpp:directive> <name pos:line="44" pos:column="8">FULLSANITYCHECKS<pos:position pos:line="44" pos:column="24"/></name></cpp:ifdef>
	<expr_stmt><expr><name><name pos:line="45" pos:column="9">tck<pos:position pos:line="45" pos:column="12"/></name><operator pos:line="45" pos:column="12">-&gt;<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="14">magic<pos:position pos:line="45" pos:column="19"/></name></name><operator pos:line="45" pos:column="19">=<pos:position pos:line="45" pos:column="20"/></operator><operator pos:line="45" pos:column="20">*<pos:position pos:line="45" pos:column="21"/></operator><operator pos:line="45" pos:column="21">(<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="22">unsigned<pos:position pos:line="45" pos:column="30"/></name> <name pos:line="45" pos:column="31">int<pos:position pos:line="45" pos:column="34"/></name> <operator pos:line="45" pos:column="35">*<pos:position pos:line="45" pos:column="36"/></operator><operator pos:line="45" pos:column="36">)<pos:position pos:line="45" pos:column="37"/></operator> <literal type="string" pos:line="45" pos:column="38">"NEDN"<pos:position pos:line="45" pos:column="44"/></literal></expr>;<pos:position pos:line="45" pos:column="45"/></expr_stmt>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name pos:line="47" pos:column="9">tck<pos:position pos:line="47" pos:column="12"/></name><operator pos:line="47" pos:column="12">-&gt;<pos:position pos:line="47" pos:column="17"/></operator><name pos:line="47" pos:column="14">lastUsed<pos:position pos:line="47" pos:column="22"/></name></name><operator pos:line="47" pos:column="22">=<pos:position pos:line="47" pos:column="23"/></operator><operator pos:line="47" pos:column="23">++<pos:position pos:line="47" pos:column="25"/></operator><name><name pos:line="47" pos:column="25">tc<pos:position pos:line="47" pos:column="27"/></name><operator pos:line="47" pos:column="27">-&gt;<pos:position pos:line="47" pos:column="32"/></operator><name pos:line="47" pos:column="29">frees<pos:position pos:line="47" pos:column="34"/></name></name></expr>;<pos:position pos:line="47" pos:column="35"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="48" pos:column="9">tck<pos:position pos:line="48" pos:column="12"/></name><operator pos:line="48" pos:column="12">-&gt;<pos:position pos:line="48" pos:column="17"/></operator><name pos:line="48" pos:column="14">size<pos:position pos:line="48" pos:column="18"/></name></name><operator pos:line="48" pos:column="18">=<pos:position pos:line="48" pos:column="19"/></operator><operator pos:line="48" pos:column="19">(<pos:position pos:line="48" pos:column="20"/></operator><name pos:line="48" pos:column="20">unsigned<pos:position pos:line="48" pos:column="28"/></name> <name pos:line="48" pos:column="29">int<pos:position pos:line="48" pos:column="32"/></name><operator pos:line="48" pos:column="32">)<pos:position pos:line="48" pos:column="33"/></operator> <name pos:line="48" pos:column="34">size<pos:position pos:line="48" pos:column="38"/></name></expr>;<pos:position pos:line="48" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="49" pos:column="9">tck<pos:position pos:line="49" pos:column="12"/></name><operator pos:line="49" pos:column="12">-&gt;<pos:position pos:line="49" pos:column="17"/></operator><name pos:line="49" pos:column="14">next<pos:position pos:line="49" pos:column="18"/></name></name><operator pos:line="49" pos:column="18">=<pos:position pos:line="49" pos:column="19"/></operator><operator pos:line="49" pos:column="19">*<pos:position pos:line="49" pos:column="20"/></operator><name pos:line="49" pos:column="20">binsptr<pos:position pos:line="49" pos:column="27"/></name></expr>;<pos:position pos:line="49" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="50" pos:column="9">tck<pos:position pos:line="50" pos:column="12"/></name><operator pos:line="50" pos:column="12">-&gt;<pos:position pos:line="50" pos:column="17"/></operator><name pos:line="50" pos:column="14">prev<pos:position pos:line="50" pos:column="18"/></name></name><operator pos:line="50" pos:column="18">=<pos:position pos:line="50" pos:column="19"/></operator><literal type="number" pos:line="50" pos:column="19">0<pos:position pos:line="50" pos:column="20"/></literal></expr>;<pos:position pos:line="50" pos:column="21"/></expr_stmt>
	<if pos:line="51" pos:column="9">if<condition pos:line="51" pos:column="11">(<expr><name><name pos:line="51" pos:column="12">tck<pos:position pos:line="51" pos:column="15"/></name><operator pos:line="51" pos:column="15">-&gt;<pos:position pos:line="51" pos:column="20"/></operator><name pos:line="51" pos:column="17">next<pos:position pos:line="51" pos:column="21"/></name></name></expr>)<pos:position pos:line="51" pos:column="22"/></condition><then pos:line="51" pos:column="22">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="52" pos:column="17">tck<pos:position pos:line="52" pos:column="20"/></name><operator pos:line="52" pos:column="20">-&gt;<pos:position pos:line="52" pos:column="25"/></operator><name pos:line="52" pos:column="22">next<pos:position pos:line="52" pos:column="26"/></name><operator pos:line="52" pos:column="26">-&gt;<pos:position pos:line="52" pos:column="31"/></operator><name pos:line="52" pos:column="28">prev<pos:position pos:line="52" pos:column="32"/></name></name><operator pos:line="52" pos:column="32">=<pos:position pos:line="52" pos:column="33"/></operator><name pos:line="52" pos:column="33">tck<pos:position pos:line="52" pos:column="36"/></name></expr>;<pos:position pos:line="52" pos:column="37"/></expr_stmt></block></then>
	<else pos:line="53" pos:column="9">else
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="54" pos:column="17">binsptr<pos:position pos:line="54" pos:column="24"/></name><index pos:line="54" pos:column="24">[<expr><literal type="number" pos:line="54" pos:column="25">1<pos:position pos:line="54" pos:column="26"/></literal></expr>]<pos:position pos:line="54" pos:column="27"/></index></name><operator pos:line="54" pos:column="27">=<pos:position pos:line="54" pos:column="28"/></operator><name pos:line="54" pos:column="28">tck<pos:position pos:line="54" pos:column="31"/></name></expr>;<pos:position pos:line="54" pos:column="32"/></expr_stmt></block></else></if>
	<expr_stmt><expr><call><name pos:line="55" pos:column="9">assert<pos:position pos:line="55" pos:column="15"/></name><argument_list pos:line="55" pos:column="15">(<argument><expr><operator pos:line="55" pos:column="16">!<pos:position pos:line="55" pos:column="17"/></operator><operator pos:line="55" pos:column="17">*<pos:position pos:line="55" pos:column="18"/></operator><name pos:line="55" pos:column="18">binsptr<pos:position pos:line="55" pos:column="25"/></name> <operator pos:line="55" pos:column="26">||<pos:position pos:line="55" pos:column="28"/></operator> <name><operator pos:line="55" pos:column="29">(<pos:position pos:line="55" pos:column="30"/></operator><operator pos:line="55" pos:column="30">*<pos:position pos:line="55" pos:column="31"/></operator><name pos:line="55" pos:column="31">binsptr<pos:position pos:line="55" pos:column="38"/></name><operator pos:line="55" pos:column="38">)<pos:position pos:line="55" pos:column="39"/></operator><operator pos:line="55" pos:column="39">-&gt;<pos:position pos:line="55" pos:column="44"/></operator><name pos:line="55" pos:column="41">size<pos:position pos:line="55" pos:column="45"/></name></name><operator pos:line="55" pos:column="45">==<pos:position pos:line="55" pos:column="47"/></operator><name><name pos:line="55" pos:column="47">tck<pos:position pos:line="55" pos:column="50"/></name><operator pos:line="55" pos:column="50">-&gt;<pos:position pos:line="55" pos:column="55"/></operator><name pos:line="55" pos:column="52">size<pos:position pos:line="55" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="56" pos:column="9">*<pos:position pos:line="56" pos:column="10"/></operator><name pos:line="56" pos:column="10">binsptr<pos:position pos:line="56" pos:column="17"/></name><operator pos:line="56" pos:column="17">=<pos:position pos:line="56" pos:column="18"/></operator><name pos:line="56" pos:column="18">tck<pos:position pos:line="56" pos:column="21"/></name></expr>;<pos:position pos:line="56" pos:column="22"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="57" pos:column="9">assert<pos:position pos:line="57" pos:column="15"/></name><argument_list pos:line="57" pos:column="15">(<argument><expr><name pos:line="57" pos:column="16">tck<pos:position pos:line="57" pos:column="19"/></name><operator pos:line="57" pos:column="19">==<pos:position pos:line="57" pos:column="21"/></operator><name><name pos:line="57" pos:column="21">tc<pos:position pos:line="57" pos:column="23"/></name><operator pos:line="57" pos:column="23">-&gt;<pos:position pos:line="57" pos:column="28"/></operator><name pos:line="57" pos:column="25">bins<pos:position pos:line="57" pos:column="29"/></name><index pos:line="57" pos:column="29">[<expr><name pos:line="57" pos:column="30">idx<pos:position pos:line="57" pos:column="33"/></name><operator pos:line="57" pos:column="33">*<pos:position pos:line="57" pos:column="34"/></operator><literal type="number" pos:line="57" pos:column="34">2<pos:position pos:line="57" pos:column="35"/></literal></expr>]<pos:position pos:line="57" pos:column="36"/></index></name></expr></argument>)<pos:position pos:line="57" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="58" pos:column="9">assert<pos:position pos:line="58" pos:column="15"/></name><argument_list pos:line="58" pos:column="15">(<argument><expr><name><name pos:line="58" pos:column="16">tc<pos:position pos:line="58" pos:column="18"/></name><operator pos:line="58" pos:column="18">-&gt;<pos:position pos:line="58" pos:column="23"/></operator><name pos:line="58" pos:column="20">bins<pos:position pos:line="58" pos:column="24"/></name><index pos:line="58" pos:column="24">[<expr><name pos:line="58" pos:column="25">idx<pos:position pos:line="58" pos:column="28"/></name><operator pos:line="58" pos:column="28">*<pos:position pos:line="58" pos:column="29"/></operator><literal type="number" pos:line="58" pos:column="29">2<pos:position pos:line="58" pos:column="30"/></literal><operator pos:line="58" pos:column="30">+<pos:position pos:line="58" pos:column="31"/></operator><literal type="number" pos:line="58" pos:column="31">1<pos:position pos:line="58" pos:column="32"/></literal></expr>]<pos:position pos:line="58" pos:column="33"/></index></name><operator pos:line="58" pos:column="33">==<pos:position pos:line="58" pos:column="35"/></operator><name pos:line="58" pos:column="35">tck<pos:position pos:line="58" pos:column="38"/></name> <operator pos:line="58" pos:column="39">||<pos:position pos:line="58" pos:column="41"/></operator> <name><name pos:line="58" pos:column="42">binsptr<pos:position pos:line="58" pos:column="49"/></name><index pos:line="58" pos:column="49">[<expr><literal type="number" pos:line="58" pos:column="50">0<pos:position pos:line="58" pos:column="51"/></literal></expr>]<pos:position pos:line="58" pos:column="52"/></index></name><operator pos:line="58" pos:column="52">-&gt;<pos:position pos:line="58" pos:column="57"/></operator><name><name pos:line="58" pos:column="54">next<pos:position pos:line="58" pos:column="58"/></name><operator pos:line="58" pos:column="58">-&gt;<pos:position pos:line="58" pos:column="63"/></operator><name pos:line="58" pos:column="60">prev<pos:position pos:line="58" pos:column="64"/></name></name><operator pos:line="58" pos:column="64">==<pos:position pos:line="58" pos:column="66"/></operator><name pos:line="58" pos:column="66">tck<pos:position pos:line="58" pos:column="69"/></name></expr></argument>)<pos:position pos:line="58" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="71"/></expr_stmt>
	<comment type="block" pos:line="59" pos:column="9">/*printf("free: %p, %p, %p, %lu\n", p, tc, mem, (long) size);*/</comment>
	<expr_stmt><expr><name><name pos:line="60" pos:column="9">tc<pos:position pos:line="60" pos:column="11"/></name><operator pos:line="60" pos:column="11">-&gt;<pos:position pos:line="60" pos:column="16"/></operator><name pos:line="60" pos:column="13">freeInCache<pos:position pos:line="60" pos:column="24"/></name></name><operator pos:line="60" pos:column="24">+=<pos:position pos:line="60" pos:column="26"/></operator><name pos:line="60" pos:column="26">size<pos:position pos:line="60" pos:column="30"/></name></expr>;<pos:position pos:line="60" pos:column="31"/></expr_stmt>
<cpp:ifdef pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">ifdef<pos:position pos:line="61" pos:column="7"/></cpp:directive> <name pos:line="61" pos:column="8">FULLSANITYCHECKS<pos:position pos:line="61" pos:column="24"/></name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="62" pos:column="9">tcfullsanitycheck<pos:position pos:line="62" pos:column="26"/></name><argument_list pos:line="62" pos:column="26">(<argument><expr><name pos:line="62" pos:column="27">tc<pos:position pos:line="62" pos:column="29"/></name></expr></argument>)<pos:position pos:line="62" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">endif<pos:position pos:line="63" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">if<pos:position pos:line="64" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="64" pos:column="5">1<pos:position pos:line="64" pos:column="6"/></literal></expr></cpp:if>
	<if pos:line="65" pos:column="9">if<condition pos:line="65" pos:column="11">(<expr><name><name pos:line="65" pos:column="12">tc<pos:position pos:line="65" pos:column="14"/></name><operator pos:line="65" pos:column="14">-&gt;<pos:position pos:line="65" pos:column="19"/></operator><name pos:line="65" pos:column="16">freeInCache<pos:position pos:line="65" pos:column="27"/></name></name><operator pos:line="65" pos:column="27">&gt;=<pos:position pos:line="65" pos:column="32"/></operator><name pos:line="65" pos:column="29">THREADCACHEMAXFREESPACE<pos:position pos:line="65" pos:column="52"/></name></expr>)<pos:position pos:line="65" pos:column="53"/></condition><then pos:line="65" pos:column="53">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="66" pos:column="17">ReleaseFreeInCache<pos:position pos:line="66" pos:column="35"/></name><argument_list pos:line="66" pos:column="35">(<argument><expr><name pos:line="66" pos:column="36">p<pos:position pos:line="66" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="39">tc<pos:position pos:line="66" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="43">mymspace<pos:position pos:line="66" pos:column="51"/></name></expr></argument>)<pos:position pos:line="66" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="53"/></expr_stmt></block></then></if>
<cpp:endif pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">endif<pos:position pos:line="67" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
