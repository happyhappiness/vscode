<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_2850_git-2.3.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">setup_named_sock<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">listen_addr<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">int<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">listen_port<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="65">struct<pos:position pos:line="1" pos:column="71"/></name> <name pos:line="1" pos:column="72">socketlist<pos:position pos:line="1" pos:column="82"/></name></name> <modifier pos:line="1" pos:column="83">*<pos:position pos:line="1" pos:column="84"/></modifier></type><name pos:line="1" pos:column="84">socklist<pos:position pos:line="1" pos:column="92"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="93"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">socknum<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><literal type="number" pos:line="3" pos:column="23">0<pos:position pos:line="3" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name></type> <name><name pos:line="4" pos:column="14">pbuf<pos:position pos:line="4" pos:column="18"/></name><index pos:line="4" pos:column="18">[<expr><name pos:line="4" pos:column="19">NI_MAXSERV<pos:position pos:line="4" pos:column="29"/></name></expr>]<pos:position pos:line="4" pos:column="30"/></index></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">addrinfo<pos:position pos:line="5" pos:column="24"/></name></name></type> <name pos:line="5" pos:column="25">hints<pos:position pos:line="5" pos:column="30"/></name></decl>, <modifier pos:line="5" pos:column="32">*<pos:position pos:line="5" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="33">ai0<pos:position pos:line="5" pos:column="36"/></name></decl>, <modifier pos:line="5" pos:column="38">*<pos:position pos:line="5" pos:column="39"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="39">ai<pos:position pos:line="5" pos:column="41"/></name></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">gai<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">long<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">flags<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="9" pos:column="9">sprintf<pos:position pos:line="9" pos:column="16"/></name><argument_list pos:line="9" pos:column="16">(<argument><expr><name pos:line="9" pos:column="17">pbuf<pos:position pos:line="9" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="23">"%d"<pos:position pos:line="9" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="29">listen_port<pos:position pos:line="9" pos:column="40"/></name></expr></argument>)<pos:position pos:line="9" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">memset<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><operator pos:line="10" pos:column="16">&amp;<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="17">hints<pos:position pos:line="10" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="27">sizeof<argument_list pos:line="10" pos:column="33">(<argument><expr><name pos:line="10" pos:column="34">hints<pos:position pos:line="10" pos:column="39"/></name></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="11" pos:column="9">hints<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">.<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">ai_family<pos:position pos:line="11" pos:column="24"/></name></name> <operator pos:line="11" pos:column="25">=<pos:position pos:line="11" pos:column="26"/></operator> <name pos:line="11" pos:column="27">AF_UNSPEC<pos:position pos:line="11" pos:column="36"/></name></expr>;<pos:position pos:line="11" pos:column="37"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="12" pos:column="9">hints<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">.<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">ai_socktype<pos:position pos:line="12" pos:column="26"/></name></name> <operator pos:line="12" pos:column="27">=<pos:position pos:line="12" pos:column="28"/></operator> <name pos:line="12" pos:column="29">SOCK_STREAM<pos:position pos:line="12" pos:column="40"/></name></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="13" pos:column="9">hints<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">.<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">ai_protocol<pos:position pos:line="13" pos:column="26"/></name></name> <operator pos:line="13" pos:column="27">=<pos:position pos:line="13" pos:column="28"/></operator> <name pos:line="13" pos:column="29">IPPROTO_TCP<pos:position pos:line="13" pos:column="40"/></name></expr>;<pos:position pos:line="13" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">hints<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">.<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="15">ai_flags<pos:position pos:line="14" pos:column="23"/></name></name> <operator pos:line="14" pos:column="24">=<pos:position pos:line="14" pos:column="25"/></operator> <name pos:line="14" pos:column="26">AI_PASSIVE<pos:position pos:line="14" pos:column="36"/></name></expr>;<pos:position pos:line="14" pos:column="37"/></expr_stmt>

	<expr_stmt><expr><name pos:line="16" pos:column="9">gai<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <call><name pos:line="16" pos:column="15">getaddrinfo<pos:position pos:line="16" pos:column="26"/></name><argument_list pos:line="16" pos:column="26">(<argument><expr><name pos:line="16" pos:column="27">listen_addr<pos:position pos:line="16" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="40">pbuf<pos:position pos:line="16" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="46">&amp;<pos:position pos:line="16" pos:column="51"/></operator><name pos:line="16" pos:column="47">hints<pos:position pos:line="16" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="54">&amp;<pos:position pos:line="16" pos:column="59"/></operator><name pos:line="16" pos:column="55">ai0<pos:position pos:line="16" pos:column="58"/></name></expr></argument>)<pos:position pos:line="16" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="60"/></expr_stmt>
	<if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">gai<pos:position pos:line="17" pos:column="16"/></name></expr>)<pos:position pos:line="17" pos:column="17"/></condition><then pos:line="17" pos:column="17"> <block pos:line="17" pos:column="18">{
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">logerror<pos:position pos:line="18" pos:column="25"/></name><argument_list pos:line="18" pos:column="25">(<argument><expr><literal type="string" pos:line="18" pos:column="26">"getaddrinfo() for %s failed: %s"<pos:position pos:line="18" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="61">listen_addr<pos:position pos:line="18" pos:column="72"/></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="74">gai_strerror<pos:position pos:line="18" pos:column="86"/></name><argument_list pos:line="18" pos:column="86">(<argument><expr><name pos:line="18" pos:column="87">gai<pos:position pos:line="18" pos:column="90"/></name></expr></argument>)<pos:position pos:line="18" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="93"/></expr_stmt>
		<return pos:line="19" pos:column="17">return <expr><literal type="number" pos:line="19" pos:column="24">0<pos:position pos:line="19" pos:column="25"/></literal></expr>;<pos:position pos:line="19" pos:column="26"/></return>
	}<pos:position pos:line="20" pos:column="10"/></block></then></if>

	<for pos:line="22" pos:column="9">for <control pos:line="22" pos:column="13">(<init><expr><name pos:line="22" pos:column="14">ai<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">=<pos:position pos:line="22" pos:column="18"/></operator> <name pos:line="22" pos:column="19">ai0<pos:position pos:line="22" pos:column="22"/></name></expr>;<pos:position pos:line="22" pos:column="23"/></init> <condition><expr><name pos:line="22" pos:column="24">ai<pos:position pos:line="22" pos:column="26"/></name></expr>;<pos:position pos:line="22" pos:column="27"/></condition> <incr><expr><name pos:line="22" pos:column="28">ai<pos:position pos:line="22" pos:column="30"/></name> <operator pos:line="22" pos:column="31">=<pos:position pos:line="22" pos:column="32"/></operator> <name><name pos:line="22" pos:column="33">ai<pos:position pos:line="22" pos:column="35"/></name><operator pos:line="22" pos:column="35">-&gt;<pos:position pos:line="22" pos:column="40"/></operator><name pos:line="22" pos:column="37">ai_next<pos:position pos:line="22" pos:column="44"/></name></name></expr></incr>)<pos:position pos:line="22" pos:column="45"/></control> <block pos:line="22" pos:column="46">{
		<decl_stmt><decl><type><name pos:line="23" pos:column="17">int<pos:position pos:line="23" pos:column="20"/></name></type> <name pos:line="23" pos:column="21">sockfd<pos:position pos:line="23" pos:column="27"/></name></decl>;<pos:position pos:line="23" pos:column="28"/></decl_stmt>

		<expr_stmt><expr><name pos:line="25" pos:column="17">sockfd<pos:position pos:line="25" pos:column="23"/></name> <operator pos:line="25" pos:column="24">=<pos:position pos:line="25" pos:column="25"/></operator> <call><name pos:line="25" pos:column="26">socket<pos:position pos:line="25" pos:column="32"/></name><argument_list pos:line="25" pos:column="32">(<argument><expr><name><name pos:line="25" pos:column="33">ai<pos:position pos:line="25" pos:column="35"/></name><operator pos:line="25" pos:column="35">-&gt;<pos:position pos:line="25" pos:column="40"/></operator><name pos:line="25" pos:column="37">ai_family<pos:position pos:line="25" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="48">ai<pos:position pos:line="25" pos:column="50"/></name><operator pos:line="25" pos:column="50">-&gt;<pos:position pos:line="25" pos:column="55"/></operator><name pos:line="25" pos:column="52">ai_socktype<pos:position pos:line="25" pos:column="63"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="65">ai<pos:position pos:line="25" pos:column="67"/></name><operator pos:line="25" pos:column="67">-&gt;<pos:position pos:line="25" pos:column="72"/></operator><name pos:line="25" pos:column="69">ai_protocol<pos:position pos:line="25" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="82"/></expr_stmt>
		<if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name pos:line="26" pos:column="21">sockfd<pos:position pos:line="26" pos:column="27"/></name> <operator pos:line="26" pos:column="28">&lt;<pos:position pos:line="26" pos:column="32"/></operator> <literal type="number" pos:line="26" pos:column="30">0<pos:position pos:line="26" pos:column="31"/></literal></expr>)<pos:position pos:line="26" pos:column="32"/></condition><then pos:line="26" pos:column="32">
			<block type="pseudo"><continue pos:line="27" pos:column="25">continue;<pos:position pos:line="27" pos:column="34"/></continue></block></then></if>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">sockfd<pos:position pos:line="28" pos:column="27"/></name> <operator pos:line="28" pos:column="28">&gt;=<pos:position pos:line="28" pos:column="33"/></operator> <name pos:line="28" pos:column="31">FD_SETSIZE<pos:position pos:line="28" pos:column="41"/></name></expr>)<pos:position pos:line="28" pos:column="42"/></condition><then pos:line="28" pos:column="42"> <block pos:line="28" pos:column="43">{
			<expr_stmt><expr><call><name pos:line="29" pos:column="25">logerror<pos:position pos:line="29" pos:column="33"/></name><argument_list pos:line="29" pos:column="33">(<argument><expr><literal type="string" pos:line="29" pos:column="34">"Socket descriptor too large"<pos:position pos:line="29" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="65"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="30" pos:column="25">close<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">(<argument><expr><name pos:line="30" pos:column="31">sockfd<pos:position pos:line="30" pos:column="37"/></name></expr></argument>)<pos:position pos:line="30" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="39"/></expr_stmt>
			<continue pos:line="31" pos:column="25">continue;<pos:position pos:line="31" pos:column="34"/></continue>
		}<pos:position pos:line="32" pos:column="18"/></block></then></if>

<cpp:ifdef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">ifdef<pos:position pos:line="34" pos:column="7"/></cpp:directive> <name pos:line="34" pos:column="8">IPV6_V6ONLY<pos:position pos:line="34" pos:column="19"/></name></cpp:ifdef>
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name><name pos:line="35" pos:column="21">ai<pos:position pos:line="35" pos:column="23"/></name><operator pos:line="35" pos:column="23">-&gt;<pos:position pos:line="35" pos:column="28"/></operator><name pos:line="35" pos:column="25">ai_family<pos:position pos:line="35" pos:column="34"/></name></name> <operator pos:line="35" pos:column="35">==<pos:position pos:line="35" pos:column="37"/></operator> <name pos:line="35" pos:column="38">AF_INET6<pos:position pos:line="35" pos:column="46"/></name></expr>)<pos:position pos:line="35" pos:column="47"/></condition><then pos:line="35" pos:column="47"> <block pos:line="35" pos:column="48">{
			<decl_stmt><decl><type><name pos:line="36" pos:column="25">int<pos:position pos:line="36" pos:column="28"/></name></type> <name pos:line="36" pos:column="29">on<pos:position pos:line="36" pos:column="31"/></name> <init pos:line="36" pos:column="32">= <expr><literal type="number" pos:line="36" pos:column="34">1<pos:position pos:line="36" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="36" pos:column="36"/></decl_stmt>
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">setsockopt<pos:position pos:line="37" pos:column="35"/></name><argument_list pos:line="37" pos:column="35">(<argument><expr><name pos:line="37" pos:column="36">sockfd<pos:position pos:line="37" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="44">IPPROTO_IPV6<pos:position pos:line="37" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="58">IPV6_V6ONLY<pos:position pos:line="37" pos:column="69"/></name></expr></argument>,
				   <argument><expr><operator pos:line="38" pos:column="36">&amp;<pos:position pos:line="38" pos:column="41"/></operator><name pos:line="38" pos:column="37">on<pos:position pos:line="38" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="38" pos:column="41">sizeof<argument_list pos:line="38" pos:column="47">(<argument><expr><name pos:line="38" pos:column="48">on<pos:position pos:line="38" pos:column="50"/></name></expr></argument>)<pos:position pos:line="38" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="38" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="53"/></expr_stmt>
			<comment type="block" pos:line="39" pos:column="25">/* Note: error is not fatal */</comment>
		}<pos:position pos:line="40" pos:column="18"/></block></then></if>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>

		<if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><call><name pos:line="43" pos:column="21">set_reuse_addr<pos:position pos:line="43" pos:column="35"/></name><argument_list pos:line="43" pos:column="35">(<argument><expr><name pos:line="43" pos:column="36">sockfd<pos:position pos:line="43" pos:column="42"/></name></expr></argument>)<pos:position pos:line="43" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="44"/></condition><then pos:line="43" pos:column="44"> <block pos:line="43" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="44" pos:column="25">logerror<pos:position pos:line="44" pos:column="33"/></name><argument_list pos:line="44" pos:column="33">(<argument><expr><literal type="string" pos:line="44" pos:column="34">"Could not set SO_REUSEADDR: %s"<pos:position pos:line="44" pos:column="66"/></literal></expr></argument>, <argument><expr><call><name pos:line="44" pos:column="68">strerror<pos:position pos:line="44" pos:column="76"/></name><argument_list pos:line="44" pos:column="76">(<argument><expr><name pos:line="44" pos:column="77">errno<pos:position pos:line="44" pos:column="82"/></name></expr></argument>)<pos:position pos:line="44" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="85"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="45" pos:column="25">close<pos:position pos:line="45" pos:column="30"/></name><argument_list pos:line="45" pos:column="30">(<argument><expr><name pos:line="45" pos:column="31">sockfd<pos:position pos:line="45" pos:column="37"/></name></expr></argument>)<pos:position pos:line="45" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="39"/></expr_stmt>
			<continue pos:line="46" pos:column="25">continue;<pos:position pos:line="46" pos:column="34"/></continue>
		}<pos:position pos:line="47" pos:column="18"/></block></then></if>

		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><call><name pos:line="49" pos:column="21">bind<pos:position pos:line="49" pos:column="25"/></name><argument_list pos:line="49" pos:column="25">(<argument><expr><name pos:line="49" pos:column="26">sockfd<pos:position pos:line="49" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="34">ai<pos:position pos:line="49" pos:column="36"/></name><operator pos:line="49" pos:column="36">-&gt;<pos:position pos:line="49" pos:column="41"/></operator><name pos:line="49" pos:column="38">ai_addr<pos:position pos:line="49" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="47">ai<pos:position pos:line="49" pos:column="49"/></name><operator pos:line="49" pos:column="49">-&gt;<pos:position pos:line="49" pos:column="54"/></operator><name pos:line="49" pos:column="51">ai_addrlen<pos:position pos:line="49" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="62"/></argument_list></call> <operator pos:line="49" pos:column="63">&lt;<pos:position pos:line="49" pos:column="67"/></operator> <literal type="number" pos:line="49" pos:column="65">0<pos:position pos:line="49" pos:column="66"/></literal></expr>)<pos:position pos:line="49" pos:column="67"/></condition><then pos:line="49" pos:column="67"> <block pos:line="49" pos:column="68">{
			<expr_stmt><expr><call><name pos:line="50" pos:column="25">logerror<pos:position pos:line="50" pos:column="33"/></name><argument_list pos:line="50" pos:column="33">(<argument><expr><literal type="string" pos:line="50" pos:column="34">"Could not bind to %s: %s"<pos:position pos:line="50" pos:column="60"/></literal></expr></argument>,
				 <argument><expr><call><name pos:line="51" pos:column="34">ip2str<pos:position pos:line="51" pos:column="40"/></name><argument_list pos:line="51" pos:column="40">(<argument><expr><name><name pos:line="51" pos:column="41">ai<pos:position pos:line="51" pos:column="43"/></name><operator pos:line="51" pos:column="43">-&gt;<pos:position pos:line="51" pos:column="48"/></operator><name pos:line="51" pos:column="45">ai_family<pos:position pos:line="51" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="56">ai<pos:position pos:line="51" pos:column="58"/></name><operator pos:line="51" pos:column="58">-&gt;<pos:position pos:line="51" pos:column="63"/></operator><name pos:line="51" pos:column="60">ai_addr<pos:position pos:line="51" pos:column="67"/></name></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="69">ai<pos:position pos:line="51" pos:column="71"/></name><operator pos:line="51" pos:column="71">-&gt;<pos:position pos:line="51" pos:column="76"/></operator><name pos:line="51" pos:column="73">ai_addrlen<pos:position pos:line="51" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="84"/></argument_list></call></expr></argument>,
				 <argument><expr><call><name pos:line="52" pos:column="34">strerror<pos:position pos:line="52" pos:column="42"/></name><argument_list pos:line="52" pos:column="42">(<argument><expr><name pos:line="52" pos:column="43">errno<pos:position pos:line="52" pos:column="48"/></name></expr></argument>)<pos:position pos:line="52" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="53" pos:column="25">close<pos:position pos:line="53" pos:column="30"/></name><argument_list pos:line="53" pos:column="30">(<argument><expr><name pos:line="53" pos:column="31">sockfd<pos:position pos:line="53" pos:column="37"/></name></expr></argument>)<pos:position pos:line="53" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="39"/></expr_stmt>
			<continue pos:line="54" pos:column="25">continue;<pos:position pos:line="54" pos:column="34"/></continue>	<comment type="block" pos:line="54" pos:column="41">/* not fatal */</comment>
		}<pos:position pos:line="55" pos:column="18"/></block></then></if>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><call><name pos:line="56" pos:column="21">listen<pos:position pos:line="56" pos:column="27"/></name><argument_list pos:line="56" pos:column="27">(<argument><expr><name pos:line="56" pos:column="28">sockfd<pos:position pos:line="56" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="36">5<pos:position pos:line="56" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="38"/></argument_list></call> <operator pos:line="56" pos:column="39">&lt;<pos:position pos:line="56" pos:column="43"/></operator> <literal type="number" pos:line="56" pos:column="41">0<pos:position pos:line="56" pos:column="42"/></literal></expr>)<pos:position pos:line="56" pos:column="43"/></condition><then pos:line="56" pos:column="43"> <block pos:line="56" pos:column="44">{
			<expr_stmt><expr><call><name pos:line="57" pos:column="25">logerror<pos:position pos:line="57" pos:column="33"/></name><argument_list pos:line="57" pos:column="33">(<argument><expr><literal type="string" pos:line="57" pos:column="34">"Could not listen to %s: %s"<pos:position pos:line="57" pos:column="62"/></literal></expr></argument>,
				 <argument><expr><call><name pos:line="58" pos:column="34">ip2str<pos:position pos:line="58" pos:column="40"/></name><argument_list pos:line="58" pos:column="40">(<argument><expr><name><name pos:line="58" pos:column="41">ai<pos:position pos:line="58" pos:column="43"/></name><operator pos:line="58" pos:column="43">-&gt;<pos:position pos:line="58" pos:column="48"/></operator><name pos:line="58" pos:column="45">ai_family<pos:position pos:line="58" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="56">ai<pos:position pos:line="58" pos:column="58"/></name><operator pos:line="58" pos:column="58">-&gt;<pos:position pos:line="58" pos:column="63"/></operator><name pos:line="58" pos:column="60">ai_addr<pos:position pos:line="58" pos:column="67"/></name></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="69">ai<pos:position pos:line="58" pos:column="71"/></name><operator pos:line="58" pos:column="71">-&gt;<pos:position pos:line="58" pos:column="76"/></operator><name pos:line="58" pos:column="73">ai_addrlen<pos:position pos:line="58" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="84"/></argument_list></call></expr></argument>,
				 <argument><expr><call><name pos:line="59" pos:column="34">strerror<pos:position pos:line="59" pos:column="42"/></name><argument_list pos:line="59" pos:column="42">(<argument><expr><name pos:line="59" pos:column="43">errno<pos:position pos:line="59" pos:column="48"/></name></expr></argument>)<pos:position pos:line="59" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="59" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="51"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="60" pos:column="25">close<pos:position pos:line="60" pos:column="30"/></name><argument_list pos:line="60" pos:column="30">(<argument><expr><name pos:line="60" pos:column="31">sockfd<pos:position pos:line="60" pos:column="37"/></name></expr></argument>)<pos:position pos:line="60" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="39"/></expr_stmt>
			<continue pos:line="61" pos:column="25">continue;<pos:position pos:line="61" pos:column="34"/></continue>	<comment type="block" pos:line="61" pos:column="41">/* not fatal */</comment>
		}<pos:position pos:line="62" pos:column="18"/></block></then></if>

		<expr_stmt><expr><name pos:line="64" pos:column="17">flags<pos:position pos:line="64" pos:column="22"/></name> <operator pos:line="64" pos:column="23">=<pos:position pos:line="64" pos:column="24"/></operator> <call><name pos:line="64" pos:column="25">fcntl<pos:position pos:line="64" pos:column="30"/></name><argument_list pos:line="64" pos:column="30">(<argument><expr><name pos:line="64" pos:column="31">sockfd<pos:position pos:line="64" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="39">F_GETFD<pos:position pos:line="64" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="64" pos:column="48">0<pos:position pos:line="64" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="51"/></expr_stmt>
		<if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><name pos:line="65" pos:column="21">flags<pos:position pos:line="65" pos:column="26"/></name> <operator pos:line="65" pos:column="27">&gt;=<pos:position pos:line="65" pos:column="32"/></operator> <literal type="number" pos:line="65" pos:column="30">0<pos:position pos:line="65" pos:column="31"/></literal></expr>)<pos:position pos:line="65" pos:column="32"/></condition><then pos:line="65" pos:column="32">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="66" pos:column="25">fcntl<pos:position pos:line="66" pos:column="30"/></name><argument_list pos:line="66" pos:column="30">(<argument><expr><name pos:line="66" pos:column="31">sockfd<pos:position pos:line="66" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="39">F_SETFD<pos:position pos:line="66" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="48">flags<pos:position pos:line="66" pos:column="53"/></name> <operator pos:line="66" pos:column="54">|<pos:position pos:line="66" pos:column="55"/></operator> <name pos:line="66" pos:column="56">FD_CLOEXEC<pos:position pos:line="66" pos:column="66"/></name></expr></argument>)<pos:position pos:line="66" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="68"/></expr_stmt></block></then></if>

		<expr_stmt><expr><call><name pos:line="68" pos:column="17">ALLOC_GROW<pos:position pos:line="68" pos:column="27"/></name><argument_list pos:line="68" pos:column="27">(<argument><expr><name><name pos:line="68" pos:column="28">socklist<pos:position pos:line="68" pos:column="36"/></name><operator pos:line="68" pos:column="36">-&gt;<pos:position pos:line="68" pos:column="41"/></operator><name pos:line="68" pos:column="38">list<pos:position pos:line="68" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="44">socklist<pos:position pos:line="68" pos:column="52"/></name><operator pos:line="68" pos:column="52">-&gt;<pos:position pos:line="68" pos:column="57"/></operator><name pos:line="68" pos:column="54">nr<pos:position pos:line="68" pos:column="56"/></name></name> <operator pos:line="68" pos:column="57">+<pos:position pos:line="68" pos:column="58"/></operator> <literal type="number" pos:line="68" pos:column="59">1<pos:position pos:line="68" pos:column="60"/></literal></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="62">socklist<pos:position pos:line="68" pos:column="70"/></name><operator pos:line="68" pos:column="70">-&gt;<pos:position pos:line="68" pos:column="75"/></operator><name pos:line="68" pos:column="72">alloc<pos:position pos:line="68" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="79"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="69" pos:column="17">socklist<pos:position pos:line="69" pos:column="25"/></name><operator pos:line="69" pos:column="25">-&gt;<pos:position pos:line="69" pos:column="30"/></operator><name pos:line="69" pos:column="27">list<pos:position pos:line="69" pos:column="31"/></name><index pos:line="69" pos:column="31">[<expr><name><name pos:line="69" pos:column="32">socklist<pos:position pos:line="69" pos:column="40"/></name><operator pos:line="69" pos:column="40">-&gt;<pos:position pos:line="69" pos:column="45"/></operator><name pos:line="69" pos:column="42">nr<pos:position pos:line="69" pos:column="44"/></name></name><operator pos:line="69" pos:column="44">++<pos:position pos:line="69" pos:column="46"/></operator></expr>]<pos:position pos:line="69" pos:column="47"/></index></name> <operator pos:line="69" pos:column="48">=<pos:position pos:line="69" pos:column="49"/></operator> <name pos:line="69" pos:column="50">sockfd<pos:position pos:line="69" pos:column="56"/></name></expr>;<pos:position pos:line="69" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><name pos:line="70" pos:column="17">socknum<pos:position pos:line="70" pos:column="24"/></name><operator pos:line="70" pos:column="24">++<pos:position pos:line="70" pos:column="26"/></operator></expr>;<pos:position pos:line="70" pos:column="27"/></expr_stmt>
	}<pos:position pos:line="71" pos:column="10"/></block></for>

	<expr_stmt><expr><call><name pos:line="73" pos:column="9">freeaddrinfo<pos:position pos:line="73" pos:column="21"/></name><argument_list pos:line="73" pos:column="21">(<argument><expr><name pos:line="73" pos:column="22">ai0<pos:position pos:line="73" pos:column="25"/></name></expr></argument>)<pos:position pos:line="73" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="27"/></expr_stmt>

	<return pos:line="75" pos:column="9">return <expr><name pos:line="75" pos:column="16">socknum<pos:position pos:line="75" pos:column="23"/></name></expr>;<pos:position pos:line="75" pos:column="24"/></return>
}<pos:position pos:line="76" pos:column="2"/></block></function></unit>
