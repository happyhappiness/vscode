<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5225_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">read_from_stdin<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">shortlog<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">log<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="50"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">author<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><name pos:line="3" pos:column="32">STRBUF_INIT<pos:position pos:line="3" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">strbuf<pos:position pos:line="4" pos:column="22"/></name></name></type> <name pos:line="4" pos:column="23">oneline<pos:position pos:line="4" pos:column="30"/></name> <init pos:line="4" pos:column="31">= <expr><name pos:line="4" pos:column="33">STRBUF_INIT<pos:position pos:line="4" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="45"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="5" pos:column="9">static<pos:position pos:line="5" pos:column="15"/></specifier> <type><specifier pos:line="5" pos:column="16">const<pos:position pos:line="5" pos:column="21"/></specifier> <name pos:line="5" pos:column="22">char<pos:position pos:line="5" pos:column="26"/></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name><name pos:line="5" pos:column="28">author_match<pos:position pos:line="5" pos:column="40"/></name><index pos:line="5" pos:column="40">[<expr><literal type="number" pos:line="5" pos:column="41">2<pos:position pos:line="5" pos:column="42"/></literal></expr>]<pos:position pos:line="5" pos:column="43"/></index></name> <init pos:line="5" pos:column="44">= <expr><block pos:line="5" pos:column="46">{ <expr><literal type="string" pos:line="5" pos:column="48">"Author: "<pos:position pos:line="5" pos:column="58"/></literal></expr>, <expr><literal type="string" pos:line="5" pos:column="60">"author "<pos:position pos:line="5" pos:column="69"/></literal></expr> }<pos:position pos:line="5" pos:column="71"/></block></expr></init></decl>;<pos:position pos:line="5" pos:column="72"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="6" pos:column="9">static<pos:position pos:line="6" pos:column="15"/></specifier> <type><specifier pos:line="6" pos:column="16">const<pos:position pos:line="6" pos:column="21"/></specifier> <name pos:line="6" pos:column="22">char<pos:position pos:line="6" pos:column="26"/></name> <modifier pos:line="6" pos:column="27">*<pos:position pos:line="6" pos:column="28"/></modifier></type><name><name pos:line="6" pos:column="28">committer_match<pos:position pos:line="6" pos:column="43"/></name><index pos:line="6" pos:column="43">[<expr><literal type="number" pos:line="6" pos:column="44">2<pos:position pos:line="6" pos:column="45"/></literal></expr>]<pos:position pos:line="6" pos:column="46"/></index></name> <init pos:line="6" pos:column="47">= <expr><block pos:line="6" pos:column="49">{ <expr><literal type="string" pos:line="6" pos:column="51">"Commit: "<pos:position pos:line="6" pos:column="61"/></literal></expr>, <expr><literal type="string" pos:line="6" pos:column="63">"committer "<pos:position pos:line="6" pos:column="75"/></literal></expr> }<pos:position pos:line="6" pos:column="77"/></block></expr></init></decl>;<pos:position pos:line="6" pos:column="78"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <name pos:line="7" pos:column="15">char<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier><modifier pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></modifier></type><name pos:line="7" pos:column="22">match<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>

	<expr_stmt><expr><name pos:line="9" pos:column="9">match<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <ternary><condition><expr><name><name pos:line="9" pos:column="17">log<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">-&gt;<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="22">committer<pos:position pos:line="9" pos:column="31"/></name></name></expr> ?<pos:position pos:line="9" pos:column="33"/></condition><then pos:line="9" pos:column="33"> <expr><name pos:line="9" pos:column="34">committer_match<pos:position pos:line="9" pos:column="49"/></name></expr> <pos:position pos:line="9" pos:column="50"/></then><else pos:line="9" pos:column="50">: <expr><name pos:line="9" pos:column="52">author_match<pos:position pos:line="9" pos:column="64"/></name></expr></else></ternary></expr>;<pos:position pos:line="9" pos:column="65"/></expr_stmt>
	<while pos:line="10" pos:column="9">while <condition pos:line="10" pos:column="15">(<expr><call><name pos:line="10" pos:column="16">strbuf_getline_lf<pos:position pos:line="10" pos:column="33"/></name><argument_list pos:line="10" pos:column="33">(<argument><expr><operator pos:line="10" pos:column="34">&amp;<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="35">author<pos:position pos:line="10" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="43">stdin<pos:position pos:line="10" pos:column="48"/></name></expr></argument>)<pos:position pos:line="10" pos:column="49"/></argument_list></call> <operator pos:line="10" pos:column="50">!=<pos:position pos:line="10" pos:column="52"/></operator> <name pos:line="10" pos:column="53">EOF<pos:position pos:line="10" pos:column="56"/></name></expr>)<pos:position pos:line="10" pos:column="57"/></condition> <block pos:line="10" pos:column="58">{
		<decl_stmt><decl><type><specifier pos:line="11" pos:column="17">const<pos:position pos:line="11" pos:column="22"/></specifier> <name pos:line="11" pos:column="23">char<pos:position pos:line="11" pos:column="27"/></name> <modifier pos:line="11" pos:column="28">*<pos:position pos:line="11" pos:column="29"/></modifier></type><name pos:line="11" pos:column="29">v<pos:position pos:line="11" pos:column="30"/></name></decl>;<pos:position pos:line="11" pos:column="31"/></decl_stmt>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><operator pos:line="12" pos:column="21">!<pos:position pos:line="12" pos:column="22"/></operator><call><name pos:line="12" pos:column="22">skip_prefix<pos:position pos:line="12" pos:column="33"/></name><argument_list pos:line="12" pos:column="33">(<argument><expr><name><name pos:line="12" pos:column="34">author<pos:position pos:line="12" pos:column="40"/></name><operator pos:line="12" pos:column="40">.<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="41">buf<pos:position pos:line="12" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="46">match<pos:position pos:line="12" pos:column="51"/></name><index pos:line="12" pos:column="51">[<expr><literal type="number" pos:line="12" pos:column="52">0<pos:position pos:line="12" pos:column="53"/></literal></expr>]<pos:position pos:line="12" pos:column="54"/></index></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="56">&amp;<pos:position pos:line="12" pos:column="61"/></operator><name pos:line="12" pos:column="57">v<pos:position pos:line="12" pos:column="58"/></name></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></call> <operator pos:line="12" pos:column="60">&amp;&amp;<pos:position pos:line="12" pos:column="70"/></operator>
		    <operator pos:line="13" pos:column="21">!<pos:position pos:line="13" pos:column="22"/></operator><call><name pos:line="13" pos:column="22">skip_prefix<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">(<argument><expr><name><name pos:line="13" pos:column="34">author<pos:position pos:line="13" pos:column="40"/></name><operator pos:line="13" pos:column="40">.<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="41">buf<pos:position pos:line="13" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="46">match<pos:position pos:line="13" pos:column="51"/></name><index pos:line="13" pos:column="51">[<expr><literal type="number" pos:line="13" pos:column="52">1<pos:position pos:line="13" pos:column="53"/></literal></expr>]<pos:position pos:line="13" pos:column="54"/></index></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="56">&amp;<pos:position pos:line="13" pos:column="61"/></operator><name pos:line="13" pos:column="57">v<pos:position pos:line="13" pos:column="58"/></name></expr></argument>)<pos:position pos:line="13" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="60"/></condition><then pos:line="13" pos:column="60">
			<block type="pseudo"><continue pos:line="14" pos:column="25">continue;<pos:position pos:line="14" pos:column="34"/></continue></block></then></if>
		<while pos:line="15" pos:column="17">while <condition pos:line="15" pos:column="23">(<expr><call><name pos:line="15" pos:column="24">strbuf_getline_lf<pos:position pos:line="15" pos:column="41"/></name><argument_list pos:line="15" pos:column="41">(<argument><expr><operator pos:line="15" pos:column="42">&amp;<pos:position pos:line="15" pos:column="47"/></operator><name pos:line="15" pos:column="43">oneline<pos:position pos:line="15" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="52">stdin<pos:position pos:line="15" pos:column="57"/></name></expr></argument>)<pos:position pos:line="15" pos:column="58"/></argument_list></call> <operator pos:line="15" pos:column="59">!=<pos:position pos:line="15" pos:column="61"/></operator> <name pos:line="15" pos:column="62">EOF<pos:position pos:line="15" pos:column="65"/></name> <operator pos:line="15" pos:column="66">&amp;&amp;<pos:position pos:line="15" pos:column="76"/></operator>
		       <name><name pos:line="16" pos:column="24">oneline<pos:position pos:line="16" pos:column="31"/></name><operator pos:line="16" pos:column="31">.<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="32">len<pos:position pos:line="16" pos:column="35"/></name></name></expr>)<pos:position pos:line="16" pos:column="36"/></condition>
			<block type="pseudo"><empty_stmt pos:line="17" pos:column="25">;<pos:position pos:line="17" pos:column="26"/></empty_stmt></block></while> <comment type="block" pos:line="17" pos:column="27">/* discard headers */</comment>
		<while pos:line="18" pos:column="17">while <condition pos:line="18" pos:column="23">(<expr><call><name pos:line="18" pos:column="24">strbuf_getline_lf<pos:position pos:line="18" pos:column="41"/></name><argument_list pos:line="18" pos:column="41">(<argument><expr><operator pos:line="18" pos:column="42">&amp;<pos:position pos:line="18" pos:column="47"/></operator><name pos:line="18" pos:column="43">oneline<pos:position pos:line="18" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="52">stdin<pos:position pos:line="18" pos:column="57"/></name></expr></argument>)<pos:position pos:line="18" pos:column="58"/></argument_list></call> <operator pos:line="18" pos:column="59">!=<pos:position pos:line="18" pos:column="61"/></operator> <name pos:line="18" pos:column="62">EOF<pos:position pos:line="18" pos:column="65"/></name> <operator pos:line="18" pos:column="66">&amp;&amp;<pos:position pos:line="18" pos:column="76"/></operator>
		       <operator pos:line="19" pos:column="24">!<pos:position pos:line="19" pos:column="25"/></operator><name><name pos:line="19" pos:column="25">oneline<pos:position pos:line="19" pos:column="32"/></name><operator pos:line="19" pos:column="32">.<pos:position pos:line="19" pos:column="33"/></operator><name pos:line="19" pos:column="33">len<pos:position pos:line="19" pos:column="36"/></name></name></expr>)<pos:position pos:line="19" pos:column="37"/></condition>
			<block type="pseudo"><empty_stmt pos:line="20" pos:column="25">;<pos:position pos:line="20" pos:column="26"/></empty_stmt></block></while> <comment type="block" pos:line="20" pos:column="27">/* discard blanks */</comment>
		<expr_stmt><expr><call><name pos:line="21" pos:column="17">insert_one_record<pos:position pos:line="21" pos:column="34"/></name><argument_list pos:line="21" pos:column="34">(<argument><expr><name pos:line="21" pos:column="35">log<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="40">v<pos:position pos:line="21" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="43">oneline<pos:position pos:line="21" pos:column="50"/></name><operator pos:line="21" pos:column="50">.<pos:position pos:line="21" pos:column="51"/></operator><name pos:line="21" pos:column="51">buf<pos:position pos:line="21" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="56"/></expr_stmt>
	}<pos:position pos:line="22" pos:column="10"/></block></while>
	<expr_stmt><expr><call><name pos:line="23" pos:column="9">strbuf_release<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><operator pos:line="23" pos:column="24">&amp;<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="25">author<pos:position pos:line="23" pos:column="31"/></name></expr></argument>)<pos:position pos:line="23" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">strbuf_release<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><operator pos:line="24" pos:column="24">&amp;<pos:position pos:line="24" pos:column="29"/></operator><name pos:line="24" pos:column="25">oneline<pos:position pos:line="24" pos:column="32"/></name></expr></argument>)<pos:position pos:line="24" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
