<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4141_git-2.4.12.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">format_config<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name><name pos:line="1" pos:column="26">struct<pos:position pos:line="1" pos:column="32"/></name> <name pos:line="1" pos:column="33">strbuf<pos:position pos:line="1" pos:column="39"/></name></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">buf<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">key_<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="64">const<pos:position pos:line="1" pos:column="69"/></specifier> <name pos:line="1" pos:column="70">char<pos:position pos:line="1" pos:column="74"/></name> <modifier pos:line="1" pos:column="75">*<pos:position pos:line="1" pos:column="76"/></modifier></type><name pos:line="1" pos:column="76">value_<pos:position pos:line="1" pos:column="82"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="83"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">must_free_vptr<pos:position pos:line="3" pos:column="27"/></name> <init pos:line="3" pos:column="28">= <expr><literal type="number" pos:line="3" pos:column="30">0<pos:position pos:line="3" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">int<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">must_print_delim<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><literal type="number" pos:line="4" pos:column="32">0<pos:position pos:line="4" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name></type> <name><name pos:line="5" pos:column="14">value<pos:position pos:line="5" pos:column="19"/></name><index pos:line="5" pos:column="19">[<expr><literal type="number" pos:line="5" pos:column="20">256<pos:position pos:line="5" pos:column="23"/></literal></expr>]<pos:position pos:line="5" pos:column="24"/></index></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">vptr<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name pos:line="6" pos:column="28">value<pos:position pos:line="6" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">strbuf_init<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name pos:line="8" pos:column="21">buf<pos:position pos:line="8" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="26">0<pos:position pos:line="8" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="29"/></expr_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">show_keys<pos:position pos:line="10" pos:column="22"/></name></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23"> <block pos:line="10" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">strbuf_addstr<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">(<argument><expr><name pos:line="11" pos:column="31">buf<pos:position pos:line="11" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="36">key_<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name pos:line="12" pos:column="17">must_print_delim<pos:position pos:line="12" pos:column="33"/></name> <operator pos:line="12" pos:column="34">=<pos:position pos:line="12" pos:column="35"/></operator> <literal type="number" pos:line="12" pos:column="36">1<pos:position pos:line="12" pos:column="37"/></literal></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="13" pos:column="10"/></block></then></if>
	<if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">types<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">==<pos:position pos:line="14" pos:column="21"/></operator> <name pos:line="14" pos:column="22">TYPE_INT<pos:position pos:line="14" pos:column="30"/></name></expr>)<pos:position pos:line="14" pos:column="31"/></condition><then pos:line="14" pos:column="31">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="17">sprintf<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">value<pos:position pos:line="15" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="32">"%"<pos:position pos:line="15" pos:column="35"/></literal><name pos:line="15" pos:column="35">PRId64<pos:position pos:line="15" pos:column="41"/></name></expr></argument>,
			<argument><expr><call><name pos:line="16" pos:column="25">git_config_int64<pos:position pos:line="16" pos:column="41"/></name><argument_list pos:line="16" pos:column="41">(<argument><expr><name pos:line="16" pos:column="42">key_<pos:position pos:line="16" pos:column="46"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="16" pos:column="48">value_<pos:position pos:line="16" pos:column="54"/></name></expr> ?<pos:position pos:line="16" pos:column="56"/></condition><then pos:line="16" pos:column="56"> <expr><name pos:line="16" pos:column="57">value_<pos:position pos:line="16" pos:column="63"/></name></expr> <pos:position pos:line="16" pos:column="64"/></then><else pos:line="16" pos:column="64">: <expr><literal type="string" pos:line="16" pos:column="66">""<pos:position pos:line="16" pos:column="68"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="16" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="71"/></expr_stmt></block></then>
	<elseif pos:line="17" pos:column="9">else <if pos:line="17" pos:column="14">if <condition pos:line="17" pos:column="17">(<expr><name pos:line="17" pos:column="18">types<pos:position pos:line="17" pos:column="23"/></name> <operator pos:line="17" pos:column="24">==<pos:position pos:line="17" pos:column="26"/></operator> <name pos:line="17" pos:column="27">TYPE_BOOL<pos:position pos:line="17" pos:column="36"/></name></expr>)<pos:position pos:line="17" pos:column="37"/></condition><then pos:line="17" pos:column="37">
		<block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="17">vptr<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <ternary><condition><expr><call><name pos:line="18" pos:column="24">git_config_bool<pos:position pos:line="18" pos:column="39"/></name><argument_list pos:line="18" pos:column="39">(<argument><expr><name pos:line="18" pos:column="40">key_<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="46">value_<pos:position pos:line="18" pos:column="52"/></name></expr></argument>)<pos:position pos:line="18" pos:column="53"/></argument_list></call></expr> ?<pos:position pos:line="18" pos:column="55"/></condition><then pos:line="18" pos:column="55"> <expr><literal type="string" pos:line="18" pos:column="56">"true"<pos:position pos:line="18" pos:column="62"/></literal></expr> <pos:position pos:line="18" pos:column="63"/></then><else pos:line="18" pos:column="63">: <expr><literal type="string" pos:line="18" pos:column="65">"false"<pos:position pos:line="18" pos:column="72"/></literal></expr></else></ternary></expr>;<pos:position pos:line="18" pos:column="73"/></expr_stmt></block></then></if></elseif>
	<elseif pos:line="19" pos:column="9">else <if pos:line="19" pos:column="14">if <condition pos:line="19" pos:column="17">(<expr><name pos:line="19" pos:column="18">types<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">==<pos:position pos:line="19" pos:column="26"/></operator> <name pos:line="19" pos:column="27">TYPE_BOOL_OR_INT<pos:position pos:line="19" pos:column="43"/></name></expr>)<pos:position pos:line="19" pos:column="44"/></condition><then pos:line="19" pos:column="44"> <block pos:line="19" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="20" pos:column="17">int<pos:position pos:line="20" pos:column="20"/></name></type> <name pos:line="20" pos:column="21">is_bool<pos:position pos:line="20" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="20" pos:column="30">v<pos:position pos:line="20" pos:column="31"/></name></decl>;<pos:position pos:line="20" pos:column="32"/></decl_stmt>
		<expr_stmt><expr><name pos:line="21" pos:column="17">v<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <call><name pos:line="21" pos:column="21">git_config_bool_or_int<pos:position pos:line="21" pos:column="43"/></name><argument_list pos:line="21" pos:column="43">(<argument><expr><name pos:line="21" pos:column="44">key_<pos:position pos:line="21" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="50">value_<pos:position pos:line="21" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="58">&amp;<pos:position pos:line="21" pos:column="63"/></operator><name pos:line="21" pos:column="59">is_bool<pos:position pos:line="21" pos:column="66"/></name></expr></argument>)<pos:position pos:line="21" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="68"/></expr_stmt>
		<if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name pos:line="22" pos:column="21">is_bool<pos:position pos:line="22" pos:column="28"/></name></expr>)<pos:position pos:line="22" pos:column="29"/></condition><then pos:line="22" pos:column="29">
			<block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="25">vptr<pos:position pos:line="23" pos:column="29"/></name> <operator pos:line="23" pos:column="30">=<pos:position pos:line="23" pos:column="31"/></operator> <ternary><condition><expr><name pos:line="23" pos:column="32">v<pos:position pos:line="23" pos:column="33"/></name></expr> ?<pos:position pos:line="23" pos:column="35"/></condition><then pos:line="23" pos:column="35"> <expr><literal type="string" pos:line="23" pos:column="36">"true"<pos:position pos:line="23" pos:column="42"/></literal></expr> <pos:position pos:line="23" pos:column="43"/></then><else pos:line="23" pos:column="43">: <expr><literal type="string" pos:line="23" pos:column="45">"false"<pos:position pos:line="23" pos:column="52"/></literal></expr></else></ternary></expr>;<pos:position pos:line="23" pos:column="53"/></expr_stmt></block></then>
		<else pos:line="24" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="25">sprintf<pos:position pos:line="25" pos:column="32"/></name><argument_list pos:line="25" pos:column="32">(<argument><expr><name pos:line="25" pos:column="33">value<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="40">"%d"<pos:position pos:line="25" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="46">v<pos:position pos:line="25" pos:column="47"/></name></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="49"/></expr_stmt></block></else></if>
	}<pos:position pos:line="26" pos:column="10"/></block></then></if></elseif> <elseif pos:line="26" pos:column="11">else <if pos:line="26" pos:column="16">if <condition pos:line="26" pos:column="19">(<expr><name pos:line="26" pos:column="20">types<pos:position pos:line="26" pos:column="25"/></name> <operator pos:line="26" pos:column="26">==<pos:position pos:line="26" pos:column="28"/></operator> <name pos:line="26" pos:column="29">TYPE_PATH<pos:position pos:line="26" pos:column="38"/></name></expr>)<pos:position pos:line="26" pos:column="39"/></condition><then pos:line="26" pos:column="39"> <block pos:line="26" pos:column="40">{
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name pos:line="27" pos:column="21">git_config_pathname<pos:position pos:line="27" pos:column="40"/></name><argument_list pos:line="27" pos:column="40">(<argument><expr><operator pos:line="27" pos:column="41">&amp;<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="42">vptr<pos:position pos:line="27" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="48">key_<pos:position pos:line="27" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="54">value_<pos:position pos:line="27" pos:column="60"/></name></expr></argument>)<pos:position pos:line="27" pos:column="61"/></argument_list></call> <operator pos:line="27" pos:column="62">&lt;<pos:position pos:line="27" pos:column="66"/></operator> <literal type="number" pos:line="27" pos:column="64">0<pos:position pos:line="27" pos:column="65"/></literal></expr>)<pos:position pos:line="27" pos:column="66"/></condition><then pos:line="27" pos:column="66">
			<block type="pseudo"><return pos:line="28" pos:column="25">return <expr><operator pos:line="28" pos:column="32">-<pos:position pos:line="28" pos:column="33"/></operator><literal type="number" pos:line="28" pos:column="33">1<pos:position pos:line="28" pos:column="34"/></literal></expr>;<pos:position pos:line="28" pos:column="35"/></return></block></then></if>
		<expr_stmt><expr><name pos:line="29" pos:column="17">must_free_vptr<pos:position pos:line="29" pos:column="31"/></name> <operator pos:line="29" pos:column="32">=<pos:position pos:line="29" pos:column="33"/></operator> <literal type="number" pos:line="29" pos:column="34">1<pos:position pos:line="29" pos:column="35"/></literal></expr>;<pos:position pos:line="29" pos:column="36"/></expr_stmt>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if></elseif> <elseif pos:line="30" pos:column="11">else <if pos:line="30" pos:column="16">if <condition pos:line="30" pos:column="19">(<expr><name pos:line="30" pos:column="20">value_<pos:position pos:line="30" pos:column="26"/></name></expr>)<pos:position pos:line="30" pos:column="27"/></condition><then pos:line="30" pos:column="27"> <block pos:line="30" pos:column="28">{
		<expr_stmt><expr><name pos:line="31" pos:column="17">vptr<pos:position pos:line="31" pos:column="21"/></name> <operator pos:line="31" pos:column="22">=<pos:position pos:line="31" pos:column="23"/></operator> <name pos:line="31" pos:column="24">value_<pos:position pos:line="31" pos:column="30"/></name></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></then></if></elseif> <else pos:line="32" pos:column="11">else <block pos:line="32" pos:column="16">{
		<comment type="block" pos:line="33" pos:column="17">/* Just show the key name */</comment>
		<expr_stmt><expr><name pos:line="34" pos:column="17">vptr<pos:position pos:line="34" pos:column="21"/></name> <operator pos:line="34" pos:column="22">=<pos:position pos:line="34" pos:column="23"/></operator> <literal type="string" pos:line="34" pos:column="24">""<pos:position pos:line="34" pos:column="26"/></literal></expr>;<pos:position pos:line="34" pos:column="27"/></expr_stmt>
		<expr_stmt><expr><name pos:line="35" pos:column="17">must_print_delim<pos:position pos:line="35" pos:column="33"/></name> <operator pos:line="35" pos:column="34">=<pos:position pos:line="35" pos:column="35"/></operator> <literal type="number" pos:line="35" pos:column="36">0<pos:position pos:line="35" pos:column="37"/></literal></expr>;<pos:position pos:line="35" pos:column="38"/></expr_stmt>
	}<pos:position pos:line="36" pos:column="10"/></block></else></if>

	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">must_print_delim<pos:position pos:line="38" pos:column="29"/></name></expr>)<pos:position pos:line="38" pos:column="30"/></condition><then pos:line="38" pos:column="30">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="17">strbuf_addch<pos:position pos:line="39" pos:column="29"/></name><argument_list pos:line="39" pos:column="29">(<argument><expr><name pos:line="39" pos:column="30">buf<pos:position pos:line="39" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="35">key_delim<pos:position pos:line="39" pos:column="44"/></name></expr></argument>)<pos:position pos:line="39" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="46"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="40" pos:column="9">strbuf_addstr<pos:position pos:line="40" pos:column="22"/></name><argument_list pos:line="40" pos:column="22">(<argument><expr><name pos:line="40" pos:column="23">buf<pos:position pos:line="40" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="28">vptr<pos:position pos:line="40" pos:column="32"/></name></expr></argument>)<pos:position pos:line="40" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="34"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="41" pos:column="9">strbuf_addch<pos:position pos:line="41" pos:column="21"/></name><argument_list pos:line="41" pos:column="21">(<argument><expr><name pos:line="41" pos:column="22">buf<pos:position pos:line="41" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="27">term<pos:position pos:line="41" pos:column="31"/></name></expr></argument>)<pos:position pos:line="41" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="33"/></expr_stmt>

	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">must_free_vptr<pos:position pos:line="43" pos:column="27"/></name></expr>)<pos:position pos:line="43" pos:column="28"/></condition><then pos:line="43" pos:column="28">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="17">free<pos:position pos:line="44" pos:column="21"/></name><argument_list pos:line="44" pos:column="21">(<argument><expr><operator pos:line="44" pos:column="22">(<pos:position pos:line="44" pos:column="23"/></operator><name pos:line="44" pos:column="23">char<pos:position pos:line="44" pos:column="27"/></name> <operator pos:line="44" pos:column="28">*<pos:position pos:line="44" pos:column="29"/></operator><operator pos:line="44" pos:column="29">)<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="30">vptr<pos:position pos:line="44" pos:column="34"/></name></expr></argument>)<pos:position pos:line="44" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="36"/></expr_stmt></block></then></if>
	<return pos:line="45" pos:column="9">return <expr><literal type="number" pos:line="45" pos:column="16">0<pos:position pos:line="45" pos:column="17"/></literal></expr>;<pos:position pos:line="45" pos:column="18"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
