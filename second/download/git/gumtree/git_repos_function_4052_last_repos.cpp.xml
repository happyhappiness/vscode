<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4052_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">find_tree_entry<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">struct<pos:position pos:line="1" pos:column="34"/></name> <name pos:line="1" pos:column="35">tree_desc<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">t<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <name pos:line="1" pos:column="55">char<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">name<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">unsigned<pos:position pos:line="1" pos:column="75"/></name> <name pos:line="1" pos:column="76">char<pos:position pos:line="1" pos:column="80"/></name> <modifier pos:line="1" pos:column="81">*<pos:position pos:line="1" pos:column="82"/></modifier></type><name pos:line="1" pos:column="82">result<pos:position pos:line="1" pos:column="88"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="90">unsigned<pos:position pos:line="1" pos:column="98"/></name> <modifier pos:line="1" pos:column="99">*<pos:position pos:line="1" pos:column="100"/></modifier></type><name pos:line="1" pos:column="100">mode<pos:position pos:line="1" pos:column="104"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="105"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">int<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">namelen<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><call><name pos:line="3" pos:column="23">strlen<pos:position pos:line="3" pos:column="29"/></name><argument_list pos:line="3" pos:column="29">(<argument><expr><name pos:line="3" pos:column="30">name<pos:position pos:line="3" pos:column="34"/></name></expr></argument>)<pos:position pos:line="3" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
	<while pos:line="4" pos:column="9">while <condition pos:line="4" pos:column="15">(<expr><name><name pos:line="4" pos:column="16">t<pos:position pos:line="4" pos:column="17"/></name><operator pos:line="4" pos:column="17">-&gt;<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="19">size<pos:position pos:line="4" pos:column="23"/></name></name></expr>)<pos:position pos:line="4" pos:column="24"/></condition> <block pos:line="4" pos:column="25">{
		<decl_stmt><decl><type><specifier pos:line="5" pos:column="17">const<pos:position pos:line="5" pos:column="22"/></specifier> <name pos:line="5" pos:column="23">char<pos:position pos:line="5" pos:column="27"/></name> <modifier pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></modifier></type><name pos:line="5" pos:column="29">entry<pos:position pos:line="5" pos:column="34"/></name></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="6" pos:column="17">const<pos:position pos:line="6" pos:column="22"/></specifier> <name><name pos:line="6" pos:column="23">struct<pos:position pos:line="6" pos:column="29"/></name> <name pos:line="6" pos:column="30">object_id<pos:position pos:line="6" pos:column="39"/></name></name> <modifier pos:line="6" pos:column="40">*<pos:position pos:line="6" pos:column="41"/></modifier></type><name pos:line="6" pos:column="41">oid<pos:position pos:line="6" pos:column="44"/></name></decl>;<pos:position pos:line="6" pos:column="45"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="7" pos:column="17">int<pos:position pos:line="7" pos:column="20"/></name></type> <name pos:line="7" pos:column="21">entrylen<pos:position pos:line="7" pos:column="29"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="31">cmp<pos:position pos:line="7" pos:column="34"/></name></decl>;<pos:position pos:line="7" pos:column="35"/></decl_stmt>

		<expr_stmt><expr><name pos:line="9" pos:column="17">oid<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">=<pos:position pos:line="9" pos:column="22"/></operator> <call><name pos:line="9" pos:column="23">tree_entry_extract<pos:position pos:line="9" pos:column="41"/></name><argument_list pos:line="9" pos:column="41">(<argument><expr><name pos:line="9" pos:column="42">t<pos:position pos:line="9" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="45">&amp;<pos:position pos:line="9" pos:column="50"/></operator><name pos:line="9" pos:column="46">entry<pos:position pos:line="9" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="53">mode<pos:position pos:line="9" pos:column="57"/></name></expr></argument>)<pos:position pos:line="9" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><name pos:line="10" pos:column="17">entrylen<pos:position pos:line="10" pos:column="25"/></name> <operator pos:line="10" pos:column="26">=<pos:position pos:line="10" pos:column="27"/></operator> <call><name pos:line="10" pos:column="28">tree_entry_len<pos:position pos:line="10" pos:column="42"/></name><argument_list pos:line="10" pos:column="42">(<argument><expr><operator pos:line="10" pos:column="43">&amp;<pos:position pos:line="10" pos:column="48"/></operator><name><name pos:line="10" pos:column="44">t<pos:position pos:line="10" pos:column="45"/></name><operator pos:line="10" pos:column="45">-&gt;<pos:position pos:line="10" pos:column="50"/></operator><name pos:line="10" pos:column="47">entry<pos:position pos:line="10" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="54"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">update_tree_entry<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument><expr><name pos:line="11" pos:column="35">t<pos:position pos:line="11" pos:column="36"/></name></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt>
		<if pos:line="12" pos:column="17">if <condition pos:line="12" pos:column="20">(<expr><name pos:line="12" pos:column="21">entrylen<pos:position pos:line="12" pos:column="29"/></name> <operator pos:line="12" pos:column="30">&gt;<pos:position pos:line="12" pos:column="34"/></operator> <name pos:line="12" pos:column="32">namelen<pos:position pos:line="12" pos:column="39"/></name></expr>)<pos:position pos:line="12" pos:column="40"/></condition><then pos:line="12" pos:column="40">
			<block type="pseudo"><continue pos:line="13" pos:column="25">continue;<pos:position pos:line="13" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="14" pos:column="17">cmp<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">=<pos:position pos:line="14" pos:column="22"/></operator> <call><name pos:line="14" pos:column="23">memcmp<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">name<pos:position pos:line="14" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="36">entry<pos:position pos:line="14" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="43">entrylen<pos:position pos:line="14" pos:column="51"/></name></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="53"/></expr_stmt>
		<if pos:line="15" pos:column="17">if <condition pos:line="15" pos:column="20">(<expr><name pos:line="15" pos:column="21">cmp<pos:position pos:line="15" pos:column="24"/></name> <operator pos:line="15" pos:column="25">&gt;<pos:position pos:line="15" pos:column="29"/></operator> <literal type="number" pos:line="15" pos:column="27">0<pos:position pos:line="15" pos:column="28"/></literal></expr>)<pos:position pos:line="15" pos:column="29"/></condition><then pos:line="15" pos:column="29">
			<block type="pseudo"><continue pos:line="16" pos:column="25">continue;<pos:position pos:line="16" pos:column="34"/></continue></block></then></if>
		<if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">cmp<pos:position pos:line="17" pos:column="24"/></name> <operator pos:line="17" pos:column="25">&lt;<pos:position pos:line="17" pos:column="29"/></operator> <literal type="number" pos:line="17" pos:column="27">0<pos:position pos:line="17" pos:column="28"/></literal></expr>)<pos:position pos:line="17" pos:column="29"/></condition><then pos:line="17" pos:column="29">
			<block type="pseudo"><break pos:line="18" pos:column="25">break;<pos:position pos:line="18" pos:column="31"/></break></block></then></if>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name pos:line="19" pos:column="21">entrylen<pos:position pos:line="19" pos:column="29"/></name> <operator pos:line="19" pos:column="30">==<pos:position pos:line="19" pos:column="32"/></operator> <name pos:line="19" pos:column="33">namelen<pos:position pos:line="19" pos:column="40"/></name></expr>)<pos:position pos:line="19" pos:column="41"/></condition><then pos:line="19" pos:column="41"> <block pos:line="19" pos:column="42">{
			<expr_stmt><expr><call><name pos:line="20" pos:column="25">hashcpy<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">result<pos:position pos:line="20" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="41">oid<pos:position pos:line="20" pos:column="44"/></name><operator pos:line="20" pos:column="44">-&gt;<pos:position pos:line="20" pos:column="49"/></operator><name pos:line="20" pos:column="46">hash<pos:position pos:line="20" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="52"/></expr_stmt>
			<return pos:line="21" pos:column="25">return <expr><literal type="number" pos:line="21" pos:column="32">0<pos:position pos:line="21" pos:column="33"/></literal></expr>;<pos:position pos:line="21" pos:column="34"/></return>
		}<pos:position pos:line="22" pos:column="18"/></block></then></if>
		<if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name><name pos:line="23" pos:column="21">name<pos:position pos:line="23" pos:column="25"/></name><index pos:line="23" pos:column="25">[<expr><name pos:line="23" pos:column="26">entrylen<pos:position pos:line="23" pos:column="34"/></name></expr>]<pos:position pos:line="23" pos:column="35"/></index></name> <operator pos:line="23" pos:column="36">!=<pos:position pos:line="23" pos:column="38"/></operator> <literal type="char" pos:line="23" pos:column="39">'/'<pos:position pos:line="23" pos:column="42"/></literal></expr>)<pos:position pos:line="23" pos:column="43"/></condition><then pos:line="23" pos:column="43">
			<block type="pseudo"><continue pos:line="24" pos:column="25">continue;<pos:position pos:line="24" pos:column="34"/></continue></block></then></if>
		<if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><operator pos:line="25" pos:column="21">!<pos:position pos:line="25" pos:column="22"/></operator><call><name pos:line="25" pos:column="22">S_ISDIR<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><operator pos:line="25" pos:column="30">*<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="31">mode<pos:position pos:line="25" pos:column="35"/></name></expr></argument>)<pos:position pos:line="25" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="37"/></condition><then pos:line="25" pos:column="37">
			<block type="pseudo"><break pos:line="26" pos:column="25">break;<pos:position pos:line="26" pos:column="31"/></break></block></then></if>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">++<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="23">entrylen<pos:position pos:line="27" pos:column="31"/></name> <operator pos:line="27" pos:column="32">==<pos:position pos:line="27" pos:column="34"/></operator> <name pos:line="27" pos:column="35">namelen<pos:position pos:line="27" pos:column="42"/></name></expr>)<pos:position pos:line="27" pos:column="43"/></condition><then pos:line="27" pos:column="43"> <block pos:line="27" pos:column="44">{
			<expr_stmt><expr><call><name pos:line="28" pos:column="25">hashcpy<pos:position pos:line="28" pos:column="32"/></name><argument_list pos:line="28" pos:column="32">(<argument><expr><name pos:line="28" pos:column="33">result<pos:position pos:line="28" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="41">oid<pos:position pos:line="28" pos:column="44"/></name><operator pos:line="28" pos:column="44">-&gt;<pos:position pos:line="28" pos:column="49"/></operator><name pos:line="28" pos:column="46">hash<pos:position pos:line="28" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="52"/></expr_stmt>
			<return pos:line="29" pos:column="25">return <expr><literal type="number" pos:line="29" pos:column="32">0<pos:position pos:line="29" pos:column="33"/></literal></expr>;<pos:position pos:line="29" pos:column="34"/></return>
		}<pos:position pos:line="30" pos:column="18"/></block></then></if>
		<return pos:line="31" pos:column="17">return <expr><call><name pos:line="31" pos:column="24">get_tree_entry<pos:position pos:line="31" pos:column="38"/></name><argument_list pos:line="31" pos:column="38">(<argument><expr><name><name pos:line="31" pos:column="39">oid<pos:position pos:line="31" pos:column="42"/></name><operator pos:line="31" pos:column="42">-&gt;<pos:position pos:line="31" pos:column="47"/></operator><name pos:line="31" pos:column="44">hash<pos:position pos:line="31" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="50">name<pos:position pos:line="31" pos:column="54"/></name> <operator pos:line="31" pos:column="55">+<pos:position pos:line="31" pos:column="56"/></operator> <name pos:line="31" pos:column="57">entrylen<pos:position pos:line="31" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="67">result<pos:position pos:line="31" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="75">mode<pos:position pos:line="31" pos:column="79"/></name></expr></argument>)<pos:position pos:line="31" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="81"/></return>
	}<pos:position pos:line="32" pos:column="10"/></block></while>
	<return pos:line="33" pos:column="9">return <expr><operator pos:line="33" pos:column="16">-<pos:position pos:line="33" pos:column="17"/></operator><literal type="number" pos:line="33" pos:column="17">1<pos:position pos:line="33" pos:column="18"/></literal></expr>;<pos:position pos:line="33" pos:column="19"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
