<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6041_git-2.10.5.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">svndump_read<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">url<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="36">const<pos:position pos:line="1" pos:column="41"/></specifier> <name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">local_ref<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="59">const<pos:position pos:line="1" pos:column="64"/></specifier> <name pos:line="1" pos:column="65">char<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">notes_ref<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="81"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">val<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">t<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">uint32_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">active_ctx<pos:position pos:line="5" pos:column="28"/></name> <init pos:line="5" pos:column="29">= <expr><name pos:line="5" pos:column="31">DUMP_CTX<pos:position pos:line="5" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="40"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">uint32_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">len<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="8" pos:column="9">reset_dump_ctx<pos:position pos:line="8" pos:column="23"/></name><argument_list pos:line="8" pos:column="23">(<argument><expr><name pos:line="8" pos:column="24">url<pos:position pos:line="8" pos:column="27"/></name></expr></argument>)<pos:position pos:line="8" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="29"/></expr_stmt>
	<while pos:line="9" pos:column="9">while <condition pos:line="9" pos:column="15">(<expr><operator pos:line="9" pos:column="16">(<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="17">t<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">=<pos:position pos:line="9" pos:column="20"/></operator> <call><name pos:line="9" pos:column="21">buffer_read_line<pos:position pos:line="9" pos:column="37"/></name><argument_list pos:line="9" pos:column="37">(<argument><expr><operator pos:line="9" pos:column="38">&amp;<pos:position pos:line="9" pos:column="43"/></operator><name pos:line="9" pos:column="39">input<pos:position pos:line="9" pos:column="44"/></name></expr></argument>)<pos:position pos:line="9" pos:column="45"/></argument_list></call><operator pos:line="9" pos:column="45">)<pos:position pos:line="9" pos:column="46"/></operator></expr>)<pos:position pos:line="9" pos:column="47"/></condition> <block pos:line="9" pos:column="48">{
		<expr_stmt><expr><name pos:line="10" pos:column="17">val<pos:position pos:line="10" pos:column="20"/></name> <operator pos:line="10" pos:column="21">=<pos:position pos:line="10" pos:column="22"/></operator> <call><name pos:line="10" pos:column="23">strchr<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">t<pos:position pos:line="10" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="10" pos:column="33">':'<pos:position pos:line="10" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="38"/></expr_stmt>
		<if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><operator pos:line="11" pos:column="21">!<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">val<pos:position pos:line="11" pos:column="25"/></name></expr>)<pos:position pos:line="11" pos:column="26"/></condition><then pos:line="11" pos:column="26">
			<block type="pseudo"><continue pos:line="12" pos:column="25">continue;<pos:position pos:line="12" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="13" pos:column="17">val<pos:position pos:line="13" pos:column="20"/></name><operator pos:line="13" pos:column="20">++<pos:position pos:line="13" pos:column="22"/></operator></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>
		<if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><operator pos:line="14" pos:column="21">*<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">val<pos:position pos:line="14" pos:column="25"/></name> <operator pos:line="14" pos:column="26">!=<pos:position pos:line="14" pos:column="28"/></operator> <literal type="char" pos:line="14" pos:column="29">' '<pos:position pos:line="14" pos:column="32"/></literal></expr>)<pos:position pos:line="14" pos:column="33"/></condition><then pos:line="14" pos:column="33">
			<block type="pseudo"><continue pos:line="15" pos:column="25">continue;<pos:position pos:line="15" pos:column="34"/></continue></block></then></if>
		<expr_stmt><expr><name pos:line="16" pos:column="17">val<pos:position pos:line="16" pos:column="20"/></name><operator pos:line="16" pos:column="20">++<pos:position pos:line="16" pos:column="22"/></operator></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>

		<comment type="block" pos:line="18" pos:column="17">/* strlen(key) + 1 */</comment>
		<switch pos:line="19" pos:column="17">switch <condition pos:line="19" pos:column="24">(<expr><name pos:line="19" pos:column="25">val<pos:position pos:line="19" pos:column="28"/></name> <operator pos:line="19" pos:column="29">-<pos:position pos:line="19" pos:column="30"/></operator> <name pos:line="19" pos:column="31">t<pos:position pos:line="19" pos:column="32"/></name> <operator pos:line="19" pos:column="33">-<pos:position pos:line="19" pos:column="34"/></operator> <literal type="number" pos:line="19" pos:column="35">1<pos:position pos:line="19" pos:column="36"/></literal></expr>)<pos:position pos:line="19" pos:column="37"/></condition> <block pos:line="19" pos:column="38">{
		<case pos:line="20" pos:column="17">case <expr><sizeof pos:line="20" pos:column="22">sizeof<argument_list pos:line="20" pos:column="28">(<argument><expr><literal type="string" pos:line="20" pos:column="29">"SVN-fs-dump-format-version"<pos:position pos:line="20" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="58"/></argument_list></sizeof></expr>:<pos:position pos:line="20" pos:column="59"/></case>
			<if pos:line="21" pos:column="25">if <condition pos:line="21" pos:column="28">(<expr><call><name pos:line="21" pos:column="29">constcmp<pos:position pos:line="21" pos:column="37"/></name><argument_list pos:line="21" pos:column="37">(<argument><expr><name pos:line="21" pos:column="38">t<pos:position pos:line="21" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="41">"SVN-fs-dump-format-version"<pos:position pos:line="21" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="71"/></condition><then pos:line="21" pos:column="71">
				<block type="pseudo"><continue pos:line="22" pos:column="33">continue;<pos:position pos:line="22" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name><name pos:line="23" pos:column="25">dump_ctx<pos:position pos:line="23" pos:column="33"/></name><operator pos:line="23" pos:column="33">.<pos:position pos:line="23" pos:column="34"/></operator><name pos:line="23" pos:column="34">version<pos:position pos:line="23" pos:column="41"/></name></name> <operator pos:line="23" pos:column="42">=<pos:position pos:line="23" pos:column="43"/></operator> <call><name pos:line="23" pos:column="44">atoi<pos:position pos:line="23" pos:column="48"/></name><argument_list pos:line="23" pos:column="48">(<argument><expr><name pos:line="23" pos:column="49">val<pos:position pos:line="23" pos:column="52"/></name></expr></argument>)<pos:position pos:line="23" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="54"/></expr_stmt>
			<if pos:line="24" pos:column="25">if <condition pos:line="24" pos:column="28">(<expr><name><name pos:line="24" pos:column="29">dump_ctx<pos:position pos:line="24" pos:column="37"/></name><operator pos:line="24" pos:column="37">.<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="38">version<pos:position pos:line="24" pos:column="45"/></name></name> <operator pos:line="24" pos:column="46">&gt;<pos:position pos:line="24" pos:column="50"/></operator> <literal type="number" pos:line="24" pos:column="48">3<pos:position pos:line="24" pos:column="49"/></literal></expr>)<pos:position pos:line="24" pos:column="50"/></condition><then pos:line="24" pos:column="50">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="33">die<pos:position pos:line="25" pos:column="36"/></name><argument_list pos:line="25" pos:column="36">(<argument><expr><literal type="string" pos:line="25" pos:column="37">"expected svn dump format version &lt;= 3, found %"<pos:position pos:line="25" pos:column="88"/></literal><name pos:line="25" pos:column="85">PRIu32<pos:position pos:line="25" pos:column="91"/></name></expr></argument>,
				    <argument><expr><name><name pos:line="26" pos:column="37">dump_ctx<pos:position pos:line="26" pos:column="45"/></name><operator pos:line="26" pos:column="45">.<pos:position pos:line="26" pos:column="46"/></operator><name pos:line="26" pos:column="46">version<pos:position pos:line="26" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="55"/></expr_stmt></block></then></if>
			<break pos:line="27" pos:column="25">break;<pos:position pos:line="27" pos:column="31"/></break>
		<case pos:line="28" pos:column="17">case <expr><sizeof pos:line="28" pos:column="22">sizeof<argument_list pos:line="28" pos:column="28">(<argument><expr><literal type="string" pos:line="28" pos:column="29">"UUID"<pos:position pos:line="28" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="36"/></argument_list></sizeof></expr>:<pos:position pos:line="28" pos:column="37"/></case>
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><call><name pos:line="29" pos:column="29">constcmp<pos:position pos:line="29" pos:column="37"/></name><argument_list pos:line="29" pos:column="37">(<argument><expr><name pos:line="29" pos:column="38">t<pos:position pos:line="29" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="41">"UUID"<pos:position pos:line="29" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="49"/></condition><then pos:line="29" pos:column="49">
				<block type="pseudo"><continue pos:line="30" pos:column="33">continue;<pos:position pos:line="30" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">strbuf_reset<pos:position pos:line="31" pos:column="37"/></name><argument_list pos:line="31" pos:column="37">(<argument><expr><operator pos:line="31" pos:column="38">&amp;<pos:position pos:line="31" pos:column="43"/></operator><name><name pos:line="31" pos:column="39">dump_ctx<pos:position pos:line="31" pos:column="47"/></name><operator pos:line="31" pos:column="47">.<pos:position pos:line="31" pos:column="48"/></operator><name pos:line="31" pos:column="48">uuid<pos:position pos:line="31" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="54"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">strbuf_addstr<pos:position pos:line="32" pos:column="38"/></name><argument_list pos:line="32" pos:column="38">(<argument><expr><operator pos:line="32" pos:column="39">&amp;<pos:position pos:line="32" pos:column="44"/></operator><name><name pos:line="32" pos:column="40">dump_ctx<pos:position pos:line="32" pos:column="48"/></name><operator pos:line="32" pos:column="48">.<pos:position pos:line="32" pos:column="49"/></operator><name pos:line="32" pos:column="49">uuid<pos:position pos:line="32" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="55">val<pos:position pos:line="32" pos:column="58"/></name></expr></argument>)<pos:position pos:line="32" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="60"/></expr_stmt>
			<break pos:line="33" pos:column="25">break;<pos:position pos:line="33" pos:column="31"/></break>
		<case pos:line="34" pos:column="17">case <expr><sizeof pos:line="34" pos:column="22">sizeof<argument_list pos:line="34" pos:column="28">(<argument><expr><literal type="string" pos:line="34" pos:column="29">"Revision-number"<pos:position pos:line="34" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="47"/></argument_list></sizeof></expr>:<pos:position pos:line="34" pos:column="48"/></case>
			<if pos:line="35" pos:column="25">if <condition pos:line="35" pos:column="28">(<expr><call><name pos:line="35" pos:column="29">constcmp<pos:position pos:line="35" pos:column="37"/></name><argument_list pos:line="35" pos:column="37">(<argument><expr><name pos:line="35" pos:column="38">t<pos:position pos:line="35" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="41">"Revision-number"<pos:position pos:line="35" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="60"/></condition><then pos:line="35" pos:column="60">
				<block type="pseudo"><continue pos:line="36" pos:column="33">continue;<pos:position pos:line="36" pos:column="42"/></continue></block></then></if>
			<if pos:line="37" pos:column="25">if <condition pos:line="37" pos:column="28">(<expr><name pos:line="37" pos:column="29">active_ctx<pos:position pos:line="37" pos:column="39"/></name> <operator pos:line="37" pos:column="40">==<pos:position pos:line="37" pos:column="42"/></operator> <name pos:line="37" pos:column="43">NODE_CTX<pos:position pos:line="37" pos:column="51"/></name></expr>)<pos:position pos:line="37" pos:column="52"/></condition><then pos:line="37" pos:column="52">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="33">handle_node<pos:position pos:line="38" pos:column="44"/></name><argument_list pos:line="38" pos:column="44">()<pos:position pos:line="38" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="47"/></expr_stmt></block></then></if>
			<if pos:line="39" pos:column="25">if <condition pos:line="39" pos:column="28">(<expr><name pos:line="39" pos:column="29">active_ctx<pos:position pos:line="39" pos:column="39"/></name> <operator pos:line="39" pos:column="40">==<pos:position pos:line="39" pos:column="42"/></operator> <name pos:line="39" pos:column="43">REV_CTX<pos:position pos:line="39" pos:column="50"/></name></expr>)<pos:position pos:line="39" pos:column="51"/></condition><then pos:line="39" pos:column="51">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="33">begin_revision<pos:position pos:line="40" pos:column="47"/></name><argument_list pos:line="40" pos:column="47">(<argument><expr><name pos:line="40" pos:column="48">local_ref<pos:position pos:line="40" pos:column="57"/></name></expr></argument>)<pos:position pos:line="40" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="59"/></expr_stmt></block></then></if>
			<if pos:line="41" pos:column="25">if <condition pos:line="41" pos:column="28">(<expr><name pos:line="41" pos:column="29">active_ctx<pos:position pos:line="41" pos:column="39"/></name> <operator pos:line="41" pos:column="40">!=<pos:position pos:line="41" pos:column="42"/></operator> <name pos:line="41" pos:column="43">DUMP_CTX<pos:position pos:line="41" pos:column="51"/></name></expr>)<pos:position pos:line="41" pos:column="52"/></condition><then pos:line="41" pos:column="52">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="33">end_revision<pos:position pos:line="42" pos:column="45"/></name><argument_list pos:line="42" pos:column="45">(<argument><expr><name pos:line="42" pos:column="46">notes_ref<pos:position pos:line="42" pos:column="55"/></name></expr></argument>)<pos:position pos:line="42" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="57"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="43" pos:column="25">active_ctx<pos:position pos:line="43" pos:column="35"/></name> <operator pos:line="43" pos:column="36">=<pos:position pos:line="43" pos:column="37"/></operator> <name pos:line="43" pos:column="38">REV_CTX<pos:position pos:line="43" pos:column="45"/></name></expr>;<pos:position pos:line="43" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="44" pos:column="25">reset_rev_ctx<pos:position pos:line="44" pos:column="38"/></name><argument_list pos:line="44" pos:column="38">(<argument><expr><call><name pos:line="44" pos:column="39">atoi<pos:position pos:line="44" pos:column="43"/></name><argument_list pos:line="44" pos:column="43">(<argument><expr><name pos:line="44" pos:column="44">val<pos:position pos:line="44" pos:column="47"/></name></expr></argument>)<pos:position pos:line="44" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="50"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="45" pos:column="25">strbuf_addf<pos:position pos:line="45" pos:column="36"/></name><argument_list pos:line="45" pos:column="36">(<argument><expr><operator pos:line="45" pos:column="37">&amp;<pos:position pos:line="45" pos:column="42"/></operator><name><name pos:line="45" pos:column="38">rev_ctx<pos:position pos:line="45" pos:column="45"/></name><operator pos:line="45" pos:column="45">.<pos:position pos:line="45" pos:column="46"/></operator><name pos:line="45" pos:column="46">note<pos:position pos:line="45" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="52">"%s\n"<pos:position pos:line="45" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="60">t<pos:position pos:line="45" pos:column="61"/></name></expr></argument>)<pos:position pos:line="45" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="63"/></expr_stmt>
			<break pos:line="46" pos:column="25">break;<pos:position pos:line="46" pos:column="31"/></break>
		<case pos:line="47" pos:column="17">case <expr><sizeof pos:line="47" pos:column="22">sizeof<argument_list pos:line="47" pos:column="28">(<argument><expr><literal type="string" pos:line="47" pos:column="29">"Node-path"<pos:position pos:line="47" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="41"/></argument_list></sizeof></expr>:<pos:position pos:line="47" pos:column="42"/></case>
			<if pos:line="48" pos:column="25">if <condition pos:line="48" pos:column="28">(<expr><call><name pos:line="48" pos:column="29">constcmp<pos:position pos:line="48" pos:column="37"/></name><argument_list pos:line="48" pos:column="37">(<argument><expr><name pos:line="48" pos:column="38">t<pos:position pos:line="48" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="41">"Node-"<pos:position pos:line="48" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="50"/></condition><then pos:line="48" pos:column="50">
				<block type="pseudo"><continue pos:line="49" pos:column="33">continue;<pos:position pos:line="49" pos:column="42"/></continue></block></then></if>
			<if pos:line="50" pos:column="25">if <condition pos:line="50" pos:column="28">(<expr><operator pos:line="50" pos:column="29">!<pos:position pos:line="50" pos:column="30"/></operator><call><name pos:line="50" pos:column="30">constcmp<pos:position pos:line="50" pos:column="38"/></name><argument_list pos:line="50" pos:column="38">(<argument><expr><name pos:line="50" pos:column="39">t<pos:position pos:line="50" pos:column="40"/></name> <operator pos:line="50" pos:column="41">+<pos:position pos:line="50" pos:column="42"/></operator> <call><name pos:line="50" pos:column="43">strlen<pos:position pos:line="50" pos:column="49"/></name><argument_list pos:line="50" pos:column="49">(<argument><expr><literal type="string" pos:line="50" pos:column="50">"Node-"<pos:position pos:line="50" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="60">"path"<pos:position pos:line="50" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="68"/></condition><then pos:line="50" pos:column="68"> <block pos:line="50" pos:column="69">{
				<if pos:line="51" pos:column="33">if <condition pos:line="51" pos:column="36">(<expr><name pos:line="51" pos:column="37">active_ctx<pos:position pos:line="51" pos:column="47"/></name> <operator pos:line="51" pos:column="48">==<pos:position pos:line="51" pos:column="50"/></operator> <name pos:line="51" pos:column="51">NODE_CTX<pos:position pos:line="51" pos:column="59"/></name></expr>)<pos:position pos:line="51" pos:column="60"/></condition><then pos:line="51" pos:column="60">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="41">handle_node<pos:position pos:line="52" pos:column="52"/></name><argument_list pos:line="52" pos:column="52">()<pos:position pos:line="52" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="55"/></expr_stmt></block></then></if>
				<if pos:line="53" pos:column="33">if <condition pos:line="53" pos:column="36">(<expr><name pos:line="53" pos:column="37">active_ctx<pos:position pos:line="53" pos:column="47"/></name> <operator pos:line="53" pos:column="48">==<pos:position pos:line="53" pos:column="50"/></operator> <name pos:line="53" pos:column="51">REV_CTX<pos:position pos:line="53" pos:column="58"/></name></expr>)<pos:position pos:line="53" pos:column="59"/></condition><then pos:line="53" pos:column="59">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="41">begin_revision<pos:position pos:line="54" pos:column="55"/></name><argument_list pos:line="54" pos:column="55">(<argument><expr><name pos:line="54" pos:column="56">local_ref<pos:position pos:line="54" pos:column="65"/></name></expr></argument>)<pos:position pos:line="54" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="67"/></expr_stmt></block></then></if>
				<expr_stmt><expr><name pos:line="55" pos:column="33">active_ctx<pos:position pos:line="55" pos:column="43"/></name> <operator pos:line="55" pos:column="44">=<pos:position pos:line="55" pos:column="45"/></operator> <name pos:line="55" pos:column="46">NODE_CTX<pos:position pos:line="55" pos:column="54"/></name></expr>;<pos:position pos:line="55" pos:column="55"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="56" pos:column="33">reset_node_ctx<pos:position pos:line="56" pos:column="47"/></name><argument_list pos:line="56" pos:column="47">(<argument><expr><name pos:line="56" pos:column="48">val<pos:position pos:line="56" pos:column="51"/></name></expr></argument>)<pos:position pos:line="56" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="53"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="57" pos:column="33">strbuf_addf<pos:position pos:line="57" pos:column="44"/></name><argument_list pos:line="57" pos:column="44">(<argument><expr><operator pos:line="57" pos:column="45">&amp;<pos:position pos:line="57" pos:column="50"/></operator><name><name pos:line="57" pos:column="46">rev_ctx<pos:position pos:line="57" pos:column="53"/></name><operator pos:line="57" pos:column="53">.<pos:position pos:line="57" pos:column="54"/></operator><name pos:line="57" pos:column="54">note<pos:position pos:line="57" pos:column="58"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="60">"%s\n"<pos:position pos:line="57" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="68">t<pos:position pos:line="57" pos:column="69"/></name></expr></argument>)<pos:position pos:line="57" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="71"/></expr_stmt>
				<break pos:line="58" pos:column="33">break;<pos:position pos:line="58" pos:column="39"/></break>
			}<pos:position pos:line="59" pos:column="26"/></block></then></if>
			<if pos:line="60" pos:column="25">if <condition pos:line="60" pos:column="28">(<expr><call><name pos:line="60" pos:column="29">constcmp<pos:position pos:line="60" pos:column="37"/></name><argument_list pos:line="60" pos:column="37">(<argument><expr><name pos:line="60" pos:column="38">t<pos:position pos:line="60" pos:column="39"/></name> <operator pos:line="60" pos:column="40">+<pos:position pos:line="60" pos:column="41"/></operator> <call><name pos:line="60" pos:column="42">strlen<pos:position pos:line="60" pos:column="48"/></name><argument_list pos:line="60" pos:column="48">(<argument><expr><literal type="string" pos:line="60" pos:column="49">"Node-"<pos:position pos:line="60" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="59">"kind"<pos:position pos:line="60" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="67"/></condition><then pos:line="60" pos:column="67">
				<block type="pseudo"><continue pos:line="61" pos:column="33">continue;<pos:position pos:line="61" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><call><name pos:line="62" pos:column="25">strbuf_addf<pos:position pos:line="62" pos:column="36"/></name><argument_list pos:line="62" pos:column="36">(<argument><expr><operator pos:line="62" pos:column="37">&amp;<pos:position pos:line="62" pos:column="42"/></operator><name><name pos:line="62" pos:column="38">rev_ctx<pos:position pos:line="62" pos:column="45"/></name><operator pos:line="62" pos:column="45">.<pos:position pos:line="62" pos:column="46"/></operator><name pos:line="62" pos:column="46">note<pos:position pos:line="62" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="52">"%s\n"<pos:position pos:line="62" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="60">t<pos:position pos:line="62" pos:column="61"/></name></expr></argument>)<pos:position pos:line="62" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="63"/></expr_stmt>
			<if pos:line="63" pos:column="25">if <condition pos:line="63" pos:column="28">(<expr><operator pos:line="63" pos:column="29">!<pos:position pos:line="63" pos:column="30"/></operator><call><name pos:line="63" pos:column="30">strcmp<pos:position pos:line="63" pos:column="36"/></name><argument_list pos:line="63" pos:column="36">(<argument><expr><name pos:line="63" pos:column="37">val<pos:position pos:line="63" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="42">"dir"<pos:position pos:line="63" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="49"/></condition><then pos:line="63" pos:column="49">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="64" pos:column="33">node_ctx<pos:position pos:line="64" pos:column="41"/></name><operator pos:line="64" pos:column="41">.<pos:position pos:line="64" pos:column="42"/></operator><name pos:line="64" pos:column="42">type<pos:position pos:line="64" pos:column="46"/></name></name> <operator pos:line="64" pos:column="47">=<pos:position pos:line="64" pos:column="48"/></operator> <name pos:line="64" pos:column="49">REPO_MODE_DIR<pos:position pos:line="64" pos:column="62"/></name></expr>;<pos:position pos:line="64" pos:column="63"/></expr_stmt></block></then>
			<elseif pos:line="65" pos:column="25">else <if pos:line="65" pos:column="30">if <condition pos:line="65" pos:column="33">(<expr><operator pos:line="65" pos:column="34">!<pos:position pos:line="65" pos:column="35"/></operator><call><name pos:line="65" pos:column="35">strcmp<pos:position pos:line="65" pos:column="41"/></name><argument_list pos:line="65" pos:column="41">(<argument><expr><name pos:line="65" pos:column="42">val<pos:position pos:line="65" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="47">"file"<pos:position pos:line="65" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="55"/></condition><then pos:line="65" pos:column="55">
				<block type="pseudo"><expr_stmt><expr><name><name pos:line="66" pos:column="33">node_ctx<pos:position pos:line="66" pos:column="41"/></name><operator pos:line="66" pos:column="41">.<pos:position pos:line="66" pos:column="42"/></operator><name pos:line="66" pos:column="42">type<pos:position pos:line="66" pos:column="46"/></name></name> <operator pos:line="66" pos:column="47">=<pos:position pos:line="66" pos:column="48"/></operator> <name pos:line="66" pos:column="49">REPO_MODE_BLB<pos:position pos:line="66" pos:column="62"/></name></expr>;<pos:position pos:line="66" pos:column="63"/></expr_stmt></block></then></if></elseif>
			<else pos:line="67" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="33">fprintf<pos:position pos:line="68" pos:column="40"/></name><argument_list pos:line="68" pos:column="40">(<argument><expr><name pos:line="68" pos:column="41">stderr<pos:position pos:line="68" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="49">"Unknown node-kind: %s\n"<pos:position pos:line="68" pos:column="74"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="76">val<pos:position pos:line="68" pos:column="79"/></name></expr></argument>)<pos:position pos:line="68" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="81"/></expr_stmt></block></else></if>
			<break pos:line="69" pos:column="25">break;<pos:position pos:line="69" pos:column="31"/></break>
		<case pos:line="70" pos:column="17">case <expr><sizeof pos:line="70" pos:column="22">sizeof<argument_list pos:line="70" pos:column="28">(<argument><expr><literal type="string" pos:line="70" pos:column="29">"Node-action"<pos:position pos:line="70" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="43"/></argument_list></sizeof></expr>:<pos:position pos:line="70" pos:column="44"/></case>
			<if pos:line="71" pos:column="25">if <condition pos:line="71" pos:column="28">(<expr><call><name pos:line="71" pos:column="29">constcmp<pos:position pos:line="71" pos:column="37"/></name><argument_list pos:line="71" pos:column="37">(<argument><expr><name pos:line="71" pos:column="38">t<pos:position pos:line="71" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="41">"Node-action"<pos:position pos:line="71" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="71" pos:column="56"/></condition><then pos:line="71" pos:column="56">
				<block type="pseudo"><continue pos:line="72" pos:column="33">continue;<pos:position pos:line="72" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><call><name pos:line="73" pos:column="25">strbuf_addf<pos:position pos:line="73" pos:column="36"/></name><argument_list pos:line="73" pos:column="36">(<argument><expr><operator pos:line="73" pos:column="37">&amp;<pos:position pos:line="73" pos:column="42"/></operator><name><name pos:line="73" pos:column="38">rev_ctx<pos:position pos:line="73" pos:column="45"/></name><operator pos:line="73" pos:column="45">.<pos:position pos:line="73" pos:column="46"/></operator><name pos:line="73" pos:column="46">note<pos:position pos:line="73" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="52">"%s\n"<pos:position pos:line="73" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="60">t<pos:position pos:line="73" pos:column="61"/></name></expr></argument>)<pos:position pos:line="73" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="63"/></expr_stmt>
			<if pos:line="74" pos:column="25">if <condition pos:line="74" pos:column="28">(<expr><operator pos:line="74" pos:column="29">!<pos:position pos:line="74" pos:column="30"/></operator><call><name pos:line="74" pos:column="30">strcmp<pos:position pos:line="74" pos:column="36"/></name><argument_list pos:line="74" pos:column="36">(<argument><expr><name pos:line="74" pos:column="37">val<pos:position pos:line="74" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="42">"delete"<pos:position pos:line="74" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="52"/></condition><then pos:line="74" pos:column="52"> <block pos:line="74" pos:column="53">{
				<expr_stmt><expr><name><name pos:line="75" pos:column="33">node_ctx<pos:position pos:line="75" pos:column="41"/></name><operator pos:line="75" pos:column="41">.<pos:position pos:line="75" pos:column="42"/></operator><name pos:line="75" pos:column="42">action<pos:position pos:line="75" pos:column="48"/></name></name> <operator pos:line="75" pos:column="49">=<pos:position pos:line="75" pos:column="50"/></operator> <name pos:line="75" pos:column="51">NODEACT_DELETE<pos:position pos:line="75" pos:column="65"/></name></expr>;<pos:position pos:line="75" pos:column="66"/></expr_stmt>
			}<pos:position pos:line="76" pos:column="26"/></block></then> <elseif pos:line="76" pos:column="27">else <if pos:line="76" pos:column="32">if <condition pos:line="76" pos:column="35">(<expr><operator pos:line="76" pos:column="36">!<pos:position pos:line="76" pos:column="37"/></operator><call><name pos:line="76" pos:column="37">strcmp<pos:position pos:line="76" pos:column="43"/></name><argument_list pos:line="76" pos:column="43">(<argument><expr><name pos:line="76" pos:column="44">val<pos:position pos:line="76" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="49">"add"<pos:position pos:line="76" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="56"/></condition><then pos:line="76" pos:column="56"> <block pos:line="76" pos:column="57">{
				<expr_stmt><expr><name><name pos:line="77" pos:column="33">node_ctx<pos:position pos:line="77" pos:column="41"/></name><operator pos:line="77" pos:column="41">.<pos:position pos:line="77" pos:column="42"/></operator><name pos:line="77" pos:column="42">action<pos:position pos:line="77" pos:column="48"/></name></name> <operator pos:line="77" pos:column="49">=<pos:position pos:line="77" pos:column="50"/></operator> <name pos:line="77" pos:column="51">NODEACT_ADD<pos:position pos:line="77" pos:column="62"/></name></expr>;<pos:position pos:line="77" pos:column="63"/></expr_stmt>
			}<pos:position pos:line="78" pos:column="26"/></block></then></if></elseif> <elseif pos:line="78" pos:column="27">else <if pos:line="78" pos:column="32">if <condition pos:line="78" pos:column="35">(<expr><operator pos:line="78" pos:column="36">!<pos:position pos:line="78" pos:column="37"/></operator><call><name pos:line="78" pos:column="37">strcmp<pos:position pos:line="78" pos:column="43"/></name><argument_list pos:line="78" pos:column="43">(<argument><expr><name pos:line="78" pos:column="44">val<pos:position pos:line="78" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="49">"change"<pos:position pos:line="78" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="59"/></condition><then pos:line="78" pos:column="59"> <block pos:line="78" pos:column="60">{
				<expr_stmt><expr><name><name pos:line="79" pos:column="33">node_ctx<pos:position pos:line="79" pos:column="41"/></name><operator pos:line="79" pos:column="41">.<pos:position pos:line="79" pos:column="42"/></operator><name pos:line="79" pos:column="42">action<pos:position pos:line="79" pos:column="48"/></name></name> <operator pos:line="79" pos:column="49">=<pos:position pos:line="79" pos:column="50"/></operator> <name pos:line="79" pos:column="51">NODEACT_CHANGE<pos:position pos:line="79" pos:column="65"/></name></expr>;<pos:position pos:line="79" pos:column="66"/></expr_stmt>
			}<pos:position pos:line="80" pos:column="26"/></block></then></if></elseif> <elseif pos:line="80" pos:column="27">else <if pos:line="80" pos:column="32">if <condition pos:line="80" pos:column="35">(<expr><operator pos:line="80" pos:column="36">!<pos:position pos:line="80" pos:column="37"/></operator><call><name pos:line="80" pos:column="37">strcmp<pos:position pos:line="80" pos:column="43"/></name><argument_list pos:line="80" pos:column="43">(<argument><expr><name pos:line="80" pos:column="44">val<pos:position pos:line="80" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="49">"replace"<pos:position pos:line="80" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="60"/></condition><then pos:line="80" pos:column="60"> <block pos:line="80" pos:column="61">{
				<expr_stmt><expr><name><name pos:line="81" pos:column="33">node_ctx<pos:position pos:line="81" pos:column="41"/></name><operator pos:line="81" pos:column="41">.<pos:position pos:line="81" pos:column="42"/></operator><name pos:line="81" pos:column="42">action<pos:position pos:line="81" pos:column="48"/></name></name> <operator pos:line="81" pos:column="49">=<pos:position pos:line="81" pos:column="50"/></operator> <name pos:line="81" pos:column="51">NODEACT_REPLACE<pos:position pos:line="81" pos:column="66"/></name></expr>;<pos:position pos:line="81" pos:column="67"/></expr_stmt>
			}<pos:position pos:line="82" pos:column="26"/></block></then></if></elseif> <else pos:line="82" pos:column="27">else <block pos:line="82" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="83" pos:column="33">fprintf<pos:position pos:line="83" pos:column="40"/></name><argument_list pos:line="83" pos:column="40">(<argument><expr><name pos:line="83" pos:column="41">stderr<pos:position pos:line="83" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="49">"Unknown node-action: %s\n"<pos:position pos:line="83" pos:column="76"/></literal></expr></argument>, <argument><expr><name pos:line="83" pos:column="78">val<pos:position pos:line="83" pos:column="81"/></name></expr></argument>)<pos:position pos:line="83" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="83"/></expr_stmt>
				<expr_stmt><expr><name><name pos:line="84" pos:column="33">node_ctx<pos:position pos:line="84" pos:column="41"/></name><operator pos:line="84" pos:column="41">.<pos:position pos:line="84" pos:column="42"/></operator><name pos:line="84" pos:column="42">action<pos:position pos:line="84" pos:column="48"/></name></name> <operator pos:line="84" pos:column="49">=<pos:position pos:line="84" pos:column="50"/></operator> <name pos:line="84" pos:column="51">NODEACT_UNKNOWN<pos:position pos:line="84" pos:column="66"/></name></expr>;<pos:position pos:line="84" pos:column="67"/></expr_stmt>
			}<pos:position pos:line="85" pos:column="26"/></block></else></if>
			<break pos:line="86" pos:column="25">break;<pos:position pos:line="86" pos:column="31"/></break>
		<case pos:line="87" pos:column="17">case <expr><sizeof pos:line="87" pos:column="22">sizeof<argument_list pos:line="87" pos:column="28">(<argument><expr><literal type="string" pos:line="87" pos:column="29">"Node-copyfrom-path"<pos:position pos:line="87" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="50"/></argument_list></sizeof></expr>:<pos:position pos:line="87" pos:column="51"/></case>
			<if pos:line="88" pos:column="25">if <condition pos:line="88" pos:column="28">(<expr><call><name pos:line="88" pos:column="29">constcmp<pos:position pos:line="88" pos:column="37"/></name><argument_list pos:line="88" pos:column="37">(<argument><expr><name pos:line="88" pos:column="38">t<pos:position pos:line="88" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="41">"Node-copyfrom-path"<pos:position pos:line="88" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="63"/></condition><then pos:line="88" pos:column="63">
				<block type="pseudo"><continue pos:line="89" pos:column="33">continue;<pos:position pos:line="89" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><call><name pos:line="90" pos:column="25">strbuf_reset<pos:position pos:line="90" pos:column="37"/></name><argument_list pos:line="90" pos:column="37">(<argument><expr><operator pos:line="90" pos:column="38">&amp;<pos:position pos:line="90" pos:column="43"/></operator><name><name pos:line="90" pos:column="39">node_ctx<pos:position pos:line="90" pos:column="47"/></name><operator pos:line="90" pos:column="47">.<pos:position pos:line="90" pos:column="48"/></operator><name pos:line="90" pos:column="48">src<pos:position pos:line="90" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="90" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="53"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="91" pos:column="25">strbuf_addstr<pos:position pos:line="91" pos:column="38"/></name><argument_list pos:line="91" pos:column="38">(<argument><expr><operator pos:line="91" pos:column="39">&amp;<pos:position pos:line="91" pos:column="44"/></operator><name><name pos:line="91" pos:column="40">node_ctx<pos:position pos:line="91" pos:column="48"/></name><operator pos:line="91" pos:column="48">.<pos:position pos:line="91" pos:column="49"/></operator><name pos:line="91" pos:column="49">src<pos:position pos:line="91" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="54">val<pos:position pos:line="91" pos:column="57"/></name></expr></argument>)<pos:position pos:line="91" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="92" pos:column="25">strbuf_addf<pos:position pos:line="92" pos:column="36"/></name><argument_list pos:line="92" pos:column="36">(<argument><expr><operator pos:line="92" pos:column="37">&amp;<pos:position pos:line="92" pos:column="42"/></operator><name><name pos:line="92" pos:column="38">rev_ctx<pos:position pos:line="92" pos:column="45"/></name><operator pos:line="92" pos:column="45">.<pos:position pos:line="92" pos:column="46"/></operator><name pos:line="92" pos:column="46">note<pos:position pos:line="92" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="52">"%s\n"<pos:position pos:line="92" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="60">t<pos:position pos:line="92" pos:column="61"/></name></expr></argument>)<pos:position pos:line="92" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="63"/></expr_stmt>
			<break pos:line="93" pos:column="25">break;<pos:position pos:line="93" pos:column="31"/></break>
		<case pos:line="94" pos:column="17">case <expr><sizeof pos:line="94" pos:column="22">sizeof<argument_list pos:line="94" pos:column="28">(<argument><expr><literal type="string" pos:line="94" pos:column="29">"Node-copyfrom-rev"<pos:position pos:line="94" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="49"/></argument_list></sizeof></expr>:<pos:position pos:line="94" pos:column="50"/></case>
			<if pos:line="95" pos:column="25">if <condition pos:line="95" pos:column="28">(<expr><call><name pos:line="95" pos:column="29">constcmp<pos:position pos:line="95" pos:column="37"/></name><argument_list pos:line="95" pos:column="37">(<argument><expr><name pos:line="95" pos:column="38">t<pos:position pos:line="95" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="41">"Node-copyfrom-rev"<pos:position pos:line="95" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="95" pos:column="62"/></condition><then pos:line="95" pos:column="62">
				<block type="pseudo"><continue pos:line="96" pos:column="33">continue;<pos:position pos:line="96" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name><name pos:line="97" pos:column="25">node_ctx<pos:position pos:line="97" pos:column="33"/></name><operator pos:line="97" pos:column="33">.<pos:position pos:line="97" pos:column="34"/></operator><name pos:line="97" pos:column="34">srcRev<pos:position pos:line="97" pos:column="40"/></name></name> <operator pos:line="97" pos:column="41">=<pos:position pos:line="97" pos:column="42"/></operator> <call><name pos:line="97" pos:column="43">atoi<pos:position pos:line="97" pos:column="47"/></name><argument_list pos:line="97" pos:column="47">(<argument><expr><name pos:line="97" pos:column="48">val<pos:position pos:line="97" pos:column="51"/></name></expr></argument>)<pos:position pos:line="97" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="53"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="98" pos:column="25">strbuf_addf<pos:position pos:line="98" pos:column="36"/></name><argument_list pos:line="98" pos:column="36">(<argument><expr><operator pos:line="98" pos:column="37">&amp;<pos:position pos:line="98" pos:column="42"/></operator><name><name pos:line="98" pos:column="38">rev_ctx<pos:position pos:line="98" pos:column="45"/></name><operator pos:line="98" pos:column="45">.<pos:position pos:line="98" pos:column="46"/></operator><name pos:line="98" pos:column="46">note<pos:position pos:line="98" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="52">"%s\n"<pos:position pos:line="98" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="98" pos:column="60">t<pos:position pos:line="98" pos:column="61"/></name></expr></argument>)<pos:position pos:line="98" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="63"/></expr_stmt>
			<break pos:line="99" pos:column="25">break;<pos:position pos:line="99" pos:column="31"/></break>
		<case pos:line="100" pos:column="17">case <expr><sizeof pos:line="100" pos:column="22">sizeof<argument_list pos:line="100" pos:column="28">(<argument><expr><literal type="string" pos:line="100" pos:column="29">"Text-content-length"<pos:position pos:line="100" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="51"/></argument_list></sizeof></expr>:<pos:position pos:line="100" pos:column="52"/></case>
			<if pos:line="101" pos:column="25">if <condition pos:line="101" pos:column="28">(<expr><call><name pos:line="101" pos:column="29">constcmp<pos:position pos:line="101" pos:column="37"/></name><argument_list pos:line="101" pos:column="37">(<argument><expr><name pos:line="101" pos:column="38">t<pos:position pos:line="101" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="41">"Text"<pos:position pos:line="101" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="48"/></argument_list></call> <operator pos:line="101" pos:column="49">&amp;&amp;<pos:position pos:line="101" pos:column="59"/></operator> <call><name pos:line="101" pos:column="52">constcmp<pos:position pos:line="101" pos:column="60"/></name><argument_list pos:line="101" pos:column="60">(<argument><expr><name pos:line="101" pos:column="61">t<pos:position pos:line="101" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="64">"Prop"<pos:position pos:line="101" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="101" pos:column="72"/></condition><then pos:line="101" pos:column="72">
				<block type="pseudo"><continue pos:line="102" pos:column="33">continue;<pos:position pos:line="102" pos:column="42"/></continue></block></then></if>
			<if pos:line="103" pos:column="25">if <condition pos:line="103" pos:column="28">(<expr><call><name pos:line="103" pos:column="29">constcmp<pos:position pos:line="103" pos:column="37"/></name><argument_list pos:line="103" pos:column="37">(<argument><expr><name pos:line="103" pos:column="38">t<pos:position pos:line="103" pos:column="39"/></name> <operator pos:line="103" pos:column="40">+<pos:position pos:line="103" pos:column="41"/></operator> <literal type="number" pos:line="103" pos:column="42">4<pos:position pos:line="103" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="103" pos:column="45">"-content-length"<pos:position pos:line="103" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="103" pos:column="64"/></condition><then pos:line="103" pos:column="64">
				<block type="pseudo"><continue pos:line="104" pos:column="33">continue;<pos:position pos:line="104" pos:column="42"/></continue></block></then></if>
			<block pos:line="105" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="106" pos:column="33">char<pos:position pos:line="106" pos:column="37"/></name> <modifier pos:line="106" pos:column="38">*<pos:position pos:line="106" pos:column="39"/></modifier></type><name pos:line="106" pos:column="39">end<pos:position pos:line="106" pos:column="42"/></name></decl>;<pos:position pos:line="106" pos:column="43"/></decl_stmt>
				<decl_stmt><decl><type><name pos:line="107" pos:column="33">uintmax_t<pos:position pos:line="107" pos:column="42"/></name></type> <name pos:line="107" pos:column="43">len<pos:position pos:line="107" pos:column="46"/></name></decl>;<pos:position pos:line="107" pos:column="47"/></decl_stmt>

				<expr_stmt><expr><name pos:line="109" pos:column="33">len<pos:position pos:line="109" pos:column="36"/></name> <operator pos:line="109" pos:column="37">=<pos:position pos:line="109" pos:column="38"/></operator> <call><name pos:line="109" pos:column="39">strtoumax<pos:position pos:line="109" pos:column="48"/></name><argument_list pos:line="109" pos:column="48">(<argument><expr><name pos:line="109" pos:column="49">val<pos:position pos:line="109" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="109" pos:column="54">&amp;<pos:position pos:line="109" pos:column="59"/></operator><name pos:line="109" pos:column="55">end<pos:position pos:line="109" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="109" pos:column="60">10<pos:position pos:line="109" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="64"/></expr_stmt>
				<if pos:line="110" pos:column="33">if <condition pos:line="110" pos:column="36">(<expr><operator pos:line="110" pos:column="37">!<pos:position pos:line="110" pos:column="38"/></operator><call><name pos:line="110" pos:column="38">isdigit<pos:position pos:line="110" pos:column="45"/></name><argument_list pos:line="110" pos:column="45">(<argument><expr><operator pos:line="110" pos:column="46">*<pos:position pos:line="110" pos:column="47"/></operator><name pos:line="110" pos:column="47">val<pos:position pos:line="110" pos:column="50"/></name></expr></argument>)<pos:position pos:line="110" pos:column="51"/></argument_list></call> <operator pos:line="110" pos:column="52">||<pos:position pos:line="110" pos:column="54"/></operator> <operator pos:line="110" pos:column="55">*<pos:position pos:line="110" pos:column="56"/></operator><name pos:line="110" pos:column="56">end<pos:position pos:line="110" pos:column="59"/></name></expr>)<pos:position pos:line="110" pos:column="60"/></condition><then pos:line="110" pos:column="60">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="111" pos:column="41">die<pos:position pos:line="111" pos:column="44"/></name><argument_list pos:line="111" pos:column="44">(<argument><expr><literal type="string" pos:line="111" pos:column="45">"invalid dump: non-numeric length %s"<pos:position pos:line="111" pos:column="82"/></literal></expr></argument>, <argument><expr><name pos:line="111" pos:column="84">val<pos:position pos:line="111" pos:column="87"/></name></expr></argument>)<pos:position pos:line="111" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="89"/></expr_stmt></block></then></if>
				<if pos:line="112" pos:column="33">if <condition pos:line="112" pos:column="36">(<expr><name pos:line="112" pos:column="37">len<pos:position pos:line="112" pos:column="40"/></name> <operator pos:line="112" pos:column="41">&gt;<pos:position pos:line="112" pos:column="45"/></operator> <call><name pos:line="112" pos:column="43">maximum_signed_value_of_type<pos:position pos:line="112" pos:column="71"/></name><argument_list pos:line="112" pos:column="71">(<argument><expr><name pos:line="112" pos:column="72">off_t<pos:position pos:line="112" pos:column="77"/></name></expr></argument>)<pos:position pos:line="112" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="112" pos:column="79"/></condition><then pos:line="112" pos:column="79">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="113" pos:column="41">die<pos:position pos:line="113" pos:column="44"/></name><argument_list pos:line="113" pos:column="44">(<argument><expr><literal type="string" pos:line="113" pos:column="45">"unrepresentable length in dump: %s"<pos:position pos:line="113" pos:column="81"/></literal></expr></argument>, <argument><expr><name pos:line="113" pos:column="83">val<pos:position pos:line="113" pos:column="86"/></name></expr></argument>)<pos:position pos:line="113" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="88"/></expr_stmt></block></then></if>

				<if pos:line="115" pos:column="33">if <condition pos:line="115" pos:column="36">(<expr><operator pos:line="115" pos:column="37">*<pos:position pos:line="115" pos:column="38"/></operator><name pos:line="115" pos:column="38">t<pos:position pos:line="115" pos:column="39"/></name> <operator pos:line="115" pos:column="40">==<pos:position pos:line="115" pos:column="42"/></operator> <literal type="char" pos:line="115" pos:column="43">'T'<pos:position pos:line="115" pos:column="46"/></literal></expr>)<pos:position pos:line="115" pos:column="47"/></condition><then pos:line="115" pos:column="47">
					<block type="pseudo"><expr_stmt><expr><name><name pos:line="116" pos:column="41">node_ctx<pos:position pos:line="116" pos:column="49"/></name><operator pos:line="116" pos:column="49">.<pos:position pos:line="116" pos:column="50"/></operator><name pos:line="116" pos:column="50">text_length<pos:position pos:line="116" pos:column="61"/></name></name> <operator pos:line="116" pos:column="62">=<pos:position pos:line="116" pos:column="63"/></operator> <operator pos:line="116" pos:column="64">(<pos:position pos:line="116" pos:column="65"/></operator><name pos:line="116" pos:column="65">off_t<pos:position pos:line="116" pos:column="70"/></name><operator pos:line="116" pos:column="70">)<pos:position pos:line="116" pos:column="71"/></operator> <name pos:line="116" pos:column="72">len<pos:position pos:line="116" pos:column="75"/></name></expr>;<pos:position pos:line="116" pos:column="76"/></expr_stmt></block></then>
				<else pos:line="117" pos:column="33">else
					<block type="pseudo"><expr_stmt><expr><name><name pos:line="118" pos:column="41">node_ctx<pos:position pos:line="118" pos:column="49"/></name><operator pos:line="118" pos:column="49">.<pos:position pos:line="118" pos:column="50"/></operator><name pos:line="118" pos:column="50">prop_length<pos:position pos:line="118" pos:column="61"/></name></name> <operator pos:line="118" pos:column="62">=<pos:position pos:line="118" pos:column="63"/></operator> <operator pos:line="118" pos:column="64">(<pos:position pos:line="118" pos:column="65"/></operator><name pos:line="118" pos:column="65">off_t<pos:position pos:line="118" pos:column="70"/></name><operator pos:line="118" pos:column="70">)<pos:position pos:line="118" pos:column="71"/></operator> <name pos:line="118" pos:column="72">len<pos:position pos:line="118" pos:column="75"/></name></expr>;<pos:position pos:line="118" pos:column="76"/></expr_stmt></block></else></if>
				<break pos:line="119" pos:column="33">break;<pos:position pos:line="119" pos:column="39"/></break>
			}<pos:position pos:line="120" pos:column="26"/></block>
		<case pos:line="121" pos:column="17">case <expr><sizeof pos:line="121" pos:column="22">sizeof<argument_list pos:line="121" pos:column="28">(<argument><expr><literal type="string" pos:line="121" pos:column="29">"Text-delta"<pos:position pos:line="121" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="42"/></argument_list></sizeof></expr>:<pos:position pos:line="121" pos:column="43"/></case>
			<if pos:line="122" pos:column="25">if <condition pos:line="122" pos:column="28">(<expr><operator pos:line="122" pos:column="29">!<pos:position pos:line="122" pos:column="30"/></operator><call><name pos:line="122" pos:column="30">constcmp<pos:position pos:line="122" pos:column="38"/></name><argument_list pos:line="122" pos:column="38">(<argument><expr><name pos:line="122" pos:column="39">t<pos:position pos:line="122" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="122" pos:column="42">"Text-delta"<pos:position pos:line="122" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="122" pos:column="56"/></condition><then pos:line="122" pos:column="56"> <block pos:line="122" pos:column="57">{
				<expr_stmt><expr><name><name pos:line="123" pos:column="33">node_ctx<pos:position pos:line="123" pos:column="41"/></name><operator pos:line="123" pos:column="41">.<pos:position pos:line="123" pos:column="42"/></operator><name pos:line="123" pos:column="42">text_delta<pos:position pos:line="123" pos:column="52"/></name></name> <operator pos:line="123" pos:column="53">=<pos:position pos:line="123" pos:column="54"/></operator> <operator pos:line="123" pos:column="55">!<pos:position pos:line="123" pos:column="56"/></operator><call><name pos:line="123" pos:column="56">strcmp<pos:position pos:line="123" pos:column="62"/></name><argument_list pos:line="123" pos:column="62">(<argument><expr><name pos:line="123" pos:column="63">val<pos:position pos:line="123" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="123" pos:column="68">"true"<pos:position pos:line="123" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="76"/></expr_stmt>
				<break pos:line="124" pos:column="33">break;<pos:position pos:line="124" pos:column="39"/></break>
			}<pos:position pos:line="125" pos:column="26"/></block></then></if>
			<if pos:line="126" pos:column="25">if <condition pos:line="126" pos:column="28">(<expr><call><name pos:line="126" pos:column="29">constcmp<pos:position pos:line="126" pos:column="37"/></name><argument_list pos:line="126" pos:column="37">(<argument><expr><name pos:line="126" pos:column="38">t<pos:position pos:line="126" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="126" pos:column="41">"Prop-delta"<pos:position pos:line="126" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="126" pos:column="55"/></condition><then pos:line="126" pos:column="55">
				<block type="pseudo"><continue pos:line="127" pos:column="33">continue;<pos:position pos:line="127" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name><name pos:line="128" pos:column="25">node_ctx<pos:position pos:line="128" pos:column="33"/></name><operator pos:line="128" pos:column="33">.<pos:position pos:line="128" pos:column="34"/></operator><name pos:line="128" pos:column="34">prop_delta<pos:position pos:line="128" pos:column="44"/></name></name> <operator pos:line="128" pos:column="45">=<pos:position pos:line="128" pos:column="46"/></operator> <operator pos:line="128" pos:column="47">!<pos:position pos:line="128" pos:column="48"/></operator><call><name pos:line="128" pos:column="48">strcmp<pos:position pos:line="128" pos:column="54"/></name><argument_list pos:line="128" pos:column="54">(<argument><expr><name pos:line="128" pos:column="55">val<pos:position pos:line="128" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="128" pos:column="60">"true"<pos:position pos:line="128" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="128" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="68"/></expr_stmt>
			<break pos:line="129" pos:column="25">break;<pos:position pos:line="129" pos:column="31"/></break>
		<case pos:line="130" pos:column="17">case <expr><sizeof pos:line="130" pos:column="22">sizeof<argument_list pos:line="130" pos:column="28">(<argument><expr><literal type="string" pos:line="130" pos:column="29">"Content-length"<pos:position pos:line="130" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="46"/></argument_list></sizeof></expr>:<pos:position pos:line="130" pos:column="47"/></case>
			<if pos:line="131" pos:column="25">if <condition pos:line="131" pos:column="28">(<expr><call><name pos:line="131" pos:column="29">constcmp<pos:position pos:line="131" pos:column="37"/></name><argument_list pos:line="131" pos:column="37">(<argument><expr><name pos:line="131" pos:column="38">t<pos:position pos:line="131" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="131" pos:column="41">"Content-length"<pos:position pos:line="131" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="131" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="131" pos:column="59"/></condition><then pos:line="131" pos:column="59">
				<block type="pseudo"><continue pos:line="132" pos:column="33">continue;<pos:position pos:line="132" pos:column="42"/></continue></block></then></if>
			<expr_stmt><expr><name pos:line="133" pos:column="25">len<pos:position pos:line="133" pos:column="28"/></name> <operator pos:line="133" pos:column="29">=<pos:position pos:line="133" pos:column="30"/></operator> <call><name pos:line="133" pos:column="31">atoi<pos:position pos:line="133" pos:column="35"/></name><argument_list pos:line="133" pos:column="35">(<argument><expr><name pos:line="133" pos:column="36">val<pos:position pos:line="133" pos:column="39"/></name></expr></argument>)<pos:position pos:line="133" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="41"/></expr_stmt>
			<expr_stmt><expr><name pos:line="134" pos:column="25">t<pos:position pos:line="134" pos:column="26"/></name> <operator pos:line="134" pos:column="27">=<pos:position pos:line="134" pos:column="28"/></operator> <call><name pos:line="134" pos:column="29">buffer_read_line<pos:position pos:line="134" pos:column="45"/></name><argument_list pos:line="134" pos:column="45">(<argument><expr><operator pos:line="134" pos:column="46">&amp;<pos:position pos:line="134" pos:column="51"/></operator><name pos:line="134" pos:column="47">input<pos:position pos:line="134" pos:column="52"/></name></expr></argument>)<pos:position pos:line="134" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="54"/></expr_stmt>
			<if pos:line="135" pos:column="25">if <condition pos:line="135" pos:column="28">(<expr><operator pos:line="135" pos:column="29">!<pos:position pos:line="135" pos:column="30"/></operator><name pos:line="135" pos:column="30">t<pos:position pos:line="135" pos:column="31"/></name></expr>)<pos:position pos:line="135" pos:column="32"/></condition><then pos:line="135" pos:column="32">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="136" pos:column="33">die_short_read<pos:position pos:line="136" pos:column="47"/></name><argument_list pos:line="136" pos:column="47">()<pos:position pos:line="136" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="50"/></expr_stmt></block></then></if>
			<if pos:line="137" pos:column="25">if <condition pos:line="137" pos:column="28">(<expr><operator pos:line="137" pos:column="29">*<pos:position pos:line="137" pos:column="30"/></operator><name pos:line="137" pos:column="30">t<pos:position pos:line="137" pos:column="31"/></name></expr>)<pos:position pos:line="137" pos:column="32"/></condition><then pos:line="137" pos:column="32">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="138" pos:column="33">die<pos:position pos:line="138" pos:column="36"/></name><argument_list pos:line="138" pos:column="36">(<argument><expr><literal type="string" pos:line="138" pos:column="37">"invalid dump: expected blank line after content length header"<pos:position pos:line="138" pos:column="100"/></literal></expr></argument>)<pos:position pos:line="138" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="102"/></expr_stmt></block></then></if>
			<if pos:line="139" pos:column="25">if <condition pos:line="139" pos:column="28">(<expr><name pos:line="139" pos:column="29">active_ctx<pos:position pos:line="139" pos:column="39"/></name> <operator pos:line="139" pos:column="40">==<pos:position pos:line="139" pos:column="42"/></operator> <name pos:line="139" pos:column="43">REV_CTX<pos:position pos:line="139" pos:column="50"/></name></expr>)<pos:position pos:line="139" pos:column="51"/></condition><then pos:line="139" pos:column="51"> <block pos:line="139" pos:column="52">{
				<expr_stmt><expr><call><name pos:line="140" pos:column="33">read_props<pos:position pos:line="140" pos:column="43"/></name><argument_list pos:line="140" pos:column="43">()<pos:position pos:line="140" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="46"/></expr_stmt>
			}<pos:position pos:line="141" pos:column="26"/></block></then> <elseif pos:line="141" pos:column="27">else <if pos:line="141" pos:column="32">if <condition pos:line="141" pos:column="35">(<expr><name pos:line="141" pos:column="36">active_ctx<pos:position pos:line="141" pos:column="46"/></name> <operator pos:line="141" pos:column="47">==<pos:position pos:line="141" pos:column="49"/></operator> <name pos:line="141" pos:column="50">NODE_CTX<pos:position pos:line="141" pos:column="58"/></name></expr>)<pos:position pos:line="141" pos:column="59"/></condition><then pos:line="141" pos:column="59"> <block pos:line="141" pos:column="60">{
				<expr_stmt><expr><call><name pos:line="142" pos:column="33">handle_node<pos:position pos:line="142" pos:column="44"/></name><argument_list pos:line="142" pos:column="44">()<pos:position pos:line="142" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="47"/></expr_stmt>
				<expr_stmt><expr><name pos:line="143" pos:column="33">active_ctx<pos:position pos:line="143" pos:column="43"/></name> <operator pos:line="143" pos:column="44">=<pos:position pos:line="143" pos:column="45"/></operator> <name pos:line="143" pos:column="46">INTERNODE_CTX<pos:position pos:line="143" pos:column="59"/></name></expr>;<pos:position pos:line="143" pos:column="60"/></expr_stmt>
			}<pos:position pos:line="144" pos:column="26"/></block></then></if></elseif> <else pos:line="144" pos:column="27">else <block pos:line="144" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="145" pos:column="33">fprintf<pos:position pos:line="145" pos:column="40"/></name><argument_list pos:line="145" pos:column="40">(<argument><expr><name pos:line="145" pos:column="41">stderr<pos:position pos:line="145" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="145" pos:column="49">"Unexpected content length header: %"<pos:position pos:line="145" pos:column="86"/></literal><name pos:line="145" pos:column="86">PRIu32<pos:position pos:line="145" pos:column="92"/></name><literal type="string" pos:line="145" pos:column="92">"\n"<pos:position pos:line="145" pos:column="96"/></literal></expr></argument>, <argument><expr><name pos:line="145" pos:column="98">len<pos:position pos:line="145" pos:column="101"/></name></expr></argument>)<pos:position pos:line="145" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="103"/></expr_stmt>
				<if pos:line="146" pos:column="33">if <condition pos:line="146" pos:column="36">(<expr><call><name pos:line="146" pos:column="37">buffer_skip_bytes<pos:position pos:line="146" pos:column="54"/></name><argument_list pos:line="146" pos:column="54">(<argument><expr><operator pos:line="146" pos:column="55">&amp;<pos:position pos:line="146" pos:column="60"/></operator><name pos:line="146" pos:column="56">input<pos:position pos:line="146" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="63">len<pos:position pos:line="146" pos:column="66"/></name></expr></argument>)<pos:position pos:line="146" pos:column="67"/></argument_list></call> <operator pos:line="146" pos:column="68">!=<pos:position pos:line="146" pos:column="70"/></operator> <name pos:line="146" pos:column="71">len<pos:position pos:line="146" pos:column="74"/></name></expr>)<pos:position pos:line="146" pos:column="75"/></condition><then pos:line="146" pos:column="75">
					<block type="pseudo"><expr_stmt><expr><call><name pos:line="147" pos:column="41">die_short_read<pos:position pos:line="147" pos:column="55"/></name><argument_list pos:line="147" pos:column="55">()<pos:position pos:line="147" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="58"/></expr_stmt></block></then></if>
			}<pos:position pos:line="148" pos:column="26"/></block></else></if>
		}<pos:position pos:line="149" pos:column="18"/></block></switch>
	}<pos:position pos:line="150" pos:column="10"/></block></while>
	<if pos:line="151" pos:column="9">if <condition pos:line="151" pos:column="12">(<expr><call><name pos:line="151" pos:column="13">buffer_ferror<pos:position pos:line="151" pos:column="26"/></name><argument_list pos:line="151" pos:column="26">(<argument><expr><operator pos:line="151" pos:column="27">&amp;<pos:position pos:line="151" pos:column="32"/></operator><name pos:line="151" pos:column="28">input<pos:position pos:line="151" pos:column="33"/></name></expr></argument>)<pos:position pos:line="151" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="151" pos:column="35"/></condition><then pos:line="151" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="152" pos:column="17">die_short_read<pos:position pos:line="152" pos:column="31"/></name><argument_list pos:line="152" pos:column="31">()<pos:position pos:line="152" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="34"/></expr_stmt></block></then></if>
	<if pos:line="153" pos:column="9">if <condition pos:line="153" pos:column="12">(<expr><name pos:line="153" pos:column="13">active_ctx<pos:position pos:line="153" pos:column="23"/></name> <operator pos:line="153" pos:column="24">==<pos:position pos:line="153" pos:column="26"/></operator> <name pos:line="153" pos:column="27">NODE_CTX<pos:position pos:line="153" pos:column="35"/></name></expr>)<pos:position pos:line="153" pos:column="36"/></condition><then pos:line="153" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="154" pos:column="17">handle_node<pos:position pos:line="154" pos:column="28"/></name><argument_list pos:line="154" pos:column="28">()<pos:position pos:line="154" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="31"/></expr_stmt></block></then></if>
	<if pos:line="155" pos:column="9">if <condition pos:line="155" pos:column="12">(<expr><name pos:line="155" pos:column="13">active_ctx<pos:position pos:line="155" pos:column="23"/></name> <operator pos:line="155" pos:column="24">==<pos:position pos:line="155" pos:column="26"/></operator> <name pos:line="155" pos:column="27">REV_CTX<pos:position pos:line="155" pos:column="34"/></name></expr>)<pos:position pos:line="155" pos:column="35"/></condition><then pos:line="155" pos:column="35">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="156" pos:column="17">begin_revision<pos:position pos:line="156" pos:column="31"/></name><argument_list pos:line="156" pos:column="31">(<argument><expr><name pos:line="156" pos:column="32">local_ref<pos:position pos:line="156" pos:column="41"/></name></expr></argument>)<pos:position pos:line="156" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="43"/></expr_stmt></block></then></if>
	<if pos:line="157" pos:column="9">if <condition pos:line="157" pos:column="12">(<expr><name pos:line="157" pos:column="13">active_ctx<pos:position pos:line="157" pos:column="23"/></name> <operator pos:line="157" pos:column="24">!=<pos:position pos:line="157" pos:column="26"/></operator> <name pos:line="157" pos:column="27">DUMP_CTX<pos:position pos:line="157" pos:column="35"/></name></expr>)<pos:position pos:line="157" pos:column="36"/></condition><then pos:line="157" pos:column="36">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="158" pos:column="17">end_revision<pos:position pos:line="158" pos:column="29"/></name><argument_list pos:line="158" pos:column="29">(<argument><expr><name pos:line="158" pos:column="30">notes_ref<pos:position pos:line="158" pos:column="39"/></name></expr></argument>)<pos:position pos:line="158" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="41"/></expr_stmt></block></then></if>
}<pos:position pos:line="159" pos:column="2"/></block></function></unit>
