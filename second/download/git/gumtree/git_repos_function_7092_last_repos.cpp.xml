<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_7092_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">syslog<pos:position pos:line="1" pos:column="12"/></name><parameter_list pos:line="1" pos:column="12">(<parameter><decl><type><name pos:line="1" pos:column="13">int<pos:position pos:line="1" pos:column="16"/></name></type> <name pos:line="1" pos:column="17">priority<pos:position pos:line="1" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="27">const<pos:position pos:line="1" pos:column="32"/></specifier> <name pos:line="1" pos:column="33">char<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">fmt<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="1" pos:column="44">...<pos:position pos:line="1" pos:column="47"/></modifier></type></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">WORD<pos:position pos:line="3" pos:column="13"/></name></type> <name pos:line="3" pos:column="14">logtype<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">str<pos:position pos:line="4" pos:column="18"/></name></decl>, <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="21">pos<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">str_len<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">va_list<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">ap<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">ms_eventlog<pos:position pos:line="8" pos:column="25"/></name></expr>)<pos:position pos:line="8" pos:column="26"/></condition><then pos:line="8" pos:column="26">
		<block type="pseudo"><return pos:line="9" pos:column="17">return;<pos:position pos:line="9" pos:column="24"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="11" pos:column="9">va_start<pos:position pos:line="11" pos:column="17"/></name><argument_list pos:line="11" pos:column="17">(<argument><expr><name pos:line="11" pos:column="18">ap<pos:position pos:line="11" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="22">fmt<pos:position pos:line="11" pos:column="25"/></name></expr></argument>)<pos:position pos:line="11" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><name pos:line="12" pos:column="9">str_len<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <call><name pos:line="12" pos:column="19">vsnprintf<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><name pos:line="12" pos:column="29">NULL<pos:position pos:line="12" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="35">0<pos:position pos:line="12" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="38">fmt<pos:position pos:line="12" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="43">ap<pos:position pos:line="12" pos:column="45"/></name></expr></argument>)<pos:position pos:line="12" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">va_end<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><name pos:line="13" pos:column="16">ap<pos:position pos:line="13" pos:column="18"/></name></expr></argument>)<pos:position pos:line="13" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="20"/></expr_stmt>

	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">str_len<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">&lt;<pos:position pos:line="15" pos:column="25"/></operator> <literal type="number" pos:line="15" pos:column="23">0<pos:position pos:line="15" pos:column="24"/></literal></expr>)<pos:position pos:line="15" pos:column="25"/></condition><then pos:line="15" pos:column="25"> <block pos:line="15" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">warning_errno<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><literal type="string" pos:line="16" pos:column="31">"vsnprintf failed"<pos:position pos:line="16" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="51"/></expr_stmt>
		<return pos:line="17" pos:column="17">return;<pos:position pos:line="17" pos:column="24"/></return>
	}<pos:position pos:line="18" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="20" pos:column="9">str<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <call><name pos:line="20" pos:column="15">malloc<pos:position pos:line="20" pos:column="21"/></name><argument_list pos:line="20" pos:column="21">(<argument><expr><call><name pos:line="20" pos:column="22">st_add<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">(<argument><expr><name pos:line="20" pos:column="29">str_len<pos:position pos:line="20" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="38">1<pos:position pos:line="20" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="42"/></expr_stmt>
	<if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><operator pos:line="21" pos:column="13">!<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">str<pos:position pos:line="21" pos:column="17"/></name></expr>)<pos:position pos:line="21" pos:column="18"/></condition><then pos:line="21" pos:column="18"> <block pos:line="21" pos:column="19">{
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">warning_errno<pos:position pos:line="22" pos:column="30"/></name><argument_list pos:line="22" pos:column="30">(<argument><expr><literal type="string" pos:line="22" pos:column="31">"malloc failed"<pos:position pos:line="22" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="48"/></expr_stmt>
		<return pos:line="23" pos:column="17">return;<pos:position pos:line="23" pos:column="24"/></return>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>

	<expr_stmt><expr><call><name pos:line="26" pos:column="9">va_start<pos:position pos:line="26" pos:column="17"/></name><argument_list pos:line="26" pos:column="17">(<argument><expr><name pos:line="26" pos:column="18">ap<pos:position pos:line="26" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="22">fmt<pos:position pos:line="26" pos:column="25"/></name></expr></argument>)<pos:position pos:line="26" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="27"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">vsnprintf<pos:position pos:line="27" pos:column="18"/></name><argument_list pos:line="27" pos:column="18">(<argument><expr><name pos:line="27" pos:column="19">str<pos:position pos:line="27" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="24">str_len<pos:position pos:line="27" pos:column="31"/></name> <operator pos:line="27" pos:column="32">+<pos:position pos:line="27" pos:column="33"/></operator> <literal type="number" pos:line="27" pos:column="34">1<pos:position pos:line="27" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="37">fmt<pos:position pos:line="27" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="42">ap<pos:position pos:line="27" pos:column="44"/></name></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">va_end<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><name pos:line="28" pos:column="16">ap<pos:position pos:line="28" pos:column="18"/></name></expr></argument>)<pos:position pos:line="28" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="20"/></expr_stmt>

	<while pos:line="30" pos:column="9">while <condition pos:line="30" pos:column="15">(<expr><operator pos:line="30" pos:column="16">(<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="17">pos<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <call><name pos:line="30" pos:column="23">strstr<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">str<pos:position pos:line="30" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="35">"%1"<pos:position pos:line="30" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="40"/></argument_list></call><operator pos:line="30" pos:column="40">)<pos:position pos:line="30" pos:column="41"/></operator> <operator pos:line="30" pos:column="42">!=<pos:position pos:line="30" pos:column="44"/></operator> <name pos:line="30" pos:column="45">NULL<pos:position pos:line="30" pos:column="49"/></name></expr>)<pos:position pos:line="30" pos:column="50"/></condition> <block pos:line="30" pos:column="51">{
		<decl_stmt><decl><type><name pos:line="31" pos:column="17">char<pos:position pos:line="31" pos:column="21"/></name> <modifier pos:line="31" pos:column="22">*<pos:position pos:line="31" pos:column="23"/></modifier></type><name pos:line="31" pos:column="23">oldstr<pos:position pos:line="31" pos:column="29"/></name> <init pos:line="31" pos:column="30">= <expr><name pos:line="31" pos:column="32">str<pos:position pos:line="31" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="31" pos:column="36"/></decl_stmt>
		<expr_stmt><expr><name pos:line="32" pos:column="17">str<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">=<pos:position pos:line="32" pos:column="22"/></operator> <call><name pos:line="32" pos:column="23">realloc<pos:position pos:line="32" pos:column="30"/></name><argument_list pos:line="32" pos:column="30">(<argument><expr><name pos:line="32" pos:column="31">str<pos:position pos:line="32" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="32" pos:column="36">st_add<pos:position pos:line="32" pos:column="42"/></name><argument_list pos:line="32" pos:column="42">(<argument><expr><operator pos:line="32" pos:column="43">++<pos:position pos:line="32" pos:column="45"/></operator><name pos:line="32" pos:column="45">str_len<pos:position pos:line="32" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="54">1<pos:position pos:line="32" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="58"/></expr_stmt>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><operator pos:line="33" pos:column="21">!<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="22">str<pos:position pos:line="33" pos:column="25"/></name></expr>)<pos:position pos:line="33" pos:column="26"/></condition><then pos:line="33" pos:column="26"> <block pos:line="33" pos:column="27">{
			<expr_stmt><expr><call><name pos:line="34" pos:column="25">free<pos:position pos:line="34" pos:column="29"/></name><argument_list pos:line="34" pos:column="29">(<argument><expr><name pos:line="34" pos:column="30">oldstr<pos:position pos:line="34" pos:column="36"/></name></expr></argument>)<pos:position pos:line="34" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="35" pos:column="25">warning_errno<pos:position pos:line="35" pos:column="38"/></name><argument_list pos:line="35" pos:column="38">(<argument><expr><literal type="string" pos:line="35" pos:column="39">"realloc failed"<pos:position pos:line="35" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="57"/></expr_stmt>
			<return pos:line="36" pos:column="25">return;<pos:position pos:line="36" pos:column="32"/></return>
		}<pos:position pos:line="37" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">memmove<pos:position pos:line="38" pos:column="24"/></name><argument_list pos:line="38" pos:column="24">(<argument><expr><name pos:line="38" pos:column="25">pos<pos:position pos:line="38" pos:column="28"/></name> <operator pos:line="38" pos:column="29">+<pos:position pos:line="38" pos:column="30"/></operator> <literal type="number" pos:line="38" pos:column="31">2<pos:position pos:line="38" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="34">pos<pos:position pos:line="38" pos:column="37"/></name> <operator pos:line="38" pos:column="38">+<pos:position pos:line="38" pos:column="39"/></operator> <literal type="number" pos:line="38" pos:column="40">1<pos:position pos:line="38" pos:column="41"/></literal></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="43">strlen<pos:position pos:line="38" pos:column="49"/></name><argument_list pos:line="38" pos:column="49">(<argument><expr><name pos:line="38" pos:column="50">pos<pos:position pos:line="38" pos:column="53"/></name></expr></argument>)<pos:position pos:line="38" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="56"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="39" pos:column="17">pos<pos:position pos:line="39" pos:column="20"/></name><index pos:line="39" pos:column="20">[<expr><literal type="number" pos:line="39" pos:column="21">1<pos:position pos:line="39" pos:column="22"/></literal></expr>]<pos:position pos:line="39" pos:column="23"/></index></name> <operator pos:line="39" pos:column="24">=<pos:position pos:line="39" pos:column="25"/></operator> <literal type="char" pos:line="39" pos:column="26">' '<pos:position pos:line="39" pos:column="29"/></literal></expr>;<pos:position pos:line="39" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="40" pos:column="10"/></block></while>

	<switch pos:line="42" pos:column="9">switch <condition pos:line="42" pos:column="16">(<expr><name pos:line="42" pos:column="17">priority<pos:position pos:line="42" pos:column="25"/></name></expr>)<pos:position pos:line="42" pos:column="26"/></condition> <block pos:line="42" pos:column="27">{
	<case pos:line="43" pos:column="9">case <expr><name pos:line="43" pos:column="14">LOG_EMERG<pos:position pos:line="43" pos:column="23"/></name></expr>:<pos:position pos:line="43" pos:column="24"/></case>
	<case pos:line="44" pos:column="9">case <expr><name pos:line="44" pos:column="14">LOG_ALERT<pos:position pos:line="44" pos:column="23"/></name></expr>:<pos:position pos:line="44" pos:column="24"/></case>
	<case pos:line="45" pos:column="9">case <expr><name pos:line="45" pos:column="14">LOG_CRIT<pos:position pos:line="45" pos:column="22"/></name></expr>:<pos:position pos:line="45" pos:column="23"/></case>
	<case pos:line="46" pos:column="9">case <expr><name pos:line="46" pos:column="14">LOG_ERR<pos:position pos:line="46" pos:column="21"/></name></expr>:<pos:position pos:line="46" pos:column="22"/></case>
		<expr_stmt><expr><name pos:line="47" pos:column="17">logtype<pos:position pos:line="47" pos:column="24"/></name> <operator pos:line="47" pos:column="25">=<pos:position pos:line="47" pos:column="26"/></operator> <name pos:line="47" pos:column="27">EVENTLOG_ERROR_TYPE<pos:position pos:line="47" pos:column="46"/></name></expr>;<pos:position pos:line="47" pos:column="47"/></expr_stmt>
		<break pos:line="48" pos:column="17">break;<pos:position pos:line="48" pos:column="23"/></break>

	<case pos:line="50" pos:column="9">case <expr><name pos:line="50" pos:column="14">LOG_WARNING<pos:position pos:line="50" pos:column="25"/></name></expr>:<pos:position pos:line="50" pos:column="26"/></case>
		<expr_stmt><expr><name pos:line="51" pos:column="17">logtype<pos:position pos:line="51" pos:column="24"/></name> <operator pos:line="51" pos:column="25">=<pos:position pos:line="51" pos:column="26"/></operator> <name pos:line="51" pos:column="27">EVENTLOG_WARNING_TYPE<pos:position pos:line="51" pos:column="48"/></name></expr>;<pos:position pos:line="51" pos:column="49"/></expr_stmt>
		<break pos:line="52" pos:column="17">break;<pos:position pos:line="52" pos:column="23"/></break>

	<case pos:line="54" pos:column="9">case <expr><name pos:line="54" pos:column="14">LOG_NOTICE<pos:position pos:line="54" pos:column="24"/></name></expr>:<pos:position pos:line="54" pos:column="25"/></case>
	<case pos:line="55" pos:column="9">case <expr><name pos:line="55" pos:column="14">LOG_INFO<pos:position pos:line="55" pos:column="22"/></name></expr>:<pos:position pos:line="55" pos:column="23"/></case>
	<case pos:line="56" pos:column="9">case <expr><name pos:line="56" pos:column="14">LOG_DEBUG<pos:position pos:line="56" pos:column="23"/></name></expr>:<pos:position pos:line="56" pos:column="24"/></case>
	<default pos:line="57" pos:column="9">default:<pos:position pos:line="57" pos:column="17"/></default>
		<expr_stmt><expr><name pos:line="58" pos:column="17">logtype<pos:position pos:line="58" pos:column="24"/></name> <operator pos:line="58" pos:column="25">=<pos:position pos:line="58" pos:column="26"/></operator> <name pos:line="58" pos:column="27">EVENTLOG_INFORMATION_TYPE<pos:position pos:line="58" pos:column="52"/></name></expr>;<pos:position pos:line="58" pos:column="53"/></expr_stmt>
		<break pos:line="59" pos:column="17">break;<pos:position pos:line="59" pos:column="23"/></break>
	}<pos:position pos:line="60" pos:column="10"/></block></switch>

	<expr_stmt><expr><call><name pos:line="62" pos:column="9">ReportEventA<pos:position pos:line="62" pos:column="21"/></name><argument_list pos:line="62" pos:column="21">(<argument><expr><name pos:line="62" pos:column="22">ms_eventlog<pos:position pos:line="62" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="35">logtype<pos:position pos:line="62" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="44">0<pos:position pos:line="62" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="47">0<pos:position pos:line="62" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="50">NULL<pos:position pos:line="62" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="56">1<pos:position pos:line="62" pos:column="57"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="59">0<pos:position pos:line="62" pos:column="60"/></literal></expr></argument>,
	    <argument><expr><operator pos:line="63" pos:column="13">(<pos:position pos:line="63" pos:column="14"/></operator><specifier pos:line="63" pos:column="14">const<pos:position pos:line="63" pos:column="19"/></specifier> <name pos:line="63" pos:column="20">char<pos:position pos:line="63" pos:column="24"/></name> <operator pos:line="63" pos:column="25">*<pos:position pos:line="63" pos:column="26"/></operator><operator pos:line="63" pos:column="26">*<pos:position pos:line="63" pos:column="27"/></operator><operator pos:line="63" pos:column="27">)<pos:position pos:line="63" pos:column="28"/></operator><operator pos:line="63" pos:column="28">&amp;<pos:position pos:line="63" pos:column="33"/></operator><name pos:line="63" pos:column="29">str<pos:position pos:line="63" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="34">NULL<pos:position pos:line="63" pos:column="38"/></name></expr></argument>)<pos:position pos:line="63" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="64" pos:column="9">free<pos:position pos:line="64" pos:column="13"/></name><argument_list pos:line="64" pos:column="13">(<argument><expr><name pos:line="64" pos:column="14">str<pos:position pos:line="64" pos:column="17"/></name></expr></argument>)<pos:position pos:line="64" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="19"/></expr_stmt>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
