<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4319_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">parse_pattern_type_arg<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">opt<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">arg<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><operator pos:line="3" pos:column="13">!<pos:position pos:line="3" pos:column="14"/></operator><call><name pos:line="3" pos:column="14">strcmp<pos:position pos:line="3" pos:column="20"/></name><argument_list pos:line="3" pos:column="20">(<argument><expr><name pos:line="3" pos:column="21">arg<pos:position pos:line="3" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="26">"default"<pos:position pos:line="3" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="37"/></condition><then pos:line="3" pos:column="37">
		<block type="pseudo"><return pos:line="4" pos:column="17">return <expr><name pos:line="4" pos:column="24">GREP_PATTERN_TYPE_UNSPECIFIED<pos:position pos:line="4" pos:column="53"/></name></expr>;<pos:position pos:line="4" pos:column="54"/></return></block></then>
	<elseif pos:line="5" pos:column="9">else <if pos:line="5" pos:column="14">if <condition pos:line="5" pos:column="17">(<expr><operator pos:line="5" pos:column="18">!<pos:position pos:line="5" pos:column="19"/></operator><call><name pos:line="5" pos:column="19">strcmp<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">arg<pos:position pos:line="5" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="31">"basic"<pos:position pos:line="5" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="40"/></condition><then pos:line="5" pos:column="40">
		<block type="pseudo"><return pos:line="6" pos:column="17">return <expr><name pos:line="6" pos:column="24">GREP_PATTERN_TYPE_BRE<pos:position pos:line="6" pos:column="45"/></name></expr>;<pos:position pos:line="6" pos:column="46"/></return></block></then></if></elseif>
	<elseif pos:line="7" pos:column="9">else <if pos:line="7" pos:column="14">if <condition pos:line="7" pos:column="17">(<expr><operator pos:line="7" pos:column="18">!<pos:position pos:line="7" pos:column="19"/></operator><call><name pos:line="7" pos:column="19">strcmp<pos:position pos:line="7" pos:column="25"/></name><argument_list pos:line="7" pos:column="25">(<argument><expr><name pos:line="7" pos:column="26">arg<pos:position pos:line="7" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="31">"extended"<pos:position pos:line="7" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="43"/></condition><then pos:line="7" pos:column="43">
		<block type="pseudo"><return pos:line="8" pos:column="17">return <expr><name pos:line="8" pos:column="24">GREP_PATTERN_TYPE_ERE<pos:position pos:line="8" pos:column="45"/></name></expr>;<pos:position pos:line="8" pos:column="46"/></return></block></then></if></elseif>
	<elseif pos:line="9" pos:column="9">else <if pos:line="9" pos:column="14">if <condition pos:line="9" pos:column="17">(<expr><operator pos:line="9" pos:column="18">!<pos:position pos:line="9" pos:column="19"/></operator><call><name pos:line="9" pos:column="19">strcmp<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">arg<pos:position pos:line="9" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="31">"fixed"<pos:position pos:line="9" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="40"/></condition><then pos:line="9" pos:column="40">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><name pos:line="10" pos:column="24">GREP_PATTERN_TYPE_FIXED<pos:position pos:line="10" pos:column="47"/></name></expr>;<pos:position pos:line="10" pos:column="48"/></return></block></then></if></elseif>
	<elseif pos:line="11" pos:column="9">else <if pos:line="11" pos:column="14">if <condition pos:line="11" pos:column="17">(<expr><operator pos:line="11" pos:column="18">!<pos:position pos:line="11" pos:column="19"/></operator><call><name pos:line="11" pos:column="19">strcmp<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">arg<pos:position pos:line="11" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="31">"perl"<pos:position pos:line="11" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="39"/></condition><then pos:line="11" pos:column="39">
		<block type="pseudo"><return pos:line="12" pos:column="17">return <expr><name pos:line="12" pos:column="24">GREP_PATTERN_TYPE_PCRE<pos:position pos:line="12" pos:column="46"/></name></expr>;<pos:position pos:line="12" pos:column="47"/></return></block></then></if></elseif></if>
	<expr_stmt><expr><call><name pos:line="13" pos:column="9">die<pos:position pos:line="13" pos:column="12"/></name><argument_list pos:line="13" pos:column="12">(<argument><expr><literal type="string" pos:line="13" pos:column="13">"bad %s argument: %s"<pos:position pos:line="13" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="36">opt<pos:position pos:line="13" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="41">arg<pos:position pos:line="13" pos:column="44"/></name></expr></argument>)<pos:position pos:line="13" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="46"/></expr_stmt>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
