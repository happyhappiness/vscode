<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6887_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name><modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type> <name pos:line="1" pos:column="14">internal_realloc<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">mstate<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">m<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">void<pos:position pos:line="1" pos:column="45"/></name><modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type> <name pos:line="1" pos:column="47">oldmem<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">size_t<pos:position pos:line="1" pos:column="61"/></name></type> <name pos:line="1" pos:column="62">bytes<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list> <block pos:line="1" pos:column="69">{
  <if pos:line="2" pos:column="3">if <condition pos:line="2" pos:column="6">(<expr><name pos:line="2" pos:column="7">bytes<pos:position pos:line="2" pos:column="12"/></name> <operator pos:line="2" pos:column="13">&gt;=<pos:position pos:line="2" pos:column="18"/></operator> <name pos:line="2" pos:column="16">MAX_REQUEST<pos:position pos:line="2" pos:column="27"/></name></expr>)<pos:position pos:line="2" pos:column="28"/></condition><then pos:line="2" pos:column="28"> <block pos:line="2" pos:column="29">{
    <expr_stmt><expr><name pos:line="3" pos:column="5">MALLOC_FAILURE_ACTION<pos:position pos:line="3" pos:column="26"/></name></expr>;<pos:position pos:line="3" pos:column="27"/></expr_stmt>
    <return pos:line="4" pos:column="5">return <expr><literal type="number" pos:line="4" pos:column="12">0<pos:position pos:line="4" pos:column="13"/></literal></expr>;<pos:position pos:line="4" pos:column="14"/></return>
  }<pos:position pos:line="5" pos:column="4"/></block></then></if>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><operator pos:line="6" pos:column="7">!<pos:position pos:line="6" pos:column="8"/></operator><call><name pos:line="6" pos:column="8">PREACTION<pos:position pos:line="6" pos:column="17"/></name><argument_list pos:line="6" pos:column="17">(<argument><expr><name pos:line="6" pos:column="18">m<pos:position pos:line="6" pos:column="19"/></name></expr></argument>)<pos:position pos:line="6" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21"> <block pos:line="6" pos:column="22">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">mchunkptr<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">oldp<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><call><name pos:line="7" pos:column="22">mem2chunk<pos:position pos:line="7" pos:column="31"/></name><argument_list pos:line="7" pos:column="31">(<argument><expr><name pos:line="7" pos:column="32">oldmem<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">size_t<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">oldsize<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><call><name pos:line="8" pos:column="22">chunksize<pos:position pos:line="8" pos:column="31"/></name><argument_list pos:line="8" pos:column="31">(<argument><expr><name pos:line="8" pos:column="32">oldp<pos:position pos:line="8" pos:column="36"/></name></expr></argument>)<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">mchunkptr<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">next<pos:position pos:line="9" pos:column="19"/></name> <init pos:line="9" pos:column="20">= <expr><call><name pos:line="9" pos:column="22">chunk_plus_offset<pos:position pos:line="9" pos:column="39"/></name><argument_list pos:line="9" pos:column="39">(<argument><expr><name pos:line="9" pos:column="40">oldp<pos:position pos:line="9" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="46">oldsize<pos:position pos:line="9" pos:column="53"/></name></expr></argument>)<pos:position pos:line="9" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="55"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">mchunkptr<pos:position pos:line="10" pos:column="14"/></name></type> <name pos:line="10" pos:column="15">newp<pos:position pos:line="10" pos:column="19"/></name> <init pos:line="10" pos:column="20">= <expr><literal type="number" pos:line="10" pos:column="22">0<pos:position pos:line="10" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">void<pos:position pos:line="11" pos:column="9"/></name><modifier pos:line="11" pos:column="9">*<pos:position pos:line="11" pos:column="10"/></modifier></type> <name pos:line="11" pos:column="11">extra<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><literal type="number" pos:line="11" pos:column="19">0<pos:position pos:line="11" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>

    <comment type="block" pos:line="13" pos:column="5">/* Try to either shrink or extend into top. Else malloc-copy-free */</comment>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name pos:line="15" pos:column="9">RTCHECK<pos:position pos:line="15" pos:column="16"/></name><argument_list pos:line="15" pos:column="16">(<argument><expr><call><name pos:line="15" pos:column="17">ok_address<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">(<argument><expr><name pos:line="15" pos:column="28">m<pos:position pos:line="15" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="31">oldp<pos:position pos:line="15" pos:column="35"/></name></expr></argument>)<pos:position pos:line="15" pos:column="36"/></argument_list></call> <operator pos:line="15" pos:column="37">&amp;&amp;<pos:position pos:line="15" pos:column="47"/></operator> <call><name pos:line="15" pos:column="40">ok_cinuse<pos:position pos:line="15" pos:column="49"/></name><argument_list pos:line="15" pos:column="49">(<argument><expr><name pos:line="15" pos:column="50">oldp<pos:position pos:line="15" pos:column="54"/></name></expr></argument>)<pos:position pos:line="15" pos:column="55"/></argument_list></call> <operator pos:line="15" pos:column="56">&amp;&amp;<pos:position pos:line="15" pos:column="66"/></operator>
		<call><name pos:line="16" pos:column="17">ok_next<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">oldp<pos:position pos:line="16" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="31">next<pos:position pos:line="16" pos:column="35"/></name></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call> <operator pos:line="16" pos:column="37">&amp;&amp;<pos:position pos:line="16" pos:column="47"/></operator> <call><name pos:line="16" pos:column="40">ok_pinuse<pos:position pos:line="16" pos:column="49"/></name><argument_list pos:line="16" pos:column="49">(<argument><expr><name pos:line="16" pos:column="50">next<pos:position pos:line="16" pos:column="54"/></name></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="57"/></condition><then pos:line="16" pos:column="57"> <block pos:line="16" pos:column="58">{
      <decl_stmt><decl><type><name pos:line="17" pos:column="7">size_t<pos:position pos:line="17" pos:column="13"/></name></type> <name pos:line="17" pos:column="14">nb<pos:position pos:line="17" pos:column="16"/></name> <init pos:line="17" pos:column="17">= <expr><call><name pos:line="17" pos:column="19">request2size<pos:position pos:line="17" pos:column="31"/></name><argument_list pos:line="17" pos:column="31">(<argument><expr><name pos:line="17" pos:column="32">bytes<pos:position pos:line="17" pos:column="37"/></name></expr></argument>)<pos:position pos:line="17" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="39"/></decl_stmt>
      <if pos:line="18" pos:column="7">if <condition pos:line="18" pos:column="10">(<expr><call><name pos:line="18" pos:column="11">is_mmapped<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><name pos:line="18" pos:column="22">oldp<pos:position pos:line="18" pos:column="26"/></name></expr></argument>)<pos:position pos:line="18" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="28"/></condition><then pos:line="18" pos:column="28">
	<block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="9">newp<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <call><name pos:line="19" pos:column="16">mmap_resize<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">(<argument><expr><name pos:line="19" pos:column="28">m<pos:position pos:line="19" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="31">oldp<pos:position pos:line="19" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="37">nb<pos:position pos:line="19" pos:column="39"/></name></expr></argument>)<pos:position pos:line="19" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="41"/></expr_stmt></block></then>
      <elseif pos:line="20" pos:column="7">else <if pos:line="20" pos:column="12">if <condition pos:line="20" pos:column="15">(<expr><name pos:line="20" pos:column="16">oldsize<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">&gt;=<pos:position pos:line="20" pos:column="29"/></operator> <name pos:line="20" pos:column="27">nb<pos:position pos:line="20" pos:column="29"/></name></expr>)<pos:position pos:line="20" pos:column="30"/></condition><then pos:line="20" pos:column="30"> <block pos:line="20" pos:column="31">{ <comment type="block" pos:line="20" pos:column="33">/* already big enough */</comment>
	<decl_stmt><decl><type><name pos:line="21" pos:column="9">size_t<pos:position pos:line="21" pos:column="15"/></name></type> <name pos:line="21" pos:column="16">rsize<pos:position pos:line="21" pos:column="21"/></name> <init pos:line="21" pos:column="22">= <expr><name pos:line="21" pos:column="24">oldsize<pos:position pos:line="21" pos:column="31"/></name> <operator pos:line="21" pos:column="32">-<pos:position pos:line="21" pos:column="33"/></operator> <name pos:line="21" pos:column="34">nb<pos:position pos:line="21" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="37"/></decl_stmt>
	<expr_stmt><expr><name pos:line="22" pos:column="9">newp<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">=<pos:position pos:line="22" pos:column="15"/></operator> <name pos:line="22" pos:column="16">oldp<pos:position pos:line="22" pos:column="20"/></name></expr>;<pos:position pos:line="22" pos:column="21"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">rsize<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">&gt;=<pos:position pos:line="23" pos:column="24"/></operator> <name pos:line="23" pos:column="22">MIN_CHUNK_SIZE<pos:position pos:line="23" pos:column="36"/></name></expr>)<pos:position pos:line="23" pos:column="37"/></condition><then pos:line="23" pos:column="37"> <block pos:line="23" pos:column="38">{
	  <decl_stmt><decl><type><name pos:line="24" pos:column="11">mchunkptr<pos:position pos:line="24" pos:column="20"/></name></type> <name pos:line="24" pos:column="21">remainder<pos:position pos:line="24" pos:column="30"/></name> <init pos:line="24" pos:column="31">= <expr><call><name pos:line="24" pos:column="33">chunk_plus_offset<pos:position pos:line="24" pos:column="50"/></name><argument_list pos:line="24" pos:column="50">(<argument><expr><name pos:line="24" pos:column="51">newp<pos:position pos:line="24" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="57">nb<pos:position pos:line="24" pos:column="59"/></name></expr></argument>)<pos:position pos:line="24" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="61"/></decl_stmt>
	  <expr_stmt><expr><call><name pos:line="25" pos:column="11">set_inuse<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><name pos:line="25" pos:column="21">m<pos:position pos:line="25" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="24">newp<pos:position pos:line="25" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="30">nb<pos:position pos:line="25" pos:column="32"/></name></expr></argument>)<pos:position pos:line="25" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="34"/></expr_stmt>
	  <expr_stmt><expr><call><name pos:line="26" pos:column="11">set_inuse<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><name pos:line="26" pos:column="21">m<pos:position pos:line="26" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="24">remainder<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="35">rsize<pos:position pos:line="26" pos:column="40"/></name></expr></argument>)<pos:position pos:line="26" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="42"/></expr_stmt>
	  <expr_stmt><expr><name pos:line="27" pos:column="11">extra<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <call><name pos:line="27" pos:column="19">chunk2mem<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">remainder<pos:position pos:line="27" pos:column="38"/></name></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt>
	}<pos:position pos:line="28" pos:column="10"/></block></then></if>
      }<pos:position pos:line="29" pos:column="8"/></block></then></if></elseif>
      <elseif pos:line="30" pos:column="7">else <if pos:line="30" pos:column="12">if <condition pos:line="30" pos:column="15">(<expr><name pos:line="30" pos:column="16">next<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">==<pos:position pos:line="30" pos:column="23"/></operator> <name><name pos:line="30" pos:column="24">m<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">-&gt;<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="27">top<pos:position pos:line="30" pos:column="30"/></name></name> <operator pos:line="30" pos:column="31">&amp;&amp;<pos:position pos:line="30" pos:column="41"/></operator> <name pos:line="30" pos:column="34">oldsize<pos:position pos:line="30" pos:column="41"/></name> <operator pos:line="30" pos:column="42">+<pos:position pos:line="30" pos:column="43"/></operator> <name><name pos:line="30" pos:column="44">m<pos:position pos:line="30" pos:column="45"/></name><operator pos:line="30" pos:column="45">-&gt;<pos:position pos:line="30" pos:column="50"/></operator><name pos:line="30" pos:column="47">topsize<pos:position pos:line="30" pos:column="54"/></name></name> <operator pos:line="30" pos:column="55">&gt;<pos:position pos:line="30" pos:column="59"/></operator> <name pos:line="30" pos:column="57">nb<pos:position pos:line="30" pos:column="59"/></name></expr>)<pos:position pos:line="30" pos:column="60"/></condition><then pos:line="30" pos:column="60"> <block pos:line="30" pos:column="61">{
	<comment type="block" pos:line="31" pos:column="9">/* Expand into top */</comment>
	<decl_stmt><decl><type><name pos:line="32" pos:column="9">size_t<pos:position pos:line="32" pos:column="15"/></name></type> <name pos:line="32" pos:column="16">newsize<pos:position pos:line="32" pos:column="23"/></name> <init pos:line="32" pos:column="24">= <expr><name pos:line="32" pos:column="26">oldsize<pos:position pos:line="32" pos:column="33"/></name> <operator pos:line="32" pos:column="34">+<pos:position pos:line="32" pos:column="35"/></operator> <name><name pos:line="32" pos:column="36">m<pos:position pos:line="32" pos:column="37"/></name><operator pos:line="32" pos:column="37">-&gt;<pos:position pos:line="32" pos:column="42"/></operator><name pos:line="32" pos:column="39">topsize<pos:position pos:line="32" pos:column="46"/></name></name></expr></init></decl>;<pos:position pos:line="32" pos:column="47"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="33" pos:column="9">size_t<pos:position pos:line="33" pos:column="15"/></name></type> <name pos:line="33" pos:column="16">newtopsize<pos:position pos:line="33" pos:column="26"/></name> <init pos:line="33" pos:column="27">= <expr><name pos:line="33" pos:column="29">newsize<pos:position pos:line="33" pos:column="36"/></name> <operator pos:line="33" pos:column="37">-<pos:position pos:line="33" pos:column="38"/></operator> <name pos:line="33" pos:column="39">nb<pos:position pos:line="33" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="33" pos:column="42"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="34" pos:column="9">mchunkptr<pos:position pos:line="34" pos:column="18"/></name></type> <name pos:line="34" pos:column="19">newtop<pos:position pos:line="34" pos:column="25"/></name> <init pos:line="34" pos:column="26">= <expr><call><name pos:line="34" pos:column="28">chunk_plus_offset<pos:position pos:line="34" pos:column="45"/></name><argument_list pos:line="34" pos:column="45">(<argument><expr><name pos:line="34" pos:column="46">oldp<pos:position pos:line="34" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="52">nb<pos:position pos:line="34" pos:column="54"/></name></expr></argument>)<pos:position pos:line="34" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="34" pos:column="56"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="35" pos:column="9">set_inuse<pos:position pos:line="35" pos:column="18"/></name><argument_list pos:line="35" pos:column="18">(<argument><expr><name pos:line="35" pos:column="19">m<pos:position pos:line="35" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="22">oldp<pos:position pos:line="35" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="28">nb<pos:position pos:line="35" pos:column="30"/></name></expr></argument>)<pos:position pos:line="35" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="32"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="36" pos:column="9">newtop<pos:position pos:line="36" pos:column="15"/></name><operator pos:line="36" pos:column="15">-&gt;<pos:position pos:line="36" pos:column="20"/></operator><name pos:line="36" pos:column="17">head<pos:position pos:line="36" pos:column="21"/></name></name> <operator pos:line="36" pos:column="22">=<pos:position pos:line="36" pos:column="23"/></operator> <name pos:line="36" pos:column="24">newtopsize<pos:position pos:line="36" pos:column="34"/></name> <operator pos:line="36" pos:column="35">|<pos:position pos:line="36" pos:column="36"/></operator><name pos:line="36" pos:column="36">PINUSE_BIT<pos:position pos:line="36" pos:column="46"/></name></expr>;<pos:position pos:line="36" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="37" pos:column="9">m<pos:position pos:line="37" pos:column="10"/></name><operator pos:line="37" pos:column="10">-&gt;<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="12">top<pos:position pos:line="37" pos:column="15"/></name></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <name pos:line="37" pos:column="18">newtop<pos:position pos:line="37" pos:column="24"/></name></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="38" pos:column="9">m<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">-&gt;<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="12">topsize<pos:position pos:line="38" pos:column="19"/></name></name> <operator pos:line="38" pos:column="20">=<pos:position pos:line="38" pos:column="21"/></operator> <name pos:line="38" pos:column="22">newtopsize<pos:position pos:line="38" pos:column="32"/></name></expr>;<pos:position pos:line="38" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name pos:line="39" pos:column="9">newp<pos:position pos:line="39" pos:column="13"/></name> <operator pos:line="39" pos:column="14">=<pos:position pos:line="39" pos:column="15"/></operator> <name pos:line="39" pos:column="16">oldp<pos:position pos:line="39" pos:column="20"/></name></expr>;<pos:position pos:line="39" pos:column="21"/></expr_stmt>
      }<pos:position pos:line="40" pos:column="8"/></block></then></if></elseif></if>
    }<pos:position pos:line="41" pos:column="6"/></block></then>
    <else pos:line="42" pos:column="5">else <block pos:line="42" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="43" pos:column="7">USAGE_ERROR_ACTION<pos:position pos:line="43" pos:column="25"/></name><argument_list pos:line="43" pos:column="25">(<argument><expr><name pos:line="43" pos:column="26">m<pos:position pos:line="43" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="29">oldmem<pos:position pos:line="43" pos:column="35"/></name></expr></argument>)<pos:position pos:line="43" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="44" pos:column="7">POSTACTION<pos:position pos:line="44" pos:column="17"/></name><argument_list pos:line="44" pos:column="17">(<argument><expr><name pos:line="44" pos:column="18">m<pos:position pos:line="44" pos:column="19"/></name></expr></argument>)<pos:position pos:line="44" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="21"/></expr_stmt>
      <return pos:line="45" pos:column="7">return <expr><literal type="number" pos:line="45" pos:column="14">0<pos:position pos:line="45" pos:column="15"/></literal></expr>;<pos:position pos:line="45" pos:column="16"/></return>
    }<pos:position pos:line="46" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="48" pos:column="5">POSTACTION<pos:position pos:line="48" pos:column="15"/></name><argument_list pos:line="48" pos:column="15">(<argument><expr><name pos:line="48" pos:column="16">m<pos:position pos:line="48" pos:column="17"/></name></expr></argument>)<pos:position pos:line="48" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="19"/></expr_stmt>

    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name pos:line="50" pos:column="9">newp<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">!=<pos:position pos:line="50" pos:column="16"/></operator> <literal type="number" pos:line="50" pos:column="17">0<pos:position pos:line="50" pos:column="18"/></literal></expr>)<pos:position pos:line="50" pos:column="19"/></condition><then pos:line="50" pos:column="19"> <block pos:line="50" pos:column="20">{
      <if pos:line="51" pos:column="7">if <condition pos:line="51" pos:column="10">(<expr><name pos:line="51" pos:column="11">extra<pos:position pos:line="51" pos:column="16"/></name> <operator pos:line="51" pos:column="17">!=<pos:position pos:line="51" pos:column="19"/></operator> <literal type="number" pos:line="51" pos:column="20">0<pos:position pos:line="51" pos:column="21"/></literal></expr>)<pos:position pos:line="51" pos:column="22"/></condition><then pos:line="51" pos:column="22"> <block pos:line="51" pos:column="23">{
	<expr_stmt><expr><call><name pos:line="52" pos:column="9">internal_free<pos:position pos:line="52" pos:column="22"/></name><argument_list pos:line="52" pos:column="22">(<argument><expr><name pos:line="52" pos:column="23">m<pos:position pos:line="52" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="26">extra<pos:position pos:line="52" pos:column="31"/></name></expr></argument>)<pos:position pos:line="52" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="33"/></expr_stmt>
      }<pos:position pos:line="53" pos:column="8"/></block></then></if>
      <expr_stmt><expr><call><name pos:line="54" pos:column="7">check_inuse_chunk<pos:position pos:line="54" pos:column="24"/></name><argument_list pos:line="54" pos:column="24">(<argument><expr><name pos:line="54" pos:column="25">m<pos:position pos:line="54" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="28">newp<pos:position pos:line="54" pos:column="32"/></name></expr></argument>)<pos:position pos:line="54" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="34"/></expr_stmt>
      <return pos:line="55" pos:column="7">return <expr><call><name pos:line="55" pos:column="14">chunk2mem<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><name pos:line="55" pos:column="24">newp<pos:position pos:line="55" pos:column="28"/></name></expr></argument>)<pos:position pos:line="55" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="30"/></return>
    }<pos:position pos:line="56" pos:column="6"/></block></then>
    <else pos:line="57" pos:column="5">else <block pos:line="57" pos:column="10">{
      <decl_stmt><decl><type><name pos:line="58" pos:column="7">void<pos:position pos:line="58" pos:column="11"/></name><modifier pos:line="58" pos:column="11">*<pos:position pos:line="58" pos:column="12"/></modifier></type> <name pos:line="58" pos:column="13">newmem<pos:position pos:line="58" pos:column="19"/></name> <init pos:line="58" pos:column="20">= <expr><call><name pos:line="58" pos:column="22">internal_malloc<pos:position pos:line="58" pos:column="37"/></name><argument_list pos:line="58" pos:column="37">(<argument><expr><name pos:line="58" pos:column="38">m<pos:position pos:line="58" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="41">bytes<pos:position pos:line="58" pos:column="46"/></name></expr></argument>)<pos:position pos:line="58" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="58" pos:column="48"/></decl_stmt>
      <if pos:line="59" pos:column="7">if <condition pos:line="59" pos:column="10">(<expr><name pos:line="59" pos:column="11">newmem<pos:position pos:line="59" pos:column="17"/></name> <operator pos:line="59" pos:column="18">!=<pos:position pos:line="59" pos:column="20"/></operator> <literal type="number" pos:line="59" pos:column="21">0<pos:position pos:line="59" pos:column="22"/></literal></expr>)<pos:position pos:line="59" pos:column="23"/></condition><then pos:line="59" pos:column="23"> <block pos:line="59" pos:column="24">{
	<decl_stmt><decl><type><name pos:line="60" pos:column="9">size_t<pos:position pos:line="60" pos:column="15"/></name></type> <name pos:line="60" pos:column="16">oc<pos:position pos:line="60" pos:column="18"/></name> <init pos:line="60" pos:column="19">= <expr><name pos:line="60" pos:column="21">oldsize<pos:position pos:line="60" pos:column="28"/></name> <operator pos:line="60" pos:column="29">-<pos:position pos:line="60" pos:column="30"/></operator> <call><name pos:line="60" pos:column="31">overhead_for<pos:position pos:line="60" pos:column="43"/></name><argument_list pos:line="60" pos:column="43">(<argument><expr><name pos:line="60" pos:column="44">oldp<pos:position pos:line="60" pos:column="48"/></name></expr></argument>)<pos:position pos:line="60" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="60" pos:column="50"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">memcpy<pos:position pos:line="61" pos:column="15"/></name><argument_list pos:line="61" pos:column="15">(<argument><expr><name pos:line="61" pos:column="16">newmem<pos:position pos:line="61" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="24">oldmem<pos:position pos:line="61" pos:column="30"/></name></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="61" pos:column="32">(<pos:position pos:line="61" pos:column="33"/></operator><name pos:line="61" pos:column="33">oc<pos:position pos:line="61" pos:column="35"/></name> <operator pos:line="61" pos:column="36">&lt;<pos:position pos:line="61" pos:column="40"/></operator> <name pos:line="61" pos:column="38">bytes<pos:position pos:line="61" pos:column="43"/></name><operator pos:line="61" pos:column="43">)<pos:position pos:line="61" pos:column="44"/></operator></expr>?<pos:position pos:line="61" pos:column="45"/></condition><then pos:line="61" pos:column="45"> <expr><name pos:line="61" pos:column="46">oc<pos:position pos:line="61" pos:column="48"/></name></expr> <pos:position pos:line="61" pos:column="49"/></then><else pos:line="61" pos:column="49">: <expr><name pos:line="61" pos:column="51">bytes<pos:position pos:line="61" pos:column="56"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="61" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="58"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="62" pos:column="9">internal_free<pos:position pos:line="62" pos:column="22"/></name><argument_list pos:line="62" pos:column="22">(<argument><expr><name pos:line="62" pos:column="23">m<pos:position pos:line="62" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="26">oldmem<pos:position pos:line="62" pos:column="32"/></name></expr></argument>)<pos:position pos:line="62" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="34"/></expr_stmt>
      }<pos:position pos:line="63" pos:column="8"/></block></then></if>
      <return pos:line="64" pos:column="7">return <expr><name pos:line="64" pos:column="14">newmem<pos:position pos:line="64" pos:column="20"/></name></expr>;<pos:position pos:line="64" pos:column="21"/></return>
    }<pos:position pos:line="65" pos:column="6"/></block></else></if>
  }<pos:position pos:line="66" pos:column="4"/></block></then></if>
  <return pos:line="67" pos:column="3">return <expr><literal type="number" pos:line="67" pos:column="10">0<pos:position pos:line="67" pos:column="11"/></literal></expr>;<pos:position pos:line="67" pos:column="12"/></return>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
