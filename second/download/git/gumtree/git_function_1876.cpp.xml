<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1876.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">conclude_pack<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">int<pos:position pos:line="1" pos:column="30"/></name></type> <name pos:line="1" pos:column="31">fix_thin_pack<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">curr_pack<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="69">unsigned<pos:position pos:line="1" pos:column="77"/></name> <name pos:line="1" pos:column="78">char<pos:position pos:line="1" pos:column="82"/></name> <modifier pos:line="1" pos:column="83">*<pos:position pos:line="1" pos:column="84"/></modifier></type><name pos:line="1" pos:column="84">pack_sha1<pos:position pos:line="1" pos:column="93"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="94"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<if pos:line="3" pos:column="9">if <condition pos:line="3" pos:column="12">(<expr><name pos:line="3" pos:column="13">nr_deltas<pos:position pos:line="3" pos:column="22"/></name> <operator pos:line="3" pos:column="23">==<pos:position pos:line="3" pos:column="25"/></operator> <name pos:line="3" pos:column="26">nr_resolved_deltas<pos:position pos:line="3" pos:column="44"/></name></expr>)<pos:position pos:line="3" pos:column="45"/></condition><then pos:line="3" pos:column="45"> <block pos:line="3" pos:column="46">{
		<expr_stmt><expr><call><name pos:line="4" pos:column="17">stop_progress<pos:position pos:line="4" pos:column="30"/></name><argument_list pos:line="4" pos:column="30">(<argument><expr><operator pos:line="4" pos:column="31">&amp;<pos:position pos:line="4" pos:column="36"/></operator><name pos:line="4" pos:column="32">progress<pos:position pos:line="4" pos:column="40"/></name></expr></argument>)<pos:position pos:line="4" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="42"/></expr_stmt>
		<comment type="block" pos:line="5" pos:column="17">/* Flush remaining pack final 20-byte SHA1. */</comment>
		<expr_stmt><expr><call><name pos:line="6" pos:column="17">flush<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">()<pos:position pos:line="6" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="25"/></expr_stmt>
		<return pos:line="7" pos:column="17">return;<pos:position pos:line="7" pos:column="24"/></return>
	}<pos:position pos:line="8" pos:column="10"/></block></then></if>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">fix_thin_pack<pos:position pos:line="10" pos:column="26"/></name></expr>)<pos:position pos:line="10" pos:column="27"/></condition><then pos:line="10" pos:column="27"> <block pos:line="10" pos:column="28">{
		<decl_stmt><decl><type><name><name pos:line="11" pos:column="17">struct<pos:position pos:line="11" pos:column="23"/></name> <name pos:line="11" pos:column="24">sha1file<pos:position pos:line="11" pos:column="32"/></name></name> <modifier pos:line="11" pos:column="33">*<pos:position pos:line="11" pos:column="34"/></modifier></type><name pos:line="11" pos:column="34">f<pos:position pos:line="11" pos:column="35"/></name></decl>;<pos:position pos:line="11" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">unsigned<pos:position pos:line="12" pos:column="25"/></name> <name pos:line="12" pos:column="26">char<pos:position pos:line="12" pos:column="30"/></name></type> <name><name pos:line="12" pos:column="31">read_sha1<pos:position pos:line="12" pos:column="40"/></name><index pos:line="12" pos:column="40">[<expr><literal type="number" pos:line="12" pos:column="41">20<pos:position pos:line="12" pos:column="43"/></literal></expr>]<pos:position pos:line="12" pos:column="44"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="12" pos:column="46">tail_sha1<pos:position pos:line="12" pos:column="55"/></name><index pos:line="12" pos:column="55">[<expr><literal type="number" pos:line="12" pos:column="56">20<pos:position pos:line="12" pos:column="58"/></literal></expr>]<pos:position pos:line="12" pos:column="59"/></index></name></decl>;<pos:position pos:line="12" pos:column="60"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="13" pos:column="17">struct<pos:position pos:line="13" pos:column="23"/></name> <name pos:line="13" pos:column="24">strbuf<pos:position pos:line="13" pos:column="30"/></name></name></type> <name pos:line="13" pos:column="31">msg<pos:position pos:line="13" pos:column="34"/></name> <init pos:line="13" pos:column="35">= <expr><name pos:line="13" pos:column="37">STRBUF_INIT<pos:position pos:line="13" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="49"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">int<pos:position pos:line="14" pos:column="20"/></name></type> <name pos:line="14" pos:column="21">nr_unresolved<pos:position pos:line="14" pos:column="34"/></name> <init pos:line="14" pos:column="35">= <expr><name pos:line="14" pos:column="37">nr_deltas<pos:position pos:line="14" pos:column="46"/></name> <operator pos:line="14" pos:column="47">-<pos:position pos:line="14" pos:column="48"/></operator> <name pos:line="14" pos:column="49">nr_resolved_deltas<pos:position pos:line="14" pos:column="67"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="68"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="15" pos:column="17">int<pos:position pos:line="15" pos:column="20"/></name></type> <name pos:line="15" pos:column="21">nr_objects_initial<pos:position pos:line="15" pos:column="39"/></name> <init pos:line="15" pos:column="40">= <expr><name pos:line="15" pos:column="42">nr_objects<pos:position pos:line="15" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="53"/></decl_stmt>
		<if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">nr_unresolved<pos:position pos:line="16" pos:column="34"/></name> <operator pos:line="16" pos:column="35">&lt;=<pos:position pos:line="16" pos:column="40"/></operator> <literal type="number" pos:line="16" pos:column="38">0<pos:position pos:line="16" pos:column="39"/></literal></expr>)<pos:position pos:line="16" pos:column="40"/></condition><then pos:line="16" pos:column="40">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="25">die<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><call><name pos:line="17" pos:column="29">_<pos:position pos:line="17" pos:column="30"/></name><argument_list pos:line="17" pos:column="30">(<argument><expr><literal type="string" pos:line="17" pos:column="31">"confusion beyond insanity"<pos:position pos:line="17" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="61"/></expr_stmt></block></then></if>
		<expr_stmt><expr><call><name pos:line="18" pos:column="17">REALLOC_ARRAY<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><name pos:line="18" pos:column="31">objects<pos:position pos:line="18" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="40">nr_objects<pos:position pos:line="18" pos:column="50"/></name> <operator pos:line="18" pos:column="51">+<pos:position pos:line="18" pos:column="52"/></operator> <name pos:line="18" pos:column="53">nr_unresolved<pos:position pos:line="18" pos:column="66"/></name> <operator pos:line="18" pos:column="67">+<pos:position pos:line="18" pos:column="68"/></operator> <literal type="number" pos:line="18" pos:column="69">1<pos:position pos:line="18" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="72"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="19" pos:column="17">memset<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><name pos:line="19" pos:column="24">objects<pos:position pos:line="19" pos:column="31"/></name> <operator pos:line="19" pos:column="32">+<pos:position pos:line="19" pos:column="33"/></operator> <name pos:line="19" pos:column="34">nr_objects<pos:position pos:line="19" pos:column="44"/></name> <operator pos:line="19" pos:column="45">+<pos:position pos:line="19" pos:column="46"/></operator> <literal type="number" pos:line="19" pos:column="47">1<pos:position pos:line="19" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="50">0<pos:position pos:line="19" pos:column="51"/></literal></expr></argument>,
		       <argument><expr><name pos:line="20" pos:column="24">nr_unresolved<pos:position pos:line="20" pos:column="37"/></name> <operator pos:line="20" pos:column="38">*<pos:position pos:line="20" pos:column="39"/></operator> <sizeof pos:line="20" pos:column="40">sizeof<argument_list pos:line="20" pos:column="46">(<argument><expr><operator pos:line="20" pos:column="47">*<pos:position pos:line="20" pos:column="48"/></operator><name pos:line="20" pos:column="48">objects<pos:position pos:line="20" pos:column="55"/></name></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><name pos:line="21" pos:column="17">f<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <call><name pos:line="21" pos:column="21">sha1fd<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">output_fd<pos:position pos:line="21" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="39">curr_pack<pos:position pos:line="21" pos:column="48"/></name></expr></argument>)<pos:position pos:line="21" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="50"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="22" pos:column="17">fix_unresolved_deltas<pos:position pos:line="22" pos:column="38"/></name><argument_list pos:line="22" pos:column="38">(<argument><expr><name pos:line="22" pos:column="39">f<pos:position pos:line="22" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="42">nr_unresolved<pos:position pos:line="22" pos:column="55"/></name></expr></argument>)<pos:position pos:line="22" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="57"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">strbuf_addf<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><operator pos:line="23" pos:column="29">&amp;<pos:position pos:line="23" pos:column="34"/></operator><name pos:line="23" pos:column="30">msg<pos:position pos:line="23" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="35">_<pos:position pos:line="23" pos:column="36"/></name><argument_list pos:line="23" pos:column="36">(<argument><expr><literal type="string" pos:line="23" pos:column="37">"completed with %d local objects"<pos:position pos:line="23" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="71"/></argument_list></call></expr></argument>,
			    <argument><expr><name pos:line="24" pos:column="29">nr_objects<pos:position pos:line="24" pos:column="39"/></name> <operator pos:line="24" pos:column="40">-<pos:position pos:line="24" pos:column="41"/></operator> <name pos:line="24" pos:column="42">nr_objects_initial<pos:position pos:line="24" pos:column="60"/></name></expr></argument>)<pos:position pos:line="24" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="62"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">stop_progress_msg<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">(<argument><expr><operator pos:line="25" pos:column="35">&amp;<pos:position pos:line="25" pos:column="40"/></operator><name pos:line="25" pos:column="36">progress<pos:position pos:line="25" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="46">msg<pos:position pos:line="25" pos:column="49"/></name><operator pos:line="25" pos:column="49">.<pos:position pos:line="25" pos:column="50"/></operator><name pos:line="25" pos:column="50">buf<pos:position pos:line="25" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="55"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="26" pos:column="17">strbuf_release<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">(<argument><expr><operator pos:line="26" pos:column="32">&amp;<pos:position pos:line="26" pos:column="37"/></operator><name pos:line="26" pos:column="33">msg<pos:position pos:line="26" pos:column="36"/></name></expr></argument>)<pos:position pos:line="26" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="38"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="27" pos:column="17">sha1close<pos:position pos:line="27" pos:column="26"/></name><argument_list pos:line="27" pos:column="26">(<argument><expr><name pos:line="27" pos:column="27">f<pos:position pos:line="27" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="30">tail_sha1<pos:position pos:line="27" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="41">0<pos:position pos:line="27" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="44"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="28" pos:column="17">hashcpy<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">read_sha1<pos:position pos:line="28" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="36">pack_sha1<pos:position pos:line="28" pos:column="45"/></name></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="47"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="29" pos:column="17">fixup_pack_header_footer<pos:position pos:line="29" pos:column="41"/></name><argument_list pos:line="29" pos:column="41">(<argument><expr><name pos:line="29" pos:column="42">output_fd<pos:position pos:line="29" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="53">pack_sha1<pos:position pos:line="29" pos:column="62"/></name></expr></argument>,
					 <argument><expr><name pos:line="30" pos:column="42">curr_pack<pos:position pos:line="30" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="53">nr_objects<pos:position pos:line="30" pos:column="63"/></name></expr></argument>,
					 <argument><expr><name pos:line="31" pos:column="42">read_sha1<pos:position pos:line="31" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="53">consumed_bytes<pos:position pos:line="31" pos:column="67"/></name><operator pos:line="31" pos:column="67">-<pos:position pos:line="31" pos:column="68"/></operator><literal type="number" pos:line="31" pos:column="68">20<pos:position pos:line="31" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="72"/></expr_stmt>
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><call><name pos:line="32" pos:column="21">hashcmp<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><name pos:line="32" pos:column="29">read_sha1<pos:position pos:line="32" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="40">tail_sha1<pos:position pos:line="32" pos:column="49"/></name></expr></argument>)<pos:position pos:line="32" pos:column="50"/></argument_list></call> <operator pos:line="32" pos:column="51">!=<pos:position pos:line="32" pos:column="53"/></operator> <literal type="number" pos:line="32" pos:column="54">0<pos:position pos:line="32" pos:column="55"/></literal></expr>)<pos:position pos:line="32" pos:column="56"/></condition><then pos:line="32" pos:column="56">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="25">die<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><call><name pos:line="33" pos:column="29">_<pos:position pos:line="33" pos:column="30"/></name><argument_list pos:line="33" pos:column="30">(<argument><expr><literal type="string" pos:line="33" pos:column="31">"Unexpected tail checksum for %s "<pos:position pos:line="33" pos:column="65"/></literal>
			      <literal type="string" pos:line="34" pos:column="31">"(disk corruption?)"<pos:position pos:line="34" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="34" pos:column="54">curr_pack<pos:position pos:line="34" pos:column="63"/></name></expr></argument>)<pos:position pos:line="34" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="65"/></expr_stmt></block></then></if>
	}<pos:position pos:line="35" pos:column="10"/></block></then></if>
	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">nr_deltas<pos:position pos:line="36" pos:column="22"/></name> <operator pos:line="36" pos:column="23">!=<pos:position pos:line="36" pos:column="25"/></operator> <name pos:line="36" pos:column="26">nr_resolved_deltas<pos:position pos:line="36" pos:column="44"/></name></expr>)<pos:position pos:line="36" pos:column="45"/></condition><then pos:line="36" pos:column="45">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="17">die<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><call><name pos:line="37" pos:column="21">Q_<pos:position pos:line="37" pos:column="23"/></name><argument_list pos:line="37" pos:column="23">(<argument><expr><literal type="string" pos:line="37" pos:column="24">"pack has %d unresolved delta"<pos:position pos:line="37" pos:column="54"/></literal></expr></argument>,
		       <argument><expr><literal type="string" pos:line="38" pos:column="24">"pack has %d unresolved deltas"<pos:position pos:line="38" pos:column="55"/></literal></expr></argument>,
		       <argument><expr><name pos:line="39" pos:column="24">nr_deltas<pos:position pos:line="39" pos:column="33"/></name> <operator pos:line="39" pos:column="34">-<pos:position pos:line="39" pos:column="35"/></operator> <name pos:line="39" pos:column="36">nr_resolved_deltas<pos:position pos:line="39" pos:column="54"/></name></expr></argument>)<pos:position pos:line="39" pos:column="55"/></argument_list></call></expr></argument>,
		    <argument><expr><name pos:line="40" pos:column="21">nr_deltas<pos:position pos:line="40" pos:column="30"/></name> <operator pos:line="40" pos:column="31">-<pos:position pos:line="40" pos:column="32"/></operator> <name pos:line="40" pos:column="33">nr_resolved_deltas<pos:position pos:line="40" pos:column="51"/></name></expr></argument>)<pos:position pos:line="40" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="53"/></expr_stmt></block></then></if>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
