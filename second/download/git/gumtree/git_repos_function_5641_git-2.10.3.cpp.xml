<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5641_git-2.10.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">rm<pos:position pos:line="1" pos:column="14"/></name><parameter_list pos:line="1" pos:column="14">(<parameter><decl><type><name pos:line="1" pos:column="15">int<pos:position pos:line="1" pos:column="18"/></name></type> <name pos:line="1" pos:column="19">argc<pos:position pos:line="1" pos:column="23"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="25">const<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier><modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">argv<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">option<pos:position pos:line="3" pos:column="22"/></name></name></type> <name><name pos:line="3" pos:column="23">options<pos:position pos:line="3" pos:column="30"/></name><index pos:line="3" pos:column="30">[]<pos:position pos:line="3" pos:column="32"/></index></name> <init pos:line="3" pos:column="33">= <expr><block pos:line="3" pos:column="35">{
		<macro><name pos:line="4" pos:column="17">OPT_END<pos:position pos:line="4" pos:column="24"/></name><argument_list pos:line="4" pos:column="24">()<pos:position pos:line="4" pos:column="26"/></argument_list></macro>
	}<pos:position pos:line="5" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">remote<pos:position pos:line="6" pos:column="22"/></name></name> <modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></type><name pos:line="6" pos:column="24">remote<pos:position pos:line="6" pos:column="30"/></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">strbuf<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">buf<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><name pos:line="7" pos:column="29">STRBUF_INIT<pos:position pos:line="7" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="41"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">known_remotes<pos:position pos:line="8" pos:column="29"/></name></name></type> <name pos:line="8" pos:column="30">known_remotes<pos:position pos:line="8" pos:column="43"/></name> <init pos:line="8" pos:column="44">= <expr><block pos:line="8" pos:column="46">{ <expr><name pos:line="8" pos:column="48">NULL<pos:position pos:line="8" pos:column="52"/></name></expr>, <expr><name pos:line="8" pos:column="54">NULL<pos:position pos:line="8" pos:column="58"/></name></expr> }<pos:position pos:line="8" pos:column="60"/></block></expr></init></decl>;<pos:position pos:line="8" pos:column="61"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="9" pos:column="9">struct<pos:position pos:line="9" pos:column="15"/></name> <name pos:line="9" pos:column="16">string_list<pos:position pos:line="9" pos:column="27"/></name></name></type> <name pos:line="9" pos:column="28">branches<pos:position pos:line="9" pos:column="36"/></name> <init pos:line="9" pos:column="37">= <expr><name pos:line="9" pos:column="39">STRING_LIST_INIT_DUP<pos:position pos:line="9" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="60"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="10" pos:column="9">struct<pos:position pos:line="10" pos:column="15"/></name> <name pos:line="10" pos:column="16">string_list<pos:position pos:line="10" pos:column="27"/></name></name></type> <name pos:line="10" pos:column="28">skipped<pos:position pos:line="10" pos:column="35"/></name> <init pos:line="10" pos:column="36">= <expr><name pos:line="10" pos:column="38">STRING_LIST_INIT_DUP<pos:position pos:line="10" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="59"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">branches_for_remote<pos:position pos:line="11" pos:column="35"/></name></name></type> <name pos:line="11" pos:column="36">cb_data<pos:position pos:line="11" pos:column="43"/></name></decl>;<pos:position pos:line="11" pos:column="44"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">i<pos:position pos:line="12" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="12" pos:column="16">result<pos:position pos:line="12" pos:column="22"/></name></decl>;<pos:position pos:line="12" pos:column="23"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">memset<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><operator pos:line="14" pos:column="16">&amp;<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="17">cb_data<pos:position pos:line="14" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="26">0<pos:position pos:line="14" pos:column="27"/></literal></expr></argument>, <argument><expr><sizeof pos:line="14" pos:column="29">sizeof<argument_list pos:line="14" pos:column="35">(<argument><expr><name pos:line="14" pos:column="36">cb_data<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="14" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="15" pos:column="9">cb_data<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">.<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">branches<pos:position pos:line="15" pos:column="25"/></name></name> <operator pos:line="15" pos:column="26">=<pos:position pos:line="15" pos:column="27"/></operator> <operator pos:line="15" pos:column="28">&amp;<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="29">branches<pos:position pos:line="15" pos:column="37"/></name></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="16" pos:column="9">cb_data<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">.<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="17">skipped<pos:position pos:line="16" pos:column="24"/></name></name> <operator pos:line="16" pos:column="25">=<pos:position pos:line="16" pos:column="26"/></operator> <operator pos:line="16" pos:column="27">&amp;<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="28">skipped<pos:position pos:line="16" pos:column="35"/></name></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="17" pos:column="9">cb_data<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">.<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">keep<pos:position pos:line="17" pos:column="21"/></name></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <operator pos:line="17" pos:column="24">&amp;<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="25">known_remotes<pos:position pos:line="17" pos:column="38"/></name></expr>;<pos:position pos:line="17" pos:column="39"/></expr_stmt>

	<if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">argc<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">!=<pos:position pos:line="19" pos:column="20"/></operator> <literal type="number" pos:line="19" pos:column="21">2<pos:position pos:line="19" pos:column="22"/></literal></expr>)<pos:position pos:line="19" pos:column="23"/></condition><then pos:line="19" pos:column="23">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="17">usage_with_options<pos:position pos:line="20" pos:column="35"/></name><argument_list pos:line="20" pos:column="35">(<argument><expr><name pos:line="20" pos:column="36">builtin_remote_rm_usage<pos:position pos:line="20" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="61">options<pos:position pos:line="20" pos:column="68"/></name></expr></argument>)<pos:position pos:line="20" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="70"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name pos:line="22" pos:column="9">remote<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <call><name pos:line="22" pos:column="18">remote_get<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><name><name pos:line="22" pos:column="29">argv<pos:position pos:line="22" pos:column="33"/></name><index pos:line="22" pos:column="33">[<expr><literal type="number" pos:line="22" pos:column="34">1<pos:position pos:line="22" pos:column="35"/></literal></expr>]<pos:position pos:line="22" pos:column="36"/></index></name></expr></argument>)<pos:position pos:line="22" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="38"/></expr_stmt>
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">!<pos:position pos:line="23" pos:column="14"/></operator><call><name pos:line="23" pos:column="14">remote_is_configured<pos:position pos:line="23" pos:column="34"/></name><argument_list pos:line="23" pos:column="34">(<argument><expr><name pos:line="23" pos:column="35">remote<pos:position pos:line="23" pos:column="41"/></name></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="43"/></condition><then pos:line="23" pos:column="43">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="17">die<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><call><name pos:line="24" pos:column="21">_<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><literal type="string" pos:line="24" pos:column="23">"No such remote: %s"<pos:position pos:line="24" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="46">argv<pos:position pos:line="24" pos:column="50"/></name><index pos:line="24" pos:column="50">[<expr><literal type="number" pos:line="24" pos:column="51">1<pos:position pos:line="24" pos:column="52"/></literal></expr>]<pos:position pos:line="24" pos:column="53"/></index></name></expr></argument>)<pos:position pos:line="24" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="55"/></expr_stmt></block></then></if>

	<expr_stmt><expr><name><name pos:line="26" pos:column="9">known_remotes<pos:position pos:line="26" pos:column="22"/></name><operator pos:line="26" pos:column="22">.<pos:position pos:line="26" pos:column="23"/></operator><name pos:line="26" pos:column="23">to_delete<pos:position pos:line="26" pos:column="32"/></name></name> <operator pos:line="26" pos:column="33">=<pos:position pos:line="26" pos:column="34"/></operator> <name pos:line="26" pos:column="35">remote<pos:position pos:line="26" pos:column="41"/></name></expr>;<pos:position pos:line="26" pos:column="42"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">for_each_remote<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><name pos:line="27" pos:column="25">add_known_remote<pos:position pos:line="27" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="43">&amp;<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="44">known_remotes<pos:position pos:line="27" pos:column="57"/></name></expr></argument>)<pos:position pos:line="27" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="59"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="29" pos:column="9">read_branches<pos:position pos:line="29" pos:column="22"/></name><argument_list pos:line="29" pos:column="22">()<pos:position pos:line="29" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="25"/></expr_stmt>
	<for pos:line="30" pos:column="9">for <control pos:line="30" pos:column="13">(<init><expr><name pos:line="30" pos:column="14">i<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <literal type="number" pos:line="30" pos:column="18">0<pos:position pos:line="30" pos:column="19"/></literal></expr>;<pos:position pos:line="30" pos:column="20"/></init> <condition><expr><name pos:line="30" pos:column="21">i<pos:position pos:line="30" pos:column="22"/></name> <operator pos:line="30" pos:column="23">&lt;<pos:position pos:line="30" pos:column="27"/></operator> <name><name pos:line="30" pos:column="25">branch_list<pos:position pos:line="30" pos:column="36"/></name><operator pos:line="30" pos:column="36">.<pos:position pos:line="30" pos:column="37"/></operator><name pos:line="30" pos:column="37">nr<pos:position pos:line="30" pos:column="39"/></name></name></expr>;<pos:position pos:line="30" pos:column="40"/></condition> <incr><expr><name pos:line="30" pos:column="41">i<pos:position pos:line="30" pos:column="42"/></name><operator pos:line="30" pos:column="42">++<pos:position pos:line="30" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="30" pos:column="45"/></control> <block pos:line="30" pos:column="46">{
		<decl_stmt><decl><type><name><name pos:line="31" pos:column="17">struct<pos:position pos:line="31" pos:column="23"/></name> <name pos:line="31" pos:column="24">string_list_item<pos:position pos:line="31" pos:column="40"/></name></name> <modifier pos:line="31" pos:column="41">*<pos:position pos:line="31" pos:column="42"/></modifier></type><name pos:line="31" pos:column="42">item<pos:position pos:line="31" pos:column="46"/></name> <init pos:line="31" pos:column="47">= <expr><name><name pos:line="31" pos:column="49">branch_list<pos:position pos:line="31" pos:column="60"/></name><operator pos:line="31" pos:column="60">.<pos:position pos:line="31" pos:column="61"/></operator><name pos:line="31" pos:column="61">items<pos:position pos:line="31" pos:column="66"/></name></name> <operator pos:line="31" pos:column="67">+<pos:position pos:line="31" pos:column="68"/></operator> <name pos:line="31" pos:column="69">i<pos:position pos:line="31" pos:column="70"/></name></expr></init></decl>;<pos:position pos:line="31" pos:column="71"/></decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="32" pos:column="17">struct<pos:position pos:line="32" pos:column="23"/></name> <name pos:line="32" pos:column="24">branch_info<pos:position pos:line="32" pos:column="35"/></name></name> <modifier pos:line="32" pos:column="36">*<pos:position pos:line="32" pos:column="37"/></modifier></type><name pos:line="32" pos:column="37">info<pos:position pos:line="32" pos:column="41"/></name> <init pos:line="32" pos:column="42">= <expr><name><name pos:line="32" pos:column="44">item<pos:position pos:line="32" pos:column="48"/></name><operator pos:line="32" pos:column="48">-&gt;<pos:position pos:line="32" pos:column="53"/></operator><name pos:line="32" pos:column="50">util<pos:position pos:line="32" pos:column="54"/></name></name></expr></init></decl>;<pos:position pos:line="32" pos:column="55"/></decl_stmt>
		<if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name><name pos:line="33" pos:column="21">info<pos:position pos:line="33" pos:column="25"/></name><operator pos:line="33" pos:column="25">-&gt;<pos:position pos:line="33" pos:column="30"/></operator><name pos:line="33" pos:column="27">remote_name<pos:position pos:line="33" pos:column="38"/></name></name> <operator pos:line="33" pos:column="39">&amp;&amp;<pos:position pos:line="33" pos:column="49"/></operator> <operator pos:line="33" pos:column="42">!<pos:position pos:line="33" pos:column="43"/></operator><call><name pos:line="33" pos:column="43">strcmp<pos:position pos:line="33" pos:column="49"/></name><argument_list pos:line="33" pos:column="49">(<argument><expr><name><name pos:line="33" pos:column="50">info<pos:position pos:line="33" pos:column="54"/></name><operator pos:line="33" pos:column="54">-&gt;<pos:position pos:line="33" pos:column="59"/></operator><name pos:line="33" pos:column="56">remote_name<pos:position pos:line="33" pos:column="67"/></name></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="69">remote<pos:position pos:line="33" pos:column="75"/></name><operator pos:line="33" pos:column="75">-&gt;<pos:position pos:line="33" pos:column="80"/></operator><name pos:line="33" pos:column="77">name<pos:position pos:line="33" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="82"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="83"/></condition><then pos:line="33" pos:column="83"> <block pos:line="33" pos:column="84">{
			<decl_stmt><decl><type><specifier pos:line="34" pos:column="25">const<pos:position pos:line="34" pos:column="30"/></specifier> <name pos:line="34" pos:column="31">char<pos:position pos:line="34" pos:column="35"/></name> <modifier pos:line="34" pos:column="36">*<pos:position pos:line="34" pos:column="37"/></modifier></type><name><name pos:line="34" pos:column="37">keys<pos:position pos:line="34" pos:column="41"/></name><index pos:line="34" pos:column="41">[]<pos:position pos:line="34" pos:column="43"/></index></name> <init pos:line="34" pos:column="44">= <expr><block pos:line="34" pos:column="46">{ <expr><literal type="string" pos:line="34" pos:column="48">"remote"<pos:position pos:line="34" pos:column="56"/></literal></expr>, <expr><literal type="string" pos:line="34" pos:column="58">"merge"<pos:position pos:line="34" pos:column="65"/></literal></expr>, <expr><name pos:line="34" pos:column="67">NULL<pos:position pos:line="34" pos:column="71"/></name></expr> }<pos:position pos:line="34" pos:column="73"/></block></expr></init></decl>, <modifier pos:line="34" pos:column="75">*<pos:position pos:line="34" pos:column="76"/></modifier><modifier pos:line="34" pos:column="76">*<pos:position pos:line="34" pos:column="77"/></modifier><decl><type ref="prev"/><name pos:line="34" pos:column="77">k<pos:position pos:line="34" pos:column="78"/></name></decl>;<pos:position pos:line="34" pos:column="79"/></decl_stmt>
			<for pos:line="35" pos:column="25">for <control pos:line="35" pos:column="29">(<init><expr><name pos:line="35" pos:column="30">k<pos:position pos:line="35" pos:column="31"/></name> <operator pos:line="35" pos:column="32">=<pos:position pos:line="35" pos:column="33"/></operator> <name pos:line="35" pos:column="34">keys<pos:position pos:line="35" pos:column="38"/></name></expr>;<pos:position pos:line="35" pos:column="39"/></init> <condition><expr><operator pos:line="35" pos:column="40">*<pos:position pos:line="35" pos:column="41"/></operator><name pos:line="35" pos:column="41">k<pos:position pos:line="35" pos:column="42"/></name></expr>;<pos:position pos:line="35" pos:column="43"/></condition> <incr><expr><name pos:line="35" pos:column="44">k<pos:position pos:line="35" pos:column="45"/></name><operator pos:line="35" pos:column="45">++<pos:position pos:line="35" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="35" pos:column="48"/></control> <block pos:line="35" pos:column="49">{
				<expr_stmt><expr><call><name pos:line="36" pos:column="33">strbuf_reset<pos:position pos:line="36" pos:column="45"/></name><argument_list pos:line="36" pos:column="45">(<argument><expr><operator pos:line="36" pos:column="46">&amp;<pos:position pos:line="36" pos:column="51"/></operator><name pos:line="36" pos:column="47">buf<pos:position pos:line="36" pos:column="50"/></name></expr></argument>)<pos:position pos:line="36" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="52"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="37" pos:column="33">strbuf_addf<pos:position pos:line="37" pos:column="44"/></name><argument_list pos:line="37" pos:column="44">(<argument><expr><operator pos:line="37" pos:column="45">&amp;<pos:position pos:line="37" pos:column="50"/></operator><name pos:line="37" pos:column="46">buf<pos:position pos:line="37" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="51">"branch.%s.%s"<pos:position pos:line="37" pos:column="65"/></literal></expr></argument>,
						<argument><expr><name><name pos:line="38" pos:column="49">item<pos:position pos:line="38" pos:column="53"/></name><operator pos:line="38" pos:column="53">-&gt;<pos:position pos:line="38" pos:column="58"/></operator><name pos:line="38" pos:column="55">string<pos:position pos:line="38" pos:column="61"/></name></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="63">*<pos:position pos:line="38" pos:column="64"/></operator><name pos:line="38" pos:column="64">k<pos:position pos:line="38" pos:column="65"/></name></expr></argument>)<pos:position pos:line="38" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="67"/></expr_stmt>
				<expr_stmt><expr><call><name pos:line="39" pos:column="33">git_config_set<pos:position pos:line="39" pos:column="47"/></name><argument_list pos:line="39" pos:column="47">(<argument><expr><name><name pos:line="39" pos:column="48">buf<pos:position pos:line="39" pos:column="51"/></name><operator pos:line="39" pos:column="51">.<pos:position pos:line="39" pos:column="52"/></operator><name pos:line="39" pos:column="52">buf<pos:position pos:line="39" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="57">NULL<pos:position pos:line="39" pos:column="61"/></name></expr></argument>)<pos:position pos:line="39" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="63"/></expr_stmt>
			}<pos:position pos:line="40" pos:column="26"/></block></for>
		}<pos:position pos:line="41" pos:column="18"/></block></then></if>
	}<pos:position pos:line="42" pos:column="10"/></block></for>

	<comment type="block" pos:line="44" pos:column="9">/*
	 * We cannot just pass a function to for_each_ref() which deletes
	 * the branches one by one, since for_each_ref() relies on cached
	 * refs, which are invalidated when deleting a branch.
	 */</comment>
	<expr_stmt><expr><name><name pos:line="49" pos:column="9">cb_data<pos:position pos:line="49" pos:column="16"/></name><operator pos:line="49" pos:column="16">.<pos:position pos:line="49" pos:column="17"/></operator><name pos:line="49" pos:column="17">remote<pos:position pos:line="49" pos:column="23"/></name></name> <operator pos:line="49" pos:column="24">=<pos:position pos:line="49" pos:column="25"/></operator> <name pos:line="49" pos:column="26">remote<pos:position pos:line="49" pos:column="32"/></name></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt>
	<expr_stmt><expr><name pos:line="50" pos:column="9">result<pos:position pos:line="50" pos:column="15"/></name> <operator pos:line="50" pos:column="16">=<pos:position pos:line="50" pos:column="17"/></operator> <call><name pos:line="50" pos:column="18">for_each_ref<pos:position pos:line="50" pos:column="30"/></name><argument_list pos:line="50" pos:column="30">(<argument><expr><name pos:line="50" pos:column="31">add_branch_for_removal<pos:position pos:line="50" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="55">&amp;<pos:position pos:line="50" pos:column="60"/></operator><name pos:line="50" pos:column="56">cb_data<pos:position pos:line="50" pos:column="63"/></name></expr></argument>)<pos:position pos:line="50" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="65"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="51" pos:column="9">strbuf_release<pos:position pos:line="51" pos:column="23"/></name><argument_list pos:line="51" pos:column="23">(<argument><expr><operator pos:line="51" pos:column="24">&amp;<pos:position pos:line="51" pos:column="29"/></operator><name pos:line="51" pos:column="25">buf<pos:position pos:line="51" pos:column="28"/></name></expr></argument>)<pos:position pos:line="51" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="30"/></expr_stmt>

	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><operator pos:line="53" pos:column="13">!<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="14">result<pos:position pos:line="53" pos:column="20"/></name></expr>)<pos:position pos:line="53" pos:column="21"/></condition><then pos:line="53" pos:column="21">
		<block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="17">result<pos:position pos:line="54" pos:column="23"/></name> <operator pos:line="54" pos:column="24">=<pos:position pos:line="54" pos:column="25"/></operator> <call><name pos:line="54" pos:column="26">delete_refs<pos:position pos:line="54" pos:column="37"/></name><argument_list pos:line="54" pos:column="37">(<argument><expr><operator pos:line="54" pos:column="38">&amp;<pos:position pos:line="54" pos:column="43"/></operator><name pos:line="54" pos:column="39">branches<pos:position pos:line="54" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="49">REF_NODEREF<pos:position pos:line="54" pos:column="60"/></name></expr></argument>)<pos:position pos:line="54" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="62"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="55" pos:column="9">string_list_clear<pos:position pos:line="55" pos:column="26"/></name><argument_list pos:line="55" pos:column="26">(<argument><expr><operator pos:line="55" pos:column="27">&amp;<pos:position pos:line="55" pos:column="32"/></operator><name pos:line="55" pos:column="28">branches<pos:position pos:line="55" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="38">0<pos:position pos:line="55" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="41"/></expr_stmt>

	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name><name pos:line="57" pos:column="13">skipped<pos:position pos:line="57" pos:column="20"/></name><operator pos:line="57" pos:column="20">.<pos:position pos:line="57" pos:column="21"/></operator><name pos:line="57" pos:column="21">nr<pos:position pos:line="57" pos:column="23"/></name></name></expr>)<pos:position pos:line="57" pos:column="24"/></condition><then pos:line="57" pos:column="24"> <block pos:line="57" pos:column="25">{
		<expr_stmt><expr><call><name pos:line="58" pos:column="17">fprintf_ln<pos:position pos:line="58" pos:column="27"/></name><argument_list pos:line="58" pos:column="27">(<argument><expr><name pos:line="58" pos:column="28">stderr<pos:position pos:line="58" pos:column="34"/></name></expr></argument>,
			   <argument><expr><call><name pos:line="59" pos:column="28">Q_<pos:position pos:line="59" pos:column="30"/></name><argument_list pos:line="59" pos:column="30">(<argument><expr><literal type="string" pos:line="59" pos:column="31">"Note: A branch outside the refs/remotes/ hierarchy was not removed;\n"<pos:position pos:line="59" pos:column="102"/></literal>
			      <literal type="string" pos:line="60" pos:column="31">"to delete it, use:"<pos:position pos:line="60" pos:column="51"/></literal></expr></argument>,
			      <argument><expr><literal type="string" pos:line="61" pos:column="31">"Note: Some branches outside the refs/remotes/ hierarchy were not removed;\n"<pos:position pos:line="61" pos:column="108"/></literal>
			      <literal type="string" pos:line="62" pos:column="31">"to delete them, use:"<pos:position pos:line="62" pos:column="53"/></literal></expr></argument>,
			      <argument><expr><name><name pos:line="63" pos:column="31">skipped<pos:position pos:line="63" pos:column="38"/></name><operator pos:line="63" pos:column="38">.<pos:position pos:line="63" pos:column="39"/></operator><name pos:line="63" pos:column="39">nr<pos:position pos:line="63" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="44"/></expr_stmt>
		<for pos:line="64" pos:column="17">for <control pos:line="64" pos:column="21">(<init><expr><name pos:line="64" pos:column="22">i<pos:position pos:line="64" pos:column="23"/></name> <operator pos:line="64" pos:column="24">=<pos:position pos:line="64" pos:column="25"/></operator> <literal type="number" pos:line="64" pos:column="26">0<pos:position pos:line="64" pos:column="27"/></literal></expr>;<pos:position pos:line="64" pos:column="28"/></init> <condition><expr><name pos:line="64" pos:column="29">i<pos:position pos:line="64" pos:column="30"/></name> <operator pos:line="64" pos:column="31">&lt;<pos:position pos:line="64" pos:column="35"/></operator> <name><name pos:line="64" pos:column="33">skipped<pos:position pos:line="64" pos:column="40"/></name><operator pos:line="64" pos:column="40">.<pos:position pos:line="64" pos:column="41"/></operator><name pos:line="64" pos:column="41">nr<pos:position pos:line="64" pos:column="43"/></name></name></expr>;<pos:position pos:line="64" pos:column="44"/></condition> <incr><expr><name pos:line="64" pos:column="45">i<pos:position pos:line="64" pos:column="46"/></name><operator pos:line="64" pos:column="46">++<pos:position pos:line="64" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="64" pos:column="49"/></control>
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="25">fprintf<pos:position pos:line="65" pos:column="32"/></name><argument_list pos:line="65" pos:column="32">(<argument><expr><name pos:line="65" pos:column="33">stderr<pos:position pos:line="65" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="41">"  git branch -d %s\n"<pos:position pos:line="65" pos:column="63"/></literal></expr></argument>,
				<argument><expr><name><name pos:line="66" pos:column="33">skipped<pos:position pos:line="66" pos:column="40"/></name><operator pos:line="66" pos:column="40">.<pos:position pos:line="66" pos:column="41"/></operator><name pos:line="66" pos:column="41">items<pos:position pos:line="66" pos:column="46"/></name><index pos:line="66" pos:column="46">[<expr><name pos:line="66" pos:column="47">i<pos:position pos:line="66" pos:column="48"/></name></expr>]<pos:position pos:line="66" pos:column="49"/></index></name><operator pos:line="66" pos:column="49">.<pos:position pos:line="66" pos:column="50"/></operator><name pos:line="66" pos:column="50">string<pos:position pos:line="66" pos:column="56"/></name></expr></argument>)<pos:position pos:line="66" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="58"/></expr_stmt></block></for>
	}<pos:position pos:line="67" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="68" pos:column="9">string_list_clear<pos:position pos:line="68" pos:column="26"/></name><argument_list pos:line="68" pos:column="26">(<argument><expr><operator pos:line="68" pos:column="27">&amp;<pos:position pos:line="68" pos:column="32"/></operator><name pos:line="68" pos:column="28">skipped<pos:position pos:line="68" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="37">0<pos:position pos:line="68" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="40"/></expr_stmt>

	<if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><operator pos:line="70" pos:column="13">!<pos:position pos:line="70" pos:column="14"/></operator><name pos:line="70" pos:column="14">result<pos:position pos:line="70" pos:column="20"/></name></expr>)<pos:position pos:line="70" pos:column="21"/></condition><then pos:line="70" pos:column="21"> <block pos:line="70" pos:column="22">{
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">strbuf_addf<pos:position pos:line="71" pos:column="28"/></name><argument_list pos:line="71" pos:column="28">(<argument><expr><operator pos:line="71" pos:column="29">&amp;<pos:position pos:line="71" pos:column="34"/></operator><name pos:line="71" pos:column="30">buf<pos:position pos:line="71" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="35">"remote.%s"<pos:position pos:line="71" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="48">remote<pos:position pos:line="71" pos:column="54"/></name><operator pos:line="71" pos:column="54">-&gt;<pos:position pos:line="71" pos:column="59"/></operator><name pos:line="71" pos:column="56">name<pos:position pos:line="71" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="62"/></expr_stmt>
		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><call><name pos:line="72" pos:column="21">git_config_rename_section<pos:position pos:line="72" pos:column="46"/></name><argument_list pos:line="72" pos:column="46">(<argument><expr><name><name pos:line="72" pos:column="47">buf<pos:position pos:line="72" pos:column="50"/></name><operator pos:line="72" pos:column="50">.<pos:position pos:line="72" pos:column="51"/></operator><name pos:line="72" pos:column="51">buf<pos:position pos:line="72" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="56">NULL<pos:position pos:line="72" pos:column="60"/></name></expr></argument>)<pos:position pos:line="72" pos:column="61"/></argument_list></call> <operator pos:line="72" pos:column="62">&lt;<pos:position pos:line="72" pos:column="66"/></operator> <literal type="number" pos:line="72" pos:column="64">1<pos:position pos:line="72" pos:column="65"/></literal></expr>)<pos:position pos:line="72" pos:column="66"/></condition><then pos:line="72" pos:column="66">
			<block type="pseudo"><return pos:line="73" pos:column="25">return <expr><call><name pos:line="73" pos:column="32">error<pos:position pos:line="73" pos:column="37"/></name><argument_list pos:line="73" pos:column="37">(<argument><expr><call><name pos:line="73" pos:column="38">_<pos:position pos:line="73" pos:column="39"/></name><argument_list pos:line="73" pos:column="39">(<argument><expr><literal type="string" pos:line="73" pos:column="40">"Could not remove config section '%s'"<pos:position pos:line="73" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="79"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="73" pos:column="81">buf<pos:position pos:line="73" pos:column="84"/></name><operator pos:line="73" pos:column="84">.<pos:position pos:line="73" pos:column="85"/></operator><name pos:line="73" pos:column="85">buf<pos:position pos:line="73" pos:column="88"/></name></name></expr></argument>)<pos:position pos:line="73" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="90"/></return></block></then></if>
	}<pos:position pos:line="74" pos:column="10"/></block></then></if>

	<return pos:line="76" pos:column="9">return <expr><name pos:line="76" pos:column="16">result<pos:position pos:line="76" pos:column="22"/></name></expr>;<pos:position pos:line="76" pos:column="23"/></return>
}<pos:position pos:line="77" pos:column="2"/></block></function></unit>
