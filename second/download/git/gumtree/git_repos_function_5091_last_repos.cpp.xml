<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_5091_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier><modifier pos:line="1" pos:column="20">*<pos:position pos:line="1" pos:column="21"/></modifier></type><name pos:line="1" pos:column="21">internal_prefix_pathspec<pos:position pos:line="1" pos:column="45"/></name><parameter_list pos:line="1" pos:column="45">(<parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">prefix<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
					     <parameter><decl><type><specifier pos:line="2" pos:column="46">const<pos:position pos:line="2" pos:column="51"/></specifier> <name pos:line="2" pos:column="52">char<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier><modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">pathspec<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>,
					     <parameter><decl><type><name pos:line="3" pos:column="46">int<pos:position pos:line="3" pos:column="49"/></name></type> <name pos:line="3" pos:column="50">count<pos:position pos:line="3" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="57">unsigned<pos:position pos:line="3" pos:column="65"/></name></type> <name pos:line="3" pos:column="66">flags<pos:position pos:line="3" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="72"/></parameter_list>
<block pos:line="4" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">int<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">i<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier><modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">result<pos:position pos:line="6" pos:column="28"/></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">prefixlen<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><ternary><condition><expr><name pos:line="7" pos:column="25">prefix<pos:position pos:line="7" pos:column="31"/></name></expr> ?<pos:position pos:line="7" pos:column="33"/></condition><then pos:line="7" pos:column="33"> <expr><call><name pos:line="7" pos:column="34">strlen<pos:position pos:line="7" pos:column="40"/></name><argument_list pos:line="7" pos:column="40">(<argument><expr><name pos:line="7" pos:column="41">prefix<pos:position pos:line="7" pos:column="47"/></name></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call></expr> <pos:position pos:line="7" pos:column="49"/></then><else pos:line="7" pos:column="49">: <expr><literal type="number" pos:line="7" pos:column="51">0<pos:position pos:line="7" pos:column="52"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="7" pos:column="53"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">ALLOC_ARRAY<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name pos:line="8" pos:column="21">result<pos:position pos:line="8" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="29">count<pos:position pos:line="8" pos:column="34"/></name> <operator pos:line="8" pos:column="35">+<pos:position pos:line="8" pos:column="36"/></operator> <literal type="number" pos:line="8" pos:column="37">1<pos:position pos:line="8" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="40"/></expr_stmt>

	<comment type="block" pos:line="10" pos:column="9">/* Create an intermediate copy of the pathspec based on the flags */</comment>
	<for pos:line="11" pos:column="9">for <control pos:line="11" pos:column="13">(<init><expr><name pos:line="11" pos:column="14">i<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <literal type="number" pos:line="11" pos:column="18">0<pos:position pos:line="11" pos:column="19"/></literal></expr>;<pos:position pos:line="11" pos:column="20"/></init> <condition><expr><name pos:line="11" pos:column="21">i<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">&lt;<pos:position pos:line="11" pos:column="27"/></operator> <name pos:line="11" pos:column="25">count<pos:position pos:line="11" pos:column="30"/></name></expr>;<pos:position pos:line="11" pos:column="31"/></condition> <incr><expr><name pos:line="11" pos:column="32">i<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">++<pos:position pos:line="11" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="11" pos:column="36"/></control> <block pos:line="11" pos:column="37">{
		<decl_stmt><decl><type><name pos:line="12" pos:column="17">int<pos:position pos:line="12" pos:column="20"/></name></type> <name pos:line="12" pos:column="21">length<pos:position pos:line="12" pos:column="27"/></name> <init pos:line="12" pos:column="28">= <expr><call><name pos:line="12" pos:column="30">strlen<pos:position pos:line="12" pos:column="36"/></name><argument_list pos:line="12" pos:column="36">(<argument><expr><name><name pos:line="12" pos:column="37">pathspec<pos:position pos:line="12" pos:column="45"/></name><index pos:line="12" pos:column="45">[<expr><name pos:line="12" pos:column="46">i<pos:position pos:line="12" pos:column="47"/></name></expr>]<pos:position pos:line="12" pos:column="48"/></index></name></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="50"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">int<pos:position pos:line="13" pos:column="20"/></name></type> <name pos:line="13" pos:column="21">to_copy<pos:position pos:line="13" pos:column="28"/></name> <init pos:line="13" pos:column="29">= <expr><name pos:line="13" pos:column="31">length<pos:position pos:line="13" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="38"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">char<pos:position pos:line="14" pos:column="21"/></name> <modifier pos:line="14" pos:column="22">*<pos:position pos:line="14" pos:column="23"/></modifier></type><name pos:line="14" pos:column="23">it<pos:position pos:line="14" pos:column="25"/></name></decl>;<pos:position pos:line="14" pos:column="26"/></decl_stmt>
		<while pos:line="15" pos:column="17">while <condition pos:line="15" pos:column="23">(<expr><operator pos:line="15" pos:column="24">!<pos:position pos:line="15" pos:column="25"/></operator><operator pos:line="15" pos:column="25">(<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="26">flags<pos:position pos:line="15" pos:column="31"/></name> <operator pos:line="15" pos:column="32">&amp;<pos:position pos:line="15" pos:column="37"/></operator> <name pos:line="15" pos:column="34">KEEP_TRAILING_SLASH<pos:position pos:line="15" pos:column="53"/></name><operator pos:line="15" pos:column="53">)<pos:position pos:line="15" pos:column="54"/></operator> <operator pos:line="15" pos:column="55">&amp;&amp;<pos:position pos:line="15" pos:column="65"/></operator>
		       <name pos:line="16" pos:column="24">to_copy<pos:position pos:line="16" pos:column="31"/></name> <operator pos:line="16" pos:column="32">&gt;<pos:position pos:line="16" pos:column="36"/></operator> <literal type="number" pos:line="16" pos:column="34">0<pos:position pos:line="16" pos:column="35"/></literal> <operator pos:line="16" pos:column="36">&amp;&amp;<pos:position pos:line="16" pos:column="46"/></operator> <call><name pos:line="16" pos:column="39">is_dir_sep<pos:position pos:line="16" pos:column="49"/></name><argument_list pos:line="16" pos:column="49">(<argument><expr><name><name pos:line="16" pos:column="50">pathspec<pos:position pos:line="16" pos:column="58"/></name><index pos:line="16" pos:column="58">[<expr><name pos:line="16" pos:column="59">i<pos:position pos:line="16" pos:column="60"/></name></expr>]<pos:position pos:line="16" pos:column="61"/></index><index pos:line="16" pos:column="61">[<expr><name pos:line="16" pos:column="62">to_copy<pos:position pos:line="16" pos:column="69"/></name> <operator pos:line="16" pos:column="70">-<pos:position pos:line="16" pos:column="71"/></operator> <literal type="number" pos:line="16" pos:column="72">1<pos:position pos:line="16" pos:column="73"/></literal></expr>]<pos:position pos:line="16" pos:column="74"/></index></name></expr></argument>)<pos:position pos:line="16" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="76"/></condition>
			<block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="25">to_copy<pos:position pos:line="17" pos:column="32"/></name><operator pos:line="17" pos:column="32">--<pos:position pos:line="17" pos:column="34"/></operator></expr>;<pos:position pos:line="17" pos:column="35"/></expr_stmt></block></while>

		<expr_stmt><expr><name pos:line="19" pos:column="17">it<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <call><name pos:line="19" pos:column="22">xmemdupz<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><name><name pos:line="19" pos:column="31">pathspec<pos:position pos:line="19" pos:column="39"/></name><index pos:line="19" pos:column="39">[<expr><name pos:line="19" pos:column="40">i<pos:position pos:line="19" pos:column="41"/></name></expr>]<pos:position pos:line="19" pos:column="42"/></index></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="44">to_copy<pos:position pos:line="19" pos:column="51"/></name></expr></argument>)<pos:position pos:line="19" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="53"/></expr_stmt>
		<if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><name pos:line="20" pos:column="21">flags<pos:position pos:line="20" pos:column="26"/></name> <operator pos:line="20" pos:column="27">&amp;<pos:position pos:line="20" pos:column="32"/></operator> <name pos:line="20" pos:column="29">DUP_BASENAME<pos:position pos:line="20" pos:column="41"/></name></expr>)<pos:position pos:line="20" pos:column="42"/></condition><then pos:line="20" pos:column="42"> <block pos:line="20" pos:column="43">{
			<expr_stmt><expr><name><name pos:line="21" pos:column="25">result<pos:position pos:line="21" pos:column="31"/></name><index pos:line="21" pos:column="31">[<expr><name pos:line="21" pos:column="32">i<pos:position pos:line="21" pos:column="33"/></name></expr>]<pos:position pos:line="21" pos:column="34"/></index></name> <operator pos:line="21" pos:column="35">=<pos:position pos:line="21" pos:column="36"/></operator> <call><name pos:line="21" pos:column="37">xstrdup<pos:position pos:line="21" pos:column="44"/></name><argument_list pos:line="21" pos:column="44">(<argument><expr><call><name pos:line="21" pos:column="45">basename<pos:position pos:line="21" pos:column="53"/></name><argument_list pos:line="21" pos:column="53">(<argument><expr><name pos:line="21" pos:column="54">it<pos:position pos:line="21" pos:column="56"/></name></expr></argument>)<pos:position pos:line="21" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="59"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="22" pos:column="25">free<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">it<pos:position pos:line="22" pos:column="32"/></name></expr></argument>)<pos:position pos:line="22" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="34"/></expr_stmt>
		}<pos:position pos:line="23" pos:column="18"/></block></then> <else pos:line="23" pos:column="19">else <block pos:line="23" pos:column="24">{
			<expr_stmt><expr><name><name pos:line="24" pos:column="25">result<pos:position pos:line="24" pos:column="31"/></name><index pos:line="24" pos:column="31">[<expr><name pos:line="24" pos:column="32">i<pos:position pos:line="24" pos:column="33"/></name></expr>]<pos:position pos:line="24" pos:column="34"/></index></name> <operator pos:line="24" pos:column="35">=<pos:position pos:line="24" pos:column="36"/></operator> <name pos:line="24" pos:column="37">it<pos:position pos:line="24" pos:column="39"/></name></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt>
		}<pos:position pos:line="25" pos:column="18"/></block></else></if>
	}<pos:position pos:line="26" pos:column="10"/></block></for>
	<expr_stmt><expr><name><name pos:line="27" pos:column="9">result<pos:position pos:line="27" pos:column="15"/></name><index pos:line="27" pos:column="15">[<expr><name pos:line="27" pos:column="16">count<pos:position pos:line="27" pos:column="21"/></name></expr>]<pos:position pos:line="27" pos:column="22"/></index></name> <operator pos:line="27" pos:column="23">=<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">NULL<pos:position pos:line="27" pos:column="29"/></name></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>

	<comment type="block" pos:line="29" pos:column="9">/* Prefix the pathspec and free the old intermediate strings */</comment>
	<for pos:line="30" pos:column="9">for <control pos:line="30" pos:column="13">(<init><expr><name pos:line="30" pos:column="14">i<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <literal type="number" pos:line="30" pos:column="18">0<pos:position pos:line="30" pos:column="19"/></literal></expr>;<pos:position pos:line="30" pos:column="20"/></init> <condition><expr><name pos:line="30" pos:column="21">i<pos:position pos:line="30" pos:column="22"/></name> <operator pos:line="30" pos:column="23">&lt;<pos:position pos:line="30" pos:column="27"/></operator> <name pos:line="30" pos:column="25">count<pos:position pos:line="30" pos:column="30"/></name></expr>;<pos:position pos:line="30" pos:column="31"/></condition> <incr><expr><name pos:line="30" pos:column="32">i<pos:position pos:line="30" pos:column="33"/></name><operator pos:line="30" pos:column="33">++<pos:position pos:line="30" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="30" pos:column="36"/></control> <block pos:line="30" pos:column="37">{
		<decl_stmt><decl><type><specifier pos:line="31" pos:column="17">const<pos:position pos:line="31" pos:column="22"/></specifier> <name pos:line="31" pos:column="23">char<pos:position pos:line="31" pos:column="27"/></name> <modifier pos:line="31" pos:column="28">*<pos:position pos:line="31" pos:column="29"/></modifier></type><name pos:line="31" pos:column="29">match<pos:position pos:line="31" pos:column="34"/></name> <init pos:line="31" pos:column="35">= <expr><call><name pos:line="31" pos:column="37">prefix_path<pos:position pos:line="31" pos:column="48"/></name><argument_list pos:line="31" pos:column="48">(<argument><expr><name pos:line="31" pos:column="49">prefix<pos:position pos:line="31" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="57">prefixlen<pos:position pos:line="31" pos:column="66"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="68">result<pos:position pos:line="31" pos:column="74"/></name><index pos:line="31" pos:column="74">[<expr><name pos:line="31" pos:column="75">i<pos:position pos:line="31" pos:column="76"/></name></expr>]<pos:position pos:line="31" pos:column="77"/></index></name></expr></argument>)<pos:position pos:line="31" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="79"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="32" pos:column="17">free<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">(<argument><expr><operator pos:line="32" pos:column="22">(<pos:position pos:line="32" pos:column="23"/></operator><name pos:line="32" pos:column="23">char<pos:position pos:line="32" pos:column="27"/></name> <operator pos:line="32" pos:column="28">*<pos:position pos:line="32" pos:column="29"/></operator><operator pos:line="32" pos:column="29">)<pos:position pos:line="32" pos:column="30"/></operator> <name><name pos:line="32" pos:column="31">result<pos:position pos:line="32" pos:column="37"/></name><index pos:line="32" pos:column="37">[<expr><name pos:line="32" pos:column="38">i<pos:position pos:line="32" pos:column="39"/></name></expr>]<pos:position pos:line="32" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="32" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="42"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="33" pos:column="17">result<pos:position pos:line="33" pos:column="23"/></name><index pos:line="33" pos:column="23">[<expr><name pos:line="33" pos:column="24">i<pos:position pos:line="33" pos:column="25"/></name></expr>]<pos:position pos:line="33" pos:column="26"/></index></name> <operator pos:line="33" pos:column="27">=<pos:position pos:line="33" pos:column="28"/></operator> <name pos:line="33" pos:column="29">match<pos:position pos:line="33" pos:column="34"/></name></expr>;<pos:position pos:line="33" pos:column="35"/></expr_stmt>
	}<pos:position pos:line="34" pos:column="10"/></block></for>

	<return pos:line="36" pos:column="9">return <expr><name pos:line="36" pos:column="16">result<pos:position pos:line="36" pos:column="22"/></name></expr>;<pos:position pos:line="36" pos:column="23"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
