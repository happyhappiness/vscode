<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_4730_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier><modifier pos:line="1" pos:column="14">*<pos:position pos:line="1" pos:column="15"/></modifier></type><name pos:line="1" pos:column="15">note_tree_search<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">notes_tree<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">t<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="54">struct<pos:position pos:line="1" pos:column="60"/></name> <name pos:line="1" pos:column="61">int_node<pos:position pos:line="1" pos:column="69"/></name></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier><modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">tree<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
		<parameter><decl><type><name pos:line="2" pos:column="17">unsigned<pos:position pos:line="2" pos:column="25"/></name> <name pos:line="2" pos:column="26">char<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">n<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">unsigned<pos:position pos:line="2" pos:column="49"/></name> <name pos:line="2" pos:column="50">char<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">key_sha1<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">leaf_node<pos:position pos:line="4" pos:column="25"/></name></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">l<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">char<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">i<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">void<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">p<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><name><operator pos:line="6" pos:column="19">(<pos:position pos:line="6" pos:column="20"/></operator><operator pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="21">tree<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">)<pos:position pos:line="6" pos:column="26"/></operator><operator pos:line="6" pos:column="26">-&gt;<pos:position pos:line="6" pos:column="31"/></operator><name pos:line="6" pos:column="28">a<pos:position pos:line="6" pos:column="29"/></name></name><index pos:line="6" pos:column="29">[<expr><literal type="number" pos:line="6" pos:column="30">0<pos:position pos:line="6" pos:column="31"/></literal></expr>]<pos:position pos:line="6" pos:column="32"/></index></expr></init></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>

	<if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><call><name pos:line="8" pos:column="13">GET_PTR_TYPE<pos:position pos:line="8" pos:column="25"/></name><argument_list pos:line="8" pos:column="25">(<argument><expr><name pos:line="8" pos:column="26">p<pos:position pos:line="8" pos:column="27"/></name></expr></argument>)<pos:position pos:line="8" pos:column="28"/></argument_list></call> <operator pos:line="8" pos:column="29">==<pos:position pos:line="8" pos:column="31"/></operator> <name pos:line="8" pos:column="32">PTR_TYPE_SUBTREE<pos:position pos:line="8" pos:column="48"/></name></expr>)<pos:position pos:line="8" pos:column="49"/></condition><then pos:line="8" pos:column="49"> <block pos:line="8" pos:column="50">{
		<expr_stmt><expr><name pos:line="9" pos:column="17">l<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">=<pos:position pos:line="9" pos:column="20"/></operator> <operator pos:line="9" pos:column="21">(<pos:position pos:line="9" pos:column="22"/></operator>struct <name pos:line="9" pos:column="29">leaf_node<pos:position pos:line="9" pos:column="38"/></name> <operator pos:line="9" pos:column="39">*<pos:position pos:line="9" pos:column="40"/></operator><operator pos:line="9" pos:column="40">)<pos:position pos:line="9" pos:column="41"/></operator> <call><name pos:line="9" pos:column="42">CLR_PTR_TYPE<pos:position pos:line="9" pos:column="54"/></name><argument_list pos:line="9" pos:column="54">(<argument><expr><name pos:line="9" pos:column="55">p<pos:position pos:line="9" pos:column="56"/></name></expr></argument>)<pos:position pos:line="9" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="58"/></expr_stmt>
		<if pos:line="10" pos:column="17">if <condition pos:line="10" pos:column="20">(<expr><operator pos:line="10" pos:column="21">!<pos:position pos:line="10" pos:column="22"/></operator><call><name pos:line="10" pos:column="22">SUBTREE_SHA1_PREFIXCMP<pos:position pos:line="10" pos:column="44"/></name><argument_list pos:line="10" pos:column="44">(<argument><expr><name pos:line="10" pos:column="45">key_sha1<pos:position pos:line="10" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="55">l<pos:position pos:line="10" pos:column="56"/></name><operator pos:line="10" pos:column="56">-&gt;<pos:position pos:line="10" pos:column="61"/></operator><name pos:line="10" pos:column="58">key_oid<pos:position pos:line="10" pos:column="65"/></name><operator pos:line="10" pos:column="65">.<pos:position pos:line="10" pos:column="66"/></operator><name pos:line="10" pos:column="66">hash<pos:position pos:line="10" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="72"/></condition><then pos:line="10" pos:column="72"> <block pos:line="10" pos:column="73">{
			<comment type="block" pos:line="11" pos:column="25">/* unpack tree and resume search */</comment>
			<expr_stmt><expr><name><operator pos:line="12" pos:column="25">(<pos:position pos:line="12" pos:column="26"/></operator><operator pos:line="12" pos:column="26">*<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="27">tree<pos:position pos:line="12" pos:column="31"/></name><operator pos:line="12" pos:column="31">)<pos:position pos:line="12" pos:column="32"/></operator><operator pos:line="12" pos:column="32">-&gt;<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="34">a<pos:position pos:line="12" pos:column="35"/></name></name><index pos:line="12" pos:column="35">[<expr><literal type="number" pos:line="12" pos:column="36">0<pos:position pos:line="12" pos:column="37"/></literal></expr>]<pos:position pos:line="12" pos:column="38"/></index> <operator pos:line="12" pos:column="39">=<pos:position pos:line="12" pos:column="40"/></operator> <name pos:line="12" pos:column="41">NULL<pos:position pos:line="12" pos:column="45"/></name></expr>;<pos:position pos:line="12" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="13" pos:column="25">load_subtree<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">(<argument><expr><name pos:line="13" pos:column="38">t<pos:position pos:line="13" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="41">l<pos:position pos:line="13" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="44">*<pos:position pos:line="13" pos:column="45"/></operator><name pos:line="13" pos:column="45">tree<pos:position pos:line="13" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="51">*<pos:position pos:line="13" pos:column="52"/></operator><name pos:line="13" pos:column="52">n<pos:position pos:line="13" pos:column="53"/></name></expr></argument>)<pos:position pos:line="13" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="14" pos:column="25">free<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">l<pos:position pos:line="14" pos:column="31"/></name></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
			<return pos:line="15" pos:column="25">return <expr><call><name pos:line="15" pos:column="32">note_tree_search<pos:position pos:line="15" pos:column="48"/></name><argument_list pos:line="15" pos:column="48">(<argument><expr><name pos:line="15" pos:column="49">t<pos:position pos:line="15" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="52">tree<pos:position pos:line="15" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="58">n<pos:position pos:line="15" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="61">key_sha1<pos:position pos:line="15" pos:column="69"/></name></expr></argument>)<pos:position pos:line="15" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="71"/></return>
		}<pos:position pos:line="16" pos:column="18"/></block></then></if>
	}<pos:position pos:line="17" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="19" pos:column="9">i<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator> <call><name pos:line="19" pos:column="13">GET_NIBBLE<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><operator pos:line="19" pos:column="24">*<pos:position pos:line="19" pos:column="25"/></operator><name pos:line="19" pos:column="25">n<pos:position pos:line="19" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="28">key_sha1<pos:position pos:line="19" pos:column="36"/></name></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name pos:line="20" pos:column="9">p<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <name><operator pos:line="20" pos:column="13">(<pos:position pos:line="20" pos:column="14"/></operator><operator pos:line="20" pos:column="14">*<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="15">tree<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">)<pos:position pos:line="20" pos:column="20"/></operator><operator pos:line="20" pos:column="20">-&gt;<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="22">a<pos:position pos:line="20" pos:column="23"/></name></name><index pos:line="20" pos:column="23">[<expr><name pos:line="20" pos:column="24">i<pos:position pos:line="20" pos:column="25"/></name></expr>]<pos:position pos:line="20" pos:column="26"/></index></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt>
	<switch pos:line="21" pos:column="9">switch <condition pos:line="21" pos:column="16">(<expr><call><name pos:line="21" pos:column="17">GET_PTR_TYPE<pos:position pos:line="21" pos:column="29"/></name><argument_list pos:line="21" pos:column="29">(<argument><expr><name pos:line="21" pos:column="30">p<pos:position pos:line="21" pos:column="31"/></name></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="33"/></condition> <block pos:line="21" pos:column="34">{
	<case pos:line="22" pos:column="9">case <expr><name pos:line="22" pos:column="14">PTR_TYPE_INTERNAL<pos:position pos:line="22" pos:column="31"/></name></expr>:<pos:position pos:line="22" pos:column="32"/></case>
		<expr_stmt><expr><operator pos:line="23" pos:column="17">*<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">tree<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">=<pos:position pos:line="23" pos:column="24"/></operator> <call><name pos:line="23" pos:column="25">CLR_PTR_TYPE<pos:position pos:line="23" pos:column="37"/></name><argument_list pos:line="23" pos:column="37">(<argument><expr><name pos:line="23" pos:column="38">p<pos:position pos:line="23" pos:column="39"/></name></expr></argument>)<pos:position pos:line="23" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="24" pos:column="17">(<pos:position pos:line="24" pos:column="18"/></operator><operator pos:line="24" pos:column="18">*<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="19">n<pos:position pos:line="24" pos:column="20"/></name><operator pos:line="24" pos:column="20">)<pos:position pos:line="24" pos:column="21"/></operator><operator pos:line="24" pos:column="21">++<pos:position pos:line="24" pos:column="23"/></operator></expr>;<pos:position pos:line="24" pos:column="24"/></expr_stmt>
		<return pos:line="25" pos:column="17">return <expr><call><name pos:line="25" pos:column="24">note_tree_search<pos:position pos:line="25" pos:column="40"/></name><argument_list pos:line="25" pos:column="40">(<argument><expr><name pos:line="25" pos:column="41">t<pos:position pos:line="25" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="44">tree<pos:position pos:line="25" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="50">n<pos:position pos:line="25" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="53">key_sha1<pos:position pos:line="25" pos:column="61"/></name></expr></argument>)<pos:position pos:line="25" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="63"/></return>
	<case pos:line="26" pos:column="9">case <expr><name pos:line="26" pos:column="14">PTR_TYPE_SUBTREE<pos:position pos:line="26" pos:column="30"/></name></expr>:<pos:position pos:line="26" pos:column="31"/></case>
		<expr_stmt><expr><name pos:line="27" pos:column="17">l<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">=<pos:position pos:line="27" pos:column="20"/></operator> <operator pos:line="27" pos:column="21">(<pos:position pos:line="27" pos:column="22"/></operator>struct <name pos:line="27" pos:column="29">leaf_node<pos:position pos:line="27" pos:column="38"/></name> <operator pos:line="27" pos:column="39">*<pos:position pos:line="27" pos:column="40"/></operator><operator pos:line="27" pos:column="40">)<pos:position pos:line="27" pos:column="41"/></operator> <call><name pos:line="27" pos:column="42">CLR_PTR_TYPE<pos:position pos:line="27" pos:column="54"/></name><argument_list pos:line="27" pos:column="54">(<argument><expr><name pos:line="27" pos:column="55">p<pos:position pos:line="27" pos:column="56"/></name></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="58"/></expr_stmt>
		<if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><operator pos:line="28" pos:column="21">!<pos:position pos:line="28" pos:column="22"/></operator><call><name pos:line="28" pos:column="22">SUBTREE_SHA1_PREFIXCMP<pos:position pos:line="28" pos:column="44"/></name><argument_list pos:line="28" pos:column="44">(<argument><expr><name pos:line="28" pos:column="45">key_sha1<pos:position pos:line="28" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="55">l<pos:position pos:line="28" pos:column="56"/></name><operator pos:line="28" pos:column="56">-&gt;<pos:position pos:line="28" pos:column="61"/></operator><name pos:line="28" pos:column="58">key_oid<pos:position pos:line="28" pos:column="65"/></name><operator pos:line="28" pos:column="65">.<pos:position pos:line="28" pos:column="66"/></operator><name pos:line="28" pos:column="66">hash<pos:position pos:line="28" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="72"/></condition><then pos:line="28" pos:column="72"> <block pos:line="28" pos:column="73">{
			<comment type="block" pos:line="29" pos:column="25">/* unpack tree and resume search */</comment>
			<expr_stmt><expr><name><operator pos:line="30" pos:column="25">(<pos:position pos:line="30" pos:column="26"/></operator><operator pos:line="30" pos:column="26">*<pos:position pos:line="30" pos:column="27"/></operator><name pos:line="30" pos:column="27">tree<pos:position pos:line="30" pos:column="31"/></name><operator pos:line="30" pos:column="31">)<pos:position pos:line="30" pos:column="32"/></operator><operator pos:line="30" pos:column="32">-&gt;<pos:position pos:line="30" pos:column="37"/></operator><name pos:line="30" pos:column="34">a<pos:position pos:line="30" pos:column="35"/></name></name><index pos:line="30" pos:column="35">[<expr><name pos:line="30" pos:column="36">i<pos:position pos:line="30" pos:column="37"/></name></expr>]<pos:position pos:line="30" pos:column="38"/></index> <operator pos:line="30" pos:column="39">=<pos:position pos:line="30" pos:column="40"/></operator> <name pos:line="30" pos:column="41">NULL<pos:position pos:line="30" pos:column="45"/></name></expr>;<pos:position pos:line="30" pos:column="46"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="31" pos:column="25">load_subtree<pos:position pos:line="31" pos:column="37"/></name><argument_list pos:line="31" pos:column="37">(<argument><expr><name pos:line="31" pos:column="38">t<pos:position pos:line="31" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="41">l<pos:position pos:line="31" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="44">*<pos:position pos:line="31" pos:column="45"/></operator><name pos:line="31" pos:column="45">tree<pos:position pos:line="31" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="51">*<pos:position pos:line="31" pos:column="52"/></operator><name pos:line="31" pos:column="52">n<pos:position pos:line="31" pos:column="53"/></name></expr></argument>)<pos:position pos:line="31" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="55"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="32" pos:column="25">free<pos:position pos:line="32" pos:column="29"/></name><argument_list pos:line="32" pos:column="29">(<argument><expr><name pos:line="32" pos:column="30">l<pos:position pos:line="32" pos:column="31"/></name></expr></argument>)<pos:position pos:line="32" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="33"/></expr_stmt>
			<return pos:line="33" pos:column="25">return <expr><call><name pos:line="33" pos:column="32">note_tree_search<pos:position pos:line="33" pos:column="48"/></name><argument_list pos:line="33" pos:column="48">(<argument><expr><name pos:line="33" pos:column="49">t<pos:position pos:line="33" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="52">tree<pos:position pos:line="33" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="58">n<pos:position pos:line="33" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="61">key_sha1<pos:position pos:line="33" pos:column="69"/></name></expr></argument>)<pos:position pos:line="33" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="71"/></return>
		}<pos:position pos:line="34" pos:column="18"/></block></then></if>
		<comment type="block" pos:line="35" pos:column="17">/* fall through */</comment>
	<default pos:line="36" pos:column="9">default:<pos:position pos:line="36" pos:column="17"/></default>
		<return pos:line="37" pos:column="17">return <expr><operator pos:line="37" pos:column="24">&amp;<pos:position pos:line="37" pos:column="29"/></operator><operator pos:line="37" pos:column="25">(<pos:position pos:line="37" pos:column="26"/></operator><name><operator pos:line="37" pos:column="26">(<pos:position pos:line="37" pos:column="27"/></operator><operator pos:line="37" pos:column="27">*<pos:position pos:line="37" pos:column="28"/></operator><name pos:line="37" pos:column="28">tree<pos:position pos:line="37" pos:column="32"/></name><operator pos:line="37" pos:column="32">)<pos:position pos:line="37" pos:column="33"/></operator><operator pos:line="37" pos:column="33">-&gt;<pos:position pos:line="37" pos:column="38"/></operator><name pos:line="37" pos:column="35">a<pos:position pos:line="37" pos:column="36"/></name></name><index pos:line="37" pos:column="36">[<expr><name pos:line="37" pos:column="37">i<pos:position pos:line="37" pos:column="38"/></name></expr>]<pos:position pos:line="37" pos:column="39"/></index><operator pos:line="37" pos:column="39">)<pos:position pos:line="37" pos:column="40"/></operator></expr>;<pos:position pos:line="37" pos:column="41"/></return>
	}<pos:position pos:line="38" pos:column="10"/></block></switch>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
