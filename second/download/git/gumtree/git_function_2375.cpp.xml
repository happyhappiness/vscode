<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2375.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">handle_boundary<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">void<pos:position pos:line="1" pos:column="32"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">strbuf<pos:position pos:line="3" pos:column="22"/></name></name></type> <name pos:line="3" pos:column="23">newline<pos:position pos:line="3" pos:column="30"/></name> <init pos:line="3" pos:column="31">= <expr><name pos:line="3" pos:column="33">STRBUF_INIT<pos:position pos:line="3" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="45"/></decl_stmt>

	<expr_stmt><expr><call><name pos:line="5" pos:column="9">strbuf_addch<pos:position pos:line="5" pos:column="21"/></name><argument_list pos:line="5" pos:column="21">(<argument><expr><operator pos:line="5" pos:column="22">&amp;<pos:position pos:line="5" pos:column="27"/></operator><name pos:line="5" pos:column="23">newline<pos:position pos:line="5" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="5" pos:column="32">'\n'<pos:position pos:line="5" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="38"/></expr_stmt>
<label><name pos:line="6" pos:column="1">again<pos:position pos:line="6" pos:column="6"/></name>:<pos:position pos:line="6" pos:column="7"/></label>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name><name pos:line="7" pos:column="13">line<pos:position pos:line="7" pos:column="17"/></name><operator pos:line="7" pos:column="17">.<pos:position pos:line="7" pos:column="18"/></operator><name pos:line="7" pos:column="18">len<pos:position pos:line="7" pos:column="21"/></name></name> <operator pos:line="7" pos:column="22">&gt;=<pos:position pos:line="7" pos:column="27"/></operator> <name><operator pos:line="7" pos:column="25">(<pos:position pos:line="7" pos:column="26"/></operator><operator pos:line="7" pos:column="26">*<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="27">content_top<pos:position pos:line="7" pos:column="38"/></name><operator pos:line="7" pos:column="38">)<pos:position pos:line="7" pos:column="39"/></operator><operator pos:line="7" pos:column="39">-&gt;<pos:position pos:line="7" pos:column="44"/></operator><name pos:line="7" pos:column="41">len<pos:position pos:line="7" pos:column="44"/></name></name> <operator pos:line="7" pos:column="45">+<pos:position pos:line="7" pos:column="46"/></operator> <literal type="number" pos:line="7" pos:column="47">2<pos:position pos:line="7" pos:column="48"/></literal> <operator pos:line="7" pos:column="49">&amp;&amp;<pos:position pos:line="7" pos:column="59"/></operator>
	    <operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><call><name pos:line="8" pos:column="14">memcmp<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name><name pos:line="8" pos:column="21">line<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">.<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="26">buf<pos:position pos:line="8" pos:column="29"/></name></name> <operator pos:line="8" pos:column="30">+<pos:position pos:line="8" pos:column="31"/></operator> <name><operator pos:line="8" pos:column="32">(<pos:position pos:line="8" pos:column="33"/></operator><operator pos:line="8" pos:column="33">*<pos:position pos:line="8" pos:column="34"/></operator><name pos:line="8" pos:column="34">content_top<pos:position pos:line="8" pos:column="45"/></name><operator pos:line="8" pos:column="45">)<pos:position pos:line="8" pos:column="46"/></operator><operator pos:line="8" pos:column="46">-&gt;<pos:position pos:line="8" pos:column="51"/></operator><name pos:line="8" pos:column="48">len<pos:position pos:line="8" pos:column="51"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="53">"--"<pos:position pos:line="8" pos:column="57"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="59">2<pos:position pos:line="8" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="62"/></condition><then pos:line="8" pos:column="62"> <block pos:line="8" pos:column="63">{
		<comment type="block" pos:line="9" pos:column="17">/* we hit an end boundary */</comment>
		<comment type="block" pos:line="10" pos:column="17">/* pop the current boundary off the stack */</comment>
		<expr_stmt><expr><call><name pos:line="11" pos:column="17">strbuf_release<pos:position pos:line="11" pos:column="31"/></name><argument_list pos:line="11" pos:column="31">(<argument><expr><operator pos:line="11" pos:column="32">*<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="33">content_top<pos:position pos:line="11" pos:column="44"/></name></expr></argument>)<pos:position pos:line="11" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="12" pos:column="17">free<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><operator pos:line="12" pos:column="22">*<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="23">content_top<pos:position pos:line="12" pos:column="34"/></name></expr></argument>)<pos:position pos:line="12" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>
		<expr_stmt><expr><operator pos:line="13" pos:column="17">*<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="18">content_top<pos:position pos:line="13" pos:column="29"/></name> <operator pos:line="13" pos:column="30">=<pos:position pos:line="13" pos:column="31"/></operator> <name pos:line="13" pos:column="32">NULL<pos:position pos:line="13" pos:column="36"/></name></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>

		<comment type="block" pos:line="15" pos:column="17">/* technically won't happen as is_multipart_boundary()
		   will fail first.  But just in case..
		 */</comment>
		<if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><operator pos:line="18" pos:column="21">--<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="23">content_top<pos:position pos:line="18" pos:column="34"/></name> <operator pos:line="18" pos:column="35">&lt;<pos:position pos:line="18" pos:column="39"/></operator> <name pos:line="18" pos:column="37">content<pos:position pos:line="18" pos:column="44"/></name></expr>)<pos:position pos:line="18" pos:column="45"/></condition><then pos:line="18" pos:column="45"> <block pos:line="18" pos:column="46">{
			<expr_stmt><expr><call><name pos:line="19" pos:column="25">fprintf<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">stderr<pos:position pos:line="19" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="41">"Detected mismatched boundaries, "<pos:position pos:line="19" pos:column="75"/></literal>
					<literal type="string" pos:line="20" pos:column="41">"can't recover\n"<pos:position pos:line="20" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="60"/></expr_stmt>
			<expr_stmt><expr><call><name pos:line="21" pos:column="25">exit<pos:position pos:line="21" pos:column="29"/></name><argument_list pos:line="21" pos:column="29">(<argument><expr><literal type="number" pos:line="21" pos:column="30">1<pos:position pos:line="21" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt>
		}<pos:position pos:line="22" pos:column="18"/></block></then></if>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">handle_filter<pos:position pos:line="23" pos:column="30"/></name><argument_list pos:line="23" pos:column="30">(<argument><expr><operator pos:line="23" pos:column="31">&amp;<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="32">newline<pos:position pos:line="23" pos:column="39"/></name></expr></argument>)<pos:position pos:line="23" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="24" pos:column="17">strbuf_release<pos:position pos:line="24" pos:column="31"/></name><argument_list pos:line="24" pos:column="31">(<argument><expr><operator pos:line="24" pos:column="32">&amp;<pos:position pos:line="24" pos:column="37"/></operator><name pos:line="24" pos:column="33">newline<pos:position pos:line="24" pos:column="40"/></name></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt>

		<comment type="block" pos:line="26" pos:column="17">/* skip to the next boundary */</comment>
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">!<pos:position pos:line="27" pos:column="22"/></operator><call><name pos:line="27" pos:column="22">find_boundary<pos:position pos:line="27" pos:column="35"/></name><argument_list pos:line="27" pos:column="35">()<pos:position pos:line="27" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="38"/></condition><then pos:line="27" pos:column="38">
			<block type="pseudo"><return pos:line="28" pos:column="25">return <expr><literal type="number" pos:line="28" pos:column="32">0<pos:position pos:line="28" pos:column="33"/></literal></expr>;<pos:position pos:line="28" pos:column="34"/></return></block></then></if>
		<goto pos:line="29" pos:column="17">goto <name pos:line="29" pos:column="22">again<pos:position pos:line="29" pos:column="27"/></name>;<pos:position pos:line="29" pos:column="28"/></goto>
	}<pos:position pos:line="30" pos:column="10"/></block></then></if>

	<comment type="block" pos:line="32" pos:column="9">/* set some defaults */</comment>
	<expr_stmt><expr><name pos:line="33" pos:column="9">transfer_encoding<pos:position pos:line="33" pos:column="26"/></name> <operator pos:line="33" pos:column="27">=<pos:position pos:line="33" pos:column="28"/></operator> <name pos:line="33" pos:column="29">TE_DONTCARE<pos:position pos:line="33" pos:column="40"/></name></expr>;<pos:position pos:line="33" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">strbuf_reset<pos:position pos:line="34" pos:column="21"/></name><argument_list pos:line="34" pos:column="21">(<argument><expr><operator pos:line="34" pos:column="22">&amp;<pos:position pos:line="34" pos:column="27"/></operator><name pos:line="34" pos:column="23">charset<pos:position pos:line="34" pos:column="30"/></name></expr></argument>)<pos:position pos:line="34" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="32"/></expr_stmt>

	<comment type="block" pos:line="36" pos:column="9">/* slurp in this section's info */</comment>
	<while pos:line="37" pos:column="9">while <condition pos:line="37" pos:column="15">(<expr><call><name pos:line="37" pos:column="16">read_one_header_line<pos:position pos:line="37" pos:column="36"/></name><argument_list pos:line="37" pos:column="36">(<argument><expr><operator pos:line="37" pos:column="37">&amp;<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="38">line<pos:position pos:line="37" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="44">fin<pos:position pos:line="37" pos:column="47"/></name></expr></argument>)<pos:position pos:line="37" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="49"/></condition>
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="17">check_header<pos:position pos:line="38" pos:column="29"/></name><argument_list pos:line="38" pos:column="29">(<argument><expr><operator pos:line="38" pos:column="30">&amp;<pos:position pos:line="38" pos:column="35"/></operator><name pos:line="38" pos:column="31">line<pos:position pos:line="38" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="37">p_hdr_data<pos:position pos:line="38" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="49">0<pos:position pos:line="38" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="52"/></expr_stmt></block></while>

	<expr_stmt><expr><call><name pos:line="40" pos:column="9">strbuf_release<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><operator pos:line="40" pos:column="24">&amp;<pos:position pos:line="40" pos:column="29"/></operator><name pos:line="40" pos:column="25">newline<pos:position pos:line="40" pos:column="32"/></name></expr></argument>)<pos:position pos:line="40" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="34"/></expr_stmt>
	<comment type="block" pos:line="41" pos:column="9">/* replenish line */</comment>
	<if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><call><name pos:line="42" pos:column="13">strbuf_getline<pos:position pos:line="42" pos:column="27"/></name><argument_list pos:line="42" pos:column="27">(<argument><expr><operator pos:line="42" pos:column="28">&amp;<pos:position pos:line="42" pos:column="33"/></operator><name pos:line="42" pos:column="29">line<pos:position pos:line="42" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="35">fin<pos:position pos:line="42" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="42" pos:column="40">'\n'<pos:position pos:line="42" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="46"/></condition><then pos:line="42" pos:column="46">
		<block type="pseudo"><return pos:line="43" pos:column="17">return <expr><literal type="number" pos:line="43" pos:column="24">0<pos:position pos:line="43" pos:column="25"/></literal></expr>;<pos:position pos:line="43" pos:column="26"/></return></block></then></if>
	<expr_stmt><expr><call><name pos:line="44" pos:column="9">strbuf_addch<pos:position pos:line="44" pos:column="21"/></name><argument_list pos:line="44" pos:column="21">(<argument><expr><operator pos:line="44" pos:column="22">&amp;<pos:position pos:line="44" pos:column="27"/></operator><name pos:line="44" pos:column="23">line<pos:position pos:line="44" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="44" pos:column="29">'\n'<pos:position pos:line="44" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="35"/></expr_stmt>
	<return pos:line="45" pos:column="9">return <expr><literal type="number" pos:line="45" pos:column="16">1<pos:position pos:line="45" pos:column="17"/></literal></expr>;<pos:position pos:line="45" pos:column="18"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
