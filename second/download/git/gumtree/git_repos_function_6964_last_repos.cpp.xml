<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_6964_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name>
<name pos:line="2" pos:column="1">internal_function<pos:position pos:line="2" pos:column="18"/></name></type>
<name pos:line="3" pos:column="1">sift_states_iter_mb<pos:position pos:line="3" pos:column="20"/></name> <parameter_list pos:line="3" pos:column="21">(<parameter><decl><type><specifier pos:line="3" pos:column="22">const<pos:position pos:line="3" pos:column="27"/></specifier> <name pos:line="3" pos:column="28">re_match_context_t<pos:position pos:line="3" pos:column="46"/></name> <modifier pos:line="3" pos:column="47">*<pos:position pos:line="3" pos:column="48"/></modifier></type><name pos:line="3" pos:column="48">mctx<pos:position pos:line="3" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="54">re_sift_context_t<pos:position pos:line="3" pos:column="71"/></name> <modifier pos:line="3" pos:column="72">*<pos:position pos:line="3" pos:column="73"/></modifier></type><name pos:line="3" pos:column="73">sctx<pos:position pos:line="3" pos:column="77"/></name></decl></parameter>,
		     <parameter><decl><type><name pos:line="4" pos:column="22">int<pos:position pos:line="4" pos:column="25"/></name></type> <name pos:line="4" pos:column="26">node_idx<pos:position pos:line="4" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="36">int<pos:position pos:line="4" pos:column="39"/></name></type> <name pos:line="4" pos:column="40">str_idx<pos:position pos:line="4" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="49">int<pos:position pos:line="4" pos:column="52"/></name></type> <name pos:line="4" pos:column="53">max_str_idx<pos:position pos:line="4" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="65"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">re_dfa_t<pos:position pos:line="6" pos:column="17"/></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier><specifier pos:line="6" pos:column="19">const<pos:position pos:line="6" pos:column="24"/></specifier></type> <name pos:line="6" pos:column="25">dfa<pos:position pos:line="6" pos:column="28"/></name> <init pos:line="6" pos:column="29">= <expr><name><name pos:line="6" pos:column="31">mctx<pos:position pos:line="6" pos:column="35"/></name><operator pos:line="6" pos:column="35">-&gt;<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="37">dfa<pos:position pos:line="6" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">naccepted<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
  <comment type="block" pos:line="8" pos:column="3">/* Check the node can accept `multi byte'.  */</comment>
  <expr_stmt><expr><name pos:line="9" pos:column="3">naccepted<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <call><name pos:line="9" pos:column="15">check_node_accept_bytes<pos:position pos:line="9" pos:column="38"/></name> <argument_list pos:line="9" pos:column="39">(<argument><expr><name pos:line="9" pos:column="40">dfa<pos:position pos:line="9" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="45">node_idx<pos:position pos:line="9" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="55">&amp;<pos:position pos:line="9" pos:column="60"/></operator><name><name pos:line="9" pos:column="56">mctx<pos:position pos:line="9" pos:column="60"/></name><operator pos:line="9" pos:column="60">-&gt;<pos:position pos:line="9" pos:column="65"/></operator><name pos:line="9" pos:column="62">input<pos:position pos:line="9" pos:column="67"/></name></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="69">str_idx<pos:position pos:line="9" pos:column="76"/></name></expr></argument>)<pos:position pos:line="9" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="78"/></expr_stmt>
  <if pos:line="10" pos:column="3">if <condition pos:line="10" pos:column="6">(<expr><name pos:line="10" pos:column="7">naccepted<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">&gt;<pos:position pos:line="10" pos:column="21"/></operator> <literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal> <operator pos:line="10" pos:column="21">&amp;&amp;<pos:position pos:line="10" pos:column="31"/></operator> <name pos:line="10" pos:column="24">str_idx<pos:position pos:line="10" pos:column="31"/></name> <operator pos:line="10" pos:column="32">+<pos:position pos:line="10" pos:column="33"/></operator> <name pos:line="10" pos:column="34">naccepted<pos:position pos:line="10" pos:column="43"/></name> <operator pos:line="10" pos:column="44">&lt;=<pos:position pos:line="10" pos:column="49"/></operator> <name pos:line="10" pos:column="47">max_str_idx<pos:position pos:line="10" pos:column="58"/></name> <operator pos:line="10" pos:column="59">&amp;&amp;<pos:position pos:line="10" pos:column="69"/></operator>
      <operator pos:line="11" pos:column="7">!<pos:position pos:line="11" pos:column="8"/></operator><call><name pos:line="11" pos:column="8">STATE_NODE_CONTAINS<pos:position pos:line="11" pos:column="27"/></name> <argument_list pos:line="11" pos:column="28">(<argument><expr><name><name pos:line="11" pos:column="29">sctx<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">-&gt;<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="35">sifted_states<pos:position pos:line="11" pos:column="48"/></name><index pos:line="11" pos:column="48">[<expr><name pos:line="11" pos:column="49">str_idx<pos:position pos:line="11" pos:column="56"/></name> <operator pos:line="11" pos:column="57">+<pos:position pos:line="11" pos:column="58"/></operator> <name pos:line="11" pos:column="59">naccepted<pos:position pos:line="11" pos:column="68"/></name></expr>]<pos:position pos:line="11" pos:column="69"/></index></name></expr></argument>,
			    <argument><expr><name><name pos:line="12" pos:column="29">dfa<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">-&gt;<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="34">nexts<pos:position pos:line="12" pos:column="39"/></name><index pos:line="12" pos:column="39">[<expr><name pos:line="12" pos:column="40">node_idx<pos:position pos:line="12" pos:column="48"/></name></expr>]<pos:position pos:line="12" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="51"/></condition><then pos:line="12" pos:column="51">
    <comment type="block" pos:line="13" pos:column="5">/* The node can't accept the `multi byte', or the
       destination was already thrown away, then the node
       couldn't accept the current input `multi byte'.   */</comment>
    <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="5">naccepted<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">=<pos:position pos:line="16" pos:column="16"/></operator> <literal type="number" pos:line="16" pos:column="17">0<pos:position pos:line="16" pos:column="18"/></literal></expr>;<pos:position pos:line="16" pos:column="19"/></expr_stmt></block></then></if>
  <comment type="block" pos:line="17" pos:column="3">/* Otherwise, it is sure that the node could accept
     `naccepted' bytes input.  */</comment>
  <return pos:line="19" pos:column="3">return <expr><name pos:line="19" pos:column="10">naccepted<pos:position pos:line="19" pos:column="19"/></name></expr>;<pos:position pos:line="19" pos:column="20"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
