<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_2242.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">xopen<pos:position pos:line="1" pos:column="10"/></name><parameter_list pos:line="1" pos:column="10">(<parameter><decl><type><specifier pos:line="1" pos:column="11">const<pos:position pos:line="1" pos:column="16"/></specifier> <name pos:line="1" pos:column="17">char<pos:position pos:line="1" pos:column="21"/></name> <modifier pos:line="1" pos:column="22">*<pos:position pos:line="1" pos:column="23"/></modifier></type><name pos:line="1" pos:column="23">path<pos:position pos:line="1" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">oflag<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><modifier pos:line="1" pos:column="40">...<pos:position pos:line="1" pos:column="43"/></modifier></type></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="3" pos:column="9">mode_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">mode<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><literal type="number" pos:line="3" pos:column="23">0<pos:position pos:line="3" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="4" pos:column="9">va_list<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">ap<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

	<comment type="block" pos:line="6" pos:column="9">/*
	 * va_arg() will have undefined behavior if the specified type is not
	 * compatible with the argument type. Since integers are promoted to
	 * ints, we fetch the next argument as an int, and then cast it to a
	 * mode_t to avoid undefined behavior.
	 */</comment>
	<expr_stmt><expr><call><name pos:line="12" pos:column="9">va_start<pos:position pos:line="12" pos:column="17"/></name><argument_list pos:line="12" pos:column="17">(<argument><expr><name pos:line="12" pos:column="18">ap<pos:position pos:line="12" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="22">oflag<pos:position pos:line="12" pos:column="27"/></name></expr></argument>)<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>
	<if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">oflag<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">&amp;<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="21">O_CREAT<pos:position pos:line="13" pos:column="28"/></name></expr>)<pos:position pos:line="13" pos:column="29"/></condition><then pos:line="13" pos:column="29">
		<block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="17">mode<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">=<pos:position pos:line="14" pos:column="23"/></operator> <call><name pos:line="14" pos:column="24">va_arg<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><name pos:line="14" pos:column="31">ap<pos:position pos:line="14" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="35">int<pos:position pos:line="14" pos:column="38"/></name></expr></argument>)<pos:position pos:line="14" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="40"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">va_end<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><name pos:line="15" pos:column="16">ap<pos:position pos:line="15" pos:column="18"/></name></expr></argument>)<pos:position pos:line="15" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="20"/></expr_stmt>

	<for pos:line="17" pos:column="9">for <control pos:line="17" pos:column="13">(<init pos:line="17" pos:column="14">;<pos:position pos:line="17" pos:column="15"/></init><condition pos:line="17" pos:column="15">;<pos:position pos:line="17" pos:column="16"/></condition><incr/>)<pos:position pos:line="17" pos:column="17"/></control> <block pos:line="17" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="18" pos:column="17">int<pos:position pos:line="18" pos:column="20"/></name></type> <name pos:line="18" pos:column="21">fd<pos:position pos:line="18" pos:column="23"/></name> <init pos:line="18" pos:column="24">= <expr><call><name pos:line="18" pos:column="26">open<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><name pos:line="18" pos:column="31">path<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="37">oflag<pos:position pos:line="18" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="44">mode<pos:position pos:line="18" pos:column="48"/></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="50"/></decl_stmt>
		<if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><name pos:line="19" pos:column="21">fd<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">&gt;=<pos:position pos:line="19" pos:column="29"/></operator> <literal type="number" pos:line="19" pos:column="27">0<pos:position pos:line="19" pos:column="28"/></literal></expr>)<pos:position pos:line="19" pos:column="29"/></condition><then pos:line="19" pos:column="29">
			<block type="pseudo"><return pos:line="20" pos:column="25">return <expr><name pos:line="20" pos:column="32">fd<pos:position pos:line="20" pos:column="34"/></name></expr>;<pos:position pos:line="20" pos:column="35"/></return></block></then></if>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name pos:line="21" pos:column="21">errno<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">==<pos:position pos:line="21" pos:column="29"/></operator> <name pos:line="21" pos:column="30">EINTR<pos:position pos:line="21" pos:column="35"/></name></expr>)<pos:position pos:line="21" pos:column="36"/></condition><then pos:line="21" pos:column="36">
			<block type="pseudo"><continue pos:line="22" pos:column="25">continue;<pos:position pos:line="22" pos:column="34"/></continue></block></then></if>

		<if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><operator pos:line="24" pos:column="21">(<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="22">oflag<pos:position pos:line="24" pos:column="27"/></name> <operator pos:line="24" pos:column="28">&amp;<pos:position pos:line="24" pos:column="33"/></operator> <name pos:line="24" pos:column="30">O_RDWR<pos:position pos:line="24" pos:column="36"/></name><operator pos:line="24" pos:column="36">)<pos:position pos:line="24" pos:column="37"/></operator> <operator pos:line="24" pos:column="38">==<pos:position pos:line="24" pos:column="40"/></operator> <name pos:line="24" pos:column="41">O_RDWR<pos:position pos:line="24" pos:column="47"/></name></expr>)<pos:position pos:line="24" pos:column="48"/></condition><then pos:line="24" pos:column="48">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="25">die_errno<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">(<argument><expr><call><name pos:line="25" pos:column="35">_<pos:position pos:line="25" pos:column="36"/></name><argument_list pos:line="25" pos:column="36">(<argument><expr><literal type="string" pos:line="25" pos:column="37">"could not open '%s' for reading and writing"<pos:position pos:line="25" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="83"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="25" pos:column="85">path<pos:position pos:line="25" pos:column="89"/></name></expr></argument>)<pos:position pos:line="25" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="91"/></expr_stmt></block></then>
		<elseif pos:line="26" pos:column="17">else <if pos:line="26" pos:column="22">if <condition pos:line="26" pos:column="25">(<expr><operator pos:line="26" pos:column="26">(<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="27">oflag<pos:position pos:line="26" pos:column="32"/></name> <operator pos:line="26" pos:column="33">&amp;<pos:position pos:line="26" pos:column="38"/></operator> <name pos:line="26" pos:column="35">O_WRONLY<pos:position pos:line="26" pos:column="43"/></name><operator pos:line="26" pos:column="43">)<pos:position pos:line="26" pos:column="44"/></operator> <operator pos:line="26" pos:column="45">==<pos:position pos:line="26" pos:column="47"/></operator> <name pos:line="26" pos:column="48">O_WRONLY<pos:position pos:line="26" pos:column="56"/></name></expr>)<pos:position pos:line="26" pos:column="57"/></condition><then pos:line="26" pos:column="57">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="25">die_errno<pos:position pos:line="27" pos:column="34"/></name><argument_list pos:line="27" pos:column="34">(<argument><expr><call><name pos:line="27" pos:column="35">_<pos:position pos:line="27" pos:column="36"/></name><argument_list pos:line="27" pos:column="36">(<argument><expr><literal type="string" pos:line="27" pos:column="37">"could not open '%s' for writing"<pos:position pos:line="27" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="27" pos:column="73">path<pos:position pos:line="27" pos:column="77"/></name></expr></argument>)<pos:position pos:line="27" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="79"/></expr_stmt></block></then></if></elseif>
		<else pos:line="28" pos:column="17">else
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="25">die_errno<pos:position pos:line="29" pos:column="34"/></name><argument_list pos:line="29" pos:column="34">(<argument><expr><call><name pos:line="29" pos:column="35">_<pos:position pos:line="29" pos:column="36"/></name><argument_list pos:line="29" pos:column="36">(<argument><expr><literal type="string" pos:line="29" pos:column="37">"could not open '%s' for reading"<pos:position pos:line="29" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="29" pos:column="73">path<pos:position pos:line="29" pos:column="77"/></name></expr></argument>)<pos:position pos:line="29" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="79"/></expr_stmt></block></else></if>
	}<pos:position pos:line="30" pos:column="10"/></block></for>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
