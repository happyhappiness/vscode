<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_3408_git-2.0.5.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">rev_list_insert_ref<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier> <name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">refname<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="53">const<pos:position pos:line="1" pos:column="58"/></specifier> <name pos:line="1" pos:column="59">unsigned<pos:position pos:line="1" pos:column="67"/></name> <name pos:line="1" pos:column="68">char<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">sha1<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="80">int<pos:position pos:line="1" pos:column="83"/></name></type> <name pos:line="1" pos:column="84">flag<pos:position pos:line="1" pos:column="88"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="90">void<pos:position pos:line="1" pos:column="94"/></name> <modifier pos:line="1" pos:column="95">*<pos:position pos:line="1" pos:column="96"/></modifier></type><name pos:line="1" pos:column="96">cb_data<pos:position pos:line="1" pos:column="103"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="104"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">object<pos:position pos:line="3" pos:column="22"/></name></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier></type><name pos:line="3" pos:column="24">o<pos:position pos:line="3" pos:column="25"/></name> <init pos:line="3" pos:column="26">= <expr><call><name pos:line="3" pos:column="28">deref_tag<pos:position pos:line="3" pos:column="37"/></name><argument_list pos:line="3" pos:column="37">(<argument><expr><call><name pos:line="3" pos:column="38">parse_object<pos:position pos:line="3" pos:column="50"/></name><argument_list pos:line="3" pos:column="50">(<argument><expr><name pos:line="3" pos:column="51">sha1<pos:position pos:line="3" pos:column="55"/></name></expr></argument>)<pos:position pos:line="3" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="3" pos:column="58">refname<pos:position pos:line="3" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3" pos:column="67">0<pos:position pos:line="3" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="70"/></decl_stmt>

	<if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">o<pos:position pos:line="5" pos:column="14"/></name> <operator pos:line="5" pos:column="15">&amp;&amp;<pos:position pos:line="5" pos:column="25"/></operator> <name><name pos:line="5" pos:column="18">o<pos:position pos:line="5" pos:column="19"/></name><operator pos:line="5" pos:column="19">-&gt;<pos:position pos:line="5" pos:column="24"/></operator><name pos:line="5" pos:column="21">type<pos:position pos:line="5" pos:column="25"/></name></name> <operator pos:line="5" pos:column="26">==<pos:position pos:line="5" pos:column="28"/></operator> <name pos:line="5" pos:column="29">OBJ_COMMIT<pos:position pos:line="5" pos:column="39"/></name></expr>)<pos:position pos:line="5" pos:column="40"/></condition><then pos:line="5" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="6" pos:column="17">rev_list_push<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><operator pos:line="6" pos:column="31">(<pos:position pos:line="6" pos:column="32"/></operator>struct <name pos:line="6" pos:column="39">commit<pos:position pos:line="6" pos:column="45"/></name> <operator pos:line="6" pos:column="46">*<pos:position pos:line="6" pos:column="47"/></operator><operator pos:line="6" pos:column="47">)<pos:position pos:line="6" pos:column="48"/></operator><name pos:line="6" pos:column="48">o<pos:position pos:line="6" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="51">SEEN<pos:position pos:line="6" pos:column="55"/></name></expr></argument>)<pos:position pos:line="6" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="57"/></expr_stmt></block></then></if>

	<return pos:line="8" pos:column="9">return <expr><literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr>;<pos:position pos:line="8" pos:column="18"/></return>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
