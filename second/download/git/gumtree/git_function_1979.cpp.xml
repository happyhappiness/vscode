<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_function_1979.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">send_ref<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><specifier pos:line="1" pos:column="21">const<pos:position pos:line="1" pos:column="26"/></specifier> <name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">refname<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">unsigned<pos:position pos:line="1" pos:column="56"/></name> <name pos:line="1" pos:column="57">char<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">sha1<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="69">int<pos:position pos:line="1" pos:column="72"/></name></type> <name pos:line="1" pos:column="73">flag<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="79">void<pos:position pos:line="1" pos:column="83"/></name> <modifier pos:line="1" pos:column="84">*<pos:position pos:line="1" pos:column="85"/></modifier></type><name pos:line="1" pos:column="85">cb_data<pos:position pos:line="1" pos:column="92"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="93"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><specifier pos:line="3" pos:column="9">static<pos:position pos:line="3" pos:column="15"/></specifier> <type><specifier pos:line="3" pos:column="16">const<pos:position pos:line="3" pos:column="21"/></specifier> <name pos:line="3" pos:column="22">char<pos:position pos:line="3" pos:column="26"/></name> <modifier pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></modifier></type><name pos:line="3" pos:column="28">capabilities<pos:position pos:line="3" pos:column="40"/></name> <init pos:line="3" pos:column="41">= <expr><literal type="string" pos:line="3" pos:column="43">"multi_ack thin-pack side-band"<pos:position pos:line="3" pos:column="74"/></literal>
		<literal type="string" pos:line="4" pos:column="17">" side-band-64k ofs-delta shallow no-progress"<pos:position pos:line="4" pos:column="63"/></literal>
		<literal type="string" pos:line="5" pos:column="17">" include-tag multi_ack_detailed"<pos:position pos:line="5" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="51"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier> <name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">refname_nons<pos:position pos:line="6" pos:column="33"/></name> <init pos:line="6" pos:column="34">= <expr><call><name pos:line="6" pos:column="36">strip_namespace<pos:position pos:line="6" pos:column="51"/></name><argument_list pos:line="6" pos:column="51">(<argument><expr><name pos:line="6" pos:column="52">refname<pos:position pos:line="6" pos:column="59"/></name></expr></argument>)<pos:position pos:line="6" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="61"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="7" pos:column="9">unsigned<pos:position pos:line="7" pos:column="17"/></name> <name pos:line="7" pos:column="18">char<pos:position pos:line="7" pos:column="22"/></name></type> <name><name pos:line="7" pos:column="23">peeled<pos:position pos:line="7" pos:column="29"/></name><index pos:line="7" pos:column="29">[<expr><literal type="number" pos:line="7" pos:column="30">20<pos:position pos:line="7" pos:column="32"/></literal></expr>]<pos:position pos:line="7" pos:column="33"/></index></name></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>

	<if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">mark_our_ref<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">refname<pos:position pos:line="9" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="35">sha1<pos:position pos:line="9" pos:column="39"/></name></expr></argument>)<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="41"/></condition><then pos:line="9" pos:column="41">
		<block type="pseudo"><return pos:line="10" pos:column="17">return <expr><literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal></expr>;<pos:position pos:line="10" pos:column="26"/></return></block></then></if>

	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">capabilities<pos:position pos:line="12" pos:column="25"/></name></expr>)<pos:position pos:line="12" pos:column="26"/></condition><then pos:line="12" pos:column="26"> <block pos:line="12" pos:column="27">{
		<decl_stmt><decl><type><name><name pos:line="13" pos:column="17">struct<pos:position pos:line="13" pos:column="23"/></name> <name pos:line="13" pos:column="24">strbuf<pos:position pos:line="13" pos:column="30"/></name></name></type> <name pos:line="13" pos:column="31">symref_info<pos:position pos:line="13" pos:column="42"/></name> <init pos:line="13" pos:column="43">= <expr><name pos:line="13" pos:column="45">STRBUF_INIT<pos:position pos:line="13" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="57"/></decl_stmt>

		<expr_stmt><expr><call><name pos:line="15" pos:column="17">format_symref_info<pos:position pos:line="15" pos:column="35"/></name><argument_list pos:line="15" pos:column="35">(<argument><expr><operator pos:line="15" pos:column="36">&amp;<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="37">symref_info<pos:position pos:line="15" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="50">cb_data<pos:position pos:line="15" pos:column="57"/></name></expr></argument>)<pos:position pos:line="15" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="59"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="16" pos:column="17">packet_write<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><literal type="number" pos:line="16" pos:column="30">1<pos:position pos:line="16" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="33">"%s %s%c%s%s%s%s agent=%s\n"<pos:position pos:line="16" pos:column="61"/></literal></expr></argument>,
			     <argument><expr><call><name pos:line="17" pos:column="30">sha1_to_hex<pos:position pos:line="17" pos:column="41"/></name><argument_list pos:line="17" pos:column="41">(<argument><expr><name pos:line="17" pos:column="42">sha1<pos:position pos:line="17" pos:column="46"/></name></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="17" pos:column="49">refname_nons<pos:position pos:line="17" pos:column="61"/></name></expr></argument>,
			     <argument><expr><literal type="number" pos:line="18" pos:column="30">0<pos:position pos:line="18" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="33">capabilities<pos:position pos:line="18" pos:column="45"/></name></expr></argument>,
			     <argument><expr><ternary><condition><expr><name pos:line="19" pos:column="30">allow_tip_sha1_in_want<pos:position pos:line="19" pos:column="52"/></name></expr> ?<pos:position pos:line="19" pos:column="54"/></condition><then pos:line="19" pos:column="54"> <expr><literal type="string" pos:line="19" pos:column="55">" allow-tip-sha1-in-want"<pos:position pos:line="19" pos:column="80"/></literal></expr> <pos:position pos:line="19" pos:column="81"/></then><else pos:line="19" pos:column="81">: <expr><literal type="string" pos:line="19" pos:column="83">""<pos:position pos:line="19" pos:column="85"/></literal></expr></else></ternary></expr></argument>,
			     <argument><expr><ternary><condition><expr><name pos:line="20" pos:column="30">stateless_rpc<pos:position pos:line="20" pos:column="43"/></name></expr> ?<pos:position pos:line="20" pos:column="45"/></condition><then pos:line="20" pos:column="45"> <expr><literal type="string" pos:line="20" pos:column="46">" no-done"<pos:position pos:line="20" pos:column="56"/></literal></expr> <pos:position pos:line="20" pos:column="57"/></then><else pos:line="20" pos:column="57">: <expr><literal type="string" pos:line="20" pos:column="59">""<pos:position pos:line="20" pos:column="61"/></literal></expr></else></ternary></expr></argument>,
			     <argument><expr><name><name pos:line="21" pos:column="30">symref_info<pos:position pos:line="21" pos:column="41"/></name><operator pos:line="21" pos:column="41">.<pos:position pos:line="21" pos:column="42"/></operator><name pos:line="21" pos:column="42">buf<pos:position pos:line="21" pos:column="45"/></name></name></expr></argument>,
			     <argument><expr><call><name pos:line="22" pos:column="30">git_user_agent_sanitized<pos:position pos:line="22" pos:column="54"/></name><argument_list pos:line="22" pos:column="54">()<pos:position pos:line="22" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="58"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="23" pos:column="17">strbuf_release<pos:position pos:line="23" pos:column="31"/></name><argument_list pos:line="23" pos:column="31">(<argument><expr><operator pos:line="23" pos:column="32">&amp;<pos:position pos:line="23" pos:column="37"/></operator><name pos:line="23" pos:column="33">symref_info<pos:position pos:line="23" pos:column="44"/></name></expr></argument>)<pos:position pos:line="23" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="46"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then> <else pos:line="24" pos:column="11">else <block pos:line="24" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">packet_write<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><literal type="number" pos:line="25" pos:column="30">1<pos:position pos:line="25" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="33">"%s %s\n"<pos:position pos:line="25" pos:column="42"/></literal></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="44">sha1_to_hex<pos:position pos:line="25" pos:column="55"/></name><argument_list pos:line="25" pos:column="55">(<argument><expr><name pos:line="25" pos:column="56">sha1<pos:position pos:line="25" pos:column="60"/></name></expr></argument>)<pos:position pos:line="25" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="25" pos:column="63">refname_nons<pos:position pos:line="25" pos:column="75"/></name></expr></argument>)<pos:position pos:line="25" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="77"/></expr_stmt>
	}<pos:position pos:line="26" pos:column="10"/></block></else></if>
	<expr_stmt><expr><name pos:line="27" pos:column="9">capabilities<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">=<pos:position pos:line="27" pos:column="23"/></operator> <name pos:line="27" pos:column="24">NULL<pos:position pos:line="27" pos:column="28"/></name></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt>
	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><operator pos:line="28" pos:column="13">!<pos:position pos:line="28" pos:column="14"/></operator><call><name pos:line="28" pos:column="14">peel_ref<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><name pos:line="28" pos:column="23">refname<pos:position pos:line="28" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="32">peeled<pos:position pos:line="28" pos:column="38"/></name></expr></argument>)<pos:position pos:line="28" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="40"/></condition><then pos:line="28" pos:column="40">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="17">packet_write<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">(<argument><expr><literal type="number" pos:line="29" pos:column="30">1<pos:position pos:line="29" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="33">"%s %s^{}\n"<pos:position pos:line="29" pos:column="45"/></literal></expr></argument>, <argument><expr><call><name pos:line="29" pos:column="47">sha1_to_hex<pos:position pos:line="29" pos:column="58"/></name><argument_list pos:line="29" pos:column="58">(<argument><expr><name pos:line="29" pos:column="59">peeled<pos:position pos:line="29" pos:column="65"/></name></expr></argument>)<pos:position pos:line="29" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="29" pos:column="68">refname_nons<pos:position pos:line="29" pos:column="80"/></name></expr></argument>)<pos:position pos:line="29" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="82"/></expr_stmt></block></then></if>
	<return pos:line="30" pos:column="9">return <expr><literal type="number" pos:line="30" pos:column="16">0<pos:position pos:line="30" pos:column="17"/></literal></expr>;<pos:position pos:line="30" pos:column="18"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
