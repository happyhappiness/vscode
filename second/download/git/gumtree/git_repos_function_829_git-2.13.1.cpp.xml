<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/git/gumtree/git_repos_function_829_git-2.13.1.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">sort_in_topological_order<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">struct<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">commit_list<pos:position pos:line="1" pos:column="50"/></name></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier><modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">list<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="59">enum<pos:position pos:line="1" pos:column="63"/></name> <name pos:line="1" pos:column="64">rev_sort_order<pos:position pos:line="1" pos:column="78"/></name></name></type> <name pos:line="1" pos:column="79">sort_order<pos:position pos:line="1" pos:column="89"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="90"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="3" pos:column="9">struct<pos:position pos:line="3" pos:column="15"/></name> <name pos:line="3" pos:column="16">commit_list<pos:position pos:line="3" pos:column="27"/></name></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">next<pos:position pos:line="3" pos:column="33"/></name></decl>, <modifier pos:line="3" pos:column="35">*<pos:position pos:line="3" pos:column="36"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="36">orig<pos:position pos:line="3" pos:column="40"/></name> <init pos:line="3" pos:column="41">= <expr><operator pos:line="3" pos:column="43">*<pos:position pos:line="3" pos:column="44"/></operator><name pos:line="3" pos:column="44">list<pos:position pos:line="3" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="49"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="4" pos:column="9">struct<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">commit_list<pos:position pos:line="4" pos:column="27"/></name></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier><modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier></type><name pos:line="4" pos:column="30">pptr<pos:position pos:line="4" pos:column="34"/></name></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="5" pos:column="9">struct<pos:position pos:line="5" pos:column="15"/></name> <name pos:line="5" pos:column="16">indegree_slab<pos:position pos:line="5" pos:column="29"/></name></name></type> <name pos:line="5" pos:column="30">indegree<pos:position pos:line="5" pos:column="38"/></name></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">prio_queue<pos:position pos:line="6" pos:column="26"/></name></name></type> <name pos:line="6" pos:column="27">queue<pos:position pos:line="6" pos:column="32"/></name></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">commit<pos:position pos:line="7" pos:column="22"/></name></name> <modifier pos:line="7" pos:column="23">*<pos:position pos:line="7" pos:column="24"/></modifier></type><name pos:line="7" pos:column="24">commit<pos:position pos:line="7" pos:column="30"/></name></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="8" pos:column="9">struct<pos:position pos:line="8" pos:column="15"/></name> <name pos:line="8" pos:column="16">author_date_slab<pos:position pos:line="8" pos:column="32"/></name></name></type> <name pos:line="8" pos:column="33">author_date<pos:position pos:line="8" pos:column="44"/></name></decl>;<pos:position pos:line="8" pos:column="45"/></decl_stmt>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">orig<pos:position pos:line="10" pos:column="18"/></name></expr>)<pos:position pos:line="10" pos:column="19"/></condition><then pos:line="10" pos:column="19">
		<block type="pseudo"><return pos:line="11" pos:column="17">return;<pos:position pos:line="11" pos:column="24"/></return></block></then></if>
	<expr_stmt><expr><operator pos:line="12" pos:column="9">*<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">list<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">=<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">NULL<pos:position pos:line="12" pos:column="21"/></name></expr>;<pos:position pos:line="12" pos:column="22"/></expr_stmt>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">init_indegree_slab<pos:position pos:line="14" pos:column="27"/></name><argument_list pos:line="14" pos:column="27">(<argument><expr><operator pos:line="14" pos:column="28">&amp;<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="29">indegree<pos:position pos:line="14" pos:column="37"/></name></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">memset<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><operator pos:line="15" pos:column="16">&amp;<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="17">queue<pos:position pos:line="15" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="15" pos:column="24">'\0'<pos:position pos:line="15" pos:column="28"/></literal></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="30">sizeof<argument_list pos:line="15" pos:column="36">(<argument><expr><name pos:line="15" pos:column="37">queue<pos:position pos:line="15" pos:column="42"/></name></expr></argument>)<pos:position pos:line="15" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="45"/></expr_stmt>

	<switch pos:line="17" pos:column="9">switch <condition pos:line="17" pos:column="16">(<expr><name pos:line="17" pos:column="17">sort_order<pos:position pos:line="17" pos:column="27"/></name></expr>)<pos:position pos:line="17" pos:column="28"/></condition> <block pos:line="17" pos:column="29">{
	<default pos:line="18" pos:column="9">default:<pos:position pos:line="18" pos:column="17"/></default> <comment type="block" pos:line="18" pos:column="18">/* REV_SORT_IN_GRAPH_ORDER */</comment>
		<expr_stmt><expr><name><name pos:line="19" pos:column="17">queue<pos:position pos:line="19" pos:column="22"/></name><operator pos:line="19" pos:column="22">.<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="23">compare<pos:position pos:line="19" pos:column="30"/></name></name> <operator pos:line="19" pos:column="31">=<pos:position pos:line="19" pos:column="32"/></operator> <name pos:line="19" pos:column="33">NULL<pos:position pos:line="19" pos:column="37"/></name></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt>
		<break pos:line="20" pos:column="17">break;<pos:position pos:line="20" pos:column="23"/></break>
	<case pos:line="21" pos:column="9">case <expr><name pos:line="21" pos:column="14">REV_SORT_BY_COMMIT_DATE<pos:position pos:line="21" pos:column="37"/></name></expr>:<pos:position pos:line="21" pos:column="38"/></case>
		<expr_stmt><expr><name><name pos:line="22" pos:column="17">queue<pos:position pos:line="22" pos:column="22"/></name><operator pos:line="22" pos:column="22">.<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="23">compare<pos:position pos:line="22" pos:column="30"/></name></name> <operator pos:line="22" pos:column="31">=<pos:position pos:line="22" pos:column="32"/></operator> <name pos:line="22" pos:column="33">compare_commits_by_commit_date<pos:position pos:line="22" pos:column="63"/></name></expr>;<pos:position pos:line="22" pos:column="64"/></expr_stmt>
		<break pos:line="23" pos:column="17">break;<pos:position pos:line="23" pos:column="23"/></break>
	<case pos:line="24" pos:column="9">case <expr><name pos:line="24" pos:column="14">REV_SORT_BY_AUTHOR_DATE<pos:position pos:line="24" pos:column="37"/></name></expr>:<pos:position pos:line="24" pos:column="38"/></case>
		<expr_stmt><expr><call><name pos:line="25" pos:column="17">init_author_date_slab<pos:position pos:line="25" pos:column="38"/></name><argument_list pos:line="25" pos:column="38">(<argument><expr><operator pos:line="25" pos:column="39">&amp;<pos:position pos:line="25" pos:column="44"/></operator><name pos:line="25" pos:column="40">author_date<pos:position pos:line="25" pos:column="51"/></name></expr></argument>)<pos:position pos:line="25" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="53"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="26" pos:column="17">queue<pos:position pos:line="26" pos:column="22"/></name><operator pos:line="26" pos:column="22">.<pos:position pos:line="26" pos:column="23"/></operator><name pos:line="26" pos:column="23">compare<pos:position pos:line="26" pos:column="30"/></name></name> <operator pos:line="26" pos:column="31">=<pos:position pos:line="26" pos:column="32"/></operator> <name pos:line="26" pos:column="33">compare_commits_by_author_date<pos:position pos:line="26" pos:column="63"/></name></expr>;<pos:position pos:line="26" pos:column="64"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="27" pos:column="17">queue<pos:position pos:line="27" pos:column="22"/></name><operator pos:line="27" pos:column="22">.<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="23">cb_data<pos:position pos:line="27" pos:column="30"/></name></name> <operator pos:line="27" pos:column="31">=<pos:position pos:line="27" pos:column="32"/></operator> <operator pos:line="27" pos:column="33">&amp;<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="34">author_date<pos:position pos:line="27" pos:column="45"/></name></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>
		<break pos:line="28" pos:column="17">break;<pos:position pos:line="28" pos:column="23"/></break>
	}<pos:position pos:line="29" pos:column="10"/></block></switch>

	<comment type="block" pos:line="31" pos:column="9">/* Mark them and clear the indegree */</comment>
	<for pos:line="32" pos:column="9">for <control pos:line="32" pos:column="13">(<init><expr><name pos:line="32" pos:column="14">next<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">=<pos:position pos:line="32" pos:column="20"/></operator> <name pos:line="32" pos:column="21">orig<pos:position pos:line="32" pos:column="25"/></name></expr>;<pos:position pos:line="32" pos:column="26"/></init> <condition><expr><name pos:line="32" pos:column="27">next<pos:position pos:line="32" pos:column="31"/></name></expr>;<pos:position pos:line="32" pos:column="32"/></condition> <incr><expr><name pos:line="32" pos:column="33">next<pos:position pos:line="32" pos:column="37"/></name> <operator pos:line="32" pos:column="38">=<pos:position pos:line="32" pos:column="39"/></operator> <name><name pos:line="32" pos:column="40">next<pos:position pos:line="32" pos:column="44"/></name><operator pos:line="32" pos:column="44">-&gt;<pos:position pos:line="32" pos:column="49"/></operator><name pos:line="32" pos:column="46">next<pos:position pos:line="32" pos:column="50"/></name></name></expr></incr>)<pos:position pos:line="32" pos:column="51"/></control> <block pos:line="32" pos:column="52">{
		<decl_stmt><decl><type><name><name pos:line="33" pos:column="17">struct<pos:position pos:line="33" pos:column="23"/></name> <name pos:line="33" pos:column="24">commit<pos:position pos:line="33" pos:column="30"/></name></name> <modifier pos:line="33" pos:column="31">*<pos:position pos:line="33" pos:column="32"/></modifier></type><name pos:line="33" pos:column="32">commit<pos:position pos:line="33" pos:column="38"/></name> <init pos:line="33" pos:column="39">= <expr><name><name pos:line="33" pos:column="41">next<pos:position pos:line="33" pos:column="45"/></name><operator pos:line="33" pos:column="45">-&gt;<pos:position pos:line="33" pos:column="50"/></operator><name pos:line="33" pos:column="47">item<pos:position pos:line="33" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="33" pos:column="52"/></decl_stmt>
		<expr_stmt><expr><operator pos:line="34" pos:column="17">*<pos:position pos:line="34" pos:column="18"/></operator><operator pos:line="34" pos:column="18">(<pos:position pos:line="34" pos:column="19"/></operator><call><name pos:line="34" pos:column="19">indegree_slab_at<pos:position pos:line="34" pos:column="35"/></name><argument_list pos:line="34" pos:column="35">(<argument><expr><operator pos:line="34" pos:column="36">&amp;<pos:position pos:line="34" pos:column="41"/></operator><name pos:line="34" pos:column="37">indegree<pos:position pos:line="34" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="47">commit<pos:position pos:line="34" pos:column="53"/></name></expr></argument>)<pos:position pos:line="34" pos:column="54"/></argument_list></call><operator pos:line="34" pos:column="54">)<pos:position pos:line="34" pos:column="55"/></operator> <operator pos:line="34" pos:column="56">=<pos:position pos:line="34" pos:column="57"/></operator> <literal type="number" pos:line="34" pos:column="58">1<pos:position pos:line="34" pos:column="59"/></literal></expr>;<pos:position pos:line="34" pos:column="60"/></expr_stmt>
		<comment type="block" pos:line="35" pos:column="17">/* also record the author dates, if needed */</comment>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">sort_order<pos:position pos:line="36" pos:column="31"/></name> <operator pos:line="36" pos:column="32">==<pos:position pos:line="36" pos:column="34"/></operator> <name pos:line="36" pos:column="35">REV_SORT_BY_AUTHOR_DATE<pos:position pos:line="36" pos:column="58"/></name></expr>)<pos:position pos:line="36" pos:column="59"/></condition><then pos:line="36" pos:column="59">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="25">record_author_date<pos:position pos:line="37" pos:column="43"/></name><argument_list pos:line="37" pos:column="43">(<argument><expr><operator pos:line="37" pos:column="44">&amp;<pos:position pos:line="37" pos:column="49"/></operator><name pos:line="37" pos:column="45">author_date<pos:position pos:line="37" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="58">commit<pos:position pos:line="37" pos:column="64"/></name></expr></argument>)<pos:position pos:line="37" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="66"/></expr_stmt></block></then></if>
	}<pos:position pos:line="38" pos:column="10"/></block></for>

	<comment type="block" pos:line="40" pos:column="9">/* update the indegree */</comment>
	<for pos:line="41" pos:column="9">for <control pos:line="41" pos:column="13">(<init><expr><name pos:line="41" pos:column="14">next<pos:position pos:line="41" pos:column="18"/></name> <operator pos:line="41" pos:column="19">=<pos:position pos:line="41" pos:column="20"/></operator> <name pos:line="41" pos:column="21">orig<pos:position pos:line="41" pos:column="25"/></name></expr>;<pos:position pos:line="41" pos:column="26"/></init> <condition><expr><name pos:line="41" pos:column="27">next<pos:position pos:line="41" pos:column="31"/></name></expr>;<pos:position pos:line="41" pos:column="32"/></condition> <incr><expr><name pos:line="41" pos:column="33">next<pos:position pos:line="41" pos:column="37"/></name> <operator pos:line="41" pos:column="38">=<pos:position pos:line="41" pos:column="39"/></operator> <name><name pos:line="41" pos:column="40">next<pos:position pos:line="41" pos:column="44"/></name><operator pos:line="41" pos:column="44">-&gt;<pos:position pos:line="41" pos:column="49"/></operator><name pos:line="41" pos:column="46">next<pos:position pos:line="41" pos:column="50"/></name></name></expr></incr>)<pos:position pos:line="41" pos:column="51"/></control> <block pos:line="41" pos:column="52">{
		<decl_stmt><decl><type><name><name pos:line="42" pos:column="17">struct<pos:position pos:line="42" pos:column="23"/></name> <name pos:line="42" pos:column="24">commit_list<pos:position pos:line="42" pos:column="35"/></name></name> <modifier pos:line="42" pos:column="36">*<pos:position pos:line="42" pos:column="37"/></modifier></type><name pos:line="42" pos:column="37">parents<pos:position pos:line="42" pos:column="44"/></name> <init pos:line="42" pos:column="45">= <expr><name><name pos:line="42" pos:column="47">next<pos:position pos:line="42" pos:column="51"/></name><operator pos:line="42" pos:column="51">-&gt;<pos:position pos:line="42" pos:column="56"/></operator><name pos:line="42" pos:column="53">item<pos:position pos:line="42" pos:column="57"/></name><operator pos:line="42" pos:column="57">-&gt;<pos:position pos:line="42" pos:column="62"/></operator><name pos:line="42" pos:column="59">parents<pos:position pos:line="42" pos:column="66"/></name></name></expr></init></decl>;<pos:position pos:line="42" pos:column="67"/></decl_stmt>
		<while pos:line="43" pos:column="17">while <condition pos:line="43" pos:column="23">(<expr><name pos:line="43" pos:column="24">parents<pos:position pos:line="43" pos:column="31"/></name></expr>)<pos:position pos:line="43" pos:column="32"/></condition> <block pos:line="43" pos:column="33">{
			<decl_stmt><decl><type><name><name pos:line="44" pos:column="25">struct<pos:position pos:line="44" pos:column="31"/></name> <name pos:line="44" pos:column="32">commit<pos:position pos:line="44" pos:column="38"/></name></name> <modifier pos:line="44" pos:column="39">*<pos:position pos:line="44" pos:column="40"/></modifier></type><name pos:line="44" pos:column="40">parent<pos:position pos:line="44" pos:column="46"/></name> <init pos:line="44" pos:column="47">= <expr><name><name pos:line="44" pos:column="49">parents<pos:position pos:line="44" pos:column="56"/></name><operator pos:line="44" pos:column="56">-&gt;<pos:position pos:line="44" pos:column="61"/></operator><name pos:line="44" pos:column="58">item<pos:position pos:line="44" pos:column="62"/></name></name></expr></init></decl>;<pos:position pos:line="44" pos:column="63"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="45" pos:column="25">int<pos:position pos:line="45" pos:column="28"/></name> <modifier pos:line="45" pos:column="29">*<pos:position pos:line="45" pos:column="30"/></modifier></type><name pos:line="45" pos:column="30">pi<pos:position pos:line="45" pos:column="32"/></name> <init pos:line="45" pos:column="33">= <expr><call><name pos:line="45" pos:column="35">indegree_slab_at<pos:position pos:line="45" pos:column="51"/></name><argument_list pos:line="45" pos:column="51">(<argument><expr><operator pos:line="45" pos:column="52">&amp;<pos:position pos:line="45" pos:column="57"/></operator><name pos:line="45" pos:column="53">indegree<pos:position pos:line="45" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="63">parent<pos:position pos:line="45" pos:column="69"/></name></expr></argument>)<pos:position pos:line="45" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="45" pos:column="71"/></decl_stmt>

			<if pos:line="47" pos:column="25">if <condition pos:line="47" pos:column="28">(<expr><operator pos:line="47" pos:column="29">*<pos:position pos:line="47" pos:column="30"/></operator><name pos:line="47" pos:column="30">pi<pos:position pos:line="47" pos:column="32"/></name></expr>)<pos:position pos:line="47" pos:column="33"/></condition><then pos:line="47" pos:column="33">
				<block type="pseudo"><expr_stmt><expr><operator pos:line="48" pos:column="33">(<pos:position pos:line="48" pos:column="34"/></operator><operator pos:line="48" pos:column="34">*<pos:position pos:line="48" pos:column="35"/></operator><name pos:line="48" pos:column="35">pi<pos:position pos:line="48" pos:column="37"/></name><operator pos:line="48" pos:column="37">)<pos:position pos:line="48" pos:column="38"/></operator><operator pos:line="48" pos:column="38">++<pos:position pos:line="48" pos:column="40"/></operator></expr>;<pos:position pos:line="48" pos:column="41"/></expr_stmt></block></then></if>
			<expr_stmt><expr><name pos:line="49" pos:column="25">parents<pos:position pos:line="49" pos:column="32"/></name> <operator pos:line="49" pos:column="33">=<pos:position pos:line="49" pos:column="34"/></operator> <name><name pos:line="49" pos:column="35">parents<pos:position pos:line="49" pos:column="42"/></name><operator pos:line="49" pos:column="42">-&gt;<pos:position pos:line="49" pos:column="47"/></operator><name pos:line="49" pos:column="44">next<pos:position pos:line="49" pos:column="48"/></name></name></expr>;<pos:position pos:line="49" pos:column="49"/></expr_stmt>
		}<pos:position pos:line="50" pos:column="18"/></block></while>
	}<pos:position pos:line="51" pos:column="10"/></block></for>

	<comment type="block" pos:line="53" pos:column="9">/*
	 * find the tips
	 *
	 * tips are nodes not reachable from any other node in the list
	 *
	 * the tips serve as a starting set for the work queue.
	 */</comment>
	<for pos:line="60" pos:column="9">for <control pos:line="60" pos:column="13">(<init><expr><name pos:line="60" pos:column="14">next<pos:position pos:line="60" pos:column="18"/></name> <operator pos:line="60" pos:column="19">=<pos:position pos:line="60" pos:column="20"/></operator> <name pos:line="60" pos:column="21">orig<pos:position pos:line="60" pos:column="25"/></name></expr>;<pos:position pos:line="60" pos:column="26"/></init> <condition><expr><name pos:line="60" pos:column="27">next<pos:position pos:line="60" pos:column="31"/></name></expr>;<pos:position pos:line="60" pos:column="32"/></condition> <incr><expr><name pos:line="60" pos:column="33">next<pos:position pos:line="60" pos:column="37"/></name> <operator pos:line="60" pos:column="38">=<pos:position pos:line="60" pos:column="39"/></operator> <name><name pos:line="60" pos:column="40">next<pos:position pos:line="60" pos:column="44"/></name><operator pos:line="60" pos:column="44">-&gt;<pos:position pos:line="60" pos:column="49"/></operator><name pos:line="60" pos:column="46">next<pos:position pos:line="60" pos:column="50"/></name></name></expr></incr>)<pos:position pos:line="60" pos:column="51"/></control> <block pos:line="60" pos:column="52">{
		<decl_stmt><decl><type><name><name pos:line="61" pos:column="17">struct<pos:position pos:line="61" pos:column="23"/></name> <name pos:line="61" pos:column="24">commit<pos:position pos:line="61" pos:column="30"/></name></name> <modifier pos:line="61" pos:column="31">*<pos:position pos:line="61" pos:column="32"/></modifier></type><name pos:line="61" pos:column="32">commit<pos:position pos:line="61" pos:column="38"/></name> <init pos:line="61" pos:column="39">= <expr><name><name pos:line="61" pos:column="41">next<pos:position pos:line="61" pos:column="45"/></name><operator pos:line="61" pos:column="45">-&gt;<pos:position pos:line="61" pos:column="50"/></operator><name pos:line="61" pos:column="47">item<pos:position pos:line="61" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="61" pos:column="52"/></decl_stmt>

		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><operator pos:line="63" pos:column="21">*<pos:position pos:line="63" pos:column="22"/></operator><operator pos:line="63" pos:column="22">(<pos:position pos:line="63" pos:column="23"/></operator><call><name pos:line="63" pos:column="23">indegree_slab_at<pos:position pos:line="63" pos:column="39"/></name><argument_list pos:line="63" pos:column="39">(<argument><expr><operator pos:line="63" pos:column="40">&amp;<pos:position pos:line="63" pos:column="45"/></operator><name pos:line="63" pos:column="41">indegree<pos:position pos:line="63" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="51">commit<pos:position pos:line="63" pos:column="57"/></name></expr></argument>)<pos:position pos:line="63" pos:column="58"/></argument_list></call><operator pos:line="63" pos:column="58">)<pos:position pos:line="63" pos:column="59"/></operator> <operator pos:line="63" pos:column="60">==<pos:position pos:line="63" pos:column="62"/></operator> <literal type="number" pos:line="63" pos:column="63">1<pos:position pos:line="63" pos:column="64"/></literal></expr>)<pos:position pos:line="63" pos:column="65"/></condition><then pos:line="63" pos:column="65">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="25">prio_queue_put<pos:position pos:line="64" pos:column="39"/></name><argument_list pos:line="64" pos:column="39">(<argument><expr><operator pos:line="64" pos:column="40">&amp;<pos:position pos:line="64" pos:column="45"/></operator><name pos:line="64" pos:column="41">queue<pos:position pos:line="64" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="48">commit<pos:position pos:line="64" pos:column="54"/></name></expr></argument>)<pos:position pos:line="64" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="56"/></expr_stmt></block></then></if>
	}<pos:position pos:line="65" pos:column="10"/></block></for>

	<comment type="block" pos:line="67" pos:column="9">/*
	 * This is unfortunate; the initial tips need to be shown
	 * in the order given from the revision traversal machinery.
	 */</comment>
	<if pos:line="71" pos:column="9">if <condition pos:line="71" pos:column="12">(<expr><name pos:line="71" pos:column="13">sort_order<pos:position pos:line="71" pos:column="23"/></name> <operator pos:line="71" pos:column="24">==<pos:position pos:line="71" pos:column="26"/></operator> <name pos:line="71" pos:column="27">REV_SORT_IN_GRAPH_ORDER<pos:position pos:line="71" pos:column="50"/></name></expr>)<pos:position pos:line="71" pos:column="51"/></condition><then pos:line="71" pos:column="51">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="72" pos:column="17">prio_queue_reverse<pos:position pos:line="72" pos:column="35"/></name><argument_list pos:line="72" pos:column="35">(<argument><expr><operator pos:line="72" pos:column="36">&amp;<pos:position pos:line="72" pos:column="41"/></operator><name pos:line="72" pos:column="37">queue<pos:position pos:line="72" pos:column="42"/></name></expr></argument>)<pos:position pos:line="72" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="44"/></expr_stmt></block></then></if>

	<comment type="block" pos:line="74" pos:column="9">/* We no longer need the commit list */</comment>
	<expr_stmt><expr><call><name pos:line="75" pos:column="9">free_commit_list<pos:position pos:line="75" pos:column="25"/></name><argument_list pos:line="75" pos:column="25">(<argument><expr><name pos:line="75" pos:column="26">orig<pos:position pos:line="75" pos:column="30"/></name></expr></argument>)<pos:position pos:line="75" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="32"/></expr_stmt>

	<expr_stmt><expr><name pos:line="77" pos:column="9">pptr<pos:position pos:line="77" pos:column="13"/></name> <operator pos:line="77" pos:column="14">=<pos:position pos:line="77" pos:column="15"/></operator> <name pos:line="77" pos:column="16">list<pos:position pos:line="77" pos:column="20"/></name></expr>;<pos:position pos:line="77" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="78" pos:column="9">*<pos:position pos:line="78" pos:column="10"/></operator><name pos:line="78" pos:column="10">list<pos:position pos:line="78" pos:column="14"/></name> <operator pos:line="78" pos:column="15">=<pos:position pos:line="78" pos:column="16"/></operator> <name pos:line="78" pos:column="17">NULL<pos:position pos:line="78" pos:column="21"/></name></expr>;<pos:position pos:line="78" pos:column="22"/></expr_stmt>
	<while pos:line="79" pos:column="9">while <condition pos:line="79" pos:column="15">(<expr><operator pos:line="79" pos:column="16">(<pos:position pos:line="79" pos:column="17"/></operator><name pos:line="79" pos:column="17">commit<pos:position pos:line="79" pos:column="23"/></name> <operator pos:line="79" pos:column="24">=<pos:position pos:line="79" pos:column="25"/></operator> <call><name pos:line="79" pos:column="26">prio_queue_get<pos:position pos:line="79" pos:column="40"/></name><argument_list pos:line="79" pos:column="40">(<argument><expr><operator pos:line="79" pos:column="41">&amp;<pos:position pos:line="79" pos:column="46"/></operator><name pos:line="79" pos:column="42">queue<pos:position pos:line="79" pos:column="47"/></name></expr></argument>)<pos:position pos:line="79" pos:column="48"/></argument_list></call><operator pos:line="79" pos:column="48">)<pos:position pos:line="79" pos:column="49"/></operator> <operator pos:line="79" pos:column="50">!=<pos:position pos:line="79" pos:column="52"/></operator> <name pos:line="79" pos:column="53">NULL<pos:position pos:line="79" pos:column="57"/></name></expr>)<pos:position pos:line="79" pos:column="58"/></condition> <block pos:line="79" pos:column="59">{
		<decl_stmt><decl><type><name><name pos:line="80" pos:column="17">struct<pos:position pos:line="80" pos:column="23"/></name> <name pos:line="80" pos:column="24">commit_list<pos:position pos:line="80" pos:column="35"/></name></name> <modifier pos:line="80" pos:column="36">*<pos:position pos:line="80" pos:column="37"/></modifier></type><name pos:line="80" pos:column="37">parents<pos:position pos:line="80" pos:column="44"/></name></decl>;<pos:position pos:line="80" pos:column="45"/></decl_stmt>

		<for pos:line="82" pos:column="17">for <control pos:line="82" pos:column="21">(<init><expr><name pos:line="82" pos:column="22">parents<pos:position pos:line="82" pos:column="29"/></name> <operator pos:line="82" pos:column="30">=<pos:position pos:line="82" pos:column="31"/></operator> <name><name pos:line="82" pos:column="32">commit<pos:position pos:line="82" pos:column="38"/></name><operator pos:line="82" pos:column="38">-&gt;<pos:position pos:line="82" pos:column="43"/></operator><name pos:line="82" pos:column="40">parents<pos:position pos:line="82" pos:column="47"/></name></name></expr>;<pos:position pos:line="82" pos:column="48"/></init> <condition><expr><name pos:line="82" pos:column="49">parents<pos:position pos:line="82" pos:column="56"/></name></expr> ;<pos:position pos:line="82" pos:column="58"/></condition> <incr><expr><name pos:line="82" pos:column="59">parents<pos:position pos:line="82" pos:column="66"/></name> <operator pos:line="82" pos:column="67">=<pos:position pos:line="82" pos:column="68"/></operator> <name><name pos:line="82" pos:column="69">parents<pos:position pos:line="82" pos:column="76"/></name><operator pos:line="82" pos:column="76">-&gt;<pos:position pos:line="82" pos:column="81"/></operator><name pos:line="82" pos:column="78">next<pos:position pos:line="82" pos:column="82"/></name></name></expr></incr>)<pos:position pos:line="82" pos:column="83"/></control> <block pos:line="82" pos:column="84">{
			<decl_stmt><decl><type><name><name pos:line="83" pos:column="25">struct<pos:position pos:line="83" pos:column="31"/></name> <name pos:line="83" pos:column="32">commit<pos:position pos:line="83" pos:column="38"/></name></name> <modifier pos:line="83" pos:column="39">*<pos:position pos:line="83" pos:column="40"/></modifier></type><name pos:line="83" pos:column="40">parent<pos:position pos:line="83" pos:column="46"/></name> <init pos:line="83" pos:column="47">= <expr><name><name pos:line="83" pos:column="49">parents<pos:position pos:line="83" pos:column="56"/></name><operator pos:line="83" pos:column="56">-&gt;<pos:position pos:line="83" pos:column="61"/></operator><name pos:line="83" pos:column="58">item<pos:position pos:line="83" pos:column="62"/></name></name></expr></init></decl>;<pos:position pos:line="83" pos:column="63"/></decl_stmt>
			<decl_stmt><decl><type><name pos:line="84" pos:column="25">int<pos:position pos:line="84" pos:column="28"/></name> <modifier pos:line="84" pos:column="29">*<pos:position pos:line="84" pos:column="30"/></modifier></type><name pos:line="84" pos:column="30">pi<pos:position pos:line="84" pos:column="32"/></name> <init pos:line="84" pos:column="33">= <expr><call><name pos:line="84" pos:column="35">indegree_slab_at<pos:position pos:line="84" pos:column="51"/></name><argument_list pos:line="84" pos:column="51">(<argument><expr><operator pos:line="84" pos:column="52">&amp;<pos:position pos:line="84" pos:column="57"/></operator><name pos:line="84" pos:column="53">indegree<pos:position pos:line="84" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="63">parent<pos:position pos:line="84" pos:column="69"/></name></expr></argument>)<pos:position pos:line="84" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="84" pos:column="71"/></decl_stmt>

			<if pos:line="86" pos:column="25">if <condition pos:line="86" pos:column="28">(<expr><operator pos:line="86" pos:column="29">!<pos:position pos:line="86" pos:column="30"/></operator><operator pos:line="86" pos:column="30">*<pos:position pos:line="86" pos:column="31"/></operator><name pos:line="86" pos:column="31">pi<pos:position pos:line="86" pos:column="33"/></name></expr>)<pos:position pos:line="86" pos:column="34"/></condition><then pos:line="86" pos:column="34">
				<block type="pseudo"><continue pos:line="87" pos:column="33">continue;<pos:position pos:line="87" pos:column="42"/></continue></block></then></if>

			<comment type="block" pos:line="89" pos:column="25">/*
			 * parents are only enqueued for emission
			 * when all their children have been emitted thereby
			 * guaranteeing topological order.
			 */</comment>
			<if pos:line="94" pos:column="25">if <condition pos:line="94" pos:column="28">(<expr><operator pos:line="94" pos:column="29">--<pos:position pos:line="94" pos:column="31"/></operator><operator pos:line="94" pos:column="31">(<pos:position pos:line="94" pos:column="32"/></operator><operator pos:line="94" pos:column="32">*<pos:position pos:line="94" pos:column="33"/></operator><name pos:line="94" pos:column="33">pi<pos:position pos:line="94" pos:column="35"/></name><operator pos:line="94" pos:column="35">)<pos:position pos:line="94" pos:column="36"/></operator> <operator pos:line="94" pos:column="37">==<pos:position pos:line="94" pos:column="39"/></operator> <literal type="number" pos:line="94" pos:column="40">1<pos:position pos:line="94" pos:column="41"/></literal></expr>)<pos:position pos:line="94" pos:column="42"/></condition><then pos:line="94" pos:column="42">
				<block type="pseudo"><expr_stmt><expr><call><name pos:line="95" pos:column="33">prio_queue_put<pos:position pos:line="95" pos:column="47"/></name><argument_list pos:line="95" pos:column="47">(<argument><expr><operator pos:line="95" pos:column="48">&amp;<pos:position pos:line="95" pos:column="53"/></operator><name pos:line="95" pos:column="49">queue<pos:position pos:line="95" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="56">parent<pos:position pos:line="95" pos:column="62"/></name></expr></argument>)<pos:position pos:line="95" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="64"/></expr_stmt></block></then></if>
		}<pos:position pos:line="96" pos:column="18"/></block></for>
		<comment type="block" pos:line="97" pos:column="17">/*
		 * all children of commit have already been
		 * emitted. we can emit it now.
		 */</comment>
		<expr_stmt><expr><operator pos:line="101" pos:column="17">*<pos:position pos:line="101" pos:column="18"/></operator><operator pos:line="101" pos:column="18">(<pos:position pos:line="101" pos:column="19"/></operator><call><name pos:line="101" pos:column="19">indegree_slab_at<pos:position pos:line="101" pos:column="35"/></name><argument_list pos:line="101" pos:column="35">(<argument><expr><operator pos:line="101" pos:column="36">&amp;<pos:position pos:line="101" pos:column="41"/></operator><name pos:line="101" pos:column="37">indegree<pos:position pos:line="101" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="47">commit<pos:position pos:line="101" pos:column="53"/></name></expr></argument>)<pos:position pos:line="101" pos:column="54"/></argument_list></call><operator pos:line="101" pos:column="54">)<pos:position pos:line="101" pos:column="55"/></operator> <operator pos:line="101" pos:column="56">=<pos:position pos:line="101" pos:column="57"/></operator> <literal type="number" pos:line="101" pos:column="58">0<pos:position pos:line="101" pos:column="59"/></literal></expr>;<pos:position pos:line="101" pos:column="60"/></expr_stmt>

		<expr_stmt><expr><name pos:line="103" pos:column="17">pptr<pos:position pos:line="103" pos:column="21"/></name> <operator pos:line="103" pos:column="22">=<pos:position pos:line="103" pos:column="23"/></operator> <operator pos:line="103" pos:column="24">&amp;<pos:position pos:line="103" pos:column="29"/></operator><call><name pos:line="103" pos:column="25">commit_list_insert<pos:position pos:line="103" pos:column="43"/></name><argument_list pos:line="103" pos:column="43">(<argument><expr><name pos:line="103" pos:column="44">commit<pos:position pos:line="103" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="52">pptr<pos:position pos:line="103" pos:column="56"/></name></expr></argument>)<pos:position pos:line="103" pos:column="57"/></argument_list></call><operator pos:line="103" pos:column="57">-&gt;<pos:position pos:line="103" pos:column="62"/></operator><name pos:line="103" pos:column="59">next<pos:position pos:line="103" pos:column="63"/></name></expr>;<pos:position pos:line="103" pos:column="64"/></expr_stmt>
	}<pos:position pos:line="104" pos:column="10"/></block></while>

	<expr_stmt><expr><call><name pos:line="106" pos:column="9">clear_indegree_slab<pos:position pos:line="106" pos:column="28"/></name><argument_list pos:line="106" pos:column="28">(<argument><expr><operator pos:line="106" pos:column="29">&amp;<pos:position pos:line="106" pos:column="34"/></operator><name pos:line="106" pos:column="30">indegree<pos:position pos:line="106" pos:column="38"/></name></expr></argument>)<pos:position pos:line="106" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="40"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="107" pos:column="9">clear_prio_queue<pos:position pos:line="107" pos:column="25"/></name><argument_list pos:line="107" pos:column="25">(<argument><expr><operator pos:line="107" pos:column="26">&amp;<pos:position pos:line="107" pos:column="31"/></operator><name pos:line="107" pos:column="27">queue<pos:position pos:line="107" pos:column="32"/></name></expr></argument>)<pos:position pos:line="107" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="34"/></expr_stmt>
	<if pos:line="108" pos:column="9">if <condition pos:line="108" pos:column="12">(<expr><name pos:line="108" pos:column="13">sort_order<pos:position pos:line="108" pos:column="23"/></name> <operator pos:line="108" pos:column="24">==<pos:position pos:line="108" pos:column="26"/></operator> <name pos:line="108" pos:column="27">REV_SORT_BY_AUTHOR_DATE<pos:position pos:line="108" pos:column="50"/></name></expr>)<pos:position pos:line="108" pos:column="51"/></condition><then pos:line="108" pos:column="51">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="109" pos:column="17">clear_author_date_slab<pos:position pos:line="109" pos:column="39"/></name><argument_list pos:line="109" pos:column="39">(<argument><expr><operator pos:line="109" pos:column="40">&amp;<pos:position pos:line="109" pos:column="45"/></operator><name pos:line="109" pos:column="41">author_date<pos:position pos:line="109" pos:column="52"/></name></expr></argument>)<pos:position pos:line="109" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="54"/></expr_stmt></block></then></if>
}<pos:position pos:line="110" pos:column="2"/></block></function></unit>
